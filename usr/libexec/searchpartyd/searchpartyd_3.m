uint64_t sub_100130DAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void **aBlock;
  uint64_t v77;
  uint64_t (*v78)(uint64_t);
  void *v79;
  uint64_t (*v80)();
  void *v81;
  v67 = a1;
  v68 = a2;
  v73 = type metadata accessor for DispatchWorkItemFlags(0LL);
  v71 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  v69 = (char *)&v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v74 = type metadata accessor for DispatchQoS(0LL);
  v72 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  v70 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v5 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  v65 = *(void *)(v5 - 8);
  v66 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v8 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  v9 = *(void *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  v14 = (char *)&v64 - v13;
  v15 = type metadata accessor for DispatchPredicate(0LL);
  v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  v64 = v2;
  v19 = *(void **)(v2 + 56);
  *v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  v21 = (*(uint64_t (**)(void *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }

  static SystemInfo.lockState.getter(v21);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))( v12,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v8);
  v22 = sub_100007864( (unint64_t *)&qword_1009A2650,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  v23 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v12, v8, v22);
  v24 = *(void (**)(char *, uint64_t))(v9 + 8);
  v24(v12, v8);
  v25 = ((uint64_t (*)(char *, uint64_t))v24)(v14, v8);
  if ((v23 & 1) != 0)
  {
    v9 = static os_log_type_t.error.getter(v25);
    if (qword_10099B708 == -1)
    {
LABEL_4:
      os_log(_:dso:log:_:_:)( v9,  &_mh_execute_header,  qword_100A2B018,  "searchForDetachedLocalBeacon call failed because we're beforeFirstUnlock state",  78LL,  2LL,  _swiftEmptyArrayStorage);
      sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
      v27 = v65;
      v26 = v66;
      (*(void (**)(char *, void, uint64_t))(v65 + 104))( v7,  enum case for DispatchQoS.QoSClass.default(_:),  v66);
      v28 = (void *)static OS_dispatch_queue.global(qos:)(v7);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v26);
      v29 = swift_allocObject(&unk_100940320, 32LL, 7LL);
      v30 = v68;
      *(void *)(v29 + 16) = v67;
      *(void *)(v29 + 24) = v30;
      v80 = sub_10015468C;
      v81 = (void *)v29;
      aBlock = _NSConcreteStackBlock;
      v77 = 1107296256LL;
      v31 = &unk_100940338;
LABEL_10:
      v78 = sub_1001C31E8;
      v79 = v31;
      v54 = _Block_copy(&aBlock);
      v55 = swift_retain();
      v56 = v70;
      static DispatchQoS.unspecified.getter(v55);
      v75 = _swiftEmptyArrayStorage;
      v57 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v58 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      v59 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      v60 = v69;
      v61 = v58;
      v62 = v73;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v75, v61, v59, v73, v57);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v56, v60, v54);
      _Block_release(v54);

      (*(void (**)(char *, uint64_t))(v71 + 8))(v60, v62);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v56, v74);
      return swift_release();
    }

uint64_t sub_1001314F4(void (*a1)(char *))
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for OwnedBeaconRecord(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  a1(v4);
  return sub_100015794((uint64_t)v4, (uint64_t *)&unk_1009A9C30);
}

uint64_t sub_100131594(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  v58 = a2;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v5);
  uint64_t v57 = (uint64_t)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v56 = (uint64_t)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  v55 = (char *)&v51 - v10;
  uint64_t v11 = sub_100004AEC(&qword_1009B53F0);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  v20 = (char *)&v51 - v19;
  v21 = sub_1005067E8();
  uint64_t v22 = v21[2];
  if (v22)
  {
    uint64_t v53 = v15;
    uint64_t v54 = a3;
    uint64_t v23 = sub_10001DC4C( (uint64_t)v21 + ((*(unsigned __int8 *)(v15 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80)),  (uint64_t)v20,  type metadata accessor for OwnedBeaconRecord);
    if (v22 == 1)
    {
      uint64_t v24 = swift_bridgeObjectRelease();
      uint64_t v25 = v14;
    }

    else
    {
      unsigned int v52 = static os_log_type_t.error.getter(v23);
      uint64_t v25 = v14;
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v51 = qword_100A2B018;
      uint64_t v33 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v34 = swift_allocObject(v33, 112LL, 7LL);
      *(_OWORD *)(v34 + 16) = xmmword_1007E4750;
      sub_100626750(v13);
      uint64_t v35 = String.init<A>(describing:)(v13, v11);
      uint64_t v37 = v36;
      *(void *)(v34 + 56) = &type metadata for String;
      *(void *)(v34 + 64) = sub_1000226F4();
      *(void *)(v34 + 32) = v35;
      *(void *)(v34 + 40) = v37;
      swift_bridgeObjectRelease();
      *(void *)(v34 + 96) = &type metadata for Int;
      *(void *)(v34 + 104) = &protocol witness table for Int;
      *(void *)(v34 + 72) = v22;
      os_log(_:dso:log:_:_:)( v52,  &_mh_execute_header,  v51,  "Multiple beaconRecords found matching stableIdentifer of %@: %ld",  64LL,  2LL,  v34);
      uint64_t v24 = swift_bridgeObjectRelease();
    }

    uint64_t v38 = static os_log_type_t.default.getter(v24);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v39 = qword_100A2B018;
    uint64_t v40 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v41 = swift_allocObject(v40, 72LL, 7LL);
    *(_OWORD *)(v41 + 16) = xmmword_1007E67D0;
    sub_10001DC4C((uint64_t)v20, (uint64_t)v18, type metadata accessor for OwnedBeaconRecord);
    uint64_t v42 = String.init<A>(describing:)(v18, v25);
    uint64_t v44 = v43;
    *(void *)(v41 + 56) = &type metadata for String;
    *(void *)(v41 + 64) = sub_1000226F4();
    *(void *)(v41 + 32) = v42;
    *(void *)(v41 + 40) = v44;
    os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, v39, "Found detached local beacon: %@", 31LL, 2LL, v41);
    swift_bridgeObjectRelease();
    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    v45 = &v20[*(int *)(v25 + 20)];
    uint64_t v46 = type metadata accessor for UUID(0LL);
    uint64_t v47 = *(void *)(v46 - 8);
    uint64_t v48 = (uint64_t)v55;
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v55, v45, v46);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v47 + 56))(v48, 0LL, 1LL, v46);
    sub_100024954();
    uint64_t v49 = v56;
    sub_10001581C(v48, v56, &qword_10099D8A0);
    sub_10061FEF4(v49);
    swift_release();
    sub_100015794(v48, &qword_10099D8A0);
    uint64_t v50 = v57;
    sub_10001DC4C((uint64_t)v20, v57, type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v53 + 56))(v50, 0LL, 1LL, v25);
    v58(v50);
    sub_100015794(v50, (uint64_t *)&unk_1009A9C30);
    return sub_100018C68((uint64_t)v20, type metadata accessor for OwnedBeaconRecord);
  }

  else
  {
    uint64_t v26 = swift_bridgeObjectRelease();
    __chkstk_darwin(v26);
    *(&v51 - 2) = a1;
    *(&v51 - 1) = v27;
    uint64_t v28 = sub_100004AEC(&qword_1009A2658);
    OS_dispatch_queue.sync<A>(execute:)(sub_1001538A4, &v51 - 4, v28);
    uint64_t v29 = swift_allocObject(&unk_100940370, 32LL, 7LL);
    v30 = v58;
    *(void *)(v29 + 16) = v58;
    *(void *)(v29 + 24) = a3;
    swift_retain();
    Future.addFailure(block:)(sub_1001538BC, v29);
    swift_release();
    swift_release();
    uint64_t v31 = swift_allocObject(&unk_100940398, 32LL, 7LL);
    *(void *)(v31 + 16) = v30;
    *(void *)(v31 + 24) = a3;
    swift_retain();
    Future.addSuccess(block:)(sub_1001538C4, v31);
    swift_release();
    swift_release();
    return swift_release();
  }

uint64_t sub_100131B3C(uint64_t a1, void (*a2)(char *))
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = static os_log_type_t.error.getter(v5);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v9 = qword_100A2B018;
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v11 = swift_allocObject(v10, 72LL, 7LL);
  *(_OWORD *)(v11 + 16) = xmmword_1007E67D0;
  uint64_t v19 = a1;
  swift_errorRetain(a1);
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  uint64_t v13 = String.init<A>(describing:)(&v19, v12);
  uint64_t v15 = v14;
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = sub_1000226F4();
  *(void *)(v11 + 32) = v13;
  *(void *)(v11 + 40) = v15;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "createLocalPairingIfSupported error: %@", 39LL, 2LL, v11);
  swift_bridgeObjectRelease();
  uint64_t v16 = type metadata accessor for OwnedBeaconRecord(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v7, 1LL, 1LL, v16);
  a2(v7);
  return sub_100015794((uint64_t)v7, (uint64_t *)&unk_1009A9C30);
}

uint64_t sub_100131CC8(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v40 = a3;
  uint64_t v41 = a2;
  uint64_t v4 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v37 = (uint64_t)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v38 = (char *)&v36 - v8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v39 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v36 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v36 - v18;
  uint64_t v20 = static os_log_type_t.default.getter(v17);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v21 = qword_100A2B018;
  uint64_t v22 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v23 = swift_allocObject(v22, 72LL, 7LL);
  *(_OWORD *)(v23 + 16) = xmmword_1007E67D0;
  sub_10001581C(a1, (uint64_t)v19, (uint64_t *)&unk_1009A9C30);
  uint64_t v24 = String.init<A>(describing:)(v19, v13);
  uint64_t v26 = v25;
  *(void *)(v23 + 56) = &type metadata for String;
  *(void *)(v23 + 64) = sub_1000226F4();
  *(void *)(v23 + 32) = v24;
  *(void *)(v23 + 40) = v26;
  os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Found local beacon : %@", 23LL, 2LL, v23);
  swift_bridgeObjectRelease();
  sub_10001581C(a1, (uint64_t)v16, (uint64_t *)&unk_1009A9C30);
  uint64_t v27 = type metadata accessor for OwnedBeaconRecord(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48LL))(v16, 1LL, v27) == 1)
  {
    sub_100015794((uint64_t)v16, (uint64_t *)&unk_1009A9C30);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v10, 1LL, 1LL, v11);
LABEL_6:
    sub_100015794((uint64_t)v10, &qword_10099D8A0);
    return v41(a1);
  }

  uint64_t v28 = &v16[*(int *)(v27 + 20)];
  uint64_t v29 = v39;
  v30 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
  v30(v10, v28, v11);
  sub_100018C68((uint64_t)v16, type metadata accessor for OwnedBeaconRecord);
  uint64_t v31 = *(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56);
  v31(v10, 0LL, 1LL, v11);
  v32 = v36;
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v36, v10, v11);
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  uint64_t v33 = (uint64_t)v38;
  v30(v38, v32, v11);
  v31((char *)v33, 0LL, 1LL, v11);
  sub_100024954();
  uint64_t v34 = v37;
  sub_10001581C(v33, v37, &qword_10099D8A0);
  sub_10061FEF4(v34);
  swift_release();
  sub_100015794(v33, &qword_10099D8A0);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v11);
  return v41(a1);
}

uint64_t sub_1001320A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v2);
  uint64_t v4 = (void *)((char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v9 = v13[1];
  uint64_t KeyPath = swift_getKeyPath(&unk_1007EDF48);
  sub_1006A1FC0(KeyPath, v9, v4);
  swift_bridgeObjectRelease();
  swift_release();
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
  {
    sub_100015794((uint64_t)v4, &qword_10099D8A0);
    uint64_t v11 = type metadata accessor for OwnedBeaconRecord(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))( a1,  1LL,  1LL,  v11);
  }

  else
  {
    (*(void (**)(char *, void *, uint64_t))(v6 + 32))(v8, v4, v5);
    sub_100504F30((uint64_t)v8, a1);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

uint64_t sub_100132258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch(sub_100132274, 0LL, 0LL);
}

uint64_t sub_100132274()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = swift_allocObject(&unk_100940078, 32LL, 7LL);
  v0[5] = v2;
  *(void *)(v2 + 16) = &unk_1009A2608;
  *(void *)(v2 + 24) = v1;
  uint64_t v3 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc(v3);
  v0[6] = v4;
  uint64_t v5 = sub_100004AEC(&qword_1009AE4D0);
  void *v4 = v0;
  v4[1] = sub_100132334;
  return withTimeout<A>(_:block:)(v0 + 7, 8000000000000000000LL, 0LL, &unk_1009A2618, v2, v5);
}

uint64_t sub_100132334()
{
  if (v0)
  {
    swift_errorRelease(v0);
    swift_release();
    uint64_t v2 = sub_100154690;
  }

  else
  {
    swift_release();
    uint64_t v2 = sub_1001323B0;
  }

  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1001323B0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001323E4(uint64_t a1)
{
  *(void *)(v1 + 136) = a1;
  return swift_task_switch(sub_1001323FC, 0LL, 0LL);
}

uint64_t sub_1001323FC()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C908 + dword_10099C908);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099C90C);
    *(void *)(v0 + 144) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1001324FC;
    return v4();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1001324FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144LL);
  *(void *)(*(void *)v1 + 152LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100132558, 0LL, 0LL);
}

uint64_t sub_100132558()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[17];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  uint64_t v3 = swift_allocObject(&unk_1009400A0, 32LL, 7LL);
  v0[20] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  uint64_t v4 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v0[21] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100132604;
  return unsafeBlocking<A>(_:)(v5, sub_100153670, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100132604()
{
  return swift_task_switch(sub_100132660, 0LL, 0LL);
}

uint64_t sub_100132660()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1009A2624);
  *(void *)(v0 + 176) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001326C0;
  v1[16] = *(void *)(v0 + 136);
  return swift_task_switch(sub_100132F2C, 0LL, 0LL);
}

uint64_t sub_1001326C0()
{
  return swift_task_switch(sub_100132714, 0LL, 0LL);
}

uint64_t sub_100132714()
{
  if (qword_10099B300 != -1) {
    swift_once(&qword_10099B300, sub_1003459EC);
  }
  sub_100022898(0LL, (unint64_t *)&qword_1009AC0D0, &OBJC_CLASS___NSFileManager_ptr);
  if (qword_10099B308 != -1) {
    swift_once(&qword_10099B308, sub_100345AC4);
  }
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A2A6D0);
  uint64_t result = static NSFileManager.removeDirectory(url:)(v2);
  uint64_t v4 = *(void *)(*(void *)(v0 + 136) + 40LL);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 344);
    uint64_t v6 = qword_10099B860;
    swift_retain();
    if (v6 != -1) {
      swift_once(&qword_10099B860, sub_1006BFFC8);
    }
    uint64_t v7 = sub_10000A720(v1, (uint64_t)qword_1009BC2A8);
    static NSFileManager.removeDirectory(url:)(v7);
    uint64_t v8 = *(void *)(v0 + 152);
    swift_release(v5);
    swift_release(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100132B80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 256);
  sub_1004E89B0();
  while (1)
  {
    uint64_t v14 = *(void *)(v4 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
    uint64_t v15 = type metadata accessor for BeaconKeyManager(0LL);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10014F014, v4, v14, (char *)&type metadata for () + 8, v15);
    type metadata accessor for Transaction(0LL);
    static Transaction.named<A>(_:with:)("BeaconKeyManager.deleteAllKeyMaps", 33LL, 2LL, sub_100153678);
    uint64_t v16 = swift_release();
    if (a2) {
      uint64_t v16 = sub_100104784();
    }
    sub_1004B5D04(v16);
    if (qword_10099B088 != -1) {
      swift_once(&qword_10099B088, sub_1000432EC);
    }
    OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_100153690,  0LL,  qword_10099DF60,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
    uint64_t v17 = *(dispatch_queue_s **)(a1 + 56);
    uint64_t v18 = swift_allocObject(&unk_1009400C8, 32LL, 7LL);
    *(void *)(v18 + 16) = sub_1001536A4;
    *(void *)(v18 + 24) = a1;
    v24[3] = sub_100154688;
    uint64_t v25 = v18;
    aBlock = _NSConcreteStackBlock;
    v24[0] = 1107296256LL;
    v24[1] = sub_100025BD4;
    v24[2] = &unk_1009400E0;
    uint64_t v19 = _Block_copy(&aBlock);
    uint64_t v4 = v25;
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v17, v19);
    _Block_release(v19);
    uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v18, "", 152LL, 893LL, 54LL, 1LL);
    swift_release();
    uint64_t result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      break;
    }
    __break(1u);
    swift_once(&qword_10099B6E8, sub_100651020);
    uint64_t v5 = type metadata accessor for Logger(0LL);
    sub_10000A720(v5, (uint64_t)qword_100A2AFE8);
    swift_errorRetain(isEscapingClosureAtFileLocation);
    uint64_t v6 = swift_errorRetain(isEscapingClosureAtFileLocation);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v22 = a2;
      uint64_t v10 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v9 = 138412290;
      swift_errorRetain(isEscapingClosureAtFileLocation);
      uint64_t v11 = _swift_stdlib_bridgeErrorToNSError(isEscapingClosureAtFileLocation);
      aBlock = (void **)v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v24, v9 + 4, v9 + 12);
      *uint64_t v10 = v11;
      swift_errorRelease(isEscapingClosureAtFileLocation);
      swift_errorRelease(isEscapingClosureAtFileLocation);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Error purging beacon store files: %@.", v9, 0xCu);
      uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v10, 1LL, v12);
      uint64_t v13 = v10;
      a2 = v22;
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_slowDealloc(v9, -1LL, -1LL);

      swift_errorRelease(isEscapingClosureAtFileLocation);
    }

    else
    {
      swift_errorRelease(isEscapingClosureAtFileLocation);
      swift_errorRelease(isEscapingClosureAtFileLocation);
      swift_errorRelease(isEscapingClosureAtFileLocation);
    }
  }

  return result;
}

uint64_t sub_100132F14()
{
  *(void *)(v1 + 128) = v0;
  return swift_task_switch(sub_100132F2C, 0LL, 0LL);
}

uint64_t sub_100132F2C()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C8D8 + dword_10099C8D8);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099C8DC);
    *(void *)(v0 + 136) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10013302C;
    return v4();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10013302C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 136LL);
  *(void *)(*(void *)v1 + 144LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100133088, 0LL, 0LL);
}

uint64_t sub_100133088()
{
  uint64_t v1 = *(void *)(v0 + 144);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (v1) {
    return swift_task_switch(sub_1001330E0, *(void *)(v0 + 144), 0LL);
  }
  else {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001330E0()
{
  *(void *)(v0 + 152) = 0LL;
  return swift_task_switch(sub_100133140, 0LL, 0LL);
}

uint64_t sub_100133140()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100133170()
{
  if (qword_10099B4D8 != -1) {
    swift_once(&qword_10099B4D8, sub_1004AB71C);
  }
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2AB18);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 152);
  if (v6)
  {
    os_log_type_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)os_log_type_t v8 = 138412290;
    uint64_t v10 = _convertErrorToNSError(_:)(v7);
    *(void *)(v0 + 120) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v8 + 4, v8 + 12);
    *uint64_t v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error purging StandaloneBeaconService: %@", v8, 0xCu);
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_release();

    swift_errorRelease(v7);
  }

  else
  {
    swift_release();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100133348(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  os_log_type_t v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 24) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1001333A0;
  return v5();
}

uint64_t sub_1001333A0()
{
  uint64_t v1 = *(_BYTE **)(*v0 + 16);
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 24));
  *uint64_t v1 = 0;
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1001333F0()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v17 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B088 != -1) {
    swift_once(&qword_10099B088, sub_1000432EC);
  }
  OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_100153690,  0LL,  qword_10099DF60,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
  uint64_t v8 = *(void *)(v0 + 256);
  uint64_t v9 = swift_allocObject(&unk_100940140, 32LL, 7LL);
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = v0;
  aBlock[4] = sub_100153748;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100940158;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v11 = swift_retain();
  static DispatchQoS.unspecified.getter(v11);
  uint64_t v18 = _swiftEmptyArrayStorage;
  uint64_t v12 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v14 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v13, v14, v1, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v7, v3, v10);
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return swift_release();
}

void sub_100133638(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTime(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v32 - v9;
  uint64_t v11 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = dispatch_group_create();
  dispatch_group_enter(v14);
  uint64_t v15 = swift_allocObject(&unk_100940190, 32LL, 7LL);
  *(void *)(v15 + 16) = v14;
  *(void *)(v15 + 24) = a2;
  uint64_t v16 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v13, 1LL, 1LL, v16);
  uint64_t v17 = (void *)swift_allocObject(&unk_1009401B8, 56LL, 7LL);
  v17[2] = 0LL;
  v17[3] = 0LL;
  v17[4] = a1;
  v17[5] = sub_10015377C;
  v17[6] = v15;
  uint64_t v18 = v14;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1003EDB00((uint64_t)v13, (uint64_t)&unk_1009A2638, (uint64_t)v17);
  swift_release();
  swift_release();
  if (qword_10099B4D8 != -1) {
    swift_once(&qword_10099B4D8, sub_1004AB71C);
  }
  uint64_t v19 = type metadata accessor for Logger(0LL);
  uint64_t v20 = sub_10000A720(v19, (uint64_t)qword_100A2AB18);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Waiting for manateeAvailable check to complete.", v23, 2u);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  static DispatchTime.now()(v24);
  + infix(_:_:)(v8, 240.0);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v5 + 8);
  v25(v8, v4);
  uint64_t v26 = OS_dispatch_group.wait(timeout:)(v10) & 1;
  v25(v10, v4);
  uint64_t v27 = static DispatchTimeoutResult.== infix(_:_:)(v26, 1LL);
  if ((v27 & 1) != 0)
  {
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.error.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Timed out waiting for manateeAvailable.", v30, 2u);
      swift_slowDealloc(v30, -1LL, -1LL);
      uint64_t v31 = (os_log_s *)v18;
      uint64_t v18 = (dispatch_group_s *)v28;
    }

    else
    {
      uint64_t v31 = v28;
    }
  }
}

void sub_100133954(char a1, dispatch_group_s *a2)
{
  id v4 = [(id)objc_opt_self(ACAccountStore) defaultStore];
  if (!v4)
  {
    __break(1u);
    return;
  }

  uint64_t v5 = v4;
  id v6 = objc_msgSend(v4, "aa_primaryAppleAccount");

  if (qword_10099B4D8 != -1) {
    swift_once(&qword_10099B4D8, sub_1004AB71C);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_10000A720(v7, (uint64_t)qword_100A2AB18);
  id v8 = v6;
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v18 = a2;
    uint64_t v11 = swift_slowAlloc(28LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    v20[0] = v12;
    *(_DWORD *)uint64_t v11 = 136446722;
    if (v8) {
      uint64_t v13 = 0x6C696E2D746F6ELL;
    }
    else {
      uint64_t v13 = 7104878LL;
    }
    if (v8) {
      unint64_t v14 = 0xE700000000000000LL;
    }
    else {
      unint64_t v14 = 0xE300000000000000LL;
    }
    uint64_t v19 = sub_1003F11D4(v13, v14, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20, v11 + 4, v11 + 12);

    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2048;
    if (v8)
    {
      id v15 = sub_1001C577C();
    }

    else
    {
      id v15 = 0LL;
    }

    uint64_t v19 = (uint64_t)v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20, v11 + 14, v11 + 22);

    *(_WORD *)(v11 + 22) = 1024;
    LODWORD(v19) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, (char *)&v19 + 4, v11 + 24, v11 + 28);
    _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "primaryAccountModified account: %{public}s,      security: %lu with manatee enabled: %{BOOL}d.",  (uint8_t *)v11,  0x1Cu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    a2 = v18;
    if (!v8) {
      goto LABEL_18;
    }
  }

  else
  {

    if (!v8) {
      goto LABEL_18;
    }
  }

  id v16 = v8;
  id v17 = sub_1001C577C();

  if (v17 != (id)4) {
LABEL_18:
  }
    a1 = 0;
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  sub_100024954();
  sub_10061F6D4(v8 != 0LL, a1 & 1);
  swift_release();
  type metadata accessor for Transaction(0LL);
  static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.safelyReevaluateLocalBeaconing",  60LL,  2LL,  sub_100153838);

  dispatch_group_leave(a2);
}

void sub_100133CA4(uint64_t a1, int a2, void (*a3)(void), uint64_t a4)
{
  v73 = a3;
  uint64_t v74 = a4;
  int v71 = a2;
  uint64_t v6 = sub_100004AEC(&qword_1009AA830);
  __chkstk_darwin(v6);
  id v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v70 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v13 = __chkstk_darwin(v70);
  uint64_t v69 = (uint64_t)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  id v16 = (char *)&v68 - v15;
  uint64_t v17 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  os_log_type_t v22 = (char *)&v68 - v21;
  uint64_t v72 = v4;
  sub_100504C28(a1, (uint64_t)&v76);
  if (v77)
  {
    sub_100012EC0(&v76, (uint64_t)v78);
    sub_100013044((uint64_t)v78, (uint64_t)&v76);
    uint64_t v23 = sub_100004AEC(&qword_1009B0530);
    if (swift_dynamicCast(v22, &v76, v23, v17, 0LL))
    {
      uint64_t v24 = type metadata accessor for OwnedBeaconRecord;
      sub_10002218C((uint64_t)v22, (uint64_t)v20, type metadata accessor for OwnedBeaconRecord);
      sub_100135060((uint64_t)v20, v71 & 1, (uint64_t)v73, v74);
      uint64_t v25 = (uint64_t)v20;
    }

    else
    {
      uint64_t v41 = swift_dynamicCast(v16, &v76, v23, v70, 0LL);
      if (!(_DWORD)v41)
      {
        uint64_t v51 = static os_log_type_t.error.getter(v41);
        if (qword_10099B748 != -1) {
          swift_once(&qword_10099B748, sub_100651480);
        }
        uint64_t v52 = qword_100A2B058;
        uint64_t v53 = sub_100004AEC((uint64_t *)&unk_10099D740);
        uint64_t v54 = swift_allocObject(v53, 72LL, 7LL);
        *(_OWORD *)(v54 + 16) = xmmword_1007E67D0;
        sub_100013044((uint64_t)v78, (uint64_t)v75);
        uint64_t v55 = String.init<A>(describing:)(v75, v23);
        uint64_t v57 = v56;
        *(void *)(v54 + 56) = &type metadata for String;
        *(void *)(v54 + 64) = sub_1000226F4();
        *(void *)(v54 + 32) = v55;
        *(void *)(v54 + 40) = v57;
        os_log(_:dso:log:_:_:)(v51, &_mh_execute_header, v52, "Unhandled beacon type: %@", 25LL, 2LL, v54);
        swift_bridgeObjectRelease();
        unint64_t v58 = sub_10014A2C0();
        uint64_t v59 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v58, 0LL, 0LL);
        _BYTE *v60 = 3;
        v73();
        swift_errorRelease(v59);
        goto LABEL_18;
      }

      uint64_t v24 = type metadata accessor for SharedBeaconRecord;
      uint64_t v42 = v69;
      sub_10002218C((uint64_t)v16, v69, type metadata accessor for SharedBeaconRecord);
      sub_1001359BC(v42, (uint64_t)v73, v74);
      uint64_t v25 = v42;
    }

    sub_100018C68(v25, v24);
LABEL_18:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v78);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v76);
    return;
  }

  sub_100015794((uint64_t)&v76, (uint64_t *)&unk_1009A9C40);
  sub_10050F124(a1, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) != 1)
  {
    sub_10002218C((uint64_t)v8, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
    v78[0] = 0;
    sub_1001CC778();
    uint64_t v44 = v43;
    uint64_t v45 = v72;
    swift_retain();
    sub_100149D28(v44, v45, v78);
    swift_bridgeObjectRelease();
    uint64_t v46 = swift_release();
    int v47 = v78[0];
    uint64_t v48 = static os_log_type_t.default.getter(v46);
    if (v47 == 1)
    {
      if (qword_10099B798 != -1) {
        swift_once(&qword_10099B798, sub_100651870);
      }
      os_log(_:dso:log:_:_:)( v48,  &_mh_execute_header,  qword_100A2B0A8,  "Device may be already connected.",  32LL,  2LL,  _swiftEmptyArrayStorage);
      int v49 = v71 & 1;
      uint64_t v50 = (uint64_t)v12;
    }

    else
    {
      if (qword_10099B748 != -1) {
        swift_once(&qword_10099B748, sub_100651480);
      }
      uint64_t v61 = qword_100A2B058;
      uint64_t v62 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v63 = swift_allocObject(v62, 72LL, 7LL);
      *(_OWORD *)(v63 + 16) = xmmword_1007E67D0;
      *(void *)(v63 + 56) = &type metadata for Bool;
      *(void *)(v63 + 64) = &protocol witness table for Bool;
      char v64 = v71;
      *(_BYTE *)(v63 + 32) = v71 & 1;
      os_log(_:dso:log:_:_:)(v48, &_mh_execute_header, v61, "Device is not connected. Force [%d]", v68);
      swift_bridgeObjectRelease();
      if ((v64 & 1) == 0)
      {
        unint64_t v65 = sub_10014A2C0();
        uint64_t v66 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v65, 0LL, 0LL);
        _BYTE *v67 = 7;
        v73();
        swift_errorRelease(v66);
        goto LABEL_25;
      }

      uint64_t v50 = (uint64_t)v12;
      int v49 = 1;
    }

    sub_100135BA4(v50, v49, (uint64_t)v73, v74);
LABEL_25:
    sub_100018C68((uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
    return;
  }

  uint64_t v26 = sub_100015794((uint64_t)v8, &qword_1009AA830);
  uint64_t v27 = static os_log_type_t.error.getter(v26);
  if (qword_10099B748 != -1) {
    swift_once(&qword_10099B748, sub_100651480);
  }
  uint64_t v28 = qword_100A2B058;
  uint64_t v29 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v30 = swift_allocObject(v29, 72LL, 7LL);
  *(_OWORD *)(v30 + 16) = xmmword_1007E67D0;
  uint64_t v31 = type metadata accessor for UUID(0LL);
  uint64_t v32 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter(v31, v32);
  uint64_t v35 = v34;
  *(void *)(v30 + 56) = &type metadata for String;
  *(void *)(v30 + 64) = sub_1000226F4();
  *(void *)(v30 + 32) = v33;
  *(void *)(v30 + 40) = v35;
  os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v28, "Can't find beacon for uuid: %@", 30LL, 2LL, v30);
  swift_bridgeObjectRelease();
  type metadata accessor for SPOwnerSessionError(0LL);
  uint64_t v37 = v36;
  *(void *)&__int128 v76 = 2LL;
  unint64_t v38 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v39 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
  _BridgedStoredNSError.init(_:userInfo:)(v78, &v76, v38, v37, v39);
  uint64_t v40 = *(void **)v78;
  ((void (*)(void))v73)(*(void *)v78);
}

void sub_100134398(uint64_t a1, void (*a2)(void))
{
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v4) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease(a1);
    id v6 = 0LL;
    goto LABEL_12;
  }

  if (a1 < 0) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a1);
  if (!_CocoaArrayWrapper.endIndex.getter(v7)) {
    goto LABEL_11;
  }
LABEL_3:
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
    goto LABEL_6;
  }

  if (*(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    id v5 = *(id *)(a1 + 32);
LABEL_6:
    id v8 = v5;
    swift_bridgeObjectRelease(a1);
    id v6 = v8;
LABEL_12:
    id v9 = v6;
    a2();

    return;
  }

  __break(1u);
}

uint64_t sub_100134468@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v98 = a2;
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v4);
  unint64_t v92 = (unint64_t)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v93 = type metadata accessor for UUID(0LL);
  uint64_t v88 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  v87 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  v86 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v83 - v11;
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v99 = v103;
  uint64_t v13 = *(void *)(v2 + 256);
  uint64_t v14 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock;
  uint64_t v15 = *(void *)(v13 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  v91 = (unint64_t *)type metadata accessor for BeaconKeyManager(0LL);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10014F014, v13, v15, (char *)&type metadata for () + 8, v91);
  uint64_t v85 = a1 + *(int *)(v4 + 20);
  id v16 = (int *)v4;
  uint64_t v17 = sub_1007A50A4(v85);
  swift_release();
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v18(v12, a1 + v16[8], v7);
  v94 = v16;
  uint64_t v19 = (uint64_t *)(a1 + v16[13]);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  uint64_t v97 = v7;
  uint64_t v96 = v8;
  v95 = v12;
  if (!v17)
  {
    uint64_t v30 = v20;
    unint64_t v31 = v21;
    sub_10001736C(v20, v21);
    swift_bridgeObjectRelease();
    if (qword_10099B238 != -1) {
      swift_once(&qword_10099B238, sub_10028EB6C);
    }
    uint64_t v32 = type metadata accessor for Logger(0LL);
    sub_10000A720(v32, (uint64_t)qword_100A2A488);
    uint64_t v33 = a1;
    uint64_t v34 = v92;
    uint64_t v35 = sub_10001DC4C(v33, v92, type metadata accessor for OwnedBeaconRecord);
    uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v37 = static os_log_type_t.error.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = swift_slowAlloc(22LL, -1LL);
      uint64_t v39 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v103 = v39;
      *(_DWORD *)uint64_t v38 = 141558275;
      uint64_t v101 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v38 + 4, v38 + 12);
      *(_WORD *)(v38 + 12) = 2081;
      uint64_t v40 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(v93, v40);
      uint64_t v101 = sub_1003F11D4(v41, v42, (uint64_t *)&v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v38 + 14, v38 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68(v34, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "Unable to get basePrimaryKeyIndex for %{private,mask.hash}s",  (uint8_t *)v38,  0x16u);
      swift_arrayDestroy(v39, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1LL, -1LL);
      swift_slowDealloc(v38, -1LL, -1LL);
      sub_100016F9C(v30, v31);
    }

    else
    {
      sub_100016F9C(v30, v31);

      sub_100018C68(v34, type metadata accessor for OwnedBeaconRecord);
    }

    (*(void (**)(char *, uint64_t))(v96 + 8))(v95, v97);
    uint64_t v79 = v98;
    uint64_t v80 = type metadata accessor for OfflineFindingInfo(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56LL))(v79, 1LL, 1LL, v80);
    uint64_t v28 = 0LL;
    unint64_t v29 = 0xF000000000000000LL;
    return sub_1000182F0(v28, v29);
  }

  uint64_t v22 = v17;
  unint64_t v90 = v21;
  uint64_t v89 = v20;
  if (v17 == 1)
  {
    uint64_t v23 = (int **)(a1 + v94[9]);
    uint64_t v24 = *v23;
    unint64_t v25 = (unint64_t)v23[1];
    sub_10001736C(v20, v21);
    v94 = v24;
    sub_10001736C((uint64_t)v24, v25);
    uint64_t v26 = v99;
  }

  else
  {
    v84 = v18;
    uint64_t v43 = *(void *)(v13 + v14);
    uint64_t v44 = a1;
    sub_10001736C(v20, v21);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10014F014, v13, v43, (char *)&type metadata for () + 8, v91);
    v91 = &v83;
    unint64_t v92 = v103;
    uint64_t v45 = (uint64_t *)(a1 + v94[9]);
    uint64_t v46 = *v45;
    unint64_t v47 = v45[1];
    uint64_t v49 = *v19;
    unint64_t v48 = v19[1];
    uint64_t v50 = (uint64_t *)(v44 + v94[12]);
    uint64_t v52 = *v50;
    unint64_t v51 = v50[1];
    sub_10001736C(v46, v47);
    sub_10001736C(v46, v47);
    unint64_t v53 = v48;
    sub_10001736C(v49, v48);
    sub_10001736C(v52, v51);
    if (qword_10099B6A0 != -1) {
      swift_once(&qword_10099B6A0, sub_100626B90);
    }
    *(void *)&__int128 v103 = 0x7365547265646E75LL;
    *((void *)&v103 + 1) = 0xE900000000000074LL;
    SynchronousCache.cachedValue<A>(key:computeBlock:)(&v101, &v103, sub_10000A71C, 0LL, &type metadata for Bool);
    swift_bridgeObjectRelease();
    uint64_t v54 = sub_1004DA16C(v46, v47, v22);
    unint64_t v56 = v55;
    uint64_t v101 = v54;
    unint64_t v102 = v55;
    v94 = (int *)objc_autoreleasePoolPush();
    sub_10001736C(v54, v56);
    unint64_t v83 = v53;
    sub_1004DBF7C(v52, v51, v49, v53, v54, v56, 1, &v101, &v103);
    sub_100016F9C(v54, v56);
    unint64_t v81 = v51;
    v82 = (int *)v101;
    unint64_t v25 = v102;
    sub_10001736C(v101, v102);
    sub_10001736C((uint64_t)v82, v25);
    sub_1000182F0(0LL, 0xF000000000000000LL);
    sub_1001536B8((uint64_t *)&v103);
    sub_100016F9C((uint64_t)v82, v25);
    objc_autoreleasePoolPop(v94);
    v94 = v82;
    sub_100016F9C((uint64_t)v82, v25);
    sub_100016F9C(v46, v47);
    sub_100016F9C(v49, v83);
    sub_100016F9C(v52, v81);
    sub_100016F9C(v46, v47);
    swift_release();
    uint64_t v26 = v99;
    uint64_t v18 = v84;
  }

  if (v25 >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t))(v96 + 8))(v95, v97);
    sub_100016F9C(v89, v90);
    swift_bridgeObjectRelease();
    uint64_t v27 = type metadata accessor for OfflineFindingInfo(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(v98, 1LL, 1LL, v27);
    uint64_t v28 = (uint64_t)v94;
    unint64_t v29 = v25;
    return sub_1000182F0(v28, v29);
  }

  sub_10001736C((uint64_t)v94, v25);
  uint64_t result = sub_1006A14A4(v26);
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v58 = result;
    uint64_t v59 = (void (*)(char *, char *, uint64_t))v18;
    uint64_t v99 = v22;
    uint64_t v60 = sub_1006A14B8(v26);
    uint64_t result = swift_bridgeObjectRelease();
    if ((v60 & 0x8000000000000000LL) == 0)
    {
      id v61 = [objc_allocWithZone(SPOfflineAdvertisingConfiguration) initWithShortIntervalCount:v58 longIntervalCount:v60];
      uint64_t v62 = v88;
      uint64_t v63 = v87;
      uint64_t v64 = v93;
      (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v87, v85, v93);
      unint64_t v65 = v86;
      uint64_t v66 = v95;
      uint64_t v67 = v97;
      v59(v86, v95, v97);
      uint64_t v68 = sub_100004AEC(&qword_1009A2628);
      uint64_t inited = swift_initStackObject(v68, v100);
      *(_OWORD *)(inited + 16) = xmmword_1007E4750;
      *(void *)(inited + 32) = 2LL;
      *(void *)(inited + 40) = v61;
      *(void *)(inited + 48) = 1LL;
      *(void *)(inited + 56) = v61;
      unint64_t v92 = sub_100421ED4((void *)inited);
      swift_setDeallocating(inited);
      id v70 = v61;
      uint64_t v71 = sub_100004AEC(&qword_1009A2630);
      swift_arrayDestroy(inited + 32, 2LL, v71);
      uint64_t v72 = v96;
      (*(void (**)(char *, uint64_t))(v96 + 8))(v66, v67);
      uint64_t v73 = v98;
      (*(void (**)(uint64_t, char *, uint64_t))(v62 + 32))(v98, v63, v64);
      uint64_t v74 = (int *)type metadata accessor for OfflineFindingInfo(0LL);
      (*(void (**)(uint64_t, char *, uint64_t))(v72 + 32))(v73 + v74[5], v65, v67);
      *(void *)(v73 + v74[6]) = v99;
      v75 = (void *)(v73 + v74[7]);
      unint64_t v76 = v90;
      void *v75 = v89;
      v75[1] = v76;
      uint64_t v77 = (void *)(v73 + v74[8]);
      v78 = v94;
      *uint64_t v77 = v94;
      v77[1] = v25;
      *(void *)(v73 + v74[9]) = v92;
      (*(void (**)(uint64_t, void, uint64_t, int *))(*((void *)v74 - 1) + 56LL))(v73, 0LL, 1LL, v74);
      uint64_t v28 = (uint64_t)v78;
      unint64_t v29 = v25;
      return sub_1000182F0(v28, v29);
    }
  }

  __break(1u);
  return result;
}

void sub_100135060(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  int v22 = a2;
  v21[13] = *v4;
  uint64_t v6 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v25 = *(void *)(v6 - 8);
  uint64_t v26 = v6;
  uint64_t v7 = *(void *)(v25 + 64);
  uint64_t v8 = __chkstk_darwin(v6);
  v21[12] = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v24 = (char *)v21 - v9;
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v10);
  uint64_t v23 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v13 = *(void *)(*(void *)(v12 - 8) + 64LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v27 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v14);
  __chkstk_darwin(v15);
  uint64_t v16 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C(a1 + *(int *)(v12 + 24), (uint64_t)v18, v19);
  uint64_t v20 = (char *)sub_100135220 + 4 * word_1007EDEE0[swift_getEnumCaseMultiPayload(v18, v16)];
  __asm { BR              X10 }

uint64_t sub_100135220()
{
  return sub_1001305E0(v0, 1, *(void (**)(uint64_t))(v1 - 120), *(void (**)(uint64_t))(v1 - 112));
}

uint64_t sub_1001359BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = a2;
  uint64_t v6 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - v11;
  sub_10001DC4C(a1, (uint64_t)&v22 - v11, type metadata accessor for SharedBeaconRecord);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = (v13 + 24) & ~v13;
  unint64_t v15 = (v8 + v14 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v16 = swift_allocObject(&unk_10093FB78, v15 + 16, v13 | 7);
  *(void *)(v16 + 16) = v3;
  sub_10002218C((uint64_t)v12, v16 + v14, type metadata accessor for SharedBeaconRecord);
  uint64_t v17 = (void *)(v16 + v15);
  *uint64_t v17 = v23;
  v17[1] = a3;
  uint64_t v18 = *(void *)(a1 + *(int *)(v6 + 44));
  sub_10001DC4C(a1, (uint64_t)v10, type metadata accessor for SharedBeaconRecord);
  if (v18 != -1)
  {
    swift_retain();
    swift_retain();
    sub_100018C68((uint64_t)v10, type metadata accessor for SharedBeaconRecord);
    return swift_release();
  }

  uint64_t v19 = *(void *)&v10[*(int *)(v6 + 48)];
  swift_retain();
  swift_retain();
  uint64_t result = sub_100018C68((uint64_t)v10, type metadata accessor for SharedBeaconRecord);
  if (v19 != -1) {
    return swift_release();
  }
  if (*(void *)(v3 + 40))
  {
    uint64_t v21 = swift_allocObject(&unk_10093FBA0, 32LL, 7LL);
    *(void *)(v21 + 16) = sub_1001519B8;
    *(void *)(v21 + 24) = v16;
    swift_retain();
    swift_retain();
    sub_1001DE158(a1, (uint64_t)sub_1000228F4, v21);
    swift_release();
    swift_release();
    return swift_release();
  }

  __break(1u);
  return result;
}

uint64_t sub_100135BA4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a4;
  uint64_t v40 = a3;
  uint64_t v6 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v41 = v9;
  uint64_t v42 = (uint64_t)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v39 - v10;
  if (qword_10099B7A0 != -1) {
    swift_once(&qword_10099B7A0, sub_1006518D8);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  sub_10000A720(v12, (uint64_t)qword_100A2B0B0);
  uint64_t v13 = sub_10001DC4C(a1, (uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter(v14);
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v45 = a1;
  int v44 = a2;
  if (v16)
  {
    uint64_t v17 = swift_slowAlloc(28LL, -1LL);
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v17 = 141558531;
    uint64_t v47 = 1752392040LL;
    uint64_t v48 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v17 + 4, v17 + 12);
    *(_WORD *)(v17 + 12) = 2081;
    uint64_t v19 = type metadata accessor for UUID(0LL);
    uint64_t v20 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter(v19, v20);
    uint64_t v47 = sub_1003F11D4(v21, v22, &v48);
    a1 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
    *(_WORD *)(v17 + 22) = 1024;
    LODWORD(v47) = v44 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, (char *)&v47 + 4, v17 + 24, v17 + 28);
    _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "unpairMultipartAccessory for group %{private,mask.hash}s. Force? %{BOOL}d",  (uint8_t *)v17,  0x1Cu);
    swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
  }

  uint64_t v23 = v42;
  sub_10001DC4C(a1, v42, type metadata accessor for OwnedBeaconGroup);
  uint64_t v24 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v25 = (v24 + 24) & ~v24;
  uint64_t v26 = v24 | 7;
  uint64_t v27 = v41;
  unint64_t v28 = (v41 + v25 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v29 = swift_allocObject(&unk_10093FC68, v28 + 16, v24 | 7);
  *(void *)(v29 + 16) = v46;
  sub_10002218C(v23, v29 + v25, type metadata accessor for OwnedBeaconGroup);
  uint64_t v30 = (void *)(v29 + v28);
  uint64_t v31 = v40;
  uint64_t v32 = v43;
  void *v30 = v40;
  v30[1] = v32;
  sub_10001DC4C(a1, v23, type metadata accessor for OwnedBeaconGroup);
  uint64_t v33 = (v24 + 16) & ~v24;
  unint64_t v34 = (v33 + v27 + 31) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v35 = swift_allocObject(&unk_10093FC90, v34 + 16, v26);
  sub_10002218C(v23, v35 + v33, type metadata accessor for OwnedBeaconGroup);
  unint64_t v36 = v35 + ((v33 + v27 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  *(void *)unint64_t v36 = sub_1001522A0;
  *(void *)(v36 + 8) = v29;
  *(_BYTE *)(v36 + 16) = v44 & 1;
  os_log_type_t v37 = (void *)(v35 + v34);
  *os_log_type_t v37 = v31;
  v37[1] = v32;
  swift_retain_n(v32, 2LL);
  swift_retain();
  swift_retain();
  sub_100139054(v45, (uint64_t)sub_1001523E8, v35);
  swift_release();
  return swift_release();
}

uint64_t sub_100135F88(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_BYTE *)(v4 + 104) = a4;
  *(void *)(v4 + 32) = a2;
  *(void *)(v4 + 40) = a3;
  *(void *)(v4 + 24) = a1;
  uint64_t v5 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  *(void *)(v4 + 48) = v5;
  uint64_t v6 = *(void *)(v5 + 64);
  *(void *)(v4 + 56) = v6;
  *(void *)(v4 + 64) = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100135FF0, 0LL, 0LL);
}

uint64_t sub_100135FF0()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[3];
  sub_10001DC4C(v0[4], v1, type metadata accessor for OwnedBeaconRecord);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 24) & ~v5;
  uint64_t v7 = swift_allocObject(&unk_10093FA10, v6 + v2, v5 | 7);
  v0[9] = v7;
  *(void *)(v7 + 16) = v4;
  sub_10002218C(v1, v7 + v6, type metadata accessor for OwnedBeaconRecord);
  uint64_t v8 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc(v8);
  v0[10] = v9;
  uint64_t v10 = sub_100022898(0LL, (unint64_t *)&unk_1009A0B20, &OBJC_CLASS___SPBeacon_ptr);
  *uint64_t v9 = v0;
  v9[1] = sub_1001360E4;
  return unsafeBlocking<A>(_:)(v0 + 2, sub_10014EEC8, v7, v10);
}

uint64_t sub_1001360E4()
{
  return swift_task_switch(sub_100136140, 0LL, 0LL);
}

uint64_t sub_100136140()
{
  uint64_t v1 = v0[5];
  v0[11] = v0[2];
  return swift_task_switch(sub_10013615C, v1, 0LL);
}

uint64_t sub_10013615C()
{
  uint64_t v1 = (void *)v0[11];
  uint64_t v2 = v0[5];
  v0[12] = type metadata accessor for Transaction(0LL);
  uint64_t v3 = swift_allocObject(&unk_10093FA38, 32LL, 7LL);
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  swift_retain();
  id v4 = v1;
  static Transaction.asyncTask(name:block:)("ItemPairEvent", 13LL, 2LL, &unk_1009A2420, v3);
  swift_release();
  return swift_task_switch(sub_100136204, 0LL, 0LL);
}

uint64_t sub_100136204()
{
  if (*(_BYTE *)(v0 + 104) == 1) {
    return swift_task_switch(sub_100136268, *(void *)(v0 + 40), 0LL);
  }

  swift_task_dealloc(*(void *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100136268()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_retain();
  static Transaction.asyncTask(name:block:)("ItemPairEvent", 13LL, 2LL, &unk_1009A2428, v1);
  swift_release();
  return swift_task_switch(sub_1001362D4, 0LL, 0LL);
}

uint64_t sub_1001362D4()
{
  swift_task_dealloc(*(void *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013630C(char *a1, uint64_t a2, uint64_t (*a3)(void))
{
  char v5 = *a1;
  uint64_t v6 = static os_log_type_t.default.getter(a1);
  if (qword_10099B748 != -1) {
    swift_once(&qword_10099B748, sub_100651480);
  }
  uint64_t v7 = qword_100A2B058;
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
  *(_OWORD *)(v9 + 16) = xmmword_1007E67D0;
  *(void *)(v9 + 56) = &type metadata for Bool;
  *(void *)(v9 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v9 + 32) = v5;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "#Durian: Reset & pairing lock remove success - %i", v12);
  swift_bridgeObjectRelease();
  type metadata accessor for Transaction(0LL);
  uint64_t v10 = swift_allocObject(&unk_10093F9C0, 25LL, 7LL);
  *(void *)(v10 + 16) = a2;
  *(_BYTE *)(v10 + 24) = v5;
  swift_retain();
  static Transaction.asyncTask(name:block:)("PairingAnalytics", 16LL, 2LL, &unk_1009A2410, v10);
  swift_release();
  return a3(0LL);
}

uint64_t sub_100136460(uint64_t a1, char a2)
{
  *(_BYTE *)(v2 + 24) = a2;
  *(void *)(v2 + 16) = a1;
  return swift_task_switch(sub_100136480, a1, 0LL);
}

uint64_t sub_100136480()
{
  char v1 = *(_BYTE *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 16);
  type metadata accessor for Transaction(0LL);
  uint64_t v3 = swift_allocObject(&unk_10093F9E8, 49LL, 7LL);
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = 0LL;
  *(void *)(v3 + 32) = 0LL;
  *(void *)(v3 + 40) = 0LL;
  *(_BYTE *)(v3 + 48) = v1;
  swift_retain(v2);
  static Transaction.asyncTask(name:block:)("ItemPairEvent", 13LL, 2LL, &unk_1009A2418, v3);
  swift_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013651C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6 = static os_log_type_t.error.getter(a1);
  if (qword_10099B748 != -1) {
    swift_once(&qword_10099B748, sub_100651480);
  }
  uint64_t v7 = qword_100A2B058;
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
  *(_OWORD *)(v9 + 16) = xmmword_1007E67D0;
  swift_getErrorValue(a1, v16, v15);
  uint64_t v10 = Error.localizedDescription.getter(v15[1], v15[2]);
  uint64_t v12 = v11;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_1000226F4();
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = v12;
  os_log(_:dso:log:_:_:)( v6,  &_mh_execute_header,  v7,  "#Durian: Error during reset & pairing lock remove - %@",  54LL,  2LL,  v9);
  swift_bridgeObjectRelease();
  type metadata accessor for Transaction(0LL);
  uint64_t v13 = swift_allocObject(&unk_10093F970, 32LL, 7LL);
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a1;
  swift_retain();
  swift_errorRetain(a1);
  static Transaction.asyncTask(name:block:)("PairingAnalytics", 16LL, 2LL, &unk_1009A23F8, v13);
  swift_release();
  return a3(a1);
}

uint64_t sub_1001366A4(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_task_switch(sub_1001366C0, a1, 0LL);
}

uint64_t sub_1001366C0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  type metadata accessor for Transaction(0LL);
  uint64_t v3 = swift_allocObject(&unk_10093F998, 49LL, 7LL);
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  *(void *)(v3 + 32) = 0LL;
  *(void *)(v3 + 40) = 0LL;
  *(_BYTE *)(v3 + 48) = 0;
  swift_retain(v1);
  swift_errorRetain(v2);
  static Transaction.asyncTask(name:block:)("ItemPairEvent", 13LL, 2LL, &unk_1009A2400, v3);
  swift_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100136760( unsigned __int8 *a1, uint64_t a2, char a3, uint64_t (*a4)(uint64_t), uint64_t a5, void (*a6)(void), int a7)
{
  uint64_t v10 = *a1;
  uint64_t v11 = static os_log_type_t.default.getter(a1);
  if (qword_10099B748 != -1) {
    swift_once(&qword_10099B748, sub_100651480);
  }
  uint64_t v12 = qword_100A2B058;
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v14 = swift_allocObject(v13, 72LL, 7LL);
  *(_OWORD *)(v14 + 16) = xmmword_1007E67D0;
  *(void *)(v14 + 56) = &type metadata for Bool;
  *(void *)(v14 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v14 + 32) = v10;
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "#Durian: Connection with device successful - %i", a7);
  uint64_t v15 = swift_bridgeObjectRelease();
  uint64_t v16 = static os_signpost_type_t.end.getter(v15);
  uint64_t v17 = qword_100A2B058;
  uint64_t v18 = os_signpost(_:dso:log:name:signpostID:)( v16,  &_mh_execute_header,  qword_100A2B058,  "preConnection",  13LL,  2LL,  a2);
  if ((v10 & 1) != 0 || (a3 & 1) != 0) {
    return a4(v10);
  }
  uint64_t v19 = static os_log_type_t.default.getter(v18);
  os_log(_:dso:log:_:_:)( v19,  &_mh_execute_header,  v17,  "#Durian: Can't force unpair. Completing with generic error.",  59LL,  2LL,  _swiftEmptyArrayStorage);
  unint64_t v20 = sub_10014A2C0();
  uint64_t v21 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v20, 0LL, 0LL);
  *unint64_t v22 = 0;
  a6();
  return swift_errorRelease(v21);
}

uint64_t sub_10013691C( uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(void), uint64_t a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v9 = static os_log_type_t.error.getter(a1);
  if (qword_10099B748 != -1) {
    swift_once(&qword_10099B748, sub_100651480);
  }
  uint64_t v10 = qword_100A2B058;
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v12 = swift_allocObject(v11, 72LL, 7LL);
  *(_OWORD *)(v12 + 16) = xmmword_1007E67D0;
  swift_getErrorValue(a1, v25, v24);
  uint64_t v13 = Error.localizedDescription.getter(v24[1], v24[2]);
  uint64_t v15 = v14;
  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 64) = sub_1000226F4();
  *(void *)(v12 + 32) = v13;
  *(void *)(v12 + 40) = v15;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "#Durian: Error during connection - %@", 37LL, 2LL, v12);
  uint64_t v16 = swift_bridgeObjectRelease();
  uint64_t v17 = static os_signpost_type_t.end.getter(v16);
  uint64_t v18 = qword_100A2B058;
  uint64_t v19 = os_signpost(_:dso:log:name:signpostID:)( v17,  &_mh_execute_header,  qword_100A2B058,  "preConnection",  13LL,  2LL,  a2);
  if ((a3 & 1) != 0) {
    return a4(0LL);
  }
  uint64_t v21 = static os_log_type_t.default.getter(v19);
  os_log(_:dso:log:_:_:)( v21,  &_mh_execute_header,  v18,  "#Durian: Can't force unpair. Completing with connection error.",  62LL,  2LL,  _swiftEmptyArrayStorage);
  return a6(a1);
}

id sub_100136ABC(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v5 = v4;
  id v70 = a3;
  uint64_t v71 = a4;
  LODWORD(v68) = a2;
  uint64_t v7 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v7);
  uint64_t v72 = &v65[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = type metadata accessor for OwnedBeaconGroup(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = &v65[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if (qword_10099B7A0 != -1) {
    swift_once(&qword_10099B7A0, sub_1006518D8);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = sub_10000A720(v12, (uint64_t)qword_100A2B0B0);
  uint64_t v14 = sub_10001DC4C(a1, (uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter(v15);
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v73 = v9;
  uint64_t v74 = v5;
  if (v17)
  {
    uint64_t v18 = swift_slowAlloc(22LL, -1LL);
    uint64_t v69 = v13;
    uint64_t v19 = v18;
    uint64_t v20 = swift_slowAlloc(32LL, -1LL);
    v77[0] = v20;
    *(_DWORD *)uint64_t v19 = 141558275;
    uint64_t v75 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v19 + 4, v19 + 12);
    *(_WORD *)(v19 + 12) = 2081;
    uint64_t v21 = type metadata accessor for UUID(0LL);
    uint64_t v22 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v23 = v21;
    uint64_t v9 = v73;
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v23, v22);
    uint64_t v75 = sub_1003F11D4(v24, v25, v77);
    uint64_t v5 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "removeAirPodsPairingLock for %{private,mask.hash}s",  (uint8_t *)v19,  0x16u);
    swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
  }

  uint64_t v26 = *(int *)(v9 + 40);
  uint64_t v69 = a1;
  swift_bridgeObjectRetain(*(void *)(a1 + v26));
  uint64_t v28 = sub_10012E26C(v27);
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v29 = sub_10014B2A8(v28, v5);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRetain_n(v29, 2LL);
  uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
  os_log_type_t v32 = static os_log_type_t.default.getter(v31);
  BOOL v33 = os_log_type_enabled(v31, v32);
  uint64_t v67 = v29;
  if (v33)
  {
    unint64_t v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v35 = swift_slowAlloc(32LL, -1LL);
    v77[0] = v35;
    *(_DWORD *)unint64_t v34 = 136315138;
    uint64_t v36 = type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0LL);
    swift_bridgeObjectRetain(v29);
    uint64_t v38 = Array.description.getter(v37, v36);
    unint64_t v40 = v39;
    swift_bridgeObjectRelease();
    uint64_t v75 = sub_1003F11D4(v38, v40, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v34 + 4, v34 + 12);
    swift_bridgeObjectRelease_n(v29, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "unpairDevices: %s", v34, 0xCu);
    swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1LL, -1LL);
    swift_slowDealloc(v34, -1LL, -1LL);
  }

  else
  {

    uint64_t v41 = swift_bridgeObjectRelease_n(v29, 2LL);
  }

  id result = (id)MobileGestalt_get_current_device(v41);
  if (result)
  {
    uint64_t v43 = result;
    uint64_t uniqueChipID = MobileGestalt_get_uniqueChipID();

    id result = (id)MobileGestalt_get_current_device(v45);
    if (result)
    {
      uint64_t v46 = result;
      int v66 = v68 & 1;
      uint64_t chipID = MobileGestalt_get_chipID();

      v77[0] = uniqueChipID;
      uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
      uint64_t v50 = v49;
      uint64_t v68 = v49;
      v77[0] = chipID;
      uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
      uint64_t v53 = v52;
      id v54 = sub_1006271CC();
      uint64_t v56 = v55;
      uint64_t v57 = v73;
      uint64_t v58 = v69;
      uint64_t v59 = MACAddress.udid.getter(v54);
      v77[0] = v48;
      v77[1] = v50;
      v77[2] = v51;
      v77[3] = v53;
      v77[4] = (uint64_t)v54;
      v77[5] = v56;
      v77[6] = v59;
      v77[7] = v60;
      char v78 = v66;
      uint64_t v79 = v67;
      sub_1004AC1F4();
      uint64_t v61 = v58 + *(int *)(v57 + 24);
      uint64_t v62 = type metadata accessor for UUID(0LL);
      uint64_t v63 = *(void *)(v62 - 8);
      uint64_t v64 = (uint64_t)v72;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v63 + 16))(v72, v61, v62);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v63 + 56))(v64, 0LL, 1LL, v62);
      sub_10042EF88(v64, (uint64_t)v77, v70, v71);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return (id)sub_100015794(v64, &qword_10099D8A0);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_10013708C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  v166 = a2;
  uint64_t v4 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v4);
  v163 = (char *)&v158 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v158 = (uint64_t)&v158 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v160 = (uint64_t)&v158 - v9;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v168 = *(void *)(v10 - 8);
  v169 = (void *)v10;
  uint64_t v11 = __chkstk_darwin(v10);
  v162 = (char *)&v158 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  v164 = (char *)&v158 - v13;
  uint64_t v14 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v14);
  os_log_type_t v16 = (char *)&v158 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v158 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v161 = (uint64_t)&v158 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v159 = (uint64_t)&v158 - v25;
  __chkstk_darwin(v24);
  uint64_t v167 = (uint64_t)&v158 - v26;
  uint64_t v27 = *a1;
  unint64_t v28 = a1[1];
  v170 = sub_10050524C(v27, v28);
  swift_bridgeObjectRetain(v170);
  sub_10013E80C(&v170, sub_100141D1C);
  uint64_t v165 = v2;
  if (v2)
  {
    swift_release();
    __break(1u);
    JUMPOUT(0x10013808CLL);
  }

  swift_bridgeObjectRelease();
  if (v170[2])
  {
    sub_10001DC4C( (uint64_t)v170 + ((*(unsigned __int8 *)(v21 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80)),  (uint64_t)v19,  type metadata accessor for OwnedBeaconRecord);
    uint64_t v29 = 0LL;
  }

  else
  {
    uint64_t v29 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, v29, 1LL, v20);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1LL, v20) == 1)
  {
    sub_100015794((uint64_t)v19, (uint64_t *)&unk_1009A9C30);
    if (qword_10099B7A0 != -1) {
      swift_once(&qword_10099B7A0, sub_1006518D8);
    }
    uint64_t v30 = type metadata accessor for Logger(0LL);
    sub_10000A720(v30, (uint64_t)qword_100A2B0B0);
    sub_10001736C(v27, v28);
    uint64_t v31 = sub_10001736C(v27, v28);
    os_log_type_t v32 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v33 = static os_log_type_t.default.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = swift_slowAlloc(22LL, -1LL);
      uint64_t v35 = (void *)swift_slowAlloc(32LL, -1LL);
      v170 = v35;
      *(_DWORD *)uint64_t v34 = 141558275;
      uint64_t v172 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v34 + 4, v34 + 12);
      *(_WORD *)(v34 + 12) = 2081;
      uint64_t v36 = sub_10001736C(v27, v28);
      uint64_t v37 = v163;
      static String.Encoding.utf8.getter(v36);
      uint64_t v38 = String.init(data:encoding:)(v27, v28, v37);
      if (!v39) {
        uint64_t v38 = Data.hexString.getter(v27, v28);
      }
      uint64_t v40 = v38;
      unint64_t v41 = v39;
      sub_100016F9C(v27, v28);
      uint64_t v172 = sub_1003F11D4(v40, v41, (uint64_t *)&v170);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v34 + 14, v34 + 22);
      swift_bridgeObjectRelease();
      sub_100016F9C(v27, v28);
      sub_100016F9C(v27, v28);
      _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "Missing beacon record for %{private,mask.hash}s.",  (uint8_t *)v34,  0x16u);
      swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1LL, -1LL);
      swift_slowDealloc(v34, -1LL, -1LL);
    }

    else
    {
      sub_100016F9C(v27, v28);
      sub_100016F9C(v27, v28);
    }

    uint64_t v69 = (int *)type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0LL);
    id v70 = v166;
    (*(void (**)(char *, uint64_t, uint64_t, void *))(v168 + 56))((char *)v166 + v69[7], 1LL, 1LL, v169);
    *(_OWORD *)id v70 = xmmword_1007E7660;
    *((_OWORD *)v70 + 1) = xmmword_1007E7660;
    v70[4] = v27;
    v70[5] = v28;
    uint64_t v71 = (uint64_t *)((char *)v70 + v69[8]);
    *uint64_t v71 = 0LL;
    v71[1] = 0LL;
    uint64_t v72 = (uint64_t *)((char *)v70 + v69[9]);
    *uint64_t v72 = 0LL;
    v72[1] = 0LL;
    (*(void (**)(uint64_t *, void, uint64_t, int *))(*((void *)v69 - 1) + 56LL))(v70, 0LL, 1LL, v69);
    return sub_10001736C(v27, v28);
  }

  uint64_t v42 = (uint64_t)v19;
  uint64_t v43 = v167;
  sub_10002218C(v42, v167, type metadata accessor for OwnedBeaconRecord);
  sub_10001DC4C(v43 + *(int *)(v20 + 24), (uint64_t)v16, type metadata accessor for StableIdentifier);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v14);
  if (EnumCaseMultiPayload == 3)
  {
    uint64_t v74 = (int *)sub_100004AEC((uint64_t *)&unk_1009AF840);
    uint64_t v75 = &v16[v74[12]];
    uint64_t v77 = *(void **)v75;
    uint64_t v76 = *((void *)v75 + 1);
    char v78 = &v16[v74[16]];
    uint64_t v79 = *(void **)v78;
    uint64_t v80 = *((void *)v78 + 1);
    unint64_t v81 = &v16[v74[20]];
    unint64_t v83 = *(void **)v81;
    uint64_t v82 = *((void *)v81 + 1);
    v84 = v162;
    (*(void (**)(char *, char *, void *))(v168 + 32))(v162, v16, v169);
    v170 = v79;
    uint64_t v171 = v80;
    unint64_t v85 = sub_1000155F8();
    uint64_t v86 = Data.init<A>(hexString:)(&v170, &type metadata for String, v85);
    if (v87 >> 60 == 15)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v104 = v86;
      unint64_t v105 = v87;
      v170 = v77;
      uint64_t v171 = v76;
      uint64_t v106 = Data.init<A>(hexString:)(&v170, &type metadata for String, v85);
      if (v107 >> 60 == 15)
      {
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v112 = v106;
        unint64_t v113 = v107;
        v170 = v83;
        uint64_t v171 = v82;
        uint64_t v114 = Data.init<A>(hexString:)(&v170, &type metadata for String, v85);
        if (v115 >> 60 != 15)
        {
          uint64_t v131 = v115;
          v164 = (char *)v114;
          uint64_t v133 = v168;
          v132 = v169;
          v134 = v84;
          uint64_t v135 = v158;
          (*(void (**)(uint64_t, char *, void *))(v168 + 16))(v158, v134, v169);
          (*(void (**)(uint64_t, void, uint64_t, void *))(v133 + 56))(v135, 0LL, 1LL, v132);
          uint64_t v136 = sub_1005D2984();
          if (v137 >> 60 == 15)
          {
            uint64_t v138 = 0LL;
            v163 = 0LL;
          }

          else
          {
            uint64_t v144 = v136;
            unint64_t v145 = v137;
            uint64_t v146 = sub_1000F55FC(v136, v137);
            unint64_t v148 = v147;
            sub_1000182F0(v144, v145);
            uint64_t v149 = Data.hexString.getter(v146, v148);
            v163 = v150;
            uint64_t v151 = v146;
            uint64_t v138 = v149;
            sub_100016F9C(v151, v148);
          }

          sub_1005D2984();
          if (v152 >> 60 != 15)
          {
            uint64_t v161 = v138;
            __asm { BR              X11 }
          }

          (*(void (**)(char *, void *))(v168 + 8))(v162, v169);
          sub_100018C68(v167, type metadata accessor for OwnedBeaconRecord);
          v153 = v166;
          uint64_t *v166 = v104;
          v153[1] = v105;
          v153[2] = v112;
          v153[3] = v113;
          v153[4] = (uint64_t)v164;
          v153[5] = v131;
          v154 = (int *)type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0LL);
          sub_100015750(v158, (uint64_t)v153 + v154[7], &qword_10099D8A0);
          v155 = (uint64_t *)((char *)v153 + v154[8]);
          v156 = v163;
          uint64_t *v155 = v138;
          v155[1] = (uint64_t)v156;
          v157 = (uint64_t *)((char *)v153 + v154[9]);
          void *v157 = 0LL;
          v157[1] = 0LL;
          return (*(uint64_t (**)(uint64_t *, void, uint64_t, int *))(*((void *)v154 - 1) + 56LL))( v153,  0LL,  1LL,  v154);
        }

        sub_1000182F0(v112, v113);
      }

      sub_1000182F0(v104, v105);
    }

    (*(void (**)(char *, void *))(v168 + 8))(v84, v169);
    sub_100018C68(v43, type metadata accessor for OwnedBeaconRecord);
    uint64_t v116 = type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0LL);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v116 - 8) + 56LL))( v166,  1LL,  1LL,  v116);
  }

  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v45 = (int *)sub_100004AEC((uint64_t *)&unk_1009B0520);
    uint64_t v46 = &v16[v45[12]];
    uint64_t v47 = *(void **)v46;
    uint64_t v48 = *((void *)v46 + 1);
    uint64_t v49 = &v16[v45[16]];
    uint64_t v51 = *(void **)v49;
    uint64_t v50 = *((void *)v49 + 1);
    uint64_t v52 = &v16[v45[20]];
    uint64_t v53 = *(void **)v52;
    uint64_t v54 = *((void *)v52 + 1);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *, void *))(v168 + 32))(v164, v16, v169);
    v170 = v53;
    uint64_t v171 = v54;
    unint64_t v55 = sub_1000155F8();
    uint64_t v56 = Data.init<A>(hexString:)(&v170, &type metadata for String, v55);
    if (v57 >> 60 == 15)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_10099B7A0 != -1) {
        swift_once(&qword_10099B7A0, sub_1006518D8);
      }
      uint64_t v58 = type metadata accessor for Logger(0LL);
      sub_10000A720(v58, (uint64_t)qword_100A2B0B0);
      uint64_t v59 = v167;
      uint64_t v60 = v159;
      uint64_t v61 = sub_10001DC4C(v167, v159, type metadata accessor for OwnedBeaconRecord);
      uint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
      os_log_type_t v63 = static os_log_type_t.error.getter(v62);
      if (os_log_type_enabled(v62, v63))
      {
        uint64_t v64 = swift_slowAlloc(22LL, -1LL);
        unint64_t v65 = (void *)swift_slowAlloc(32LL, -1LL);
        v170 = v65;
        *(_DWORD *)uint64_t v64 = 141558275;
        uint64_t v172 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v64 + 4, v64 + 12);
        *(_WORD *)(v64 + 12) = 2081;
        sub_1006DD1E4();
        uint64_t v172 = sub_1003F11D4(v66, v67, (uint64_t *)&v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v64 + 14, v64 + 22);
        swift_bridgeObjectRelease();
        sub_100018C68(v60, type metadata accessor for OwnedBeaconRecord);
        _os_log_impl( (void *)&_mh_execute_header,  v62,  v63,  "Invalid serialNumber for %{private,mask.hash}s",  (uint8_t *)v64,  0x16u);
        swift_arrayDestroy(v65, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v65, -1LL, -1LL);
        swift_slowDealloc(v64, -1LL, -1LL);

        (*(void (**)(char *, void *))(v168 + 8))(v164, v169);
        uint64_t v68 = v167;
      }

      else
      {

        sub_100018C68(v60, type metadata accessor for OwnedBeaconRecord);
        (*(void (**)(char *, void *))(v168 + 8))(v164, v169);
        uint64_t v68 = v59;
      }

      sub_100018C68(v68, type metadata accessor for OwnedBeaconRecord);
      v110 = v166;
      uint64_t v111 = type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0LL);
      return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v111 - 8) + 56LL))( v110,  1LL,  1LL,  v111);
    }

    uint64_t v98 = v56;
    uint64_t v99 = v57;
    if (v50)
    {
      v170 = v51;
      uint64_t v171 = v50;
      uint64_t v100 = Data.init<A>(hexString:)(&v170, &type metadata for String, v55);
      v162 = v101;
      v163 = (char *)v100;
      if (v48)
      {
LABEL_29:
        v170 = v47;
        uint64_t v171 = v48;
        uint64_t v161 = Data.init<A>(hexString:)(&v170, &type metadata for String, v55);
        unint64_t v103 = v102;
LABEL_42:
        uint64_t v118 = v168;
        v117 = v169;
        uint64_t v119 = v160;
        (*(void (**)(uint64_t, char *, void *))(v168 + 16))(v160, v164, v169);
        (*(void (**)(uint64_t, void, uint64_t, void *))(v118 + 56))(v119, 0LL, 1LL, v117);
        uint64_t v120 = sub_1005D2984();
        if (v121 >> 60 == 15)
        {
          uint64_t v122 = 0LL;
          uint64_t v123 = 0LL;
        }

        else
        {
          uint64_t v124 = v120;
          unint64_t v125 = v121;
          uint64_t v126 = sub_1000F55FC(v120, v121);
          unint64_t v128 = v127;
          sub_1000182F0(v124, v125);
          uint64_t v122 = Data.hexString.getter(v126, v128);
          uint64_t v123 = v129;
          sub_100016F9C(v126, v128);
        }

        sub_1005D2984();
        if (v130 >> 60 != 15) {
          __asm { BR              X11 }
        }

        (*(void (**)(char *, void *))(v168 + 8))(v164, v169);
        sub_100018C68(v167, type metadata accessor for OwnedBeaconRecord);
        v139 = v166;
        v140 = v162;
        uint64_t *v166 = (uint64_t)v163;
        v139[1] = (uint64_t)v140;
        v139[2] = v161;
        v139[3] = v103;
        v139[4] = v98;
        v139[5] = v99;
        v141 = (int *)type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0LL);
        sub_100015750(v160, (uint64_t)v139 + v141[7], &qword_10099D8A0);
        v142 = (uint64_t *)((char *)v139 + v141[8]);
        uint64_t *v142 = v122;
        v142[1] = v123;
        v143 = (uint64_t *)((char *)v139 + v141[9]);
        void *v143 = 0LL;
        v143[1] = 0LL;
        return (*(uint64_t (**)(uint64_t *, void, uint64_t, int *))(*((void *)v141 - 1) + 56LL))( v139,  0LL,  1LL,  v141);
      }
    }

    else
    {
      v162 = (char *)0xF000000000000000LL;
      v163 = 0LL;
      if (v48) {
        goto LABEL_29;
      }
    }

    uint64_t v161 = 0LL;
    unint64_t v103 = 0xF000000000000000LL;
    goto LABEL_42;
  }

  if (qword_10099B7A0 != -1) {
    swift_once(&qword_10099B7A0, sub_1006518D8);
  }
  uint64_t v88 = type metadata accessor for Logger(0LL);
  sub_10000A720(v88, (uint64_t)qword_100A2B0B0);
  uint64_t v89 = v161;
  uint64_t v90 = sub_10001DC4C(v43, v161, type metadata accessor for OwnedBeaconRecord);
  v91 = (os_log_s *)Logger.logObject.getter(v90);
  os_log_type_t v92 = static os_log_type_t.error.getter(v91);
  if (os_log_type_enabled(v91, v92))
  {
    uint64_t v93 = swift_slowAlloc(22LL, -1LL);
    v169 = (void *)swift_slowAlloc(32LL, -1LL);
    v170 = v169;
    *(_DWORD *)uint64_t v93 = 141558275;
    uint64_t v172 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v93 + 4, v93 + 12);
    *(_WORD *)(v93 + 12) = 2081;
    sub_1006DD1E4();
    uint64_t v172 = sub_1003F11D4(v94, v95, (uint64_t *)&v170);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v93 + 14, v93 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68(v89, type metadata accessor for OwnedBeaconRecord);
    _os_log_impl( (void *)&_mh_execute_header,  v91,  v92,  "Unsupported beacon %{private,mask.hash}s",  (uint8_t *)v93,  0x16u);
    uint64_t v96 = v169;
    swift_arrayDestroy(v169, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v96, -1LL, -1LL);
    swift_slowDealloc(v93, -1LL, -1LL);

    uint64_t v97 = v167;
  }

  else
  {

    sub_100018C68(v89, type metadata accessor for OwnedBeaconRecord);
    uint64_t v97 = v43;
  }

  sub_100018C68(v97, type metadata accessor for OwnedBeaconRecord);
  v108 = v166;
  uint64_t v109 = type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0LL);
  (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v109 - 8) + 56LL))(v108, 1LL, 1LL, v109);
  return sub_100018C68((uint64_t)v16, type metadata accessor for StableIdentifier);
}

uint64_t sub_1001380AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C(a2, (uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = (v12 + 16) & ~v12;
  unint64_t v14 = (v10 + v13 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v16 = swift_allocObject(&unk_10093FE70, v15 + 16, v12 | 7);
  sub_10002218C((uint64_t)v11, v16 + v13, type metadata accessor for OwnedBeaconGroup);
  *(void *)(v16 + v14) = a1;
  uint64_t v17 = (void *)(v16 + v15);
  *uint64_t v17 = a3;
  v17[1] = a4;
  swift_retain();
  swift_retain();
  sub_100136ABC(a2, 0, (uint64_t (*)(void))sub_100152DF0, v16);
  return swift_release();
}

void sub_1001381C8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  uint64_t v10 = type metadata accessor for OwnedBeaconGroup(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10099B7A0 != -1) {
      swift_once(&qword_10099B7A0, sub_1006518D8);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_10000A720(v13, (uint64_t)qword_100A2B0B0);
    swift_errorRetain(a1);
    uint64_t v14 = swift_errorRetain(a1);
    unint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v18 = swift_slowAlloc(32LL, -1LL);
      uint64_t v41 = a1;
      uint64_t v42 = (void *)v18;
      *(_DWORD *)uint64_t v17 = 136446210;
      swift_errorRetain(a1);
      uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v20 = String.init<A>(describing:)(&v41, v19);
      uint64_t v41 = sub_1003F11D4(v20, v21, (uint64_t *)&v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to remove pairing lock due to %{public}s", v17, 0xCu);
      swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1LL, -1LL);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    type metadata accessor for UnpairError(0LL);
    uint64_t v34 = v33;
    uint64_t v41 = 4LL;
    unint64_t v35 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v36 = sub_100007864( &qword_10099C238,  (uint64_t (*)(uint64_t))type metadata accessor for UnpairError,  (uint64_t)&unk_1007E3650);
    _BridgedStoredNSError.init(_:userInfo:)(&v42, &v41, v35, v34, v36);
    uint64_t v37 = v42;
    a4(v42);
    swift_errorRelease(a1);
  }

  else
  {
    uint64_t v40 = a5;
    if (qword_10099B7A0 != -1) {
      swift_once(&qword_10099B7A0, sub_1006518D8);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    sub_10000A720(v22, (uint64_t)qword_100A2B0B0);
    uint64_t v23 = sub_10001DC4C(a2, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc(22LL, -1LL);
      uint64_t v27 = swift_slowAlloc(32LL, -1LL);
      v38[1] = a3;
      uint64_t v28 = v27;
      *(_DWORD *)uint64_t v26 = 141558275;
      uint64_t v41 = 1752392040LL;
      uint64_t v42 = (void *)v27;
      unint64_t v39 = a4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v26 + 4, v26 + 12);
      *(_WORD *)(v26 + 12) = 2081;
      uint64_t v29 = type metadata accessor for UUID(0LL);
      uint64_t v30 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter(v29, v30);
      uint64_t v41 = sub_1003F11D4(v31, v32, (uint64_t *)&v42);
      a4 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "Successfully removed pairing lock for group %{private,mask.hash}s",  (uint8_t *)v26,  0x16u);
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
    }

    sub_100138648(a2, 1, (void (*)(void))a4, v40);
  }

uint64_t sub_100138648(uint64_t a1, char a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v69 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v70 = v11;
  uint64_t v71 = (uint64_t)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009A2578);
  uint64_t v61 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_1009A2580);
  uint64_t v62 = *(void *)(v15 - 8);
  uint64_t v63 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100004AEC(&qword_1009A2588);
  uint64_t v64 = *(void *)(v18 - 8);
  uint64_t v65 = v18;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100004AEC(&qword_1009A2590);
  uint64_t v67 = *(void *)(v21 - 8);
  uint64_t v68 = v21;
  __chkstk_darwin(v21);
  uint64_t v66 = (char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v74 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v72 = a1;
  sub_1001CC778();
  uint64_t v24 = v23;
  swift_retain();
  sub_10014A98C(v24, v5, &v74, a2);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v25 = v74;
  if ((unint64_t)v74 >> 62)
  {
    if (v74 < 0) {
      uint64_t v55 = v74;
    }
    else {
      uint64_t v55 = v74 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v74);
    uint64_t v56 = _CocoaArrayWrapper.endIndex.getter(v55);
    swift_bridgeObjectRelease();
    if (v56) {
      goto LABEL_3;
    }
  }

  else if (*(void *)((v74 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
LABEL_3:
    uint64_t v26 = swift_allocObject(&unk_10093FCE0, 24LL, 7LL);
    uint64_t v60 = v26;
    *(void *)(v26 + 16) = 0LL;
    uint64_t v27 = (uint64_t *)(v26 + 16);
    v73[0] = v25;
    swift_bridgeObjectRetain(v25);
    uint64_t v28 = sub_100004AEC(&qword_1009A2598);
    uint64_t v59 = a3;
    uint64_t v29 = v28;
    uint64_t v30 = sub_100004AEC(&qword_1009A25A0);
    uint64_t v58 = a4;
    uint64_t v31 = v30;
    uint64_t v32 = sub_1000372EC(&qword_1009A25A8, &qword_1009A2598, (uint64_t)&protocol conformance descriptor for Future<A, B>);
    uint64_t v33 = sub_1000372EC(&qword_1009A25B0, &qword_1009A25A0, (uint64_t)&protocol conformance descriptor for [A]);
    Publishers.MergeMany.init<A>(_:)(v73, v29, v31, v32, v33);
    uint64_t v34 = sub_1000372EC( &qword_1009A25B8,  &qword_1009A2578,  (uint64_t)&protocol conformance descriptor for Publishers.MergeMany<A>);
    Publisher.collect()(v12, v34);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v14, v12);
    uint64_t v35 = sub_100004AEC(&qword_1009A25C0);
    uint64_t v36 = sub_1000372EC( &qword_1009A25C8,  &qword_1009A2580,  (uint64_t)&protocol conformance descriptor for Publishers.Collect<A>);
    uint64_t v37 = v63;
    Publisher.map<A>(_:)(sub_10013B668, 0LL, v63, v35, v36);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v17, v37);
    uint64_t v38 = sub_100004AEC(&qword_1009A25D0);
    uint64_t v39 = sub_1000372EC( &qword_1009A25D8,  &qword_1009A2588,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    uint64_t v40 = sub_1000372EC(&qword_1009A25E0, &qword_1009A25D0, (uint64_t)&protocol conformance descriptor for Just<A>);
    uint64_t v41 = v65;
    uint64_t v42 = v66;
    Publisher.catch<A>(_:)(sub_10013B678, 0LL, v65, v38, v39, v40);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v20, v41);
    uint64_t v43 = v71;
    sub_10001DC4C(v72, v71, type metadata accessor for OwnedBeaconGroup);
    uint64_t v44 = *(unsigned __int8 *)(v69 + 80);
    uint64_t v45 = (v44 + 16) & ~v44;
    unint64_t v46 = (v70 + v45 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v47 = (v46 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v48 = swift_allocObject(&unk_10093FE98, v47 + 8, v44 | 7);
    sub_10002218C(v43, v48 + v45, type metadata accessor for OwnedBeaconGroup);
    uint64_t v49 = (void *)(v48 + v46);
    uint64_t v50 = v58;
    *uint64_t v49 = v59;
    v49[1] = v50;
    *(void *)(v48 + v47) = v60;
    uint64_t v51 = sub_1000372EC( &qword_1009A25E8,  &qword_1009A2590,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
    swift_retain();
    swift_retain();
    uint64_t v52 = v68;
    uint64_t v53 = Publisher<>.sink(receiveValue:)(sub_100152F4C, v48, v68, v51);
    swift_release();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v42, v52);
    swift_beginAccess(v27, v73, 1LL, 0LL);
    *uint64_t v27 = v53;
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }

  if ((a2 & 1) != 0) {
    sub_10013E918(v72, a3, a4);
  }
  else {
    a3(0LL);
  }
  return swift_bridgeObjectRelease();
}

void sub_100138BB0( uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, int a5, void (*a6)(void *))
{
  uint64_t v12 = type metadata accessor for OwnedBeaconGroup(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10099B7A0 != -1) {
      swift_once(&qword_10099B7A0, sub_1006518D8);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    sub_10000A720(v15, (uint64_t)qword_100A2B0B0);
    swift_errorRetain(a1);
    uint64_t v16 = swift_errorRetain(a1);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      int v44 = a5;
      uint64_t v19 = swift_slowAlloc(12LL, -1LL);
      uint64_t v46 = a4;
      uint64_t v20 = (uint8_t *)v19;
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      uint64_t v45 = a3;
      uint64_t v22 = v21;
      uint64_t v47 = a1;
      uint64_t v48 = (void *)v21;
      *(_DWORD *)uint64_t v20 = 136446210;
      swift_errorRetain(a1);
      uint64_t v23 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v24 = String.init<A>(describing:)(&v47, v23);
      uint64_t v47 = sub_1003F11D4(v24, v25, (uint64_t *)&v48);
      char v26 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to send unpair command due to %{public}s", v20, 0xCu);
      swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v27 = v22;
      a3 = v45;
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);

      if ((v26 & 1) == 0)
      {
LABEL_6:
        type metadata accessor for UnpairError(0LL);
        uint64_t v29 = v28;
        uint64_t v47 = 5LL;
        unint64_t v30 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v31 = sub_100007864( &qword_10099C238,  (uint64_t (*)(uint64_t))type metadata accessor for UnpairError,  (uint64_t)&unk_1007E3650);
        _BridgedStoredNSError.init(_:userInfo:)(&v48, &v47, v30, v29, v31);
        uint64_t v32 = v48;
        a6(v48);
        swift_errorRelease(a1);

        return;
      }
    }

    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);

      if ((a5 & 1) == 0) {
        goto LABEL_6;
      }
    }

    a3();
    swift_errorRelease(a1);
  }

  else
  {
    if (qword_10099B7A0 != -1) {
      swift_once(&qword_10099B7A0, sub_1006518D8);
    }
    uint64_t v33 = type metadata accessor for Logger(0LL);
    sub_10000A720(v33, (uint64_t)qword_100A2B0B0);
    uint64_t v34 = sub_10001DC4C(a2, (uint64_t)v14, type metadata accessor for OwnedBeaconGroup);
    uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v36 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = swift_slowAlloc(22LL, -1LL);
      uint64_t v38 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v37 = 141558275;
      uint64_t v47 = 1752392040LL;
      uint64_t v48 = (void *)v38;
      uint64_t v46 = a4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v37 + 4, v37 + 12);
      *(_WORD *)(v37 + 12) = 2081;
      uint64_t v39 = type metadata accessor for UUID(0LL);
      uint64_t v40 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(v39, v40);
      uint64_t v47 = sub_1003F11D4(v41, v42, (uint64_t *)&v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v37 + 14, v37 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v14, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "Successfully sent unpair command for group %{private,mask.hash}s",  (uint8_t *)v37,  0x16u);
      swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1LL, -1LL);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v14, type metadata accessor for OwnedBeaconGroup);
    }

    a3();
  }

uint64_t sub_100139054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = a2;
  uint64_t v85 = a3;
  uint64_t v4 = sub_100004AEC(&qword_1009A24C0);
  uint64_t v92 = *(void *)(v4 - 8);
  uint64_t v93 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009A24C8);
  uint64_t v90 = *(void *)(v7 - 8);
  uint64_t v91 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  uint64_t v81 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v82 = v12;
  uint64_t v83 = (uint64_t)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v87 = (uint64_t)&v77 - v13;
  uint64_t v14 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v78 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v79 = v16;
  uint64_t v80 = (uint64_t)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  os_log_type_t v18 = (char *)&v77 - v17;
  if (qword_10099B7A0 != -1) {
    swift_once(&qword_10099B7A0, sub_1006518D8);
  }
  uint64_t v19 = type metadata accessor for Logger(0LL);
  sub_10000A720(v19, (uint64_t)qword_100A2B0B0);
  uint64_t v20 = sub_10001DC4C(a1, (uint64_t)v18, type metadata accessor for OwnedBeaconGroup);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.default.getter(v21);
  BOOL v23 = os_log_type_enabled(v21, v22);
  uint64_t v86 = a1;
  if (v23)
  {
    uint64_t v24 = swift_slowAlloc(22LL, -1LL);
    uint64_t v25 = swift_slowAlloc(32LL, -1LL);
    v94[0] = v25;
    *(_DWORD *)uint64_t v24 = 141558275;
    uint64_t v95 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v96, v24 + 4, v24 + 12);
    *(_WORD *)(v24 + 12) = 2081;
    unint64_t v89 = v24 + 14;
    uint64_t v26 = type metadata accessor for UUID(0LL);
    uint64_t v27 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter(v26, v27);
    uint64_t v95 = sub_1003F11D4(v28, v29, v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v96, v89, v24 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v18, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "Sending unpair command to all members of group %{private,mask.hash}s",  (uint8_t *)v24,  0x16u);
    swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    uint64_t v30 = v24;
    a1 = v86;
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v18, type metadata accessor for OwnedBeaconGroup);
  }

  sub_1001CC778();
  uint64_t v32 = v31;
  uint64_t v33 = v88;
  swift_retain();
  uint64_t v34 = (uint64_t)sub_10014B504(v32, v33);
  swift_bridgeObjectRelease();
  swift_release();
  if (!((unint64_t)v34 >> 62))
  {
    uint64_t v35 = *(void *)((v34 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v35) {
      goto LABEL_8;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    uint64_t v53 = _swiftEmptyArrayStorage;
LABEL_20:
    uint64_t v55 = v88;
    sub_1004E8CAC(a1, v87);
    uint64_t v56 = swift_allocObject(&unk_10093FCB8, 17LL, 7LL);
    *(_BYTE *)(v56 + 16) = 0;
    uint64_t v57 = swift_allocObject(&unk_10093FCE0, 24LL, 7LL);
    *(void *)(v57 + 16) = 0LL;
    v94[0] = (uint64_t)v53;
    uint64_t v58 = a1;
    uint64_t v59 = sub_100004AEC(&qword_1009A2508);
    uint64_t v60 = sub_1000372EC(&qword_1009A2510, &qword_1009A2508, (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v93 = sub_1000372EC( &qword_1009A2518,  &qword_1009A2520,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    uint64_t v61 = Sequence<>.merged()(v59, v60, v93);
    swift_bridgeObjectRelease();
    v94[0] = v61;
    uint64_t v62 = swift_allocObject(&unk_10093FD08, 24LL, 7LL);
    swift_weakInit(v62 + 16, v55);
    uint64_t v63 = v80;
    sub_10001DC4C(v58, v80, type metadata accessor for OwnedBeaconGroup);
    uint64_t v64 = *(unsigned __int8 *)(v78 + 80);
    uint64_t v65 = (v64 + 48) & ~v64;
    unint64_t v66 = (v79 + v65 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v67 = (void *)swift_allocObject(&unk_10093FD30, v66 + 8, v64 | 7);
    v67[2] = v62;
    v67[3] = v56;
    uint64_t v68 = v85;
    v67[4] = v84;
    v67[5] = v68;
    sub_10002218C(v63, (uint64_t)v67 + v65, type metadata accessor for OwnedBeaconGroup);
    *(void *)((char *)v67 + v66) = v57;
    uint64_t v69 = v87;
    uint64_t v70 = v83;
    sub_10001581C(v87, v83, (uint64_t *)&unk_1009A9C30);
    uint64_t v71 = *(unsigned __int8 *)(v81 + 80);
    uint64_t v72 = (v71 + 16) & ~v71;
    unint64_t v73 = (v82 + v72 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v74 = swift_allocObject(&unk_10093FD58, v73 + 8, v71 | 7);
    sub_100015750(v70, v74 + v72, (uint64_t *)&unk_1009A9C30);
    *(void *)(v74 + v73) = v56;
    swift_retain_n(v56, 2LL);
    swift_retain();
    swift_retain();
    uint64_t v75 = sub_100004AEC(&qword_1009A2520);
    uint64_t v76 = Publisher.sink(receiveCompletion:receiveValue:)(sub_1001525A8, v67, sub_1001528D4, v74, v75, v93);
    swift_release();
    swift_release();
    swift_release();
    sub_100015794(v69, (uint64_t *)&unk_1009A9C30);
    swift_beginAccess(v57 + 16, v94, 1LL, 0LL);
    *(void *)(v57 + 16) = v76;
    swift_release();
    swift_release();
    return swift_release();
  }

  if (v34 < 0) {
    uint64_t v54 = v34;
  }
  else {
    uint64_t v54 = v34 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v34);
  uint64_t v35 = _CocoaArrayWrapper.endIndex.getter(v54);
  swift_bridgeObjectRelease();
  if (!v35) {
    goto LABEL_19;
  }
LABEL_8:
  v94[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)(v35);
  if ((v35 & 0x8000000000000000LL) == 0)
  {
    uint64_t v37 = 0LL;
    unint64_t v89 = v34 & 0xC000000000000001LL;
    uint64_t v38 = v34;
    do
    {
      if (v89)
      {
        uint64_t v39 = specialized _ArrayBuffer._getElementSlowPath(_:)(v37, v34);
      }

      else
      {
        uint64_t v39 = *(void *)(v34 + 8 * v37 + 32);
        swift_retain();
      }

      ++v37;
      uint64_t v95 = v39;
      uint64_t v40 = sub_100004AEC(&qword_1009A24D0);
      uint64_t v41 = sub_100004AEC(&qword_1009A24D8);
      uint64_t v42 = sub_1000372EC( &qword_1009A24E0,  &qword_1009A24D0,  (uint64_t)&protocol conformance descriptor for Future<A, B>);
      Publisher.map<A>(_:)(sub_1001398A4, 0LL, v40, v41, v42);
      uint64_t v43 = sub_100004AEC(&qword_1009A24E8);
      uint64_t v44 = sub_1000372EC( &qword_1009A24F0,  &qword_1009A24C0,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
      uint64_t v45 = sub_1000372EC(&qword_1009A24F8, &qword_1009A24E8, (uint64_t)&protocol conformance descriptor for Just<A>);
      uint64_t v46 = v93;
      Publisher.catch<A>(_:)(sub_1001398FC, 0LL, v93, v43, v44, v45);
      (*(void (**)(char *, uint64_t))(v92 + 8))(v6, v46);
      uint64_t v47 = sub_1000372EC( &qword_1009A2500,  &qword_1009A24C8,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
      uint64_t v48 = v91;
      uint64_t v49 = Publisher.eraseToAnyPublisher()(v91, v47);
      (*(void (**)(char *, uint64_t))(v90 + 8))(v9, v48);
      uint64_t v50 = swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v50);
      uint64_t v51 = *(void *)(v94[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v51);
      uint64_t v52 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v51, v49);
      specialized ContiguousArray._endMutation()(v52);
      uint64_t v34 = v38;
    }

    while (v35 != v37);
    uint64_t v53 = (void *)v94[0];
    swift_bridgeObjectRelease();
    a1 = v86;
    goto LABEL_20;
  }

  __break(1u);
  return result;
}

uint64_t sub_1001398A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  uint64_t v5 = sub_100004AEC(&qword_1009A24D8);
  return swift_storeEnumTagMultiPayload(a2, v5, 0LL);
}

uint64_t sub_1001398FC(uint64_t *a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009A24D8);
  __chkstk_darwin(v2);
  uint64_t v4 = (uint64_t *)((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = *a1;
  void *v4 = v5;
  swift_storeEnumTagMultiPayload(v4, v2, 1LL);
  swift_errorRetain(v5);
  return Just.init(_:)(v4, v2);
}

uint64_t sub_100139994( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, __n128), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  uint64_t v16 = &v28[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a2 += 16LL;
  swift_beginAccess(a2, v30, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v18 = result;
    __n128 v19 = swift_beginAccess(a3 + 16, v29, 0LL, 0LL);
    if ((*(_BYTE *)(a3 + 16) & 1) != 0)
    {
      a4(0LL, v19);
    }

    else
    {
      uint64_t v20 = (void *)(a7 + 16);
      uint64_t v27 = type metadata accessor for Transaction(0LL);
      sub_10001DC4C( a6,  (uint64_t)&v28[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8],  type metadata accessor for OwnedBeaconGroup);
      uint64_t v21 = *(unsigned __int8 *)(v14 + 80);
      uint64_t v22 = (v21 + 16) & ~v21;
      unint64_t v23 = (v15 + v22 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v24 = (v23 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v25 = swift_allocObject(&unk_10093FD80, v24 + 16, v21 | 7);
      sub_10002218C((uint64_t)v16, v25 + v22, type metadata accessor for OwnedBeaconGroup);
      *(void *)(v25 + v23) = v18;
      uint64_t v26 = (void *)(v25 + v24);
      *uint64_t v26 = a4;
      v26[1] = a5;
      swift_retain();
      swift_retain();
      static Transaction.asyncTask(name:block:)( "sendUnpairCommand.UnpairManagedPeripheral",  41LL,  2LL,  &unk_1009A2530,  v25);
      swift_release();
      swift_release();
      swift_beginAccess(v20, v28, 1LL, 0LL);
      void *v20 = 0LL;
    }

    return swift_release();
  }

  return result;
}

uint64_t sub_100139B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[24] = a3;
  v4[25] = a4;
  v4[22] = a1;
  v4[23] = a2;
  return swift_task_switch(sub_100139B70, 0LL, 0LL);
}

uint64_t sub_100139B70()
{
  uint64_t v2 = v1;
  swift_retain();
  sub_10014AE60(v2);
  uint64_t v4 = v3;
  v0[26] = v3;
  swift_bridgeObjectRelease();
  swift_release();
  v0[15] = v4;
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to Sequence.asyncFilter(_:)[1]);
  v0[27] = v5;
  uint64_t v6 = sub_100004AEC(&qword_10099CFB8);
  uint64_t v7 = sub_1000372EC(&qword_1009A2540, &qword_10099CFB8, (uint64_t)&protocol conformance descriptor for [A]);
  *uint64_t v5 = v0;
  v5[1] = sub_100139C54;
  return Sequence.asyncFilter(_:)(&unk_1009A2538, 0LL, v6, v7);
}

uint64_t sub_100139C54(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 216LL);
  *(void *)(*(void *)v1 + 224LL) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100139CB8, 0LL, 0LL);
}

uint64_t sub_100139CB8()
{
  if (*(void *)(*(void *)(v0 + 224) + 16LL))
  {
    if (qword_10099B9E0 != -1) {
      swift_once(&qword_10099B9E0, sub_10076012C);
    }
    swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 16, (uint64_t *)&unk_10099FA80);
    if (*(void *)(v0 + 40))
    {
      sub_100012EC0((__int128 *)(v0 + 16), v0 + 56);
      sub_100012ED8((void *)(v0 + 56), *(void *)(v0 + 80));
      uint64_t v9 = (uint64_t (__cdecl *)())((char *)&dword_10099C920 + dword_10099C920);
      uint64_t v2 = (void *)swift_task_alloc(unk_10099C924);
      *(void *)(v0 + 232) = v2;
      *uint64_t v2 = v0;
      v2[1] = sub_100139E64;
      return v9();
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    uint64_t v3 = *(void (**)(void *))(v0 + 192);
    swift_bridgeObjectRelease();
    type metadata accessor for UnpairError(0LL);
    uint64_t v5 = v4;
    *(void *)(v0 + 168) = 1LL;
    unint64_t v6 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v7 = sub_100007864( &qword_10099C238,  (uint64_t (*)(uint64_t))type metadata accessor for UnpairError,  (uint64_t)&unk_1007E3650);
    _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 160), v0 + 168, v6, v5, v7);
    uint64_t v8 = *(void **)(v0 + 160);
    v3(v8);

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  return result;
}

uint64_t sub_100139E64(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 232LL);
  *(void *)(*(void *)v1 + 240LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100139EC0, 0LL, 0LL);
}

uint64_t sub_100139EC0()
{
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 224);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
    uint64_t v3 = swift_task_alloc(32LL);
    *(void *)(v0 + 248) = v3;
    *(void *)(v3 + 16) = v2;
    *(void *)(v3 + 24) = v1;
    uint64_t v4 = (void *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
    *(void *)(v0 + 256) = v4;
    void *v4 = v0;
    v4[1] = sub_10013A0D0;
    return withTaskGroup<A, B>(of:returning:isolation:body:)( v4,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8,  0LL,  0LL,  &unk_1009A2550,  v3,  (char *)&type metadata for () + 8);
  }

  else
  {
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
    if (qword_10099B7A0 != -1) {
      swift_once(&qword_10099B7A0, sub_1006518D8);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    uint64_t v7 = sub_10000A720(v6, (uint64_t)qword_100A2B0B0);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "sendUnpairCommand: missing OwnerCommandService to send unpair!",  v10,  2u);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    uint64_t v11 = *(void (**)(void *))(v0 + 192);

    type metadata accessor for UnpairError(0LL);
    uint64_t v13 = v12;
    *(void *)(v0 + 136) = 1LL;
    unint64_t v14 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v15 = sub_100007864( &qword_10099C238,  (uint64_t (*)(uint64_t))type metadata accessor for UnpairError,  (uint64_t)&unk_1007E3650);
    _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 128), v0 + 136, v14, v13, v15);
    uint64_t v16 = *(void **)(v0 + 128);
    v11(v16);

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10013A0D0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 248LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 256LL));
  swift_bridgeObjectRelease();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10013A138, 0LL, 0LL);
}

uint64_t sub_10013A138()
{
  uint64_t v1 = *(void (**)(void *))(v0 + 192);
  type metadata accessor for UnpairError(0LL);
  uint64_t v3 = v2;
  *(void *)(v0 + 152) = 1LL;
  unint64_t v4 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v5 = sub_100007864( &qword_10099C238,  (uint64_t (*)(uint64_t))type metadata accessor for UnpairError,  (uint64_t)&unk_1007E3650);
  _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 144), v0 + 152, v4, v3, v5);
  uint64_t v6 = *(void **)(v0 + 144);
  v1(v6);
  swift_release();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013A204()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1009B536C);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10013A24C;
  return sub_1005D2AFC();
}

uint64_t sub_10013A24C(uint64_t a1)
{
  uint64_t v4 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_10013A2A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[10] = a3;
  v4[11] = a4;
  v4[9] = a2;
  unint64_t v5 = (*(void *)(*(void *)(sub_100004AEC(&qword_1009A9BF0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[12] = swift_task_alloc(v5);
  v4[13] = swift_task_alloc(v5);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  v4[14] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[15] = v7;
  uint64_t v8 = *(void *)(v7 + 64);
  v4[16] = v8;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v4[17] = swift_task_alloc(v9);
  v4[18] = swift_task_alloc(v9);
  v4[19] = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for OwnedBeaconRecord(0LL);
  v4[20] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[21] = v11;
  v4[22] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10013A380, 0LL, 0LL);
}

uint64_t sub_10013A380()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 168);
    uint64_t v4 = *(void *)(v0 + 120);
    uint64_t v60 = *(void *)(v0 + 176) + *(int *)(*(void *)(v0 + 160) + 20LL);
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v59 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain(v1);
    uint64_t v61 = v4;
    while (1)
    {
      uint64_t v67 = v2;
      uint64_t v9 = *(void *)(v0 + 176);
      uint64_t v10 = *(void *)(v0 + 152);
      uint64_t v11 = *(void *)(v0 + 112);
      sub_10001DC4C(v5, v9, type metadata accessor for OwnedBeaconRecord);
      uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
      v12(v10, v60, v11);
      sub_100018C68(v9, type metadata accessor for OwnedBeaconRecord);
      if (qword_10099B7A0 != -1) {
        swift_once(&qword_10099B7A0, sub_1006518D8);
      }
      uint64_t v13 = *(void *)(v0 + 144);
      uint64_t v14 = *(void *)(v0 + 152);
      uint64_t v15 = *(void *)(v0 + 112);
      uint64_t v16 = type metadata accessor for Logger(0LL);
      sub_10000A720(v16, (uint64_t)qword_100A2B0B0);
      uint64_t v64 = v12;
      uint64_t v17 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v12)(v13, v14, v15);
      uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
      os_log_type_t v19 = static os_log_type_t.default.getter(v18);
      BOOL v20 = os_log_type_enabled(v18, v19);
      uint64_t v21 = *(void *)(v0 + 144);
      uint64_t v22 = *(void *)(v0 + 112);
      uint64_t v66 = v5;
      if (v20)
      {
        uint64_t v23 = swift_slowAlloc(22LL, -1LL);
        uint64_t v24 = swift_slowAlloc(32LL, -1LL);
        uint64_t v68 = v24;
        *(_DWORD *)uint64_t v23 = 141558275;
        *(void *)(v23 + 4) = 1752392040LL;
        *(_WORD *)(v23 + 12) = 2081;
        uint64_t v25 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter(v22, v25);
        *(void *)(v23 + 14) = sub_1003F11D4(v26, v27, &v68);
        swift_bridgeObjectRelease();
        uint64_t v65 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
        v65(v21, v22);
        _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "sendUnpairCommand: Sending unpair to managed peripheral %{private,mask.hash}s",  (uint8_t *)v23,  0x16u);
        swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v24, -1LL, -1LL);
        swift_slowDealloc(v23, -1LL, -1LL);
      }

      else
      {
        uint64_t v65 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
        v65(v21, v22);
      }

      uint64_t v28 = *(void *)(v0 + 152);
      uint64_t v30 = *(void *)(v0 + 128);
      uint64_t v29 = *(void *)(v0 + 136);
      uint64_t v32 = *(void *)(v0 + 104);
      uint64_t v31 = *(void *)(v0 + 112);
      uint64_t v33 = *(void *)(v0 + 88);
      uint64_t v62 = v32;
      uint64_t v63 = *(void *)(v0 + 96);
      uint64_t v34 = type metadata accessor for TaskPriority(0LL);
      uint64_t v35 = *(void *)(v34 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56))(v32, 1LL, 1LL, v34);
      v64(v29, v28, v31);
      uint64_t v36 = *(unsigned __int8 *)(v4 + 80);
      uint64_t v37 = (v36 + 40) & ~v36;
      uint64_t v38 = (void *)swift_allocObject(&unk_10093FDA8, v37 + v30, v36 | 7);
      void v38[2] = 0LL;
      uint64_t v39 = v38 + 2;
      v38[3] = 0LL;
      v38[4] = v33;
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))((char *)v38 + v37, v29, v31);
      sub_10001581C(v62, v63, &qword_1009A9BF0);
      LODWORD(v37) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v63, 1LL, v34);
      uint64_t v40 = swift_retain();
      uint64_t v41 = *(void *)(v0 + 96);
      if ((_DWORD)v37 == 1)
      {
        sub_100015794(*(void *)(v0 + 96), &qword_1009A9BF0);
        uint64_t v42 = 0LL;
        uint64_t v43 = *v39;
        if (!*v39) {
          goto LABEL_13;
        }
      }

      else
      {
        unsigned __int8 v49 = TaskPriority.rawValue.getter(v40);
        (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v41, v34);
        uint64_t v42 = v49;
        uint64_t v43 = *v39;
        if (!*v39)
        {
LABEL_13:
          uint64_t v46 = 0LL;
          uint64_t v48 = 0LL;
          goto LABEL_14;
        }
      }

      uint64_t v44 = v38[3];
      uint64_t ObjectType = swift_getObjectType(v43);
      swift_unknownObjectRetain(v43);
      uint64_t v46 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v44);
      uint64_t v48 = v47;
      swift_unknownObjectRelease(v43);
LABEL_14:
      uint64_t v50 = **(void **)(v0 + 72);
      uint64_t v51 = swift_allocObject(&unk_10093FDD0, 32LL, 7LL);
      *(void *)(v51 + 16) = &unk_1009A2560;
      *(void *)(v51 + 24) = v38;
      uint64_t v52 = v48 | v46;
      if (v48 | v46)
      {
        uint64_t v52 = v0 + 16;
        *(void *)(v0 + 16) = 0LL;
        *(void *)(v0 + 24) = 0LL;
        *(void *)(v0 + 32) = v46;
        *(void *)(v0 + 40) = v48;
      }

      uint64_t v6 = *(void *)(v0 + 152);
      uint64_t v8 = *(void *)(v0 + 104);
      uint64_t v7 = *(void *)(v0 + 112);
      *(void *)(v0 + 48) = 1LL;
      *(void *)(v0 + 56) = v52;
      *(void *)(v0 + 64) = v50;
      swift_task_create(v42 | 0x3100, v0 + 48, (char *)&type metadata for () + 8, &unk_1009AC110, v51);
      swift_release();
      sub_100015794(v8, &qword_1009A9BF0);
      v65(v6, v7);
      uint64_t v5 = v66 + v59;
      uint64_t v2 = v67 - 1;
      uint64_t v4 = v61;
      if (v67 == 1)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }

  uint64_t v53 = *(void *)(v0 + 144);
  uint64_t v54 = *(void *)(v0 + 152);
  uint64_t v55 = *(void *)(v0 + 136);
  uint64_t v57 = *(void *)(v0 + 96);
  uint64_t v56 = *(void *)(v0 + 104);
  swift_task_dealloc(*(void *)(v0 + 176));
  swift_task_dealloc(v54);
  swift_task_dealloc(v53);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013A870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[7] = a4;
  v5[8] = a5;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  v5[9] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[10] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[11] = swift_task_alloc(v8);
  v5[12] = swift_task_alloc(v8);
  return swift_task_switch(sub_10013A8E0, 0LL, 0LL);
}

uint64_t sub_10013A8E0()
{
  if (qword_10099B7A0 != -1) {
    swift_once(&qword_10099B7A0, sub_1006518D8);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A2B0B0);
  v0[13] = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Trying RX Unpair...", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = (uint64_t **)swift_task_alloc(dword_1009BF5FC);
  v0[14] = (uint64_t)v6;
  *uint64_t v6 = v0;
  v6[1] = (uint64_t *)sub_10013A9E8;
  return sub_100770E9C(v0[8], 0);
}

uint64_t sub_10013A9E8()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 112LL);
  *(void *)(*(void *)v1 + 120LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_10013AC2C;
  }
  else {
    uint64_t v3 = sub_10013AA4C;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10013AA4C()
{
  uint64_t v1 = (*(uint64_t (**)(void, void, void))(*(void *)(v0 + 80) + 16LL))( *(void *)(v0 + 96),  *(void *)(v0 + 64),  *(void *)(v0 + 72));
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void *)(v0 + 96);
    uint64_t v5 = *(void *)(v0 + 72);
    uint64_t v13 = *(void *)(v0 + 80);
    uint64_t v6 = swift_slowAlloc(22LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    *(void *)(v0 + 40) = 1752392040LL;
    uint64_t v14 = v12;
    *(_DWORD *)uint64_t v6 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2081;
    uint64_t v7 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter(v5, v7);
    *(void *)(v0 + 48) = sub_1003F11D4(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v4, v5);
    _os_log_impl( (void *)&_mh_execute_header,  v2,  v3,  "RX Unpaired %{private,mask.hash}s completed successfully",  (uint8_t *)v6,  0x16u);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 80) + 8LL))(*(void *)(v0 + 96), *(void *)(v0 + 72));
  }

  uint64_t v10 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 96));
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013AC2C()
{
  uint64_t v1 = *(void *)(v0 + 120);
  (*(void (**)(void, void, void))(*(void *)(v0 + 80) + 16LL))( *(void *)(v0 + 88),  *(void *)(v0 + 64),  *(void *)(v0 + 72));
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  os_log_type_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 88);
    uint64_t v19 = *(void *)(v0 + 120);
    uint64_t v20 = *(void *)(v0 + 80);
    log = v3;
    uint64_t v6 = *(void *)(v0 + 72);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v22 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    uint64_t v24 = v23;
    *(void *)(v0 + 16) = 1752392040LL;
    *(_DWORD *)uint64_t v7 = 141558531;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2081;
    uint64_t v8 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter(v6, v8);
    *(void *)(v0 + 24) = sub_1003F11D4(v9, v10, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v5, v6);
    *(_WORD *)(v7 + 22) = 2114;
    swift_errorRetain(v19);
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError(v19);
    *(void *)(v0 + 32) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v7 + 24, v7 + 32);
    *uint64_t v22 = v11;
    swift_errorRelease(v19);
    swift_errorRelease(v19);
    _os_log_impl( (void *)&_mh_execute_header,  log,  v4,  "RX Unpaired %{private,mask.hash}s with error %{public}@",  (uint8_t *)v7,  0x20u);
    uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v22, 1LL, v12);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);

    swift_errorRelease(v19);
  }

  else
  {
    uint64_t v13 = *(void *)(v0 + 120);
    uint64_t v15 = *(void *)(v0 + 80);
    uint64_t v14 = *(void *)(v0 + 88);
    uint64_t v16 = *(void *)(v0 + 72);
    swift_errorRelease(v13);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    swift_errorRelease(v13);
    swift_errorRelease(v13);
  }

  uint64_t v17 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 96));
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10013AEEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v64 = a3;
  uint64_t v65 = a2;
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v66 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v63 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v62 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v57 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v57 - v16;
  uint64_t v18 = sub_100004AEC(&qword_1009A24D8);
  __chkstk_darwin(v18);
  uint64_t v20 = (uint64_t *)((char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v20, &qword_1009A24D8);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v20, v18);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v22 = *v20;
    os_log_type_t v23 = static os_log_type_t.default.getter(EnumCaseMultiPayload);
    if (qword_10099B798 != -1) {
      swift_once(&qword_10099B798, sub_100651870);
    }
    uint64_t v24 = (os_log_s *)qword_100A2B0A8;
    if (os_log_type_enabled((os_log_t)qword_100A2B0A8, v23))
    {
      swift_errorRetain(v22);
      swift_errorRetain(v22);
      uint64_t v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v26 = swift_slowAlloc(32LL, -1LL);
      v67[0] = v26;
      *(_DWORD *)uint64_t v25 = 136315138;
      uint64_t v68 = v22;
      swift_errorRetain(v22);
      uint64_t v27 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v28 = String.init<A>(describing:)(&v68, v27);
      uint64_t v68 = sub_1003F11D4(v28, v29, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v22);
      swift_errorRelease(v22);
      _os_log_impl((void *)&_mh_execute_header, v24, v23, "Unpair failed. %s", v25, 0xCu);
      swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    swift_errorRelease(v22);
  }

  else
  {
    uint64_t v30 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v10 + 32))(v17, v20, v9);
    os_log_type_t v31 = static os_log_type_t.default.getter(v30);
    if (qword_10099B798 != -1) {
      swift_once(&qword_10099B798, sub_100651870);
    }
    uint64_t v32 = (os_log_s *)qword_100A2B0A8;
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v33(v15, v17, v9);
    os_log_type_t v34 = v31;
    if (os_log_type_enabled(v32, v31))
    {
      uint64_t v35 = swift_slowAlloc(22LL, -1LL);
      uint64_t v59 = v33;
      uint64_t v36 = v35;
      uint64_t v58 = swift_slowAlloc(32LL, -1LL);
      v67[0] = v58;
      *(_DWORD *)uint64_t v36 = 141558275;
      uint64_t v68 = 1752392040LL;
      uint64_t v60 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v36 + 4, v36 + 12);
      *(_WORD *)(v36 + 12) = 2081;
      uint64_t v61 = v8;
      uint64_t v37 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter(v9, v37);
      uint64_t v68 = sub_1003F11D4(v38, v39, v67);
      uint64_t v17 = v60;
      uint64_t v8 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v36 + 14, v36 + 22);
      swift_bridgeObjectRelease();
      uint64_t v40 = *(void (**)(char *, uint64_t))(v10 + 8);
      v40(v15, v9);
      _os_log_impl( (void *)&_mh_execute_header,  v32,  v34,  "Unpair succeeded for beacon %{private,mask.hash}s",  (uint8_t *)v36,  0x16u);
      uint64_t v41 = v58;
      swift_arrayDestroy(v58, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1LL, -1LL);
      uint64_t v42 = v36;
      uint64_t v33 = v59;
      swift_slowDealloc(v42, -1LL, -1LL);
    }

    else
    {
      uint64_t v40 = *(void (**)(char *, uint64_t))(v10 + 8);
      v40(v15, v9);
    }

    uint64_t v43 = (_BYTE *)(v64 + 16);
    sub_10001581C(v65, (uint64_t)v6, (uint64_t *)&unk_1009A9C30);
    uint64_t v44 = v66;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v6, 1LL, v66) == 1)
    {
      v40(v17, v9);
      sub_100015794((uint64_t)v6, (uint64_t *)&unk_1009A9C30);
    }

    else
    {
      sub_10002218C((uint64_t)v6, (uint64_t)v8, type metadata accessor for OwnedBeaconRecord);
      if ((static UUID.== infix(_:_:)(&v8[*(int *)(v44 + 20)], v17) & 1) == 0)
      {
        sub_100018C68((uint64_t)v8, type metadata accessor for OwnedBeaconRecord);
        v40(v17, v9);
        return;
      }

      if (qword_10099B7A0 != -1) {
        swift_once(&qword_10099B7A0, sub_1006518D8);
      }
      uint64_t v45 = type metadata accessor for Logger(0LL);
      sub_10000A720(v45, (uint64_t)qword_100A2B0B0);
      uint64_t v46 = v62;
      uint64_t v47 = ((uint64_t (*)(char *, char *, uint64_t))v33)(v62, v17, v9);
      uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
      os_log_type_t v49 = static os_log_type_t.default.getter(v48);
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = swift_slowAlloc(22LL, -1LL);
        uint64_t v60 = v17;
        uint64_t v51 = v50;
        uint64_t v66 = swift_slowAlloc(32LL, -1LL);
        v67[0] = v66;
        *(_DWORD *)uint64_t v51 = 141558275;
        uint64_t v68 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v51 + 4, v51 + 12);
        *(_WORD *)(v51 + 12) = 2081;
        uint64_t v61 = v8;
        uint64_t v52 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter(v9, v52);
        uint64_t v68 = sub_1003F11D4(v53, v54, v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v51 + 14, v51 + 22);
        swift_bridgeObjectRelease();
        v40(v46, v9);
        _os_log_impl( (void *)&_mh_execute_header,  v48,  v49,  "Unpair command succeeded for primary beacon %{private,mask.hash}s",  (uint8_t *)v51,  0x16u);
        uint64_t v55 = v66;
        swift_arrayDestroy(v66, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v55, -1LL, -1LL);
        swift_slowDealloc(v51, -1LL, -1LL);

        sub_100018C68((uint64_t)v61, type metadata accessor for OwnedBeaconRecord);
        uint64_t v56 = v60;
      }

      else
      {

        v40(v46, v9);
        sub_100018C68((uint64_t)v8, type metadata accessor for OwnedBeaconRecord);
        uint64_t v56 = v17;
      }

      v40(v56, v9);
    }

    swift_beginAccess(v43, v67, 1LL, 0LL);
    *uint64_t v43 = 1;
  }

uint64_t sub_10013B668@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(void *)a2 = v2;
  *(_BYTE *)(a2 + 8) = 0;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10013B678(uint64_t *a1)
{
  uint64_t v3 = *a1;
  char v4 = 1;
  swift_errorRetain(v3);
  uint64_t v1 = sub_100004AEC(&qword_1009A25C0);
  return Just.init(_:)(&v3, v1);
}

uint64_t sub_10013B6CC( uint64_t *a1, uint64_t a2, void (*a3)(void), uint64_t a4, void (*a5)(void))
{
  uint64_t v10 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v44 - v14;
  if ((a1[1] & 1) != 0)
  {
    uint64_t v16 = *a1;
    swift_errorRetain(*a1);
    if (qword_10099B7A0 != -1) {
      swift_once(&qword_10099B7A0, sub_1006518D8);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    sub_10000A720(v17, (uint64_t)qword_100A2B0B0);
    sub_10001DC4C(a2, (uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
    sub_100044AC8(v16, 1);
    uint64_t v18 = swift_errorRetain(v16);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      uint64_t v47 = a4;
      uint64_t v22 = v21;
      uint64_t v23 = swift_slowAlloc(64LL, -1LL);
      uint64_t v45 = v23;
      *(_DWORD *)uint64_t v22 = 141558531;
      uint64_t v48 = 1752392040LL;
      v49[0] = v23;
      uint64_t v46 = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v22 + 4, v22 + 12);
      *(_WORD *)(v22 + 12) = 2081;
      uint64_t v24 = type metadata accessor for UUID(0LL);
      uint64_t v25 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter(v24, v25);
      uint64_t v48 = sub_1003F11D4(v26, v27, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v22 + 14, v22 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
      *(_WORD *)(v22 + 22) = 2082;
      uint64_t v48 = v16;
      swift_errorRetain(v16);
      uint64_t v28 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v29 = String.init<A>(describing:)(&v48, v28);
      uint64_t v48 = sub_1003F11D4(v29, v30, v49);
      a3 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v22 + 24, v22 + 32);
      swift_bridgeObjectRelease();
      sub_100044A2C(v16, 1);
      sub_100044A2C(v16, 1);
      _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "Failed to remove related records for %{private,mask.hash}s. Error %{public}s)",  (uint8_t *)v22,  0x20u);
      uint64_t v31 = v45;
      swift_arrayDestroy(v45, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
      sub_100044A2C(v16, 1);
      sub_100044A2C(v16, 1);
    }

    swift_errorRetain(v16);
    a3(v16);
    sub_100044A2C(v16, 1);
    sub_100044A2C(v16, 1);
  }

  else
  {
    if (qword_10099B7A0 != -1) {
      swift_once(&qword_10099B7A0, sub_1006518D8);
    }
    uint64_t v32 = type metadata accessor for Logger(0LL);
    sub_10000A720(v32, (uint64_t)qword_100A2B0B0);
    uint64_t v33 = sub_10001DC4C(a2, (uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
    os_log_type_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v35 = static os_log_type_t.default.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc(22LL, -1LL);
      uint64_t v37 = swift_slowAlloc(32LL, -1LL);
      uint64_t v47 = a4;
      uint64_t v38 = v37;
      *(_DWORD *)uint64_t v36 = 141558275;
      uint64_t v48 = 1752392040LL;
      v49[0] = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v36 + 4, v36 + 12);
      *(_WORD *)(v36 + 12) = 2081;
      uint64_t v46 = a5;
      uint64_t v39 = type metadata accessor for UUID(0LL);
      uint64_t v40 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(v39, v40);
      uint64_t v48 = sub_1003F11D4(v41, v42, v49);
      a5 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v36 + 14, v36 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl( (void *)&_mh_execute_header,  v34,  v35,  "Successfully removed related records for %{private,mask.hash}s",  (uint8_t *)v36,  0x16u);
      swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1LL, -1LL);
      swift_slowDealloc(v36, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
    }

    a3(0LL);
  }

  swift_beginAccess((char *)a5 + 16, v49, 1LL, 0LL);
  *((void *)a5 + 2) = 0LL;
  return swift_release();
}

uint64_t sub_10013BC3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  sub_1003E30EC(a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))( (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a4,  v7);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v10 + 32) & ~v10;
  uint64_t v12 = swift_allocObject(&unk_10093FE20, v11 + v9, v10 | 7);
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))( v12 + v11,  (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v7);
  swift_retain();
  Future.addSuccess(block:)(sub_100152CA8, v12);
  swift_release();
  swift_release();
  uint64_t v13 = swift_allocObject(&unk_10093FE48, 32LL, 7LL);
  *(void *)(v13 + 16) = a1;
  *(void *)(v13 + 24) = a2;
  swift_retain();
  Future.addFailure(block:)(sub_100152CE8, v13);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10013BD8C(_BYTE *a1, void (*a2)(uint64_t *), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100004AEC(&qword_1009A24D8);
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t *)((char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (*a1 == 1)
  {
    uint64_t v10 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v9, a4, v10);
    uint64_t v11 = 0LL;
  }

  else
  {
    unint64_t v12 = sub_10014A2C0();
    uint64_t v13 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v12, 0LL, 0LL);
    *uint64_t v14 = 0;
    *uint64_t v9 = v13;
    uint64_t v11 = 1LL;
  }

  swift_storeEnumTagMultiPayload(v9, v7, v11);
  a2(v9);
  return sub_100015794((uint64_t)v9, &qword_1009A24D8);
}

uint64_t sub_10013BE84(uint64_t a1, void (*a2)(void *))
{
  uint64_t v4 = sub_100004AEC(&qword_1009A24D8);
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  *uint64_t v6 = a1;
  swift_storeEnumTagMultiPayload(v6, v7, 1LL);
  swift_errorRetain(a1);
  a2(v6);
  return sub_100015794((uint64_t)v6, &qword_1009A24D8);
}

uint64_t sub_10013BF28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10 = swift_allocObject(&unk_10093FF38, 32LL, 7LL);
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  swift_retain();
  swift_retain();
  sub_10014BD74(a4, a5, a3, (void (*)(uint64_t, uint64_t))sub_100153460, v10);
  return swift_release_n(v10, 2LL);
}

uint64_t sub_10013BFB4(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  if (!a1) {
    return a2(0LL, 0LL);
  }
  swift_errorRetain(a1);
  a2(a1, 1LL);
  return swift_errorRelease(a1);
}

uint64_t sub_10013C010(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = swift_errorRetain(result);
    uint64_t v3 = static os_log_type_t.error.getter(v2);
    if (qword_10099B748 != -1) {
      swift_once(&qword_10099B748, sub_100651480);
    }
    uint64_t v4 = qword_100A2B058;
    uint64_t v5 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v6 = swift_allocObject(v5, 72LL, 7LL);
    *(_OWORD *)(v6 + 16) = xmmword_1007E67D0;
    uint64_t v11 = v1;
    swift_errorRetain(v1);
    uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v8 = String.init<A>(describing:)(&v11, v7);
    uint64_t v10 = v9;
    *(void *)(v6 + 56) = &type metadata for String;
    *(void *)(v6 + 64) = sub_1000226F4();
    *(void *)(v6 + 32) = v8;
    *(void *)(v6 + 40) = v10;
    os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "unshare failed: %@", 18LL, 2LL, v6);
    swift_bridgeObjectRelease();
    return swift_errorRelease(v1);
  }

  return result;
}

uint64_t sub_10013C128( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v41 = a4;
  uint64_t v11 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = sub_100004AEC(&qword_1009A9BF0);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unsigned int v40 = static os_log_type_t.default.getter(v15);
  if (a1)
  {
    if (qword_10099B748 != -1) {
      swift_once(&qword_10099B748, sub_100651480);
    }
    uint64_t v18 = qword_100A2B058;
    uint64_t v19 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v20 = swift_allocObject(v19, 72LL, 7LL);
    *(_OWORD *)(v20 + 16) = xmmword_1007E67D0;
    uint64_t v21 = type metadata accessor for UUID(0LL);
    uint64_t v22 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
    uint64_t v25 = v24;
    *(void *)(v20 + 56) = &type metadata for String;
    *(void *)(v20 + 64) = sub_1000226F4();
    *(void *)(v20 + 32) = v23;
    *(void *)(v20 + 40) = v25;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v18, "Unpair for beacon, %@, unsuccessful", 35LL, 2LL, v20);
    swift_bridgeObjectRelease();
    return a3(a1);
  }

  else
  {
    v37[1] = a5;
    uint64_t v38 = a6;
    uint64_t v39 = a3;
    if (qword_10099B748 != -1) {
      swift_once(&qword_10099B748, sub_100651480);
    }
    uint64_t v27 = qword_100A2B058;
    uint64_t v28 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v29 = swift_allocObject(v28, 72LL, 7LL);
    *(_OWORD *)(v29 + 16) = xmmword_1007E67D0;
    uint64_t v30 = UUID.uuidString.getter(v29);
    uint64_t v32 = v31;
    *(void *)(v29 + 56) = &type metadata for String;
    *(void *)(v29 + 64) = sub_1000226F4();
    *(void *)(v29 + 32) = v30;
    *(void *)(v29 + 40) = v32;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v27, "Successfully unpaired beacon %@.", 32LL, 2LL, v29);
    swift_bridgeObjectRelease();
    v39(0LL);
    sub_1004BDCFC(a2);
    uint64_t v33 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56LL))(v17, 1LL, 1LL, v33);
    sub_10001DC4C(a2, (uint64_t)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL), type metadata accessor for OwnedBeaconRecord);
    uint64_t v34 = *(unsigned __int8 *)(v12 + 80);
    uint64_t v35 = (v34 + 40) & ~v34;
    uint64_t v36 = (void *)swift_allocObject(&unk_10093FB50, v35 + v13, v34 | 7);
    v36[2] = 0LL;
    v36[3] = 0LL;
    v36[4] = v38;
    sub_10002218C( (uint64_t)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL),  (uint64_t)v36 + v35,  type metadata accessor for OwnedBeaconRecord);
    swift_retain();
    sub_1003EDB00((uint64_t)v17, (uint64_t)&unk_1009A2498, (uint64_t)v36);
    return swift_release();
  }

uint64_t sub_10013C45C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[20] = a4;
  v5[21] = a5;
  uint64_t v6 = type metadata accessor for OwnedBeaconRecord(0LL);
  v5[22] = v6;
  unint64_t v7 = (*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[23] = swift_task_alloc(v7);
  v5[24] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  v5[25] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[26] = v9;
  v5[27] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10013C4F0, 0LL, 0LL);
}

uint64_t sub_10013C4F0()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C908 + dword_10099C908);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099C90C);
    *(void *)(v0 + 224) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10013C5F0;
    return v4();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10013C5F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 224LL);
  *(void *)(*(void *)v1 + 232LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10013C64C, 0LL, 0LL);
}

uint64_t sub_10013C64C()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 232))
  {
    uint64_t v3 = *(void *)(v0 + 168);
    uint64_t v2 = *(void *)(v0 + 176);
    uint64_t v4 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    UUID.init()(v4);
    uint64_t v5 = v3 + *(int *)(v2 + 20);
    uint64_t v6 = (void *)swift_task_alloc(dword_1009A1524);
    *(void *)(v0 + 240) = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_10013CA08;
    return sub_1000FF930(*(void *)(v0 + 216), v5);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    unint64_t v8 = sub_1000157D0();
    uint64_t v9 = swift_allocError(&type metadata for DaemonError, v8, 0LL, 0LL);
    *uint64_t v10 = 0xD000000000000016LL;
    v10[1] = 0x80000001008553D0LL;
    swift_willThrow(v9);
    if (qword_10099B138 != -1) {
      swift_once(&qword_10099B138, sub_10012E678);
    }
    uint64_t v11 = *(void *)(v0 + 184);
    uint64_t v12 = *(void *)(v0 + 168);
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_10000A720(v13, (uint64_t)qword_100A2A200);
    sub_10001DC4C(v12, v11, type metadata accessor for OwnedBeaconRecord);
    swift_errorRetain(v9);
    uint64_t v14 = swift_errorRetain(v9);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v27 = *(void *)(v0 + 200);
      uint64_t v17 = *(void *)(v0 + 184);
      uint64_t v18 = swift_slowAlloc(32LL, -1LL);
      uint64_t v28 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v29 = swift_slowAlloc(32LL, -1LL);
      uint64_t v30 = v29;
      *(_DWORD *)uint64_t v18 = 141558531;
      *(void *)(v0 + 120) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v18 + 4, v18 + 12);
      *(_WORD *)(v18 + 12) = 2081;
      uint64_t v19 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v27, v19);
      *(void *)(v0 + 128) = sub_1003F11D4(v20, v21, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v18 + 14, v18 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68(v17, type metadata accessor for OwnedBeaconRecord);
      *(_WORD *)(v18 + 22) = 2114;
      swift_errorRetain(v9);
      uint64_t v22 = _swift_stdlib_bridgeErrorToNSError(v9);
      *(void *)(v0 + 136) = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v18 + 24, v18 + 32);
      *uint64_t v28 = v22;
      swift_errorRelease(v9);
      swift_errorRelease(v9);
      _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "Disable notify when found for beacon %{private,mask.hash}s, error - %{public}@",  (uint8_t *)v18,  0x20u);
      uint64_t v23 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v28, 1LL, v23);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);

      swift_errorRelease(v9);
    }

    else
    {
      uint64_t v24 = *(void *)(v0 + 184);
      swift_errorRelease(v9);
      sub_100018C68(v24, type metadata accessor for OwnedBeaconRecord);
      swift_errorRelease(v9);
      swift_errorRelease(v9);
    }

    uint64_t v25 = *(void *)(v0 + 184);
    uint64_t v26 = *(void *)(v0 + 192);
    swift_task_dealloc(*(void *)(v0 + 216));
    swift_task_dealloc(v26);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10013CA08()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 240LL);
  *(void *)(*(void *)v1 + 248LL) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v2[26] + 8LL))(v2[27], v2[25]);
  if (v0) {
    uint64_t v4 = sub_10013CCC4;
  }
  else {
    uint64_t v4 = sub_10013CA7C;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10013CA7C()
{
  if (qword_10099B138 != -1) {
    swift_once(&qword_10099B138, sub_10012E678);
  }
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_10000A720(v3, (uint64_t)qword_100A2A200);
  uint64_t v4 = sub_10001DC4C(v2, v1, type metadata accessor for OwnedBeaconRecord);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = *(void *)(v0 + 192);
    uint64_t v16 = *(void *)(v0 + 200);
    uint64_t v8 = swift_slowAlloc(22LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v17 = v9;
    *(_DWORD *)uint64_t v8 = 141558275;
    *(void *)(v0 + 144) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2081;
    uint64_t v10 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter(v16, v10);
    *(void *)(v0 + 152) = sub_1003F11D4(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68(v7, type metadata accessor for OwnedBeaconRecord);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "Notify when found disabled for beacon %{private,mask.hash}s.",  (uint8_t *)v8,  0x16u);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    sub_100018C68(*(void *)(v0 + 192), type metadata accessor for OwnedBeaconRecord);
  }

  swift_release();

  uint64_t v13 = *(void *)(v0 + 184);
  uint64_t v14 = *(void *)(v0 + 192);
  swift_task_dealloc(*(void *)(v0 + 216));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013CCC4()
{
  uint64_t v1 = *(void *)(v0 + 248);
  if (qword_10099B138 != -1) {
    swift_once(&qword_10099B138, sub_10012E678);
  }
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10000A720(v4, (uint64_t)qword_100A2A200);
  sub_10001DC4C(v3, v2, type metadata accessor for OwnedBeaconRecord);
  swift_errorRetain(v1);
  uint64_t v5 = swift_errorRetain(v1);
  os_log_type_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v19 = *(void *)(v0 + 200);
    uint64_t v8 = *(void *)(v0 + 184);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v20 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    uint64_t v22 = v21;
    *(_DWORD *)uint64_t v9 = 141558531;
    *(void *)(v0 + 120) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    uint64_t v10 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter(v19, v10);
    *(void *)(v0 + 128) = sub_1003F11D4(v11, v12, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68(v8, type metadata accessor for OwnedBeaconRecord);
    *(_WORD *)(v9 + 22) = 2114;
    swift_errorRetain(v1);
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 136) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v9 + 24, v9 + 32);
    uint64_t *v20 = v13;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "Disable notify when found for beacon %{private,mask.hash}s, error - %{public}@",  (uint8_t *)v9,  0x20u);
    uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v20, 1LL, v14);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);

    swift_errorRelease(v1);
  }

  else
  {
    uint64_t v15 = *(void *)(v0 + 184);
    swift_errorRelease(v1);
    sub_100018C68(v15, type metadata accessor for OwnedBeaconRecord);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v16 = *(void *)(v0 + 184);
  uint64_t v17 = *(void *)(v0 + 192);
  swift_task_dealloc(*(void *)(v0 + 216));
  swift_task_dealloc(v17);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013CFD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v31 = a3;
  uint64_t v7 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    uint64_t v11 = swift_errorRetain(a1);
    uint64_t v12 = static os_log_type_t.error.getter(v11);
    if (qword_10099B748 != -1) {
      swift_once(&qword_10099B748, sub_100651480);
    }
    uint64_t v13 = qword_100A2B058;
    uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
    *(_OWORD *)(v15 + 16) = xmmword_1007E67D0;
    uint64_t v32 = a1;
    swift_errorRetain(a1);
    uint64_t v16 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v17 = String.init<A>(describing:)(&v32, v16);
    uint64_t v19 = v18;
    *(void *)(v15 + 56) = &type metadata for String;
    *(void *)(v15 + 64) = sub_1000226F4();
    *(void *)(v15 + 32) = v17;
    *(void *)(v15 + 40) = v19;
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "declineShare failed: %@", 23LL, 2LL, v15);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
  }

  uint64_t v20 = v31;
  sub_10001DC4C(v31, (uint64_t)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL), type metadata accessor for SharedBeaconRecord);
  uint64_t v21 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v22 = (v21 + 24) & ~v21;
  unint64_t v23 = (v9 + v22 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v24 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v25 = swift_allocObject(&unk_10093FC18, v24 + 8, v21 | 7);
  *(void *)(v25 + 16) = a1;
  sub_10002218C((uint64_t)v10, v25 + v22, type metadata accessor for SharedBeaconRecord);
  uint64_t v26 = (void *)(v25 + v23);
  uint64_t v27 = v30;
  *uint64_t v26 = v29;
  v26[1] = v27;
  *(void *)(v25 + v24) = a2;
  swift_errorRetain(a1);
  swift_retain();
  swift_retain();
  sub_1005DABA8(v20, (uint64_t)sub_100151ECC, v25);
  return swift_release();
}

uint64_t sub_10013D1EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t), uint64_t (*a6)(uint64_t))
{
  uint64_t v47 = a6;
  uint64_t v46 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v11 = *(void *)(v46 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v46);
  uint64_t v14 = &v42[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v13);
  uint64_t v16 = &v42[-v15];
  uint64_t v17 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v17);
  uint64_t v19 = &v42[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if (a2)
  {
    uint64_t v45 = a4;
    uint64_t v47 = a5;
    if (qword_10099B138 != -1) {
      swift_once(&qword_10099B138, sub_10012E678);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    sub_10000A720(v20, (uint64_t)qword_100A2A200);
    sub_10001DC4C(a3, (uint64_t)v14, type metadata accessor for SharedBeaconRecord);
    swift_errorRetain(a1);
    swift_errorRetain(a2);
    swift_errorRetain(a1);
    uint64_t v21 = swift_errorRetain(a2);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    int v23 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, (os_log_type_t)v23))
    {
      int v43 = v23;
      uint64_t v24 = swift_slowAlloc(42LL, -1LL);
      uint64_t v25 = (uint64_t *)swift_slowAlloc(16LL, -1LL);
      uint64_t v26 = swift_slowAlloc(32LL, -1LL);
      uint64_t v44 = v26;
      *(_DWORD *)uint64_t v24 = 141558787;
      uint64_t v48 = 1752392040LL;
      uint64_t v49 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v24 + 4, v24 + 12);
      *(_WORD *)(v24 + 12) = 2081;
      uint64_t v27 = type metadata accessor for UUID(0LL);
      uint64_t v28 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter(v27, v28);
      uint64_t v48 = sub_1003F11D4(v29, v30, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v24 + 14, v24 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v14, type metadata accessor for SharedBeaconRecord);
      *(_WORD *)(v24 + 22) = 2112;
      if (a1)
      {
        swift_errorRetain(a1);
        uint64_t v31 = _swift_stdlib_bridgeErrorToNSError(a1);
        uint64_t v48 = v31;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v24 + 24, v24 + 32);
      }

      else
      {
        uint64_t v48 = 0LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v24 + 24, v24 + 32);
        uint64_t v31 = 0LL;
      }

      *uint64_t v25 = v31;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      *(_WORD *)(v24 + 32) = 2114;
      swift_errorRetain(a2);
      uint64_t v39 = _swift_stdlib_bridgeErrorToNSError(a2);
      uint64_t v48 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v24 + 34, v24 + 42);
      v25[1] = v39;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl( (void *)&_mh_execute_header,  v22,  (os_log_type_t)v43,  "Unpair for beacon %{private,mask.hash}s, success: %@, error: %{public}@.",  (uint8_t *)v24,  0x2Au);
      uint64_t v40 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v25, 2LL, v40);
      swift_slowDealloc(v25, -1LL, -1LL);
      uint64_t v41 = v44;
      swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1LL, -1LL);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v14, type metadata accessor for SharedBeaconRecord);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    return v45(a2);
  }

  else
  {
    uint64_t v32 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56LL))(v19, 1LL, 1LL, v32);
    sub_10001DC4C(a3, (uint64_t)v16, type metadata accessor for SharedBeaconRecord);
    uint64_t v33 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v34 = (v33 + 40) & ~v33;
    unint64_t v35 = (v12 + v34 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v36 = (void *)swift_allocObject(&unk_10093FC40, v35 + 16, v33 | 7);
    v36[2] = 0LL;
    v36[3] = 0LL;
    v36[4] = v47;
    sub_10002218C((uint64_t)v16, (uint64_t)v36 + v34, type metadata accessor for SharedBeaconRecord);
    uint64_t v37 = (uint64_t (**)(uint64_t))((char *)v36 + v35);
    *uint64_t v37 = a4;
    v37[1] = a5;
    swift_retain();
    swift_retain();
    sub_1003EDB00((uint64_t)v19, (uint64_t)&unk_1009A24B8, (uint64_t)v36);
    return swift_release();
  }

uint64_t sub_10013D6E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[22] = a6;
  v7[23] = a7;
  v7[20] = a4;
  v7[21] = a5;
  uint64_t v8 = type metadata accessor for SharedBeaconRecord(0LL);
  v7[24] = v8;
  unint64_t v9 = (*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[25] = swift_task_alloc(v9);
  v7[26] = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  v7[27] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v7[28] = v11;
  v7[29] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10013D778, 0LL, 0LL);
}

uint64_t sub_10013D778()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C908 + dword_10099C908);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099C90C);
    *(void *)(v0 + 240) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10013D878;
    return v4();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10013D878(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 240LL);
  *(void *)(*(void *)v1 + 248LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10013D8D4, 0LL, 0LL);
}

uint64_t sub_10013D8D4()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 248))
  {
    uint64_t v2 = *(void *)(v0 + 192);
    uint64_t v3 = *(void *)(v0 + 168);
    uint64_t v4 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    UUID.init()(v4);
    uint64_t v5 = v3 + *(int *)(v2 + 20);
    os_log_type_t v6 = (void *)swift_task_alloc(dword_1009A1524);
    *(void *)(v0 + 256) = v6;
    *os_log_type_t v6 = v0;
    v6[1] = sub_10013DCA4;
    return sub_1000FF930(*(void *)(v0 + 232), v5);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    unint64_t v8 = sub_1000157D0();
    uint64_t v9 = swift_allocError(&type metadata for DaemonError, v8, 0LL, 0LL);
    *uint64_t v10 = 0xD000000000000016LL;
    v10[1] = 0x80000001008553D0LL;
    swift_willThrow(v9);
    if (qword_10099B138 != -1) {
      swift_once(&qword_10099B138, sub_10012E678);
    }
    uint64_t v11 = *(void *)(v0 + 200);
    uint64_t v12 = *(void *)(v0 + 168);
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_10000A720(v13, (uint64_t)qword_100A2A200);
    sub_10001DC4C(v12, v11, type metadata accessor for SharedBeaconRecord);
    swift_errorRetain(v9);
    uint64_t v14 = swift_errorRetain(v9);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v28 = *(void *)(v0 + 216);
      uint64_t v17 = *(void *)(v0 + 200);
      uint64_t v18 = swift_slowAlloc(32LL, -1LL);
      uint64_t v29 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v30 = swift_slowAlloc(32LL, -1LL);
      uint64_t v31 = v30;
      *(_DWORD *)uint64_t v18 = 141558531;
      *(void *)(v0 + 120) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v18 + 4, v18 + 12);
      *(_WORD *)(v18 + 12) = 2081;
      uint64_t v19 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v28, v19);
      *(void *)(v0 + 128) = sub_1003F11D4(v20, v21, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v18 + 14, v18 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68(v17, type metadata accessor for SharedBeaconRecord);
      *(_WORD *)(v18 + 22) = 2114;
      swift_errorRetain(v9);
      uint64_t v22 = _swift_stdlib_bridgeErrorToNSError(v9);
      *(void *)(v0 + 136) = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v18 + 24, v18 + 32);
      *uint64_t v29 = v22;
      swift_errorRelease(v9);
      swift_errorRelease(v9);
      _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "Disable notify when found for beacon %{private,mask.hash}s, error - %{public}@",  (uint8_t *)v18,  0x20u);
      uint64_t v23 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v29, 1LL, v23);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);

      swift_errorRelease(v9);
    }

    else
    {
      uint64_t v24 = *(void *)(v0 + 200);
      swift_errorRelease(v9);
      sub_100018C68(v24, type metadata accessor for SharedBeaconRecord);
      swift_errorRelease(v9);
      swift_errorRelease(v9);
    }

    uint64_t v25 = *(void *)(v0 + 232);
    uint64_t v27 = *(void *)(v0 + 200);
    uint64_t v26 = *(void *)(v0 + 208);
    (*(void (**)(void))(v0 + 176))(0LL);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10013DCA4()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 256LL);
  *(void *)(*(void *)v1 + 264LL) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v2[28] + 8LL))(v2[29], v2[27]);
  if (v0) {
    uint64_t v4 = sub_10013DF70;
  }
  else {
    uint64_t v4 = sub_10013DD18;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10013DD18()
{
  if (qword_10099B138 != -1) {
    swift_once(&qword_10099B138, sub_10012E678);
  }
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_10000A720(v3, (uint64_t)qword_100A2A200);
  uint64_t v4 = sub_10001DC4C(v2, v1, type metadata accessor for SharedBeaconRecord);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = *(void *)(v0 + 208);
    uint64_t v17 = *(void *)(v0 + 216);
    uint64_t v8 = swift_slowAlloc(22LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v18 = v9;
    *(_DWORD *)uint64_t v8 = 141558275;
    *(void *)(v0 + 144) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2081;
    uint64_t v10 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter(v17, v10);
    *(void *)(v0 + 152) = sub_1003F11D4(v11, v12, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68(v7, type metadata accessor for SharedBeaconRecord);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "Notify when found disabled for beacon %{private,mask.hash}s.",  (uint8_t *)v8,  0x16u);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    sub_100018C68(*(void *)(v0 + 208), type metadata accessor for SharedBeaconRecord);
  }

  swift_release();

  uint64_t v13 = *(void *)(v0 + 232);
  uint64_t v15 = *(void *)(v0 + 200);
  uint64_t v14 = *(void *)(v0 + 208);
  (*(void (**)(void))(v0 + 176))(0LL);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013DF70()
{
  uint64_t v1 = *(void *)(v0 + 264);
  if (qword_10099B138 != -1) {
    swift_once(&qword_10099B138, sub_10012E678);
  }
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10000A720(v4, (uint64_t)qword_100A2A200);
  sub_10001DC4C(v3, v2, type metadata accessor for SharedBeaconRecord);
  swift_errorRetain(v1);
  uint64_t v5 = swift_errorRetain(v1);
  os_log_type_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v20 = *(void *)(v0 + 216);
    uint64_t v8 = *(void *)(v0 + 200);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    unint64_t v21 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v22 = swift_slowAlloc(32LL, -1LL);
    uint64_t v23 = v22;
    *(_DWORD *)uint64_t v9 = 141558531;
    *(void *)(v0 + 120) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    uint64_t v10 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter(v20, v10);
    *(void *)(v0 + 128) = sub_1003F11D4(v11, v12, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68(v8, type metadata accessor for SharedBeaconRecord);
    *(_WORD *)(v9 + 22) = 2114;
    swift_errorRetain(v1);
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 136) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v9 + 24, v9 + 32);
    uint64_t *v21 = v13;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "Disable notify when found for beacon %{private,mask.hash}s, error - %{public}@",  (uint8_t *)v9,  0x20u);
    uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v21, 1LL, v14);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);

    swift_errorRelease(v1);
  }

  else
  {
    uint64_t v15 = *(void *)(v0 + 200);
    swift_errorRelease(v1);
    sub_100018C68(v15, type metadata accessor for SharedBeaconRecord);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v16 = *(void *)(v0 + 232);
  uint64_t v18 = *(void *)(v0 + 200);
  uint64_t v17 = *(void *)(v0 + 208);
  (*(void (**)(void))(v0 + 176))(0LL);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013E28C(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  if (a1)
  {
    uint64_t v4 = swift_errorRetain(a1);
    uint64_t v5 = static os_log_type_t.error.getter(v4);
    if (qword_10099B748 != -1) {
      swift_once(&qword_10099B748, sub_100651480);
    }
    uint64_t v6 = qword_100A2B058;
    uint64_t v7 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v8 = swift_allocObject(v7, 72LL, 7LL);
    *(_OWORD *)(v8 + 16) = xmmword_1007E67D0;
    uint64_t v16 = a1;
    swift_errorRetain(a1);
    uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v10 = String.init<A>(describing:)(&v16, v9);
    uint64_t v12 = v11;
    *(void *)(v8 + 56) = &type metadata for String;
    *(void *)(v8 + 64) = sub_1000226F4();
    *(void *)(v8 + 32) = v10;
    *(void *)(v8 + 40) = v12;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "Remove beacon got an error (%@)", 31LL, 2LL, v8);
    swift_bridgeObjectRelease();
    uint64_t v13 = swift_errorRelease(a1);
  }

  else
  {
    uint64_t v14 = static os_log_type_t.default.getter(0LL);
    if (qword_10099B748 != -1) {
      swift_once(&qword_10099B748, sub_100651480);
    }
    uint64_t v13 = os_log(_:dso:log:_:_:)( v14,  &_mh_execute_header,  qword_100A2B058,  "Remove beacon was successful",  28LL,  2LL,  _swiftEmptyArrayStorage);
  }

  return a2(v13);
}

uint64_t sub_10013E41C(unint64_t a1)
{
  return sub_10013E428(a1, (uint64_t)sub_100022170);
}

uint64_t sub_10013E428(unint64_t a1, uint64_t a2)
{
  id v2 = 0LL;
  if (SPBeaconRoleIdUndefined == a1) {
    return (uint64_t)v2;
  }
  unint64_t v4 = a1;
  if (qword_10099B318 != -1) {
    goto LABEL_48;
  }
LABEL_3:
  OS_dispatch_queue.sync<A>(execute:)(a2, qword_100A2A710, &type metadata for Configuration);
  uint64_t v5 = sub_1006A0C70(v28);
  swift_bridgeObjectRelease();
  a2 = *(void *)(v5 + 16);
  if (!a2)
  {
LABEL_36:
    swift_bridgeObjectRelease();
    return 0LL;
  }

  uint64_t v6 = v5 + 32;
  swift_bridgeObjectRetain(v5);
  unint64_t v7 = 0LL;
  do
  {
    if (v7 >= *(void *)(v5 + 16)) {
      goto LABEL_46;
    }
    uint64_t v8 = *(void **)(v6 + 32 * v7 + 24);
    uint64_t v9 = v8[2];
    if (v9)
    {
      if (v8[4] == v4)
      {
        uint64_t v14 = v8[8];
        uint64_t v13 = v8[6];
        swift_bridgeObjectRetain(v13);
        swift_bridgeObjectRetain(v14);
        goto LABEL_20;
      }

      swift_bridgeObjectRetain(v8);
      if (v9 != 1)
      {
        if (v8[9] == v4)
        {
          uint64_t v14 = v8[13];
          uint64_t v13 = v8[11];
LABEL_19:
          swift_bridgeObjectRetain(v13);
          swift_bridgeObjectRetain(v14);
          swift_bridgeObjectRelease();
LABEL_20:
          swift_bridgeObjectRelease_n(v5, 2LL);
          id v15 = objc_allocWithZone(&OBJC_CLASS___SPBeaconRole);
          swift_bridgeObjectRetain(v13);
          swift_bridgeObjectRetain(v14);
          NSString v16 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          NSString v17 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v2 = [v15 initWithRoleId:v4 role:v16 roleEmoji:v17];
          swift_bridgeObjectRelease();
LABEL_21:
          swift_bridgeObjectRelease();

          return (uint64_t)v2;
        }

        if (v9 != 2)
        {
          uint64_t v10 = v8 + 18;
          uint64_t v11 = 2LL;
          while (1)
          {
            uint64_t v12 = v11 + 1;
            if (__OFADD__(v11, 1LL)) {
              break;
            }
            if (*(v10 - 4) == v4)
            {
              uint64_t v13 = *(v10 - 2);
              uint64_t v14 = *v10;
              goto LABEL_19;
            }

            v10 += 5;
            ++v11;
            if (v12 == v9) {
              goto LABEL_5;
            }
          }

          __break(1u);
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
      }

uint64_t sub_10013E80C(void *a1, uint64_t (*a2)(void *))
{
  uint64_t v4 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  uint64_t v5 = (void *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v5 = (void *)sub_1003D49D8(v5);
  }
  uint64_t v6 = v5[2];
  v8[0] = (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v8[1] = v6;
  uint64_t result = a2(v8);
  *a1 = v5;
  return result;
}

id sub_10013E898(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  return sub_10013F7C0( a1,  a2,  a3,  type metadata accessor for OwnedBeaconRecord,  &qword_10099B610,  (uint64_t)qword_100A2AE80,  (uint64_t)sub_100154730,  (uint64_t)sub_10014F0CC,  (uint64_t)sub_100021ABC,  (uint64_t)&unk_10093FB00,  (uint64_t)sub_10014F0EC,  byte_10093FB28,  (char *)sub_10014F3D4,  (uint64_t)sub_1005D3C50);
}

id sub_10013E918(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  v117 = a2;
  uint64_t v113 = a3;
  uint64_t v115 = type metadata accessor for BeaconStoreFileRecord(0LL);
  uint64_t v101 = *(void *)(v115 - 8);
  __chkstk_darwin(v115);
  uint64_t v112 = (char *)&v99 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v114 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v111 = (char *)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v104 = (char *)&v99 - v8;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v119 = *(void (***)(void, void, void))(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  v110 = (char *)&v99 - v14;
  __chkstk_darwin(v13);
  unint64_t v103 = (char *)&v99 - v15;
  uint64_t v100 = (void (*)(uint64_t, void, uint64_t, uint64_t))sub_100004AEC(&qword_1009A2460);
  __chkstk_darwin(v100);
  unint64_t v102 = (char *)&v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v108 = *(void *)(v17 - 8);
  uint64_t v18 = *(char **)(v108 + 64);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v109 = (char *)&v99 - ((unint64_t)(v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v99 - v21;
  uint64_t v23 = static os_log_type_t.default.getter(v20);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v24 = qword_100A2B018;
  uint64_t v106 = (void (*)(void, void, void))sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v25 = swift_allocObject(v106, 72LL, 7LL);
  __int128 v105 = xmmword_1007E67D0;
  *(_OWORD *)(v25 + 16) = xmmword_1007E67D0;
  uint64_t v120 = a1;
  sub_10001DC4C(a1, (uint64_t)v22, type metadata accessor for OwnedBeaconGroup);
  uint64_t v116 = v17;
  uint64_t v26 = String.init<A>(describing:)(v22, v17);
  uint64_t v28 = v27;
  *(void *)(v25 + 56) = &type metadata for String;
  unint64_t v107 = sub_1000226F4();
  *(void *)(v25 + 64) = v107;
  *(void *)(v25 + 32) = v26;
  *(void *)(v25 + 40) = v28;
  os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "Attempting to remove: %@", 24LL, 2LL, v25);
  swift_bridgeObjectRelease();
  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  uint64_t v29 = (void *)qword_100A2AF38;
  id v30 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v31 = [v30 isInternalBuild];

  if (v31)
  {
    NSString v32 = String._bridgeToObjectiveC()();
    unsigned int v33 = [v29 BOOLForKey:v32];
  }

  else
  {
    unsigned int v33 = 0;
  }

  id result = [(id)objc_opt_self(ACAccountStore) defaultStore];
  uint64_t v35 = v120;
  uint64_t v36 = v116;
  if (result)
  {
    uint64_t v37 = result;
    id v38 = objc_msgSend(result, "aa_primaryAppleAccount");

    if (v38 && (v38, (v33 & 1) == 0))
    {
      uint64_t v111 = v18;
      uint64_t v112 = v22;
      uint64_t v55 = sub_100022898(0LL, &qword_10099E510, &OBJC_CLASS___CKRecordID_ptr);
      uint64_t v56 = v35 + *(int *)(v36 + 24);
      uint64_t v57 = UUID.uuidString.getter(v55);
      uint64_t v59 = v58;
      uint64_t v60 = v118;
      id v61 = *(id *)(v118 + 128);
      v62._countAndFlagsBits = v57;
      v62._object = v59;
      Class isa = CKRecordID.init(recordName:zoneID:)(v62, (CKRecordZoneID)v61).super.isa;
      sub_1004F730C();
      uint64_t v116 = (uint64_t)isa;
      v110 = (char *)sub_10067DD74(isa);
      swift_release();
      uint64_t v109 = (char *)swift_allocBox(v100);
      uint64_t v64 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v101 + 56);
      uint64_t v101 = v65;
      uint64_t v66 = v115;
      uint64_t v100 = v64;
      v64(v65, 1LL, 1LL, v115);
      uint64_t v67 = *(void *)(v60 + 136);
      uint64_t v68 = v103;
      ((void (**)(char *, uint64_t, uint64_t))v119)[2](v103, v56, v9);
      if (qword_10099B1B8 != -1) {
        swift_once(&qword_10099B1B8, sub_1001CFC94);
      }
      uint64_t v69 = sub_10000A720(v5, (uint64_t)qword_100A2A358);
      uint64_t v70 = v114;
      uint64_t v71 = v104;
      uint64_t v72 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v114 + 16))(v104, v69, v5);
      __chkstk_darwin(v72);
      *(&v99 - 4) = v67;
      *(&v99 - 3) = (uint64_t)v68;
      *(&v99 - 2) = (uint64_t)v71;
      uint64_t v73 = (uint64_t)v102;
      OS_dispatch_queue.sync<A>(execute:)(sub_100154730, &v99 - 6, v66);
      (*(void (**)(char *, uint64_t))(v70 + 8))(v71, v5);
      ((void (*)(char *, uint64_t))v119[1])(v68, v9);
      v100(v73, 0LL, 1LL, v66);
      uint64_t v76 = sub_10014F3E0(v73, v101);
      uint64_t v77 = v106;
      unint64_t v78 = v107;
      uint64_t v79 = (void *)v116;
      uint64_t v80 = static os_log_type_t.default.getter(v76);
      uint64_t v81 = qword_100A2B018;
      uint64_t v82 = swift_allocObject(v77, 72LL, 7LL);
      *(_OWORD *)(v82 + 16) = v105;
      id v83 = v79;
      uint64_t v119 = (void (**)(void, void, void))v83;
      id v84 = [v83 description];
      uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
      uint64_t v87 = v86;

      *(void *)(v82 + 56) = &type metadata for String;
      *(void *)(v82 + 64) = v78;
      *(void *)(v82 + 32) = v85;
      *(void *)(v82 + 40) = v87;
      os_log(_:dso:log:_:_:)(v80, &_mh_execute_header, v81, "cloudBacked item deleted from disk: %@", 38LL, 2LL, v82);
      swift_bridgeObjectRelease();
      uint64_t v88 = (uint64_t)v112;
      sub_10001DC4C(v120, (uint64_t)v112, type metadata accessor for OwnedBeaconGroup);
      uint64_t v89 = *(unsigned __int8 *)(v108 + 80);
      uint64_t v90 = (v89 + 32) & ~v89;
      uint64_t v116 = v89 | 7;
      unint64_t v91 = (unint64_t)&v111[v90 + 7] & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v92 = swift_allocObject(&unk_10093FEC0, v91 + 16, v89 | 7);
      uint64_t v93 = v109;
      uint64_t v94 = v118;
      *(void *)(v92 + 16) = v109;
      *(void *)(v92 + 24) = v94;
      sub_10002218C(v88, v92 + v90, type metadata accessor for OwnedBeaconGroup);
      uint64_t v95 = (void *)(v92 + v91);
      uint64_t v96 = v113;
      void *v95 = v117;
      v95[1] = v96;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)(sub_100152FB0, v92);
      swift_release();
      swift_release();
      sub_10001DC4C(v120, v88, type metadata accessor for OwnedBeaconGroup);
      uint64_t v97 = swift_allocObject(&unk_10093FEE8, v91 + 16, v116);
      *(void *)(v97 + 16) = v93;
      *(void *)(v97 + 24) = v94;
      sub_10002218C(v88, v97 + v90, type metadata accessor for OwnedBeaconGroup);
      uint64_t v98 = (void *)(v97 + v91);
      *uint64_t v98 = v117;
      v98[1] = v96;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addFailure(block:)(sub_100153108, v97);
      swift_release();
      swift_release();

      swift_release();
      return (id)swift_release();
    }

    else
    {
      unint64_t v107 = (unint64_t)v12;
      if (qword_10099B528 != -1) {
        swift_once(&qword_10099B528, sub_1004F3B00);
      }
      uint64_t v39 = v9;
      uint64_t v40 = type metadata accessor for Logger(0LL);
      uint64_t v108 = sub_10000A720(v40, (uint64_t)qword_100A2AC98);
      uint64_t v41 = (os_log_s *)Logger.logObject.getter(v108);
      os_log_type_t v42 = static os_log_type_t.info.getter(v41);
      if (os_log_type_enabled(v41, v42))
      {
        BOOL v43 = v38 != 0LL;
        uint64_t v44 = swift_slowAlloc(14LL, -1LL);
        *(_DWORD *)uint64_t v44 = 67109376;
        unsigned int v121 = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122, v44 + 4, v44 + 8);
        *(_WORD *)(v44 + 8) = 1024;
        unsigned int v121 = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122, v44 + 10, v44 + 14);
        _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d",  (uint8_t *)v44,  0xEu);
        swift_slowDealloc(v44, -1LL, -1LL);
      }

      uint64_t v45 = v118;
      uint64_t v46 = *(void *)(v118 + 136);
      uint64_t v47 = v120 + *(int *)(v36 + 24);
      uint64_t v48 = v110;
      uint64_t v106 = v119[2];
      v106(v110, v47, v39);
      if (qword_10099B1B8 != -1) {
        swift_once(&qword_10099B1B8, sub_1001CFC94);
      }
      uint64_t v49 = sub_10000A720(v5, (uint64_t)qword_100A2A358);
      uint64_t v50 = v5;
      uint64_t v51 = v114;
      uint64_t v52 = v111;
      uint64_t v53 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v114 + 16))(v111, v49, v50);
      __chkstk_darwin(v53);
      *(&v99 - 4) = v46;
      *(&v99 - 3) = (uint64_t)v48;
      *(&v99 - 2) = (uint64_t)v52;
      uint64_t v54 = (uint64_t)v112;
      OS_dispatch_queue.sync<A>(execute:)(sub_100154730, &v99 - 6, v115);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v50);
      ((void (*)(char *, uint64_t))v119[1])(v48, v39);
      sub_10057BA24(v54);
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
      sub_1004E696C(9u);
      uint64_t v74 = *(void (**)(uint64_t))(v45 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged);
      if (v74)
      {
        uint64_t v75 = *(void *)(v45 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged + 8);
        swift_retain();
        v74(v45);
        sub_10002214C((uint64_t)v74, v75);
      }

      v117(0LL);
      return (id)sub_100018C68(v54, type metadata accessor for BeaconStoreFileRecord);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_10013F740(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  return sub_10013F7C0( a1,  a2,  a3,  type metadata accessor for SharedBeaconRecord,  &qword_10099B9E8,  (uint64_t)qword_100A2B738,  (uint64_t)sub_100154730,  (uint64_t)sub_100154730,  (uint64_t)sub_100021ABC,  (uint64_t)&unk_10093FBC8,  (uint64_t)sub_100151A14,  byte_10093FBF0,  (char *)sub_100151C8C,  (uint64_t)sub_100763874);
}

id sub_10013F7C0( uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t (*a4)(void), void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, char *a13, uint64_t a14)
{
  unint64_t v130 = (char *)a8;
  uint64_t v124 = a7;
  uint64_t v136 = a6;
  uint64_t v133 = a3;
  v134 = a5;
  v140 = a2;
  uint64_t v138 = type metadata accessor for BeaconStoreFileRecord(0LL);
  uint64_t v120 = *(void *)(v138 - 8);
  __chkstk_darwin(v138);
  uint64_t v131 = (char *)&v113 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v135 = type metadata accessor for URL(0LL);
  uint64_t v137 = *(void *)(v135 - 8);
  uint64_t v17 = __chkstk_darwin(v135);
  uint64_t v129 = (char *)&v113 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v123 = (char *)&v113 - v19;
  uint64_t v20 = type metadata accessor for UUID(0LL);
  v143 = *(void (***)(void, void, void))(v20 - 8);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v118 = (char *)&v113 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v113 - v24;
  __chkstk_darwin(v23);
  uint64_t v122 = (char *)&v113 - v26;
  uint64_t v119 = sub_100004AEC(&qword_1009A2460);
  __chkstk_darwin(v119);
  unsigned int v121 = (char *)&v113 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = a4(0LL);
  unint64_t v139 = *(void *)(v28 - 8);
  uint64_t v29 = *(char **)(v139 + 64);
  uint64_t v30 = __chkstk_darwin(v28);
  unint64_t v128 = (char *)&v113 - ((unint64_t)(v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = __chkstk_darwin(v30);
  unsigned int v33 = (char *)&v113 - v32;
  uint64_t v34 = static os_log_type_t.default.getter(v31);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v35 = qword_100A2B018;
  uint64_t v126 = (void (*)(void, void, void))sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v36 = swift_allocObject(v126, 72LL, 7LL);
  __int128 v125 = xmmword_1007E67D0;
  *(_OWORD *)(v36 + 16) = xmmword_1007E67D0;
  v132 = a4;
  sub_10001DC4C(a1, (uint64_t)v33, a4);
  uint64_t v142 = v28;
  uint64_t v37 = String.init<A>(describing:)(v33, v28);
  uint64_t v39 = v38;
  *(void *)(v36 + 56) = &type metadata for String;
  unint64_t v127 = sub_1000226F4();
  *(void *)(v36 + 64) = v127;
  *(void *)(v36 + 32) = v37;
  *(void *)(v36 + 40) = v39;
  os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v35, "Attempting to remove: %@", 24LL, 2LL, v36);
  swift_bridgeObjectRelease();
  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  uint64_t v40 = (void *)qword_100A2AF38;
  id v41 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v42 = [v41 isInternalBuild];

  if (v42)
  {
    NSString v43 = String._bridgeToObjectiveC()();
    unsigned int v44 = [v40 BOOLForKey:v43];
  }

  else
  {
    unsigned int v44 = 0;
  }

  id result = [(id)objc_opt_self(ACAccountStore) defaultStore];
  uint64_t v46 = v142;
  if (result)
  {
    uint64_t v47 = result;
    id v48 = objc_msgSend(result, "aa_primaryAppleAccount");

    if (v48 && (v48, (v44 & 1) == 0))
    {
      uint64_t v129 = v29;
      unint64_t v130 = v33;
      unint64_t v128 = a13;
      uint64_t v118 = a12;
      uint64_t v116 = a11;
      uint64_t v115 = a10;
      uint64_t v65 = sub_100022898(0LL, &qword_10099E510, &OBJC_CLASS___CKRecordID_ptr);
      uint64_t v66 = *(int *)(v46 + 20);
      uint64_t v142 = a1;
      uint64_t v67 = a1 + v66;
      uint64_t v68 = UUID.uuidString.getter(v65);
      uint64_t v70 = v69;
      uint64_t v71 = v141;
      id v72 = *(id *)(v141 + 128);
      v73._countAndFlagsBits = v68;
      v73._object = v70;
      Class isa = CKRecordID.init(recordName:zoneID:)(v73, (CKRecordZoneID)v72).super.isa;
      sub_1004F730C();
      uint64_t v131 = (char *)isa;
      uint64_t v117 = sub_10067DD74(isa);
      swift_release();
      uint64_t v119 = swift_allocBox(v119);
      uint64_t v75 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v120 + 56);
      uint64_t v120 = v76;
      uint64_t v77 = v138;
      uint64_t v114 = v75;
      v75(v76, 1LL, 1LL, v138);
      uint64_t v78 = *(void *)(v71 + 136);
      uint64_t v79 = v122;
      ((void (**)(char *, uint64_t, uint64_t))v143)[2](v122, v67, v20);
      if (*v134 != -1LL) {
        swift_once(v134, a14);
      }
      uint64_t v80 = v135;
      uint64_t v81 = sub_10000A720(v135, v136);
      uint64_t v82 = v137;
      id v83 = v123;
      uint64_t v84 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v137 + 16))(v123, v81, v80);
      __chkstk_darwin(v84);
      *(&v113 - 4) = v78;
      *(&v113 - 3) = (uint64_t)v79;
      *(&v113 - 2) = (uint64_t)v83;
      uint64_t v85 = (uint64_t)v121;
      OS_dispatch_queue.sync<A>(execute:)(v124, &v113 - 6, v77);
      (*(void (**)(char *, uint64_t))(v82 + 8))(v83, v80);
      ((void (*)(char *, uint64_t))v143[1])(v79, v20);
      v114(v85, 0LL, 1LL, v77);
      uint64_t v88 = sub_10014F3E0(v85, v120);
      uint64_t v89 = v126;
      unint64_t v90 = v127;
      unint64_t v91 = v131;
      uint64_t v92 = static os_log_type_t.default.getter(v88);
      uint64_t v93 = qword_100A2B018;
      uint64_t v94 = swift_allocObject(v89, 72LL, 7LL);
      *(_OWORD *)(v94 + 16) = v125;
      id v95 = v91;
      v143 = (void (**)(void, void, void))v95;
      id v96 = [v95 description];
      uint64_t v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
      uint64_t v99 = v98;

      *(void *)(v94 + 56) = &type metadata for String;
      *(void *)(v94 + 64) = v90;
      *(void *)(v94 + 32) = v97;
      *(void *)(v94 + 40) = v99;
      os_log(_:dso:log:_:_:)(v92, &_mh_execute_header, v93, "cloudBacked item deleted from disk: %@", 38LL, 2LL, v94);
      swift_bridgeObjectRelease();
      uint64_t v100 = (uint64_t)v130;
      uint64_t v101 = v132;
      sub_10001DC4C(v142, (uint64_t)v130, v132);
      uint64_t v102 = *(unsigned __int8 *)(v139 + 80);
      uint64_t v103 = (v102 + 32) & ~v102;
      unint64_t v104 = ((unint64_t)&v129[v103 + 7] & 0xFFFFFFFFFFFFFFF8LL) + 16;
      unint64_t v105 = (unint64_t)&v129[v103 + 7] & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v138 = v102 | 7;
      unint64_t v139 = v105;
      uint64_t v106 = swift_allocObject(v115, v104, v102 | 7);
      uint64_t v107 = v119;
      uint64_t v108 = v141;
      *(void *)(v106 + 16) = v119;
      *(void *)(v106 + 24) = v108;
      sub_10002218C(v100, v106 + v103, v101);
      uint64_t v109 = (void *)(v106 + v105);
      uint64_t v110 = v133;
      *uint64_t v109 = v140;
      v109[1] = v110;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)(v116, v106);
      swift_release();
      swift_release();
      sub_10001DC4C(v142, v100, v101);
      uint64_t v111 = swift_allocObject(v118, v104, v138);
      *(void *)(v111 + 16) = v107;
      *(void *)(v111 + 24) = v108;
      sub_10002218C(v100, v111 + v103, v101);
      uint64_t v112 = (void *)(v111 + v139);
      *uint64_t v112 = v140;
      v112[1] = v110;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addFailure(block:)(v128, v111);
      swift_release();
      swift_release();

      swift_release();
      return (id)swift_release();
    }

    else
    {
      if (qword_10099B528 != -1) {
        swift_once(&qword_10099B528, sub_1004F3B00);
      }
      unint64_t v139 = v20;
      uint64_t v49 = type metadata accessor for Logger(0LL);
      unint64_t v127 = sub_10000A720(v49, (uint64_t)qword_100A2AC98);
      uint64_t v50 = (os_log_s *)Logger.logObject.getter(v127);
      os_log_type_t v51 = static os_log_type_t.info.getter(v50);
      if (os_log_type_enabled(v50, v51))
      {
        BOOL v52 = v48 != 0LL;
        uint64_t v53 = swift_slowAlloc(14LL, -1LL);
        *(_DWORD *)uint64_t v53 = 67109376;
        unsigned int v144 = v44;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, v145, v53 + 4, v53 + 8);
        *(_WORD *)(v53 + 8) = 1024;
        unsigned int v144 = v52;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, v145, v53 + 10, v53 + 14);
        _os_log_impl( (void *)&_mh_execute_header,  v50,  v51,  "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d",  (uint8_t *)v53,  0xEu);
        swift_slowDealloc(v53, -1LL, -1LL);
      }

      uint64_t v54 = v141;
      uint64_t v55 = *(void *)(v141 + 136);
      uint64_t v56 = a1 + *(int *)(v142 + 20);
      uint64_t v57 = v25;
      uint64_t v126 = v143[2];
      v126(v25, v56, v139);
      if (*v134 != -1LL) {
        swift_once(v134, a14);
      }
      uint64_t v58 = v135;
      uint64_t v59 = sub_10000A720(v135, v136);
      uint64_t v60 = v137;
      id v61 = v129;
      uint64_t v62 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v137 + 16))(v129, v59, v58);
      __chkstk_darwin(v62);
      *(&v113 - 4) = v55;
      *(&v113 - 3) = (uint64_t)v57;
      *(&v113 - 2) = (uint64_t)v61;
      uint64_t v63 = v57;
      uint64_t v64 = (uint64_t)v131;
      OS_dispatch_queue.sync<A>(execute:)(v130, &v113 - 6, v138);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v58);
      ((void (*)(char *, unint64_t))v143[1])(v63, v139);
      sub_10057BA24(v64);
      QueueSynchronizer.conditionalSync<A>(_:)(a9);
      sub_1004E696C(9u);
      uint64_t v86 = *(void (**)(uint64_t))(v54 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged);
      if (v86)
      {
        uint64_t v87 = *(void *)(v54 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged + 8);
        swift_retain();
        v86(v54);
        sub_10002214C((uint64_t)v86, v87);
      }

      v140(0LL);
      return (id)sub_100018C68(v64, type metadata accessor for BeaconStoreFileRecord);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10014061C( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  return sub_100140B2C( a1,  a2,  a3,  a4,  a5,  a6,  type metadata accessor for OwnedBeaconGroup,  &qword_1009A2480,  (uint64_t)&unk_1007F5E9C);
}

uint64_t sub_100140654( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  return sub_100140B2C( a1,  a2,  a3,  a4,  a5,  a6,  type metadata accessor for LostModeRecord,  &qword_1009A2670,  (uint64_t)&unk_10080CCA8);
}

uint64_t sub_10014068C( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  return sub_100140B2C( a1,  a2,  a3,  a4,  a5,  a6,  type metadata accessor for ShareRecord,  &qword_1009A24A0,  (uint64_t)&unk_1007E7154);
}

uint64_t sub_1001406C4( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  return sub_100140B2C( a1,  a2,  a3,  a4,  a5,  a6,  type metadata accessor for OwnedDeviceKeyRecord,  &qword_1009A2488,  (uint64_t)&unk_100818658);
}

uint64_t sub_1001406FC( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  return sub_10014073C( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t)sub_100021ABC,  type metadata accessor for BeaconNamingRecord,  &qword_1009A2470,  (uint64_t)&unk_10080B604);
}

uint64_t sub_10014073C( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t), unint64_t *a9, uint64_t a10)
{
  uint64_t v42 = a4;
  NSString v43 = a8;
  uint64_t v39 = a7;
  uint64_t v40 = a6;
  id v41 = a5;
  uint64_t v13 = sub_100004AEC(&qword_1009A2460);
  __chkstk_darwin(v13);
  uint64_t v15 = &v33[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v16 = type metadata accessor for BeaconStoreFileRecord(0LL);
  uint64_t v35 = *(void *)(v16 - 8);
  uint64_t v36 = v16;
  __chkstk_darwin(v16);
  uint64_t v18 = &v33[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v19 = swift_projectBox(a2);
  unsigned int v34 = static os_log_type_t.default.getter(v19);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v37 = a9;
  uint64_t v38 = a10;
  uint64_t v20 = qword_100A2B018;
  uint64_t v21 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v22 = swift_allocObject(v21, 72LL, 7LL);
  *(_OWORD *)(v22 + 16) = xmmword_1007E67D0;
  id v23 = a1;
  id v24 = [v23 description];
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  uint64_t v27 = v26;

  *(void *)(v22 + 56) = &type metadata for String;
  *(void *)(v22 + 64) = sub_1000226F4();
  *(void *)(v22 + 32) = v25;
  *(void *)(v22 + 40) = v27;
  os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v20, "cloudBacked item deleted: %@", 28LL, 2LL, v22);
  swift_bridgeObjectRelease();
  swift_beginAccess(v19, v45, 0LL, 0LL);
  sub_10001581C(v19, (uint64_t)v15, &qword_1009A2460);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v35 + 48))(v15, 1LL, v36) == 1)
  {
    sub_100015794((uint64_t)v15, &qword_1009A2460);
  }

  else
  {
    sub_10002218C((uint64_t)v15, (uint64_t)v18, type metadata accessor for BeaconStoreFileRecord);
    sub_10057BA24((uint64_t)v18);
    sub_100018C68((uint64_t)v18, type metadata accessor for BeaconStoreFileRecord);
  }

  QueueSynchronizer.conditionalSync<A>(_:)(v39);
  sub_1004E696C(9u);
  v41(0LL);
  uint64_t v28 = *(void (**)(uint64_t))(a3 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged);
  if (v28)
  {
    uint64_t v29 = *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged + 8);
    swift_retain();
    v28(a3);
    sub_10002214C((uint64_t)v28, v29);
  }

  uint64_t v30 = v43;
  v44[3] = v43(0LL);
  v44[4] = sub_100007864(v37, v30, v38);
  uint64_t v31 = sub_10000A7C8(v44);
  sub_10001DC4C(v42, (uint64_t)v31, v30);
  PassthroughSubject.send(_:)(v44);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v44);
}

uint64_t sub_100140A4C( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  return sub_100140B2C( a1,  a2,  a3,  a4,  a5,  a6,  type metadata accessor for SafeLocation,  &qword_1009A2640,  (uint64_t)&unk_10080F958);
}

uint64_t sub_100140A84( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  return sub_100140B2C( a1,  a2,  a3,  a4,  a5,  a6,  type metadata accessor for LeashRecord,  &qword_1009A2660,  (uint64_t)&unk_10081B498);
}

uint64_t sub_100140ABC( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  return sub_100140B2C( a1,  a2,  a3,  a4,  a5,  a6,  type metadata accessor for KeyAlignmentRecord,  &qword_1009A2478,  (uint64_t)&unk_1007E6868);
}

uint64_t sub_100140AF4( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  return sub_100140B2C( a1,  a2,  a3,  a4,  a5,  a6,  type metadata accessor for BeaconEstimatedLocation,  &qword_1009A2468,  (uint64_t)&unk_100809A2C);
}

uint64_t sub_100140B2C( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6, uint64_t (*a7)(uint64_t), unint64_t *a8, uint64_t a9)
{
  uint64_t v39 = a8;
  uint64_t v40 = a4;
  id v41 = a7;
  uint64_t v36 = a6;
  uint64_t v37 = a5;
  uint64_t v38 = a3;
  uint64_t v11 = sub_100004AEC(&qword_1009A2460);
  __chkstk_darwin(v11);
  uint64_t v13 = &v32[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v34 = type metadata accessor for BeaconStoreFileRecord(0LL);
  uint64_t v14 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v16 = &v32[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v17 = swift_projectBox(a2);
  unsigned int v33 = static os_log_type_t.default.getter(v17);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v35 = a9;
  uint64_t v18 = qword_100A2B018;
  uint64_t v19 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v20 = swift_allocObject(v19, 72LL, 7LL);
  *(_OWORD *)(v20 + 16) = xmmword_1007E67D0;
  id v21 = a1;
  id v22 = [v21 description];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  uint64_t v25 = v24;

  *(void *)(v20 + 56) = &type metadata for String;
  *(void *)(v20 + 64) = sub_1000226F4();
  *(void *)(v20 + 32) = v23;
  *(void *)(v20 + 40) = v25;
  os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v18, "cloudBacked item deleted: %@", 28LL, 2LL, v20);
  swift_bridgeObjectRelease();
  swift_beginAccess(v17, v43, 0LL, 0LL);
  sub_10001581C(v17, (uint64_t)v13, &qword_1009A2460);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v13, 1LL, v34) == 1)
  {
    sub_100015794((uint64_t)v13, &qword_1009A2460);
  }

  else
  {
    sub_10002218C((uint64_t)v13, (uint64_t)v16, type metadata accessor for BeaconStoreFileRecord);
    sub_10057BA24((uint64_t)v16);
    sub_100018C68((uint64_t)v16, type metadata accessor for BeaconStoreFileRecord);
  }

  uint64_t v26 = v38;
  sub_1004E696C(9u);
  v37(0LL);
  uint64_t v27 = *(void (**)(uint64_t))(v26 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged);
  if (v27)
  {
    uint64_t v28 = *(void *)(v26 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged + 8);
    swift_retain();
    v27(v26);
    sub_10002214C((uint64_t)v27, v28);
  }

  uint64_t v29 = v41;
  v42[3] = v41(0LL);
  _BYTE v42[4] = sub_100007864(v39, v29, v35);
  uint64_t v30 = sub_10000A7C8(v42);
  sub_10001DC4C(v40, (uint64_t)v30, v29);
  PassthroughSubject.send(_:)(v42);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
}

uint64_t sub_100140E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v8 = sub_100004AEC(&qword_1009A2460);
  __chkstk_darwin(v8);
  uint64_t v10 = &v31[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v11 = type metadata accessor for BeaconStoreFileRecord(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = &v31[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v15 = swift_projectBox(a2);
  swift_beginAccess(v15, v31, 0LL, 0LL);
  sub_10001581C(v15, (uint64_t)v10, &qword_1009A2460);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11) == 1)
  {
    uint64_t v16 = sub_100015794((uint64_t)v10, &qword_1009A2460);
  }

  else
  {
    sub_10002218C((uint64_t)v10, (uint64_t)v14, type metadata accessor for BeaconStoreFileRecord);
    sub_10057C2EC((uint64_t)v14);
    uint64_t v16 = sub_100018C68((uint64_t)v14, type metadata accessor for BeaconStoreFileRecord);
  }

  uint64_t v17 = static os_log_type_t.error.getter(v16);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v18 = qword_100A2B018;
  uint64_t v19 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v20 = swift_allocObject(v19, 112LL, 7LL);
  *(_OWORD *)(v20 + 16) = xmmword_1007E4750;
  uint64_t v21 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v22 = UUID.uuidString.getter(v21);
  uint64_t v24 = v23;
  *(void *)(v20 + 56) = &type metadata for String;
  unint64_t v25 = sub_1000226F4();
  *(void *)(v20 + 64) = v25;
  *(void *)(v20 + 32) = v22;
  *(void *)(v20 + 40) = v24;
  uint64_t v30 = a1;
  swift_errorRetain(a1);
  uint64_t v26 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  uint64_t v27 = String.init<A>(describing:)(&v30, v26);
  *(void *)(v20 + 96) = &type metadata for String;
  *(void *)(v20 + 104) = v25;
  *(void *)(v20 + 72) = v27;
  *(void *)(v20 + 80) = v28;
  os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "Error deleting cloudBacked %@: %@", 33LL, 2LL, v20);
  swift_bridgeObjectRelease();
  return a5(a1);
}

uint64_t sub_100141068( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6, uint64_t (*a7)(void))
{
  unsigned int v33 = a5;
  uint64_t v10 = sub_100004AEC(&qword_1009A2460);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for BeaconStoreFileRecord(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = swift_projectBox(a2);
  swift_beginAccess(v17, v35, 0LL, 0LL);
  sub_10001581C(v17, (uint64_t)v12, &qword_1009A2460);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13) == 1)
  {
    uint64_t v18 = sub_100015794((uint64_t)v12, &qword_1009A2460);
  }

  else
  {
    sub_10002218C((uint64_t)v12, (uint64_t)v16, type metadata accessor for BeaconStoreFileRecord);
    sub_10057C2EC((uint64_t)v16);
    uint64_t v18 = sub_100018C68((uint64_t)v16, type metadata accessor for BeaconStoreFileRecord);
  }

  uint64_t v19 = static os_log_type_t.error.getter(v18);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v20 = qword_100A2B018;
  uint64_t v21 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v22 = swift_allocObject(v21, 112LL, 7LL);
  *(_OWORD *)(v22 + 16) = xmmword_1007E4750;
  uint64_t v23 = a7(0LL);
  uint64_t v24 = UUID.uuidString.getter(v23);
  uint64_t v26 = v25;
  *(void *)(v22 + 56) = &type metadata for String;
  unint64_t v27 = sub_1000226F4();
  *(void *)(v22 + 64) = v27;
  *(void *)(v22 + 32) = v24;
  *(void *)(v22 + 40) = v26;
  uint64_t v34 = a1;
  swift_errorRetain(a1);
  uint64_t v28 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  uint64_t v29 = String.init<A>(describing:)(&v34, v28);
  *(void *)(v22 + 96) = &type metadata for String;
  *(void *)(v22 + 104) = v27;
  *(void *)(v22 + 72) = v29;
  *(void *)(v22 + 80) = v30;
  os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Error deleting cloudBacked %@: %@", 33LL, 2LL, v22);
  swift_bridgeObjectRelease();
  return v33(a1);
}

uint64_t sub_1001412C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  return sub_100141068(a1, a2, a3, a4, a5, a6, type metadata accessor for LostModeRecord);
}

uint64_t sub_1001412CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  return sub_100141068(a1, a2, a3, a4, a5, a6, type metadata accessor for ShareRecord);
}

uint64_t sub_1001412D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  return sub_100141068(a1, a2, a3, a4, a5, a6, type metadata accessor for OwnedDeviceKeyRecord);
}

uint64_t sub_1001412E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  return sub_100141068(a1, a2, a3, a4, a5, a6, type metadata accessor for BeaconNamingRecord);
}

uint64_t sub_1001412F0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  return sub_100141068(a1, a2, a3, a4, a5, a6, type metadata accessor for SafeLocation);
}

uint64_t sub_1001412FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  return sub_100141068(a1, a2, a3, a4, a5, a6, type metadata accessor for LeashRecord);
}

uint64_t sub_100141308( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  return sub_100141068(a1, a2, a3, a4, a5, a6, type metadata accessor for KeyAlignmentRecord);
}

uint64_t sub_100141314( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  return sub_100141068(a1, a2, a3, a4, a5, a6, type metadata accessor for BeaconEstimatedLocation);
}

Swift::Int sub_100141320(void *a1)
{
  uint64_t v134 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v127 = *(void *)(v134 - 8);
  uint64_t v3 = __chkstk_darwin(v134);
  uint64_t v124 = (uint64_t)&v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v135 = (uint64_t)&v120 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v132 = (uint64_t)&v120 - v8;
  __chkstk_darwin(v7);
  uint64_t v131 = (uint64_t)&v120 - v9;
  Swift::Int v10 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v10);
  if (result >= v10)
  {
    if (v10 < 0) {
      goto LABEL_139;
    }
    if (v10) {
      return sub_100143C80(0LL, v10, 1LL, a1);
    }
    return result;
  }

  if (v10 >= 0) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v10 + 1;
  }
  if (v10 < -1) {
    goto LABEL_147;
  }
  uint64_t v133 = a1;
  Swift::Int v122 = result;
  uint64_t v128 = v1;
  if (v10 < 2)
  {
    uint64_t v16 = (char *)_swiftEmptyArrayStorage;
    unint64_t v126 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v127 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80));
    unsigned int v121 = _swiftEmptyArrayStorage;
    if (v10 != 1)
    {
      unint64_t v18 = _swiftEmptyArrayStorage[2];
LABEL_105:
      uint64_t v112 = v16;
      if (v18 >= 2)
      {
        uint64_t v113 = *v133;
        do
        {
          unint64_t v114 = v18 - 2;
          if (v18 < 2) {
            goto LABEL_134;
          }
          if (!v113) {
            goto LABEL_146;
          }
          uint64_t v115 = *(void *)&v112[16 * v114 + 32];
          uint64_t v116 = *(void *)&v112[16 * v18 + 24];
          uint64_t v117 = v128;
          sub_100144A3C( v113 + *(void *)(v127 + 72) * v115,  v113 + *(void *)(v127 + 72) * *(void *)&v112[16 * v18 + 16],  v113 + *(void *)(v127 + 72) * v116,  v126);
          uint64_t v128 = v117;
          if (v117) {
            break;
          }
          if (v116 < v115) {
            goto LABEL_135;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v112) & 1) == 0) {
            uint64_t v112 = sub_1003CBA90((uint64_t)v112);
          }
          if (v114 >= *((void *)v112 + 2)) {
            goto LABEL_136;
          }
          uint64_t v118 = &v112[16 * v114 + 32];
          *(void *)uint64_t v118 = v115;
          *((void *)v118 + 1) = v116;
          unint64_t v119 = *((void *)v112 + 2);
          if (v18 > v119) {
            goto LABEL_137;
          }
          memmove(&v112[16 * v18 + 16], &v112[16 * v18 + 32], 16 * (v119 - v18));
          *((void *)v112 + 2) = v119 - 1;
          unint64_t v18 = v119 - 1;
        }

        while (v119 > 2);
      }

LABEL_116:
      swift_bridgeObjectRelease();
      v121[2] = 0LL;
      return swift_bridgeObjectRelease();
    }
  }

  else
  {
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = static Array._allocateBufferUninitialized(minimumCapacity:)(v12 >> 1, v134);
    *(void *)(v14 + 16) = v13;
    uint64_t v15 = *(unsigned __int8 *)(v127 + 80);
    unsigned int v121 = (void *)v14;
    unint64_t v126 = v14 + ((v15 + 32) & ~v15);
  }

  Swift::Int v17 = 0LL;
  uint64_t v16 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    Swift::Int v19 = v17;
    Swift::Int v20 = v17 + 1;
    if (v17 + 1 >= v10)
    {
      ++v17;
      goto LABEL_24;
    }

    uint64_t v21 = *v133;
    uint64_t v22 = *(void *)(v127 + 72);
    uint64_t v23 = v131;
    sub_10001DC4C(*v133 + v22 * v20, v131, type metadata accessor for OwnedBeaconRecord);
    uint64_t v24 = v21 + v22 * v17;
    uint64_t v25 = v132;
    sub_10001DC4C(v24, v132, type metadata accessor for OwnedBeaconRecord);
    LODWORD(v130) = static Date.< infix(_:_:)(v23 + *(int *)(v134 + 32), v25 + *(int *)(v134 + 32));
    sub_100018C68(v25, type metadata accessor for OwnedBeaconRecord);
    sub_100018C68(v23, type metadata accessor for OwnedBeaconRecord);
    Swift::Int v17 = v19 + 2;
    uint64_t v129 = v21;
    uint64_t v136 = v22;
    if (v19 + 2 >= v10) {
      goto LABEL_21;
    }
    Swift::Int v125 = v19;
    uint64_t v26 = v16;
    uint64_t v27 = v22 * v20;
    uint64_t v28 = v21;
    Swift::Int v29 = v19 + 2;
    uint64_t v30 = v22 * v29;
    do
    {
      Swift::Int v31 = v10;
      uint64_t v32 = v131;
      sub_10001DC4C(v28 + v30, v131, type metadata accessor for OwnedBeaconRecord);
      uint64_t v33 = v132;
      sub_10001DC4C(v28 + v27, v132, type metadata accessor for OwnedBeaconRecord);
      int v34 = static Date.< infix(_:_:)(v32 + *(int *)(v134 + 32), v33 + *(int *)(v134 + 32));
      sub_100018C68(v33, type metadata accessor for OwnedBeaconRecord);
      sub_100018C68(v32, type metadata accessor for OwnedBeaconRecord);
      if (((v130 ^ v34) & 1) != 0)
      {
        uint64_t v16 = v26;
        Swift::Int v17 = v29;
        Swift::Int v19 = v125;
        Swift::Int v10 = v31;
        if ((v130 & 1) != 0) {
          goto LABEL_42;
        }
        goto LABEL_24;
      }

      v28 += v136;
      ++v29;
      Swift::Int v10 = v31;
    }

    while (v31 != v29);
    uint64_t v16 = v26;
    Swift::Int v17 = v31;
    Swift::Int v19 = v125;
LABEL_21:
    if ((v130 & 1) == 0) {
      goto LABEL_24;
    }
LABEL_42:
    uint64_t v51 = v136;
    if (v17 < v19) {
      goto LABEL_140;
    }
    if (v19 < v17) {
      break;
    }
LABEL_24:
    uint64_t v35 = v133;
    if (v17 < v10) {
      goto LABEL_25;
    }
LABEL_57:
    if (v17 < v19) {
      goto LABEL_133;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0) {
      uint64_t v16 = sub_1003CB1DC(0LL, *((void *)v16 + 2) + 1LL, 1, v16);
    }
    unint64_t v61 = *((void *)v16 + 2);
    unint64_t v60 = *((void *)v16 + 3);
    unint64_t v18 = v61 + 1;
    if (v61 >= v60 >> 1) {
      uint64_t v16 = sub_1003CB1DC((char *)(v60 > 1), v61 + 1, 1, v16);
    }
    *((void *)v16 + 2) = v18;
    uint64_t v62 = v16 + 32;
    uint64_t v63 = &v16[16 * v61 + 32];
    *(void *)uint64_t v63 = v19;
    *((void *)v63 + 1) = v17;
    if (v61)
    {
      while (1)
      {
        unint64_t v64 = v18 - 1;
        if (v18 >= 4)
        {
          uint64_t v69 = &v62[16 * v18];
          uint64_t v70 = *((void *)v69 - 8);
          uint64_t v71 = *((void *)v69 - 7);
          BOOL v75 = __OFSUB__(v71, v70);
          uint64_t v72 = v71 - v70;
          if (v75) {
            goto LABEL_122;
          }
          uint64_t v74 = *((void *)v69 - 6);
          uint64_t v73 = *((void *)v69 - 5);
          BOOL v75 = __OFSUB__(v73, v74);
          uint64_t v67 = v73 - v74;
          char v68 = v75;
          if (v75) {
            goto LABEL_123;
          }
          unint64_t v76 = v18 - 2;
          uint64_t v77 = &v62[16 * v18 - 32];
          uint64_t v79 = *(void *)v77;
          uint64_t v78 = *((void *)v77 + 1);
          BOOL v75 = __OFSUB__(v78, v79);
          uint64_t v80 = v78 - v79;
          if (v75) {
            goto LABEL_125;
          }
          BOOL v75 = __OFADD__(v67, v80);
          uint64_t v81 = v67 + v80;
          if (v75) {
            goto LABEL_128;
          }
          if (v81 >= v72)
          {
            uint64_t v99 = &v62[16 * v64];
            uint64_t v101 = *(void *)v99;
            uint64_t v100 = *((void *)v99 + 1);
            BOOL v75 = __OFSUB__(v100, v101);
            uint64_t v102 = v100 - v101;
            if (v75) {
              goto LABEL_132;
            }
            BOOL v92 = v67 < v102;
            goto LABEL_94;
          }
        }

        else
        {
          if (v18 != 3)
          {
            uint64_t v93 = *((void *)v16 + 4);
            uint64_t v94 = *((void *)v16 + 5);
            BOOL v75 = __OFSUB__(v94, v93);
            uint64_t v86 = v94 - v93;
            char v87 = v75;
            goto LABEL_88;
          }

          uint64_t v66 = *((void *)v16 + 4);
          uint64_t v65 = *((void *)v16 + 5);
          BOOL v75 = __OFSUB__(v65, v66);
          uint64_t v67 = v65 - v66;
          char v68 = v75;
        }

        if ((v68 & 1) != 0) {
          goto LABEL_124;
        }
        unint64_t v76 = v18 - 2;
        uint64_t v82 = &v62[16 * v18 - 32];
        uint64_t v84 = *(void *)v82;
        uint64_t v83 = *((void *)v82 + 1);
        BOOL v85 = __OFSUB__(v83, v84);
        uint64_t v86 = v83 - v84;
        char v87 = v85;
        if (v85) {
          goto LABEL_127;
        }
        uint64_t v88 = &v62[16 * v64];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        BOOL v75 = __OFSUB__(v89, v90);
        uint64_t v91 = v89 - v90;
        if (v75) {
          goto LABEL_130;
        }
        if (__OFADD__(v86, v91)) {
          goto LABEL_131;
        }
        if (v86 + v91 >= v67)
        {
          BOOL v92 = v67 < v91;
LABEL_94:
          if (v92) {
            unint64_t v64 = v76;
          }
          goto LABEL_96;
        }

      swift_bridgeObjectRelease();
      v121[2] = 0LL;
      return swift_bridgeObjectRelease();
    }
  }

  else
  {
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = static Array._allocateBufferUninitialized(minimumCapacity:)(v12 >> 1, v134);
    *(void *)(v14 + 16) = v13;
    uint64_t v15 = *(unsigned __int8 *)(v127 + 80);
    unsigned int v121 = (void *)v14;
    unint64_t v126 = v14 + ((v15 + 32) & ~v15);
  }

  Swift::Int v17 = 0LL;
  uint64_t v16 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    Swift::Int v19 = v17;
    Swift::Int v20 = v17 + 1;
    if (v17 + 1 >= v10)
    {
      ++v17;
      goto LABEL_24;
    }

    uint64_t v21 = *v133;
    uint64_t v22 = *(void *)(v127 + 72);
    uint64_t v23 = v131;
    sub_10001DC4C(*v133 + v22 * v20, v131, type metadata accessor for BeaconEstimatedLocation);
    uint64_t v24 = v21 + v22 * v17;
    uint64_t v25 = v132;
    sub_10001DC4C(v24, v132, type metadata accessor for BeaconEstimatedLocation);
    LODWORD(v130) = static Date.< infix(_:_:)(v23 + *(int *)(v134 + 40), v25 + *(int *)(v134 + 40));
    sub_100018C68(v25, type metadata accessor for BeaconEstimatedLocation);
    sub_100018C68(v23, type metadata accessor for BeaconEstimatedLocation);
    Swift::Int v17 = v19 + 2;
    uint64_t v129 = v21;
    uint64_t v136 = v22;
    if (v19 + 2 >= v10) {
      goto LABEL_21;
    }
    Swift::Int v125 = v19;
    uint64_t v26 = v16;
    uint64_t v27 = v22 * v20;
    uint64_t v28 = v21;
    Swift::Int v29 = v19 + 2;
    uint64_t v30 = v22 * v29;
    do
    {
      Swift::Int v31 = v10;
      uint64_t v32 = v131;
      sub_10001DC4C(v28 + v30, v131, type metadata accessor for BeaconEstimatedLocation);
      uint64_t v33 = v132;
      sub_10001DC4C(v28 + v27, v132, type metadata accessor for BeaconEstimatedLocation);
      int v34 = static Date.< infix(_:_:)(v32 + *(int *)(v134 + 40), v33 + *(int *)(v134 + 40));
      sub_100018C68(v33, type metadata accessor for BeaconEstimatedLocation);
      sub_100018C68(v32, type metadata accessor for BeaconEstimatedLocation);
      if (((v130 ^ v34) & 1) != 0)
      {
        uint64_t v16 = v26;
        Swift::Int v17 = v29;
        Swift::Int v19 = v125;
        Swift::Int v10 = v31;
        if ((v130 & 1) != 0) {
          goto LABEL_42;
        }
        goto LABEL_24;
      }

      v28 += v136;
      ++v29;
      Swift::Int v10 = v31;
    }

    while (v31 != v29);
    uint64_t v16 = v26;
    Swift::Int v17 = v31;
    Swift::Int v19 = v125;
LABEL_21:
    if ((v130 & 1) == 0) {
      goto LABEL_24;
    }
LABEL_42:
    uint64_t v51 = v136;
    if (v17 < v19) {
      goto LABEL_140;
    }
    if (v19 < v17) {
      break;
    }
LABEL_24:
    uint64_t v35 = v133;
    if (v17 < v10) {
      goto LABEL_25;
    }
LABEL_57:
    if (v17 < v19) {
      goto LABEL_133;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0) {
      uint64_t v16 = sub_1003CB1DC(0LL, *((void *)v16 + 2) + 1LL, 1, v16);
    }
    unint64_t v61 = *((void *)v16 + 2);
    unint64_t v60 = *((void *)v16 + 3);
    unint64_t v18 = v61 + 1;
    if (v61 >= v60 >> 1) {
      uint64_t v16 = sub_1003CB1DC((char *)(v60 > 1), v61 + 1, 1, v16);
    }
    *((void *)v16 + 2) = v18;
    uint64_t v62 = v16 + 32;
    uint64_t v63 = &v16[16 * v61 + 32];
    *(void *)uint64_t v63 = v19;
    *((void *)v63 + 1) = v17;
    if (v61)
    {
      while (1)
      {
        unint64_t v64 = v18 - 1;
        if (v18 >= 4)
        {
          uint64_t v69 = &v62[16 * v18];
          uint64_t v70 = *((void *)v69 - 8);
          uint64_t v71 = *((void *)v69 - 7);
          BOOL v75 = __OFSUB__(v71, v70);
          uint64_t v72 = v71 - v70;
          if (v75) {
            goto LABEL_122;
          }
          uint64_t v74 = *((void *)v69 - 6);
          uint64_t v73 = *((void *)v69 - 5);
          BOOL v75 = __OFSUB__(v73, v74);
          uint64_t v67 = v73 - v74;
          char v68 = v75;
          if (v75) {
            goto LABEL_123;
          }
          unint64_t v76 = v18 - 2;
          uint64_t v77 = &v62[16 * v18 - 32];
          uint64_t v79 = *(void *)v77;
          uint64_t v78 = *((void *)v77 + 1);
          BOOL v75 = __OFSUB__(v78, v79);
          uint64_t v80 = v78 - v79;
          if (v75) {
            goto LABEL_125;
          }
          BOOL v75 = __OFADD__(v67, v80);
          uint64_t v81 = v67 + v80;
          if (v75) {
            goto LABEL_128;
          }
          if (v81 >= v72)
          {
            uint64_t v99 = &v62[16 * v64];
            uint64_t v101 = *(void *)v99;
            uint64_t v100 = *((void *)v99 + 1);
            BOOL v75 = __OFSUB__(v100, v101);
            uint64_t v102 = v100 - v101;
            if (v75) {
              goto LABEL_132;
            }
            BOOL v92 = v67 < v102;
            goto LABEL_94;
          }
        }

        else
        {
          if (v18 != 3)
          {
            uint64_t v93 = *((void *)v16 + 4);
            uint64_t v94 = *((void *)v16 + 5);
            BOOL v75 = __OFSUB__(v94, v93);
            uint64_t v86 = v94 - v93;
            char v87 = v75;
            goto LABEL_88;
          }

          uint64_t v66 = *((void *)v16 + 4);
          uint64_t v65 = *((void *)v16 + 5);
          BOOL v75 = __OFSUB__(v65, v66);
          uint64_t v67 = v65 - v66;
          char v68 = v75;
        }

        if ((v68 & 1) != 0) {
          goto LABEL_124;
        }
        unint64_t v76 = v18 - 2;
        uint64_t v82 = &v62[16 * v18 - 32];
        uint64_t v84 = *(void *)v82;
        uint64_t v83 = *((void *)v82 + 1);
        BOOL v85 = __OFSUB__(v83, v84);
        uint64_t v86 = v83 - v84;
        char v87 = v85;
        if (v85) {
          goto LABEL_127;
        }
        uint64_t v88 = &v62[16 * v64];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        BOOL v75 = __OFSUB__(v89, v90);
        uint64_t v91 = v89 - v90;
        if (v75) {
          goto LABEL_130;
        }
        if (__OFADD__(v86, v91)) {
          goto LABEL_131;
        }
        if (v86 + v91 >= v67)
        {
          BOOL v92 = v67 < v91;
LABEL_94:
          if (v92) {
            unint64_t v64 = v76;
          }
          goto LABEL_96;
        }

      swift_bridgeObjectRelease();
      v121[2] = 0LL;
      return swift_bridgeObjectRelease();
    }
  }

  else
  {
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = static Array._allocateBufferUninitialized(minimumCapacity:)(v12 >> 1, v134);
    *(void *)(v14 + 16) = v13;
    uint64_t v15 = *(unsigned __int8 *)(v127 + 80);
    unsigned int v121 = (void *)v14;
    unint64_t v126 = v14 + ((v15 + 32) & ~v15);
  }

  Swift::Int v17 = 0LL;
  uint64_t v16 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    Swift::Int v19 = v17;
    Swift::Int v20 = v17 + 1;
    if (v17 + 1 >= v10)
    {
      ++v17;
      goto LABEL_24;
    }

    uint64_t v21 = *v133;
    uint64_t v22 = *(void *)(v127 + 72);
    uint64_t v23 = v131;
    sub_10001DC4C(*v133 + v22 * v20, v131, type metadata accessor for RawSearchResult);
    uint64_t v24 = v21 + v22 * v17;
    uint64_t v25 = v132;
    sub_10001DC4C(v24, v132, type metadata accessor for RawSearchResult);
    LODWORD(v130) = static Date.< infix(_:_:)(v23 + *(int *)(v134 + 20), v25 + *(int *)(v134 + 20));
    sub_100018C68(v25, type metadata accessor for RawSearchResult);
    sub_100018C68(v23, type metadata accessor for RawSearchResult);
    Swift::Int v17 = v19 + 2;
    uint64_t v129 = v21;
    uint64_t v136 = v22;
    if (v19 + 2 >= v10) {
      goto LABEL_21;
    }
    Swift::Int v125 = v19;
    uint64_t v26 = v16;
    uint64_t v27 = v22 * v20;
    uint64_t v28 = v21;
    Swift::Int v29 = v19 + 2;
    uint64_t v30 = v22 * v29;
    do
    {
      Swift::Int v31 = v10;
      uint64_t v32 = v131;
      sub_10001DC4C(v28 + v30, v131, type metadata accessor for RawSearchResult);
      uint64_t v33 = v132;
      sub_10001DC4C(v28 + v27, v132, type metadata accessor for RawSearchResult);
      int v34 = static Date.< infix(_:_:)(v32 + *(int *)(v134 + 20), v33 + *(int *)(v134 + 20));
      sub_100018C68(v33, type metadata accessor for RawSearchResult);
      sub_100018C68(v32, type metadata accessor for RawSearchResult);
      if (((v130 ^ v34) & 1) != 0)
      {
        uint64_t v16 = v26;
        Swift::Int v17 = v29;
        Swift::Int v19 = v125;
        Swift::Int v10 = v31;
        if ((v130 & 1) != 0) {
          goto LABEL_42;
        }
        goto LABEL_24;
      }

      v28 += v136;
      ++v29;
      Swift::Int v10 = v31;
    }

    while (v31 != v29);
    uint64_t v16 = v26;
    Swift::Int v17 = v31;
    Swift::Int v19 = v125;
LABEL_21:
    if ((v130 & 1) == 0) {
      goto LABEL_24;
    }
LABEL_42:
    uint64_t v51 = v136;
    if (v17 < v19) {
      goto LABEL_140;
    }
    if (v19 < v17) {
      break;
    }
LABEL_24:
    uint64_t v35 = v133;
    if (v17 < v10) {
      goto LABEL_25;
    }
LABEL_57:
    if (v17 < v19) {
      goto LABEL_133;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0) {
      uint64_t v16 = sub_1003CB1DC(0LL, *((void *)v16 + 2) + 1LL, 1, v16);
    }
    unint64_t v61 = *((void *)v16 + 2);
    unint64_t v60 = *((void *)v16 + 3);
    unint64_t v18 = v61 + 1;
    if (v61 >= v60 >> 1) {
      uint64_t v16 = sub_1003CB1DC((char *)(v60 > 1), v61 + 1, 1, v16);
    }
    *((void *)v16 + 2) = v18;
    uint64_t v62 = v16 + 32;
    uint64_t v63 = &v16[16 * v61 + 32];
    *(void *)uint64_t v63 = v19;
    *((void *)v63 + 1) = v17;
    if (v61)
    {
      while (1)
      {
        unint64_t v64 = v18 - 1;
        if (v18 >= 4)
        {
          uint64_t v69 = &v62[16 * v18];
          uint64_t v70 = *((void *)v69 - 8);
          uint64_t v71 = *((void *)v69 - 7);
          BOOL v75 = __OFSUB__(v71, v70);
          uint64_t v72 = v71 - v70;
          if (v75) {
            goto LABEL_122;
          }
          uint64_t v74 = *((void *)v69 - 6);
          uint64_t v73 = *((void *)v69 - 5);
          BOOL v75 = __OFSUB__(v73, v74);
          uint64_t v67 = v73 - v74;
          char v68 = v75;
          if (v75) {
            goto LABEL_123;
          }
          unint64_t v76 = v18 - 2;
          uint64_t v77 = &v62[16 * v18 - 32];
          uint64_t v79 = *(void *)v77;
          uint64_t v78 = *((void *)v77 + 1);
          BOOL v75 = __OFSUB__(v78, v79);
          uint64_t v80 = v78 - v79;
          if (v75) {
            goto LABEL_125;
          }
          BOOL v75 = __OFADD__(v67, v80);
          uint64_t v81 = v67 + v80;
          if (v75) {
            goto LABEL_128;
          }
          if (v81 >= v72)
          {
            uint64_t v99 = &v62[16 * v64];
            uint64_t v101 = *(void *)v99;
            uint64_t v100 = *((void *)v99 + 1);
            BOOL v75 = __OFSUB__(v100, v101);
            uint64_t v102 = v100 - v101;
            if (v75) {
              goto LABEL_132;
            }
            BOOL v92 = v67 < v102;
            goto LABEL_94;
          }
        }

        else
        {
          if (v18 != 3)
          {
            uint64_t v93 = *((void *)v16 + 4);
            uint64_t v94 = *((void *)v16 + 5);
            BOOL v75 = __OFSUB__(v94, v93);
            uint64_t v86 = v94 - v93;
            char v87 = v75;
            goto LABEL_88;
          }

          uint64_t v66 = *((void *)v16 + 4);
          uint64_t v65 = *((void *)v16 + 5);
          BOOL v75 = __OFSUB__(v65, v66);
          uint64_t v67 = v65 - v66;
          char v68 = v75;
        }

        if ((v68 & 1) != 0) {
          goto LABEL_124;
        }
        unint64_t v76 = v18 - 2;
        uint64_t v82 = &v62[16 * v18 - 32];
        uint64_t v84 = *(void *)v82;
        uint64_t v83 = *((void *)v82 + 1);
        BOOL v85 = __OFSUB__(v83, v84);
        uint64_t v86 = v83 - v84;
        char v87 = v85;
        if (v85) {
          goto LABEL_127;
        }
        uint64_t v88 = &v62[16 * v64];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        BOOL v75 = __OFSUB__(v89, v90);
        uint64_t v91 = v89 - v90;
        if (v75) {
          goto LABEL_130;
        }
        if (__OFADD__(v86, v91)) {
          goto LABEL_131;
        }
        if (v86 + v91 >= v67)
        {
          BOOL v92 = v67 < v91;
LABEL_94:
          if (v92) {
            unint64_t v64 = v76;
          }
          goto LABEL_96;
        }

      swift_bridgeObjectRelease();
      v121[2] = 0LL;
      return swift_bridgeObjectRelease();
    }
  }

  else
  {
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = static Array._allocateBufferUninitialized(minimumCapacity:)(v12 >> 1, v134);
    *(void *)(v14 + 16) = v13;
    uint64_t v15 = *(unsigned __int8 *)(v127 + 80);
    unsigned int v121 = (void *)v14;
    unint64_t v126 = v14 + ((v15 + 32) & ~v15);
  }

  Swift::Int v17 = 0LL;
  uint64_t v16 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    Swift::Int v19 = v17;
    Swift::Int v20 = v17 + 1;
    if (v17 + 1 >= v10)
    {
      ++v17;
      goto LABEL_24;
    }

    uint64_t v21 = *v133;
    uint64_t v22 = *(void *)(v127 + 72);
    uint64_t v23 = v131;
    sub_10001DC4C(*v133 + v22 * v20, v131, type metadata accessor for KeySyncMetadataDisplay);
    uint64_t v24 = v21 + v22 * v17;
    uint64_t v25 = v132;
    sub_10001DC4C(v24, v132, type metadata accessor for KeySyncMetadataDisplay);
    LODWORD(v130) = static Date.> infix(_:_:)(v23 + *(int *)(v134 + 32), v25 + *(int *)(v134 + 32));
    sub_100018C68(v25, type metadata accessor for KeySyncMetadataDisplay);
    sub_100018C68(v23, type metadata accessor for KeySyncMetadataDisplay);
    Swift::Int v17 = v19 + 2;
    uint64_t v129 = v21;
    uint64_t v136 = v22;
    if (v19 + 2 >= v10) {
      goto LABEL_21;
    }
    Swift::Int v125 = v19;
    uint64_t v26 = v16;
    uint64_t v27 = v22 * v20;
    uint64_t v28 = v21;
    Swift::Int v29 = v19 + 2;
    uint64_t v30 = v22 * v29;
    do
    {
      Swift::Int v31 = v10;
      uint64_t v32 = v131;
      sub_10001DC4C(v28 + v30, v131, type metadata accessor for KeySyncMetadataDisplay);
      uint64_t v33 = v132;
      sub_10001DC4C(v28 + v27, v132, type metadata accessor for KeySyncMetadataDisplay);
      int v34 = static Date.> infix(_:_:)(v32 + *(int *)(v134 + 32), v33 + *(int *)(v134 + 32));
      sub_100018C68(v33, type metadata accessor for KeySyncMetadataDisplay);
      sub_100018C68(v32, type metadata accessor for KeySyncMetadataDisplay);
      if (((v130 ^ v34) & 1) != 0)
      {
        uint64_t v16 = v26;
        Swift::Int v17 = v29;
        Swift::Int v19 = v125;
        Swift::Int v10 = v31;
        if ((v130 & 1) != 0) {
          goto LABEL_42;
        }
        goto LABEL_24;
      }

      v28 += v136;
      ++v29;
      Swift::Int v10 = v31;
    }

    while (v31 != v29);
    uint64_t v16 = v26;
    Swift::Int v17 = v31;
    Swift::Int v19 = v125;
LABEL_21:
    if ((v130 & 1) == 0) {
      goto LABEL_24;
    }
LABEL_42:
    uint64_t v51 = v136;
    if (v17 < v19) {
      goto LABEL_140;
    }
    if (v19 < v17) {
      break;
    }
LABEL_24:
    uint64_t v35 = v133;
    if (v17 < v10) {
      goto LABEL_25;
    }
LABEL_57:
    if (v17 < v19) {
      goto LABEL_133;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0) {
      uint64_t v16 = sub_1003CB1DC(0LL, *((void *)v16 + 2) + 1LL, 1, v16);
    }
    unint64_t v61 = *((void *)v16 + 2);
    unint64_t v60 = *((void *)v16 + 3);
    unint64_t v18 = v61 + 1;
    if (v61 >= v60 >> 1) {
      uint64_t v16 = sub_1003CB1DC((char *)(v60 > 1), v61 + 1, 1, v16);
    }
    *((void *)v16 + 2) = v18;
    uint64_t v62 = v16 + 32;
    uint64_t v63 = &v16[16 * v61 + 32];
    *(void *)uint64_t v63 = v19;
    *((void *)v63 + 1) = v17;
    if (v61)
    {
      while (1)
      {
        unint64_t v64 = v18 - 1;
        if (v18 >= 4)
        {
          uint64_t v69 = &v62[16 * v18];
          uint64_t v70 = *((void *)v69 - 8);
          uint64_t v71 = *((void *)v69 - 7);
          BOOL v75 = __OFSUB__(v71, v70);
          uint64_t v72 = v71 - v70;
          if (v75) {
            goto LABEL_122;
          }
          uint64_t v74 = *((void *)v69 - 6);
          uint64_t v73 = *((void *)v69 - 5);
          BOOL v75 = __OFSUB__(v73, v74);
          uint64_t v67 = v73 - v74;
          char v68 = v75;
          if (v75) {
            goto LABEL_123;
          }
          unint64_t v76 = v18 - 2;
          uint64_t v77 = &v62[16 * v18 - 32];
          uint64_t v79 = *(void *)v77;
          uint64_t v78 = *((void *)v77 + 1);
          BOOL v75 = __OFSUB__(v78, v79);
          uint64_t v80 = v78 - v79;
          if (v75) {
            goto LABEL_125;
          }
          BOOL v75 = __OFADD__(v67, v80);
          uint64_t v81 = v67 + v80;
          if (v75) {
            goto LABEL_128;
          }
          if (v81 >= v72)
          {
            uint64_t v99 = &v62[16 * v64];
            uint64_t v101 = *(void *)v99;
            uint64_t v100 = *((void *)v99 + 1);
            BOOL v75 = __OFSUB__(v100, v101);
            uint64_t v102 = v100 - v101;
            if (v75) {
              goto LABEL_132;
            }
            BOOL v92 = v67 < v102;
            goto LABEL_94;
          }
        }

        else
        {
          if (v18 != 3)
          {
            uint64_t v93 = *((void *)v16 + 4);
            uint64_t v94 = *((void *)v16 + 5);
            BOOL v75 = __OFSUB__(v94, v93);
            uint64_t v86 = v94 - v93;
            char v87 = v75;
            goto LABEL_88;
          }

          uint64_t v66 = *((void *)v16 + 4);
          uint64_t v65 = *((void *)v16 + 5);
          BOOL v75 = __OFSUB__(v65, v66);
          uint64_t v67 = v65 - v66;
          char v68 = v75;
        }

        if ((v68 & 1) != 0) {
          goto LABEL_124;
        }
        unint64_t v76 = v18 - 2;
        uint64_t v82 = &v62[16 * v18 - 32];
        uint64_t v84 = *(void *)v82;
        uint64_t v83 = *((void *)v82 + 1);
        BOOL v85 = __OFSUB__(v83, v84);
        uint64_t v86 = v83 - v84;
        char v87 = v85;
        if (v85) {
          goto LABEL_127;
        }
        uint64_t v88 = &v62[16 * v64];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        BOOL v75 = __OFSUB__(v89, v90);
        uint64_t v91 = v89 - v90;
        if (v75) {
          goto LABEL_130;
        }
        if (__OFADD__(v86, v91)) {
          goto LABEL_131;
        }
        if (v86 + v91 >= v67)
        {
          BOOL v92 = v67 < v91;
LABEL_94:
          if (v92) {
            unint64_t v64 = v76;
          }
          goto LABEL_96;
        }

      swift_bridgeObjectRelease();
      v121[2] = 0LL;
      return swift_bridgeObjectRelease();
    }
  }

  else
  {
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = static Array._allocateBufferUninitialized(minimumCapacity:)(v12 >> 1, updated);
    *(void *)(v14 + 16) = v13;
    uint64_t v15 = *(unsigned __int8 *)(v127 + 80);
    unsigned int v121 = (void *)v14;
    unint64_t v126 = v14 + ((v15 + 32) & ~v15);
  }

  Swift::Int v17 = 0LL;
  uint64_t v16 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    Swift::Int v19 = v17;
    Swift::Int v20 = v17 + 1;
    if (v17 + 1 >= v10)
    {
      ++v17;
      goto LABEL_24;
    }

    uint64_t v21 = *v133;
    uint64_t v22 = *(void *)(v127 + 72);
    uint64_t v23 = v131;
    sub_10001DC4C(*v133 + v22 * v20, v131, type metadata accessor for UpdateDeviceState);
    uint64_t v24 = v21 + v22 * v17;
    uint64_t v25 = v132;
    sub_10001DC4C(v24, v132, type metadata accessor for UpdateDeviceState);
    LODWORD(v130) = static Date.> infix(_:_:)(v23 + *(int *)(updated + 20), v25 + *(int *)(updated + 20));
    sub_100018C68(v25, type metadata accessor for UpdateDeviceState);
    sub_100018C68(v23, type metadata accessor for UpdateDeviceState);
    Swift::Int v17 = v19 + 2;
    uint64_t v129 = v21;
    uint64_t v136 = v22;
    if (v19 + 2 >= v10) {
      goto LABEL_21;
    }
    Swift::Int v125 = v19;
    uint64_t v26 = v16;
    uint64_t v27 = v22 * v20;
    uint64_t v28 = v21;
    Swift::Int v29 = v19 + 2;
    uint64_t v30 = v22 * v29;
    do
    {
      Swift::Int v31 = v10;
      uint64_t v32 = v131;
      sub_10001DC4C(v28 + v30, v131, type metadata accessor for UpdateDeviceState);
      uint64_t v33 = v132;
      sub_10001DC4C(v28 + v27, v132, type metadata accessor for UpdateDeviceState);
      int v34 = static Date.> infix(_:_:)(v32 + *(int *)(updated + 20), v33 + *(int *)(updated + 20));
      sub_100018C68(v33, type metadata accessor for UpdateDeviceState);
      sub_100018C68(v32, type metadata accessor for UpdateDeviceState);
      if (((v130 ^ v34) & 1) != 0)
      {
        uint64_t v16 = v26;
        Swift::Int v17 = v29;
        Swift::Int v19 = v125;
        Swift::Int v10 = v31;
        if ((v130 & 1) != 0) {
          goto LABEL_42;
        }
        goto LABEL_24;
      }

      v28 += v136;
      ++v29;
      Swift::Int v10 = v31;
    }

    while (v31 != v29);
    uint64_t v16 = v26;
    Swift::Int v17 = v31;
    Swift::Int v19 = v125;
LABEL_21:
    if ((v130 & 1) == 0) {
      goto LABEL_24;
    }
LABEL_42:
    uint64_t v51 = v136;
    if (v17 < v19) {
      goto LABEL_140;
    }
    if (v19 < v17) {
      break;
    }
LABEL_24:
    uint64_t v35 = v133;
    if (v17 < v10) {
      goto LABEL_25;
    }
LABEL_57:
    if (v17 < v19) {
      goto LABEL_133;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0) {
      uint64_t v16 = sub_1003CB1DC(0LL, *((void *)v16 + 2) + 1LL, 1, v16);
    }
    unint64_t v61 = *((void *)v16 + 2);
    unint64_t v60 = *((void *)v16 + 3);
    unint64_t v18 = v61 + 1;
    if (v61 >= v60 >> 1) {
      uint64_t v16 = sub_1003CB1DC((char *)(v60 > 1), v61 + 1, 1, v16);
    }
    *((void *)v16 + 2) = v18;
    uint64_t v62 = v16 + 32;
    uint64_t v63 = &v16[16 * v61 + 32];
    *(void *)uint64_t v63 = v19;
    *((void *)v63 + 1) = v17;
    if (v61)
    {
      while (1)
      {
        unint64_t v64 = v18 - 1;
        if (v18 >= 4)
        {
          uint64_t v69 = &v62[16 * v18];
          uint64_t v70 = *((void *)v69 - 8);
          uint64_t v71 = *((void *)v69 - 7);
          BOOL v75 = __OFSUB__(v71, v70);
          uint64_t v72 = v71 - v70;
          if (v75) {
            goto LABEL_122;
          }
          uint64_t v74 = *((void *)v69 - 6);
          uint64_t v73 = *((void *)v69 - 5);
          BOOL v75 = __OFSUB__(v73, v74);
          uint64_t v67 = v73 - v74;
          char v68 = v75;
          if (v75) {
            goto LABEL_123;
          }
          unint64_t v76 = v18 - 2;
          uint64_t v77 = &v62[16 * v18 - 32];
          uint64_t v79 = *(void *)v77;
          uint64_t v78 = *((void *)v77 + 1);
          BOOL v75 = __OFSUB__(v78, v79);
          uint64_t v80 = v78 - v79;
          if (v75) {
            goto LABEL_125;
          }
          BOOL v75 = __OFADD__(v67, v80);
          uint64_t v81 = v67 + v80;
          if (v75) {
            goto LABEL_128;
          }
          if (v81 >= v72)
          {
            uint64_t v99 = &v62[16 * v64];
            uint64_t v101 = *(void *)v99;
            uint64_t v100 = *((void *)v99 + 1);
            BOOL v75 = __OFSUB__(v100, v101);
            uint64_t v102 = v100 - v101;
            if (v75) {
              goto LABEL_132;
            }
            BOOL v92 = v67 < v102;
            goto LABEL_94;
          }
        }

        else
        {
          if (v18 != 3)
          {
            uint64_t v93 = *((void *)v16 + 4);
            uint64_t v94 = *((void *)v16 + 5);
            BOOL v75 = __OFSUB__(v94, v93);
            uint64_t v86 = v94 - v93;
            char v87 = v75;
            goto LABEL_88;
          }

          uint64_t v66 = *((void *)v16 + 4);
          uint64_t v65 = *((void *)v16 + 5);
          BOOL v75 = __OFSUB__(v65, v66);
          uint64_t v67 = v65 - v66;
          char v68 = v75;
        }

        if ((v68 & 1) != 0) {
          goto LABEL_124;
        }
        unint64_t v76 = v18 - 2;
        uint64_t v82 = &v62[16 * v18 - 32];
        uint64_t v84 = *(void *)v82;
        uint64_t v83 = *((void *)v82 + 1);
        BOOL v85 = __OFSUB__(v83, v84);
        uint64_t v86 = v83 - v84;
        char v87 = v85;
        if (v85) {
          goto LABEL_127;
        }
        uint64_t v88 = &v62[16 * v64];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        BOOL v75 = __OFSUB__(v89, v90);
        uint64_t v91 = v89 - v90;
        if (v75) {
          goto LABEL_130;
        }
        if (__OFADD__(v86, v91)) {
          goto LABEL_131;
        }
        if (v86 + v91 >= v67)
        {
          BOOL v92 = v67 < v91;
LABEL_94:
          if (v92) {
            unint64_t v64 = v76;
          }
          goto LABEL_96;
        }

LABEL_88:
        if ((v87 & 1) != 0) {
          goto LABEL_126;
        }
        id v95 = &v62[16 * v64];
        uint64_t v97 = *(void *)v95;
        uint64_t v96 = *((void *)v95 + 1);
        BOOL v75 = __OFSUB__(v96, v97);
        uint64_t v98 = v96 - v97;
        if (v75) {
          goto LABEL_129;
        }
        if (v98 < v86) {
          goto LABEL_14;
        }
LABEL_96:
        Swift::Int v103 = v17;
        unint64_t v104 = v64 - 1;
        if (v64 - 1 >= v18)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }

        if (!*v133) {
          goto LABEL_144;
        }
        unint64_t v105 = v16;
        uint64_t v106 = &v62[16 * v104];
        uint64_t v107 = *(void *)v106;
        uint64_t v108 = &v62[16 * v64];
        uint64_t v109 = *((void *)v108 + 1);
        uint64_t v110 = v128;
        sub_100144A3C( *v133 + *(void *)(v127 + 72) * *(void *)v106,  *v133 + *(void *)(v127 + 72) * *(void *)v108,  *v133 + *(void *)(v127 + 72) * v109,  v126);
        uint64_t v128 = v110;
        if (v110) {
          goto LABEL_116;
        }
        if (v109 < v107) {
          goto LABEL_119;
        }
        if (v64 > *((void *)v105 + 2)) {
          goto LABEL_120;
        }
        *(void *)uint64_t v106 = v107;
        *(void *)&v62[16 * v104 + 8] = v109;
        unint64_t v111 = *((void *)v105 + 2);
        if (v64 >= v111) {
          goto LABEL_121;
        }
        uint64_t v16 = v105;
        unint64_t v18 = v111 - 1;
        memmove(&v62[16 * v64], v108 + 16, 16 * (v111 - 1 - v64));
        *((void *)v105 + 2) = v111 - 1;
        BOOL v92 = v111 > 2;
        Swift::Int v17 = v103;
        if (!v92) {
          goto LABEL_14;
        }
      }
    }

    unint64_t v18 = 1LL;
LABEL_14:
    Swift::Int v10 = v133[1];
    if (v17 >= v10) {
      goto LABEL_105;
    }
  }

  Swift::Int v130 = v10;
  uint64_t v120 = v16;
  uint64_t v52 = 0LL;
  uint64_t v53 = v136 * (v17 - 1);
  uint64_t v54 = v17 * v136;
  Swift::Int v55 = v19;
  uint64_t v56 = v19 * v136;
  uint64_t v35 = v133;
  Swift::Int v125 = v19;
  do
  {
    if (v55 != v17 + v52 - 1)
    {
      uint64_t v57 = v129;
      if (!v129) {
        goto LABEL_145;
      }
      unint64_t v58 = v129 + v56;
      uint64_t v59 = v129 + v53;
      sub_10002218C(v129 + v56, v124, type metadata accessor for OwnedBeaconRecord);
      if (v56 < v53 || v58 >= v57 + v54)
      {
        swift_arrayInitWithTakeFrontToBack(v57 + v56, v57 + v53, 1LL, v134);
        uint64_t v51 = v136;
      }

      else
      {
        uint64_t v51 = v136;
        if (v56 != v53) {
          swift_arrayInitWithTakeBackToFront(v58, v59);
        }
      }

      sub_10002218C(v124, v59, type metadata accessor for OwnedBeaconRecord);
      uint64_t v35 = v133;
      Swift::Int v19 = v125;
    }

    ++v55;
    --v52;
    v53 -= v51;
    v54 -= v51;
    v56 += v51;
  }

  while (v55 < v17 + v52);
  uint64_t v16 = v120;
  Swift::Int v10 = v130;
  if (v17 >= v130) {
    goto LABEL_57;
  }
LABEL_25:
  if (__OFSUB__(v17, v19)) {
    goto LABEL_138;
  }
  if (v17 - v19 >= v122) {
    goto LABEL_57;
  }
  if (__OFADD__(v19, v122)) {
    goto LABEL_141;
  }
  if (v19 + v122 >= v10) {
    Swift::Int v36 = v10;
  }
  else {
    Swift::Int v36 = v19 + v122;
  }
  if (v36 >= v19)
  {
    if (v17 != v36)
    {
      uint64_t v120 = v16;
      uint64_t v37 = *(void *)(v127 + 72);
      uint64_t v136 = v37 * (v17 - 1);
      uint64_t v129 = v37;
      Swift::Int v38 = v17 * v37;
      Swift::Int v125 = v19;
      Swift::Int v123 = v36;
      do
      {
        uint64_t v40 = 0LL;
        Swift::Int v41 = v19;
        Swift::Int v130 = v17;
        while (1)
        {
          uint64_t v42 = *v35;
          Swift::Int v43 = v38;
          uint64_t v44 = v38 + v40 + *v35;
          uint64_t v45 = v131;
          uint64_t v46 = v35;
          sub_10001DC4C(v44, v131, type metadata accessor for OwnedBeaconRecord);
          uint64_t v47 = v132;
          sub_10001DC4C(v136 + v40 + v42, v132, type metadata accessor for OwnedBeaconRecord);
          LOBYTE(v42) = static Date.< infix(_:_:)(v45 + *(int *)(v134 + 32), v47 + *(int *)(v134 + 32));
          sub_100018C68(v47, type metadata accessor for OwnedBeaconRecord);
          sub_100018C68(v45, type metadata accessor for OwnedBeaconRecord);
          if ((v42 & 1) == 0) {
            break;
          }
          uint64_t v48 = *v46;
          if (!*v46) {
            goto LABEL_143;
          }
          Swift::Int v38 = v43;
          uint64_t v49 = v48 + v43 + v40;
          uint64_t v50 = v48 + v136 + v40;
          sub_10002218C(v49, v135, type metadata accessor for OwnedBeaconRecord);
          swift_arrayInitWithTakeFrontToBack(v49, v50, 1LL, v134);
          sub_10002218C(v135, v50, type metadata accessor for OwnedBeaconRecord);
          Swift::Int v39 = v130;
          v40 -= v129;
          ++v41;
          uint64_t v35 = v133;
          if (v130 == v41) {
            goto LABEL_35;
          }
        }

        Swift::Int v39 = v130;
        Swift::Int v38 = v43;
        uint64_t v35 = v46;
LABEL_35:
        Swift::Int v17 = v39 + 1;
        v136 += v129;
        v38 += v129;
        Swift::Int v19 = v125;
      }

      while (v17 != v123);
      Swift::Int v17 = v123;
      uint64_t v16 = v120;
    }

    goto LABEL_57;
  }

        if ((v87 & 1) != 0) {
          goto LABEL_126;
        }
        id v95 = &v62[16 * v64];
        uint64_t v97 = *(void *)v95;
        uint64_t v96 = *((void *)v95 + 1);
        BOOL v75 = __OFSUB__(v96, v97);
        uint64_t v98 = v96 - v97;
        if (v75) {
          goto LABEL_129;
        }
        if (v98 < v86) {
          goto LABEL_14;
        }
LABEL_96:
        Swift::Int v103 = v17;
        unint64_t v104 = v64 - 1;
        if (v64 - 1 >= v18)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }

        if (!*v133) {
          goto LABEL_144;
        }
        unint64_t v105 = v16;
        uint64_t v106 = &v62[16 * v104];
        uint64_t v107 = *(void *)v106;
        uint64_t v108 = &v62[16 * v64];
        uint64_t v109 = *((void *)v108 + 1);
        uint64_t v110 = v128;
        sub_1001A7BB4( *v133 + *(void *)(v127 + 72) * *(void *)v106,  *v133 + *(void *)(v127 + 72) * *(void *)v108,  *v133 + *(void *)(v127 + 72) * v109,  v126);
        uint64_t v128 = v110;
        if (v110) {
          goto LABEL_116;
        }
        if (v109 < v107) {
          goto LABEL_119;
        }
        if (v64 > *((void *)v105 + 2)) {
          goto LABEL_120;
        }
        *(void *)uint64_t v106 = v107;
        *(void *)&v62[16 * v104 + 8] = v109;
        unint64_t v111 = *((void *)v105 + 2);
        if (v64 >= v111) {
          goto LABEL_121;
        }
        uint64_t v16 = v105;
        unint64_t v18 = v111 - 1;
        memmove(&v62[16 * v64], v108 + 16, 16 * (v111 - 1 - v64));
        *((void *)v105 + 2) = v111 - 1;
        BOOL v92 = v111 > 2;
        Swift::Int v17 = v103;
        if (!v92) {
          goto LABEL_14;
        }
      }
    }

    unint64_t v18 = 1LL;
LABEL_14:
    Swift::Int v10 = v133[1];
    if (v17 >= v10) {
      goto LABEL_105;
    }
  }

  Swift::Int v130 = v10;
  uint64_t v120 = v16;
  uint64_t v52 = 0LL;
  uint64_t v53 = v136 * (v17 - 1);
  uint64_t v54 = v17 * v136;
  Swift::Int v55 = v19;
  uint64_t v56 = v19 * v136;
  uint64_t v35 = v133;
  Swift::Int v125 = v19;
  do
  {
    if (v55 != v17 + v52 - 1)
    {
      uint64_t v57 = v129;
      if (!v129) {
        goto LABEL_145;
      }
      unint64_t v58 = v129 + v56;
      uint64_t v59 = v129 + v53;
      sub_10002218C(v129 + v56, v124, type metadata accessor for BeaconEstimatedLocation);
      if (v56 < v53 || v58 >= v57 + v54)
      {
        swift_arrayInitWithTakeFrontToBack(v57 + v56, v57 + v53, 1LL, v134);
        uint64_t v51 = v136;
      }

      else
      {
        uint64_t v51 = v136;
        if (v56 != v53) {
          swift_arrayInitWithTakeBackToFront(v58, v59);
        }
      }

      sub_10002218C(v124, v59, type metadata accessor for BeaconEstimatedLocation);
      uint64_t v35 = v133;
      Swift::Int v19 = v125;
    }

    ++v55;
    --v52;
    v53 -= v51;
    v54 -= v51;
    v56 += v51;
  }

  while (v55 < v17 + v52);
  uint64_t v16 = v120;
  Swift::Int v10 = v130;
  if (v17 >= v130) {
    goto LABEL_57;
  }
LABEL_25:
  if (__OFSUB__(v17, v19)) {
    goto LABEL_138;
  }
  if (v17 - v19 >= v122) {
    goto LABEL_57;
  }
  if (__OFADD__(v19, v122)) {
    goto LABEL_141;
  }
  if (v19 + v122 >= v10) {
    Swift::Int v36 = v10;
  }
  else {
    Swift::Int v36 = v19 + v122;
  }
  if (v36 >= v19)
  {
    if (v17 != v36)
    {
      uint64_t v120 = v16;
      uint64_t v37 = *(void *)(v127 + 72);
      uint64_t v136 = v37 * (v17 - 1);
      uint64_t v129 = v37;
      Swift::Int v38 = v17 * v37;
      Swift::Int v125 = v19;
      Swift::Int v123 = v36;
      do
      {
        uint64_t v40 = 0LL;
        Swift::Int v41 = v19;
        Swift::Int v130 = v17;
        while (1)
        {
          uint64_t v42 = *v35;
          Swift::Int v43 = v38;
          uint64_t v44 = v38 + v40 + *v35;
          uint64_t v45 = v131;
          uint64_t v46 = v35;
          sub_10001DC4C(v44, v131, type metadata accessor for BeaconEstimatedLocation);
          uint64_t v47 = v132;
          sub_10001DC4C(v136 + v40 + v42, v132, type metadata accessor for BeaconEstimatedLocation);
          LOBYTE(v42) = static Date.< infix(_:_:)(v45 + *(int *)(v134 + 40), v47 + *(int *)(v134 + 40));
          sub_100018C68(v47, type metadata accessor for BeaconEstimatedLocation);
          sub_100018C68(v45, type metadata accessor for BeaconEstimatedLocation);
          if ((v42 & 1) == 0) {
            break;
          }
          uint64_t v48 = *v46;
          if (!*v46) {
            goto LABEL_143;
          }
          Swift::Int v38 = v43;
          uint64_t v49 = v48 + v43 + v40;
          uint64_t v50 = v48 + v136 + v40;
          sub_10002218C(v49, v135, type metadata accessor for BeaconEstimatedLocation);
          swift_arrayInitWithTakeFrontToBack(v49, v50, 1LL, v134);
          sub_10002218C(v135, v50, type metadata accessor for BeaconEstimatedLocation);
          Swift::Int v39 = v130;
          v40 -= v129;
          ++v41;
          uint64_t v35 = v133;
          if (v130 == v41) {
            goto LABEL_35;
          }
        }

        Swift::Int v39 = v130;
        Swift::Int v38 = v43;
        uint64_t v35 = v46;
LABEL_35:
        Swift::Int v17 = v39 + 1;
        v136 += v129;
        v38 += v129;
        Swift::Int v19 = v125;
      }

      while (v17 != v123);
      Swift::Int v17 = v123;
      uint64_t v16 = v120;
    }

    goto LABEL_57;
  }

        if ((v87 & 1) != 0) {
          goto LABEL_126;
        }
        id v95 = &v62[16 * v64];
        uint64_t v97 = *(void *)v95;
        uint64_t v96 = *((void *)v95 + 1);
        BOOL v75 = __OFSUB__(v96, v97);
        uint64_t v98 = v96 - v97;
        if (v75) {
          goto LABEL_129;
        }
        if (v98 < v86) {
          goto LABEL_14;
        }
LABEL_96:
        Swift::Int v103 = v17;
        unint64_t v104 = v64 - 1;
        if (v64 - 1 >= v18)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }

        if (!*v133) {
          goto LABEL_144;
        }
        unint64_t v105 = v16;
        uint64_t v106 = &v62[16 * v104];
        uint64_t v107 = *(void *)v106;
        uint64_t v108 = &v62[16 * v64];
        uint64_t v109 = *((void *)v108 + 1);
        uint64_t v110 = v128;
        sub_10023E33C( *v133 + *(void *)(v127 + 72) * *(void *)v106,  *v133 + *(void *)(v127 + 72) * *(void *)v108,  *v133 + *(void *)(v127 + 72) * v109,  v126);
        uint64_t v128 = v110;
        if (v110) {
          goto LABEL_116;
        }
        if (v109 < v107) {
          goto LABEL_119;
        }
        if (v64 > *((void *)v105 + 2)) {
          goto LABEL_120;
        }
        *(void *)uint64_t v106 = v107;
        *(void *)&v62[16 * v104 + 8] = v109;
        unint64_t v111 = *((void *)v105 + 2);
        if (v64 >= v111) {
          goto LABEL_121;
        }
        uint64_t v16 = v105;
        unint64_t v18 = v111 - 1;
        memmove(&v62[16 * v64], v108 + 16, 16 * (v111 - 1 - v64));
        *((void *)v105 + 2) = v111 - 1;
        BOOL v92 = v111 > 2;
        Swift::Int v17 = v103;
        if (!v92) {
          goto LABEL_14;
        }
      }
    }

    unint64_t v18 = 1LL;
LABEL_14:
    Swift::Int v10 = v133[1];
    if (v17 >= v10) {
      goto LABEL_105;
    }
  }

  Swift::Int v130 = v10;
  uint64_t v120 = v16;
  uint64_t v52 = 0LL;
  uint64_t v53 = v136 * (v17 - 1);
  uint64_t v54 = v17 * v136;
  Swift::Int v55 = v19;
  uint64_t v56 = v19 * v136;
  uint64_t v35 = v133;
  Swift::Int v125 = v19;
  do
  {
    if (v55 != v17 + v52 - 1)
    {
      uint64_t v57 = v129;
      if (!v129) {
        goto LABEL_145;
      }
      unint64_t v58 = v129 + v56;
      uint64_t v59 = v129 + v53;
      sub_10002218C(v129 + v56, v124, type metadata accessor for RawSearchResult);
      if (v56 < v53 || v58 >= v57 + v54)
      {
        swift_arrayInitWithTakeFrontToBack(v57 + v56, v57 + v53, 1LL, v134);
        uint64_t v51 = v136;
      }

      else
      {
        uint64_t v51 = v136;
        if (v56 != v53) {
          swift_arrayInitWithTakeBackToFront(v58, v59);
        }
      }

      sub_10002218C(v124, v59, type metadata accessor for RawSearchResult);
      uint64_t v35 = v133;
      Swift::Int v19 = v125;
    }

    ++v55;
    --v52;
    v53 -= v51;
    v54 -= v51;
    v56 += v51;
  }

  while (v55 < v17 + v52);
  uint64_t v16 = v120;
  Swift::Int v10 = v130;
  if (v17 >= v130) {
    goto LABEL_57;
  }
LABEL_25:
  if (__OFSUB__(v17, v19)) {
    goto LABEL_138;
  }
  if (v17 - v19 >= v122) {
    goto LABEL_57;
  }
  if (__OFADD__(v19, v122)) {
    goto LABEL_141;
  }
  if (v19 + v122 >= v10) {
    Swift::Int v36 = v10;
  }
  else {
    Swift::Int v36 = v19 + v122;
  }
  if (v36 >= v19)
  {
    if (v17 != v36)
    {
      uint64_t v120 = v16;
      uint64_t v37 = *(void *)(v127 + 72);
      uint64_t v136 = v37 * (v17 - 1);
      uint64_t v129 = v37;
      Swift::Int v38 = v17 * v37;
      Swift::Int v125 = v19;
      Swift::Int v123 = v36;
      do
      {
        uint64_t v40 = 0LL;
        Swift::Int v41 = v19;
        Swift::Int v130 = v17;
        while (1)
        {
          uint64_t v42 = *v35;
          Swift::Int v43 = v38;
          uint64_t v44 = v38 + v40 + *v35;
          uint64_t v45 = v131;
          uint64_t v46 = v35;
          sub_10001DC4C(v44, v131, type metadata accessor for RawSearchResult);
          uint64_t v47 = v132;
          sub_10001DC4C(v136 + v40 + v42, v132, type metadata accessor for RawSearchResult);
          LOBYTE(v42) = static Date.< infix(_:_:)(v45 + *(int *)(v134 + 20), v47 + *(int *)(v134 + 20));
          sub_100018C68(v47, type metadata accessor for RawSearchResult);
          sub_100018C68(v45, type metadata accessor for RawSearchResult);
          if ((v42 & 1) == 0) {
            break;
          }
          uint64_t v48 = *v46;
          if (!*v46) {
            goto LABEL_143;
          }
          Swift::Int v38 = v43;
          uint64_t v49 = v48 + v43 + v40;
          uint64_t v50 = v48 + v136 + v40;
          sub_10002218C(v49, v135, type metadata accessor for RawSearchResult);
          swift_arrayInitWithTakeFrontToBack(v49, v50, 1LL, v134);
          sub_10002218C(v135, v50, type metadata accessor for RawSearchResult);
          Swift::Int v39 = v130;
          v40 -= v129;
          ++v41;
          uint64_t v35 = v133;
          if (v130 == v41) {
            goto LABEL_35;
          }
        }

        Swift::Int v39 = v130;
        Swift::Int v38 = v43;
        uint64_t v35 = v46;
LABEL_35:
        Swift::Int v17 = v39 + 1;
        v136 += v129;
        v38 += v129;
        Swift::Int v19 = v125;
      }

      while (v17 != v123);
      Swift::Int v17 = v123;
      uint64_t v16 = v120;
    }

    goto LABEL_57;
  }

        if ((v87 & 1) != 0) {
          goto LABEL_126;
        }
        id v95 = &v62[16 * v64];
        uint64_t v97 = *(void *)v95;
        uint64_t v96 = *((void *)v95 + 1);
        BOOL v75 = __OFSUB__(v96, v97);
        uint64_t v98 = v96 - v97;
        if (v75) {
          goto LABEL_129;
        }
        if (v98 < v86) {
          goto LABEL_14;
        }
LABEL_96:
        Swift::Int v103 = v17;
        unint64_t v104 = v64 - 1;
        if (v64 - 1 >= v18)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }

        if (!*v133) {
          goto LABEL_144;
        }
        unint64_t v105 = v16;
        uint64_t v106 = &v62[16 * v104];
        uint64_t v107 = *(void *)v106;
        uint64_t v108 = &v62[16 * v64];
        uint64_t v109 = *((void *)v108 + 1);
        uint64_t v110 = v128;
        sub_1004B90EC( *v133 + *(void *)(v127 + 72) * *(void *)v106,  *v133 + *(void *)(v127 + 72) * *(void *)v108,  *v133 + *(void *)(v127 + 72) * v109,  v126);
        uint64_t v128 = v110;
        if (v110) {
          goto LABEL_116;
        }
        if (v109 < v107) {
          goto LABEL_119;
        }
        if (v64 > *((void *)v105 + 2)) {
          goto LABEL_120;
        }
        *(void *)uint64_t v106 = v107;
        *(void *)&v62[16 * v104 + 8] = v109;
        unint64_t v111 = *((void *)v105 + 2);
        if (v64 >= v111) {
          goto LABEL_121;
        }
        uint64_t v16 = v105;
        unint64_t v18 = v111 - 1;
        memmove(&v62[16 * v64], v108 + 16, 16 * (v111 - 1 - v64));
        *((void *)v105 + 2) = v111 - 1;
        BOOL v92 = v111 > 2;
        Swift::Int v17 = v103;
        if (!v92) {
          goto LABEL_14;
        }
      }
    }

    unint64_t v18 = 1LL;
LABEL_14:
    Swift::Int v10 = v133[1];
    if (v17 >= v10) {
      goto LABEL_105;
    }
  }

  Swift::Int v130 = v10;
  uint64_t v120 = v16;
  uint64_t v52 = 0LL;
  uint64_t v53 = v136 * (v17 - 1);
  uint64_t v54 = v17 * v136;
  Swift::Int v55 = v19;
  uint64_t v56 = v19 * v136;
  uint64_t v35 = v133;
  Swift::Int v125 = v19;
  do
  {
    if (v55 != v17 + v52 - 1)
    {
      uint64_t v57 = v129;
      if (!v129) {
        goto LABEL_145;
      }
      unint64_t v58 = v129 + v56;
      uint64_t v59 = v129 + v53;
      sub_10002218C(v129 + v56, v124, type metadata accessor for KeySyncMetadataDisplay);
      if (v56 < v53 || v58 >= v57 + v54)
      {
        swift_arrayInitWithTakeFrontToBack(v57 + v56, v57 + v53, 1LL, v134);
        uint64_t v51 = v136;
      }

      else
      {
        uint64_t v51 = v136;
        if (v56 != v53) {
          swift_arrayInitWithTakeBackToFront(v58, v59);
        }
      }

      sub_10002218C(v124, v59, type metadata accessor for KeySyncMetadataDisplay);
      uint64_t v35 = v133;
      Swift::Int v19 = v125;
    }

    ++v55;
    --v52;
    v53 -= v51;
    v54 -= v51;
    v56 += v51;
  }

  while (v55 < v17 + v52);
  uint64_t v16 = v120;
  Swift::Int v10 = v130;
  if (v17 >= v130) {
    goto LABEL_57;
  }
LABEL_25:
  if (__OFSUB__(v17, v19)) {
    goto LABEL_138;
  }
  if (v17 - v19 >= v122) {
    goto LABEL_57;
  }
  if (__OFADD__(v19, v122)) {
    goto LABEL_141;
  }
  if (v19 + v122 >= v10) {
    Swift::Int v36 = v10;
  }
  else {
    Swift::Int v36 = v19 + v122;
  }
  if (v36 >= v19)
  {
    if (v17 != v36)
    {
      uint64_t v120 = v16;
      uint64_t v37 = *(void *)(v127 + 72);
      uint64_t v136 = v37 * (v17 - 1);
      uint64_t v129 = v37;
      Swift::Int v38 = v17 * v37;
      Swift::Int v125 = v19;
      Swift::Int v123 = v36;
      do
      {
        uint64_t v40 = 0LL;
        Swift::Int v41 = v19;
        Swift::Int v130 = v17;
        while (1)
        {
          uint64_t v42 = *v35;
          Swift::Int v43 = v38;
          uint64_t v44 = v38 + v40 + *v35;
          uint64_t v45 = v131;
          uint64_t v46 = v35;
          sub_10001DC4C(v44, v131, type metadata accessor for KeySyncMetadataDisplay);
          uint64_t v47 = v132;
          sub_10001DC4C(v136 + v40 + v42, v132, type metadata accessor for KeySyncMetadataDisplay);
          LOBYTE(v42) = static Date.> infix(_:_:)(v45 + *(int *)(v134 + 32), v47 + *(int *)(v134 + 32));
          sub_100018C68(v47, type metadata accessor for KeySyncMetadataDisplay);
          sub_100018C68(v45, type metadata accessor for KeySyncMetadataDisplay);
          if ((v42 & 1) == 0) {
            break;
          }
          uint64_t v48 = *v46;
          if (!*v46) {
            goto LABEL_143;
          }
          Swift::Int v38 = v43;
          uint64_t v49 = v48 + v43 + v40;
          uint64_t v50 = v48 + v136 + v40;
          sub_10002218C(v49, v135, type metadata accessor for KeySyncMetadataDisplay);
          swift_arrayInitWithTakeFrontToBack(v49, v50, 1LL, v134);
          sub_10002218C(v135, v50, type metadata accessor for KeySyncMetadataDisplay);
          Swift::Int v39 = v130;
          v40 -= v129;
          ++v41;
          uint64_t v35 = v133;
          if (v130 == v41) {
            goto LABEL_35;
          }
        }

        Swift::Int v39 = v130;
        Swift::Int v38 = v43;
        uint64_t v35 = v46;
LABEL_35:
        Swift::Int v17 = v39 + 1;
        v136 += v129;
        v38 += v129;
        Swift::Int v19 = v125;
      }

      while (v17 != v123);
      Swift::Int v17 = v123;
      uint64_t v16 = v120;
    }

    goto LABEL_57;
  }

            if ((v79 & 1) != 0) {
              goto LABEL_130;
            }
            char v87 = (uint64_t *)(v55 + 16 * v56);
            uint64_t v89 = *v87;
            uint64_t v88 = v87[1];
            uint64_t v67 = __OFSUB__(v88, v89);
            uint64_t v90 = v88 - v89;
            if (v67) {
              goto LABEL_133;
            }
            if (v90 < v78) {
              goto LABEL_105;
            }
LABEL_96:
            id v95 = v56 - 1;
            if (v56 - 1 >= v52)
            {
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
              JUMPOUT(0x1006A5D60LL);
            }

            uint64_t v96 = *a1;
            if (!*a1) {
              goto LABEL_147;
            }
            uint64_t v97 = (uint64_t *)(v55 + 16 * v95);
            uint64_t v98 = v55;
            uint64_t v99 = *v97;
            a2 = v56;
            uint64_t v100 = (void *)(v98 + 16 * v56);
            uint64_t v101 = v100[1];
            uint64_t v102 = *(void *)(v136 + 72);
            Swift::Int v103 = v96 + v102 * *v97;
            unint64_t v104 = v96 + v102 * *v100;
            unint64_t v105 = v96 + v102 * v101;
            uint64_t v106 = v139;
            swift_bridgeObjectRetain(v139);
            uint64_t v107 = v103;
            uint64_t v108 = v141;
            sub_1006A36C0(v107, v104, v105, v134, v106);
            if (v108)
            {
LABEL_121:
              Swift::Int v125 = v127;
              swift_bridgeObjectRelease();
              unint64_t v126 = v139;
              swift_bridgeObjectRelease();
              v125[2] = 0LL;
              swift_bridgeObjectRelease_n(v126, 3LL);
              return swift_bridgeObjectRelease();
            }

            swift_bridgeObjectRelease();
            if (v101 < v99) {
              goto LABEL_123;
            }
            uint64_t v109 = v142;
            if (a2 > *((void *)v142 + 2)) {
              goto LABEL_124;
            }
            *uint64_t v97 = v99;
            Swift::Int v55 = v146;
            *(void *)(v146 + 16 * v95 + 8) = v101;
            uint64_t v110 = *((void *)v109 + 2);
            if (a2 >= v110) {
              goto LABEL_125;
            }
            uint64_t v141 = 0LL;
            uint64_t v52 = v110 - 1;
            memmove(v100, v100 + 2, 16 * (v110 - 1 - a2));
            *((void *)v109 + 2) = v110 - 1;
            a1 = v143;
            Swift::Int v17 = v135;
            uint64_t v28 = v137;
            if (v110 <= 2) {
              goto LABEL_105;
            }
          }
        }

        uint64_t v52 = 1LL;
LABEL_105:
        uint64_t v21 = a1[1];
        a2 = v139;
        if (v28 >= v21) {
          goto LABEL_109;
        }
      }
    }

    uint64_t v134 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v136 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v136 + 80));
    uint64_t v127 = _swiftEmptyArrayStorage;
    if (v21 == 1) {
      goto LABEL_12;
    }
    uint64_t v52 = _swiftEmptyArrayStorage[2];
    uint64_t v142 = (char *)_swiftEmptyArrayStorage;
LABEL_109:
    if (v52 < 2)
    {
LABEL_120:
      swift_bridgeObjectRelease();
      v127[2] = 0LL;
      swift_bridgeObjectRelease_n(a2, 3LL);
      return swift_bridgeObjectRelease();
    }

    unint64_t v111 = *a1;
    uint64_t v112 = v139;
    while (1)
    {
      uint64_t v113 = v52 - 2;
      if (v52 < 2) {
        break;
      }
      if (!v111) {
        goto LABEL_149;
      }
      a2 = v52 - 1;
      unint64_t v114 = *(void *)&v142[16 * v113 + 32];
      uint64_t v115 = *(void *)&v142[16 * v52 + 24];
      uint64_t v116 = *(void *)(v136 + 72);
      uint64_t v117 = v111 + v116 * v114;
      uint64_t v118 = v111 + v116 * *(void *)&v142[16 * v52 + 16];
      unint64_t v119 = v111 + v116 * v115;
      swift_bridgeObjectRetain(v112);
      uint64_t v120 = v117;
      unsigned int v121 = v141;
      sub_1006A36C0(v120, v118, v119, v134, v112);
      uint64_t v141 = v121;
      if (v121) {
        goto LABEL_121;
      }
      swift_bridgeObjectRelease();
      if (v115 < v114) {
        goto LABEL_138;
      }
      Swift::Int v122 = v142;
      if ((swift_isUniquelyReferenced_nonNull_native(v142) & 1) == 0) {
        Swift::Int v122 = sub_1003CBA90((uint64_t)v122);
      }
      if (v113 >= *((void *)v122 + 2)) {
        goto LABEL_139;
      }
      Swift::Int v123 = &v122[16 * v113 + 32];
      *(void *)Swift::Int v123 = v114;
      *((void *)v123 + 1) = v115;
      uint64_t v124 = *((void *)v122 + 2);
      if (v52 > v124) {
        goto LABEL_140;
      }
      memmove(&v122[16 * a2 + 32], &v122[16 * v52 + 32], 16 * (v124 - v52));
      uint64_t v142 = v122;
      *((void *)v122 + 2) = v124 - 1;
      uint64_t v52 = v124 - 1;
      a2 = v139;
      if (v124 <= 2) {
        goto LABEL_120;
      }
    }

        if ((v87 & 1) != 0) {
          goto LABEL_126;
        }
        id v95 = &v62[16 * v64];
        uint64_t v97 = *(void *)v95;
        uint64_t v96 = *((void *)v95 + 1);
        BOOL v75 = __OFSUB__(v96, v97);
        uint64_t v98 = v96 - v97;
        if (v75) {
          goto LABEL_129;
        }
        if (v98 < v86) {
          goto LABEL_14;
        }
LABEL_96:
        Swift::Int v103 = v17;
        unint64_t v104 = v64 - 1;
        if (v64 - 1 >= v18)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }

        if (!*v133) {
          goto LABEL_144;
        }
        unint64_t v105 = v16;
        uint64_t v106 = &v62[16 * v104];
        uint64_t v107 = *(void *)v106;
        uint64_t v108 = &v62[16 * v64];
        uint64_t v109 = *((void *)v108 + 1);
        uint64_t v110 = v128;
        sub_1006D1474( *v133 + *(void *)(v127 + 72) * *(void *)v106,  *v133 + *(void *)(v127 + 72) * *(void *)v108,  *v133 + *(void *)(v127 + 72) * v109,  v126);
        uint64_t v128 = v110;
        if (v110) {
          goto LABEL_116;
        }
        if (v109 < v107) {
          goto LABEL_119;
        }
        if (v64 > *((void *)v105 + 2)) {
          goto LABEL_120;
        }
        *(void *)uint64_t v106 = v107;
        *(void *)&v62[16 * v104 + 8] = v109;
        unint64_t v111 = *((void *)v105 + 2);
        if (v64 >= v111) {
          goto LABEL_121;
        }
        uint64_t v16 = v105;
        unint64_t v18 = v111 - 1;
        memmove(&v62[16 * v64], v108 + 16, 16 * (v111 - 1 - v64));
        *((void *)v105 + 2) = v111 - 1;
        BOOL v92 = v111 > 2;
        Swift::Int v17 = v103;
        if (!v92) {
          goto LABEL_14;
        }
      }
    }

    unint64_t v18 = 1LL;
LABEL_14:
    Swift::Int v10 = v133[1];
    if (v17 >= v10) {
      goto LABEL_105;
    }
  }

  Swift::Int v130 = v10;
  uint64_t v120 = v16;
  uint64_t v52 = 0LL;
  uint64_t v53 = v136 * (v17 - 1);
  uint64_t v54 = v17 * v136;
  Swift::Int v55 = v19;
  uint64_t v56 = v19 * v136;
  uint64_t v35 = v133;
  Swift::Int v125 = v19;
  do
  {
    if (v55 != v17 + v52 - 1)
    {
      uint64_t v57 = v129;
      if (!v129) {
        goto LABEL_145;
      }
      unint64_t v58 = v129 + v56;
      uint64_t v59 = v129 + v53;
      sub_10002218C(v129 + v56, v124, type metadata accessor for UpdateDeviceState);
      if (v56 < v53 || v58 >= v57 + v54)
      {
        swift_arrayInitWithTakeFrontToBack(v57 + v56, v57 + v53, 1LL, updated);
        uint64_t v51 = v136;
      }

      else
      {
        uint64_t v51 = v136;
        if (v56 != v53) {
          swift_arrayInitWithTakeBackToFront(v58, v59);
        }
      }

      sub_10002218C(v124, v59, type metadata accessor for UpdateDeviceState);
      uint64_t v35 = v133;
      Swift::Int v19 = v125;
    }

    ++v55;
    --v52;
    v53 -= v51;
    v54 -= v51;
    v56 += v51;
  }

  while (v55 < v17 + v52);
  uint64_t v16 = v120;
  Swift::Int v10 = v130;
  if (v17 >= v130) {
    goto LABEL_57;
  }
LABEL_25:
  if (__OFSUB__(v17, v19)) {
    goto LABEL_138;
  }
  if (v17 - v19 >= v122) {
    goto LABEL_57;
  }
  if (__OFADD__(v19, v122)) {
    goto LABEL_141;
  }
  if (v19 + v122 >= v10) {
    Swift::Int v36 = v10;
  }
  else {
    Swift::Int v36 = v19 + v122;
  }
  if (v36 >= v19)
  {
    if (v17 != v36)
    {
      uint64_t v120 = v16;
      uint64_t v37 = *(void *)(v127 + 72);
      uint64_t v136 = v37 * (v17 - 1);
      uint64_t v129 = v37;
      Swift::Int v38 = v17 * v37;
      Swift::Int v125 = v19;
      Swift::Int v123 = v36;
      do
      {
        uint64_t v40 = 0LL;
        Swift::Int v41 = v19;
        Swift::Int v130 = v17;
        while (1)
        {
          uint64_t v42 = *v35;
          Swift::Int v43 = v38;
          uint64_t v44 = v38 + v40 + *v35;
          uint64_t v45 = v131;
          uint64_t v46 = v35;
          sub_10001DC4C(v44, v131, type metadata accessor for UpdateDeviceState);
          uint64_t v47 = v132;
          sub_10001DC4C(v136 + v40 + v42, v132, type metadata accessor for UpdateDeviceState);
          LOBYTE(v42) = static Date.> infix(_:_:)(v45 + *(int *)(updated + 20), v47 + *(int *)(updated + 20));
          sub_100018C68(v47, type metadata accessor for UpdateDeviceState);
          sub_100018C68(v45, type metadata accessor for UpdateDeviceState);
          if ((v42 & 1) == 0) {
            break;
          }
          uint64_t v48 = *v46;
          if (!*v46) {
            goto LABEL_143;
          }
          Swift::Int v38 = v43;
          uint64_t v49 = v48 + v43 + v40;
          uint64_t v50 = v48 + v136 + v40;
          sub_10002218C(v49, v135, type metadata accessor for UpdateDeviceState);
          swift_arrayInitWithTakeFrontToBack(v49, v50, 1LL, updated);
          sub_10002218C(v135, v50, type metadata accessor for UpdateDeviceState);
          Swift::Int v39 = v130;
          v40 -= v129;
          ++v41;
          uint64_t v35 = v133;
          if (v130 == v41) {
            goto LABEL_35;
          }
        }

        Swift::Int v39 = v130;
        Swift::Int v38 = v43;
        uint64_t v35 = v46;
LABEL_35:
        Swift::Int v17 = v39 + 1;
        v136 += v129;
        v38 += v129;
        Swift::Int v19 = v125;
      }

      while (v17 != v123);
      Swift::Int v17 = v123;
      uint64_t v16 = v120;
    }

    goto LABEL_57;
  }

          uint64_t v5 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v9);
          v127(v81, isUniquelyReferenced_nonNull_native);
          if (*v116 < v5) {
            goto LABEL_118;
          }
        }

        else
        {
          if (v83 < 64) {
            goto LABEL_88;
          }
          *unint64_t v105 = 0x7FFFFFFFFFFFFFFFLL;
          uint64_t v86 = swift_task_alloc(v125);
          ((void (*)(uint64_t, uint64_t, uint64_t))v107[4])(v86, v81, isUniquelyReferenced_nonNull_native);
          char v87 = swift_task_alloc(v125);
          uint64_t v88 = sub_10001563C();
          uint64_t v5 = isUniquelyReferenced_nonNull_native;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)( v105,  &type metadata for Int64,  v88,  isUniquelyReferenced_nonNull_native,  v9);
          unint64_t v126 = dispatch thunk of static Comparable.< infix(_:_:)( v87,  v86,  isUniquelyReferenced_nonNull_native,  *(void *)(*(void *)(v9 + 32) + 8LL));
          uint64_t v9 = (uint64_t)v127;
          v127(v87, isUniquelyReferenced_nonNull_native);
          v127(v86, isUniquelyReferenced_nonNull_native);
          swift_task_dealloc(v87);
          swift_task_dealloc(v86);
          if ((v126 & 1) != 0) {
            goto LABEL_118;
          }
        }

          uint64_t v5 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v9);
          v129(v82, isUniquelyReferenced_nonNull_native);
          if (*v118 < v5) {
            goto LABEL_118;
          }
        }

        else
        {
          if (v84 < 64) {
            goto LABEL_88;
          }
          *uint64_t v107 = 0x7FFFFFFFFFFFFFFFLL;
          char v87 = swift_task_alloc(v127);
          ((void (*)(uint64_t, uint64_t, uint64_t))v109[4])(v87, v82, isUniquelyReferenced_nonNull_native);
          uint64_t v88 = swift_task_alloc(v127);
          uint64_t v89 = sub_10001563C();
          uint64_t v5 = isUniquelyReferenced_nonNull_native;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)( v107,  &type metadata for Int64,  v89,  isUniquelyReferenced_nonNull_native,  v9);
          uint64_t v128 = dispatch thunk of static Comparable.< infix(_:_:)( v88,  v87,  isUniquelyReferenced_nonNull_native,  *(void *)(*(void *)(v9 + 32) + 8LL));
          uint64_t v9 = (uint64_t)v129;
          v129(v88, isUniquelyReferenced_nonNull_native);
          v129(v87, isUniquelyReferenced_nonNull_native);
          swift_task_dealloc(v88);
          swift_task_dealloc(v87);
          if ((v128 & 1) != 0) {
            goto LABEL_118;
          }
        }

          uint64_t v5 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v9);
          v129(v82, isUniquelyReferenced_nonNull_native);
          if (*v118 < v5) {
            goto LABEL_118;
          }
        }

        else
        {
          if (v84 < 64) {
            goto LABEL_88;
          }
          *uint64_t v107 = 0x7FFFFFFFFFFFFFFFLL;
          char v87 = swift_task_alloc(v127);
          ((void (*)(uint64_t, uint64_t, uint64_t))v109[4])(v87, v82, isUniquelyReferenced_nonNull_native);
          uint64_t v88 = swift_task_alloc(v127);
          uint64_t v89 = sub_10001563C();
          uint64_t v5 = isUniquelyReferenced_nonNull_native;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)( v107,  &type metadata for Int64,  v89,  isUniquelyReferenced_nonNull_native,  v9);
          uint64_t v128 = dispatch thunk of static Comparable.< infix(_:_:)( v88,  v87,  isUniquelyReferenced_nonNull_native,  *(void *)(*(void *)(v9 + 32) + 8LL));
          uint64_t v9 = (uint64_t)v129;
          v129(v88, isUniquelyReferenced_nonNull_native);
          v129(v87, isUniquelyReferenced_nonNull_native);
          swift_task_dealloc(v88);
          swift_task_dealloc(v87);
          if ((v128 & 1) != 0) {
            goto LABEL_118;
          }
        }

          uint64_t v5 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v9);
          v127(v81, isUniquelyReferenced_nonNull_native);
          if (*v116 < v5) {
            goto LABEL_118;
          }
        }

        else
        {
          if (v83 < 64) {
            goto LABEL_88;
          }
          *unint64_t v105 = 0x7FFFFFFFFFFFFFFFLL;
          uint64_t v86 = swift_task_alloc(v125);
          ((void (*)(uint64_t, uint64_t, uint64_t))v107[4])(v86, v81, isUniquelyReferenced_nonNull_native);
          char v87 = swift_task_alloc(v125);
          uint64_t v88 = sub_10001563C();
          uint64_t v5 = isUniquelyReferenced_nonNull_native;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)( v105,  &type metadata for Int64,  v88,  isUniquelyReferenced_nonNull_native,  v9);
          unint64_t v126 = dispatch thunk of static Comparable.< infix(_:_:)( v87,  v86,  isUniquelyReferenced_nonNull_native,  *(void *)(*(void *)(v9 + 32) + 8LL));
          uint64_t v9 = (uint64_t)v127;
          v127(v87, isUniquelyReferenced_nonNull_native);
          v127(v86, isUniquelyReferenced_nonNull_native);
          swift_task_dealloc(v87);
          swift_task_dealloc(v86);
          if ((v126 & 1) != 0) {
            goto LABEL_118;
          }
        }

LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

Swift::Int sub_100141D1C(uint64_t *a1)
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v153 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v3);
  v174 = (char *)&v153 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  Swift::Int v10 = (char *)&v153 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  v187 = (char *)&v153 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v153 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v158 = (char *)&v153 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v165 = (char *)&v153 - v19;
  __chkstk_darwin(v18);
  v163 = (char *)&v153 - v20;
  uint64_t v21 = type metadata accessor for Date(0LL);
  uint64_t v196 = *(void *)(v21 - 8);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v153 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v22);
  v192 = (char *)&v153 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  v162 = (char *)&v153 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v168 = (char *)&v153 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v153 - v32;
  __chkstk_darwin(v31);
  v157 = (char *)&v153 - v34;
  uint64_t v176 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v171 = *(void *)(v176 - 8);
  uint64_t v35 = __chkstk_darwin(v176);
  uint64_t v161 = (uint64_t)&v153 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = __chkstk_darwin(v35);
  v188 = (char *)&v153 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  Swift::Int v41 = (char *)&v153 - v40;
  uint64_t v42 = __chkstk_darwin(v39);
  uint64_t v191 = (uint64_t)&v153 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v172 = (uint64_t)&v153 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v167 = (uint64_t)&v153 - v47;
  uint64_t v48 = __chkstk_darwin(v46);
  v169 = (char *)&v153 - v49;
  __chkstk_darwin(v48);
  uint64_t v156 = (uint64_t)&v153 - v50;
  v195 = a1;
  Swift::Int v51 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v51);
  if (result >= v51)
  {
    if ((v51 & 0x8000000000000000LL) == 0)
    {
      if (v51) {
        return sub_100143EBC(0LL, v51, 1LL, v195);
      }
      return result;
    }

    goto LABEL_131;
  }

  if (v51 >= 0) {
    uint64_t v53 = v51;
  }
  else {
    uint64_t v53 = v51 + 1;
  }
  if (v51 < -1)
  {
LABEL_139:
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
    __break(1u);
    JUMPOUT(0x100143C40LL);
  }

  v185 = v10;
  Swift::Int v154 = result;
  v155 = v15;
  if (v51 < 2)
  {
    v170 = (char *)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v171 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v171 + 80));
    v153 = _swiftEmptyArrayStorage;
    if (v51 != 1)
    {
      unint64_t v61 = _swiftEmptyArrayStorage[2];
      unint64_t v58 = (char *)_swiftEmptyArrayStorage;
LABEL_96:
      uint64_t v145 = v177;
      if (v61 < 2)
      {
        unsigned int v144 = v153;
        goto LABEL_109;
      }

      uint64_t v146 = *v195;
      unsigned int v144 = v153;
      while (1)
      {
        unint64_t v147 = v61 - 2;
        if (v61 < 2) {
          goto LABEL_126;
        }
        if (!v146) {
          goto LABEL_137;
        }
        unint64_t v148 = v58;
        uint64_t v149 = *(void *)&v58[16 * v147 + 32];
        uint64_t v150 = *(void *)&v58[16 * v61 + 24];
        sub_100144EEC( v146 + *(void *)(v171 + 72) * v149,  v146 + *(void *)(v171 + 72) * *(void *)&v58[16 * v61 + 16],  v146 + *(void *)(v171 + 72) * v150,  v170);
        if (v145) {
          goto LABEL_109;
        }
        if (v150 < v149) {
          goto LABEL_127;
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v148) & 1) == 0) {
          unint64_t v148 = sub_1003CBA90((uint64_t)v148);
        }
        if (v147 >= *((void *)v148 + 2)) {
          goto LABEL_128;
        }
        uint64_t v151 = &v148[16 * v147 + 32];
        *(void *)uint64_t v151 = v149;
        *((void *)v151 + 1) = v150;
        unint64_t v152 = *((void *)v148 + 2);
        if (v61 > v152) {
          goto LABEL_129;
        }
        memmove(&v148[16 * v61 + 16], &v148[16 * v61 + 32], 16 * (v152 - v61));
        unint64_t v58 = v148;
        *((void *)v148 + 2) = v152 - 1;
        unint64_t v61 = v152 - 1;
        if (v152 <= 2) {
          goto LABEL_109;
        }
      }
    }
  }

  else
  {
    uint64_t v54 = v53 >> 1;
    uint64_t v55 = static Array._allocateBufferUninitialized(minimumCapacity:)(v53 >> 1, v176);
    *(void *)(v55 + 16) = v54;
    uint64_t v56 = *(unsigned __int8 *)(v171 + 80);
    v153 = (void *)v55;
    v170 = (char *)(v55 + ((v56 + 32) & ~v56));
  }

  Swift::Int v57 = 0LL;
  unint64_t v58 = (char *)_swiftEmptyArrayStorage;
  __int128 v175 = xmmword_1007E67D0;
  uint64_t v173 = v5;
  uint64_t v193 = v21;
  v180 = v24;
  v166 = v33;
  v184 = v41;
  uint64_t v59 = (uint64_t)v169;
  Swift::Int v60 = v51;
  while (1)
  {
    Swift::Int v62 = v57;
    Swift::Int v63 = v57 + 1;
    uint64_t v160 = v58;
    Swift::Int v164 = v57;
    Swift::Int v194 = v60;
    if (v57 + 1 >= v60)
    {
      Swift::Int v72 = v57 + 1;
      goto LABEL_44;
    }

    uint64_t v64 = *v195;
    uint64_t v65 = *(void *)(v171 + 72);
    uint64_t v66 = v156;
    sub_10001DC4C(*v195 + v65 * v63, v156, type metadata accessor for OwnedBeaconRecord);
    uint64_t v179 = v64;
    sub_10001DC4C(v64 + v65 * v62, v59, type metadata accessor for OwnedBeaconRecord);
    uint64_t v67 = objc_autoreleasePoolPush();
    uint64_t v68 = v177;
    sub_100544824(v66);
    if (v68)
    {
      objc_autoreleasePoolPop(v67);
      __break(1u);
      goto LABEL_139;
    }

    objc_autoreleasePoolPop(v67);
    uint64_t v69 = objc_autoreleasePoolPush();
    sub_100544824(v59);
    uint64_t v177 = 0LL;
    objc_autoreleasePoolPop(v69);
    uint64_t v70 = v157;
    v190 = (void *)Date.compare(_:)(v33);
    uint64_t v71 = *(void (**)(char *, uint64_t))(v196 + 8);
    v71(v33, v21);
    v189 = (void (*)(void, void))v71;
    v71(v70, v21);
    sub_100018C68(v59, type metadata accessor for OwnedBeaconRecord);
    sub_100018C68(v156, type metadata accessor for OwnedBeaconRecord);
    Swift::Int v72 = v62 + 2;
    if (v62 + 2 < v194)
    {
      uint64_t v73 = v65 * v63;
      uint64_t v74 = v179;
      uint64_t v182 = v65 * v72;
      uint64_t v183 = v73;
      Swift::Int v186 = v62 + 2;
      uint64_t v75 = v167;
      sub_10001DC4C(v179 + v65 * v72, v167, type metadata accessor for OwnedBeaconRecord);
      sub_10001DC4C(v74 + v183, v172, type metadata accessor for OwnedBeaconRecord);
      unint64_t v76 = objc_autoreleasePoolPush();
      __asm { BR              X9 }
    }

    unint64_t v58 = v160;
    if (v72 < v62) {
      goto LABEL_132;
    }
    if (v62 < v72)
    {
      uint64_t v77 = 0LL;
      uint64_t v78 = v65 * (v62 + 1);
      uint64_t v79 = v72 * v65;
      uint64_t v80 = v62 * v65;
      uint64_t v178 = v65;
      do
      {
        if (v62 != v72 + v77 - 1)
        {
          uint64_t v83 = v179;
          if (!v179) {
            goto LABEL_136;
          }
          Swift::Int v84 = v72;
          unint64_t v85 = v179 + v80;
          v190 = (void *)(v179 + v78);
          sub_10002218C(v179 + v80, v161, type metadata accessor for OwnedBeaconRecord);
          if (v80 < v78 || v85 >= v83 + v79)
          {
            uint64_t v81 = v83 + v80;
            uint64_t v82 = (uint64_t)v190;
            swift_arrayInitWithTakeFrontToBack(v81, v190, 1LL, v176);
          }

          else
          {
            uint64_t v82 = (uint64_t)v190;
            if (v80 != v78) {
              swift_arrayInitWithTakeBackToFront(v85, v190);
            }
          }

          sub_10002218C(v161, v82, type metadata accessor for OwnedBeaconRecord);
          unint64_t v58 = v160;
          Swift::Int v72 = v84;
          uint64_t v65 = v178;
        }

        ++v62;
        --v77;
        v78 -= v65;
        v79 -= v65;
        v80 += v65;
      }

      while (v62 < v72 + v77);
      uint64_t v33 = v166;
      uint64_t v86 = (uint64_t)v184;
      uint64_t v59 = (uint64_t)v169;
      Swift::Int v62 = v164;
      if (v72 >= v194) {
        goto LABEL_44;
      }
    }

    else
    {
LABEL_33:
      uint64_t v86 = (uint64_t)v184;
      if (v72 >= v194) {
        goto LABEL_44;
      }
    }

    if (__OFSUB__(v72, v62)) {
      goto LABEL_130;
    }
    if (v72 - v62 < v154)
    {
      if (__OFADD__(v62, v154)) {
        goto LABEL_133;
      }
      Swift::Int v87 = v194;
      if (v62 + v154 < v194) {
        Swift::Int v87 = v62 + v154;
      }
      if (v87 < v62) {
        goto LABEL_134;
      }
      if (v72 != v87)
      {
        uint64_t v88 = *(void *)(v171 + 72);
        uint64_t v89 = v88 * (v72 - 1);
        uint64_t v181 = v88;
        Swift::Int v194 = v72 * v88;
        Swift::Int v159 = v87;
        Swift::Int v186 = v72;
        uint64_t v182 = v89;
        uint64_t v90 = *v195;
        uint64_t v91 = v191;
        sub_10001DC4C(v72 * v88 + *v195, v191, type metadata accessor for OwnedBeaconRecord);
        v189 = (void (*)(void, void))v89;
        sub_10001DC4C(v89 + v90, v86, type metadata accessor for OwnedBeaconRecord);
        v190 = objc_autoreleasePoolPush();
        __asm { BR              X9 }
      }
    }

LABEL_75:
    if ((v119 & 1) != 0) {
      goto LABEL_118;
    }
    uint64_t v127 = &v94[16 * v96];
    uint64_t v129 = *(void *)v127;
    uint64_t v128 = *((void *)v127 + 1);
    BOOL v107 = __OFSUB__(v128, v129);
    uint64_t v130 = v128 - v129;
    if (v107) {
      goto LABEL_121;
    }
    if (v130 < v118) {
      goto LABEL_14;
    }
LABEL_83:
    unint64_t v135 = v96 - 1;
    if (v96 - 1 >= v61)
    {
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
      JUMPOUT(0x100143BD0LL);
    }

    if (!*v195)
    {
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
    }

    uint64_t v136 = v58;
    uint64_t v137 = &v94[16 * v135];
    uint64_t v138 = *(void *)v137;
    unint64_t v139 = &v94[16 * v96];
    uint64_t v140 = *((void *)v139 + 1);
    uint64_t v141 = v177;
    sub_100144EEC( *v195 + *(void *)(v171 + 72) * *(void *)v137,  *v195 + *(void *)(v171 + 72) * *(void *)v139,  *v195 + *(void *)(v171 + 72) * v140,  v170);
    uint64_t v177 = v141;
    if (v141) {
      break;
    }
    if (v140 < v138) {
      goto LABEL_111;
    }
    if (v96 > *((void *)v136 + 2)) {
      goto LABEL_112;
    }
    *(void *)uint64_t v137 = v138;
    *(void *)&v94[16 * v135 + 8] = v140;
    unint64_t v142 = *((void *)v136 + 2);
    if (v96 >= v142) {
      goto LABEL_113;
    }
    unint64_t v61 = v142 - 1;
    memmove(&v94[16 * v96], v139 + 16, 16 * (v142 - 1 - v96));
    unint64_t v58 = v136;
    *((void *)v136 + 2) = v142 - 1;
    BOOL v124 = v142 > 2;
    uint64_t v33 = v166;
    uint64_t v59 = (uint64_t)v169;
    Swift::Int v57 = v186;
    if (!v124) {
      goto LABEL_14;
    }
  }

  unsigned int v144 = v153;
LABEL_109:
  swift_bridgeObjectRelease();
  v144[2] = 0LL;
  return swift_bridgeObjectRelease();
}

  Swift::Int result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_100143C80(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v26 = a1;
  uint64_t v30 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v7 = __chkstk_darwin(v30);
  uint64_t v31 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v27 = (uint64_t)&v24 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v24 - v13;
  uint64_t v29 = a3;
  uint64_t v25 = a2;
  if (a3 != a2)
  {
    uint64_t v15 = *(void *)(v12 + 72);
    uint64_t v33 = v15 * (v29 - 1);
    uint64_t v28 = v15;
    uint64_t v32 = v15 * v29;
LABEL_5:
    uint64_t v16 = 0LL;
    uint64_t v17 = v26;
    while (1)
    {
      uint64_t v18 = *a4;
      sub_10001DC4C(v32 + v16 + *a4, (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
      uint64_t v19 = v27;
      sub_10001DC4C(v33 + v16 + v18, v27, type metadata accessor for OwnedBeaconRecord);
      LOBYTE(v18) = static Date.< infix(_:_:)(&v14[*(int *)(v30 + 32)], v19 + *(int *)(v30 + 32));
      sub_100018C68(v19, type metadata accessor for OwnedBeaconRecord);
      uint64_t result = sub_100018C68((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
      if ((v18 & 1) == 0)
      {
LABEL_4:
        v33 += v28;
        v32 += v28;
        if (++v29 == v25) {
          return result;
        }
        goto LABEL_5;
      }

      uint64_t v20 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v21 = a4;
      uint64_t v22 = v20 + v32 + v16;
      uint64_t v23 = v20 + v33 + v16;
      sub_10002218C(v22, v31, type metadata accessor for OwnedBeaconRecord);
      swift_arrayInitWithTakeFrontToBack(v22, v23, 1LL, v30);
      uint64_t result = sub_10002218C(v31, v23, type metadata accessor for OwnedBeaconRecord);
      v16 -= v28;
      ++v17;
      a4 = v21;
      if (v29 == v17) {
        goto LABEL_4;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_100143EBC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v32[1] = a1;
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)v32 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)v32 - v15;
  __chkstk_darwin(v14);
  uint64_t v39 = (char *)v32 - v17;
  uint64_t v18 = type metadata accessor for Date(0LL);
  uint64_t v47 = *(void *)(v18 - 8);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v38 = (char *)v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v46 = (char *)v32 - v21;
  uint64_t v34 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v22 = __chkstk_darwin(v34);
  Swift::Int v41 = (char *)v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v50 = (uint64_t)v32 - v25;
  uint64_t result = __chkstk_darwin(v24);
  uint64_t v45 = (uint64_t)v32 - v28;
  v32[0] = a2;
  if (a3 != a2)
  {
    v32[2] = v13;
    v32[3] = v10;
    uint64_t v40 = *(void *)(v27 + 72);
    uint64_t v48 = v40 * a3;
    uint64_t v49 = v40 * (a3 - 1);
    __int128 v33 = xmmword_1007E67D0;
    uint64_t v35 = a4;
    uint64_t v37 = v16;
    uint64_t v44 = v18;
    uint64_t v36 = a3;
    uint64_t v29 = *a4;
    uint64_t v43 = v40 * a3;
    uint64_t v30 = v45;
    sub_10001DC4C(v40 * a3 + v29, v45, type metadata accessor for OwnedBeaconRecord);
    uint64_t v42 = v49;
    sub_10001DC4C(v49 + v29, v50, type metadata accessor for OwnedBeaconRecord);
    uint64_t v31 = objc_autoreleasePoolPush();
    __asm { BR              X9 }
  }

  return result;
}

uint64_t sub_100144A3C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v45 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v8 = __chkstk_darwin(v45);
  uint64_t v44 = (uint64_t)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v41 - v10;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }

  if (a2 - a1 == 0x8000000000000000LL && v13 == -1) {
    goto LABEL_62;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000LL && v13 == -1) {
    goto LABEL_63;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v13;
  unint64_t v48 = a1;
  unint64_t v47 = a4;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000LL) == 0)
    {
      uint64_t v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v16, v45);
      }

      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }

      unint64_t v25 = a4 + v18;
      unint64_t v46 = a4 + v18;
      unint64_t v48 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        uint64_t v27 = -v13;
        unint64_t v42 = a4;
        unint64_t v43 = a1;
        do
        {
          unint64_t v28 = a3 + v27;
          sub_10001DC4C(v25 + v27, (uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
          unint64_t v29 = a2 + v27;
          unint64_t v30 = a3;
          uint64_t v31 = (uint64_t)v11;
          uint64_t v32 = v44;
          sub_10001DC4C(a2 + v27, v44, type metadata accessor for OwnedBeaconRecord);
          char v33 = static Date.< infix(_:_:)(v31 + *(int *)(v45 + 32), v32 + *(int *)(v45 + 32));
          uint64_t v34 = v32;
          uint64_t v11 = (char *)v31;
          sub_100018C68(v34, type metadata accessor for OwnedBeaconRecord);
          sub_100018C68(v31, type metadata accessor for OwnedBeaconRecord);
          if ((v33 & 1) != 0)
          {
            if (v30 < a2 || v28 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v28, a2 + v27, 1LL, v45);
              unint64_t v37 = v42;
              unint64_t v36 = v43;
            }

            else
            {
              BOOL v35 = v30 == a2;
              unint64_t v37 = v42;
              unint64_t v36 = v43;
              if (!v35) {
                swift_arrayInitWithTakeBackToFront(v28, a2 + v27);
              }
            }

            v48 += v27;
          }

          else
          {
            unint64_t v38 = v46;
            unint64_t v39 = v46 + v27;
            v46 += v27;
            if (v30 < v38 || v28 >= v38)
            {
              swift_arrayInitWithTakeFrontToBack(v28, v39, 1LL, v45);
              unint64_t v29 = a2;
              unint64_t v37 = v42;
              unint64_t v36 = v43;
            }

            else
            {
              BOOL v35 = v30 == v38;
              unint64_t v37 = v42;
              unint64_t v36 = v43;
              if (!v35) {
                swift_arrayInitWithTakeBackToFront(v28, v39);
              }
              unint64_t v29 = a2;
            }
          }

          unint64_t v25 = v46;
          if (v46 <= v37) {
            break;
          }
          a2 = v29;
          a3 = v28;
        }

        while (v29 > v36);
      }

      goto LABEL_60;
    }
  }

  else if ((v15 & 0x8000000000000000LL) == 0)
  {
    uint64_t v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v15, v45);
    }

    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }

    unint64_t v43 = a4 + v17;
    unint64_t v46 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      uint64_t v20 = v44;
      do
      {
        sub_10001DC4C(a2, (uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
        sub_10001DC4C(a4, v20, type metadata accessor for OwnedBeaconRecord);
        char v21 = static Date.< infix(_:_:)(&v11[*(int *)(v45 + 32)], v20 + *(int *)(v45 + 32));
        sub_100018C68(v20, type metadata accessor for OwnedBeaconRecord);
        sub_100018C68((uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
        unint64_t v22 = v48;
        if ((v21 & 1) != 0)
        {
          unint64_t v23 = a2 + v13;
          if (v48 < a2 || v48 >= v23)
          {
            swift_arrayInitWithTakeFrontToBack(v48, a2, 1LL, v45);
          }

          else if (v48 == a2)
          {
            unint64_t v22 = a2;
          }

          else
          {
            swift_arrayInitWithTakeBackToFront(v48, a2);
          }
        }

        else
        {
          unint64_t v24 = v47 + v13;
          if (v48 < v47 || v48 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack(v48, v47, 1LL, v45);
          }

          else if (v48 != v47)
          {
            swift_arrayInitWithTakeBackToFront(v48, v47);
          }

          unint64_t v47 = v24;
          unint64_t v23 = a2;
        }

        unint64_t v48 = v22 + v13;
        a4 = v47;
        if (v47 >= v43) {
          break;
        }
        a2 = v23;
      }

      while (v23 < a3);
    }

uint64_t sub_100144EEC(unint64_t a1, unint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v78 = *(void *)(v10 - 8);
  uint64_t v79 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v70 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v77 = (char *)&v68 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v75 = (char *)&v68 - v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v68 - v17;
  uint64_t v73 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v19 = __chkstk_darwin(v73);
  uint64_t v71 = (char *)&v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v19);
  unint64_t v76 = (unint64_t)&v68 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  unint64_t v25 = (char *)&v68 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v68 - v26;
  uint64_t v29 = *(void *)(v28 + 72);
  if (!v29)
  {
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    objc_autoreleasePoolPop(a4);
    __break(1u);
LABEL_67:
    objc_autoreleasePoolPop(v18);
    __break(1u);
    goto LABEL_68;
  }

  if (a2 - a1 == 0x8000000000000000LL && v29 == -1) {
    goto LABEL_64;
  }
  int64_t v30 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000LL && v29 == -1) {
    goto LABEL_65;
  }
  uint64_t v31 = (uint64_t)(a2 - a1) / v29;
  uint64_t v82 = (char *)a1;
  unint64_t v81 = (unint64_t)a4;
  uint64_t v32 = v30 / v29;
  if (v31 >= v30 / v29)
  {
    if ((v32 & 0x8000000000000000LL) == 0)
    {
      uint64_t v34 = v32 * v29;
      if ((unint64_t)a4 < a2 || a2 + v34 <= (unint64_t)a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v32, v73);
      }

      else if (a4 != (void *)a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }

      unint64_t v47 = (unint64_t)a4 + v34;
      unint64_t v80 = (unint64_t)a4 + v34;
      uint64_t v82 = (char *)a2;
      if (v34 >= 1 && a1 < a2)
      {
        uint64_t v49 = -v29;
        uint64_t v50 = (uint64_t)v71;
        unint64_t v68 = a1;
        unint64_t v69 = (unint64_t)a4;
        uint64_t v72 = v49;
        while (1)
        {
          uint64_t v51 = v76;
          sub_10001DC4C(v47 + v49, v76, type metadata accessor for OwnedBeaconRecord);
          unint64_t v52 = a2 + v49;
          sub_10001DC4C(a2 + v49, v50, type metadata accessor for OwnedBeaconRecord);
          uint64_t v18 = (char *)objc_autoreleasePoolPush();
          sub_100544824(v51);
          if (v5) {
            goto LABEL_67;
          }
          objc_autoreleasePoolPop(v18);
          uint64_t v53 = objc_autoreleasePoolPush();
          uint64_t v54 = v70;
          sub_100544824(v50);
          uint64_t v75 = 0LL;
          uint64_t v55 = v72;
          unint64_t v74 = a3 + v72;
          objc_autoreleasePoolPop(v53);
          uint64_t v56 = v77;
          uint64_t v57 = Date.compare(_:)(v54);
          unint64_t v58 = a3;
          uint64_t v59 = *(void (**)(char *, uint64_t))(v78 + 8);
          Swift::Int v60 = v54;
          uint64_t v61 = v79;
          v59(v60, v79);
          v59(v56, v61);
          sub_100018C68(v50, type metadata accessor for OwnedBeaconRecord);
          sub_100018C68(v76, type metadata accessor for OwnedBeaconRecord);
          if (v57 == 1)
          {
            a3 = v74;
            if (v58 < a2 || v74 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v74, v52, 1LL, v73);
              uint64_t v5 = v75;
              unint64_t v63 = v68;
              uint64_t v50 = (uint64_t)v71;
              uint64_t v49 = v72;
            }

            else
            {
              BOOL v62 = v58 == a2;
              uint64_t v5 = v75;
              unint64_t v63 = v68;
              uint64_t v50 = (uint64_t)v71;
              uint64_t v49 = v72;
              if (!v62) {
                swift_arrayInitWithTakeBackToFront(v74, v52);
              }
            }

            v82 += v49;
            unint64_t v66 = v69;
          }

          else
          {
            unint64_t v64 = v80;
            unint64_t v65 = v80 + v55;
            v80 += v55;
            unint64_t v63 = v68;
            uint64_t v49 = v55;
            a3 = v74;
            if (v58 < v64 || v74 >= v64)
            {
              swift_arrayInitWithTakeFrontToBack(v74, v65, 1LL, v73);
              unint64_t v52 = a2;
              uint64_t v5 = v75;
              unint64_t v66 = v69;
              uint64_t v50 = (uint64_t)v71;
            }

            else
            {
              unint64_t v66 = v69;
              uint64_t v50 = (uint64_t)v71;
              if (v58 != v64) {
                swift_arrayInitWithTakeBackToFront(v74, v65);
              }
              unint64_t v52 = a2;
              uint64_t v5 = v75;
            }
          }

          unint64_t v47 = v80;
          if (v80 > v66)
          {
            a2 = v52;
            if (v52 > v63) {
              continue;
            }
          }

          goto LABEL_62;
        }
      }

      goto LABEL_62;
    }
  }

  else if ((v31 & 0x8000000000000000LL) == 0)
  {
    uint64_t v77 = (char *)v29;
    uint64_t v33 = v31 * v29;
    if ((unint64_t)a4 < a1 || a1 + v33 <= (unint64_t)a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v31, v73);
    }

    else if (a4 != (void *)a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }

    unint64_t v76 = (unint64_t)a4 + v33;
    unint64_t v80 = (unint64_t)a4 + v33;
    BOOL v35 = v33 < 1 || a2 >= a3;
    if (!v35)
    {
      while (1)
      {
        sub_10001DC4C(a2, (uint64_t)v27, type metadata accessor for OwnedBeaconRecord);
        sub_10001DC4C((uint64_t)a4, (uint64_t)v25, type metadata accessor for OwnedBeaconRecord);
        a4 = objc_autoreleasePoolPush();
        sub_100544824((uint64_t)v27);
        if (v5) {
          goto LABEL_66;
        }
        unint64_t v36 = a3;
        objc_autoreleasePoolPop(a4);
        unint64_t v37 = objc_autoreleasePoolPush();
        unint64_t v38 = v75;
        sub_100544824((uint64_t)v25);
        uint64_t v5 = 0LL;
        objc_autoreleasePoolPop(v37);
        uint64_t v39 = Date.compare(_:)(v38);
        uint64_t v40 = *(void (**)(char *, uint64_t))(v78 + 8);
        uint64_t v41 = v38;
        uint64_t v42 = v79;
        v40(v41, v79);
        v40(v18, v42);
        sub_100018C68((uint64_t)v25, type metadata accessor for OwnedBeaconRecord);
        sub_100018C68((uint64_t)v27, type metadata accessor for OwnedBeaconRecord);
        unint64_t v43 = (unint64_t)v82;
        if (v39 == 1)
        {
          uint64_t v44 = v77;
          unint64_t v45 = (unint64_t)&v77[a2];
          if ((unint64_t)v82 < a2 || (unint64_t)v82 >= v45)
          {
            swift_arrayInitWithTakeFrontToBack(v82, a2, 1LL, v73);
          }

          else if (v82 == (char *)a2)
          {
            unint64_t v43 = a2;
          }

          else
          {
            swift_arrayInitWithTakeBackToFront(v82, a2);
          }
        }

        else
        {
          uint64_t v44 = v77;
          unint64_t v46 = (unint64_t)&v77[v81];
          if ((unint64_t)v82 < v81 || (unint64_t)v82 >= v46)
          {
            swift_arrayInitWithTakeFrontToBack(v82, v81, 1LL, v73);
          }

          else if (v82 != (char *)v81)
          {
            swift_arrayInitWithTakeBackToFront(v82, v81);
          }

          unint64_t v81 = v46;
          unint64_t v45 = a2;
        }

        uint64_t v82 = &v44[v43];
        a4 = (void *)v81;
        if (v81 < v76)
        {
          a2 = v45;
          BOOL v35 = v45 >= v36;
          a3 = v36;
          if (!v35) {
            continue;
          }
        }

        break;
      }
    }

LABEL_68:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

    uint64_t v79 = (v86 - 1) & v86;
    uint64_t v82 = __clz(__rbit64(v86)) + (v73 << 6);
LABEL_49:
    uint64_t v83 = *(void *)(*(void *)(v75 + 56) + 8 * v82);
    Swift::Int v84 = __OFADD__(v74, v83);
    v74 += v83;
    if (v84)
    {
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
      return result;
    }
  }

        swift_once(&qword_10099B5E8, sub_1005C66A4);
        goto LABEL_37;
      }

    sub_1003CB894(&v44, &v43, (uint64_t *)&v42);
    return 1LL;
  }

              v231 = v246;
              v289(v246, v165, v128);
              swift_bridgeObjectRetain(v99);
              v233 = (os_log_s *)Logger.logObject.getter(v232);
              v234 = static os_log_type_t.default.getter(v233);
              if (os_log_type_enabled(v233, v234))
              {
                v235 = swift_slowAlloc(32LL, -1LL);
                v293 = (void (*)(void, void, void))swift_slowAlloc(32LL, -1LL);
                *(void *)&v296 = v293;
                *(_DWORD *)v235 = 141558531;
                v294 = 1752392040LL;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v295, v235 + 4, v235 + 12);
                *(_WORD *)(v235 + 12) = 2081;
                v236 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
                v237 = dispatch thunk of CustomStringConvertible.description.getter(v292, v236);
                v294 = sub_1003F11D4(v237, v238, (uint64_t *)&v296);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v295, v235 + 14, v235 + 22);
                swift_bridgeObjectRelease();
                v275(v231, v292);
                *(_WORD *)(v235 + 22) = 2048;
                v239 = *((void *)v99 + 2);
                swift_bridgeObjectRelease();
                v294 = v239;
                uint64_t v128 = (void (*)(void, void))v292;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v295, v235 + 24, v235 + 32);
                swift_bridgeObjectRelease();
                _os_log_impl( (void *)&_mh_execute_header,  v233,  v234,  "Beacon %{private,mask.hash}s has %ld peers and is not connected.",  (uint8_t *)v235,  0x20u);
                v240 = v293;
                swift_arrayDestroy(v293, 1LL, (char *)&type metadata for Any + 8);
                v241 = v240;
                v242 = v275;
                swift_slowDealloc(v241, -1LL, -1LL);
                v243 = v235;
                uint64_t v127 = v242;
                swift_slowDealloc(v243, -1LL, -1LL);

                v242(v248, v128);
              }

              else
              {

                swift_bridgeObjectRelease_n(v99, 2LL);
                v127(v231, v128);
                v127(v248, v128);
              }

              v244 = (void (*)(char *, uint64_t))v270;
              ((void (*)(char *, uint64_t))v270)(v285, v97);
              v244(v290, v97);
              v244(v284, v97);
              v244(v287, v97);
              v199 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v282;
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v299);
              v198 = v283;
LABEL_53:
              v127(v165, v128);
              v199(v198, 1LL, 1LL, v97);
              return 0LL;
            }

            ((void (*)(char *, uint64_t))v143)(v285, v97);
            ((void (*)(char *, uint64_t))v143)(v290, v97);
            ((void (*)(char *, uint64_t))v143)(v284, v97);
            ((void (*)(char *, uint64_t))v143)(v287, v97);
            sub_100015794(v197, &qword_10099D8A0);
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v299);
          }

          else
          {
            ((void (*)(char *, uint64_t))v143)(v285, v97);
            ((void (*)(char *, uint64_t))v143)(v192, v97);
            ((void (*)(char *, uint64_t))v143)(v101, v97);
            ((void (*)(char *, uint64_t))v143)(v287, v97);
            sub_100015794((uint64_t)&v296, (uint64_t *)&unk_1009A9C40);
          }
        }

        else
        {
          ((void (*)(char *, uint64_t))v143)(v285, v97);
          ((void (*)(char *, uint64_t))v143)(v192, v97);
          ((void (*)(char *, uint64_t))v143)(v101, v97);
          ((void (*)(char *, uint64_t))v143)(v287, v97);
        }

        v198 = v283;
        v199 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v282;
        goto LABEL_53;
      }
    }

    static Date.distantPast.getter(v104);
    sub_100015794(v103, (uint64_t *)&unk_10099D720);
    goto LABEL_27;
  }

  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v105 = type metadata accessor for Logger(0LL);
  sub_10000A720(v105, (uint64_t)qword_100A2AC98);
  uint64_t v106 = v252;
  v289(v252, v78, v56);
  BOOL v107 = v253;
  unint64_t v108 = sub_10001DC4C(v84, v253, type metadata accessor for BeaconObservation);
  uint64_t v109 = (os_log_s *)Logger.logObject.getter(v108);
  uint64_t v110 = static os_log_type_t.default.getter(v109);
  if (os_log_type_enabled(v109, v110))
  {
    uint64_t v111 = swift_slowAlloc(32LL, -1LL);
    v290 = (char *)swift_slowAlloc(64LL, -1LL);
    v299 = v290;
    *(_DWORD *)uint64_t v111 = 141558531;
    *(void *)&v296 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, (char *)&v296 + 8, v111 + 4, v111 + 12);
    *(_WORD *)(v111 + 12) = 2081;
    uint64_t v112 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v113 = dispatch thunk of CustomStringConvertible.description.getter(v292, v112);
    *(void *)&v296 = sub_1003F11D4(v113, v114, (uint64_t *)&v299);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, (char *)&v296 + 8, v111 + 14, v111 + 22);
    swift_bridgeObjectRelease();
    uint64_t v115 = v107;
    uint64_t v116 = (void (*)(char *, uint64_t))*((void *)v288 + 1);
    v116(v106, v292);
    *(_WORD *)(v111 + 22) = 2082;
    BOOL v117 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v118 = v280;
    char v119 = dispatch thunk of CustomStringConvertible.description.getter(v280, v117);
    *(void *)&v296 = sub_1003F11D4(v119, v120, (uint64_t *)&v299);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, (char *)&v296 + 8, v111 + 24, v111 + 32);
    swift_bridgeObjectRelease();
    sub_100018C68(v115, type metadata accessor for BeaconObservation);
    _os_log_impl( (void *)&_mh_execute_header,  v109,  v110,  "Beacon %{private,mask.hash}s is connected (via bluetooth) since: %{public}s.",  (uint8_t *)v111,  0x20u);
    uint64_t v121 = v290;
    swift_arrayDestroy(v290, 2LL, (char *)&type metadata for Any + 8);
    uint64_t v56 = v292;
    swift_slowDealloc(v121, -1LL, -1LL);
    swift_slowDealloc(v111, -1LL, -1LL);

    sub_100018C68(v268, type metadata accessor for BeaconObservation);
  }

  else
  {

    sub_100018C68(v107, type metadata accessor for BeaconObservation);
    uint64_t v116 = (void (*)(char *, uint64_t))*((void *)v288 + 1);
    v116(v106, v56);
    sub_100018C68(v84, type metadata accessor for BeaconObservation);
    uint64_t v118 = v280;
  }

  v116(v291, v56);
  v190 = 1LL;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v281 + 56))((char *)v85, 1LL, 1LL, v118);
  return v190;
}

unint64_t *sub_1001455C0(uint64_t a1, uint64_t a2)
{
  uint64_t v320 = a2;
  uint64_t v3 = sub_100004AEC(&qword_1009AE600);
  __chkstk_darwin(v3);
  v273 = (__int128 *)((char *)&v271 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009AE470);
  __chkstk_darwin(v5);
  v280 = (char *)&v271 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v281 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v278 = *(void *)(v281 - 8);
  __chkstk_darwin(v281);
  uint64_t v282 = (uint64_t)&v271 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v271 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v279 = (uint64_t)&v271 - v12;
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v13);
  v301 = (char *)&v271 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v300 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  v302 = (char *)&v271 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v297 = sub_100004AEC(&qword_1009AE490);
  __chkstk_darwin(v297);
  v298 = (char *)&v271 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v299 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v296 = *(void *)(v299 - 8);
  __chkstk_darwin(v299);
  uint64_t v283 = (uint64_t)&v271 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100004AEC(&qword_1009AA870);
  __chkstk_darwin(v19);
  uint64_t v286 = (uint64_t)&v271 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v285 = type metadata accessor for BeaconProductInfoRecord(0LL);
  uint64_t v284 = *(void *)(v285 - 8);
  __chkstk_darwin(v285);
  uint64_t v275 = (uint64_t)&v271 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_100004AEC(&qword_1009A2430);
  __chkstk_darwin(v22);
  uint64_t v295 = (uint64_t)&v271 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v290 = type metadata accessor for KeyAlignmentRecord(0LL);
  uint64_t v294 = *(void *)(v290 - 8);
  __chkstk_darwin(v290);
  uint64_t v277 = (uint64_t)&v271 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v291 = sub_100004AEC(&qword_1009A2438);
  uint64_t v25 = __chkstk_darwin(v291);
  uint64_t v293 = (uint64_t)&v271 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __chkstk_darwin(v25);
  v292 = (uint64_t *)((char *)&v271 - v28);
  __chkstk_darwin(v27);
  v307 = (char *)&v271 - v29;
  uint64_t v30 = type metadata accessor for LocationProvider(0LL);
  uint64_t v329 = *(void *)(v30 - 8);
  uint64_t v330 = v30;
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v323 = (uint64_t)&v271 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v31);
  uint64_t v34 = (char *)&v271 - v33;
  uint64_t v35 = sub_100004AEC(&qword_1009A2440);
  uint64_t v36 = __chkstk_darwin(v35);
  uint64_t v324 = (uint64_t)&v271 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v36);
  uint64_t v326 = (uint64_t)&v271 - v38;
  uint64_t v325 = type metadata accessor for Date(0LL);
  uint64_t v313 = *(void *)(v325 - 8);
  uint64_t v39 = __chkstk_darwin(v325);
  v276 = (char *)&v271 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = __chkstk_darwin(v39);
  v289 = (char *)&v271 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  v327 = (char *)&v271 - v44;
  __chkstk_darwin(v43);
  unint64_t v46 = (char *)&v271 - v45;
  uint64_t v305 = sub_100004AEC(&qword_1009A1800);
  uint64_t v47 = __chkstk_darwin(v305);
  v304 = (char *)&v271 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v47);
  v310 = (char *)&v271 - v49;
  uint64_t v50 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v51 = __chkstk_darwin(v50);
  v288 = (char *)&v271 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v51);
  v287 = (void (*)(char *, char *, uint64_t))((char *)&v271 - v53);
  uint64_t v54 = sub_100004AEC(&qword_1009AA840);
  __chkstk_darwin(v54);
  v321 = (char *)&v271 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v319 = type metadata accessor for UUID(0LL);
  uint64_t v316 = *(void *)(v319 - 8);
  uint64_t v56 = __chkstk_darwin(v319);
  v315 = (char *)&v271 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v58 = __chkstk_darwin(v56);
  Swift::Int v60 = (char *)&v271 - v59;
  uint64_t v61 = __chkstk_darwin(v58);
  uint64_t v303 = (uint64_t)&v271 - v62;
  __chkstk_darwin(v61);
  unint64_t v64 = (char *)&v271 - v63;
  v337[3] = v15;
  v337[4] = sub_100007864( (unint64_t *)&qword_10099D000,  type metadata accessor for OwnedBeaconRecord,  (uint64_t)&unk_10080B120);
  unint64_t v65 = sub_10000A7C8(v337);
  sub_10001DC4C(a1, (uint64_t)v65, type metadata accessor for OwnedBeaconRecord);
  id v322 = [objc_allocWithZone(SPBeacon) init];
  v318 = (int *)v15;
  uint64_t v66 = *(int *)(v15 + 68);
  v328 = (void *)*(int *)(v15 + 64);
  uint64_t v67 = *(void *)((char *)v328 + (void)v65);
  v314 = v65;
  uint64_t v312 = v66;
  uint64_t v68 = sub_1000F5F2C(v67, *(void *)((char *)v65 + v66));
  v306 = v64;
  v311 = v46;
  v274 = v11;
  if (v69 >> 60 == 15)
  {
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v70 = type metadata accessor for Logger(0LL);
    sub_10000A720(v70, (uint64_t)qword_100A2AC98);
    sub_100013044((uint64_t)v337, (uint64_t)&v335);
    uint64_t v71 = sub_100013044((uint64_t)v337, (uint64_t)&v333);
    uint64_t v72 = (os_log_s *)Logger.logObject.getter(v71);
    os_log_type_t v73 = static os_log_type_t.error.getter(v72);
    if (os_log_type_enabled(v72, v73))
    {
      uint64_t v74 = swift_slowAlloc(22LL, -1LL);
      *(_DWORD *)uint64_t v74 = 134218240;
      uint64_t v75 = sub_100012ED8(&v335, v336);
      unint64_t v76 = v318;
      uint64_t v77 = *(void *)((char *)v75 + v318[16]);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v335);
      uint64_t v331 = v77;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v331, v332, v74 + 4, v74 + 12);
      *(_WORD *)(v74 + 12) = 2048;
      uint64_t v78 = *(void *)((char *)sub_100012ED8(&v333, v334) + v76[17]);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v333);
      *(void *)&__int128 v335 = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v335, (char *)&v335 + 8, v74 + 14, v74 + 22);
      _os_log_impl( (void *)&_mh_execute_header,  v72,  v73,  "Unable to create AccessoryProductData from %ld/%ld",  (uint8_t *)v74,  0x16u);
      swift_slowDealloc(v74, -1LL, -1LL);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v333);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v335);
    }

    id v84 = v322;
    unint64_t v81 = v60;
    UUID.init(uuid:)(0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    uint64_t v79 = v68;
    unint64_t v80 = v69;
    if (qword_10099B108 != -1) {
      swift_once(&qword_10099B108, sub_1000F5DDC);
    }
    unint64_t v81 = v60;
    __int128 v335 = xmmword_1009A1330;
    sub_10001736C(xmmword_1009A1330, *((unint64_t *)&xmmword_1009A1330 + 1));
    Data.append(_:)(v79, v80);
    __int128 v82 = v335;
    __int128 v333 = v335;
    unint64_t v83 = sub_100042F34();
    DataProtocol.stableUUID.getter(&type metadata for Data, v83);
    sub_100016F9C(v82, *((unint64_t *)&v82 + 1));
    sub_1000182F0(v79, v80);
    id v84 = v322;
  }

  unint64_t v85 = v318;
  uint64_t v86 = v314;
  Swift::Int v87 = (char *)v314 + v318[5];
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v84 setIdentifier:isa];

  swift_bridgeObjectRetain(*(void *)((char *)v86 + v85[14] + 8));
  NSString v89 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v84 setModel:v89];

  sub_100022898(0LL, &qword_1009A0B70, &OBJC_CLASS___SPBeaconShare_ptr);
  sub_10014EFD4(&qword_1009A2448, &qword_1009A0B70, &OBJC_CLASS___SPBeaconShare_ptr);
  Class v90 = Set._bridgeToObjectiveC()().super.isa;
  [v84 setShares:v90];

  swift_bridgeObjectRetain(*(void *)((char *)v86 + v85[15] + 8));
  NSString v91 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v84 setSystemVersion:v91];

  Class v92 = UUID._bridgeToObjectiveC()().super.isa;
  [v84 setProductUUID:v92];

  [v84 setVendorId:*(void *)((char *)v328 + (void)v86)];
  [v84 setProductId:*(void *)((char *)v86 + v312)];
  Class v93 = Date._bridgeToObjectiveC()().super.isa;
  [v84 setPairingDate:v93];

  sub_1005D3A0C();
  id v95 = v94;
  [v84 setType:v94];

  unint64_t v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(v316 + 16);
  uint64_t v97 = v303;
  uint64_t v309 = (uint64_t)v87;
  v317 = v96;
  v96(v303, (uint64_t)v87, v319);
  uint64_t v308 = *(void *)(v320 + 136);
  uint64_t v98 = sub_100577004(v97);
  uint64_t v99 = v98[2];
  char v100 = (int *)type metadata accessor for LostModeRecord(0LL);
  uint64_t v101 = *((void *)v100 - 1);
  if (v99)
  {
    uint64_t v102 = v321;
    sub_10001DC4C( (uint64_t)v98 + ((*(unsigned __int8 *)(v101 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80)),  (uint64_t)v321,  type metadata accessor for LostModeRecord);
    uint64_t v103 = 0LL;
    uint64_t v104 = (uint64_t)v81;
  }

  else
  {
    uint64_t v103 = 1LL;
    uint64_t v104 = (uint64_t)v81;
    uint64_t v102 = v321;
  }

  (*(void (**)(char *, uint64_t, uint64_t, int *))(v101 + 56))(v102, v103, 1LL, v100);
  swift_bridgeObjectRelease();
  v321 = *(char **)(v316 + 8);
  ((void (*)(uint64_t, uint64_t))v321)(v97, v319);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v101 + 48))(v102, 1LL, v100) == 1)
  {
    sub_100015794((uint64_t)v102, &qword_1009AA840);
    id v105 = 0LL;
  }

  else
  {
    uint64_t v106 = (uint64_t *)&v102[v100[9]];
    uint64_t v107 = v106[1];
    uint64_t v303 = *v106;
    uint64_t v108 = v100[8];
    uint64_t v109 = (uint64_t *)&v102[v100[7]];
    uint64_t v110 = *v109;
    uint64_t v111 = v109[1];
    uint64_t v112 = *(void *)&v102[v108 + 8];
    uint64_t v272 = *(void *)&v102[v108];
    swift_bridgeObjectRetain(v112);
    swift_bridgeObjectRetain(v107);
    swift_bridgeObjectRetain(v111);
    uint64_t v113 = objc_autoreleasePoolPush();
    uint64_t v114 = (uint64_t)v287;
    sub_100544824((uint64_t)v102);
    objc_autoreleasePoolPop(v113);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v313 + 56))(v114, 0LL, 1LL, v325);
    id v115 = objc_allocWithZone(&OBJC_CLASS___SPLostModeInfo);
    id v105 = sub_100545B10(v303, v107, v110, v111, v272, v112, v114);
    sub_100018C68((uint64_t)v102, type metadata accessor for LostModeRecord);
  }

  [v322 setLostModeInfo:v105];

  uint64_t v116 = v309;
  uint64_t v117 = v319;
  v317(v104, v309, v319);
  if (qword_10099B300 != -1) {
    swift_once(&qword_10099B300, sub_1003459EC);
  }
  uint64_t v118 = qword_100A2A6C8;
  char v119 = objc_autoreleasePoolPush();
  sub_100346B24(v118, v104, 0LL, 0LL, &v335);
  uint64_t v120 = v305;
  uint64_t v121 = v310;
  uint64_t v122 = (uint64_t)&v310[*(int *)(v305 + 48)];
  objc_autoreleasePoolPop(v119);
  LOBYTE(v118) = sub_100518274(v122, v104, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v335, 1);
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, uint64_t))v321)(v104, v117);
  LOBYTE(v119) = v118 & 1;
  *uint64_t v121 = v118 & 1;
  [v322 setConnected:v118 & 1];
  uint64_t v123 = *(int *)(v120 + 48);
  BOOL v124 = v304;
  uint64_t v125 = &v304[v123];
  _BYTE *v304 = (_BYTE)v119;
  sub_10001581C(v122, (uint64_t)&v124[v123], (uint64_t *)&unk_10099D720);
  uint64_t v126 = v313;
  uint64_t v127 = v325;
  uint64_t v305 = *(void *)(v313 + 48);
  if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v305)(v125, 1LL, v325) == 1)
  {
    Class v128 = 0LL;
  }

  else
  {
    Class v128 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(_BYTE *, uint64_t))(v126 + 8))(v125, v127);
  }

  uint64_t v129 = v311;
  id v130 = v322;
  [v322 setConnectedStateExpiryDate:v128];

  objc_msgSend( v130,  "setIsAppleAudioAccessory:",  sub_1005E269C(*(void *)((char *)v328 + (void)v314), *(void *)((char *)v314 + v312)));
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v312 = 0LL;
  sub_1006A1410(v335);
  double v132 = v131;
  uint64_t v133 = swift_bridgeObjectRelease();
  Date.init(timeIntervalSinceNow:)(v133, -v132);
  uint64_t v134 = sub_100578498(v116);
  uint64_t v135 = v325;
  v287 = *(void (**)(char *, char *, uint64_t))(v126 + 16);
  v287(v327, v129, v325);
  uint64_t v136 = (__int128 *)&OBJC_CLASS___SPLocationProvider_ptr;
  uint64_t v137 = sub_100022898(0LL, &qword_1009A0A28, &OBJC_CLASS___SPLocationProvider_ptr);
  uint64_t v138 = sub_10014EFD4(&qword_1009A2450, &qword_1009A0A28, &OBJC_CLASS___SPLocationProvider_ptr);
  swift_bridgeObjectRetain(v134);
  v304 = (_BYTE *)v137;
  uint64_t v303 = v138;
  unint64_t v139 = 0LL;
  *(void *)&__int128 v335 = Set.init(minimumCapacity:)(0LL);
  uint64_t v140 = v134;
  uint64_t v141 = (char *)v134[2];
  unint64_t v142 = type metadata accessor for LocationProvider;
  v143 = (int *)&type metadata accessor for Date;
  unsigned int v144 = &qword_1009A1280;
  v328 = v134;
  if (v141) {
    goto LABEL_25;
  }
LABEL_28:
  while (1)
  {
    uint64_t v149 = 1LL;
    unint64_t v139 = (unint64_t)v141;
LABEL_30:
    uint64_t v151 = v329;
    uint64_t v150 = v330;
    uint64_t v152 = v326;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v329 + 56))(v326, v149, 1LL, v330);
    uint64_t v153 = v152;
    uint64_t v154 = v324;
    sub_100015750(v153, v324, &qword_1009A2440);
    uint64_t v155 = v154;
    uint64_t v156 = v34;
    uint64_t v157 = v323;
    sub_10002218C(v155, v323, type metadata accessor for LocationProvider);
    char v158 = sub_10057EEA4( *(unsigned __int8 *)(v157 + *(int *)(v150 + 24)),  *(void *)(v157 + *(int *)(v150 + 24) + 8),  *(void **)(v157 + *(int *)(v150 + 24) + 16));
    uint64_t v161 = (void *)sub_1006054A8(v158, v159, v160);
    swift_bridgeObjectRelease();
    id v162 = objc_allocWithZone(&OBJC_CLASS___SPLocationProvider);
    Class v163 = Date._bridgeToObjectiveC()().super.isa;
    id v164 = [v162 initWithTimestamp:v163 provider:v161];

    uint64_t v165 = v157;
    uint64_t v34 = v156;
    sub_100018C68(v165, type metadata accessor for LocationProvider);
    uint64_t v136 = &v335;
    sub_1000BDD04((Swift::Int *)&v333, v164);

    uint64_t v135 = v325;
    uint64_t v140 = v328;
    v143 = (int *)&type metadata accessor for Date;
    if ((char *)v139 != v141)
    {
LABEL_25:
      while (v139 < v140[2])
      {
        unint64_t v145 = v139 + 1;
        sub_10001DC4C( (uint64_t)v140 + ((*(unsigned __int8 *)(v329 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v329 + 80))
        + *(void *)(v329 + 72) * v139,
          (uint64_t)v34,
          type metadata accessor for LocationProvider);
        uint64_t v146 = &v34[*(int *)(v330 + 28)];
        uint64_t v147 = sub_100007864( &qword_1009A1280,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
        unint64_t v148 = v146;
        uint64_t v136 = (__int128 *)v135;
        if ((dispatch thunk of static Comparable.< infix(_:_:)(v148, v327, v135, v147) & 1) == 0)
        {
          sub_10002218C((uint64_t)v34, v326, type metadata accessor for LocationProvider);
          uint64_t v149 = 0LL;
          ++v139;
          goto LABEL_30;
        }

        sub_100018C68((uint64_t)v34, type metadata accessor for LocationProvider);
        ++v139;
        uint64_t v140 = v328;
      }

      __break(1u);
      goto LABEL_78;
    }
  }

  swift_bridgeObjectRelease();
  Class v166 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v322 setLocationProviders:v166];

  uint64_t v167 = v320;
  uint64_t v168 = *(void *)(v320 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  uint64_t v169 = type metadata accessor for BeaconKeyManager(0LL);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10014F014, v167, v168, (char *)&type metadata for () + 8, v169);
  uint64_t v170 = v335;
  sub_100013044((uint64_t)v337, (uint64_t)&v335);
  uint64_t v171 = swift_allocObject(&unk_10093FA60, 64LL, 7LL);
  *(void *)(v171 + 16) = v170;
  sub_100012EC0(&v335, v171 + 24);
  uint64_t v330 = v170;
  swift_retain();
  uint64_t v172 = (uint64_t)v307;
  unsafeFromAsyncTask<A>(_:)(&unk_1009A2458, v171, v291);
  swift_release();
  uint64_t v173 = &qword_1009A2438;
  v174 = v292;
  sub_10001581C(v172, (uint64_t)v292, &qword_1009A2438);
  uint64_t v175 = sub_100004AEC((uint64_t *)&unk_1009AE460);
  uint64_t v176 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v175 - 8) + 48LL);
  uint64_t v177 = 1LL;
  if (v176(v174, 1LL, v175) != 1)
  {
    uint64_t v177 = *v174;
    uint64_t v173 = (uint64_t *)&unk_1009AE460;
  }

  unint64_t v139 = v319;
  uint64_t v178 = v290;
  uint64_t v179 = v313;
  sub_100015794((uint64_t)v174, v173);
  [v322 setKeySyncLastObservedIndex:v177];
  v180 = &qword_1009A2438;
  uint64_t v181 = v172;
  uint64_t v182 = v293;
  sub_10001581C(v181, v293, &qword_1009A2438);
  uint64_t v183 = 1LL;
  if (v176((uint64_t *)v182, 1LL, v175) == 1)
  {
    uint64_t v184 = v325;
    v185 = v289;
    uint64_t v186 = (uint64_t)v288;
  }

  else
  {
    uint64_t v187 = v182 + *(int *)(v175 + 36);
    uint64_t v186 = (uint64_t)v288;
    uint64_t v184 = v325;
    v287(v288, (char *)v187, v325);
    uint64_t v183 = 0LL;
    v180 = (uint64_t *)&unk_1009AE460;
    v185 = v289;
  }

  sub_100015794(v182, v180);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v179 + 56))(v186, v183, 1LL, v184);
  sub_100013044((uint64_t)v337, (uint64_t)&v335);
  int v188 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v305)(v186, 1LL, v184);
  uint64_t v189 = v309;
  if (v188 == 1)
  {
    v190 = (char *)sub_100012ED8(&v335, v336);
    v287(v185, &v190[v318[8]], v184);
    sub_100015794(v186, (uint64_t *)&unk_10099D720);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v179 + 32))(v185, v186, v184);
  }

  id v191 = v322;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v335);
  Class v192 = Date._bridgeToObjectiveC()().super.isa;
  unint64_t v142 = *(uint64_t (**)(uint64_t))(v179 + 8);
  ((void (*)(char *, uint64_t))v142)(v185, v184);
  [v191 setKeySyncLastIndexObservationDate:v192];

  [v191 setKeySyncWildIndexFallback:1];
  uint64_t v193 = v315;
  v317((uint64_t)v315, v189, v139);
  uint64_t v194 = v295;
  sub_100576BD4(v295);
  ((void (*)(char *, unint64_t))v321)(v193, v139);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v294 + 48))(v194, 1LL, v178) == 1)
  {
    sub_100015794(v194, &qword_1009A2430);
    id v195 = [v191 setKeyAlignmentLastObservedIndex:0];
    uint64_t v196 = v276;
    static Date.distantPast.getter(v195);
    Class v197 = Date._bridgeToObjectiveC()().super.isa;
    ((void (*)(char *, uint64_t))v142)(v196, v184);
    [v191 setKeyAlignmentLastIndexObservationDate:v197];
  }

  else
  {
    uint64_t v198 = v277;
    sub_10002218C(v194, v277, type metadata accessor for KeyAlignmentRecord);
    [v191 setKeyAlignmentLastObservedIndex:*(void *)(v198 + *(int *)(v178 + 28))];
    Class v199 = Date._bridgeToObjectiveC()().super.isa;
    [v191 setKeyAlignmentLastIndexObservationDate:v199];

    sub_100018C68(v198, type metadata accessor for KeyAlignmentRecord);
  }

  id v200 = [v191 type];
  uint64_t v201 = SPBeaconTypeAccessory;
  uint64_t v202 = static String._unconditionallyBridgeFromObjectiveC(_:)(v200);
  uint64_t v204 = v203;
  uint64_t v206 = static String._unconditionallyBridgeFromObjectiveC(_:)(v201);
  if (v202 == v206 && v204 == v205)
  {
LABEL_46:

    swift_bridgeObjectRelease_n(v204, 2LL);
    unsigned int v144 = (unint64_t *)v322;
    v207 = v318;
    goto LABEL_48;
  }

  char v208 = _stringCompareWithSmolCheck(_:_:expecting:)(v202, v204, v206, v205, 0LL);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unsigned int v144 = (unint64_t *)v322;
  v207 = v318;
  if ((v208 & 1) == 0)
  {
    id v200 = [v322 type];
    uint64_t v255 = SPBeaconTypeHele;
    uint64_t v256 = static String._unconditionallyBridgeFromObjectiveC(_:)(v200);
    uint64_t v204 = v257;
    uint64_t v259 = static String._unconditionallyBridgeFromObjectiveC(_:)(v255);
    if (v256 != v259 || v204 != v258)
    {
      char v260 = _stringCompareWithSmolCheck(_:_:expecting:)(v256, v204, v259, v258, 0LL);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unsigned int v144 = (unint64_t *)v322;
      v207 = v318;
      if ((v260 & 1) == 0) {
        goto LABEL_51;
      }
      goto LABEL_48;
    }

    goto LABEL_46;
  }

LABEL_51:
  v215 = v315;
  uint64_t v216 = ((uint64_t (*)(char *, uint64_t, unint64_t))v317)(v315, v189, v139);
  __chkstk_darwin(v216);
  uint64_t v217 = (uint64_t)v298;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_10014F098);
  ((void (*)(char *, unint64_t))v321)(v215, v139);
  v218 = (int *)v299;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v296 + 48))(v217, 1LL, v299) == 1)
  {
    sub_100015794(v217, &qword_1009AE490);
    uint64_t v141 = v311;
    uint64_t v219 = (uint64_t)v302;
    uint64_t v220 = (uint64_t)v301;
    uint64_t v135 = (uint64_t)v307;
  }

  else
  {
    uint64_t v221 = v217;
    uint64_t v222 = v283;
    sub_10002218C(v221, v283, type metadata accessor for BeaconNamingRecord);
    swift_bridgeObjectRetain(*(void *)(v222 + v218[8] + 8));
    NSString v223 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v144 setName:v223];

    unint64_t v224 = *(void *)(v222 + v218[7]);
    v225 = (void *)sub_10013E428(v224, (uint64_t)sub_100022170);
    v226 = v225;
    uint64_t v141 = v311;
    if (v224 == SPBeaconRoleIdOther && (uint64_t v227 = v222 + v218[9], *(void *)(v227 + 8)) && v225)
    {
      id v228 = objc_msgSend(v225, "role", swift_bridgeObjectRetain(*(void *)(v227 + 8)).n128_f64[0]);
      static String._unconditionallyBridgeFromObjectiveC(_:)(v228);

      id v229 = objc_allocWithZone(&OBJC_CLASS___SPBeaconRole);
      NSString v230 = String._bridgeToObjectiveC()();
      uint64_t v141 = v311;
      swift_bridgeObjectRelease();
      NSString v231 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v232 = v229;
      unsigned int v144 = (unint64_t *)v322;
      id v233 = [v232 initWithRoleId:v224 role:v230 roleEmoji:v231];

      v207 = v318;
      uint64_t v222 = v283;
      [v144 setRole:v233];

      v226 = v233;
    }

    else
    {
      [v144 setRole:v225];
    }

    uint64_t v219 = (uint64_t)v302;
    uint64_t v220 = (uint64_t)v301;
    uint64_t v135 = (uint64_t)v307;

    sub_100018C68(v222, type metadata accessor for BeaconNamingRecord);
  }

  sub_100013044((uint64_t)v337, (uint64_t)&v333);
  uint64_t v234 = sub_100004AEC(&qword_1009B0530);
  int v235 = swift_dynamicCast(v220, &v333, v234, v207, 6LL);
  v236 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v300 + 56);
  if (!v235)
  {
    v236(v220, 1LL, 1LL, v207);
    sub_100015794(v220, (uint64_t *)&unk_1009A9C30);
    sub_100013044((uint64_t)v337, (uint64_t)&v333);
    uint64_t v240 = (uint64_t)v280;
    uint64_t v241 = v234;
    v242 = (int *)v281;
    char v243 = swift_dynamicCast(v280, &v333, v241, v281, 6LL);
    v244 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v278 + 56);
    if ((v243 & 1) == 0)
    {
      v244(v240, 1LL, 1LL, v242);
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v264 = v325;
      ((void (*)(char *, uint64_t))v142)(v327, v325);
      sub_100015794(v135, &qword_1009A2438);
      ((void (*)(char *, uint64_t))v142)(v141, v264);
      sub_100015794((uint64_t)v310, &qword_1009A1800);
      ((void (*)(char *, unint64_t))v321)(v306, v139);
      sub_100015794(v240, (uint64_t *)&unk_1009AE470);
      goto LABEL_83;
    }

    v244(v240, 0LL, 1LL, v242);
    uint64_t v245 = v282;
    sub_10002218C(v240, v282, type metadata accessor for SharedBeaconRecord);
    v246 = v242;
    NSString v247 = String._bridgeToObjectiveC()();
    [v144 setStableIdentifier:v247];

    uint64_t v248 = v245 + v246[7];
    uint64_t v249 = *(void *)(v248 + 8);
    v250 = *(void **)(v248 + 16);
    char v251 = *(_BYTE *)v248;
    swift_bridgeObjectRetain(v250);
    v252 = (void *)sub_1006054A8(v251, v249, v250);
    swift_bridgeObjectRelease();
    [v144 setOwner:v252];

    [v144 setAccepted:*(unsigned __int8 *)(v245 + v246[13])];
    swift_bridgeObjectRetain(*(void *)(v245 + v246[8] + 8));
    NSString v253 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v144 setCorrelationIdentifier:v253];

    [v144 setInternalShareType:qword_1007EDF70[*(char *)(v245 + v246[16])]];
    uint64_t v136 = v273;
    sub_10001581C(v245 + v246[20], (uint64_t)v273, &qword_1009AE600);
    v143 = (int *)type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
    if ((*(unsigned int (**)(__int128 *, uint64_t, int *))(*((void *)v143 - 1) + 48LL))(v136, 1LL, v143) == 1)
    {
      sub_100015794((uint64_t)v136, &qword_1009AE600);
      (*(void (**)(char *, uint64_t, uint64_t, unint64_t))(v316 + 56))(v274, 1LL, 1LL, v139);
      Class v254 = 0LL;
    }

    else
    {
LABEL_78:
      uint64_t v269 = (uint64_t)v274;
      sub_10001581C((uint64_t)v136 + v143[5], (uint64_t)v274, &qword_10099D8A0);
      sub_100018C68((uint64_t)v136, type metadata accessor for SharedBeaconRecord.PropertyListContent);
      if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v316 + 48))(v269, 1LL, v139) == 1)
      {
        Class v254 = 0LL;
      }

      else
      {
        Class v254 = UUID._bridgeToObjectiveC()().super.isa;
        ((void (*)(uint64_t, unint64_t))v321)(v269, v139);
      }
    }

    [v144 setOwnerBeaconIdentifier:v254];
    swift_bridgeObjectRelease();
    swift_release();

    uint64_t v266 = v325;
    ((void (*)(char *, uint64_t))v142)(v327, v325);
    v267 = type metadata accessor for SharedBeaconRecord;
    uint64_t v268 = v282;
    goto LABEL_82;
  }

  v236(v220, 0LL, 1LL, v207);
  sub_10002218C(v220, v219, type metadata accessor for OwnedBeaconRecord);
  sub_1006DD1E4();
  NSString v237 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v144 setStableIdentifier:v237];

  uint64_t v238 = v279;
  sub_10001581C(v219 + v207[7], v279, &qword_10099D8A0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v316 + 48))(v238, 1LL, v139) == 1)
  {
    Class v239 = 0LL;
  }

  else
  {
    uint64_t v261 = v238;
    Class v239 = UUID._bridgeToObjectiveC()().super.isa;
    ((void (*)(uint64_t, unint64_t))v321)(v261, v139);
  }

  [v144 setGroupIdentifier:v239];

  sub_10054F7E4(v219);
  if (v262)
  {
    NSString v263 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v263 = 0LL;
  }

  [v144 setSerialNumber:v263];

  [v144 setPartIdentifier:sub_10054FA7C(v219)];
  [v144 setBatteryLevel:*(unsigned __int8 *)(v219 + v207[19])];
  [v144 setIsZeus:*(unsigned __int8 *)(v219 + v207[20])];
  if (qword_10099B618 != -1) {
    swift_once(&qword_10099B618, sub_1005D3D24);
  }
  [v144 setOwner:qword_100A2AE98];
  [v144 setAccepted:1];
  NSString v265 = String._bridgeToObjectiveC()();
  [v144 setCorrelationIdentifier:v265];

  [v144 setInternalShareType:-1];
  [v144 setOwnerBeaconIdentifier:0];
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v266 = v325;
  ((void (*)(char *, uint64_t))v142)(v327, v325);
  v267 = type metadata accessor for OwnedBeaconRecord;
  uint64_t v268 = v219;
LABEL_82:
  sub_100018C68(v268, v267);
  sub_100015794(v135, &qword_1009A2438);
  ((void (*)(char *, uint64_t))v142)(v141, v266);
  sub_100015794((uint64_t)v310, &qword_1009A1800);
  ((void (*)(char *, unint64_t))v321)(v306, v139);
LABEL_83:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v337);
  return v144;
}

          uint64_t v157 = _swiftEmptyArrayStorage;
          goto LABEL_52;
        }

              if (qword_10099B5E0 != -1) {
                swift_once(&qword_10099B5E0, sub_1005C6624);
              }
              uint64_t v66 = type metadata accessor for Logger(0LL);
              uint64_t v67 = sub_10000A720(v66, (uint64_t)qword_100A2AE08);
              uint64_t v68 = (os_log_s *)Logger.logObject.getter(v67);
              unint64_t v69 = static os_log_type_t.error.getter(v68);
              if (os_log_type_enabled(v68, v69))
              {
                uint64_t v70 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                *(_WORD *)uint64_t v70 = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v68,  v69,  "FetchConfig Unable to parse labelDistanceThreshold from server config response",  v70,  2u);
                swift_slowDealloc(v70, -1LL, -1LL);
              }

              uint64_t v24 = 1;
LABEL_56:
              if (*(void *)(v12 + 16)
                && (uint64_t v71 = sub_10030CF14(0xD00000000000001CLL, 0x800000010084DF70LL), (v72 & 1) != 0)
                && (sub_10006A650(*(void *)(v12 + 56) + 32 * v71, (uint64_t)&v282),
                    (swift_dynamicCast(&v242, &v282, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) & 1) != 0))
              {
                v232 = v242;
                if (!*(void *)(v12 + 16)) {
                  goto LABEL_84;
                }
              }

              else
              {
                if (qword_10099B5E0 != -1) {
                  swift_once(&qword_10099B5E0, sub_1005C6624);
                }
                os_log_type_t v73 = type metadata accessor for Logger(0LL);
                uint64_t v74 = sub_10000A720(v73, (uint64_t)qword_100A2AE08);
                uint64_t v75 = (os_log_s *)Logger.logObject.getter(v74);
                unint64_t v76 = static os_log_type_t.error.getter(v75);
                if (os_log_type_enabled(v75, v76))
                {
                  uint64_t v77 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                  *(_WORD *)uint64_t v77 = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v75,  v76,  "FetchConfig unable to parse maxAllowedSenderSessions from server config response",  v77,  2u);
                  swift_slowDealloc(v77, -1LL, -1LL);
                }

                uint64_t v24 = 1;
                if (!*(void *)(v12 + 16)) {
                  goto LABEL_84;
                }
              }

              uint64_t v78 = sub_10030CF14(0xD00000000000001ELL, 0x800000010084DF50LL);
              if ((v79 & 1) == 0) {
                goto LABEL_84;
              }
              sub_10006A650(*(void *)(v12 + 56) + 32 * v78, (uint64_t)&v282);
              unint64_t v80 = swift_dynamicCast(&v242, &v282, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
              if ((v80 & 1) == 0) {
                goto LABEL_84;
              }
              unint64_t v81 = v243;
              v242 = 0LL;
              __chkstk_darwin(v80);
              uint64_t v213 = &v242;
              if ((v81 & 0x1000000000000000LL) != 0 || !(v81 & 0x2000000000000000LL | v82 & 0x1000000000000000LL))
              {
                _StringGuts._slowWithCString<A>(_:)(&v241, sub_1003389C4, v212);
              }

              else
              {
                if ((v81 & 0x2000000000000000LL) != 0)
                {
                  *(void *)&uint64_t v282 = v82;
                  *((void *)&v282 + 1) = v81 & 0xFFFFFFFFFFFFFFLL;
                  unint64_t v85 = (v82 >= 0x21u || ((0x100003E01uLL >> v82) & 1) == 0)
                     && (id v84 = (_BYTE *)_swift_stdlib_strtod_clocale(&v282, &v242)) != 0LL
                     && *v84 == 0;
                  uint64_t v241 = v85;
                  swift_bridgeObjectRelease();
LABEL_82:
                  if ((v241 & 1) != 0)
                  {
                    uint64_t v13 = v242;
                    goto LABEL_89;
                  }

    swift_once(&qword_10099B3C8, sub_1003B7ABC);
    goto LABEL_27;
  }

  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  uint64_t result = (uint64_t)sub_1005996D8(v7);
  uint64_t v7 = (__int128 *)result;
LABEL_44:
  if (*((void *)v7 + 2) <= v41)
  {
    __break(1u);
    goto LABEL_55;
  }

  *((void *)v7 + v41 + 4) = 0LL;
  *a3 = (unint64_t)v7;
  return result;
}

  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  uint64_t result = (uint64_t)sub_1005996D8(v7);
  uint64_t v7 = (__int128 *)result;
LABEL_44:
  if (*((void *)v7 + 2) <= v43)
  {
    __break(1u);
    goto LABEL_55;
  }

  *((void *)v7 + v43 + 4) = 0LL;
  *a3 = (unint64_t)v7;
  return result;
}

  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
  }
  uint64_t v25 = v2[2];
  uint64_t v24 = v2[3];
  if (v25 >= v24 >> 1) {
    uint64_t v2 = sub_1004C4120((void *)(v24 > 1), v25 + 1, 1, v2);
  }
  v2[2] = v25 + 1;
  uint64_t v26 = &v2[2 * v25];
  v26[4] = 0xD000000000000010LL;
  v26[5] = 0x8000000100863300LL;
  if ((a1 & 0x100) == 0)
  {
LABEL_29:
    if ((a1 & 0x200) == 0) {
      goto LABEL_30;
    }
    goto LABEL_61;
  }

  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
  }
  uint64_t v28 = v2[2];
  uint64_t v27 = v2[3];
  if (v28 >= v27 >> 1) {
    uint64_t v2 = sub_1004C4120((void *)(v27 > 1), v28 + 1, 1, v2);
  }
  v2[2] = v28 + 1;
  uint64_t v29 = &v2[2 * v28];
  v29[4] = 0xD000000000000019LL;
  v29[5] = 0x8000000100864EA0LL;
  if ((a1 & 0x200) != 0)
  {
LABEL_56:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
    }
    uint64_t v31 = v2[2];
    uint64_t v30 = v2[3];
    if (v31 >= v30 >> 1) {
      uint64_t v2 = sub_1004C4120((void *)(v30 > 1), v31 + 1, 1, v2);
    }
    v2[2] = v31 + 1;
    uint64_t v32 = &v2[2 * v31];
    void v32[4] = 0xD00000000000001BLL;
    v32[5] = 0x8000000100864E80LL;
  }

          (*(void (**)(uint64_t, uint64_t))(v228 + 8))((uint64_t)v231 + v230[41], v229);
          if (!(_DWORD)v79) {
            goto LABEL_40;
          }
          goto LABEL_39;
        }

        uint64_t v33 = (v38 - 1) & v38;
        uint64_t v36 = __clz(__rbit64(v38)) + (v9 << 6);
      }

      uint64_t v40 = (Swift::UInt32 *)(*(void *)(v5 + 48) + 8 * v36);
      uint64_t v41 = *v40;
      uint64_t v42 = v40[1];
      Hasher.init(_seed:)(v55, *(void *)(a4 + 40));
      Hasher._combine(_:)(v41);
      Hasher._combine(_:)(v42);
      uint64_t result = Hasher._finalize()();
      uint64_t v5 = v56;
      uint64_t v43 = -1LL << *(_BYTE *)(a4 + 32);
      uint64_t v44 = result & ~v43;
      if (((*(void *)(v34 + ((v44 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v44) & 1) != 0)
      {
        uint64_t v45 = ~v43;
        while (1)
        {
          unint64_t v46 = (int *)(*(void *)(a4 + 48) + 8 * v44);
          uint64_t v48 = *v46;
          uint64_t v47 = v46[1];
          if (v48 == v41 && v47 == v42) {
            break;
          }
          uint64_t v44 = (v44 + 1) & v45;
          if (((*(void *)(v34 + ((v44 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v44) & 1) == 0) {
            goto LABEL_36;
          }
        }

        *(unint64_t *)((char *)v54 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v36;
        uint64_t v15 = __OFADD__(v8++, 1LL);
        if (v15) {
          goto LABEL_64;
        }
      }
    }
  }

  uint64_t v10 = a4 + 56;
  uint64_t v11 = 1LL << *(_BYTE *)(a4 + 32);
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  else {
    uint64_t v12 = -1LL;
  }
  uint64_t v13 = v12 & *(void *)(a4 + 56);
  uint64_t v52 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v14 = a3 + 56;
  while (1)
  {
LABEL_7:
    if (v13)
    {
      uint64_t v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      uint64_t v17 = v16 | (v9 << 6);
      goto LABEL_23;
    }

    uint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_62;
    }

    if (v18 >= v52) {
      goto LABEL_60;
    }
    uint64_t v19 = *(void *)(v10 + 8 * v18);
    ++v9;
    if (!v19)
    {
      uint64_t v9 = v18 + 1;
      if (v18 + 1 >= v52) {
        goto LABEL_60;
      }
      uint64_t v19 = *(void *)(v10 + 8 * v9);
      if (!v19)
      {
        uint64_t v9 = v18 + 2;
        if (v18 + 2 >= v52) {
          goto LABEL_60;
        }
        uint64_t v19 = *(void *)(v10 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }

id sub_10014795C(uint64_t a1, uint64_t a2)
{
  uint64_t v316 = a2;
  uint64_t v3 = sub_100004AEC(&qword_1009AE600);
  __chkstk_darwin(v3);
  unint64_t v266 = (unint64_t)&v264 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009AE470);
  __chkstk_darwin(v5);
  uint64_t v272 = (char *)&v264 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v270 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v273 = (uint64_t)&v264 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v264 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v271 = (uint64_t)&v264 - v13;
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v14);
  uint64_t v290 = (char *)&v264 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v298 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v289 = *(void *)(v298 - 8);
  __chkstk_darwin(v298);
  uint64_t v291 = (char *)&v264 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v286 = sub_100004AEC(&qword_1009AE490);
  __chkstk_darwin(v286);
  v287 = (char *)&v264 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v288 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v285 = *(void *)(v288 - 8);
  __chkstk_darwin(v288);
  uint64_t v297 = (uint64_t)&v264 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100004AEC(&qword_1009AA870);
  __chkstk_darwin(v19);
  uint64_t v277 = (uint64_t)&v264 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v276 = type metadata accessor for BeaconProductInfoRecord(0LL);
  uint64_t v275 = *(void *)(v276 - 8);
  __chkstk_darwin(v276);
  uint64_t v268 = (uint64_t)&v264 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_100004AEC(&qword_1009A2430);
  __chkstk_darwin(v22);
  uint64_t v279 = (char *)&v264 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v280 = type metadata accessor for KeyAlignmentRecord(0LL);
  uint64_t v284 = *(void *)(v280 - 8);
  __chkstk_darwin(v280);
  uint64_t v269 = (uint64_t)&v264 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v281 = sub_100004AEC(&qword_1009A2438);
  uint64_t v25 = __chkstk_darwin(v281);
  uint64_t v283 = (uint64_t)&v264 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v282 = (uint64_t *)((char *)&v264 - v28);
  __chkstk_darwin(v27);
  uint64_t v311 = (uint64_t)&v264 - v29;
  uint64_t v30 = type metadata accessor for LocationProvider(0LL);
  uint64_t v324 = *(void *)(v30 - 8);
  uint64_t v325 = (int *)v30;
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v318 = (uint64_t)&v264 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v31);
  uint64_t v34 = (char *)&v264 - v33;
  uint64_t v35 = sub_100004AEC(&qword_1009A2440);
  uint64_t v36 = __chkstk_darwin(v35);
  uint64_t v319 = (char *)&v264 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v36);
  uint64_t v321 = (uint64_t)&v264 - v38;
  uint64_t v295 = sub_100004AEC(&qword_1009A1800);
  uint64_t v39 = __chkstk_darwin(v295);
  uint64_t v294 = (char *)&v264 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v39);
  v306 = (char *)&v264 - v41;
  uint64_t v42 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v43 = __chkstk_darwin(v42);
  uint64_t v278 = (char *)&v264 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v43);
  v274 = (char *)&v264 - v45;
  uint64_t v46 = sub_100004AEC(&qword_1009AA840);
  __chkstk_darwin(v46);
  v317 = (char *)&v264 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v320 = type metadata accessor for Date(0LL);
  uint64_t v314 = *(void *)(v320 - 8);
  uint64_t v48 = __chkstk_darwin(v320);
  uint64_t v299 = (char *)&v264 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v50 = __chkstk_darwin(v48);
  id v322 = (char *)&v264 - v51;
  uint64_t v52 = __chkstk_darwin(v50);
  uint64_t v305 = (char *)&v264 - v53;
  __chkstk_darwin(v52);
  uint64_t v301 = (uint64_t)&v264 - v54;
  uint64_t v55 = type metadata accessor for UUID(0LL);
  uint64_t v312 = *(void *)(v55 - 8);
  uint64_t v56 = __chkstk_darwin(v55);
  v310 = (char *)&v264 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v58 = __chkstk_darwin(v56);
  uint64_t v293 = (char *)&v264 - v59;
  uint64_t v60 = __chkstk_darwin(v58);
  v292 = (uint64_t *)((char *)&v264 - v61);
  __chkstk_darwin(v60);
  uint64_t v63 = (char *)&v264 - v62;
  v332[3] = v7;
  v332[4] = sub_100007864(&qword_10099CFF8, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_10081ADAC);
  unint64_t v64 = sub_10000A7C8(v332);
  sub_10001DC4C(a1, (uint64_t)v64, type metadata accessor for SharedBeaconRecord);
  id v65 = [objc_allocWithZone(SPBeacon) init];
  v302 = (int *)v7;
  uint64_t v66 = *(int *)(v7 + 48);
  i = (void *)*(int *)(v7 + 44);
  uint64_t v67 = *(void *)((char *)i + (void)v64);
  uint64_t v309 = v64;
  uint64_t v307 = v66;
  uint64_t v68 = sub_1000F5F2C(v67, *(void *)((char *)v64 + v66));
  v304 = (uint64_t (*)(uint64_t))v55;
  id v315 = v65;
  v267 = v12;
  if (v69 >> 60 == 15)
  {
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v70 = type metadata accessor for Logger(0LL);
    sub_10000A720(v70, (uint64_t)qword_100A2AC98);
    sub_100013044((uint64_t)v332, (uint64_t)&v330);
    uint64_t v71 = sub_100013044((uint64_t)v332, (uint64_t)&v328);
    uint64_t v72 = (os_log_s *)Logger.logObject.getter(v71);
    os_log_type_t v73 = static os_log_type_t.error.getter(v72);
    if (os_log_type_enabled(v72, v73))
    {
      uint64_t v74 = swift_slowAlloc(22LL, -1LL);
      *(_DWORD *)uint64_t v74 = 134218240;
      uint64_t v75 = sub_100012ED8(&v330, v331);
      unint64_t v76 = v302;
      uint64_t v77 = *(void *)((char *)v75 + v302[11]);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v330);
      uint64_t v326 = v77;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, v327, v74 + 4, v74 + 12);
      *(_WORD *)(v74 + 12) = 2048;
      uint64_t v78 = *(void *)((char *)sub_100012ED8(&v328, v329) + v76[12]);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v328);
      *(void *)&__int128 v330 = v78;
      id v65 = v315;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v330, (char *)&v330 + 8, v74 + 14, v74 + 22);
      _os_log_impl( (void *)&_mh_execute_header,  v72,  v73,  "Unable to create AccessoryProductData from %ld/%ld",  (uint8_t *)v74,  0x16u);
      swift_slowDealloc(v74, -1LL, -1LL);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v328);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v330);
    }

    UUID.init(uuid:)(0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    uint64_t v79 = v68;
    unint64_t v80 = v69;
    if (qword_10099B108 != -1) {
      swift_once(&qword_10099B108, sub_1000F5DDC);
    }
    __int128 v330 = xmmword_1009A1330;
    sub_10001736C(xmmword_1009A1330, *((unint64_t *)&xmmword_1009A1330 + 1));
    Data.append(_:)(v79, v80);
    unint64_t v81 = *((void *)&v330 + 1);
    uint64_t v82 = v330;
    __int128 v328 = v330;
    unint64_t v83 = sub_100042F34();
    DataProtocol.stableUUID.getter(&type metadata for Data, v83);
    sub_100016F9C(v82, v81);
    sub_1000182F0(v79, v80);
    uint64_t v55 = (uint64_t)v304;
  }

  id v84 = v302;
  unint64_t v85 = v309;
  uint64_t v86 = (uint64_t)v309 + v302[5];
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v65 setIdentifier:isa];

  swift_bridgeObjectRetain(*(void *)((char *)v85 + v84[9] + 8));
  NSString v88 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v65 setModel:v88];

  sub_100022898(0LL, &qword_1009A0B70, &OBJC_CLASS___SPBeaconShare_ptr);
  sub_10014EFD4(&qword_1009A2448, &qword_1009A0B70, &OBJC_CLASS___SPBeaconShare_ptr);
  Class v89 = Set._bridgeToObjectiveC()().super.isa;
  [v65 setShares:v89];

  uint64_t v90 = v84[10];
  uint64_t v91 = v86;
  swift_bridgeObjectRetain(*(void *)((char *)v85 + v90 + 8));
  NSString v92 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v65 setSystemVersion:v92];

  uint64_t v296 = v63;
  Class v93 = UUID._bridgeToObjectiveC()().super.isa;
  [v65 setProductUUID:v93];

  [v65 setVendorId:*(void *)((char *)i + (void)v85)];
  [v65 setProductId:*(void *)((char *)v85 + v307)];
  uint64_t v94 = v301;
  sub_1007636B4(v301);
  Class v95 = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v96 = v314;
  uint64_t v308 = *(void (**)(uint64_t, uint64_t))(v314 + 8);
  v308(v94, v320);
  [v65 setPairingDate:v95];

  [v65 setType:sub_1007681BC()];
  uint64_t v97 = (void (*)(void, void, void))v292;
  uint64_t v313 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v312 + 16);
  v313(v292, v91, v55);
  uint64_t v303 = *(void *)(v316 + 136);
  uint64_t v98 = sub_100577004((uint64_t)v97);
  uint64_t v99 = v98[2];
  char v100 = (int *)type metadata accessor for LostModeRecord(0LL);
  uint64_t v101 = *((void *)v100 - 1);
  if (v99)
  {
    uint64_t v102 = v317;
    sub_10001DC4C( (uint64_t)v98 + ((*(unsigned __int8 *)(v101 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80)),  (uint64_t)v317,  type metadata accessor for LostModeRecord);
    uint64_t v103 = 0LL;
  }

  else
  {
    uint64_t v103 = 1LL;
    uint64_t v102 = v317;
  }

  (*(void (**)(char *, uint64_t, uint64_t, int *))(v101 + 56))(v102, v103, 1LL, v100);
  swift_bridgeObjectRelease();
  v317 = *(char **)(v312 + 8);
  ((void (*)(void (*)(void, void, void), uint64_t))v317)(v97, v55);
  int v104 = (*(uint64_t (**)(char *, uint64_t, int *))(v101 + 48))(v102, 1LL, v100);
  uint64_t v300 = v91;
  if (v104 == 1)
  {
    sub_100015794((uint64_t)v102, &qword_1009AA840);
    id v105 = 0LL;
  }

  else
  {
    uint64_t v106 = &v102[v100[9]];
    uint64_t v107 = *((void *)v106 + 1);
    v292 = *(uint64_t **)v106;
    uint64_t v108 = v100[8];
    uint64_t v109 = (uint64_t *)&v102[v100[7]];
    uint64_t v110 = v109[1];
    uint64_t v264 = *v109;
    uint64_t v111 = *(void *)&v102[v108 + 8];
    uint64_t v265 = *(void *)&v102[v108];
    swift_bridgeObjectRetain(v111);
    swift_bridgeObjectRetain(v107);
    swift_bridgeObjectRetain(v110);
    uint64_t v112 = objc_autoreleasePoolPush();
    uint64_t v113 = (uint64_t)v274;
    sub_100544824((uint64_t)v102);
    objc_autoreleasePoolPop(v112);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v96 + 56))(v113, 0LL, 1LL, v320);
    id v114 = objc_allocWithZone(&OBJC_CLASS___SPLostModeInfo);
    uint64_t v115 = v107;
    uint64_t v91 = v300;
    uint64_t v116 = v110;
    uint64_t v55 = (uint64_t)v304;
    id v105 = sub_100545B10((uint64_t)v292, v115, v264, v116, v265, v111, v113);
    sub_100018C68((uint64_t)v102, type metadata accessor for LostModeRecord);
  }

  uint64_t v117 = (uint64_t)v293;
  [v65 setLostModeInfo:v105];

  v313((uint64_t *)v117, v91, v55);
  if (qword_10099B300 != -1) {
    swift_once(&qword_10099B300, sub_1003459EC);
  }
  uint64_t v118 = qword_100A2A6C8;
  char v119 = objc_autoreleasePoolPush();
  sub_100346B24(v118, v117, 0LL, 0LL, &v330);
  uint64_t v120 = v295;
  uint64_t v121 = v306;
  uint64_t v122 = (uint64_t)&v306[*(int *)(v295 + 48)];
  objc_autoreleasePoolPop(v119);
  LOBYTE(v118) = sub_100518274(v122, v117, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v330, 1);
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, uint64_t))v317)(v117, v55);
  LOBYTE(v119) = v118 & 1;
  *uint64_t v121 = v118 & 1;
  id v123 = v315;
  [v315 setConnected:v118 & 1];
  uint64_t v124 = *(int *)(v120 + 48);
  uint64_t v125 = v294;
  uint64_t v126 = &v294[v124];
  *uint64_t v294 = (_BYTE)v119;
  sub_10001581C(v122, (uint64_t)&v125[v124], (uint64_t *)&unk_10099D720);
  uint64_t v127 = v314;
  uint64_t v128 = v320;
  uint64_t v295 = *(void *)(v314 + 48);
  if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v295)(v126, 1LL, v320) == 1)
  {
    Class v129 = 0LL;
  }

  else
  {
    Class v129 = Date._bridgeToObjectiveC()().super.isa;
    v308((uint64_t)v126, v128);
  }

  [v123 setConnectedStateExpiryDate:v129];

  objc_msgSend( v123,  "setIsAppleAudioAccessory:",  sub_1005E269C(*(void *)((char *)i + (void)v309), *(void *)((char *)v309 + v307)));
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v307 = 0LL;
  sub_1006A1410(v330);
  double v131 = v130;
  uint64_t v132 = swift_bridgeObjectRelease();
  uint64_t v133 = v305;
  Date.init(timeIntervalSinceNow:)(v132, -v131);
  uint64_t v134 = sub_100578498(v91);
  uint64_t v135 = *(uint64_t **)(v127 + 16);
  uint64_t v136 = v320;
  v292 = v135;
  ((void (*)(char *, char *, uint64_t))v135)(v322, v133, v320);
  uint64_t v137 = sub_100022898(0LL, &qword_1009A0A28, &OBJC_CLASS___SPLocationProvider_ptr);
  uint64_t v138 = sub_10014EFD4(&qword_1009A2450, &qword_1009A0A28, &OBJC_CLASS___SPLocationProvider_ptr);
  swift_bridgeObjectRetain(v134);
  uint64_t v294 = (_BYTE *)v137;
  uint64_t v293 = (char *)v138;
  unint64_t v139 = 0LL;
  *(void *)&__int128 v330 = Set.init(minimumCapacity:)(0LL);
  uint64_t v140 = v134;
  id v141 = (id)v134[2];
  unint64_t v142 = type metadata accessor for LocationProvider;
  for (i = v134; ; uint64_t v140 = i)
  {
    v143 = v325;
    uint64_t v144 = (uint64_t)v319;
    if ((id)v139 != v141)
    {
      while (v139 < v140[2])
      {
        id v145 = (id)(v139 + 1);
        sub_10001DC4C( (uint64_t)v140 + ((*(unsigned __int8 *)(v324 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v324 + 80))
        + *(void *)(v324 + 72) * v139,
          (uint64_t)v34,
          type metadata accessor for LocationProvider);
        uint64_t v146 = &v34[v143[7]];
        uint64_t v147 = sub_100007864( &qword_1009A1280,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
        if ((dispatch thunk of static Comparable.< infix(_:_:)(v146, v322, v136, v147) & 1) == 0)
        {
          sub_10002218C((uint64_t)v34, v321, type metadata accessor for LocationProvider);
          uint64_t v148 = 0LL;
          ++v139;
          v143 = v325;
          goto LABEL_31;
        }

        sub_100018C68((uint64_t)v34, type metadata accessor for LocationProvider);
        ++v139;
        uint64_t v140 = i;
        v143 = v325;
        if (v141 == v145) {
          goto LABEL_29;
        }
      }

      __break(1u);
      goto LABEL_78;
    }

LABEL_78:
    uint64_t v262 = (uint64_t)v267;
    sub_10001581C(v139 + v143[5], (uint64_t)v267, &qword_10099D8A0);
    sub_100018C68(v139, type metadata accessor for SharedBeaconRecord.PropertyListContent);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t)))(v312 + 48))( v262,  1LL,  v142) == 1)
    {
      Class v250 = 0LL;
    }

    else
    {
      Class v250 = UUID._bridgeToObjectiveC()().super.isa;
      ((void (*)(uint64_t, uint64_t (*)(uint64_t)))v317)(v262, v142);
    }

    goto LABEL_81;
  }

  v232(v217, 0LL, 1LL, v203);
  sub_10002218C(v217, v216, type metadata accessor for OwnedBeaconRecord);
  sub_1006DD1E4();
  NSString v233 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v141 setStableIdentifier:v233];

  uint64_t v234 = v271;
  sub_10001581C(v216 + v203[7], v271, &qword_10099D8A0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t)))(v312 + 48))(v234, 1LL, v142) == 1)
  {
    Class v235 = 0LL;
  }

  else
  {
    Class v235 = UUID._bridgeToObjectiveC()().super.isa;
    ((void (*)(uint64_t, uint64_t (*)(uint64_t)))v317)(v234, v142);
  }

  [v141 setGroupIdentifier:v235];

  sub_10054F7E4(v216);
  if (v257)
  {
    NSString v258 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v258 = 0LL;
  }

  [v141 setSerialNumber:v258];

  [v141 setPartIdentifier:sub_10054FA7C(v216)];
  [v141 setBatteryLevel:*(unsigned __int8 *)(v216 + v203[19])];
  [v141 setIsZeus:*(unsigned __int8 *)(v216 + v203[20])];
  if (qword_10099B618 != -1) {
    swift_once(&qword_10099B618, sub_1005D3D24);
  }
  [v141 setOwner:qword_100A2AE98];
  [v141 setAccepted:1];
  NSString v260 = String._bridgeToObjectiveC()();
  [v141 setCorrelationIdentifier:v260];

  [v141 setInternalShareType:-1];
  [v141 setOwnerBeaconIdentifier:0];
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v261 = (void (*)(char *, uint64_t))v308;
  v308((uint64_t)v322, v136);
  sub_100018C68(v216, type metadata accessor for OwnedBeaconRecord);
  sub_100015794(v311, &qword_1009A2438);
  v261(v305, v136);
LABEL_82:
  sub_100015794((uint64_t)v306, &qword_1009A1800);
  ((void (*)(char *, uint64_t (*)(uint64_t)))v317)(v215, v142);
LABEL_83:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v332);
  return v141;
}

    double v130 = v106[7] + 16 * v124;
    sub_100016F9C(*(void *)v130, *(void *)(v130 + 8));
    double v131 = v168;
    *(void *)double v130 = v108;
    *(void *)(v130 + 8) = v131;
    uint64_t v107 = v168;
LABEL_81:
    id v105 = v166;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000182F0((uint64_t)v108, v107);
    sub_1000182F0((uint64_t)v108, v107);
    goto LABEL_57;
  }

  uint64_t result = (_BYTE *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MessagingDestination);
  __break(1u);
  return result;
}

        if ((v54 & 1) != 0) {
          goto LABEL_124;
        }
        uint64_t v62 = &v29[16 * v31];
        unint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        uint64_t v42 = __OFSUB__(v63, v64);
        id v65 = v63 - v64;
        if (v42) {
          goto LABEL_127;
        }
        if (v65 < v53) {
          goto LABEL_15;
        }
LABEL_86:
        uint64_t v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }

        if (!v10) {
          goto LABEL_143;
        }
        uint64_t v71 = &v29[16 * v70];
        uint64_t v72 = *(void *)v71;
        os_log_type_t v73 = v29;
        uint64_t v74 = &v29[16 * v31];
        uint64_t v75 = *((void *)v74 + 1);
        sub_1002B8254((char *)(v10 + 8LL * *(void *)v71), (char *)(v10 + 8LL * *(void *)v74), v10 + 8 * v75, __dst);
        if (v1) {
          goto LABEL_114;
        }
        if (v75 < v72) {
          goto LABEL_117;
        }
        if (v31 > *((void *)v11 + 2)) {
          goto LABEL_118;
        }
        *(void *)uint64_t v71 = v72;
        *(void *)&v73[16 * v70 + 8] = v75;
        unint64_t v76 = *((void *)v11 + 2);
        if (v31 >= v76) {
          goto LABEL_119;
        }
        uint64_t v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        uint64_t v29 = v73;
        *((void *)v11 + 2) = v76 - 1;
        uint64_t v10 = v97;
        if (v76 <= 2) {
          goto LABEL_15;
        }
      }
    }

    uint64_t v12 = 1LL;
LABEL_15:
    uint64_t v3 = v96;
    if (v9 >= v96)
    {
      uint64_t v8 = v94;
      uint64_t v2 = v92;
      goto LABEL_103;
    }
  }

    swift_once(&qword_10099B528, sub_1004F3B00);
    goto LABEL_4;
  }

  uint64_t v191 = (void *)v49;
  uint64_t v189 = v19;
  uint64_t v197 = v13;
  id v190 = v2;
  sub_1001CC778();
  id v65 = v64;
  uint64_t v66 = (uint64_t)v205;
  swift_retain();
  uint64_t v67 = sub_100550500(v65, v66);
  swift_release();
  swift_bridgeObjectRelease();
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  Class v192 = sub_1006A0C34(v215);
  swift_bridgeObjectRelease();
  uint64_t v68 = *(void *)(v67 + 16);
  unint64_t v69 = v212;
  uint64_t v200 = v51;
  if (v68)
  {
    uint64_t v70 = v67 + ((*(unsigned __int8 *)(v212 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v212 + 80));
    uint64_t v71 = *(void *)(v212 + 72);
    swift_bridgeObjectRetain(v67);
    uint64_t v72 = v68;
    while (1)
    {
      sub_10001581C(v70, (uint64_t)v40, &qword_10099D440);
      if (*v40 == 1LL) {
        break;
      }
      sub_100015794((uint64_t)v40, &qword_10099D440);
      v70 += v71;
      if (!--v72)
      {
        swift_bridgeObjectRelease();
        uint64_t v51 = v200;
        unint64_t v69 = v212;
        goto LABEL_13;
      }
    }

    swift_bridgeObjectRelease();
    uint64_t v51 = v200;
    sub_100015750((uint64_t)v40, (uint64_t)v200, &qword_10099D440);
    unint64_t v69 = v212;
    os_log_type_t v73 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v212 + 56);
    uint64_t v74 = v51;
    uint64_t v75 = 0LL;
  }

  else
  {
LABEL_13:
    os_log_type_t v73 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 56);
    uint64_t v74 = v51;
    uint64_t v75 = 1LL;
  }

  uint64_t v77 = v210;
  id v205 = v73;
  v73((uint64_t)v74, v75, 1LL, v210);
  if (v68)
  {
    uint64_t v78 = v67 + ((*(unsigned __int8 *)(v69 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80));
    uint64_t v79 = *(void *)(v69 + 72);
    swift_bridgeObjectRetain(v67);
    unint64_t v80 = v68;
    while (1)
    {
      sub_10001581C(v78, (uint64_t)v36, &qword_10099D440);
      if (*v36 == 4LL) {
        break;
      }
      sub_100015794((uint64_t)v36, &qword_10099D440);
      v78 += v79;
      if (!--v80)
      {
        swift_bridgeObjectRelease();
        unint64_t v81 = 1LL;
        goto LABEL_24;
      }
    }

    swift_bridgeObjectRelease();
    sub_100015750((uint64_t)v36, v211, &qword_10099D440);
    unint64_t v81 = 0LL;
LABEL_24:
    uint64_t v77 = v210;
    unint64_t v69 = v212;
  }

  else
  {
    unint64_t v81 = 1LL;
  }

  uint64_t v82 = (double)v192;
  unint64_t v83 = v211;
  v205(v211, v81, 1LL, v77);
  id v84 = (void *)v206;
  sub_10001581C((uint64_t)v51, v206, &qword_1009B28A8);
  unint64_t v85 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v69 + 48);
  uint64_t v86 = v85(v84, 1LL, v77);
  Swift::Int v87 = v208;
  Class v192 = (uint64_t)v85;
  if (v86 == 1)
  {
    sub_100015794((uint64_t)v84, &qword_1009B28A8);
  }

  else
  {
    NSString v88 = *(int *)(v77 + 48);
    *uint64_t v208 = *v84;
    Class v89 = (void (*)(void))v209[4];
    uint64_t v206 = (uint64_t)v87 + v88;
    uint64_t v90 = v77;
    uint64_t v91 = v197;
    v89();
    NSString v92 = v83;
    Class v93 = v191;
    sub_10001581C(v92, (uint64_t)v191, &qword_1009B28A8);
    if (v85(v93, 1LL, v90) == 1)
    {
      sub_100015794((uint64_t)v87, &qword_10099D440);
      sub_100015794((uint64_t)v93, &qword_1009B28A8);
      uint64_t v77 = v90;
    }

    else
    {
      v188[1] = (char *)v199 + *(int *)(v90 + 48);
      *uint64_t v199 = *v93;
      uint64_t v94 = ((uint64_t (*)(void))v89)();
      Class v95 = v201;
      Date.addingTimeInterval(_:)(v94, v82);
      uint64_t v96 = v202;
      static Date.trustedNow.getter(v202);
      uint64_t v97 = sub_100007864( &qword_1009A1280,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      LODWORD(v206) = dispatch thunk of static Comparable.< infix(_:_:)(v95, v96, v91, v97);
      uint64_t v98 = (void (*)(uint64_t, uint64_t))v209[1];
      v98(v96, v91);
      uint64_t v99 = ((uint64_t (*)(char *, uint64_t))v98)(v95, v91);
      Date.addingTimeInterval(_:)(v99, v82);
      static Date.trustedNow.getter(v96);
      char v100 = dispatch thunk of static Comparable.< infix(_:_:)(v95, v96, v91, v97);
      v98(v96, v91);
      v98((uint64_t)v95, v91);
      if ((v206 & 1) == 0 && (v100 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v101 = (uint64_t)v200;
        if (qword_10099B528 != -1) {
          swift_once(&qword_10099B528, sub_1004F3B00);
        }
        uint64_t v102 = type metadata accessor for Logger(0LL);
        sub_10000A720(v102, (uint64_t)qword_100A2AC98);
        uint64_t v103 = v193;
        int v104 = sub_10001DC4C(v213, v193, type metadata accessor for OwnedBeaconGroup);
        id v105 = (os_log_s *)Logger.logObject.getter(v104);
        uint64_t v106 = static os_log_type_t.default.getter(v105);
        uint64_t v107 = os_log_type_enabled(v105, v106);
        uint64_t v108 = v211;
        if (v107)
        {
          uint64_t v109 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v110 = swift_slowAlloc(32LL, -1LL);
          v215 = v110;
          *(_DWORD *)uint64_t v109 = 136315138;
          uint64_t v111 = type metadata accessor for UUID(0LL);
          uint64_t v112 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v113 = dispatch thunk of CustomStringConvertible.description.getter(v111, v112);
          id v214 = sub_1003F11D4(v113, v114, &v215);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v214, &v215, v109 + 4, v109 + 12);
          swift_bridgeObjectRelease();
          sub_100018C68(v103, type metadata accessor for OwnedBeaconGroup);
          _os_log_impl( (void *)&_mh_execute_header,  v105,  v106,  "Buds from group %s report separated & separatedInCase, returning separatedInCase",  v109,  0xCu);
          swift_arrayDestroy(v110, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v110, -1LL, -1LL);
          swift_slowDealloc(v109, -1LL, -1LL);

          sub_100015794((uint64_t)v199, &qword_10099D440);
          sub_100015794((uint64_t)v208, &qword_10099D440);
          uint64_t v115 = v211;
        }

        else
        {

          sub_100018C68(v103, type metadata accessor for OwnedBeaconGroup);
          sub_100015794((uint64_t)v199, &qword_10099D440);
          sub_100015794((uint64_t)v208, &qword_10099D440);
          uint64_t v115 = v108;
        }

        sub_100015794(v115, &qword_1009B28A8);
        sub_100015794(v101, &qword_1009B28A8);
        return 4LL;
      }

      sub_100015794((uint64_t)v199, &qword_10099D440);
      sub_100015794((uint64_t)v208, &qword_10099D440);
      uint64_t v77 = v210;
    }

    unint64_t v69 = v212;
  }

  uint64_t v116 = (uint64_t (*)(void *, uint64_t, uint64_t))v192;
  if (v68)
  {
    if (!*(void *)(v67 + 16))
    {
      __break(1u);
      goto LABEL_80;
    }

    uint64_t v117 = v67 + ((*(unsigned __int8 *)(v69 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80));
    sub_10001581C(v117, (uint64_t)v29, &qword_10099D440);
    swift_bridgeObjectRetain(v67);
    if (v68 != 1)
    {
      id v158 = 1LL;
      uint64_t v5 = &qword_10099D440;
      while (v158 < *(void *)(v67 + 16))
      {
        sub_10001581C(v117 + *(void *)(v69 + 72) * v158, (uint64_t)v26, &qword_10099D440);
        if ((static Date.< infix(_:_:)(&v29[*(int *)(v77 + 48)], &v26[*(int *)(v77 + 48)]) & 1) != 0)
        {
          sub_100015794((uint64_t)v29, &qword_10099D440);
          sub_100015750((uint64_t)v26, (uint64_t)v29, &qword_10099D440);
        }

        else
        {
          sub_100015794((uint64_t)v26, &qword_10099D440);
        }

        if (v68 == ++v158) {
          goto LABEL_40;
        }
      }

      __break(1u);
      goto LABEL_78;
    }

      uint64_t v58 = v82;
      uint64_t v59 = v82 + v50;
      sub_100018C68(v81, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
      uint64_t v12 = v79;
      sub_100018C68((uint64_t)v79, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
      if (v57)
      {
        uint64_t v60 = v80;
        if (v58 < a2 || v59 >= a2)
        {
          swift_arrayInitWithTakeFrontToBack(v58 + v50, a2 + v50, 1LL, v83);
        }

        else if (v58 != a2)
        {
          swift_arrayInitWithTakeBackToFront(v58 + v50, a2 + v50);
        }

        v86 += v50;
      }

      else
      {
        uint64_t v61 = v84;
        uint64_t v62 = v84 + v50;
        v84 += v50;
        uint64_t v60 = v80;
        if (v58 < v61 || v59 >= v61)
        {
          swift_arrayInitWithTakeFrontToBack(v58 + v50, v62, 1LL, v83);
        }

        else if (v58 != v61)
        {
          swift_arrayInitWithTakeBackToFront(v58 + v50, v62);
        }

        uint64_t v51 = a2;
      }

      uint64_t v47 = v84;
      if (v84 > a4)
      {
        a2 = v51;
        a3 = v58 + v50;
        if (v51 > v60) {
          continue;
        }
      }

      goto LABEL_70;
    }
  }

  if ((v20 & 0x8000000000000000LL) == 0)
  {
    uint64_t v22 = v20 * v18;
    if (a4 < a1 || a1 + v22 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v20, v83);
    }

    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }

    unint64_t v81 = a4 + v22;
    id v84 = a4 + v22;
    uint64_t v24 = v22 < 1 || a2 >= a3;
    if (!v24)
    {
      unint64_t v80 = v18;
      while (1)
      {
        sub_10001DC4C(a2, (uint64_t)v16, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
        sub_10001DC4C(a4, v82, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
        uint64_t v25 = &v16[*(int *)(v83 + 24)];
        uint64_t v26 = type metadata accessor for BeaconKeyManager.KeyCriteria(0LL);
        if (v25[*(int *)(v26 + 20)])
        {
          if (v25[*(int *)(v26 + 20)] == 1)
          {
            swift_bridgeObjectRelease();
LABEL_29:
            sub_100018C68(v82, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
            sub_100018C68((uint64_t)v16, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
            goto LABEL_30;
          }

          uint64_t v28 = 0x6F4C657275636553LL;
          uint64_t v27 = 0xEF736E6F69746163LL;
        }

        else
        {
          uint64_t v27 = 0xE700000000000000LL;
          uint64_t v28 = 0x7972616D697250LL;
        }

        uint64_t v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v27, 0x7261646E6F636553LL, 0xE900000000000079LL, 0LL);
        swift_bridgeObjectRelease();
        if ((v29 & 1) != 0) {
          goto LABEL_29;
        }
        uint64_t v32 = v82 + *(int *)(v83 + 24);
        if (*(_BYTE *)(v32 + *(int *)(v26 + 20)))
        {
          if (*(_BYTE *)(v32 + *(int *)(v26 + 20)) == 1)
          {
            swift_bridgeObjectRelease();
LABEL_42:
            sub_100018C68(v82, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
            sub_100018C68((uint64_t)v16, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
            uint64_t v18 = v80;
LABEL_43:
            uint64_t v30 = v86;
            uint64_t v36 = v85 + v18;
            if (v86 < v85 || v86 >= v36)
            {
              swift_arrayInitWithTakeFrontToBack(v86, v85, 1LL, v83);
            }

            else if (v86 != v85)
            {
              swift_arrayInitWithTakeBackToFront(v86, v85);
            }

            unint64_t v85 = v36;
            uint64_t v31 = a2;
            goto LABEL_49;
          }

          uint64_t v34 = 0x6F4C657275636553LL;
          uint64_t v33 = 0xEF736E6F69746163LL;
        }

        else
        {
          uint64_t v33 = 0xE700000000000000LL;
          uint64_t v34 = 0x7972616D697250LL;
        }

        uint64_t v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v33, 0x7261646E6F636553LL, 0xE900000000000079LL, 0LL);
        swift_bridgeObjectRelease();
        if ((v35 & 1) != 0) {
          goto LABEL_42;
        }
        uint64_t v37 = *(int *)(v26 + 24);
        uint64_t v38 = *(void *)&v25[v37];
        uint64_t v39 = *(void *)&v25[v37 + 8];
        uint64_t v40 = v39 - v38;
        if (v39 >= v38)
        {
        }

        else
        {
          uint64_t v40 = v39 - v38;
        }

        uint64_t v41 = v40 + 1;
        if (__OFADD__(v40, 1LL)) {
          goto LABEL_112;
        }
        uint64_t v42 = (unint64_t *)(v32 + v37);
        uint64_t v43 = *v42;
        uint64_t v44 = v42[1];
        uint64_t v24 = v44 >= *v42;
        uint64_t v45 = v44 - *v42;
        if (v24)
        {
          uint64_t v18 = v80;
          if (v45 < 0) {
            goto LABEL_124;
          }
        }

        else
        {
          uint64_t v18 = v80;
          uint64_t v45 = v44 - v43;
        }

        uint64_t v46 = v45 + 1;
        if (__OFADD__(v45, 1LL)) {
          goto LABEL_114;
        }
        sub_100018C68(v82, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
        sub_100018C68((uint64_t)v16, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
        if (v41 >= v46) {
          goto LABEL_43;
        }
LABEL_30:
        uint64_t v30 = v86;
        uint64_t v31 = a2 + v18;
        if (v86 < a2 || v86 >= v31)
        {
          swift_arrayInitWithTakeFrontToBack(v86, a2, 1LL, v83);
        }

        else if (v86 == a2)
        {
          uint64_t v30 = a2;
        }

        else
        {
          swift_arrayInitWithTakeBackToFront(v86, a2);
        }

void sub_100149D28(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v64 = a2;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v5);
  uint64_t v52 = (uint64_t)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v66 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v62 = *(void *)(v66 - 8);
  uint64_t v10 = __chkstk_darwin(v66);
  uint64_t v65 = (uint64_t)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v61 = (uint64_t)&v51 - v12;
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = *(void *)(a1 + 56);
  uint64_t v57 = a1 + 56;
  uint64_t v21 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v22 = -1LL;
  if (v21 < 64) {
    uint64_t v22 = ~(-1LL << v21);
  }
  unint64_t v23 = v22 & v20;
  int64_t v58 = (unint64_t)(v21 + 63) >> 6;
  __n128 v24 = swift_bridgeObjectRetain(a1);
  int64_t v25 = 0LL;
  uint64_t v53 = a1;
  uint64_t v54 = v19;
  uint64_t v55 = a3;
  uint64_t v63 = v13;
  for (i = v16; ; (*(void (**)(char *, uint64_t))(v14 + 8))(i, v63))
  {
    if (v23)
    {
      unint64_t v26 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      unint64_t v27 = v26 | (v25 << 6);
      goto LABEL_21;
    }

    if (__OFADD__(v25++, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v25 >= v58) {
      goto LABEL_38;
    }
    unint64_t v29 = *(void *)(v57 + 8 * v25);
    if (!v29) {
      break;
    }
LABEL_20:
    unint64_t v23 = (v29 - 1) & v29;
    unint64_t v27 = __clz(__rbit64(v29)) + (v25 << 6);
LABEL_21:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v14 + 16))( v19,  *(void *)(a1 + 48) + *(void *)(v14 + 72) * v27,  v13,  v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v19, 0LL, 1LL, v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v19, 1LL, v13) == 1)
    {
      swift_release();
      return;
    }

    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v19, v13);
    uint64_t v31 = (uint64_t)v16;
    uint64_t v32 = v9;
    sub_100504F30(v31, (uint64_t)v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v9, 1LL, v66) == 1)
    {
      sub_100015794((uint64_t)v9, (uint64_t *)&unk_1009A9C30);
    }

    else
    {
      int64_t v59 = v25;
      uint64_t v33 = v61;
      sub_10002218C((uint64_t)v9, v61, type metadata accessor for OwnedBeaconRecord);
      char v34 = *a3;
      sub_10001DC4C(v33, v65, type metadata accessor for OwnedBeaconRecord);
      if ((v34 & 1) != 0)
      {
        char v35 = 1;
        int64_t v25 = v59;
      }

      else
      {
        uint64_t v36 = *(int *)(v66 + 20);
        if (qword_10099B300 != -1) {
          swift_once(&qword_10099B300, sub_1003459EC);
        }
        uint64_t v37 = v65 + v36;
        uint64_t v38 = qword_100A2A6C8;
        uint64_t v39 = objc_autoreleasePoolPush();
        uint64_t v40 = sub_100004AEC((uint64_t *)&unk_1009AF790);
        uint64_t v41 = v56;
        OS_dispatch_queue.sync<A>(execute:)(sub_1000DE20C, v38, v40);
        uint64_t v56 = v41;
        uint64_t v42 = v67;
        int64_t v25 = v59;
        if (*(void *)(v67 + 16) && (unint64_t v43 = sub_10030D124(v37), (v44 & 1) != 0))
        {
          uint64_t v45 = *(void *)(*(void *)(v42 + 56) + 8 * v43);
          swift_bridgeObjectRetain(v45);
          swift_bridgeObjectRelease();
          uint64_t v46 = sub_1002FE5F8(v45);
          swift_bridgeObjectRelease();
          sub_1002FFE1C((uint64_t)v46);
          uint64_t v48 = v47;
          swift_release();
        }

        else
        {
          swift_bridgeObjectRelease();
          uint64_t v48 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))_swiftEmptyArrayStorage;
        }

        objc_autoreleasePoolPop(v39);
        uint64_t v49 = v52;
        char v35 = sub_100518274(v52, v37, v48, 1);
        swift_bridgeObjectRelease();
        sub_100015794(v49, (uint64_t *)&unk_10099D720);
        a1 = v53;
        uint64_t v9 = v32;
      }

      sub_100018C68(v65, type metadata accessor for OwnedBeaconRecord);
      sub_100018C68(v61, type metadata accessor for OwnedBeaconRecord);
      char v50 = v35 & 1;
      uint64_t v19 = v54;
      a3 = v55;
      _BYTE *v55 = v50;
    }

    uint64_t v13 = v63;
    uint64_t v16 = i;
  }

  int64_t v30 = v25 + 1;
  if (v25 + 1 >= v58) {
    goto LABEL_38;
  }
  unint64_t v29 = *(void *)(v57 + 8 * v30);
  if (v29) {
    goto LABEL_19;
  }
  int64_t v30 = v25 + 2;
  if (v25 + 2 >= v58) {
    goto LABEL_38;
  }
  unint64_t v29 = *(void *)(v57 + 8 * v30);
  if (v29) {
    goto LABEL_19;
  }
  int64_t v30 = v25 + 3;
  if (v25 + 3 >= v58) {
    goto LABEL_38;
  }
  unint64_t v29 = *(void *)(v57 + 8 * v30);
  if (v29) {
    goto LABEL_19;
  }
  int64_t v30 = v25 + 4;
  if (v25 + 4 >= v58)
  {
LABEL_38:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v14 + 56))(v19, 1LL, 1LL, v13, v24);
    swift_release();
    return;
  }

  unint64_t v29 = *(void *)(v57 + 8 * v30);
  if (v29)
  {
LABEL_19:
    int64_t v25 = v30;
    goto LABEL_20;
  }

  while (1)
  {
    int64_t v25 = v30 + 1;
    if (__OFADD__(v30, 1LL)) {
      break;
    }
    if (v25 >= v58) {
      goto LABEL_38;
    }
    unint64_t v29 = *(void *)(v57 + 8 * v25);
    ++v30;
    if (v29) {
      goto LABEL_20;
    }
  }

unint64_t sub_10014A2C0()
{
  unint64_t result = qword_1009A23D0;
  if (!qword_1009A23D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080528C, &type metadata for BeaconManagerService.BeaconManagerServiceError);
    atomic_store(result, &qword_1009A23D0);
  }

  return result;
}

uint64_t sub_10014A304()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 9, v3 | 7);
}

uint64_t sub_10014A5B8()
{
  uint64_t v2 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v7 = *(void *)v6;
  char v8 = *(_BYTE *)(v6 + 8);
  uint64_t v9 = (void *)swift_task_alloc(dword_1009A23DC);
  *(void *)(v1 + 16) = v9;
  *uint64_t v9 = v1;
  v9[1] = sub_100015D58;
  return sub_100135F88(v4, v5, v7, v8);
}

uint64_t sub_10014A650()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 80) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((v4 + v5 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8, v3 | 7);
}

uint64_t sub_10014A92C()
{
  uint64_t v1 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 80LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_10014E604( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void (**)(void))(v0 + 48),  *(void *)(v0 + 56),  *(void *)(v0 + 64),  *(void *)(v0 + 72),  v0 + v2,  *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 23) & 0xFFFFFFFFFFFFF8LL)));
}

void sub_10014A98C(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v54 = a3;
  uint64_t v63 = a2;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v9 = *(void *)(v64 - 8);
  uint64_t v10 = __chkstk_darwin(v64);
  uint64_t v55 = (uint64_t)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v56 = v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v50 - v12;
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v66 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v17);
  unint64_t v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = *(void *)(a1 + 56);
  uint64_t v59 = a1 + 56;
  uint64_t v21 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v22 = -1LL;
  if (v21 < 64) {
    uint64_t v22 = ~(-1LL << v21);
  }
  unint64_t v23 = v22 & v20;
  int64_t v60 = (unint64_t)(v21 + 63) >> 6;
  int v53 = a4 & 1;
  __n128 v24 = swift_bridgeObjectRetain(a1);
  int64_t v25 = 0LL;
  uint64_t v57 = v8;
  uint64_t v58 = a1;
  uint64_t v61 = v19;
  uint64_t v62 = v14;
  uint64_t v51 = v13;
  uint64_t v52 = v15;
  while (1)
  {
    if (v23)
    {
      unint64_t v26 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      unint64_t v27 = v26 | (v25 << 6);
      goto LABEL_24;
    }

    int64_t v28 = v25 + 1;
    if (__OFADD__(v25, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v28 >= v60) {
      goto LABEL_29;
    }
    unint64_t v29 = *(void *)(v59 + 8 * v28);
    ++v25;
    if (!v29)
    {
      int64_t v25 = v28 + 1;
      if (v28 + 1 >= v60) {
        goto LABEL_29;
      }
      unint64_t v29 = *(void *)(v59 + 8 * v25);
      if (!v29)
      {
        int64_t v25 = v28 + 2;
        if (v28 + 2 >= v60) {
          goto LABEL_29;
        }
        unint64_t v29 = *(void *)(v59 + 8 * v25);
        if (!v29)
        {
          int64_t v25 = v28 + 3;
          if (v28 + 3 >= v60) {
            goto LABEL_29;
          }
          unint64_t v29 = *(void *)(v59 + 8 * v25);
          if (!v29) {
            break;
          }
        }
      }
    }

void sub_10014AE60(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v5 = __chkstk_darwin(v41);
  uint64_t v37 = (uint64_t)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v36 = (uint64_t)&v33 - v7;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v39 = a1 + 56;
  uint64_t v16 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v17 = -1LL;
  if (v16 < 64) {
    uint64_t v17 = ~(-1LL << v16);
  }
  unint64_t v18 = v17 & v15;
  int64_t v40 = (unint64_t)(v16 + 63) >> 6;
  __n128 v19 = swift_bridgeObjectRetain(a1);
  int64_t v20 = 0LL;
  uint64_t v38 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v18)
    {
      unint64_t v21 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v22 = v21 | (v20 << 6);
      goto LABEL_22;
    }

    int64_t v23 = v20 + 1;
    if (__OFADD__(v20, 1LL))
    {
      __break(1u);
      goto LABEL_33;
    }

    if (v23 >= v40) {
      goto LABEL_30;
    }
    unint64_t v24 = *(void *)(v39 + 8 * v23);
    ++v20;
    if (!v24)
    {
      int64_t v20 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_30;
      }
      unint64_t v24 = *(void *)(v39 + 8 * v20);
      if (!v24)
      {
        int64_t v20 = v23 + 2;
        if (v23 + 2 >= v40) {
          goto LABEL_30;
        }
        unint64_t v24 = *(void *)(v39 + 8 * v20);
        if (!v24)
        {
          int64_t v20 = v23 + 3;
          if (v23 + 3 >= v40) {
            goto LABEL_30;
          }
          unint64_t v24 = *(void *)(v39 + 8 * v20);
          if (!v24) {
            break;
          }
        }
      }
    }

void *sub_10014B2A8(uint64_t a1, uint64_t a2)
{
  v23[3] = a2;
  uint64_t v4 = sub_100004AEC(&qword_1009A2568);
  __chkstk_darwin(v4);
  uint64_t v6 = (void *)((char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v22 = type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0LL);
  uint64_t v7 = *(void *)(v22 - 8);
  uint64_t v8 = __chkstk_darwin(v22);
  uint64_t v21 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v20 - v10;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain(a1);
  v20[1] = a1;
  uint64_t v13 = (unint64_t *)(a1 + 40);
  uint64_t v14 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v15 = *(v13 - 1);
    unint64_t v16 = *v13;
    v23[0] = v15;
    v23[1] = v16;
    sub_10001736C(v15, v16);
    sub_10013708C(v23, v6);
    if (v2)
    {
      sub_100016F9C(v15, v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v14;
    }

    sub_100016F9C(v15, v16);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(v6, 1LL, v22) == 1)
    {
      sub_100015794((uint64_t)v6, &qword_1009A2568);
    }

    else
    {
      sub_10002218C((uint64_t)v6, (uint64_t)v11, type metadata accessor for AirPodsUnpairData.DeviceUnpairData);
      sub_10002218C((uint64_t)v11, v21, type metadata accessor for AirPodsUnpairData.DeviceUnpairData);
      if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0) {
        uint64_t v14 = (void *)sub_1004C5224(0, v14[2] + 1LL, 1, (unint64_t)v14);
      }
      unint64_t v18 = v14[2];
      unint64_t v17 = v14[3];
      if (v18 >= v17 >> 1) {
        uint64_t v14 = (void *)sub_1004C5224(v17 > 1, v18 + 1, 1, (unint64_t)v14);
      }
      v14[2] = v18 + 1;
      sub_10002218C( v21,  (uint64_t)v14 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
      + *(void *)(v7 + 72) * v18,
        type metadata accessor for AirPodsUnpairData.DeviceUnpairData);
    }

    v13 += 2;
    --v12;
  }

  while (v12);
  swift_bridgeObjectRelease();
  return v14;
}

void *sub_10014B504(uint64_t a1, uint64_t a2)
{
  uint64_t v46 = a2;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v44 = *(void *)(v4 - 8);
  uint64_t v45 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v42 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v41 = (char *)v37 - v8;
  uint64_t v43 = v9;
  __chkstk_darwin(v7);
  int64_t v40 = (char *)v37 - v10;
  uint64_t v11 = *(void *)(a1 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v11)
  {
    v37[1] = v2;
    uint64_t v50 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v11);
    unint64_t result = (void *)sub_1006F6728(a1);
    uint64_t v14 = (uint64_t)result;
    int v16 = v15 & 1;
    uint64_t v38 = a1;
    uint64_t v39 = a1 + 56;
    uint64_t v17 = v44;
    uint64_t v18 = v45;
    __n128 v19 = v41;
    while ((v14 & 0x8000000000000000LL) == 0 && v14 < 1LL << *(_BYTE *)(a1 + 32))
    {
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v13) {
        goto LABEL_12;
      }
      uint64_t v20 = *(void *)(a1 + 48);
      uint64_t v21 = *(void *)(v17 + 72);
      uint64_t v48 = v13;
      uint64_t v49 = v11;
      uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
      int64_t v23 = v40;
      int v47 = v16;
      v22(v40, v20 + v21 * v14, v18);
      unint64_t v24 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
      v24(v19, v23, v18);
      int64_t v25 = v42;
      v22(v42, (uint64_t)v19, v18);
      uint64_t v26 = *(unsigned __int8 *)(v17 + 80);
      uint64_t v27 = (v26 + 24) & ~v26;
      uint64_t v28 = swift_allocObject(&unk_10093FDF8, v27 + v43, v26 | 7);
      *(void *)(v28 + 16) = v46;
      unint64_t v29 = v25;
      uint64_t v30 = v49;
      v24((char *)(v28 + v27), v29, v18);
      uint64_t v31 = sub_100004AEC(&qword_1009A24D0);
      swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
      a1 = v38;
      swift_retain();
      uint64_t v32 = Future.init(_:)(sub_100152BE4, v28);
      uint64_t v33 = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v18);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v33);
      uint64_t v34 = v50[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v34);
      uint64_t v35 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v34, v32);
      specialized ContiguousArray._endMutation()(v35);
      unint64_t result = (void *)sub_1001FE5FC(v14, v48, v47 & 1, a1);
      uint64_t v14 = (uint64_t)result;
      int v16 = v36 & 1;
      uint64_t v11 = v30 - 1;
      if (!v11)
      {
        sub_100086B14((uint64_t)result, v13, v16);
        return v50;
      }
    }

    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }

  return result;
}

uint64_t sub_10014B7A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v43 = a3;
  uint64_t v52 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v50 = *(void *)(v4 - 8);
  uint64_t v51 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v48 = *(void *)(v7 - 8);
  uint64_t v49 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v44 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v42 = (uint64_t)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  unint64_t v47 = (unint64_t)&v42 - v19;
  uint64_t v45 = *(void **)(a1 + 256);
  sub_1004F730C();
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100153864);
  uint64_t v20 = swift_release();
  if (LOBYTE(aBlock[0]) != 1) {
    goto LABEL_9;
  }
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  char v21 = sub_1006A0BB8(aBlock[0]);
  uint64_t v20 = swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
  {
    uint64_t v22 = (void *)swift_allocObject(&unk_100940460, 40LL, 7LL);
    uint64_t v23 = v43;
    v22[2] = v52;
    v22[3] = v23;
    v22[4] = a1;
    swift_retain();
    swift_retain();
    uint64_t v24 = swift_retain();
    uint64_t v25 = static os_log_type_t.default.getter(v24);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v25,  &_mh_execute_header,  qword_100A2B018,  "Creating record for local device on serial queue.",  49LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v26 = objc_autoreleasePoolPush();
    uint64_t v27 = v47;
    uint64_t v28 = v45;
    sub_10051D3B0((uint64_t)v45, (uint64_t)sub_100153960, (unint64_t)v22, v47);
    objc_autoreleasePoolPop(v26);
    sub_10001581C(v27, (uint64_t)v18, (uint64_t *)&unk_1009A9C30);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v18, 1LL, v46) == 1)
    {
      sub_100015794(v27, (uint64_t *)&unk_1009A9C30);
      uint64_t v29 = (uint64_t)v18;
    }

    else
    {
      uint64_t v40 = v42;
      sub_10002218C((uint64_t)v18, v42, type metadata accessor for OwnedBeaconRecord);
      swift_retain();
      swift_retain();
      sub_1005518C0(v40, 0, v28, (uint64_t)v28, (uint64_t)sub_100153960, (uint64_t)v22);
      swift_release();
      swift_release();
      sub_100018C68(v40, type metadata accessor for OwnedBeaconRecord);
      uint64_t v29 = v27;
    }

    sub_100015794(v29, (uint64_t *)&unk_1009A9C30);
  }

  else
  {
LABEL_9:
    uint64_t v30 = static os_log_type_t.default.getter(v20);
    if (qword_10099B748 != -1) {
      swift_once(&qword_10099B748, sub_100651480);
    }
    os_log(_:dso:log:_:_:)( v30,  &_mh_execute_header,  qword_100A2B058,  "Self beaconing is not supported on this device.",  47LL,  2LL,  _swiftEmptyArrayStorage);
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    (*(void (**)(char *, void, uint64_t))(v11 + 104))( v13,  enum case for DispatchQoS.QoSClass.default(_:),  v10);
    uint64_t v31 = (void *)static OS_dispatch_queue.global(qos:)(v13);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v32 = swift_allocObject(&unk_100940410, 32LL, 7LL);
    uint64_t v33 = v52;
    *(void *)(v32 + 16) = a1;
    *(void *)(v32 + 24) = v33;
    aBlock[4] = (uint64_t)sub_100153920;
    aBlock[5] = v32;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1001C31E8;
    aBlock[3] = (uint64_t)&unk_100940428;
    uint64_t v34 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v35 = swift_retain();
    static DispatchQoS.unspecified.getter(v35);
    int v53 = _swiftEmptyArrayStorage;
    uint64_t v36 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v37 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v38 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v39 = v51;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v53, v37, v38, v51, v36);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v6, v34);
    _Block_release(v34);

    (*(void (**)(char *, uint64_t))(v50 + 8))(v6, v39);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v9, v49);
  }

  return swift_release();
}

uint64_t sub_10014BD74(uint64_t a1, int a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  int v100 = a2;
  uint64_t v9 = type metadata accessor for ShareRecord(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v96 = *(void *)(v13 - 8);
  uint64_t v97 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  Class v95 = (char *)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v94 = (char *)&v85 - v16;
  uint64_t v17 = type metadata accessor for OwnedBeaconRecord(0LL);
  *(void *)&__int128 v101 = *(void *)(v17 - 8);
  uint64_t v18 = *(void *)(v101 + 64);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v98 = (uint64_t)&v85 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v106 = (uint64_t)&v85 - v21;
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v85 - v22;
  uint64_t v24 = swift_allocObject(&unk_10093FF60, 32LL, 7LL);
  NSString v88 = a4;
  *(void *)(v24 + 16) = a4;
  *(void *)(v24 + 24) = a5;
  uint64_t v104 = v24;
  uint64_t v103 = *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_localPairingMonitor);
  uint64_t v25 = *(void *)(a3 + 256);
  uint64_t v87 = v17;
  uint64_t v26 = *(int *)(v17 + 20);
  uint64_t v105 = a1;
  uint64_t v27 = a1 + v26;
  uint64_t v99 = v25;
  uint64_t v89 = a5;
  swift_retain();
  uint64_t v102 = v27;
  uint64_t v28 = sub_1005777D8();
  uint64_t v29 = v28[2];
  if (v29)
  {
    Class v93 = v23;
    uint64_t v30 = (uint64_t)v28 + ((*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v31 = *(void *)(v10 + 72);
    while (1)
    {
      sub_10001DC4C(v30, (uint64_t)v12, type metadata accessor for ShareRecord);
      if (!*(void *)(a3 + 40)) {
        break;
      }
      swift_retain();
      sub_1001DD324((uint64_t)v12, (uint64_t)sub_10013C010, 0LL);
      swift_release();
      sub_100018C68((uint64_t)v12, type metadata accessor for ShareRecord);
      v30 += v31;
      if (!--v29)
      {
        swift_bridgeObjectRelease();
        uint64_t v23 = v93;
        goto LABEL_7;
      }
    }

    uint64_t result = swift_release();
    __break(1u);
  }

  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    sub_10001DC4C(v105, (uint64_t)v23, type metadata accessor for OwnedBeaconRecord);
    sub_10001DC4C((uint64_t)v23, v106, type metadata accessor for OwnedBeaconRecord);
    uint64_t v32 = *(unsigned __int8 *)(v101 + 80);
    uint64_t v33 = (v32 + 16) & ~v32;
    unint64_t v34 = (v18 + v33 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v35 = (v34 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v36 = (v35 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v90 = v32 | 7;
    uint64_t v37 = swift_allocObject(&unk_10093FF88, v36 + 8, v32 | 7);
    uint64_t v91 = v33;
    sub_10002218C((uint64_t)v23, v37 + v33, type metadata accessor for OwnedBeaconRecord);
    unint64_t v92 = v34;
    Class v93 = (char *)v35;
    uint64_t v38 = (uint64_t (**)(uint64_t))(v37 + v34);
    uint64_t v40 = v103;
    uint64_t v39 = (uint64_t (*)(uint64_t))v104;
    *uint64_t v38 = sub_100153498;
    v38[1] = v39;
    *(void *)(v37 + v35) = v40;
    *(void *)(v37 + v36) = a3;
    swift_retain_n(v39, 2LL);
    swift_retain_n(v40, 2LL);
    uint64_t v41 = swift_retain_n(a3, 2LL);
    uint64_t v42 = static os_log_type_t.default.getter(v41);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v43 = qword_100A2B018;
    uint64_t v86 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v44 = swift_allocObject(v86, 72LL, 7LL);
    __int128 v101 = xmmword_1007E67D0;
    *(_OWORD *)(v44 + 16) = xmmword_1007E67D0;
    uint64_t v45 = type metadata accessor for UUID(0LL);
    uint64_t v85 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter(v45, v85);
    uint64_t v48 = v47;
    *(void *)(v44 + 56) = &type metadata for String;
    unint64_t v49 = sub_1000226F4();
    *(void *)(v44 + 64) = v49;
    *(void *)(v44 + 32) = v46;
    *(void *)(v44 + 40) = v48;
    os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, v43, "Unpair owned beacon: %@", 23LL, 2LL, v44);
    uint64_t v50 = swift_bridgeObjectRelease();
    uint64_t v51 = v94;
    static SystemInfo.lockState.getter(v50);
    int v53 = v95;
    uint64_t v52 = v96;
    uint64_t v54 = v97;
    (*(void (**)(char *, void, uint64_t))(v96 + 104))( v95,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v97);
    uint64_t v55 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
    dispatch thunk of RawRepresentable.rawValue.getter(&v108, v54, v55);
    dispatch thunk of RawRepresentable.rawValue.getter(&v107, v54, v55);
    uint64_t v57 = v107;
    uint64_t v56 = v108;
    uint64_t v58 = *(void (**)(char *, uint64_t))(v52 + 8);
    v58(v53, v54);
    uint64_t v59 = ((uint64_t (*)(char *, uint64_t))v58)(v51, v54);
    if (v56 == v57)
    {
      uint64_t v60 = static os_log_type_t.default.getter(v59);
      os_log(_:dso:log:_:_:)( v60,  &_mh_execute_header,  qword_100A2B018,  "unpair call failed because in device is in beforeFirstUnlock state",  66LL,  2LL,  _swiftEmptyArrayStorage);
      unint64_t v61 = sub_1000220F0();
      uint64_t v62 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v61, 0LL, 0LL);
      *uint64_t v63 = 0;
      uint64_t v64 = static os_log_type_t.default.getter(v62);
      if (qword_10099B748 != -1) {
        swift_once(&qword_10099B748, sub_100651480);
      }
      uint64_t v65 = qword_100A2B058;
      uint64_t v66 = swift_allocObject(v86, 72LL, 7LL);
      *(_OWORD *)(v66 + 16) = v101;
      uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter(v45, v85);
      *(void *)(v66 + 56) = &type metadata for String;
      *(void *)(v66 + 64) = v49;
      *(void *)(v66 + 32) = v67;
      *(void *)(v66 + 40) = v68;
      os_log(_:dso:log:_:_:)(v64, &_mh_execute_header, v65, "Unpair for beacon, %@, unsuccessful", 35LL, 2LL, v66);
      swift_bridgeObjectRelease();
      swift_errorRetain(v62);
      v88(v62, 1LL);
      swift_errorRelease(v62);
      swift_errorRelease(v62);
    }

    unint64_t v69 = dispatch_group_create();
    dispatch_group_enter(v69);
    uint64_t v70 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
    uint64_t v71 = *(void *)(v45 - 8);
    uint64_t v72 = *(unsigned __int8 *)(v71 + 80);
    uint64_t v73 = (v72 + 32) & ~v72;
    uint64_t v74 = swift_allocObject(v70, v73 + *(void *)(v71 + 72), v72 | 7);
    *(_OWORD *)(v74 + 16) = v101;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 16))(v74 + v73, v102, v45);
    uint64_t v75 = swift_allocObject(&unk_10093FFB0, 24LL, 7LL);
    *(void *)(v75 + 16) = v69;
    unint64_t v76 = v69;
    uint64_t v77 = v99;
    sub_10047B904(v74, (uint64_t)sub_100154694, v75);
    swift_bridgeObjectRelease();
    swift_release();
    OS_dispatch_group.wait()();
    uint64_t v78 = v105;
    uint64_t v79 = v98;
    sub_10001DC4C(v105, v98, type metadata accessor for OwnedBeaconRecord);
    unint64_t v80 = v93;
    uint64_t v81 = swift_allocObject(&unk_10093FFD8, v93 + 10, v90);
    sub_10002218C(v79, v81 + v91, type metadata accessor for OwnedBeaconRecord);
    uint64_t v82 = (uint64_t (**)(uint64_t))(v81 + v92);
    char *v82 = sub_10014F0B4;
    v82[1] = (uint64_t (*)(uint64_t))v37;
    unint64_t v83 = &v80[v81];
    *(void *)unint64_t v83 = v77;
    v83[8] = v100 & 1;
    v83[9] = 1;
    swift_retain();
    swift_retain();
    sub_10013F7C0( v78,  (void (*)(void))sub_10014F0C8,  v81,  type metadata accessor for OwnedBeaconRecord,  &qword_10099B610,  (uint64_t)qword_100A2AE80,  (uint64_t)sub_100154730,  (uint64_t)sub_10014F0CC,  (uint64_t)sub_100021ABC,  (uint64_t)&unk_10093FB00,  (uint64_t)sub_10014F0EC,  byte_10093FB28,  (char *)sub_10014F3D4,  (uint64_t)sub_1005D3C50);
    swift_release();
    swift_release();

    sub_100018C68(v106, type metadata accessor for OwnedBeaconRecord);
    swift_release();
    swift_release();
    return swift_release_n(v104, 2LL);
  }

  return result;
}

void sub_10014C58C(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  int v103 = a2;
  uint64_t v7 = type metadata accessor for ShareRecord(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v99 = *(void *)(v11 - 8);
  uint64_t v100 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v98 = (char *)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v97 = (char *)&v87 - v14;
  uint64_t v15 = type metadata accessor for OwnedBeaconRecord(0LL);
  *(void *)&__int128 v105 = *(void *)(v15 - 8);
  uint64_t v16 = *(void *)(v105 + 64);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v102 = (uint64_t)&v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v87 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v87 - v21;
  uint64_t v23 = swift_allocObject(&unk_100940578, 24LL, 7LL);
  *(void *)(v23 + 16) = a4;
  uint64_t v24 = swift_allocObject(&unk_1009405A0, 32LL, 7LL);
  *(void *)(v24 + 16) = sub_10009C9E4;
  *(void *)(v24 + 24) = v23;
  uint64_t v109 = v24;
  uint64_t v108 = *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_localPairingMonitor);
  uint64_t v25 = *(void *)(a3 + 256);
  uint64_t v91 = v15;
  uint64_t v26 = *(int *)(v15 + 20);
  uint64_t v110 = a1;
  uint64_t v27 = a1 + v26;
  uint64_t v101 = v25;
  unint64_t v92 = a4;
  _Block_copy(a4);
  uint64_t v104 = v23;
  swift_retain();
  uint64_t v107 = v27;
  uint64_t v28 = sub_1005777D8();
  uint64_t v29 = v28[2];
  uint64_t v106 = v20;
  if (v29)
  {
    uint64_t v96 = v22;
    uint64_t v30 = (uint64_t)v28 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v31 = *(void *)(v8 + 72);
    while (1)
    {
      sub_10001DC4C(v30, (uint64_t)v10, type metadata accessor for ShareRecord);
      if (!*(void *)(a3 + 40)) {
        break;
      }
      swift_retain();
      sub_1001DD324((uint64_t)v10, (uint64_t)sub_10013C010, 0LL);
      swift_release();
      sub_100018C68((uint64_t)v10, type metadata accessor for ShareRecord);
      v30 += v31;
      if (!--v29)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = v106;
        uint64_t v22 = v96;
        goto LABEL_7;
      }
    }

    swift_release();
    _Block_release(v92);
    __break(1u);
  }

  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    sub_10001DC4C(v110, (uint64_t)v22, type metadata accessor for OwnedBeaconRecord);
    sub_10001DC4C((uint64_t)v22, (uint64_t)v20, type metadata accessor for OwnedBeaconRecord);
    uint64_t v32 = *(unsigned __int8 *)(v105 + 80);
    uint64_t v33 = (v32 + 16) & ~v32;
    unint64_t v34 = (v16 + v33 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v35 = (v34 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v36 = (v35 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v93 = v32 | 7;
    uint64_t v37 = swift_allocObject(&unk_1009405C8, v36 + 8, v32 | 7);
    uint64_t v94 = v33;
    sub_10002218C((uint64_t)v22, v37 + v33, type metadata accessor for OwnedBeaconRecord);
    unint64_t v95 = v34;
    uint64_t v96 = (char *)v35;
    uint64_t v38 = (uint64_t (**)(uint64_t))(v37 + v34);
    uint64_t v40 = v108;
    uint64_t v39 = (uint64_t (*)(uint64_t))v109;
    *uint64_t v38 = sub_10009BF1C;
    v38[1] = v39;
    *(void *)(v37 + v35) = v40;
    *(void *)(v37 + v36) = a3;
    swift_retain_n(v39, 2LL);
    swift_retain_n(v40, 2LL);
    uint64_t v41 = swift_retain_n(a3, 2LL);
    uint64_t v42 = static os_log_type_t.default.getter(v41);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v43 = qword_100A2B018;
    uint64_t v90 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v44 = swift_allocObject(v90, 72LL, 7LL);
    __int128 v105 = xmmword_1007E67D0;
    *(_OWORD *)(v44 + 16) = xmmword_1007E67D0;
    uint64_t v45 = type metadata accessor for UUID(0LL);
    uint64_t v89 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter(v45, v89);
    uint64_t v48 = v47;
    *(void *)(v44 + 56) = &type metadata for String;
    unint64_t v88 = sub_1000226F4();
    *(void *)(v44 + 64) = v88;
    *(void *)(v44 + 32) = v46;
    *(void *)(v44 + 40) = v48;
    os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, v43, "Unpair owned beacon: %@", 23LL, 2LL, v44);
    uint64_t v49 = swift_bridgeObjectRelease();
    uint64_t v50 = v97;
    static SystemInfo.lockState.getter(v49);
    uint64_t v52 = v98;
    uint64_t v51 = v99;
    uint64_t v53 = v100;
    (*(void (**)(char *, void, uint64_t))(v99 + 104))( v98,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v100);
    uint64_t v54 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
    dispatch thunk of RawRepresentable.rawValue.getter(&v112, v53, v54);
    dispatch thunk of RawRepresentable.rawValue.getter(&v111, v53, v54);
    uint64_t v56 = v111;
    uint64_t v55 = v112;
    uint64_t v57 = *(void (**)(char *, uint64_t))(v51 + 8);
    v57(v52, v53);
    uint64_t v58 = ((uint64_t (*)(char *, uint64_t))v57)(v50, v53);
    uint64_t v59 = (uint64_t)v106;
    if (v55 == v56)
    {
      uint64_t v60 = static os_log_type_t.default.getter(v58);
      os_log(_:dso:log:_:_:)( v60,  &_mh_execute_header,  qword_100A2B018,  "unpair call failed because in device is in beforeFirstUnlock state",  66LL,  2LL,  _swiftEmptyArrayStorage);
      unint64_t v61 = sub_1000220F0();
      uint64_t v62 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v61, 0LL, 0LL);
      *uint64_t v63 = 0;
      uint64_t v64 = static os_log_type_t.default.getter(v62);
      if (qword_10099B748 != -1) {
        swift_once(&qword_10099B748, sub_100651480);
      }
      uint64_t v65 = qword_100A2B058;
      uint64_t v66 = swift_allocObject(v90, 72LL, 7LL);
      *(_OWORD *)(v66 + 16) = v105;
      uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter(v45, v89);
      unint64_t v68 = v88;
      *(void *)(v66 + 56) = &type metadata for String;
      *(void *)(v66 + 64) = v68;
      *(void *)(v66 + 32) = v67;
      *(void *)(v66 + 40) = v69;
      os_log(_:dso:log:_:_:)(v64, &_mh_execute_header, v65, "Unpair for beacon, %@, unsuccessful", 35LL, 2LL, v66);
      swift_bridgeObjectRelease();
      uint64_t v70 = (void (**)(const void *, void *))v92;
      _Block_copy(v92);
      uint64_t v71 = (void *)_convertErrorToNSError(_:)(v62);
      v70[2](v70, v71);

      _Block_release(v70);
      swift_errorRelease(v62);
    }

    uint64_t v72 = dispatch_group_create();
    dispatch_group_enter(v72);
    uint64_t v73 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
    uint64_t v74 = *(void *)(v45 - 8);
    uint64_t v75 = *(unsigned __int8 *)(v74 + 80);
    uint64_t v76 = (v75 + 32) & ~v75;
    uint64_t v77 = swift_allocObject(v73, v76 + *(void *)(v74 + 72), v75 | 7);
    *(_OWORD *)(v77 + 16) = v105;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 16))(v77 + v76, v107, v45);
    uint64_t v78 = swift_allocObject(&unk_1009405F0, 24LL, 7LL);
    *(void *)(v78 + 16) = v72;
    uint64_t v79 = v72;
    uint64_t v80 = v101;
    sub_10047B904(v77, (uint64_t)sub_100154694, v78);
    swift_bridgeObjectRelease();
    swift_release();
    OS_dispatch_group.wait()();
    uint64_t v81 = v110;
    uint64_t v82 = v102;
    sub_10001DC4C(v110, v102, type metadata accessor for OwnedBeaconRecord);
    unint64_t v83 = v96;
    uint64_t v84 = swift_allocObject(&unk_100940618, v96 + 10, v93);
    sub_10002218C(v82, v84 + v94, type metadata accessor for OwnedBeaconRecord);
    uint64_t v85 = (uint64_t (**)(uint64_t))(v84 + v95);
    *uint64_t v85 = sub_10014F0B4;
    v85[1] = (uint64_t (*)(uint64_t))v37;
    uint64_t v86 = &v83[v84];
    *(void *)uint64_t v86 = v80;
    v86[8] = v103 & 1;
    v86[9] = 1;
    swift_retain();
    swift_retain();
    sub_10013F7C0( v81,  (void (*)(void))sub_10014F0C8,  v84,  type metadata accessor for OwnedBeaconRecord,  &qword_10099B610,  (uint64_t)qword_100A2AE80,  (uint64_t)sub_100154730,  (uint64_t)sub_10014F0CC,  (uint64_t)sub_100021ABC,  (uint64_t)&unk_10093FB00,  (uint64_t)sub_10014F0EC,  byte_10093FB28,  (char *)sub_10014F3D4,  (uint64_t)sub_1005D3C50);
    swift_release();
    swift_release();

    sub_100018C68(v59, type metadata accessor for OwnedBeaconRecord);
    swift_release();
    swift_release();
    swift_release();
    swift_release_n(v109, 2LL);
  }

void sub_10014CE00()
{
  uint64_t v0 = sub_100004AEC(&qword_1009A2668);
  __chkstk_darwin(v0);
  uint64_t v98 = (char *)&v89 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v109 = v2;
  uint64_t v110 = v3;
  __chkstk_darwin(v2);
  uint64_t v106 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v111 = type metadata accessor for URL(0LL);
  uint64_t v115 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  uint64_t v6 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v97 = type metadata accessor for DirectorySequence(0LL);
  uint64_t v96 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v116 = (char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Calendar.Component(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Calendar(0LL);
  uint64_t v113 = *(void *)(v15 - 8);
  id v114 = (uint64_t (*)(char *, uint64_t, uint64_t))v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v19 = __chkstk_darwin(v18);
  __int128 v105 = (char *)&v89 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v89 - v21;
  uint64_t v23 = type metadata accessor for Date(0LL);
  uint64_t v24 = *(void **)(v23 - 8);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v99 = (char *)&v89 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v89 - v28;
  __chkstk_darwin(v27);
  int v103 = (char *)&v89 - v30;
  id v104 = [(id)objc_opt_self(NSFileManager) defaultManager];
  static Calendar.current.getter(v104);
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for Calendar.Component.day(_:), v11);
  static Date.trustedNow.getter((uint64_t)v29);
  Calendar.date(byAdding:value:to:wrappingComponents:)(v14, -35LL, v29, 0LL);
  uint64_t v100 = (void (*)(char *, uint64_t))v24[1];
  v100(v29, v23);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  (*(void (**)(char *, uint64_t (*)(char *, uint64_t, uint64_t)))(v113 + 8))(v17, v114);
  uint64_t v101 = (unsigned int (*)(char *, uint64_t, uint64_t))v24[6];
  if (v101(v22, 1LL, v23) != 1)
  {
    unint64_t v95 = (void (*)(void))v24[4];
    uint64_t v33 = ((uint64_t (*)(char *, char *, uint64_t))v95)(v103, v22, v23);
    uint64_t v34 = static os_log_type_t.default.getter(v33);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v35 = qword_100A2B018;
    uint64_t v36 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v37 = swift_allocObject(v36, 72LL, 7LL);
    __int128 v94 = xmmword_1007E67D0;
    *(_OWORD *)(v37 + 16) = xmmword_1007E67D0;
    uint64_t v38 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v102 = v23;
    uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter(v23, v38);
    uint64_t v41 = v40;
    *(void *)(v37 + 56) = &type metadata for String;
    unint64_t v93 = sub_1000226F4();
    *(void *)(v37 + 64) = v93;
    *(void *)(v37 + 32) = v39;
    *(void *)(v37 + 40) = v41;
    os_log(_:dso:log:_:_:)( v34,  &_mh_execute_header,  v35,  "removeExpiredNotificationRecordTombstones() threshold: %{public}@",  65LL,  2LL,  v37);
    swift_bridgeObjectRelease();
    uint64_t v42 = v111;
    if (qword_10099B1A8 != -1) {
      swift_once(&qword_10099B1A8, sub_1001BB8C8);
    }
    uint64_t v43 = sub_10000A720(v42, (uint64_t)qword_100A2A338);
    uint64_t v44 = NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)(v43, 0LL, 0LL);
    uint64_t v45 = v111;
    DirectorySequence.next()(v44);
    id v114 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v115 + 48);
    int v46 = v114(v9, 1LL, v45);
    uint64_t v47 = v98;
    if (v46 == 1)
    {
LABEL_10:

      (*(void (**)(char *, uint64_t))(v96 + 8))(v116, v97);
      v100(v103, v102);
      return;
    }

    uint64_t v113 = *(void *)(v115 + 32);
    NSURLResourceKey v108 = NSURLCreationDateKey;
    unint64_t v112 = (unint64_t)"shold: %{public}@";
    unint64_t v107 = 0x8000000100855C50LL;
    __int128 v91 = xmmword_1007E4750;
    uint64_t v92 = v36;
    for (uint64_t i = ((uint64_t (*)(char *, char *, uint64_t))v113)(v6, v9, v45);
          ;
          uint64_t i = ((uint64_t (*)(char *, char *, uint64_t))v113)(v6, v9, v45))
    {
      uint64_t v52 = URL.pathExtension.getter(i);
      if (v52 == 0xD000000000000010LL && v53 == v107)
      {
        swift_bridgeObjectRelease();
      }

      else
      {
        char v54 = _stringCompareWithSmolCheck(_:_:expecting:)( v52,  v53,  0xD000000000000010LL,  v112 | 0x8000000000000000LL,  0LL);
        swift_bridgeObjectRelease();
        if ((v54 & 1) == 0)
        {
          uint64_t v51 = (*(uint64_t (**)(char *, uint64_t))(v115 + 8))(v6, v45);
          goto LABEL_14;
        }
      }

      type metadata accessor for URLResourceKey(0LL);
      sub_100007864( &qword_10099C380,  (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey,  (uint64_t)&unk_1007E34FC);
      uint64_t v55 = v108;
      id v118 = (id)Set.init(minimumCapacity:)(1LL);
      uint64_t v56 = v55;
      sub_1000BE588(&v117, v56);
      uint64_t v57 = v117;

      URL.resourceValues(forKeys:)(v118);
      swift_bridgeObjectRelease();
      uint64_t v58 = v109;
      uint64_t v59 = v110;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v110 + 56))(v47, 0LL, 1LL, v109);
      int v60 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 48))(v47, 1LL, v58);
      uint64_t v62 = v105;
      unint64_t v61 = v106;
      if (v60 == 1)
      {
        uint64_t v45 = v111;
        (*(void (**)(char *, uint64_t))(v115 + 8))(v6, v111);
        uint64_t v49 = (uint64_t)v47;
        uint64_t v50 = &qword_1009A2668;
LABEL_13:
        uint64_t v51 = sub_100015794(v49, v50);
        goto LABEL_14;
      }

      uint64_t v63 = (*(uint64_t (**)(char *, char *, uint64_t))(v59 + 32))(v106, v47, v58);
      URLResourceValues.creationDate.getter(v63);
      uint64_t v64 = v102;
      if (v101(v62, 1LL, v102) == 1)
      {
        (*(void (**)(char *, uint64_t))(v59 + 8))(v61, v58);
        uint64_t v45 = v111;
        (*(void (**)(char *, uint64_t))(v115 + 8))(v6, v111);
        uint64_t v49 = (uint64_t)v62;
        uint64_t v50 = (uint64_t *)&unk_10099D720;
        goto LABEL_13;
      }

      uint64_t v65 = v99;
      v95();
      uint64_t v66 = static Date.< infix(_:_:)(v65, v103);
      if ((v66 & 1) != 0)
      {
        uint64_t v67 = static os_log_type_t.default.getter(v66);
        uint64_t v68 = qword_100A2B018;
        uint64_t v69 = swift_allocObject(v92, 72LL, 7LL);
        *(_OWORD *)(v69 + 16) = v94;
        uint64_t v70 = URL.absoluteString.getter();
        unint64_t v71 = v93;
        *(void *)(v69 + 56) = &type metadata for String;
        *(void *)(v69 + 64) = v71;
        *(void *)(v69 + 32) = v70;
        *(void *)(v69 + 40) = v72;
        os_log(_:dso:log:_:_:)( v67,  &_mh_execute_header,  v68,  "Purging expired tombstoned notification record: %@",  50LL,  2LL,  v69);
        swift_bridgeObjectRelease();
        URL._bridgeToObjectiveC()(v73);
        uint64_t v75 = v74;
        id v118 = 0LL;
        LODWORD(v67) = [v104 removeItemAtURL:v74 error:&v118];

        id v76 = v118;
        if ((_DWORD)v67)
        {
          id v77 = v118;
        }

        else
        {
          id v78 = v118;
          uint64_t v79 = (void *)_convertNSErrorToError(_:)(v76);

          uint64_t v81 = swift_willThrow(v80);
          uint64_t v82 = static os_log_type_t.error.getter(v81);
          uint64_t v90 = qword_100A2B018;
          uint64_t v83 = swift_allocObject(v92, 112LL, 7LL);
          *(_OWORD *)(v83 + 16) = v91;
          uint64_t v84 = URL.absoluteString.getter();
          *(void *)(v83 + 56) = &type metadata for String;
          *(void *)(v83 + 64) = v71;
          *(void *)(v83 + 32) = v84;
          *(void *)(v83 + 40) = v85;
          id v118 = v79;
          swift_errorRetain(v79);
          uint64_t v86 = sub_100004AEC((uint64_t *)&unk_1009A5470);
          uint64_t v87 = String.init<A>(describing:)(&v118, v86);
          *(void *)(v83 + 96) = &type metadata for String;
          *(void *)(v83 + 104) = v71;
          *(void *)(v83 + 72) = v87;
          *(void *)(v83 + 80) = v88;
          os_log(_:dso:log:_:_:)(v82, &_mh_execute_header, v90, "Error deleting URL %@: %@", 25LL, 2LL, v83);
          swift_bridgeObjectRelease();
          swift_errorRelease(v79);
        }

        v100(v99, v102);
        (*(void (**)(char *, uint64_t))(v110 + 8))(v106, v58);
        uint64_t v45 = v111;
        uint64_t v51 = (*(uint64_t (**)(char *, uint64_t))(v115 + 8))(v6, v111);
        uint64_t v47 = v98;
      }

      else
      {
        v100(v65, v64);
        (*(void (**)(char *, uint64_t))(v59 + 8))(v61, v58);
        uint64_t v45 = v111;
        uint64_t v51 = (*(uint64_t (**)(char *, uint64_t))(v115 + 8))(v6, v111);
      }

uint64_t sub_10014D920(uint64_t a1, uint64_t a2)
{
  uint64_t v96 = a2;
  uint64_t v91 = a1;
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v2);
  uint64_t v92 = (uint64_t)&v82 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v93 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v89 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v87 = (uint64_t)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  __int128 v94 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v82 - v9;
  uint64_t v11 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v84 = (uint64_t)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v86 = (char *)&v82 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v83 = (uint64_t)&v82 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v85 = (char *)&v82 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v88 = (uint64_t)&v82 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v90 = (char *)&v82 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v82 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)&v82 - v28;
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v82 - v30;
  uint64_t v32 = type metadata accessor for UUID(0LL);
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  unint64_t v95 = (char *)&v82 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v35 = v98;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007EDF48);
  sub_1006A1FC0(KeyPath, v35, v31);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
  if (v37(v31, 1LL, v32) == 1)
  {
    sub_100015794((uint64_t)v31, &qword_10099D8A0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v29, 1LL, 1LL, v32);
    sub_10001581C((uint64_t)v29, (uint64_t)v26, &qword_10099D8A0);
    if (v37(v26, 1LL, v32) == 1)
    {
      Class isa = 0LL;
    }

    else
    {
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v26, v32);
    }

    (*(void (**)(uint64_t, Class))(v96 + 16))(v96, isa);

    return sub_100015794((uint64_t)v29, &qword_10099D8A0);
  }

  else
  {
    uint64_t v82 = v33;
    uint64_t v39 = v95;
    uint64_t v40 = (*(uint64_t (**)(char *, char *, uint64_t))(v33 + 32))(v95, v31, v32);
    static SystemInfo.lockState.getter(v40);
    uint64_t v41 = v94;
    (*(void (**)(char *, void, uint64_t))(v6 + 104))( v94,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v5);
    uint64_t v42 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
    dispatch thunk of RawRepresentable.rawValue.getter(&v98, v5, v42);
    dispatch thunk of RawRepresentable.rawValue.getter(&v97, v5, v42);
    uint64_t v43 = v98;
    uint64_t v44 = v97;
    uint64_t v45 = *(void (**)(char *, uint64_t))(v6 + 8);
    v45(v41, v5);
    uint64_t v46 = ((uint64_t (*)(char *, uint64_t))v45)(v10, v5);
    if (v43 == v44)
    {
      uint64_t v47 = static os_log_type_t.default.getter(v46);
      if (qword_10099B748 != -1) {
        swift_once(&qword_10099B748, sub_100651480);
      }
      os_log(_:dso:log:_:_:)( v47,  &_mh_execute_header,  qword_100A2B058,  "Returning possibly false UUID because device lockState is beforeFirstUnlock",  75LL,  2LL,  _swiftEmptyArrayStorage);
      uint64_t v48 = v82;
      uint64_t v49 = (uint64_t)v90;
      (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v90, v39, v32);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v48 + 56))(v49, 0LL, 1LL, v32);
      uint64_t v50 = v88;
      sub_10001581C(v49, v88, &qword_10099D8A0);
      if (v37((char *)v50, 1LL, v32) == 1)
      {
        Class v51 = 0LL;
      }

      else
      {
        Class v51 = UUID._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v50, v32);
      }

      (*(void (**)(uint64_t, Class))(v96 + 16))(v96, v51);

      sub_100015794(v49, &qword_10099D8A0);
      return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v39, v32);
    }

    else
    {
      uint64_t v53 = v92;
      sub_1001320A0(v92);
      uint64_t v54 = v93;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v53, 1LL, v93) == 1)
      {
        uint64_t v55 = sub_100015794(v53, (uint64_t *)&unk_1009A9C30);
        uint64_t v56 = static os_log_type_t.error.getter(v55);
        if (qword_10099B748 != -1) {
          swift_once(&qword_10099B748, sub_100651480);
        }
        uint64_t v57 = qword_100A2B058;
        uint64_t v58 = sub_100004AEC((uint64_t *)&unk_10099D740);
        uint64_t v59 = swift_allocObject(v58, 72LL, 7LL);
        *(_OWORD *)(v59 + 16) = xmmword_1007E67D0;
        uint64_t v60 = UUID.uuidString.getter(v59);
        uint64_t v62 = v61;
        *(void *)(v59 + 56) = &type metadata for String;
        *(void *)(v59 + 64) = sub_1000226F4();
        *(void *)(v59 + 32) = v60;
        *(void *)(v59 + 40) = v62;
        os_log(_:dso:log:_:_:)( v56,  &_mh_execute_header,  v57,  "Local beacon found in defaults, but not in BeaconStore!: %@",  59LL,  2LL,  v59);
        swift_bridgeObjectRelease();
        uint64_t v63 = v82;
        uint64_t v64 = (uint64_t)v86;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v82 + 56))(v86, 1LL, 1LL, v32);
        uint64_t v65 = v84;
        sub_10001581C(v64, v84, &qword_10099D8A0);
        if (v37((char *)v65, 1LL, v32) == 1)
        {
          Class v66 = 0LL;
        }

        else
        {
          Class v66 = UUID._bridgeToObjectiveC()().super.isa;
          (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v65, v32);
        }

        (*(void (**)(uint64_t, Class))(v96 + 16))(v96, v66);

        sub_100015794(v64, &qword_10099D8A0);
        return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v95, v32);
      }

      else
      {
        uint64_t v67 = v87;
        uint64_t v68 = sub_10002218C(v53, v87, type metadata accessor for OwnedBeaconRecord);
        uint64_t v69 = static os_log_type_t.default.getter(v68);
        if (qword_10099B748 != -1) {
          swift_once(&qword_10099B748, sub_100651480);
        }
        uint64_t v70 = qword_100A2B058;
        uint64_t v71 = sub_100004AEC((uint64_t *)&unk_10099D740);
        uint64_t v72 = swift_allocObject(v71, 72LL, 7LL);
        *(_OWORD *)(v72 + 16) = xmmword_1007E67D0;
        uint64_t v73 = v67 + *(int *)(v54 + 20);
        uint64_t v74 = UUID.uuidString.getter(v72);
        uint64_t v76 = v75;
        *(void *)(v72 + 56) = &type metadata for String;
        *(void *)(v72 + 64) = sub_1000226F4();
        *(void *)(v72 + 32) = v74;
        *(void *)(v72 + 40) = v76;
        os_log(_:dso:log:_:_:)( v69,  &_mh_execute_header,  v70,  "Found cached local beacon UUID already stored: %@",  49LL,  2LL,  v72);
        swift_bridgeObjectRelease();
        uint64_t v77 = v82;
        uint64_t v78 = (uint64_t)v85;
        (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v85, v73, v32);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v77 + 56))(v78, 0LL, 1LL, v32);
        uint64_t v79 = v83;
        sub_10001581C(v78, v83, &qword_10099D8A0);
        if (v37((char *)v79, 1LL, v32) == 1)
        {
          Class v80 = 0LL;
        }

        else
        {
          Class v80 = UUID._bridgeToObjectiveC()().super.isa;
          (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v79, v32);
        }

        uint64_t v81 = v95;
        (*(void (**)(uint64_t, Class))(v96 + 16))(v96, v80);

        sub_100015794(v78, &qword_10099D8A0);
        sub_100018C68(v67, type metadata accessor for OwnedBeaconRecord);
        return (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v81, v32);
      }
    }
  }

void sub_10014E1E4()
{
  char v0 = sub_10075C788();
  char v1 = sub_100552474();
  char v2 = sub_1007C1BB8();
  char v3 = sub_1003AD770();
  if (qword_10099B4D8 != -1) {
    swift_once(&qword_10099B4D8, sub_1004AB71C);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A2AB18);
  oslog = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v6 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v6))
  {
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v7 = 67110144;
    int v9 = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v7 + 4, v7 + 8);
    *(_WORD *)(v7 + 8) = 1024;
    int v9 = v0 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v7 + 10, v7 + 14);
    *(_WORD *)(v7 + 14) = 1024;
    int v9 = v1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v7 + 16, v7 + 20);
    *(_WORD *)(v7 + 20) = 1024;
    int v9 = v2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v7 + 22, v7 + 26);
    *(_WORD *)(v7 + 26) = 1024;
    int v9 = v3 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v7 + 28, v7 + 32);
    _os_log_impl( (void *)&_mh_execute_header,  oslog,  v6,  "Deleted account keychain items. deletedItemSharingKey: %{BOOL}d, deletedObservationKey: %{BOOL}d, deletedBeaconS toreKey: %{BOOL}d, deletedKeyManagerKey: %{BOOL}d deletedStandaloneBeaconDatabaseKey: %{BOOL}d.",  (uint8_t *)v7,  0x20u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
  }

void sub_10014E3B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for PairingErrorRecord(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  os_log_type_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100576FBC();
  uint64_t v8 = v7[2];
  if (v8)
  {
    uint64_t v24 = a2;
    uint64_t v25 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v8);
    uint64_t v9 = (uint64_t)v7 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v10 = *(void *)(v4 + 72);
    do
    {
      sub_10001DC4C(v9, (uint64_t)v6, type metadata accessor for PairingErrorRecord);
      sub_1005C9DEC();
      uint64_t v12 = v11;
      uint64_t v13 = sub_100018C68((uint64_t)v6, type metadata accessor for PairingErrorRecord);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
      uint64_t v14 = v25[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
      uint64_t v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
      specialized ContiguousArray._endMutation()(v15);
      v9 += v10;
      --v8;
    }

    while (v8);
    uint64_t v16 = v25;
    uint64_t v17 = swift_bridgeObjectRelease();
    a2 = v24;
  }

  else
  {
    uint64_t v17 = swift_bridgeObjectRelease();
    uint64_t v16 = _swiftEmptyArrayStorage;
  }

  uint64_t v18 = static os_log_type_t.info.getter(v17);
  if (qword_10099B798 != -1) {
    swift_once(&qword_10099B798, sub_100651870);
  }
  uint64_t v19 = qword_100A2B0A8;
  uint64_t v20 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v21 = swift_allocObject(v20, 72LL, 7LL);
  *(_OWORD *)(v21 + 16) = xmmword_1007E67D0;
  uint64_t v22 = v16[2];
  *(void *)(v21 + 56) = &type metadata for Int;
  *(void *)(v21 + 64) = &protocol witness table for Int;
  *(void *)(v21 + 32) = v22;
  os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "allPairingErrors count: %i", v24);
  swift_bridgeObjectRelease();
  sub_1004E7744((uint64_t)v16);
  swift_bridgeObjectRelease();
  sub_100004AEC((uint64_t *)&unk_1009A5470);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);
  swift_bridgeObjectRelease();
}

uint64_t sub_10014E604( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17 = static os_log_type_t.default.getter(a1);
  if (qword_10099B748 != -1) {
    swift_once(&qword_10099B748, sub_100651480);
  }
  os_log(_:dso:log:_:_:)( v17,  &_mh_execute_header,  qword_100A2B058,  "#Durian: Proceeding to unpair and remove pairing lock.",  54LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  unint64_t v18 = sub_1000155F8();
  swift_bridgeObjectRetain(a2);
  uint64_t v19 = Data.init<A>(hexString:)(&v36, &type metadata for String, v18);
  if (v20 >> 60 == 15) {
    goto LABEL_6;
  }
  uint64_t v21 = v19;
  unint64_t v22 = v20;
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  swift_bridgeObjectRetain(a4);
  uint64_t v23 = Data.init<A>(hexString:)(&v36, &type metadata for String, v18);
  if (v24 >> 60 == 15)
  {
    uint64_t v19 = sub_1000182F0(v21, v22);
LABEL_6:
    uint64_t v25 = static os_log_type_t.error.getter(v19);
    os_log(_:dso:log:_:_:)( v25,  &_mh_execute_header,  qword_100A2B058,  "#Durian: Insufficient info for unpair.",  38LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v26 = sub_10014A2C0();
    uint64_t v27 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v26, 0LL, 0LL);
    *uint64_t v28 = 3;
    a5();
    return swift_errorRelease(v27);
  }

  uint64_t v30 = v23;
  unint64_t v31 = v24;
  type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v32 = sub_100004AEC(&qword_1009A23E8);
  swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
  sub_100018BE4(v21, v22);
  sub_100018BE4(v30, v31);
  __n128 v33 = swift_bridgeObjectRetain(a8);
  Future.init()(v33);
  LOBYTE(v36) = 0;
  Future.finish(result:)(&v36);
  uint64_t v34 = (void *)swift_allocObject(&unk_10093F920, 40LL, 7LL);
  v34[2] = a10;
  v34[3] = a5;
  v34[4] = a6;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_10014EA64, v34);
  swift_release();
  swift_release();
  uint64_t v35 = (void *)swift_allocObject(&unk_10093F948, 40LL, 7LL);
  v35[2] = a10;
  v35[3] = a5;
  v35[4] = a6;
  swift_retain();
  swift_retain();
  Future.addFailure(block:)(sub_10014EA74, v35);
  swift_release();
  swift_release();
  swift_release();
  sub_100016F9C(v21, v22);
  sub_100016F9C(v30, v31);
  swift_bridgeObjectRelease();
  sub_1000182F0(v30, v31);
  return sub_1000182F0(v21, v22);
}

uint64_t sub_10014E8E4(unsigned __int8 *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OSSignpostID(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  return sub_100136760( a1,  v1 + v4,  *(_BYTE *)(v1 + v5),  *(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8LL) + v1 + 8),  *(void *)((v5 & 0xFFFFFFFFFFFFFFF8LL) + v1 + 16),  *(void (**)(void))(v1 + (((v5 & 0xFFFFFFFFFFFFFFF8LL) + 31) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v1 + (((v5 & 0xFFFFFFFFFFFFFFF8LL) + 31) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_10014E958()
{
  uint64_t v1 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8LL) + v0;
  unint64_t v8 = ((v5 & 0xFFFFFFFFFFFFFFF8LL) + 31) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v7 + 16));
  swift_release(*(void *)(v0 + v8 + 8));
  return swift_deallocObject(v0, ((v8 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8, v6);
}

uint64_t sub_10014E9F0(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OSSignpostID(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_10013691C( a1,  v1 + v4,  *(_BYTE *)(v1 + v4 + *(void *)(v3 + 64)),  *(uint64_t (**)(void))(((v4 + *(void *)(v3 + 64)) & 0xFFFFFFFFFFFFFFF8LL) + v1 + 8),  *(void *)(((v4 + *(void *)(v3 + 64)) & 0xFFFFFFFFFFFFFFF8LL) + v1 + 16),  *(uint64_t (**)(uint64_t))(v1 + ((((v4 + *(void *)(v3 + 64)) & 0xFFFFFFFFFFFFFFF8LL) + 31) & 0xFFFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10014EA64(char *a1)
{
  return sub_10013630C(a1, *(void *)(v1 + 16), *(uint64_t (**)(void))(v1 + 24));
}

uint64_t sub_10014EA74(uint64_t a1)
{
  return sub_10013651C(a1, *(void *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

uint64_t sub_10014EA80()
{
  return sub_1001538E8((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10014EA8C()
{
  uint64_t v2 = swift_task_alloc(dword_1009A23F4);
  __int128 v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100015D58;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch(sub_1001366C0, v3, 0LL);
}

uint64_t sub_10014EAF0()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  char v6 = *(_BYTE *)(v0 + 48);
  uint64_t v7 = (void *)swift_task_alloc(dword_1009BE05C);
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_100015D58;
  return sub_100714FD8(v2, v3, v4, v5, v6);
}

uint64_t sub_10014EB64()
{
  return swift_deallocObject(v0, 25LL, 7LL);
}

uint64_t sub_10014EB88()
{
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(_BYTE *)(v0 + 24);
  uint64_t v4 = swift_task_alloc(dword_1009A240C);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_100015D58;
  *(_BYTE *)(v4 + 24) = v3;
  *(void *)(v4 + 16) = v2;
  return swift_task_switch(sub_100136480, v2, 0LL);
}

uint64_t sub_10014EBF4()
{
  return swift_deallocObject(v0, 49LL, 7LL);
}

uint64_t sub_10014EC28()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  unint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

unint64_t *sub_10014EEC8@<X0>(unint64_t **a1@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8) + 80LL);
  uint64_t result = sub_1001455C0(v1 + ((v3 + 24) & ~v3), *(void *)(*(void *)(v1 + 16) + 256LL));
  *a1 = result;
  return result;
}

uint64_t sub_10014EF10()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10014EF3C()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_1009BE06C);
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_100015D58;
  return sub_100714BD8(v2, v3);
}

uint64_t sub_10014EF8C()
{
  uint64_t v2 = (void *)swift_task_alloc(dword_1009BE064);
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100015D58;
  return sub_100714F4C(v0);
}

uint64_t sub_10014EFD4(unint64_t *a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = sub_100022898(255LL, a2, a3);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10014F014@<X0>(uint64_t *a1@<X8>)
{
  return sub_1004F7674(a1);
}

uint64_t sub_10014F030(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1009B277C);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100015D58;
  return sub_100517C7C(a1, v4, v1 + 24);
}

uint64_t sub_10014F098@<X0>(uint64_t a1@<X8>)
{
  return sub_10050B3A8(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

void sub_10014F0B8(int a1, char a2)
{
}

uint64_t sub_10014F0CC@<X0>(uint64_t a1@<X8>)
{
  return sub_100573C94(*(void *)(v1 + 24), a1);
}

uint64_t sub_10014F0EC(void **a1)
{
  return sub_100151A38( a1,  type metadata accessor for OwnedBeaconRecord,  (uint64_t)sub_100021ABC,  &qword_1009B5360,  (uint64_t)&unk_10080B07C);
}

uint64_t sub_10014F114()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  unint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | 7);
}

uint64_t sub_10014F3D4(uint64_t a1)
{
  return sub_100151C98(a1, type metadata accessor for OwnedBeaconRecord);
}

uint64_t sub_10014F3E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A2460);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

void sub_10014F428(uint64_t a1, int a2, uint64_t a3, const void *a4)
{
  int v78 = a2;
  uint64_t v77 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v7 = __chkstk_darwin(v77);
  uint64_t v75 = (uint64_t)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v76 = (char *)&v75 - v9;
  uint64_t v10 = sub_100004AEC(&qword_1009AA830);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v18 = __chkstk_darwin(v17);
  unint64_t v20 = (char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  unint64_t v22 = (char *)&v75 - v21;
  uint64_t v23 = swift_allocObject(&unk_100940118, 24LL, 7LL);
  uint64_t v79 = a3;
  uint64_t v80 = v23;
  *(void *)(v23 + 16) = a4;
  _Block_copy(a4);
  uint64_t v81 = (void (**)(void, void *))a4;
  _Block_copy(a4);
  sub_100504C28(a1, (uint64_t)&v83);
  if (v84)
  {
    sub_100012EC0(&v83, (uint64_t)v85);
    sub_100013044((uint64_t)v85, (uint64_t)&v83);
    uint64_t v24 = sub_100004AEC(&qword_1009B0530);
    if ((swift_dynamicCast(v22, &v83, v24, v17, 0LL) & 1) != 0)
    {
      uint64_t v25 = type metadata accessor for OwnedBeaconRecord;
      sub_10002218C((uint64_t)v22, (uint64_t)v20, type metadata accessor for OwnedBeaconRecord);
      sub_100135060((uint64_t)v20, v78 & 1, (uint64_t)sub_10009C044, v80);
      uint64_t v26 = (uint64_t)v20;
    }

    else
    {
      uint64_t v44 = (uint64_t)v76;
      uint64_t v45 = swift_dynamicCast(v76, &v83, v24, v77, 0LL);
      uint64_t v46 = v80;
      if ((v45 & 1) == 0)
      {
        uint64_t v55 = static os_log_type_t.error.getter(v45);
        if (qword_10099B748 != -1) {
          swift_once(&qword_10099B748, sub_100651480);
        }
        uint64_t v56 = qword_100A2B058;
        uint64_t v57 = sub_100004AEC((uint64_t *)&unk_10099D740);
        uint64_t v58 = swift_allocObject(v57, 72LL, 7LL);
        *(_OWORD *)(v58 + 16) = xmmword_1007E67D0;
        sub_100013044((uint64_t)v85, (uint64_t)v82);
        uint64_t v59 = String.init<A>(describing:)(v82, v24);
        uint64_t v61 = v60;
        *(void *)(v58 + 56) = &type metadata for String;
        *(void *)(v58 + 64) = sub_1000226F4();
        *(void *)(v58 + 32) = v59;
        *(void *)(v58 + 40) = v61;
        os_log(_:dso:log:_:_:)(v55, &_mh_execute_header, v56, "Unhandled beacon type: %@", 25LL, 2LL, v58);
        swift_bridgeObjectRelease();
        unint64_t v62 = sub_10014A2C0();
        uint64_t v63 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v62, 0LL, 0LL);
        *uint64_t v64 = 3;
        uint64_t v65 = (void *)_convertErrorToNSError(_:)(v63);
        uint64_t v43 = v81;
        v81[2](v81, v65);

        swift_errorRelease(v63);
        goto LABEL_18;
      }

      uint64_t v25 = type metadata accessor for SharedBeaconRecord;
      uint64_t v47 = v75;
      sub_10002218C(v44, v75, type metadata accessor for SharedBeaconRecord);
      sub_1001359BC(v47, (uint64_t)sub_10009C044, v46);
      uint64_t v26 = v47;
    }

    sub_100018C68(v26, v25);
    uint64_t v43 = v81;
LABEL_18:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v85);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v83);
LABEL_25:
    swift_release();
    goto LABEL_26;
  }

  sub_100015794((uint64_t)&v83, (uint64_t *)&unk_1009A9C40);
  sub_10050F124(a1, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13) != 1)
  {
    sub_10002218C((uint64_t)v12, (uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
    v85[0] = 0;
    sub_1001CC778();
    uint64_t v49 = v48;
    uint64_t v50 = v79;
    swift_retain();
    sub_100149D28(v49, v50, v85);
    swift_bridgeObjectRelease();
    uint64_t v51 = swift_release();
    int v52 = v85[0];
    uint64_t v53 = static os_log_type_t.default.getter(v51);
    if (v52 == 1)
    {
      uint64_t v54 = v80;
      uint64_t v43 = v81;
      if (qword_10099B798 != -1) {
        swift_once(&qword_10099B798, sub_100651870);
      }
      os_log(_:dso:log:_:_:)( v53,  &_mh_execute_header,  qword_100A2B0A8,  "Device may be already connected.",  32LL,  2LL,  _swiftEmptyArrayStorage);
      sub_100135BA4((uint64_t)v16, v78 & 1, (uint64_t)sub_10009C044, v54);
    }

    else
    {
      uint64_t v66 = v80;
      if (qword_10099B748 != -1) {
        swift_once(&qword_10099B748, sub_100651480);
      }
      uint64_t v67 = qword_100A2B058;
      uint64_t v68 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v69 = swift_allocObject(v68, 72LL, 7LL);
      *(_OWORD *)(v69 + 16) = xmmword_1007E67D0;
      *(void *)(v69 + 56) = &type metadata for Bool;
      *(void *)(v69 + 64) = &protocol witness table for Bool;
      char v70 = v78;
      *(_BYTE *)(v69 + 32) = v78 & 1;
      os_log(_:dso:log:_:_:)(v53, &_mh_execute_header, v67, "Device is not connected. Force [%d]", v75);
      swift_bridgeObjectRelease();
      if ((v70 & 1) != 0)
      {
        sub_100135BA4((uint64_t)v16, 1, (uint64_t)sub_10009C044, v66);
        uint64_t v43 = v81;
      }

      else
      {
        unint64_t v71 = sub_10014A2C0();
        uint64_t v72 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v71, 0LL, 0LL);
        *uint64_t v73 = 7;
        uint64_t v74 = (void *)_convertErrorToNSError(_:)(v72);
        uint64_t v43 = v81;
        v81[2](v81, v74);

        swift_errorRelease(v72);
      }
    }

    sub_100018C68((uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
    goto LABEL_25;
  }

  uint64_t v27 = sub_100015794((uint64_t)v12, &qword_1009AA830);
  uint64_t v28 = static os_log_type_t.error.getter(v27);
  if (qword_10099B748 != -1) {
    swift_once(&qword_10099B748, sub_100651480);
  }
  uint64_t v29 = qword_100A2B058;
  uint64_t v30 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v31 = swift_allocObject(v30, 72LL, 7LL);
  *(_OWORD *)(v31 + 16) = xmmword_1007E67D0;
  uint64_t v32 = type metadata accessor for UUID(0LL);
  uint64_t v33 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter(v32, v33);
  uint64_t v36 = v35;
  *(void *)(v31 + 56) = &type metadata for String;
  *(void *)(v31 + 64) = sub_1000226F4();
  *(void *)(v31 + 32) = v34;
  *(void *)(v31 + 40) = v36;
  os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "Can't find beacon for uuid: %@", 30LL, 2LL, v31);
  swift_bridgeObjectRelease();
  type metadata accessor for SPOwnerSessionError(0LL);
  uint64_t v38 = v37;
  *(void *)&__int128 v83 = 2LL;
  unint64_t v39 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v40 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
  _BridgedStoredNSError.init(_:userInfo:)(v85, &v83, v39, v38, v40);
  uint64_t v41 = *(void **)v85;
  uint64_t v42 = (void *)_convertErrorToNSError(_:)(*(void *)v85);
  uint64_t v43 = v81;
  v81[2](v81, v42);
  swift_release();

LABEL_26:
  _Block_release(v43);
}

uint64_t sub_10014FC00(char a1, uint64_t a2)
{
  if (qword_10099B7A0 != -1) {
    swift_once(&qword_10099B7A0, sub_1006518D8);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A2B0B0);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 67109120;
    int v17 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v8 + 4, v8 + 8);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "setAlwaysBeaconWildState to %{BOOL}d", v8, 8u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  id v9 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v10 = String._bridgeToObjectiveC()();
  [v9 setBool:a1 & 1 forKey:v10];

  uint64_t v11 = CFNotificationCenterGetDarwinNotifyCenter();
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = (const __CFString *)SPBeaconingStateChangedNotification;
    uint64_t v14 = static os_log_type_t.default.getter(v11);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v14,  &_mh_execute_header,  qword_100A2B018,  "Posting SPBeaconingStateChangedNotification Darwin notification",  63LL,  2LL,  _swiftEmptyArrayStorage);
    CFNotificationCenterPostNotification(v12, v13, 0LL, 0LL, 1u);
  }

  else
  {
    uint64_t v15 = static os_log_type_t.error.getter(0LL);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  qword_100A2B018,  "CFNotificationCenterGetDarwinNotifyCenter return nil!",  53LL,  2LL,  _swiftEmptyArrayStorage);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 1LL);
}

uint64_t sub_10014FE84(uint64_t a1, void (*a2)(uint64_t, unint64_t, uint64_t))
{
  uint64_t v3 = sub_100004AEC(&qword_1009B0540);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OfflineFindingInfo(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v45 = (uint64_t)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1001320A0((uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
  {
    sub_100015794((uint64_t)v11, (uint64_t *)&unk_1009A9C30);
    unint64_t v16 = sub_10014A2C0();
    uint64_t v17 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v16, 0LL, 0LL);
    _BYTE *v18 = 1;
    swift_errorRetain(v17);
    a2(0LL, 0xF000000000000000LL, v17);
    swift_errorRelease(v17);
    return swift_errorRelease(v17);
  }

  else
  {
    sub_10002218C((uint64_t)v11, (uint64_t)v15, type metadata accessor for OwnedBeaconRecord);
    sub_100134468((uint64_t)v15, (uint64_t)v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
    {
      sub_100015794((uint64_t)v5, &qword_1009B0540);
      unint64_t v20 = sub_10014A2C0();
      uint64_t v21 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v20, 0LL, 0LL);
      *unint64_t v22 = 1;
      swift_errorRetain(v21);
      a2(0LL, 0xF000000000000000LL, v21);
      swift_errorRelease(v21);
      swift_errorRelease(v21);
    }

    else
    {
      uint64_t v23 = v45;
      sub_10002218C((uint64_t)v5, v45, type metadata accessor for OfflineFindingInfo);
      uint64_t v24 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
      sub_1005A7ED4();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v49 = 0LL;
      id v26 = [v24 dataWithPropertyList:isa format:200 options:0 error:&v49];

      id v27 = v49;
      if (v26)
      {
        uint64_t v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v26);
        unint64_t v30 = v29;

        sub_10001736C(v28, v30);
        a2(v28, v30, 0LL);
        sub_100016F9C(v28, v30);
        sub_100016F9C(v28, v30);
      }

      else
      {
        uint64_t v31 = v27;
        uint64_t v32 = _convertNSErrorToError(_:)(v27);

        swift_willThrow(v33);
        if (qword_10099B238 != -1) {
          swift_once(&qword_10099B238, sub_10028EB6C);
        }
        uint64_t v34 = type metadata accessor for Logger(0LL);
        sub_10000A720(v34, (uint64_t)qword_100A2A488);
        swift_errorRetain(v32);
        uint64_t v35 = swift_errorRetain(v32);
        uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
        os_log_type_t v37 = static os_log_type_t.error.getter(v36);
        if (os_log_type_enabled(v36, v37))
        {
          uint64_t v38 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v44 = (void *)swift_slowAlloc(32LL, -1LL);
          id v49 = v44;
          *(_DWORD *)uint64_t v38 = 136315138;
          uint64_t v23 = v45;
          uint64_t v43 = v38 + 4;
          swift_getErrorValue(v32, v48, v47);
          uint64_t v39 = Error.localizedDescription.getter(v47[1], v47[2]);
          uint64_t v46 = sub_1003F11D4(v39, v40, (uint64_t *)&v49);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v43, v38 + 12);
          swift_bridgeObjectRelease();
          swift_errorRelease(v32);
          swift_errorRelease(v32);
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "PropertyListSerialization error: %s", v38, 0xCu);
          uint64_t v41 = v44;
          swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v41, -1LL, -1LL);
          swift_slowDealloc(v38, -1LL, -1LL);
        }

        else
        {
          swift_errorRelease(v32);
          swift_errorRelease(v32);
        }

        swift_errorRetain(v32);
        a2(0LL, 0xF000000000000000LL, v32);
        swift_errorRelease(v32);
        swift_errorRelease(v32);
      }

      sub_100018C68(v23, type metadata accessor for OfflineFindingInfo);
    }

    return sub_100018C68((uint64_t)v15, type metadata accessor for OwnedBeaconRecord);
  }

uint64_t sub_1001503E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v8 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  UUID.uuidString.getter(v8);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v10 = String._bridgeToObjectiveC()();
  [v8 setObject:v9 forKey:v10];

  if (qword_10099B238 != -1) {
    swift_once(&qword_10099B238, sub_10028EB6C);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_10000A720(v11, (uint64_t)qword_100A2A488);
  uint64_t v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    uint64_t v24 = a2;
    uint64_t v17 = v16;
    uint64_t v26 = v16;
    *(_DWORD *)uint64_t v15 = 136315138;
    uint64_t v18 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter(v4, v18);
    uint64_t v25 = sub_1003F11D4(v19, v20, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Poisoning beacon UUID: %s", v15, 0xCu);
    swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v21 = v17;
    a2 = v24;
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  return (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_10015068C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v82 = a3;
  LODWORD(v76) = a2;
  uint64_t v8 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v8);
  uint64_t v77 = &v72[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = type metadata accessor for OwnedBeaconGroup(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = &v72[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = qword_10099B7A0;
  uint64_t v79 = a4;
  swift_retain();
  id v78 = a5;
  if (v13 != -1) {
    swift_once(&qword_10099B7A0, sub_1006518D8);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  sub_10000A720(v14, (uint64_t)qword_100A2B0B0);
  uint64_t v15 = sub_10001DC4C(a1, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter(v16);
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v80 = v10;
  uint64_t v81 = a1;
  if (v18)
  {
    uint64_t v19 = swift_slowAlloc(22LL, -1LL);
    uint64_t v20 = swift_slowAlloc(32LL, -1LL);
    v85[0] = v20;
    *(_DWORD *)uint64_t v19 = 141558275;
    uint64_t v83 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v19 + 4, v19 + 12);
    *(_WORD *)(v19 + 12) = 2081;
    uint64_t v21 = type metadata accessor for UUID(0LL);
    uint64_t v22 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v23 = v21;
    uint64_t v10 = v80;
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v23, v22);
    uint64_t v83 = sub_1003F11D4(v24, v25, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "removeAirPodsPairingLock for %{private,mask.hash}s",  (uint8_t *)v19,  0x16u);
    swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v26 = v20;
    a1 = v81;
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
  }

  swift_bridgeObjectRetain(*(void *)(a1 + *(int *)(v10 + 40)));
  uint64_t v28 = sub_10012E26C(v27);
  swift_bridgeObjectRelease();
  uint64_t v29 = v82;
  swift_retain();
  unint64_t v30 = sub_10014B2A8(v28, v29);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v31 = swift_bridgeObjectRetain_n(v30, 2LL);
  uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
  os_log_type_t v33 = static os_log_type_t.default.getter(v32);
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v35 = swift_slowAlloc(32LL, -1LL);
    v85[0] = v35;
    *(_DWORD *)uint64_t v34 = 136315138;
    uint64_t v36 = type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0LL);
    swift_bridgeObjectRetain(v30);
    uint64_t v38 = Array.description.getter(v37, v36);
    unint64_t v40 = v39;
    swift_bridgeObjectRelease();
    uint64_t v83 = sub_1003F11D4(v38, v40, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v34 + 4, v34 + 12);
    swift_bridgeObjectRelease_n(v30, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "unpairDevices: %s", v34, 0xCu);
    swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1LL, -1LL);
    swift_slowDealloc(v34, -1LL, -1LL);
  }

  else
  {

    uint64_t v41 = swift_bridgeObjectRelease_n(v30, 2LL);
  }

  id v42 = (id)MobileGestalt_get_current_device(v41);
  if (v42)
  {
    uint64_t v43 = v42;
    uint64_t v75 = v30;
    uint64_t uniqueChipID = MobileGestalt_get_uniqueChipID();

    id v46 = (id)MobileGestalt_get_current_device(v45);
    if (v46)
    {
      uint64_t v47 = v46;
      int v73 = v76 & 1;
      uint64_t chipID = MobileGestalt_get_chipID();

      v85[0] = uniqueChipID;
      uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
      uint64_t v51 = v50;
      uint64_t v76 = v50;
      v85[0] = chipID;
      uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
      uint64_t v54 = v53;
      uint64_t v74 = v53;
      id v55 = sub_1006271CC();
      uint64_t v57 = v56;
      uint64_t v59 = v80;
      uint64_t v58 = v81;
      uint64_t v60 = MACAddress.udid.getter(v55);
      v85[0] = v49;
      v85[1] = v51;
      v85[2] = v52;
      v85[3] = v54;
      v85[4] = (uint64_t)v55;
      v85[5] = v57;
      v85[6] = v60;
      v85[7] = v61;
      char v86 = v73;
      uint64_t v87 = v75;
      uint64_t v62 = sub_1004AC1F4();
      uint64_t v63 = v58 + *(int *)(v59 + 24);
      uint64_t v64 = type metadata accessor for UUID(0LL);
      uint64_t v65 = *(void *)(v64 - 8);
      uint64_t v66 = (uint64_t)v77;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v65 + 16))(v77, v63, v64);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v65 + 56))(v66, 0LL, 1LL, v64);
      uint64_t v67 = v79;
      swift_retain();
      id v68 = v78;
      sub_10043324C(v66, (uint64_t)v85, v62, v67, v68);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      sub_100015794(v66, &qword_10099D8A0);
      return swift_release();
    }
  }

  else
  {
    id v70 = v78;

    swift_release_n(v79, 2LL);
    __break(1u);
  }

  id v71 = v78;

  uint64_t result = swift_release_n(v79, 2LL);
  __break(1u);
  return result;
}

uint64_t sub_100150CE0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v94 = *(void *)(v6 - 8);
  uint64_t v95 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v93 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v92 = (char *)&v86 - v9;
  uint64_t v10 = type metadata accessor for OwnedBeaconRecord(0LL);
  *(void *)&__int128 v98 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v96 = v12;
  uint64_t v97 = (uint64_t)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v86 - v13;
  uint64_t v101 = swift_allocObject(&unk_1009401E0, 24LL, 7LL);
  *(void *)(v101 + 16) = a3;
  dispatch_group_t v100 = a3;
  LODWORD(v102) = static os_log_type_t.default.getter(v100);
  if (qword_10099B748 != -1) {
    swift_once(&qword_10099B748, sub_100651480);
  }
  uint64_t v15 = qword_100A2B058;
  uint64_t v99 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v16 = swift_allocObject(v99, 112LL, 7LL);
  *(_OWORD *)(v16 + 16) = xmmword_1007E4750;
  v104[0] = *a2;
  uint64_t v17 = sub_100004AEC(&qword_1009A2648);
  uint64_t v18 = String.init<A>(describing:)(v104, v17);
  uint64_t v20 = v19;
  *(void *)(v16 + 56) = &type metadata for String;
  uint64_t v21 = a2;
  unint64_t v22 = sub_1000226F4();
  *(void *)(v16 + 32) = v18;
  *(void *)(v16 + 40) = v20;
  *(void *)(v16 + 96) = &type metadata for String;
  *(void *)(v16 + 104) = v22;
  *(void *)(v16 + 64) = v22;
  *(void *)(v16 + 72) = 0xD000000000000038LL;
  *(void *)(v16 + 80) = 0x8000000100855740LL;
  os_log(_:dso:log:_:_:)(v102, &_mh_execute_header, v15, "%{public}@: %{public}@", 22LL, 2LL, v16);
  swift_bridgeObjectRelease();
  uint64_t v102 = v21;
  uint64_t v23 = sub_100506C30();
  uint64_t v24 = *((void *)v23 + 2);
  if (v24)
  {
    uint64_t v25 = *(unsigned __int8 *)(v98 + 80);
    uint64_t v91 = ~v25;
    uint64_t v26 = (uint64_t)&v23[(v25 + 32) & ~v25];
    uint64_t v27 = *(void *)(v98 + 72);
    while (1)
    {
      sub_10001DC4C(v26, (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
      sub_1006DF8C4((uint64_t)&v14[*(int *)(v10 + 24)], a1);
      if ((v28 & 1) != 0) {
        break;
      }
      sub_100018C68((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
      v26 += v27;
      if (!--v24) {
        goto LABEL_7;
      }
    }

    uint64_t v29 = swift_bridgeObjectRelease();
    uint64_t v30 = static os_log_type_t.default.getter(v29);
    uint64_t v31 = qword_100A2B058;
    uint64_t v32 = swift_allocObject(v99, 72LL, 7LL);
    __int128 v98 = xmmword_1007E67D0;
    *(_OWORD *)(v32 + 16) = xmmword_1007E67D0;
    os_log_type_t v33 = &v14[*(int *)(v10 + 20)];
    uint64_t v34 = type metadata accessor for UUID(0LL);
    uint64_t v35 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter(v34, v35);
    *(void *)(v32 + 56) = &type metadata for String;
    *(void *)(v32 + 64) = v22;
    *(void *)(v32 + 32) = v36;
    *(void *)(v32 + 40) = v37;
    os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "Trying to remove (%@)", 21LL, 2LL, v32);
    swift_bridgeObjectRelease();
    uint64_t v38 = swift_allocObject(&unk_100940208, 32LL, 7LL);
    uint64_t v39 = v101;
    uint64_t v89 = v38;
    *(void *)(v38 + 16) = sub_100153850;
    *(void *)(v38 + 24) = v39;
    uint64_t v40 = swift_retain_n(v39, 2LL);
    uint64_t v41 = static os_log_type_t.default.getter(v40);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v90 = v25;
    uint64_t v42 = qword_100A2B018;
    uint64_t v43 = swift_allocObject(v99, 72LL, 7LL);
    *(_OWORD *)(v43 + 16) = v98;
    uint64_t v87 = v34;
    uint64_t v88 = v33;
    uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter(v34, v35);
    *(void *)(v43 + 56) = &type metadata for String;
    *(void *)(v43 + 64) = v22;
    *(void *)(v43 + 32) = v44;
    *(void *)(v43 + 40) = v45;
    os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, v42, "Unpair owned beacon: %@", 23LL, 2LL, v43);
    uint64_t v46 = swift_bridgeObjectRelease();
    uint64_t v47 = v92;
    static SystemInfo.lockState.getter(v46);
    uint64_t v49 = v93;
    uint64_t v48 = v94;
    uint64_t v50 = v95;
    (*(void (**)(char *, void, uint64_t))(v94 + 104))( v93,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v95);
    uint64_t v51 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
    dispatch thunk of RawRepresentable.rawValue.getter(v104, v50, v51);
    dispatch thunk of RawRepresentable.rawValue.getter(&v103, v50, v51);
    uint64_t v53 = v103;
    uint64_t v52 = v104[0];
    uint64_t v54 = *(void (**)(char *, uint64_t))(v48 + 8);
    v54(v49, v50);
    uint64_t v55 = ((uint64_t (*)(char *, uint64_t))v54)(v47, v50);
    if (v52 == v53)
    {
      uint64_t v56 = static os_log_type_t.default.getter(v55);
      os_log(_:dso:log:_:_:)( v56,  &_mh_execute_header,  qword_100A2B018,  "unpair call failed because in device is in beforeFirstUnlock state",  66LL,  2LL,  _swiftEmptyArrayStorage);
      unint64_t v57 = sub_1000220F0();
      uint64_t v58 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v57, 0LL, 0LL);
      *uint64_t v59 = 0;
      uint64_t v60 = swift_errorRetain(v58);
      uint64_t v61 = static os_log_type_t.error.getter(v60);
      uint64_t v62 = qword_100A2B058;
      uint64_t v63 = swift_allocObject(v99, 72LL, 7LL);
      *(_OWORD *)(v63 + 16) = v98;
      v104[0] = v58;
      swift_errorRetain(v58);
      uint64_t v64 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v65 = String.init<A>(describing:)(v104, v64);
      *(void *)(v63 + 56) = &type metadata for String;
      *(void *)(v63 + 64) = v22;
      *(void *)(v63 + 32) = v65;
      *(void *)(v63 + 40) = v66;
      os_log(_:dso:log:_:_:)(v61, &_mh_execute_header, v62, "Remove beacon got an error (%@)", 31LL, 2LL, v63);
      swift_bridgeObjectRelease();
      swift_errorRelease(v58);
      dispatch_group_leave(v100);
      swift_errorRelease(v58);
    }

    uint64_t v67 = dispatch_group_create();
    dispatch_group_enter(v67);
    uint64_t v68 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
    uint64_t v69 = v87;
    uint64_t v70 = *(void *)(v87 - 8);
    uint64_t v71 = *(unsigned __int8 *)(v70 + 80);
    uint64_t v72 = (v71 + 32) & ~v71;
    uint64_t v73 = swift_allocObject(v68, v72 + *(void *)(v70 + 72), v71 | 7);
    *(_OWORD *)(v73 + 16) = v98;
    (*(void (**)(uint64_t, char *, uint64_t))(v70 + 16))(v73 + v72, v88, v69);
    uint64_t v74 = swift_allocObject(&unk_100940230, 24LL, 7LL);
    *(void *)(v74 + 16) = v67;
    uint64_t v75 = v67;
    uint64_t v76 = v102;
    sub_10047B904(v73, (uint64_t)sub_100154694, v74);
    swift_bridgeObjectRelease();
    swift_release();
    OS_dispatch_group.wait()();
    uint64_t v77 = v97;
    sub_10001DC4C((uint64_t)v14, v97, type metadata accessor for OwnedBeaconRecord);
    uint64_t v78 = (v90 + 16) & v91;
    unint64_t v79 = (v96 + v78 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v80 = (v79 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v81 = swift_allocObject(&unk_100940258, v80 + 10, v90 | 7);
    sub_10002218C(v77, v81 + v78, type metadata accessor for OwnedBeaconRecord);
    uint64_t v82 = (uint64_t (**)(uint64_t))(v81 + v79);
    uint64_t v83 = (uint64_t (*)(uint64_t))v89;
    char *v82 = sub_100153858;
    v82[1] = v83;
    unint64_t v84 = v81 + v80;
    *(void *)unint64_t v84 = v76;
    *(_WORD *)(v84 + 8) = 257;
    swift_retain();
    swift_retain();
    sub_10013F7C0( (uint64_t)v14,  (void (*)(void))sub_10014F0C8,  v81,  type metadata accessor for OwnedBeaconRecord,  &qword_10099B610,  (uint64_t)qword_100A2AE80,  (uint64_t)sub_100154730,  (uint64_t)sub_10014F0CC,  (uint64_t)sub_100021ABC,  (uint64_t)&unk_10093FB00,  (uint64_t)sub_10014F0EC,  byte_10093FB28,  (char *)sub_10014F3D4,  (uint64_t)sub_1005D3C50);
    swift_release();
    swift_release();
    swift_release();

    sub_100018C68((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
  }

  else
  {
LABEL_7:
    swift_bridgeObjectRelease();
    dispatch_group_leave(v100);
  }

  return swift_release();
}

uint64_t sub_1001514C4()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release();
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10015176C(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8) + 80LL);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  uint64_t v9 = (void *)swift_task_alloc(dword_1009A2494);
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100015D58;
  return sub_10013C45C(a1, v5, v6, v7, v8);
}

uint64_t sub_100151800()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v0 + v4 + v1[18];
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  uint64_t v12 = v0 + v4 + v1[19];
  uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1LL, v7)) {
    v9(v12, v7);
  }
  uint64_t v14 = v0 + v4 + v1[20];
  uint64_t v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v14, 1LL, v15))
  {
    uint64_t v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1LL, v7)) {
      v9(v16, v7);
    }
  }

  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | 7);
}

uint64_t sub_1001519B8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SharedBeaconRecord(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (uint64_t *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  return sub_10013CFD0(a1, *(void *)(v1 + 16), v1 + v4, *v5, v5[1]);
}

uint64_t sub_100151A14(void **a1)
{
  return sub_100151A38( a1,  type metadata accessor for SharedBeaconRecord,  (uint64_t)sub_100021ABC,  &qword_1009A24A8,  (uint64_t)&unk_10081AD50);
}

uint64_t sub_100151A38( void **a1, uint64_t (*a2)(uint64_t), uint64_t a3, unint64_t *a4, uint64_t a5)
{
  uint64_t v11 = *(void *)(a2(0LL) - 8);
  unint64_t v12 = (*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = v5 + ((*(void *)(v11 + 64) + v12 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_10014073C( *a1,  *(void *)(v5 + 16),  *(void *)(v5 + 24),  v5 + v12,  *(void (**)(void))v13,  *(void *)(v13 + 8),  a3,  a2,  a4,  a5);
}

uint64_t sub_100151ACC()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v0 + v4 + v1[18];
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  uint64_t v12 = v0 + v4 + v1[19];
  uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1LL, v7)) {
    v9(v12, v7);
  }
  uint64_t v14 = v0 + v4 + v1[20];
  uint64_t v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v14, 1LL, v15))
  {
    uint64_t v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1LL, v7)) {
      v9(v16, v7);
    }
  }

  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | 7);
}

uint64_t sub_100151C8C(uint64_t a1)
{
  return sub_100151C98(a1, type metadata accessor for SharedBeaconRecord);
}

uint64_t sub_100151C98(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v5 = *(void *)(a2(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_100141068( a1,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  v2 + v6,  *(uint64_t (**)(uint64_t))v7,  *(void *)(v7 + 8),  a2);
}

uint64_t sub_100151D04()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_errorRelease(*(void *)(v0 + 16));
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v0 + v4 + v1[18];
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  uint64_t v12 = v0 + v4 + v1[19];
  uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1LL, v7)) {
    v9(v12, v7);
  }
  uint64_t v14 = v0 + v4 + v1[20];
  uint64_t v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v14, 1LL, v15))
  {
    uint64_t v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1LL, v7)) {
      v9(v16, v7);
    }
  }

  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8, v3 | 7);
}

uint64_t sub_100151ECC(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SharedBeaconRecord(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_10013D1EC( a1,  *(void *)(v1 + 16),  v1 + v4,  *(uint64_t (**)(uint64_t))(v1 + v5),  *(uint64_t (**)(uint64_t))(v1 + v5 + 8),  *(uint64_t (**)(uint64_t))(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100151F30()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v0 + v4 + v1[18];
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  uint64_t v12 = v0 + v4 + v1[19];
  uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1LL, v7)) {
    v9(v12, v7);
  }
  uint64_t v14 = v0 + v4 + v1[20];
  uint64_t v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v14, 1LL, v15))
  {
    uint64_t v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1LL, v7)) {
      v9(v16, v7);
    }
  }

  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | 7);
}

uint64_t sub_1001520F0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for SharedBeaconRecord(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = (void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = (void *)swift_task_alloc(dword_1009A24B4);
  *(void *)(v2 + 16) = v13;
  void *v13 = v2;
  v13[1] = sub_100015D58;
  return sub_10013D6E0(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_1001521AC()
{
  uint64_t v1 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  swift_release();
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v0 + v4 + *(int *)(v1 + 24);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  uint64_t v10 = v7 + *(int *)(v1 + 28);
  uint64_t v11 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1001522A0()
{
  uint64_t v1 = *(void *)(type metadata accessor for OwnedBeaconGroup(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (uint64_t *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  return sub_1001380AC(*(void *)(v0 + 16), v0 + v2, *v3, v3[1]);
}

uint64_t sub_1001522E8()
{
  uint64_t v1 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((v4 + *(void *)(v2 + 64) + 31) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v7 + *(int *)(v1 + 24);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  uint64_t v10 = v7 + *(int *)(v1 + 28);
  uint64_t v11 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

void sub_1001523E8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconGroup(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  sub_100138BB0( a1,  v1 + v4,  *(void (**)(void))(v1 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v1 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8),  *(unsigned __int8 *)(v1 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16),  *(void (**)(void *))(v1 + ((v5 + 31) & 0xFFFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100152450()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100152460()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100152484()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001524A8()
{
  uint64_t v1 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  swift_release();
  swift_release();
  swift_release();
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v0 + v4 + *(int *)(v1 + 24);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  uint64_t v10 = v7 + *(int *)(v1 + 28);
  uint64_t v11 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1001525A8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconGroup(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_100139994( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void (**)(void, __n128))(v1 + 32),  *(void *)(v1 + 40),  v1 + v4,  *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100152600()
{
  uint64_t v1 = *(void *)(sub_100004AEC((uint64_t *)&unk_1009A9C30) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = v0 + v3;
  unint64_t v6 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v6 - 1) + 48LL))(v0 + v3, 1LL, v6))
  {
    sub_100016F9C(*(void *)v5, *(void *)(v5 + 8));
    uint64_t v7 = v5 + v6[5];
    uint64_t v8 = type metadata accessor for UUID(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v10(v7, v8);
    uint64_t v11 = v5 + v6[6];
    uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
    switch(swift_getEnumCaseMultiPayload(v11, v12))
    {
      case 0u:
      case 4u:
        goto LABEL_7;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 2u:
        v10(v11, v8);
        uint64_t v21 = v10;
        sub_100004AEC((uint64_t *)&unk_1009B0520);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_6;
      case 3u:
        v10(v11, v8);
        uint64_t v21 = v10;
        sub_100004AEC((uint64_t *)&unk_1009AF840);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_6:
        uint64_t v10 = v21;
LABEL_7:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }

    uint64_t v13 = v5 + v6[7];
    uint64_t v14 = v5 + v6[8];
    uint64_t v15 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
    sub_100016F9C(*(void *)(v5 + v6[9]), *(void *)(v5 + v6[9] + 8));
    uint64_t v16 = (uint64_t *)(v5 + v6[10]);
    unint64_t v17 = v16[1];
    if (v17 >> 60 != 15) {
      sub_100016F9C(*v16, v17);
    }
    uint64_t v18 = (uint64_t *)(v5 + v6[11]);
    unint64_t v19 = v18[1];
    if (v19 >> 60 != 15) {
      sub_100016F9C(*v18, v19);
    }
    sub_100016F9C(*(void *)(v5 + v6[12]), *(void *)(v5 + v6[12] + 8));
    sub_100016F9C(*(void *)(v5 + v6[13]), *(void *)(v5 + v6[13] + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_release();
  return swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8, v2 | 7);
}

void sub_1001528D4(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_100004AEC((uint64_t *)&unk_1009A9C30) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_10013AEEC(a1, v1 + v4, *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10015292C()
{
  uint64_t v2 = *(void *)(type metadata accessor for OwnedBeaconGroup(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFF8LL;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = swift_task_alloc(dword_1009A252C);
  __int128 v9 = *(_OWORD *)(v0 + v5);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v8;
  *(void *)uint64_t v8 = v1;
  *(void *)(v8 + 8) = sub_100015D58;
  *(_OWORD *)(v8 + 192) = v9;
  *(void *)(v8 + 176) = v6;
  *(void *)(v8 + 184) = v7;
  return swift_task_switch(sub_100139B70, 0LL, 0LL);
}

uint64_t sub_1001529D0(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc(dword_1009A254C);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100015D58;
  return sub_10013A2A0(a1, a2, v7, v6);
}

uint64_t sub_100152A3C()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100152AB8(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  __int128 v9 = (void *)swift_task_alloc(dword_1009A255C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v9;
  *__int128 v9 = v2;
  v9[1] = sub_100015D58;
  return sub_10013A870(a1, v5, v6, v7, v8);
}

uint64_t sub_100152B4C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100152B70()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100152BE4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  return sub_10013BC3C(a1, a2, *(void *)(v2 + 16), v2 + ((v5 + 24) & ~v5));
}

uint64_t sub_100152C34()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100152CA8(_BYTE *a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  return sub_10013BD8C(a1, *(void (**)(uint64_t *))(v1 + 16), *(void *)(v1 + 24), v1 + ((v3 + 32) & ~v3));
}

uint64_t sub_100152CE8(uint64_t a1)
{
  return sub_10013BE84(a1, *(void (**)(void *))(v1 + 16));
}

uint64_t sub_100152CF4()
{
  uint64_t v1 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v7 + *(int *)(v1 + 24);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  uint64_t v10 = v7 + *(int *)(v1 + 28);
  uint64_t v11 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 16, v5);
}

void sub_100152DF0(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconGroup(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1001381C8( a1,  v1 + v4,  *(void *)(v1 + v5),  *(void (**)(void *))(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_100152E50()
{
  uint64_t v1 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v7 + *(int *)(v1 + 24);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  uint64_t v10 = v7 + *(int *)(v1 + 28);
  uint64_t v11 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100152F4C(uint64_t *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconGroup(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_10013B6CC( a1,  v1 + v4,  *(void (**)(void))(v1 + v5),  *(void *)(v1 + v5 + 8),  *(void (**)(void))(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100152FB0(void **a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconGroup(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_10054CDDC( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  v1 + v4,  *(void (**)(void))v5,  *(void *)(v5 + 8));
}

uint64_t sub_10015300C()
{
  uint64_t v1 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  swift_release();
  swift_release();
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v0 + v4 + *(int *)(v1 + 24);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  uint64_t v10 = v7 + *(int *)(v1 + 28);
  uint64_t v11 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100153108(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconGroup(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_100140E18( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  v1 + v4,  *(uint64_t (**)(uint64_t))(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100153160()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5 + v4 + 1, v3 | 7);
}

uint64_t sub_100153404(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_10013BF28(a1, a2, *(void *)(v2 + 16), v2 + v6, *(unsigned __int8 *)(v2 + v6 + *(void *)(v5 + 64)));
}

uint64_t sub_100153460(uint64_t a1, char a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  uint64_t v5 = a1;
  char v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_100153498(uint64_t a1)
{
  return sub_10013BFB4(a1, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16));
}

uint64_t sub_1001534A4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001534CC()
{
  uint64_t v1 = *(void *)(v0 + 80);
  *(void *)(v0 + 80) = 0LL;
  return swift_release(v1);
}

uint64_t sub_1001534D8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001534E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001534F8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100153504()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100153530(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1009B277C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000159BC;
  return sub_100517C7C(a1, v4, v1 + 24);
}

uint64_t sub_100153598()
{
  uint64_t v2 = (void *)swift_task_alloc(dword_1009A2604);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100015D58;
  v2[17] = v0;
  return swift_task_switch(sub_1001323FC, 0LL, 0LL);
}

uint64_t sub_1001535F4(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1009A2614);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000159BC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1009A2610 + dword_1009A2610))(a1, v4);
}

uint64_t sub_100153664()
{
  return sub_1001538E8((void (*)(void))&_swift_release);
}

uint64_t sub_100153670()
{
  return sub_100132B80(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100153678(uint64_t a1)
{
  return sub_10079AA04(a1, v1);
}

uint64_t sub_100153690(uint64_t a1)
{
  return sub_10004338C(a1);
}

uint64_t sub_1001536A8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t *sub_1001536B8(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  sub_1000182F0(*a1, a1[1]);
  sub_100016F9C(v2, v3);
  sub_1000182F0(v4, v5);
  return a1;
}

uint64_t sub_100153718()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10015373C()
{
  return sub_1001538E8((void (*)(void))&_swift_release);
}

void sub_100153748()
{
}

uint64_t sub_100153750()
{
  swift_release(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10015377C(char a1)
{
}

uint64_t sub_100153784()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1001537B8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc(dword_1009B28C4);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100015D58;
  return sub_1004F815C(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100153838(uint64_t a1)
{
  return sub_1004B55A8(a1, v1);
}

void sub_100153850()
{
}

uint64_t sub_100153858(uint64_t a1)
{
  return sub_10013E28C(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_100153864@<X0>(_BYTE *a1@<X8>)
{
  return sub_1006753F4(v1, a1);
}

uint64_t sub_10015387C()
{
  return sub_1001314F4(*(void (**)(char *))(v0 + 16));
}

uint64_t sub_100153898()
{
  return sub_100131594(*(void *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1001538A4@<X0>(uint64_t *a1@<X8>)
{
  return sub_10012E854(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1001538BC(uint64_t a1)
{
  return sub_100131B3C(a1, *(void (**)(char *))(v1 + 16));
}

uint64_t sub_1001538C4(uint64_t a1)
{
  return sub_100131CC8(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001538D0()
{
  return sub_10012EC30(v0[2], v0[3], v0[4]);
}

uint64_t sub_1001538DC()
{
  return sub_1001538E8((void (*)(void))&_swift_release);
}

uint64_t sub_1001538E8(void (*a1)(void))
{
  return swift_deallocObject(v1, 32LL, 7LL);
}

uint64_t sub_100153920()
{
  return sub_10012ECAC();
}

uint64_t sub_10015392C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100153960(uint64_t a1)
{
  return sub_10012ED54(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10015396C()
{
  uint64_t v1 = sub_100004AEC((uint64_t *)&unk_1009B0830);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (uint64_t *)(v0 + v4);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v1) == 1)
  {
    swift_errorRelease(*v6);
  }

  else
  {
    sub_100016F9C(*v6, v6[1]);
    uint64_t v7 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
    uint64_t v8 = (char *)v6 + v7[5];
    uint64_t v9 = type metadata accessor for UUID(0LL);
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = *(void (**)(char *, uint64_t))(v10 + 8);
    v11(v8, v9);
    uint64_t v12 = (char *)v6 + v7[6];
    uint64_t v13 = type metadata accessor for StableIdentifier(0LL);
    switch(swift_getEnumCaseMultiPayload(v12, v13))
    {
      case 0u:
      case 4u:
        goto LABEL_8;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_8;
      case 2u:
        v11(v12, v9);
        uint64_t v22 = v5;
        sub_100004AEC((uint64_t *)&unk_1009B0520);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 3u:
        v11(v12, v9);
        uint64_t v22 = v5;
        sub_100004AEC((uint64_t *)&unk_1009AF840);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_7:
        uint64_t v5 = v22;
LABEL_8:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }

    uint64_t v14 = (char *)v6 + v7[7];
    uint64_t v15 = (char *)v6 + v7[8];
    uint64_t v16 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8LL))(v15, v16);
    sub_100016F9C(*(uint64_t *)((char *)v6 + v7[9]), *(uint64_t *)((char *)v6 + v7[9] + 8));
    unint64_t v17 = (uint64_t *)((char *)v6 + v7[10]);
    unint64_t v18 = v17[1];
    if (v18 >> 60 != 15) {
      sub_100016F9C(*v17, v18);
    }
    unint64_t v19 = (uint64_t *)((char *)v6 + v7[11]);
    unint64_t v20 = v19[1];
    if (v20 >> 60 != 15) {
      sub_100016F9C(*v19, v20);
    }
    sub_100016F9C(*(uint64_t *)((char *)v6 + v7[12]), *(uint64_t *)((char *)v6 + v7[12] + 8));
    sub_100016F9C(*(uint64_t *)((char *)v6 + v7[13]), *(uint64_t *)((char *)v6 + v7[13] + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject( v0,  ((((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8,  v3 | 7);
}

uint64_t sub_100153C64()
{
  uint64_t v1 = *(void *)(sub_100004AEC((uint64_t *)&unk_1009B0830) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_10012F080(v0 + v2, *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100153CC0(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord(0LL);
  sub_1006DF8C4(a1 + *(int *)(v4 + 24), v3);
  return v5 & 1;
}

BOOL sub_100153D0C(uint64_t *a1)
{
  return (sub_1005D7464(a1, *(void *)(v1 + 16)) & 1) == 0;
}

uint64_t sub_100153D3C()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  unint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100153FD4(uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8) + 80LL);
  return sub_100130388(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_10015401C()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  unint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject( v0,  ((((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8,  v3 | 7);
}

uint64_t sub_1001542EC(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_10013C128( a1,  v1 + v4,  *(uint64_t (**)(uint64_t))(v1 + v5),  *(void *)(v1 + v5 + 8),  *(void *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v1 + ((((v5 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10015435C()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  unint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 10, v3 | 7);
}

uint64_t sub_10015461C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_1005DB10C( a1,  v1 + v4,  *(void *)(v1 + v5),  *(void *)(v1 + v5 + 8),  *(void *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8LL)),  *(unsigned __int8 *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8),  *(unsigned __int8 *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 9));
}

uint64_t sub_10015471C@<X0>(uint64_t a1@<X8>)
{
  return sub_10014F098(a1);
}

uint64_t sub_100154730@<X0>(uint64_t a1@<X8>)
{
  return sub_10014F0CC(a1);
}

uint64_t sub_100154744()
{
  uint64_t v1 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = 0LL;
  unint64_t v35 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(84LL);
  v7._countAndFlagsBits = 0x7069726373627553LL;
  v7._object = (void *)0xEC0000006E6F6974LL;
  String.append(_:)(v7);
  v8._object = (void *)0x8000000100855D30LL;
  v8._countAndFlagsBits = 0xD000000000000012LL;
  String.append(_:)(v8);
  uint64_t v9 = (int *)type metadata accessor for NotifyMeRequest.Subscription(0LL);
  v10._countAndFlagsBits = UUID.uuidString.getter(v9);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._object = (void *)0xEC000000203A6574LL;
  v11._countAndFlagsBits = 0x6144747261747320LL;
  String.append(_:)(v11);
  sub_10001581C(v0, (uint64_t)v6, (uint64_t *)&unk_10099D720);
  v12._countAndFlagsBits = String.init<A>(describing:)(v6, v4);
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x3A64697575616220LL;
  v13._object = (void *)0xE900000000000020LL;
  String.append(_:)(v13);
  sub_10001581C(v0 + v9[7], (uint64_t)v3, &qword_10099D8A0);
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v3, 1LL, v14);
  if ((_DWORD)v16 == 1)
  {
    sub_100015794((uint64_t)v3, &qword_10099D8A0);
    uint64_t v17 = 0LL;
    unint64_t v18 = (void *)0xE000000000000000LL;
  }

  else
  {
    uint64_t v17 = UUID.uuidString.getter(v16);
    unint64_t v18 = v19;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v3, v14);
  }

  v20._countAndFlagsBits = v17;
  v20._object = v18;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 0x756F632073646920LL;
  v21._object = (void *)0xEB0000000020746ELL;
  String.append(_:)(v21);
  v33._countAndFlagsBits = *(void *)(*(void *)(v0 + v9[8]) + 16LL);
  v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 0xD000000000000016LL;
  v23._object = (void *)0x8000000100855D50LL;
  String.append(_:)(v23);
  sub_10001581C(v0 + v9[9], (uint64_t)v6, (uint64_t *)&unk_10099D720);
  v24._countAndFlagsBits = String.init<A>(describing:)(v6, v4);
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v33._countAndFlagsBits = 0LL;
  v33._object = (void *)0xE000000000000000LL;
  _StringGuts.grow(_:)(22LL);
  swift_bridgeObjectRelease();
  v33._countAndFlagsBits = 0xD000000000000014LL;
  v33._object = (void *)0x8000000100855D70LL;
  v32[1] = *(void *)(*(void *)(v0 + v9[11]) + 16LL);
  v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  strcpy((char *)&v33, " productId: ");
  BYTE5(v33._object) = 0;
  HIWORD(v33._object) = -5120;
  uint64_t v26 = (uint64_t *)(v0 + v9[10]);
  uint64_t v27 = v26[1];
  if (v27) {
    uint64_t v28 = *v26;
  }
  else {
    uint64_t v28 = 0LL;
  }
  if (v27) {
    uint64_t v29 = (void *)v26[1];
  }
  else {
    uint64_t v29 = (void *)0xE000000000000000LL;
  }
  swift_bridgeObjectRetain(v27);
  v30._countAndFlagsBits = v28;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  return v34;
}

uint64_t sub_100154B3C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A2738);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::String v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100012ED8(a1, v8);
  unint64_t v10 = sub_100157598();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NotifyMeRequest.RequestBody.CodingKeys,  &type metadata for NotifyMeRequest.RequestBody.CodingKeys,  v10,  v8,  v9);
  uint64_t v16 = a2;
  uint64_t v11 = sub_100004AEC(&qword_1009A2748);
  uint64_t v12 = sub_100157728( &qword_1009A2750,  &qword_1009A2758,  (uint64_t)&unk_1007EE010,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100154C60()
{
  return 0x6269726373627573LL;
}

uint64_t sub_100154C7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x6269726373627573LL && a2 == 0xE900000000000065LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xE900000000000065LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6269726373627573LL, 0xE900000000000065LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

uint64_t sub_100154D1C(uint64_t a1)
{
  unint64_t v2 = sub_100157598();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100154D44(uint64_t a1)
{
  unint64_t v2 = sub_100157598();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100154D6C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1001575DC(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100154D94(void *a1)
{
  return sub_100154B3C(a1, *v1);
}

uint64_t sub_100154DAC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100154DE8 + 4 * byte_1007EDF90[a1]))( 0x7461447472617473LL,  0xE900000000000065LL);
}

uint64_t sub_100154DE8()
{
  return 0x7069726373627573LL;
}

uint64_t sub_100154E0C()
{
  return 0x646E756F46636F6CLL;
}

uint64_t sub_100154E30()
{
  return 0x646975756162LL;
}

uint64_t sub_100154E44()
{
  return 7562345LL;
}

unint64_t sub_100154E54()
{
  return 0xD000000000000014LL;
}

uint64_t sub_100154E70()
{
  return 0x49746375646F7270LL;
}

uint64_t sub_100154E8C()
{
  return 0x7261646E6F636573LL;
}

uint64_t sub_100154EAC()
{
  return 0x76654464656E776FLL;
}

uint64_t sub_100154ED0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A2790);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1001577AC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NotifyMeRequest.Subscription.CodingKeys,  &type metadata for NotifyMeRequest.Subscription.CodingKeys,  v11,  v9,  v10);
  LOBYTE(v30) = 0;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = sub_100007864( &qword_10099DA40,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3, &v30, v5, v12, v13);
  if (!v2)
  {
    uint64_t v27 = (int *)type metadata accessor for NotifyMeRequest.Subscription(0LL);
    uint64_t v28 = v3;
    uint64_t v14 = v3 + v27[5];
    LOBYTE(v30) = 1;
    uint64_t v15 = type metadata accessor for UUID(0LL);
    uint64_t v16 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v30, v5, v15, v16);
    uint64_t v17 = *(unsigned __int8 *)(v28 + v27[6]);
    LOBYTE(v30) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v30, v5);
    uint64_t v18 = v28 + v27[7];
    LOBYTE(v30) = 3;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v18, &v30, v5, v15, v16);
    uint64_t v30 = *(void *)(v28 + v27[8]);
    char v29 = 4;
    uint64_t v19 = sub_100004AEC(&qword_10099E868);
    uint64_t v20 = sub_1001577F0( (unint64_t *)&qword_1009A2798,  (void (*)(void))sub_1000170A4,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v30, &v29, v5, v19, v20);
    uint64_t v21 = v28 + v27[9];
    LOBYTE(v30) = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v30, v5, v12, v13);
    Swift::String v22 = (uint64_t *)(v28 + v27[10]);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    LOBYTE(v30) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v24, &v30, v5);
    uint64_t v30 = *(void *)(v28 + v27[11]);
    char v29 = 7;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v30, &v29, v5, v19, v20);
    uint64_t v30 = *(void *)(v28 + v27[12]);
    char v29 = 8;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v30, &v29, v5, v19, v20);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10015522C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v3 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v3);
  uint64_t v43 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v50 = type metadata accessor for UUID(0LL);
  uint64_t v45 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v40 - v11;
  uint64_t v44 = sub_100004AEC(&qword_1009A2778);
  uint64_t v13 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = (int *)type metadata accessor for NotifyMeRequest.Subscription(0LL);
  __chkstk_darwin(v46);
  uint64_t v47 = (uint64_t)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = a1;
  uint64_t v17 = a1[3];
  uint64_t v18 = a1[4];
  sub_100012ED8(a1, v17);
  unint64_t v19 = sub_1001577AC();
  uint64_t v20 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NotifyMeRequest.Subscription.CodingKeys,  &type metadata for NotifyMeRequest.Subscription.CodingKeys,  v19,  v17,  v18);
  if (v20) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v48);
  }
  uint64_t v21 = v6;
  uint64_t v49 = v10;
  uint64_t v22 = v13;
  uint64_t v23 = type metadata accessor for Date(0LL);
  LOBYTE(v52) = 0;
  uint64_t v24 = sub_100007864( &qword_10099DA70,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v25 = v44;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v23, &v52, v44, v23, v24);
  uint64_t v40 = v24;
  uint64_t v41 = v23;
  uint64_t v26 = v47;
  sub_100015750((uint64_t)v12, v47, (uint64_t *)&unk_10099D720);
  LOBYTE(v52) = 1;
  uint64_t v27 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v28 = v50;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v21, v50, &v52, v25, v50, v27);
  uint64_t v29 = v25;
  uint64_t v30 = v46;
  (*(void (**)(uint64_t, void *, uint64_t))(v45 + 32))(v26 + v46[5], v21, v28);
  LOBYTE(v52) = 2;
  *(_BYTE *)(v26 + v30[6]) = KeyedDecodingContainer.decode(_:forKey:)(&v52, v29) & 1;
  LOBYTE(v52) = 3;
  uint64_t v31 = (uint64_t)v43;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v28, &v52, v44, v28, v27);
  sub_100015750(v31, v26 + v30[7], &qword_10099D8A0);
  uint64_t v32 = sub_100004AEC(&qword_10099E868);
  char v51 = 4;
  uint64_t v33 = sub_1001577F0( &qword_1009A2788,  (void (*)(void))sub_100016FE0,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v52, v32, &v51, v44, v32, v33);
  *(void *)(v26 + v30[8]) = v52;
  LOBYTE(v52) = 5;
  uint64_t v34 = (uint64_t)v49;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v41, &v52, v44, v41, v40);
  sub_100015750(v34, v26 + v30[9], (uint64_t *)&unk_10099D720);
  LOBYTE(v52) = 6;
  uint64_t v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v52, v44);
  uint64_t v36 = (uint64_t *)(v26 + v30[10]);
  *uint64_t v36 = v35;
  v36[1] = v37;
  char v51 = 7;
  uint64_t v38 = v44;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v52, v32, &v51, v44, v32, v33);
  *(void *)(v26 + v46[11]) = v52;
  char v51 = 8;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v52, v32, &v51, v38, v32, v33);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v15, v38);
  *(void *)(v26 + v46[12]) = v52;
  sub_100157858(v26, v42);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v48);
  return sub_10015789C(v26);
}

uint64_t sub_100155900()
{
  return sub_100154DAC(*v0);
}

uint64_t sub_100155908@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100157BF0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10015592C(uint64_t a1)
{
  unint64_t v2 = sub_1001577AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100155954(uint64_t a1)
{
  unint64_t v2 = sub_1001577AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10015597C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10015522C(a1, a2);
}

uint64_t sub_100155990(void *a1)
{
  return sub_100154ED0(a1);
}

uint64_t sub_1001559A4(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[3];
  uint64_t v3 = a2[4];
  sub_100012ED8(a2, v2);
  uint64_t v4 = dispatch thunk of Encoder.singleValueContainer()(v9, v2, v3);
  uint64_t v5 = Date.epoch.getter(v4);
  uint64_t v6 = v10;
  uint64_t v7 = v11;
  sub_100037298((uint64_t)v9, v10);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)(v5, v6, v7);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v9);
}

uint64_t sub_100155A48(uint64_t a1, uint64_t a2)
{
  v2[8] = a1;
  v2[9] = a2;
  uint64_t v3 = type metadata accessor for HashAlgorithm(0LL);
  v2[10] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[11] = v4;
  v2[12] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0LL);
  v2[13] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[14] = v6;
  v2[15] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Date(0LL);
  v2[16] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[17] = v8;
  v2[18] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100155AF8, 0LL, 0LL);
}

void sub_100155AF8()
{
  unint64_t v1 = sub_100412D14((uint64_t)_swiftEmptyArrayStorage);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  sub_10005C260( 1702195828LL,  0xE400000000000000LL,  0xD00000000000001BLL,  0x8000000100855CD0LL,  isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  id v3 = [(id)objc_opt_self(AKDevice) currentDevice];
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = [v3 serverFriendlyDescription];

    if (v5)
    {
      uint64_t v6 = v0[17];
      uint64_t v7 = v0[18];
      uint64_t v8 = (void *)v0[15];
      uint64_t v9 = v0[16];
      uint64_t v36 = v0[14];
      uint64_t v37 = v0[13];
      uint64_t v38 = v0[8];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      uint64_t v12 = v11;

      char v13 = swift_isUniquelyReferenced_nonNull_native(v1);
      sub_10005C260(v10, v12, 0xD000000000000011LL, 0x8000000100854B60LL, v13);
      unint64_t v14 = v1;
      uint64_t v15 = swift_bridgeObjectRelease();
      uint64_t v16 = Date.init()(v15);
      uint64_t v17 = Date.epoch.getter(v16);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v9);
      v0[4] = v17;
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
      uint64_t v20 = v19;
      char v21 = swift_isUniquelyReferenced_nonNull_native(v14);
      sub_10005C260(v18, v20, 0xD000000000000015LL, 0x8000000100855CF0LL, v21);
      swift_bridgeObjectRelease();
      v0[5] = 1LL;
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      uint64_t v24 = v23;
      char v25 = swift_isUniquelyReferenced_nonNull_native(v14);
      sub_10005C260(v22, v24, 0xD000000000000013LL, 0x8000000100855D10LL, v25);
      unint64_t v26 = v14;
      uint64_t v27 = swift_bridgeObjectRelease();
      uint64_t v28 = sub_1003F3498(v27);
      uint64_t v30 = v29;
      char v31 = swift_isUniquelyReferenced_nonNull_native(v26);
      sub_10005C260(v28, v30, 0x6567412D72657355LL, 0xEA0000000000746ELL, v31);
      v0[19] = v26;
      swift_bridgeObjectRelease();
      uint64_t v32 = type metadata accessor for JSONEncoder(0LL);
      swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
      v0[20] = JSONEncoder.init()();
      *uint64_t v8 = sub_1001559A4;
      v8[1] = 0LL;
      (*(void (**)(void *, void, uint64_t))(v36 + 104))( v8,  enum case for JSONEncoder.DateEncodingStrategy.custom(_:),  v37);
      dispatch thunk of JSONEncoder.dateEncodingStrategy.setter(v8);
      v0[6] = v38;
      unint64_t v33 = sub_100156420();
      v0[21] = dispatch thunk of JSONEncoder.encode<A>(_:)(v0 + 6, &type metadata for NotifyMeRequest.RequestBody, v33);
      v0[22] = v34;
      swift_bridgeObjectRelease();
      uint64_t v39 = (void (__cdecl *)())((char *)&dword_1009AD0D8 + dword_1009AD0D8);
      uint64_t v35 = (void *)swift_task_alloc(unk_1009AD0DC);
      v0[23] = v35;
      *uint64_t v35 = v0;
      v35[1] = sub_100155EF0;
      v39();
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t sub_100155EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 184);
  *(void *)(v3 + 192) = a1;
  *(void *)(v3 + 200) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_100155F4C, 0LL, 0LL);
}

uint64_t sub_100155F4C()
{
  uint64_t v2 = v0[24];
  unint64_t v1 = v0[25];
  uint64_t v4 = v0[21];
  unint64_t v3 = v0[22];
  uint64_t v6 = v0[11];
  uint64_t v5 = v0[12];
  uint64_t v7 = v0[10];
  v0[2] = v2;
  v0[3] = v1;
  sub_10001736C(v2, v1);
  sub_10001736C(v4, v3);
  sub_1004A8638(v4, v3);
  sub_100016F9C(v4, v3);
  sub_100016F9C(v2, v1);
  uint64_t v8 = v0[2];
  uint64_t v9 = v0[3];
  v0[26] = v8;
  v0[27] = v9;
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  uint64_t v10 = Data.hash(algorithm:)(v5, v8, v9);
  uint64_t v12 = v11;
  v0[28] = v10;
  v0[29] = v11;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v15 = (char *)&dword_1009AD0D0 + dword_1009AD0D0;
  char v13 = (void *)swift_task_alloc(unk_1009AD0D4);
  v0[30] = v13;
  void *v13 = v0;
  v13[1] = sub_100156078;
  return ((uint64_t (*)(uint64_t, uint64_t, void))v15)(v10, v12, v0[9]);
}

uint64_t sub_100156078(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 240LL);
  *(void *)(*(void *)v2 + 248LL) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_1001561E0;
  }

  else
  {
    uint64_t v7 = v4[28];
    unint64_t v8 = v4[29];
    v4[32] = a1;
    sub_100016F9C(v7, v8);
    uint64_t v6 = sub_1001560F4;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1001560F4()
{
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v3 = *(void *)(v0 + 152);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  uint64_t v13 = v3;
  sub_100129198(v1, (uint64_t)sub_1003F68BC, 0LL, isUniquelyReferenced_nonNull_native, &v13);
  if (v2) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v6 = *(void *)(v0 + 208);
  unint64_t v7 = *(void *)(v0 + 216);
  uint64_t v8 = v13;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_100016F9C(v6, v7);
  uint64_t v9 = *(void *)(v0 + 168);
  uint64_t v10 = *(void *)(v0 + 176);
  uint64_t v11 = *(void *)(v0 + 120);
  uint64_t v12 = *(void *)(v0 + 96);
  swift_task_dealloc(*(void *)(v0 + 144));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v8, v9, v10);
}

uint64_t sub_1001561E0()
{
  uint64_t v1 = *(void *)(v0 + 208);
  unint64_t v2 = *(void *)(v0 + 216);
  sub_100016F9C(*(void *)(v0 + 224), *(void *)(v0 + 232));
  sub_100016F9C(v1, v2);
  if (qword_10099B118 != -1) {
    swift_once(&qword_10099B118, sub_1000F95A0);
  }
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10000A720(v4, (uint64_t)qword_100A2A1C8);
  swift_errorRetain(v3);
  uint64_t v5 = swift_errorRetain(v3);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter(v6);
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 248);
  if (v8)
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v10 = 138543362;
    swift_errorRetain(v9);
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(void *)(v0 + 56) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v10 + 4, v10 + 12);
    *uint64_t v11 = v12;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Could not sign request: %{public}@.", v10, 0xCu);
    uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v11, 1LL, v13);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_release();
    swift_release();

    swift_errorRelease(v9);
  }

  else
  {
    swift_release();
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    swift_release();
  }

  uint64_t v14 = *(void *)(v0 + 168);
  uint64_t v15 = *(void *)(v0 + 176);
  uint64_t v16 = *(void *)(v0 + 152);
  uint64_t v17 = *(void *)(v0 + 120);
  uint64_t v18 = *(void *)(v0 + 96);
  swift_task_dealloc(*(void *)(v0 + 144));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v16, v14, v15);
}

unint64_t sub_100156420()
{
  unint64_t result = qword_1009A2680;
  if (!qword_1009A2680)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EE098, &type metadata for NotifyMeRequest.RequestBody);
    atomic_store(result, (unint64_t *)&qword_1009A2680);
  }

  return result;
}

uint64_t type metadata accessor for NotifyMeRequest.Subscription(uint64_t a1)
{
  uint64_t result = qword_1009A26E0;
  if (!qword_1009A26E0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NotifyMeRequest.Subscription);
  }
  return result;
}

ValueMetadata *type metadata accessor for NotifyMeRequest.RequestBody()
{
  return &type metadata for NotifyMeRequest.RequestBody;
}

ValueMetadata *type metadata accessor for NotifyMeRequest()
{
  return &type metadata for NotifyMeRequest;
}

uint64_t *sub_1001564C0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v37 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v37(a2, 1LL, v7))
    {
      uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099D720);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0LL, 1LL, v7);
    }

    uint64_t v11 = a3[5];
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for UUID(0LL);
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
    v16(v12, v13, v14);
    uint64_t v17 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))((char *)a2 + v17, 1LL, v14))
    {
      uint64_t v20 = sub_100004AEC(&qword_10099D8A0);
      memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64LL));
    }

    else
    {
      v16(v18, v19, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v18, 0LL, 1LL, v14);
    }

    uint64_t v21 = a3[8];
    uint64_t v22 = a3[9];
    uint64_t v23 = *(uint64_t *)((char *)a2 + v21);
    *(uint64_t *)((char *)a1 + v21) = v23;
    uint64_t v24 = (char *)a1 + v22;
    char v25 = (char *)a2 + v22;
    __n128 v26 = swift_bridgeObjectRetain(v23);
    if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v37)(v25, 1LL, v7, v26))
    {
      uint64_t v27 = sub_100004AEC((uint64_t *)&unk_10099D720);
      memcpy(v24, v25, *(void *)(*(void *)(v27 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v24, v25, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v24, 0LL, 1LL, v7);
    }

    uint64_t v28 = a3[10];
    uint64_t v29 = a3[11];
    uint64_t v30 = (uint64_t *)((char *)a1 + v28);
    char v31 = (uint64_t *)((char *)a2 + v28);
    uint64_t v32 = v31[1];
    void *v30 = *v31;
    v30[1] = v32;
    uint64_t v33 = *(uint64_t *)((char *)a2 + v29);
    *(uint64_t *)((char *)a1 + v29) = v33;
    uint64_t v34 = a3[12];
    uint64_t v35 = *(uint64_t *)((char *)a2 + v34);
    *(uint64_t *)((char *)a1 + v34) = v35;
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v35);
  }

  return a1;
}

uint64_t sub_10015671C(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(a1, 1LL, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t v7 = a1 + a2[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = a1 + a2[7];
  swift_bridgeObjectRelease(*(void *)(a1 + a2[8]));
  uint64_t v12 = a1 + a2[9];
  if (!v6(v12, 1LL, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v12, v4);
  }
  swift_bridgeObjectRelease(*(void *)(a1 + a2[10] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[11]));
  return swift_bridgeObjectRelease(*(void *)(a1 + a2[12]));
}

char *sub_100156844(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v35(a2, 1LL, v6))
  {
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
  }

  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v14(v10, v11, v12);
  uint64_t v15 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(&a2[v15], 1LL, v12))
  {
    uint64_t v18 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    v14(v16, v17, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v16, 0LL, 1LL, v12);
  }

  uint64_t v19 = a3[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = *(void *)&a2[v19];
  *(void *)&a1[v19] = v21;
  uint64_t v22 = &a1[v20];
  uint64_t v23 = &a2[v20];
  __n128 v24 = swift_bridgeObjectRetain(v21);
  if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v35)(v23, 1LL, v6, v24))
  {
    uint64_t v25 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v22, v23, *(void *)(*(void *)(v25 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v22, v23, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v22, 0LL, 1LL, v6);
  }

  uint64_t v26 = a3[10];
  uint64_t v27 = a3[11];
  uint64_t v28 = &a1[v26];
  uint64_t v29 = &a2[v26];
  uint64_t v30 = *((void *)v29 + 1);
  *(void *)uint64_t v28 = *(void *)v29;
  *((void *)v28 + 1) = v30;
  uint64_t v31 = *(void *)&a2[v27];
  *(void *)&a1[v27] = v31;
  uint64_t v32 = a3[12];
  uint64_t v33 = *(void *)&a2[v32];
  *(void *)&a1[v32] = v33;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v33);
  return a1;
}

char *sub_100156A74(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1LL, v6);
  uint64_t v43 = v8;
  int v10 = v8(a2, 1LL, v6);
  uint64_t v42 = v7;
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v16 + 24);
  v17(v13, v14, v15);
  a1[a3[6]] = a2[a3[6]];
  uint64_t v44 = a3;
  uint64_t v18 = a3[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v22 = v21(&a1[v18], 1LL, v15);
  int v23 = v21(v20, 1LL, v15);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v20, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v19, 0LL, 1LL, v15);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
LABEL_12:
    uint64_t v24 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_13;
  }

  v17(v19, v20, v15);
LABEL_13:
  uint64_t v25 = v44[8];
  uint64_t v26 = *(void *)&a2[v25];
  *(void *)&a1[v25] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease();
  uint64_t v27 = v44[9];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  int v30 = v43(&a1[v27], 1LL, v6);
  int v31 = v43(v29, 1LL, v6);
  if (!v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 24))(v28, v29, v6);
      goto LABEL_19;
    }

    (*(void (**)(char *, uint64_t))(v42 + 8))(v28, v6);
    goto LABEL_18;
  }

  if (v31)
  {
LABEL_18:
    uint64_t v32 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v28, v29, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v28, 0LL, 1LL, v6);
LABEL_19:
  uint64_t v33 = v44[10];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  *(void *)uint64_t v34 = *(void *)v35;
  uint64_t v36 = *((void *)v35 + 1);
  *((void *)v34 + 1) = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease();
  uint64_t v37 = v44[11];
  uint64_t v38 = *(void *)&a2[v37];
  *(void *)&a1[v37] = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease();
  uint64_t v39 = v44[12];
  uint64_t v40 = *(void *)&a2[v39];
  *(void *)&a1[v39] = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_100156DC4(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v25(a2, 1LL, v6))
  {
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
  }

  uint64_t v9 = a3[5];
  int v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v14(v10, v11, v12);
  uint64_t v15 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(&a2[v15], 1LL, v12))
  {
    uint64_t v18 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    v14(v16, v17, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v16, 0LL, 1LL, v12);
  }

  uint64_t v19 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  if (v25(&a2[v19], 1LL, v6))
  {
    uint64_t v22 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v20, v21, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v20, 0LL, 1LL, v6);
  }

  uint64_t v23 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  *(void *)&a1[v23] = *(void *)&a2[v23];
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  return a1;
}

char *sub_100156FD4(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1LL, v6);
  uint64_t v38 = v8;
  int v10 = v8(a2, 1LL, v6);
  uint64_t v37 = v7;
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v16 + 40);
  v17(v13, v14, v15);
  uint64_t v18 = a3[7];
  uint64_t v39 = a3;
  a1[a3[6]] = a2[a3[6]];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v22 = v21(&a1[v18], 1LL, v15);
  int v23 = v21(v20, 1LL, v15);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v20, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v19, 0LL, 1LL, v15);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
LABEL_12:
    uint64_t v24 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_13;
  }

  v17(v19, v20, v15);
LABEL_13:
  *(void *)&a1[v39[8]] = *(void *)&a2[v39[8]];
  swift_bridgeObjectRelease();
  uint64_t v25 = v39[9];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  int v28 = v38(&a1[v25], 1LL, v6);
  int v29 = v38(v27, 1LL, v6);
  if (!v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v26, v27, v6);
      goto LABEL_19;
    }

    (*(void (**)(char *, uint64_t))(v37 + 8))(v26, v6);
    goto LABEL_18;
  }

  if (v29)
  {
LABEL_18:
    uint64_t v30 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v26, v27, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v26, 0LL, 1LL, v6);
LABEL_19:
  uint64_t v31 = v39[10];
  uint64_t v32 = &a1[v31];
  uint64_t v33 = &a2[v31];
  uint64_t v35 = *(void *)v33;
  uint64_t v34 = *((void *)v33 + 1);
  *(void *)uint64_t v32 = v35;
  *((void *)v32 + 1) = v34;
  swift_bridgeObjectRelease();
  *(void *)&a1[v39[11]] = *(void *)&a2[v39[11]];
  swift_bridgeObjectRelease();
  *(void *)&a1[v39[12]] = *(void *)&a2[v39[12]];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001572F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100157304);
}

uint64_t sub_100157304(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v11;
    uint64_t v13 = a3[5];
LABEL_7:
    uint64_t v10 = a1 + v13;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }

  uint64_t v14 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v12 = *(void *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v14;
    uint64_t v13 = a3[7];
    goto LABEL_7;
  }

  unint64_t v16 = *(void *)(a1 + a3[8]);
  if (v16 >= 0xFFFFFFFF) {
    LODWORD(vswift_weakDestroy(v0 + 16) = -1;
  }
  return (v16 + 1);
}

uint64_t sub_1001573D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001573E4);
}

uint64_t sub_1001573E4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
    return v11(v12, a2, a2, v10);
  }

  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v15 = a4[5];
LABEL_7:
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }

  uint64_t result = sub_100004AEC(&qword_10099D8A0);
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v15 = a4[7];
    goto LABEL_7;
  }

  *(void *)(a1 + a4[8]) = (a2 - 1);
  return result;
}

void sub_1001574B4(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(v2 - 8) + 64LL;
    v9[0] = v4;
    uint64_t v5 = type metadata accessor for UUID(319LL);
    if (v6 <= 0x3F)
    {
      v9[1] = *(void *)(v5 - 8) + 64LL;
      v9[2] = &unk_1007EDFE0;
      sub_10009361C( 319LL,  (unint64_t *)&qword_1009AFA50,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
      if (v8 <= 0x3F)
      {
        void v9[3] = *(void *)(v7 - 8) + 64LL;
        v9[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
        v9[5] = v4;
        v9[6] = &unk_1007EDFF8;
        v9[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
        v9[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
        swift_initStructMetadata(a1, 256LL, 9LL, v9, a1 + 16);
      }
    }
  }

unint64_t sub_100157598()
{
  unint64_t result = qword_1009A2740;
  if (!qword_1009A2740)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EE2E4, &type metadata for NotifyMeRequest.RequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A2740);
  }

  return result;
}

void *sub_1001575DC(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009A2760);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = sub_100012ED8(a1, v7);
  unint64_t v10 = sub_100157598();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NotifyMeRequest.RequestBody.CodingKeys,  &type metadata for NotifyMeRequest.RequestBody.CodingKeys,  v10,  v7,  v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    uint64_t v11 = sub_100004AEC(&qword_1009A2748);
    uint64_t v12 = sub_100157728( &qword_1009A2768,  &qword_1009A2770,  (uint64_t)&unk_1007EE038,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v11, v13, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v9 = v16;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  return v9;
}

uint64_t sub_100157728(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v9 = sub_100004B78(&qword_1009A2748);
    sub_100007864(a2, type metadata accessor for NotifyMeRequest.Subscription, a3);
    uint64_t result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1001577AC()
{
  unint64_t result = qword_1009A2780;
  if (!qword_1009A2780)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EE294, &type metadata for NotifyMeRequest.Subscription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A2780);
  }

  return result;
}

uint64_t sub_1001577F0(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_100004B78(&qword_10099E868);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100157858(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NotifyMeRequest.Subscription(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10015789C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NotifyMeRequest.Subscription(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for NotifyMeRequest.Subscription.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_100157924 + 4 * byte_1007EDF9E[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_100157958 + 4 * byte_1007EDF99[v4]))();
}

uint64_t sub_100157958(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100157960(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100157968LL);
  }
  return result;
}

uint64_t sub_100157974(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10015797CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 8;
  return result;
}

uint64_t sub_100157980(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100157988(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NotifyMeRequest.Subscription.CodingKeys()
{
  return &type metadata for NotifyMeRequest.Subscription.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for NotifyMeRequest.RequestBody.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1001579E4 + 4 * byte_1007EDFA3[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100157A04 + 4 * byte_1007EDFA8[v4]))();
  }
}

_BYTE *sub_1001579E4(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_100157A04(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_100157A0C(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_100157A14(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_100157A1C(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_100157A24(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NotifyMeRequest.RequestBody.CodingKeys()
{
  return &type metadata for NotifyMeRequest.RequestBody.CodingKeys;
}

unint64_t sub_100157A44()
{
  unint64_t result = qword_1009A27A0;
  if (!qword_1009A27A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EE1B4, &type metadata for NotifyMeRequest.RequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A27A0);
  }

  return result;
}

unint64_t sub_100157A8C()
{
  unint64_t result = qword_1009A27A8;
  if (!qword_1009A27A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EE26C, &type metadata for NotifyMeRequest.Subscription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A27A8);
  }

  return result;
}

unint64_t sub_100157AD4()
{
  unint64_t result = qword_1009A27B0;
  if (!qword_1009A27B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EE1DC, &type metadata for NotifyMeRequest.Subscription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A27B0);
  }

  return result;
}

unint64_t sub_100157B1C()
{
  unint64_t result = qword_1009A27B8;
  if (!qword_1009A27B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EE204, &type metadata for NotifyMeRequest.Subscription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A27B8);
  }

  return result;
}

unint64_t sub_100157B64()
{
  unint64_t result = qword_1009A27C0;
  if (!qword_1009A27C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EE124, &type metadata for NotifyMeRequest.RequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A27C0);
  }

  return result;
}

unint64_t sub_100157BAC()
{
  unint64_t result = qword_1009A27C8;
  if (!qword_1009A27C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EE14C, &type metadata for NotifyMeRequest.RequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A27C8);
  }

  return result;
}

uint64_t sub_100157BF0(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x7461447472617473LL && a2 == 0xE900000000000065LL)
  {
    unint64_t v4 = 0xE900000000000065LL;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461447472617473LL, 0xE900000000000065LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
    goto LABEL_6;
  }

  if (a1 == 0x7069726373627573LL && a2 == 0xEE0064496E6F6974LL)
  {
    unint64_t v6 = 0xEE0064496E6F6974LL;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7069726373627573LL, 0xEE0064496E6F6974LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_12;
  }

  if (a1 == 0x646E756F46636F6CLL && a2 == 0xEF64656C62616E45LL)
  {
    unint64_t v7 = 0xEF64656C62616E45LL;
LABEL_18:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646E756F46636F6CLL, 0xEF64656C62616E45LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_18;
  }

  if (a1 == 0x646975756162LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v8 = 0xE600000000000000LL;
LABEL_24:
    swift_bridgeObjectRelease(v8);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646975756162LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_24;
  }

  if (a1 == 7562345 && a2 == 0xE300000000000000LL)
  {
    unint64_t v9 = 0xE300000000000000LL;
LABEL_30:
    swift_bridgeObjectRelease(v9);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7562345LL, 0xE300000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_30;
  }

  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v10 = 0x8000000100855D90LL;
    if (a2 == 0x8000000100855D90LL) {
      goto LABEL_35;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x8000000100855D90LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_35:
    swift_bridgeObjectRelease(v10);
    return 5LL;
  }

  if (a1 == 0x49746375646F7270LL && a2 == 0xE900000000000064LL)
  {
    unint64_t v11 = 0xE900000000000064LL;
LABEL_41:
    swift_bridgeObjectRelease(v11);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746375646F7270LL, 0xE900000000000064LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_41;
  }

  if (a1 == 0x7261646E6F636573LL && a2 == 0xEC00000073644979LL)
  {
    unint64_t v12 = 0xEC00000073644979LL;
LABEL_47:
    swift_bridgeObjectRelease(v12);
    return 7LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7261646E6F636573LL, 0xEC00000073644979LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
    goto LABEL_47;
  }

  if (a1 == 0x76654464656E776FLL && a2 == 0xEE00736449656369LL)
  {
    swift_bridgeObjectRelease(0xEE00736449656369LL);
    return 8LL;
  }

  else
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x76654464656E776FLL, 0xEE00736449656369LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0) {
      return 8LL;
    }
    else {
      return 9LL;
    }
  }

uint64_t destroy for AirPodsLESendPairingDataCommandPayload(uint64_t a1)
{
  return sub_100016F9C(*(void *)(a1 + 200), *(void *)(a1 + 208));
}

uint64_t initializeWithCopy for AirPodsLESendPairingDataCommandPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_10001736C(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  sub_10001736C(v6, v7);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  sub_10001736C(v8, v9);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  uint64_t v10 = *(void *)(a2 + 48);
  unint64_t v11 = *(void *)(a2 + 56);
  sub_10001736C(v10, v11);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  uint64_t v12 = *(void *)(a2 + 64);
  unint64_t v13 = *(void *)(a2 + 72);
  sub_10001736C(v12, v13);
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v13;
  uint64_t v14 = *(void *)(a2 + 80);
  unint64_t v15 = *(void *)(a2 + 88);
  sub_10001736C(v14, v15);
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  uint64_t v16 = *(void *)(a2 + 96);
  unint64_t v17 = *(void *)(a2 + 104);
  sub_10001736C(v16, v17);
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
  uint64_t v18 = *(void *)(a2 + 112);
  unint64_t v19 = *(void *)(a2 + 120);
  sub_10001736C(v18, v19);
  *(void *)(a1 + 112) = v18;
  *(void *)(a1 + 120) = v19;
  uint64_t v20 = *(void *)(a2 + 128);
  unint64_t v21 = *(void *)(a2 + 136);
  sub_10001736C(v20, v21);
  *(void *)(a1 + 128) = v20;
  *(void *)(a1 + 136) = v21;
  uint64_t v22 = *(void *)(a2 + 144);
  unint64_t v23 = *(void *)(a2 + 152);
  sub_10001736C(v22, v23);
  *(void *)(a1 + 144) = v22;
  *(void *)(a1 + 152) = v23;
  uint64_t v24 = *(void *)(a2 + 160);
  unint64_t v25 = *(void *)(a2 + 168);
  sub_10001736C(v24, v25);
  *(void *)(a1 + 160) = v24;
  *(void *)(a1 + 168) = v25;
  uint64_t v26 = *(void *)(a2 + 176);
  unint64_t v27 = *(void *)(a2 + 184);
  sub_10001736C(v26, v27);
  *(void *)(a1 + 176) = v26;
  *(void *)(a1 + 184) = v27;
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  uint64_t v29 = *(void *)(a2 + 200);
  unint64_t v28 = *(void *)(a2 + 208);
  sub_10001736C(v29, v28);
  *(void *)(a1 + 200) = v29;
  *(void *)(a1 + 208) = v28;
  return a1;
}

uint64_t assignWithCopy for AirPodsLESendPairingDataCommandPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_10001736C(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_100016F9C(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  sub_10001736C(v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  sub_100016F9C(v10, v11);
  uint64_t v12 = *(void *)(a2 + 32);
  unint64_t v13 = *(void *)(a2 + 40);
  sub_10001736C(v12, v13);
  uint64_t v14 = *(void *)(a1 + 32);
  unint64_t v15 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v13;
  sub_100016F9C(v14, v15);
  uint64_t v16 = *(void *)(a2 + 48);
  unint64_t v17 = *(void *)(a2 + 56);
  sub_10001736C(v16, v17);
  uint64_t v18 = *(void *)(a1 + 48);
  unint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v16;
  *(void *)(a1 + 56) = v17;
  sub_100016F9C(v18, v19);
  uint64_t v20 = *(void *)(a2 + 64);
  unint64_t v21 = *(void *)(a2 + 72);
  sub_10001736C(v20, v21);
  uint64_t v22 = *(void *)(a1 + 64);
  unint64_t v23 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = v20;
  *(void *)(a1 + 72) = v21;
  sub_100016F9C(v22, v23);
  uint64_t v24 = *(void *)(a2 + 80);
  unint64_t v25 = *(void *)(a2 + 88);
  sub_10001736C(v24, v25);
  uint64_t v26 = *(void *)(a1 + 80);
  unint64_t v27 = *(void *)(a1 + 88);
  *(void *)(a1 + 80) = v24;
  *(void *)(a1 + 88) = v25;
  sub_100016F9C(v26, v27);
  uint64_t v28 = *(void *)(a2 + 96);
  unint64_t v29 = *(void *)(a2 + 104);
  sub_10001736C(v28, v29);
  uint64_t v30 = *(void *)(a1 + 96);
  unint64_t v31 = *(void *)(a1 + 104);
  *(void *)(a1 + 96) = v28;
  *(void *)(a1 + 104) = v29;
  sub_100016F9C(v30, v31);
  uint64_t v32 = *(void *)(a2 + 112);
  unint64_t v33 = *(void *)(a2 + 120);
  sub_10001736C(v32, v33);
  uint64_t v34 = *(void *)(a1 + 112);
  unint64_t v35 = *(void *)(a1 + 120);
  *(void *)(a1 + 112) = v32;
  *(void *)(a1 + 120) = v33;
  sub_100016F9C(v34, v35);
  uint64_t v36 = *(void *)(a2 + 128);
  unint64_t v37 = *(void *)(a2 + 136);
  sub_10001736C(v36, v37);
  uint64_t v38 = *(void *)(a1 + 128);
  unint64_t v39 = *(void *)(a1 + 136);
  *(void *)(a1 + 128) = v36;
  *(void *)(a1 + 136) = v37;
  sub_100016F9C(v38, v39);
  uint64_t v40 = *(void *)(a2 + 144);
  unint64_t v41 = *(void *)(a2 + 152);
  sub_10001736C(v40, v41);
  uint64_t v42 = *(void *)(a1 + 144);
  unint64_t v43 = *(void *)(a1 + 152);
  *(void *)(a1 + 144) = v40;
  *(void *)(a1 + 152) = v41;
  sub_100016F9C(v42, v43);
  uint64_t v44 = *(void *)(a2 + 160);
  unint64_t v45 = *(void *)(a2 + 168);
  sub_10001736C(v44, v45);
  uint64_t v46 = *(void *)(a1 + 160);
  unint64_t v47 = *(void *)(a1 + 168);
  *(void *)(a1 + 160) = v44;
  *(void *)(a1 + 168) = v45;
  sub_100016F9C(v46, v47);
  uint64_t v48 = *(void *)(a2 + 176);
  unint64_t v49 = *(void *)(a2 + 184);
  sub_10001736C(v48, v49);
  uint64_t v50 = *(void *)(a1 + 176);
  unint64_t v51 = *(void *)(a1 + 184);
  *(void *)(a1 + 176) = v48;
  *(void *)(a1 + 184) = v49;
  sub_100016F9C(v50, v51);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  uint64_t v53 = *(void *)(a2 + 200);
  unint64_t v52 = *(void *)(a2 + 208);
  sub_10001736C(v53, v52);
  uint64_t v54 = *(void *)(a1 + 200);
  unint64_t v55 = *(void *)(a1 + 208);
  *(void *)(a1 + 200) = v53;
  *(void *)(a1 + 208) = v52;
  sub_100016F9C(v54, v55);
  return a1;
}

__n128 initializeWithTake for AirPodsLESendPairingDataCommandPayload(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  __int128 v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  __int128 v10 = *(_OWORD *)(a2 + 176);
  __int128 v11 = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for AirPodsLESendPairingDataCommandPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016F9C(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  sub_100016F9C(v6, v7);
  uint64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_100016F9C(v8, v9);
  uint64_t v10 = *(void *)(a1 + 48);
  unint64_t v11 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_100016F9C(v10, v11);
  uint64_t v12 = *(void *)(a1 + 64);
  unint64_t v13 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  sub_100016F9C(v12, v13);
  uint64_t v14 = *(void *)(a1 + 80);
  unint64_t v15 = *(void *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_100016F9C(v14, v15);
  uint64_t v16 = *(void *)(a1 + 96);
  unint64_t v17 = *(void *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  sub_100016F9C(v16, v17);
  uint64_t v18 = *(void *)(a1 + 112);
  unint64_t v19 = *(void *)(a1 + 120);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  sub_100016F9C(v18, v19);
  uint64_t v20 = *(void *)(a1 + 128);
  unint64_t v21 = *(void *)(a1 + 136);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  sub_100016F9C(v20, v21);
  uint64_t v22 = *(void *)(a1 + 144);
  unint64_t v23 = *(void *)(a1 + 152);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  sub_100016F9C(v22, v23);
  uint64_t v24 = *(void *)(a1 + 160);
  unint64_t v25 = *(void *)(a1 + 168);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  sub_100016F9C(v24, v25);
  uint64_t v26 = *(void *)(a1 + 176);
  unint64_t v27 = *(void *)(a1 + 184);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  sub_100016F9C(v26, v27);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  uint64_t v28 = *(void *)(a1 + 200);
  unint64_t v29 = *(void *)(a1 + 208);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  sub_100016F9C(v28, v29);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsLESendPairingDataCommandPayload(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 216)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AirPodsLESendPairingDataCommandPayload( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 2swift_weakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 2swift_weakDestroy(v0 + 16) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0LL;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AirPodsLESendPairingDataCommandPayload()
{
  return &type metadata for AirPodsLESendPairingDataCommandPayload;
}

uint64_t sub_1001585A0(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100012ED8(a1, v3);
  dispatch thunk of BinaryEncoding.container()(v40, v3, v4);
  __int128 v39 = *v1;
  uint64_t v5 = v41;
  uint64_t v6 = v42;
  sub_100037298((uint64_t)v40, v41);
  unint64_t v7 = sub_100042440();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v39, &type metadata for Data, v7, v5, v6);
  if (!v2)
  {
    __int128 v39 = v1[2];
    uint64_t v8 = v41;
    uint64_t v9 = v42;
    sub_100037298((uint64_t)v40, v41);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v39, &type metadata for Data, v7, v8, v9);
    __int128 v39 = v1[4];
    uint64_t v10 = v41;
    uint64_t v11 = v42;
    sub_100037298((uint64_t)v40, v41);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v39, &type metadata for Data, v7, v10, v11);
    __int128 v39 = v1[5];
    uint64_t v12 = v41;
    uint64_t v13 = v42;
    sub_100037298((uint64_t)v40, v41);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v39, &type metadata for Data, v7, v12, v13);
    __int128 v39 = v1[1];
    uint64_t v14 = v41;
    uint64_t v15 = v42;
    sub_100037298((uint64_t)v40, v41);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v39, &type metadata for Data, v7, v14, v15);
    __int128 v39 = v1[3];
    uint64_t v16 = v41;
    uint64_t v17 = v42;
    sub_100037298((uint64_t)v40, v41);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v39, &type metadata for Data, v7, v16, v17);
    __int128 v39 = v1[6];
    uint64_t v18 = v41;
    uint64_t v19 = v42;
    sub_100037298((uint64_t)v40, v41);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v39, &type metadata for Data, v7, v18, v19);
    __int128 v39 = v1[7];
    uint64_t v20 = v41;
    uint64_t v21 = v42;
    sub_100037298((uint64_t)v40, v41);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v39, &type metadata for Data, v7, v20, v21);
    __int128 v39 = v1[8];
    uint64_t v22 = v41;
    uint64_t v23 = v42;
    sub_100037298((uint64_t)v40, v41);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v39, &type metadata for Data, v7, v22, v23);
    __int128 v39 = v1[9];
    uint64_t v24 = v41;
    uint64_t v25 = v42;
    sub_100037298((uint64_t)v40, v41);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v39, &type metadata for Data, v7, v24, v25);
    __int128 v39 = v1[10];
    uint64_t v26 = v41;
    uint64_t v27 = v42;
    sub_100037298((uint64_t)v40, v41);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v39, &type metadata for Data, v7, v26, v27);
    __int128 v39 = v1[11];
    uint64_t v28 = v41;
    uint64_t v29 = v42;
    sub_100037298((uint64_t)v40, v41);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v39, &type metadata for Data, v7, v28, v29);
    LOBYTE(v39) = *((_BYTE *)v1 + 192);
    unint64_t v30 = sub_100041584();
    uint64_t v31 = FixedWidthInteger.data.getter(&type metadata for UInt8, v30);
    unint64_t v33 = v32;
    *(void *)&__int128 v39 = v31;
    *((void *)&v39 + 1) = v32;
    uint64_t v34 = v41;
    uint64_t v35 = v42;
    sub_100037298((uint64_t)v40, v41);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v39, &type metadata for Data, v7, v34, v35);
    sub_100016F9C(v31, v33);
    __int128 v39 = *(__int128 *)((char *)v1 + 200);
    uint64_t v36 = v41;
    uint64_t v37 = v42;
    sub_100037298((uint64_t)v40, v41);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v39, &type metadata for Data, v7, v36, v37);
  }

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v40);
}

double sub_1001589F8@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v11[11];
    *(_OWORD *)(a2 + 160) = v11[10];
    *(_OWORD *)(a2 + 176) = v5;
    *(_OWORD *)(a2 + 192) = v11[12];
    *(void *)(a2 + 208) = v12;
    __int128 v6 = v11[7];
    *(_OWORD *)(a2 + 96) = v11[6];
    *(_OWORD *)(a2 + 112) = v6;
    __int128 v7 = v11[9];
    *(_OWORD *)(a2 + 128) = v11[8];
    *(_OWORD *)(a2 + 144) = v7;
    __int128 v8 = v11[3];
    *(_OWORD *)(a2 + 32) = v11[2];
    *(_OWORD *)(a2 + 48) = v8;
    __int128 v9 = v11[5];
    *(_OWORD *)(a2 + 64) = v11[4];
    *(_OWORD *)(a2 + 80) = v9;
    double result = *(double *)v11;
    __int128 v10 = v11[1];
    *(_OWORD *)a2 = v11[0];
    *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v10;
  }

  return result;
}

uint64_t sub_100158A80(void *a1)
{
  return sub_1001585A0(a1);
}

unint64_t sub_100158A94(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100158AC0();
  unint64_t result = sub_100158B04();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_100158AC0()
{
  unint64_t result = qword_1009A27D0;
  if (!qword_1009A27D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EE368, &type metadata for AirPodsLESendPairingDataCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009A27D0);
  }

  return result;
}

unint64_t sub_100158B04()
{
  unint64_t result = qword_1009A27D8;
  if (!qword_1009A27D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EE390, &type metadata for AirPodsLESendPairingDataCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009A27D8);
  }

  return result;
}

void sub_100158B48(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_100158BB4(uint64_t a1, uint64_t a2)
{
  if (BYTE6(a2) == 32LL) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x100158CA8LL);
}

uint64_t sub_100158CCC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Endianness(0LL);
  __chkstk_darwin(v5);
  __int128 v7 = (char *)&v115 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100012ED8(a1, v8);
  dispatch thunk of BinaryDecoding.container()(v156, v8, v9);
  uint64_t v10 = v157;
  uint64_t v11 = v158;
  sub_100037298((uint64_t)v156, v157);
  uint64_t v12 = dispatch thunk of BinaryDecodingContaining.decode(length:)(32LL, v10, v11);
  if (v2) {
    goto LABEL_19;
  }
  uint64_t v14 = v12;
  unint64_t v173 = v13;
  uint64_t v16 = v157;
  uint64_t v15 = v158;
  sub_100037298((uint64_t)v156, v157);
  uint64_t v152 = dispatch thunk of BinaryDecodingContaining.decode(length:)(20LL, v16, v15);
  unint64_t v153 = v17;
  uint64_t v18 = v157;
  uint64_t v19 = v158;
  sub_100037298((uint64_t)v156, v157);
  uint64_t v150 = dispatch thunk of BinaryDecodingContaining.decode(length:)(8LL, v18, v19);
  unint64_t v151 = v20;
  uint64_t v21 = v157;
  uint64_t v22 = v158;
  sub_100037298((uint64_t)v156, v157);
  uint64_t v148 = dispatch thunk of BinaryDecodingContaining.decode(length:)(2LL, v21, v22);
  unint64_t v149 = v23;
  uint64_t v24 = v157;
  uint64_t v25 = v158;
  sub_100037298((uint64_t)v156, v157);
  uint64_t v146 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1LL, v24, v25);
  unint64_t v147 = v26;
  uint64_t v27 = v157;
  uint64_t v28 = v158;
  sub_100037298((uint64_t)v156, v157);
  unint64_t v29 = dispatch thunk of BinaryDecodingContaining.decode(length:)(60LL, v27, v28);
  unint64_t v31 = v30;
  uint64_t v154 = v146;
  unint64_t v155 = v147;
  int64_t v141 = sub_100042F34();
  uint64_t v32 = DataProtocol.intValue.getter(&type metadata for Data);
  uint64_t v33 = v32 - 1;
  if (__OFSUB__(v32, 1LL))
  {
    __break(1u);
    goto LABEL_11;
  }

  if ((unsigned __int128)(v33 * (__int128)20LL) >> 64 != (20 * v33) >> 63)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if (20 * v33 < 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v142 = Data.subdata(in:)(0LL);
  unint64_t v143 = v34;
  unint64_t v144 = v29;
  unint64_t v145 = v31;
  uint64_t v35 = v157;
  uint64_t v36 = v158;
  sub_100037298((uint64_t)v156, v157);
  uint64_t v139 = dispatch thunk of BinaryDecodingContaining.decode(length:)(32LL, v35, v36);
  unint64_t v140 = v37;
  uint64_t v38 = v157;
  uint64_t v39 = v158;
  sub_100037298((uint64_t)v156, v157);
  uint64_t v137 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1280LL, v38, v39);
  unint64_t v138 = v40;
  uint64_t v41 = v157;
  uint64_t v42 = v158;
  sub_100037298((uint64_t)v156, v157);
  uint64_t v43 = dispatch thunk of BinaryDecodingContaining.decode(length:)(2LL, v41, v42);
  unint64_t v29 = v44;
  uint64_t v45 = sub_10001736C(v43, v44);
  static Endianness.current.getter(v45);
  sub_1000F4D24();
  FixedWidthInteger.init(data:ofEndianness:)(&v154, v43, v29, v7);
  if (BYTE2(v154) == 1)
  {
    uint64_t v46 = type metadata accessor for BinaryEncodingError(0LL);
    uint64_t v47 = sub_100007864( (unint64_t *)&qword_1009A0D38,  (uint64_t (*)(uint64_t))&type metadata accessor for BinaryEncodingError,  (uint64_t)&protocol conformance descriptor for BinaryEncodingError);
    swift_allocError(v46, v47, 0LL, 0LL);
    uint64_t v49 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v46 - 8) + 104LL))( v48,  enum case for BinaryEncodingError.encodingError(_:),  v46);
    swift_willThrow(v49);
    uint64_t v50 = v43;
LABEL_18:
    sub_100016F9C(v50, v29);
    sub_100016F9C(v137, v138);
    sub_100016F9C(v139, v140);
    sub_100016F9C(v142, v143);
    sub_100016F9C(v144, v145);
    sub_100016F9C(v146, v147);
    sub_100016F9C(v148, v149);
    sub_100016F9C(v150, v151);
    sub_100016F9C(v152, v153);
    sub_100016F9C(v14, v173);
LABEL_19:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v156);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  uint64_t v136 = v43;
  uint64_t v51 = (unsigned __int16)v154;
  uint64_t v53 = v137;
  uint64_t v52 = v138;
  sub_10001736C(v137, v138);
  sub_100178C64(v51, v53, v52);
  uint64_t v134 = v154;
  unint64_t v135 = v155;
  uint64_t v54 = v157;
  uint64_t v55 = v158;
  sub_100037298((uint64_t)v156, v157);
  uint64_t v132 = dispatch thunk of BinaryDecodingContaining.decode(length:)(100LL, v54, v55);
  unint64_t v133 = v56;
  uint64_t v57 = v157;
  uint64_t v58 = v158;
  sub_100037298((uint64_t)v156, v157);
  uint64_t v59 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1LL, v57, v58);
  unint64_t v61 = v60;
  uint64_t v154 = v59;
  unint64_t v155 = v60;
  uint64_t v62 = DataProtocol.intValue.getter(&type metadata for Data);
  sub_100016F9C(v59, v61);
  uint64_t v64 = v132;
  uint64_t v63 = v133;
  sub_10001736C(v132, v133);
  sub_100178C64(v62, v64, v63);
  uint64_t v130 = v154;
  unint64_t v131 = v155;
  uint64_t v65 = v157;
  uint64_t v66 = v158;
  sub_100037298((uint64_t)v156, v157);
  uint64_t v128 = dispatch thunk of BinaryDecodingContaining.decode(length:)(100LL, v65, v66);
  unint64_t v129 = v67;
  uint64_t v68 = v157;
  uint64_t v69 = v158;
  sub_100037298((uint64_t)v156, v157);
  uint64_t v70 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1LL, v68, v69);
  unint64_t v72 = v71;
  uint64_t v154 = v70;
  unint64_t v155 = v71;
  uint64_t v73 = DataProtocol.intValue.getter(&type metadata for Data);
  sub_100016F9C(v70, v72);
  uint64_t v75 = v128;
  uint64_t v74 = v129;
  sub_10001736C(v128, v129);
  sub_100178C64(v73, v75, v74);
  uint64_t v126 = v154;
  unint64_t v127 = v155;
  uint64_t v76 = v157;
  uint64_t v77 = v158;
  sub_100037298((uint64_t)v156, v157);
  uint64_t v124 = dispatch thunk of BinaryDecodingContaining.decode(length:)(100LL, v76, v77);
  unint64_t v125 = v78;
  uint64_t v79 = v157;
  uint64_t v80 = v158;
  sub_100037298((uint64_t)v156, v157);
  uint64_t v81 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1LL, v79, v80);
  unint64_t v83 = v82;
  uint64_t v154 = v81;
  unint64_t v155 = v82;
  uint64_t v84 = DataProtocol.intValue.getter(&type metadata for Data);
  sub_100016F9C(v81, v83);
  uint64_t v86 = v124;
  uint64_t v85 = v125;
  sub_10001736C(v124, v125);
  sub_100178C64(v84, v86, v85);
  uint64_t v122 = v154;
  unint64_t v123 = v155;
  uint64_t v87 = v157;
  uint64_t v88 = v158;
  sub_100037298((uint64_t)v156, v157);
  uint64_t v120 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1LL, v87, v88);
  unint64_t v121 = v89;
  uint64_t v90 = v157;
  uint64_t v91 = v158;
  sub_100037298((uint64_t)v156, v157);
  uint64_t v118 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1LL, v90, v91);
  unint64_t v119 = v92;
  uint64_t v154 = v118;
  unint64_t v155 = v92;
  int64_t v141 = DataProtocol.intValue.getter(&type metadata for Data);
  uint64_t v93 = v157;
  uint64_t v94 = v158;
  sub_100037298((uint64_t)v156, v157);
  uint64_t v95 = dispatch thunk of BinaryDecodingContaining.decode(length:)(10LL, v93, v94);
  unint64_t v116 = v96;
  uint64_t v117 = v95;
  if (v141 > 3)
  {
LABEL_13:
    if (qword_10099B7B0 != -1) {
      swift_once(&qword_10099B7B0, sub_100651924);
    }
    uint64_t v106 = type metadata accessor for Logger(0LL);
    uint64_t v107 = sub_10000A720(v106, (uint64_t)qword_100A2B0E0);
    NSURLResourceKey v108 = (os_log_s *)Logger.logObject.getter(v107);
    os_log_type_t v109 = static os_log_type_t.error.getter(v108);
    if (os_log_type_enabled(v108, v109))
    {
      uint64_t v110 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v110 = 134217984;
      uint64_t v154 = v141;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155, v110 + 4, v110 + 12);
      _os_log_impl((void *)&_mh_execute_header, v108, v109, "Invalid beaconPartId %ld!", v110, 0xCu);
      swift_slowDealloc(v110, -1LL, -1LL);
    }

    uint64_t v111 = type metadata accessor for BinaryDecodingError(0LL);
    uint64_t v112 = sub_100007864( (unint64_t *)&qword_1009A27E0,  (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecodingError,  (uint64_t)&protocol conformance descriptor for BinaryDecodingError);
    swift_allocError(v111, v112, 0LL, 0LL);
    uint64_t v114 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v111 - 8) + 104LL))( v113,  enum case for BinaryDecodingError.decodingError(_:),  v111);
    swift_willThrow(v114);
    sub_100016F9C(v117, v116);
    sub_100016F9C(v118, v119);
    sub_100016F9C(v120, v121);
    sub_100016F9C(v122, v123);
    sub_100016F9C(v124, v125);
    sub_100016F9C(v126, v127);
    sub_100016F9C(v128, v129);
    sub_100016F9C(v130, v131);
    sub_100016F9C(v132, v133);
    sub_100016F9C(v134, v135);
    uint64_t v50 = v136;
    goto LABEL_18;
  }

  sub_100016F9C(v136, v29);
  sub_100016F9C(v137, v138);
  sub_100016F9C(v144, v145);
  sub_100016F9C(v132, v133);
  sub_100016F9C(v128, v129);
  sub_100016F9C(v124, v125);
  sub_100016F9C(v118, v119);
  if (v141 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    __break(1u);
  }

  else
  {
    sub_100158B48(v14, v173);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v156);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    __int128 v98 = v170;
    __int128 v99 = v171;
    __int128 v100 = v168;
    *(_OWORD *)(a2 + 160) = v169;
    *(_OWORD *)(a2 + 176) = v98;
    *(_OWORD *)(a2 + 192) = v99;
    __int128 v101 = v166;
    __int128 v102 = v167;
    __int128 v103 = v164;
    *(_OWORD *)(a2 + 96) = v165;
    *(_OWORD *)(a2 + 112) = v101;
    *(void *)(a2 + 208) = v172;
    *(_OWORD *)(a2 + 128) = v102;
    *(_OWORD *)(a2 + 144) = v100;
    __int128 v104 = v162;
    *(_OWORD *)(a2 + 32) = v161;
    *(_OWORD *)(a2 + 48) = v104;
    *(_OWORD *)(a2 + 64) = v163;
    *(_OWORD *)(a2 + 80) = v103;
    __int128 v105 = v160;
    *(_OWORD *)a2 = v159;
    *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v105;
  }

  return result;
}

uint64_t sub_100159768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100159774);
}

uint64_t sub_100159774(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for FMNAccountType(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 20)],  a2,  v8);
  }

uint64_t sub_1001597F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001597FC);
}

char *sub_1001597FC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for FMNAccountType(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata accessor for NotifyMeEndpoint(uint64_t a1)
{
  uint64_t result = qword_1009A2840;
  if (!qword_1009A2840) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NotifyMeEndpoint);
  }
  return result;
}

uint64_t sub_1001598AC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = sub_100004AEC(&qword_1009A14C8);
  uint64_t v3 = OS_dispatch_queue.sync<A>(execute:)(sub_1000F9588, v1, v2);
  URLComponents.init()(v3);
  URLComponents.scheme.setter(0x7370747468LL, 0xE500000000000000LL);
  URLComponents.host.setter(v7[2], v7[3]);
  URLComponents.path.setter(v7[0], v7[1]);
  uint64_t v4 = (uint64_t (*)(void *, void))URLComponents.path.modify(v7);
  v5._countAndFlagsBits = 0x697263736275732FLL;
  v5._object = (void *)0xEA00000000006562LL;
  String.append(_:)(v5);
  return v4(v7, 0LL);
}

uint64_t sub_10015998C()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t type metadata accessor for AccessoryPairingValidator()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd25AccessoryPairingValidator);
}

uint64_t destroy for AccessoryPairingCheckData(uint64_t *a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v3 = a1[17];
  if (v3 >> 60 != 15) {
    return sub_100016F9C(a1[16], v3);
  }
  return result;
}

uint64_t initializeWithCopy for AccessoryPairingCheckData(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10001736C(*a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_10001736C(v6, v7);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = a2[5];
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = v8;
  uint64_t v9 = a2[7];
  *(void *)(a1 + 48) = a2[6];
  *(void *)(a1 + 56) = v9;
  uint64_t v10 = a2[9];
  *(void *)(a1 + 64) = a2[8];
  *(void *)(a1 + 72) = v10;
  uint64_t v11 = a2[10];
  unint64_t v12 = a2[11];
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  sub_10001736C(v11, v12);
  *(void *)(a1 + 80) = v11;
  *(void *)(a1 + 88) = v12;
  uint64_t v13 = a2[12];
  unint64_t v14 = a2[13];
  sub_10001736C(v13, v14);
  *(void *)(a1 + 96) = v13;
  *(void *)(a1 + 104) = v14;
  uint64_t v15 = a2[15];
  *(void *)(a1 + 112) = a2[14];
  *(void *)(a1 + 120) = v15;
  uint64_t v16 = a2 + 16;
  unint64_t v17 = a2[17];
  swift_bridgeObjectRetain(v15);
  if (v17 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 128) = *v16;
  }

  else
  {
    uint64_t v18 = *(void *)v16;
    sub_10001736C(v18, v17);
    *(void *)(a1 + 128) = v18;
    *(void *)(a1 + 136) = v17;
  }

  return a1;
}

uint64_t *assignWithCopy for AccessoryPairingCheckData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10001736C(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100016F9C(v6, v7);
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_10001736C(v8, v9);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_100016F9C(v10, v11);
  a1[4] = a2[4];
  uint64_t v12 = a2[5];
  a1[5] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  uint64_t v13 = a2[7];
  a1[7] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  uint64_t v14 = a2[9];
  a1[9] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease();
  uint64_t v15 = a2[10];
  unint64_t v16 = a2[11];
  sub_10001736C(v15, v16);
  uint64_t v17 = a1[10];
  unint64_t v18 = a1[11];
  a1[10] = v15;
  a1[11] = v16;
  sub_100016F9C(v17, v18);
  uint64_t v19 = a2[12];
  unint64_t v20 = a2[13];
  sub_10001736C(v19, v20);
  uint64_t v21 = a1[12];
  unint64_t v22 = a1[13];
  a1[12] = v19;
  a1[13] = v20;
  sub_100016F9C(v21, v22);
  a1[14] = a2[14];
  uint64_t v23 = a2[15];
  a1[15] = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease();
  uint64_t v24 = a2 + 16;
  unint64_t v25 = a2[17];
  if ((unint64_t)a1[17] >> 60 != 15)
  {
    if (v25 >> 60 != 15)
    {
      uint64_t v27 = *v24;
      sub_10001736C(*v24, v25);
      uint64_t v28 = a1[16];
      unint64_t v29 = a1[17];
      a1[16] = v27;
      a1[17] = v25;
      sub_100016F9C(v28, v29);
      return a1;
    }

    sub_100119388((uint64_t)(a1 + 16));
    goto LABEL_6;
  }

  if (v25 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 8) = *(_OWORD *)v24;
    return a1;
  }

  uint64_t v26 = *v24;
  sub_10001736C(*v24, v25);
  a1[16] = v26;
  a1[17] = v25;
  return a1;
}

__n128 initializeWithTake for AccessoryPairingCheckData(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v2 = *(_OWORD *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t *assignWithTake for AccessoryPairingCheckData(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016F9C(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_100016F9C(v6, v7);
  uint64_t v8 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 56);
  a1[6] = *(void *)(a2 + 48);
  a1[7] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 72);
  a1[8] = *(void *)(a2 + 64);
  a1[9] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = a1[10];
  unint64_t v12 = a1[11];
  *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 80);
  sub_100016F9C(v11, v12);
  uint64_t v13 = a1[12];
  unint64_t v14 = a1[13];
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  sub_100016F9C(v13, v14);
  uint64_t v15 = *(void *)(a2 + 120);
  a1[14] = *(void *)(a2 + 112);
  a1[15] = v15;
  swift_bridgeObjectRelease();
  unint64_t v16 = (uint64_t *)(a2 + 128);
  unint64_t v17 = a1[17];
  if (v17 >> 60 != 15)
  {
    unint64_t v18 = *(void *)(a2 + 136);
    if (v18 >> 60 != 15)
    {
      uint64_t v19 = a1[16];
      a1[16] = *v16;
      a1[17] = v18;
      sub_100016F9C(v19, v17);
      return a1;
    }

    sub_100119388((uint64_t)(a1 + 16));
  }

  *((_OWORD *)a1 + 8) = *(_OWORD *)v16;
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryPairingCheckData(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 144)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryPairingCheckData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0LL;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 144) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 144) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AccessoryPairingCheckData()
{
  return &type metadata for AccessoryPairingCheckData;
}

uint64_t destroy for AccessoryPairingAckData(void *a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v3 = a1[13];
  if (v3 >> 60 != 15) {
    return sub_100016F9C(a1[12], v3);
  }
  return result;
}

uint64_t initializeWithCopy for AccessoryPairingAckData(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = a2[3];
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = a2[2];
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = a2[5];
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = a2[6];
  unint64_t v8 = a2[7];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  sub_10001736C(v7, v8);
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = a2[8];
  unint64_t v10 = a2[9];
  sub_10001736C(v9, v10);
  *(void *)(a1 + 64) = v9;
  *(void *)(a1 + 72) = v10;
  uint64_t v11 = a2[11];
  *(void *)(a1 + 80) = a2[10];
  *(void *)(a1 + 88) = v11;
  unint64_t v12 = a2 + 12;
  unint64_t v13 = a2[13];
  swift_bridgeObjectRetain(v11);
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 96) = *v12;
  }

  else
  {
    uint64_t v14 = *(void *)v12;
    sub_10001736C(v14, v13);
    *(void *)(a1 + 96) = v14;
    *(void *)(a1 + 104) = v13;
  }

  return a1;
}

void *assignWithCopy for AccessoryPairingAckData(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  uint64_t v5 = a2[3];
  a1[3] = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  uint64_t v6 = a2[5];
  a1[5] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[6];
  unint64_t v8 = a2[7];
  sub_10001736C(v7, v8);
  uint64_t v9 = a1[6];
  unint64_t v10 = a1[7];
  a1[6] = v7;
  a1[7] = v8;
  sub_100016F9C(v9, v10);
  uint64_t v11 = a2[8];
  unint64_t v12 = a2[9];
  sub_10001736C(v11, v12);
  uint64_t v13 = a1[8];
  unint64_t v14 = a1[9];
  a1[8] = v11;
  a1[9] = v12;
  sub_100016F9C(v13, v14);
  a1[10] = a2[10];
  uint64_t v15 = a2[11];
  a1[11] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease();
  unint64_t v16 = a2 + 12;
  unint64_t v17 = a2[13];
  if (a1[13] >> 60 != 15LL)
  {
    if (v17 >> 60 != 15)
    {
      uint64_t v19 = *v16;
      sub_10001736C(*v16, v17);
      uint64_t v20 = a1[12];
      unint64_t v21 = a1[13];
      a1[12] = v19;
      a1[13] = v17;
      sub_100016F9C(v20, v21);
      return a1;
    }

    sub_100119388((uint64_t)(a1 + 12));
    goto LABEL_6;
  }

  if (v17 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 6) = *(_OWORD *)v16;
    return a1;
  }

  uint64_t v18 = *v16;
  sub_10001736C(*v16, v17);
  a1[12] = v18;
  a1[13] = v17;
  return a1;
}

void *assignWithTake for AccessoryPairingAckData(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a1[6];
  unint64_t v8 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  sub_100016F9C(v7, v8);
  uint64_t v9 = a1[8];
  unint64_t v10 = a1[9];
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  sub_100016F9C(v9, v10);
  uint64_t v11 = *(void *)(a2 + 88);
  a1[10] = *(void *)(a2 + 80);
  a1[11] = v11;
  swift_bridgeObjectRelease();
  unint64_t v12 = (void *)(a2 + 96);
  unint64_t v13 = a1[13];
  if (v13 >> 60 != 15)
  {
    unint64_t v14 = *(void *)(a2 + 104);
    if (v14 >> 60 != 15)
    {
      uint64_t v15 = a1[12];
      a1[12] = *v12;
      a1[13] = v14;
      sub_100016F9C(v15, v13);
      return a1;
    }

    sub_100119388((uint64_t)(a1 + 12));
  }

  *((_OWORD *)a1 + 6) = *(_OWORD *)v12;
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryPairingAckData(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryPairingAckData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0LL;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 112) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AccessoryPairingAckData()
{
  return &type metadata for AccessoryPairingAckData;
}

uint64_t sub_10015A2E4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100012ED8(a1, v10);
  dispatch thunk of BinaryEncoding.container()(v20, v10, v11);
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t v12 = v21;
  uint64_t v13 = v22;
  sub_100037298((uint64_t)v20, v21);
  unint64_t v14 = sub_100042440();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v18, &type metadata for Data, v14, v12, v13);
  if (!v5)
  {
    uint64_t v18 = a4;
    uint64_t v19 = a5;
    uint64_t v15 = v21;
    uint64_t v16 = v22;
    sub_100037298((uint64_t)v20, v21);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v18, &type metadata for Data, v14, v15, v16);
  }

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v20);
}

uint64_t sub_10015A3E0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10015AAB8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }

  return result;
}

uint64_t sub_10015A40C(void *a1)
{
  return sub_10015A2E4(a1, *v1, v1[1], v1[2], v1[3]);
}

BOOL sub_10015A428(char *a1, char *a2)
{
  return word_1007EE806[*a1] == word_1007EE806[*a2];
}

Swift::Int sub_10015A44C()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(word_1007EE806[v1]);
  return Hasher._finalize()();
}

void sub_10015A498()
{
}

Swift::Int sub_10015A4CC(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(word_1007EE806[v2]);
  return Hasher._finalize()();
}

uint64_t sub_10015A514@<X0>(__int16 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10015ABE8(*a1);
  *a2 = result;
  return result;
}

void sub_10015A53C(_WORD *a1@<X8>)
{
  *a1 = word_1007EE806[*v1];
}

uint64_t sub_10015A554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10015B520();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10015A5B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10015B520();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10015A5FC()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10015A62C + 4 * byte_1007EE4A0[*v0]))( 0x737365636375732ELL,  0xE800000000000000LL);
}

uint64_t sub_10015A62C()
{
  return 0x64696C61766E692ELL;
}

uint64_t sub_10015A6A0(unsigned __int8 a1)
{
  int v2 = a1;
  uint64_t result = 0x737365636375732ELL;
  if (v2 != 6) {
    __asm { BR              X10 }
  }

  return result;
}

uint64_t sub_10015A710()
{
  v0._countAndFlagsBits = 0x64696C61766E692ELL;
  v0._object = (void *)0xED00006574617453LL;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(0xED00006574617453LL);
  v1._countAndFlagsBits = 41LL;
  v1._object = (void *)0xE100000000000000LL;
  String.append(_:)(v1);
  return v3;
}

uint64_t sub_10015A7B8(void *a1, uint64_t a2)
{
  uint64_t v5 = sub_100004AEC(&qword_1009A2960);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_10015B454();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AccessoryCommandResponse.CodingKeys,  &type metadata for AccessoryCommandResponse.CodingKeys,  v11,  v9,  v10);
  char v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v17, v5);
  if (!v2)
  {
    char v16 = BYTE2(a2);
    char v15 = 1;
    unint64_t v12 = sub_10015B4DC();
    KeyedEncodingContainer.encode<A>(_:forKey:)( &v16,  &v15,  v5,  &type metadata for AccessoryCommandResponse.RawResponseStatus,  v12);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10015A8E4()
{
  if (*v0) {
    return 0x7574617453776172LL;
  }
  else {
    return 0x65646F63706FLL;
  }
}

uint64_t sub_10015A920@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10015B1F8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10015A944(uint64_t a1)
{
  unint64_t v2 = sub_10015B454();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015A96C(uint64_t a1)
{
  unint64_t v2 = sub_10015B454();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10015A994@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10015B2EC(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(_BYTE *)(a2 + 2) = BYTE2(result);
  }

  return result;
}

uint64_t sub_10015A9C4(void *a1)
{
  return sub_10015A7B8(a1, *v1 | (*((unsigned __int8 *)v1 + 2) << 16));
}

uint64_t sub_10015A9E4(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_10015A9F0 + *((int *)qword_10015AA98 + (a2 >> 62))))();
}

uint64_t sub_10015AA00(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (BYTE6(a2) != 2LL)
  {
    __break(1u);
    JUMPOUT(0x10015AA94LL);
  }

  return ((uint64_t (*)(void))((char *)&loc_10015AA3C + *((int *)qword_10015AAA8 + (a4 >> 62))))();
}

uint64_t sub_10015AAB8(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100012ED8(a1, v3);
  dispatch thunk of BinaryDecoding.container()(v15, v3, v4);
  uint64_t v5 = v16;
  uint64_t v6 = v17;
  uint64_t v7 = sub_100037298((uint64_t)v15, v16);
  uint64_t v8 = dispatch thunk of BinaryDecodingContaining.decode(length:)(2LL, v5, v6);
  if (!v1)
  {
    uint64_t v10 = v8;
    unint64_t v11 = v9;
    uint64_t v12 = v16;
    uint64_t v13 = v17;
    sub_100037298((uint64_t)v15, v16);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(2LL, v12, v13);
    uint64_t v7 = sub_10015A9E4(v10, v11);
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v15);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v7;
}

uint64_t sub_10015ABE8(__int16 a1)
{
  else {
    return (0x40302010005uLL >> (8 * (a1 + 1)));
  }
}

uint64_t sub_10015AC18(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for Endianness(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_10001736C(a1, a2);
  static Endianness.current.getter(v11);
  sub_1000F4D24();
  uint64_t v12 = FixedWidthInteger.init(data:ofEndianness:)((uint64_t *)((char *)&v16 + 4), a1, a2, v10);
  if (BYTE6(v16) == 1)
  {
    sub_100016F9C(a3, a4);
    sub_100016F9C(a1, a2);
  }

  else
  {
    unsigned int v13 = WORD2(v16);
    static Endianness.current.getter(v12);
    FixedWidthInteger.init(data:ofEndianness:)(&v16, a3, a4, v10);
    sub_100016F9C(a1, a2);
  }

  return 393216LL;
}

uint64_t destroy for AirPodsSendBeaconGroupDataCommandPayload(uint64_t a1)
{
  return sub_100016F9C(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t *initializeWithCopy for AirPodsSendBeaconGroupDataCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10001736C(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v7 = a2[2];
  unint64_t v6 = a2[3];
  sub_10001736C(v7, v6);
  a1[2] = v7;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for AirPodsSendBeaconGroupDataCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10001736C(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100016F9C(v6, v7);
  uint64_t v9 = a2[2];
  unint64_t v8 = a2[3];
  sub_10001736C(v9, v8);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v9;
  a1[3] = v8;
  sub_100016F9C(v10, v11);
  return a1;
}

uint64_t *assignWithTake for AirPodsSendBeaconGroupDataCommandPayload(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100016F9C(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_100016F9C(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsSendBeaconGroupDataCommandPayload(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AirPodsSendBeaconGroupDataCommandPayload( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)uint64_t result = a2 - 13;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0LL;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AccessoryCommandResponsePayload()
{
  return &type metadata for AccessoryCommandResponsePayload;
}

unint64_t sub_10015AF54(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10015AF80();
  unint64_t result = sub_1000F5154();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_10015AF80()
{
  unint64_t result = qword_1009A2938;
  if (!qword_1009A2938)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EE51C, &type metadata for AccessoryCommandResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009A2938);
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AccessoryCommandResponse(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AccessoryCommandResponse(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFB)
  {
    if ((a2 + 33554181) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776965;
      }
    }

    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
    }
  }

  unsigned int v4 = *((unsigned __int8 *)a1 + 2);
  BOOL v5 = v4 >= 6;
  int v6 = v4 - 6;
  if (!v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryCommandResponse( uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554181) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFA) {
    int v3 = 0;
  }
  if (a2 > 0xFA)
  {
    *(_WORD *)unint64_t result = a2 - 251;
    *(_BYTE *)(result + 2) = (a2 - 251) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 251) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(_BYTE *)(result + 3) = v4;
      }
    }
  }

  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(_BYTE *)(result + 2) = a2 + 5;
      return result;
    }

    *(_BYTE *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AccessoryCommandResponse()
{
  return &type metadata for AccessoryCommandResponse;
}

uint64_t storeEnumTagSinglePayload for AccessoryCommandResponse.RawResponseStatus( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_10015B130 + 4 * byte_1007EE4B1[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10015B164 + 4 * byte_1007EE4AC[v4]))();
}

uint64_t sub_10015B164(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015B16C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10015B174LL);
  }
  return result;
}

uint64_t sub_10015B180(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10015B188LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_10015B18C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015B194(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryCommandResponse.RawResponseStatus()
{
  return &type metadata for AccessoryCommandResponse.RawResponseStatus;
}

unint64_t sub_10015B1B4()
{
  unint64_t result = qword_1009A2940;
  if (!qword_1009A2940)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EE678, &type metadata for AccessoryCommandResponse.RawResponseStatus);
    atomic_store(result, (unint64_t *)&qword_1009A2940);
  }

  return result;
}

uint64_t sub_10015B1F8(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x65646F63706FLL && a2 == 0xE600000000000000LL)
  {
    unint64_t v5 = 0xE600000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65646F63706FLL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x7574617453776172LL && a2 == 0xE900000000000073LL)
  {
    swift_bridgeObjectRelease(0xE900000000000073LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7574617453776172LL, 0xE900000000000073LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_10015B2EC(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009A2948);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  int v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100012ED8(a1, v7);
  unint64_t v9 = sub_10015B454();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AccessoryCommandResponse.CodingKeys,  &type metadata for AccessoryCommandResponse.CodingKeys,  v9,  v7,  v8);
  if (v1) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  BYTE1(vswift_weakDestroy(v0 + 16) = 0;
  unsigned __int16 v10 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v16 + 1, v3);
  char v15 = 1;
  unint64_t v11 = sub_10015B498();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v16,  &type metadata for AccessoryCommandResponse.RawResponseStatus,  &v15,  v3,  &type metadata for AccessoryCommandResponse.RawResponseStatus,  v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  int v12 = v16;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v10 | (v12 << 16);
}

unint64_t sub_10015B454()
{
  unint64_t result = qword_1009A2950;
  if (!qword_1009A2950)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EE7B4, &type metadata for AccessoryCommandResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A2950);
  }

  return result;
}

unint64_t sub_10015B498()
{
  unint64_t result = qword_1009A2958;
  if (!qword_1009A2958)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EE5D8, &type metadata for AccessoryCommandResponse.RawResponseStatus);
    atomic_store(result, (unint64_t *)&qword_1009A2958);
  }

  return result;
}

unint64_t sub_10015B4DC()
{
  unint64_t result = qword_1009A2968;
  if (!qword_1009A2968)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EE5B0, &type metadata for AccessoryCommandResponse.RawResponseStatus);
    atomic_store(result, (unint64_t *)&qword_1009A2968);
  }

  return result;
}

unint64_t sub_10015B520()
{
  unint64_t result = qword_1009A2970;
  if (!qword_1009A2970)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EE600, &type metadata for AccessoryCommandResponse.RawResponseStatus);
    atomic_store(result, (unint64_t *)&qword_1009A2970);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for AccessoryCommandResponse.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10015B5B0 + 4 * byte_1007EE4BB[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10015B5E4 + 4 * byte_1007EE4B6[v4]))();
}

uint64_t sub_10015B5E4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015B5EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10015B5F4LL);
  }
  return result;
}

uint64_t sub_10015B600(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10015B608LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10015B60C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015B614(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryCommandResponse.CodingKeys()
{
  return &type metadata for AccessoryCommandResponse.CodingKeys;
}

unint64_t sub_10015B634()
{
  unint64_t result = qword_1009A2978;
  if (!qword_1009A2978)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EE78C, &type metadata for AccessoryCommandResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A2978);
  }

  return result;
}

unint64_t sub_10015B67C()
{
  unint64_t result = qword_1009A2980;
  if (!qword_1009A2980)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EE6FC, &type metadata for AccessoryCommandResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A2980);
  }

  return result;
}

unint64_t sub_10015B6C4()
{
  unint64_t result = qword_1009A2988;
  if (!qword_1009A2988)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EE724, &type metadata for AccessoryCommandResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A2988);
  }

  return result;
}

uint64_t sub_10015B708(void *a1, uint64_t a2, char a3)
{
  uint64_t v7 = type metadata accessor for Endianness(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unsigned __int16 v10 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100012ED8(a1, v11);
  unsigned int v13 = dispatch thunk of BinaryEncoding.container()(v37, v11, v12);
  if (a3 == 2)
  {
    if (a2) {
      char v14 = 19;
    }
    else {
      char v14 = 8;
    }
  }

  else if (a3 == 1)
  {
    char v14 = 40;
  }

  else
  {
    char v14 = 0;
  }

  LOBYTE(v40) = v14;
  static Endianness.current.getter(v13);
  unint64_t v15 = sub_100041584();
  FixedWidthInteger.convert(to:)(v34, v10, &type metadata for UInt8, v15);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  LOBYTE(v40) = v34[0];
  uint64_t v16 = v38;
  uint64_t v17 = v39;
  sub_100037298((uint64_t)v37, v38);
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v40, &type metadata for UInt8, v15, v16, v17);
  if (!v3)
  {
    if (a3)
    {
      if (a3 == 1)
      {
        uint64_t v35 = &type metadata for AirTagSoundStartPayload;
        unint64_t v36 = sub_10015C1BC();
        v34[0] = a2;
        swift_bridgeObjectRetain(a2);
        uint64_t v18 = sub_100004AEC(&qword_1009A12A0);
        if ((swift_dynamicCast(&v40, v34, v18, &type metadata for AirTagSoundStartPayload, 6LL) & 1) != 0)
        {
          v34[0] = v40;
          uint64_t v19 = v38;
          uint64_t v20 = v39;
          sub_100037298((uint64_t)v37, v38);
          unint64_t v21 = sub_10015C244();
          dispatch thunk of BinaryEncodingContaining.encode<A>(_:)( v34,  &type metadata for AirTagSoundStartPayload,  v21,  v19,  v20);
          swift_bridgeObjectRelease();
          return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v37);
        }

char *sub_10015BA30@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_10015BF04(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5;
  }

  return result;
}

uint64_t sub_10015BA5C(void *a1)
{
  return sub_10015B708(a1, *(void *)v1, *(_BYTE *)(v1 + 8));
}

uint64_t sub_10015BA78(unsigned __int8 a1)
{
  if (a1 > 0x12u)
  {
    if (a1 != 19)
    {
      if (a1 == 40) {
        return 1LL;
      }
      return 4LL;
    }

    return 3LL;
  }

  else
  {
    if (a1)
    {
      if (a1 == 8) {
        return 2LL;
      }
      return 4LL;
    }

    return 0LL;
  }

uint64_t initializeBufferWithCopyOfBuffer for AirTagCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  sub_10015BB0C(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_10015BB0C(uint64_t result, char a2)
{
  if (a2 == 1) {
    return swift_bridgeObjectRetain(result);
  }
  return result;
}

uint64_t destroy for AirTagCommand(uint64_t a1)
{
  return sub_10015BB30(*(void *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_10015BB30(uint64_t result, char a2)
{
  if (a2 == 1) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t assignWithCopy for AirTagCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  sub_10015BB0C(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  char v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_10015BB30(v5, v6);
  return a1;
}

uint64_t assignWithTake for AirTagCommand(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_10015BB30(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirTagCommand(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AirTagCommand(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10015BC5C(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_10015BC74(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)unint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }

  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AirTagCommand()
{
  return &type metadata for AirTagCommand;
}

void sub_10015BC9C(char a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10015BCEC()
{
  uint64_t v1 = v5;
  uint64_t v2 = sub_100012ED8(v4, v5);
  DynamicType = (ValueMetadata *)swift_getDynamicType(v2, v1, 1LL);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v4);
  if (&type metadata for AccessoryGenericPayload == DynamicType) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x10015BEE4LL);
}

char *sub_10015BF04(void *a1)
{
  uint64_t v3 = type metadata accessor for Endianness(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v24[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100012ED8(a1, v7);
  dispatch thunk of BinaryDecoding.container()(v26, v7, v8);
  uint64_t v9 = v27;
  uint64_t v10 = v28;
  uint64_t v11 = (char *)sub_100037298((uint64_t)v26, v27);
  unint64_t v12 = sub_100041584();
  unsigned int v13 = dispatch thunk of BinaryDecodingContaining.decode<A>(_:)( v24,  &type metadata for UInt8,  &type metadata for UInt8,  v12,  v9,  v10);
  if (!v1)
  {
    char v29 = v24[0];
    static Endianness.current.getter(v13);
    uint64_t v11 = &v29;
    FixedWidthInteger.convert(to:)(v25, v6, &type metadata for UInt8, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if (LOBYTE(v25[0]) > 0x12u)
    {
      if (LOBYTE(v25[0]) == 19)
      {
        char v14 = &type metadata for AccessoryGenericPayload;
        char v15 = 3;
        goto LABEL_11;
      }

      if (LOBYTE(v25[0]) == 40)
      {
        char v14 = &type metadata for AirTagSoundStartPayload;
        char v15 = 1;
        unint64_t v16 = sub_10015C1BC();
LABEL_12:
        unint64_t v17 = v16;
        goto LABEL_13;
      }
    }

    else
    {
      if (!LOBYTE(v25[0]))
      {
        char v14 = &type metadata for AirTagCommandAckPayload;
        unint64_t v17 = sub_10015C200();
        char v15 = 0;
LABEL_13:
        sub_100013044((uint64_t)a1, (uint64_t)v24);
        v25[3] = v14;
        v25[4] = v17;
        sub_10000A7C8(v25);
        dispatch thunk of BinaryDecodable.init(from:)(v24, v14, *(void *)(v17 + 8));
        sub_100013044((uint64_t)v25, (uint64_t)v24);
        sub_10015BC9C(v15, (uint64_t)v24);
        uint64_t v11 = v18;
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
        goto LABEL_15;
      }

      if (LOBYTE(v25[0]) == 8)
      {
        char v14 = &type metadata for AccessoryGenericPayload;
        char v15 = 2;
LABEL_11:
        unint64_t v16 = sub_1000F4DE0();
        goto LABEL_12;
      }
    }

    unint64_t v19 = sub_10015C178();
    uint64_t v20 = swift_allocError(&type metadata for AirTagCommand.AirTagCommandError, v19, 0LL, 0LL);
    _BYTE *v21 = 1;
    swift_willThrow(v20);
  }

unint64_t sub_10015C178()
{
  unint64_t result = qword_1009A2990;
  if (!qword_1009A2990)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EE97C, &type metadata for AirTagCommand.AirTagCommandError);
    atomic_store(result, (unint64_t *)&qword_1009A2990);
  }

  return result;
}

unint64_t sub_10015C1BC()
{
  unint64_t result = qword_1009A2998;
  if (!qword_1009A2998)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F7DD8, &type metadata for AirTagSoundStartPayload);
    atomic_store(result, (unint64_t *)&qword_1009A2998);
  }

  return result;
}

unint64_t sub_10015C200()
{
  unint64_t result = qword_1009A29A0;
  if (!qword_1009A29A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008189C8, &type metadata for AirTagCommandAckPayload);
    atomic_store(result, (unint64_t *)&qword_1009A29A0);
  }

  return result;
}

unint64_t sub_10015C244()
{
  unint64_t result = qword_1009A29A8;
  if (!qword_1009A29A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F7DB0, &type metadata for AirTagSoundStartPayload);
    atomic_store(result, (unint64_t *)&qword_1009A29A8);
  }

  return result;
}

unint64_t sub_10015C288()
{
  unint64_t result = qword_1009A29B0;
  if (!qword_1009A29B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008189A0, &type metadata for AirTagCommandAckPayload);
    atomic_store(result, (unint64_t *)&qword_1009A29B0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for AirTagCommand.AirTagCommandError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10015C318 + 4 * byte_1007EE889[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10015C34C + 4 * asc_1007EE884[v4]))();
}

uint64_t sub_10015C34C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015C354(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10015C35CLL);
  }
  return result;
}

uint64_t sub_10015C368(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10015C370LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10015C374(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015C37C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirTagCommand.AirTagCommandError()
{
  return &type metadata for AirTagCommand.AirTagCommandError;
}

unint64_t sub_10015C39C()
{
  unint64_t result = qword_1009A29B8;
  if (!qword_1009A29B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EE954, &type metadata for AirTagCommand.AirTagCommandError);
    atomic_store(result, (unint64_t *)&qword_1009A29B8);
  }

  return result;
}

uint64_t sub_10015C3E4()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2A218);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2A218);
  if (qword_10099B148 != -1) {
    swift_once(&qword_10099B148, sub_10015F8A4);
  }
  uint64_t v2 = sub_10000A720(v0, (uint64_t)qword_100A2A230);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_10015C474()
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v0;
  return swift_task_switch(sub_10015C48C, v0, 0LL);
}

uint64_t sub_10015C48C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v1 + 136);
  uint64_t v3 = v2[18];
  uint64_t v4 = v2[19];
  v2[18] = sub_10015CCC4;
  v2[19] = v1;
  swift_retain();
  sub_10002214C(v3, v4);
  uint64_t v5 = v2[20];
  uint64_t v6 = v2[21];
  v2[20] = sub_10015CCD4;
  v2[21] = v1;
  swift_retain();
  sub_10002214C(v5, v6);
  uint64_t v7 = swift_allocObject(&unk_1009410F8, 32LL, 7LL);
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = sub_10015CCDC;
  *(void *)(v7 + 24) = v1;
  uint64_t v8 = v2[22];
  uint64_t v9 = v2[23];
  v2[22] = sub_10015CD2C;
  v2[23] = v7;
  swift_retain();
  sub_10002214C(v8, v9);
  uint64_t v10 = v2[24];
  uint64_t v11 = v2[25];
  v2[24] = sub_10015CD50;
  v2[25] = v1;
  swift_retain();
  sub_10002214C(v10, v11);
  uint64_t v12 = v2[26];
  uint64_t v13 = v2[27];
  v2[26] = sub_10015CD78;
  v2[27] = v1;
  swift_retain();
  sub_10002214C(v12, v13);
  uint64_t v14 = v2[30];
  uint64_t v15 = v2[31];
  v2[30] = sub_10015CDA0;
  v2[31] = v1;
  swift_retain();
  sub_10002214C(v14, v15);
  uint64_t v16 = v2[32];
  uint64_t v17 = v2[33];
  v2[32] = sub_10015CDA8;
  v2[33] = v1;
  swift_retain();
  sub_10002214C(v16, v17);
  uint64_t v18 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  unint64_t v19 = (void *)swift_task_alloc(v18);
  *(void *)(v0 + 24) = v19;
  *unint64_t v19 = v0;
  v19[1] = sub_10015C624;
  return unsafeBlocking<A>(_:)(v19, sub_10015CDB0, *(void *)(v0 + 16), (char *)&type metadata for () + 8);
}

uint64_t sub_10015C624()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 24LL));
  swift_release();
  return swift_task_switch(sub_10015C680, v1, 0LL);
}

uint64_t sub_10015C680()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10015C688(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v25 = a5;
  int v23 = a4;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for Transaction(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a3, v12);
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = (v16 + 40) & ~v16;
  unint64_t v18 = (v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v19 = (char *)swift_allocObject(&unk_100941378, v18 + 24, v16 | 7);
  *((void *)v19 + 2) = a7;
  *((void *)v19 + 3) = a1;
  *((void *)v19 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v19[v17], v15, v12);
  uint64_t v20 = &v19[v18];
  char *v20 = v23;
  *((void *)v20 + 1) = v25;
  *((void *)v20 + 2) = a6;
  swift_retain(a7);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a6);
  static Transaction.asyncTask(name:block:)("IDSCallback", 11LL, 2LL, &unk_1009A2C18, v19);
  return swift_release(v19);
}

uint64_t sub_10015C7E0( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v28 = a7;
  uint64_t v29 = a8;
  int v27 = a6;
  uint64_t v26 = a4;
  int v25 = a3;
  uint64_t v24 = a1;
  uint64_t v14 = type metadata accessor for MessagingMessageContext(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14);
  uint64_t v30 = type metadata accessor for Transaction(0LL);
  sub_10001DC4C( a11,  (uint64_t)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL),  type metadata accessor for MessagingMessageContext);
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (v17 + 104) & ~v17;
  uint64_t v19 = swift_allocObject(&unk_100941300, v18 + v16, v17 | 7);
  uint64_t v20 = v24;
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = a12;
  *(void *)(v19 + 24) = v20;
  *(void *)(v19 + 32) = a2;
  *(_BYTE *)(v19 + 40) = v25;
  *(void *)(v19 + 48) = v26;
  *(void *)(v19 + 56) = a5;
  *(_BYTE *)(v19 + 64) = v27;
  uint64_t v21 = v29;
  *(void *)(v19 + 72) = v28;
  *(void *)(v19 + 80) = v21;
  *(void *)(v19 + 88) = a9;
  *(void *)(v19 + 96) = a10;
  sub_10002218C( (uint64_t)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v19 + v18,  type metadata accessor for MessagingMessageContext);
  swift_retain();
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a5);
  sub_10001736C(v21, a9);
  swift_bridgeObjectRetain(a10);
  static Transaction.asyncTask(name:block:)("IDSCallback", 11LL, 2LL, &unk_1009A2BE0, v19);
  return swift_release();
}

uint64_t sub_10015C95C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject(a3, 32LL, 7LL);
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v8 + 24) = a1;
  swift_retain(a2);
  swift_bridgeObjectRetain(a1);
  static Transaction.asyncTask(name:block:)("IDSCallback", 11LL, 2LL, a4, v8);
  return swift_release(v8);
}

uint64_t sub_10015C9EC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for BeaconSharingSessionContext(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v23[1] = type metadata accessor for Transaction(0LL);
  sub_10001DC4C(a1, (uint64_t)v15, type metadata accessor for BeaconSharingSessionContext);
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = (v16 + 24) & ~v16;
  unint64_t v18 = (v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v19 = (v18 + 31) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v20 = swift_allocObject(&unk_100941198, v19 + 8, v16 | 7);
  *(void *)(v20 + swift_weakDestroy(v0 + 16) = a6;
  sub_10002218C((uint64_t)v15, v20 + v17, type metadata accessor for BeaconSharingSessionContext);
  unint64_t v21 = v20 + v18;
  *(_BYTE *)unint64_t v21 = a2;
  *(void *)(v21 + 8) = a3;
  *(void *)(v21 + swift_weakDestroy(v0 + 16) = a4;
  *(void *)(v20 + v19) = a5;
  swift_retain();
  swift_bridgeObjectRetain(a4);
  swift_retain();
  static Transaction.asyncTask(name:block:)("IDSCallback", 11LL, 2LL, &unk_1009A2B38, v20);
  return swift_release();
}

uint64_t sub_10015CB40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject(&unk_100941120, 32LL, 7LL);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v4 + 24) = a1;
  swift_retain(a2);
  swift_retain(a1);
  static Transaction.asyncTask(name:block:)("IDSCallback", 11LL, 2LL, &unk_1009A2B08, v4);
  return swift_release(v4);
}

uint64_t sub_10015CBC8()
{
  swift_release(*(void *)(v0 + 136));
  swift_bridgeObjectRelease(*(void *)(v0 + 144));
  swift_bridgeObjectRelease(*(void *)(v0 + 152));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for IDSTransportService_FMD()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd23IDSTransportService_FMD);
}

uint64_t sub_10015CC2C()
{
  uint64_t v2 = (void *)swift_task_alloc(dword_1009A29EC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100015D58;
  v2[2] = v0;
  return swift_task_switch(sub_10015C48C, v0, 0LL);
}

uint64_t sub_10015CC88(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100015C48( &qword_1009A2AF8,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for IDSTransportService_FMD,  (uint64_t)&unk_1007EEA54);
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_10015CCC4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5)
{
}

uint64_t sub_10015CCD4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  return sub_10015C688(a1, a2, a3, a4, a5, a6, v6);
}

uint64_t sub_10015CCDC( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_10015C7E0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v12);
}

uint64_t sub_10015CD08()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10015CD2C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  return sub_1001DE6D8( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t))(v8 + 16));
}

uint64_t sub_10015CD50(uint64_t a1)
{
  return sub_10015C95C(a1, v1, (uint64_t)&unk_100941288, (uint64_t)&unk_1009A2BA8);
}

uint64_t sub_10015CD78(uint64_t a1)
{
  return sub_10015C95C(a1, v1, (uint64_t)&unk_100941210, (uint64_t)&unk_1009A2B70);
}

uint64_t sub_10015CDA0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10015C9EC(a1, a2, a3, a4, a5, v5);
}

uint64_t sub_10015CDA8(uint64_t a1)
{
  return sub_10015CB40(a1, v1);
}

uint64_t sub_10015CDB0()
{
  return sub_1001DE71C();
}

uint64_t sub_10015CDD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 48) = a6;
  *(void *)(v7 + 56) = a7;
  *(_BYTE *)(v7 + 80) = a5;
  *(void *)(v7 + 32) = a3;
  *(void *)(v7 + 40) = a4;
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  return swift_task_switch(sub_10015CDF4, 0LL, 0LL);
}

uint64_t sub_10015CDF4()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  char v3 = *(_BYTE *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v6 = swift_task_alloc(80LL);
  *(void *)(v0 + 64) = v6;
  __int128 v7 = *(_OWORD *)(v0 + 32);
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)(v6 + 24) = v4;
  *(_OWORD *)(v6 + 32) = v7;
  *(_BYTE *)(v6 + 48) = v3;
  *(void *)(v6 + 56) = v2;
  *(void *)(v6 + 64) = v1;
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(void *)(v0 + 72) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10015CEA8;
  return withTaskGroup<A, B>(of:returning:isolation:body:)( v8,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8,  0LL,  0LL,  &unk_1009A2C28,  v6,  (char *)&type metadata for () + 8);
}

uint64_t sub_10015CEA8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 64LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 72LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10015C680, 0LL, 0LL);
}

uint64_t sub_10015CF04( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(v8 + 192) = a8;
  *(void *)(v8 + 200) = v15;
  *(_BYTE *)(v8 + 264) = a7;
  *(void *)(v8 + 176) = a5;
  *(void *)(v8 + 184) = a6;
  *(void *)(v8 + 160) = a3;
  *(void *)(v8 + 168) = a4;
  *(void *)(v8 + 152) = a2;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  *(void *)(v8 + 208) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v8 + 2swift_weakDestroy(v0 + 16) = v11;
  uint64_t v12 = *(void *)(v11 + 64);
  *(void *)(v8 + 224) = v12;
  *(void *)(v8 + 232) = swift_task_alloc((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = (*(void *)(*(void *)(sub_100004AEC(&qword_1009A9BF0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v8 + 240) = swift_task_alloc(v13);
  *(void *)(v8 + 248) = swift_task_alloc(v13);
  return swift_task_switch(sub_10015CFB8, a3, 0LL);
}

uint64_t sub_10015CFB8()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 160) + 144LL);
  *(void *)(v0 + 256) = v1;
  swift_bridgeObjectRetain(v1);
  return swift_task_switch(sub_10015CFFC, 0LL, 0LL);
}

void sub_10015CFFC()
{
  int64_t v1 = 0LL;
  uint64_t v49 = (__int128 *)(v0 + 56);
  uint64_t v50 = (__int128 *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 256);
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v44 = v2 + 64;
  uint64_t v48 = v2;
  uint64_t v4 = -1LL;
  uint64_t v5 = -1LL << *(_BYTE *)(v48 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1LL << -(char)v5);
  }
  unint64_t v6 = v4 & v3;
  int64_t v45 = (unint64_t)(63 - v5) >> 6;
  uint64_t v46 = *(void *)(v0 + 224) + 7LL;
  uint64_t v47 = *(void *)(v0 + 216);
  while (1)
  {
    if (v6)
    {
      uint64_t v51 = (v6 - 1) & v6;
      int64_t v52 = v1;
      unint64_t v8 = __clz(__rbit64(v6)) | (v1 << 6);
      goto LABEL_23;
    }

    int64_t v9 = v1 + 1;
    if (__OFADD__(v1, 1LL))
    {
      __break(1u);
      goto LABEL_33;
    }

    if (v9 >= v45) {
      goto LABEL_31;
    }
    unint64_t v10 = *(void *)(v44 + 8 * v9);
    int64_t v11 = v1 + 1;
    if (!v10)
    {
      int64_t v11 = v1 + 2;
      if (v1 + 2 >= v45) {
        goto LABEL_31;
      }
      unint64_t v10 = *(void *)(v44 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = v1 + 3;
        if (v1 + 3 >= v45) {
          goto LABEL_31;
        }
        unint64_t v10 = *(void *)(v44 + 8 * v11);
        if (!v10)
        {
          int64_t v11 = v1 + 4;
          if (v1 + 4 >= v45) {
            goto LABEL_31;
          }
          unint64_t v10 = *(void *)(v44 + 8 * v11);
          if (!v10) {
            break;
          }
        }
      }
    }

uint64_t sub_10015D45C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(void *)(v8 + 48) = v10;
  *(void *)(v8 + 56) = v11;
  *(_BYTE *)(v8 + 72) = a8;
  *(void *)(v8 + 32) = a6;
  *(void *)(v8 + 40) = a7;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = a4;
  *(void *)(v8 + 24) = a5;
  return swift_task_switch(sub_10015D488, 0LL, 0LL);
}

uint64_t sub_10015D488()
{
  int64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_100012ED8(v1, v2);
  uint64_t v4 = *(int **)(v3 + 8);
  uint64_t v7 = (int *)((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v0 + 64) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10009C72C;
  return ((uint64_t (*)(void, void, void, void, void, void, uint64_t, uint64_t))v7)( *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(unsigned __int8 *)(v0 + 72),  *(void *)(v0 + 48),  *(void *)(v0 + 56),  v2,  v3);
}

uint64_t sub_10015D514( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(v8 + 80) = v11;
  *(void *)(v8 + 88) = v12;
  *(_OWORD *)(v8 + 64) = v10;
  *(_BYTE *)(v8 + 113) = a7;
  *(void *)(v8 + 48) = a6;
  *(void *)(v8 + 56) = a8;
  *(_BYTE *)(v8 + 112) = a4;
  *(void *)(v8 + 32) = a3;
  *(void *)(v8 + 40) = a5;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  return swift_task_switch(sub_10015D550, 0LL, 0LL);
}

uint64_t sub_10015D550()
{
  uint64_t v1 = *(void *)(v0 + 72);
  char v2 = *(_BYTE *)(v0 + 113);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  char v5 = *(_BYTE *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 32);
  __int128 v11 = *(_OWORD *)(v0 + 16);
  __int128 v12 = *(_OWORD *)(v0 + 56);
  uint64_t v7 = swift_task_alloc(112LL);
  *(void *)(v0 + 96) = v7;
  __int128 v8 = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = v11;
  *(void *)(v7 + 32) = v6;
  *(_BYTE *)(v7 + 40) = v5;
  *(void *)(v7 + 48) = v4;
  *(void *)(v7 + 56) = v3;
  *(_BYTE *)(v7 + 64) = v2;
  *(_OWORD *)(v7 + 72) = v12;
  *(void *)(v7 + 88) = v1;
  *(_OWORD *)(v7 + 96) = v8;
  int64_t v9 = (void *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(void *)(v0 + 104) = v9;
  *int64_t v9 = v0;
  v9[1] = sub_10015D638;
  return withTaskGroup<A, B>(of:returning:isolation:body:)( v9,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8,  0LL,  0LL,  &unk_1009A2BF0,  v7,  (char *)&type metadata for () + 8);
}

uint64_t sub_10015D638()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 96LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 104LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10015C680, 0LL, 0LL);
}

uint64_t sub_10015D694( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 232) = v17;
  *(_OWORD *)(v8 + 2swift_weakDestroy(v0 + 16) = v16;
  *(_OWORD *)(v8 + 200) = v15;
  *(_BYTE *)(v8 + 289) = v14;
  *(void *)(v8 + 184) = a7;
  *(void *)(v8 + 192) = a8;
  *(_BYTE *)(v8 + 288) = a6;
  *(void *)(v8 + 168) = a4;
  *(void *)(v8 + 176) = a5;
  *(void *)(v8 + 152) = a2;
  *(void *)(v8 + 160) = a3;
  uint64_t v10 = *(void *)(type metadata accessor for MessagingMessageContext(0LL) - 8);
  *(void *)(v8 + 240) = v10;
  uint64_t v11 = *(void *)(v10 + 64);
  *(void *)(v8 + 248) = v11;
  *(void *)(v8 + 256) = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = (*(void *)(*(void *)(sub_100004AEC(&qword_1009A9BF0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v8 + 264) = swift_task_alloc(v12);
  *(void *)(v8 + 272) = swift_task_alloc(v12);
  return swift_task_switch(sub_10015D75C, a3, 0LL);
}

uint64_t sub_10015D75C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 160) + 144LL);
  *(void *)(v0 + 280) = v1;
  swift_bridgeObjectRetain(v1);
  return swift_task_switch(sub_10015D7A0, 0LL, 0LL);
}

void sub_10015D7A0()
{
  int64_t v1 = 0LL;
  uint64_t v44 = (__int128 *)(v0 + 56);
  int64_t v45 = (__int128 *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v40 = v2 + 64;
  uint64_t v42 = *(void *)(v0 + 240);
  uint64_t v43 = v2;
  uint64_t v4 = -1LL;
  uint64_t v5 = -1LL << *(_BYTE *)(v43 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1LL << -(char)v5);
  }
  unint64_t v6 = v4 & v3;
  int64_t v41 = (unint64_t)(63 - v5) >> 6;
  while (1)
  {
    if (v6)
    {
      uint64_t v47 = (v6 - 1) & v6;
      int64_t v48 = v1;
      unint64_t v8 = __clz(__rbit64(v6)) | (v1 << 6);
      goto LABEL_23;
    }

    int64_t v9 = v1 + 1;
    if (__OFADD__(v1, 1LL))
    {
      __break(1u);
      goto LABEL_33;
    }

    if (v9 >= v41) {
      goto LABEL_31;
    }
    unint64_t v10 = *(void *)(v40 + 8 * v9);
    int64_t v11 = v1 + 1;
    if (!v10)
    {
      int64_t v11 = v1 + 2;
      if (v1 + 2 >= v41) {
        goto LABEL_31;
      }
      unint64_t v10 = *(void *)(v40 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = v1 + 3;
        if (v1 + 3 >= v41) {
          goto LABEL_31;
        }
        unint64_t v10 = *(void *)(v40 + 8 * v11);
        if (!v10)
        {
          int64_t v11 = v1 + 4;
          if (v1 + 4 >= v41) {
            goto LABEL_31;
          }
          unint64_t v10 = *(void *)(v40 + 8 * v11);
          if (!v10) {
            break;
          }
        }
      }
    }

uint64_t sub_10015DC28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(v8 + 80) = v15;
  *(void *)(v8 + 88) = v16;
  *(void *)(v8 + 64) = v13;
  *(void *)(v8 + 72) = v14;
  *(_BYTE *)(v8 + 105) = v11;
  *(void *)(v8 + 48) = v10;
  *(void *)(v8 + 56) = v12;
  *(_BYTE *)(v8 + 104) = a7;
  *(void *)(v8 + 32) = a6;
  *(void *)(v8 + 40) = a8;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = a4;
  *(void *)(v8 + 24) = a5;
  return swift_task_switch(sub_10015DC70, 0LL, 0LL);
}

void sub_10015DC70()
{
  int64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = v1[4];
  sub_100012ED8(v1, v1[3]);
  uint64_t v3 = *(int **)(v2 + 16);
  uint64_t v5 = (char *)v3 + *v3;
  uint64_t v4 = (void *)swift_task_alloc(v3[1]);
  *(void *)(v0 + 96) = v4;
  void *v4 = v0;
  v4[1] = sub_10015DD10;
  __asm { BR              X8 }

uint64_t sub_10015DD10()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 96));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10015DD58(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_task_switch(sub_10015DD70, 0LL, 0LL);
}

uint64_t sub_10015DD70()
{
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 32) = v1;
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(v0 + 16);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(void *)(v0 + 40) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10015DDFC;
  return withTaskGroup<A, B>(of:returning:isolation:body:)( v2,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8,  0LL,  0LL,  &unk_1009A2BB8,  v1,  (char *)&type metadata for () + 8);
}

uint64_t sub_10015DDFC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 40LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10015C680, 0LL, 0LL);
}

uint64_t sub_10015DE58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[20] = a3;
  v4[21] = a4;
  v4[19] = a2;
  unint64_t v6 = (*(void *)(*(void *)(sub_100004AEC(&qword_1009A9BF0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[22] = swift_task_alloc(v6);
  v4[23] = swift_task_alloc(v6);
  return swift_task_switch(sub_10015DECC, a3, 0LL);
}

uint64_t sub_10015DECC()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 160) + 144LL);
  *(void *)(v0 + 192) = v1;
  swift_bridgeObjectRetain(v1);
  return swift_task_switch(sub_10015DF10, 0LL, 0LL);
}

void sub_10015DF10()
{
  int64_t v1 = 0LL;
  uint64_t v40 = (__int128 *)(v0 + 56);
  int64_t v41 = (__int128 *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v37 = v2 + 64;
  uint64_t v39 = v2;
  uint64_t v4 = -1LL;
  uint64_t v5 = -1LL << *(_BYTE *)(v39 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1LL << -(char)v5);
  }
  unint64_t v6 = v4 & v3;
  int64_t v38 = (unint64_t)(63 - v5) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      uint64_t v42 = (v6 - 1) & v6;
      int64_t v9 = v1;
      unint64_t v10 = v8 | (v1 << 6);
      goto LABEL_23;
    }

    int64_t v11 = v1 + 1;
    if (__OFADD__(v1, 1LL))
    {
      __break(1u);
      goto LABEL_33;
    }

    if (v11 >= v38) {
      goto LABEL_31;
    }
    unint64_t v12 = *(void *)(v37 + 8 * v11);
    int64_t v13 = v1 + 1;
    if (!v12)
    {
      int64_t v13 = v1 + 2;
      if (v1 + 2 >= v38) {
        goto LABEL_31;
      }
      unint64_t v12 = *(void *)(v37 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v1 + 3;
        if (v1 + 3 >= v38) {
          goto LABEL_31;
        }
        unint64_t v12 = *(void *)(v37 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v1 + 4;
          if (v1 + 4 >= v38) {
            goto LABEL_31;
          }
          unint64_t v12 = *(void *)(v37 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }

uint64_t sub_10015E2C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return swift_task_switch(sub_10015E2D8, 0LL, 0LL);
}

uint64_t sub_10015E2D8()
{
  int64_t v1 = (void *)v0[2];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_100012ED8(v1, v2);
  uint64_t v4 = *(int **)(v3 + 24);
  uint64_t v7 = (int *)((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  v0[4] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10015E358;
  return ((uint64_t (*)(void, uint64_t, uint64_t))v7)(v0[3], v2, v3);
}

uint64_t sub_10015E358()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 32));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10015E3A0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_task_switch(sub_10015E3B8, 0LL, 0LL);
}

uint64_t sub_10015E3B8()
{
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 32) = v1;
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(v0 + 16);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(void *)(v0 + 40) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10015E444;
  return withTaskGroup<A, B>(of:returning:isolation:body:)( v2,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8,  0LL,  0LL,  &unk_1009A2B80,  v1,  (char *)&type metadata for () + 8);
}

uint64_t sub_10015E444()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 40LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100160CE0, 0LL, 0LL);
}

uint64_t sub_10015E4A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[20] = a3;
  v4[21] = a4;
  v4[19] = a2;
  unint64_t v6 = (*(void *)(*(void *)(sub_100004AEC(&qword_1009A9BF0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[22] = swift_task_alloc(v6);
  v4[23] = swift_task_alloc(v6);
  return swift_task_switch(sub_10015E514, a3, 0LL);
}

uint64_t sub_10015E514()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 160) + 144LL);
  *(void *)(v0 + 192) = v1;
  swift_bridgeObjectRetain(v1);
  return swift_task_switch(sub_10015E558, 0LL, 0LL);
}

void sub_10015E558()
{
  int64_t v1 = 0LL;
  uint64_t v40 = (__int128 *)(v0 + 56);
  int64_t v41 = (__int128 *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v37 = v2 + 64;
  uint64_t v39 = v2;
  uint64_t v4 = -1LL;
  uint64_t v5 = -1LL << *(_BYTE *)(v39 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1LL << -(char)v5);
  }
  unint64_t v6 = v4 & v3;
  int64_t v38 = (unint64_t)(63 - v5) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      uint64_t v42 = (v6 - 1) & v6;
      int64_t v9 = v1;
      unint64_t v10 = v8 | (v1 << 6);
      goto LABEL_23;
    }

    int64_t v11 = v1 + 1;
    if (__OFADD__(v1, 1LL))
    {
      __break(1u);
      goto LABEL_33;
    }

    if (v11 >= v38) {
      goto LABEL_31;
    }
    unint64_t v12 = *(void *)(v37 + 8 * v11);
    int64_t v13 = v1 + 1;
    if (!v12)
    {
      int64_t v13 = v1 + 2;
      if (v1 + 2 >= v38) {
        goto LABEL_31;
      }
      unint64_t v12 = *(void *)(v37 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v1 + 3;
        if (v1 + 3 >= v38) {
          goto LABEL_31;
        }
        unint64_t v12 = *(void *)(v37 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v1 + 4;
          if (v1 + 4 >= v38) {
            goto LABEL_31;
          }
          unint64_t v12 = *(void *)(v37 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }

uint64_t sub_10015E908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return swift_task_switch(sub_10015E920, 0LL, 0LL);
}

uint64_t sub_10015E920()
{
  int64_t v1 = (void *)v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  sub_100012ED8(v1, v3);
  swift_bridgeObjectRetain(v2);
  uint64_t v6 = sub_1006F13CC(v5);
  v0[4] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int **)(v4 + 32);
  unint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v7 + *v7);
  unint64_t v8 = (void *)swift_task_alloc(v7[1]);
  v0[5] = v8;
  *unint64_t v8 = v0;
  v8[1] = sub_10015E9C4;
  return v10(v6, v3, v4);
}

uint64_t sub_10015E9C4()
{
  uint64_t v1 = *(void *)(*v0 + 32);
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 40));
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10015EA14(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 40) = a5;
  *(void *)(v6 + 48) = a6;
  *(void *)(v6 + 24) = a2;
  *(void *)(v6 + 32) = a4;
  *(_BYTE *)(v6 + 72) = a3;
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = a1;
  return swift_task_switch(sub_10015EA38, 0LL, 0LL);
}

uint64_t sub_10015EA38()
{
  uint64_t v1 = *(void *)(v0 + 32);
  char v2 = *(_BYTE *)(v0 + 72);
  uint64_t v3 = swift_task_alloc(64LL);
  *(void *)(v0 + 56) = v3;
  __int128 v4 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v3 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(v0 + 16);
  *(_BYTE *)(v3 + 32) = v2;
  *(void *)(v3 + 40) = v1;
  *(_OWORD *)(v3 + 48) = v4;
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(void *)(v0 + 64) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10015EAE4;
  return withTaskGroup<A, B>(of:returning:isolation:body:)( v5,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8,  0LL,  0LL,  &unk_1009A2B48,  v3,  (char *)&type metadata for () + 8);
}

uint64_t sub_10015EAE4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 56LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 64LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10015C680, 0LL, 0LL);
}

uint64_t sub_10015EB40( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 184) = a7;
  *(void *)(v8 + 192) = a8;
  *(_BYTE *)(v8 + 248) = a5;
  *(void *)(v8 + 168) = a4;
  *(void *)(v8 + 176) = a6;
  *(void *)(v8 + 152) = a2;
  *(void *)(v8 + 160) = a3;
  uint64_t v10 = *(void *)(type metadata accessor for BeaconSharingSessionContext(0LL) - 8);
  *(void *)(v8 + 200) = v10;
  uint64_t v11 = *(void *)(v10 + 64);
  *(void *)(v8 + 208) = v11;
  *(void *)(v8 + 2swift_weakDestroy(v0 + 16) = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = (*(void *)(*(void *)(sub_100004AEC(&qword_1009A9BF0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v8 + 224) = swift_task_alloc(v12);
  *(void *)(v8 + 232) = swift_task_alloc(v12);
  return swift_task_switch(sub_10015EBE4, a3, 0LL);
}

uint64_t sub_10015EBE4()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 160) + 144LL);
  *(void *)(v0 + 240) = v1;
  swift_bridgeObjectRetain(v1);
  return swift_task_switch(sub_10015EC28, 0LL, 0LL);
}

void sub_10015EC28()
{
  int64_t v1 = 0LL;
  uint64_t v46 = (__int128 *)(v0 + 56);
  uint64_t v47 = (__int128 *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v41 = v2 + 64;
  uint64_t v45 = v2;
  uint64_t v4 = -1LL;
  uint64_t v5 = -1LL << *(_BYTE *)(v45 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1LL << -(char)v5);
  }
  unint64_t v6 = v4 & v3;
  int64_t v42 = (unint64_t)(63 - v5) >> 6;
  uint64_t v43 = *(void *)(v0 + 208) + 7LL;
  uint64_t v44 = *(void *)(v0 + 200);
  while (1)
  {
    if (v6)
    {
      uint64_t v48 = (v6 - 1) & v6;
      int64_t v49 = v1;
      unint64_t v8 = __clz(__rbit64(v6)) | (v1 << 6);
      goto LABEL_23;
    }

    int64_t v9 = v1 + 1;
    if (__OFADD__(v1, 1LL))
    {
      __break(1u);
      goto LABEL_33;
    }

    if (v9 >= v42) {
      goto LABEL_31;
    }
    unint64_t v10 = *(void *)(v41 + 8 * v9);
    int64_t v11 = v1 + 1;
    if (!v10)
    {
      int64_t v11 = v1 + 2;
      if (v1 + 2 >= v42) {
        goto LABEL_31;
      }
      unint64_t v10 = *(void *)(v41 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = v1 + 3;
        if (v1 + 3 >= v42) {
          goto LABEL_31;
        }
        unint64_t v10 = *(void *)(v41 + 8 * v11);
        if (!v10)
        {
          int64_t v11 = v1 + 4;
          if (v1 + 4 >= v42) {
            goto LABEL_31;
          }
          unint64_t v10 = *(void *)(v41 + 8 * v11);
          if (!v10) {
            break;
          }
        }
      }
    }

uint64_t sub_10015F074( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 40) = a8;
  *(void *)(v8 + 48) = v10;
  *(void *)(v8 + 24) = a5;
  *(void *)(v8 + 32) = a7;
  *(_BYTE *)(v8 + 64) = a6;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = a4;
  return swift_task_switch(sub_10015F0A0, 0LL, 0LL);
}

uint64_t sub_10015F0A0()
{
  int64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_100012ED8(v1, v2);
  uint64_t v4 = *(int **)(v3 + 40);
  uint64_t v7 = (int *)((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v0 + 56) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10015F128;
  return ((uint64_t (*)(void, void, void, void, void, uint64_t, uint64_t))v7)( *(void *)(v0 + 24),  *(unsigned __int8 *)(v0 + 64),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  v2,  v3);
}

uint64_t sub_10015F128()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 56));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10015F170(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_task_switch(sub_10015F188, 0LL, 0LL);
}

uint64_t sub_10015F188()
{
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 32) = v1;
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(v0 + 16);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(void *)(v0 + 40) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10015E444;
  return withTaskGroup<A, B>(of:returning:isolation:body:)( v2,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8,  0LL,  0LL,  &unk_1009A2B18,  v1,  (char *)&type metadata for () + 8);
}

uint64_t sub_10015F214()
{
  return sub_1001538E8((void (*)(void))&_swift_release);
}

uint64_t sub_10015F220()
{
  uint64_t v2 = swift_task_alloc(dword_1009A2B04);
  __int128 v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100015D58;
  *(_OWORD *)(v2 + swift_weakDestroy(v0 + 16) = v3;
  return swift_task_switch(sub_10015F188, 0LL, 0LL);
}

uint64_t sub_10015F280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[20] = a3;
  v4[21] = a4;
  v4[19] = a2;
  unint64_t v6 = (*(void *)(*(void *)(sub_100004AEC(&qword_1009A9BF0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[22] = swift_task_alloc(v6);
  v4[23] = swift_task_alloc(v6);
  return swift_task_switch(sub_10015F2F4, a3, 0LL);
}

uint64_t sub_10015F2F4()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 160) + 144LL);
  *(void *)(v0 + 192) = v1;
  swift_bridgeObjectRetain(v1);
  return swift_task_switch(sub_10015F338, 0LL, 0LL);
}

void sub_10015F338()
{
  int64_t v1 = 0LL;
  uint64_t v40 = (__int128 *)(v0 + 56);
  uint64_t v41 = (__int128 *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v37 = v2 + 64;
  uint64_t v39 = v2;
  uint64_t v4 = -1LL;
  uint64_t v5 = -1LL << *(_BYTE *)(v39 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1LL << -(char)v5);
  }
  unint64_t v6 = v4 & v3;
  int64_t v38 = (unint64_t)(63 - v5) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      uint64_t v42 = (v6 - 1) & v6;
      int64_t v9 = v1;
      unint64_t v10 = v8 | (v1 << 6);
      goto LABEL_23;
    }

    int64_t v11 = v1 + 1;
    if (__OFADD__(v1, 1LL))
    {
      __break(1u);
      goto LABEL_33;
    }

    if (v11 >= v38) {
      goto LABEL_31;
    }
    unint64_t v12 = *(void *)(v37 + 8 * v11);
    int64_t v13 = v1 + 1;
    if (!v12)
    {
      int64_t v13 = v1 + 2;
      if (v1 + 2 >= v38) {
        goto LABEL_31;
      }
      unint64_t v12 = *(void *)(v37 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v1 + 3;
        if (v1 + 3 >= v38) {
          goto LABEL_31;
        }
        unint64_t v12 = *(void *)(v37 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v1 + 4;
          if (v1 + 4 >= v38) {
            goto LABEL_31;
          }
          unint64_t v12 = *(void *)(v37 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }

uint64_t sub_10015F6E8(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  unint64_t v8 = (void *)swift_task_alloc(dword_1009A2B14);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v8;
  *unint64_t v8 = v3;
  v8[1] = sub_100015D58;
  return sub_10015F280(a1, a2, v7, v6);
}

uint64_t sub_10015F754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return swift_task_switch(sub_10015F76C, 0LL, 0LL);
}

uint64_t sub_10015F76C()
{
  int64_t v1 = (void *)v0[2];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_100012ED8(v1, v2);
  uint64_t v4 = *(int **)(v3 + 48);
  uint64_t v7 = (int *)((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  v0[4] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100160CE4;
  return ((uint64_t (*)(void, uint64_t, uint64_t))v7)(v0[3], v2, v3);
}

uint64_t sub_10015F7EC()
{
  return sub_100160000((void (*)(void))&_swift_release);
}

uint64_t sub_10015F7F8()
{
  uint64_t v2 = v0 + 32;
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = (void *)swift_task_alloc(dword_1009A2B24);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_100015D58;
  v4[2] = v2;
  void v4[3] = v3;
  return swift_task_switch(sub_10015F76C, 0LL, 0LL);
}

uint64_t sub_10015F85C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A9BF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10015F8A4()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2A230);
  sub_10000A720(v0, (uint64_t)qword_100A2A230);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000017LL,  0x80000001007EE9F0LL);
}

uint64_t sub_10015F924()
{
  uint64_t v1 = type metadata accessor for BeaconSharingSessionContext(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0 + v4, v1);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      goto LABEL_4;
    case 1:
      swift_bridgeObjectRelease();
      break;
    case 0:
LABEL_4:
      uint64_t v7 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v0 + v4, v7);
      break;
  }

  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 31) & 0xFFFFFFFFFFFFFFF8LL) + 8, v3 | 7);
}

uint64_t sub_10015F9FC()
{
  uint64_t v2 = *(void *)(type metadata accessor for BeaconSharingSessionContext(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v5 = (v4 + 31) & 0xFFFFFFFFFFFFF8LL;
  uint64_t v6 = *(void *)(v0 + 16);
  uint64_t v7 = v0 + v3;
  unint64_t v8 = (char *)(v0 + v4);
  char v9 = *v8;
  uint64_t v10 = *((void *)v8 + 1);
  uint64_t v11 = *((void *)v8 + 2);
  uint64_t v12 = *(void *)(v0 + v5);
  uint64_t v13 = swift_task_alloc(dword_1009A2B34);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v13;
  *(void *)uint64_t v13 = v1;
  *(void *)(v13 + 8) = sub_100015D58;
  *(void *)(v13 + 40) = v11;
  *(void *)(v13 + 48) = v12;
  *(void *)(v13 + 24) = v7;
  *(void *)(v13 + 32) = v10;
  *(_BYTE *)(v13 + 72) = v9;
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = v6;
  return swift_task_switch(sub_10015EA38, 0LL, 0LL);
}

uint64_t sub_10015FABC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v8 = *(void *)(v2 + 40);
  uint64_t v9 = *(void *)(v2 + 48);
  uint64_t v10 = *(void *)(v2 + 56);
  char v11 = *(_BYTE *)(v2 + 32);
  uint64_t v12 = (void *)swift_task_alloc(dword_1009A2B44);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v12;
  *uint64_t v12 = v3;
  v12[1] = sub_100015D58;
  return sub_10015EB40(a1, a2, v6, v7, v11, v8, v9, v10);
}

uint64_t sub_10015FB54()
{
  uint64_t v1 = type metadata accessor for BeaconSharingSessionContext(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 72) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 32));
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0 + v4, v1);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      goto LABEL_4;
    case 1:
      swift_bridgeObjectRelease();
      break;
    case 0:
LABEL_4:
      uint64_t v7 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v0 + v4, v7);
      break;
  }

  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 31) & 0xFFFFFFFFFFFFFFF8LL) + 8, v3 | 7);
}

uint64_t sub_10015FC34()
{
  uint64_t v2 = *(void *)(type metadata accessor for BeaconSharingSessionContext(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 72LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v5 = (v4 + 31) & 0xFFFFFFFFFFFFF8LL;
  uint64_t v6 = v0 + 32;
  uint64_t v7 = v0 + v3;
  uint64_t v8 = (char *)(v0 + v4);
  char v9 = *v8;
  uint64_t v10 = *((void *)v8 + 1);
  uint64_t v11 = *((void *)v8 + 2);
  uint64_t v12 = *(void *)(v0 + v5);
  uint64_t v13 = swift_task_alloc(dword_1009A2B54);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v13;
  *(void *)uint64_t v13 = v1;
  *(void *)(v13 + 8) = sub_100015D58;
  *(void *)(v13 + 40) = v11;
  *(void *)(v13 + 48) = v12;
  *(void *)(v13 + 24) = v7;
  *(void *)(v13 + 32) = v10;
  *(_BYTE *)(v13 + 64) = v9;
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = v6;
  return swift_task_switch(sub_10015F0A0, 0LL, 0LL);
}

uint64_t sub_10015FCF4(uint64_t a1)
{
  unint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1009AC104);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000159BC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1009AC100 + dword_1009AC100))(a1, v4);
}

uint64_t sub_10015FD64()
{
  return sub_1001538E8((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10015FD70()
{
  uint64_t v2 = swift_task_alloc(dword_1009A2B6C);
  __int128 v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100015D58;
  *(_OWORD *)(v2 + swift_weakDestroy(v0 + 16) = v3;
  return swift_task_switch(sub_10015E3B8, 0LL, 0LL);
}

uint64_t sub_10015FDD0(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc(dword_1009A2B7C);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100015D58;
  return sub_10015E4A0(a1, a2, v7, v6);
}

uint64_t sub_10015FE3C()
{
  return sub_100160000((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10015FE48()
{
  uint64_t v2 = v0 + 32;
  uint64_t v3 = *(void *)(v0 + 72);
  unint64_t v4 = (void *)swift_task_alloc(dword_1009A2B8C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_100015D58;
  v4[2] = v2;
  void v4[3] = v3;
  return swift_task_switch(sub_10015E920, 0LL, 0LL);
}

uint64_t sub_10015FEAC(uint64_t a1)
{
  unint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1009AC104);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100015D58;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1009AC100 + dword_1009AC100))(a1, v4);
}

uint64_t sub_10015FF1C()
{
  return sub_1001538E8((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10015FF28()
{
  uint64_t v2 = swift_task_alloc(dword_1009A2BA4);
  __int128 v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_1000159BC;
  *(_OWORD *)(v2 + swift_weakDestroy(v0 + 16) = v3;
  return swift_task_switch(sub_10015DD70, 0LL, 0LL);
}

uint64_t sub_10015FF88(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc(dword_1009A2BB4);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100015D58;
  return sub_10015DE58(a1, a2, v7, v6);
}

uint64_t sub_10015FFF4()
{
  return sub_100160000((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100160000(void (*a1)(void))
{
  return swift_deallocObject(v1, 80LL, 7LL);
}

uint64_t sub_100160040()
{
  uint64_t v2 = v0 + 32;
  uint64_t v3 = *(void *)(v0 + 72);
  unint64_t v4 = (void *)swift_task_alloc(dword_1009A2BC4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_100015D58;
  v4[2] = v2;
  void v4[3] = v3;
  return swift_task_switch(sub_10015E2D8, 0LL, 0LL);
}

uint64_t sub_1001600A4()
{
  uint64_t v1 = type metadata accessor for MessagingMessageContext(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 104) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100016F9C(*(void *)(v0 + 80), *(void *)(v0 + 88));
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v4;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v0 + v4, 1LL, v7);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  if (!v9) {
    v10(v0 + v4, v7);
  }
  v10(v6 + *(int *)(v1 + 20), v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v6 + *(int *)(v1 + 44);
  uint64_t v12 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(v11, v12);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1001601E0()
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for MessagingMessageContext(0LL) - 8) + 80LL);
  __int128 v15 = *(_OWORD *)(v0 + 16);
  uint64_t v14 = *(void *)(v0 + 32);
  char v3 = *(_BYTE *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v5 = *(void *)(v0 + 56);
  char v6 = *(_BYTE *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 72);
  uint64_t v8 = *(void *)(v0 + 80);
  uint64_t v10 = *(void *)(v0 + 88);
  uint64_t v9 = *(void *)(v0 + 96);
  uint64_t v11 = v0 + ((v2 + 104) & ~v2);
  uint64_t v12 = swift_task_alloc(dword_1009A2BDC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v12;
  *(void *)uint64_t v12 = v1;
  *(void *)(v12 + 8) = sub_100015D58;
  *(void *)(v12 + 80) = v9;
  *(void *)(v12 + 88) = v11;
  *(void *)(v12 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v8;
  *(void *)(v12 + 72) = v10;
  *(_BYTE *)(v12 + 113) = v6;
  *(void *)(v12 + 48) = v5;
  *(void *)(v12 + 56) = v7;
  *(_BYTE *)(v12 + 112) = v3;
  *(void *)(v12 + 32) = v14;
  *(void *)(v12 + 40) = v4;
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = v15;
  return swift_task_switch(sub_10015D550, 0LL, 0LL);
}

uint64_t sub_1001602BC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(v2 + 32);
  uint64_t v8 = *(void *)(v2 + 48);
  uint64_t v9 = *(void *)(v2 + 56);
  char v10 = *(_BYTE *)(v2 + 40);
  uint64_t v11 = (void *)swift_task_alloc(dword_1009A2BEC);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v11;
  *uint64_t v11 = v3;
  v11[1] = sub_100015D58;
  return sub_10015D694(a1, a2, v5, v6, v7, v10, v8, v9);
}

uint64_t sub_100160388()
{
  uint64_t v1 = type metadata accessor for MessagingMessageContext(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 152) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_unknownObjectRelease(*((void *)v0 + 2));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)v0 + 4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100016F9C(*((void *)v0 + 16), *((void *)v0 + 17));
  swift_bridgeObjectRelease();
  uint64_t v6 = &v0[v4];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  int v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(&v0[v4], 1LL, v7);
  char v10 = *(void (**)(char *, uint64_t))(v8 + 8);
  if (!v9) {
    v10(&v0[v4], v7);
  }
  v10(&v6[*(int *)(v1 + 20)], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = &v6[*(int *)(v1 + 44)];
  uint64_t v12 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8LL))(v11, v12);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1001604CC()
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for MessagingMessageContext(0LL) - 8) + 80LL);
  uint64_t v3 = v0 + 32;
  char v4 = *(_BYTE *)(v0 + 88);
  __int128 v12 = *(_OWORD *)(v0 + 96);
  __int128 v13 = *(_OWORD *)(v0 + 72);
  char v5 = *(_BYTE *)(v0 + 112);
  __int128 v11 = *(_OWORD *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 136);
  uint64_t v7 = *(void *)(v0 + 144);
  uint64_t v8 = v0 + ((v2 + 152) & ~v2);
  uint64_t v9 = swift_task_alloc(dword_1009A2BFC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v9;
  *(void *)uint64_t v9 = v1;
  *(void *)(v9 + 8) = sub_100015D58;
  *(void *)(v9 + 80) = v7;
  *(void *)(v9 + 88) = v8;
  *(void *)(v9 + 72) = v6;
  *(_OWORD *)(v9 + 56) = v11;
  *(_BYTE *)(v9 + 105) = v5;
  *(_OWORD *)(v9 + 40) = v12;
  *(_BYTE *)(v9 + 10_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v4;
  *(_OWORD *)(v9 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v13;
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v3;
  return swift_task_switch(sub_10015DC70, 0LL, 0LL);
}

uint64_t sub_1001605A8()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 16));
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(void *)(v0 + v6 + 16));
  return swift_deallocObject(v0, v6 + 24, v5);
}

uint64_t sub_100160644()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  __int128 v12 = *(_OWORD *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = v0 + v3;
  unint64_t v6 = (char *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  char v7 = *v6;
  uint64_t v8 = *((void *)v6 + 1);
  uint64_t v9 = *((void *)v6 + 2);
  uint64_t v10 = swift_task_alloc(dword_1009A2C14);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v10;
  *(void *)uint64_t v10 = v1;
  *(void *)(v10 + 8) = sub_100015D58;
  *(void *)(v10 + 48) = v8;
  *(void *)(v10 + 56) = v9;
  *(_BYTE *)(v10 + 80) = v7;
  *(void *)(v10 + 32) = v4;
  *(void *)(v10 + 40) = v5;
  *(_OWORD *)(v10 + swift_weakDestroy(v0 + 16) = v12;
  return swift_task_switch(sub_10015CDF4, 0LL, 0LL);
}

uint64_t sub_100160704(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v8 = *(void *)(v2 + 32);
  uint64_t v9 = *(void *)(v2 + 40);
  uint64_t v10 = *(void *)(v2 + 56);
  char v11 = *(_BYTE *)(v2 + 48);
  __int128 v12 = (void *)swift_task_alloc(dword_1009A2C24);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v12;
  *__int128 v12 = v3;
  v12[1] = sub_100015D58;
  return sub_10015CF04(a1, a2, v6, v7, v8, v9, v11, v10);
}

uint64_t sub_1001607A8()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 88) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 24;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 32));
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10016084C()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 88LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0 + 32;
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v6 = *(void *)(v0 + 80);
  uint64_t v7 = v0 + v3;
  uint64_t v8 = (char *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  char v9 = *v8;
  uint64_t v10 = *((void *)v8 + 1);
  uint64_t v11 = *((void *)v8 + 2);
  uint64_t v12 = swift_task_alloc(dword_1009A2C34);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v12;
  *(void *)uint64_t v12 = v1;
  *(void *)(v12 + 8) = sub_100015D58;
  *(void *)(v12 + 48) = v10;
  *(void *)(v12 + 56) = v11;
  *(_BYTE *)(v12 + 72) = v9;
  *(void *)(v12 + 32) = v6;
  *(void *)(v12 + 40) = v7;
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = v4;
  *(void *)(v12 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v5;
  return swift_task_switch(sub_10015D488, 0LL, 0LL);
}

void sub_10016090C(uint64_t a1, int a2, void *a3)
{
  uint64_t v32 = a3;
  int v33 = a2;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  char v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v32 - v10;
  uint64_t v12 = sub_100004AEC(&qword_1009A2C48);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_10099E4F8);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess(v3 + 152, v35, 33LL, 0LL);
  sub_10004813C(a1, (uint64_t)v14);
  swift_endAccess(v35);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15) == 1)
  {
    sub_100015794((uint64_t)v14, &qword_1009A2C48);
    if (qword_10099B140 != -1) {
      swift_once(&qword_10099B140, sub_10015C3E4);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    sub_10000A720(v19, (uint64_t)qword_100A2A218);
    uint64_t v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
    unint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.info.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v24 = swift_slowAlloc(32LL, -1LL);
      v35[0] = v24;
      *(_DWORD *)uint64_t v23 = 136446210;
      uint64_t v25 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter(v5, v25);
      uint64_t v34 = sub_1003F11D4(v26, v27, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Untracked identifier: %{public}s", v23, 0xCu);
      swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    if ((v33 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v11, a1, v5);
      CheckedContinuation.resume(returning:)(v11, v15);
    }

    else
    {
      unsigned __int8 v28 = v32;
      if (v32)
      {
        id v29 = v32;
      }

      else
      {
        id v30 = objc_allocWithZone(&OBJC_CLASS___NSError);
        NSString v31 = String._bridgeToObjectiveC()();
        id v29 = [v30 initWithDomain:v31 code:0 userInfo:0];
      }

      v35[0] = (uint64_t)v29;
      swift_errorRetain(v28);
      CheckedContinuation.resume(throwing:)(v35, v15);
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }

uint64_t sub_100160D00()
{
  swift_release(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 40));
  swift_release(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  swift_release(*(void *)(v0 + 64));
  return v0;
}

uint64_t sub_100160D4C()
{
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

uint64_t type metadata accessor for CloudKitIDSUpdateManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd24CloudKitIDSUpdateManager);
}

uint64_t sub_100160D8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100160D98);
}

uint64_t sub_100160D98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_100160E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100160E20);
}

uint64_t sub_100160E20(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for SharedBeaconGroup(uint64_t a1)
{
  uint64_t result = qword_1009A2DE0;
  if (!qword_1009A2DE0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SharedBeaconGroup);
  }
  return result;
}

uint64_t sub_100160ED4(uint64_t a1)
{
  return swift_bridgeObjectRetain(*(void *)(v1 + *(int *)(a1 + 20)));
}

uint64_t sub_100160EE0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 688) = a8;
  *(void *)(v8 + 680) = a7;
  *(void *)(v8 + 672) = a6;
  *(_BYTE *)(v8 + 832) = a5;
  *(void *)(v8 + 66_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = a4;
  *(void *)(v8 + 656) = a3;
  *(void *)(v8 + 648) = a2;
  *(void *)(v8 + 640) = a1;
  uint64_t v9 = type metadata accessor for BeaconIdentifier(0LL);
  *(void *)(v8 + 696) = v9;
  unint64_t v10 = (*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v8 + 70_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = swift_task_alloc(v10);
  *(void *)(v8 + 712) = swift_task_alloc(v10);
  return swift_task_switch(sub_100160F68, 0LL, 0LL);
}

uint64_t sub_100160F68()
{
  unint64_t v1 = *(void *)(v0 + 464);
  if (v1 >> 60 == 15)
  {
    if (qword_10099B4F0 != -1) {
      swift_once(&qword_10099B4F0, sub_1004B82C0);
    }
    uint64_t v2 = type metadata accessor for Logger(0LL);
    uint64_t v3 = sub_10000A720(v2, (uint64_t)qword_100A2AB30);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing primary root key!", v6, 2u);
      swift_slowDealloc(v6, -1LL, -1LL);
    }

    unint64_t v7 = sub_100164C34();
    uint64_t v8 = swift_allocError(&type metadata for LTKGenerator.Error, v7, 0LL, 0LL);
    *uint64_t v9 = 3;
    swift_willThrow(v8);
    goto LABEL_26;
  }

  uint64_t v10 = *(void *)(v0 + 680);
  uint64_t v11 = *(void *)(v0 + 672);
  uint64_t v12 = *(void *)(v0 + 648);
  uint64_t v13 = *(void *)(v0 + 456);
  uint64_t v14 = *(void *)(v0 + 472);
  unint64_t v15 = *(void *)(v0 + 480);
  uint64_t v16 = *(void *)(v0 + 488);
  unint64_t v17 = *(void *)(v0 + 496);
  sub_100164C78(*(void *)(v0 + 656), (void (*)(void))sub_10001736C);
  uint64_t v18 = sub_100479DC4(v12, v11, v10);
  *(void *)(v0 + 720) = v18;
  *(void *)(v0 + 728) = v19;
  *(void *)(v0 + 736) = v20;
  uint64_t v21 = v18;
  unint64_t v22 = v20;
  unint64_t v71 = v15;
  uint64_t v72 = v14;
  unint64_t v74 = v17;
  uint64_t v75 = v0 + 632;
  uint64_t v79 = v19;
  if (qword_10099B4F0 != -1) {
    swift_once(&qword_10099B4F0, sub_1004B82C0);
  }
  uint64_t v23 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 74_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_10000A720(v23, (uint64_t)qword_100A2AB30);
  unint64_t v24 = v22;
  uint64_t v25 = sub_100164D20(v21, v79, v22);
  uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
  os_log_type_t v27 = static os_log_type_t.debug.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    unsigned __int8 v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v70 = v16;
    uint64_t v29 = v13;
    id v30 = v28;
    *(_DWORD *)unsigned __int8 v28 = 134217984;
    if (v24 >> 60 == 15) {
      uint64_t v31 = 0LL;
    }
    else {
      uint64_t v31 = v21;
    }
    *(void *)(v0 + 632) = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v75, v0 + 640, v28 + 4, v28 + 12);
    sub_100164D3C(v21, v79, v24);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Found keyGenerationHint %llu", v30, 0xCu);
    uint64_t v32 = v30;
    uint64_t v13 = v29;
    uint64_t v16 = v70;
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  else
  {
    sub_100164D3C(v21, v79, v24);
  }

  int v33 = *(unsigned __int8 *)(v0 + 832);

  if (v33)
  {
    if (v33 != 1)
    {
      uint64_t v47 = (os_log_s *)Logger.logObject.getter(v34);
      os_log_type_t v48 = static os_log_type_t.error.getter(v47);
      if (os_log_type_enabled(v47, v48))
      {
        int64_t v49 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v50 = swift_slowAlloc(32LL, -1LL);
        uint64_t v80 = v50;
        *(_DWORD *)int64_t v49 = 136315138;
        *(void *)(v0 + 62_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1003F11D4(0xD000000000000010LL, 0x80000001008533C0LL, &v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 624, v75, v49 + 4, v49 + 12);
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "Invalid key sequence %s!", v49, 0xCu);
        swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v50, -1LL, -1LL);
        swift_slowDealloc(v49, -1LL, -1LL);
      }

      uint64_t v40 = *(void *)(v0 + 656);
      unint64_t v51 = sub_100164C34();
      uint64_t v42 = swift_allocError(&type metadata for LTKGenerator.Error, v51, 0LL, 0LL);
      char v44 = 1;
      goto LABEL_25;
    }

    uint64_t v35 = sub_100015750(*(void *)(v0 + 664), v0 + 408, &qword_1009A2E20);
    unint64_t v36 = *(void *)(v0 + 416);
    if (v36 >> 60 == 15)
    {
      uint64_t v37 = (os_log_s *)Logger.logObject.getter(v35);
      os_log_type_t v38 = static os_log_type_t.error.getter(v37);
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v39 = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Missing secondary root key!", v39, 2u);
        swift_slowDealloc(v39, -1LL, -1LL);
      }

      uint64_t v40 = *(void *)(v0 + 656);

      unint64_t v41 = sub_100164C34();
      uint64_t v42 = swift_allocError(&type metadata for LTKGenerator.Error, v41, 0LL, 0LL);
      char v44 = 4;
LABEL_25:
      *uint64_t v43 = v44;
      swift_willThrow(v42);
      sub_100164D3C(v21, v79, v24);
      sub_100164C78(v40, (void (*)(void))sub_100016F9C);
LABEL_26:
      uint64_t v52 = *(void *)(v0 + 704);
      swift_task_dealloc(*(void *)(v0 + 712));
      swift_task_dealloc(v52);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }

    unint64_t v54 = v24;
    unint64_t v77 = *(void *)(v0 + 672);
    uint64_t v55 = *(void *)(v0 + 664);
    uint64_t v56 = *(void *)(v0 + 408);
    uint64_t v57 = *(void *)(v0 + 424);
    unint64_t v58 = *(void *)(v0 + 432);
    uint64_t v59 = *(void *)(v0 + 440);
    unint64_t v73 = *(void *)(v0 + 448);
    sub_100164D20(v21, v79, v54);
    sub_100164C78(v55, (void (*)(void))sub_10001736C);
    sub_10001736C(v57, v58);
    sub_10001736C(v56, v36);
    sub_10001736C(v59, v73);
    sub_10045C258(v57, v58, v56, v36, v59, v73, v21, v79, (uint64_t *)(v0 + 232), v54, v77);
    sub_100164C78(*(void *)(v0 + 664), (void (*)(void))sub_100016F9C);
    uint64_t v46 = (uint64_t *)(v0 + 232);
  }

  else
  {
    unint64_t v45 = v24;
    uint64_t v46 = (uint64_t *)(v0 + 16);
    unint64_t v76 = *(void *)(v0 + 672);
    sub_100164D20(v21, v79, v45);
    sub_10001736C(v72, v71);
    sub_10001736C(v13, v1);
    sub_10001736C(v16, v74);
    sub_10045C258(v72, v71, v13, v1, v16, v74, v21, v79, (uint64_t *)(v0 + 16), v45, v76);
  }

  uint64_t v60 = v46[7];
  *(void *)(v0 + 752) = v60;
  unint64_t v61 = v46[8];
  *(void *)(v0 + 760) = v61;
  uint64_t v62 = v46[6];
  uint64_t v63 = v46[4];
  *(void *)(v0 + 768) = v63;
  unint64_t v64 = v46[5];
  *(void *)(v0 + 776) = v64;
  uint64_t v65 = v46[2];
  *(void *)(v0 + 78_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v65;
  unint64_t v66 = v46[3];
  *(void *)(v0 + 792) = v66;
  uint64_t v67 = *v46;
  unint64_t v68 = v46[1];
  *(void *)(v0 + 800) = v68;
  *(void *)(v0 + 808) = v67;
  *(void *)(v0 + 160) = v67;
  *(void *)(v0 + 168) = v68;
  *(void *)(v0 + 176) = v65;
  *(void *)(v0 + 18_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v66;
  *(void *)(v0 + 192) = v63;
  *(void *)(v0 + 200) = v64;
  *(void *)(v0 + 208) = v62;
  *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = v60;
  *(void *)(v0 + 22_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v61;
  sub_100018BE4(v67, v68);
  sub_10001736C(v65, v66);
  sub_10001736C(v63, v64);
  sub_10001736C(v60, v61);
  unint64_t v78 = (char *)&dword_1009AC1C0 + dword_1009AC1C0;
  uint64_t v69 = (void *)swift_task_alloc(unk_1009AC1C4);
  *(void *)(v0 + 8swift_weakDestroy(v0 + 16) = v69;
  *uint64_t v69 = v0;
  v69[1] = sub_100161728;
  return ((uint64_t (*)(uint64_t, void, void, uint64_t))v78)(v0 + 88, 0LL, 0LL, v0 + 592);
}

uint64_t sub_100161728()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 816LL);
  *(void *)(*(void *)v1 + 824LL) = v0;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10016177C, 0LL, 0LL);
}

void sub_10016177C()
{
  unint64_t v1 = *(void *)(v0 + 104);
  if (v1 >> 60 == 15)
  {
    uint64_t v3 = *(void *)(v0 + 176);
    unint64_t v2 = *(void *)(v0 + 184);
    uint64_t v4 = *(void *)(v0 + 192);
    unint64_t v5 = *(void *)(v0 + 200);
    uint64_t v6 = *(void *)(v0 + 216);
    unint64_t v7 = *(void *)(v0 + 224);
    sub_1000182F0(*(void *)(v0 + 160), *(void *)(v0 + 168));
    sub_100016F9C(v3, v2);
    sub_100016F9C(v4, v5);
    sub_100016F9C(v6, v7);
    uint64_t v144 = 0LL;
    uint64_t v145 = 0LL;
    unint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    unint64_t v10 = 0LL;
    unint64_t v11 = 0xF000000000000000LL;
    goto LABEL_14;
  }

  unint64_t v12 = *(void *)(v0 + 88);
  if (*(void *)(v0 + 736) >> 60 == 15LL) {
    unint64_t v13 = 0LL;
  }
  else {
    unint64_t v13 = *(void *)(v0 + 720);
  }
  BOOL v14 = v12 >= v13;
  unint64_t v15 = v12 - v13;
  if (!v14)
  {
    __break(1u);
    return;
  }

  uint64_t v135 = *(void *)(v0 + 88);
  uint64_t v16 = *(void *)(v0 + 96);
  uint64_t v144 = *(void *)(v0 + 112);
  uint64_t v145 = *(void *)(v0 + 128);
  uint64_t v9 = *(void *)(v0 + 144);
  unint64_t v146 = *(void *)(v0 + 136);
  unint64_t v148 = *(void *)(v0 + 152);
  unint64_t v150 = *(void *)(v0 + 120);
  if (v15 <= *(void *)(v0 + 688))
  {
    uint64_t v138 = *(void *)(v0 + 96);
    uint64_t v35 = *(void *)(v0 + 176);
    unint64_t v34 = *(void *)(v0 + 184);
    uint64_t v36 = *(void *)(v0 + 192);
    unint64_t v37 = *(void *)(v0 + 200);
    uint64_t v38 = *(void *)(v0 + 216);
    unint64_t v39 = *(void *)(v0 + 224);
    sub_1000182F0(*(void *)(v0 + 160), *(void *)(v0 + 168));
    sub_100016F9C(v35, v34);
    sub_100016F9C(v36, v37);
    sub_100016F9C(v38, v39);
    uint64_t v40 = *(void *)(v0 + 824);
  }

  else
  {
    uint64_t v141 = *(void *)(v0 + 144);
    uint64_t v17 = *(void *)(v0 + 824);
    uint64_t v18 = *(void *)(v0 + 680);
    uint64_t v19 = *(void *)(v0 + 648);
    char v20 = *(_BYTE *)(v0 + 832);
    uint64_t v21 = sub_100004AEC(&qword_10099D340);
    uint64_t inited = swift_initStackObject(v21, v0 + 304);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(inited + 32) = v135;
    uint64_t v23 = inited + 32;
    *(void *)(inited + 40) = v16;
    *(void *)(inited + 48) = v1;
    sub_10001736C(v16, v1);
    sub_100475420(v19, v20, inited, v18);
    if (v17)
    {
      unint64_t v116 = *(void *)(v0 + 800);
      uint64_t v118 = *(void *)(v0 + 808);
      uint64_t v120 = *(void *)(v0 + 784);
      unint64_t v122 = *(void *)(v0 + 792);
      uint64_t v124 = *(void *)(v0 + 768);
      unint64_t v126 = *(void *)(v0 + 776);
      uint64_t v129 = *(void *)(v0 + 752);
      unint64_t v132 = *(void *)(v0 + 760);
      unint64_t v24 = *(void *)(v0 + 736);
      uint64_t v25 = *(void *)(v0 + 728);
      uint64_t v26 = *(void *)(v0 + 720);
      uint64_t v27 = *(void *)(v0 + 656);
      swift_setDeallocating(inited);
      swift_arrayDestroy(v23, *(void *)(inited + 16), &type metadata for KeyGenerationHint);
      sub_100164E30(v135, v16, v1, v144, v150, v145, v146, v141, v148);
      sub_100164C78(v27, (void (*)(void))sub_100016F9C);
      sub_100164D3C(v26, v25, v24);
      sub_1000182F0(v118, v116);
      sub_100016F9C(v120, v122);
      sub_100016F9C(v124, v126);
      sub_100016F9C(v129, v132);
      uint64_t v29 = *(void *)(v0 + 176);
      unint64_t v28 = *(void *)(v0 + 184);
      uint64_t v30 = *(void *)(v0 + 192);
      unint64_t v31 = *(void *)(v0 + 200);
      uint64_t v32 = *(void *)(v0 + 216);
      unint64_t v33 = *(void *)(v0 + 224);
      sub_1000182F0(*(void *)(v0 + 160), *(void *)(v0 + 168));
      sub_100016F9C(v29, v28);
      sub_100016F9C(v30, v31);
      sub_100016F9C(v32, v33);
LABEL_24:
      uint64_t v72 = *(void *)(v0 + 704);
      swift_task_dealloc(*(void *)(v0 + 712));
      swift_task_dealloc(v72);
      unint64_t v73 = *(void (**)(void))(v0 + 8);
LABEL_25:
      v73();
      return;
    }

    uint64_t v138 = v16;
    uint64_t v42 = *(void *)(v0 + 176);
    unint64_t v41 = *(void *)(v0 + 184);
    uint64_t v43 = *(void *)(v0 + 192);
    unint64_t v44 = *(void *)(v0 + 200);
    uint64_t v45 = *(void *)(v0 + 216);
    unint64_t v46 = *(void *)(v0 + 224);
    sub_1000182F0(*(void *)(v0 + 160), *(void *)(v0 + 168));
    sub_100016F9C(v42, v41);
    sub_100016F9C(v43, v44);
    sub_100016F9C(v45, v46);
    swift_setDeallocating(inited);
    swift_arrayDestroy(v23, *(void *)(inited + 16), &type metadata for KeyGenerationHint);
    uint64_t v40 = 0LL;
    uint64_t v9 = v141;
  }

  unint64_t v10 = v148;
  unint64_t v8 = v150;
  *(void *)(v0 + 360) = v144;
  *(void *)(v0 + 368) = v150;
  unint64_t v11 = v146;
  *(void *)(v0 + 376) = v145;
  *(void *)(v0 + 38_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v146;
  *(void *)(v0 + 392) = v9;
  *(void *)(v0 + 400) = v148;
  sub_100018BE4(v144, v150);
  sub_10001736C(v145, v146);
  sub_100018BE4(v9, v148);
  sub_100164E30(v135, v138, v1, v144, v150, v145, v146, v9, v148);
  if (v150 >> 60 == 15)
  {
LABEL_14:
    unint64_t v149 = v10;
    unint64_t v151 = v8;
    unint64_t v147 = v11;
    uint64_t v142 = v9;
    uint64_t v47 = sub_100164D58(*(void *)(v0 + 648), *(void *)(v0 + 704));
    os_log_type_t v48 = (os_log_s *)Logger.logObject.getter(v47);
    os_log_type_t v49 = static os_log_type_t.error.getter(v48);
    BOOL v50 = os_log_type_enabled(v48, v49);
    uint64_t v51 = *(void *)(v0 + 704);
    if (v50)
    {
      int v52 = *(unsigned __int8 *)(v0 + 832);
      uint64_t v53 = swift_slowAlloc(32LL, -1LL);
      uint64_t v139 = swift_slowAlloc(64LL, -1LL);
      uint64_t v152 = v139;
      *(_DWORD *)uint64_t v53 = 136446723;
      if (v52) {
        uint64_t v54 = 0x61646E6F6365732ELL;
      }
      else {
        uint64_t v54 = 0x7972616D6972702ELL;
      }
      if (v52) {
        unint64_t v55 = 0xEA00000000007972LL;
      }
      else {
        unint64_t v55 = 0xE800000000000000LL;
      }
      *(void *)(v0 + 568) = sub_1003F11D4(v54, v55, &v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 568, v0 + 576, v53 + 4, v53 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v53 + 12) = 2160;
      *(void *)(v0 + 576) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 576, v0 + 584, v53 + 14, v53 + 22);
      *(_WORD *)(v53 + 22) = 2081;
      uint64_t v56 = type metadata accessor for UUID(0LL);
      uint64_t v57 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v153 = dispatch thunk of CustomStringConvertible.description.getter(v56, v57);
      unint64_t v154 = v58;
      v59._countAndFlagsBits = 47LL;
      v59._object = (void *)0xE100000000000000LL;
      String.append(_:)(v59);
      v60._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v56, v57);
      String.append(_:)(v60);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 58_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1003F11D4(v153, v154, &v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 584, v0 + 592, v53 + 24, v53 + 32);
      swift_bridgeObjectRelease();
      sub_100164D9C(v51);
      _os_log_impl( (void *)&_mh_execute_header,  v48,  v49,  "Failed to generate %{public}s key for %{private,mask.hash}s",  (uint8_t *)v53,  0x20u);
      swift_arrayDestroy(v139, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v139, -1LL, -1LL);
      swift_slowDealloc(v53, -1LL, -1LL);
    }

    else
    {
      sub_100164D9C(*(void *)(v0 + 704));
    }

    uint64_t v61 = *(void *)(v0 + 808);
    unint64_t v62 = *(void *)(v0 + 800);
    unint64_t v63 = *(void *)(v0 + 792);
    uint64_t v64 = *(void *)(v0 + 784);
    unint64_t v65 = *(void *)(v0 + 776);
    uint64_t v66 = *(void *)(v0 + 768);
    unint64_t v67 = *(void *)(v0 + 760);
    uint64_t v68 = *(void *)(v0 + 752);
    uint64_t v130 = *(void *)(v0 + 728);
    unint64_t v133 = *(void *)(v0 + 736);
    uint64_t v127 = *(void *)(v0 + 720);
    uint64_t v136 = *(void *)(v0 + 656);
    unint64_t v69 = sub_100164C34();
    uint64_t v70 = swift_allocError(&type metadata for LTKGenerator.Error, v69, 0LL, 0LL);
    *unint64_t v71 = 0;
    swift_willThrow(v70);
    sub_1000182F0(v61, v62);
    sub_100016F9C(v64, v63);
    sub_100016F9C(v66, v65);
    sub_100016F9C(v68, v67);
    sub_100164DD8(v144, v151, v145, v147, v142, v149);
    sub_100164D3C(v127, v130, v133);
    sub_100164C78(v136, (void (*)(void))sub_100016F9C);
    goto LABEL_24;
  }

  sub_100018BE4(v144, v150);
  sub_10001736C(v145, v146);
  sub_100018BE4(v9, v148);
  sub_100018BE4(v144, v150);
  uint64_t v74 = sub_1004DA048();
  sub_100178C64(6LL, v74, v75);
  uint64_t v137 = v153;
  unint64_t v140 = v154;
  uint64_t v76 = String.utf8Data.getter(0x7463656E6E6F63LL, 0xE700000000000000LL);
  unint64_t v78 = v77;
  sub_10001736C(v144, v150);
  sub_1004DF7EC(v144, v150, v76, v78, 32LL);
  if (!v40)
  {
    uint64_t v81 = v80;
    uint64_t v143 = v79;
    sub_1000182F0(v144, v150);
    sub_1001782BC(v143, v81);
    sub_100016F9C(v76, v78);
    uint64_t v84 = *(void *)(v0 + 712);
    uint64_t v85 = *(void *)(v0 + 672);
    uint64_t v86 = *(void *)(v0 + 648);
    uint64_t v87 = v153;
    unint64_t v88 = v154;
    *(_BYTE *)(v0 + 50_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = *(_BYTE *)(v0 + 832);
    *(void *)(v0 + 512) = v85;
    *(void *)(v0 + 520) = v137;
    *(void *)(v0 + 528) = v140;
    *(void *)(v0 + 536) = v87;
    *(void *)(v0 + 54_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v88;
    sub_100164D58(v86, v84);
    sub_10001736C(v137, v140);
    sub_10001736C(v87, v88);
    sub_10001736C(v137, v140);
    unint64_t v131 = v88;
    uint64_t v134 = v87;
    uint64_t v89 = sub_10001736C(v87, v88);
    uint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
    os_log_type_t v91 = static os_log_type_t.debug.getter(v90);
    BOOL v92 = os_log_type_enabled(v90, v91);
    unint64_t v114 = *(void *)(v0 + 800);
    uint64_t v115 = *(void *)(v0 + 808);
    uint64_t v117 = *(void *)(v0 + 784);
    unint64_t v119 = *(void *)(v0 + 792);
    uint64_t v121 = *(void *)(v0 + 768);
    unint64_t v123 = *(void *)(v0 + 776);
    uint64_t v125 = *(void *)(v0 + 752);
    unint64_t v128 = *(void *)(v0 + 760);
    uint64_t v112 = *(void *)(v0 + 728);
    unint64_t v113 = *(void *)(v0 + 736);
    uint64_t v111 = *(void *)(v0 + 720);
    uint64_t v93 = *(void *)(v0 + 712);
    if (v92)
    {
      os_log_type_t type = v91;
      uint64_t v110 = *(void *)(v0 + 656);
      uint64_t v94 = swift_slowAlloc(22LL, -1LL);
      uint64_t v108 = swift_slowAlloc(64LL, -1LL);
      uint64_t v152 = v108;
      *(_DWORD *)uint64_t v94 = 136315394;
      sub_10001736C(v137, v140);
      sub_10001736C(v134, v131);
      uint64_t v95 = sub_1006E7EF4();
      unint64_t v97 = v96;
      sub_100016F9C(v137, v140);
      sub_100016F9C(v134, v131);
      *(void *)(v0 + 608) = sub_1003F11D4(v95, v97, &v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 608, v0 + 616, v94 + 4, v94 + 12);
      swift_bridgeObjectRelease();
      sub_100016F9C(v137, v140);
      sub_100016F9C(v134, v131);
      sub_100016F9C(v137, v140);
      sub_100016F9C(v134, v131);
      *(_WORD *)(v94 + 12) = 2080;
      uint64_t v98 = type metadata accessor for UUID(0LL);
      uint64_t v99 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v153 = dispatch thunk of CustomStringConvertible.description.getter(v98, v99);
      unint64_t v154 = v100;
      v101._countAndFlagsBits = 47LL;
      v101._object = (void *)0xE100000000000000LL;
      String.append(_:)(v101);
      v102._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v98, v99);
      String.append(_:)(v102);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 6swift_weakDestroy(v0 + 16) = sub_1003F11D4(v153, v154, &v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 616, v0 + 624, v94 + 14, v94 + 22);
      swift_bridgeObjectRelease();
      sub_100164D9C(v93);
      _os_log_impl((void *)&_mh_execute_header, v90, type, "managedKey %s for beacon %s", (uint8_t *)v94, 0x16u);
      swift_arrayDestroy(v108, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v108, -1LL, -1LL);
      swift_slowDealloc(v94, -1LL, -1LL);
      sub_1000182F0(v144, v150);

      sub_1000182F0(v144, v150);
      sub_100016F9C(v145, v146);
      sub_1000182F0(v9, v148);
      sub_100164C78(v110, (void (*)(void))sub_100016F9C);
      sub_100164D3C(v111, v112, v113);
      sub_1000182F0(v144, v150);
      sub_100016F9C(v145, v146);
    }

    else
    {
      uint64_t v103 = *(void *)(v0 + 656);
      sub_1000182F0(v144, v150);

      sub_1000182F0(v144, v150);
      sub_100016F9C(v145, v146);
      sub_1000182F0(v9, v148);
      sub_100164C78(v103, (void (*)(void))sub_100016F9C);
      sub_100164D9C(v93);
      sub_100016F9C(v137, v140);
      sub_100016F9C(v134, v88);
      sub_100016F9C(v137, v140);
      sub_100016F9C(v134, v88);
      sub_100164D3C(v111, v112, v113);
      sub_1000182F0(v144, v150);
      sub_100016F9C(v145, v146);
    }

    sub_1000182F0(v9, v148);
    sub_1000182F0(v115, v114);
    sub_100016F9C(v117, v119);
    sub_100016F9C(v121, v123);
    sub_100016F9C(v125, v128);
    uint64_t v104 = *(void *)(v0 + 704);
    uint64_t v105 = *(void *)(v0 + 672);
    char v106 = *(_BYTE *)(v0 + 832);
    uint64_t v107 = *(void *)(v0 + 640);
    swift_task_dealloc(*(void *)(v0 + 712));
    swift_task_dealloc(v104);
    *(_BYTE *)uint64_t v107 = v106;
    *(void *)(v107 + 8) = v105;
    *(void *)(v107 + swift_weakDestroy(v0 + 16) = v137;
    *(void *)(v107 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v140;
    *(void *)(v107 + 32) = v134;
    *(void *)(v107 + 40) = v131;
    unint64_t v73 = *(void (**)(void))(v0 + 8);
    goto LABEL_25;
  }

  sub_100016F9C(v76, v78);
  sub_1000182F0(v144, v150);
  uint64_t v153 = 0LL;
  unint64_t v154 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(35LL);
  *(void *)(v0 + 552) = 0LL;
  *(void *)(v0 + 560) = 0xE000000000000000LL;
  v82._object = (void *)0x8000000100855F00LL;
  v82._countAndFlagsBits = 0xD000000000000021LL;
  String.append(_:)(v82);
  *(void *)(v0 + 600) = v40;
  uint64_t v83 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  _print_unlocked<A, B>(_:_:)( v0 + 600,  v0 + 552,  v83,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  *(void *)(v0 + 552),  *(void *)(v0 + 560),  "searchpartyd/KeyRepresentable.swift",  35LL,  2LL,  423LL,  0);
}

uint64_t sub_1001624C8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 720) = a7;
  *(void *)(v7 + 712) = a6;
  *(_BYTE *)(v7 + 973) = a5;
  *(void *)(v7 + 70_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = a4;
  *(_BYTE *)(v7 + 972) = a3;
  *(void *)(v7 + 696) = a2;
  *(void *)(v7 + 688) = a1;
  sub_100015750(a2, v7 + 216, &qword_1009A2E20);
  __int128 v8 = *(_OWORD *)(v7 + 232);
  *(_OWORD *)(v7 + 728) = *(_OWORD *)(v7 + 216);
  *(_OWORD *)(v7 + 74_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v8;
  *(_OWORD *)(v7 + 760) = *(_OWORD *)(v7 + 248);
  uint64_t v9 = type metadata accessor for BeaconIdentifier(0LL);
  *(void *)(v7 + 776) = v9;
  unint64_t v10 = (*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v7 + 78_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = swift_task_alloc(v10);
  *(void *)(v7 + 792) = swift_task_alloc(v10);
  uint64_t v11 = type metadata accessor for Connection.TransactionMode(0LL);
  *(void *)(v7 + 800) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v7 + 808) = v12;
  *(void *)(v7 + 8swift_weakDestroy(v0 + 16) = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1001625A4, 0LL, 0LL);
}

uint64_t sub_1001625A4()
{
  unint64_t v1 = *(void *)(v0 + 320);
  if (v1 >> 60 == 15)
  {
    if (qword_10099B4F0 != -1) {
      swift_once(&qword_10099B4F0, sub_1004B82C0);
    }
    uint64_t v2 = type metadata accessor for Logger(0LL);
    uint64_t v3 = sub_10000A720(v2, (uint64_t)qword_100A2AB30);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing primary root key!", v6, 2u);
      swift_slowDealloc(v6, -1LL, -1LL);
    }

    unint64_t v7 = sub_100164C34();
    uint64_t v8 = swift_allocError(&type metadata for LTKGenerator.Error, v7, 0LL, 0LL);
    *uint64_t v9 = 3;
    swift_willThrow(v8);
    goto LABEL_29;
  }

  uint64_t v10 = *(void *)(v0 + 312);
  uint64_t v11 = *(void *)(v0 + 328);
  unint64_t v12 = *(void *)(v0 + 336);
  uint64_t v14 = *(void *)(v0 + 344);
  unint64_t v13 = *(void *)(v0 + 352);
  if (!*(_BYTE *)(v0 + 972))
  {
LABEL_18:
    unint64_t v16 = *(void *)(v0 + 704);
    unint64_t v19 = v16 + 96;
    if (v16 < 0xFFFFFFFFFFFFFFA0LL) {
      goto LABEL_19;
    }
    __break(1u);
    goto LABEL_31;
  }

  if (*(_BYTE *)(v0 + 972) == 1)
  {
    unint64_t v15 = *(void *)(v0 + 704);
    if (!v15)
    {
      unint64_t v44 = *(void *)(v0 + 768);
      uint64_t v45 = *(void *)(v0 + 760);
      unint64_t v46 = *(void *)(v0 + 752);
      uint64_t v47 = *(void *)(v0 + 744);
      sub_10001736C(*(void *)(v0 + 728), *(void *)(v0 + 736));
      sub_10001736C(v47, v46);
      sub_10001736C(v45, v44);
      if (qword_10099B4F0 == -1)
      {
LABEL_25:
        uint64_t v48 = type metadata accessor for Logger(0LL);
        uint64_t v49 = sub_10000A720(v48, (uint64_t)qword_100A2AB30);
        BOOL v50 = (os_log_s *)Logger.logObject.getter(v49);
        os_log_type_t v51 = static os_log_type_t.error.getter(v50);
        if (os_log_type_enabled(v50, v51))
        {
          int v52 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)int v52 = 0;
          _os_log_impl((void *)&_mh_execute_header, v50, v51, "Secondary index should never be 0!", v52, 2u);
          swift_slowDealloc(v52, -1LL, -1LL);
        }

        uint64_t v36 = *(void *)(v0 + 696);

        unint64_t v53 = sub_100164C34();
        uint64_t v38 = swift_allocError(&type metadata for LTKGenerator.Error, v53, 0LL, 0LL);
        char v40 = 2;
        goto LABEL_28;
      }

uint64_t sub_100162BEC()
{
  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    unint64_t v1 = sub_100162F08;
  }

  else
  {
    uint64_t v23 = (_OWORD *)(v0 + 264);
    uint64_t v21 = v0;
    uint64_t v4 = *(void *)(v0 + 144);
    uint64_t v3 = v0 + 144;
    uint64_t v2 = v4;
    uint64_t v5 = *(void *)(v3 + 688);
    if (*(void *)(v3 + 704) >> 60 == 15LL) {
      uint64_t v5 = 0LL;
    }
    *(_DWORD *)(v3 + 82_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = enum case for Connection.TransactionMode.deferred(_:);
    uint64_t v22 = *(void *)(v3 + 712);
    *(void *)(v3 + 720) = v5;
    uint64_t v6 = *(void *)(v3 - 56);
    unint64_t v7 = *(void *)(v3 - 48);
    uint64_t v8 = *(void *)(v3 - 40);
    unint64_t v9 = *(void *)(v3 - 32);
    uint64_t v11 = *(void *)(v3 - 24);
    unint64_t v10 = *(void *)(v3 - 16);
    *(void *)(v3 + 728) = *(void *)(v3 - 8);
    *(void *)(v3 + 736) = v2;
    unint64_t v12 = *(void *)(v3 + 8);
    *(void *)(v3 + 74_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v12;
    sub_10001736C(v2, v12);
    sub_10001736C(v2, v12);
    sub_100018BE4(v6, v7);
    sub_10001736C(v8, v9);
    sub_10001736C(v11, v10);
    sub_10001736C(v2, v12);
    sub_100018BE4(v6, v7);
    sub_10001736C(v8, v9);
    sub_1004DB8E0(v6, v7, v8, v9, v2, v12, 1, (void *)(v3 - 8), v23, (uint64_t *)v3);
    *(void *)(v3 + 752) = v22;
    if (v22)
    {
      sub_100016F9C(v2, v12);
      sub_100016F9C(v2, v12);
      sub_100016F9C(v8, v9);
      sub_1000182F0(v6, v7);
      sub_1000182F0(v6, v7);
      sub_100016F9C(v8, v9);
      sub_100016F9C(v11, v10);
      uint64_t v13 = sub_100016F9C(v2, v12);
      uint64_t v14 = static os_log_type_t.error.getter(v13);
      if (qword_10099B520 != -1) {
        swift_once(&qword_10099B520, sub_1004DC610);
      }
      uint64_t v15 = qword_100A2AC90;
      uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
      *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v18 = _convertErrorToNSError(_:)(v22);
      *(void *)(v17 + 56) = sub_100164EAC();
      *(void *)(v17 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_100007864( (unint64_t *)&qword_1009AC180,  (uint64_t (*)(uint64_t))sub_100164EAC,  (uint64_t)&protocol conformance descriptor for NSObject);
      *(void *)(v17 + 32) = v18;
      os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "Error in TokenAsyncSequence: %@", 31LL, 2LL, v17);
      swift_bridgeObjectRelease();
      swift_errorRelease(v22);
      unint64_t v1 = sub_1001650F4;
    }

    else
    {
      *(void *)(v21 + 90_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = *(void *)(v21 + 264);
      __int128 v19 = *(_OWORD *)(v21 + 288);
      *(_OWORD *)(v21 + 912) = *(_OWORD *)(v21 + 272);
      *(_OWORD *)(v21 + 928) = v19;
      *(void *)(v21 + 94_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = *(void *)(v21 + 304);
      sub_100016F9C(v2, v12);
      sub_100016F9C(v8, v9);
      sub_1000182F0(v6, v7);
      sub_1000182F0(v6, v7);
      sub_100016F9C(v8, v9);
      sub_100016F9C(v11, v10);
      sub_100016F9C(v2, v12);
      unint64_t v1 = sub_100163690;
    }
  }

  return swift_task_switch(v1, 0LL, 0LL);
}

uint64_t sub_100162F08()
{
  uint64_t v2 = *(void *)(v0 + 104);
  unint64_t v1 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 120);
  unint64_t v4 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 144);
  unint64_t v6 = *(void *)(v0 + 152);
  sub_1000182F0(*(void *)(v0 + 88), *(void *)(v0 + 96));
  sub_100016F9C(v2, v1);
  sub_100016F9C(v3, v4);
  sub_100016F9C(v5, v6);
  unint64_t v7 = &off_10099B000;
  if (!*(void *)(*(void *)(v0 + 664) + 16LL))
  {
    char v8 = *(_BYTE *)(v0 + 973);
    uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v10 = swift_allocObject(v9, 72LL, 7LL);
    *(_OWORD *)(v10 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v10 + 56) = &type metadata for UInt8;
    *(void *)(v10 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = &protocol witness table for UInt8;
    *(_BYTE *)(v10 + 32) = v8;
    uint64_t v11 = String.init(format:_:)(1479684133LL, 0xE400000000000000LL, v10);
    unint64_t v13 = v12;
    if (qword_10099B4F0 != -1) {
      swift_once(&qword_10099B4F0, sub_1004B82C0);
    }
    uint64_t v14 = *(void *)(v0 + 792);
    uint64_t v15 = *(void *)(v0 + 688);
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_10000A720(v16, (uint64_t)qword_100A2AB30);
    sub_100164D58(v15, v14);
    swift_bridgeObjectRetain(v13);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      os_log_type_t v66 = v19;
      uint64_t v63 = v11;
      int v20 = *(unsigned __int8 *)(v0 + 972);
      uint64_t v21 = swift_slowAlloc(52LL, -1LL);
      uint64_t v64 = swift_slowAlloc(96LL, -1LL);
      uint64_t v68 = v64;
      *(_DWORD *)uint64_t v21 = 136316163;
      unint64_t v22 = 0xEA00000000007972LL;
      unint64_t v23 = 0x61646E6F6365732ELL;
      if (v20 != 1)
      {
        unint64_t v23 = 0xD000000000000010LL;
        unint64_t v22 = 0x80000001008533C0LL;
      }

      if (v20) {
        uint64_t v24 = v23;
      }
      else {
        uint64_t v24 = 0x7972616D6972702ELL;
      }
      if (v20) {
        unint64_t v25 = v22;
      }
      else {
        unint64_t v25 = 0xE800000000000000LL;
      }
      uint64_t v26 = *(void *)(v0 + 792);
      uint64_t v27 = *(void *)(v0 + 704);
      *(void *)(v0 + 632) = sub_1003F11D4(v24, v25, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 632, v0 + 640, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 12) = 2048;
      *(void *)(v0 + 680) = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 680, v0 + 688, v21 + 14, v21 + 22);
      *(_WORD *)(v21 + 22) = 2080;
      swift_bridgeObjectRetain(v13);
      *(void *)(v0 + 6swift_weakDestroy(v0 + 16) = sub_1003F11D4(v63, v13, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 616, v0 + 624, v21 + 24, v21 + 32);
      swift_bridgeObjectRelease_n(v13, 3LL);
      *(_WORD *)(v21 + 32) = 2160;
      *(void *)(v0 + 600) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 600, v0 + 608, v21 + 34, v21 + 42);
      *(_WORD *)(v21 + 42) = 2081;
      uint64_t v28 = type metadata accessor for UUID(0LL);
      uint64_t v29 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter(v28, v29);
      unint64_t v70 = v30;
      v31._countAndFlagsBits = 47LL;
      v31._object = (void *)0xE100000000000000LL;
      String.append(_:)(v31);
      v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v28, v29);
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 58_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1003F11D4(v69, v70, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 584, v0 + 592, v21 + 44, v21 + 52);
      swift_bridgeObjectRelease();
      sub_100164D9C(v26);
      _os_log_impl( (void *)&_mh_execute_header,  v18,  v66,  "No match for sequence %s index %llu hint %s %{private,mask.hash}s",  (uint8_t *)v21,  0x34u);
      swift_arrayDestroy(v64, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);

      unint64_t v7 = &off_10099B000;
    }

    else
    {
      uint64_t v33 = *(void *)(v0 + 792);
      swift_bridgeObjectRelease_n(v13, 2LL);
      sub_100164D9C(v33);
    }
  }

  uint64_t v34 = v0 + 664;
  if (v7[158] != (_UNKNOWN *)-1LL) {
    swift_once(&qword_10099B4F0, sub_1004B82C0);
  }
  uint64_t v35 = *(void *)(v0 + 784);
  uint64_t v36 = *(void *)(v0 + 688);
  uint64_t v37 = type metadata accessor for Logger(0LL);
  sub_10000A720(v37, (uint64_t)qword_100A2AB30);
  uint64_t v38 = sub_100164D58(v36, v35);
  unint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
  os_log_type_t v40 = static os_log_type_t.debug.getter(v39);
  BOOL v41 = os_log_type_enabled(v39, v40);
  unint64_t v42 = *(void *)(v0 + 848);
  uint64_t v43 = *(void *)(v0 + 840);
  uint64_t v44 = *(void *)(v0 + 832);
  uint64_t v45 = *(void *)(v0 + 784);
  if (v41)
  {
    uint64_t v67 = *(void *)(v0 + 696);
    unint64_t v65 = *(void *)(v0 + 848);
    uint64_t v46 = swift_slowAlloc(22LL, -1LL);
    uint64_t v62 = swift_slowAlloc(64LL, -1LL);
    uint64_t v68 = v62;
    *(_DWORD *)uint64_t v46 = 136315394;
    swift_beginAccess(v0 + 664, v0 + 360, 0LL, 0LL);
    swift_bridgeObjectRetain(*(void *)(v0 + 664));
    uint64_t v48 = Array.description.getter(v47, &type metadata for ManagedCBPeripheralKeys);
    unint64_t v50 = v49;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 656) = sub_1003F11D4(v48, v50, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 656, v0 + 664, v46 + 4, v46 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v46 + 12) = 2080;
    uint64_t v51 = type metadata accessor for UUID(0LL);
    uint64_t v52 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter(v51, v52);
    unint64_t v70 = v53;
    v54._countAndFlagsBits = 47LL;
    v54._object = (void *)0xE100000000000000LL;
    String.append(_:)(v54);
    uint64_t v55 = v52;
    uint64_t v34 = v0 + 664;
    v56._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v51, v55);
    String.append(_:)(v56);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 648) = sub_1003F11D4(v69, v70, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 648, v0 + 656, v46 + 14, v46 + 22);
    swift_bridgeObjectRelease();
    sub_100164D9C(v45);
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "primaryKeys: %s for beacon %s", (uint8_t *)v46, 0x16u);
    swift_arrayDestroy(v62, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v62, -1LL, -1LL);
    swift_slowDealloc(v46, -1LL, -1LL);
    sub_100164EE8( (void *)(v0 + 16),  (void (*)(void, void))sub_1000182F0,  (void (*)(uint64_t, uint64_t))sub_100016F9C);

    sub_100164C78(v67, (void (*)(void))sub_100016F9C);
    sub_100164D3C(v44, v43, v65);
  }

  else
  {
    sub_100164C78(*(void *)(v0 + 696), (void (*)(void))sub_100016F9C);
    sub_100164D3C(v44, v43, v42);
    sub_100164D9C(v45);
    sub_100164EE8( (void *)(v0 + 16),  (void (*)(void, void))sub_1000182F0,  (void (*)(uint64_t, uint64_t))sub_100016F9C);
  }

  uint64_t v57 = *(void *)(v0 + 816);
  uint64_t v58 = *(void *)(v0 + 792);
  uint64_t v59 = *(void *)(v0 + 784);
  swift_beginAccess(v34, v0 + 384, 0LL, 0LL);
  uint64_t v60 = *(void *)(v0 + 664);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v60);
}

uint64_t sub_100163690()
{
  unint64_t v1 = *(void *)(v0 + 872);
  uint64_t v135 = (void *)(v0 + 592);
  uint64_t v138 = v0 + 608;
  if (v1 >= *(void *)(v0 + 824))
  {
    uint64_t v139 = (void *)(v0 + 16);
    uint64_t v128 = *(void *)(v0 + 936);
    unint64_t v133 = *(void *)(v0 + 944);
    uint64_t v120 = *(void *)(v0 + 920);
    unint64_t v124 = *(void *)(v0 + 928);
    unint64_t v118 = *(void *)(v0 + 912);
    uint64_t v17 = *(void *)(v0 + 904);
    unint64_t v18 = *(void *)(v0 + 888);
    uint64_t v19 = *(void *)(v0 + 880);
    uint64_t v21 = *(void *)(v0 + 104);
    unint64_t v20 = *(void *)(v0 + 112);
    uint64_t v22 = *(void *)(v0 + 120);
    unint64_t v23 = *(void *)(v0 + 128);
    uint64_t v24 = *(void *)(v0 + 144);
    unint64_t v25 = *(void *)(v0 + 152);
    sub_1000182F0(*(void *)(v0 + 88), *(void *)(v0 + 96));
    sub_100016F9C(v21, v20);
    sub_100016F9C(v22, v23);
    sub_100016F9C(v24, v25);
    sub_100016F9C(v19, v18);
    sub_1000182F0(v17, v118);
    sub_100016F9C(v120, v124);
    sub_1000182F0(v128, v133);
    uint64_t v26 = &off_10099B000;
    if (!*(void *)(*(void *)(v0 + 664) + 16LL))
    {
      char v27 = *(_BYTE *)(v0 + 973);
      uint64_t v28 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v29 = swift_allocObject(v28, 72LL, 7LL);
      *(_OWORD *)(v29 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      *(void *)(v29 + 56) = &type metadata for UInt8;
      *(void *)(v29 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = &protocol witness table for UInt8;
      *(_BYTE *)(v29 + 32) = v27;
      uint64_t v30 = String.init(format:_:)(1479684133LL, 0xE400000000000000LL, v29);
      unint64_t v32 = v31;
      if (qword_10099B4F0 != -1) {
        swift_once(&qword_10099B4F0, sub_1004B82C0);
      }
      uint64_t v33 = *(void *)(v0 + 792);
      uint64_t v34 = *(void *)(v0 + 688);
      uint64_t v35 = type metadata accessor for Logger(0LL);
      sub_10000A720(v35, (uint64_t)qword_100A2AB30);
      sub_100164D58(v34, v33);
      swift_bridgeObjectRetain(v32);
      uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
      os_log_type_t v38 = static os_log_type_t.error.getter(v37);
      if (os_log_type_enabled(v37, v38))
      {
        os_log_type_t v134 = v38;
        int v39 = *(unsigned __int8 *)(v0 + 972);
        uint64_t v40 = swift_slowAlloc(52LL, -1LL);
        uint64_t v129 = swift_slowAlloc(96LL, -1LL);
        uint64_t v140 = v129;
        *(_DWORD *)uint64_t v40 = 136316163;
        unint64_t v41 = 0xEA00000000007972LL;
        unint64_t v42 = 0x61646E6F6365732ELL;
        if (v39 != 1)
        {
          unint64_t v42 = 0xD000000000000010LL;
          unint64_t v41 = 0x80000001008533C0LL;
        }

        if (v39) {
          uint64_t v43 = v42;
        }
        else {
          uint64_t v43 = 0x7972616D6972702ELL;
        }
        if (v39) {
          unint64_t v44 = v41;
        }
        else {
          unint64_t v44 = 0xE800000000000000LL;
        }
        uint64_t v45 = *(void *)(v0 + 792);
        uint64_t v46 = *(void *)(v0 + 704);
        *(void *)(v0 + 632) = sub_1003F11D4(v43, v44, &v140);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 632, v0 + 640, v40 + 4, v40 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v40 + 12) = 2048;
        *(void *)(v0 + 680) = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 680, v0 + 688, v40 + 14, v40 + 22);
        *(_WORD *)(v40 + 22) = 2080;
        swift_bridgeObjectRetain(v32);
        *(void *)(v0 + 6swift_weakDestroy(v0 + 16) = sub_1003F11D4(v30, v32, &v140);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 616, v0 + 624, v40 + 24, v40 + 32);
        swift_bridgeObjectRelease_n(v32, 3LL);
        *(_WORD *)(v40 + 32) = 2160;
        *(void *)(v0 + 600) = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 600, v138, v40 + 34, v40 + 42);
        *(_WORD *)(v40 + 42) = 2081;
        uint64_t v47 = type metadata accessor for UUID(0LL);
        uint64_t v48 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v141 = dispatch thunk of CustomStringConvertible.description.getter(v47, v48);
        unint64_t v142 = v49;
        v50._countAndFlagsBits = 47LL;
        v50._object = (void *)0xE100000000000000LL;
        String.append(_:)(v50);
        v51._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v47, v48);
        String.append(_:)(v51);
        swift_bridgeObjectRelease();
        *(void *)(v0 + 58_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1003F11D4(v141, v142, &v140);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 584, v135, v40 + 44, v40 + 52);
        swift_bridgeObjectRelease();
        sub_100164D9C(v45);
        _os_log_impl( (void *)&_mh_execute_header,  v37,  v134,  "No match for sequence %s index %llu hint %s %{private,mask.hash}s",  (uint8_t *)v40,  0x34u);
        swift_arrayDestroy(v129, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v129, -1LL, -1LL);
        swift_slowDealloc(v40, -1LL, -1LL);

        uint64_t v26 = &off_10099B000;
      }

      else
      {
        uint64_t v71 = *(void *)(v0 + 792);
        swift_bridgeObjectRelease_n(v32, 2LL);
        sub_100164D9C(v71);
      }
    }

    uint64_t v138 = v0 + 664;
    if (v26[158] == (_UNKNOWN *)-1LL) {
      goto LABEL_28;
    }
    goto LABEL_36;
  }

  unint64_t v2 = *(void *)(v0 + 864);
  if (v1 < v2)
  {
    __break(1u);
LABEL_36:
    swift_once(&qword_10099B4F0, sub_1004B82C0);
LABEL_28:
    uint64_t v72 = *(void *)(v0 + 784);
    uint64_t v73 = *(void *)(v0 + 688);
    uint64_t v74 = type metadata accessor for Logger(0LL);
    sub_10000A720(v74, (uint64_t)qword_100A2AB30);
    uint64_t v75 = sub_100164D58(v73, v72);
    uint64_t v76 = (os_log_s *)Logger.logObject.getter(v75);
    os_log_type_t v77 = static os_log_type_t.debug.getter(v76);
    BOOL v78 = os_log_type_enabled(v76, v77);
    unint64_t v79 = *(void *)(v0 + 848);
    uint64_t v80 = *(void *)(v0 + 840);
    uint64_t v81 = *(void *)(v0 + 832);
    uint64_t v82 = *(void *)(v0 + 784);
    if (v78)
    {
      uint64_t v136 = *(void *)(v0 + 696);
      uint64_t v83 = swift_slowAlloc(22LL, -1LL);
      uint64_t v121 = swift_slowAlloc(64LL, -1LL);
      uint64_t v140 = v121;
      *(_DWORD *)uint64_t v83 = 136315394;
      swift_beginAccess(v138, v0 + 360, 0LL, 0LL);
      swift_bridgeObjectRetain(*(void *)(v0 + 664));
      uint64_t v125 = v80;
      unint64_t v130 = v79;
      uint64_t v85 = Array.description.getter(v84, &type metadata for ManagedCBPeripheralKeys);
      unint64_t v87 = v86;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 656) = sub_1003F11D4(v85, v87, &v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 656, v138, v83 + 4, v83 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v83 + 12) = 2080;
      uint64_t v88 = type metadata accessor for UUID(0LL);
      uint64_t v89 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v141 = dispatch thunk of CustomStringConvertible.description.getter(v88, v89);
      unint64_t v142 = v90;
      v91._countAndFlagsBits = 47LL;
      v91._object = (void *)0xE100000000000000LL;
      String.append(_:)(v91);
      v92._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v88, v89);
      String.append(_:)(v92);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 648) = sub_1003F11D4(v141, v142, &v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 648, v0 + 656, v83 + 14, v83 + 22);
      swift_bridgeObjectRelease();
      sub_100164D9C(v82);
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "primaryKeys: %s for beacon %s", (uint8_t *)v83, 0x16u);
      swift_arrayDestroy(v121, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v121, -1LL, -1LL);
      swift_slowDealloc(v83, -1LL, -1LL);
      sub_100164EE8( v139,  (void (*)(void, void))sub_1000182F0,  (void (*)(uint64_t, uint64_t))sub_100016F9C);

      sub_100164C78(v136, (void (*)(void))sub_100016F9C);
      sub_100164D3C(v81, v125, v130);
    }

    else
    {
      sub_100164C78(*(void *)(v0 + 696), (void (*)(void))sub_100016F9C);
      sub_100164D3C(v81, v80, v79);
      sub_100164D9C(v82);
      sub_100164EE8( v139,  (void (*)(void, void))sub_1000182F0,  (void (*)(uint64_t, uint64_t))sub_100016F9C);
    }

    uint64_t v93 = *(void *)(v0 + 816);
    uint64_t v94 = *(void *)(v0 + 792);
    uint64_t v95 = *(void *)(v0 + 784);
    swift_beginAccess(v138, v0 + 384, 0LL, 0LL);
    uint64_t v96 = *(void *)(v0 + 664);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v96);
  }

  if (v1 - v2 <= *(void *)(v0 + 720))
  {
    uint64_t v16 = *(void *)(v0 + 896);
  }

  else
  {
    unint64_t v3 = *(void *)(v0 + 888);
    uint64_t v4 = *(void *)(v0 + 880);
    uint64_t v5 = sub_100004AEC(&qword_10099D340);
    uint64_t inited = swift_initStackObject(v5, v0 + 160);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(inited + 32) = v1;
    uint64_t v132 = inited + 32;
    *(void *)(inited + 40) = v4;
    *(void *)(inited + 48) = v3;
    sub_10001736C(v4, v3);
    uint64_t v7 = sub_100474DE0();
    if (!v7)
    {
      unint64_t v97 = sub_100086500();
      uint64_t v98 = swift_allocError(&type metadata for DatabaseError, v97, 0LL, 0LL);
      *(_DWORD *)uint64_t v99 = 2;
      *(_BYTE *)(v99 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 1;
      swift_willThrow(v98);
      goto LABEL_33;
    }

    uint64_t v8 = v7;
    uint64_t v127 = *(void *)(v0 + 896);
    unsigned int v123 = *(_DWORD *)(v0 + 968);
    uint64_t v9 = *(void *)(v0 + 816);
    uint64_t v10 = *(void *)(v0 + 808);
    uint64_t v11 = *(void *)(v0 + 800);
    uint64_t v12 = *(void *)(v0 + 712);
    char v13 = *(_BYTE *)(v0 + 972);
    uint64_t v14 = *(void *)(v0 + 688);
    uint64_t v15 = swift_task_alloc(64LL);
    *(void *)(v15 + swift_weakDestroy(v0 + 16) = inited;
    *(void *)(v15 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v12;
    *(void *)(v15 + 32) = v14;
    *(_BYTE *)(v15 + 40) = v13;
    *(void *)(v15 + 48) = v8;
    (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))(v9, v123, v11);
    uint64_t v16 = v127;
    Connection.transaction(_:block:)(v9, sub_100164FBC, v15);
    (*(void (**)(void, void))(*(void *)(v0 + 808) + 8LL))(*(void *)(v0 + 816), *(void *)(v0 + 800));
    swift_release();
    if (v127)
    {
      swift_task_dealloc(v15);
LABEL_33:
      unint64_t v137 = *(void *)(v0 + 944);
      unint64_t v126 = *(void *)(v0 + 928);
      uint64_t v131 = *(void *)(v0 + 936);
      unint64_t type = *(void *)(v0 + 912);
      uint64_t v119 = *(void *)(v0 + 920);
      unint64_t v115 = *(void *)(v0 + 888);
      uint64_t v116 = *(void *)(v0 + 904);
      unint64_t v113 = *(void *)(v0 + 848);
      uint64_t v114 = *(void *)(v0 + 880);
      uint64_t v100 = *(void *)(v0 + 840);
      uint64_t v101 = *(void *)(v0 + 832);
      uint64_t v122 = *(void *)(v0 + 696);
      uint64_t v103 = *(void *)(v0 + 104);
      unint64_t v102 = *(void *)(v0 + 112);
      uint64_t v104 = *(void *)(v0 + 120);
      unint64_t v105 = *(void *)(v0 + 128);
      uint64_t v106 = *(void *)(v0 + 144);
      unint64_t v107 = *(void *)(v0 + 152);
      sub_1000182F0(*(void *)(v0 + 88), *(void *)(v0 + 96));
      sub_100016F9C(v103, v102);
      sub_100016F9C(v104, v105);
      sub_100016F9C(v106, v107);
      sub_100164D3C(v101, v100, v113);
      swift_setDeallocating(inited);
      swift_arrayDestroy(v132, *(void *)(inited + 16), &type metadata for KeyGenerationHint);
      sub_100164EE8( (void *)(v0 + 16),  (void (*)(void, void))sub_1000182F0,  (void (*)(uint64_t, uint64_t))sub_100016F9C);
      sub_100016F9C(v114, v115);
      sub_1000182F0(v116, type);
      sub_100016F9C(v119, v126);
      sub_1000182F0(v131, v137);
      sub_100164C78(v122, (void (*)(void))sub_100016F9C);
      swift_bridgeObjectRelease();
      uint64_t v108 = *(void *)(v0 + 792);
      uint64_t v109 = *(void *)(v0 + 784);
      swift_task_dealloc(*(void *)(v0 + 816));
      swift_task_dealloc(v108);
      swift_task_dealloc(v109);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }

    swift_setDeallocating(inited);
    swift_arrayDestroy(v132, *(void *)(inited + 16), &type metadata for KeyGenerationHint);
    swift_task_dealloc(v15);
    unint64_t v2 = *(void *)(v0 + 872);
  }

  *(void *)(v0 + 952) = v2;
  *(_OWORD *)(v0 + 456) = *(_OWORD *)(v0 + 280);
  uint64_t v52 = *(void *)(v0 + 456);
  uint64_t v53 = *(void *)(v0 + 464);
  sub_100018BF8(v0 + 456);
  sub_1004DFE7C(v52, v53);
  uint64_t v55 = v16;
  if (!v16)
  {
    uint64_t v56 = v54;
    sub_1004DDA84(v54, 0);
    uint64_t v110 = v56;
    uint64_t v112 = v111;
    CCECCryptorRelease(v110);
    sub_100164F64(v0 + 456);
    __asm { BR              X10 }
  }

  uint64_t v57 = static os_log_type_t.error.getter(v54);
  if (qword_10099B520 != -1) {
    swift_once(&qword_10099B520, sub_1004DC610);
  }
  uint64_t v58 = qword_100A2AC90;
  uint64_t v59 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v60 = swift_allocObject(v59, 72LL, 7LL);
  *(_OWORD *)(v60 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *uint64_t v135 = v55;
  swift_errorRetain(v55);
  uint64_t v61 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  uint64_t v62 = String.init<A>(describing:)(v135, v61);
  uint64_t v64 = v63;
  *(void *)(v60 + 56) = &type metadata for String;
  *(void *)(v60 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1000226F4();
  *(void *)(v60 + 32) = v62;
  *(void *)(v60 + 40) = v64;
  os_log(_:dso:log:_:_:)(v57, &_mh_execute_header, v58, "Error deriving advertisementKey: %@", 35LL, 2LL, v60);
  swift_bridgeObjectRelease();
  unint64_t v65 = sub_100117A8C();
  uint64_t v66 = swift_allocError(&type metadata for CryptoTokenError, v65, 0LL, 0LL);
  _BYTE *v67 = 0;
  swift_willThrow(v66);
  swift_errorRelease(v55);
  sub_100164F64(v0 + 456);
  uint64_t v141 = 0LL;
  unint64_t v142 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(35LL);
  *(void *)(v0 + 568) = 0LL;
  *(void *)(v0 + 576) = 0xE000000000000000LL;
  v68._object = (void *)0x8000000100854640LL;
  v68._countAndFlagsBits = 0xD000000000000021LL;
  String.append(_:)(v68);
  *(void *)(v0 + 608) = v66;
  uint64_t v69 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  _print_unlocked<A, B>(_:_:)( v138,  v0 + 568,  v69,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  *(void *)(v0 + 568),  *(void *)(v0 + 576),  "searchpartyd/KeyRepresentable.swift",  35LL,  2LL,  256LL,  0);
}

uint64_t sub_100164940()
{
  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    unint64_t v1 = sub_100162F08;
  }

  else
  {
    uint64_t v2 = *(void *)(v0 + 144);
    uint64_t v18 = *(void *)(v0 + 960);
    *(void *)(v0 + 86_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = *(void *)(v0 + 952);
    uint64_t v3 = *(void *)(v0 + 88);
    unint64_t v4 = *(void *)(v0 + 96);
    uint64_t v5 = *(void *)(v0 + 104);
    unint64_t v6 = *(void *)(v0 + 112);
    uint64_t v7 = *(void *)(v0 + 120);
    unint64_t v8 = *(void *)(v0 + 128);
    *(void *)(v0 + 872) = *(void *)(v0 + 136);
    *(void *)(v0 + 880) = v2;
    unint64_t v9 = *(void *)(v0 + 152);
    *(void *)(v0 + 888) = v9;
    sub_10001736C(v2, v9);
    sub_10001736C(v2, v9);
    sub_100018BE4(v3, v4);
    sub_10001736C(v5, v6);
    sub_10001736C(v7, v8);
    sub_10001736C(v2, v9);
    sub_100018BE4(v3, v4);
    sub_10001736C(v5, v6);
    sub_1004DB8E0(v3, v4, v5, v6, v2, v9, 1, (void *)(v0 + 136), (_OWORD *)(v0 + 264), (uint64_t *)(v0 + 144));
    *(void *)(v0 + 896) = v18;
    if (v18)
    {
      sub_100016F9C(v2, v9);
      sub_100016F9C(v2, v9);
      sub_100016F9C(v5, v6);
      sub_1000182F0(v3, v4);
      sub_1000182F0(v3, v4);
      sub_100016F9C(v5, v6);
      sub_100016F9C(v7, v8);
      uint64_t v10 = sub_100016F9C(v2, v9);
      uint64_t v11 = static os_log_type_t.error.getter(v10);
      if (qword_10099B520 != -1) {
        swift_once(&qword_10099B520, sub_1004DC610);
      }
      uint64_t v12 = qword_100A2AC90;
      uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v14 = swift_allocObject(v13, 72LL, 7LL);
      *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v15 = _convertErrorToNSError(_:)(v18);
      *(void *)(v14 + 56) = sub_100164EAC();
      *(void *)(v14 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_100007864( (unint64_t *)&qword_1009AC180,  (uint64_t (*)(uint64_t))sub_100164EAC,  (uint64_t)&protocol conformance descriptor for NSObject);
      *(void *)(v14 + 32) = v15;
      os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "Error in TokenAsyncSequence: %@", 31LL, 2LL, v14);
      swift_bridgeObjectRelease();
      swift_errorRelease(v18);
      unint64_t v1 = sub_1001650F4;
    }

    else
    {
      *(void *)(v0 + 90_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = *(void *)(v0 + 264);
      __int128 v16 = *(_OWORD *)(v0 + 288);
      *(_OWORD *)(v0 + 912) = *(_OWORD *)(v0 + 272);
      *(_OWORD *)(v0 + 928) = v16;
      *(void *)(v0 + 94_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = *(void *)(v0 + 304);
      sub_100016F9C(v2, v9);
      sub_100016F9C(v5, v6);
      sub_1000182F0(v3, v4);
      sub_1000182F0(v3, v4);
      sub_100016F9C(v5, v6);
      sub_100016F9C(v7, v8);
      sub_100016F9C(v2, v9);
      unint64_t v1 = sub_100163690;
    }
  }

  return swift_task_switch(v1, 0LL, 0LL);
}

unint64_t sub_100164C34()
{
  unint64_t result = qword_1009A2E28;
  if (!qword_1009A2E28)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EEBB0, &type metadata for LTKGenerator.Error);
    atomic_store(result, &qword_1009A2E28);
  }

  return result;
}

uint64_t sub_100164C78(uint64_t a1, void (*a2)(void))
{
  return a1;
}

uint64_t sub_100164CB0( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  if (a2 >> 60 != 15)
  {
    a7();
    ((void (*)(uint64_t, uint64_t))a7)(a3, a4);
    return ((uint64_t (*)(uint64_t, uint64_t))a7)(a5, a6);
  }

  return result;
}

uint64_t sub_100164D20(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 != 15) {
    return sub_10001736C(a2, a3);
  }
  return result;
}

uint64_t sub_100164D3C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 != 15) {
    return sub_100016F9C(a2, a3);
  }
  return result;
}

uint64_t sub_100164D58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconIdentifier(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100164D9C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeaconIdentifier(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100164DD8( uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a4 >> 60 != 15)
  {
    sub_1000182F0(result, a2);
    sub_100016F9C(a3, a4);
    return sub_1000182F0(a5, a6);
  }

  return result;
}

uint64_t sub_100164E30( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9)
{
  if (a3 >> 60 != 15)
  {
    sub_100016F9C(a2, a3);
    sub_1000182F0(a4, a5);
    sub_100016F9C(a6, a7);
    return sub_1000182F0(a8, a9);
  }

  return result;
}

unint64_t sub_100164EAC()
{
  unint64_t result = qword_10099DFA0;
  if (!qword_10099DFA0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSError);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10099DFA0);
  }

  return result;
}

void *sub_100164EE8( void *a1, void (*a2)(void, void), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v9 = a1[7];
  uint64_t v10 = a1[8];
  a2(*a1, a1[1]);
  a3(v5, v6);
  a3(v7, v8);
  a3(v9, v10);
  return a1;
}

uint64_t sub_100164F64(uint64_t a1)
{
  return a1;
}

uint64_t sub_100164F90(uint64_t a1)
{
  return a1;
}

uint64_t sub_100164FBC()
{
  return sub_1004784F8( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(unsigned __int8 *)(v0 + 40),  *(void *)(v0 + 48));
}

uint64_t storeEnumTagSinglePayload for LTKGenerator.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 1;
  }
  else {
    LODWORD(v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10016502C + 4 * byte_1007EEB2D[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100165060 + 4 * byte_1007EEB28[v4]))();
}

uint64_t sub_100165060(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100165068(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100165070LL);
  }
  return result;
}

uint64_t sub_10016507C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100165084LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_100165088(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100165090(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LTKGenerator.Error()
{
  return &type metadata for LTKGenerator.Error;
}

unint64_t sub_1001650B0()
{
  unint64_t result = qword_1009A2E40;
  if (!qword_1009A2E40)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EEB88, &type metadata for LTKGenerator.Error);
    atomic_store(result, (unint64_t *)&qword_1009A2E40);
  }

  return result;
}

uint64_t type metadata accessor for CompanionPublishActivity()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd24CompanionPublishActivity);
}

unint64_t sub_100165118(uint64_t a1)
{
  unint64_t result = sub_10016513C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10016513C()
{
  unint64_t result = qword_1009A2F08;
  if (!qword_1009A2F08)
  {
    uint64_t v1 = type metadata accessor for CompanionPublishActivity();
    unint64_t result = swift_getWitnessTable(&unk_1007EEC48, v1);
    atomic_store(result, (unint64_t *)&qword_1009A2F08);
  }

  return result;
}

uint64_t sub_100165180()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2A248);
  sub_10000A720(v0, (uint64_t)qword_100A2A248);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x5063697373616C63LL,  0xEE00676E69726961LL);
}

uint64_t sub_100165200()
{
  if (*v0) {
    return 0x74756F656D69742ELL;
  }
  else {
    return 0x6E776F6E6B6E752ELL;
  }
}

void sub_100165234()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100004AEC(&qword_1009A32A0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v62 = v2;
  uint64_t v63 = v3;
  __chkstk_darwin(v2);
  uint64_t v60 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC(&qword_1009A32A8);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v64 = v5;
  uint64_t v65 = v6;
  __chkstk_darwin(v5);
  uint64_t v59 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009A32B0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v66 = v8;
  uint64_t v67 = v9;
  __chkstk_darwin(v8);
  uint64_t v61 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_1009B0670);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100004AEC(&qword_1009A32B8);
  uint64_t v52 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  __int128 v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v51 = sub_100004AEC(&qword_1009A32C0);
  uint64_t v53 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v55 = sub_100004AEC(&qword_1009A32C8);
  uint64_t v57 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  unint64_t v20 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v58 = *(void *)(v0 + 16);
  v68[0] = (id)sub_1004F76AC();
  uint64_t v21 = sub_100004AEC(&qword_1009A32D0);
  uint64_t v22 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v56 = v22;
  uint64_t v23 = sub_1000372EC( (unint64_t *)&unk_1009AE5B0,  &qword_1009A32D0,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.compactMap<A>(_:)(sub_100165840, 0LL, v21, v22, v23);
  swift_release();
  uint64_t v24 = sub_1000372EC( &qword_1009A32D8,  &qword_1009A32B8,  (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  uint64_t v54 = sub_100007864(&qword_1009A5810, type metadata accessor for OwnedBeaconGroup, (uint64_t)&unk_1007F5D60);
  Publisher<>.removeDuplicates()(v14, v24, v54);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v16, v14);
  v68[0] = *(id *)(v1 + 48);
  id v25 = v68[0];
  uint64_t v26 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
  uint64_t v52 = *(void *)(*(void *)(v26 - 8) + 56LL);
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v52)(v13, 1LL, 1LL, v26);
  unint64_t v27 = sub_100004AB0();
  unint64_t v50 = v27;
  uint64_t v28 = sub_1000372EC( &qword_1009A32E0,  &qword_1009A32C0,  (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  uint64_t v29 = sub_100007864( (unint64_t *)&qword_1009B06C0,  (uint64_t (*)(uint64_t))sub_100004AB0,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  id v30 = v25;
  uint64_t v31 = v51;
  unint64_t v32 = v27;
  uint64_t v33 = v29;
  Publisher.receive<A>(on:options:)(v68, v13, v51, v32, v28, v29);
  sub_1001662F8((uint64_t)v13);

  (*(void (**)(char *, uint64_t))(v53 + 8))(v18, v31);
  uint64_t v34 = sub_1000372EC( &qword_1009A32E8,  &qword_1009A32C8,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain();
  uint64_t v35 = v55;
  uint64_t v36 = Publisher<>.sink(receiveValue:)(sub_100166338, v1, v55, v34);
  swift_release();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v20, v35);
  *(void *)(v1 + 80) = v36;
  swift_release();
  v68[0] = *(id *)(v58 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_recordDeletedPublisher);
  swift_retain();
  uint64_t v37 = sub_100004AEC((uint64_t *)&unk_1009B0690);
  uint64_t v38 = sub_1000372EC( (unint64_t *)&unk_1009AE5C0,  (uint64_t *)&unk_1009B0690,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  int v39 = v60;
  Publisher.compactMap<A>(_:)(sub_10016584C, 0LL, v37, v56, v38);
  swift_release();
  uint64_t v40 = sub_1000372EC( &qword_1009A32F0,  &qword_1009A32A0,  (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  unint64_t v41 = v59;
  uint64_t v42 = v62;
  Publisher<>.removeDuplicates()(v62, v40, v54);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v39, v42);
  v68[0] = v30;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v52)(v13, 1LL, 1LL, v26);
  uint64_t v43 = sub_1000372EC( &qword_1009A32F8,  &qword_1009A32A8,  (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  id v44 = v30;
  uint64_t v45 = v61;
  uint64_t v46 = v64;
  Publisher.receive<A>(on:options:)(v68, v13, v64, v50, v43, v33);
  sub_1001662F8((uint64_t)v13);

  (*(void (**)(char *, uint64_t))(v65 + 8))(v41, v46);
  uint64_t v47 = sub_1000372EC( &qword_1009A3300,  &qword_1009A32B0,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain();
  uint64_t v48 = v66;
  uint64_t v49 = Publisher<>.sink(receiveValue:)(DeviceInformationProviderFactory.init(), v1, v66, v47);
  swift_release();
  (*(void (**)(char *, uint64_t))(v67 + 8))(v45, v48);
  *(void *)(v1 + 88) = v49;
  swift_release();
  sub_10016633C();
}

uint64_t sub_100165840@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100165858(a1, &qword_1009AE670, a2);
}

uint64_t sub_10016584C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100165858(a1, &qword_1009A3308, a2);
}

uint64_t sub_100165858@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = sub_100004AEC(a2);
  uint64_t v6 = type metadata accessor for OwnedBeaconGroup(0LL);
  int v7 = swift_dynamicCast(a3, v9, v5, v6, 6LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))( a3,  v7 ^ 1u,  1LL,  v6);
}

void sub_1001658DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1 != *(void *)(a2 + 144))
  {
    if (qword_10099B150 != -1) {
      swift_once(&qword_10099B150, sub_100165180);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A2A248);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.default.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v8 = 134349056;
      uint64_t v9 = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v8 + 4, v8 + 12);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "connectableDevicesChanged: %{public}ld", v8, 0xCu);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    *(void *)(a2 + 14_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v2;
  }

void sub_1001659F8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v49 = a1;
  uint64_t v3 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v48 = (uint64_t)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v47 = (uint64_t)&v47 - v6;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v47 - v12;
  uint64_t v14 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = *(void **)(v2 + 48);
  *uint64_t v17 = v18;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  id v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v17);
  (*(void (**)(void *, uint64_t))(v15 + 8))(v17, v14);
  if ((v18 & 1) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v15 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v49 + *(int *)(v3 + 24), v7);
  swift_beginAccess(v2 + 104, v50, 33LL, 0LL);
  char v20 = sub_1000BD768((uint64_t)v13, v11);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  swift_endAccess(v50);
  uint64_t v21 = v7;
  if ((v20 & 1) != 0)
  {
    uint64_t v48 = v7;
    if (qword_10099B150 == -1)
    {
LABEL_4:
      uint64_t v22 = type metadata accessor for Logger(0LL);
      sub_10000A720(v22, (uint64_t)qword_100A2A248);
      uint64_t v23 = v47;
      uint64_t v24 = sub_100166278(v15, v47);
      id v25 = (os_log_s *)Logger.logObject.getter(v24);
      os_log_type_t v26 = static os_log_type_t.default.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = swift_slowAlloc(22LL, -1LL);
        uint64_t v28 = swift_slowAlloc(32LL, -1LL);
        v50[0] = v28;
        *(_DWORD *)uint64_t v27 = 141558275;
        uint64_t v51 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v27 + 4, v27 + 12);
        *(_WORD *)(v27 + 12) = 2081;
        uint64_t v29 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter(v48, v29);
        uint64_t v51 = sub_1003F11D4(v30, v31, v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v27 + 14, v27 + 22);
        swift_bridgeObjectRelease();
        sub_1001662BC(v23);
        _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "Posting SPAccessoryDidPair Darwin notification for %{private,mask.hash}s",  (uint8_t *)v27,  0x16u);
        swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v28, -1LL, -1LL);
        swift_slowDealloc(v27, -1LL, -1LL);
      }

      else
      {
        sub_1001662BC(v23);
      }

      dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(1LL);
      uint64_t My = type metadata accessor for Feature.FindMy(0LL);
      v50[3] = My;
      v50[4] = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
      id v44 = sub_10000A7C8(v50);
      (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v44,  enum case for Feature.FindMy.managedCBPeripheral(_:),  My);
      LOBYTE(My) = isFeatureEnabled(_:)(v50);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v50);
      if ((My & 1) != 0)
      {
        uint64_t v45 = (void *)SPManagedCBPeripheralChangedNotification;
        uint64_t v46 = type metadata accessor for DarwinNotificationHelper(0LL);
        swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
        DarwinNotificationHelper.init(notificationName:rateLimit:)(v45, 0.0);
        dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0LL);
        swift_release();
      }

      return;
    }

uint64_t sub_100166080()
{
  swift_release(*(void *)(v0 + 64));
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  swift_release(*(void *)(v0 + 80));
  swift_release(*(void *)(v0 + 88));
  swift_release(*(void *)(v0 + 96));
  swift_bridgeObjectRelease(*(void *)(v0 + 104));
  swift_bridgeObjectRelease(*(void *)(v0 + 112));
  swift_release(*(void *)(v0 + 120));
  swift_release(*(void *)(v0 + 128));
  swift_release(*(void *)(v0 + 136));
  swift_release(*(void *)(v0 + 152));
  swift_bridgeObjectRelease(*(void *)(v0 + 176));
  return v0;
}

uint64_t sub_100166124()
{
  return swift_deallocClassInstance(v0, 184LL, 7LL);
}

uint64_t type metadata accessor for ClassicPairingSupport()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd21ClassicPairingSupport);
}

uint64_t storeEnumTagSinglePayload for ClassicPairingSupport.Error( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 1;
  }
  else {
    LODWORD(v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1001661B0 + 4 * byte_1007EEC85[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001661E4 + 4 * byte_1007EEC80[v4]))();
}

uint64_t sub_1001661E4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001661EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001661F4LL);
  }
  return result;
}

uint64_t sub_100166200(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100166208LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10016620C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100166214(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClassicPairingSupport.Error()
{
  return &type metadata for ClassicPairingSupport.Error;
}

unint64_t sub_100166234()
{
  unint64_t result = qword_1009A3298;
  if (!qword_1009A3298)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EEE04, &type metadata for ClassicPairingSupport.Error);
    atomic_store(result, (unint64_t *)&qword_1009A3298);
  }

  return result;
}

uint64_t sub_100166278(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnedBeaconGroup(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001662BC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OwnedBeaconGroup(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1001662F8(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009B0670);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_10016633C()
{
  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  v5[0] = 0x7365547265646E75LL;
  v5[1] = 0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v6, v5, sub_10000A71C, 0LL, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0)
  {
    if (qword_10099B150 != -1) {
      swift_once(&qword_10099B150, sub_100165180);
    }
    uint64_t v0 = type metadata accessor for Logger(0LL);
    uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2A248);
    uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
    os_log_type_t v3 = static os_log_type_t.debug.getter(v2);
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "connectionEventInitialSetup", v4, 2u);
      swift_slowDealloc(v4, -1LL, -1LL);
    }
  }

ValueMetadata *type metadata accessor for KeyUnion()
{
  return &type metadata for KeyUnion;
}

unint64_t sub_1001664A0()
{
  unint64_t result = qword_1009A3310;
  if (!qword_1009A3310)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EEE90, &type metadata for KeyUnion);
    atomic_store(result, (unint64_t *)&qword_1009A3310);
  }

  return result;
}

uint64_t sub_1001664E4(char *a1, char *a2)
{
  return sub_100305CC4(*a1, *a2);
}

Swift::Int sub_1001664F0()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v4, 0LL);
  if (v1) {
    uint64_t v2 = 80LL;
  }
  else {
    uint64_t v2 = 84LL;
  }
  String.hash(into:)(v4, v2, 0xE100000000000000LL);
  swift_bridgeObjectRelease(0xE100000000000000LL);
  return Hasher._finalize()();
}

uint64_t sub_10016654C(uint64_t a1)
{
  if (*v1) {
    uint64_t v2 = 80LL;
  }
  else {
    uint64_t v2 = 84LL;
  }
  String.hash(into:)(a1, v2, 0xE100000000000000LL);
  return swift_bridgeObjectRelease(0xE100000000000000LL);
}

Swift::Int sub_10016657C(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v5, a1);
  if (v2) {
    uint64_t v3 = 80LL;
  }
  else {
    uint64_t v3 = 84LL;
  }
  String.hash(into:)(v5, v3, 0xE100000000000000LL);
  swift_bridgeObjectRelease(0xE100000000000000LL);
  return Hasher._finalize()();
}

uint64_t sub_1001665D4@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v3._countAndFlagsBits = *a1;
  uint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100933830, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void sub_100166630(uint64_t *a1@<X8>)
{
  uint64_t v2 = 84LL;
  if (*v1) {
    uint64_t v2 = 80LL;
  }
  *a1 = v2;
  a1[1] = 0xE100000000000000LL;
}

uint64_t sub_100166650()
{
  if (*v0) {
    return 80LL;
  }
  else {
    return 84LL;
  }
}

uint64_t sub_10016666C@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100933830, v3);
  uint64_t result = swift_bridgeObjectRelease(object);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_1001666CC(uint64_t a1)
{
  unint64_t v2 = sub_100166CC8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001666F4(uint64_t a1)
{
  unint64_t v2 = sub_100166CC8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10016671C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100166F94();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100166778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100166F94();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001667C4(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = sub_100004AEC(&qword_1009A3330);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100012ED8(a1, v11);
  unint64_t v13 = sub_100166CC8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for KeyUnion.CodingKeys,  &type metadata for KeyUnion.CodingKeys,  v13,  v11,  v12);
  if ((a3 & 0x2000000000000000LL) != 0)
  {
    LOBYTE(v18) = 1;
    char v20 = 0;
    sub_10001736C(a2, a3 & 0xDFFFFFFFFFFFFFFFLL);
    unint64_t v15 = sub_100166D50();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v20, v7, &type metadata for KeyUnion.PayloadType, v15);
    if (!v3)
    {
      uint64_t v18 = a2;
      unint64_t v19 = a3 & 0xDFFFFFFFFFFFFFFFLL;
      char v20 = 1;
      goto LABEL_7;
    }

uint64_t sub_1001669A0(uint64_t *a1, uint64_t *a2)
{
  return sub_1001669F4(*a1, a1[1], *a2, a2[1]);
}

uint64_t sub_1001669B4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100166AC0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

uint64_t sub_1001669DC(void *a1)
{
  return sub_1001667C4(a1, *(void *)v1, *(void *)(v1 + 8));
}

uint64_t sub_1001669F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a2 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 0x2000000000000000LL) != 0)
    {
      sub_10008699C(a1, a2);
      sub_10008699C(a3, a4);
      uint64_t v8 = a1;
      unint64_t v9 = a2 & 0xDFFFFFFFFFFFFFFFLL;
      goto LABEL_7;
    }
  }

  else if ((a4 & 0x2000000000000000LL) == 0)
  {
    sub_10008699C(a1, a2);
    sub_10008699C(a3, a4);
    uint64_t v8 = a1;
    unint64_t v9 = a2;
LABEL_7:
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v8, v9);
    char v10 = v11;
    sub_1000869A4(a3, a4);
    sub_1000869A4(a1, a2);
    return v10 & 1;
  }

  char v10 = 0;
  return v10 & 1;
}

uint64_t sub_100166AC0(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009A3318);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = (uint64_t)sub_100012ED8(a1, v7);
  unint64_t v10 = sub_100166CC8();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for KeyUnion.CodingKeys,  &type metadata for KeyUnion.CodingKeys,  v10,  v7,  v8);
  if (!v1)
  {
    char v18 = 0;
    unint64_t v11 = sub_100166D0C();
    KeyedDecodingContainer.decode<A>(_:forKey:)( &v16,  &type metadata for KeyUnion.PayloadType,  &v18,  v3,  &type metadata for KeyUnion.PayloadType,  v11);
    char v18 = 1;
    if ((v16 & 1) != 0)
    {
      unint64_t v13 = sub_100016FE0();
      KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for Data, &v18, v3, &type metadata for Data, v13);
      uint64_t v9 = sub_10017D280(v16, v17);
    }

    else
    {
      unint64_t v14 = sub_100016FE0();
      KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for Data, &v18, v3, &type metadata for Data, v14);
      uint64_t v9 = sub_10017D59C(v16, v17);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v9;
}

unint64_t sub_100166CC8()
{
  unint64_t result = qword_1009A3320;
  if (!qword_1009A3320)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EF100, &type metadata for KeyUnion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3320);
  }

  return result;
}

unint64_t sub_100166D0C()
{
  unint64_t result = qword_1009A3328;
  if (!qword_1009A3328)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EF0D8, &type metadata for KeyUnion.PayloadType);
    atomic_store(result, (unint64_t *)&qword_1009A3328);
  }

  return result;
}

unint64_t sub_100166D50()
{
  unint64_t result = qword_1009A3338;
  if (!qword_1009A3338)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EF0B0, &type metadata for KeyUnion.PayloadType);
    atomic_store(result, (unint64_t *)&qword_1009A3338);
  }

  return result;
}

ValueMetadata *type metadata accessor for KeyUnion.PayloadType()
{
  return &type metadata for KeyUnion.PayloadType;
}

uint64_t _s12searchpartyd8KeyUnionO11PayloadTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 1;
  }
  else {
    LODWORD(v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100166DF4 + 4 * byte_1007EEE41[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100166E28 + 4 * byte_1007EEE3C[v4]))();
}

uint64_t sub_100166E28(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100166E30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100166E38LL);
  }
  return result;
}

uint64_t sub_100166E44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100166E4CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100166E50(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100166E58(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyUnion.CodingKeys()
{
  return &type metadata for KeyUnion.CodingKeys;
}

unint64_t sub_100166E78()
{
  unint64_t result = qword_1009A3340;
  if (!qword_1009A3340)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EEFE8, &type metadata for KeyUnion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3340);
  }

  return result;
}

unint64_t sub_100166EC0()
{
  unint64_t result = qword_1009A3348;
  if (!qword_1009A3348)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EF088, &type metadata for KeyUnion.PayloadType);
    atomic_store(result, (unint64_t *)&qword_1009A3348);
  }

  return result;
}

unint64_t sub_100166F08()
{
  unint64_t result = qword_1009A3350;
  if (!qword_1009A3350)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EEF20, &type metadata for KeyUnion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3350);
  }

  return result;
}

unint64_t sub_100166F50()
{
  unint64_t result = qword_1009A3358;
  if (!qword_1009A3358)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EEF48, &type metadata for KeyUnion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3358);
  }

  return result;
}

unint64_t sub_100166F94()
{
  unint64_t result = qword_1009A3360;
  if (!qword_1009A3360)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EF010, &type metadata for KeyUnion.PayloadType);
    atomic_store(result, (unint64_t *)&qword_1009A3360);
  }

  return result;
}

uint64_t sub_100166FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents(0LL);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_100167014(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URLComponents(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t sub_100167048(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_10016708C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_1001670D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_100167114(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_100167158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100167164);
}

uint64_t sub_100167164(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t sub_1001671A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001671AC);
}

uint64_t sub_1001671AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for FetchDevicesEndpoint(uint64_t a1)
{
  uint64_t result = qword_1009A33C0;
  if (!qword_1009A33C0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FetchDevicesEndpoint);
  }
  return result;
}

uint64_t sub_100167228(uint64_t a1)
{
  uint64_t result = type metadata accessor for URLComponents(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 1LL, &v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_100167290@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for URLComponents(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(a1, v1, v3);
}

uint64_t storeEnumTagSinglePayload for LocationSource(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 18 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 18) >> 8 < 0xFF) {
    LODWORD(v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 1;
  }
  else {
    LODWORD(v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v3;
  }
  if (a3 >= 0xEE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xED) {
    return ((uint64_t (*)(void))((char *)&loc_100167314 + 4 * byte_1007EF195[v4]))();
  }
  *a1 = a2 + 18;
  return ((uint64_t (*)(void))((char *)sub_100167348 + 4 * byte_1007EF190[v4]))();
}

uint64_t sub_100167348(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100167350(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100167358LL);
  }
  return result;
}

uint64_t sub_100167364(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10016736CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 18;
  return result;
}

uint64_t sub_100167370(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100167378(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocationSource()
{
  return &type metadata for LocationSource;
}

uint64_t sub_100167394(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001673C8 + 4 * byte_1007EF19A[a1]))( 0x6E776F6E6B6E752ELL,  0xE800000000000000LL);
}

unint64_t sub_1001673C8()
{
  return 0xD000000000000017LL;
}

unint64_t sub_100167574@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100167744(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10016759C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100167754();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001675F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100167754();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_100167644(void *a1@<X8>)
{
  *a1 = &off_100933880;
}

uint64_t sub_100167654()
{
  return sub_100167394(*v0);
}

unint64_t sub_100167660()
{
  unint64_t result = qword_1009A33F8;
  if (!qword_1009A33F8)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A3400);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009A33F8);
  }

  return result;
}

unint64_t sub_1001676B0()
{
  unint64_t result = qword_1009A3408;
  if (!qword_1009A3408)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EF2E8, &type metadata for LocationSource);
    atomic_store(result, (unint64_t *)&qword_1009A3408);
  }

  return result;
}

BOOL sub_1001676F4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_100167708(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_10016771C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_100167730(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

unint64_t sub_100167744(unint64_t result)
{
  if (result >= 0x13) {
    return 19LL;
  }
  return result;
}

unint64_t sub_100167754()
{
  unint64_t result = qword_1009A3410;
  if (!qword_1009A3410)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EF270, &type metadata for LocationSource);
    atomic_store(result, (unint64_t *)&qword_1009A3410);
  }

  return result;
}

void sub_100167798(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v30 = a1 + 64;
  uint64_t v2 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v44 = (unint64_t)(v2 + 63) >> 6;
  uint64_t v5 = (char *)v42 + 8;
  swift_bridgeObjectRetain(a1);
  int64_t v6 = 0LL;
  uint64_t v7 = _swiftEmptyArrayStorage;
  uint64_t v29 = v8;
  if (v4) {
    goto LABEL_36;
  }
LABEL_6:
  int64_t v9 = v6 + 1;
  if (!__OFADD__(v6, 1LL))
  {
    if (v9 < v44)
    {
      unint64_t v10 = *(void *)(v30 + 8 * v9);
      ++v6;
      if (v10) {
        goto LABEL_21;
      }
      int64_t v6 = v9 + 1;
      if (v9 + 1 >= v44) {
        goto LABEL_37;
      }
      unint64_t v10 = *(void *)(v30 + 8 * v6);
      if (v10) {
        goto LABEL_21;
      }
      int64_t v6 = v9 + 2;
      if (v9 + 2 >= v44) {
        goto LABEL_37;
      }
      unint64_t v10 = *(void *)(v30 + 8 * v6);
      if (v10) {
        goto LABEL_21;
      }
      int64_t v6 = v9 + 3;
      if (v9 + 3 >= v44) {
        goto LABEL_37;
      }
      unint64_t v10 = *(void *)(v30 + 8 * v6);
      if (v10)
      {
LABEL_21:
        unint64_t v4 = (v10 - 1) & v10;
        for (unint64_t i = __clz(__rbit64(v10)) + (v6 << 6); ; unint64_t i = v28 | (v6 << 6))
        {
          sub_10006A5E8(*(void *)(v1 + 48) + 40 * i, (uint64_t)v41);
          sub_10006A650(*(void *)(v1 + 56) + 32 * i, (uint64_t)v5);
          v39[0] = v42[0];
          v39[1] = v42[1];
          uint64_t v40 = v43;
          v38[0] = v41[0];
          v38[1] = v41[1];
          sub_10006A5E8((uint64_t)v38, (uint64_t)&v31);
          if (swift_dynamicCast( &v34,  &v31,  &type metadata for AnyHashable,  &type metadata for String,  6LL))
          {
            __int128 v35 = v34;
            sub_10006A650((uint64_t)v39 + 8, (uint64_t)&v31);
            uint64_t v13 = sub_100004AEC(&qword_1009A3500);
            swift_dynamicCast(&v36, &v31, (char *)&type metadata for Any + 8, v13, 7LL);
          }

          else
          {
            unint64_t v14 = v5;
            if (qword_10099B810 != -1) {
              swift_once(&qword_10099B810, sub_10069374C);
            }
            uint64_t v15 = type metadata accessor for Logger(0LL);
            sub_10000A720(v15, (uint64_t)qword_100A2B188);
            uint64_t v16 = sub_10006A5E8((uint64_t)v38, (uint64_t)&v31);
            unint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
            os_log_type_t v18 = static os_log_type_t.error.getter(v17);
            if (os_log_type_enabled(v17, v18))
            {
              uint64_t v19 = swift_slowAlloc(12LL, -1LL);
              uint64_t v20 = swift_slowAlloc(32LL, -1LL);
              *(void *)&__int128 v34 = v20;
              *(_DWORD *)uint64_t v19 = 136446210;
              uint64_t v21 = AnyHashable.description.getter();
              *(void *)(v19 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1003F11D4(v21, v22, (uint64_t *)&v34);
              swift_bridgeObjectRelease();
              sub_10016C77C((uint64_t)&v31);
              _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "Dropping non-String metadata key: %{public}s",  (uint8_t *)v19,  0xCu);
              swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v20, -1LL, -1LL);
              swift_slowDealloc(v19, -1LL, -1LL);
            }

            else
            {
              sub_10016C77C((uint64_t)&v31);
            }

            __int128 v35 = 0u;
            __int128 v36 = 0u;
            __int128 v37 = 0u;
            uint64_t v5 = v14;
            uint64_t v1 = v29;
          }

          sub_100015794((uint64_t)v38, &qword_1009A34F0);
          if (*((void *)&v35 + 1))
          {
            __int128 v31 = v35;
            __int128 v32 = v36;
            __int128 v33 = v37;
            if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0) {
              uint64_t v7 = sub_1004C535C(0LL, v7[2] + 1LL, 1, v7);
            }
            unint64_t v24 = v7[2];
            unint64_t v23 = v7[3];
            if (v24 >= v23 >> 1) {
              uint64_t v7 = sub_1004C535C((void *)(v23 > 1), v24 + 1, 1, v7);
            }
            v7[2] = v24 + 1;
            id v25 = &v7[6 * v24];
            __int128 v26 = v31;
            __int128 v27 = v33;
            v25[3] = v32;
            v25[4] = v27;
            v25[2] = v26;
            if (!v4) {
              goto LABEL_6;
            }
          }

          else
          {
            sub_100015794((uint64_t)&v35, &qword_1009A34F8);
            if (!v4) {
              goto LABEL_6;
            }
          }

LABEL_37:
    swift_release();
    return;
  }

  __break(1u);
LABEL_39:
  __break(1u);
}

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v28, 1LL, 1LL, v10);
LABEL_38:
  swift_release();
  uint64_t v59 = v60;
  sub_1001ABC0C((uint64_t)v20);
  swift_bridgeObjectRelease();
  if (v59) {
    dispatch_group_leave(v59);
  }
}

      __break(1u);
      JUMPOUT(0x1001EE7F8LL);
    }

    goto LABEL_22;
  }

      uint64_t v57 = v199;
      if ((v220 & 1) != 0)
      {
        if (v56 < v73) {
          goto LABEL_166;
        }
        if (v73 < v56)
        {
          uint64_t v95 = 0LL;
          uint64_t v96 = v223 * (v56 - 1);
          unint64_t v97 = v56 * v223;
          uint64_t v98 = v73;
          uint64_t v99 = v73 * v223;
          do
          {
            if (v98 != v56 + v95 - 1)
            {
              unint64_t v102 = v195;
              if (!v195) {
                goto LABEL_171;
              }
              uint64_t v103 = v195 + v99;
              unint64_t v220 = v195 + v96;
              sub_10002218C(v195 + v99, v200, type metadata accessor for ShareRecord);
              if (v99 < v96 || v103 >= v102 + v97)
              {
                uint64_t v100 = v102 + v99;
                uint64_t v101 = v220;
                swift_arrayInitWithTakeFrontToBack(v100, v220, 1LL, v216);
              }

              else
              {
                uint64_t v101 = v220;
                if (v99 != v96) {
                  swift_arrayInitWithTakeBackToFront(v103, v220);
                }
              }

              sub_10002218C(v200, v101, type metadata accessor for ShareRecord);
              uint64_t v54 = v206;
              uint64_t v57 = v199;
            }

            ++v98;
            --v95;
            v96 -= v223;
            v97 -= v223;
            v99 += v223;
          }

          while (v98 < v56 + v95);
          uint64_t v20 = v209;
          uint64_t v72 = v212;
          uint64_t v58 = v225;
          uint64_t v51 = v216;
          uint64_t v73 = v202;
          uint64_t v55 = v222;
        }
      }
    }

    if (v56 >= v55) {
      goto LABEL_63;
    }
    if (__OFSUB__(v56, v73)) {
      goto LABEL_164;
    }
    if (v56 - v73 >= v188)
    {
      uint64_t v73 = v202;
LABEL_63:
      if (v56 < v73) {
        goto LABEL_159;
      }
      goto LABEL_64;
    }

    if (__OFADD__(v202, v188)) {
      goto LABEL_167;
    }
    if (v202 + v188 >= v222) {
      uint64_t v104 = (void (*)(char *, uint64_t, uint64_t))v222;
    }
    else {
      uint64_t v104 = (void (*)(char *, uint64_t, uint64_t))(v202 + v188);
    }
    if ((void (*)(char *, uint64_t, uint64_t))v56 == v104)
    {
      if (v56 < v202) {
        goto LABEL_159;
      }
      goto LABEL_64;
    }

    uint64_t v211 = *(void *)(v205 + 72);
    uint64_t v222 = v56 * v211;
    uint64_t v223 = v211 * (v56 - 1);
    uint64_t v197 = v104;
    while (2)
    {
      __int128 v161 = 0LL;
      __int128 v162 = v202;
      v215 = v56;
      while (1)
      {
        unint64_t v220 = v162;
        __int128 v163 = *v224;
        __int128 v164 = v221;
        NSString v219 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))(v222 + v161);
        sub_10001DC4C(v222 + v161 + v163, v221, type metadata accessor for ShareRecord);
        uint64_t v218 = v223 + v161;
        __int128 v165 = v213;
        sub_10001DC4C(v223 + v161 + v163, v213, type metadata accessor for ShareRecord);
        sub_10001581C(v164 + *(int *)(v51 + 32), (uint64_t)v8, (uint64_t *)&unk_10099D720);
        __int128 v166 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48);
        if (v166(v8, 1LL, v20) == 1)
        {
          __int128 v160 = (uint64_t)v8;
LABEL_112:
          sub_100015794(v160, (uint64_t *)&unk_10099D720);
          sub_100018C68(v213, type metadata accessor for ShareRecord);
          sub_100018C68(v221, type metadata accessor for ShareRecord);
          goto LABEL_113;
        }

        __int128 v167 = *(void (**)(char *, char *, uint64_t))(v72 + 32);
        __int128 v168 = v225;
        v167(v225, v8, v20);
        __int128 v169 = (uint64_t)v210;
        sub_10001581C(v165 + *(int *)(v51 + 32), (uint64_t)v210, (uint64_t *)&unk_10099D720);
        if (v166((char *)v169, 1LL, v20) == 1)
        {
          (*(void (**)(char *, uint64_t))(v72 + 8))(v168, v20);
          __int128 v160 = v169;
          uint64_t v8 = v214;
          uint64_t v56 = v215;
          uint64_t v51 = v216;
          goto LABEL_112;
        }

        __int128 v170 = v165;
        __int128 v171 = v208;
        v167(v208, (char *)v169, v20);
        uint64_t v172 = static Date.< infix(_:_:)(v225, v171);
        unint64_t v173 = *(void (**)(char *, uint64_t))(v72 + 8);
        v173(v171, v20);
        v173(v225, v20);
        sub_100018C68(v170, type metadata accessor for ShareRecord);
        sub_100018C68(v221, type metadata accessor for ShareRecord);
        if ((v172 & 1) == 0) {
          break;
        }
        v174 = *v224;
        uint64_t v8 = v214;
        if (!*v224) {
          goto LABEL_169;
        }
        uint64_t v175 = v174 + v222 + v161;
        uint64_t v176 = v174 + v223 + v161;
        sub_10002218C(v175, v217, type metadata accessor for ShareRecord);
        uint64_t v20 = v209;
        uint64_t v72 = v212;
        uint64_t v56 = v215;
        uint64_t v51 = v216;
        swift_arrayInitWithTakeFrontToBack(v175, v176, 1LL, v216);
        sub_10002218C(v217, v176, type metadata accessor for ShareRecord);
        v161 -= v211;
        __int128 v162 = v220 + 1;
        if (v56 == v220 + 1) {
          goto LABEL_113;
        }
      }

      uint64_t v8 = v214;
      uint64_t v56 = v215;
      uint64_t v20 = v209;
      uint64_t v72 = v212;
      uint64_t v51 = v216;
LABEL_113:
      ++v56;
      v223 += v211;
      v222 += v211;
      break;
    }

    uint64_t v56 = (uint64_t)v197;
    uint64_t v54 = v206;
    uint64_t v57 = v199;
    uint64_t v58 = v225;
    if ((uint64_t)v197 < v202)
    {
LABEL_159:
      __break(1u);
      goto LABEL_160;
    }

      os_log_type_t v77 = v538;
LABEL_38:
      uint64_t v89 = 0;
      *(_OWORD *)os_log_type_t v77 = xmmword_1007F8BC0;
      *(_OWORD *)(v77 + swift_weakDestroy(v0 + 16) = xmmword_1007F8BC0;
      *(_BYTE *)(v77 + 32) = 0;
      goto LABEL_85;
    }

    uint64_t v157 = v542;
    uint64_t v156 = v543;
    if (qword_10099B220 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    uint64_t v158 = type metadata accessor for Logger(0LL);
    sub_10000A720(v158, (uint64_t)qword_100A2A470);
    __int128 v159 = v540;
    ((void (*)(char *, char *, uint64_t))v63)(v95, v156, v540);
    __int128 v160 = v520;
    __int128 v161 = ((uint64_t (*)(char *, char *, uint64_t))v63)(v520, v157, v159);
    __int128 v162 = (os_log_s *)Logger.logObject.getter(v161);
    __int128 v163 = static os_log_type_t.error.getter(v162);
    __int128 v164 = v95;
    if (os_log_type_enabled(v162, v163))
    {
      __int128 v165 = swift_slowAlloc(32LL, -1LL);
      v537 = (void **)swift_slowAlloc(64LL, -1LL);
      aBlock = v537;
      *(_DWORD *)__int128 v165 = 141558531;
      v544 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v165 + 4, v165 + 12);
      *(_WORD *)(v165 + 12) = 2081;
      __int128 v166 = v160;
      __int128 v167 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      __int128 v168 = dispatch thunk of CustomStringConvertible.description.getter(v159, v167);
      v544 = sub_1003F11D4(v168, v169, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v165 + 14, v165 + 22);
      swift_bridgeObjectRelease();
      __int128 v170 = (void (*)(char *, uint64_t))v539[1];
      v170(v95, v159);
      *(_WORD *)(v165 + 22) = 2082;
      __int128 v171 = dispatch thunk of CustomStringConvertible.description.getter(v159, v167);
      v544 = sub_1003F11D4(v171, v172, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v165 + 24, v165 + 32);
      swift_bridgeObjectRelease();
      v170(v166, v159);
      _os_log_impl( (void *)&_mh_execute_header,  v162,  v163,  "Invalid commandResponse for %{private,mask.hash}s Command %{public}s.",  (uint8_t *)v165,  0x20u);
      unint64_t v173 = v537;
      swift_arrayDestroy(v537, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v173, -1LL, -1LL);
      swift_slowDealloc(v165, -1LL, -1LL);

      v174 = v531;
      uint64_t v175 = v536;
      uint64_t v176 = v511;
      uint64_t v177 = (unint64_t)v541;
      sub_1000F40B4(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_100016F9C);
      sub_1000F40B4(v174, (uint64_t)v175, v176, v177, sub_100016F9C);
      v170(v542, v159);
      unint64_t result = ((uint64_t (*)(char *, uint64_t))v170)(v543, v159);
    }

    else
    {

      char v245 = v531;
      v246 = v536;
      NSString v247 = v511;
      uint64_t v248 = (unint64_t)v541;
      sub_1000F40B4(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_100016F9C);
      sub_1000F40B4(v245, (uint64_t)v246, v247, v248, sub_100016F9C);
      int v249 = (void (*)(char *, uint64_t))v539[1];
      v249(v160, v159);
      v249(v164, v159);
      v249(v157, v159);
      unint64_t result = ((uint64_t (*)(char *, uint64_t))v249)(v156, v159);
    }

    os_log_type_t v77 = v538;
    uint64_t v88 = 9LL;
LABEL_10:
    *(void *)os_log_type_t v77 = v88;
    *(_OWORD *)(v77 + 8) = 0u;
    *(_OWORD *)(v77 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 0u;
    *(_BYTE *)(v77 + 40) = 11;
    uint64_t v89 = 1;
    goto LABEL_85;
  }

  if (v93 != 3)
  {
    v530 = v8;
    uint64_t v96 = v540;
    if (v93 == 7 && v531 == 3 && v67 == 0x2000000000000000LL && !v511 && v68 == 0x3000000000000000LL)
    {
      unint64_t v97 = qword_10099B220;
      uint64_t v98 = v69;
      uint64_t v99 = v543;
      if (v97 != -1) {
        swift_once(&qword_10099B220, sub_1002673AC);
      }
      uint64_t v100 = type metadata accessor for Logger(0LL);
      uint64_t v101 = sub_10000A720(v100, (uint64_t)qword_100A2A470);
      unint64_t v102 = v525;
      uint64_t v103 = v522;
      sub_10001DC4C(v525, v522, type metadata accessor for AccessoryCommand);
      ((void (*)(char *, char *, uint64_t))v63)(v94, v99, v96);
      uint64_t v104 = v524;
      unint64_t v105 = ((uint64_t (*)(char *, char *, uint64_t))v63)(v524, v542, v96);
      v534 = (char *)v101;
      uint64_t v106 = (os_log_s *)Logger.logObject.getter(v105);
      unint64_t v107 = static os_log_type_t.default.getter(v106);
      v536 = v106;
      LODWORD(v533) = v107;
      uint64_t v108 = os_log_type_enabled(v106, v107);
      v499 = v63;
      if (v108)
      {
        uint64_t v109 = swift_slowAlloc(42LL, -1LL);
        v532 = (os_log_t)swift_slowAlloc(96LL, -1LL);
        aBlock = (void **)v532;
        *(_DWORD *)uint64_t v109 = 136446979;
        uint64_t v110 = v103;
        uint64_t v111 = v523;
        sub_1006CC72C(*(void *)(v110 + *(int *)(v523 + 24)), *(_BYTE *)(v110 + *(int *)(v523 + 24) + 8));
        v544 = sub_1003F11D4(v112, v113, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v109 + 4, v109 + 12);
        swift_bridgeObjectRelease();
        sub_100018C68(v110, type metadata accessor for AccessoryCommand);
        *(_WORD *)(v109 + 12) = 2160;
        v544 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v109 + 14, v109 + 22);
        *(_WORD *)(v109 + 22) = 2081;
        uint64_t v114 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        unint64_t v115 = dispatch thunk of CustomStringConvertible.description.getter(v540, v114);
        v544 = sub_1003F11D4(v115, v116, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v109 + 24, v109 + 32);
        swift_bridgeObjectRelease();
        uint64_t v117 = v539;
        unint64_t v118 = (void (*)(char *, uint64_t))v539[1];
        v118(v94, v540);
        *(_WORD *)(v109 + 32) = 2082;
        uint64_t v119 = v524;
        uint64_t v120 = v114;
        uint64_t v96 = v540;
        uint64_t v121 = dispatch thunk of CustomStringConvertible.description.getter(v540, v120);
        v544 = sub_1003F11D4(v121, v122, (uint64_t *)&aBlock);
        uint64_t v99 = v543;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v109 + 34, v109 + 42);
        swift_bridgeObjectRelease();
        v541 = (void (*)(void, void))v118;
        v118(v119, v96);
        unsigned int v123 = v536;
        _os_log_impl( (void *)&_mh_execute_header,  v536,  (os_log_type_t)v533,  "%{public}s completed for %{private,mask.hash}s Command %{public}s!",  (uint8_t *)v109,  0x2Au);
        unint64_t v124 = v532;
        swift_arrayDestroy(v532, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v124, -1LL, -1LL);
        uint64_t v125 = v109;
        unint64_t v126 = v117;
        unint64_t v102 = v525;
        swift_slowDealloc(v125, -1LL, -1LL);
      }

      else
      {
        sub_100018C68(v103, type metadata accessor for AccessoryCommand);
        unint64_t v126 = v539;
        int v231 = (void (*)(char *, uint64_t))v539[1];
        v231(v94, v96);
        v541 = (void (*)(void, void))v231;
        v231(v104, v96);

        uint64_t v111 = v523;
      }

      v232 = v102 + *(int *)(v111 + 24);
      NSString v233 = *(unsigned __int8 *)(v232 + 8);
      if (v233 == 1)
      {
        uint64_t v286 = v513;
        v287 = v499;
        ((void (*)(char *, char *, uint64_t))v499)(v513, v99, v96);
        uint64_t v288 = v507;
        NSString v237 = v542;
        ((void (*)(char *, char *, uint64_t))v287)(v507, v542, v96);
        uint64_t v289 = *((unsigned __int8 *)v126 + 80);
        uint64_t v290 = (v289 + 24) & ~v289;
        uint64_t v291 = (v22 + v289 + v290) & ~v289;
        v292 = swift_allocObject(&unk_10094C6C0, v291 + v22, v289 | 7);
        *(void *)(v292 + swift_weakDestroy(v0 + 16) = v537;
        uint64_t v293 = v292 + v290;
        uint64_t v294 = (void (*)(uint64_t, char *, uint64_t))v126[4];
        v294(v293, v286, v96);
        v294(v292 + v291, v288, v96);
        v552 = sub_1002899E4;
        v553 = v292;
        aBlock = _NSConcreteStackBlock;
        v549 = 1107296256LL;
        v244 = &unk_10094C6D8;
      }

      else
      {
        if (v233 != 3 || *(void *)v232 != 1LL)
        {
          uint64_t v277 = v510;
          uint64_t v278 = sub_10001DC4C(v102, v510, type metadata accessor for AccessoryCommand);
          uint64_t v279 = (os_log_s *)Logger.logObject.getter(v278);
          uint64_t v280 = static os_log_type_t.error.getter(v279);
          if (os_log_type_enabled(v279, v280))
          {
            uint64_t v281 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v282 = (void **)swift_slowAlloc(32LL, -1LL);
            *(_DWORD *)uint64_t v281 = 136446210;
            aBlock = v282;
            sub_1006CC72C(*(void *)(v277 + *(int *)(v111 + 24)), *(_BYTE *)(v277 + *(int *)(v111 + 24) + 8));
            v544 = sub_1003F11D4(v283, v284, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v281 + 4, v281 + 12);
            swift_bridgeObjectRelease();
            sub_100018C68(v277, type metadata accessor for AccessoryCommand);
            _os_log_impl( (void *)&_mh_execute_header,  v279,  v280,  "Invalid command %{public}s for .soundComplete!",  v281,  0xCu);
            swift_arrayDestroy(v282, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v282, -1LL, -1LL);
            swift_slowDealloc(v281, -1LL, -1LL);
          }

          else
          {

            sub_100018C68(v277, type metadata accessor for AccessoryCommand);
          }

          uint64_t v285 = (uint64_t (*)(char *, uint64_t))v541;
          v541(v542, v96);
          unint64_t result = v285(v99, v96);
          goto LABEL_82;
        }

        uint64_t v234 = v513;
        Class v235 = v499;
        ((void (*)(char *, char *, uint64_t))v499)(v513, v99, v96);
        uint64_t v236 = v507;
        NSString v237 = v542;
        ((void (*)(char *, char *, uint64_t))v235)(v507, v542, v96);
        char v238 = *((unsigned __int8 *)v126 + 80);
        Class v239 = (v238 + 24) & ~v238;
        uint64_t v240 = (v22 + v238 + v239) & ~v238;
        NSString v241 = swift_allocObject(&unk_10094C670, v240 + v22, v238 | 7);
        *(void *)(v241 + swift_weakDestroy(v0 + 16) = v537;
        uint64_t v242 = v241 + v239;
        uint64_t v243 = (void (*)(uint64_t, char *, uint64_t))v126[4];
        v243(v242, v234, v96);
        v243(v241 + v240, v236, v96);
        v552 = sub_1002899CC;
        v553 = v241;
        aBlock = _NSConcreteStackBlock;
        v549 = 1107296256LL;
        v244 = &unk_10094C688;
      }

      v550 = sub_1001C31E8;
      v551 = v244;
      uint64_t v295 = _Block_copy(&aBlock);
      uint64_t v296 = swift_retain();
      uint64_t v297 = v517;
      static DispatchQoS.unspecified.getter(v296);
      v544 = (uint64_t)_swiftEmptyArrayStorage;
      uint64_t v298 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v299 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v300 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v301 = v515;
      v302 = v299;
      uint64_t v303 = v516;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v544, v302, v300, v516, v298);
      v304 = v500;
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v297, v301, v295);

      _Block_release(v295);
      (*(void (**)(char *, uint64_t))(v514 + 8))(v301, v303);
      (*(void (**)(char *, uint64_t))(v530 + 8))(v297, v518);
      uint64_t v305 = (void (*)(char *, uint64_t))v541;
      v541(v237, v96);
      v305(v543, v96);
      unint64_t result = swift_release();
LABEL_82:
      os_log_type_t v77 = v538;
      goto LABEL_83;
    }

    v536 = (os_log_s *)v67;
    v541 = (void (*)(void, void))v68;
    uint64_t v127 = qword_10099B220;
    uint64_t v128 = v69;
    uint64_t v129 = v543;
    if (v127 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    unint64_t v130 = type metadata accessor for Logger(0LL);
    sub_10000A720(v130, (uint64_t)qword_100A2A470);
    sub_10028975C((uint64_t)v66, (uint64_t)&aBlock);
    ((void (*)(os_log_s *, char *, uint64_t))v63)(v92, v129, v96);
    uint64_t v131 = v532;
    uint64_t v132 = (os_log_s *)v542;
    unint64_t v133 = ((uint64_t (*)(os_log_t, char *, uint64_t))v63)(v532, v542, v96);
    os_log_type_t v134 = (os_log_s *)Logger.logObject.getter(v133);
    uint64_t v135 = static os_log_type_t.error.getter(v134);
    if (os_log_type_enabled(v134, v135))
    {
      uint64_t v136 = swift_slowAlloc(42LL, -1LL);
      v537 = (void **)swift_slowAlloc(96LL, -1LL);
      v547 = (uint64_t)v537;
      *(_DWORD *)uint64_t v136 = 136446979;
      sub_10028975C((uint64_t)&aBlock, (uint64_t)&v544);
      unint64_t v137 = String.init<A>(describing:)(&v544, v533);
      v544 = sub_1003F11D4(v137, v138, &v547);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v136 + 4, v136 + 12);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
      *(_WORD *)(v136 + 12) = 2160;
      v544 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v136 + 14, v136 + 22);
      *(_WORD *)(v136 + 22) = 2081;
      uint64_t v139 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v140 = dispatch thunk of CustomStringConvertible.description.getter(v96, v139);
      v544 = sub_1003F11D4(v140, v141, &v547);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v136 + 24, v136 + 32);
      swift_bridgeObjectRelease();
      unint64_t v142 = v92;
      uint64_t v143 = (void (*)(os_log_s *, uint64_t))v539[1];
      v143(v142, v96);
      *(_WORD *)(v136 + 32) = 2082;
      uint64_t v144 = dispatch thunk of CustomStringConvertible.description.getter(v96, v139);
      v544 = sub_1003F11D4(v144, v145, &v547);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v136 + 34, v136 + 42);
      swift_bridgeObjectRelease();
      v143(v131, v96);
      _os_log_impl( (void *)&_mh_execute_header,  v134,  v135,  "Invalid command %{public}s beacon %{private,mask.hash}s Command %{public}s",  (uint8_t *)v136,  0x2Au);
      unint64_t v146 = v537;
      swift_arrayDestroy(v537, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v146, -1LL, -1LL);
      swift_slowDealloc(v136, -1LL, -1LL);

      sub_1000F40B4(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_100016F9C);
      v143((os_log_s *)v542, v96);
      unint64_t result = ((uint64_t (*)(char *, uint64_t))v143)(v543, v96);
    }

    else
    {

      sub_1000F40B4(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_100016F9C);
      id v196 = (void (*)(os_log_t, uint64_t))v539[1];
      v196(v131, v96);
      v196(v92, v96);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
      v196(v132, v96);
      unint64_t result = ((uint64_t (*)(char *, uint64_t))v196)(v129, v96);
    }

    goto LABEL_37;
  }

  uint64_t v178 = qword_10099B220;
  uint64_t v179 = v69;
  uint64_t v180 = v540;
  if (v178 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v181 = type metadata accessor for Logger(0LL);
  sub_10000A720(v181, (uint64_t)qword_100A2A470);
  uint64_t v182 = v526;
  ((void (*)(char *, char *, uint64_t))v63)(v526, v543, v180);
  int v183 = v527;
  uint64_t v184 = v542;
  v185 = ((uint64_t (*)(char *, char *, uint64_t))v63)(v527, v542, v180);
  uint64_t v186 = (os_log_s *)Logger.logObject.getter(v185);
  uint64_t v187 = static os_log_type_t.default.getter(v186);
  if (os_log_type_enabled(v186, v187))
  {
    Class v188 = swift_slowAlloc(35LL, -1LL);
    v541 = (void (*)(void, void))swift_slowAlloc(64LL, -1LL);
    aBlock = (void **)v541;
    *(_DWORD *)Class v188 = 16778243;
    LOBYTE(v54_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v531;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, (char *)&v544 + 1, v188 + 4, v188 + 5);
    *(_WORD *)(v188 + 5) = 2160;
    v544 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v188 + 7, v188 + 15);
    *(_WORD *)(v188 + 15) = 2081;
    uint64_t v189 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    id v190 = dispatch thunk of CustomStringConvertible.description.getter(v180, v189);
    v544 = sub_1003F11D4(v190, v191, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v188 + 17, v188 + 25);
    swift_bridgeObjectRelease();
    Class v192 = (void (*)(char *, uint64_t))v539[1];
    v192(v182, v180);
    *(_WORD *)(v188 + 25) = 2082;
    uint64_t v193 = dispatch thunk of CustomStringConvertible.description.getter(v180, v189);
    v544 = sub_1003F11D4(v193, v194, (uint64_t *)&aBlock);
    uint64_t v184 = v542;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v188 + 27, v188 + 35);
    swift_bridgeObjectRelease();
    v192(v183, v180);
    _os_log_impl( (void *)&_mh_execute_header,  v186,  v187,  "Received TX Power: %hhd for %{private,mask.hash}s Command %{public}s!",  (uint8_t *)v188,  0x23u);
    Class v195 = v541;
    swift_arrayDestroy(v541, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v195, -1LL, -1LL);
    swift_slowDealloc(v188, -1LL, -1LL);
  }

  else
  {
    Class v192 = (void (*)(char *, uint64_t))v539[1];
    v192(v182, v180);
    v192(v183, v180);
  }

  uint64_t v221 = v537;
  os_log_type_t v77 = v538;
  uint64_t v222 = v530;
  uint64_t v223 = v529;
  id v224 = (uint64_t)v528;
  id v225 = swift_beginAccess(v537 + 15, &aBlock, 0LL, 0LL);
  NSString v226 = v221[15];
  NSString v227 = (uint64_t)v543;
  if (v226[2])
  {
    swift_bridgeObjectRetain(v226);
    id v228 = sub_10030D124(v227);
    if ((v229 & 1) != 0)
    {
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v223 + 16))( v224,  v226[7] + *(void *)(v223 + 72) * v228,  v222);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v223 + 56))(v224, 0LL, 1LL, v222);
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v223 + 56))(v224, 1LL, 1LL, v222);
    }

    swift_bridgeObjectRelease();
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v223 + 56))(v224, 1LL, 1LL, v222, v225);
  }

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v223 + 48))(v224, 1LL, v222))
  {

    v192(v184, v180);
    v192((char *)v227, v180);
    unint64_t result = sub_100015794(v224, &qword_10099E4C0);
  }

  else
  {
    uint64_t v230 = v512;
    (*(void (**)(char *, uint64_t, uint64_t))(v223 + 16))(v512, v224, v222);
    sub_100015794(v224, &qword_10099E4C0);
    v544 = (char)v531;
    CheckedContinuation.resume(returning:)(&v544, v222);

    (*(void (**)(char *, uint64_t))(v223 + 8))(v230, v222);
    v192(v184, v180);
    unint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v192)(v227, v180);
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v10, 1LL, 1LL, v11);
          uint64_t v19 = 0LL;
LABEL_38:
          sub_100015794((uint64_t)v10, &qword_10099D8A0);
          goto LABEL_39;
        }

        v26 += 3LL;
      }
    }

          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v10, 1LL, 1LL, v11);
          uint64_t v19 = 0LL;
LABEL_38:
          sub_100015794((uint64_t)v10, &qword_10099D8A0);
          goto LABEL_39;
        }

        v26 += 3LL;
      }
    }

  __break(1u);
}

  if (v7 < 0) {
    id v25 = v7;
  }
  else {
    id v25 = v7 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v7);
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v25);
  swift_bridgeObjectRelease();
  int64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6)) {
    goto LABEL_42;
  }
LABEL_8:
  uint64_t v7 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *uint64_t v3 = v7;
  uint64_t v8 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000LL) == 0 && (v7 & 0x4000000000000000LL) == 0)
  {
    int64_t v11 = v7 & 0xFFFFFFFFFFFFFF8LL;
    if (v9 <= *(void *)((v7 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v8 = 1LL;
  }

  uint64_t v12 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_15:
  if (v12 <= v9) {
    uint64_t v12 = v9;
  }
  swift_bridgeObjectRetain(v7);
  *uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1LL, v7);
  swift_bridgeObjectRelease();
  int64_t v11 = *v3 & 0xFFFFFFFFFFFFFF8LL;
LABEL_18:
  uint64_t v13 = v11 + 32;
  unint64_t v14 = (char *)(v11 + 32 + 8 * v4);
  uint64_t v15 = type metadata accessor for ServerInteractionController(0LL);
  uint64_t v16 = swift_arrayDestroy(v14, v5, v15);
  if (!v6) {
    return specialized Array._endMutation()(v16);
  }
  unint64_t v17 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    os_log_type_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v19 = v18 - v2;
    if (!__OFSUB__(v18, v2)) {
      goto LABEL_21;
    }
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }

  if (v17 < 0) {
    __int128 v27 = *v3;
  }
  else {
    __int128 v27 = v17 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*v3);
  unint64_t v28 = _CocoaArrayWrapper.endIndex.getter(v27);
  uint64_t v16 = swift_bridgeObjectRelease();
  uint64_t v19 = v28 - v2;
  if (__OFSUB__(v28, v2)) {
    goto LABEL_52;
  }
LABEL_21:
  if ((v19 & 0x8000000000000000LL) == 0)
  {
    uint64_t v20 = (char *)(v13 + 8 * v2);
    if (v4 != v2 || v14 >= &v20[8 * v19]) {
      uint64_t v16 = (uint64_t)memmove(v14, v20, 8 * v19);
    }
    uint64_t v2 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      uint64_t v21 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v22 = v21 + v6;
      if (!__OFADD__(v21, v6))
      {
LABEL_27:
        *(void *)((*v3 & 0xFFFFFFFFFFFFF8LL) + 0x10) = v22;
        return specialized Array._endMutation()(v16);
      }

      goto LABEL_58;
    }

      uint64_t v16 = (v21 - 1) & v21;
      uint64_t v19 = __clz(__rbit64(v21)) + (v17 << 6);
LABEL_38:
      unint64_t v23 = *(void *)(*(void *)(v12 + 48) + 8 * v19);
      swift_beginAccess(v11, v48, 33LL, 0LL);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v11);
      uint64_t v47 = (void *)*v11;
      int64_t v6 = (uint64_t)v47;
      *int64_t v11 = 0x8000000000000000LL;
      __int128 v26 = sub_10030CE48(v23);
      __int128 v27 = *(void *)(v6 + 16);
      unint64_t v28 = (v25 & 1) == 0;
      uint64_t v29 = v27 + v28;
      if (__OFADD__(v27, v28))
      {
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }

      uint64_t v30 = v25;
      if (*(void *)(v6 + 24) >= v29)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          __int128 v33 = v47;
          if ((v25 & 1) == 0) {
            goto LABEL_45;
          }
        }

        else
        {
          int64_t v6 = (uint64_t)&v47;
          sub_100062CCC();
          __int128 v33 = v47;
          if ((v30 & 1) == 0) {
            goto LABEL_45;
          }
        }
      }

      else
      {
        sub_10004BB00(v29, isUniquelyReferenced_nonNull_native);
        int64_t v6 = (uint64_t)v47;
        __int128 v31 = sub_10030CE48(v23);
        if ((v30 & 1) != (v32 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
          __break(1u);
          return;
        }

        __int128 v26 = v31;
        __int128 v33 = v47;
        if ((v30 & 1) == 0)
        {
LABEL_45:
          v33[(v26 >> 6) + 8] |= 1LL << v26;
          __int128 v34 = 8 * v26;
          *(void *)(v33[6] + v3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v23;
          *(void *)(v33[7] + v3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 0LL;
          __int128 v35 = v33[2];
          int64_t v9 = __OFADD__(v35, 1LL);
          __int128 v36 = v35 + 1;
          if (v9) {
            goto LABEL_52;
          }
          v33[2] = v36;
          goto LABEL_17;
        }
      }

      *(void *)(v33[7] + 8 * v26) = 0LL;
LABEL_17:
      *int64_t v11 = v33;
      swift_bridgeObjectRelease();
      swift_endAccess(v48);
      continue;
    }

    break;
  }

    uint64_t v88 = v39;
    sub_1004D0BDC(1);
    sub_100004AB0();
    uint64_t v89 = v105;
    (*(void (**)(char *, void, uint64_t))(v10 + 104))( v12,  enum case for DispatchQoS.QoSClass.default(_:),  v105);
    unint64_t v90 = (void *)static OS_dispatch_queue.global(qos:)(v12);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v89);
    Swift::String v91 = (void *)swift_allocObject(&unk_10095F9C8, 40LL, 7LL);
    Swift::String v92 = v107;
    v91[2] = v106;
    v91[3] = v92;
    v91[4] = v88;
    v115.i64[1] = (uint64_t)sub_1000D4F98;
    uint64_t v116 = v91;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v114.i64[0] = 1107296256LL;
    v114.i64[1] = (uint64_t)sub_1001C31E8;
    v115.i64[0] = (uint64_t)&unk_10095F9E0;
    uint64_t v93 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v94 = v88;
    uint64_t v95 = v108;
    static DispatchQoS.unspecified.getter(v94);
    uint64_t v117 = _swiftEmptyArrayStorage;
    uint64_t v96 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    unint64_t v97 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v98 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v99 = v109;
    uint64_t v100 = v97;
    uint64_t v101 = v104;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v117, v100, v98, v104, v96);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v95, v99, v93);
    _Block_release(v93);

    (*(void (**)(char *, uint64_t))(v111 + 8))(v99, v101);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v95, v112);
    swift_release();
    sub_10008F2D4();

    swift_bridgeObjectRelease();
    return sub_1002543B0(v120);
  }

  __int128 v26 = v4;
  __int128 v27 = *(void *)(v4 + 72);
  unint64_t v28 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState;
  uint64_t v29 = *(unsigned __int8 *)(v27 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState);
  if (v29 == 5)
  {
    uint64_t v104 = v7;
    uint64_t v41 = static os_log_type_t.default.getter(v17);
    if (qword_10099B798 != -1) {
      swift_once(&qword_10099B798, sub_100651870);
    }
    os_log(_:dso:log:_:_:)( v41,  &_mh_execute_header,  qword_100A2B0A8,  "Sent pairing complete.",  22LL,  2LL,  _swiftEmptyArrayStorage);
    *(_BYTE *)(v27 + v28) = 6;
    *(void *)(v26 + 88) = 0LL;
    swift_release();
    *(void *)(v26 + 96) = 0LL;
    swift_release();
    unint64_t v42 = *(void **)(v27 + 24);
    *uint64_t v16 = v42;
    (*(void (**)(void *, void, uint64_t))(v14 + 104))( v16,  enum case for DispatchPredicate.onQueue(_:),  v13);
    uint64_t v43 = v42;
    int64_t v44 = _dispatchPreconditionTest(_:)(v16);
    uint64_t v45 = (*(uint64_t (**)(void *, uint64_t))(v14 + 8))(v16, v13);
    if ((v44 & 1) != 0)
    {
      uint64_t v46 = static os_log_type_t.default.getter(v45);
      os_log(_:dso:log:_:_:)( v46,  &_mh_execute_header,  qword_100A2B0A8,  "completeInitiatePairing: starting timeout...",  44LL,  2LL,  _swiftEmptyArrayStorage);
      *(_BYTE *)(v27 + v28) = 8;
      sub_1006EB4D4(0LL, 0LL);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_10028B0D0,  a2,  *(void *)(a2 + 16),  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
      aBlock = 12LL;
      uint64_t v114 = 0u;
      unint64_t v115 = 0u;
      LOBYTE(v1swift_weakDestroy(v0 + 16) = 11;
      sub_1004C30A4(&aBlock);
      sub_1002543B0(&aBlock);
      sub_100004AB0();
      uint64_t v47 = v105;
      (*(void (**)(char *, void, uint64_t))(v10 + 104))( v12,  enum case for DispatchQoS.QoSClass.default(_:),  v105);
      uint64_t v48 = (void *)static OS_dispatch_queue.global(qos:)(v12);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v47);
      uint64_t v49 = swift_allocObject(&unk_10095FA68, 32LL, 7LL);
      unint64_t v50 = v107;
      *(void *)(v49 + swift_weakDestroy(v0 + 16) = v106;
      *(void *)(v49 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v50;
      v115.i64[1] = (uint64_t)sub_10020CE78;
      uint64_t v116 = (void *)v49;
      aBlock = (uint64_t)_NSConcreteStackBlock;
      v114.i64[0] = 1107296256LL;
      v114.i64[1] = (uint64_t)sub_1001C31E8;
      v115.i64[0] = (uint64_t)&unk_10095FA80;
      uint64_t v51 = _Block_copy(&aBlock);
      uint64_t v52 = swift_retain();
      uint64_t v53 = v108;
      static DispatchQoS.unspecified.getter(v52);
      v120[0] = (uint64_t)_swiftEmptyArrayStorage;
      uint64_t v54 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v55 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v56 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v57 = v109;
      uint64_t v58 = v55;
      unint64_t v28 = v104;
LABEL_23:
      dispatch thunk of SetAlgebra.init<A>(_:)(v120, v58, v56, v28, v54);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v53, v57, v51);
      _Block_release(v51);

      (*(void (**)(char *, uint64_t))(v111 + 8))(v57, v28);
      (*(void (**)(char *, uint64_t))(v110 + 8))(v53, v112);
      return (uint64_t *)swift_release();
    }

    __break(1u);
    goto LABEL_40;
  }

  if (v29 != 3)
  {
    unint64_t v14 = v107;
    unint64_t v28 = v7;
    int64_t v44 = static os_log_type_t.error.getter(v17);
    if (qword_10099B798 == -1)
    {
LABEL_22:
      os_log(_:dso:log:_:_:)( v44,  &_mh_execute_header,  qword_100A2B0A8,  "Invalid state!",  14LL,  2LL,  _swiftEmptyArrayStorage);
      sub_1004D0BDC(1);
      sub_100004AB0();
      uint64_t v59 = v105;
      (*(void (**)(char *, void, uint64_t))(v10 + 104))( v12,  enum case for DispatchQoS.QoSClass.default(_:),  v105);
      uint64_t v48 = (void *)static OS_dispatch_queue.global(qos:)(v12);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v59);
      uint64_t v60 = swift_allocObject(&unk_10095FA18, 32LL, 7LL);
      *(void *)(v60 + swift_weakDestroy(v0 + 16) = v106;
      *(void *)(v60 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v14;
      v115.i64[1] = (uint64_t)sub_1004D7AB8;
      uint64_t v116 = (void *)v60;
      aBlock = (uint64_t)_NSConcreteStackBlock;
      v114.i64[0] = 1107296256LL;
      v114.i64[1] = (uint64_t)sub_1001C31E8;
      v115.i64[0] = (uint64_t)&unk_10095FA30;
      uint64_t v51 = _Block_copy(&aBlock);
      uint64_t v61 = swift_retain();
      uint64_t v53 = v108;
      static DispatchQoS.unspecified.getter(v61);
      v120[0] = (uint64_t)_swiftEmptyArrayStorage;
      uint64_t v54 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v62 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v56 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v57 = v109;
      uint64_t v58 = v62;
      goto LABEL_23;
    }

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

                  sub_1000A6F30(v4);

                  return;
                }
              }
            }
          }

      swift_once(&qword_10099B710, sub_1006511CC);
      goto LABEL_35;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

  __int128 v31 = SPBeaconTaskNameBeginBTFinding;
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1004C5728(0LL, v2[2] + 1LL, 1, v2);
  }
  __int128 v33 = v2[2];
  __int128 v32 = v2[3];
  __int128 v34 = v33 + 1;
  if (v33 >= v32 >> 1) {
    uint64_t v2 = sub_1004C5728((void *)(v32 > 1), v33 + 1, 1, v2);
  }
  v2[2] = v34;
  v2[v33 + 4] = v31;
  __int128 v35 = v2[3];
  __int128 v36 = v33 + 2;
  __int128 v37 = SPBeaconTaskNameEndBTFinding;
  v2[2] = v36;
  v2[v34 + 4] = v37;
  if ((a1 & 0x80) == 0)
  {
LABEL_20:
    if ((a1 & 0x800) == 0) {
      goto LABEL_21;
    }
    goto LABEL_49;
  }

            uint64_t v8 = 0;
            goto LABEL_38;
          }

  __break(1u);
  return result;
}

void sub_100167C1C(char *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v114 = a3;
  unint64_t v115 = a4;
  uint64_t v116 = a1;
  uint64_t v12 = sub_100004AEC(&qword_1009A34C8);
  __chkstk_darwin(v12);
  unint64_t v14 = (char *)&v106 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for MessagingMessageContext(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  os_log_type_t v18 = (char *)&v106 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = &v7[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate];
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(&v7[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate]);
  if (!Strong)
  {
    if (qword_10099B810 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    uint64_t v33 = type metadata accessor for Logger(0LL);
    sub_10000A720(v33, (uint64_t)qword_100A2B188);
    uint64_t v116 = v7;
    __int128 v34 = (os_log_s *)Logger.logObject.getter(v116);
    os_log_type_t v35 = static os_log_type_t.error.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      __int128 v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      __int128 v37 = (char **)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)__int128 v36 = 138412290;
      unint64_t v117 = (unint64_t)v116;
      uint64_t v38 = v116;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118, v36 + 4, v36 + 12);
      *__int128 v37 = v116;

      _os_log_impl( (void *)&_mh_execute_header,  v34,  v35,  "MessagingServiceDelegateTrampoline: No delegate for %@",  v36,  0xCu);
      uint64_t v39 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v37, 1LL, v39);
      swift_slowDealloc(v37, -1LL, -1LL);
      swift_slowDealloc(v36, -1LL, -1LL);

      return;
    }

    goto LABEL_47;
  }

  if (v116)
  {
    if (a2)
    {
      if (v115 >> 60 == 15)
      {
        uint64_t v21 = Strong;
        uint64_t v22 = qword_10099B810;
        unint64_t v23 = v116;
        uint64_t v116 = a2;
        if (v22 != -1) {
          swift_once(&qword_10099B810, sub_10069374C);
        }
        uint64_t v24 = type metadata accessor for Logger(0LL);
        sub_10000A720(v24, (uint64_t)qword_100A2B188);
        id v25 = v7;
        __int128 v26 = (os_log_s *)Logger.logObject.getter(v25);
        os_log_type_t v27 = static os_log_type_t.error.getter(v26);
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = swift_slowAlloc(12LL, -1LL);
          unint64_t v115 = (unint64_t)v23;
          uint64_t v29 = (uint8_t *)v28;
          uint64_t v30 = (char **)swift_slowAlloc(8LL, -1LL);
          *(_DWORD *)uint64_t v29 = 138412290;
          unint64_t v117 = (unint64_t)v25;
          __int128 v31 = v25;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118, v29 + 4, v29 + 12);
          uint8_t *v30 = v25;

          _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "MessagingServiceDelegateTrampoline: No data for %@",  v29,  0xCu);
          uint64_t v32 = sub_100004AEC((uint64_t *)&unk_10099FB20);
          swift_arrayDestroy(v30, 1LL, v32);
          swift_slowDealloc(v30, -1LL, -1LL);
          swift_slowDealloc(v29, -1LL, -1LL);

          swift_unknownObjectRelease(v21);
          return;
        }

        swift_unknownObjectRelease(v21);
        goto LABEL_47;
      }

      uint64_t v113 = Strong;
      if (a6)
      {
        uint64_t v111 = *((void *)v19 + 1);
        uint64_t v112 = v116;
        uint64_t v59 = a2;
        sub_100018BE4(v114, v115);
        swift_bridgeObjectRetain(a6);
        uint64_t v60 = _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0(a5, a6);
        if (v62)
        {
          uint64_t v63 = v62;
          if (a7)
          {
            uint64_t v109 = v61;
            uint64_t v110 = v60;
            uint64_t v116 = v59;
            uint64_t v64 = qword_10099B820;
            id v65 = a7;
            uint64_t v66 = v65;
            if (v64 != -1) {
              id v65 = (id)swift_once(&qword_10099B820, sub_1006937F8);
            }
            uint64_t v67 = qword_100A2B1B8;
            __chkstk_darwin(v65);
            uint64_t v105 = (uint64_t)v112;
            uint64_t v68 = sub_100004AEC(&qword_1009A34B0);
            OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_10016CFAC,  &v104,  v67,  (char *)&type metadata for () + 8,  v68);
            if (v118) {
              unint64_t v69 = v117;
            }
            else {
              unint64_t v69 = 0xD000000000000011LL;
            }
            if (v118) {
              unint64_t v70 = v118;
            }
            else {
              unint64_t v70 = 0x80000001008563E0LL;
            }
            id v71 = v66;
            sub_1006527A0(v71, (uint64_t)v14);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15) == 1)
            {

              sub_1000182F0(v114, v115);
              swift_unknownObjectRelease(v113);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              sub_100015794((uint64_t)v14, &qword_1009A34C8);
            }

            else
            {
              unint64_t v107 = v69;
              unint64_t v108 = v70;
              sub_10016C7B0((uint64_t)v14, (uint64_t)v18);
              uint64_t v93 = v116;
              id v94 = [v93 uniqueID];
              if (v94)
              {
                uint64_t v95 = v94;
                uint64_t v96 = v113;
                uint64_t ObjectType = swift_getObjectType(v113);
                uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v95);
                uint64_t v100 = v99;

                uint64_t v101 = *(void (**)(unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(v111 + 24);
                uint64_t v105 = ObjectType;
                uint64_t v103 = v114;
                unint64_t v102 = v115;
                v101(v107, v108, v98, v100, v114, v115, v110, v109, v63, v18, v105, v111);
                sub_1000182F0(v103, v102);
                swift_bridgeObjectRelease();

                swift_unknownObjectRelease(v96);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                sub_10016C7F4((uint64_t)v18);
              }

              else
              {
                __break(1u);
              }
            }

            return;
          }

          uint64_t v84 = v59;
          swift_bridgeObjectRelease();
          if (qword_10099B810 != -1) {
            swift_once(&qword_10099B810, sub_10069374C);
          }
          uint64_t v85 = type metadata accessor for Logger(0LL);
          sub_10000A720(v85, (uint64_t)qword_100A2B188);
          unint64_t v86 = v7;
          unint64_t v87 = (void *)Logger.logObject.getter(v86);
          os_log_type_t v88 = static os_log_type_t.error.getter(v87);
          if (!os_log_type_enabled((os_log_t)v87, v88))
          {

            sub_1000182F0(v114, v115);
            swift_unknownObjectRelease(v113);

            return;
          }

          uint64_t v89 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          unint64_t v90 = (char **)swift_slowAlloc(8LL, -1LL);
          *(_DWORD *)uint64_t v89 = 138412290;
          unint64_t v117 = (unint64_t)v86;
          Swift::String v91 = v86;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118, v89 + 4, v89 + 12);
          *unint64_t v90 = v86;

          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v87,  v88,  "MessagingServiceDelegateTrampoline: No context for %@",  v89,  0xCu);
          uint64_t v92 = sub_100004AEC((uint64_t *)&unk_10099FB20);
          swift_arrayDestroy(v90, 1LL, v92);
          swift_slowDealloc(v90, -1LL, -1LL);
          swift_slowDealloc(v89, -1LL, -1LL);
          sub_1000182F0(v114, v115);

          swift_unknownObjectRelease(v113);
          uint64_t v83 = v112;
LABEL_44:

          return;
        }
      }

      else
      {
        uint64_t v73 = v116;
        id v74 = a2;
        sub_100018BE4(v114, v115);
      }

      if (qword_10099B810 != -1) {
        swift_once(&qword_10099B810, sub_10069374C);
      }
      uint64_t v75 = type metadata accessor for Logger(0LL);
      sub_10000A720(v75, (uint64_t)qword_100A2B188);
      uint64_t v76 = v7;
      os_log_type_t v77 = (os_log_s *)Logger.logObject.getter(v76);
      os_log_type_t v78 = static os_log_type_t.error.getter(v77);
      if (os_log_type_enabled(v77, v78))
      {
        unint64_t v79 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v80 = (char **)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)unint64_t v79 = 138412290;
        unint64_t v117 = (unint64_t)v76;
        uint64_t v81 = v76;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118, v79 + 4, v79 + 12);
        *uint64_t v80 = v76;

        _os_log_impl( (void *)&_mh_execute_header,  v77,  v78,  "MessagingServiceDelegateTrampoline: No fromID for %@",  v79,  0xCu);
        uint64_t v82 = sub_100004AEC((uint64_t *)&unk_10099FB20);
        swift_arrayDestroy(v80, 1LL, v82);
        swift_slowDealloc(v80, -1LL, -1LL);
        swift_slowDealloc(v79, -1LL, -1LL);
        sub_1000182F0(v114, v115);

        swift_unknownObjectRelease(v113);
        goto LABEL_43;
      }

      sub_1000182F0(v114, v115);
      uint64_t v72 = v113;
    }

    else
    {
      uint64_t v49 = Strong;
      uint64_t v50 = qword_10099B810;
      uint64_t v116 = v116;
      if (v50 != -1) {
        swift_once(&qword_10099B810, sub_10069374C);
      }
      uint64_t v51 = type metadata accessor for Logger(0LL);
      sub_10000A720(v51, (uint64_t)qword_100A2B188);
      uint64_t v52 = v7;
      uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
      os_log_type_t v54 = static os_log_type_t.error.getter(v53);
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v55 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v56 = (char **)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v55 = 138412290;
        unint64_t v117 = (unint64_t)v52;
        uint64_t v57 = v52;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118, v55 + 4, v55 + 12);
        *uint64_t v56 = v52;

        _os_log_impl( (void *)&_mh_execute_header,  v53,  v54,  "MessagingServiceDelegateTrampoline: No account for %@",  v55,  0xCu);
        uint64_t v58 = sub_100004AEC((uint64_t *)&unk_10099FB20);
        swift_arrayDestroy(v56, 1LL, v58);
        swift_slowDealloc(v56, -1LL, -1LL);
        swift_slowDealloc(v55, -1LL, -1LL);
        swift_unknownObjectRelease(v49);

LABEL_43:
        uint64_t v83 = v116;
        goto LABEL_44;
      }

      uint64_t v72 = v49;
    }

    swift_unknownObjectRelease(v72);
LABEL_47:

    return;
  }

  uint64_t v40 = Strong;
  if (qword_10099B810 != -1) {
    swift_once(&qword_10099B810, sub_10069374C);
  }
  uint64_t v41 = type metadata accessor for Logger(0LL);
  sub_10000A720(v41, (uint64_t)qword_100A2B188);
  unint64_t v42 = v7;
  uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
  os_log_type_t v44 = static os_log_type_t.error.getter(v43);
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v46 = (char **)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v45 = 138412290;
    unint64_t v117 = (unint64_t)v42;
    uint64_t v47 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118, v45 + 4, v45 + 12);
    *uint64_t v46 = v42;

    _os_log_impl( (void *)&_mh_execute_header,  v43,  v44,  "MessagingServiceDelegateTrampoline: No service for %@",  v45,  0xCu);
    uint64_t v48 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v46, 1LL, v48);
    swift_slowDealloc(v46, -1LL, -1LL);
    swift_slowDealloc(v45, -1LL, -1LL);
    swift_unknownObjectRelease(v40);
  }

  else
  {

    swift_unknownObjectRelease(v40);
  }

void sub_1001689C0(unint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v120 = a4;
  id v121 = (id)a6;
  uint64_t v118 = a5;
  uint64_t v12 = sub_100004AEC(&qword_1009A34C8);
  __chkstk_darwin(v12);
  unint64_t v14 = (char *)&v115 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for MessagingMessageContext(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v119 = (uint64_t)&v115 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v115 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = (char *)type metadata accessor for URL(0LL);
  uint64_t v124 = *((void *)v21 - 1);
  uint64_t v125 = v21;
  __chkstk_darwin(v21);
  unsigned int v123 = (char *)&v115 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v23 = &v7[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate];
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(&v7[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate]);
  if (!Strong)
  {
    if (qword_10099B810 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    uint64_t v36 = type metadata accessor for Logger(0LL);
    sub_10000A720(v36, (uint64_t)qword_100A2B188);
    uint64_t v125 = v7;
    id v27 = (id)Logger.logObject.getter(v125);
    os_log_type_t v37 = static os_log_type_t.error.getter(v27);
    if (!os_log_type_enabled((os_log_t)v27, v37))
    {

      return;
    }

    uint64_t v38 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v39 = (char **)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v38 = 138412290;
    unint64_t v126 = (unint64_t)v125;
    uint64_t v40 = v125;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v38 + 4, v38 + 12);
    *uint64_t v39 = v125;

    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v27,  v37,  "MessagingServiceDelegateTrampoline: No delegate for %@",  v38,  0xCu);
    uint64_t v41 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v39, 1LL, v41);
    swift_slowDealloc(v39, -1LL, -1LL);
    swift_slowDealloc(v38, -1LL, -1LL);
    goto LABEL_34;
  }

  uint64_t v122 = Strong;
  if (!a2)
  {
    if (qword_10099B810 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    uint64_t v42 = type metadata accessor for Logger(0LL);
    sub_10000A720(v42, (uint64_t)qword_100A2B188);
    uint64_t v43 = v7;
    id v27 = (id)Logger.logObject.getter(v43);
    os_log_type_t v44 = static os_log_type_t.error.getter(v27);
    if (!os_log_type_enabled((os_log_t)v27, v44))
    {

      swift_unknownObjectRelease(v122);
      return;
    }

    uint64_t v45 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v46 = (char **)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v45 = 138412290;
    unint64_t v126 = (unint64_t)v43;
    uint64_t v47 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v45 + 4, v45 + 12);
    *uint64_t v46 = v43;

    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v27,  v44,  "MessagingServiceDelegateTrampoline: No account for %@",  v45,  0xCu);
    uint64_t v48 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v46, 1LL, v48);
    swift_slowDealloc(v46, -1LL, -1LL);
    swift_slowDealloc(v45, -1LL, -1LL);
    goto LABEL_33;
  }

  uint64_t v117 = *((void *)v23 + 1);
  sub_10001581C(a3, (uint64_t)v20, (uint64_t *)&unk_1009A34D0);
  uint64_t v26 = v124;
  id v25 = v125;
  if ((*(unsigned int (**)(char *, uint64_t, char *))(v124 + 48))(v20, 1LL, v125) == 1)
  {
    id v27 = a2;
    sub_100015794((uint64_t)v20, (uint64_t *)&unk_1009A34D0);
    if (qword_10099B810 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    sub_10000A720(v28, (uint64_t)qword_100A2B188);
    uint64_t v29 = v7;
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.error.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v33 = (char **)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v32 = 138412290;
      unint64_t v126 = (unint64_t)v29;
      __int128 v34 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v32 + 4, v32 + 12);
      *uint64_t v33 = v29;

      _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "MessagingServiceDelegateTrampoline: No resourceURL for %@",  v32,  0xCu);
      uint64_t v35 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v33, 1LL, v35);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v32, -1LL, -1LL);

      swift_unknownObjectRelease(v122);
      return;
    }

LABEL_33:
    swift_unknownObjectRelease(v122);
LABEL_34:

    return;
  }

  (*(void (**)(char *, char *, char *))(v26 + 32))(v123, v20, v25);
  uint64_t v49 = (uint64_t)v121;
  if (!v121)
  {
    uint64_t v59 = qword_10099B810;
    id v60 = a2;
    if (v59 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    uint64_t v61 = type metadata accessor for Logger(0LL);
    sub_10000A720(v61, (uint64_t)qword_100A2B188);
    uint64_t v62 = v7;
    uint64_t v63 = (os_log_s *)Logger.logObject.getter(v62);
    os_log_type_t v64 = static os_log_type_t.error.getter(v63);
    if (os_log_type_enabled(v63, v64))
    {
      id v65 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v66 = (char **)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v65 = 138412290;
      unint64_t v126 = (unint64_t)v62;
      uint64_t v67 = v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v65 + 4, v65 + 12);
      *uint64_t v66 = v62;

      uint64_t v68 = "MessagingServiceDelegateTrampoline: No fromID for %@";
LABEL_43:
      _os_log_impl((void *)&_mh_execute_header, v63, v64, v68, v65, 0xCu);
      uint64_t v72 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v66, 1LL, v72);
      swift_slowDealloc(v66, -1LL, -1LL);
      swift_slowDealloc(v65, -1LL, -1LL);
LABEL_45:
      uint64_t v73 = v124;

      swift_unknownObjectRelease(v122);
      id v74 = *(void (**)(char *, char *))(v73 + 8);
      uint64_t v75 = v123;
LABEL_46:
      v74(v75, v125);
      return;
    }

void sub_100169870(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, int a5, char *a6)
{
  uint64_t v75 = a6;
  int v74 = a5;
  uint64_t v11 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = &v6[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate];
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(&v6[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate]);
  if (!Strong)
  {
    if (qword_10099B810 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    uint64_t v32 = type metadata accessor for Logger(0LL);
    sub_10000A720(v32, (uint64_t)qword_100A2B188);
    uint64_t v75 = v6;
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v75);
    os_log_type_t v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v36 = (char **)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v35 = 138412290;
      unint64_t v76 = (unint64_t)v75;
      os_log_type_t v37 = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v35 + 4, v35 + 12);
      *uint64_t v36 = v75;

      _os_log_impl( (void *)&_mh_execute_header,  v33,  v34,  "MessagingServiceDelegateTrampoline: No delegate for %@",  v35,  0xCu);
      uint64_t v38 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v36, 1LL, v38);
      swift_slowDealloc(v36, -1LL, -1LL);
      swift_slowDealloc(v35, -1LL, -1LL);

      return;
    }

LABEL_34:
    return;
  }

  if (!a2)
  {
    uint64_t v39 = Strong;
    if (qword_10099B810 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    uint64_t v40 = type metadata accessor for Logger(0LL);
    sub_10000A720(v40, (uint64_t)qword_100A2B188);
    uint64_t v41 = v6;
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v42 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      os_log_type_t v44 = (char **)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v43 = 138412290;
      unint64_t v76 = (unint64_t)v41;
      uint64_t v45 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v43 + 4, v43 + 12);
      *os_log_type_t v44 = v41;

      _os_log_impl( (void *)&_mh_execute_header,  v24,  v42,  "MessagingServiceDelegateTrampoline: No account for %@",  v43,  0xCu);
      uint64_t v46 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v44, 1LL, v46);
      swift_slowDealloc(v44, -1LL, -1LL);
      swift_slowDealloc(v43, -1LL, -1LL);
      uint64_t v47 = v39;
LABEL_23:
      swift_unknownObjectRelease(v47);

      return;
    }

    swift_unknownObjectRelease(v39);
    return;
  }

  uint64_t v73 = Strong;
  if (!a4)
  {
    uint64_t v48 = qword_10099B810;
    uint64_t v75 = a2;
    if (v48 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    uint64_t v49 = type metadata accessor for Logger(0LL);
    sub_10000A720(v49, (uint64_t)qword_100A2B188);
    uint64_t v50 = v6;
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v50);
    os_log_type_t v51 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v51))
    {
      id v52 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v53 = (char **)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v52 = 138412290;
      unint64_t v76 = (unint64_t)v50;
      uint64_t v54 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v52 + 4, v52 + 12);
      *uint64_t v53 = v50;

      _os_log_impl( (void *)&_mh_execute_header,  v24,  v51,  "MessagingServiceDelegateTrampoline: No identifier for %@",  v52,  0xCu);
      uint64_t v55 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v53, 1LL, v55);
      swift_slowDealloc(v53, -1LL, -1LL);
      swift_slowDealloc(v52, -1LL, -1LL);

      goto LABEL_22;
    }

    swift_unknownObjectRelease(v73);
    goto LABEL_34;
  }

  uint64_t v72 = *((void *)v18 + 1);
  id v20 = a2;
  swift_bridgeObjectRetain(a4);
  UUID.init(uuidString:)(a3, a4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14) != 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v56 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
    if (a1)
    {
      if (qword_10099B820 != -1) {
        uint64_t v56 = swift_once(&qword_10099B820, sub_1006937F8);
      }
      uint64_t v57 = qword_100A2B1B8;
      __chkstk_darwin(v56);
      uint64_t v69 = a1;
      uint64_t v58 = sub_100004AEC(&qword_1009A34B0);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10016CFAC, &v70 - 4, v57, (char *)&type metadata for () + 8, v58);
      unint64_t v59 = v76;
      unint64_t v60 = v77;
      id v61 = v20;
      id v62 = [v61 uniqueID];
      if (v62)
      {
        uint64_t v63 = v62;
        if (v60)
        {
          unint64_t v64 = v59;
        }

        else
        {
          unint64_t v60 = 0x80000001008563E0LL;
          unint64_t v64 = 0xD000000000000011LL;
        }

        uint64_t v65 = v73;
        uint64_t ObjectType = swift_getObjectType(v73);
        uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
        uint64_t v68 = v67;

        (*(void (**)(unint64_t, unint64_t, uint64_t, uint64_t, char *, void, char *, uint64_t, uint64_t))(v72 + 8))( v64,  v60,  v66,  v68,  v17,  v74 & 1,  v75,  ObjectType,  v72);
        swift_bridgeObjectRelease();

        swift_unknownObjectRelease(v65);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
        return;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    return;
  }

  sub_100015794((uint64_t)v13, &qword_10099D8A0);
  if (qword_10099B810 != -1) {
    swift_once(&qword_10099B810, sub_10069374C);
  }
  uint64_t v21 = type metadata accessor for Logger(0LL);
  sub_10000A720(v21, (uint64_t)qword_100A2B188);
  uint64_t v22 = v6;
  swift_bridgeObjectRetain(a4);
  unint64_t v23 = v22;
  uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.error.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc(22LL, -1LL);
    uint64_t v75 = (char *)v20;
    uint64_t v27 = v26;
    uint64_t v28 = (char **)swift_slowAlloc(8LL, -1LL);
    uint64_t v29 = swift_slowAlloc(32LL, -1LL);
    unint64_t v76 = v29;
    *(_DWORD *)uint64_t v27 = 136315394;
    swift_bridgeObjectRetain(a4);
    uint64_t v78 = sub_1003F11D4(a3, a4, (uint64_t *)&v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v27 + 4, v27 + 12);
    swift_bridgeObjectRelease_n(a4, 3LL);
    *(_WORD *)(v27 + 12) = 2112;
    uint64_t v78 = (uint64_t)v23;
    uint64_t v30 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v27 + 14, v27 + 22);
    *uint64_t v28 = v23;

    _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "MessagingServiceDelegateTrampoline: identifier [%s] is not a valid UUID for %@",  (uint8_t *)v27,  0x16u);
    uint64_t v31 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v28, 1LL, v31);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v27, -1LL, -1LL);

LABEL_22:
    uint64_t v47 = v73;
    goto LABEL_23;
  }

  swift_bridgeObjectRelease_n(a4, 2LL);
  swift_unknownObjectRelease(v73);
}

void sub_10016A26C(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v96 = a5;
  uint64_t v12 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v97 = (char *)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = &v6[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate];
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(&v6[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate]);
  if (!Strong)
  {
    if (qword_10099B810 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    uint64_t v32 = type metadata accessor for Logger(0LL);
    sub_10000A720(v32, (uint64_t)qword_100A2B188);
    uint64_t v97 = v6;
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v97);
    os_log_type_t v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v36 = (char **)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v35 = 138412290;
      unint64_t v98 = (unint64_t)v97;
      os_log_type_t v37 = v97;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v35 + 4, v35 + 12);
      *uint64_t v36 = v97;

      _os_log_impl( (void *)&_mh_execute_header,  v33,  v34,  "MessagingServiceDelegateTrampoline: No delegate for %@",  v35,  0xCu);
      uint64_t v38 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v36, 1LL, v38);
      swift_slowDealloc(v36, -1LL, -1LL);
      swift_slowDealloc(v35, -1LL, -1LL);

      return;
    }

LABEL_38:
    return;
  }

  if (!a2)
  {
    uint64_t v39 = Strong;
    if (qword_10099B810 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    uint64_t v40 = type metadata accessor for Logger(0LL);
    sub_10000A720(v40, (uint64_t)qword_100A2B188);
    uint64_t v41 = v6;
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v42 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      os_log_type_t v44 = (char **)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v43 = 138412290;
      unint64_t v98 = (unint64_t)v41;
      uint64_t v45 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v43 + 4, v43 + 12);
      *os_log_type_t v44 = v41;

      _os_log_impl( (void *)&_mh_execute_header,  v24,  v42,  "MessagingServiceDelegateTrampoline: No account for %@",  v43,  0xCu);
      uint64_t v46 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v44, 1LL, v46);
      swift_slowDealloc(v44, -1LL, -1LL);
      swift_slowDealloc(v43, -1LL, -1LL);
      uint64_t v47 = v39;
LABEL_23:
      swift_unknownObjectRelease(v47);

      return;
    }

    swift_unknownObjectRelease(v39);
    return;
  }

  uint64_t v95 = Strong;
  if (!a4)
  {
    uint64_t v48 = qword_10099B810;
    uint64_t v97 = a2;
    if (v48 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    uint64_t v49 = type metadata accessor for Logger(0LL);
    sub_10000A720(v49, (uint64_t)qword_100A2B188);
    uint64_t v50 = v6;
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v50);
    os_log_type_t v51 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v51))
    {
      id v52 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v53 = (char **)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v52 = 138412290;
      unint64_t v98 = (unint64_t)v50;
      uint64_t v54 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v52 + 4, v52 + 12);
      *uint64_t v53 = v50;

      _os_log_impl( (void *)&_mh_execute_header,  v24,  v51,  "MessagingServiceDelegateTrampoline: No identifier for %@",  v52,  0xCu);
      uint64_t v55 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v53, 1LL, v55);
      swift_slowDealloc(v53, -1LL, -1LL);
      swift_slowDealloc(v52, -1LL, -1LL);

      goto LABEL_22;
    }

    swift_unknownObjectRelease(v95);
    goto LABEL_38;
  }

  uint64_t v94 = *((void *)v18 + 1);
  id v20 = a2;
  swift_bridgeObjectRetain(a4);
  UUID.init(uuidString:)(a3, a4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15) == 1)
  {
    sub_100015794((uint64_t)v14, &qword_10099D8A0);
    if (qword_10099B810 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    sub_10000A720(v21, (uint64_t)qword_100A2B188);
    uint64_t v22 = v6;
    swift_bridgeObjectRetain(a4);
    unint64_t v23 = v22;
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc(22LL, -1LL);
      uint64_t v27 = (char **)swift_slowAlloc(8LL, -1LL);
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      uint64_t v97 = v20;
      uint64_t v29 = v28;
      unint64_t v98 = v28;
      *(_DWORD *)uint64_t v26 = 136315394;
      swift_bridgeObjectRetain(a4);
      uint64_t v100 = sub_1003F11D4(a3, a4, (uint64_t *)&v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease_n(a4, 3LL);
      *(_WORD *)(v26 + 12) = 2112;
      uint64_t v100 = (uint64_t)v23;
      uint64_t v30 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v26 + 14, v26 + 22);
      *uint64_t v27 = v23;

      _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "MessagingServiceDelegateTrampoline: identifier [%s] is not a valid UUID for %@",  (uint8_t *)v26,  0x16u);
      uint64_t v31 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v27, 1LL, v31);
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);

LABEL_22:
      uint64_t v47 = v95;
      goto LABEL_23;
    }

    swift_bridgeObjectRelease_n(a4, 2LL);
    swift_unknownObjectRelease(v95);

    return;
  }

  swift_bridgeObjectRelease();
  uint64_t v56 = (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(v97, v14, v15);
  if (!a6)
  {
    uint64_t v80 = IDSCopyLocalDeviceUniqueID(v56);
    if (!v80)
    {
LABEL_43:
      if (qword_10099B810 != -1) {
        swift_once(&qword_10099B810, sub_10069374C);
      }
      uint64_t v86 = type metadata accessor for Logger(0LL);
      uint64_t v87 = sub_10000A720(v86, (uint64_t)qword_100A2B188);
      uint64_t v88 = (os_log_s *)Logger.logObject.getter(v87);
      os_log_type_t v89 = static os_log_type_t.error.getter(v88);
      if (os_log_type_enabled(v88, v89))
      {
        uint64_t v90 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v90 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v88,  v89,  "Ignoring IDSCopyLocalDeviceUniqueID() failed to return a value!",  v90,  2u);
        swift_slowDealloc(v90, -1LL, -1LL);
      }

      swift_unknownObjectRelease(v95);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v97, v15);
      return;
    }

    uint64_t v81 = (void *)v80;
    uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
    uint64_t v84 = v83;

    unint64_t v98 = 0x3A656369766564LL;
    unint64_t v99 = 0xE700000000000000LL;
    v85._countAndFlagsBits = v82;
    v85._object = v84;
    String.append(_:)(v85);
    swift_bridgeObjectRelease();
    uint64_t v57 = v99;
    unint64_t v96 = v98;
    if (a1) {
      goto LABEL_26;
    }
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }

  uint64_t v57 = a6;
  if (!a1) {
    goto LABEL_42;
  }
LABEL_26:
  uint64_t v58 = qword_10099B820;
  swift_bridgeObjectRetain(a6);
  if (v58 != -1) {
    uint64_t v59 = swift_once(&qword_10099B820, sub_1006937F8);
  }
  uint64_t v60 = qword_100A2B1B8;
  __chkstk_darwin(v59);
  uint64_t v91 = a1;
  uint64_t v61 = sub_100004AEC(&qword_1009A34B0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10016CFAC, &v92 - 4, v60, (char *)&type metadata for () + 8, v61);
  unint64_t v62 = v98;
  if (!v99) {
    unint64_t v62 = 0xD000000000000011LL;
  }
  unint64_t v93 = v62;
  if (v99) {
    unint64_t v63 = v99;
  }
  else {
    unint64_t v63 = 0x80000001008563E0LL;
  }
  unint64_t v64 = v20;
  id v65 = [v64 uniqueID];
  if (v65)
  {
    uint64_t v66 = v65;
    uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
    uint64_t v69 = v68;

    uint64_t v70 = _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0(v96, v57);
    if (v72)
    {
      uint64_t v73 = v70;
      uint64_t v74 = v71;
      uint64_t v75 = v72;
      uint64_t v76 = v95;
      uint64_t ObjectType = swift_getObjectType(v95);
      unint64_t v78 = v63;
      uint64_t v79 = v97;
      (*(void (**)(unint64_t, unint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 16))( v93,  v78,  v67,  v69,  v97,  v73,  v74,  v75,  ObjectType,  v94);
      swift_bridgeObjectRelease();

      swift_unknownObjectRelease(v76);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v79, v15);
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t sub_10016AE10(uint64_t a1, uint64_t a2)
{
  uint64_t v64 = a1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  int64_t v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a2 || (uint64_t v7 = sub_10016B3E8(a2)) == 0)
  {
    if (qword_10099B810 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    uint64_t v14 = sub_10000A720(v3, (uint64_t)qword_100A2B188);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v14, v3);
    uint64_t v15 = swift_bridgeObjectRetain_n(a2, 2LL);
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t result = swift_slowAlloc(32LL, -1LL);
      unint64_t v67 = result;
      *(_DWORD *)uint64_t v18 = 136315138;
      if (!a2)
      {
LABEL_54:
        __break(1u);
        return result;
      }

      uint64_t v19 = result;
      unint64_t v66 = (unint64_t)(v18 + 4);
      swift_bridgeObjectRetain(a2);
      uint64_t v21 = Set.description.getter(v20, &type metadata for AnyHashable, &protocol witness table for AnyHashable);
      unint64_t v23 = v22;
      swift_bridgeObjectRelease();
      uint64_t v69 = sub_1003F11D4(v21, v23, (uint64_t *)&v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v66, v18 + 12);
      swift_bridgeObjectRelease_n(a2, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "MessagingServiceDelegateTrampoline: Unable to convert accounts to Set<IDSAccount> %s",  v18,  0xCu);
      swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a2, 2LL);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  uint64_t v8 = v7;
  unint64_t v66 = v7 & 0xC000000000000001LL;
  if ((v7 & 0xC000000000000001LL) != 0)
  {
    if (v7 >= 0) {
      v7 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v9 = __CocoaSet.count.getter(v7);
    if (v9) {
      goto LABEL_7;
    }
  }

  else
  {
    uint64_t v9 = *(void *)(v7 + 16);
    if (v9)
    {
LABEL_7:
      uint64_t v72 = _swiftEmptyArrayStorage;
      sub_100032CA8(0, v9 & ~(v9 >> 63), 0);
      if (v66)
      {
        if (v8 >= 0) {
          uint64_t v10 = v8 & 0xFFFFFFFFFFFFFF8LL;
        }
        else {
          uint64_t v10 = v8;
        }
        uint64_t result = __CocoaSet.startIndex.getter(v10);
        unsigned __int8 v13 = 1;
      }

      else
      {
        uint64_t result = sub_1006F6AD4(v8);
        unsigned __int8 v13 = v25 & 1;
      }

      uint64_t v69 = result;
      uint64_t v70 = v12;
      unsigned __int8 v71 = v13;
      if (v9 < 0)
      {
        __break(1u);
      }

      else
      {
        uint64_t v26 = v8 & 0xFFFFFFFFFFFFFF8LL;
        if (v8 < 0) {
          uint64_t v26 = v8;
        }
        uint64_t v65 = v26;
        while (1)
        {
          uint64_t v33 = v69;
          uint64_t v32 = v70;
          uint64_t v34 = v71;
          sub_1006F6860(v69, v70, v71, v8);
          uint64_t v36 = v35;
          uint64_t result = (uint64_t)[v35 uniqueID];
          if (!result) {
            break;
          }
          os_log_type_t v37 = (void *)result;
          uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
          uint64_t v40 = v39;

          uint64_t v41 = v72;
          uint64_t result = swift_isUniquelyReferenced_nonNull_native(v72);
          if ((result & 1) == 0)
          {
            uint64_t result = sub_100032CA8(0, v41[2] + 1LL, 1);
            uint64_t v41 = v72;
          }

          unint64_t v43 = v41[2];
          unint64_t v42 = v41[3];
          if (v43 >= v42 >> 1)
          {
            uint64_t result = sub_100032CA8(v42 > 1, v43 + 1, 1);
            uint64_t v41 = v72;
          }

          _OWORD v41[2] = v43 + 1;
          os_log_type_t v44 = &v41[2 * v43];
          v44[4] = v38;
          v44[5] = v40;
          if (v66)
          {
            if ((v34 & 1) == 0) {
              goto LABEL_52;
            }
            uint64_t v45 = __CocoaSet.Index.handleBitPattern.getter(v33, v32);
            if (v45) {
              uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v45);
            }
            else {
              uint64_t isUniquelyReferenced_nonNull_native = 1LL;
            }
            uint64_t v47 = sub_100004AEC(&qword_1009A34B8);
            uint64_t v48 = (void (*)(unint64_t *, void))Set.Index._asCocoa.modify(&v67, v47);
            __CocoaSet.formIndex(after:isUnique:)(v49, isUniquelyReferenced_nonNull_native, v65);
            v48(&v67, 0LL);
            if (!--v9)
            {
LABEL_38:
              sub_100086B14(v69, v70, v71);
              swift_bridgeObjectRelease();
              uint64_t v24 = v72;
              goto LABEL_39;
            }
          }

          else
          {
            uint64_t v27 = sub_1001FE5FC(v33, v32, v34, v8);
            uint64_t v29 = v28;
            char v31 = v30;
            sub_100086B14(v33, v32, v34);
            uint64_t v69 = v27;
            uint64_t v70 = v29;
            unsigned __int8 v71 = v31 & 1;
            if (!--v9) {
              goto LABEL_38;
            }
          }
        }
      }

      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
  }

  swift_bridgeObjectRelease();
  uint64_t v24 = _swiftEmptyArrayStorage;
LABEL_39:
  uint64_t v50 = sub_1006F149C((uint64_t)v24);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v64)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }

  if (qword_10099B820 != -1) {
    uint64_t result = swift_once(&qword_10099B820, sub_1006937F8);
  }
  uint64_t v51 = qword_100A2B1B8;
  __chkstk_darwin(result);
  *(&v62 - 2) = v52;
  uint64_t v53 = sub_100004AEC(&qword_1009A34B0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10016CFAC, &v62 - 4, v51, (char *)&type metadata for () + 8, v53);
  unint64_t v54 = v67;
  unint64_t v55 = v68;
  if (v68) {
    unint64_t v56 = v68;
  }
  else {
    unint64_t v56 = 0x80000001008563E0LL;
  }
  uint64_t v57 = v63 + OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v63 + OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate);
  if (Strong)
  {
    uint64_t v59 = Strong;
    if (!v55) {
      unint64_t v54 = 0xD000000000000011LL;
    }
    uint64_t v60 = *(void *)(v57 + 8);
    uint64_t ObjectType = swift_getObjectType(Strong);
    (*(void (**)(unint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v60 + 40))( v54,  v56,  v50,  ObjectType,  v60);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease(v59);
  }

  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

uint64_t sub_10016B3E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100004AEC(&qword_1009A34C0);
    uint64_t v3 = (void *)static _SetStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptySetSingleton;
  }

  uint64_t v29 = a1 + 56;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v28 = (unint64_t)(63 - v4) >> 6;
  uint64_t v7 = (char *)(v3 + 7);
  swift_bridgeObjectRetain(a1);
  uint64_t result = swift_retain();
  int64_t v9 = 0LL;
  while (1)
  {
    if (v6)
    {
      uint64_t v11 = (v6 - 1) & v6;
      unint64_t v12 = __clz(__rbit64(v6)) | (v9 << 6);
      int64_t v13 = v9;
      goto LABEL_28;
    }

    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }

    if (v14 >= v28) {
      goto LABEL_39;
    }
    unint64_t v15 = *(void *)(v29 + 8 * v14);
    int64_t v13 = v9 + 1;
    if (!v15)
    {
      int64_t v13 = v9 + 2;
      if (v9 + 2 >= v28) {
        goto LABEL_39;
      }
      unint64_t v15 = *(void *)(v29 + 8 * v13);
      if (!v15)
      {
        int64_t v13 = v9 + 3;
        if (v9 + 3 >= v28) {
          goto LABEL_39;
        }
        unint64_t v15 = *(void *)(v29 + 8 * v13);
        if (!v15)
        {
          int64_t v13 = v9 + 4;
          if (v9 + 4 >= v28) {
            goto LABEL_39;
          }
          unint64_t v15 = *(void *)(v29 + 8 * v13);
          if (!v15) {
            break;
          }
        }
      }
    }

uint64_t sub_10016B79C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a2)
  {
    uint64_t result = (uint64_t)sub_10061E9B4(a2);
    if (result)
    {
      if (!a1)
      {
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }

      uint64_t v10 = result;
      if (qword_10099B820 != -1) {
        uint64_t result = swift_once(&qword_10099B820, sub_1006937F8);
      }
      uint64_t v11 = qword_100A2B1B8;
      __chkstk_darwin(result);
      *(&v45 - 2) = a1;
      uint64_t v12 = sub_100004AEC(&qword_1009A34B0);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10016CFAC, &v45 - 4, v11, (char *)&type metadata for () + 8, v12);
      if (*((void *)&v49[0] + 1)) {
        unint64_t v13 = *(void *)&v49[0];
      }
      else {
        unint64_t v13 = 0xD000000000000011LL;
      }
      if (*((void *)&v49[0] + 1)) {
        unint64_t v14 = *((void *)&v49[0] + 1);
      }
      else {
        unint64_t v14 = 0x80000001008563E0LL;
      }
      uint64_t v15 = v2 + OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate;
      uint64_t Strong = swift_unknownObjectWeakLoadStrong(v15);
      if (!Strong)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }

      uint64_t v17 = Strong;
      uint64_t v18 = *(void *)(v15 + 8);
      if ((unint64_t)v10 >> 62)
      {
        if (v10 >= 0) {
          uint64_t v43 = v10 & 0xFFFFFFFFFFFFFF8LL;
        }
        else {
          uint64_t v43 = v10;
        }
        swift_bridgeObjectRetain(v10);
        uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v43);
        swift_bridgeObjectRelease();
        if (v19) {
          goto LABEL_15;
        }
      }

      else
      {
        uint64_t v19 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        if (v19)
        {
LABEL_15:
          uint64_t v45 = v18;
          uint64_t v46 = (uint8_t *)v13;
          uint64_t v47 = (char *)v14;
          uint64_t v48 = _swiftEmptyArrayStorage;
          uint64_t result = sub_100032CC4(0, v19 & ~(v19 >> 63), 0);
          if ((v19 & 0x8000000000000000LL) == 0)
          {
            uint64_t v20 = 0LL;
            uint64_t v21 = v48;
            do
            {
              if ((v10 & 0xC000000000000001LL) != 0) {
                id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v10);
              }
              else {
                id v22 = *(id *)(v10 + 8 * v20 + 32);
              }
              sub_1005EE064(v22, (uint64_t)v49);
              uint64_t v48 = v21;
              unint64_t v24 = v21[2];
              unint64_t v23 = v21[3];
              if (v24 >= v23 >> 1)
              {
                sub_100032CC4(v23 > 1, v24 + 1, 1);
                uint64_t v21 = v48;
              }

              ++v20;
              v21[2] = v24 + 1;
              unint64_t v25 = &v21[20 * v24];
              __int128 v26 = v49[1];
              v25[2] = v49[0];
              v25[3] = v26;
              __int128 v27 = v49[2];
              __int128 v28 = v49[3];
              __int128 v29 = v49[5];
              v25[6] = v49[4];
              v25[7] = v29;
              v25[4] = v27;
              void v25[5] = v28;
              __int128 v30 = v49[6];
              __int128 v31 = v49[7];
              __int128 v32 = v49[9];
              v25[10] = v49[8];
              v25[11] = v32;
              _BYTE v25[8] = v30;
              v25[9] = v31;
            }

            while (v19 != v20);
            swift_bridgeObjectRelease();
            unint64_t v14 = (unint64_t)v47;
            unint64_t v13 = (unint64_t)v46;
            uint64_t v18 = v45;
            goto LABEL_37;
          }

          __break(1u);
          goto LABEL_39;
        }
      }

      swift_bridgeObjectRelease();
      uint64_t v21 = _swiftEmptyArrayStorage;
LABEL_37:
      uint64_t ObjectType = swift_getObjectType(v17);
      (*(void (**)(unint64_t, unint64_t, void *, uint64_t, uint64_t))(v18 + 48))( v13,  v14,  v21,  ObjectType,  v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease(v17);
    }
  }

  if (qword_10099B810 != -1) {
    swift_once(&qword_10099B810, sub_10069374C);
  }
  uint64_t v33 = sub_10000A720(v5, (uint64_t)qword_100A2B188);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v33, v5);
  uint64_t v34 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v35 = (void *)Logger.logObject.getter(v34);
  os_log_type_t v36 = static os_log_type_t.error.getter(v35);
  if (!os_log_type_enabled((os_log_t)v35, v36))
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  os_log_type_t v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t result = swift_slowAlloc(32LL, -1LL);
  *(void *)&v49[0] = result;
  *(_DWORD *)os_log_type_t v37 = 136315138;
  if (a2)
  {
    uint64_t v38 = result;
    uint64_t v46 = v37 + 4;
    swift_bridgeObjectRetain(a2);
    uint64_t v47 = (char *)&type metadata for Any + 8;
    uint64_t v40 = Array.description.getter(v39, (char *)&type metadata for Any + 8);
    unint64_t v42 = v41;
    swift_bridgeObjectRelease();
    uint64_t v48 = (void *)sub_1003F11D4(v40, v42, (uint64_t *)v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v46, v37 + 12);
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v35,  v36,  "MessagingServiceDelegateTrampoline: Unable to convert devices to [IDSDevice] %s",  v37,  0xCu);
    swift_arrayDestroy(v38, 1LL, v47);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v37, -1LL, -1LL);

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

uint64_t sub_10016BC98(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a2)
  {
    uint64_t result = (uint64_t)sub_10061E9B4(a2);
    if (result)
    {
      if (!a1)
      {
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }

      uint64_t v10 = result;
      if (qword_10099B820 != -1) {
        uint64_t result = swift_once(&qword_10099B820, sub_1006937F8);
      }
      uint64_t v11 = qword_100A2B1B8;
      __chkstk_darwin(result);
      *(&v45 - 2) = a1;
      uint64_t v12 = sub_100004AEC(&qword_1009A34B0);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10016C394, &v45 - 4, v11, (char *)&type metadata for () + 8, v12);
      if (*((void *)&v49[0] + 1)) {
        unint64_t v13 = *(void *)&v49[0];
      }
      else {
        unint64_t v13 = 0xD000000000000011LL;
      }
      if (*((void *)&v49[0] + 1)) {
        unint64_t v14 = *((void *)&v49[0] + 1);
      }
      else {
        unint64_t v14 = 0x80000001008563E0LL;
      }
      uint64_t v15 = v2 + OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate;
      uint64_t Strong = swift_unknownObjectWeakLoadStrong(v15);
      if (!Strong)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }

      uint64_t v17 = Strong;
      uint64_t v18 = *(void *)(v15 + 8);
      if ((unint64_t)v10 >> 62)
      {
        if (v10 >= 0) {
          uint64_t v43 = v10 & 0xFFFFFFFFFFFFFF8LL;
        }
        else {
          uint64_t v43 = v10;
        }
        swift_bridgeObjectRetain(v10);
        uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v43);
        swift_bridgeObjectRelease();
        if (v19) {
          goto LABEL_15;
        }
      }

      else
      {
        uint64_t v19 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        if (v19)
        {
LABEL_15:
          uint64_t v45 = v18;
          uint64_t v46 = (uint8_t *)v13;
          uint64_t v47 = (char *)v14;
          uint64_t v48 = _swiftEmptyArrayStorage;
          uint64_t result = sub_100032CC4(0, v19 & ~(v19 >> 63), 0);
          if ((v19 & 0x8000000000000000LL) == 0)
          {
            uint64_t v20 = 0LL;
            uint64_t v21 = v48;
            do
            {
              if ((v10 & 0xC000000000000001LL) != 0) {
                id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v10);
              }
              else {
                id v22 = *(id *)(v10 + 8 * v20 + 32);
              }
              sub_1005EE064(v22, (uint64_t)v49);
              uint64_t v48 = v21;
              unint64_t v24 = v21[2];
              unint64_t v23 = v21[3];
              if (v24 >= v23 >> 1)
              {
                sub_100032CC4(v23 > 1, v24 + 1, 1);
                uint64_t v21 = v48;
              }

              ++v20;
              v21[2] = v24 + 1;
              unint64_t v25 = &v21[20 * v24];
              __int128 v26 = v49[1];
              v25[2] = v49[0];
              v25[3] = v26;
              __int128 v27 = v49[2];
              __int128 v28 = v49[3];
              __int128 v29 = v49[5];
              v25[6] = v49[4];
              v25[7] = v29;
              v25[4] = v27;
              void v25[5] = v28;
              __int128 v30 = v49[6];
              __int128 v31 = v49[7];
              __int128 v32 = v49[9];
              v25[10] = v49[8];
              v25[11] = v32;
              _BYTE v25[8] = v30;
              v25[9] = v31;
            }

            while (v19 != v20);
            swift_bridgeObjectRelease();
            unint64_t v14 = (unint64_t)v47;
            unint64_t v13 = (unint64_t)v46;
            uint64_t v18 = v45;
            goto LABEL_37;
          }

          __break(1u);
          goto LABEL_39;
        }
      }

      swift_bridgeObjectRelease();
      uint64_t v21 = _swiftEmptyArrayStorage;
LABEL_37:
      uint64_t ObjectType = swift_getObjectType(v17);
      (*(void (**)(unint64_t, unint64_t, void *, uint64_t, uint64_t))(v18 + 56))( v13,  v14,  v21,  ObjectType,  v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease(v17);
    }
  }

  if (qword_10099B810 != -1) {
    swift_once(&qword_10099B810, sub_10069374C);
  }
  uint64_t v33 = sub_10000A720(v5, (uint64_t)qword_100A2B188);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v33, v5);
  uint64_t v34 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v35 = (void *)Logger.logObject.getter(v34);
  os_log_type_t v36 = static os_log_type_t.error.getter(v35);
  if (!os_log_type_enabled((os_log_t)v35, v36))
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  os_log_type_t v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t result = swift_slowAlloc(32LL, -1LL);
  *(void *)&v49[0] = result;
  *(_DWORD *)os_log_type_t v37 = 136315138;
  if (a2)
  {
    uint64_t v38 = result;
    uint64_t v46 = v37 + 4;
    swift_bridgeObjectRetain(a2);
    uint64_t v47 = (char *)&type metadata for Any + 8;
    uint64_t v40 = Array.description.getter(v39, (char *)&type metadata for Any + 8);
    unint64_t v42 = v41;
    swift_bridgeObjectRelease();
    uint64_t v48 = (void *)sub_1003F11D4(v40, v42, (uint64_t *)v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v46, v37 + 12);
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v35,  v36,  "MessagingServiceDelegateTrampoline: Unable to convert devices to [IDSDevice] %s",  v37,  0xCu);
    swift_arrayDestroy(v38, 1LL, v47);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v37, -1LL, -1LL);

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

uint64_t sub_10016C194(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void *, uint64_t))
{
  if (a4) {
    uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a4, (char *)&type metadata for Any + 8);
  }
  else {
    uint64_t v8 = 0LL;
  }
  id v9 = a3;
  id v10 = a1;
  a5(a3, v8);

  return swift_bridgeObjectRelease(v8);
}

id sub_10016C334()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MessagingServiceDelegateTrampoline();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for MessagingServiceDelegateTrampoline()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd34MessagingServiceDelegateTrampoline);
}

uint64_t sub_10016C394@<X0>(void *a1@<X8>)
{
  return sub_100693840(*(void **)(v1 + 16), a1);
}

uint64_t sub_10016C3AC(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain(a1);
  sub_10001581C(a1 + 32, (uint64_t)&v49, (uint64_t *)&unk_1009A34E0);
  uint64_t v7 = v49;
  uint64_t v8 = v50;
  uint64_t v47 = v49;
  uint64_t v48 = v50;
  sub_10006A358(v51, v46);
  id v9 = (void *)*a3;
  unint64_t v11 = sub_10030CF14(v7, v8);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13)) {
    goto LABEL_23;
  }
  char v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0) {
        goto LABEL_10;
      }
    }

    else
    {
      sub_1000634E4();
      if ((v15 & 1) != 0) {
        goto LABEL_10;
      }
    }

uint64_t sub_10016C77C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10016C7B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MessagingMessageContext(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10016C7F4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MessagingMessageContext(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_10016C830(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (!a1)
  {
    if (qword_10099B810 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    sub_10000A720(v24, (uint64_t)qword_100A2B188);
    uint64_t v63 = v6;
    uint64_t v7 = (void *)Logger.logObject.getter(v63);
    os_log_type_t v25 = static os_log_type_t.error.getter(v7);
    if (!os_log_type_enabled((os_log_t)v7, v25))
    {

      goto LABEL_27;
    }

    uint64_t v26 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    __int128 v27 = (char **)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v26 = 138412290;
    uint64_t v65 = v63;
    uint64_t v28 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v26 + 4, v26 + 12);
    *__int128 v27 = v63;

    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v7,  v25,  "MessagingServiceDelegateTrampoline: No account for %@",  v26,  0xCu);
    uint64_t v29 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v27, 1LL, v29);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v26, -1LL, -1LL);
LABEL_24:

    return;
  }

  uint64_t v7 = a2;
  if (!a2)
  {
    uint64_t v30 = qword_10099B810;
    uint64_t v63 = a1;
    if (v30 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    uint64_t v31 = type metadata accessor for Logger(0LL);
    sub_10000A720(v31, (uint64_t)qword_100A2B188);
    char v32 = v6;
    uint64_t v7 = (void *)Logger.logObject.getter(v32);
    os_log_type_t v33 = static os_log_type_t.error.getter(v7);
    if (!os_log_type_enabled((os_log_t)v7, v33))
    {

      goto LABEL_27;
    }

    BOOL v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v35 = (char **)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)BOOL v34 = 138412290;
    uint64_t v65 = v32;
    char v36 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v34 + 4, v34 + 12);
    *uint64_t v35 = v32;

    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v7,  v33,  "MessagingServiceDelegateTrampoline: No session for %@",  v34,  0xCu);
    uint64_t v37 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v35, 1LL, v37);
    swift_slowDealloc(v35, -1LL, -1LL);
    swift_slowDealloc(v34, -1LL, -1LL);

    goto LABEL_24;
  }

  uint64_t v63 = (char *)a1;
  if (!a4)
  {
    id v38 = a1;
    id v39 = v7;
    goto LABEL_20;
  }

  id v61 = a1;
  id v62 = v7;
  swift_bridgeObjectRetain(a4);
  uint64_t v12 = _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0(a3, a4);
  if (!v14)
  {
LABEL_20:
    if (qword_10099B810 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    uint64_t v40 = type metadata accessor for Logger(0LL);
    sub_10000A720(v40, (uint64_t)qword_100A2B188);
    uint64_t v41 = v6;
    Swift::String v42 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v43 = static os_log_type_t.error.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      unint64_t v45 = (char **)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v44 = 138412290;
      uint64_t v65 = v41;
      uint64_t v46 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v44 + 4, v44 + 12);
      char *v45 = v41;

      _os_log_impl( (void *)&_mh_execute_header,  v42,  v43,  "MessagingServiceDelegateTrampoline: No fromID for %@",  v44,  0xCu);
      uint64_t v47 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v45, 1LL, v47);
      swift_slowDealloc(v45, -1LL, -1LL);
      swift_slowDealloc(v44, -1LL, -1LL);

      goto LABEL_24;
    }

LABEL_27:
    return;
  }

  uint64_t v15 = v14;
  if (a6 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    if (qword_10099B810 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_10000A720(v16, (uint64_t)qword_100A2B188);
    char v17 = v6;
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v21 = (char **)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v20 = 138412290;
      uint64_t v65 = v17;
      id v22 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v20 + 4, v20 + 12);
      void *v21 = v17;

      _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "MessagingServiceDelegateTrampoline: No context for %@",  v20,  0xCu);
      uint64_t v23 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v21, 1LL, v23);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);

      return;
    }

    goto LABEL_33;
  }

  uint64_t v48 = v12;
  uint64_t v49 = v13;
  uint64_t v50 = &v6[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate];
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(&v6[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate]);
  if (!Strong)
  {
    swift_bridgeObjectRelease();
LABEL_33:

    return;
  }

  uint64_t v52 = Strong;
  uint64_t v60 = *((void *)v50 + 1);
  id v53 = v61;
  sub_100018BE4(a5, a6);
  id v64 = v53;
  id v54 = [v53 uniqueID];
  if (v54)
  {
    unint64_t v55 = v54;
    uint64_t ObjectType = swift_getObjectType(v52);
    uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
    uint64_t v59 = v58;

    (*(void (**)(uint64_t, uint64_t, id, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v60 + 64))( v57,  v59,  v62,  v48,  v49,  v15,  a5,  a6,  ObjectType,  v60);
    swift_unknownObjectRelease(v52);

    sub_1000182F0(a5, a6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10016CF88(uint64_t a1)
{
  return a1;
}

uint64_t sub_10016CFAC@<X0>(void *a1@<X8>)
{
  return sub_10016C394(a1);
}

uint64_t sub_10016CFC0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10016CFF4 + 4 * a0_0[a1]))( 0x657461446E616373LL,  0xE800000000000000LL);
}

uint64_t sub_10016CFF4()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_10016D014()
{
  return 0x797469726F697270LL;
}

unint64_t sub_10016D028()
{
  return 0xD000000000000010LL;
}

uint64_t sub_10016D060()
{
  return 0x656372756F73LL;
}

uint64_t sub_10016D074()
{
  return 0x7942737574617473LL;
}

unint64_t sub_10016D090()
{
  return 0xD000000000000015LL;
}

uint64_t sub_10016D0B8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A3728);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v27[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 3];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_10016EE04();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for BeaconPayloadFile.MetaData.CodingKeys,  &type metadata for BeaconPayloadFile.MetaData.CodingKeys,  v11,  v9,  v10);
  char v35 = 0;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = sub_100007864( &qword_10099DA40,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v35, v5, v12, v13);
  if (!v2)
  {
    uint64_t v14 = (int *)type metadata accessor for BeaconPayloadFile.MetaData(0LL);
    uint64_t v15 = v3 + v14[5];
    char v34 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v34, v5, v12, v13);
    uint64_t v16 = *(unsigned __int8 *)(v3 + v14[6]);
    char v33 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v33, v5);
    char v32 = *(_BYTE *)(v3 + v14[7]);
    char v31 = 3;
    unint64_t v17 = sub_10016EF50();
    KeyedEncodingContainer.encode<A>(_:forKey:)( &v32,  &v31,  v5,  &type metadata for BeaconPayloadFile.ObservationValue,  v17);
    uint64_t v18 = (uint64_t *)(v3 + v14[8]);
    uint64_t v19 = *v18;
    uint64_t v20 = *((unsigned __int8 *)v18 + 8);
    char v30 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, &v30, v5);
    char v29 = *(_BYTE *)(v3 + v14[9]);
    char v28 = 5;
    unint64_t v21 = sub_10016EF94();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v29, &v28, v5, &type metadata for LocationSource, v21);
    uint64_t v22 = *(unsigned __int8 *)(v3 + v14[10]);
    v27[2] = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v22);
    uint64_t v23 = *(unsigned __int8 *)(v3 + v14[11]);
    v27[1] = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v23);
    uint64_t v24 = *(unsigned __int8 *)(v3 + v14[12]);
    v27[0] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v27, v5);
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10016D38C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v40 = type metadata accessor for Date(0LL);
  uint64_t v37 = *(void *)(v40 - 8);
  uint64_t v3 = __chkstk_darwin(v40);
  uint64_t v5 = (int **)((char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v3);
  id v38 = (int **)((char *)&v34 - v6);
  uint64_t v39 = sub_100004AEC(&qword_1009A3708);
  uint64_t v7 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for BeaconPayloadFile.MetaData(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_100012ED8(a1, v14);
  unint64_t v15 = sub_10016EE04();
  uint64_t v41 = v9;
  uint64_t v16 = v42;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for BeaconPayloadFile.MetaData.CodingKeys,  &type metadata for BeaconPayloadFile.MetaData.CodingKeys,  v15,  v14,  v13);
  if (v16) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  char v34 = (int *)v10;
  uint64_t v35 = v7;
  uint64_t v17 = (uint64_t)v12;
  Swift::String v42 = a1;
  BYTE6(v47) = 0;
  uint64_t v18 = sub_100007864( &qword_10099DA70,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v19 = v38;
  uint64_t v20 = v39;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v38, v40, (char *)&v47 + 6, v39, v40, v18);
  unint64_t v21 = *(void (**)(uint64_t, void *, uint64_t))(v37 + 32);
  uint64_t v22 = v19;
  uint64_t v23 = v40;
  v21(v17, v22, v40);
  BYTE5(v47) = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v5, v23, (char *)&v47 + 5, v20, v23, v18);
  uint64_t v24 = v34;
  v21(v17 + v34[5], v5, v23);
  BYTE4(v47) = 2;
  *(_BYTE *)(v17 + v24[6]) = KeyedDecodingContainer.decode(_:forKey:)((char *)&v47 + 4, v20) & 1;
  BYTE2(v47) = 3;
  unint64_t v25 = sub_10016EE48();
  KeyedDecodingContainer.decode<A>(_:forKey:)( (uint64_t *)((char *)&v47 + 3),  &type metadata for BeaconPayloadFile.ObservationValue,  (char *)&v47 + 2,  v39,  &type metadata for BeaconPayloadFile.ObservationValue,  v25);
  uint64_t v26 = v42;
  uint64_t v27 = v35;
  *(_BYTE *)(v17 + v24[7]) = BYTE3(v47);
  BYTE1(v47) = 4;
  uint64_t v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)((char *)&v47 + 1, v39);
  uint64_t v29 = v17 + v24[8];
  *(void *)uint64_t v29 = v28;
  *(_BYTE *)(v29 + 8) = v30 & 1;
  char v46 = 5;
  unint64_t v31 = sub_10016EE8C();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v47,  &type metadata for LocationSource,  &v46,  v39,  &type metadata for LocationSource,  v31);
  *(_BYTE *)(v17 + v24[9]) = v47;
  char v45 = 6;
  *(_BYTE *)(v17 + v24[10]) = KeyedDecodingContainer.decode(_:forKey:)(&v45, v39);
  char v44 = 7;
  *(_BYTE *)(v17 + v24[11]) = KeyedDecodingContainer.decode(_:forKey:)(&v44, v39);
  char v43 = 8;
  uint64_t v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v43, v39);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v41, v39);
  *(_BYTE *)(v17 + v24[12]) = v32;
  sub_10016EED0(v17, v36);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v26);
  return sub_10016EF14(v17);
}

uint64_t sub_10016D85C()
{
  return sub_10016CFC0(*v0);
}

uint64_t sub_10016D864@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10016F3F8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10016D888(uint64_t a1)
{
  unint64_t v2 = sub_10016EE04();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10016D8B0(uint64_t a1)
{
  unint64_t v2 = sub_10016EE04();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10016D8D8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10016D38C(a1, a2);
}

uint64_t sub_10016D8EC(void *a1)
{
  return sub_10016D0B8(a1);
}

uint64_t sub_10016D904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10016F79C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10016D960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10016F79C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t sub_10016D9AC@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10016F3E8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10016D9D4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v29 - v9;
  uint64_t v11 = v1 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___metaData;
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099FA70);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
  uint64_t v13 = v2 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___scanDate;
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099D720);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
  uint64_t v15 = v2 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_fileURL;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))( v2 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_fileURL,  a1,  v4);
  uint64_t v16 = sub_10016EC14();
  if (v17 >> 60 == 15)
  {
    uint64_t v18 = type metadata accessor for BeaconPayloadFile(0LL);
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v19(a1, v4);
    v19(v15, v4);
    sub_100015794(v2 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___metaData, &qword_10099FA98);
    sub_100015794( v2 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___scanDate,  (uint64_t *)&unk_10099D890);
    swift_deallocPartialClassInstance( v2,  v18,  *(unsigned int *)(*(void *)v2 + 48LL),  *(unsigned __int16 *)(*(void *)v2 + 52LL));
    return 0LL;
  }

  else
  {
    uint64_t v20 = v16;
    unint64_t v21 = v17;
    uint64_t v22 = (uint64_t *)(v2 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_hashedAdvertisement);
    *uint64_t v22 = v16;
    v22[1] = v17;
    uint64_t v23 = sub_10001736C(v16, v17);
    uint64_t Path = URL.deletingLastPathComponent()(v23);
    URL.deletingLastPathComponent()(Path);
    sub_1000182F0(v20, v21);
    unint64_t v25 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v25(a1, v4);
    v25((uint64_t)v8, v4);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v2 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_rootURL,  v10,  v4);
    uint64_t v26 = v2 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_initializedWithMetaData;
    uint64_t v27 = type metadata accessor for BeaconPayloadFile.MetaData(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(v26, 1LL, 1LL, v27);
  }

  return v2;
}

uint64_t sub_10016DC28@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100004AEC(&qword_10099FA98);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v4);
  uint64_t v8 = &v13[-v7];
  uint64_t v9 = v1 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___metaData;
  swift_beginAccess(v1 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___metaData, v14, 0LL, 0LL);
  sub_10001581C(v9, (uint64_t)v8, &qword_10099FA98);
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099FA70);
  uint64_t v11 = *(void *)(v10 - 8);
  sub_100015794((uint64_t)v8, &qword_10099FA98);
  sub_10016DDAC(v1, a1);
  sub_10001581C((uint64_t)a1, (uint64_t)v6, (uint64_t *)&unk_10099FA70);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v11 + 56))(v6, 0LL, 1LL, v10);
  swift_beginAccess(v9, v13, 33LL, 0LL);
  sub_1000D4D50((uint64_t)v6, v9, &qword_10099FA98);
  return swift_endAccess(v13);
}

uint64_t sub_10016DDAC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099FA70);
  __chkstk_darwin(v4);
  uint64_t v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = type metadata accessor for BeaconPayloadFile.MetaData(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_10001581C( a1 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_initializedWithMetaData,  (uint64_t)v6,  (uint64_t *)&unk_10099FA70);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
  {
    sub_100015794((uint64_t)v6, (uint64_t *)&unk_10099FA70);
    uint64_t v12 = URL.extendedAttribute(name:)(0xD000000000000026LL, 0x8000000100856590LL);
    unint64_t v14 = v13;
    uint64_t v15 = type metadata accessor for PropertyListDecoder(0LL);
    swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
    uint64_t v16 = PropertyListDecoder.init()();
    uint64_t v17 = sub_100007864( &qword_1009A3738,  type metadata accessor for BeaconPayloadFile.MetaData,  (uint64_t)&unk_1007EF4E8);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(a2, v7, v12, v14, v7, v17);
    sub_100016F9C(v12, v14);
    swift_release(v16);
  }

  else
  {
    sub_10016EFD8((uint64_t)v6, (uint64_t)v10);
    sub_10016EFD8((uint64_t)v10, (uint64_t)a2);
  }

  return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a2, 0LL, 1LL, v7);
}

uint64_t sub_10016DFB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for BeaconPayloadFile.MetaData(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v24 = (uint64_t)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099FA70);
  __chkstk_darwin(v6);
  uint64_t v8 = (uint64_t *)((char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099D890);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  unint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = v1 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___scanDate;
  swift_beginAccess(v1 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___scanDate, v26, 0LL, 0LL);
  sub_10001581C(v15, (uint64_t)v14, (uint64_t *)&unk_10099D890);
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v17 = *(void *)(v16 - 8);
  sub_100015794((uint64_t)v14, (uint64_t *)&unk_10099D890);
  sub_10016DC28(v8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v4 + 48))(v8, 1LL, v3))
  {
    sub_100015794((uint64_t)v8, (uint64_t *)&unk_10099FA70);
    uint64_t v18 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(a1, 1LL, 1LL, v18);
  }

  else
  {
    uint64_t v20 = v24;
    sub_10016EED0((uint64_t)v8, v24);
    sub_100015794((uint64_t)v8, (uint64_t *)&unk_10099FA70);
    uint64_t v21 = type metadata accessor for Date(0LL);
    uint64_t v22 = *(void *)(v21 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(a1, v20, v21);
    sub_10016EF14(v20);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(a1, 0LL, 1LL, v21);
  }

  sub_10001581C(a1, (uint64_t)v12, (uint64_t *)&unk_10099D720);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v12, 0LL, 1LL, v16);
  swift_beginAccess(v15, v25, 33LL, 0LL);
  sub_1000D4D50((uint64_t)v12, v15, (uint64_t *)&unk_10099D890);
  return swift_endAccess(v25);
}

uint64_t sub_10016E260()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_rootURL;
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL);
  v3(v1, v2);
  sub_100016F9C( *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_hashedAdvertisement),  *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_hashedAdvertisement + 8));
  v3(v0 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_fileURL, v2);
  sub_100015794( v0 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_initializedWithMetaData,  (uint64_t *)&unk_10099FA70);
  sub_100015794(v0 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___metaData, &qword_10099FA98);
  sub_100015794( v0 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___scanDate,  (uint64_t *)&unk_10099D890);
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10016E32C()
{
  return type metadata accessor for BeaconPayloadFile(0LL);
}

uint64_t type metadata accessor for BeaconPayloadFile(uint64_t a1)
{
  return sub_10008BED8(a1, (uint64_t *)&unk_1009A3548, (uint64_t)&nominal type descriptor for BeaconPayloadFile);
}

void sub_10016E348(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v10[0] = *(void *)(v2 - 8) + 64LL;
    v10[1] = &unk_1007EF3F8;
    v10[2] = v10[0];
    sub_10016E430(319LL);
    if (v5 <= 0x3F)
    {
      v10[3] = *(void *)(v4 - 8) + 64LL;
      sub_1000B991C(319LL, &qword_1009A3560, (uint64_t *)&unk_10099FA70);
      if (v7 <= 0x3F)
      {
        v10[4] = *(void *)(v6 - 8) + 64LL;
        sub_1000B991C(319LL, (unint64_t *)&unk_1009A3568, (uint64_t *)&unk_10099D720);
        if (v9 <= 0x3F)
        {
          v10[5] = *(void *)(v8 - 8) + 64LL;
          swift_updateClassMetadata2(a1, 256LL, 6LL, v10, a1 + 80);
        }
      }
    }
  }

void sub_10016E430(uint64_t a1)
{
  if (!qword_1009A3558)
  {
    uint64_t v2 = type metadata accessor for BeaconPayloadFile.MetaData(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1009A3558);
    }
  }

uint64_t type metadata accessor for BeaconPayloadFile.MetaData(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009A36B0, (uint64_t)&nominal type descriptor for BeaconPayloadFile.MetaData);
}

void *sub_10016E498(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (void *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    uint64_t v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    v8((void *)((char *)a1 + a3[5]), (void *)((char *)a2 + a3[5]), v7);
    uint64_t v9 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    uint64_t v10 = a3[8];
    uint64_t v11 = a3[9];
    uint64_t v12 = (char *)a1 + v10;
    uint64_t v13 = (char *)a2 + v10;
    v12[8] = v13[8];
    *(void *)uint64_t v12 = *(void *)v13;
    *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
    uint64_t v14 = a3[11];
    *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    *((_BYTE *)a1 + v1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = *((_BYTE *)a2 + v14);
    *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  }

  return a1;
}

uint64_t sub_10016E58C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v6(a1, v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + *(int *)(a2 + 20), v4);
}

uint64_t sub_10016E5F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  uint64_t v9 = a3[8];
  uint64_t v10 = a3[9];
  uint64_t v11 = a1 + v9;
  uint64_t v12 = a2 + v9;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  uint64_t v13 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_10016E6BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  uint64_t v8 = a3[8];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  char v11 = *(_BYTE *)(v10 + 8);
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = v11;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_10016E790(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  uint64_t v9 = a3[8];
  uint64_t v10 = a3[9];
  uint64_t v11 = a1 + v9;
  uint64_t v12 = a2 + v9;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  uint64_t v13 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_10016E858(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  uint64_t v9 = a3[8];
  uint64_t v10 = a3[9];
  uint64_t v11 = a1 + v9;
  uint64_t v12 = a2 + v9;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  *(void *)uint64_t v11 = *(void *)v12;
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  uint64_t v13 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_10016E920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10016E92C);
}

uint64_t sub_10016E92C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unsigned int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 2) {
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10016E9B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10016E9C4);
}

uint64_t sub_10016E9C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + swift_release(*(void *)(v0 + 24)) = a2 + 1;
  return result;
}

uint64_t sub_10016EA3C(uint64_t a1)
{
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = v4[0];
    v4[2] = &unk_1007EF420;
    void v4[3] = &unk_1007EF438;
    v4[4] = &unk_1007EF450;
    v4[5] = &unk_1007EF468;
    v4[6] = (char *)&value witness table for Builtin.Int8 + 64;
    v4[7] = (char *)&value witness table for Builtin.Int8 + 64;
    v4[8] = &unk_1007EF480;
    swift_initStructMetadata(a1, 256LL, 9LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_10016EAE8(uint64_t a1, uint64_t a2)
{
  if ((static Date.== infix(_:_:)(a1, a2) & 1) == 0) {
    return 0LL;
  }
  uint64_t v4 = (int *)type metadata accessor for BeaconPayloadFile.MetaData(0LL);
  if ((static Date.== infix(_:_:)(a1 + v4[5], a2 + v4[5]) & 1) == 0
    || *(unsigned __int8 *)(a1 + v4[6]) != *(unsigned __int8 *)(a2 + v4[6])
    || *(unsigned __int8 *)(a1 + v4[7]) != *(unsigned __int8 *)(a2 + v4[7]))
  {
    return 0LL;
  }

  uint64_t v5 = v4[8];
  uint64_t v6 = (double *)(a1 + v5);
  char v7 = *(_BYTE *)(a1 + v5 + 8);
  uint64_t v8 = (double *)(a2 + v5);
  int v9 = *(unsigned __int8 *)(a2 + v5 + 8);
  if ((v7 & 1) == 0)
  {
    if (*v6 != *v8) {
      LOBYTE(v9) = 1;
    }
    if ((v9 & 1) != 0) {
      return 0LL;
    }
LABEL_11:
    if (*(unsigned __int8 *)(a1 + v4[9]) != *(unsigned __int8 *)(a2 + v4[9])
      || *(unsigned __int8 *)(a1 + v4[10]) != *(unsigned __int8 *)(a2 + v4[10])
      || *(unsigned __int8 *)(a1 + v4[11]) != *(unsigned __int8 *)(a2 + v4[11]))
    {
      return 0LL;
    }

    uint64_t v10 = v4[12];
    int v11 = *(unsigned __int8 *)(a1 + v10);
    int v12 = *(unsigned __int8 *)(a2 + v10);
    if (v11 == 2)
    {
      if (v12 != 2) {
        return 0LL;
      }
    }

    else
    {
      BOOL v13 = (v11 & 1) == 0;
      if (v12 == 2 || ((v13 ^ v12) & 1) == 0) {
        return 0LL;
      }
    }

    return 1LL;
  }

  if (v9) {
    goto LABEL_11;
  }
  return 0LL;
}

uint64_t sub_10016EC14()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t Path = URL.deletingLastPathComponent()(v2);
  uint64_t v6 = URL.lastPathComponent.getter(Path);
  uint64_t v8 = v7;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  v16[0] = v6;
  v16[1] = v8;
  unint64_t v9 = sub_1000155F8();
  uint64_t v10 = Data.init<A>(hexString:)(v16, &type metadata for String, v9);
  if (v11 >> 60 == 15) {
    return 0LL;
  }
  uint64_t v12 = v10;
  unint64_t v13 = v11;
  sub_10001736C(v10, v11);
  sub_1001782BC(v12, v13);
  sub_1000182F0(v12, v13);
  return v16[0];
}

unint64_t sub_10016EE04()
{
  unint64_t result = qword_1009A3710;
  if (!qword_1009A3710)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EF7EC, &type metadata for BeaconPayloadFile.MetaData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3710);
  }

  return result;
}

unint64_t sub_10016EE48()
{
  unint64_t result = qword_1009A3718;
  if (!qword_1009A3718)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EF7C4, &type metadata for BeaconPayloadFile.ObservationValue);
    atomic_store(result, (unint64_t *)&qword_1009A3718);
  }

  return result;
}

unint64_t sub_10016EE8C()
{
  unint64_t result = qword_1009A3720;
  if (!qword_1009A3720)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EF248, &type metadata for LocationSource);
    atomic_store(result, (unint64_t *)&qword_1009A3720);
  }

  return result;
}

uint64_t sub_10016EED0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconPayloadFile.MetaData(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10016EF14(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeaconPayloadFile.MetaData(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_10016EF50()
{
  unint64_t result = qword_1009A3730;
  if (!qword_1009A3730)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EF79C, &type metadata for BeaconPayloadFile.ObservationValue);
    atomic_store(result, (unint64_t *)&qword_1009A3730);
  }

  return result;
}

unint64_t sub_10016EF94()
{
  unint64_t result = qword_1009B4670;
  if (!qword_1009B4670)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EF220, &type metadata for LocationSource);
    atomic_store(result, (unint64_t *)&qword_1009B4670);
  }

  return result;
}

uint64_t sub_10016EFD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconPayloadFile.MetaData(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for BeaconPayloadFile.BeaconPayloadFileError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 1;
  }
  else {
    LODWORD(v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10016F068 + 4 * byte_1007EF3BE[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10016F09C + 4 * byte_1007EF3B9[v4]))();
}

uint64_t sub_10016F09C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016F0A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10016F0ACLL);
  }
  return result;
}

uint64_t sub_10016F0B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10016F0C0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10016F0C4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016F0CC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconPayloadFile.BeaconPayloadFileError()
{
  return &type metadata for BeaconPayloadFile.BeaconPayloadFileError;
}

uint64_t storeEnumTagSinglePayload for BeaconPayloadFile.MetaData.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 1;
  }
  else {
    LODWORD(v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_10016F134 + 4 * byte_1007EF3C8[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_10016F168 + 4 * byte_1007EF3C3[v4]))();
}

uint64_t sub_10016F168(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016F170(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10016F178LL);
  }
  return result;
}

uint64_t sub_10016F184(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10016F18CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 8;
  return result;
}

uint64_t sub_10016F190(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016F198(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconPayloadFile.MetaData.CodingKeys()
{
  return &type metadata for BeaconPayloadFile.MetaData.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for BeaconPayloadFile.ObservationValue( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 1;
  }
  else {
    LODWORD(v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10016F200 + 4 * byte_1007EF3D2[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10016F234 + 4 * byte_1007EF3CD[v4]))();
}

uint64_t sub_10016F234(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016F23C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10016F244LL);
  }
  return result;
}

uint64_t sub_10016F250(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10016F258LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10016F25C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016F264(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconPayloadFile.ObservationValue()
{
  return &type metadata for BeaconPayloadFile.ObservationValue;
}

unint64_t sub_10016F284()
{
  unint64_t result = qword_1009A3740;
  if (!qword_1009A3740)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EF614, &type metadata for BeaconPayloadFile.ObservationValue);
    atomic_store(result, (unint64_t *)&qword_1009A3740);
  }

  return result;
}

unint64_t sub_10016F2CC()
{
  unint64_t result = qword_1009A3748;
  if (!qword_1009A3748)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EF6CC, &type metadata for BeaconPayloadFile.MetaData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3748);
  }

  return result;
}

unint64_t sub_10016F314()
{
  unint64_t result = qword_1009A3750;
  if (!qword_1009A3750)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EF734, &type metadata for BeaconPayloadFile.BeaconPayloadFileError);
    atomic_store(result, (unint64_t *)&qword_1009A3750);
  }

  return result;
}

unint64_t sub_10016F35C()
{
  unint64_t result = qword_1009A3758;
  if (!qword_1009A3758)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EF63C, &type metadata for BeaconPayloadFile.MetaData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3758);
  }

  return result;
}

unint64_t sub_10016F3A4()
{
  unint64_t result = qword_1009A3760;
  if (!qword_1009A3760)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EF664, &type metadata for BeaconPayloadFile.MetaData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3760);
  }

  return result;
}

unint64_t sub_10016F3E8(unint64_t result)
{
  if (result >= 4) {
    return 4LL;
  }
  return result;
}

uint64_t sub_10016F3F8(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x657461446E616373LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v5 = 0xE800000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657461446E616373LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEC00000065746144LL)
  {
    unint64_t v7 = 0xEC00000065746144LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEC00000065746144LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x797469726F697270LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v8 = 0xE800000000000000LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x797469726F697270LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0xD000000000000010LL && a2 == 0x80000001008565C0LL)
  {
    unint64_t v9 = 0x80000001008565C0LL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001008565C0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_26;
  }

  if (a1 == 0xD000000000000012LL && a2 == 0x800000010084E370LL)
  {
    unint64_t v10 = 0x800000010084E370LL;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x800000010084E370LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_32;
  }

  if (a1 == 0x656372756F73LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v11 = 0xE600000000000000LL;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F73LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_38;
  }

  if (a1 == 0x7942737574617473LL && a2 == 0xEA00000000006574LL)
  {
    unint64_t v12 = 0xEA00000000006574LL;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7942737574617473LL, 0xEA00000000006574LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
    goto LABEL_44;
  }

  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v13 = 0x80000001008565E0LL;
    if (a2 == 0x80000001008565E0LL) {
      goto LABEL_49;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x80000001008565E0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7LL;
  }

  if (a1 == 0xD000000000000015LL && a2 == 0x8000000100856600LL)
  {
    swift_bridgeObjectRelease(0x8000000100856600LL);
    return 8LL;
  }

  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x8000000100856600LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0) {
      return 8LL;
    }
    else {
      return 9LL;
    }
  }

unint64_t sub_10016F79C()
{
  unint64_t result = qword_1009A3768;
  if (!qword_1009A3768)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EF59C, &type metadata for BeaconPayloadFile.ObservationValue);
    atomic_store(result, (unint64_t *)&qword_1009A3768);
  }

  return result;
}

uint64_t CryptoAdvertisementKeys.dateInterval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DateInterval(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(a1, v1, v3);
}

uint64_t CryptoAdvertisementKeys.publicKey.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CryptoAdvertisementKeys(0LL) + 20);
  uint64_t v2 = *(void *)v1;
  sub_10001736C(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t type metadata accessor for CryptoAdvertisementKeys(uint64_t a1)
{
  uint64_t result = qword_1009A3800;
  if (!qword_1009A3800) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CryptoAdvertisementKeys);
  }
  return result;
}

uint64_t CryptoAdvertisementKeys.privateKey.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CryptoAdvertisementKeys(0LL) + 24);
  uint64_t v2 = *(void *)v1;
  sub_100018BE4(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t CryptoAdvertisementKeys.advertisement.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CryptoAdvertisementKeys(0LL) + 28);
  uint64_t v2 = *(void *)v1;
  sub_10001736C(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

void sub_10016F914(char *a1)
{
}

void sub_10016F920()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v2, 0LL);
  __asm { BR              X9 }

Swift::Int sub_10016F960()
{
  return Hasher._finalize()();
}

void sub_10016F9A8()
{
  __asm { BR              X10 }

uint64_t sub_10016F9D8(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE200000000000000LL);
}

void sub_10016FA0C(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }

Swift::Int sub_10016FA48()
{
  return Hasher._finalize()();
}

unint64_t sub_10016FA90@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10017105C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10016FABC()
{
  return ((uint64_t (*)(void))((char *)sub_10016FAE0 + 4 * byte_1007EF84C[*v0]))();
}

void sub_10016FAE0(void *a1@<X8>)
{
  *a1 = 21840LL;
  a1[1] = 0xE200000000000000LL;
}

void sub_10016FAF0(void *a1@<X8>)
{
  *a1 = 21072LL;
  a1[1] = 0xE200000000000000LL;
}

void sub_10016FB00(void *a1@<X8>)
{
  *a1 = 65LL;
  a1[1] = v1;
}

uint64_t sub_10016FB0C()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10016FB30 + 4 * byte_1007EF850[*v0]))( 68LL,  0xE100000000000000LL);
}

uint64_t sub_10016FB30()
{
  return 21840LL;
}

uint64_t sub_10016FB3C()
{
  return 21072LL;
}

uint64_t sub_10016FB48()
{
  return 65LL;
}

unint64_t sub_10016FB50@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10017105C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10016FB74(uint64_t a1)
{
  unint64_t v2 = sub_10016FE98();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10016FB9C(uint64_t a1)
{
  unint64_t v2 = sub_10016FE98();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CryptoAdvertisementKeys.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009A3770);
  v30[0] = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100012ED8(a1, v11);
  unint64_t v13 = sub_10016FE98();
  uint64_t v14 = v12;
  uint64_t v15 = v2;
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for CryptoAdvertisementKeys.CodingKeys,  &type metadata for CryptoAdvertisementKeys.CodingKeys,  v13,  v11,  v14);
  uint64_t v16 = sub_100004AEC(&qword_1009A3780);
  uint64_t v17 = swift_allocObject(v16, 48LL, 7LL);
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v18 = DateInterval.start.getter(v17);
  double v19 = Date.timeIntervalSinceReferenceDate.getter(v18);
  uint64_t v20 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *(double *)(v17 + 32) = v19;
  *(double *)(v17 + 40) = DateInterval.duration.getter(v20);
  *(void *)&__int128 v31 = v17;
  char v32 = 0;
  uint64_t v21 = sub_100004AEC(&qword_1009A3788);
  uint64_t v22 = sub_100170438( &qword_1009A3790,  (uint64_t)&protocol witness table for Double,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  uint64_t v23 = v30[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v32, v8, v21, v22);
  swift_bridgeObjectRelease();
  if (v23) {
    return (*(uint64_t (**)(char *, uint64_t))(v30[0] + 8LL))(v10, v8);
  }
  uint64_t v25 = v30[0];
  uint64_t v26 = (int *)type metadata accessor for CryptoAdvertisementKeys(0LL);
  __int128 v31 = *(_OWORD *)(v15 + v26[5]);
  char v32 = 1;
  unint64_t v27 = sub_1000170A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v32, v8, &type metadata for Data, v27);
  uint64_t v28 = (void *)(v15 + v26[6]);
  unint64_t v29 = v28[1];
  if (v29 >> 60 != 15)
  {
    *(void *)&__int128 v31 = *v28;
    *((void *)&v31 + 1) = v29;
    char v32 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v32, v8, &type metadata for Data, v27);
  }

  __int128 v31 = *(_OWORD *)(v15 + v26[7]);
  char v32 = 3;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v32, v8, &type metadata for Data, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v10, v8);
}

unint64_t sub_10016FE98()
{
  unint64_t result = qword_1009A3778;
  if (!qword_1009A3778)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EFA24, &type metadata for CryptoAdvertisementKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3778);
  }

  return result;
}

double *CryptoAdvertisementKeys.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v52 = a2;
  uint64_t v3 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = sub_100004AEC(&qword_1009A3798);
  uint64_t v6 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CryptoAdvertisementKeys(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a1[3];
  uint64_t v12 = a1[4];
  sub_100012ED8(a1, v13);
  unint64_t v14 = sub_10016FE98();
  uint64_t v15 = v54;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for CryptoAdvertisementKeys.CodingKeys,  &type metadata for CryptoAdvertisementKeys.CodingKeys,  v14,  v13,  v12);
  if (v15) {
    return (double *)_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v50 = (int *)v9;
  uint64_t v51 = v5;
  id v54 = a1;
  uint64_t v16 = v11;
  uint64_t v17 = sub_100004AEC(&qword_1009A3788);
  char v56 = 0;
  uint64_t v18 = sub_100170438( &qword_1009A37A0,  (uint64_t)&protocol witness table for Double,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  uint64_t v19 = v53;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, v17, &v56, v53, v17, v18);
  uint64_t v20 = v8;
  uint64_t v21 = (double *)v55;
  char v56 = 1;
  unint64_t v22 = sub_100016FE0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, &type metadata for Data, &v56, v19, &type metadata for Data, v22);
  uint64_t v49 = v21;
  __int128 v23 = v55;
  char v56 = 2;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v56, v19, &type metadata for Data, v22);
  unint64_t v47 = *((void *)&v23 + 1);
  uint64_t v48 = v23;
  unint64_t v24 = *((void *)&v55 + 1);
  uint64_t v25 = v55;
  char v56 = 3;
  unint64_t result = (double *)KeyedDecodingContainer.decode<A>(_:forKey:)( &v55,  &type metadata for Data,  &v56,  v19,  &type metadata for Data,  v22);
  uint64_t v46 = v25;
  unint64_t v27 = v49;
  if (!*((void *)v49 + 2))
  {
    __break(1u);
    goto LABEL_10;
  }

  __int128 v45 = v55;
  uint64_t v28 = v51;
  Date.init(timeIntervalSinceReferenceDate:)(result);
  unint64_t v29 = *((void *)v27 + 2);
  unint64_t result = v27;
  uint64_t v30 = v48;
  if (v29 < 2)
  {
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v31 = (uint64_t)v16;
  double v32 = result[5];
  swift_bridgeObjectRelease();
  DateInterval.init(start:duration:)(v28, v32);
  unint64_t v33 = v24;
  if (v24 >> 60 == 15)
  {
    uint64_t v34 = 0LL;
    unint64_t v35 = 0xF000000000000000LL;
    uint64_t v36 = v50;
    unint64_t v37 = v47;
  }

  else
  {
    uint64_t v38 = v46;
    sub_100018BE4(v46, v24);
    uint64_t v34 = sub_10017D280(v38, v24);
    uint64_t v36 = v50;
    unint64_t v37 = v47;
    uint64_t v30 = v48;
  }

  uint64_t v39 = (uint64_t *)(v31 + v36[6]);
  *uint64_t v39 = v34;
  v39[1] = v35;
  sub_10001736C(v30, v37);
  uint64_t v40 = sub_10017D59C(v30, v37);
  uint64_t v41 = (uint64_t *)(v31 + v36[5]);
  *uint64_t v41 = v40;
  v41[1] = v42;
  sub_1001782E4(v45, *((uint64_t *)&v45 + 1));
  char v43 = v54;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v20, v19);
  sub_1000182F0(v46, v33);
  sub_100016F9C(v48, v47);
  *(_OWORD *)(v31 + v36[7]) = v55;
  sub_100170754(v31, v52);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v43);
  return (double *)sub_100170798(v31);
}

uint64_t sub_100170438(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_100004B78(&qword_1009A3788);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

double *sub_100170498@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return CryptoAdvertisementKeys.init(from:)(a1, a2);
}

uint64_t sub_1001704AC(void *a1)
{
  return CryptoAdvertisementKeys.encode(to:)(a1);
}

unint64_t CryptoAdvertisementKeys.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for HashAlgorithm(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v39 = 0LL;
  unint64_t v40 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(35LL);
  swift_bridgeObjectRelease();
  unint64_t v39 = 0xD000000000000019LL;
  unint64_t v40 = 0x8000000100856620LL;
  uint64_t v6 = type metadata accessor for CryptoAdvertisementKeys(0LL);
  uint64_t v7 = (uint64_t *)(v0 + *(int *)(v6 + 28));
  unint64_t v9 = v7[1];
  uint64_t v37 = *v7;
  uint64_t v8 = v37;
  unint64_t v38 = v9;
  unint64_t v10 = sub_1000B113C();
  v11._countAndFlagsBits = RawRepresentable<>.hexString.getter(&type metadata for Advertisement, v10);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 2108704LL;
  v12._object = (void *)0xE300000000000000LL;
  String.append(_:)(v12);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v2);
  uint64_t v13 = Data.hash(algorithm:)(v5, v8, v9);
  unint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v37 = v13;
  unint64_t v38 = v15;
  unint64_t v16 = sub_10009BDE4();
  uint64_t v17 = RawRepresentable<>.hexString.getter(&type metadata for HashedAdvertisement, v16);
  uint64_t v19 = v18;
  sub_100016F9C(v13, v15);
  v20._countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 2108704LL;
  v21._object = (void *)0xE300000000000000LL;
  String.append(_:)(v21);
  unint64_t v23 = v39;
  unint64_t v22 = v40;
  unint64_t v39 = 0LL;
  unint64_t v40 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(18LL);
  uint64_t v24 = type metadata accessor for DateInterval(0LL);
  unint64_t v25 = sub_1001707D4();
  uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter(v24, v25);
  unint64_t v28 = v27;
  swift_bridgeObjectRelease();
  unint64_t v39 = v26;
  unint64_t v40 = v28;
  v29._countAndFlagsBits = 0x746176697270202CLL;
  v29._object = (void *)0xEE00203A79654B65LL;
  String.append(_:)(v29);
  else {
    uint64_t v30 = 1702195828LL;
  }
  else {
    unint64_t v31 = 0xE400000000000000LL;
  }
  unint64_t v32 = v31;
  String.append(_:)(*(Swift::String *)&v30);
  swift_bridgeObjectRelease();
  uint64_t v33 = v39;
  uint64_t v34 = (void *)v40;
  unint64_t v39 = v23;
  unint64_t v40 = v22;
  swift_bridgeObjectRetain(v22);
  v35._countAndFlagsBits = v33;
  v35._object = v34;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v39;
}

uint64_t sub_100170754(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CryptoAdvertisementKeys(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100170798(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CryptoAdvertisementKeys(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_1001707D4()
{
  unint64_t result = qword_1009A0DE0;
  if (!qword_1009A0DE0)
  {
    uint64_t v1 = type metadata accessor for DateInterval(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DateInterval, v1);
    atomic_store(result, &qword_1009A0DE0);
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CryptoAdvertisementKeys(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for DateInterval(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    unint64_t v9 = (uint64_t *)((char *)a1 + v8);
    unint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    sub_10001736C(*v10, v12);
    *unint64_t v9 = v11;
    v9[1] = v12;
    uint64_t v13 = a3[6];
    unint64_t v14 = (char *)a1 + v13;
    unint64_t v15 = (char *)a2 + v13;
    unint64_t v16 = *((void *)v15 + 1);
    if (v16 >> 60 == 15)
    {
      *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
    }

    else
    {
      uint64_t v18 = *(void *)v15;
      sub_10001736C(*(void *)v15, *((void *)v15 + 1));
      *(void *)unint64_t v14 = v18;
      *((void *)v14 + 1) = v16;
    }

    uint64_t v19 = a3[7];
    Swift::String v20 = (uint64_t *)((char *)a1 + v19);
    Swift::String v21 = (uint64_t *)((char *)a2 + v19);
    uint64_t v22 = *v21;
    unint64_t v23 = v21[1];
    sub_10001736C(*v21, v23);
    uint64_t *v20 = v22;
    v20[1] = v23;
  }

  return a1;
}

uint64_t destroy for CryptoAdvertisementKeys(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for DateInterval(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  sub_100016F9C(*(void *)(a1 + a2[5]), *(void *)(a1 + a2[5] + 8));
  int v5 = (uint64_t *)(a1 + a2[6]);
  unint64_t v6 = v5[1];
  if (v6 >> 60 != 15) {
    sub_100016F9C(*v5, v6);
  }
  return sub_100016F9C(*(void *)(a1 + a2[7]), *(void *)(a1 + a2[7] + 8));
}

uint64_t initializeWithCopy for CryptoAdvertisementKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DateInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  unint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_10001736C(*v9, v11);
  *uint64_t v8 = v10;
  v8[1] = v11;
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  unint64_t v14 = (uint64_t *)(a2 + v12);
  unint64_t v15 = v14[1];
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  }

  else
  {
    uint64_t v16 = *v14;
    sub_10001736C(*v14, v14[1]);
    *(void *)uint64_t v13 = v16;
    *(void *)(v13 + 8) = v15;
  }

  uint64_t v17 = a3[7];
  uint64_t v18 = (uint64_t *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  sub_10001736C(*v19, v21);
  uint64_t *v18 = v20;
  v18[1] = v21;
  return a1;
}

uint64_t assignWithCopy for CryptoAdvertisementKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DateInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  unint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_10001736C(*v9, v11);
  uint64_t v12 = *v8;
  unint64_t v13 = v8[1];
  *uint64_t v8 = v10;
  v8[1] = v11;
  sub_100016F9C(v12, v13);
  uint64_t v14 = a3[6];
  unint64_t v15 = (uint64_t *)(a1 + v14);
  uint64_t v16 = (uint64_t *)(a2 + v14);
  unint64_t v17 = *(void *)(a2 + v14 + 8);
  if (*(void *)(a1 + v14 + 8) >> 60 != 15LL)
  {
    if (v17 >> 60 != 15)
    {
      uint64_t v19 = *v16;
      sub_10001736C(v19, v17);
      uint64_t v20 = *v15;
      unint64_t v21 = v15[1];
      *unint64_t v15 = v19;
      v15[1] = v17;
      sub_100016F9C(v20, v21);
      goto LABEL_8;
    }

    sub_100170B90((uint64_t)v15);
    goto LABEL_6;
  }

  if (v17 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
    goto LABEL_8;
  }

  uint64_t v18 = *v16;
  sub_10001736C(v18, v17);
  *unint64_t v15 = v18;
  v15[1] = v17;
LABEL_8:
  uint64_t v22 = a3[7];
  unint64_t v23 = (uint64_t *)(a1 + v22);
  uint64_t v24 = (uint64_t *)(a2 + v22);
  uint64_t v25 = *v24;
  unint64_t v26 = v24[1];
  sub_10001736C(*v24, v26);
  uint64_t v27 = *v23;
  unint64_t v28 = v23[1];
  *unint64_t v23 = v25;
  v23[1] = v26;
  sub_100016F9C(v27, v28);
  return a1;
}

uint64_t sub_100170B90(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for CryptoAdvertisementKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DateInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for CryptoAdvertisementKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DateInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void *)(a1 + v7);
  unint64_t v9 = *(void *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_100016F9C(v8, v9);
  uint64_t v10 = a3[6];
  unint64_t v11 = (uint64_t *)(a1 + v10);
  uint64_t v12 = (uint64_t *)(a2 + v10);
  unint64_t v13 = *(void *)(a1 + v10 + 8);
  if (v13 >> 60 != 15)
  {
    unint64_t v14 = v12[1];
    if (v14 >> 60 != 15)
    {
      uint64_t v15 = *v11;
      *unint64_t v11 = *v12;
      v11[1] = v14;
      sub_100016F9C(v15, v13);
      goto LABEL_6;
    }

    sub_100170B90((uint64_t)v11);
  }

  *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
LABEL_6:
  uint64_t v16 = a3[7];
  uint64_t v17 = *(void *)(a1 + v16);
  unint64_t v18 = *(void *)(a1 + v16 + 8);
  *(_OWORD *)(a1 + vswift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + v16);
  sub_100016F9C(v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for CryptoAdvertisementKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100170D18);
}

uint64_t sub_100170D18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DateInterval(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  uint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
  if (((4 * (_DWORD)v9) & 0xC) != 0) {
    return 16 - ((4 * (_DWORD)v9) & 0xC | (v9 >> 2));
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for CryptoAdvertisementKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100170DB4);
}

uint64_t sub_100170DB4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for DateInterval(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  uint64_t v10 = (void *)(a1 + *(int *)(a4 + 20));
  *uint64_t v10 = 0LL;
  v10[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  return result;
}

uint64_t sub_100170E3C(uint64_t a1)
{
  uint64_t result = type metadata accessor for DateInterval(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_1007EF8F8;
    v4[2] = &unk_1007EF910;
    void v4[3] = &unk_1007EF8F8;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for CryptoAdvertisementKeys.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 1;
  }
  else {
    LODWORD(v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100170F04 + 4 * byte_1007EF859[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100170F38 + 4 * byte_1007EF854[v4]))();
}

uint64_t sub_100170F38(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100170F40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100170F48LL);
  }
  return result;
}

uint64_t sub_100170F54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100170F5CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100170F60(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100170F68(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CryptoAdvertisementKeys.CodingKeys()
{
  return &type metadata for CryptoAdvertisementKeys.CodingKeys;
}

unint64_t sub_100170F88()
{
  unint64_t result = qword_1009A3840;
  if (!qword_1009A3840)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EF9FC, &type metadata for CryptoAdvertisementKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3840);
  }

  return result;
}

unint64_t sub_100170FD0()
{
  unint64_t result = qword_1009A3848;
  if (!qword_1009A3848)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EF934, &type metadata for CryptoAdvertisementKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3848);
  }

  return result;
}

unint64_t sub_100171018()
{
  unint64_t result = qword_1009A3850;
  if (!qword_1009A3850)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EF95C, &type metadata for CryptoAdvertisementKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3850);
  }

  return result;
}

unint64_t sub_10017105C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1009338B8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1001710A4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100004AEC(&qword_1009A39D0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v23[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009BB4F0);
  uint64_t v9 = swift_allocObject(v8, 20LL, 7LL);
  *(_DWORD *)(v9 + swift_weakDestroy(v0 + 16) = 0;
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v9;
  *(_BYTE *)(v1 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 0;
  uint64_t v10 = sub_100004AEC(&qword_1009A39D8);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  *(void *)(v1 + 32) = PassthroughSubject.init()();
  *(void *)(v1 + 48) = &_swiftEmptySetSingleton;
  uint64_t v11 = swift_allocObject(v8, 20LL, 7LL);
  *(_DWORD *)(v11 + swift_weakDestroy(v0 + 16) = 0;
  *(void *)(v1 + 56) = v11;
  *(_BYTE *)(v1 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 1;
  *(void *)(v1 + 40) = a1;
  uint64_t v12 = *(void *)(v1 + 16);
  swift_retain();
  uint64_t v13 = swift_retain();
  uint64_t v14 = AnyCurrentValuePublisher.publisher.getter(v13);
  v23[0] = v14;
  uint64_t v15 = sub_100004AEC(&qword_1009A39E0);
  uint64_t v16 = sub_1000372EC( &qword_1009A39E8,  &qword_1009A39E0,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.filter(_:)(sub_100015F84, 0LL, v15, v16);
  swift_release(v14);
  uint64_t v17 = swift_allocObject(&unk_100941F20, 24LL, 7LL);
  swift_weakInit(v17 + 16, v2);
  uint64_t v18 = swift_allocObject(&unk_100941F48, 32LL, 7LL);
  *(void *)(v18 + swift_weakDestroy(v0 + 16) = v17;
  *(void *)(v18 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v12;
  uint64_t v19 = sub_1000372EC( &qword_1009A39F0,  &qword_1009A39D0,  (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  swift_retain();
  uint64_t v20 = Publisher<>.sink(receiveValue:)(sub_100171760, v18, v4, v19);
  swift_release(v18);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_beginAccess(v2 + 48, v23, 33LL, 0LL);
  AnyCancellable.store(in:)(v2 + 48);
  swift_endAccess(v23);
  swift_release(v12);
  swift_release(v20);
  swift_release(a1);
  return v2;
}

uint64_t sub_100171300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v15, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v4);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_100171768,  result,  a3,  (char *)&type metadata for () + 8,  &type metadata for Bool);
    char v8 = v14;
    uint64_t v9 = static os_log_type_t.default.getter(v7);
    if (qword_10099B710 != -1) {
      swift_once(&qword_10099B710, sub_1006511CC);
    }
    uint64_t v10 = qword_100A2B020;
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v12 = swift_allocObject(v11, 72LL, 7LL);
    *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v12 + 56) = &type metadata for Bool;
    *(void *)(v12 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = &protocol witness table for Bool;
    *(_BYTE *)(v12 + 32) = v8;
    os_log(_:dso:log:_:_:)( v9,  &_mh_execute_header,  v10,  "CloudKitUpdateEligibility app client is active. Eligible: %i",  v13);
    swift_bridgeObjectRelease();
    char v14 = v8;
    PassthroughSubject.send(_:)(&v14);
    return swift_release(v6);
  }

  return result;
}

uint64_t sub_10017144C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3 = static os_log_type_t.default.getter(a1);
  if (qword_10099B710 != -1) {
    swift_once(&qword_10099B710, sub_1006511CC);
  }
  uint64_t result = os_log(_:dso:log:_:_:)( v3,  &_mh_execute_header,  qword_100A2B020,  "CloudKitUpdateEligibility is eligible (always).",  47LL,  2LL,  _swiftEmptyArrayStorage);
  *a2 = 1;
  return result;
}

uint64_t sub_1001714E0(uint64_t a1)
{
  *(_BYTE *)(a1 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 1;
  uint64_t v1 = static os_log_type_t.default.getter(a1);
  if (qword_10099B710 != -1) {
    swift_once(&qword_10099B710, sub_1006511CC);
  }
  uint64_t v2 = qword_100A2B020;
  uint64_t v3 = os_log(_:dso:log:_:_:)( v1,  &_mh_execute_header,  qword_100A2B020,  "CloudKitUpdateEligibility is eligible (always).",  47LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v4 = static os_log_type_t.default.getter(v3);
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v6 = swift_allocObject(v5, 72LL, 7LL);
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(v6 + 56) = &type metadata for Bool;
  *(void *)(v6 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = &protocol witness table for Bool;
  *(_BYTE *)(v6 + 32) = 1;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v2, "CloudKitUpdateEligibility overriden: true. Eligible: %i", v8);
  swift_bridgeObjectRelease();
  char v9 = 1;
  return PassthroughSubject.send(_:)(&v9);
}

uint64_t sub_100171610@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4 = static os_log_type_t.default.getter(a1);
  if (qword_10099B710 != -1) {
    swift_once(&qword_10099B710, sub_1006511CC);
  }
  uint64_t result = os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  qword_100A2B020,  "CloudKitUpdateEligibility is eligible (always).",  47LL,  2LL,  _swiftEmptyArrayStorage);
  *(_BYTE *)(a1 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 0;
  *a2 = 1;
  return result;
}

uint64_t sub_1001716AC()
{
  return swift_deallocClassInstance(v0, 65LL, 7LL);
}

uint64_t type metadata accessor for CloudKitUpdateEligibility()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd25CloudKitUpdateEligibility);
}

uint64_t sub_100171710()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100171734()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100171760(uint64_t a1)
{
  return sub_100171300(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100171768@<X0>(_BYTE *a1@<X8>)
{
  return sub_10017144C(v1, a1);
}

uint64_t sub_100171780()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (uint64_t)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)&v30 - v6;
  __chkstk_darwin(v5);
  char v9 = (char *)&v30 - v8;
  id v10 = [(id)objc_opt_self(NSFileManager) defaultManager];
  type metadata accessor for BeaconStore(0LL);
  sub_1004E6208(v4);
  uint64_t v11 = 1LL;
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011LL, 0x80000001008567C0LL, 1LL);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  v12(v4, v0);
  URL.appendingPathComponent(_:)(0x2E65746176697250LL, 0xED00006E656B6F74LL);
  uint64_t v13 = ((uint64_t (*)(char *, uint64_t))v12)(v7, v0);
  URL.path.getter(v13);
  v12((uint64_t)v9, v0);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  LOBYTE(v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = [v10 fileExistsAtPath:v14];

  if ((v4 & 1) == 0)
  {
    if (qword_10099B540 != -1) {
      swift_once(&qword_10099B540, sub_1004F7298);
    }
    uint64_t v15 = (void *)qword_100A2ACE0;
    sub_1004E6208((uint64_t)v7);
    URL.appendingPathComponent(_:isDirectory:)(0x736E656B6F544B43LL, 0xED0000656E6F5A2FLL, 1LL);
    v12((uint64_t)v7, v0);
    v16._countAndFlagsBits = 0x65746176697250LL;
    v16._object = (void *)0xE700000000000000LL;
    URL.appendPathComponent(_:)(v16);
    id v17 = [v15 ownerName];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    uint64_t v20 = v19;

    v21._countAndFlagsBits = v18;
    v21._object = v20;
    URL.appendPathComponent(_:)(v21);
    swift_bridgeObjectRelease();
    id v22 = [v15 zoneName];
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    uint64_t v25 = v24;

    v30._countAndFlagsBits = v23;
    v30._object = v25;
    v26._countAndFlagsBits = 0x6E656B6F742ELL;
    v26._object = (void *)0xE600000000000000LL;
    String.append(_:)(v26);
    URL.appendPathComponent(_:)(v30);
    uint64_t v27 = swift_bridgeObjectRelease();
    URL.path.getter(v27);
    v12((uint64_t)v9, v0);
    NSString v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v11 = (uint64_t)[v10 fileExistsAtPath:v28];
  }

  return v11;
}

uint64_t sub_100171AC0(uint64_t a1)
{
  v5[0] = &unk_1007EFB48;
  v5[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  void v5[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v5[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[4] = *(void *)(result - 8) + 64LL;
    v5[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[6] = &unk_1007EFB60;
    v5[7] = &unk_1007EFB60;
    v5[8] = &unk_1007EFB60;
    void v5[9] = &unk_1007EFB78;
    v5[10] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[11] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[12] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[13] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[14] = &unk_1007EFB60;
    v5[15] = &unk_1007EFB60;
    v5[16] = &unk_1007EFB60;
    uint64_t result = type metadata accessor for Date(319LL);
    if (v4 <= 0x3F)
    {
      uint64_t v6 = *(void *)(result - 8) + 64LL;
      uint64_t v7 = (char *)&value witness table for Builtin.Int64 + 64;
      uint64_t v8 = (char *)&value witness table for Builtin.NativeObject + 64;
      char v9 = &unk_1007EFB60;
      uint64_t v10 = v6;
      uint64_t v11 = &unk_1007EFB90;
      return swift_initClassMetadata2(a1, 0LL, 23LL, v5, a1 + 112);
    }
  }

  return result;
}

uint64_t sub_100171BBC()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AB0();
  uint64_t v10 = (*(uint64_t (**)(char *, void, uint64_t))(v7 + 104))( v9,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v6);
  static DispatchQoS.unspecified.getter(v10);
  Swift::String v16 = _swiftEmptyArrayStorage;
  uint64_t v11 = sub_100007864( (unint64_t *)&qword_10099BAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009A0CD0);
  uint64_t v13 = sub_1000372EC( (unint64_t *)&qword_10099BAB0,  (uint64_t *)&unk_1009A0CD0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v0, v11);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002BLL,  0x80000001008569F0LL,  v5,  v2,  v9,  0LL);
  qword_1009A39F8 = result;
  return result;
}

Swift::Int sub_100171D78()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(~v1);
  return Hasher._finalize()();
}

void sub_100171DBC()
{
}

Swift::Int sub_100171DE8(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(~v2);
  return Hasher._finalize()();
}

_DWORD *sub_100171E28@<X0>(_DWORD *result@<X0>, char *a2@<X8>)
{
  if (*result > 0xFFFFFFFC) {
    char v2 = ~*result;
  }
  else {
    char v2 = 3;
  }
  *a2 = v2;
  return result;
}

void sub_100171E40(int *a1@<X8>)
{
  *a1 = ~*v1;
}

void sub_100171E50(void *a1@<X8>)
{
  *a1 = &off_100933938;
}

uint64_t sub_100171E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100178090();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100171EBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100178090();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100171F0C()
{
  int v1 = v0;
  uint64_t v2 = *v0;
  id v3 = [(id)v0[7] destination];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    uint64_t v7 = v6;
  }

  else
  {
    uint64_t v7 = (void *)0x80000001008569D0LL;
    uint64_t v5 = 0xD000000000000011LL;
  }

  uint64_t v20 = 60LL;
  unint64_t v21 = 0xE100000000000000LL;
  uint64_t v19 = v1;
  __int128 v8 = *(_OWORD *)(v2 + 96);
  v18[0] = *(_OWORD *)(v2 + 80);
  v18[1] = v8;
  uint64_t v9 = type metadata accessor for MessagingSession(0LL, (uint64_t)v18);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1007EFC60, v9);
  v11._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v9, WitnessTable);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 32LL;
  v12._object = (void *)0xE100000000000000LL;
  String.append(_:)(v12);
  v13._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v9, WitnessTable);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 8250LL;
  v14._object = (void *)0xE200000000000000LL;
  String.append(_:)(v14);
  v15._countAndFlagsBits = v5;
  v15._object = v7;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 62LL;
  v16._object = (void *)0xE100000000000000LL;
  String.append(_:)(v16);
  return v20;
}

uint64_t sub_100172068(void *a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v11 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  sub_1001720E4(a1, a2, a3, a4, a5);
  return v11;
}

void *sub_1001720E4(void *a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  unint64_t v6 = v5;
  uint64_t v124 = a3;
  uint64_t v151 = a2;
  uint64_t v139 = a1;
  uint64_t v9 = (void *)*v5;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v146 = *(void *)(v10 - 8);
  uint64_t v147 = v10;
  __chkstk_darwin(v10);
  uint64_t v123 = (uint64_t)&v120 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v12);
  unint64_t v126 = (char *)&v120 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v149 = *(void *)(v14 - 8);
  uint64_t v150 = v14;
  __chkstk_darwin(v14);
  uint64_t v125 = (char *)&v120 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v138 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v138);
  unint64_t v137 = (char *)&v120 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v17);
  uint64_t v136 = (char *)&v120 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v135 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v134 = *(void *)(v135 - 8);
  __chkstk_darwin(v135);
  unint64_t v133 = (char *)&v120 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for DispatchWorkItemFlags(0LL);
  __chkstk_darwin(v20);
  id v22 = (char *)&v120 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = sub_100004AEC(&qword_1009BB4F0);
  uint64_t v24 = swift_allocObject(v23, 20LL, 7LL);
  v6[5] = v24;
  uint64_t v127 = qword_1009A3A08;
  *(void *)((char *)v6 + qword_1009A3A08) = 0LL;
  *(_DWORD *)(v24 + swift_weakDestroy(v0 + 16) = 0;
  uint64_t v128 = qword_1009A3A10;
  *(void *)((char *)v6 + qword_1009A3A10) = 0LL;
  uint64_t v129 = qword_1009A3A18;
  *(void *)((char *)v6 + qword_1009A3A18) = 0LL;
  uint64_t v25 = (void *)((char *)v6 + qword_1009A3A20);
  *uint64_t v25 = 0LL;
  v25[1] = 0LL;
  unint64_t v130 = v25;
  uint64_t v26 = qword_1009A3A28;
  uint64_t v27 = v9[11];
  NSString v28 = (uint64_t (*)(uint64_t))v9[12];
  uint64_t v29 = v9[13];
  uint64_t v141 = (void *)v9[10];
  aBlock = v141;
  unint64_t v153 = v27;
  uint64_t v143 = v28;
  unint64_t v154 = v28;
  unint64_t v155 = (void *)v29;
  uint64_t v30 = type metadata accessor for MessagingSession(255LL, (uint64_t)&aBlock);
  unint64_t v31 = sub_100044AD4();
  uint64_t v148 = v30;
  uint64_t v121 = type metadata accessor for PassthroughSubject(0LL, v30, &type metadata for MessagingError, v31);
  uint64_t v32 = PassthroughSubject.__allocating_init()();
  uint64_t v144 = (void *)v29;
  uint64_t v145 = v26;
  *(void *)((char *)v6 + v26) = v32;
  uint64_t v33 = qword_1009A3A30;
  unint64_t v142 = v27;
  uint64_t v35 = type metadata accessor for SessionMessage(255LL, v27, v29, v34);
  unint64_t v122 = v31;
  uint64_t v120 = type metadata accessor for PassthroughSubject(0LL, v35, &type metadata for MessagingError, v31);
  uint64_t v36 = PassthroughSubject.__allocating_init()();
  uint64_t v140 = v33;
  *(void *)((char *)v6 + v33) = v36;
  *(void *)((char *)v6 + qword_1009A3A38) = 0LL;
  *(void *)((char *)v6 + qword_1009A3A40) = 0LL;
  *(void *)((char *)v6 + qword_1009A3A48) = 0LL;
  *(void *)((char *)v6 + qword_1009A3A58) = 0LL;
  uint64_t v37 = qword_1009A3A60;
  uint64_t v156 = DeviceInformationProviderFactory.init();
  uint64_t v157 = 0LL;
  aBlock = _NSConcreteStackBlock;
  unint64_t v153 = 1107296256LL;
  unint64_t v154 = sub_1001C31E8;
  unint64_t v155 = &unk_100942400;
  unint64_t v38 = _Block_copy(&aBlock);
  uint64_t v158 = _swiftEmptyArrayStorage;
  uint64_t v39 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v40 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v41 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v158, v40, v41, v20, v39);
  uint64_t v42 = type metadata accessor for DispatchWorkItem(0LL);
  swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
  uint64_t v43 = DispatchWorkItem.init(flags:block:)(v22, v38);
  *(void *)((char *)v6 + v37) = v43;
  uint64_t v44 = v151;
  *(void *)((char *)v6 + qword_1009A3A68) = 0LL;
  static Date.distantPast.getter(v43);
  *((_BYTE *)v6 + qword_1009A3A78) = 0;
  unint64_t v132 = sub_100004AB0();
  aBlock = 0LL;
  unint64_t v153 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(45LL);
  swift_bridgeObjectRelease();
  aBlock = (void *)0xD00000000000002BLL;
  unint64_t v153 = 0x8000000100856A20LL;
  uint64_t v45 = *(void *)(v44 + 16);
  uint64_t v46 = *(void **)(v44 + 24);
  swift_bridgeObjectRetain(v46);
  v47._countAndFlagsBits = v45;
  v47._object = v46;
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  uint64_t v48 = aBlock;
  unint64_t v131 = v153;
  uint64_t v49 = v133;
  uint64_t v50 = (*(uint64_t (**)(char *, void, uint64_t))(v134 + 104))( v133,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v135);
  uint64_t v51 = v136;
  static DispatchQoS.unspecified.getter(v50);
  aBlock = _swiftEmptyArrayStorage;
  uint64_t v52 = sub_100007864( (unint64_t *)&qword_10099BAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v53 = sub_100004AEC((uint64_t *)&unk_1009A0CD0);
  uint64_t v54 = sub_1000372EC( (unint64_t *)&qword_10099BAB0,  (uint64_t *)&unk_1009A0CD0,  (uint64_t)&protocol conformance descriptor for [A]);
  __int128 v55 = v137;
  uint64_t v56 = v53;
  uint64_t v57 = v52;
  uint64_t v59 = v149;
  uint64_t v58 = v150;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v56, v54, v138, v57);
  uint64_t v60 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v48, v131, v51, v55, v49, 0LL);
  id v61 = v139;
  v6[6] = v60;
  v6[7] = v61;
  *(void *)((char *)v6 + qword_1009A3A00) = v44;
  id v62 = v61;
  swift_retain();
  id v63 = [v62 sessionID];
  if (!v63) {
    goto LABEL_4;
  }
  id v64 = v63;
  uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
  uint64_t v67 = v66;

  uint64_t v68 = (uint64_t)v126;
  UUID.init(uuidString:)(v65, v67);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v68, 1LL, v58) == 1)
  {
    sub_100015794(v68, &qword_10099D8A0);
LABEL_4:
    aBlock = v141;
    unint64_t v153 = v142;
    unint64_t v154 = v143;
    unint64_t v155 = v144;
    uint64_t v69 = type metadata accessor for MessagingSession.MessagingSessionError(0LL, (uint64_t)&aBlock);
    uint64_t WitnessTable = swift_getWitnessTable(&unk_1007EFE20, v69);
    uint64_t v71 = swift_allocError(v69, WitnessTable, 0LL, 0LL);
    *uint64_t v72 = 0LL;
    swift_willThrow(v71);

    swift_release();
    int v73 = 0;
    goto LABEL_5;
  }

  uint64_t v75 = v125;
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 32))(v125, v68, v58);
  (*(void (**)(uint64_t, char *, uint64_t))(v59 + 16))((uint64_t)v6 + qword_100A2A278, v75, v58);
  id v76 = [v62 destination];
  if (v76)
  {

    aBlock = *(void **)((char *)v6 + v140);
    uint64_t v77 = v120;
    uint64_t v78 = swift_getWitnessTable(&protocol conformance descriptor for PassthroughSubject<A, B>, v120);
    *(void *)((char *)v6 + qword_100A2A288) = Publisher.eraseToAnyPublisher()(v77, v78);
    aBlock = *(void **)((char *)v6 + v145);
    uint64_t v79 = v121;
    uint64_t v80 = swift_getWitnessTable(&protocol conformance descriptor for PassthroughSubject<A, B>, v121);
    *(void *)((char *)v6 + qword_100A2A280) = Publisher.eraseToAnyPublisher()(v79, v80);
    uint64_t v81 = v123;
    static Date.trustedNow.getter(v123);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v146 + 32))((uint64_t)v6 + qword_1009A3A50, v81, v147);
    *((double *)v6 + 2) = a4;
    *((double *)v6 + 3) = a5;
    v6[4] = v124;
    uint64_t v146 = type metadata accessor for Future(0LL, v148, &type metadata for MessagingError, v122);
    uint64_t v82 = swift_allocObject(&unk_100942118, 24LL, 7LL);
    swift_weakInit(v82 + 16, v6);
    uint64_t v83 = (void *)swift_allocObject(&unk_100942438, 56LL, 7LL);
    uint64_t v84 = v141;
    unint64_t v85 = v142;
    v83[2] = v141;
    v83[3] = v85;
    uint64_t v87 = v143;
    uint64_t v86 = v144;
    v83[4] = v143;
    v83[5] = v86;
    v83[6] = v82;
    uint64_t v88 = Future.__allocating_init(_:)(sub_100177D98);
    *(void *)((char *)v6 + qword_1009A3A18) = v88;
    os_log_type_t v89 = (void *)v88;
    uint64_t v147 = v88;
    swift_retain();
    swift_release();
    aBlock = v89;
    uint64_t v90 = swift_allocObject(&unk_100942118, 24LL, 7LL);
    swift_weakInit(v90 + 16, v6);
    uint64_t v91 = (void *)swift_allocObject(&unk_100942460, 56LL, 7LL);
    v91[2] = v84;
    v91[3] = v85;
    v91[4] = v87;
    v91[5] = v86;
    v91[6] = v90;
    uint64_t v92 = swift_allocObject(&unk_100942118, 24LL, 7LL);
    swift_weakInit(v92 + 16, v6);
    unint64_t v93 = (void *)swift_allocObject(&unk_100942488, 56LL, 7LL);
    v93[2] = v84;
    v93[3] = v85;
    v93[4] = v87;
    v93[5] = v86;
    v93[6] = v92;
    uint64_t v94 = v146;
    uint64_t v95 = swift_getWitnessTable(&protocol conformance descriptor for Future<A, B>, v146);
    uint64_t v96 = Publisher.sink(receiveCompletion:receiveValue:)(sub_100177DA8, v91, sub_100177DB4, v93, v94, v95);
    swift_release();
    swift_release();
    *(void *)((char *)v6 + qword_1009A3A48) = v96;
    swift_release();
    uint64_t v97 = type metadata accessor for MessagingSessionDelegateTrampoline();
    uint64_t v98 = swift_retain();
    id v99 = sub_100769588(v98, v97, v148, (uint64_t)&off_1009420A0);
    swift_release();
    uint64_t v100 = qword_1009A3A10;
    uint64_t v101 = *(void **)((char *)v6 + qword_1009A3A10);
    *(void *)((char *)v6 + qword_1009A3A10) = v99;

    sub_100173A34(0, 1);
    [(id)v6[7] setDelegate:*(void *)((char *)v6 + v100) queue:v6[6]];
    swift_release();

    swift_release();
    (*(void (**)(char *, uint64_t))(v149 + 8))(v125, v150);
    return v6;
  }

  if (qword_10099B810 != -1) {
    swift_once(&qword_10099B810, sub_10069374C);
  }
  uint64_t v102 = type metadata accessor for Logger(0LL);
  sub_10000A720(v102, (uint64_t)qword_100A2B188);
  id v103 = v62;
  uint64_t v104 = (os_log_s *)Logger.logObject.getter(v103);
  os_log_type_t v105 = static os_log_type_t.error.getter(v104);
  if (os_log_type_enabled(v104, v105))
  {
    uint64_t v106 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v139 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v158 = v139;
    *(_DWORD *)uint64_t v106 = 136315138;
    id v107 = [v103 destination];
    if (v107)
    {
      uint64_t v108 = v107;
      uint64_t v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
      unint64_t v111 = v110;
    }

    else
    {
      uint64_t v109 = 0LL;
      unint64_t v111 = 0LL;
    }

    aBlock = (void *)v109;
    unint64_t v153 = v111;
    uint64_t v112 = sub_100004AEC(&qword_1009A34B0);
    uint64_t v113 = String.init<A>(describing:)(&aBlock, v112);
    aBlock = (void *)sub_1003F11D4(v113, v114, (uint64_t *)&v158);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v153, v106 + 4, v106 + 12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v104, v105, "Invalid IDSSession, destination is [%s]", v106, 0xCu);
    uint64_t v115 = v139;
    swift_arrayDestroy(v139, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v115, -1LL, -1LL);
    swift_slowDealloc(v106, -1LL, -1LL);

    uint64_t v59 = v149;
    uint64_t v58 = v150;
    uint64_t v75 = v125;
  }

  else
  {
  }

  aBlock = v141;
  unint64_t v153 = v142;
  unint64_t v154 = v143;
  unint64_t v155 = v144;
  uint64_t v116 = type metadata accessor for MessagingSession.MessagingSessionError(0LL, (uint64_t)&aBlock);
  uint64_t v117 = swift_getWitnessTable(&unk_1007EFE20, v116);
  uint64_t v118 = swift_allocError(v116, v117, 0LL, 0LL);
  *uint64_t v119 = 0LL;
  swift_willThrow(v118);

  swift_release();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v75, v58);
  int v73 = 1;
LABEL_5:
  swift_release();

  if (v73) {
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))((uint64_t)v6 + qword_100A2A278, v58);
  }
  swift_release();
  swift_release();

  swift_release();
  sub_10002214C(*v130, v130[1]);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v146 + 8))((uint64_t)v6 + qword_1009A3A70, v147);
  swift_deallocPartialClassInstance(v6, v148, *(unsigned int *)(*v6 + 48LL), *(unsigned __int16 *)(*v6 + 52LL));
  return v6;
}

uint64_t sub_100172E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (void *)swift_allocObject(&unk_1009424B0, 64LL, 7LL);
  v14[2] = a4;
  v14[3] = a5;
  v14[4] = a6;
  v14[5] = a7;
  a3 += 16LL;
  v14[6] = a1;
  v14[7] = a2;
  swift_beginAccess(a3, v22, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a3);
  if (Strong)
  {
    uint64_t v16 = Strong;
    uint64_t v17 = (uint64_t (*)(uint64_t, char))swift_allocObject(&unk_1009424D8, 64LL, 7LL);
    *((void *)v17 + 2) = a4;
    *((void *)v17 + 3) = a5;
    *((void *)v17 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = a6;
    *((void *)v17 + 5) = a7;
    *((void *)v17 + 6) = sub_100177DF8;
    *((void *)v17 + 7) = v14;
    uint64_t v18 = (uint64_t (**)(uint64_t, char))(v16 + qword_1009A3A20);
    uint64_t v19 = *(void *)(v16 + qword_1009A3A20);
    uint64_t v20 = *(void *)(v16 + qword_1009A3A20 + 8);
    uint64_t *v18 = sub_100177E30;
    v18[1] = v17;
    swift_retain();
    sub_10002214C(v19, v20);
  }

  else
  {
    swift_retain();
  }

  return swift_release();
}

uint64_t sub_100172FAC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(result + qword_1009A3A28);
    swift_retain(v6);
    swift_release(v5);
    uint64_t v7 = v2;
    PassthroughSubject.send(completion:)(&v7);
    return swift_release(v6);
  }

  return result;
}

uint64_t sub_100173030(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(result + qword_1009A3A28);
    swift_retain(v6);
    swift_release(v5);
    uint64_t v7 = v2;
    PassthroughSubject.send(_:)(&v7);
    return swift_release(v6);
  }

  return result;
}

uint64_t sub_1001730B4()
{
  uint64_t v1 = v0;
  if (qword_10099B810 != -1) {
    swift_once(&qword_10099B810, sub_10069374C);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2B188);
  uint64_t v3 = swift_retain_n(v0, 3LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc(22LL, -1LL);
    uint64_t v7 = swift_slowAlloc(64LL, -1LL);
    uint64_t v20 = v7;
    *(_DWORD *)uint64_t v6 = 136446466;
    uint64_t v8 = sub_100171F0C();
    uint64_t v19 = sub_1003F11D4(v8, v9, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v6 + 4, v6 + 12);
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2082;
    uint64_t v10 = *(void *)(v0 + qword_1009A3A00);
    uint64_t v11 = *(void *)(v10 + 16);
    unint64_t v12 = *(void *)(v10 + 24);
    swift_bridgeObjectRetain(v12);
    uint64_t v19 = sub_1003F11D4(v11, v12, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v6 + 14, v6 + 22);
    swift_release_n(v0, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Deleted session: %{public}s service: %{public}s",  (uint8_t *)v6,  0x16u);
    swift_arrayDestroy(v7, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v0, 3LL);
  }

  swift_release();

  uint64_t v13 = v0 + qword_100A2A278;
  uint64_t v14 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8LL))(v13, v14);
  swift_release();
  swift_release();

  swift_release();
  sub_10002214C(*(void *)(v1 + qword_1009A3A20), *(void *)(v1 + qword_1009A3A20 + 8));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v15 = v1 + qword_1009A3A50;
  uint64_t v16 = type metadata accessor for Date(0LL);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8LL);
  v17(v15, v16);
  swift_release();
  swift_release();
  v17(v1 + qword_1009A3A70, v16);
  return v1;
}

uint64_t sub_100173414()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for MessagingSession(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for MessagingSession);
}

uint64_t sub_100173444()
{
  return sub_100693210(v0);
}

uint64_t sub_100173488()
{
  return sub_100693210(v0);
}

uint64_t sub_1001734C8(uint64_t a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009A3B60);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v43[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = sub_100004AEC(&qword_1009A3B40);
  __chkstk_darwin(v7);
  unint64_t v9 = &v43[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = *(void *)(v1 + qword_1009A3A08);
  if (v10)
  {
    uint64_t v47 = v1;
    uint64_t v11 = type metadata accessor for PropertyListEncoder(0LL);
    swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v12 = swift_retain();
    PropertyListEncoder.init()(v12);
    uint64_t v13 = sub_1000372EC( &qword_1009A3B70,  &qword_1009A3B40,  (uint64_t)&protocol conformance descriptor for SessionMessage<A>);
    uint64_t v14 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a1, v7, v13);
    unint64_t v16 = v15;
    swift_release();
    unint64_t v45 = v16;
    uint64_t v46 = v10;
    if (qword_10099B810 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    sub_10000A720(v20, (uint64_t)qword_100A2B188);
    sub_100177BA8(a1, (uint64_t)v9);
    uint64_t v21 = v47;
    uint64_t v22 = swift_retain_n(v47, 4LL);
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.info.getter(v23);
    int v25 = v24;
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v26 = swift_slowAlloc(32LL, -1LL);
      uint64_t v27 = swift_slowAlloc(96LL, -1LL);
      uint64_t v50 = v27;
      *(_DWORD *)uint64_t v26 = 136446722;
      int v44 = v25;
      uint64_t v28 = sub_100171F0C();
      uint64_t v48 = sub_1003F11D4(v28, v29, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v26 + 4, v26 + 12);
      swift_release_n(v21, 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2082;
      uint64_t v30 = sub_1001DCF58();
      uint64_t v48 = sub_1003F11D4(v30, v31, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease();
      sub_100015794((uint64_t)v9, &qword_1009A3B40);
      *(_WORD *)(v26 + 22) = 2082;
      swift_release();
      uint64_t v32 = type metadata accessor for UUID(0LL);
      uint64_t v33 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter(v32, v33);
      uint64_t v48 = sub_1003F11D4(v34, v35, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v26 + 24, v26 + 32);
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v23,  (os_log_type_t)v44,  "%{public}s: Sending (Internal): %{public}s over session: %{public}s",  (uint8_t *)v26,  0x20u);
      swift_arrayDestroy(v27, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    else
    {
      swift_release_n(v21, 3LL);
      sub_100015794((uint64_t)v9, &qword_1009A3B40);

      swift_release();
    }

    uint64_t v36 = v14;
    unint64_t v37 = v45;
    uint64_t v38 = swift_allocObject(&unk_1009423C0, 24LL, 7LL);
    swift_weakInit(v38 + 16, v46);
    uint64_t v39 = (void *)swift_allocObject(&unk_1009423E8, 40LL, 7LL);
    _OWORD v39[2] = v38;
    v39[3] = v36;
    v39[4] = v37;
    uint64_t v40 = sub_100004AEC(&qword_1009A3B78);
    swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
    sub_10001736C(v36, v37);
    uint64_t v50 = Future.init(_:)(sub_100177D80, v39);
    uint64_t v41 = sub_1000372EC(qword_1009A3B80, &qword_1009A3B78, (uint64_t)&protocol conformance descriptor for Future<A, B>);
    uint64_t v19 = Publisher.eraseToAnyPublisher()(v40, v41);
    swift_release();
    sub_100016F9C(v36, v37);
    swift_release();
  }

  else
  {
    uint64_t v50 = 4LL;
    unint64_t v17 = sub_100044AD4();
    Fail.init(error:)(&v50, (char *)&type metadata for () + 8, &type metadata for MessagingError, v17);
    uint64_t v18 = sub_1000372EC(&qword_1009A3B68, &qword_1009A3B60, (uint64_t)&protocol conformance descriptor for Fail<A, B>);
    uint64_t v19 = Publisher.eraseToAnyPublisher()(v3, v18);
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
  }

  return v19;
}

uint64_t sub_100173A34(int a1, int a2)
{
  uint64_t v3 = (uint64_t)v2;
  int v36 = a1;
  LODWORD(v37) = a2;
  uint64_t v4 = *v2;
  uint64_t v5 = type metadata accessor for DispatchTime(0LL);
  uint64_t v34 = *(void *)(v5 - 8);
  uint64_t v35 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v34 - v9;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = swift_allocObject(&unk_100942118, 24LL, 7LL);
  swift_weakInit(v14 + 16, v3);
  uint64_t v15 = swift_allocObject(&unk_1009422D0, 56LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = *(void *)(v4 + 80);
  *(_OWORD *)(v15 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = *(_OWORD *)(v4 + 88);
  *(void *)(v15 + 40) = *(void *)(v4 + 104);
  *(void *)(v15 + 48) = v14;
  unint64_t v45 = sub_100177CC8;
  uint64_t v46 = v15;
  aBlock = _NSConcreteStackBlock;
  uint64_t v42 = 1107296256LL;
  uint64_t v43 = sub_1001C31E8;
  int v44 = &unk_1009422E8;
  unint64_t v16 = _Block_copy(&aBlock);
  uint64_t v40 = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  swift_retain();
  uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v19 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v18, v19, v11, v17);
  uint64_t v20 = type metadata accessor for DispatchWorkItem(0LL);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  uint64_t v21 = DispatchWorkItem.init(flags:block:)(v13, v16);
  swift_release();
  swift_release();
  uint64_t v22 = *(void *)(v3 + 40);
  v38[16] = v36;
  uint64_t v39 = v3;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_100177CF8,  v38,  v22,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
  uint64_t v23 = swift_allocObject(&unk_100942320, 32LL, 7LL);
  *(void *)(v23 + swift_weakDestroy(v0 + 16) = v3;
  *(void *)(v23 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v21;
  os_log_type_t v24 = &off_10099B000;
  if ((v37 & 1) != 0)
  {
    uint64_t v25 = qword_10099B158;
    swift_retain();
    swift_retain();
    if (v25 != -1) {
      swift_once(&qword_10099B158, sub_100171BBC);
    }
    dispatch_queue_t v37 = (dispatch_queue_t)qword_1009A39F8;
    uint64_t v26 = swift_allocObject(&unk_100942348, 32LL, 7LL);
    *(void *)(v26 + swift_weakDestroy(v0 + 16) = sub_100177D18;
    *(void *)(v26 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v23;
    uint64_t v27 = swift_allocObject(&unk_100942370, 32LL, 7LL);
    uint64_t v28 = sub_1000228F4;
    *(void *)(v27 + swift_weakDestroy(v0 + 16) = sub_1000228F4;
    *(void *)(v27 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v26;
    unint64_t v45 = sub_100154688;
    uint64_t v46 = v27;
    aBlock = _NSConcreteStackBlock;
    uint64_t v42 = 1107296256LL;
    uint64_t v43 = sub_100025BD4;
    int v44 = &unk_100942388;
    unint64_t v29 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v37, v29);
    _Block_release(v29);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v27, "", 92LL, 287LL, 33LL, 1LL);
    uint64_t result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
      return result;
    }

    os_log_type_t v24 = &off_10099B000;
  }

  else
  {
    swift_retain();
    swift_retain();
    uint64_t result = sub_100173F6C(v3, v21);
    uint64_t v28 = 0LL;
    uint64_t v26 = 0LL;
  }

  if (v24[43] != (_UNKNOWN *)-1LL) {
    uint64_t result = swift_once(&qword_10099B158, sub_100171BBC);
  }
  static DispatchTime.now()(result);
  + infix(_:_:)(v8, *(double *)(v3 + 16));
  uint64_t v32 = v35;
  uint64_t v33 = *(void (**)(char *, uint64_t))(v34 + 8);
  v33(v8, v35);
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v10, v21);
  swift_release();
  swift_release();
  v33(v10, v32);
  return sub_10002214C((uint64_t)v28, v26);
}

uint64_t sub_100173EA0(char a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = __chkstk_darwin(v4);
  uint64_t v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  if ((a1 & 1) == 0)
  {
    static Date.trustedNow.getter((uint64_t)&v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8]);
    uint64_t v9 = a2 + qword_1009A3A50;
    __n128 v10 = swift_beginAccess(a2 + qword_1009A3A50, v12, 33LL, 0LL);
    (*(void (**)(uint64_t, _BYTE *, uint64_t, __n128))(v5 + 40))(v9, v8, v4, v10);
    uint64_t result = swift_endAccess(v12);
    *(void *)(a2 + qword_1009A3A58) = 0LL;
  }

  return result;
}

uint64_t sub_100173F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = qword_1009A3A60;
  uint64_t v5 = *(void *)(a1 + qword_1009A3A60);
  uint64_t v6 = swift_retain(v5);
  dispatch thunk of DispatchWorkItem.cancel()(v6);
  swift_release(v5);
  uint64_t v7 = qword_1009A3A68;
  uint64_t v8 = *(void *)(a1 + qword_1009A3A68);
  if (v8)
  {
    uint64_t v9 = swift_retain(*(void *)(a1 + qword_1009A3A68));
    dispatch thunk of DispatchWorkItem.cancel()(v9);
    swift_release(v8);
    uint64_t v10 = *(void *)(a1 + v7);
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  *(void *)(a1 + v7) = 0LL;
  swift_release(v10);
  uint64_t v11 = *(void *)(a1 + v4);
  *(void *)(a1 + v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = a2;
  swift_retain(a2);
  return swift_release(v11);
}

uint64_t sub_100174008()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = sub_100004AEC(&qword_1009A3B40);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1001DCAC8(0, 1LL, 0LL, 0xE000000000000000LL, (uint64_t)v5);
  v11[6] = sub_1001734C8((uint64_t)v5);
  uint64_t v6 = swift_allocObject(&unk_100942118, 24LL, 7LL);
  swift_weakInit(v6 + 16, v1);
  uint64_t v7 = swift_allocObject(&unk_1009421E0, 56LL, 7LL);
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 80);
  *(_OWORD *)(v7 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = *(_OWORD *)(v2 + 88);
  *(void *)(v7 + 40) = *(void *)(v2 + 104);
  *(void *)(v7 + 48) = v6;
  uint64_t v8 = sub_100004AEC(&qword_1009A3B50);
  uint64_t v9 = sub_1000372EC( &qword_1009A3B58,  &qword_1009A3B50,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.oneshot(_:)(sub_100177C90, v7, v8, v9);
  swift_release();
  swift_release();
  return sub_100015794((uint64_t)v5, &qword_1009A3B40);
}

void sub_10017436C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v53 = type metadata accessor for DispatchTime(0LL);
  uint64_t v51 = *(void *)(v53 - 8);
  uint64_t v12 = __chkstk_darwin(v53);
  uint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v52 = (char *)&v50 - v15;
  uint64_t v16 = type metadata accessor for DispatchWorkItemFlags(0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v19 = *(void *)a1;
  char v20 = *(_BYTE *)(a1 + 8);
  a2 += 16LL;
  swift_beginAccess(a2, v61, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    uint64_t v22 = Strong;
    if ((v20 & 1) != 0)
    {
      sub_1000A4D58(v19);
      if (qword_10099B810 != -1) {
        swift_once(&qword_10099B810, sub_10069374C);
      }
      uint64_t v23 = type metadata accessor for Logger(0LL);
      sub_10000A720(v23, (uint64_t)qword_100A2B188);
      swift_retain();
      sub_100177C70(v19, 1);
      swift_retain();
      unint64_t v24 = sub_100177C70(v19, 1);
      uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
      os_log_type_t v26 = static os_log_type_t.error.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = swift_slowAlloc(22LL, -1LL);
        uint64_t v28 = (void **)swift_slowAlloc(64LL, -1LL);
        aBlock = v28;
        *(_DWORD *)uint64_t v27 = 136446466;
        uint64_t v29 = sub_100171F0C();
        uint64_t v60 = (void *)sub_1003F11D4(v29, v30, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v27 + 4, v27 + 12);
        swift_release_n(v22, 2LL);
        swift_bridgeObjectRelease();
        *(_WORD *)(v27 + 12) = 2082;
        uint64_t v60 = (void *)v19;
        unint64_t v31 = sub_100044AD4();
        uint64_t v32 = Error.localizedDescription.getter(&type metadata for MessagingError, v31);
        uint64_t v60 = (void *)sub_1003F11D4(v32, v33, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v27 + 14, v27 + 22);
        swift_bridgeObjectRelease();
        sub_100177C7C(v19, 1);
        sub_100177C7C(v19, 1);
        _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "%{public}s: Error sending .heartbeat: %{public}s",  (uint8_t *)v27,  0x16u);
        swift_arrayDestroy(v28, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v28, -1LL, -1LL);
        swift_slowDealloc(v27, -1LL, -1LL);

        sub_100177C7C(v19, 1);
        swift_release();
      }

      else
      {
        swift_release();
        sub_100177C7C(v19, 1);
        swift_release_n(v22, 2LL);
        sub_100177C7C(v19, 1);
        sub_100177C7C(v19, 1);
      }
    }

    else
    {
      uint64_t v34 = swift_allocObject(&unk_100942118, 24LL, 7LL);
      swift_weakInit(v34 + 16, v22);
      uint64_t v35 = (void *)swift_allocObject(&unk_100942208, 56LL, 7LL);
      v35[2] = a3;
      uint64_t v35[3] = a4;
      v35[4] = a5;
      v35[5] = a6;
      v35[6] = v34;
      uint64_t v58 = sub_100177CA0;
      uint64_t v59 = v35;
      aBlock = _NSConcreteStackBlock;
      uint64_t v55 = 1107296256LL;
      uint64_t v56 = sub_1001C31E8;
      uint64_t v57 = &unk_100942220;
      int v36 = _Block_copy(&aBlock);
      uint64_t v60 = _swiftEmptyArrayStorage;
      uint64_t v37 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      swift_retain();
      uint64_t v38 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v39 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v60, v38, v39, v16, v37);
      uint64_t v40 = type metadata accessor for DispatchWorkItem(0LL);
      swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
      uint64_t v41 = DispatchWorkItem.init(flags:block:)(v18, v36);
      swift_release();
      swift_release();
      if (qword_10099B158 != -1) {
        swift_once(&qword_10099B158, sub_100171BBC);
      }
      uint64_t v42 = (dispatch_queue_s *)qword_1009A39F8;
      uint64_t v43 = swift_allocObject(&unk_100942258, 32LL, 7LL);
      *(void *)(v43 + swift_weakDestroy(v0 + 16) = v22;
      *(void *)(v43 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v41;
      uint64_t v44 = swift_allocObject(&unk_100942280, 32LL, 7LL);
      *(void *)(v44 + swift_weakDestroy(v0 + 16) = sub_100177CB0;
      *(void *)(v44 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v43;
      uint64_t v58 = sub_100154688;
      uint64_t v59 = (void *)v44;
      aBlock = _NSConcreteStackBlock;
      uint64_t v55 = 1107296256LL;
      uint64_t v56 = sub_100025BD4;
      uint64_t v57 = &unk_100942298;
      unint64_t v45 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v42, v45);
      _Block_release(v45);
      LOBYTE(v42) = swift_isEscapingClosureAtFileLocation(v44, "", 92LL, 310LL, 45LL, 1LL);
      uint64_t v46 = swift_release();
      if ((v42 & 1) != 0)
      {
        __break(1u);
      }

      else
      {
        static DispatchTime.now()(v46);
        uint64_t v47 = v52;
        + infix(_:_:)(v14, *(double *)(v22 + 24));
        uint64_t v48 = *(void (**)(char *, uint64_t))(v51 + 8);
        uint64_t v49 = v53;
        v48(v14, v53);
        OS_dispatch_queue.asyncAfter(deadline:execute:)(v47, v41);
        swift_release();
        swift_release();
        v48(v47, v49);
        swift_release();
      }
    }
  }

uint64_t sub_10017497C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  uint64_t v7 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v7);
  if (result)
  {
    uint64_t v9 = result;
    a6();
    return swift_release(v9);
  }

  return result;
}

uint64_t sub_1001749D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  static Date.trustedNow.getter((uint64_t)v7);
  uint64_t v8 = a1 + qword_1009A3A70;
  __n128 v9 = swift_beginAccess(a1 + qword_1009A3A70, v12, 33LL, 0LL);
  (*(void (**)(uint64_t, _BYTE *, uint64_t, __n128))(v5 + 40))(v8, v7, v4, v9);
  swift_endAccess(v12);
  *(void *)(a1 + qword_1009A3A68) = a2;
  swift_retain();
  return swift_release();
}

uint64_t sub_100174AA8()
{
  uint64_t v1 = sub_100004AEC(&qword_1009A3B40);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1001DCAC8(1, 1LL, 0LL, 0xE000000000000000LL, (uint64_t)v3);
  v7[6] = sub_1001734C8((uint64_t)v3);
  swift_retain();
  uint64_t v4 = sub_100004AEC(&qword_1009A3B50);
  uint64_t v5 = sub_1000372EC( &qword_1009A3B58,  &qword_1009A3B50,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.oneshot(_:)(sub_100177C88, v0, v4, v5);
  swift_release();
  swift_release();
  return sub_100015794((uint64_t)v3, &qword_1009A3B40);
}

void sub_100174DBC(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 8) == 1)
  {
    unint64_t v3 = *(void *)a1;
    sub_1000A4D58(*(void *)a1);
    if (qword_10099B810 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    sub_10000A720(v4, (uint64_t)qword_100A2B188);
    sub_100177C70(v3, 1);
    swift_retain();
    sub_100177C70(v3, 1);
    uint64_t v5 = swift_retain();
    oslog = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v6 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v6))
    {
      uint64_t v7 = swift_slowAlloc(22LL, -1LL);
      uint64_t v8 = swift_slowAlloc(64LL, -1LL);
      uint64_t v16 = v8;
      *(_DWORD *)uint64_t v7 = 136446466;
      uint64_t v9 = sub_100171F0C();
      uint64_t v15 = sub_1003F11D4(v9, v10, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4, v7 + 12);
      swift_release_n(a2, 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2082;
      uint64_t v15 = v3;
      unint64_t v11 = sub_100044AD4();
      uint64_t v12 = Error.localizedDescription.getter(&type metadata for MessagingError, v11);
      uint64_t v15 = sub_1003F11D4(v12, v13, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 14, v7 + 22);
      swift_bridgeObjectRelease();
      sub_100177C7C(v3, 1);
      sub_100177C7C(v3, 1);
      _os_log_impl( (void *)&_mh_execute_header,  oslog,  v6,  "%{public}s: Error sending .heartbeatReply: %{public}s",  (uint8_t *)v7,  0x16u);
      swift_arrayDestroy(v8, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1LL, -1LL);
      swift_slowDealloc(v7, -1LL, -1LL);

      sub_100177C7C(v3, 1);
    }

    else
    {
      sub_100177C7C(v3, 1);
      swift_release_n(a2, 2LL);
      sub_100177C7C(v3, 1);
      sub_100177C7C(v3, 1);
    }
  }

uint64_t sub_100175040()
{
  uint64_t v1 = type metadata accessor for DispatchTime(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v19 - v6;
  uint64_t v8 = sub_100004AEC(&qword_1009A3B40);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_100177C20,  v0,  *(void *)(v0 + 40),  (char *)&type metadata for () + 8,  &type metadata for Bool);
  if ((v20 & 1) == 0)
  {
    uint64_t v12 = dispatch_group_create();
    sub_1001DCAC8(2, 1LL, 0LL, 0xE000000000000000LL, (uint64_t)v10);
    dispatch_group_enter(v12);
    uint64_t v20 = sub_1001734C8((uint64_t)v10);
    uint64_t v13 = swift_allocObject(&unk_1009421B8, 32LL, 7LL);
    *(void *)(v13 + swift_weakDestroy(v0 + 16) = v12;
    *(void *)(v13 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v0;
    uint64_t v14 = v12;
    swift_retain();
    uint64_t v15 = sub_100004AEC(&qword_1009A3B50);
    uint64_t v16 = sub_1000372EC( &qword_1009A3B58,  &qword_1009A3B50,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher.oneshot(_:)(sub_100177C68, v13, v15, v16);
    swift_release();
    uint64_t v17 = swift_release();
    static DispatchTime.now()(v17);
    + infix(_:_:)(v5, *(double *)(v0 + 24));
    uint64_t v18 = *(void (**)(char *, uint64_t))(v2 + 8);
    v18(v5, v1);
    OS_dispatch_group.wait(timeout:)(v7);

    v18(v7, v1);
    return sub_100015794((uint64_t)v10, &qword_1009A3B40);
  }

  return result;
}

void sub_100175458(uint64_t a1, dispatch_group_t group, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 8) == 1)
  {
    unint64_t v5 = *(void *)a1;
    sub_1000A4D58(*(void *)a1);
    if (qword_10099B810 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    sub_10000A720(v6, (uint64_t)qword_100A2B188);
    sub_100177C70(v5, 1);
    swift_retain();
    sub_100177C70(v5, 1);
    uint64_t v7 = swift_retain();
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc(22LL, -1LL);
      uint64_t v11 = swift_slowAlloc(64LL, -1LL);
      uint64_t v18 = v11;
      *(_DWORD *)uint64_t v10 = 136446466;
      uint64_t v12 = sub_100171F0C();
      uint64_t v17 = sub_1003F11D4(v12, v13, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v10 + 4, v10 + 12);
      swift_release_n(a3, 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2082;
      uint64_t v17 = v5;
      unint64_t v14 = sub_100044AD4();
      uint64_t v15 = Error.localizedDescription.getter(&type metadata for MessagingError, v14);
      uint64_t v17 = sub_1003F11D4(v15, v16, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v10 + 14, v10 + 22);
      swift_bridgeObjectRelease();
      sub_100177C7C(v5, 1);
      sub_100177C7C(v5, 1);
      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "%{public}s: Error sending .shuttingDown: %{public}s",  (uint8_t *)v10,  0x16u);
      swift_arrayDestroy(v11, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1LL, -1LL);
      swift_slowDealloc(v10, -1LL, -1LL);

      sub_100177C7C(v5, 1);
    }

    else
    {
      sub_100177C7C(v5, 1);
      swift_release_n(a3, 2LL);
      sub_100177C7C(v5, 1);
      sub_100177C7C(v5, 1);
    }
  }

  dispatch_group_leave(group);
}

uint64_t sub_1001756D4()
{
  if (qword_10099B810 != -1) {
    swift_once(&qword_10099B810, sub_10069374C);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  sub_10000A720(v1, (uint64_t)qword_100A2B188);
  uint64_t v2 = swift_retain_n(v0, 2LL);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    unint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = swift_slowAlloc(32LL, -1LL);
    v21[0] = v6;
    *(_DWORD *)unint64_t v5 = 136446210;
    uint64_t v7 = sub_100171F0C();
    uint64_t v20 = sub_1003F11D4(v7, v8, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, v21, v5 + 4, v5 + 12);
    swift_release_n(v0, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s: heartbeat timed out", v5, 0xCu);
    swift_arrayDestroy(v6, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v0, 2LL);
  }

  OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_100177BF0,  v0,  *(void *)(v0 + 40),  (char *)&type metadata for () + 8,  &type metadata for Bool);
  if ((v21[0] & 1) == 0) {
    return sub_100173A34(1LL, 0LL);
  }
  uint64_t v9 = swift_retain_n(v0, 4LL);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.error.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc(22LL, -1LL);
    uint64_t v13 = swift_slowAlloc(64LL, -1LL);
    v21[0] = v13;
    *(_DWORD *)uint64_t v12 = 136446466;
    uint64_t v14 = sub_100171F0C();
    uint64_t v20 = sub_1003F11D4(v14, v15, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, v21, v12 + 4, v12 + 12);
    swift_release_n(v0, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2082;
    uint64_t v16 = sub_100171F0C();
    unint64_t v18 = v17;
    swift_release();
    uint64_t v20 = sub_1003F11D4(v16, v18, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, v21, v12 + 14, v12 + 22);
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "%{public}s: *** SESSION FAILED [%{public}s] ***",  (uint8_t *)v12,  0x16u);
    swift_arrayDestroy(v13, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v0, 4LL);
  }

  return sub_100173444();
}

void sub_100175A4C(_BYTE *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100004AEC(&qword_1009A3B40);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B810 != -1) {
    swift_once(&qword_10099B810, sub_10069374C);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = sub_10000A720(v7, (uint64_t)qword_100A2B188);
  sub_100177BA8((uint64_t)a1, (uint64_t)v6);
  uint64_t v9 = swift_retain_n(v2, 4LL);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.info.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    v30[0] = swift_slowAlloc(96LL, -1LL);
    uint64_t v32 = v30[0];
    *(_DWORD *)uint64_t v12 = 136446722;
    v30[1] = v8;
    uint64_t v13 = sub_100171F0C();
    uint64_t v31 = sub_1003F11D4(v13, v14, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v12 + 4, v12 + 12);
    swift_release_n(v2, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2082;
    uint64_t v15 = sub_1001DCF58();
    uint64_t v31 = sub_1003F11D4(v15, v16, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease();
    sub_100015794((uint64_t)v6, &qword_1009A3B40);
    *(_WORD *)(v12 + 22) = 2082;
    swift_release();
    uint64_t v17 = type metadata accessor for UUID(0LL);
    uint64_t v18 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter(v17, v18);
    uint64_t v31 = sub_1003F11D4(v19, v20, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v12 + 24, v12 + 32);
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "%{public}s: read internal message: %{public}s over session: %{public}s",  (uint8_t *)v12,  0x20u);
    uint64_t v21 = v30[0];
    swift_arrayDestroy(v30[0], 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);

    int v22 = *a1;
    if (*a1) {
      goto LABEL_5;
    }
LABEL_9:
    sub_100174AA8();
    return;
  }

  swift_release_n(v2, 3LL);
  sub_100015794((uint64_t)v6, &qword_1009A3B40);

  swift_release();
  int v22 = *a1;
  if (!*a1) {
    goto LABEL_9;
  }
LABEL_5:
  if (v22 != 1)
  {
    uint64_t v23 = swift_retain_n(v2, 2LL);
    unint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      os_log_type_t v26 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v27 = swift_slowAlloc(32LL, -1LL);
      uint64_t v32 = v27;
      *(_DWORD *)os_log_type_t v26 = 136446210;
      uint64_t v28 = sub_100171F0C();
      uint64_t v31 = sub_1003F11D4(v28, v29, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v26 + 4, v26 + 12);
      swift_release_n(v2, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "%{public}s: received .shuttingDown message", v26, 0xCu);
      swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v2, 2LL);
    }

    [*(id *)(v2 + 56) endSession];
    sub_100693210(v2);
  }

uint64_t getEnumTagSinglePayload for HeartbeatConfiguration(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for HeartbeatConfiguration(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v3;
  return result;
}

ValueMetadata *type metadata accessor for HeartbeatConfiguration()
{
  return &type metadata for HeartbeatConfiguration;
}

uint64_t sub_100175EEC()
{
  return sub_100171F0C();
}

uint64_t sub_100175F0C(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 56) sessionID];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    uint64_t v7 = v6;
  }

  else
  {
    uint64_t v5 = 0LL;
    uint64_t v7 = 0LL;
  }

  id v8 = [*(id *)(a2 + 56) sessionID];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v12 = v11;

    if (v7)
    {
      if (v12)
      {
        if (v5 == v10 && v7 == v12)
        {
          swift_bridgeObjectRelease(v7);
          char v14 = 1;
        }

        else
        {
          char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v10, v12, 0LL);
          swift_bridgeObjectRelease(v7);
        }

        goto LABEL_18;
      }

      goto LABEL_13;
    }

    if (v12)
    {
      char v14 = 0;
      goto LABEL_18;
    }
  }

  else if (v7)
  {
LABEL_13:
    char v14 = 0;
    uint64_t v12 = v7;
LABEL_18:
    swift_bridgeObjectRelease(v12);
    return v14 & 1;
  }

  char v14 = 1;
  return v14 & 1;
}

void sub_100176018(uint64_t a1)
{
  id v3 = [*(id *)(v1 + 56) sessionID];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    uint64_t v7 = v6;

    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v7);
    String.hash(into:)(a1, v5, v7);
    swift_bridgeObjectRelease_n(v7, 2LL);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

Swift::Int sub_1001760B0()
{
  return Hasher._finalize()();
}

Swift::Int sub_1001760EC()
{
  return sub_1001760B0();
}

void sub_10017610C(uint64_t a1)
{
}

Swift::Int sub_10017612C(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100176168(uint64_t *a1, uint64_t *a2)
{
  return sub_100175F0C(*a1, *a2) & 1;
}

void sub_100176188()
{
  uint64_t v1 = v0;
  uint64_t v65 = *v0;
  uint64_t v64 = sub_100004AEC(&qword_1009A3B00);
  uint64_t v2 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v4 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B810 != -1) {
    swift_once(&qword_10099B810, sub_10069374C);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_10000A720(v5, (uint64_t)qword_100A2B188);
  uint64_t v6 = swift_retain_n(v0, 2LL);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter(v7);
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v63 = v2;
  if (v9)
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    uint64_t v67 = v11;
    *(_DWORD *)uint64_t v10 = 136446210;
    uint64_t v12 = sub_100171F0C();
    uint64_t v69 = sub_1003F11D4(v12, v13, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v10 + 4, v10 + 12);
    swift_release_n(v0, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s: sessionStarted", v10, 0xCu);
    swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v0, 2LL);
  }

  uint64_t v14 = *(void *)((char *)v0 + qword_1009A3A20);
  if (v14)
  {
    uint64_t v15 = *(void *)((char *)v0 + qword_1009A3A20 + 8);
    unint64_t v16 = (void *)v0[7];
    swift_retain();
    id v17 = [v16 destination];
    if (v17
      && (uint64_t v18 = v17,
          uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17),
          uint64_t v21 = v20,
          v18,
          id v17 = (id)_s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0(v19, v21),
          v22))
    {
      unint64_t v33 = sub_1006935F4();
      swift_bridgeObjectRelease();
      swift_retain_n(v1, 2LL);
      uint64_t v34 = swift_retain_n(v33, 2LL);
      uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
      os_log_type_t v36 = static os_log_type_t.default.getter(v35);
      int v37 = v36;
      id v62 = v35;
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v39 = swift_slowAlloc(22LL, -1LL);
        uint64_t v61 = swift_slowAlloc(64LL, -1LL);
        uint64_t v69 = v61;
        *(_DWORD *)uint64_t v39 = 136446466;
        uint64_t v40 = sub_100171F0C();
        uint64_t v67 = sub_1003F11D4(v40, v41, &v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v39 + 4, v39 + 12);
        swift_release_n(v1, 2LL);
        swift_bridgeObjectRelease();
        *(_WORD *)(v39 + 12) = 2082;
        uint64_t v60 = v39 + 14;
        uint64_t v67 = 60LL;
        unint64_t v68 = 0xE100000000000000LL;
        uint64_t v66 = v33;
        uint64_t v42 = type metadata accessor for MessagingDatagramConnection();
        uint64_t v43 = sub_100007864( &qword_1009A3B20,  (uint64_t (*)(uint64_t))type metadata accessor for MessagingDatagramConnection,  (uint64_t)&unk_100811950);
        swift_retain();
        v44._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v42, v43);
        HIDWORD(v59) = v37;
        String.append(_:)(v44);
        swift_bridgeObjectRelease();
        v45._countAndFlagsBits = 8250LL;
        v45._object = (void *)0xE200000000000000LL;
        String.append(_:)(v45);
        v46._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v42, v43);
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        v47._countAndFlagsBits = 62LL;
        v47._object = (void *)0xE100000000000000LL;
        String.append(_:)(v47);
        swift_release();
        uint64_t v67 = sub_1003F11D4(v67, v68, &v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v60, v39 + 22);
        swift_release_n(v33, 2LL);
        swift_bridgeObjectRelease();
        uint64_t v48 = v62;
        _os_log_impl( (void *)&_mh_execute_header,  v62,  BYTE4(v59),  "%{public}s: Created %{public}s",  (uint8_t *)v39,  0x16u);
        uint64_t v49 = v61;
        swift_arrayDestroy(v61, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v49, -1LL, -1LL);
        swift_slowDealloc(v39, -1LL, -1LL);
      }

      else
      {

        swift_release_n(v33, 2LL);
        swift_release_n(v1, 2LL);
      }

      uint64_t v51 = v63;
      uint64_t v50 = v64;
      *(void *)((char *)v1 + qword_1009A3A08) = v33;
      swift_retain();
      swift_release();
      uint64_t v67 = v33[6];
      swift_retain();
      uint64_t v52 = sub_100004AEC(&qword_1009A3B08);
      uint64_t v53 = sub_1000372EC( &qword_1009A3B10,  &qword_1009A3B08,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      Publisher.first(where:)(sub_100176B58, 0LL, v52, v53);
      swift_release();
      uint64_t v54 = swift_allocObject(&unk_100942118, 24LL, 7LL);
      swift_weakInit(v54 + 16, v1);
      uint64_t v55 = swift_allocObject(&unk_100942140, 80LL, 7LL);
      uint64_t v56 = v65;
      *(void *)(v55 + swift_weakDestroy(v0 + 16) = *(void *)(v65 + 80);
      *(_OWORD *)(v55 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = *(_OWORD *)(v56 + 88);
      *(void *)(v55 + 40) = *(void *)(v56 + 104);
      *(void *)(v55 + 48) = v54;
      *(void *)(v55 + 56) = v33;
      *(void *)(v55 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v14;
      *(void *)(v55 + 72) = v15;
      sub_1000372DC(v14, v15);
      uint64_t v57 = sub_1000372EC( &qword_1009A3B18,  &qword_1009A3B00,  (uint64_t)&protocol conformance descriptor for Publishers.FirstWhere<A>);
      swift_retain();
      uint64_t v58 = Publisher<>.sink(receiveValue:)(sub_100177AF0, v55, v50, v57);
      swift_release();
      sub_10002214C(v14, v15);
      swift_release();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v4, v50);
      *(void *)((char *)v1 + qword_1009A3A38) = v58;
      swift_release();
    }

    else
    {
      uint64_t v23 = (os_log_s *)Logger.logObject.getter(v17);
      os_log_type_t v24 = static os_log_type_t.error.getter(v23);
      if (os_log_type_enabled(v23, v24))
      {
        os_log_type_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)os_log_type_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Invalid destinationString!", v25, 2u);
        swift_slowDealloc(v25, -1LL, -1LL);

        sub_10002214C(v14, v15);
      }

      else
      {
        sub_10002214C(v14, v15);
      }
    }
  }

  else
  {
    uint64_t v26 = swift_retain_n(v0, 2LL);
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      unint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v30 = swift_slowAlloc(32LL, -1LL);
      uint64_t v67 = v30;
      *(_DWORD *)unint64_t v29 = 136446210;
      uint64_t v31 = sub_100171F0C();
      uint64_t v69 = sub_1003F11D4(v31, v32, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v29 + 4, v29 + 12);
      swift_release_n(v0, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v27,  v28,  "%{public}s: sessionStarted called with no promise!",  v29,  0xCu);
      swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v0, 2LL);
    }
  }

BOOL sub_100176B58(void *a1)
{
  return *a1 == 3LL;
}

uint64_t sub_100176B68( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = a2 + 16;
  swift_beginAccess(a2 + 16, v24, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v13);
  if (result)
  {
    uint64_t v15 = result;
    uint64_t v16 = swift_allocObject(&unk_100942118, 24LL, 7LL);
    swift_weakInit(v16 + 16, v15);
    id v17 = (void *)swift_allocObject(&unk_100942168, 56LL, 7LL);
    v17[2] = a6;
    v17[3] = a7;
    v17[4] = a8;
    v17[5] = a9;
    v17[6] = v16;
    uint64_t v18 = swift_allocObject(&unk_100942118, 24LL, 7LL);
    swift_weakInit(v18 + 16, v15);
    uint64_t v19 = (void *)swift_allocObject(&unk_100942190, 56LL, 7LL);
    v19[2] = a6;
    v19[3] = a7;
    v19[4] = a8;
    v19[5] = a9;
    v19[6] = v18;
    swift_retain();
    uint64_t v20 = sub_100004AEC(&qword_1009A3B28);
    uint64_t v21 = sub_1000372EC( &qword_1009A3B30,  &qword_1009A3B28,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    uint64_t v22 = Publisher.sink(receiveCompletion:receiveValue:)(sub_100177B20, v17, sub_100177B50, v19, v20, v21);
    swift_release();
    swift_release();
    swift_release();
    *(void *)(v15 + qword_1009A3A40) = v22;
    swift_release();
    uint64_t v23 = swift_retain();
    a4(v23, 0LL);
    swift_release();
    *(void *)(v15 + qword_1009A3A38) = 0LL;
    swift_release();
    return swift_release();
  }

  return result;
}

uint64_t sub_100176D54(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v7 = v2;
    PassthroughSubject.send(completion:)(&v7);
    uint64_t v6 = *(void *)(v5 + qword_1009A3A40);
    *(void *)(v5 + qword_1009A3A40) = 0LL;
    swift_release(v5);
    return swift_release(v6);
  }

  return result;
}

uint64_t sub_100176DE0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = type metadata accessor for UUID(0LL);
  v35[4] = *(void *)(v10 - 8);
  v35[5] = v10;
  __chkstk_darwin(v10);
  uint64_t v35[3] = (char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for SessionMessage(255LL, a4, a6, v12);
  uint64_t v14 = type metadata accessor for Optional(0LL, v13);
  v35[7] = *(void *)(v14 - 8);
  v35[8] = v14;
  uint64_t v15 = __chkstk_darwin(v14);
  v35[10] = (char *)v35 - v16;
  v35[11] = *(void *)(v13 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  v35[2] = (char *)v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  v35[6] = (char *)v35 - v20;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)v35 - v21;
  uint64_t v23 = sub_100004AEC(&qword_1009A3B38);
  __chkstk_darwin(v23);
  os_log_type_t v25 = (void *)((char *)v35 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v26 = sub_100004AEC(&qword_1009A3B40);
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  unint64_t v29 = (char *)v35 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = *a1;
  uint64_t v31 = a1[1];
  a2 += 16LL;
  swift_beginAccess(a2, v36, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    v35[1] = v22;
    v35[9] = v13;
    sub_100173A34(0, 1);
    uint64_t v33 = type metadata accessor for PropertyListDecoder(0LL);
    swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
    PropertyListDecoder.init()();
    uint64_t v34 = sub_1000372EC( &qword_1009A3B48,  &qword_1009A3B40,  (uint64_t)&protocol conformance descriptor for SessionMessage<A>);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v25, v26, v30, v31, v26, v34);
    swift_release();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v25, 0LL, 1LL, v26);
    sub_100177B60((uint64_t)v25, (uint64_t)v29);
    sub_100175A4C(v29);
    swift_release();
    return sub_100015794((uint64_t)v29, &qword_1009A3B40);
  }

  return result;
}

uint64_t sub_1001774BC(int a1, void *a2)
{
  uint64_t v3 = v2;
  if (!a2)
  {
    if (qword_10099B810 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    sub_10000A720(v15, (uint64_t)qword_100A2B188);
    uint64_t v16 = swift_retain_n(v2, 2LL);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc(18LL, -1LL);
      uint64_t v20 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v20;
      *(_DWORD *)uint64_t v19 = 136446466;
      uint64_t v21 = sub_100171F0C();
      uint64_t v29 = sub_1003F11D4(v21, v22, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, aBlock, v19 + 4, v19 + 12);
      swift_release_n(v2, 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 1024;
      LODWORD(v29) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, (char *)&v29 + 4, v19 + 14, v19 + 18);
      _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "%{public}s: session ended with reason: %u",  (uint8_t *)v19,  0x12u);
      swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v2, 2LL);
    }

    goto LABEL_11;
  }

  uint64_t v5 = a2;
  swift_errorRetain(a2);
  if (qword_10099B810 != -1) {
    goto LABEL_15;
  }
  while (1)
  {
    uint64_t v6 = type metadata accessor for Logger(0LL);
    sub_10000A720(v6, (uint64_t)qword_100A2B188);
    swift_errorRetain(v5);
    swift_retain();
    swift_errorRetain(v5);
    uint64_t v7 = swift_retain();
    os_log_type_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc(28LL, -1LL);
      uint64_t v26 = swift_slowAlloc(64LL, -1LL);
      aBlock[0] = v26;
      *(_DWORD *)uint64_t v10 = 136446722;
      uint64_t v11 = sub_100171F0C();
      uint64_t v29 = sub_1003F11D4(v11, v12, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, aBlock, v10 + 4, v10 + 12);
      swift_release_n(v3, 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 1024;
      LODWORD(v29) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, (char *)&v29 + 4, v10 + 14, v10 + 18);
      *(_WORD *)(v10 + 18) = 2082;
      swift_getErrorValue(v5, v28, v27);
      uint64_t v13 = Error.localizedDescription.getter(v27[1], v27[2]);
      uint64_t v29 = sub_1003F11D4(v13, v14, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, aBlock, v10 + 20, v10 + 28);
      swift_bridgeObjectRelease();
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "%{public}s: session ended with reason: %u error: %{public}s",  (uint8_t *)v10,  0x1Cu);
      swift_arrayDestroy(v26, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v10, -1LL, -1LL);

      swift_errorRelease(v5);
    }

    else
    {
      swift_errorRelease(v5);
      swift_release_n(v3, 2LL);
      swift_errorRelease(v5);
      swift_errorRelease(v5);
    }

uint64_t sub_1001779AC(uint64_t a1)
{
  uint64_t v2 = swift_retain();
  dispatch thunk of DispatchWorkItem.cancel()(v2);
  swift_release();
  uint64_t v3 = qword_1009A3A68;
  if (*(void *)(a1 + qword_1009A3A68))
  {
    uint64_t v4 = swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()(v4);
    swift_release();
  }

  *(void *)(a1 + v3) = 0LL;
  swift_release();
  *(void *)(a1 + qword_1009A3A18) = 0LL;
  swift_release();
  uint64_t v5 = (void *)(a1 + qword_1009A3A20);
  uint64_t v6 = *(void *)(a1 + qword_1009A3A20);
  uint64_t v7 = *(void *)(a1 + qword_1009A3A20 + 8);
  *uint64_t v5 = 0LL;
  v5[1] = 0LL;
  return sub_10002214C(v6, v7);
}

uint64_t sub_100177A58(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1007EFBF8, a1);
}

uint64_t sub_100177A68()
{
  return sub_1001779AC(v0);
}

uint64_t sub_100177A70()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100177A80(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100177A90(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100177A98()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100177ABC()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_100177AF0(uint64_t a1)
{
  return sub_100176B68( a1,  *(void *)(v1 + 48),  *(void *)(v1 + 56),  *(void (**)(uint64_t, void))(v1 + 64),  *(void *)(v1 + 72),  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40));
}

uint64_t sub_100177B20(uint64_t a1)
{
  return sub_100177DC0(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_100176D54);
}

uint64_t sub_100177B2C()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100177B50(uint64_t *a1)
{
  return sub_100176DE0(a1, v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100177B60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A3B40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100177BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A3B40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_100177BF0(BOOL *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + qword_1009A3A58);
  BOOL v3 = __OFADD__(v2, 1LL);
  uint64_t v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v1 + qword_1009A3A58) = v4;
    *a1 = v4 >= *(void *)(v1 + 32);
  }

void sub_100177C20(_BYTE *a1@<X8>)
{
  char v2 = *(_BYTE *)(v1 + qword_1009A3A78);
  *(_BYTE *)(v1 + qword_1009A3A78) = 1;
  *a1 = v2;
}

uint64_t sub_100177C3C()
{
  swift_release(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100177C68(uint64_t a1)
{
}

unint64_t sub_100177C70(unint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return sub_1000A4D58(result);
  }
  return result;
}

unint64_t sub_100177C7C(unint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return sub_1000A4D68(result);
  }
  return result;
}

void sub_100177C88(uint64_t a1)
{
}

void sub_100177C90(uint64_t a1)
{
}

uint64_t sub_100177CA0()
{
  return sub_100177CD4((void (*)(void))sub_1001756D4);
}

uint64_t sub_100177CB0()
{
  return sub_1001749D4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100177CB8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100177CC8()
{
  return sub_100177CD4((void (*)(void))sub_100174008);
}

uint64_t sub_100177CD4(void (*a1)(void))
{
  return sub_10017497C(v1[6], v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t sub_100177CF8()
{
  return sub_100173EA0(*(_BYTE *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100177D18()
{
  return sub_100173F6C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100177D20()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100177D44()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100177D54()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_100177D80(uint64_t a1, uint64_t a2)
{
}

uint64_t type metadata accessor for MessagingSession.MessagingSessionError(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for MessagingSession.MessagingSessionError);
}

uint64_t sub_100177D98(uint64_t a1, uint64_t a2)
{
  return sub_100172E9C(a1, a2, v2[6], v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_100177DA8(uint64_t a1)
{
  return sub_100177DC0(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_100172FAC);
}

uint64_t sub_100177DB4(uint64_t a1)
{
  return sub_100177DC0(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_100173030);
}

uint64_t sub_100177DC0(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[6], v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_100177DD4()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100177DF8(uint64_t a1, char a2)
{
  BOOL v3 = *(uint64_t (**)(uint64_t *))(v2 + 48);
  uint64_t v5 = a1;
  char v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_100177E30(uint64_t a1, char a2)
{
  return 0LL;
}

uint64_t sub_100177E58(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for UserNotificationPublisher.Error( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)uint64_t result = 0LL;
    *(_DWORD *)uint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 1;
    }
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for InternalSessionMessageType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 1;
  }
  else {
    LODWORD(v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100177F54 + 4 * byte_1007EFAE5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100177F88 + 4 * asc_1007EFAE0[v4]))();
}

uint64_t sub_100177F88(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100177F90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100177F98LL);
  }
  return result;
}

uint64_t sub_100177FA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100177FACLL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100177FB0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100177FB8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InternalSessionMessageType()
{
  return &type metadata for InternalSessionMessageType;
}

unint64_t sub_100177FD4(void *a1)
{
  a1[1] = sub_100178008();
  a1[2] = sub_10017804C();
  unint64_t result = sub_100178090();
  a1[3] = result;
  return result;
}

unint64_t sub_100178008()
{
  unint64_t result = qword_1009A3C08;
  if (!qword_1009A3C08)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EFD04, &type metadata for InternalSessionMessageType);
    atomic_store(result, (unint64_t *)&qword_1009A3C08);
  }

  return result;
}

unint64_t sub_10017804C()
{
  unint64_t result = qword_1009A3C10;
  if (!qword_1009A3C10)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EFCDC, &type metadata for InternalSessionMessageType);
    atomic_store(result, (unint64_t *)&qword_1009A3C10);
  }

  return result;
}

unint64_t sub_100178090()
{
  unint64_t result = qword_1009A3C18;
  if (!qword_1009A3C18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EFD80, &type metadata for InternalSessionMessageType);
    atomic_store(result, (unint64_t *)&qword_1009A3C18);
  }

  return result;
}

uint64_t sub_1001780D4()
{
  return sub_1000372EC(&qword_1009A3C20, &qword_1009A3C28, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_100178104()
{
  unint64_t result = qword_1009A3C30;
  if (!qword_1009A3C30)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EFDF8, &type metadata for InternalSessionMessageType);
    atomic_store(result, (unint64_t *)&qword_1009A3C30);
  }

  return result;
}

void *PairingNonce.length.unsafeMutableAddressor()
{
  return &static PairingNonce.length;
}

void sub_1001781A0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

void sub_1001781DC(uint64_t *a1@<X8>)
{
  if (BYTE6(v2) == 72LL)
  {
    *a1 = v3;
    a1[1] = v2;
    return;
  }

  if (!v1)
  {
    uint64_t v4 = BYTE6(v2);
    goto LABEL_9;
  }

  if (v1 != 1)
  {
    uint64_t v6 = *(void *)(v3 + 16);
    uint64_t v5 = *(void *)(v3 + 24);
    uint64_t v4 = v5 - v6;
    if (!__OFSUB__(v5, v6)) {
      goto LABEL_9;
    }
LABEL_11:
    __break(1u);
    JUMPOUT(0x1001782ACLL);
  }

  if (__OFSUB__(HIDWORD(v3), (_DWORD)v3))
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v4 = HIDWORD(v3) - (int)v3;
LABEL_9:
  unint64_t v7 = sub_100117AD0();
  uint64_t v8 = swift_allocError(&type metadata for KeyRepresentableError, v7, 0LL, 0LL);
  *(void *)uint64_t v9 = 72LL;
  *(void *)(v9 + 8) = v4;
  *(_BYTE *)(v9 + swift_weakDestroy(v0 + 16) = 0;
  swift_willThrow(v8);
  sub_100016F9C(v3, v2);
}

void sub_1001782BC(uint64_t a1, uint64_t a2)
{
}

void sub_1001782D0(uint64_t a1, uint64_t a2)
{
}

void sub_1001782E4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

void sub_100178320(uint64_t *a1@<X8>)
{
  if (BYTE6(v2) == 28LL)
  {
    *a1 = v3;
    a1[1] = v2;
    return;
  }

  if (!v1)
  {
    uint64_t v4 = BYTE6(v2);
    goto LABEL_9;
  }

  if (v1 != 1)
  {
    uint64_t v6 = *(void *)(v3 + 16);
    uint64_t v5 = *(void *)(v3 + 24);
    uint64_t v4 = v5 - v6;
    if (!__OFSUB__(v5, v6)) {
      goto LABEL_9;
    }
LABEL_11:
    __break(1u);
    JUMPOUT(0x1001783F0LL);
  }

  if (__OFSUB__(HIDWORD(v3), (_DWORD)v3))
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v4 = HIDWORD(v3) - (int)v3;
LABEL_9:
  unint64_t v7 = sub_100117AD0();
  uint64_t v8 = swift_allocError(&type metadata for KeyRepresentableError, v7, 0LL, 0LL);
  *(void *)uint64_t v9 = 28LL;
  *(void *)(v9 + 8) = v4;
  *(_BYTE *)(v9 + swift_weakDestroy(v0 + 16) = 0;
  swift_willThrow(v8);
  sub_100016F9C(v3, v2);
}

void sub_100178400(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

void sub_10017843C(uint64_t *a1@<X8>)
{
  if (BYTE6(v2) == 113LL)
  {
    *a1 = v3;
    a1[1] = v2;
    return;
  }

  if (!v1)
  {
    uint64_t v4 = BYTE6(v2);
    goto LABEL_9;
  }

  if (v1 != 1)
  {
    uint64_t v6 = *(void *)(v3 + 16);
    uint64_t v5 = *(void *)(v3 + 24);
    uint64_t v4 = v5 - v6;
    if (!__OFSUB__(v5, v6)) {
      goto LABEL_9;
    }
LABEL_11:
    __break(1u);
    JUMPOUT(0x10017850CLL);
  }

  if (__OFSUB__(HIDWORD(v3), (_DWORD)v3))
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v4 = HIDWORD(v3) - (int)v3;
LABEL_9:
  unint64_t v7 = sub_100117AD0();
  uint64_t v8 = swift_allocError(&type metadata for KeyRepresentableError, v7, 0LL, 0LL);
  *(void *)uint64_t v9 = 113LL;
  *(void *)(v9 + 8) = v4;
  *(_BYTE *)(v9 + swift_weakDestroy(v0 + 16) = 0;
  swift_willThrow(v8);
  sub_100016F9C(v3, v2);
}

void sub_10017851C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

void sub_100178558(uint64_t *a1@<X8>)
{
  if (BYTE6(v2) == 6LL)
  {
    *a1 = v3;
    a1[1] = v2;
    return;
  }

  if (!v1)
  {
    uint64_t v4 = BYTE6(v2);
    goto LABEL_9;
  }

  if (v1 != 1)
  {
    uint64_t v6 = *(void *)(v3 + 16);
    uint64_t v5 = *(void *)(v3 + 24);
    uint64_t v4 = v5 - v6;
    if (!__OFSUB__(v5, v6)) {
      goto LABEL_9;
    }
LABEL_11:
    __break(1u);
    JUMPOUT(0x100178628LL);
  }

  if (__OFSUB__(HIDWORD(v3), (_DWORD)v3))
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v4 = HIDWORD(v3) - (int)v3;
LABEL_9:
  unint64_t v7 = sub_100117AD0();
  uint64_t v8 = swift_allocError(&type metadata for KeyRepresentableError, v7, 0LL, 0LL);
  *(void *)uint64_t v9 = 6LL;
  *(void *)(v9 + 8) = v4;
  *(_BYTE *)(v9 + swift_weakDestroy(v0 + 16) = 0;
  swift_willThrow(v8);
  sub_100016F9C(v3, v2);
}

void sub_100178638(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

void sub_100178674(uint64_t *a1@<X8>)
{
  if (BYTE6(v2) == 89LL)
  {
    *a1 = v3;
    a1[1] = v2;
    return;
  }

  if (!v1)
  {
    uint64_t v4 = BYTE6(v2);
    goto LABEL_9;
  }

  if (v1 != 1)
  {
    uint64_t v6 = *(void *)(v3 + 16);
    uint64_t v5 = *(void *)(v3 + 24);
    uint64_t v4 = v5 - v6;
    if (!__OFSUB__(v5, v6)) {
      goto LABEL_9;
    }
LABEL_11:
    __break(1u);
    JUMPOUT(0x100178744LL);
  }

  if (__OFSUB__(HIDWORD(v3), (_DWORD)v3))
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v4 = HIDWORD(v3) - (int)v3;
LABEL_9:
  unint64_t v7 = sub_100117AD0();
  uint64_t v8 = swift_allocError(&type metadata for KeyRepresentableError, v7, 0LL, 0LL);
  *(void *)uint64_t v9 = 89LL;
  *(void *)(v9 + 8) = v4;
  *(_BYTE *)(v9 + swift_weakDestroy(v0 + 16) = 0;
  swift_willThrow(v8);
  sub_100016F9C(v3, v2);
}

void sub_100178754(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

uint64_t sub_100178790()
{
  unint64_t v2 = sub_100117AD0();
  uint64_t v3 = swift_allocError(&type metadata for KeyRepresentableError, v2, 0LL, 0LL);
  *(void *)uint64_t v4 = 1326LL;
  *(void *)(v4 + 8) = BYTE6(v0);
  *(_BYTE *)(v4 + swift_weakDestroy(v0 + 16) = 0;
  swift_willThrow(v3);
  return sub_100016F9C(v1, v0);
}

void sub_100178860(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

void sub_10017889C(uint64_t *a1@<X8>)
{
  if (BYTE6(v2) == 32LL)
  {
    *a1 = v3;
    a1[1] = v2;
    return;
  }

  if (!v1)
  {
    uint64_t v4 = BYTE6(v2);
    goto LABEL_9;
  }

  if (v1 != 1)
  {
    uint64_t v6 = *(void *)(v3 + 16);
    uint64_t v5 = *(void *)(v3 + 24);
    uint64_t v4 = v5 - v6;
    if (!__OFSUB__(v5, v6)) {
      goto LABEL_9;
    }
LABEL_11:
    __break(1u);
    JUMPOUT(0x10017896CLL);
  }

  if (__OFSUB__(HIDWORD(v3), (_DWORD)v3))
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v4 = HIDWORD(v3) - (int)v3;
LABEL_9:
  unint64_t v7 = sub_100117AD0();
  uint64_t v8 = swift_allocError(&type metadata for KeyRepresentableError, v7, 0LL, 0LL);
  *(void *)uint64_t v9 = 32LL;
  *(void *)(v9 + 8) = v4;
  *(_BYTE *)(v9 + swift_weakDestroy(v0 + 16) = 0;
  swift_willThrow(v8);
  sub_100016F9C(v3, v2);
}

void sub_10017897C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

uint64_t sub_1001789B8()
{
  unint64_t v2 = sub_100117AD0();
  uint64_t v3 = swift_allocError(&type metadata for KeyRepresentableError, v2, 0LL, 0LL);
  *(void *)uint64_t v4 = 1286LL;
  *(void *)(v4 + 8) = BYTE6(v0);
  *(_BYTE *)(v4 + swift_weakDestroy(v0 + 16) = 0;
  swift_willThrow(v3);
  return sub_100016F9C(v1, v0);
}

void sub_100178A88(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

void sub_100178AC4(uint64_t *a1@<X8>)
{
  if (BYTE6(v2) == 60LL)
  {
    *a1 = v3;
    a1[1] = v2;
    return;
  }

  if (!v1)
  {
    uint64_t v4 = BYTE6(v2);
    goto LABEL_9;
  }

  if (v1 != 1)
  {
    uint64_t v6 = *(void *)(v3 + 16);
    uint64_t v5 = *(void *)(v3 + 24);
    uint64_t v4 = v5 - v6;
    if (!__OFSUB__(v5, v6)) {
      goto LABEL_9;
    }
LABEL_11:
    __break(1u);
    JUMPOUT(0x100178B94LL);
  }

  if (__OFSUB__(HIDWORD(v3), (_DWORD)v3))
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v4 = HIDWORD(v3) - (int)v3;
LABEL_9:
  unint64_t v7 = sub_100117AD0();
  uint64_t v8 = swift_allocError(&type metadata for KeyRepresentableError, v7, 0LL, 0LL);
  *(void *)uint64_t v9 = 60LL;
  *(void *)(v9 + 8) = v4;
  *(_BYTE *)(v9 + swift_weakDestroy(v0 + 16) = 0;
  swift_willThrow(v8);
  sub_100016F9C(v3, v2);
}

uint64_t KeyRepresentable<>.init(data:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a4 + 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 48);
  sub_10001736C(a1, a2);
  v10(a3, v9);
  sub_10017D470(a1, a2);
  if (!v4) {
    (*(void (**)(void))(a4 + 24))();
  }
  return sub_100016F9C(a1, a2);
}

void *CollaborativeKeyGen.v1.C2.length.unsafeMutableAddressor()
{
  return &static CollaborativeKeyGen.v1.C2.length;
}

void sub_100178C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000LL) == 0) {
    __asm { BR              X9 }
  }

  __break(1u);
  JUMPOUT(0x100178DACLL);
}

uint64_t sub_100178DE0(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    unint64_t v3 = *(void *)(a2 + 16);
    else {
      unint64_t v4 = *(void *)(a2 + 16);
    }
    if (result) {
      unint64_t v5 = v4;
    }
    else {
      unint64_t v5 = 0LL;
    }
    if (v3 >= v5)
    {
      type metadata accessor for OwnedDeviceKeyRecord(0LL);
      return a2;
    }
  }

  __break(1u);
  return result;
}

int64_t sub_100178E50(int64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    unint64_t v2 = *(void *)(a2 + 16);
    else {
      unint64_t v3 = *(void *)(a2 + 16);
    }
    if (!result) {
      unint64_t v3 = 0LL;
    }
    if (v2 >= v3) {
      return a2;
    }
  }

  __break(1u);
  return result;
}

uint64_t Advertisement.nearOwner.getter(uint64_t a1, unint64_t a2)
{
  return sub_10017B21C(a1, a2, 6LL);
}

void *Advertisement.length.unsafeMutableAddressor()
{
  return &static Advertisement.length;
}

void *NearOwnerAdvertisement.length.unsafeMutableAddressor()
{
  return &static NearOwnerAdvertisement.length;
}

uint64_t StandardPublicKey.init(data:)(uint64_t a1, unint64_t a2)
{
  return sub_10017D87C(a1, a2);
}

uint64_t Advertisement.hashed.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HashAlgorithm(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for HashAlgorithm.sha256(_:), v4);
  uint64_t v8 = Data.hash(algorithm:)(v7, a1, a2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t KeyRepresenting.rawValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 8) + 40LL))();
}

SecKeyRef sub_100178F8C(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = v4;
  uint64_t v29 = v4;
  error[0] = (CFErrorRef)kSecAttrKeyTypeEC;
  sub_10006A358(error, v27);
  uint64_t v6 = (id)kSecAttrKeyType;
  unint64_t v7 = (id)kSecAttrKeyTypeEC;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_10005C130(v27, v6, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease();
  uint64_t v29 = v5;
  error[0] = (CFErrorRef)kSecAttrKeyClassPrivate;
  sub_10006A358(error, v27);
  uint64_t v9 = (id)kSecAttrKeyClass;
  uint64_t v10 = (id)kSecAttrKeyClassPrivate;
  char v11 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_10005C130(v27, v9, v11);

  swift_bridgeObjectRelease();
  error[0] = 0LL;
  sub_10001736C(a1, a2);
  Class isa = (const __CFData *)Data._bridgeToObjectiveC()().super.isa;
  sub_100016F9C(a1, a2);
  sub_100022898(0LL, (unint64_t *)&qword_10099E400, &OBJC_CLASS___NSObject_ptr);
  sub_100183C14();
  uint64_t v13 = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  SecKeyRef v14 = SecKeyCreateWithData(isa, v13, error);

  if (!v14) {
    goto LABEL_4;
  }
  if (error[0])
  {

LABEL_4:
    uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
    *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(CFErrorRef *)&v27[0] = error[0];
    uint64_t v17 = sub_100004AEC(&qword_1009A4668);
    uint64_t v18 = String.init<A>(describing:)(v27, v17);
    uint64_t v20 = v19;
    *(void *)(v16 + 56) = &type metadata for String;
    *(void *)(v16 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1000226F4();
    *(void *)(v16 + 32) = v18;
    *(void *)(v16 + 40) = v20;
    uint64_t v21 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
    unint64_t v22 = (void *)static OS_os_log.default.getter(v21);
    uint64_t v23 = static os_log_type_t.default.getter(v22);
    os_log(_:dso:log:type:_:)( "CryptoUtil: decryption: could not create SecKey for private key: %@",  67LL,  2LL,  &_mh_execute_header,  v22,  v23,  v16);
    swift_bridgeObjectRelease();

    unint64_t v24 = sub_100183C6C();
    uint64_t v25 = swift_allocError(&type metadata for PrivateKey.PrivateKeyError, v24, 0LL, 0LL);
    swift_willThrow(v25);
  }

  return v14;
}

uint64_t NearOwnerAdvertisement.init(macAddress:ek:)(uint64_t a1, int a2)
{
  uint64_t v4 = MACAddress.data.getter();
  unint64_t v6 = v5;
  sub_10001736C(v4, v5);
  char v7 = Data.subscript.getter(0LL, v4, v6);
  sub_100016F9C(v4, v6);
  Data._Representation.subscript.setter(v7 & 0x3F | (a2 << 6), 0LL);
  uint64_t v8 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(a1, v8);
  return v4;
}

uint64_t Advertisement.init(macAddress:pubKey2:ek:)(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v6 = sub_10017D768(a1, a2, a3, a4);
  sub_100016F9C(a2, a3);
  return v6;
}

void sub_100179360(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_10017938C(uint64_t result, unint64_t a2)
{
  if (BYTE6(a2) != 174LL)
  {
    sub_100016F9C(result, a2);
    unint64_t result = 0LL;
    a2 = 0xF000000000000000LL;
  }

  *unint64_t v2 = result;
  v2[1] = a2;
  return result;
}

void sub_1001793F0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_10017941C(uint64_t result, unint64_t a2)
{
  if (BYTE6(a2) != 65LL)
  {
    sub_100016F9C(result, a2);
    unint64_t result = 0LL;
    a2 = 0xF000000000000000LL;
  }

  *unint64_t v2 = result;
  v2[1] = a2;
  return result;
}

void sub_100179480(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_1001794AC(uint64_t result, unint64_t a2)
{
  if (BYTE6(a2) != 57LL)
  {
    sub_100016F9C(result, a2);
    unint64_t result = 0LL;
    a2 = 0xF000000000000000LL;
  }

  *unint64_t v2 = result;
  v2[1] = a2;
  return result;
}

void sub_100179510(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_10017953C(uint64_t result, unint64_t a2)
{
  if (BYTE6(a2) != 28LL)
  {
    sub_100016F9C(result, a2);
    unint64_t result = 0LL;
    a2 = 0xF000000000000000LL;
  }

  *unint64_t v2 = result;
  v2[1] = a2;
  return result;
}

void sub_1001795A0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_1001795CC(uint64_t result, unint64_t a2)
{
  if (BYTE6(a2) != 72LL)
  {
    sub_100016F9C(result, a2);
    unint64_t result = 0LL;
    a2 = 0xF000000000000000LL;
  }

  *unint64_t v2 = result;
  v2[1] = a2;
  return result;
}

void sub_100179630(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_10017965C(uint64_t result, unint64_t a2)
{
  if (BYTE6(a2) != 16LL)
  {
    sub_100016F9C(result, a2);
    unint64_t result = 0LL;
    a2 = 0xF000000000000000LL;
  }

  *unint64_t v2 = result;
  v2[1] = a2;
  return result;
}

void sub_1001796C0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_1001796EC(uint64_t result, unint64_t a2)
{
  if (BYTE6(a2) != 6LL)
  {
    sub_100016F9C(result, a2);
    unint64_t result = 0LL;
    a2 = 0xF000000000000000LL;
  }

  *unint64_t v2 = result;
  v2[1] = a2;
  return result;
}

void sub_100179750(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_10017977C(uint64_t result, unint64_t a2)
{
  if (BYTE6(a2) != 12LL)
  {
    sub_100016F9C(result, a2);
    unint64_t result = 0LL;
    a2 = 0xF000000000000000LL;
  }

  *unint64_t v2 = result;
  v2[1] = a2;
  return result;
}

void sub_1001797E0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_10017980C(uint64_t result, unint64_t a2)
{
  if (BYTE6(a2) != 113LL)
  {
    sub_100016F9C(result, a2);
    unint64_t result = 0LL;
    a2 = 0xF000000000000000LL;
  }

  *unint64_t v2 = result;
  v2[1] = a2;
  return result;
}

void sub_100179870(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_1001798F8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_100179980(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_100179A08(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_100179A34(uint64_t result, unint64_t a2)
{
  if (BYTE6(a2) != 100LL)
  {
    sub_100016F9C(result, a2);
    unint64_t result = 0LL;
    a2 = 0xF000000000000000LL;
  }

  *unint64_t v2 = result;
  v2[1] = a2;
  return result;
}

void sub_100179A98(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_100179AC4(uint64_t result, unint64_t a2)
{
  if (BYTE6(a2) != 32LL)
  {
    sub_100016F9C(result, a2);
    unint64_t result = 0LL;
    a2 = 0xF000000000000000LL;
  }

  *unint64_t v2 = result;
  v2[1] = a2;
  return result;
}

void sub_100179B28(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_100179B54(uint64_t result, unint64_t a2)
{
  if (BYTE6(a2) != 89LL)
  {
    sub_100016F9C(result, a2);
    unint64_t result = 0LL;
    a2 = 0xF000000000000000LL;
  }

  *unint64_t v2 = result;
  v2[1] = a2;
  return result;
}

void sub_100179BB8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_100179BE4(uint64_t result, unint64_t a2)
{
  if (BYTE6(a2) != 60LL)
  {
    sub_100016F9C(result, a2);
    unint64_t result = 0LL;
    a2 = 0xF000000000000000LL;
  }

  *unint64_t v2 = result;
  v2[1] = a2;
  return result;
}

void sub_100179C48(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_100179C74(uint64_t result, unint64_t a2)
{
  if (BYTE6(a2) != 114LL)
  {
    sub_100016F9C(result, a2);
    unint64_t result = 0LL;
    a2 = 0xF000000000000000LL;
  }

  *unint64_t v2 = result;
  v2[1] = a2;
  return result;
}

void sub_100179CD8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_100179D04(uint64_t result, unint64_t a2)
{
  if (BYTE6(a2) != 85LL)
  {
    sub_100016F9C(result, a2);
    unint64_t result = 0LL;
    a2 = 0xF000000000000000LL;
  }

  *unint64_t v2 = result;
  v2[1] = a2;
  return result;
}

void KeyRepresenting.init(rawValue:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 48);
  unint64_t v7 = a2 >> 62;
  sub_10001736C(a1, a2);
  v6(a3, v5);
  __asm { BR              X9 }

uint64_t sub_100179DD4(uint64_t a1)
{
  if (BYTE6(v3) == a1)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v5 + 24))(v4, v3, v1, v5);
    uint64_t v6 = 0LL;
  }

  else
  {
    sub_100016F9C(v4, v3);
    uint64_t v6 = 1LL;
  }

  sub_100016F9C(v4, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 56LL))(v2, v6, 1LL, v1);
}

uint64_t Advertisement.macAddress.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_10001736C(a1, a2);
  uint64_t v10 = static MACAddress.length.getter(v9);
  sub_100178C64(v10, a1, a2);
  MACAddress.init(data:type:)(v14[0], v14[1], 1LL);
  uint64_t v11 = type metadata accessor for MACAddress(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v8, 1LL, v11);
  if ((_DWORD)result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a3, v8, v11);
  }
  __break(1u);
  return result;
}

uint64_t PublicKey.advertisement.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_1004DFCF0(a1, a2);
  uint64_t v6 = v5;
  sub_100016F9C(a1, a2);
  sub_1001782E4(v4, v6);
  return v8;
}

void *RefKey.length.unsafeMutableAddressor()
{
  return &static RefKey.length;
}

void *SikPub.length.unsafeMutableAddressor()
{
  return &static SikPub.length;
}

void *CollaborativeKeyGen.C1.length.unsafeMutableAddressor()
{
  return &static CollaborativeKeyGen.C1.length;
}

void *CollaborativeKeyGen.v2.C2.length.unsafeMutableAddressor()
{
  return &static CollaborativeKeyGen.v2.C2.length;
}

uint64_t Advertisement.hint.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_10001736C(a1, a2);
  uint64_t v5 = static MACAddress.length.getter(v4);
  sub_100178C64(v5, a1, a2);
  uint64_t v6 = Data.subscript.getter(5LL);
  sub_100016F9C(v8, v9);
  return v6;
}

uint64_t PublicKey.init(data:)(uint64_t a1, unint64_t a2)
{
  return sub_10017D59C(a1, a2);
}

uint64_t PrivateKey.init(data:)(uint64_t a1, unint64_t a2)
{
  return sub_10017D280(a1, a2);
}

uint64_t sub_10017A16C(uint64_t a1, unint64_t a2, char a3)
{
  if (!a3)
  {
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    unint64_t v11 = 0xD000000000000019LL;
    v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 0x6C6175746361202CLL;
    v8._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v8);
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    return v11;
  }

  if (a3 == 1)
  {
    sub_10001736C(a1, a2);
    _StringGuts.grow(_:)(27LL);
    swift_bridgeObjectRelease();
    unint64_t v11 = 0xD000000000000018LL;
    v5._countAndFlagsBits = Data.hexString.getter(a1, a2);
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = 41LL;
    v6._object = (void *)0xE100000000000000LL;
    String.append(_:)(v6);
    sub_100182090(a1, a2, 1);
    return v11;
  }

  if (a1 | a2) {
    return 0x64696C61766E692ELL;
  }
  else {
    return 0x7479426F72657A2ELL;
  }
}

uint64_t sub_10017A344()
{
  return sub_10017A16C(*(void *)v0, *(void *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t KeyRepresentableInternal.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_100016F9C(a2, a3);
}

uint64_t sub_10017A3A4()
{
  return 1635017060LL;
}

uint64_t sub_10017A3B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 1635017060 && a2 == 0xE400000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xE400000000000000LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(1635017060LL, 0xE400000000000000LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10017A438(uint64_t a1)
{
  unint64_t v2 = sub_10017DA6C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017A460(uint64_t a1)
{
  unint64_t v2 = sub_10017DA6C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t KeyRepresentableInternal.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100004AEC(&qword_1009A3C68);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  Swift::String v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100012ED8(a1, v10);
  unint64_t v12 = sub_10017DA6C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for KeyRepresentableInternal.CodingKeys,  &type metadata for KeyRepresentableInternal.CodingKeys,  v12,  v10,  v11);
  v16[0] = a2;
  v16[1] = a3;
  unint64_t v13 = sub_1000170A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v16, v14, v6, &type metadata for Data, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

Swift::Int KeyRepresentableInternal.hashValue.getter(uint64_t a1, unint64_t a2)
{
  return Hasher._finalize()();
}

void *KeyRepresentableInternal.init(from:)(void *a1)
{
  return sub_10017DAB0(a1);
}

void *sub_10017A604@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10017DAB0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

uint64_t sub_10017A62C(void *a1)
{
  return KeyRepresentableInternal.encode(to:)(a1, *v1, v1[1]);
}

void sub_10017A644(uint64_t *a1)
{
}

uint64_t SecurityKeyRepresentable.init(rawValue:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56LL))(a3, 0LL, 1LL, a1);
}

id sub_10017A6A4@<X0>(void **a1@<X8>)
{
  uint64_t v2 = *v1;
  *a1 = *v1;
  return v2;
}

void *CommitmentKey.length.unsafeMutableAddressor()
{
  return &static CommitmentKey.length;
}

uint64_t static HashedAdvertisement.length.getter()
{
  return 32LL;
}

uint64_t sub_10017A6C4()
{
  return 7955819LL;
}

uint64_t sub_10017A6D8(uint64_t a1)
{
  unint64_t v2 = sub_10017DBD4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017A700(uint64_t a1)
{
  unint64_t v2 = sub_10017DBD4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CommitmentKey.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10017CD04( a1,  a2,  a3,  &qword_1009A3C78,  (uint64_t (*)(void))sub_10017DBD4,  (uint64_t)&type metadata for CommitmentKey.CodingKeys);
}

void *CommitmentKey.init(from:)(void *a1)
{
  return sub_10017E4E8( a1,  &qword_1009A4760,  (uint64_t (*)(void))sub_10017DBD4,  (uint64_t)&type metadata for CommitmentKey.CodingKeys);
}

void *sub_10017A780@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10017A8E4( a1,  &qword_1009A4760,  (uint64_t (*)(void))sub_10017DBD4,  (uint64_t)&type metadata for CommitmentKey.CodingKeys,  a2);
}

uint64_t sub_10017A7AC(void *a1)
{
  return CommitmentKey.encode(to:)(a1, *v1, v1[1]);
}

void *EncryptedPrivateKey.length.unsafeMutableAddressor()
{
  return &static EncryptedPrivateKey.length;
}

uint64_t static EncryptedPrivateKey.length.getter()
{
  return 174LL;
}

void EncryptedPrivateKey.init(data:)(uint64_t a1, uint64_t a2)
{
}

void EncryptedPrivateKey.publicKey.getter(uint64_t a1, unint64_t a2)
{
}

void *PublicKey.length.unsafeMutableAddressor()
{
  return &static PublicKey.length;
}

uint64_t sub_10017A810(uint64_t a1)
{
  unint64_t v2 = sub_10017DD78();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017A838(uint64_t a1)
{
  unint64_t v2 = sub_10017DD78();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t EncryptedPrivateKey.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10017CD04( a1,  a2,  a3,  &qword_1009A3C90,  (uint64_t (*)(void))sub_10017DD78,  (uint64_t)&type metadata for EncryptedPrivateKey.CodingKeys);
}

void *EncryptedPrivateKey.init(from:)(void *a1)
{
  return sub_10017E4E8( a1,  &qword_1009A4758,  (uint64_t (*)(void))sub_10017DD78,  (uint64_t)&type metadata for EncryptedPrivateKey.CodingKeys);
}

void *sub_10017A8B8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10017A8E4( a1,  &qword_1009A4758,  (uint64_t (*)(void))sub_10017DD78,  (uint64_t)&type metadata for EncryptedPrivateKey.CodingKeys,  a2);
}

void *sub_10017A8E4@<X0>( void *a1@<X0>, uint64_t *a2@<X3>, uint64_t (*a3)(void)@<X4>, uint64_t a4@<X5>, void *a5@<X8>)
{
  uint64_t result = sub_10017E4E8(a1, a2, a3, a4);
  if (!v5)
  {
    *a5 = result;
    a5[1] = v8;
  }

  return result;
}

uint64_t sub_10017A918(void *a1)
{
  return EncryptedPrivateKey.encode(to:)(a1, *v1, v1[1]);
}

void sub_10017A930(uint64_t *a1)
{
}

void *PrivateKey.length.unsafeMutableAddressor()
{
  return &static PrivateKey.length;
}

uint64_t static CollaborativeKeyGen.v2.C3.length.getter()
{
  return 85LL;
}

void sub_10017A950(uint64_t a1)
{
}

void PrivateKey.publicKey.getter(uint64_t a1, unint64_t a2)
{
}

void sub_10017A974(uint64_t a1, unint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_10017A9CC(uint64_t result, unint64_t a2)
{
  if (BYTE6(a2) != 57LL)
  {
    sub_100016F9C(result, a2);
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000018LL,  0x8000000100856A50LL,  "searchpartyd/KeyRepresentable.swift",  35LL,  2LL,  v2,  0);
    __break(1u);
    JUMPOUT(0x10017AA64LL);
  }

  return result;
}

uint64_t sub_10017AA74(uint64_t a1)
{
  unint64_t v2 = sub_10017DDBC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017AA9C(uint64_t a1)
{
  unint64_t v2 = sub_10017DDBC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PrivateKey.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10017CD04( a1,  a2,  a3,  &qword_1009A3CA0,  (uint64_t (*)(void))sub_10017DDBC,  (uint64_t)&type metadata for PrivateKey.CodingKeys);
}

void *PrivateKey.init(from:)(void *a1)
{
  return sub_10017E4E8( a1,  &qword_1009A4750,  (uint64_t (*)(void))sub_10017DDBC,  (uint64_t)&type metadata for PrivateKey.CodingKeys);
}

void *sub_10017AB1C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10017A8E4( a1,  &qword_1009A4750,  (uint64_t (*)(void))sub_10017DDBC,  (uint64_t)&type metadata for PrivateKey.CodingKeys,  a2);
}

uint64_t sub_10017AB48(void *a1)
{
  return PrivateKey.encode(to:)(a1, *v1, v1[1]);
}

void sub_10017AB60(uint64_t *a1)
{
}

void *StandardPublicKey.length.unsafeMutableAddressor()
{
  return &static StandardPublicKey.length;
}

uint64_t static StandardPublicKey.length.getter()
{
  return 65LL;
}

void sub_10017AB90(uint64_t a1)
{
}

uint64_t sub_10017ABAC(uint64_t a1)
{
  unint64_t v2 = sub_10017DE00();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017ABD4(uint64_t a1)
{
  unint64_t v2 = sub_10017DE00();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t StandardPublicKey.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10017CD04( a1,  a2,  a3,  &qword_1009A3CB0,  (uint64_t (*)(void))sub_10017DE00,  (uint64_t)&type metadata for StandardPublicKey.CodingKeys);
}

void *StandardPublicKey.init(from:)(void *a1)
{
  return sub_10017E4E8( a1,  &qword_1009A4748,  (uint64_t (*)(void))sub_10017DE00,  (uint64_t)&type metadata for StandardPublicKey.CodingKeys);
}

void *sub_10017AC54@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10017A8E4( a1,  &qword_1009A4748,  (uint64_t (*)(void))sub_10017DE00,  (uint64_t)&type metadata for StandardPublicKey.CodingKeys,  a2);
}

uint64_t sub_10017AC80(void *a1)
{
  return StandardPublicKey.encode(to:)(a1, *v1, v1[1]);
}

void sub_10017AC98(uint64_t *a1)
{
}

uint64_t static PublicKey.length.getter()
{
  return 57LL;
}

void sub_10017ACAC(uint64_t a1)
{
}

void sub_10017ACC8(double a1, uint64_t a2, uint64_t a3, double *a4, uint64_t *a5)
{
  uint64_t v9 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  double v11 = a1;
  uint64_t v12 = __DataStorage.init(length:)(a3);
  sub_1003124A0((int *)&v11, 0);
  uint64_t v10 = v12 | 0x4000000000000000LL;
  *a4 = v11;
  *a5 = v10;
}

uint64_t sub_10017AD54(uint64_t a1)
{
  unint64_t v2 = sub_10017DE44();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017AD7C(uint64_t a1)
{
  unint64_t v2 = sub_10017DE44();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PublicKey.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10017CD04( a1,  a2,  a3,  &qword_1009A3CC0,  (uint64_t (*)(void))sub_10017DE44,  (uint64_t)&type metadata for PublicKey.CodingKeys);
}

void *PublicKey.init(from:)(void *a1)
{
  return sub_10017E4E8( a1,  &qword_1009A4740,  (uint64_t (*)(void))sub_10017DE44,  (uint64_t)&type metadata for PublicKey.CodingKeys);
}

void *sub_10017ADFC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10017A8E4( a1,  &qword_1009A4740,  (uint64_t (*)(void))sub_10017DE44,  (uint64_t)&type metadata for PublicKey.CodingKeys,  a2);
}

uint64_t sub_10017AE28(void *a1)
{
  return PublicKey.encode(to:)(a1, *v1, v1[1]);
}

void sub_10017AE40(uint64_t *a1)
{
}

uint64_t static NearOwnerAdvertisement.length.getter()
{
  return 6LL;
}

uint64_t NearOwnerAdvertisement.description.getter(uint64_t a1, uint64_t a2)
{
  return sub_10017B28C( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t))sub_1000B1180,  (uint64_t)&type metadata for NearOwnerAdvertisement);
}

uint64_t sub_10017AE68(uint64_t a1)
{
  unint64_t v2 = sub_10017DE88();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017AE90(uint64_t a1)
{
  unint64_t v2 = sub_10017DE88();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NearOwnerAdvertisement.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10017CD04( a1,  a2,  a3,  &qword_1009A3CD0,  (uint64_t (*)(void))sub_10017DE88,  (uint64_t)&type metadata for NearOwnerAdvertisement.CodingKeys);
}

void *NearOwnerAdvertisement.init(from:)(void *a1)
{
  return sub_10017E4E8( a1,  &qword_1009A4738,  (uint64_t (*)(void))sub_10017DE88,  (uint64_t)&type metadata for NearOwnerAdvertisement.CodingKeys);
}

uint64_t sub_10017AF10(uint64_t a1, uint64_t a2)
{
  return sub_10017B37C(a1, a2, (uint64_t (*)(uint64_t, uint64_t))sub_1000B1180);
}

void *sub_10017AF1C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10017A8E4( a1,  &qword_1009A4738,  (uint64_t (*)(void))sub_10017DE88,  (uint64_t)&type metadata for NearOwnerAdvertisement.CodingKeys,  a2);
}

uint64_t sub_10017AF48(void *a1)
{
  return NearOwnerAdvertisement.encode(to:)(a1, *v1, v1[1]);
}

uint64_t static Advertisement.length.getter()
{
  return 28LL;
}

uint64_t Advertisement.address.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_10001736C(a1, a2);
  uint64_t v5 = static MACAddress.length.getter(v4);
  sub_100178C64(v5, a1, a2);
  return v7;
}

uint64_t sub_10017AFAC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for HmacAlgorithm(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  double v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = a3;
  unint64_t v23 = a4;
  sub_10001736C(a3, a4);
  uint64_t v12 = String.utf8Data.getter(0xD000000000000012LL, 0x8000000100856B00LL);
  unint64_t v14 = v13;
  Data.append(_:)(v12, v13);
  sub_100016F9C(v12, v14);
  uint64_t v15 = v22;
  unint64_t v16 = v23;
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for HmacAlgorithm.sha256(_:), v8);
  sub_10001736C(v15, v16);
  sub_10001736C(a1, a2);
  uint64_t v17 = Data.hmac(key:algorithm:)(a1, a2, v11, v15, v16);
  uint64_t v19 = v18;
  sub_100016F9C(a1, a2);
  sub_100016F9C(v15, v16);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_100178C64(6LL, v17, v19);
  sub_10017851C(v21[2], v21[3]);
  sub_100016F9C(v22, v23);
  return v21[4];
}

uint64_t CommandKey.data.getter(uint64_t a1, unint64_t a2)
{
  return a1;
}

void *NearbyTokenKey.length.unsafeMutableAddressor()
{
  return &static NearbyTokenKey.length;
}

uint64_t Advertisement.nfcPartial.getter(uint64_t a1, unint64_t a2)
{
  return sub_10017B21C(a1, a2, 12LL);
}

uint64_t sub_10017B21C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return v7;
}

void *NFCPartialAdvertisement.length.unsafeMutableAddressor()
{
  return &static NFCPartialAdvertisement.length;
}

uint64_t Advertisement.description.getter(uint64_t a1, uint64_t a2)
{
  return sub_10017B28C( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t))sub_1000B113C,  (uint64_t)&type metadata for Advertisement);
}

uint64_t sub_10017B28C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v5 = a3(a1, a2);
  return RawRepresentable<>.hexString.getter(a4, v5);
}

uint64_t sub_10017B2C8(uint64_t a1)
{
  unint64_t v2 = sub_10017DECC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017B2F0(uint64_t a1)
{
  unint64_t v2 = sub_10017DECC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Advertisement.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10017CD04( a1,  a2,  a3,  &qword_1009A3CE0,  (uint64_t (*)(void))sub_10017DECC,  (uint64_t)&type metadata for Advertisement.CodingKeys);
}

void *Advertisement.init(from:)(void *a1)
{
  return sub_10017E4E8( a1,  &qword_1009A4730,  (uint64_t (*)(void))sub_10017DECC,  (uint64_t)&type metadata for Advertisement.CodingKeys);
}

uint64_t sub_10017B370(uint64_t a1, uint64_t a2)
{
  return sub_10017B37C(a1, a2, (uint64_t (*)(uint64_t, uint64_t))sub_1000B113C);
}

uint64_t sub_10017B37C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v4 = a3(a1, a2);
  return RawRepresentable<>.hexString.getter(a1, v4);
}

void *sub_10017B3BC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10017A8E4( a1,  &qword_1009A4730,  (uint64_t (*)(void))sub_10017DECC,  (uint64_t)&type metadata for Advertisement.CodingKeys,  a2);
}

uint64_t sub_10017B3E8(void *a1)
{
  return Advertisement.encode(to:)(a1, *v1, v1[1]);
}

void sub_10017B400(uint64_t *a1)
{
}

void *HashedAdvertisement.length.unsafeMutableAddressor()
{
  return &static HashedAdvertisement.length;
}

uint64_t sub_10017B418(uint64_t a1)
{
  unint64_t v2 = sub_10017DF10();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017B440(uint64_t a1)
{
  unint64_t v2 = sub_10017DF10();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t HashedAdvertisement.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10017CD04( a1,  a2,  a3,  &qword_1009A3CF0,  (uint64_t (*)(void))sub_10017DF10,  (uint64_t)&type metadata for HashedAdvertisement.CodingKeys);
}

void *HashedAdvertisement.init(from:)(void *a1)
{
  return sub_10017E4E8( a1,  &qword_1009A4728,  (uint64_t (*)(void))sub_10017DF10,  (uint64_t)&type metadata for HashedAdvertisement.CodingKeys);
}

void *sub_10017B4C0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10017A8E4( a1,  &qword_1009A4728,  (uint64_t (*)(void))sub_10017DF10,  (uint64_t)&type metadata for HashedAdvertisement.CodingKeys,  a2);
}

uint64_t sub_10017B4EC(void *a1)
{
  return HashedAdvertisement.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_10017B504(uint64_t a1)
{
  unint64_t v2 = sub_10017DF54();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017B52C(uint64_t a1)
{
  unint64_t v2 = sub_10017DF54();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PairingNonce.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10017CD04( a1,  a2,  a3,  &qword_1009A3D00,  (uint64_t (*)(void))sub_10017DF54,  (uint64_t)&type metadata for PairingNonce.CodingKeys);
}

void *PairingNonce.init(from:)(void *a1)
{
  return sub_10017E4E8( a1,  &qword_1009A4720,  (uint64_t (*)(void))sub_10017DF54,  (uint64_t)&type metadata for PairingNonce.CodingKeys);
}

void *sub_10017B5AC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10017A8E4( a1,  &qword_1009A4720,  (uint64_t (*)(void))sub_10017DF54,  (uint64_t)&type metadata for PairingNonce.CodingKeys,  a2);
}

uint64_t sub_10017B5D8(void *a1)
{
  return PairingNonce.encode(to:)(a1, *v1, v1[1]);
}

void *SharedSecretKey.length.unsafeMutableAddressor()
{
  return &static SharedSecretKey.length;
}

uint64_t sub_10017B5FC(uint64_t a1)
{
  unint64_t v2 = sub_10017DF98();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017B624(uint64_t a1)
{
  unint64_t v2 = sub_10017DF98();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SharedSecretKey.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10017CD04( a1,  a2,  a3,  &qword_1009A3D10,  (uint64_t (*)(void))sub_10017DF98,  (uint64_t)&type metadata for SharedSecretKey.CodingKeys);
}

void *SharedSecretKey.init(from:)(void *a1)
{
  return sub_10017E4E8( a1,  &qword_1009A4718,  (uint64_t (*)(void))sub_10017DF98,  (uint64_t)&type metadata for SharedSecretKey.CodingKeys);
}

void *sub_10017B6A4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10017A8E4( a1,  &qword_1009A4718,  (uint64_t (*)(void))sub_10017DF98,  (uint64_t)&type metadata for SharedSecretKey.CodingKeys,  a2);
}

uint64_t sub_10017B6D0(void *a1)
{
  return SharedSecretKey.encode(to:)(a1, *v1, v1[1]);
}

void *AntiTrackingKey.length.unsafeMutableAddressor()
{
  return &static AntiTrackingKey.length;
}

uint64_t static AntiTrackingKey.length.getter()
{
  return 72LL;
}

uint64_t sub_10017B6FC(uint64_t a1)
{
  unint64_t v2 = sub_10017DFDC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017B724(uint64_t a1)
{
  unint64_t v2 = sub_10017DFDC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AntiTrackingKey.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10017CD04( a1,  a2,  a3,  &qword_1009A3D20,  (uint64_t (*)(void))sub_10017DFDC,  (uint64_t)&type metadata for AntiTrackingKey.CodingKeys);
}

void *AntiTrackingKey.init(from:)(void *a1)
{
  return sub_10017E4E8( a1,  &qword_1009A4710,  (uint64_t (*)(void))sub_10017DFDC,  (uint64_t)&type metadata for AntiTrackingKey.CodingKeys);
}

void *sub_10017B7A4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10017A8E4( a1,  &qword_1009A4710,  (uint64_t (*)(void))sub_10017DFDC,  (uint64_t)&type metadata for AntiTrackingKey.CodingKeys,  a2);
}

uint64_t sub_10017B7D0(void *a1)
{
  return AntiTrackingKey.encode(to:)(a1, *v1, v1[1]);
}

void sub_10017B7E8(uint64_t *a1)
{
}

void *IntermediateKey.length.unsafeMutableAddressor()
{
  return &static IntermediateKey.length;
}

uint64_t sub_10017B800(uint64_t a1)
{
  unint64_t v2 = sub_10017E020();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017B828(uint64_t a1)
{
  unint64_t v2 = sub_10017E020();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IntermediateKey.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10017CD04( a1,  a2,  a3,  &qword_1009A3D30,  (uint64_t (*)(void))sub_10017E020,  (uint64_t)&type metadata for IntermediateKey.CodingKeys);
}

void *IntermediateKey.init(from:)(void *a1)
{
  return sub_10017E4E8( a1,  &qword_1009A4708,  (uint64_t (*)(void))sub_10017E020,  (uint64_t)&type metadata for IntermediateKey.CodingKeys);
}

void *sub_10017B8A8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10017A8E4( a1,  &qword_1009A4708,  (uint64_t (*)(void))sub_10017E020,  (uint64_t)&type metadata for IntermediateKey.CodingKeys,  a2);
}

uint64_t sub_10017B8D4(void *a1)
{
  return IntermediateKey.encode(to:)(a1, *v1, v1[1]);
}

void *CommandKey.length.unsafeMutableAddressor()
{
  return &static CommandKey.length;
}

uint64_t sub_10017B8F8(uint64_t a1)
{
  unint64_t v2 = sub_10017E064();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017B920(uint64_t a1)
{
  unint64_t v2 = sub_10017E064();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CommandKey.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10017CD04( a1,  a2,  a3,  &qword_1009A3D40,  (uint64_t (*)(void))sub_10017E064,  (uint64_t)&type metadata for CommandKey.CodingKeys);
}

void *CommandKey.init(from:)(void *a1)
{
  return sub_10017E4E8( a1,  &qword_1009A4700,  (uint64_t (*)(void))sub_10017E064,  (uint64_t)&type metadata for CommandKey.CodingKeys);
}

uint64_t sub_10017B9A0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void *sub_10017B9A8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10017A8E4( a1,  &qword_1009A4700,  (uint64_t (*)(void))sub_10017E064,  (uint64_t)&type metadata for CommandKey.CodingKeys,  a2);
}

uint64_t sub_10017B9D4(void *a1)
{
  return CommandKey.encode(to:)(a1, *v1, v1[1]);
}

void sub_10017B9EC(uint64_t *a1)
{
}

void *ConnectionKey.length.unsafeMutableAddressor()
{
  return &static ConnectionKey.length;
}

uint64_t sub_10017BA14(uint64_t a1)
{
  unint64_t v2 = sub_10017E0A8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017BA3C(uint64_t a1)
{
  unint64_t v2 = sub_10017E0A8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ConnectionKey.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10017CD04( a1,  a2,  a3,  &qword_1009A3D50,  (uint64_t (*)(void))sub_10017E0A8,  (uint64_t)&type metadata for ConnectionKey.CodingKeys);
}

void *ConnectionKey.init(from:)(void *a1)
{
  return sub_10017E4E8( a1,  &qword_1009A46F8,  (uint64_t (*)(void))sub_10017E0A8,  (uint64_t)&type metadata for ConnectionKey.CodingKeys);
}

void *sub_10017BABC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10017A8E4( a1,  &qword_1009A46F8,  (uint64_t (*)(void))sub_10017E0A8,  (uint64_t)&type metadata for ConnectionKey.CodingKeys,  a2);
}

uint64_t sub_10017BAE8(void *a1)
{
  return ConnectionKey.encode(to:)(a1, *v1, v1[1]);
}

void *LongTermKey.length.unsafeMutableAddressor()
{
  return &static LongTermKey.length;
}

uint64_t static LongTermKey.length.getter()
{
  return 16LL;
}

uint64_t sub_10017BB14(uint64_t a1)
{
  unint64_t v2 = sub_10017E0EC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017BB3C(uint64_t a1)
{
  unint64_t v2 = sub_10017E0EC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t LongTermKey.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10017CD04( a1,  a2,  a3,  &qword_1009A3D60,  (uint64_t (*)(void))sub_10017E0EC,  (uint64_t)&type metadata for LongTermKey.CodingKeys);
}

void *LongTermKey.init(from:)(void *a1)
{
  return sub_10017E4E8( a1,  &qword_1009A46F0,  (uint64_t (*)(void))sub_10017E0EC,  (uint64_t)&type metadata for LongTermKey.CodingKeys);
}

void *sub_10017BBBC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10017A8E4( a1,  &qword_1009A46F0,  (uint64_t (*)(void))sub_10017E0EC,  (uint64_t)&type metadata for LongTermKey.CodingKeys,  a2);
}

uint64_t sub_10017BBE8(void *a1)
{
  return LongTermKey.encode(to:)(a1, *v1, v1[1]);
}

void sub_10017BC00(uint64_t *a1)
{
}

uint64_t sub_10017BC0C(uint64_t a1)
{
  unint64_t v2 = sub_10017E130();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017BC34(uint64_t a1)
{
  unint64_t v2 = sub_10017E130();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NearbyTokenKey.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10017CD04( a1,  a2,  a3,  &qword_1009A3D70,  (uint64_t (*)(void))sub_10017E130,  (uint64_t)&type metadata for NearbyTokenKey.CodingKeys);
}

void *NearbyTokenKey.init(from:)(void *a1)
{
  return sub_10017E4E8( a1,  &qword_1009A46E8,  (uint64_t (*)(void))sub_10017E130,  (uint64_t)&type metadata for NearbyTokenKey.CodingKeys);
}

void *sub_10017BCB4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10017A8E4( a1,  &qword_1009A46E8,  (uint64_t (*)(void))sub_10017E130,  (uint64_t)&type metadata for NearbyTokenKey.CodingKeys,  a2);
}

uint64_t sub_10017BCE0(void *a1)
{
  return NearbyTokenKey.encode(to:)(a1, *v1, v1[1]);
}

void sub_10017BCF8(uint64_t *a1)
{
}

uint64_t static NFCPartialAdvertisement.length.getter()
{
  return 12LL;
}

uint64_t sub_10017BD1C(uint64_t a1)
{
  unint64_t v2 = sub_10017E174();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017BD44(uint64_t a1)
{
  unint64_t v2 = sub_10017E174();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NFCPartialAdvertisement.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10017CD04( a1,  a2,  a3,  &qword_1009A3D80,  (uint64_t (*)(void))sub_10017E174,  (uint64_t)&type metadata for NFCPartialAdvertisement.CodingKeys);
}

void *NFCPartialAdvertisement.init(from:)(void *a1)
{
  return sub_10017E4E8( a1,  &qword_1009A46E0,  (uint64_t (*)(void))sub_10017E174,  (uint64_t)&type metadata for NFCPartialAdvertisement.CodingKeys);
}

void *sub_10017BDC4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10017A8E4( a1,  &qword_1009A46E0,  (uint64_t (*)(void))sub_10017E174,  (uint64_t)&type metadata for NFCPartialAdvertisement.CodingKeys,  a2);
}

uint64_t sub_10017BDF0(void *a1)
{
  return NFCPartialAdvertisement.encode(to:)(a1, *v1, v1[1]);
}

void sub_10017BE08(uint64_t *a1)
{
}

void *EncryptedBlobE1.length.unsafeMutableAddressor()
{
  return &static EncryptedBlobE1.length;
}

uint64_t static EncryptedBlobE1.length.getter()
{
  return 113LL;
}

uint64_t sub_10017BE28(uint64_t a1)
{
  unint64_t v2 = sub_10017E1B8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017BE50(uint64_t a1)
{
  unint64_t v2 = sub_10017E1B8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t EncryptedBlobE1.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10017CD04( a1,  a2,  a3,  &qword_1009A3D90,  (uint64_t (*)(void))sub_10017E1B8,  (uint64_t)&type metadata for EncryptedBlobE1.CodingKeys);
}

void *EncryptedBlobE1.init(from:)(void *a1)
{
  return sub_10017E4E8( a1,  &qword_1009A46D8,  (uint64_t (*)(void))sub_10017E1B8,  (uint64_t)&type metadata for EncryptedBlobE1.CodingKeys);
}

void *sub_10017BED0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10017A8E4( a1,  &qword_1009A46D8,  (uint64_t (*)(void))sub_10017E1B8,  (uint64_t)&type metadata for EncryptedBlobE1.CodingKeys,  a2);
}

uint64_t sub_10017BEFC(void *a1)
{
  return EncryptedBlobE1.encode(to:)(a1, *v1, v1[1]);
}

void sub_10017BF14(uint64_t *a1)
{
}

void *FindMyNetworkId.length.unsafeMutableAddressor()
{
  return &static FindMyNetworkId.length;
}

uint64_t FindMyNetworkId.init(altDSID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HashAlgorithm(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for String.Encoding(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static String.Encoding.utf8.getter(v10);
  uint64_t v13 = String.data(using:allowLossyConversion:)(v12, 0LL, a1, a2);
  unint64_t v15 = v14;
  swift_bridgeObjectRelease();
  unint64_t v16 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
  uint64_t v17 = v16(v12, v8);
  if (v15 >> 60 == 15) {
    goto LABEL_6;
  }
  uint64_t v39 = v13;
  static String.Encoding.utf8.getter(v17);
  uint64_t v18 = String.data(using:allowLossyConversion:)(v12, 0LL, 0x726961506552LL, 0xE600000000000000LL);
  unint64_t v20 = v19;
  uint64_t v21 = v16(v12, v8);
  if (v20 >> 60 == 15)
  {
LABEL_5:
    sub_1000182F0(v39, v15);
LABEL_6:
    unint64_t v24 = sub_100117AD0();
    uint64_t v25 = swift_allocError(&type metadata for KeyRepresentableError, v24, 0LL, 0LL);
    *(_OWORD *)uint64_t v26 = xmmword_1007EFE60;
    *(_BYTE *)(v26 + swift_weakDestroy(v0 + 16) = 2;
    return swift_willThrow(v25);
  }

  uint64_t v38 = v18;
  static String.Encoding.utf8.getter(v21);
  uint64_t v37 = String.data(using:allowLossyConversion:)(v12, 0LL, 0x44494E4D46LL, 0xE500000000000000LL);
  unint64_t v23 = v22;
  v16(v12, v8);
  if (v23 >> 60 == 15)
  {
    sub_1000182F0(v38, v20);
    goto LABEL_5;
  }

  uint64_t v28 = v38;
  uint64_t v41 = v38;
  unint64_t v42 = v20;
  sub_10001736C(v38, v20);
  Data.append(_:)(v39, v15);
  Data.append(_:)(v37, v23);
  uint64_t v29 = v41;
  unint64_t v30 = v42;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for HashAlgorithm.sha256(_:), v4);
  sub_10001736C(v29, v30);
  uint64_t v31 = Data.hash(algorithm:)(v7, v29, v30);
  uint64_t v35 = v32;
  uint64_t v36 = v31;
  sub_100016F9C(v29, v30);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_100016F9C(v41, v42);
  uint64_t v33 = v43;
  sub_100178860(v36, v35);
  sub_1000182F0(v39, v15);
  sub_1000182F0(v28, v20);
  uint64_t result = sub_1000182F0(v37, v23);
  if (!v33) {
    return v40;
  }
  return result;
}

uint64_t sub_10017C1F4(uint64_t a1)
{
  unint64_t v2 = sub_10017E1FC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017C21C(uint64_t a1)
{
  unint64_t v2 = sub_10017E1FC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FindMyNetworkId.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10017CD04( a1,  a2,  a3,  &qword_1009A3DA0,  (uint64_t (*)(void))sub_10017E1FC,  (uint64_t)&type metadata for FindMyNetworkId.CodingKeys);
}

void *FindMyNetworkId.init(from:)(void *a1)
{
  return sub_10017E4E8( a1,  &qword_1009A46D0,  (uint64_t (*)(void))sub_10017E1FC,  (uint64_t)&type metadata for FindMyNetworkId.CodingKeys);
}

void *sub_10017C29C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10017A8E4( a1,  &qword_1009A46D0,  (uint64_t (*)(void))sub_10017E1FC,  (uint64_t)&type metadata for FindMyNetworkId.CodingKeys,  a2);
}

uint64_t sub_10017C2C8(void *a1)
{
  return FindMyNetworkId.encode(to:)(a1, *v1, v1[1]);
}

void *EncryptedBlobE2.length.unsafeMutableAddressor()
{
  return &static EncryptedBlobE2.length;
}

uint64_t static EncryptedBlobE2.length.getter()
{
  return 1326LL;
}

uint64_t sub_10017C2F4(uint64_t a1)
{
  unint64_t v2 = sub_10017E240();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017C31C(uint64_t a1)
{
  unint64_t v2 = sub_10017E240();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t EncryptedBlobE2.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10017CD04( a1,  a2,  a3,  &qword_1009A3DB0,  (uint64_t (*)(void))sub_10017E240,  (uint64_t)&type metadata for EncryptedBlobE2.CodingKeys);
}

void *EncryptedBlobE2.init(from:)(void *a1)
{
  return sub_10017E4E8( a1,  &qword_1009A46C8,  (uint64_t (*)(void))sub_10017E240,  (uint64_t)&type metadata for EncryptedBlobE2.CodingKeys);
}

void *sub_10017C39C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10017A8E4( a1,  &qword_1009A46C8,  (uint64_t (*)(void))sub_10017E240,  (uint64_t)&type metadata for EncryptedBlobE2.CodingKeys,  a2);
}

uint64_t sub_10017C3C8(void *a1)
{
  return EncryptedBlobE2.encode(to:)(a1, *v1, v1[1]);
}

void sub_10017C3E0(uint64_t *a1)
{
}

void *EncryptedBlobE3.length.unsafeMutableAddressor()
{
  return &static EncryptedBlobE3.length;
}

uint64_t static EncryptedBlobE3.length.getter()
{
  return 1040LL;
}

uint64_t sub_10017C400(uint64_t a1)
{
  unint64_t v2 = sub_10017E284();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017C428(uint64_t a1)
{
  unint64_t v2 = sub_10017E284();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t EncryptedBlobE3.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10017CD04( a1,  a2,  a3,  &qword_1009A3DC0,  (uint64_t (*)(void))sub_10017E284,  (uint64_t)&type metadata for EncryptedBlobE3.CodingKeys);
}

void *EncryptedBlobE3.init(from:)(void *a1)
{
  return sub_10017E4E8( a1,  &qword_1009A46C0,  (uint64_t (*)(void))sub_10017E284,  (uint64_t)&type metadata for EncryptedBlobE3.CodingKeys);
}

void *sub_10017C4A8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10017A8E4( a1,  &qword_1009A46C0,  (uint64_t (*)(void))sub_10017E284,  (uint64_t)&type metadata for EncryptedBlobE3.CodingKeys,  a2);
}

uint64_t sub_10017C4D4(void *a1)
{
  return EncryptedBlobE3.encode(to:)(a1, *v1, v1[1]);
}

void sub_10017C4EC(uint64_t *a1)
{
}

void *EncryptedBlobE4.length.unsafeMutableAddressor()
{
  return &static EncryptedBlobE4.length;
}

uint64_t static EncryptedBlobE4.length.getter()
{
  return 1286LL;
}

uint64_t sub_10017C50C(uint64_t a1)
{
  unint64_t v2 = sub_10017E2C8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017C534(uint64_t a1)
{
  unint64_t v2 = sub_10017E2C8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t EncryptedBlobE4.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10017CD04( a1,  a2,  a3,  &qword_1009A3DD0,  (uint64_t (*)(void))sub_10017E2C8,  (uint64_t)&type metadata for EncryptedBlobE4.CodingKeys);
}

void *EncryptedBlobE4.init(from:)(void *a1)
{
  return sub_10017E4E8( a1,  &qword_1009A46B8,  (uint64_t (*)(void))sub_10017E2C8,  (uint64_t)&type metadata for EncryptedBlobE4.CodingKeys);
}

void *sub_10017C5B4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10017A8E4( a1,  &qword_1009A46B8,  (uint64_t (*)(void))sub_10017E2C8,  (uint64_t)&type metadata for EncryptedBlobE4.CodingKeys,  a2);
}

uint64_t sub_10017C5E0(void *a1)
{
  return EncryptedBlobE4.encode(to:)(a1, *v1, v1[1]);
}

void sub_10017C5F8(uint64_t *a1)
{
}

uint64_t static SikPub.length.getter()
{
  return 100LL;
}

uint64_t sub_10017C60C(uint64_t a1)
{
  unint64_t v2 = sub_10017E30C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017C634(uint64_t a1)
{
  unint64_t v2 = sub_10017E30C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RefKey.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10017CD04( a1,  a2,  a3,  &qword_1009A3DE0,  (uint64_t (*)(void))sub_10017E30C,  (uint64_t)&type metadata for RefKey.CodingKeys);
}

void *RefKey.init(from:)(void *a1)
{
  return sub_10017E4E8( a1,  &qword_1009A46B0,  (uint64_t (*)(void))sub_10017E30C,  (uint64_t)&type metadata for RefKey.CodingKeys);
}

void *sub_10017C6B4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10017A8E4( a1,  &qword_1009A46B0,  (uint64_t (*)(void))sub_10017E30C,  (uint64_t)&type metadata for RefKey.CodingKeys,  a2);
}

uint64_t sub_10017C6E0(void *a1)
{
  return RefKey.encode(to:)(a1, *v1, v1[1]);
}

void sub_10017C6F8(uint64_t *a1)
{
}

uint64_t sub_10017C714(uint64_t a1)
{
  unint64_t v2 = sub_10017E350();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017C73C(uint64_t a1)
{
  unint64_t v2 = sub_10017E350();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SikPub.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10017CD04( a1,  a2,  a3,  &qword_1009A3DF0,  (uint64_t (*)(void))sub_10017E350,  (uint64_t)&type metadata for SikPub.CodingKeys);
}

void *SikPub.init(from:)(void *a1)
{
  return sub_10017E4E8( a1,  &qword_1009A46A8,  (uint64_t (*)(void))sub_10017E350,  (uint64_t)&type metadata for SikPub.CodingKeys);
}

void *sub_10017C7BC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10017A8E4( a1,  &qword_1009A46A8,  (uint64_t (*)(void))sub_10017E350,  (uint64_t)&type metadata for SikPub.CodingKeys,  a2);
}

uint64_t sub_10017C7E8(void *a1)
{
  return SikPub.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_10017C800(uint64_t a1)
{
  unint64_t v2 = sub_10017E394();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017C828(uint64_t a1)
{
  unint64_t v2 = sub_10017E394();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CollaborativeKeyGen.C1.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10017CD04( a1,  a2,  a3,  &qword_1009A3E00,  (uint64_t (*)(void))sub_10017E394,  (uint64_t)&_s14descr1009452F9O2C1V10CodingKeysON);
}

void *CollaborativeKeyGen.C1.init(from:)(void *a1)
{
  return sub_10017E4E8( a1,  &qword_1009A46A0,  (uint64_t (*)(void))sub_10017E394,  (uint64_t)&_s14descr1009452F9O2C1V10CodingKeysON);
}

void *sub_10017C8A8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10017A8E4( a1,  &qword_1009A46A0,  (uint64_t (*)(void))sub_10017E394,  (uint64_t)&_s14descr1009452F9O2C1V10CodingKeysON,  a2);
}

uint64_t sub_10017C8D4(void *a1)
{
  return CollaborativeKeyGen.C1.encode(to:)(a1, *v1, v1[1]);
}

uint64_t static CollaborativeKeyGen.v1.C2.length.getter()
{
  return 89LL;
}

uint64_t sub_10017C8F4(uint64_t a1)
{
  unint64_t v2 = sub_10017E3D8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017C91C(uint64_t a1)
{
  unint64_t v2 = sub_10017E3D8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CollaborativeKeyGen.v1.C2.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10017CD04(a1, a2, a3, &qword_1009A3E10, (uint64_t (*)(void))sub_10017E3D8, (uint64_t)&_s2C2V10CodingKeysON_0);
}

void *CollaborativeKeyGen.v1.C2.init(from:)(void *a1)
{
  return sub_10017E4E8(a1, &qword_1009A4698, (uint64_t (*)(void))sub_10017E3D8, (uint64_t)&_s2C2V10CodingKeysON_0);
}

void *sub_10017C99C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10017A8E4(a1, &qword_1009A4698, (uint64_t (*)(void))sub_10017E3D8, (uint64_t)&_s2C2V10CodingKeysON_0, a2);
}

uint64_t sub_10017C9C8(void *a1)
{
  return CollaborativeKeyGen.v1.C2.encode(to:)(a1, *v1, v1[1]);
}

void sub_10017C9E0(uint64_t *a1)
{
}

void *CollaborativeKeyGen.v1.C3.length.unsafeMutableAddressor()
{
  return &static CollaborativeKeyGen.v1.C3.length;
}

uint64_t static CollaborativeKeyGen.v1.C3.length.getter()
{
  return 60LL;
}

uint64_t sub_10017CA00(uint64_t a1)
{
  unint64_t v2 = sub_10017E41C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017CA28(uint64_t a1)
{
  unint64_t v2 = sub_10017E41C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CollaborativeKeyGen.v1.C3.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10017CD04(a1, a2, a3, &qword_1009A3E20, (uint64_t (*)(void))sub_10017E41C, (uint64_t)&_s2C3V10CodingKeysON_0);
}

void *CollaborativeKeyGen.v1.C3.init(from:)(void *a1)
{
  return sub_10017E4E8(a1, &qword_1009A4690, (uint64_t (*)(void))sub_10017E41C, (uint64_t)&_s2C3V10CodingKeysON_0);
}

void *sub_10017CAA8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10017A8E4(a1, &qword_1009A4690, (uint64_t (*)(void))sub_10017E41C, (uint64_t)&_s2C3V10CodingKeysON_0, a2);
}

uint64_t sub_10017CAD4(void *a1)
{
  return CollaborativeKeyGen.v1.C3.encode(to:)(a1, *v1, v1[1]);
}

void sub_10017CAEC(uint64_t *a1)
{
}

uint64_t static CollaborativeKeyGen.v2.C2.length.getter()
{
  return 114LL;
}

uint64_t sub_10017CB00(uint64_t a1)
{
  unint64_t v2 = sub_10017E460();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017CB28(uint64_t a1)
{
  unint64_t v2 = sub_10017E460();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CollaborativeKeyGen.v2.C2.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10017CD04(a1, a2, a3, &qword_1009A3E30, (uint64_t (*)(void))sub_10017E460, (uint64_t)&_s2C2V10CodingKeysON);
}

void *CollaborativeKeyGen.v2.C2.init(from:)(void *a1)
{
  return sub_10017E4E8(a1, &qword_1009A4688, (uint64_t (*)(void))sub_10017E460, (uint64_t)&_s2C2V10CodingKeysON);
}

void *sub_10017CBA8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10017A8E4(a1, &qword_1009A4688, (uint64_t (*)(void))sub_10017E460, (uint64_t)&_s2C2V10CodingKeysON, a2);
}

uint64_t sub_10017CBD4(void *a1)
{
  return CollaborativeKeyGen.v2.C2.encode(to:)(a1, *v1, v1[1]);
}

void sub_10017CBEC(uint64_t *a1)
{
}

void *CollaborativeKeyGen.v2.C3.length.unsafeMutableAddressor()
{
  return &static CollaborativeKeyGen.v2.C3.length;
}

uint64_t sub_10017CC04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 7955819 && a2 == 0xE300000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xE300000000000000LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(7955819LL, 0xE300000000000000LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10017CC88(uint64_t a1)
{
  unint64_t v2 = sub_10017E4A4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017CCB0(uint64_t a1)
{
  unint64_t v2 = sub_10017E4A4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CollaborativeKeyGen.v2.C3.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10017CD04(a1, a2, a3, &qword_1009A3E40, (uint64_t (*)(void))sub_10017E4A4, (uint64_t)&_s2C3V10CodingKeysON);
}

uint64_t sub_10017CD04(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v21 = a3;
  uint64_t v10 = sub_100004AEC(a4);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = a1[3];
  uint64_t v14 = a1[4];
  sub_100012ED8(a1, v15);
  uint64_t v16 = a5();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a6, a6, v16, v15, v14);
  v22[0] = a2;
  v22[1] = v21;
  unint64_t v17 = sub_10017DC18();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v22, v18, v10, &type metadata for KeyRepresentableInternal, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

void *CollaborativeKeyGen.v2.C3.init(from:)(void *a1)
{
  return sub_10017E4E8(a1, &qword_1009A4678, (uint64_t (*)(void))sub_10017E4A4, (uint64_t)&_s2C3V10CodingKeysON);
}

void *sub_10017CE3C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10017A8E4(a1, &qword_1009A4678, (uint64_t (*)(void))sub_10017E4A4, (uint64_t)&_s2C3V10CodingKeysON, a2);
}

uint64_t sub_10017CE68(void *a1)
{
  return CollaborativeKeyGen.v2.C3.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_10017CE80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_1000BCF04((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_10017CF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter(a1);
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }

    v11 += a1 - result;
  }

  BOOL v12 = __OFSUB__(a2, a1);
  uint64_t v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v14 = __DataStorage._length.getter();
  if (v14 >= v13) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v14;
  }
  uint64_t v16 = v11 + v15;
  if (v11) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0LL;
  }
  sub_1000BCF04(v11, v17, a4, a5);
  if (!v5) {
    char v18 = v19;
  }
  return v18 & 1;
}

void _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0( uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

uint64_t sub_10017D054()
{
  return ((uint64_t (*)(void))((char *)&loc_10017D088 + *((int *)qword_10017D260 + (v0 >> 62))))();
}

uint64_t sub_10017D098@<X0>(int a1@<W8>)
{
  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1) {
      __asm { BR              X10 }
    }

    char v3 = 1;
  }

  else
  {
    char v3 = 0;
  }

  return v3 & 1;
}

uint64_t sub_10017D280(uint64_t a1, unint64_t a2)
{
  if (qword_10099B160 != -1) {
    swift_once(&qword_10099B160, sub_10017A950);
  }
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(a1, a2);
  if ((v4 & 1) == 0) {
    __asm { BR              X10 }
  }

  uint64_t v5 = static os_log_type_t.error.getter(v4);
  if (qword_10099B6E0 != -1) {
    swift_once(&qword_10099B6E0, sub_100650FD0);
  }
  os_log(_:dso:log:_:_:)( v5,  &_mh_execute_header,  qword_100A2AFE0,  "Zero bytes sent for private key",  31LL,  2LL,  _swiftEmptyArrayStorage);
  unint64_t v6 = sub_100117AD0();
  uint64_t v7 = swift_allocError(&type metadata for KeyRepresentableError, v6, 0LL, 0LL);
  *(void *)uint64_t v8 = 0LL;
  *(void *)(v8 + 8) = 0LL;
  *(_BYTE *)(v8 + swift_weakDestroy(v0 + 16) = 2;
  swift_willThrow(v7);
  sub_100016F9C(a1, a2);
  return a1;
}

void sub_10017D470(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_10017D4B0@<X0>(int a1@<W8>)
{
  if (BYTE6(v1) != v3)
  {
    if (a1)
    {
      if (a1 == 1)
      {
        if (!__OFSUB__(HIDWORD(v2), (_DWORD)v2))
        {
          uint64_t v4 = HIDWORD(v2) - (int)v2;
LABEL_8:
          unint64_t v7 = sub_100117AD0();
          uint64_t v8 = swift_allocError(&type metadata for KeyRepresentableError, v7, 0LL, 0LL);
          *(void *)uint64_t v9 = v3;
          *(void *)(v9 + 8) = v4;
          *(_BYTE *)(v9 + swift_weakDestroy(v0 + 16) = 0;
          swift_willThrow(v8);
          sub_100016F9C(v2, v1);
          return v2;
        }

        __break(1u);
      }

      else
      {
        uint64_t v6 = *(void *)(v2 + 16);
        uint64_t v5 = *(void *)(v2 + 24);
        uint64_t v4 = v5 - v6;
        if (!__OFSUB__(v5, v6)) {
          goto LABEL_8;
        }
      }

      __break(1u);
      JUMPOUT(0x10017D58CLL);
    }

    uint64_t v4 = BYTE6(v1);
    goto LABEL_8;
  }

  return v2;
}

uint64_t sub_10017D59C(uint64_t a1, unint64_t a2)
{
  if (qword_10099B170 != -1) {
    swift_once(&qword_10099B170, sub_10017ACAC);
  }
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(a1, a2);
  if ((v6 & 1) != 0)
  {
    uint64_t v7 = static os_log_type_t.error.getter(v6);
    if (qword_10099B6E0 != -1) {
      swift_once(&qword_10099B6E0, sub_100650FD0);
    }
    uint64_t v3 = 2LL;
    os_log(_:dso:log:_:_:)( v7,  &_mh_execute_header,  qword_100A2AFE0,  "Zero bytes sent for public key",  30LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v8 = sub_100117AD0();
    uint64_t v9 = swift_allocError(&type metadata for KeyRepresentableError, v8, 0LL, 0LL);
    *(void *)uint64_t v10 = 0LL;
    *(void *)(v10 + 8) = 0LL;
    *(_BYTE *)(v10 + swift_weakDestroy(v0 + 16) = 2;
    swift_willThrow(v9);
  }

  else
  {
    sub_10001736C(a1, a2);
    sub_10017D470(a1, a2);
    if (!v2)
    {
      uint64_t v3 = v11;
      uint64_t v13 = sub_1004DFCF0(a1, a2);
      sub_100016F9C(v13, v14);
      sub_100016F9C(a1, a2);
      return v3;
    }
  }

  sub_100016F9C(a1, a2);
  return v3;
}

uint64_t sub_10017D768(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v8 = MACAddress.data.getter();
  unint64_t v10 = v9;
  unint64_t v14 = v9;
  sub_10001736C(v8, v9);
  char v11 = Data.subscript.getter(0LL, v8, v10);
  sub_100016F9C(v8, v10);
  Data._Representation.subscript.setter(v11 & 0x3F | (a4 << 6), 0LL);
  sub_10001736C(v8, v14);
  sub_10001736C(v8, v14);
  sub_10001736C(a2, a3);
  sub_1004A8638(a2, a3);
  sub_100016F9C(a2, a3);
  uint64_t v12 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(a1, v12);
  sub_100016F9C(v8, v14);
  sub_100016F9C(v8, v14);
  return v8;
}

uint64_t sub_10017D87C(uint64_t a1, unint64_t a2)
{
  if (qword_10099B168 != -1) {
    swift_once(&qword_10099B168, sub_10017AB90);
  }
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(a1, a2);
  if ((v4 & 1) == 0) {
    __asm { BR              X10 }
  }

  uint64_t v5 = static os_log_type_t.error.getter(v4);
  if (qword_10099B6E0 != -1) {
    swift_once(&qword_10099B6E0, sub_100650FD0);
  }
  os_log(_:dso:log:_:_:)( v5,  &_mh_execute_header,  qword_100A2AFE0,  "Zero bytes sent for public key",  30LL,  2LL,  _swiftEmptyArrayStorage);
  unint64_t v6 = sub_100117AD0();
  uint64_t v7 = swift_allocError(&type metadata for KeyRepresentableError, v6, 0LL, 0LL);
  *(void *)uint64_t v8 = 0LL;
  *(void *)(v8 + 8) = 0LL;
  *(_BYTE *)(v8 + swift_weakDestroy(v0 + 16) = 2;
  swift_willThrow(v7);
  sub_100016F9C(a1, a2);
  return a1;
}

unint64_t sub_10017DA6C()
{
  unint64_t result = qword_1009A3C70;
  if (!qword_1009A3C70)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F4450, &type metadata for KeyRepresentableInternal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3C70);
  }

  return result;
}

void *sub_10017DAB0(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009A4768);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  unint64_t v9 = sub_100012ED8(a1, v7);
  unint64_t v10 = sub_10017DA6C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for KeyRepresentableInternal.CodingKeys,  &type metadata for KeyRepresentableInternal.CodingKeys,  v10,  v7,  v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    unint64_t v11 = sub_100016FE0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, &type metadata for Data, v12, v3, &type metadata for Data, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    unint64_t v9 = v14;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  return v9;
}

unint64_t sub_10017DBD4()
{
  unint64_t result = qword_1009A3C80;
  if (!qword_1009A3C80)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F4400, &type metadata for CommitmentKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3C80);
  }

  return result;
}

unint64_t sub_10017DC18()
{
  unint64_t result = qword_1009A3C88;
  if (!qword_1009A3C88)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for KeyRepresentableInternal,  &type metadata for KeyRepresentableInternal);
    atomic_store(result, (unint64_t *)&qword_1009A3C88);
  }

  return result;
}

void sub_10017DC5C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_10017DC98@<X0>(int a1@<W8>)
{
  if (BYTE6(v1) != 174LL)
  {
    if (a1)
    {
      if (a1 == 1)
      {
        if (!__OFSUB__(HIDWORD(v2), (_DWORD)v2))
        {
          uint64_t v3 = HIDWORD(v2) - (int)v2;
LABEL_8:
          unint64_t v6 = sub_100117AD0();
          uint64_t v7 = swift_allocError(&type metadata for KeyRepresentableError, v6, 0LL, 0LL);
          *(void *)uint64_t v8 = 174LL;
          *(void *)(v8 + 8) = v3;
          *(_BYTE *)(v8 + swift_weakDestroy(v0 + 16) = 0;
          swift_willThrow(v7);
          sub_100016F9C(v2, v1);
          return v2;
        }

        __break(1u);
      }

      else
      {
        uint64_t v5 = *(void *)(v2 + 16);
        uint64_t v4 = *(void *)(v2 + 24);
        uint64_t v3 = v4 - v5;
        if (!__OFSUB__(v4, v5)) {
          goto LABEL_8;
        }
      }

      __break(1u);
      JUMPOUT(0x10017DD68LL);
    }

    uint64_t v3 = BYTE6(v1);
    goto LABEL_8;
  }

  return v2;
}

unint64_t sub_10017DD78()
{
  unint64_t result = qword_1009A3C98;
  if (!qword_1009A3C98)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F43B0, &type metadata for EncryptedPrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3C98);
  }

  return result;
}

unint64_t sub_10017DDBC()
{
  unint64_t result = qword_1009A3CA8;
  if (!qword_1009A3CA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F4360, &type metadata for PrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3CA8);
  }

  return result;
}

unint64_t sub_10017DE00()
{
  unint64_t result = qword_1009A3CB8;
  if (!qword_1009A3CB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F4310, &type metadata for StandardPublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3CB8);
  }

  return result;
}

unint64_t sub_10017DE44()
{
  unint64_t result = qword_1009A3CC8;
  if (!qword_1009A3CC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F42C0, &type metadata for PublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3CC8);
  }

  return result;
}

unint64_t sub_10017DE88()
{
  unint64_t result = qword_1009A3CD8;
  if (!qword_1009A3CD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F4270, &type metadata for NearOwnerAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3CD8);
  }

  return result;
}

unint64_t sub_10017DECC()
{
  unint64_t result = qword_1009A3CE8;
  if (!qword_1009A3CE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F4220, &type metadata for Advertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3CE8);
  }

  return result;
}

unint64_t sub_10017DF10()
{
  unint64_t result = qword_1009A3CF8;
  if (!qword_1009A3CF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F41D0, &type metadata for HashedAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3CF8);
  }

  return result;
}

unint64_t sub_10017DF54()
{
  unint64_t result = qword_1009A3D08;
  if (!qword_1009A3D08)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F4180, &type metadata for PairingNonce.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3D08);
  }

  return result;
}

unint64_t sub_10017DF98()
{
  unint64_t result = qword_1009A3D18;
  if (!qword_1009A3D18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F4130, &type metadata for SharedSecretKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3D18);
  }

  return result;
}

unint64_t sub_10017DFDC()
{
  unint64_t result = qword_1009A3D28;
  if (!qword_1009A3D28)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F40E0, &type metadata for AntiTrackingKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3D28);
  }

  return result;
}

unint64_t sub_10017E020()
{
  unint64_t result = qword_1009A3D38;
  if (!qword_1009A3D38)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F4090, &type metadata for IntermediateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3D38);
  }

  return result;
}

unint64_t sub_10017E064()
{
  unint64_t result = qword_1009A3D48;
  if (!qword_1009A3D48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F4040, &type metadata for CommandKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3D48);
  }

  return result;
}

unint64_t sub_10017E0A8()
{
  unint64_t result = qword_1009A3D58;
  if (!qword_1009A3D58)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3FF0, &type metadata for ConnectionKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3D58);
  }

  return result;
}

unint64_t sub_10017E0EC()
{
  unint64_t result = qword_1009A3D68;
  if (!qword_1009A3D68)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3FA0, &type metadata for LongTermKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3D68);
  }

  return result;
}

unint64_t sub_10017E130()
{
  unint64_t result = qword_1009A3D78;
  if (!qword_1009A3D78)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3F50, &type metadata for NearbyTokenKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3D78);
  }

  return result;
}

unint64_t sub_10017E174()
{
  unint64_t result = qword_1009A3D88;
  if (!qword_1009A3D88)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3F00, &type metadata for NFCPartialAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3D88);
  }

  return result;
}

unint64_t sub_10017E1B8()
{
  unint64_t result = qword_1009A3D98;
  if (!qword_1009A3D98)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3EB0, &type metadata for EncryptedBlobE1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3D98);
  }

  return result;
}

unint64_t sub_10017E1FC()
{
  unint64_t result = qword_1009A3DA8;
  if (!qword_1009A3DA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3E20, &type metadata for FindMyNetworkId.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3DA8);
  }

  return result;
}

unint64_t sub_10017E240()
{
  unint64_t result = qword_1009A3DB8;
  if (!qword_1009A3DB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3DD0, &type metadata for EncryptedBlobE2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3DB8);
  }

  return result;
}

unint64_t sub_10017E284()
{
  unint64_t result = qword_1009A3DC8;
  if (!qword_1009A3DC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3D80, &type metadata for EncryptedBlobE3.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3DC8);
  }

  return result;
}

unint64_t sub_10017E2C8()
{
  unint64_t result = qword_1009A3DD8;
  if (!qword_1009A3DD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3D30, &type metadata for EncryptedBlobE4.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3DD8);
  }

  return result;
}

unint64_t sub_10017E30C()
{
  unint64_t result = qword_1009A3DE8;
  if (!qword_1009A3DE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3CE0, &type metadata for RefKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3DE8);
  }

  return result;
}

unint64_t sub_10017E350()
{
  unint64_t result = qword_1009A3DF8;
  if (!qword_1009A3DF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3C90, &type metadata for SikPub.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A3DF8);
  }

  return result;
}

unint64_t sub_10017E394()
{
  unint64_t result = qword_1009A3E08;
  if (!qword_1009A3E08)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3C40, &_s14descr1009452F9O2C1V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1009A3E08);
  }

  return result;
}

unint64_t sub_10017E3D8()
{
  unint64_t result = qword_1009A3E18;
  if (!qword_1009A3E18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3BF0, &_s2C2V10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1009A3E18);
  }

  return result;
}

unint64_t sub_10017E41C()
{
  unint64_t result = qword_1009A3E28;
  if (!qword_1009A3E28)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3BA0, &_s2C3V10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1009A3E28);
  }

  return result;
}

unint64_t sub_10017E460()
{
  unint64_t result = qword_1009A3E38;
  if (!qword_1009A3E38)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3B50, &_s2C2V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1009A3E38);
  }

  return result;
}

unint64_t sub_10017E4A4()
{
  unint64_t result = qword_1009A3E48;
  if (!qword_1009A3E48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3B00, &_s2C3V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1009A3E48);
  }

  return result;
}

void *sub_10017E4E8(void *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v8 = sub_100004AEC(a2);
  uint64_t v22 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  uint64_t v13 = sub_100012ED8(a1, v11);
  uint64_t v14 = a3();
  uint64_t v15 = a4;
  uint64_t v16 = a4;
  uint64_t v17 = v13;
  dispatch thunk of Decoder.container<A>(keyedBy:)(v15, v16, v14, v11, v12);
  if (v4)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    unint64_t v18 = sub_100183CB0();
    KeyedDecodingContainer.decode<A>(_:forKey:)( &v21,  &type metadata for KeyRepresentableInternal,  v19,  v8,  &type metadata for KeyRepresentableInternal,  v18);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v8);
    uint64_t v17 = v21;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  return v17;
}

unint64_t sub_10017E624()
{
  unint64_t result = qword_1009A3E50;
  if (!qword_1009A3E50)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for KeyRepresentableInternal,  &type metadata for KeyRepresentableInternal);
    atomic_store(result, (unint64_t *)&qword_1009A3E50);
  }

  return result;
}

unint64_t sub_10017E668(uint64_t a1)
{
  unint64_t result = sub_10017E68C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10017E68C()
{
  unint64_t result = qword_1009A3E58;
  if (!qword_1009A3E58)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LocationDecryptionKey,  &type metadata for LocationDecryptionKey);
    atomic_store(result, (unint64_t *)&qword_1009A3E58);
  }

  return result;
}

unint64_t sub_10017E6D0(uint64_t a1)
{
  unint64_t result = sub_10017E6F4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10017E6F4()
{
  unint64_t result = qword_1009A3E60;
  if (!qword_1009A3E60)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CommitmentKey, &type metadata for CommitmentKey);
    atomic_store(result, (unint64_t *)&qword_1009A3E60);
  }

  return result;
}

uint64_t sub_10017E738(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100181C10( a1,  a2,  a3,  (uint64_t (*)(void))sub_10017E75C,  (uint64_t (*)(void))sub_10017E7A0,  (uint64_t (*)(void))sub_10017E7E4,  (uint64_t (*)(void))sub_10017E828);
}

unint64_t sub_10017E75C()
{
  unint64_t result = qword_1009A3E68;
  if (!qword_1009A3E68)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CommitmentKey, &type metadata for CommitmentKey);
    atomic_store(result, (unint64_t *)&qword_1009A3E68);
  }

  return result;
}

unint64_t sub_10017E7A0()
{
  unint64_t result = qword_1009A3E70;
  if (!qword_1009A3E70)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CommitmentKey, &type metadata for CommitmentKey);
    atomic_store(result, (unint64_t *)&qword_1009A3E70);
  }

  return result;
}

unint64_t sub_10017E7E4()
{
  unint64_t result = qword_1009A3E78;
  if (!qword_1009A3E78)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CommitmentKey, &type metadata for CommitmentKey);
    atomic_store(result, (unint64_t *)&qword_1009A3E78);
  }

  return result;
}

unint64_t sub_10017E828()
{
  unint64_t result = qword_1009A3E80;
  if (!qword_1009A3E80)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CommitmentKey, &type metadata for CommitmentKey);
    atomic_store(result, (unint64_t *)&qword_1009A3E80);
  }

  return result;
}

unint64_t sub_10017E870()
{
  unint64_t result = qword_1009A3E88;
  if (!qword_1009A3E88)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CommitmentKey, &type metadata for CommitmentKey);
    atomic_store(result, (unint64_t *)&qword_1009A3E88);
  }

  return result;
}

unint64_t sub_10017E8B4(uint64_t a1)
{
  unint64_t result = sub_10017E8D8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10017E8D8()
{
  unint64_t result = qword_1009A3E90;
  if (!qword_1009A3E90)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncryptedPrivateKey,  &type metadata for EncryptedPrivateKey);
    atomic_store(result, (unint64_t *)&qword_1009A3E90);
  }

  return result;
}

uint64_t sub_10017E91C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100181C10( a1,  a2,  a3,  (uint64_t (*)(void))sub_10017E940,  (uint64_t (*)(void))sub_10017E984,  (uint64_t (*)(void))sub_10017E9C8,  (uint64_t (*)(void))sub_10017EA0C);
}

unint64_t sub_10017E940()
{
  unint64_t result = qword_1009A3E98;
  if (!qword_1009A3E98)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncryptedPrivateKey,  &type metadata for EncryptedPrivateKey);
    atomic_store(result, (unint64_t *)&qword_1009A3E98);
  }

  return result;
}

unint64_t sub_10017E984()
{
  unint64_t result = qword_1009A3EA0;
  if (!qword_1009A3EA0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncryptedPrivateKey,  &type metadata for EncryptedPrivateKey);
    atomic_store(result, (unint64_t *)&qword_1009A3EA0);
  }

  return result;
}

unint64_t sub_10017E9C8()
{
  unint64_t result = qword_1009A3EA8;
  if (!qword_1009A3EA8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncryptedPrivateKey,  &type metadata for EncryptedPrivateKey);
    atomic_store(result, (unint64_t *)&qword_1009A3EA8);
  }

  return result;
}

unint64_t sub_10017EA0C()
{
  unint64_t result = qword_1009A3EB0;
  if (!qword_1009A3EB0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncryptedPrivateKey,  &type metadata for EncryptedPrivateKey);
    atomic_store(result, (unint64_t *)&qword_1009A3EB0);
  }

  return result;
}

unint64_t sub_10017EA54()
{
  unint64_t result = qword_1009A3EB8;
  if (!qword_1009A3EB8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncryptedPrivateKey,  &type metadata for EncryptedPrivateKey);
    atomic_store(result, (unint64_t *)&qword_1009A3EB8);
  }

  return result;
}

unint64_t sub_10017EA98(uint64_t a1)
{
  unint64_t result = sub_10017EABC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10017EABC()
{
  unint64_t result = qword_1009A3EC0;
  if (!qword_1009A3EC0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PrivateKey, &type metadata for PrivateKey);
    atomic_store(result, (unint64_t *)&qword_1009A3EC0);
  }

  return result;
}

uint64_t sub_10017EB00(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100181C10( a1,  a2,  a3,  (uint64_t (*)(void))sub_10017EB24,  (uint64_t (*)(void))sub_10017EB68,  (uint64_t (*)(void))sub_10017EBAC,  (uint64_t (*)(void))sub_10017EBF0);
}

unint64_t sub_10017EB24()
{
  unint64_t result = qword_1009BD2F0;
  if (!qword_1009BD2F0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PrivateKey, &type metadata for PrivateKey);
    atomic_store(result, (unint64_t *)&qword_1009BD2F0);
  }

  return result;
}

unint64_t sub_10017EB68()
{
  unint64_t result = qword_1009B53D0;
  if (!qword_1009B53D0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PrivateKey, &type metadata for PrivateKey);
    atomic_store(result, (unint64_t *)&qword_1009B53D0);
  }

  return result;
}

unint64_t sub_10017EBAC()
{
  unint64_t result = qword_1009A3EC8;
  if (!qword_1009A3EC8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PrivateKey, &type metadata for PrivateKey);
    atomic_store(result, (unint64_t *)&qword_1009A3EC8);
  }

  return result;
}

unint64_t sub_10017EBF0()
{
  unint64_t result = qword_1009A3ED0;
  if (!qword_1009A3ED0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PrivateKey, &type metadata for PrivateKey);
    atomic_store(result, (unint64_t *)&qword_1009A3ED0);
  }

  return result;
}

unint64_t sub_10017EC38()
{
  unint64_t result = qword_1009A3ED8;
  if (!qword_1009A3ED8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PrivateKey, &type metadata for PrivateKey);
    atomic_store(result, (unint64_t *)&qword_1009A3ED8);
  }

  return result;
}

unint64_t sub_10017EC7C(uint64_t a1)
{
  unint64_t result = sub_10017ECA0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10017ECA0()
{
  unint64_t result = qword_1009A3EE0;
  if (!qword_1009A3EE0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for StandardPublicKey,  &type metadata for StandardPublicKey);
    atomic_store(result, (unint64_t *)&qword_1009A3EE0);
  }

  return result;
}

uint64_t sub_10017ECE4(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100181C10( a1,  a2,  a3,  (uint64_t (*)(void))sub_10017ED08,  (uint64_t (*)(void))sub_10017ED4C,  (uint64_t (*)(void))sub_10017ED90,  (uint64_t (*)(void))sub_10017EDD4);
}

unint64_t sub_10017ED08()
{
  unint64_t result = qword_1009A3EE8;
  if (!qword_1009A3EE8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for StandardPublicKey,  &type metadata for StandardPublicKey);
    atomic_store(result, (unint64_t *)&qword_1009A3EE8);
  }

  return result;
}

unint64_t sub_10017ED4C()
{
  unint64_t result = qword_1009A3EF0;
  if (!qword_1009A3EF0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for StandardPublicKey,  &type metadata for StandardPublicKey);
    atomic_store(result, (unint64_t *)&qword_1009A3EF0);
  }

  return result;
}

unint64_t sub_10017ED90()
{
  unint64_t result = qword_1009A3EF8;
  if (!qword_1009A3EF8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for StandardPublicKey,  &type metadata for StandardPublicKey);
    atomic_store(result, (unint64_t *)&qword_1009A3EF8);
  }

  return result;
}

unint64_t sub_10017EDD4()
{
  unint64_t result = qword_1009A3F00;
  if (!qword_1009A3F00)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for StandardPublicKey,  &type metadata for StandardPublicKey);
    atomic_store(result, (unint64_t *)&qword_1009A3F00);
  }

  return result;
}

unint64_t sub_10017EE1C()
{
  unint64_t result = qword_1009A3F08;
  if (!qword_1009A3F08)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for StandardPublicKey,  &type metadata for StandardPublicKey);
    atomic_store(result, (unint64_t *)&qword_1009A3F08);
  }

  return result;
}

unint64_t sub_10017EE60(uint64_t a1)
{
  unint64_t result = sub_10017EE84();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10017EE84()
{
  unint64_t result = qword_1009A3F10;
  if (!qword_1009A3F10)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PublicKey, &type metadata for PublicKey);
    atomic_store(result, (unint64_t *)&qword_1009A3F10);
  }

  return result;
}

uint64_t sub_10017EEC8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100181C10( a1,  a2,  a3,  (uint64_t (*)(void))sub_10017EEEC,  (uint64_t (*)(void))sub_10017EF30,  (uint64_t (*)(void))sub_10017EF74,  (uint64_t (*)(void))sub_10017EFB8);
}

unint64_t sub_10017EEEC()
{
  unint64_t result = qword_1009B53B0;
  if (!qword_1009B53B0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PublicKey, &type metadata for PublicKey);
    atomic_store(result, (unint64_t *)&qword_1009B53B0);
  }

  return result;
}

unint64_t sub_10017EF30()
{
  unint64_t result = qword_1009BD300;
  if (!qword_1009BD300)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PublicKey, &type metadata for PublicKey);
    atomic_store(result, (unint64_t *)&qword_1009BD300);
  }

  return result;
}

unint64_t sub_10017EF74()
{
  unint64_t result = qword_1009A3F18;
  if (!qword_1009A3F18)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PublicKey, &type metadata for PublicKey);
    atomic_store(result, (unint64_t *)&qword_1009A3F18);
  }

  return result;
}

unint64_t sub_10017EFB8()
{
  unint64_t result = qword_1009A3F20;
  if (!qword_1009A3F20)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PublicKey, &type metadata for PublicKey);
    atomic_store(result, (unint64_t *)&qword_1009A3F20);
  }

  return result;
}

unint64_t sub_10017F000()
{
  unint64_t result = qword_1009A3F28;
  if (!qword_1009A3F28)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PublicKey, &type metadata for PublicKey);
    atomic_store(result, (unint64_t *)&qword_1009A3F28);
  }

  return result;
}

unint64_t sub_10017F044(uint64_t a1)
{
  unint64_t result = sub_10017F068();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10017F068()
{
  unint64_t result = qword_1009A3F30;
  if (!qword_1009A3F30)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearOwnerAdvertisement,  &type metadata for NearOwnerAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1009A3F30);
  }

  return result;
}

uint64_t sub_10017F0AC(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100181C10( a1,  a2,  a3,  (uint64_t (*)(void))sub_1000B7E0C,  (uint64_t (*)(void))sub_1000B731C,  (uint64_t (*)(void))sub_10017F0D0,  (uint64_t (*)(void))sub_1000B1180);
}

unint64_t sub_10017F0D0()
{
  unint64_t result = qword_1009A3F38;
  if (!qword_1009A3F38)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearOwnerAdvertisement,  &type metadata for NearOwnerAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1009A3F38);
  }

  return result;
}

unint64_t sub_10017F118()
{
  unint64_t result = qword_1009A3F40;
  if (!qword_1009A3F40)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearOwnerAdvertisement,  &type metadata for NearOwnerAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1009A3F40);
  }

  return result;
}

unint64_t sub_10017F15C(uint64_t a1)
{
  unint64_t result = sub_10017F180();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10017F180()
{
  unint64_t result = qword_1009A3F48;
  if (!qword_1009A3F48)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Advertisement, &type metadata for Advertisement);
    atomic_store(result, (unint64_t *)&qword_1009A3F48);
  }

  return result;
}

uint64_t sub_10017F1C4(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100181C10( a1,  a2,  a3,  (uint64_t (*)(void))sub_1000B7E50,  (uint64_t (*)(void))sub_1000B73A4,  (uint64_t (*)(void))sub_10017F1E8,  (uint64_t (*)(void))sub_1000B113C);
}

unint64_t sub_10017F1E8()
{
  unint64_t result = qword_1009A3F50;
  if (!qword_1009A3F50)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Advertisement, &type metadata for Advertisement);
    atomic_store(result, (unint64_t *)&qword_1009A3F50);
  }

  return result;
}

unint64_t sub_10017F230()
{
  unint64_t result = qword_1009A3F58;
  if (!qword_1009A3F58)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Advertisement, &type metadata for Advertisement);
    atomic_store(result, (unint64_t *)&qword_1009A3F58);
  }

  return result;
}

unint64_t sub_10017F274(uint64_t a1)
{
  unint64_t result = sub_10017F298();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10017F298()
{
  unint64_t result = qword_1009A3F60;
  if (!qword_1009A3F60)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for HashedAdvertisement,  &type metadata for HashedAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1009A3F60);
  }

  return result;
}

uint64_t sub_10017F2DC(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100181C10( a1,  a2,  a3,  (uint64_t (*)(void))sub_10017F300,  (uint64_t (*)(void))sub_10017F344,  (uint64_t (*)(void))sub_10017F388,  (uint64_t (*)(void))sub_10009BDE4);
}

unint64_t sub_10017F300()
{
  unint64_t result = qword_1009A3F68;
  if (!qword_1009A3F68)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for HashedAdvertisement,  &type metadata for HashedAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1009A3F68);
  }

  return result;
}

unint64_t sub_10017F344()
{
  unint64_t result = qword_1009A3F70;
  if (!qword_1009A3F70)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for HashedAdvertisement,  &type metadata for HashedAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1009A3F70);
  }

  return result;
}

unint64_t sub_10017F388()
{
  unint64_t result = qword_1009A3F78;
  if (!qword_1009A3F78)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for HashedAdvertisement,  &type metadata for HashedAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1009A3F78);
  }

  return result;
}

unint64_t sub_10017F3D0()
{
  unint64_t result = qword_1009A3F80;
  if (!qword_1009A3F80)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for HashedAdvertisement,  &type metadata for HashedAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1009A3F80);
  }

  return result;
}

unint64_t sub_10017F414(uint64_t a1)
{
  unint64_t result = sub_10017F438();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10017F438()
{
  unint64_t result = qword_1009A3F88;
  if (!qword_1009A3F88)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PairingNonce, &type metadata for PairingNonce);
    atomic_store(result, (unint64_t *)&qword_1009A3F88);
  }

  return result;
}

uint64_t sub_10017F47C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100181C10( a1,  a2,  a3,  (uint64_t (*)(void))sub_10017F4A0,  (uint64_t (*)(void))sub_10017F4E4,  (uint64_t (*)(void))sub_10017F528,  (uint64_t (*)(void))sub_10017F56C);
}

unint64_t sub_10017F4A0()
{
  unint64_t result = qword_1009A3F90;
  if (!qword_1009A3F90)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PairingNonce, &type metadata for PairingNonce);
    atomic_store(result, (unint64_t *)&qword_1009A3F90);
  }

  return result;
}

unint64_t sub_10017F4E4()
{
  unint64_t result = qword_1009A3F98;
  if (!qword_1009A3F98)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PairingNonce, &type metadata for PairingNonce);
    atomic_store(result, (unint64_t *)&qword_1009A3F98);
  }

  return result;
}

unint64_t sub_10017F528()
{
  unint64_t result = qword_1009A3FA0;
  if (!qword_1009A3FA0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PairingNonce, &type metadata for PairingNonce);
    atomic_store(result, (unint64_t *)&qword_1009A3FA0);
  }

  return result;
}

unint64_t sub_10017F56C()
{
  unint64_t result = qword_1009A3FA8;
  if (!qword_1009A3FA8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PairingNonce, &type metadata for PairingNonce);
    atomic_store(result, (unint64_t *)&qword_1009A3FA8);
  }

  return result;
}

unint64_t sub_10017F5B4()
{
  unint64_t result = qword_1009A3FB0;
  if (!qword_1009A3FB0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PairingNonce, &type metadata for PairingNonce);
    atomic_store(result, (unint64_t *)&qword_1009A3FB0);
  }

  return result;
}

unint64_t sub_10017F5F8(uint64_t a1)
{
  unint64_t result = sub_10017F61C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10017F61C()
{
  unint64_t result = qword_1009A3FB8;
  if (!qword_1009A3FB8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SharedSecretKey,  &type metadata for SharedSecretKey);
    atomic_store(result, (unint64_t *)&qword_1009A3FB8);
  }

  return result;
}

uint64_t sub_10017F660(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100181C10( a1,  a2,  a3,  (uint64_t (*)(void))sub_10017F684,  (uint64_t (*)(void))sub_10017F6C8,  (uint64_t (*)(void))sub_10017F70C,  (uint64_t (*)(void))sub_10017F750);
}

unint64_t sub_10017F684()
{
  unint64_t result = qword_1009B53A0;
  if (!qword_1009B53A0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SharedSecretKey,  &type metadata for SharedSecretKey);
    atomic_store(result, (unint64_t *)&qword_1009B53A0);
  }

  return result;
}

unint64_t sub_10017F6C8()
{
  unint64_t result = qword_1009A3FC0;
  if (!qword_1009A3FC0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SharedSecretKey,  &type metadata for SharedSecretKey);
    atomic_store(result, (unint64_t *)&qword_1009A3FC0);
  }

  return result;
}

unint64_t sub_10017F70C()
{
  unint64_t result = qword_1009A3FC8;
  if (!qword_1009A3FC8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SharedSecretKey,  &type metadata for SharedSecretKey);
    atomic_store(result, (unint64_t *)&qword_1009A3FC8);
  }

  return result;
}

unint64_t sub_10017F750()
{
  unint64_t result = qword_1009A3FD0;
  if (!qword_1009A3FD0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SharedSecretKey,  &type metadata for SharedSecretKey);
    atomic_store(result, (unint64_t *)&qword_1009A3FD0);
  }

  return result;
}

unint64_t sub_10017F798()
{
  unint64_t result = qword_1009A3FD8;
  if (!qword_1009A3FD8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SharedSecretKey,  &type metadata for SharedSecretKey);
    atomic_store(result, (unint64_t *)&qword_1009A3FD8);
  }

  return result;
}

unint64_t sub_10017F7DC(uint64_t a1)
{
  unint64_t result = sub_10017F800();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10017F800()
{
  unint64_t result = qword_1009A3FE0;
  if (!qword_1009A3FE0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AntiTrackingKey,  &type metadata for AntiTrackingKey);
    atomic_store(result, (unint64_t *)&qword_1009A3FE0);
  }

  return result;
}

uint64_t sub_10017F844(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100181C10( a1,  a2,  a3,  (uint64_t (*)(void))sub_10017F868,  (uint64_t (*)(void))sub_10017F8AC,  (uint64_t (*)(void))sub_10017F8F0,  (uint64_t (*)(void))sub_10017F934);
}

unint64_t sub_10017F868()
{
  unint64_t result = qword_1009A3FE8;
  if (!qword_1009A3FE8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AntiTrackingKey,  &type metadata for AntiTrackingKey);
    atomic_store(result, (unint64_t *)&qword_1009A3FE8);
  }

  return result;
}

unint64_t sub_10017F8AC()
{
  unint64_t result = qword_1009A3FF0;
  if (!qword_1009A3FF0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AntiTrackingKey,  &type metadata for AntiTrackingKey);
    atomic_store(result, (unint64_t *)&qword_1009A3FF0);
  }

  return result;
}

unint64_t sub_10017F8F0()
{
  unint64_t result = qword_1009A3FF8;
  if (!qword_1009A3FF8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AntiTrackingKey,  &type metadata for AntiTrackingKey);
    atomic_store(result, (unint64_t *)&qword_1009A3FF8);
  }

  return result;
}

unint64_t sub_10017F934()
{
  unint64_t result = qword_1009A4000;
  if (!qword_1009A4000)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AntiTrackingKey,  &type metadata for AntiTrackingKey);
    atomic_store(result, (unint64_t *)&qword_1009A4000);
  }

  return result;
}

unint64_t sub_10017F97C()
{
  unint64_t result = qword_1009A4008;
  if (!qword_1009A4008)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AntiTrackingKey,  &type metadata for AntiTrackingKey);
    atomic_store(result, (unint64_t *)&qword_1009A4008);
  }

  return result;
}

unint64_t sub_10017F9C0(uint64_t a1)
{
  unint64_t result = sub_10017F9E4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10017F9E4()
{
  unint64_t result = qword_1009A4010;
  if (!qword_1009A4010)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IntermediateKey,  &type metadata for IntermediateKey);
    atomic_store(result, (unint64_t *)&qword_1009A4010);
  }

  return result;
}

uint64_t sub_10017FA28(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100181C10( a1,  a2,  a3,  (uint64_t (*)(void))sub_10017FA4C,  (uint64_t (*)(void))sub_10017FA90,  (uint64_t (*)(void))sub_10017FAD4,  (uint64_t (*)(void))sub_10017FB18);
}

unint64_t sub_10017FA4C()
{
  unint64_t result = qword_1009A4018;
  if (!qword_1009A4018)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IntermediateKey,  &type metadata for IntermediateKey);
    atomic_store(result, (unint64_t *)&qword_1009A4018);
  }

  return result;
}

unint64_t sub_10017FA90()
{
  unint64_t result = qword_1009A4020;
  if (!qword_1009A4020)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IntermediateKey,  &type metadata for IntermediateKey);
    atomic_store(result, (unint64_t *)&qword_1009A4020);
  }

  return result;
}

unint64_t sub_10017FAD4()
{
  unint64_t result = qword_1009A4028;
  if (!qword_1009A4028)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IntermediateKey,  &type metadata for IntermediateKey);
    atomic_store(result, (unint64_t *)&qword_1009A4028);
  }

  return result;
}

unint64_t sub_10017FB18()
{
  unint64_t result = qword_1009A4030;
  if (!qword_1009A4030)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IntermediateKey,  &type metadata for IntermediateKey);
    atomic_store(result, (unint64_t *)&qword_1009A4030);
  }

  return result;
}

unint64_t sub_10017FB60()
{
  unint64_t result = qword_1009A4038;
  if (!qword_1009A4038)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IntermediateKey,  &type metadata for IntermediateKey);
    atomic_store(result, (unint64_t *)&qword_1009A4038);
  }

  return result;
}

unint64_t sub_10017FBA4(uint64_t a1)
{
  unint64_t result = sub_10017FBC8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10017FBC8()
{
  unint64_t result = qword_1009A4040;
  if (!qword_1009A4040)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CommandKey, &type metadata for CommandKey);
    atomic_store(result, (unint64_t *)&qword_1009A4040);
  }

  return result;
}

uint64_t sub_10017FC0C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100181C10( a1,  a2,  a3,  (uint64_t (*)(void))sub_10017FC30,  (uint64_t (*)(void))sub_10017FC74,  (uint64_t (*)(void))sub_10017FCB8,  (uint64_t (*)(void))sub_10017FCFC);
}

unint64_t sub_10017FC30()
{
  unint64_t result = qword_1009A4048;
  if (!qword_1009A4048)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CommandKey, &type metadata for CommandKey);
    atomic_store(result, (unint64_t *)&qword_1009A4048);
  }

  return result;
}

unint64_t sub_10017FC74()
{
  unint64_t result = qword_1009A4050;
  if (!qword_1009A4050)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CommandKey, &type metadata for CommandKey);
    atomic_store(result, (unint64_t *)&qword_1009A4050);
  }

  return result;
}

unint64_t sub_10017FCB8()
{
  unint64_t result = qword_1009A4058;
  if (!qword_1009A4058)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CommandKey, &type metadata for CommandKey);
    atomic_store(result, (unint64_t *)&qword_1009A4058);
  }

  return result;
}

unint64_t sub_10017FCFC()
{
  unint64_t result = qword_1009A4060;
  if (!qword_1009A4060)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CommandKey, &type metadata for CommandKey);
    atomic_store(result, (unint64_t *)&qword_1009A4060);
  }

  return result;
}

unint64_t sub_10017FD44()
{
  unint64_t result = qword_1009A4068;
  if (!qword_1009A4068)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CommandKey, &type metadata for CommandKey);
    atomic_store(result, (unint64_t *)&qword_1009A4068);
  }

  return result;
}

unint64_t sub_10017FD88(uint64_t a1)
{
  unint64_t result = sub_10017FDAC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10017FDAC()
{
  unint64_t result = qword_1009A4070;
  if (!qword_1009A4070)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ConnectionKey, &type metadata for ConnectionKey);
    atomic_store(result, (unint64_t *)&qword_1009A4070);
  }

  return result;
}

uint64_t sub_10017FDF0(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100181C10( a1,  a2,  a3,  (uint64_t (*)(void))sub_10017FE14,  (uint64_t (*)(void))sub_10017FE58,  (uint64_t (*)(void))sub_10017FE9C,  (uint64_t (*)(void))sub_10017FEE0);
}

unint64_t sub_10017FE14()
{
  unint64_t result = qword_1009A4078;
  if (!qword_1009A4078)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ConnectionKey, &type metadata for ConnectionKey);
    atomic_store(result, (unint64_t *)&qword_1009A4078);
  }

  return result;
}

unint64_t sub_10017FE58()
{
  unint64_t result = qword_1009A4080;
  if (!qword_1009A4080)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ConnectionKey, &type metadata for ConnectionKey);
    atomic_store(result, (unint64_t *)&qword_1009A4080);
  }

  return result;
}

unint64_t sub_10017FE9C()
{
  unint64_t result = qword_1009A4088;
  if (!qword_1009A4088)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ConnectionKey, &type metadata for ConnectionKey);
    atomic_store(result, (unint64_t *)&qword_1009A4088);
  }

  return result;
}

unint64_t sub_10017FEE0()
{
  unint64_t result = qword_1009A4090;
  if (!qword_1009A4090)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ConnectionKey, &type metadata for ConnectionKey);
    atomic_store(result, (unint64_t *)&qword_1009A4090);
  }

  return result;
}

unint64_t sub_10017FF28()
{
  unint64_t result = qword_1009A4098;
  if (!qword_1009A4098)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ConnectionKey, &type metadata for ConnectionKey);
    atomic_store(result, (unint64_t *)&qword_1009A4098);
  }

  return result;
}

unint64_t sub_10017FF6C(uint64_t a1)
{
  unint64_t result = sub_10017FF90();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10017FF90()
{
  unint64_t result = qword_1009A40A0;
  if (!qword_1009A40A0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for LongTermKey, &type metadata for LongTermKey);
    atomic_store(result, (unint64_t *)&qword_1009A40A0);
  }

  return result;
}

uint64_t sub_10017FFD4(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100181C10( a1,  a2,  a3,  (uint64_t (*)(void))sub_10017FFF8,  (uint64_t (*)(void))sub_10018003C,  (uint64_t (*)(void))sub_100180080,  (uint64_t (*)(void))sub_1001800C4);
}

unint64_t sub_10017FFF8()
{
  unint64_t result = qword_1009A40A8;
  if (!qword_1009A40A8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for LongTermKey, &type metadata for LongTermKey);
    atomic_store(result, (unint64_t *)&qword_1009A40A8);
  }

  return result;
}

unint64_t sub_10018003C()
{
  unint64_t result = qword_1009A40B0;
  if (!qword_1009A40B0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for LongTermKey, &type metadata for LongTermKey);
    atomic_store(result, (unint64_t *)&qword_1009A40B0);
  }

  return result;
}

unint64_t sub_100180080()
{
  unint64_t result = qword_1009A40B8;
  if (!qword_1009A40B8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for LongTermKey, &type metadata for LongTermKey);
    atomic_store(result, (unint64_t *)&qword_1009A40B8);
  }

  return result;
}

unint64_t sub_1001800C4()
{
  unint64_t result = qword_1009A40C0;
  if (!qword_1009A40C0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for LongTermKey, &type metadata for LongTermKey);
    atomic_store(result, (unint64_t *)&qword_1009A40C0);
  }

  return result;
}

unint64_t sub_10018010C()
{
  unint64_t result = qword_1009A40C8;
  if (!qword_1009A40C8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for LongTermKey, &type metadata for LongTermKey);
    atomic_store(result, (unint64_t *)&qword_1009A40C8);
  }

  return result;
}

unint64_t sub_100180150(uint64_t a1)
{
  unint64_t result = sub_100180174();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100180174()
{
  unint64_t result = qword_1009A40D0;
  if (!qword_1009A40D0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyTokenKey,  &type metadata for NearbyTokenKey);
    atomic_store(result, (unint64_t *)&qword_1009A40D0);
  }

  return result;
}

uint64_t sub_1001801B8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100181C10( a1,  a2,  a3,  (uint64_t (*)(void))sub_1001801DC,  (uint64_t (*)(void))sub_100180220,  (uint64_t (*)(void))sub_100180264,  (uint64_t (*)(void))sub_1001802A8);
}

unint64_t sub_1001801DC()
{
  unint64_t result = qword_1009A40D8;
  if (!qword_1009A40D8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyTokenKey,  &type metadata for NearbyTokenKey);
    atomic_store(result, (unint64_t *)&qword_1009A40D8);
  }

  return result;
}

unint64_t sub_100180220()
{
  unint64_t result = qword_1009A40E0;
  if (!qword_1009A40E0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyTokenKey,  &type metadata for NearbyTokenKey);
    atomic_store(result, (unint64_t *)&qword_1009A40E0);
  }

  return result;
}

unint64_t sub_100180264()
{
  unint64_t result = qword_1009A40E8;
  if (!qword_1009A40E8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyTokenKey,  &type metadata for NearbyTokenKey);
    atomic_store(result, (unint64_t *)&qword_1009A40E8);
  }

  return result;
}

unint64_t sub_1001802A8()
{
  unint64_t result = qword_1009A40F0;
  if (!qword_1009A40F0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyTokenKey,  &type metadata for NearbyTokenKey);
    atomic_store(result, (unint64_t *)&qword_1009A40F0);
  }

  return result;
}

unint64_t sub_1001802F0()
{
  unint64_t result = qword_1009A40F8;
  if (!qword_1009A40F8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearbyTokenKey,  &type metadata for NearbyTokenKey);
    atomic_store(result, (unint64_t *)&qword_1009A40F8);
  }

  return result;
}

unint64_t sub_100180334(uint64_t a1)
{
  unint64_t result = sub_100180358();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100180358()
{
  unint64_t result = qword_1009A4100;
  if (!qword_1009A4100)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NFCPartialAdvertisement,  &type metadata for NFCPartialAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1009A4100);
  }

  return result;
}

uint64_t sub_10018039C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100181C10( a1,  a2,  a3,  (uint64_t (*)(void))sub_1001803C0,  (uint64_t (*)(void))sub_100180404,  (uint64_t (*)(void))sub_100180448,  (uint64_t (*)(void))sub_10018048C);
}

unint64_t sub_1001803C0()
{
  unint64_t result = qword_1009A4108;
  if (!qword_1009A4108)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NFCPartialAdvertisement,  &type metadata for NFCPartialAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1009A4108);
  }

  return result;
}

unint64_t sub_100180404()
{
  unint64_t result = qword_1009A4110;
  if (!qword_1009A4110)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NFCPartialAdvertisement,  &type metadata for NFCPartialAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1009A4110);
  }

  return result;
}

unint64_t sub_100180448()
{
  unint64_t result = qword_1009A4118;
  if (!qword_1009A4118)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NFCPartialAdvertisement,  &type metadata for NFCPartialAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1009A4118);
  }

  return result;
}

unint64_t sub_10018048C()
{
  unint64_t result = qword_1009A4120;
  if (!qword_1009A4120)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NFCPartialAdvertisement,  &type metadata for NFCPartialAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1009A4120);
  }

  return result;
}

unint64_t sub_1001804D4()
{
  unint64_t result = qword_1009A4128;
  if (!qword_1009A4128)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NFCPartialAdvertisement,  &type metadata for NFCPartialAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1009A4128);
  }

  return result;
}

unint64_t sub_100180518(uint64_t a1)
{
  unint64_t result = sub_10018053C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10018053C()
{
  unint64_t result = qword_1009A4130;
  if (!qword_1009A4130)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncryptedBlobE1,  &type metadata for EncryptedBlobE1);
    atomic_store(result, (unint64_t *)&qword_1009A4130);
  }

  return result;
}

uint64_t sub_100180580(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100181C10( a1,  a2,  a3,  (uint64_t (*)(void))sub_1001805A4,  (uint64_t (*)(void))sub_1001805E8,  (uint64_t (*)(void))sub_10018062C,  (uint64_t (*)(void))sub_100180670);
}

unint64_t sub_1001805A4()
{
  unint64_t result = qword_1009A4138;
  if (!qword_1009A4138)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncryptedBlobE1,  &type metadata for EncryptedBlobE1);
    atomic_store(result, (unint64_t *)&qword_1009A4138);
  }

  return result;
}

unint64_t sub_1001805E8()
{
  unint64_t result = qword_1009A4140;
  if (!qword_1009A4140)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncryptedBlobE1,  &type metadata for EncryptedBlobE1);
    atomic_store(result, (unint64_t *)&qword_1009A4140);
  }

  return result;
}

unint64_t sub_10018062C()
{
  unint64_t result = qword_1009A4148;
  if (!qword_1009A4148)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncryptedBlobE1,  &type metadata for EncryptedBlobE1);
    atomic_store(result, (unint64_t *)&qword_1009A4148);
  }

  return result;
}

unint64_t sub_100180670()
{
  unint64_t result = qword_1009A4150;
  if (!qword_1009A4150)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncryptedBlobE1,  &type metadata for EncryptedBlobE1);
    atomic_store(result, (unint64_t *)&qword_1009A4150);
  }

  return result;
}

unint64_t sub_1001806B8()
{
  unint64_t result = qword_1009A4158;
  if (!qword_1009A4158)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncryptedBlobE1,  &type metadata for EncryptedBlobE1);
    atomic_store(result, (unint64_t *)&qword_1009A4158);
  }

  return result;
}

unint64_t sub_1001806FC(uint64_t a1)
{
  unint64_t result = sub_100180720();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100180720()
{
  unint64_t result = qword_1009A4160;
  if (!qword_1009A4160)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for FindMyNetworkId,  &type metadata for FindMyNetworkId);
    atomic_store(result, (unint64_t *)&qword_1009A4160);
  }

  return result;
}

uint64_t sub_100180764(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100181C10( a1,  a2,  a3,  (uint64_t (*)(void))sub_100180788,  (uint64_t (*)(void))sub_1001807CC,  (uint64_t (*)(void))sub_100180810,  (uint64_t (*)(void))sub_100180854);
}

unint64_t sub_100180788()
{
  unint64_t result = qword_1009A4168;
  if (!qword_1009A4168)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for FindMyNetworkId,  &type metadata for FindMyNetworkId);
    atomic_store(result, (unint64_t *)&qword_1009A4168);
  }

  return result;
}

unint64_t sub_1001807CC()
{
  unint64_t result = qword_1009A4170;
  if (!qword_1009A4170)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for FindMyNetworkId,  &type metadata for FindMyNetworkId);
    atomic_store(result, (unint64_t *)&qword_1009A4170);
  }

  return result;
}

unint64_t sub_100180810()
{
  unint64_t result = qword_1009A4178;
  if (!qword_1009A4178)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for FindMyNetworkId,  &type metadata for FindMyNetworkId);
    atomic_store(result, (unint64_t *)&qword_1009A4178);
  }

  return result;
}

unint64_t sub_100180854()
{
  unint64_t result = qword_1009A4180;
  if (!qword_1009A4180)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for FindMyNetworkId,  &type metadata for FindMyNetworkId);
    atomic_store(result, (unint64_t *)&qword_1009A4180);
  }

  return result;
}

unint64_t sub_10018089C()
{
  unint64_t result = qword_1009A4188;
  if (!qword_1009A4188)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for FindMyNetworkId,  &type metadata for FindMyNetworkId);
    atomic_store(result, (unint64_t *)&qword_1009A4188);
  }

  return result;
}

unint64_t sub_1001808E0(uint64_t a1)
{
  unint64_t result = sub_100180904();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100180904()
{
  unint64_t result = qword_1009A4190;
  if (!qword_1009A4190)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncryptedBlobE2,  &type metadata for EncryptedBlobE2);
    atomic_store(result, (unint64_t *)&qword_1009A4190);
  }

  return result;
}

uint64_t sub_100180948(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100181C10( a1,  a2,  a3,  (uint64_t (*)(void))sub_10018096C,  (uint64_t (*)(void))sub_1001809B0,  (uint64_t (*)(void))sub_1001809F4,  (uint64_t (*)(void))sub_100180A38);
}

unint64_t sub_10018096C()
{
  unint64_t result = qword_1009A4198;
  if (!qword_1009A4198)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncryptedBlobE2,  &type metadata for EncryptedBlobE2);
    atomic_store(result, (unint64_t *)&qword_1009A4198);
  }

  return result;
}

unint64_t sub_1001809B0()
{
  unint64_t result = qword_1009A41A0;
  if (!qword_1009A41A0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncryptedBlobE2,  &type metadata for EncryptedBlobE2);
    atomic_store(result, (unint64_t *)&qword_1009A41A0);
  }

  return result;
}

unint64_t sub_1001809F4()
{
  unint64_t result = qword_1009A41A8;
  if (!qword_1009A41A8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncryptedBlobE2,  &type metadata for EncryptedBlobE2);
    atomic_store(result, (unint64_t *)&qword_1009A41A8);
  }

  return result;
}

unint64_t sub_100180A38()
{
  unint64_t result = qword_1009A41B0;
  if (!qword_1009A41B0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncryptedBlobE2,  &type metadata for EncryptedBlobE2);
    atomic_store(result, (unint64_t *)&qword_1009A41B0);
  }

  return result;
}

unint64_t sub_100180A80()
{
  unint64_t result = qword_1009A41B8;
  if (!qword_1009A41B8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncryptedBlobE2,  &type metadata for EncryptedBlobE2);
    atomic_store(result, (unint64_t *)&qword_1009A41B8);
  }

  return result;
}

unint64_t sub_100180AC4(uint64_t a1)
{
  unint64_t result = sub_100180AE8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100180AE8()
{
  unint64_t result = qword_1009A41C0;
  if (!qword_1009A41C0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncryptedBlobE3,  &type metadata for EncryptedBlobE3);
    atomic_store(result, (unint64_t *)&qword_1009A41C0);
  }

  return result;
}

uint64_t sub_100180B2C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100181C10( a1,  a2,  a3,  (uint64_t (*)(void))sub_100180B50,  (uint64_t (*)(void))sub_100180B94,  (uint64_t (*)(void))sub_100180BD8,  (uint64_t (*)(void))sub_100180C1C);
}

unint64_t sub_100180B50()
{
  unint64_t result = qword_1009A41C8;
  if (!qword_1009A41C8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncryptedBlobE3,  &type metadata for EncryptedBlobE3);
    atomic_store(result, (unint64_t *)&qword_1009A41C8);
  }

  return result;
}

unint64_t sub_100180B94()
{
  unint64_t result = qword_1009A41D0;
  if (!qword_1009A41D0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncryptedBlobE3,  &type metadata for EncryptedBlobE3);
    atomic_store(result, (unint64_t *)&qword_1009A41D0);
  }

  return result;
}

unint64_t sub_100180BD8()
{
  unint64_t result = qword_1009A41D8;
  if (!qword_1009A41D8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncryptedBlobE3,  &type metadata for EncryptedBlobE3);
    atomic_store(result, (unint64_t *)&qword_1009A41D8);
  }

  return result;
}

unint64_t sub_100180C1C()
{
  unint64_t result = qword_1009A41E0;
  if (!qword_1009A41E0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncryptedBlobE3,  &type metadata for EncryptedBlobE3);
    atomic_store(result, (unint64_t *)&qword_1009A41E0);
  }

  return result;
}

unint64_t sub_100180C64()
{
  unint64_t result = qword_1009A41E8;
  if (!qword_1009A41E8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncryptedBlobE3,  &type metadata for EncryptedBlobE3);
    atomic_store(result, (unint64_t *)&qword_1009A41E8);
  }

  return result;
}

unint64_t sub_100180CA8(uint64_t a1)
{
  unint64_t result = sub_100180CCC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100180CCC()
{
  unint64_t result = qword_1009A41F0;
  if (!qword_1009A41F0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncryptedBlobE4,  &type metadata for EncryptedBlobE4);
    atomic_store(result, (unint64_t *)&qword_1009A41F0);
  }

  return result;
}

uint64_t sub_100180D10(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100181C10( a1,  a2,  a3,  (uint64_t (*)(void))sub_100180D34,  (uint64_t (*)(void))sub_100180D78,  (uint64_t (*)(void))sub_100180DBC,  (uint64_t (*)(void))sub_100180E00);
}

unint64_t sub_100180D34()
{
  unint64_t result = qword_1009A41F8;
  if (!qword_1009A41F8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncryptedBlobE4,  &type metadata for EncryptedBlobE4);
    atomic_store(result, (unint64_t *)&qword_1009A41F8);
  }

  return result;
}

unint64_t sub_100180D78()
{
  unint64_t result = qword_1009A4200;
  if (!qword_1009A4200)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncryptedBlobE4,  &type metadata for EncryptedBlobE4);
    atomic_store(result, (unint64_t *)&qword_1009A4200);
  }

  return result;
}

unint64_t sub_100180DBC()
{
  unint64_t result = qword_1009A4208;
  if (!qword_1009A4208)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncryptedBlobE4,  &type metadata for EncryptedBlobE4);
    atomic_store(result, (unint64_t *)&qword_1009A4208);
  }

  return result;
}

unint64_t sub_100180E00()
{
  unint64_t result = qword_1009A4210;
  if (!qword_1009A4210)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncryptedBlobE4,  &type metadata for EncryptedBlobE4);
    atomic_store(result, (unint64_t *)&qword_1009A4210);
  }

  return result;
}

unint64_t sub_100180E48()
{
  unint64_t result = qword_1009A4218;
  if (!qword_1009A4218)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EncryptedBlobE4,  &type metadata for EncryptedBlobE4);
    atomic_store(result, (unint64_t *)&qword_1009A4218);
  }

  return result;
}

unint64_t sub_100180E8C(uint64_t a1)
{
  unint64_t result = sub_100180EB0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100180EB0()
{
  unint64_t result = qword_1009A4220;
  if (!qword_1009A4220)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for RefKey, &type metadata for RefKey);
    atomic_store(result, (unint64_t *)&qword_1009A4220);
  }

  return result;
}

uint64_t sub_100180EF4(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100181C10( a1,  a2,  a3,  (uint64_t (*)(void))sub_100180F18,  (uint64_t (*)(void))sub_100180F5C,  (uint64_t (*)(void))sub_100180FA0,  (uint64_t (*)(void))sub_100180FE4);
}

unint64_t sub_100180F18()
{
  unint64_t result = qword_1009A4228;
  if (!qword_1009A4228)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for RefKey, &type metadata for RefKey);
    atomic_store(result, (unint64_t *)&qword_1009A4228);
  }

  return result;
}

unint64_t sub_100180F5C()
{
  unint64_t result = qword_1009A4230;
  if (!qword_1009A4230)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for RefKey, &type metadata for RefKey);
    atomic_store(result, (unint64_t *)&qword_1009A4230);
  }

  return result;
}

unint64_t sub_100180FA0()
{
  unint64_t result = qword_1009A4238;
  if (!qword_1009A4238)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for RefKey, &type metadata for RefKey);
    atomic_store(result, (unint64_t *)&qword_1009A4238);
  }

  return result;
}

unint64_t sub_100180FE4()
{
  unint64_t result = qword_1009A4240;
  if (!qword_1009A4240)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for RefKey, &type metadata for RefKey);
    atomic_store(result, (unint64_t *)&qword_1009A4240);
  }

  return result;
}

unint64_t sub_10018102C()
{
  unint64_t result = qword_1009A4248;
  if (!qword_1009A4248)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for RefKey, &type metadata for RefKey);
    atomic_store(result, (unint64_t *)&qword_1009A4248);
  }

  return result;
}

unint64_t sub_100181070(uint64_t a1)
{
  unint64_t result = sub_100181094();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100181094()
{
  unint64_t result = qword_1009A4250;
  if (!qword_1009A4250)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SikPub, &type metadata for SikPub);
    atomic_store(result, (unint64_t *)&qword_1009A4250);
  }

  return result;
}

uint64_t sub_1001810D8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100181C10( a1,  a2,  a3,  (uint64_t (*)(void))sub_1001810FC,  (uint64_t (*)(void))sub_100181140,  (uint64_t (*)(void))sub_100181184,  (uint64_t (*)(void))sub_1001811C8);
}

unint64_t sub_1001810FC()
{
  unint64_t result = qword_1009A4258;
  if (!qword_1009A4258)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SikPub, &type metadata for SikPub);
    atomic_store(result, (unint64_t *)&qword_1009A4258);
  }

  return result;
}

unint64_t sub_100181140()
{
  unint64_t result = qword_1009A4260;
  if (!qword_1009A4260)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SikPub, &type metadata for SikPub);
    atomic_store(result, (unint64_t *)&qword_1009A4260);
  }

  return result;
}

unint64_t sub_100181184()
{
  unint64_t result = qword_1009A4268;
  if (!qword_1009A4268)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SikPub, &type metadata for SikPub);
    atomic_store(result, (unint64_t *)&qword_1009A4268);
  }

  return result;
}

unint64_t sub_1001811C8()
{
  unint64_t result = qword_1009A4270;
  if (!qword_1009A4270)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SikPub, &type metadata for SikPub);
    atomic_store(result, (unint64_t *)&qword_1009A4270);
  }

  return result;
}

unint64_t sub_100181210()
{
  unint64_t result = qword_1009A4278;
  if (!qword_1009A4278)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SikPub, &type metadata for SikPub);
    atomic_store(result, (unint64_t *)&qword_1009A4278);
  }

  return result;
}

unint64_t sub_100181254(uint64_t a1)
{
  unint64_t result = sub_100181278();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100181278()
{
  unint64_t result = qword_1009A4280;
  if (!qword_1009A4280)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.C1,  &type metadata for CollaborativeKeyGen.C1);
    atomic_store(result, (unint64_t *)&qword_1009A4280);
  }

  return result;
}

uint64_t sub_1001812BC(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100181C10( a1,  a2,  a3,  (uint64_t (*)(void))sub_1001812E0,  (uint64_t (*)(void))sub_100181324,  (uint64_t (*)(void))sub_100181368,  (uint64_t (*)(void))sub_1001813AC);
}

unint64_t sub_1001812E0()
{
  unint64_t result = qword_1009A4288;
  if (!qword_1009A4288)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.C1,  &type metadata for CollaborativeKeyGen.C1);
    atomic_store(result, (unint64_t *)&qword_1009A4288);
  }

  return result;
}

unint64_t sub_100181324()
{
  unint64_t result = qword_1009A4290;
  if (!qword_1009A4290)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.C1,  &type metadata for CollaborativeKeyGen.C1);
    atomic_store(result, (unint64_t *)&qword_1009A4290);
  }

  return result;
}

unint64_t sub_100181368()
{
  unint64_t result = qword_1009A4298;
  if (!qword_1009A4298)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.C1,  &type metadata for CollaborativeKeyGen.C1);
    atomic_store(result, (unint64_t *)&qword_1009A4298);
  }

  return result;
}

unint64_t sub_1001813AC()
{
  unint64_t result = qword_1009A42A0;
  if (!qword_1009A42A0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.C1,  &type metadata for CollaborativeKeyGen.C1);
    atomic_store(result, (unint64_t *)&qword_1009A42A0);
  }

  return result;
}

unint64_t sub_1001813F4()
{
  unint64_t result = qword_1009A42A8;
  if (!qword_1009A42A8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.C1,  &type metadata for CollaborativeKeyGen.C1);
    atomic_store(result, (unint64_t *)&qword_1009A42A8);
  }

  return result;
}

unint64_t sub_100181438(uint64_t a1)
{
  unint64_t result = sub_10018145C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10018145C()
{
  unint64_t result = qword_1009A42B0;
  if (!qword_1009A42B0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.v1.C2,  &type metadata for CollaborativeKeyGen.v1.C2);
    atomic_store(result, (unint64_t *)&qword_1009A42B0);
  }

  return result;
}

unint64_t sub_1001814A0(uint64_t a1)
{
  unint64_t result = sub_1001814C4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001814C4()
{
  unint64_t result = qword_1009A42B8;
  if (!qword_1009A42B8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.v1.C2,  &type metadata for CollaborativeKeyGen.v1.C2);
    atomic_store(result, (unint64_t *)&qword_1009A42B8);
  }

  return result;
}

uint64_t sub_100181508(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100181C10( a1,  a2,  a3,  (uint64_t (*)(void))sub_10018152C,  (uint64_t (*)(void))sub_100181570,  (uint64_t (*)(void))sub_1001815B4,  (uint64_t (*)(void))sub_1001815F8);
}

unint64_t sub_10018152C()
{
  unint64_t result = qword_1009A42C0;
  if (!qword_1009A42C0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.v1.C2,  &type metadata for CollaborativeKeyGen.v1.C2);
    atomic_store(result, (unint64_t *)&qword_1009A42C0);
  }

  return result;
}

unint64_t sub_100181570()
{
  unint64_t result = qword_1009A42C8;
  if (!qword_1009A42C8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.v1.C2,  &type metadata for CollaborativeKeyGen.v1.C2);
    atomic_store(result, (unint64_t *)&qword_1009A42C8);
  }

  return result;
}

unint64_t sub_1001815B4()
{
  unint64_t result = qword_1009A42D0;
  if (!qword_1009A42D0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.v1.C2,  &type metadata for CollaborativeKeyGen.v1.C2);
    atomic_store(result, (unint64_t *)&qword_1009A42D0);
  }

  return result;
}

unint64_t sub_1001815F8()
{
  unint64_t result = qword_1009A42D8;
  if (!qword_1009A42D8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.v1.C2,  &type metadata for CollaborativeKeyGen.v1.C2);
    atomic_store(result, (unint64_t *)&qword_1009A42D8);
  }

  return result;
}

unint64_t sub_100181640()
{
  unint64_t result = qword_1009A42E0;
  if (!qword_1009A42E0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.v1.C2,  &type metadata for CollaborativeKeyGen.v1.C2);
    atomic_store(result, (unint64_t *)&qword_1009A42E0);
  }

  return result;
}

unint64_t sub_100181684(uint64_t a1)
{
  unint64_t result = sub_1001816A8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001816A8()
{
  unint64_t result = qword_1009A42E8;
  if (!qword_1009A42E8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.v1.C3,  &type metadata for CollaborativeKeyGen.v1.C3);
    atomic_store(result, (unint64_t *)&qword_1009A42E8);
  }

  return result;
}

unint64_t sub_1001816EC(uint64_t a1)
{
  unint64_t result = sub_100181710();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100181710()
{
  unint64_t result = qword_1009A42F0;
  if (!qword_1009A42F0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.v1.C3,  &type metadata for CollaborativeKeyGen.v1.C3);
    atomic_store(result, (unint64_t *)&qword_1009A42F0);
  }

  return result;
}

uint64_t sub_100181754(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100181C10( a1,  a2,  a3,  (uint64_t (*)(void))sub_100181778,  (uint64_t (*)(void))sub_1001817BC,  (uint64_t (*)(void))sub_100181800,  (uint64_t (*)(void))sub_100181844);
}

unint64_t sub_100181778()
{
  unint64_t result = qword_1009A42F8;
  if (!qword_1009A42F8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.v1.C3,  &type metadata for CollaborativeKeyGen.v1.C3);
    atomic_store(result, (unint64_t *)&qword_1009A42F8);
  }

  return result;
}

unint64_t sub_1001817BC()
{
  unint64_t result = qword_1009A4300;
  if (!qword_1009A4300)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.v1.C3,  &type metadata for CollaborativeKeyGen.v1.C3);
    atomic_store(result, (unint64_t *)&qword_1009A4300);
  }

  return result;
}

unint64_t sub_100181800()
{
  unint64_t result = qword_1009A4308;
  if (!qword_1009A4308)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.v1.C3,  &type metadata for CollaborativeKeyGen.v1.C3);
    atomic_store(result, (unint64_t *)&qword_1009A4308);
  }

  return result;
}

unint64_t sub_100181844()
{
  unint64_t result = qword_1009A4310;
  if (!qword_1009A4310)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.v1.C3,  &type metadata for CollaborativeKeyGen.v1.C3);
    atomic_store(result, (unint64_t *)&qword_1009A4310);
  }

  return result;
}

unint64_t sub_10018188C()
{
  unint64_t result = qword_1009A4318;
  if (!qword_1009A4318)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.v1.C3,  &type metadata for CollaborativeKeyGen.v1.C3);
    atomic_store(result, (unint64_t *)&qword_1009A4318);
  }

  return result;
}

unint64_t sub_1001818D0(uint64_t a1)
{
  unint64_t result = sub_1001818F4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001818F4()
{
  unint64_t result = qword_1009A4320;
  if (!qword_1009A4320)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.v2.C2,  &type metadata for CollaborativeKeyGen.v2.C2);
    atomic_store(result, (unint64_t *)&qword_1009A4320);
  }

  return result;
}

unint64_t sub_100181938(uint64_t a1)
{
  unint64_t result = sub_10018195C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10018195C()
{
  unint64_t result = qword_1009A4328;
  if (!qword_1009A4328)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.v2.C2,  &type metadata for CollaborativeKeyGen.v2.C2);
    atomic_store(result, (unint64_t *)&qword_1009A4328);
  }

  return result;
}

uint64_t sub_1001819A0(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100181C10( a1,  a2,  a3,  (uint64_t (*)(void))sub_1001819C4,  (uint64_t (*)(void))sub_100181A08,  (uint64_t (*)(void))sub_100181A4C,  (uint64_t (*)(void))sub_100181A90);
}

unint64_t sub_1001819C4()
{
  unint64_t result = qword_1009A4330;
  if (!qword_1009A4330)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.v2.C2,  &type metadata for CollaborativeKeyGen.v2.C2);
    atomic_store(result, (unint64_t *)&qword_1009A4330);
  }

  return result;
}

unint64_t sub_100181A08()
{
  unint64_t result = qword_1009A4338;
  if (!qword_1009A4338)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.v2.C2,  &type metadata for CollaborativeKeyGen.v2.C2);
    atomic_store(result, (unint64_t *)&qword_1009A4338);
  }

  return result;
}

unint64_t sub_100181A4C()
{
  unint64_t result = qword_1009A4340;
  if (!qword_1009A4340)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.v2.C2,  &type metadata for CollaborativeKeyGen.v2.C2);
    atomic_store(result, (unint64_t *)&qword_1009A4340);
  }

  return result;
}

unint64_t sub_100181A90()
{
  unint64_t result = qword_1009A4348;
  if (!qword_1009A4348)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.v2.C2,  &type metadata for CollaborativeKeyGen.v2.C2);
    atomic_store(result, (unint64_t *)&qword_1009A4348);
  }

  return result;
}

unint64_t sub_100181AD8()
{
  unint64_t result = qword_1009A4350;
  if (!qword_1009A4350)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.v2.C2,  &type metadata for CollaborativeKeyGen.v2.C2);
    atomic_store(result, (unint64_t *)&qword_1009A4350);
  }

  return result;
}

unint64_t sub_100181B1C(uint64_t a1)
{
  unint64_t result = sub_100181B40();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100181B40()
{
  unint64_t result = qword_1009A4358;
  if (!qword_1009A4358)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.v2.C3,  &type metadata for CollaborativeKeyGen.v2.C3);
    atomic_store(result, (unint64_t *)&qword_1009A4358);
  }

  return result;
}

unint64_t sub_100181B84(uint64_t a1)
{
  unint64_t result = sub_100181BA8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100181BA8()
{
  unint64_t result = qword_1009A4360;
  if (!qword_1009A4360)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.v2.C3,  &type metadata for CollaborativeKeyGen.v2.C3);
    atomic_store(result, (unint64_t *)&qword_1009A4360);
  }

  return result;
}

uint64_t sub_100181BEC(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100181C10( a1,  a2,  a3,  (uint64_t (*)(void))sub_100181C60,  (uint64_t (*)(void))sub_100181CA4,  (uint64_t (*)(void))sub_100181CE8,  (uint64_t (*)(void))sub_100181D2C);
}

uint64_t sub_100181C10( void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  a1[1] = a4();
  a1[2] = a5();
  a1[3] = a6();
  uint64_t result = a7();
  a1[4] = result;
  return result;
}

unint64_t sub_100181C60()
{
  unint64_t result = qword_1009A4368;
  if (!qword_1009A4368)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.v2.C3,  &type metadata for CollaborativeKeyGen.v2.C3);
    atomic_store(result, (unint64_t *)&qword_1009A4368);
  }

  return result;
}

unint64_t sub_100181CA4()
{
  unint64_t result = qword_1009A4370;
  if (!qword_1009A4370)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.v2.C3,  &type metadata for CollaborativeKeyGen.v2.C3);
    atomic_store(result, (unint64_t *)&qword_1009A4370);
  }

  return result;
}

unint64_t sub_100181CE8()
{
  unint64_t result = qword_1009A4378;
  if (!qword_1009A4378)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.v2.C3,  &type metadata for CollaborativeKeyGen.v2.C3);
    atomic_store(result, (unint64_t *)&qword_1009A4378);
  }

  return result;
}

unint64_t sub_100181D2C()
{
  unint64_t result = qword_1009A4380;
  if (!qword_1009A4380)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.v2.C3,  &type metadata for CollaborativeKeyGen.v2.C3);
    atomic_store(result, (unint64_t *)&qword_1009A4380);
  }

  return result;
}

unint64_t sub_100181D74()
{
  unint64_t result = qword_1009A4388;
  if (!qword_1009A4388)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.v2.C3,  &type metadata for CollaborativeKeyGen.v2.C3);
    atomic_store(result, (unint64_t *)&qword_1009A4388);
  }

  return result;
}

ValueMetadata *type metadata accessor for KeyRepresentableInternal()
{
  return &type metadata for KeyRepresentableInternal;
}

ValueMetadata *type metadata accessor for LocationDecryptionKey()
{
  return &type metadata for LocationDecryptionKey;
}

ValueMetadata *type metadata accessor for CommitmentKey()
{
  return &type metadata for CommitmentKey;
}

ValueMetadata *type metadata accessor for EncryptedPrivateKey()
{
  return &type metadata for EncryptedPrivateKey;
}

ValueMetadata *type metadata accessor for PrivateKey()
{
  return &type metadata for PrivateKey;
}

ValueMetadata *type metadata accessor for StandardPublicKey()
{
  return &type metadata for StandardPublicKey;
}

ValueMetadata *type metadata accessor for PublicKey()
{
  return &type metadata for PublicKey;
}

ValueMetadata *type metadata accessor for NearOwnerAdvertisement()
{
  return &type metadata for NearOwnerAdvertisement;
}

ValueMetadata *type metadata accessor for Advertisement()
{
  return &type metadata for Advertisement;
}

ValueMetadata *type metadata accessor for HashedAdvertisement()
{
  return &type metadata for HashedAdvertisement;
}

ValueMetadata *type metadata accessor for PairingNonce()
{
  return &type metadata for PairingNonce;
}

ValueMetadata *type metadata accessor for SharedSecretKey()
{
  return &type metadata for SharedSecretKey;
}

ValueMetadata *type metadata accessor for AntiTrackingKey()
{
  return &type metadata for AntiTrackingKey;
}

ValueMetadata *type metadata accessor for IntermediateKey()
{
  return &type metadata for IntermediateKey;
}

ValueMetadata *type metadata accessor for CommandKey()
{
  return &type metadata for CommandKey;
}

ValueMetadata *type metadata accessor for ConnectionKey()
{
  return &type metadata for ConnectionKey;
}

ValueMetadata *type metadata accessor for LongTermKey()
{
  return &type metadata for LongTermKey;
}

ValueMetadata *type metadata accessor for NearbyTokenKey()
{
  return &type metadata for NearbyTokenKey;
}

ValueMetadata *type metadata accessor for NFCPartialAdvertisement()
{
  return &type metadata for NFCPartialAdvertisement;
}

ValueMetadata *type metadata accessor for EncryptedBlobE1()
{
  return &type metadata for EncryptedBlobE1;
}

ValueMetadata *type metadata accessor for FindMyNetworkId()
{
  return &type metadata for FindMyNetworkId;
}

ValueMetadata *type metadata accessor for EncryptedBlobE2()
{
  return &type metadata for EncryptedBlobE2;
}

ValueMetadata *type metadata accessor for EncryptedBlobE3()
{
  return &type metadata for EncryptedBlobE3;
}

ValueMetadata *type metadata accessor for EncryptedBlobE4()
{
  return &type metadata for EncryptedBlobE4;
}

ValueMetadata *type metadata accessor for RefKey()
{
  return &type metadata for RefKey;
}

ValueMetadata *type metadata accessor for SikPub()
{
  return &type metadata for SikPub;
}

ValueMetadata *type metadata accessor for CollaborativeKeyGen.C1()
{
  return &type metadata for CollaborativeKeyGen.C1;
}

ValueMetadata *type metadata accessor for CollaborativeKeyGen.v1.C2()
{
  return &type metadata for CollaborativeKeyGen.v1.C2;
}

ValueMetadata *type metadata accessor for CollaborativeKeyGen.v1.C3()
{
  return &type metadata for CollaborativeKeyGen.v1.C3;
}

ValueMetadata *type metadata accessor for CollaborativeKeyGen.v2.C2()
{
  return &type metadata for CollaborativeKeyGen.v2.C2;
}

ValueMetadata *type metadata accessor for CollaborativeKeyGen.v2.C3()
{
  return &type metadata for CollaborativeKeyGen.v2.C3;
}

ValueMetadata *_s2C3V10CodingKeysOMa()
{
  return &_s2C3V10CodingKeysON;
}

ValueMetadata *_s2C2V10CodingKeysOMa()
{
  return &_s2C2V10CodingKeysON;
}

ValueMetadata *_s2C3V10CodingKeysOMa_0()
{
  return &_s2C3V10CodingKeysON_0;
}

ValueMetadata *_s2C2V10CodingKeysOMa_0()
{
  return &_s2C2V10CodingKeysON_0;
}

ValueMetadata *_s14descr1009452F9O2C1V10CodingKeysOMa()
{
  return &_s14descr1009452F9O2C1V10CodingKeysON;
}

ValueMetadata *type metadata accessor for SikPub.CodingKeys()
{
  return &type metadata for SikPub.CodingKeys;
}

ValueMetadata *type metadata accessor for RefKey.CodingKeys()
{
  return &type metadata for RefKey.CodingKeys;
}

ValueMetadata *type metadata accessor for EncryptedBlobE4.CodingKeys()
{
  return &type metadata for EncryptedBlobE4.CodingKeys;
}

ValueMetadata *type metadata accessor for EncryptedBlobE3.CodingKeys()
{
  return &type metadata for EncryptedBlobE3.CodingKeys;
}

ValueMetadata *type metadata accessor for EncryptedBlobE2.CodingKeys()
{
  return &type metadata for EncryptedBlobE2.CodingKeys;
}

ValueMetadata *type metadata accessor for FindMyNetworkId.CodingKeys()
{
  return &type metadata for FindMyNetworkId.CodingKeys;
}

uint64_t sub_10018206C(uint64_t result, unint64_t a2, char a3)
{
  if (a3 == 1) {
    return sub_10001736C(result, a2);
  }
  return result;
}

uint64_t destroy for KeyRepresentableError(uint64_t a1)
{
  return sub_100182090(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_100182090(uint64_t result, unint64_t a2, char a3)
{
  if (a3 == 1) {
    return sub_100016F9C(result, a2);
  }
  return result;
}

uint64_t _s12searchpartyd21KeyRepresentableErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_10018206C(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for KeyRepresentableError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_10018206C(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  sub_100182090(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for KeyRepresentableError(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  sub_100182090(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for KeyRepresentableError()
{
  return &type metadata for KeyRepresentableError;
}

ValueMetadata *type metadata accessor for EncryptedBlobE1.CodingKeys()
{
  return &type metadata for EncryptedBlobE1.CodingKeys;
}

ValueMetadata *type metadata accessor for NFCPartialAdvertisement.CodingKeys()
{
  return &type metadata for NFCPartialAdvertisement.CodingKeys;
}

ValueMetadata *type metadata accessor for NearbyTokenKey.CodingKeys()
{
  return &type metadata for NearbyTokenKey.CodingKeys;
}

ValueMetadata *type metadata accessor for LongTermKey.CodingKeys()
{
  return &type metadata for LongTermKey.CodingKeys;
}

ValueMetadata *type metadata accessor for ConnectionKey.CodingKeys()
{
  return &type metadata for ConnectionKey.CodingKeys;
}

ValueMetadata *type metadata accessor for CommandKey.CodingKeys()
{
  return &type metadata for CommandKey.CodingKeys;
}

ValueMetadata *type metadata accessor for IntermediateKey.CodingKeys()
{
  return &type metadata for IntermediateKey.CodingKeys;
}

ValueMetadata *type metadata accessor for AntiTrackingKey.CodingKeys()
{
  return &type metadata for AntiTrackingKey.CodingKeys;
}

ValueMetadata *type metadata accessor for SharedSecretKey.CodingKeys()
{
  return &type metadata for SharedSecretKey.CodingKeys;
}

ValueMetadata *type metadata accessor for PairingNonce.CodingKeys()
{
  return &type metadata for PairingNonce.CodingKeys;
}

ValueMetadata *type metadata accessor for HashedAdvertisement.CodingKeys()
{
  return &type metadata for HashedAdvertisement.CodingKeys;
}

ValueMetadata *type metadata accessor for Advertisement.CodingKeys()
{
  return &type metadata for Advertisement.CodingKeys;
}

ValueMetadata *type metadata accessor for NearOwnerAdvertisement.CodingKeys()
{
  return &type metadata for NearOwnerAdvertisement.CodingKeys;
}

ValueMetadata *type metadata accessor for PublicKey.CodingKeys()
{
  return &type metadata for PublicKey.CodingKeys;
}

ValueMetadata *type metadata accessor for StandardPublicKey.CodingKeys()
{
  return &type metadata for StandardPublicKey.CodingKeys;
}

ValueMetadata *type metadata accessor for PrivateKey.CodingKeys()
{
  return &type metadata for PrivateKey.CodingKeys;
}

ValueMetadata *type metadata accessor for EncryptedPrivateKey.CodingKeys()
{
  return &type metadata for EncryptedPrivateKey.CodingKeys;
}

ValueMetadata *type metadata accessor for CommitmentKey.CodingKeys()
{
  return &type metadata for CommitmentKey.CodingKeys;
}

ValueMetadata *type metadata accessor for KeyRepresentableInternal.CodingKeys()
{
  return &type metadata for KeyRepresentableInternal.CodingKeys;
}

unint64_t sub_1001822C8()
{
  unint64_t result = qword_1009A4390;
  if (!qword_1009A4390)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F25D8, &type metadata for KeyRepresentableInternal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4390);
  }

  return result;
}

unint64_t sub_100182310()
{
  unint64_t result = qword_1009A4398;
  if (!qword_1009A4398)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2690, &type metadata for CommitmentKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4398);
  }

  return result;
}

unint64_t sub_100182358()
{
  unint64_t result = qword_1009A43A0;
  if (!qword_1009A43A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2748, &type metadata for EncryptedPrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A43A0);
  }

  return result;
}

unint64_t sub_1001823A0()
{
  unint64_t result = qword_1009A43A8;
  if (!qword_1009A43A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2800, &type metadata for PrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A43A8);
  }

  return result;
}

unint64_t sub_1001823E8()
{
  unint64_t result = qword_1009A43B0;
  if (!qword_1009A43B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F28B8, &type metadata for StandardPublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A43B0);
  }

  return result;
}

unint64_t sub_100182430()
{
  unint64_t result = qword_1009A43B8;
  if (!qword_1009A43B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2970, &type metadata for PublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A43B8);
  }

  return result;
}

unint64_t sub_100182478()
{
  unint64_t result = qword_1009A43C0;
  if (!qword_1009A43C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2A28, &type metadata for NearOwnerAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A43C0);
  }

  return result;
}

unint64_t sub_1001824C0()
{
  unint64_t result = qword_1009A43C8;
  if (!qword_1009A43C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2AE0, &type metadata for Advertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A43C8);
  }

  return result;
}

unint64_t sub_100182508()
{
  unint64_t result = qword_1009A43D0;
  if (!qword_1009A43D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2B98, &type metadata for HashedAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A43D0);
  }

  return result;
}

unint64_t sub_100182550()
{
  unint64_t result = qword_1009A43D8;
  if (!qword_1009A43D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2C50, &type metadata for PairingNonce.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A43D8);
  }

  return result;
}

unint64_t sub_100182598()
{
  unint64_t result = qword_1009A43E0;
  if (!qword_1009A43E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2D08, &type metadata for SharedSecretKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A43E0);
  }

  return result;
}

unint64_t sub_1001825E0()
{
  unint64_t result = qword_1009A43E8;
  if (!qword_1009A43E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2DC0, &type metadata for AntiTrackingKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A43E8);
  }

  return result;
}

unint64_t sub_100182628()
{
  unint64_t result = qword_1009A43F0;
  if (!qword_1009A43F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2E78, &type metadata for IntermediateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A43F0);
  }

  return result;
}

unint64_t sub_100182670()
{
  unint64_t result = qword_1009A43F8;
  if (!qword_1009A43F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2F30, &type metadata for CommandKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A43F8);
  }

  return result;
}

unint64_t sub_1001826B8()
{
  unint64_t result = qword_1009A4400;
  if (!qword_1009A4400)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2FE8, &type metadata for ConnectionKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4400);
  }

  return result;
}

unint64_t sub_100182700()
{
  unint64_t result = qword_1009A4408;
  if (!qword_1009A4408)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F30A0, &type metadata for LongTermKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4408);
  }

  return result;
}

unint64_t sub_100182748()
{
  unint64_t result = qword_1009A4410;
  if (!qword_1009A4410)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3158, &type metadata for NearbyTokenKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4410);
  }

  return result;
}

unint64_t sub_100182790()
{
  unint64_t result = qword_1009A4418;
  if (!qword_1009A4418)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3210, &type metadata for NFCPartialAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4418);
  }

  return result;
}

unint64_t sub_1001827D8()
{
  unint64_t result = qword_1009A4420;
  if (!qword_1009A4420)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F32C8, &type metadata for EncryptedBlobE1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4420);
  }

  return result;
}

unint64_t sub_100182820()
{
  unint64_t result = qword_1009A4428;
  if (!qword_1009A4428)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F33A8, &type metadata for FindMyNetworkId.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4428);
  }

  return result;
}

unint64_t sub_100182868()
{
  unint64_t result = qword_1009A4430;
  if (!qword_1009A4430)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3460, &type metadata for EncryptedBlobE2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4430);
  }

  return result;
}

unint64_t sub_1001828B0()
{
  unint64_t result = qword_1009A4438;
  if (!qword_1009A4438)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3518, &type metadata for EncryptedBlobE3.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4438);
  }

  return result;
}

unint64_t sub_1001828F8()
{
  unint64_t result = qword_1009A4440;
  if (!qword_1009A4440)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F35D0, &type metadata for EncryptedBlobE4.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4440);
  }

  return result;
}

unint64_t sub_100182940()
{
  unint64_t result = qword_1009A4448;
  if (!qword_1009A4448)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3688, &type metadata for RefKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4448);
  }

  return result;
}

unint64_t sub_100182988()
{
  unint64_t result = qword_1009A4450;
  if (!qword_1009A4450)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3740, &type metadata for SikPub.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4450);
  }

  return result;
}

unint64_t sub_1001829D0()
{
  unint64_t result = qword_1009A4458;
  if (!qword_1009A4458)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F37F8, &_s14descr1009452F9O2C1V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1009A4458);
  }

  return result;
}

unint64_t sub_100182A18()
{
  unint64_t result = qword_1009A4460;
  if (!qword_1009A4460)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F38B0, &_s2C2V10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1009A4460);
  }

  return result;
}

unint64_t sub_100182A60()
{
  unint64_t result = qword_1009A4468;
  if (!qword_1009A4468)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3968, &_s2C3V10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1009A4468);
  }

  return result;
}

unint64_t sub_100182AA8()
{
  unint64_t result = qword_1009A4470;
  if (!qword_1009A4470)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3A20, &_s2C2V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1009A4470);
  }

  return result;
}

unint64_t sub_100182AF0()
{
  unint64_t result = qword_1009A4478;
  if (!qword_1009A4478)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3AD8, &_s2C3V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1009A4478);
  }

  return result;
}

unint64_t sub_100182B38()
{
  unint64_t result = qword_1009A4480;
  if (!qword_1009A4480)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3A48, &_s2C3V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1009A4480);
  }

  return result;
}

unint64_t sub_100182B80()
{
  unint64_t result = qword_1009A4488;
  if (!qword_1009A4488)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3A70, &_s2C3V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1009A4488);
  }

  return result;
}

unint64_t sub_100182BC8()
{
  unint64_t result = qword_1009A4490;
  if (!qword_1009A4490)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3990, &_s2C2V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1009A4490);
  }

  return result;
}

unint64_t sub_100182C10()
{
  unint64_t result = qword_1009A4498;
  if (!qword_1009A4498)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F39B8, &_s2C2V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1009A4498);
  }

  return result;
}

unint64_t sub_100182C58()
{
  unint64_t result = qword_1009A44A0;
  if (!qword_1009A44A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F38D8, &_s2C3V10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1009A44A0);
  }

  return result;
}

unint64_t sub_100182CA0()
{
  unint64_t result = qword_1009A44A8;
  if (!qword_1009A44A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3900, &_s2C3V10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1009A44A8);
  }

  return result;
}

unint64_t sub_100182CE8()
{
  unint64_t result = qword_1009A44B0;
  if (!qword_1009A44B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3820, &_s2C2V10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1009A44B0);
  }

  return result;
}

unint64_t sub_100182D30()
{
  unint64_t result = qword_1009A44B8;
  if (!qword_1009A44B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3848, &_s2C2V10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1009A44B8);
  }

  return result;
}

unint64_t sub_100182D78()
{
  unint64_t result = qword_1009A44C0;
  if (!qword_1009A44C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3768, &_s14descr1009452F9O2C1V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1009A44C0);
  }

  return result;
}

unint64_t sub_100182DC0()
{
  unint64_t result = qword_1009A44C8;
  if (!qword_1009A44C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3790, &_s14descr1009452F9O2C1V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1009A44C8);
  }

  return result;
}

unint64_t sub_100182E08()
{
  unint64_t result = qword_1009A44D0;
  if (!qword_1009A44D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F36B0, &type metadata for SikPub.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A44D0);
  }

  return result;
}

unint64_t sub_100182E50()
{
  unint64_t result = qword_1009A44D8;
  if (!qword_1009A44D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F36D8, &type metadata for SikPub.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A44D8);
  }

  return result;
}

unint64_t sub_100182E98()
{
  unint64_t result = qword_1009A44E0;
  if (!qword_1009A44E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F35F8, &type metadata for RefKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A44E0);
  }

  return result;
}

unint64_t sub_100182EE0()
{
  unint64_t result = qword_1009A44E8;
  if (!qword_1009A44E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3620, &type metadata for RefKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A44E8);
  }

  return result;
}

unint64_t sub_100182F28()
{
  unint64_t result = qword_1009A44F0;
  if (!qword_1009A44F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3540, &type metadata for EncryptedBlobE4.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A44F0);
  }

  return result;
}

unint64_t sub_100182F70()
{
  unint64_t result = qword_1009A44F8;
  if (!qword_1009A44F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3568, &type metadata for EncryptedBlobE4.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A44F8);
  }

  return result;
}

unint64_t sub_100182FB8()
{
  unint64_t result = qword_1009A4500;
  if (!qword_1009A4500)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3488, &type metadata for EncryptedBlobE3.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4500);
  }

  return result;
}

unint64_t sub_100183000()
{
  unint64_t result = qword_1009A4508;
  if (!qword_1009A4508)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F34B0, &type metadata for EncryptedBlobE3.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4508);
  }

  return result;
}

unint64_t sub_100183048()
{
  unint64_t result = qword_1009A4510;
  if (!qword_1009A4510)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F33D0, &type metadata for EncryptedBlobE2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4510);
  }

  return result;
}

unint64_t sub_100183090()
{
  unint64_t result = qword_1009A4518;
  if (!qword_1009A4518)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F33F8, &type metadata for EncryptedBlobE2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4518);
  }

  return result;
}

unint64_t sub_1001830D8()
{
  unint64_t result = qword_1009A4520;
  if (!qword_1009A4520)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3318, &type metadata for FindMyNetworkId.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4520);
  }

  return result;
}

unint64_t sub_100183120()
{
  unint64_t result = qword_1009A4528;
  if (!qword_1009A4528)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3340, &type metadata for FindMyNetworkId.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4528);
  }

  return result;
}

unint64_t sub_100183168()
{
  unint64_t result = qword_1009A4530;
  if (!qword_1009A4530)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3238, &type metadata for EncryptedBlobE1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4530);
  }

  return result;
}

unint64_t sub_1001831B0()
{
  unint64_t result = qword_1009A4538;
  if (!qword_1009A4538)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3260, &type metadata for EncryptedBlobE1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4538);
  }

  return result;
}

unint64_t sub_1001831F8()
{
  unint64_t result = qword_1009A4540;
  if (!qword_1009A4540)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3180, &type metadata for NFCPartialAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4540);
  }

  return result;
}

unint64_t sub_100183240()
{
  unint64_t result = qword_1009A4548;
  if (!qword_1009A4548)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F31A8, &type metadata for NFCPartialAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4548);
  }

  return result;
}

unint64_t sub_100183288()
{
  unint64_t result = qword_1009A4550;
  if (!qword_1009A4550)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F30C8, &type metadata for NearbyTokenKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4550);
  }

  return result;
}

unint64_t sub_1001832D0()
{
  unint64_t result = qword_1009A4558;
  if (!qword_1009A4558)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F30F0, &type metadata for NearbyTokenKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4558);
  }

  return result;
}

unint64_t sub_100183318()
{
  unint64_t result = qword_1009A4560;
  if (!qword_1009A4560)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3010, &type metadata for LongTermKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4560);
  }

  return result;
}

unint64_t sub_100183360()
{
  unint64_t result = qword_1009A4568;
  if (!qword_1009A4568)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3038, &type metadata for LongTermKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4568);
  }

  return result;
}

unint64_t sub_1001833A8()
{
  unint64_t result = qword_1009A4570;
  if (!qword_1009A4570)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2F58, &type metadata for ConnectionKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4570);
  }

  return result;
}

unint64_t sub_1001833F0()
{
  unint64_t result = qword_1009A4578;
  if (!qword_1009A4578)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2F80, &type metadata for ConnectionKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4578);
  }

  return result;
}

unint64_t sub_100183438()
{
  unint64_t result = qword_1009A4580;
  if (!qword_1009A4580)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2EA0, &type metadata for CommandKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4580);
  }

  return result;
}

unint64_t sub_100183480()
{
  unint64_t result = qword_1009A4588;
  if (!qword_1009A4588)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2EC8, &type metadata for CommandKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4588);
  }

  return result;
}

unint64_t sub_1001834C8()
{
  unint64_t result = qword_1009A4590;
  if (!qword_1009A4590)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2DE8, &type metadata for IntermediateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4590);
  }

  return result;
}

unint64_t sub_100183510()
{
  unint64_t result = qword_1009A4598;
  if (!qword_1009A4598)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2E10, &type metadata for IntermediateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4598);
  }

  return result;
}

unint64_t sub_100183558()
{
  unint64_t result = qword_1009A45A0;
  if (!qword_1009A45A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2D30, &type metadata for AntiTrackingKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A45A0);
  }

  return result;
}

unint64_t sub_1001835A0()
{
  unint64_t result = qword_1009A45A8;
  if (!qword_1009A45A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2D58, &type metadata for AntiTrackingKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A45A8);
  }

  return result;
}

unint64_t sub_1001835E8()
{
  unint64_t result = qword_1009A45B0;
  if (!qword_1009A45B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2C78, &type metadata for SharedSecretKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A45B0);
  }

  return result;
}

unint64_t sub_100183630()
{
  unint64_t result = qword_1009A45B8;
  if (!qword_1009A45B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2CA0, &type metadata for SharedSecretKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A45B8);
  }

  return result;
}

unint64_t sub_100183678()
{
  unint64_t result = qword_1009A45C0;
  if (!qword_1009A45C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2BC0, &type metadata for PairingNonce.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A45C0);
  }

  return result;
}

unint64_t sub_1001836C0()
{
  unint64_t result = qword_1009A45C8;
  if (!qword_1009A45C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2BE8, &type metadata for PairingNonce.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A45C8);
  }

  return result;
}

unint64_t sub_100183708()
{
  unint64_t result = qword_1009A45D0;
  if (!qword_1009A45D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2B08, &type metadata for HashedAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A45D0);
  }

  return result;
}

unint64_t sub_100183750()
{
  unint64_t result = qword_1009A45D8;
  if (!qword_1009A45D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2B30, &type metadata for HashedAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A45D8);
  }

  return result;
}

unint64_t sub_100183798()
{
  unint64_t result = qword_1009A45E0;
  if (!qword_1009A45E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2A50, &type metadata for Advertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A45E0);
  }

  return result;
}

unint64_t sub_1001837E0()
{
  unint64_t result = qword_1009A45E8;
  if (!qword_1009A45E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2A78, &type metadata for Advertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A45E8);
  }

  return result;
}

unint64_t sub_100183828()
{
  unint64_t result = qword_1009A45F0;
  if (!qword_1009A45F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2998, &type metadata for NearOwnerAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A45F0);
  }

  return result;
}

unint64_t sub_100183870()
{
  unint64_t result = qword_1009A45F8;
  if (!qword_1009A45F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F29C0, &type metadata for NearOwnerAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A45F8);
  }

  return result;
}

unint64_t sub_1001838B8()
{
  unint64_t result = qword_1009A4600;
  if (!qword_1009A4600)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F28E0, &type metadata for PublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4600);
  }

  return result;
}

unint64_t sub_100183900()
{
  unint64_t result = qword_1009A4608;
  if (!qword_1009A4608)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2908, &type metadata for PublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4608);
  }

  return result;
}

unint64_t sub_100183948()
{
  unint64_t result = qword_1009A4610;
  if (!qword_1009A4610)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2828, &type metadata for StandardPublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4610);
  }

  return result;
}

unint64_t sub_100183990()
{
  unint64_t result = qword_1009A4618;
  if (!qword_1009A4618)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2850, &type metadata for StandardPublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4618);
  }

  return result;
}

unint64_t sub_1001839D8()
{
  unint64_t result = qword_1009A4620;
  if (!qword_1009A4620)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2770, &type metadata for PrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4620);
  }

  return result;
}

unint64_t sub_100183A20()
{
  unint64_t result = qword_1009A4628;
  if (!qword_1009A4628)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2798, &type metadata for PrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4628);
  }

  return result;
}

unint64_t sub_100183A68()
{
  unint64_t result = qword_1009A4630;
  if (!qword_1009A4630)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F26B8, &type metadata for EncryptedPrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4630);
  }

  return result;
}

unint64_t sub_100183AB0()
{
  unint64_t result = qword_1009A4638;
  if (!qword_1009A4638)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F26E0, &type metadata for EncryptedPrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4638);
  }

  return result;
}

unint64_t sub_100183AF8()
{
  unint64_t result = qword_1009A4640;
  if (!qword_1009A4640)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2600, &type metadata for CommitmentKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4640);
  }

  return result;
}

unint64_t sub_100183B40()
{
  unint64_t result = qword_1009A4648;
  if (!qword_1009A4648)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2628, &type metadata for CommitmentKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4648);
  }

  return result;
}

unint64_t sub_100183B88()
{
  unint64_t result = qword_1009A4650;
  if (!qword_1009A4650)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2548, &type metadata for KeyRepresentableInternal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4650);
  }

  return result;
}

unint64_t sub_100183BD0()
{
  unint64_t result = qword_1009A4658;
  if (!qword_1009A4658)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F2570, &type metadata for KeyRepresentableInternal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4658);
  }

  return result;
}

unint64_t sub_100183C14()
{
  unint64_t result = qword_1009A4660;
  if (!qword_1009A4660)
  {
    uint64_t v1 = sub_100022898(255LL, (unint64_t *)&qword_10099E400, &OBJC_CLASS___NSObject_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1009A4660);
  }

  return result;
}

unint64_t sub_100183C6C()
{
  unint64_t result = qword_1009A4670;
  if (!qword_1009A4670)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F4518, &type metadata for PrivateKey.PrivateKeyError);
    atomic_store(result, (unint64_t *)&qword_1009A4670);
  }

  return result;
}

unint64_t sub_100183CB0()
{
  unint64_t result = qword_1009A4680;
  if (!qword_1009A4680)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for KeyRepresentableInternal,  &type metadata for KeyRepresentableInternal);
    atomic_store(result, (unint64_t *)&qword_1009A4680);
  }

  return result;
}

uint64_t _s2C3V10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100183D34 + 4 * byte_1007EFE90[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100183D54 + 4 * byte_1007EFE95[v4]))();
  }
}

_BYTE *sub_100183D34(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100183D54(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100183D5C(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100183D64(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100183D6C(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100183D74(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PrivateKey.PrivateKeyError()
{
  return &type metadata for PrivateKey.PrivateKeyError;
}

unint64_t sub_100183D94()
{
  unint64_t result = qword_1009A4770;
  if (!qword_1009A4770)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F44F0, &type metadata for PrivateKey.PrivateKeyError);
    atomic_store(result, (unint64_t *)&qword_1009A4770);
  }

  return result;
}

void sub_100183E04(uint64_t a1)
{
  uint64_t v22 = a1 + 64;
  uint64_t v1 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v2 = -1LL;
  if (v1 < 64) {
    uint64_t v2 = ~(-1LL << v1);
  }
  unint64_t v3 = v2 & *(void *)(a1 + 64);
  int64_t v23 = (unint64_t)(v1 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v4 = 0LL;
  while (1)
  {
    if (v3)
    {
      unint64_t v5 = __clz(__rbit64(v3));
      v3 &= v3 - 1;
      unint64_t v6 = v5 | (v4 << 6);
      goto LABEL_22;
    }

    int64_t v7 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v7 >= v23) {
      goto LABEL_29;
    }
    unint64_t v8 = *(void *)(v22 + 8 * v7);
    ++v4;
    if (!v8)
    {
      int64_t v4 = v7 + 1;
      if (v7 + 1 >= v23) {
        goto LABEL_29;
      }
      unint64_t v8 = *(void *)(v22 + 8 * v4);
      if (!v8)
      {
        int64_t v4 = v7 + 2;
        if (v7 + 2 >= v23) {
          goto LABEL_29;
        }
        unint64_t v8 = *(void *)(v22 + 8 * v4);
        if (!v8)
        {
          int64_t v4 = v7 + 3;
          if (v7 + 3 >= v23) {
            goto LABEL_29;
          }
          unint64_t v8 = *(void *)(v22 + 8 * v4);
          if (!v8)
          {
            int64_t v9 = v7 + 4;
            if (v9 >= v23)
            {
LABEL_29:
              swift_release();
              return;
            }

            unint64_t v8 = *(void *)(v22 + 8 * v9);
            int64_t v4 = v9;
            if (!v8) {
              break;
            }
          }
        }
      }
    }

LABEL_31:
  __break(1u);
}

  uint64_t v40 = 0LL;
  uint64_t v108 = v36;
  unint64_t v110 = v28;
  while (1)
  {
    uint64_t v41 = v114
        ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v40, v28)
        : *(id *)(v28 + 8 * v40 + 32);
    unint64_t v42 = v41;
    if (__OFADD__(v40, 1LL)) {
      break;
    }
    uint64_t v119 = v40 + 1;
    uint64_t v43 = v4[90];
    Swift::String v44 = v4[88];
    Swift::String v45 = v4[86];
    v4[10] = sub_100022898(0LL, (unint64_t *)&qword_1009A9C60, &OBJC_CLASS___SPBeaconLocation_ptr);
    v4[11] = &off_100974788;
    v4[7] = v123;
    Swift::String v46 = v123;
    Swift::String v47 = [v42 timestamp];
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v47);

    uint64_t v48 = v46;
    uint64_t v49 = [v46 timestamp];
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v49);

    LOBYTE(v49) = static Date.== infix(_:_:)(v43, v44);
    uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v106 + 8);
    v50(v44, v45);
    v50(v43, v45);
    sub_100013044((uint64_t)v104, (uint64_t)v121);
    if ((v49 & 1) == 0)
    {
      uint64_t v51 = v42;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v121);
      uint64_t v57 = (void *)(v111 + 136);
      sub_100013044((uint64_t)v104, (uint64_t)v100);
      uint64_t v58 = (void *)(v111 + 96);
LABEL_43:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v57);
      sub_100013044((uint64_t)v104, (uint64_t)v58);
LABEL_44:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v58);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v104);

LABEL_45:
      swift_bridgeObjectRelease();

      id v76 = v4[84];
      swift_bridgeObjectRelease();
      sub_100018C68(v76, type metadata accessor for OwnedBeaconGroup);

      goto LABEL_46;
    }

    uint64_t v51 = v42;
    uint64_t v52 = v42;
    [v52 longitude];
    uint64_t v54 = v53;
    objc_msgSend((id)*sub_100012ED8(v121, v4[30]), "longitude");
    uint64_t v56 = v55;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v121);
    uint64_t v57 = (void *)(v111 + 136);
    sub_100013044((uint64_t)v104, (uint64_t)v100);
    uint64_t v58 = (void *)(v111 + 96);
    if (v54 != v56) {
      goto LABEL_43;
    }
    uint64_t v59 = v52;
    [v59 latitude];
    uint64_t v61 = v60;
    objc_msgSend((id)*sub_100012ED8(v100, v4[20]), "latitude");
    uint64_t v63 = v62;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v100);
    sub_100013044((uint64_t)v104, (uint64_t)v102);
    if (v61 != v63) {
      goto LABEL_44;
    }
    uint64_t v64 = v59;
    [v64 horizontalAccuracy];
    uint64_t v66 = v65;
    objc_msgSend((id)*sub_100012ED8(v102, v4[15]), "horizontalAccuracy");
    unint64_t v68 = v67;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v102);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v104);

    if (v66 != v68) {
      goto LABEL_45;
    }
    ++v40;
    uint64_t v28 = v110;
    if (v119 == v108) {
      goto LABEL_41;
    }
  }

  __break(1u);
LABEL_56:
  __break(1u);
  return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
}

  uint64_t v65 = 0LL;
  *(void *)unint64_t type = v56;
  uint64_t v141 = v61;
  uint64_t v143 = v52;
  while (1)
  {
    uint64_t v66 = v145
        ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v65, v52)
        : *(id *)(v52 + 8 * v65 + 32);
    uint64_t v67 = v66;
    if (__OFADD__(v65, 1LL)) {
      break;
    }
    uint64_t v148 = v65 + 1;
    unint64_t v68 = *(void *)(v16 + 720);
    uint64_t v69 = *(void *)(v16 + 704);
    uint64_t v70 = *(void *)(v16 + 688);
    *(void *)(v16 + 80) = sub_100022898(0LL, (unint64_t *)&qword_1009A9C60, &OBJC_CLASS___SPBeaconLocation_ptr);
    *(void *)(v16 + 88) = &off_100974788;
    *(void *)(v16 + 56) = v56;
    uint64_t v71 = v56;
    uint64_t v72 = [v67 timestamp];
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v72);

    int v73 = [v71 timestamp];
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v73);

    LOBYTE(v73) = static Date.== infix(_:_:)(v68, v69);
    uint64_t v74 = *(void (**)(uint64_t, uint64_t))(v133 + 8);
    v74(v69, v70);
    v74(v68, v70);
    sub_100013044((uint64_t)v137, (uint64_t)v135);
    if ((v73 & 1) == 0)
    {
      uint64_t v75 = v67;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v135);
      uint64_t v81 = (void *)(v16 + 136);
      sub_100013044((uint64_t)v137, (uint64_t)v129);
      uint64_t v82 = (void *)(v16 + 96);
LABEL_43:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v81);
      sub_100013044((uint64_t)v137, (uint64_t)v82);
LABEL_44:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v82);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v137);

LABEL_45:
      swift_bridgeObjectRelease();

      id v99 = *(void *)(v16 + 672);
      swift_bridgeObjectRelease();
      sub_100018C68(v99, type metadata accessor for OwnedBeaconGroup);

      goto LABEL_46;
    }

    uint64_t v75 = v67;
    id v76 = v67;
    [v76 longitude];
    uint64_t v78 = v77;
    objc_msgSend((id)*sub_100012ED8(v135, *(void *)(v16 + 240)), "longitude");
    uint64_t v80 = v79;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v135);
    uint64_t v81 = (void *)(v16 + 136);
    sub_100013044((uint64_t)v137, (uint64_t)v129);
    uint64_t v82 = (void *)(v16 + 96);
    if (v78 != v80) {
      goto LABEL_43;
    }
    uint64_t v83 = v76;
    [v83 latitude];
    unint64_t v85 = v84;
    objc_msgSend((id)*sub_100012ED8(v129, *(void *)(v16 + 160)), "latitude");
    uint64_t v87 = v86;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v129);
    sub_100013044((uint64_t)v137, (uint64_t)v131);
    if (v85 != v87) {
      goto LABEL_44;
    }
    uint64_t v88 = v83;
    [v88 horizontalAccuracy];
    uint64_t v90 = v89;
    objc_msgSend((id)*sub_100012ED8(v131, *(void *)(v16 + 120)), "horizontalAccuracy");
    uint64_t v92 = v91;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v131);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v137);

    if (v90 != v92) {
      goto LABEL_45;
    }
    ++v65;
    uint64_t v56 = *(void **)type;
    uint64_t v52 = v143;
    if (v148 == v141) {
      goto LABEL_41;
    }
  }

  __break(1u);
LABEL_62:
  __break(1u);
  return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
}

  __break(1u);
}

  __break(1u);
  return result;
}

    uint64_t v14 = (v22 - 1) & v22;
    uint64_t v15 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_32:
    unint64_t v24 = *(void *)(*(void *)(v1 + 48) + 8 * v15);
    swift_retain();
    if (!v24) {
      goto LABEL_35;
    }
    while (1)
    {
      AnyCancellable.cancel()();
      unint64_t v6 = (void *)swift_release();
      unint64_t v8 = v16;
      int64_t v9 = v14;
      if ((v1 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_13:
      uint64_t v17 = __CocoaSet.Iterator.next()(v6);
      if (v17)
      {
        uint64_t v18 = v17;
        uint64_t v26 = v17;
        unint64_t v19 = type metadata accessor for AnyCancellable(0LL);
        swift_unknownObjectRetain(v18);
        swift_dynamicCast(&v28, &v26, (char *)&type metadata for Swift.AnyObject + 8, v19, 7LL);
        unint64_t v20 = v28;
        swift_unknownObjectRelease(v18);
        uint64_t v16 = v8;
        uint64_t v14 = v9;
        if (v20) {
          continue;
        }
      }

      goto LABEL_35;
    }
  }

  __break(1u);
}

        uint64_t v94 = *(void *)(v0 + 1112);
        uint64_t v95 = *(void *)(v0 + 1056);
        uint64_t v96 = *(void *)(v0 + 1040);
        uint64_t v97 = *(void *)(v0 + 1032);
        uint64_t v98 = *(void *)(v0 + 976);
        sub_100018C68(*(void *)(v0 + 1048), type metadata accessor for BeaconEstimatedLocation);
        sub_100018C68(v95, type metadata accessor for BeaconEstimatedLocation);
        sub_10001DC4C(v98, v96, type metadata accessor for BeaconEstimatedLocation);
        sub_10001DC4C(v94, v97, type metadata accessor for BeaconEstimatedLocation);
        goto LABEL_32;
      }
    }

    else
    {
      uint64_t v88 = *(void *)(v0 + 976);
      sub_100018C68(*(void *)(v0 + 1080), type metadata accessor for BeaconEstimatedLocation);
      sub_100018C68(v36, type metadata accessor for BeaconEstimatedLocation);
      sub_10001DC4C(v88, v38, type metadata accessor for BeaconEstimatedLocation);
      sub_10001DC4C(v35, v39, type metadata accessor for BeaconEstimatedLocation);
    }

    os_log_type_t v89 = *(void *)(v0 + 1112);
    uint64_t v90 = *(void *)(v0 + 1072);
    uint64_t v91 = *(void *)(v0 + 1056);
    uint64_t v92 = *(void *)(v0 + 1048);
    unint64_t v93 = *(void *)(v0 + 976);
    sub_100018C68(*(void *)(v0 + 1064), type metadata accessor for BeaconEstimatedLocation);
    sub_100018C68(v90, type metadata accessor for BeaconEstimatedLocation);
    sub_10001DC4C(v93, v91, type metadata accessor for BeaconEstimatedLocation);
    sub_10001DC4C(v89, v92, type metadata accessor for BeaconEstimatedLocation);
    goto LABEL_31;
  }

  (*(void (**)(void, void))(*(void *)(v0 + 1152) + 8LL))( *(void *)(v0 + 1192),  *(void *)(v0 + 1144));
  swift_release();
  sub_100015794(v11, &qword_1009A48E0);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 1384);
LABEL_7:
  *(void *)(v0 + 1448) = v12;
  if ((*(_BYTE *)(v0 + 1570) & 1) != 0)
  {
    uint64_t v13 = *(void *)(v0 + 632);
    uint64_t v14 = *(void *)(v0 + 640);
    sub_100012ED8(v192, v13);
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14);
    *(void *)(v0 + 1456) = v15;
    uint64_t v16 = *(_BYTE *)(v15 + 32);
    *(_BYTE *)(v0 + 1571) = v16;
    uint64_t v17 = -1LL;
    uint64_t v18 = -1LL << v16;
    unint64_t v19 = *(void *)(v15 + 56);
    if (-v18 < 64) {
      uint64_t v17 = ~(-1LL << -(char)v18);
    }
    *(void *)(v0 + 146_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = _swiftEmptyArrayStorage;
    unint64_t v20 = v17 & v19;
    if (v20)
    {
      uint64_t v21 = 0LL;
      uint64_t v22 = __clz(__rbit64(v20));
      int64_t v23 = (v20 - 1) & v20;
LABEL_12:
      *(void *)(v0 + 1480) = v23;
      *(void *)(v0 + 1472) = v21;
      unint64_t v24 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 1448);
      unint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1288);
      uint64_t v26 = *(void *)(v0 + 1144);
      uint64_t v27 = *(void *)(v0 + 1120);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 1328))( v27,  *(void *)(v15 + 48) + *(void *)(*(void *)(v0 + 1152) + 72LL) * v22,  v26);
      v24(v27, 0LL, 1LL, v26);
      if (v25(v27, 1LL, v26) == 1) {
        goto LABEL_80;
      }
      uint64_t v135 = *(void *)(v0 + 960);
      (*(void (**)(void, void, void))(v0 + 1296))( *(void *)(v0 + 1176),  *(void *)(v0 + 1120),  *(void *)(v0 + 1144));
      uint64_t v136 = sub_100361CC4;
      return swift_task_switch(v136, v135, 0LL);
    }

    unint64_t v137 = 63 - v18;
    if (v137 > 0x7F)
    {
      uint64_t v138 = *(void *)(v15 + 64);
      if (v138)
      {
        uint64_t v21 = 1LL;
LABEL_45:
        int64_t v23 = (v138 - 1) & v138;
        uint64_t v22 = __clz(__rbit64(v138)) + (v21 << 6);
        goto LABEL_12;
      }

      if (v137 >= 0xC0)
      {
        uint64_t v138 = *(void *)(v15 + 72);
        if (v138)
        {
          uint64_t v21 = 2LL;
          goto LABEL_45;
        }

        if (v137 >= 0x100)
        {
          uint64_t v138 = *(void *)(v15 + 80);
          if (v138)
          {
            uint64_t v21 = 3LL;
            goto LABEL_45;
          }

          if (v137 >= 0x140)
          {
            uint64_t v138 = *(void *)(v15 + 88);
            if (v138)
            {
              uint64_t v21 = 4LL;
              goto LABEL_45;
            }

            uint64_t v144 = 0LL;
            uint64_t v145 = v137 >> 6;
            if (v145 <= 5) {
              uint64_t v145 = 5LL;
            }
            uint64_t v146 = v145 - 5;
            while (v146 != v144)
            {
              uint64_t v138 = *(void *)(v15 + 96 + 8 * v144++);
              if (v138)
              {
                uint64_t v21 = v144 + 4;
                goto LABEL_45;
              }
            }
          }
        }
      }
    }

    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 1448))( *(void *)(v0 + 1120),  1LL,  1LL,  *(void *)(v0 + 1144));
LABEL_80:
    swift_release();
    if (qword_10099B328 != -1) {
      swift_once(&qword_10099B328, sub_10035A0D4);
    }
    uint64_t v147 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1328);
    uint64_t v148 = *(void *)(v0 + 1208);
    uint64_t v149 = *(void *)(v0 + 1184);
    uint64_t v150 = *(void *)(v0 + 1144);
    uint64_t v151 = *(void *)(v0 + 968);
    uint64_t v152 = type metadata accessor for Logger(0LL);
    sub_10000A720(v152, (uint64_t)qword_100A2A730);
    v147(v149, v148, v150);
    unint64_t v153 = sub_100013044(v151, v0 + 768);
    unint64_t v154 = (os_log_s *)Logger.logObject.getter(v153);
    unint64_t v155 = static os_log_type_t.info.getter(v154);
    if (os_log_type_enabled(v154, v155))
    {
      uint64_t v184 = *(void *)(v0 + 1200);
      typeb = v155;
      uint64_t v156 = *(void *)(v0 + 1184);
      uint64_t v182 = *(void *)(v0 + 1152);
      uint64_t v157 = *(void *)(v0 + 1144);
      uint64_t v158 = swift_slowAlloc(42LL, -1LL);
      Class v188 = swift_slowAlloc(64LL, -1LL);
      uint64_t v194 = v188;
      *(_DWORD *)uint64_t v158 = 141558787;
      *(void *)(v0 + 872) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 872, v0 + 880, v158 + 4, v158 + 12);
      *(_WORD *)(v158 + 12) = 2081;
      __int128 v159 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      __int128 v160 = dispatch thunk of CustomStringConvertible.description.getter(v157, v159);
      *(void *)(v0 + 880) = sub_1003F11D4(v160, v161, &v194);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 880, v0 + 888, v158 + 14, v158 + 22);
      swift_bridgeObjectRelease();
      __int128 v162 = *(void (**)(uint64_t, uint64_t))(v182 + 8);
      v162(v156, v157);
      *(_WORD *)(v158 + 22) = 2160;
      *(void *)(v0 + 888) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 888, v0 + 896, v158 + 24, v158 + 32);
      *(_WORD *)(v158 + 32) = 2081;
      __int128 v163 = *(void *)(v0 + 792);
      __int128 v164 = *(void *)(v0 + 800);
      sub_100012ED8((void *)(v0 + 768), v163);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v164 + 8) + 8LL) + 32LL))(v163);
      __int128 v165 = dispatch thunk of CustomStringConvertible.description.getter(v157, v159);
      __int128 v167 = v166;
      v162(v184, v157);
      *(void *)(v0 + 896) = sub_1003F11D4(v165, v167, &v194);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 896, v0 + 904, v158 + 34, v158 + 42);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 768));
      _os_log_impl( (void *)&_mh_execute_header,  v154,  typeb,  "Updating location for subscribers - from beacon store update for beacongroup: %{private,mask.hash}s, beacon: %{p rivate,mask.hash}s.",  (uint8_t *)v158,  0x2Au);
      swift_arrayDestroy(v188, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v188, -1LL, -1LL);
      swift_slowDealloc(v158, -1LL, -1LL);
    }

    else
    {
      __int128 v162 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 1152) + 8LL);
      v162(*(void *)(v0 + 1184), *(void *)(v0 + 1144));
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 768));
    }

    *(void *)(v0 + 1536) = v162;
    __int128 v168 = *(void **)(v0 + 1280);
    __int128 v169 = *(void *)(v0 + 968);
    __int128 v170 = *(void *)(v0 + 960);
    sub_100013044((uint64_t)v192, v0 + 808);
    sub_100013044(v169, v0 + 208);
    __int128 v171 = (void *)swift_allocObject(&unk_100953D90, 120LL, 7LL);
    *(void *)(v0 + 154_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v171;
    v171[2] = v170;
    v171[3] = _swiftEmptyArrayStorage;
    sub_100012EC0((__int128 *)(v0 + 808), (uint64_t)(v171 + 4));
    sub_100012EC0((__int128 *)(v0 + 208), (uint64_t)(v171 + 9));
    v171[14] = v168;
    uint64_t v172 = async function pointer to unsafeBlocking<A>(_:)[1];
    unint64_t v173 = v168;
    swift_retain();
    v174 = (void *)swift_task_alloc(v172);
    *(void *)(v0 + 1552) = v174;
    uint64_t *v174 = v0;
    v174[1] = sub_100362D48;
    return unsafeBlocking<A>(_:)(v174, sub_10036E608, v171, (char *)&type metadata for () + 8);
  }

  (*(void (**)(void, void))(*(void *)(v0 + 1152) + 8LL))( *(void *)(v0 + 1208),  *(void *)(v0 + 1144));
LABEL_34:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v192);
  if (qword_10099B328 != -1) {
    swift_once(&qword_10099B328, sub_10035A0D4);
  }
  uint64_t v104 = *(void *)(v0 + 968);
  os_log_type_t v105 = type metadata accessor for Logger(0LL);
  sub_10000A720(v105, (uint64_t)qword_100A2A730);
  uint64_t v106 = sub_100013044(v104, v0 + 448);
  id v107 = (os_log_s *)Logger.logObject.getter(v106);
  uint64_t v108 = static os_log_type_t.info.getter(v107);
  if (os_log_type_enabled(v107, v108))
  {
    uint64_t v109 = *(void *)(v0 + 1200);
    *(void *)unint64_t type = *(void *)(v0 + 1152);
    unint64_t v110 = *(void *)(v0 + 1144);
    unint64_t v111 = swift_slowAlloc(22LL, -1LL);
    uint64_t v112 = swift_slowAlloc(32LL, -1LL);
    uint64_t v194 = v112;
    *(_DWORD *)unint64_t v111 = 141558275;
    *(void *)(v0 + 928) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 928, v0 + 936, v111 + 4, v111 + 12);
    *(_WORD *)(v111 + 12) = 2081;
    unint64_t v114 = *(void *)(v0 + 472);
    uint64_t v113 = *(void *)(v0 + 480);
    sub_100012ED8((void *)(v0 + 448), v114);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v113 + 8) + 8LL) + 32LL))(v114);
    uint64_t v115 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v116 = dispatch thunk of CustomStringConvertible.description.getter(v110, v115);
    uint64_t v118 = v117;
    (*(void (**)(uint64_t, uint64_t))(*(void *)type + 8LL))(v109, v110);
    *(void *)(v0 + 920) = sub_1003F11D4(v116, v118, &v194);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 920, v0 + 928, v111 + 14, v111 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 448));
    _os_log_impl( (void *)&_mh_execute_header,  v107,  v108,  "Updating location for subscribers - from beacon store update for beacon %{private,mask.hash}s.",  (uint8_t *)v111,  0x16u);
    swift_arrayDestroy(v112, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v112, -1LL, -1LL);
    swift_slowDealloc(v111, -1LL, -1LL);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 448));
  }

  uint64_t v119 = *(void **)(v0 + 1280);
  uint64_t v120 = *(void **)(v0 + 1272);
  uint64_t v121 = *(void *)(v0 + 968);
  unint64_t v122 = *(void *)(*(void *)(v0 + 960) + 160LL);
  uint64_t v123 = *(_BYTE *)(*(void *)(v0 + 976) + *(int *)(v0 + 1560));
  type metadata accessor for Transaction(0LL);
  sub_100013044(v121, v0 + 488);
  uint64_t v124 = swift_allocObject(&unk_100953D40, 73LL, 7LL);
  sub_100012EC0((__int128 *)(v0 + 488), v124 + 16);
  *(void *)(v124 + 56) = v122;
  *(void *)(v124 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v119;
  *(_BYTE *)(v124 + 72) = v123;
  uint64_t v125 = v119;
  swift_retain();
  static Transaction.asyncTask(name:block:)( "LocationFetchServiceConnections.updateLocations:beacon:",  55LL,  2LL,  &unk_1009AA788,  v124);
  swift_release();

  unint64_t v126 = *(void *)(v0 + 1208);
  uint64_t v127 = *(void *)(v0 + 1200);
  uint64_t v128 = *(void *)(v0 + 1192);
  uint64_t v129 = *(void *)(v0 + 1184);
  unint64_t v130 = *(void *)(v0 + 1176);
  unint64_t v131 = *(void *)(v0 + 1168);
  unint64_t v132 = *(void *)(v0 + 1136);
  unint64_t v133 = *(void *)(v0 + 1128);
  uint64_t v134 = *(void *)(v0 + 1120);
  uint64_t v175 = *(void *)(v0 + 1112);
  uint64_t v176 = *(void *)(v0 + 1104);
  uint64_t v177 = *(void *)(v0 + 1096);
  uint64_t v178 = *(void *)(v0 + 1088);
  uint64_t v179 = *(void *)(v0 + 1080);
  uint64_t v180 = *(void *)(v0 + 1072);
  uint64_t v181 = *(void *)(v0 + 1064);
  int v183 = *(void *)(v0 + 1056);
  log = *(os_log_t *)(v0 + 1048);
  uint64_t v186 = *(void *)(v0 + 1040);
  uint64_t v187 = *(void *)(v0 + 1032);
  *(void *)typea = *(void *)(v0 + 1008);
  uint64_t v193 = *(void *)(v0 + 1000);
  swift_task_dealloc(*(void *)(v0 + 1232));
  swift_task_dealloc(v126);
  swift_task_dealloc(v127);
  swift_task_dealloc(v128);
  swift_task_dealloc(v129);
  swift_task_dealloc(v130);
  swift_task_dealloc(v131);
  swift_task_dealloc(v132);
  swift_task_dealloc(v133);
  swift_task_dealloc(v134);
  swift_task_dealloc(v175);
  swift_task_dealloc(v176);
  swift_task_dealloc(v177);
  swift_task_dealloc(v178);
  swift_task_dealloc(v179);
  swift_task_dealloc(v180);
  swift_task_dealloc(v181);
  swift_task_dealloc(v183);
  swift_task_dealloc(log);
  swift_task_dealloc(v186);
  swift_task_dealloc(v187);
  swift_task_dealloc(*(void *)typea);
  swift_task_dealloc(v193);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

  __break(1u);
}

  __break(1u);
}

  v0[91] = v57;
  v0[90] = v59;
  swift_beginAccess(v0 + 38, v0 + 33, 0LL, 0LL);
  unint64_t v93 = sub_1003D895C(v50, v49, v0[38], v0[39]);
  v0[92] = v93;
  uint64_t v94 = v93[2];
  v0[93] = v94;
  if (!v94)
  {
    swift_bridgeObjectRelease();
    if (qword_10099B3C8 == -1)
    {
LABEL_35:
      os_log_type_t v105 = type metadata accessor for Logger(0LL);
      uint64_t v106 = sub_10000A720(v105, (uint64_t)qword_1009ABC80);
      id v107 = (os_log_s *)Logger.logObject.getter(v106);
      uint64_t v108 = static os_log_type_t.info.getter(v107);
      if (os_log_type_enabled(v107, v108))
      {
        uint64_t v109 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v109 = 0;
        _os_log_impl((void *)&_mh_execute_header, v107, v108, "No work to be done", v109, 2u);
        swift_slowDealloc(v109, -1LL, -1LL);

        sub_1003DA5A4(v137, v138, v148, v152, v139, v64);
        sub_100016F9C(v59, v57);
      }

      else
      {
        sub_100016F9C(v59, v57);

        sub_1003DA5A4(v137, v138, v148, v152, v139, v64);
      }

      uint64_t v113 = v0[83];
      unint64_t v114 = v0[82];
      uint64_t v115 = v0[81];
      uint64_t v116 = v0[80];
      uint64_t v117 = v0[79];
      uint64_t v118 = v0[78];
      uint64_t v119 = v0[75];
      uint64_t v120 = v0[74];
      uint64_t v147 = v0[73];
      uint64_t v149 = v0[72];
      uint64_t v121 = v0[69];
      unint64_t v153 = v0[68];
      uint64_t v156 = v0[66];
      sub_100015794(v121, &qword_1009AC170);
      sub_100015794(v119, (uint64_t *)&unk_1009A34D0);
      (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v113, v117);
      swift_task_dealloc(v113);
      swift_task_dealloc(v114);
      swift_task_dealloc(v115);
      swift_task_dealloc(v118);
      swift_task_dealloc(v119);
      swift_task_dealloc(v120);
      swift_task_dealloc(v147);
      swift_task_dealloc(v149);
      swift_task_dealloc(v121);
      swift_task_dealloc(v153);
      swift_task_dealloc(v156);
      unint64_t v42 = (uint64_t (*)(BOOL))v0[1];
      uint64_t v43 = v0[93] != 0LL;
      return v42(v43);
    }

    (*(void (**)(void, void))(*(void *)(v0 + 280) + 8LL))(*(void *)(v0 + 288), *(void *)(v0 + 272));
    uint64_t v72 = v22[2];
    uint64_t v207 = v22;
    if (!v72) {
      break;
    }
    uint64_t v74 = *(void *)(v0 + 120);
    int v73 = *(void *)(v0 + 128);
    v223[0] = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v22);
    sub_1000332A8(0, v72, 0);
    uint64_t v75 = (uint64_t)v22 + ((*(unsigned __int8 *)(v73 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80));
    id v76 = *(void *)(v73 + 72);
    while (1)
    {
      uint64_t v77 = *(void *)(v0 + 216);
      sub_10001DC4C(v75, v77, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      NSString v219 = *(int32x2_t *)(v77 + *(int *)(v74 + 20) + 8);
      sub_100018C68(*(void *)(v0 + 216), type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      uint64_t v78 = (void *)v223[0];
      if ((swift_isUniquelyReferenced_nonNull_native(v223[0]) & 1) == 0)
      {
        sub_1000332A8(0, v78[2] + 1LL, 1);
        uint64_t v78 = (void *)v223[0];
      }

      uint64_t v80 = v78[2];
      uint64_t v79 = v78[3];
      if (v80 >= v79 >> 1)
      {
        sub_1000332A8(v79 > 1, v80 + 1, 1);
        uint64_t v78 = (void *)v223[0];
      }

      v78[2] = v80 + 1;
      v78[v80 + 4] = v219;
      v75 += v76;
      if (!--v72)
      {
        swift_bridgeObjectRelease();
        goto LABEL_41;
      }
    }

    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    swift_once(&qword_10099B3C8, sub_1003B7ABC);
  }

  uint64_t v78 = _swiftEmptyArrayStorage;
LABEL_41:
  v223[0] = (uint64_t)v78;
  swift_bridgeObjectRetain(v78);
  sub_1003B7A54(v223);
  swift_bridgeObjectRelease();
  if (*(void *)(v223[0] + 16))
  {
    uint64_t v81 = *(void *)(v0 + 200);
    uint64_t v82 = *(void *)(v0 + 208);
    unint64_t v220 = *(_DWORD *)(v223[0] + 32);
    uint64_t v194 = *(_DWORD *)(v223[0] + 36);
    swift_release();
    v223[0] = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v83 = v207[2];
    swift_bridgeObjectRetain(v207);
    if (v83)
    {
      uint64_t v84 = 0LL;
      uint64_t v201 = v82 + 8;
      uint64_t v191 = v81 + 12;
      unint64_t v85 = *(void *)(v0 + 120);
      uint64_t v86 = *(void *)(v0 + 128);
      uint64_t v197 = (os_log_t)_swiftEmptyArrayStorage;
      uint64_t v87 = v207;
      while (1)
      {
        if (v84 >= v87[2]) {
          goto LABEL_84;
        }
        uint64_t v88 = v87;
        os_log_type_t v89 = *(void *)(v0 + 200);
        uint64_t v90 = *(void *)(v0 + 208);
        uint64_t v91 = (*(unsigned __int8 *)(v86 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80);
        uint64_t v92 = *(void *)(v86 + 72);
        sub_10001DC4C( (uint64_t)v88 + v91 + v92 * v84,  v90,  type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        unint64_t v93 = *(_DWORD *)(v201 + *(int *)(v85 + 20));
        sub_10001DC4C(v90, v89, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        uint64_t v94 = *(void *)(v0 + 200);
        if (v93 == v220)
        {
          uint64_t v95 = *(_DWORD *)(v191 + *(int *)(v85 + 20));
          sub_100018C68(v94, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          if (v95 == v194)
          {
            sub_10002218C( *(void *)(v0 + 208),  *(void *)(v0 + 192),  type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
            if ((swift_isUniquelyReferenced_nonNull_native(v197) & 1) != 0)
            {
              uint64_t v87 = v207;
              uint64_t v96 = (uint64_t)v197;
            }

            else
            {
              sub_10003327C(0, *((void *)v197 + 2) + 1LL, 1);
              uint64_t v96 = v223[0];
              uint64_t v87 = v207;
            }

            uint64_t v98 = *(void *)(v96 + 16);
            uint64_t v97 = *(void *)(v96 + 24);
            if (v98 >= v97 >> 1)
            {
              sub_10003327C(v97 > 1, v98 + 1, 1);
              uint64_t v87 = v207;
              uint64_t v96 = v223[0];
            }

            id v99 = *(void *)(v0 + 192);
            *(void *)(v96 + swift_weakDestroy(v0 + 16) = v98 + 1;
            uint64_t v197 = (os_log_t)v96;
            sub_10002218C( v99,  v96 + v91 + v98 * v92,  type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
            goto LABEL_46;
          }
        }

        else
        {
          sub_100018C68(v94, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        }

        sub_100018C68(*(void *)(v0 + 208), type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        uint64_t v87 = v207;
LABEL_46:
        if (v83 == ++v84) {
          goto LABEL_58;
        }
      }
    }

    uint64_t v197 = (os_log_t)_swiftEmptyArrayStorage;
LABEL_58:
    swift_bridgeObjectRelease();
    v223[0] = (uint64_t)v197;
    swift_retain();
    sub_1003B79D4(v223);
    swift_release();
    if (*(void *)(v223[0] + 16))
    {
      id v103 = *(unsigned __int8 *)(*(void *)(v0 + 128) + 80LL);
      sub_10001DC4C( v223[0] + ((v103 + 32) & ~v103),  *(void *)(v0 + 112),  type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      uint64_t v104 = 0LL;
    }

    else
    {
      uint64_t v104 = 1LL;
    }

    os_log_type_t v105 = *(void *)(v0 + 120);
    uint64_t v106 = *(void *)(v0 + 128);
    id v107 = *(void *)(v0 + 112);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v106 + 56))(v107, v104, 1LL, v105);
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v106 + 48))(v107, 1LL, v105) == 1)
    {
      sub_100015794(*(void *)(v0 + 112), &qword_1009AC1D0);
      uint64_t v108 = 1LL;
    }

    else
    {
      uint64_t v109 = *(void *)(v0 + 112);
      v209(*(void *)(v0 + 248), v109, *(void *)(v0 + 296));
      sub_100018C68(v109, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      uint64_t v108 = 0LL;
    }

    unint64_t v110 = *(void *)(v0 + 248);
    unint64_t v111 = *(void *)(v0 + 256);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 304) + 56LL))( v110,  v108,  1LL,  *(void *)(v0 + 296));
    sub_100015750(v110, v111, (uint64_t *)&unk_1009A34D0);
  }

  else
  {
    uint64_t v100 = *(void *)(v0 + 296);
    uint64_t v101 = *(void *)(v0 + 304);
    uint64_t v102 = *(void *)(v0 + 256);
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56))(v102, 1LL, 1LL, v100);
  }

  uint64_t v112 = v207[2];
  if (v112)
  {
    Class v195 = *(void *)(v0 + 304);
    uint64_t v113 = *(void *)(v0 + 128);
    Class v192 = *(void *)(v0 + 120);
    unint64_t v114 = (uint64_t)v207
         + ((*(unsigned __int8 *)(v113 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v113 + 80));
    uint64_t v180 = *(void *)(v0 + 168) + 8LL;
    uint64_t v178 = *(void *)(v0 + 160) + 12LL;
    uint64_t v186 = *(void *)(v0 + 136) + 12LL;
    Class v188 = *(void *)(v0 + 144) + 8LL;
    uint64_t v115 = type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo;
    uint64_t v221 = *(void *)(v113 + 72);
    while (1)
    {
      uint64_t v118 = *(void *)(v0 + 296);
      uint64_t v119 = *(void *)(v0 + 256);
      uint64_t v120 = *(void *)(v0 + 240);
      sub_10001DC4C(v114, *(void *)(v0 + 184), v115);
      sub_10001581C(v119, v120, (uint64_t *)&unk_1009A34D0);
      if (v213(v120, 1LL, v118) == 1) {
        break;
      }
      uint64_t v121 = *(void *)(v0 + 328);
      unint64_t v122 = *(void *)(v0 + 184);
      (*(void (**)(uint64_t, void, void))(v195 + 32))(v121, *(void *)(v0 + 240), *(void *)(v0 + 296));
      if ((static URL.== infix(_:_:)(v122, v121) & 1) == 0)
      {
        v216(*(void *)(v0 + 328), *(void *)(v0 + 296));
        goto LABEL_76;
      }

      uint64_t v123 = *(void *)(v0 + 184);
      uint64_t v125 = *(void *)(v0 + 160);
      uint64_t v124 = *(void *)(v0 + 168);
      sub_10001DC4C(v123, *(void *)(v0 + 176), v115);
      sub_10001DC4C(v123, v124, v115);
      unint64_t v126 = sub_10001DC4C(v123, v125, v115);
      uint64_t v127 = (os_log_s *)Logger.logObject.getter(v126);
      uint64_t v128 = static os_log_type_t.default.getter(v127);
      uint64_t v129 = os_log_type_enabled(v127, v128);
      uint64_t v198 = *(os_log_t *)(v0 + 296);
      uint64_t v202 = *(void *)(v0 + 328);
      unint64_t v130 = *(void *)(v0 + 176);
      unint64_t v131 = *(void *)(v0 + 184);
      unint64_t v132 = *(void *)(v0 + 160);
      unint64_t v133 = *(void *)(v0 + 168);
      if (v129)
      {
        id v210 = v114;
        uint64_t v134 = swift_slowAlloc(24LL, -1LL);
        int v183 = v131;
        uint64_t v135 = swift_slowAlloc(32LL, -1LL);
        v223[0] = v135;
        *(_DWORD *)uint64_t v134 = 136315650;
        uint64_t v136 = URL.path.getter(v135);
        *(void *)(v134 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1003F11D4(v136, v137, v223);
        swift_bridgeObjectRelease();
        sub_100018C68(v130, v115);
        *(_WORD *)(v134 + 12) = 1024;
        uint64_t v138 = *(_DWORD *)(v180 + *(int *)(v192 + 20));
        sub_100018C68(v133, v115);
        *(_DWORD *)(v134 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v138;
        *(_WORD *)(v134 + 18) = 1024;
        uint64_t v139 = *(_DWORD *)(v178 + *(int *)(v192 + 20));
        sub_100018C68(v132, v115);
        *(_DWORD *)(v134 + 20) = v139;
        _os_log_impl((void *)&_mh_execute_header, v127, v128, "KEEP: %s [%u...%u]", (uint8_t *)v134, 0x18u);
        swift_arrayDestroy(v135, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v135, -1LL, -1LL);
        uint64_t v140 = v134;
        unint64_t v114 = v210;
        swift_slowDealloc(v140, -1LL, -1LL);

        v216(v202, (uint64_t)v198);
        uint64_t v117 = v183;
      }

      else
      {
        sub_100018C68(*(void *)(v0 + 160), v115);
        sub_100018C68(v133, v115);

        sub_100018C68(v130, v115);
        v216(v202, (uint64_t)v198);
        uint64_t v117 = v131;
      }

        uint64_t v55 = __OFADD__(result++, 1LL);
        if (v55) {
          goto LABEL_42;
        }
        uint64_t v55 = __OFADD__(v49, 1LL);
        uint64_t v36 = v49 + 1;
        if (v55) {
          goto LABEL_41;
        }
LABEL_36:
        uint64_t v38 = *v69;
        uint64_t v37 = *(void *)(*v69 + 16);
        if (v36 != v37) {
          goto LABEL_16;
        }
        return result;
      }
    }

    uint64_t v35 = v67;
    swift_bridgeObjectRelease();
    v31(v74, v4);
    unint64_t result = v73;
    uint64_t v39 = v68;
    uint64_t v36 = v71 + 1;
    if (__OFADD__(v71, 1LL)) {
      goto LABEL_41;
    }
    goto LABEL_36;
  }

  return result;
}

  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
  }
  uint64_t v16 = v2[2];
  uint64_t v15 = v2[3];
  if (v16 >= v15 >> 1) {
    uint64_t v2 = sub_1004C4120((void *)(v15 > 1), v16 + 1, 1, v2);
  }
  v2[2] = v16 + 1;
  uint64_t v17 = &v2[2 * v16];
  v17[4] = 0x796669746F6E2ELL;
  v17[5] = 0xE700000000000000LL;
  if ((a1 & 0x20) == 0)
  {
LABEL_16:
    if ((a1 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }

          unint64_t v24 = (v27 - 1) & v27;
          unint64_t v25 = __clz(__rbit64(v27)) + (v23 << 6);
        }

        uint64_t v29 = *(void *)(*(void *)(v4 + 48) + 8 * v25);
        swift_retain();
      }

      while (v29);
    }
  }

  sub_1000A6F30(v4);
}

  CKRecordKeyValueSetting.subscript.getter( &v28,  0x6567617373656DLL,  0xE700000000000000LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  int64_t v23 = (unint64_t *)(v2 + v7[9]);
  unint64_t v25 = *v23;
  unint64_t v24 = v23[1];
  if (!*((void *)&v28 + 1))
  {
    if (!v24) {
      return swift_unknownObjectRelease(v3);
    }
    goto LABEL_39;
  }

  if (!v24)
  {
    swift_bridgeObjectRelease();
    unint64_t v30 = 0LL;
    uint64_t v28 = 0u;
    uint64_t v29 = 0u;
LABEL_40:
    swift_bridgeObjectRetain(v24);
    CKRecordKeyValueSetting.subscript.setter(&v28, 0x6567617373656DLL, 0xE700000000000000LL, ObjectType);
    return swift_unknownObjectRelease(v3);
  }

  if (v28 == __PAIR128__(v24, v25))
  {
    swift_unknownObjectRelease(v3);
    return swift_bridgeObjectRelease();
  }

  uint64_t v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, *((void *)&v28 + 1), *v23, v23[1], 0LL);
  swift_bridgeObjectRelease();
  if ((v27 & 1) == 0)
  {
LABEL_39:
    *((void *)&v29 + 1) = &type metadata for String;
    unint64_t v30 = &protocol witness table for String;
    *(void *)&uint64_t v28 = v25;
    *((void *)&v28 + 1) = v24;
    goto LABEL_40;
  }

  return swift_unknownObjectRelease(v3);
}

      __break(1u);
      goto LABEL_32;
    }

          unint64_t v24 = (v27 - 1) & v27;
          unint64_t v25 = __clz(__rbit64(v27)) + (v23 << 6);
        }

        uint64_t v29 = *(void *)(*(void *)(v4 + 48) + 8 * v25);
        swift_retain();
      }

      while (v29);
    }
  }

  sub_1000A6F30(v4);
}

  if ((a1 & 0x200) != 0) {
    goto LABEL_41;
  }
LABEL_43:
  uint64_t v2 = (v1 >> 10) & 1;
  if ((a1 & 0x400) == 0) {
    LODWORD(v2) = 1;
  }
  if (!(_DWORD)v2) {
    v1 |= 0x400uLL;
  }
  unint64_t v3 = v1 >> 11;
  if ((a1 & 0x800) == 0) {
    LODWORD(v3) = 1;
  }
  if (!(_DWORD)v3) {
    v1 |= 0x800uLL;
  }
  if ((a1 & 0x1000) != 0) {
LABEL_52:
  }
    v1 |= 0x1000uLL;
  return v1;
}

  if ((a1 & 0x20) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v19 = v2[2];
    uint64_t v18 = v2[3];
    if (v19 >= v18 >> 1) {
      uint64_t v2 = sub_1004C4120((void *)(v18 > 1), v19 + 1, 1, v2);
    }
    v2[2] = v19 + 1;
    unint64_t v20 = &v2[2 * v19];
    v20[4] = 0x646F4D74736F6C2ELL;
    v20[5] = 0xE900000000000065LL;
  }

  if ((a1 & 0x40) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
    }
    uint64_t v22 = v2[2];
    uint64_t v21 = v2[3];
    if (v22 >= v21 >> 1) {
      uint64_t v2 = sub_1004C4120((void *)(v21 > 1), v22 + 1, 1, v2);
    }
    v2[2] = v22 + 1;
    int64_t v23 = &v2[2 * v22];
    uint64_t v23[4] = 0xD000000000000010LL;
    v23[5] = 0x8000000100858A90LL;
    if ((a1 & 0x80) == 0)
    {
LABEL_39:
      if ((a1 & 0x100) == 0) {
        goto LABEL_40;
      }
      goto LABEL_55;
    }
  }

  else if ((a1 & 0x80) == 0)
  {
    goto LABEL_39;
  }

  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
  }
  unint64_t v25 = v2[2];
  unint64_t v24 = v2[3];
  if (v25 >= v24 >> 1) {
    uint64_t v2 = sub_1004C4120((void *)(v24 > 1), v25 + 1, 1, v2);
  }
  v2[2] = v25 + 1;
  uint64_t v26 = &v2[2 * v25];
  v26[4] = 0x656D616E65722ELL;
  v26[5] = 0xE700000000000000LL;
  if ((a1 & 0x100) == 0)
  {
LABEL_40:
    if ((a1 & 0x200) == 0) {
      goto LABEL_41;
    }
    goto LABEL_60;
  }

    uint64_t v14 = (v22 - 1) & v22;
    uint64_t v15 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_32:
    unint64_t v24 = *(void *)(*(void *)(v1 + 48) + 8 * v15);
    swift_retain();
    if (!v24) {
      goto LABEL_35;
    }
    while (1)
    {
      uint64_t v26 = 11LL;
      uint64_t v27 = 0u;
      uint64_t v28 = 0u;
      uint64_t v29 = 11;
      sub_1004C30A4(&v26);
      sub_1002543B0(&v26);
      unint64_t v6 = (void *)swift_release();
      unint64_t v8 = v16;
      int64_t v9 = v14;
      if ((v1 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_13:
      uint64_t v17 = __CocoaSet.Iterator.next()(v6);
      if (v17)
      {
        uint64_t v18 = v17;
        uint64_t v31 = v17;
        unint64_t v19 = type metadata accessor for Characteristic();
        swift_unknownObjectRetain(v18);
        swift_dynamicCast(&v26, &v31, (char *)&type metadata for Swift.AnyObject + 8, v19, 7LL);
        unint64_t v20 = v26;
        swift_unknownObjectRelease(v18);
        uint64_t v16 = v8;
        uint64_t v14 = v9;
        if (v20) {
          continue;
        }
      }

      goto LABEL_35;
    }
  }

  __break(1u);
}

uint64_t sub_100184084(uint64_t a1)
{
  return sub_10018696C(a1, (uint64_t (*)(void))sub_1004C472C, type metadata accessor for DefaultConfigurationLayer);
}

uint64_t sub_100184098(uint64_t a1)
{
  return sub_100184224(a1, (uint64_t (*)(void))sub_1004C4740, &qword_1009B0530);
}

uint64_t sub_1001840AC(uint64_t a1)
{
  return sub_100186AF8(a1, (uint64_t (*)(void))sub_1004C4BFC, type metadata accessor for ObservedAdvertisement);
}

uint64_t sub_1001840C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = sub_1004C4120(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

uint64_t sub_100184210(uint64_t a1)
{
  return sub_100184224(a1, (uint64_t (*)(void))sub_1004C55C0, (uint64_t *)&unk_1009B1230);
}

uint64_t sub_100184224(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
    goto LABEL_18;
  }

  if (swift_isUniquelyReferenced_nonNull_native(*v3)
    && (int64_t)(v6 + v4) <= *(void *)(v5 + 24) >> 1)
  {
    unint64_t v10 = *(void *)(a1 + 16);
    if (v10) {
      goto LABEL_5;
    }
LABEL_15:
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }

  uint64_t v5 = a2();
  unint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    goto LABEL_15;
  }
LABEL_5:
  uint64_t v11 = *(void *)(v5 + 16);
  if ((*(void *)(v5 + 24) >> 1) - v11 < (uint64_t)v10)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  unint64_t v12 = v5 + 40 * v11 + 32;
  if (a1 + 32 < v12 + 40 * v10 && v12 < a1 + 32 + 40 * v10) {
    goto LABEL_21;
  }
  sub_100004AEC(a3);
  swift_arrayInitWithCopy(v12);
  if (v10 < v4)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v14 = *(void *)(v5 + 16);
  BOOL v15 = __OFADD__(v14, v10);
  uint64_t v16 = v14 + v10;
  if (!v15)
  {
    *(void *)(v5 + swift_weakDestroy(v0 + 16) = v16;
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    *unint64_t v3 = v5;
    return result;
  }

uint64_t sub_10018439C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v79 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v80 = (uint64_t)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v68 - v10;
  __chkstk_darwin(v9);
  uint64_t v16 = (char *)&v68 - v15;
  uint64_t v17 = *(void *)(a1 + 16);
  unint64_t v18 = *v1;
  int64_t v19 = *(void *)(*v1 + 16);
  int64_t v20 = v19 + v17;
  if (__OFADD__(v19, v17))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *uint64_t v1 = v18;
  uint64_t v78 = v11;
  if (!isUniquelyReferenced_nonNull_native || (int64_t v22 = *(void *)(v18 + 24) >> 1, v22 < v20))
  {
    if (v19 <= v20) {
      int64_t v23 = v19 + v17;
    }
    else {
      int64_t v23 = v19;
    }
    unint64_t v18 = sub_1004C44BC(isUniquelyReferenced_nonNull_native, v23, 1, v18);
    *uint64_t v1 = v18;
    int64_t v22 = *(void *)(v18 + 24) >> 1;
  }

  uint64_t v24 = *(void *)(v18 + 16);
  int64_t v19 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  int64_t v20 = *(void *)(v4 + 72);
  int64_t v25 = v22 - v24;
  uint64_t v26 = sub_1003016FC(&v81, v18 + v19 + v20 * v24, v22 - v24, a1);
  if (v26 < v17) {
    goto LABEL_15;
  }
  if (v26)
  {
    uint64_t v28 = *(void *)(v18 + 16);
    BOOL v29 = __OFADD__(v28, v26);
    uint64_t v30 = v28 + v26;
    if (v29)
    {
      __break(1u);
LABEL_20:
      int64_t v35 = a1 + 1;
      if (__OFADD__(a1, 1LL))
      {
        __break(1u);
      }

      else
      {
        int64_t v36 = (v27 + 64) >> 6;
        unint64_t v77 = a1;
        if (v35 >= v36) {
          goto LABEL_41;
        }
        unint64_t v37 = *(void *)(v18 + 8 * v35);
        if (v37)
        {
LABEL_23:
          unint64_t v32 = (v37 - 1) & v37;
          unint64_t v33 = __clz(__rbit64(v37)) + (v35 << 6);
          a1 = v35;
          goto LABEL_18;
        }

        uint64_t v38 = a1 + 2;
        unint64_t v77 = a1 + 1;
        if (a1 + 2 >= v36) {
          goto LABEL_41;
        }
        int64_t v14 = v19;
        int64_t v13 = v25;
        uint64_t v12 = v17;
        unint64_t v37 = *(void *)(v18 + 8 * v38);
        if (v37)
        {
LABEL_26:
          int64_t v35 = v38;
          goto LABEL_23;
        }

        unint64_t v77 = a1 + 2;
        unint64_t v18 = v76;
        if (a1 + 3 >= v36) {
          goto LABEL_41;
        }
        unint64_t v37 = *(void *)(v76 + 8 * (a1 + 3));
        if (v37)
        {
          int64_t v35 = a1 + 3;
          goto LABEL_23;
        }

        uint64_t v38 = a1 + 4;
        unint64_t v77 = a1 + 3;
        unint64_t v18 = v76;
        if (a1 + 4 >= v36) {
          goto LABEL_41;
        }
        unint64_t v37 = *(void *)(v76 + 8 * v38);
        if (v37) {
          goto LABEL_26;
        }
        int64_t v35 = a1 + 5;
        unint64_t v77 = a1 + 4;
        unint64_t v18 = v76;
        if (a1 + 5 >= v36)
        {
LABEL_41:
          uint64_t v69 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
          v69(v16, 1LL, 1LL, v3);
          unint64_t v34 = 0LL;
          a1 = v77;
          goto LABEL_42;
        }

        unint64_t v37 = *(void *)(v76 + 8 * v35);
        if (v37) {
          goto LABEL_23;
        }
        unint64_t v77 = v36 - 1;
        uint64_t v39 = a1 + 6;
        while (v36 != v39)
        {
          unint64_t v37 = *(void *)(v76 + 8 * v39++);
          if (v37)
          {
            int64_t v35 = v39 - 1;
            goto LABEL_23;
          }
        }
      }

      uint64_t v17 = v12;
      int64_t v25 = v13;
      unint64_t v18 = v76;
      int64_t v19 = v14;
      goto LABEL_41;
    }

    *(void *)(v18 + swift_weakDestroy(v0 + 16) = v30;
  }

  if (v26 != v25) {
    return sub_1000A6F30(v81);
  }
LABEL_16:
  int64_t v25 = *(void *)(v18 + 16);
  uint64_t v17 = v81;
  unint64_t v18 = v82;
  unint64_t v27 = v83;
  a1 = v84;
  unint64_t v76 = v82;
  unint64_t v73 = v83;
  if (!v85) {
    goto LABEL_20;
  }
  unint64_t v32 = (v85 - 1) & v85;
  unint64_t v33 = __clz(__rbit64(v85)) | (v84 << 6);
LABEL_18:
  (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v16, *(void *)(v17 + 48) + v33 * v20, v3);
  uint64_t v69 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v69(v16, 0LL, 1LL, v3);
  unint64_t v34 = v32;
  unint64_t v18 = v76;
LABEL_42:
  unint64_t v75 = v34;
  unint64_t v77 = a1;
  uint64_t v81 = v17;
  unint64_t v82 = v18;
  unint64_t v83 = v73;
  uint64_t v84 = a1;
  unint64_t v85 = v34;
  uint64_t v40 = v17;
  uint64_t v41 = (uint64_t)v78;
  sub_10001581C((uint64_t)v16, (uint64_t)v78, &qword_10099D8A0);
  uint64_t v42 = v41;
  uint64_t v43 = v40;
  uint64_t v74 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v74(v42, 1LL, v3) == 1)
  {
LABEL_82:
    sub_100015794((uint64_t)v16, &qword_10099D8A0);
    sub_1000A6F30(v43);
    return sub_100015794((uint64_t)v78, &qword_10099D8A0);
  }

  uint64_t v44 = (uint64_t)v78;
  Swift::String v45 = v79;
  int64_t v70 = v19;
  while (1)
  {
    sub_100015794(v44, &qword_10099D8A0);
    unint64_t v46 = *(void *)(*v1 + 24);
    int64_t v47 = v46 >> 1;
    if ((uint64_t)(v46 >> 1) < v25 + 1)
    {
      uint64_t v53 = sub_1004C44BC(v46 > 1, v25 + 1, 1, *v1);
      *uint64_t v1 = v53;
      unint64_t v77 = v53;
      int64_t v47 = *(void *)(v53 + 24) >> 1;
    }

    else
    {
      unint64_t v77 = *v1;
    }

    uint64_t v48 = v80;
    sub_10001581C((uint64_t)v16, v80, &qword_10099D8A0);
    if (v74(v48, 1LL, v3) != 1) {
      break;
    }
    uint64_t v49 = v80;
LABEL_50:
    sub_100015794(v49, &qword_10099D8A0);
    int64_t v50 = v25;
LABEL_45:
    *(void *)(*v1 + swift_weakDestroy(v0 + 16) = v50;
    uint64_t v44 = (uint64_t)v78;
    sub_10001581C((uint64_t)v16, (uint64_t)v78, &qword_10099D8A0);
    if (v74(v44, 1LL, v3) == 1)
    {
      uint64_t v43 = v81;
      unint64_t v77 = v84;
      unint64_t v75 = v85;
      goto LABEL_82;
    }
  }

  unint64_t v72 = v77 + v19;
  uint64_t v51 = *(void (**)(void, void, void))(v4 + 32);
  if (v25 <= v47) {
    int64_t v52 = v47;
  }
  else {
    int64_t v52 = v25;
  }
  unint64_t v73 = v52;
  uint64_t v49 = v80;
  uint64_t v71 = v51;
  while (1)
  {
    uint64_t v57 = v45;
    uint64_t v58 = v45;
    uint64_t v59 = (uint64_t (*)(unint64_t, char *, uint64_t))v51;
    v51(v57, v49, v3);
    int64_t v50 = v73;
    if (v25 == v73)
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v58, v3);
      int64_t v25 = v50;
      Swift::String v45 = v58;
      int64_t v19 = v70;
      goto LABEL_45;
    }

    sub_100015794((uint64_t)v16, &qword_10099D8A0);
    unint64_t v77 = v25;
    uint64_t result = v59(v72 + v25 * v20, v58, v3);
    uint64_t v55 = v81;
    int64_t v60 = v84;
    unint64_t v75 = v83;
    unint64_t v76 = v82;
    if (v85)
    {
      unint64_t v54 = (v85 - 1) & v85;
      unint64_t v61 = __clz(__rbit64(v85)) | (v84 << 6);
      int64_t v19 = v70;
      goto LABEL_62;
    }

    uint64_t v68 = v81;
    int64_t v63 = v84 + 1;
    int64_t v19 = v70;
    if (__OFADD__(v84, 1LL)) {
      break;
    }
    int64_t v64 = (v83 + 64) >> 6;
    int64_t v62 = v84;
    if (v63 < v64)
    {
      unint64_t v65 = *(void *)(v82 + 8 * v63);
      if (v65) {
        goto LABEL_66;
      }
      int64_t v66 = v84 + 2;
      int64_t v62 = v84 + 1;
      if (v84 + 2 < v64)
      {
        unint64_t v65 = *(void *)(v82 + 8 * v66);
        if (v65) {
          goto LABEL_69;
        }
        int64_t v62 = v84 + 2;
        if (v84 + 3 < v64)
        {
          unint64_t v65 = *(void *)(v82 + 8 * (v84 + 3));
          if (v65)
          {
            int64_t v63 = v84 + 3;
            goto LABEL_66;
          }

          int64_t v66 = v84 + 4;
          int64_t v62 = v84 + 3;
          if (v84 + 4 < v64)
          {
            unint64_t v65 = *(void *)(v82 + 8 * v66);
            if (v65)
            {
LABEL_69:
              int64_t v63 = v66;
              goto LABEL_66;
            }

            int64_t v63 = v84 + 5;
            int64_t v62 = v84 + 4;
            if (v84 + 5 < v64)
            {
              unint64_t v65 = *(void *)(v82 + 8 * v63);
              if (!v65)
              {
                int64_t v62 = v64 - 1;
                uint64_t v67 = v84 + 6;
                do
                {
                  if (v64 == v67)
                  {
                    int64_t v19 = v70;
                    goto LABEL_57;
                  }

                  unint64_t v65 = *(void *)(v82 + 8 * v67++);
                }

                while (!v65);
                int64_t v63 = v67 - 1;
                int64_t v19 = v70;
              }

LABEL_66:
              unint64_t v54 = (v65 - 1) & v65;
              unint64_t v61 = __clz(__rbit64(v65)) + (v63 << 6);
              int64_t v60 = v63;
              uint64_t v55 = v68;
LABEL_62:
              (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))( v16,  *(void *)(v55 + 48) + v61 * v20,  v3);
              v69(v16, 0LL, 1LL, v3);
              int64_t v62 = v60;
              goto LABEL_58;
            }
          }
        }
      }
    }

        __break(1u);
        return result;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_66;
  }

  uint64_t v129 = (void *)(v16 + 136);
  unint64_t v131 = (void *)(v16 + 96);
  uint64_t v135 = (void *)(v16 + 216);
  unint64_t v137 = (void *)(v16 + 56);
  unint64_t v46 = (uint64_t *)(v16 + 432);
  uint64_t v117 = *(void *)(v16 + 840);
  unint64_t v133 = *(void *)(v16 + 696);
  int64_t v47 = *(void *)(v16 + 664);
  uint64_t v127 = result + ((*(unsigned __int8 *)(v47 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80));
  uint64_t v123 = *(void *)(v16 + 656);
  uint64_t v125 = *(void *)(v47 + 72);
  swift_bridgeObjectRetain(result);
  uint64_t v48 = 0LL;
  while (1)
  {
    uint64_t v146 = v48;
    sub_10001DC4C(v127 + v48 * v125, *(void *)(v16 + 672), type metadata accessor for OwnedBeaconGroup);
    sub_1001CC778();
    sub_100189694(v50, v46);
    int64_t v52 = v51;
    swift_bridgeObjectRelease();
    uint64_t v53 = (unint64_t)v52 >> 62;
    unint64_t v54 = *(void *)((v52 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v52);
    if (v54) {
      goto LABEL_12;
    }
LABEL_7:
    uint64_t v49 = *(void *)(v16 + 672);
    swift_bridgeObjectRelease();
    sub_100018C68(v49, type metadata accessor for OwnedBeaconGroup);
LABEL_8:
    swift_bridgeObjectRelease();
LABEL_9:
    uint64_t v48 = v146 + 1;
    if (v146 + 1 == v45)
    {
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_55;
    }
  }

  if (v52 < 0) {
    uint64_t v100 = v52;
  }
  else {
    uint64_t v100 = v52 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v52);
  if (!_CocoaArrayWrapper.endIndex.getter(v100)) {
    goto LABEL_7;
  }
LABEL_12:
  uint64_t v145 = v52 & 0xC000000000000001LL;
  if ((v52 & 0xC000000000000001LL) != 0)
  {
    uint64_t v55 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v52);
  }

  else
  {
    if (!*(void *)((v52 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_62;
    }
    uint64_t v55 = *(id *)(v52 + 32);
  }

  unsigned int v56 = v55;
  swift_bridgeObjectRelease();
  if (v53)
  {
    if (v52 < 0) {
      uint64_t v58 = v52;
    }
    else {
      uint64_t v58 = v52 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v52);
    uint64_t v57 = _CocoaArrayWrapper.endIndex.getter(v58);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v57 = *(void *)((v52 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v59 = *(void *)(v16 + 672);
  int64_t v60 = *(void *)(*(void *)(v59 + *(int *)(v123 + 40)) + 16LL);
  if (v60 >= 0x100) {
    return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
  }
  if (v57 != v60)
  {
    sub_100018C68(v59, type metadata accessor for OwnedBeaconGroup);

    goto LABEL_8;
  }

  uint64_t v121 = v39;
  if (!v53)
  {
    unint64_t v61 = *(void *)((v52 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v52);
    int64_t v62 = v56;
    if (v61) {
      goto LABEL_31;
    }
    goto LABEL_41;
  }

  if (v52 < 0) {
    int64_t v63 = v52;
  }
  else {
    int64_t v63 = v52 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v52);
  int64_t v64 = v56;
  unint64_t v61 = _CocoaArrayWrapper.endIndex.getter(v63);
  if (!v61)
  {
LABEL_41:
    unint64_t v93 = *(void *)(v16 + 848);
    uint64_t v94 = *(void *)(v16 + 832);
    uint64_t v95 = *(void *)(v16 + 672);
    swift_bridgeObjectRelease_n(v52, 2LL);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v117 + 16))(v93, v95 + *(int *)(v123 + 24), v94);
    uint64_t v96 = v56;
    uint64_t v97 = *(void *)(v16 + 432);
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v97);
    v149[0] = v97;
    sub_10005CC34((uint64_t)v96, v93, isUniquelyReferenced_nonNull_native);
    *(void *)(v16 + 432) = v149[0];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v93, v94);

    sub_100018C68(v95, type metadata accessor for OwnedBeaconGroup);
LABEL_46:
    Swift::String v45 = v119;
    uint64_t v39 = v121;
    unint64_t v46 = (uint64_t *)(v16 + 432);
    goto LABEL_9;
  }

    __break(1u);
    goto LABEL_67;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v240 + 56))(v37, 1LL, 1LL, v38);
  swift_bridgeObjectRetain(v248);
  int64_t v35 = v37;
LABEL_21:
  uint64_t v84 = v246;
  sub_100015794((uint64_t)v35, (uint64_t *)&unk_10099D720);
  unint64_t v85 = type metadata accessor for LocationFetcher(0LL);
  uint64_t v87 = v244;
  uint64_t v86 = v245;
  uint64_t v88 = v241;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v244 + 16))(v241, v247 + *(int *)(v85 + 32), v245);
  os_log_type_t v89 = sub_100013044((uint64_t)v84, (uint64_t)&v250);
  uint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
  uint64_t v91 = static os_log_type_t.error.getter(v90);
  if (os_log_type_enabled(v90, v91))
  {
    uint64_t v92 = swift_slowAlloc(22LL, -1LL);
    NSString v247 = swift_slowAlloc(32LL, -1LL);
    *(void *)&v249[0] = v247;
    *(_DWORD *)uint64_t v92 = 141558275;
    NSString v263 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264, v92 + 4, v92 + 12);
    *(_WORD *)(v92 + 12) = 2081;
    v246 = (os_log_s *)(v92 + 14);
    unint64_t v93 = *((void *)&v251 + 1);
    uint64_t v94 = v252;
    sub_100012ED8(&v250, *((uint64_t *)&v251 + 1));
    uint64_t v95 = v234;
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v94 + 8) + 8LL) + 32LL))(v93);
    uint64_t v96 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v97 = v236;
    uint64_t v98 = dispatch thunk of CustomStringConvertible.description.getter(v236, v96);
    uint64_t v100 = v99;
    (*(void (**)(char *, uint64_t))(v233 + 8))(v95, v97);
    NSString v263 = sub_1003F11D4(v98, v100, (uint64_t *)v249);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264, v246, v92 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v250);
    _os_log_impl( (void *)&_mh_execute_header,  v90,  v91,  "Keys with invalid date interval for beacon %{private,mask.hash}s.",  (uint8_t *)v92,  0x16u);
    uint64_t v101 = v247;
    swift_arrayDestroy(v247, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v101, -1LL, -1LL);
    swift_slowDealloc(v92, -1LL, -1LL);

    (*(void (**)(unint64_t, uint64_t))(v244 + 8))(v241, v245);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v250);

    (*(void (**)(unint64_t, uint64_t))(v87 + 8))(v88, v86);
  }

  uint64_t v102 = sub_100246328();
  id v103 = swift_allocError(&type metadata for LocationFetcher.LocationFetcherError, v102, 0LL, 0LL);
  *uint64_t v104 = 2;
  swift_willThrow(v103);
  swift_bridgeObjectRelease();
}

  swift_release();
  a1 = v127;
LABEL_67:
  uint64_t v97 = (uint64_t)v128;
  objc_autoreleasePoolPop(v143);
  if (a1[v135] == 34) {
    sub_1000F1230((uint64_t)v92, (uint64_t)v23);
  }
  else {
    sub_1000F0A44((uint64_t)v92, (uint64_t)v23);
  }
  swift_bridgeObjectRelease();
  sub_10001581C((uint64_t)v23, v97, (uint64_t *)&unk_1009A5990);
  uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))v136;
  if (((unsigned int (*)(uint64_t, uint64_t, unint64_t))v136)(v97, 1LL, v2) == 1)
  {
    sub_100015794(v97, (uint64_t *)&unk_1009A5990);
    id v99 = 0.0;
  }

  else
  {
    uint64_t v100 = v124;
    uint64_t v101 = sub_10002218C(v97, v124, type metadata accessor for BeaconObservation);
    id v99 = fabs(Date.timeIntervalSinceNow.getter(v101));
    uint64_t v102 = v98;
    id v103 = v123;
    sub_10001581C(v141, v123, (uint64_t *)&unk_1009A5990);
    LODWORD(v102) = v102(v103, 1LL, v2);
    sub_100015794(v103, (uint64_t *)&unk_1009A5990);
    if ((_DWORD)v102 == 1 || v99 < v82)
    {
      uint64_t v104 = v141;
      sub_100015794(v141, (uint64_t *)&unk_1009A5990);
      sub_10002218C(v100, v104, type metadata accessor for BeaconObservation);
      ((void (*)(uint64_t, void, uint64_t, unint64_t))v138)(v104, 0LL, 1LL, v2);
    }

    else
    {
      sub_100303000(v100);
    }
  }

  os_log_type_t v105 = *(void *)(v130 + 16);
  sub_100504C28((uint64_t)a1, (uint64_t)&v147);
  if (v148)
  {
    sub_100012EC0(&v147, (uint64_t)&v149);
    uint64_t v106 = v150;
    id v107 = v151;
    uint64_t v108 = sub_100012ED8(&v149, v150);
    uint64_t v109 = sub_10054A858((uint64_t)v108, v105, v106, v107);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v149);
  }

  else
  {
    sub_100015794((uint64_t)&v147, (uint64_t *)&unk_1009A9C40);
    uint64_t v109 = 0LL;
  }

  unint64_t v110 = v129;
  sub_10001DC4C((uint64_t)a1, v129, type metadata accessor for BeaconObservation);
  ((void (*)(uint64_t, void, uint64_t, unint64_t))v138)(v110, 0LL, 1LL, v2);
  unint64_t v111 = sub_100724B58(v110);
  uint64_t v113 = v112;
  sub_100015794(v110, (uint64_t *)&unk_1009A5990);
  unint64_t v114 = v141;
  uint64_t v115 = sub_100724B58(v141);
  uint64_t v117 = v116;
  type metadata accessor for Transaction(0LL);
  uint64_t v118 = swift_allocObject(&unk_1009501C0, 80LL, 7LL);
  *(void *)(v118 + swift_weakDestroy(v0 + 16) = v111;
  *(void *)(v118 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v113;
  *(void *)(v118 + 32) = v115;
  *(void *)(v118 + 40) = v117;
  *(double *)(v118 + 48) = v59;
  *(double *)(v118 + 56) = v99;
  *(double *)(v118 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v78;
  *(void *)(v118 + 72) = v109;
  uint64_t v119 = v109;
  static Transaction.asyncTask(name:block:)("ConnectionEventAnalytics", 24LL, 2LL, &unk_1009A8E18, v118);

  swift_release();
  sub_100015794((uint64_t)v140, (uint64_t *)&unk_1009A5990);
  sub_100015794(v137, (uint64_t *)&unk_1009A5990);
  sub_100015794((uint64_t)v134, (uint64_t *)&unk_1009A5990);
  return sub_100015794(v114, (uint64_t *)&unk_1009A5990);
}

      swift_bridgeObjectRelease();
LABEL_67:
      os_log_type_t v105 = *(void *)(v0 + 184);
      uint64_t v104 = *(void *)(v0 + 192);
      uint64_t v106 = v143;
      sub_1006E5460(v143);
      id v107 = *(double *)(v104 + *(int *)(v138 + 32));
      sub_100018C68(v104, type metadata accessor for LocationFetchConfiguration);
      sub_1006E5460(v140);
      uint64_t v108 = *(double *)(v105 + *(int *)(v138 + 32));
      sub_100018C68(v105, type metadata accessor for LocationFetchConfiguration);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v108 < v107) {
        uint64_t v106 = v140;
      }
      uint64_t v143 = v106;
      uint64_t v5 = sub_1002FE60C((uint64_t)v161);
      *(void *)(v0 + 280) = v5;
      swift_bridgeObjectRelease();
      uint64_t v7 = sub_1002FEF60(v158);
      *(void *)(v0 + 288) = v7;
      swift_bridgeObjectRelease();
      uint64_t v146 = sub_1002FEE8C((uint64_t)v83);
      *(void *)(v0 + 296) = v146;
      swift_bridgeObjectRelease();
      uint64_t v109 = [v135 mainBundle];
      unint64_t v110 = [v109 bundleIdentifier];

      if (v110)
      {
        unint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v110);
        int64_t v20 = v19;
      }

      else
      {
        unint64_t v18 = 0LL;
        int64_t v20 = 0LL;
      }

      uint64_t v16 = v159;
      *(void *)(v0 + 30_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v20;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v17 = v142 + 1;
      if (v142 + 1 == v137)
      {
        unint64_t v111 = *(void *)(v0 + 192);
        uint64_t v112 = v20;
        uint64_t v113 = *(void *)(v0 + 160);
        __int128 v160 = *(void *)(v0 + 144);
        __int128 v162 = *(void *)(v0 + 136);
        swift_bridgeObjectRelease();
        *(_BYTE *)(v0 + swift_weakDestroy(v0 + 16) = v143;
        *(void *)(v0 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v5;
        *(void *)(v0 + 32) = _swiftEmptyArrayStorage;
        *(void *)(v0 + 40) = v7;
        *(void *)(v0 + 48) = v146;
        *(void *)(v0 + 56) = v18;
        *(void *)(v0 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v112;
        *(_BYTE *)(v0 + 72) = v134;
        *(_BYTE *)(v0 + 73) = v133;
        *(void *)(v0 + 88) = 0LL;
        *(void *)(v0 + 96) = 0LL;
        *(void *)(v0 + 80) = v141;
        *(_BYTE *)(v0 + 10_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 1;
        static Date.trustedNow.getter(v113);
        sub_1006E5460(v143);
        unint64_t v114 = *(double *)(v111 + *(int *)(v138 + 32));
        uint64_t v115 = sub_100018C68(v111, type metadata accessor for LocationFetchConfiguration);
        Date.addingTimeInterval(_:)(v115, v114);
        uint64_t v116 = *(void (**)(uint64_t, uint64_t))(v160 + 8);
        *(void *)(v0 + 312) = v116;
        v116(v113, v162);
        uint64_t v117 = (void *)swift_task_alloc(dword_1009AA354);
        *(void *)(v0 + 320) = v117;
        void *v117 = v0;
        v117[1] = sub_10035BF24;
        return sub_10035C174(*(void *)(v0 + 168), v0 + 16);
      }
    }
  }

  swift_bridgeObjectRelease();
  if (qword_10099B328 != -1) {
    swift_once(&qword_10099B328, sub_10035A0D4);
  }
  uint64_t v119 = type metadata accessor for Logger(0LL);
  uint64_t v120 = sub_10000A720(v119, (uint64_t)qword_100A2A730);
  uint64_t v121 = (os_log_s *)Logger.logObject.getter(v120);
  unint64_t v122 = static os_log_type_t.default.getter(v121);
  if (os_log_type_enabled(v121, v122))
  {
    uint64_t v123 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v123 = 0;
    _os_log_impl((void *)&_mh_execute_header, v121, v122, "Not scheduling next fetch. No subscriptions.", v123, 2u);
    swift_slowDealloc(v123, -1LL, -1LL);
  }

  uint64_t v124 = *(void *)(v0 + 240);
  unint64_t v126 = *(void *)(v0 + 224);
  uint64_t v125 = *(void *)(v0 + 232);
  uint64_t v127 = *(void *)(v0 + 216);
  uint64_t v129 = *(void *)(v0 + 184);
  uint64_t v128 = *(void *)(v0 + 192);
  unint64_t v131 = *(void *)(v0 + 160);
  unint64_t v130 = *(void *)(v0 + 168);
  unint64_t v132 = *(void *)(v0 + 152);
  swift_task_dealloc(*(void *)(v0 + 248));
  swift_task_dealloc(v124);
  swift_task_dealloc(v125);
  swift_task_dealloc(v126);
  swift_task_dealloc(v127);
  swift_task_dealloc(v128);
  swift_task_dealloc(v129);
  swift_task_dealloc(v130);
  swift_task_dealloc(v131);
  swift_task_dealloc(v132);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

    sub_1003CB394(&v59, &v58, (uint64_t *)&v57, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
    return 1LL;
  }

  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
  }
  unint64_t v34 = v2[2];
  unint64_t v33 = v2[3];
  if (v34 >= v33 >> 1) {
    uint64_t v2 = sub_1004C4120((void *)(v33 > 1), v34 + 1, 1, v2);
  }
  v2[2] = v34 + 1;
  int64_t v35 = &v2[2 * v34];
  v35[4] = 0xD000000000000010LL;
  v35[5] = 0x80000001008632C0LL;
  if ((a1 & 0x800) == 0)
  {
LABEL_32:
    if ((a1 & 0x1000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_76;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

LABEL_57:
    v69(v16, 1LL, 1LL, v3);
    unint64_t v54 = 0LL;
    uint64_t v55 = v68;
LABEL_58:
    int64_t v25 = v77 + 1;
    uint64_t v81 = v55;
    unint64_t v82 = v76;
    unint64_t v83 = v75;
    uint64_t v84 = v62;
    unint64_t v85 = v54;
    uint64_t v49 = v80;
    sub_10001581C((uint64_t)v16, v80, &qword_10099D8A0);
    unsigned int v56 = v74(v49, 1LL, v3);
    Swift::String v45 = v79;
    uint64_t v51 = v71;
    if (v56 == 1) {
      goto LABEL_50;
    }
  }

  __break(1u);
  return result;
}

      unint64_t v93 = v108;
      uint64_t v94 = static Date.trustedNow.getter(v108);
      Date.epoch.getter(v94);
      (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v93, v73);
      goto LABEL_58;
    }

    unint64_t v72 = swift_bridgeObjectRelease();
    uint64_t v67 = (os_log_s *)Logger.logObject.getter(v72);
    uint64_t v68 = static os_log_type_t.error.getter(v67);
    if (os_log_type_enabled(v67, v68))
    {
      uint64_t v69 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v69 = 0;
      int64_t v70 = "No APS token. Not proceeding with PushAck";
      goto LABEL_16;
    }
  }

  else
  {
    uint64_t v67 = (os_log_s *)Logger.logObject.getter(v41);
    uint64_t v68 = static os_log_type_t.error.getter(v67);
    if (os_log_type_enabled(v67, v68))
    {
      uint64_t v69 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v69 = 0;
      int64_t v70 = "Unable to get device identifier for server PushAck";
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v67, v68, v70, v69, 2u);
      swift_slowDealloc(v69, -1LL, -1LL);
    }
  }

  swift_release();
  swift_release();
  return sub_100018C68((uint64_t)v19, type metadata accessor for SecureLocationsPushAckEndpoint);
}

    __break(1u);
    goto LABEL_58;
  }

uint64_t sub_100184B3C(uint64_t a1)
{
  return sub_10018696C(a1, (uint64_t (*)(void))sub_1004C4E6C, type metadata accessor for ShareRecord);
}

uint64_t sub_100184B50(uint64_t a1)
{
  return sub_10018696C( a1,  (uint64_t (*)(void))sub_1004C44BC,  (uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100184B64(uint64_t a1)
{
  return sub_10018696C(a1, (uint64_t (*)(void))sub_1004C5700, type metadata accessor for BeaconEstimatedLocation);
}

uint64_t sub_100184B78(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }

  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_1004C5EF8(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  unint64_t v10 = (unint64_t)&v3[4 * v9 + 4];
  if (a1 + 32 < v10 + 32 * v8 && v10 < a1 + 32 + 32 * v8) {
    goto LABEL_24;
  }
  sub_100004AEC(&qword_1009B1490);
  swift_arrayInitWithCopy(v10);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }

uint64_t sub_100184CE4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_1004C4FBC(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

uint64_t sub_100184E34(uint64_t a1)
{
  return sub_100186AF8( a1,  (uint64_t (*)(void))sub_1004C6154,  (uint64_t (*)(void))&type metadata accessor for URLQueryItem);
}

uint64_t sub_100184E48( uint64_t a1, uint64_t a2, void (**a3)(char *, uint64_t, uint64_t, uint64_t), unint64_t a4)
{
  return sub_1001863F0( a1,  a2,  a3,  a4,  type metadata accessor for OwnedDeviceKeyRecord,  &qword_1009A4780,  (uint64_t (*)(void))sub_1004C6168,  (uint64_t (*)(_BYTE *, void (**)(char *, uint64_t, uint64_t, uint64_t), char *, uint64_t, void (**)(char *, uint64_t, uint64_t, uint64_t), unint64_t))sub_1007C11E8);
}

uint64_t sub_100184E6C()
{
  uint64_t v2 = v0;
  uint64_t v55 = type metadata accessor for OwnedDeviceKeyRecord(0LL);
  uint64_t v3 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v53 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC(&qword_1009A4780);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v54 = (uint64_t)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v48 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v56 = (uint64_t)&v48 - v12;
  uint64_t inited = dispatch thunk of _AnySequenceBox._underestimatedCount.getter(v11);
  unint64_t v14 = *v0;
  int64_t v15 = *(void *)(*v0 + 16);
  int64_t v16 = v15 + inited;
  if (__OFADD__(v15, inited))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v17 = inited;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  *uint64_t v2 = v14;
  if (!isUniquelyReferenced_nonNull_native || (int64_t v19 = *(void *)(v14 + 24) >> 1, v19 < v16))
  {
    if (v15 <= v16) {
      int64_t v20 = v16;
    }
    else {
      int64_t v20 = v15;
    }
    unint64_t v14 = sub_1004C6168(isUniquelyReferenced_nonNull_native, v20, 1, v14);
    *uint64_t v2 = v14;
    int64_t v19 = *(void *)(v14 + 24) >> 1;
  }

  uint64_t v21 = *(void *)(v14 + 16);
  uint64_t v1 = *(void *)(v3 + 72);
  int64_t v22 = v19 - v21;
  unint64_t v52 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v23 = dispatch thunk of _AnySequenceBox.__copyContents(initializing:)(v14 + v52 + v1 * v21, v19 - v21);
  uint64_t v25 = v24;
  swift_release();
  uint64_t v26 = sub_100004AEC(&qword_1009A4788);
  uint64_t inited = swift_initStackObject(v26, v57);
  *(void *)(inited + swift_weakDestroy(v0 + 16) = v23;
  if (v25 < v17) {
    goto LABEL_15;
  }
  if (v25 >= 1)
  {
    uint64_t v27 = *(void *)(v14 + 16);
    BOOL v28 = __OFADD__(v27, v25);
    uint64_t v29 = v27 + v25;
    if (v28)
    {
      __break(1u);
LABEL_19:
      unint64_t v33 = type metadata accessor for OwnedDeviceKeyRecord;
      uint64_t v49 = v25;
      do
      {
        unint64_t v34 = v33;
        sub_100015794(v25, &qword_1009A4780);
        uint64_t v35 = *v2;
        unint64_t v36 = *(void *)(*v2 + 24);
        int64_t v37 = v36 >> 1;
        if ((uint64_t)(v36 >> 1) < v22 + 1)
        {
          uint64_t v35 = sub_1004C6168(v36 > 1, v22 + 1, 1, *v2);
          *uint64_t v2 = v35;
          int64_t v37 = *(void *)(v35 + 24) >> 1;
        }

        uint64_t v38 = v54;
        sub_10001581C(v56, v54, &qword_1009A4780);
        if (v51(v38, 1LL, v55) == 1)
        {
          uint64_t v39 = v34;
LABEL_32:
          sub_100015794(v38, &qword_1009A4780);
          int64_t v43 = v22;
          unint64_t v33 = v39;
        }

        else
        {
          if (v22 <= v37) {
            int64_t v40 = v37;
          }
          else {
            int64_t v40 = v22;
          }
          int64_t v50 = v40;
          uint64_t v41 = (uint64_t)v53;
          uint64_t v42 = v35 + v52 + v1 * v22;
          uint64_t v39 = v34;
          while (1)
          {
            sub_10002218C(v38, v41, v39);
            int64_t v43 = v50;
            unint64_t v33 = v39;
            if (v50 == v22) {
              break;
            }
            int64_t v44 = v22;
            uint64_t v45 = v56;
            sub_100015794(v56, &qword_1009A4780);
            uint64_t v46 = sub_10002218C(v41, v42, v39);
            dispatch thunk of _AnyIteratorBoxBase.next()(v46);
            uint64_t v47 = v45;
            int64_t v22 = v44 + 1;
            sub_10001581C(v47, v38, &qword_1009A4780);
            v42 += v1;
            if (v51(v38, 1LL, v55) == 1) {
              goto LABEL_32;
            }
          }

          sub_100018C68(v41, v39);
          int64_t v22 = v43;
        }

        *(void *)(*v2 + swift_weakDestroy(v0 + 16) = v43;
        uint64_t v25 = v49;
        sub_10001581C(v56, v49, &qword_1009A4780);
      }

      while (v51(v25, 1LL, v55) != 1);
      goto LABEL_17;
    }

    *(void *)(v14 + swift_weakDestroy(v0 + 16) = v29;
  }

  if (v25 != v22) {
    return swift_release();
  }
LABEL_16:
  int64_t v22 = *(void *)(v14 + 16);
  uint64_t v31 = v56;
  dispatch thunk of _AnyIteratorBoxBase.next()(inited);
  uint64_t v32 = v31;
  uint64_t v25 = (uint64_t)v10;
  sub_10001581C(v32, (uint64_t)v10, &qword_1009A4780);
  uint64_t v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
LABEL_17:
  sub_100015794(v56, &qword_1009A4780);
  swift_release();
  return sub_100015794(v25, &qword_1009A4780);
}

uint64_t sub_100185294(uint64_t a1)
{
  return sub_100185464(a1, (uint64_t (*)(uint64_t, void, uint64_t))sub_1001880B0);
}

uint64_t sub_1001852A0(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v16 = a1;
    }
    else {
      uint64_t v16 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (v4 < 0) {
    uint64_t v17 = *v1;
  }
  else {
    uint64_t v17 = v4 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*v1);
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease();
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_29;
  }
LABEL_5:
  uint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *uint64_t v1 = v4;
  uint64_t v5 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000LL) == 0 && (v4 & 0x4000000000000000LL) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8LL;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1LL;
  }

  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain(v4);
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1LL, v4);
    swift_bridgeObjectRelease();
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8LL;
LABEL_15:
    uint64_t result = sub_1001882C4(v8 + 8LL * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0) {
      uint64_t v18 = v4;
    }
    else {
      uint64_t v18 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v4);
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease();
  }

  if (v11 < 1) {
    goto LABEL_19;
  }
  uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  BOOL v13 = __OFADD__(v12, v11);
  uint64_t v14 = v12 + v11;
  if (!v13)
  {
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10) = v14;
LABEL_19:
    uint64_t v15 = swift_bridgeObjectRelease();
    return specialized Array._endMutation()(v15);
  }

  __break(1u);
  return result;
}

uint64_t sub_100185458(uint64_t a1)
{
  return sub_100185464(a1, (uint64_t (*)(uint64_t, void, uint64_t))sub_1001884D8);
}

uint64_t sub_100185464(uint64_t a1, uint64_t (*a2)(uint64_t, void, uint64_t))
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v18 = a1;
    }
    else {
      uint64_t v18 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v6 = *v2;
  if (!((unint64_t)*v2 >> 62))
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v8 = v7 + v5;
    if (!__OFADD__(v7, v5)) {
      goto LABEL_5;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (v6 < 0) {
    uint64_t v19 = *v2;
  }
  else {
    uint64_t v19 = v6 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*v2);
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease(v6);
  uint64_t v8 = v7 + v5;
  if (__OFADD__(v7, v5)) {
    goto LABEL_29;
  }
LABEL_5:
  uint64_t v6 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *uint64_t v2 = v6;
  uint64_t v7 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000LL) == 0 && (v6 & 0x4000000000000000LL) == 0)
  {
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8LL;
    if (v8 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v7 = 1LL;
  }

  uint64_t v11 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    if (v11 <= v8) {
      uint64_t v11 = v8;
    }
    swift_bridgeObjectRetain(v6);
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v11, 1LL, v6);
    swift_bridgeObjectRelease(*v2);
    *uint64_t v2 = v6;
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8LL;
LABEL_15:
    uint64_t result = a2(v10 + 8LL * *(void *)(v10 + 16) + 32, (*(void *)(v10 + 24) >> 1) - *(void *)(v10 + 16), a1);
    if (v13 >= v5) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    if (v6 < 0) {
      uint64_t v20 = v6;
    }
    else {
      uint64_t v20 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v6);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(v6);
  }

  if (v13 < 1) {
    goto LABEL_19;
  }
  uint64_t v14 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  BOOL v15 = __OFADD__(v14, v13);
  uint64_t v16 = v14 + v13;
  if (!v15)
  {
    *(void *)((*v2 & 0xFFFFFFFFFFFFFF8LL) + 0x10) = v16;
LABEL_19:
    uint64_t v17 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v17);
  }

  __break(1u);
  return result;
}

uint64_t sub_100185620(uint64_t a1)
{
  return sub_100186AF8(a1, (uint64_t (*)(void))sub_1004C61C4, type metadata accessor for KeySyncMetadataDisplay);
}

uint64_t sub_100185634(uint64_t a1)
{
  return sub_10018696C(a1, (uint64_t (*)(void))sub_1004C6004, type metadata accessor for SecureLocation);
}

void sub_100185648(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)*v1;
  int64_t v5 = *(void *)(*v1 + 16LL);
  int64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (int64_t v9 = v4[3] >> 1, v9 < v6))
  {
    if (v5 <= v6) {
      int64_t v10 = v5 + v3;
    }
    else {
      int64_t v10 = v5;
    }
    uint64_t v4 = sub_1004C62F8(isUniquelyReferenced_nonNull_native, v10, 1, v4);
    int64_t v9 = v4[3] >> 1;
  }

  uint64_t v11 = v4[2];
  uint64_t v12 = v9 - v11;
  uint64_t v13 = sub_100301504((uint64_t)v36, &v4[v11 + 4], v9 - v11, a1);
  if (v13 < v3) {
    goto LABEL_16;
  }
  if (v13)
  {
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, v13);
    uint64_t v17 = v15 + v13;
    if (v16)
    {
      __break(1u);
      goto LABEL_50;
    }

    v4[2] = v17;
  }

  if (v13 != v12)
  {
    uint64_t v18 = v36[0];
LABEL_14:
    sub_1000A6F30(v18);
    *uint64_t v1 = v4;
    return;
  }

LABEL_53:
  unint64_t v19 = (v32 - 1) & v32;
  unint64_t v20 = __clz(__rbit64(v32)) + (v33 << 6);
  int64_t v6 = v33;
LABEL_19:
  uint64_t v22 = *(void *)(*(void *)(v3 + 56) + 8 * v20);
  swift_bridgeObjectRetain(v22);
  while (1)
  {
    unint64_t v23 = v4[3];
    int64_t v24 = v23 >> 1;
    if (v2 < v24) {
      goto LABEL_24;
    }
LABEL_21:
    v4[2] = v2;
  }

  uint64_t v4 = sub_1004C62F8((void *)(v23 > 1), v2 + 1, 1, v4);
  int64_t v24 = v4[3] >> 1;
  if (v2 >= v24) {
    goto LABEL_21;
  }
  while (1)
  {
LABEL_24:
    v4[v2++ + 4] = v22;
    if (v19)
    {
      unint64_t v25 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v26 = v25 | (v6 << 6);
      goto LABEL_42;
    }

    int64_t v27 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      break;
    }
    if (v27 >= v21) {
      goto LABEL_46;
    }
    unint64_t v28 = *(void *)(v35 + 8 * v27);
    int64_t v29 = v6 + 1;
    if (!v28)
    {
      int64_t v29 = v6 + 2;
      if (v6 + 2 >= v21) {
        goto LABEL_46;
      }
      unint64_t v28 = *(void *)(v35 + 8 * v29);
      if (!v28)
      {
        int64_t v29 = v6 + 3;
        if (v6 + 3 >= v21) {
          goto LABEL_46;
        }
        unint64_t v28 = *(void *)(v35 + 8 * v29);
        if (!v28)
        {
          int64_t v29 = v6 + 4;
          if (v6 + 4 >= v21) {
            goto LABEL_46;
          }
          unint64_t v28 = *(void *)(v35 + 8 * v29);
          if (!v28)
          {
            int64_t v29 = v6 + 5;
            if (v6 + 5 >= v21) {
              goto LABEL_46;
            }
            unint64_t v28 = *(void *)(v35 + 8 * v29);
            if (!v28)
            {
              int64_t v30 = v6 + 6;
              while (v21 != v30)
              {
                unint64_t v28 = *(void *)(v35 + 8 * v30++);
                if (v28)
                {
                  int64_t v29 = v30 - 1;
                  goto LABEL_41;
                }
              }

      __break(1u);
      goto LABEL_54;
    }

    if (v48)
    {
      int64_t v66 = v2;
      int64_t v50 = swift_slowAlloc(22LL, -1LL);
      unint64_t v61 = swift_slowAlloc(32LL, -1LL);
      uint64_t v68 = v61;
      *(_DWORD *)int64_t v50 = 141558275;
      *(void *)unint64_t v23 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v50 + 4, v50 + 12);
      *(_WORD *)(v50 + 12) = 2081;
      unint64_t type = v47;
      uint64_t v51 = type metadata accessor for UUID(0LL);
      unint64_t v52 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter(v51, v52);
      *(void *)unint64_t v23 = sub_1003F11D4(v53, v54, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v50 + 14, v50 + 22);
      swift_bridgeObjectRelease();
      swift_release_n(v49, 2LL);
      _os_log_impl( (void *)&_mh_execute_header,  v46,  type,  "RSSI decrease is enough to switch to the lower level. Beacon: %{private,mask.hash}s.",  (uint8_t *)v50,  0x16u);
      swift_arrayDestroy(v61, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1LL, -1LL);
      uint64_t v55 = v50;
      int64_t v2 = v66;
      swift_slowDealloc(v55, -1LL, -1LL);
    }

    else
    {
      swift_release_n(*v1, 2LL);
    }

LABEL_46:
    *(void *)(v37 + v41) = v40;
    goto LABEL_47;
  }

            unint64_t v93 = swift_isUniquelyReferenced_nonNull_native(v83);
            v164[0] = v83;
            sub_1000CC3D8(v87, v90, v93);
            unint64_t v83 = v164[0];
            swift_bridgeObjectRelease();
            if (v85 == v84) {
              break;
            }
            uint64_t v86 = (char *)(v83 + 7);
          }
        }
      }

      swift_bridgeObjectRelease();
      uint64_t v94 = *(void *)(v147 + 16);
      if (!v94) {
        goto LABEL_67;
      }
      swift_bridgeObjectRetain(v147);
      uint64_t v95 = 0LL;
      for (k = (char *)(v83 + 7); ; k = (char *)(v83 + 7))
      {
        while (1)
        {
          uint64_t v97 = *(unsigned __int8 *)(v147 + 32 + v95++);
          Hasher.init(_seed:)(v164, v83[5]);
          Hasher._combine(_:)(v97);
          uint64_t v98 = Hasher._finalize()();
          id v99 = -1LL << *((_BYTE *)v83 + 32);
          uint64_t v100 = v98 & ~v99;
          if (((*(void *)&k[(v100 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v100) & 1) == 0) {
            goto LABEL_64;
          }
          uint64_t v101 = v83[6];
LABEL_57:
          if (v95 == v94) {
            goto LABEL_66;
          }
        }

        uint64_t v102 = ~v99;
        while (1)
        {
          uint64_t v100 = (v100 + 1) & v102;
          if (((*(void *)&k[(v100 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v100) & 1) == 0) {
            break;
          }
        }

  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
  return result;
}

    if (v2 < 0) {
      int64_t v29 = v2;
    }
    else {
      int64_t v29 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
    int64_t v30 = _CocoaArrayWrapper.endIndex.getter(v29);
    BOOL v16 = swift_bridgeObjectRelease();
    uint64_t v22 = v30 + v6;
    if (!__OFADD__(v30, v6)) {
      goto LABEL_27;
    }
LABEL_58:
    __break(1u);
  }

  int64_t v31 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v31,  1046LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_1001859D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

  if (v4 <= v5) {
    int64_t v23 = v4 + v2;
  }
  else {
    int64_t v23 = v4;
  }
  unint64_t v3 = sub_1004C6320(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

uint64_t sub_100185B3C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = sub_1004C6370(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

uint64_t sub_100185C94(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = sub_1004C65C4(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

uint64_t sub_100185DFC(uint64_t a1)
{
  return sub_100186AF8(a1, (uint64_t (*)(void))sub_1004C6788, type metadata accessor for ManagedCBPeripheralBeaconInfo);
}

uint64_t sub_100185E10(uint64_t a1)
{
  return sub_10018696C(a1, (uint64_t (*)(void))sub_1004C4E80, type metadata accessor for SafeLocation);
}

uint64_t sub_100185E24(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v59 = a2;
  uint64_t v9 = type metadata accessor for Bit(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v57 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009A4880);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v55 = (uint64_t)&v49 - v15;
  __chkstk_darwin(v14);
  unint64_t v18 = (char *)&v49 - v17;
  unint64_t v56 = a4;
  unint64_t v19 = a4 >> 1;
  BOOL v20 = __OFSUB__(a4 >> 1, a3);
  uint64_t v21 = (a4 >> 1) - a3;
  if (v20)
  {
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v60 = a1;
  a1 = *v4;
  int64_t v22 = *(void *)(*v4 + 16);
  uint64_t v5 = v22 + v21;
  if (__OFADD__(v22, v21))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  uint64_t v58 = v16;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
  uint64_t *v4 = a1;
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v24 = *(void *)(a1 + 24) >> 1, v24 < v5))
  {
    if (v22 <= v5) {
      int64_t v25 = v22 + v21;
    }
    else {
      int64_t v25 = v22;
    }
    a1 = sub_1004C67B0(isUniquelyReferenced_nonNull_native, v25, 1, a1);
    uint64_t *v4 = a1;
    uint64_t v24 = *(void *)(a1 + 24) >> 1;
  }

  uint64_t v26 = *(void *)(a1 + 16);
  uint64_t v27 = v24 - v26;
  if (v19 == a3)
  {
    if (v21 <= 0)
    {
      uint64_t v21 = 0LL;
      uint64_t v5 = a3;
      goto LABEL_23;
    }

uint64_t sub_1001863B8(uint64_t a1)
{
  return sub_10018696C( a1,  (uint64_t (*)(void))sub_1004C67B0,  (uint64_t (*)(void))&type metadata accessor for Bit);
}

uint64_t sub_1001863CC( uint64_t a1, uint64_t a2, void (**a3)(char *, uint64_t, uint64_t, uint64_t), unint64_t a4)
{
  return sub_1001863F0( a1,  a2,  a3,  a4,  type metadata accessor for OwnedBeaconRecord,  (uint64_t *)&unk_1009A9C30,  (uint64_t (*)(void))sub_1004C46DC,  (uint64_t (*)(_BYTE *, void (**)(char *, uint64_t, uint64_t, uint64_t), char *, uint64_t, void (**)(char *, uint64_t, uint64_t, uint64_t), unint64_t))sub_1007C1388);
}

uint64_t sub_1001863F0( uint64_t a1, uint64_t a2, void (**a3)(char *, uint64_t, uint64_t, uint64_t), unint64_t a4, uint64_t (*a5)(void), uint64_t *a6, uint64_t (*a7)(void), uint64_t (*a8)(_BYTE *, void (**)(char *, uint64_t, uint64_t, uint64_t), char *, uint64_t, void (**)(char *, uint64_t, uint64_t, uint64_t), unint64_t))
{
  uint64_t v67 = (uint64_t (*)(_BYTE *, void (**)(char *, uint64_t, uint64_t, uint64_t), char *, uint64_t, void (**)(char *, uint64_t, uint64_t, uint64_t), unint64_t))a8;
  uint64_t v68 = a5;
  unint64_t v72 = a7;
  uint64_t v73 = a2;
  uint64_t v13 = a5(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v60 - v15;
  uint64_t v17 = sub_100004AEC(a6);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v70 = (uint64_t)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v65 = (uint64_t)&v60 - v21;
  __chkstk_darwin(v20);
  int64_t v22 = &v60;
  uint64_t v24 = (char *)&v60 - v23;
  unint64_t v66 = a4;
  int64_t v25 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(a4 >> 1);
  BOOL v26 = __OFSUB__(a4 >> 1, a3);
  uint64_t v27 = (a4 >> 1) - (void)a3;
  if (v26)
  {
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v69 = v16;
  uint64_t v74 = (char *)a1;
  uint64_t v71 = a6;
  a1 = *v8;
  uint64_t v28 = *(void *)(*v8 + 16);
  uint64_t v16 = (char *)(v28 + v27);
  if (__OFADD__(v28, v27))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
  *uint64_t v8 = a1;
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v30 = *(void *)(a1 + 24) >> 1, v30 < (uint64_t)v16))
  {
    a1 = v72();
    *uint64_t v8 = a1;
    uint64_t v30 = *(void *)(a1 + 24) >> 1;
  }

  uint64_t v16 = v74;
  int64_t v22 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(a1 + 16);
  uint64_t v31 = v30 - (void)v22;
  if (v25 != a3)
  {
    if (v31 < v27)
    {
      __break(1u);
    }

    else
    {
      if (v27 < 0)
      {
LABEL_49:
        uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
        goto LABEL_50;
      }

      uint64_t v32 = *(void *)(v14 + 72);
      unint64_t v33 = a1
      unint64_t v34 = v73 + v32 * (void)a3;
      if (v34 < v33 + v32 * v27 && v33 < v34 + v32 * v27)
      {
        uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_50:
        __break(1u);
        return result;
      }

      swift_arrayInitWithCopy(v33);
      if (!v27)
      {
LABEL_19:
        int64_t v22 = v25;
LABEL_20:
        if (v27 != v31) {
          return swift_unknownObjectRelease(v16);
        }
        goto LABEL_25;
      }

      uint64_t v36 = *(void *)(a1 + 16);
      BOOL v26 = __OFADD__(v36, v27);
      uint64_t v37 = v36 + v27;
      if (!v26)
      {
        *(void *)(a1 + swift_weakDestroy(v0 + 16) = v37;
        goto LABEL_19;
      }
    }

    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }

  if (v27 <= 0)
  {
    uint64_t v27 = 0LL;
    int64_t v22 = a3;
    goto LABEL_20;
  }

uint64_t sub_100186958(uint64_t a1)
{
  return sub_10018696C(a1, (uint64_t (*)(void))sub_1004C695C, type metadata accessor for KeyGenerationBeaconInfo);
}

uint64_t sub_10018696C(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (swift_isUniquelyReferenced_nonNull_native(*v3) && v6 + v4 <= *(void *)(v5 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

  uint64_t v5 = a2();
  if (!*(void *)(a1 + 16))
  {
LABEL_15:
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }

uint64_t sub_100186AE4(uint64_t a1)
{
  return sub_100186AF8( a1,  (uint64_t (*)(void))sub_1004C6BD0,  type metadata accessor for LocationOfInterestProvider.RemappingOperation);
}

uint64_t sub_100186AF8(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
    goto LABEL_18;
  }

  if (swift_isUniquelyReferenced_nonNull_native(*v3)
    && (int64_t)(v6 + v4) <= *(void *)(v5 + 24) >> 1)
  {
    unint64_t v10 = *(void *)(a1 + 16);
    if (v10) {
      goto LABEL_5;
    }
LABEL_15:
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }

  uint64_t v5 = a2();
  unint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    goto LABEL_15;
  }
LABEL_5:
  uint64_t v11 = *(void *)(v5 + 16);
  uint64_t v12 = (*(void *)(v5 + 24) >> 1) - v11;
  uint64_t v13 = a3(0LL);
  if (v12 < (uint64_t)v10)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v14 = *(void *)(v13 - 8);
  unint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = *(void *)(v14 + 72);
  unint64_t v17 = v5 + v15 + v16 * v11;
  unint64_t v18 = a1 + v15;
  uint64_t v19 = v16 * v10;
  unint64_t v20 = v17 + v19;
  unint64_t v21 = v18 + v19;
  if (v18 < v20 && v17 < v21) {
    goto LABEL_21;
  }
  swift_arrayInitWithCopy();
  if (v10 < v4)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v23 = *(void *)(v5 + 16);
  BOOL v24 = __OFADD__(v23, v10);
  uint64_t v25 = v23 + v10;
  if (!v24)
  {
    *(void *)(v5 + swift_weakDestroy(v0 + 16) = v25;
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease(a1);
    *unint64_t v3 = v5;
    return result;
  }

uint64_t sub_100186C74(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = sub_1004C5B44(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

void *sub_100186DB8(uint64_t a1)
{
  int64_t v2 = *(void **)(v1 + *(int *)(a1 + 24));
  id v3 = v2;
  return v2;
}

uint64_t sub_100186DE0()
{
  uint64_t v1 = type metadata accessor for LocalizationUtility.Table(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  int64_t v4 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for LeftBehindUserNotification(0LL);
  uint64_t v6 = v0 + *(int *)(v5 + 20);
  uint64_t v8 = *(void **)(v6 + 8);
  uint64_t v7 = *(void *)(v6 + 16);
  unint64_t v9 = *(void *)(v6 + 24);
  if ((*(_BYTE *)(v6 + 32) & 1) == 0)
  {
    id v14 = v8;
    swift_bridgeObjectRetain(v9);
    if (v9)
    {
      uint64_t v15 = HIBYTE(v9) & 0xF;
      if ((v9 & 0x2000000000000000LL) == 0) {
        uint64_t v15 = v7 & 0xFFFFFFFFFFFFLL;
      }
      if (v15)
      {
        id v60 = v14;
        uint64_t v16 = v1;
        unint64_t v17 = 0xD000000000000039LL;
        uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeAccessory);
        uint64_t v20 = v19;
        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
        if (v18 != v21 || v20 != v22)
        {
          char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v21, v22, 0LL);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v24 & 1) != 0)
          {
            unint64_t v25 = 0x8000000100856E00LL;
LABEL_45:
            uint64_t v1 = v16;
            uint64_t v54 = sub_100004AEC((uint64_t *)&unk_10099D740);
            uint64_t v41 = (void *)swift_allocObject(v54, 72LL, 7LL);
            *((_OWORD *)v41 + 1) = xmmword_1007E67D0;
            v41[7] = &type metadata for String;
            v41[8] = sub_1000226F4();
            v41[4] = v7;
            v41[5] = v9;
            id v14 = v60;
            goto LABEL_46;
          }

          uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeDurian);
          uint64_t v20 = v50;
          uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
          if (v49 != v52 || v20 != v51)
          {
            char v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v20, v52, v51, 0LL);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v53 & 1) != 0)
            {
              unint64_t v25 = 0x8000000100856E00LL;
            }

            else
            {
              unint64_t v17 = 0xD00000000000003BLL;
              unint64_t v25 = 0x8000000100856DC0LL;
            }

            goto LABEL_45;
          }
        }

        swift_bridgeObjectRelease_n(v20, 2LL);
        unint64_t v25 = 0x8000000100856E00LL;
        goto LABEL_45;
      }

      swift_bridgeObjectRelease();
    }

    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeAccessory);
    uint64_t v35 = v34;
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    if (v33 == v36 && v35 == v37)
    {
      swift_bridgeObjectRelease_n(v35, 2LL);
      unint64_t v17 = 0xD000000000000044LL;
    }

    else
    {
      char v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v36, v37, 0LL);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v39 & 1) == 0)
      {
        uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeDurian);
        uint64_t v44 = v43;
        uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
        if (v42 != v45 || v44 != v46)
        {
          char v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v44, v45, v46, 0LL);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v48 & 1) != 0) {
            unint64_t v17 = 0xD000000000000041LL;
          }
          else {
            unint64_t v17 = 0xD000000000000043LL;
          }
          if ((v48 & 1) != 0) {
            unint64_t v25 = 0x8000000100856D20LL;
          }
          else {
            unint64_t v25 = 0x8000000100856CD0LL;
          }
          goto LABEL_26;
        }

        swift_bridgeObjectRelease_n(v44, 2LL);
        unint64_t v17 = 0xD000000000000041LL;
        uint64_t v40 = "SEPARATION_MONITORING_SINGLE_LEFT_BEHIND_GENERIC_ALERT_TITLE_B389";
LABEL_25:
        unint64_t v25 = (unint64_t)(v40 - 32) | 0x8000000000000000LL;
LABEL_26:
        uint64_t v41 = _swiftEmptyArrayStorage;
LABEL_46:
        (*(void (**)(char *, void, uint64_t))(v2 + 104))( v4,  enum case for LocalizationUtility.Table.default(_:),  v1);
        uint64_t v55 = static LocalizationUtility.localizedString(key:table:)(v17, v25, v4);
        uint64_t v57 = v56;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
        uint64_t v32 = String.init(format:arguments:)(v55, v57, v41);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v32;
      }

      unint64_t v17 = 0xD000000000000044LL;
    }

    uint64_t v40 = "SEPARATION_MONITORING_SINGLE_LEFT_BEHIND_GENERIC_ALERT_TITLE_HAWKEYE";
    goto LABEL_25;
  }

  uint64_t v10 = *(void *)v6;
  unsigned int v11 = *(unsigned __int8 *)(v0 + *(int *)(v5 + 36)) - 1;
  (*(void (**)(char *, void, uint64_t))(v2 + 104))( v4,  enum case for LocalizationUtility.Table.default(_:),  v1);
  swift_bridgeObjectRetain(v10);
  if (v11 >= 2)
  {
    unint64_t v12 = 0xD00000000000003ELL;
    uint64_t v13 = "SEPARATION_MONITORING_MULTIPLE_DEVICES_LEFT_BEHIND_ALERT_TITLE";
  }

  else
  {
    unint64_t v12 = 0xD00000000000003CLL;
    uint64_t v13 = "SEPARATION_MONITORING_MULTIPLE_ITEMS_LEFT_BEHIND_ALERT_TITLE";
  }

  uint64_t v26 = static LocalizationUtility.localizedString(key:table:)( v12,  (unint64_t)(v13 - 32) | 0x8000000000000000LL,  v4);
  uint64_t v28 = v27;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v29 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v30 = swift_allocObject(v29, 72LL, 7LL);
  *(_OWORD *)(v30 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v31 = *(void *)(v10 + 16);
  sub_100187C98(v10, v8, v7, v9, 1);
  *(void *)(v30 + 56) = &type metadata for Int;
  *(void *)(v30 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = &protocol witness table for Int;
  *(void *)(v30 + 32) = v31;
  uint64_t v32 = static String.localizedStringWithFormat(_:_:)(v26, v28, v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v32;
}

uint64_t sub_100187314()
{
  uint64_t v1 = type metadata accessor for LocalizationUtility.Table(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  int64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = (int *)type metadata accessor for LeftBehindUserNotification(0LL);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v9 = *(void **)(v0 + *(int *)(v6 + 24));
  if (!v9 || (char *)[*(id *)(v0 + *(int *)(v6 + 24)) type] - 1 > (char *)3)
  {
    uint64_t v15 = (uint64_t *)(v0 + v5[7]);
    uint64_t v12 = *v15;
    uint64_t v14 = v15[1];
    __n128 v16 = swift_bridgeObjectRetain(v14);
    if (v14) {
      goto LABEL_7;
    }
LABEL_13:
    (*(void (**)(char *, void, uint64_t, __n128))(v2 + 104))( v4,  enum case for LocalizationUtility.Table.default(_:),  v1,  v16);
    uint64_t v26 = static LocalizationUtility.localizedString(key:table:)(0xD000000000000035LL, 0x8000000100856B80LL, v4);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    return v26;
  }

  id v10 = [v9 name];
  if (!v10)
  {
    sub_10001DC4C(v0, (uint64_t)v8, type metadata accessor for LeftBehindUserNotification);
LABEL_12:
    uint64_t v27 = (uint64_t *)&v8[v5[7]];
    uint64_t v12 = *v27;
    uint64_t v14 = v27[1];
    swift_bridgeObjectRetain(v14);
    sub_100018C68((uint64_t)v8, type metadata accessor for LeftBehindUserNotification);
    if (v14) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }

  unsigned int v11 = v10;
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  uint64_t v14 = v13;

  sub_10001DC4C(v0, (uint64_t)v8, type metadata accessor for LeftBehindUserNotification);
  if (!v14) {
    goto LABEL_12;
  }
  sub_100018C68((uint64_t)v8, type metadata accessor for LeftBehindUserNotification);
LABEL_7:
  unsigned int v17 = *(unsigned __int8 *)(v0 + v5[9]) - 1;
  (*(void (**)(char *, void, uint64_t))(v2 + 104))( v4,  enum case for LocalizationUtility.Table.default(_:),  v1);
  if (v17 > 1)
  {
    unint64_t v18 = 0xD000000000000041LL;
    uint64_t v19 = "SEPARATION_MONITORING_MULTIPLE_DEVICES_LEFT_BEHIND_ALERT_SUBTITLE";
  }

  else
  {
    unint64_t v18 = 0xD00000000000003FLL;
    uint64_t v19 = "SEPARATION_MONITORING_MULTIPLE_ITEMS_LEFT_BEHIND_ALERT_SUBTITLE";
  }

  uint64_t v20 = static LocalizationUtility.localizedString(key:table:)( v18,  (unint64_t)(v19 - 32) | 0x8000000000000000LL,  v4);
  uint64_t v22 = v21;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v23 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v24 = swift_allocObject(v23, 112LL, 7LL);
  *(_OWORD *)(v24 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v25 = *(void *)(*(void *)(v0 + v5[5]) + 16LL);
  *(void *)(v24 + 56) = &type metadata for Int;
  *(void *)(v24 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = &protocol witness table for Int;
  *(void *)(v24 + 32) = v25;
  *(void *)(v24 + 96) = &type metadata for String;
  *(void *)(v24 + 10_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1000226F4();
  *(void *)(v24 + 72) = v12;
  *(void *)(v24 + 80) = v14;
  uint64_t v26 = static String.localizedStringWithFormat(_:_:)(v20, v22, v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v26;
}

unint64_t sub_10018760C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v36 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int64_t v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
  uint64_t v6 = (int *)type metadata accessor for LeftBehindUserNotification(0LL);
  uint64_t v7 = *(void *)(v1 + v6[8]);
  *(void *)&__int128 v37 = 0LL;
  id v8 = [v5 archivedDataWithRootObject:v7 requiringSecureCoding:1 error:&v37];
  id v9 = (id)v37;
  if (v8)
  {
    uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
    unint64_t v12 = v11;
  }

  else
  {
    uint64_t v13 = v9;
    uint64_t v14 = _convertNSErrorToError(_:)(v9);

    swift_willThrow(v15);
    swift_errorRelease(v14);
    uint64_t v10 = 0LL;
    unint64_t v12 = 0xF000000000000000LL;
  }

  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_1009C0FA0);
  uint64_t inited = swift_initStackObject(v16, v39);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E4050;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(SPSeparationAlertUserInfoLocationKey);
  *(void *)(inited + 40) = v18;
  if (v12 >> 60 == 15)
  {
    id v19 = [objc_allocWithZone(NSNull) init];
    *(void *)(inited + 72) = sub_100022898(0LL, (unint64_t *)&qword_1009A4778, &OBJC_CLASS___NSNull_ptr);
    *(void *)(inited + 48) = v19;
  }

  else
  {
    int64_t v38 = &type metadata for Data;
    *(void *)&__int128 v37 = v10;
    *((void *)&v37 + 1) = v12;
    sub_10006A358(&v37, (_OWORD *)(inited + 48));
  }

  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(SPSeparationAlertUserInfoSafeLocationKey);
  *(void *)(inited + 88) = v20;
  uint64_t v21 = *(void **)(v1 + v6[6]);
  if (v21)
  {
    sub_100018BE4(v10, v12);
    id v22 = [v21 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v22);

    uint64_t v24 = UUID.uuidString.getter(v23);
    uint64_t v25 = v2;
    uint64_t v27 = v26;
    (*(void (**)(char *, uint64_t))(v36 + 8))(v4, v25);
    int64_t v38 = &type metadata for String;
    *(void *)&__int128 v37 = v24;
    *((void *)&v37 + 1) = v27;
    sub_10006A358(&v37, (_OWORD *)(inited + 96));
  }

  else
  {
    id v28 = objc_allocWithZone(&OBJC_CLASS___NSNull);
    sub_100018BE4(v10, v12);
    id v29 = [v28 init];
    *(void *)(inited + 120) = sub_100022898(0LL, (unint64_t *)&qword_1009A4778, &OBJC_CLASS___NSNull_ptr);
    *(void *)(inited + 96) = v29;
  }

  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(SPSeparationAlertUserInfoBeaconIdentifiersKey);
  *(void *)(inited + 136) = v30;
  swift_bridgeObjectRetain(*(void *)(v1 + v6[5]));
  sub_100183E04(v31);
  uint64_t v33 = v32;
  swift_bridgeObjectRelease();
  *(void *)(inited + 168) = sub_100004AEC(&qword_1009AED50);
  *(void *)(inited + 14_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v33;
  unint64_t v34 = sub_100412CF8(inited);
  sub_1000182F0(v10, v12);
  return v34;
}

uint64_t sub_100187978()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&v28[0] = 0LL;
  *((void *)&v28[0] + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(98LL);
  __int128 v30 = v28[0];
  v6._countAndFlagsBits = 0xD00000000000001FLL;
  v6._object = (void *)0x8000000100856E40LL;
  String.append(_:)(v6);
  unint64_t v7 = sub_1000F620C();
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v7);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x6E6974736564202CLL;
  v9._object = (void *)0xEF203A6E6F697461LL;
  String.append(_:)(v9);
  uint64_t v10 = (int *)type metadata accessor for LeftBehindUserNotification(0LL);
  LOBYTE(v28[0]) = *(_BYTE *)(v0 + v10[9]);
  _print_unlocked<A, B>(_:_:)( v28,  &v30,  &type metadata for UserNotificationDestination,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v11._countAndFlagsBits = 0x747865746E6F6320LL;
  v11._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v11);
  uint64_t v12 = v0 + v10[5];
  char v13 = *(_BYTE *)(v12 + 32);
  __int128 v14 = *(_OWORD *)(v12 + 16);
  v28[0] = *(_OWORD *)v12;
  v28[1] = v14;
  char v29 = v13;
  _print_unlocked<A, B>(_:_:)( v28,  &v30,  &type metadata for SeparationMonitoringBeaconsContext,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v15._object = (void *)0x8000000100856E60LL;
  v15._countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v15);
  uint64_t v16 = *(void **)(v0 + v10[6]);
  if (v16)
  {
    id v17 = [v16 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v17);

    uint64_t v19 = UUID.uuidString.getter(v18);
    uint64_t v21 = v20;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  else
  {
    uint64_t v21 = (void *)0xE400000000000000LL;
    uint64_t v19 = 1701736302LL;
  }

  v22._countAndFlagsBits = v19;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 0x6F697461636F6C20LL;
  v23._object = (void *)0xEB00000000203A6ELL;
  String.append(_:)(v23);
  uint64_t v24 = *(void **)(v1 + v10[8]);
  [v24 coordinate];
  Double.write<A>(to:)( &v30,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v25._countAndFlagsBits = 8236LL;
  v25._object = (void *)0xE200000000000000LL;
  String.append(_:)(v25);
  [v24 coordinate];
  Double.write<A>(to:)( &v30,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v26._countAndFlagsBits = 62LL;
  v26._object = (void *)0xE100000000000000LL;
  String.append(_:)(v26);
  return v30;
}

uint64_t sub_100187C34(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

uint64_t sub_100187C4C(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 40));
}

uint64_t type metadata accessor for LeftBehindUserNotification(uint64_t a1)
{
  uint64_t result = qword_1009A4830;
  if (!qword_1009A4830) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LeftBehindUserNotification);
  }
  return result;
}

uint64_t sub_100187C98(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result = swift_bridgeObjectRelease(a1);
  if ((a5 & 1) == 0)
  {

    return swift_bridgeObjectRelease(a4);
  }

  return result;
}

void (*sub_100187CE4(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *)
{
  Swift::String v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_100187DBC(v6, a2, a3);
  return sub_100187D38;
}

void (*sub_100187D3C(void (**a1)(id *), unint64_t a2, uint64_t a3))(void *)
{
  Swift::String v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_100187E30(v6, a2, a3);
  return sub_100187D38;
}

void sub_100187D90(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

void (*sub_100187DBC(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }

  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_100187E28;
  }

  __break(1u);
  return result;
}

void sub_100187E28(id *a1)
{
}

void (*sub_100187E30(void (*result)(id *), unint64_t a2, uint64_t a3))(id *)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }

  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_100188E50;
  }

  __break(1u);
  return result;
}

uint64_t sub_100187E9C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease();
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1001886EC(&qword_1009A47D0, &qword_1009A47C8);
        swift_bridgeObjectRetain(a3);
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          sub_100004AEC(&qword_1009A47C8);
          char v13 = sub_100187CE4(v18, i, a3);
          id v15 = *v14;
          ((void (*)(void (**)(id *), void))v13)(v18, 0LL);
          *(void *)(a1 + 8 * i) = v15;
        }

        swift_bridgeObjectRelease();
        return a3;
      }

      goto LABEL_24;
    }

uint64_t sub_1001880B0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease();
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1001886EC(&qword_1009A47A8, &qword_1009A47A0);
        swift_bridgeObjectRetain(a3);
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          sub_100004AEC(&qword_1009A47A0);
          char v13 = sub_100187D3C(v18, i, a3);
          id v15 = *v14;
          ((void (*)(void (**)(id *), void))v13)(v18, 0LL);
          *(void *)(a1 + 8 * i) = v15;
        }

        swift_bridgeObjectRelease();
        return a3;
      }

      goto LABEL_24;
    }

uint64_t sub_1001882C4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease();
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1001886EC(&qword_1009A4798, (uint64_t *)&unk_1009B9A60);
        swift_bridgeObjectRetain(a3);
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          sub_100004AEC((uint64_t *)&unk_1009B9A60);
          char v13 = sub_100187D3C(v18, i, a3);
          id v15 = *v14;
          ((void (*)(void (**)(id *), void))v13)(v18, 0LL);
          *(void *)(a1 + 8 * i) = v15;
        }

        swift_bridgeObjectRelease();
        return a3;
      }

      goto LABEL_24;
    }

uint64_t sub_1001884D8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease();
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1001886EC(&qword_1009A47C0, &qword_1009A47B0);
        swift_bridgeObjectRetain(a3);
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          sub_100004AEC(&qword_1009A47B0);
          char v13 = sub_100187D3C(v18, i, a3);
          id v15 = *v14;
          ((void (*)(void (**)(id *), void))v13)(v18, 0LL);
          *(void *)(a1 + 8 * i) = v15;
        }

        swift_bridgeObjectRelease();
        return a3;
      }

      goto LABEL_24;
    }

uint64_t sub_1001886EC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_100004B78(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

void *sub_10018872C(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v27 = *a2;
    *a1 = *a2;
    a1 = (void *)(v27 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = *(void *)v10;
    uint64_t v12 = (void *)*((void *)v10 + 1);
    uint64_t v13 = *((void *)v10 + 2);
    uint64_t v14 = *((void *)v10 + 3);
    char v15 = v10[32];
    sub_100188848(*(void *)v10, v12, v13, v14, v15);
    *(void *)uint64_t v9 = v11;
    *((void *)v9 + 1) = v12;
    *((void *)v9 + 2) = v13;
    *((void *)v9 + 3) = v14;
    v9[32] = v15;
    uint64_t v16 = a3[6];
    uint64_t v17 = a3[7];
    uint64_t v18 = *(void **)((char *)a2 + v16);
    *(void *)((char *)a1 + vswift_weakDestroy(v0 + 16) = v18;
    uint64_t v19 = (void *)((char *)a1 + v17);
    uint64_t v20 = (void *)((char *)a2 + v17);
    uint64_t v21 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v21;
    uint64_t v22 = a3[8];
    uint64_t v23 = a3[9];
    uint64_t v24 = *(void **)((char *)a2 + v22);
    *(void *)((char *)a1 + v22) = v24;
    *((_BYTE *)a1 + v23) = *((_BYTE *)a2 + v23);
    *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    id v25 = v18;
    swift_bridgeObjectRetain(v21);
    id v26 = v24;
  }

  return a1;
}

id sub_100188848(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0) {
    return (id)swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a1);
  return a2;
}

void sub_10018889C(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v5 = a1 + a2[5];
  sub_100187C98(*(void *)v5, *(void **)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(_BYTE *)(v5 + 32));

  swift_bridgeObjectRelease();
}

uint64_t sub_100188914(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)v9;
  uint64_t v11 = *(void **)(v9 + 8);
  uint64_t v12 = *(void *)(v9 + 16);
  uint64_t v13 = *(void *)(v9 + 24);
  char v14 = *(_BYTE *)(v9 + 32);
  sub_100188848(*(void *)v9, v11, v12, v13, v14);
  *(void *)uint64_t v8 = v10;
  *(void *)(v8 + 8) = v11;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = v12;
  *(void *)(v8 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v13;
  *(_BYTE *)(v8 + 32) = v14;
  uint64_t v15 = a3[6];
  uint64_t v16 = a3[7];
  uint64_t v17 = *(void **)(a2 + v15);
  *(void *)(a1 + v15) = v17;
  uint64_t v18 = (void *)(a1 + v16);
  uint64_t v19 = (void *)(a2 + v16);
  uint64_t v20 = v19[1];
  void *v18 = *v19;
  v18[1] = v20;
  uint64_t v21 = a3[8];
  uint64_t v22 = a3[9];
  uint64_t v23 = *(void **)(a2 + v21);
  *(void *)(a1 + v21) = v23;
  *(_BYTE *)(a1 + v22) = *(_BYTE *)(a2 + v22);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  id v24 = v17;
  swift_bridgeObjectRetain(v20);
  id v25 = v23;
  return a1;
}

uint64_t sub_100188A04(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)v9;
  uint64_t v11 = *(void **)(v9 + 8);
  uint64_t v12 = *(void *)(v9 + 16);
  uint64_t v13 = *(void *)(v9 + 24);
  char v14 = *(_BYTE *)(v9 + 32);
  sub_100188848(*(void *)v9, v11, v12, v13, v14);
  uint64_t v15 = *(void *)v8;
  uint64_t v16 = *(void **)(v8 + 8);
  uint64_t v17 = *(void *)(v8 + 16);
  uint64_t v18 = *(void *)(v8 + 24);
  char v19 = *(_BYTE *)(v8 + 32);
  *(void *)uint64_t v8 = v10;
  *(void *)(v8 + 8) = v11;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = v12;
  *(void *)(v8 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v13;
  *(_BYTE *)(v8 + 32) = v14;
  sub_100187C98(v15, v16, v17, v18, v19);
  uint64_t v20 = a3[6];
  uint64_t v21 = *(void **)(a1 + v20);
  uint64_t v22 = *(void **)(a2 + v20);
  *(void *)(a1 + v20) = v22;
  id v23 = v22;

  uint64_t v24 = a3[7];
  id v25 = (void *)(a1 + v24);
  id v26 = (void *)(a2 + v24);
  *id v25 = *v26;
  uint64_t v27 = v26[1];
  v25[1] = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease();
  uint64_t v28 = a3[8];
  char v29 = *(void **)(a2 + v28);
  __int128 v30 = *(void **)(a1 + v28);
  *(void *)(a1 + v28) = v29;
  id v31 = v29;

  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_100188B2C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = (__int128 *)(a2 + v7);
  __int128 v11 = *v10;
  __int128 v12 = v10[1];
  *(_BYTE *)(v9 + 32) = *((_BYTE *)v10 + 32);
  *(_OWORD *)uint64_t v9 = v11;
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = v12;
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v13 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  uint64_t v14 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = *(_BYTE *)(a2 + v14);
  return a1;
}

uint64_t sub_100188BC8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(_BYTE *)(v9 + 32);
  uint64_t v11 = *(void *)v8;
  __int128 v12 = *(void **)(v8 + 8);
  uint64_t v13 = *(void *)(v8 + 16);
  uint64_t v14 = *(void *)(v8 + 24);
  char v15 = *(_BYTE *)(v8 + 32);
  __int128 v16 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = v16;
  *(_BYTE *)(v8 + 32) = v10;
  sub_100187C98(v11, v12, v13, v14, v15);
  uint64_t v17 = a3[6];
  uint64_t v18 = *(void **)(a1 + v17);
  *(void *)(a1 + v17) = *(void *)(a2 + v17);

  uint64_t v19 = a3[7];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  void *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[8];
  id v25 = *(void **)(a1 + v24);
  *(void *)(a1 + v2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = *(void *)(a2 + v24);

  uint64_t v26 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v26) = *(_BYTE *)(a2 + v26);
  return a1;
}

uint64_t sub_100188C9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100188CA8);
}

uint64_t sub_100188CA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 32));
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_100188D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100188D30);
}

uint64_t sub_100188D30(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + sub_100016F9C(*(void *)(v0 + 24), *(void *)(v0 + 32)) = (a2 - 1);
  return result;
}

uint64_t sub_100188DA8(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "!";
    v4[2] = L"\b";
    void v4[3] = &unk_1007F4600;
    void v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[5] = &unk_1007F4618;
    v4[6] = &unk_1007F4630;
    swift_initStructMetadata(a1, 256LL, 7LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_100188E54(uint64_t a1, void (*a2)(uint64_t *, char *), uint64_t a3, uint64_t a4)
{
  uint64_t v24 = a2;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  char v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = a1;
  uint64_t v14 = *(void *)(a4 + 16);
  uint64_t v21 = a4;
  if (v14)
  {
    uint64_t v15 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    __int128 v16 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16);
    uint64_t v22 = *(void *)(v8 + 72);
    uint64_t v23 = v16;
    __n128 v17 = swift_bridgeObjectRetain(a4);
    while (1)
    {
      v23(v13, v15, v7, v17);
      uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v8 + 56);
      ((void (*)(char *, void, uint64_t, uint64_t))v18)(v13, 0LL, 1LL, v7);
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v13, v7);
      v24(&v25, v10);
      if (v4)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        return swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      v15 += v22;
      if (!--v14) {
        goto LABEL_8;
      }
    }
  }

  else
  {
    uint64_t v19 = a4;
    uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v8 + 56);
    __n128 v17 = swift_bridgeObjectRetain(v19);
LABEL_8:
    v18(v13, 1LL, 1LL, v7, v17);
  }

  swift_bridgeObjectRelease();
  return v25;
}

void sub_10018903C(uint64_t a1, void (*a2)(uint64_t *, void *), uint64_t a3, uint64_t a4)
{
  uint64_t v22 = a1;
  uint64_t v7 = a4 + 64;
  uint64_t v8 = 1LL << *(_BYTE *)(a4 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & *(void *)(a4 + 64);
  int64_t v20 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain(a4);
  int64_t v11 = 0LL;
  if (!v10) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    __n128 v17 = (uint64_t *)(*(void *)(a4 + 48) + 16 * i);
    uint64_t v18 = *v17;
    unint64_t v19 = v17[1];
    v21[0] = v18;
    v21[1] = v19;
    sub_10001736C(v18, v19);
    a2(&v22, v21);
    if (v4)
    {
      swift_bridgeObjectRelease();
      sub_100016F9C(v18, v19);
      swift_release();
      return;
    }

    sub_100016F9C(v18, v19);
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v11++, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v11 >= v20) {
      goto LABEL_26;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v11);
    if (!v15) {
      break;
    }
LABEL_17:
    unint64_t v10 = (v15 - 1) & v15;
  }

  int64_t v16 = v11 + 1;
  if (v11 + 1 >= v20) {
    goto LABEL_26;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  int64_t v16 = v11 + 2;
  if (v11 + 2 >= v20) {
    goto LABEL_26;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  int64_t v16 = v11 + 3;
  if (v11 + 3 >= v20) {
    goto LABEL_26;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  int64_t v16 = v11 + 4;
  if (v11 + 4 >= v20)
  {
LABEL_26:
    swift_release();
    return;
  }

  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
LABEL_16:
    int64_t v11 = v16;
    goto LABEL_17;
  }

  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v11 >= v20) {
      goto LABEL_26;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_17;
    }
  }

uint64_t sub_100189220( uint64_t a1, void (*a2)(uint64_t *, char *), uint64_t a3, uint64_t a4, uint64_t (*a5)(char *), uint64_t a6)
{
  char v48 = a5;
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v40 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v47 = (char *)v39 - v13;
  uint64_t v14 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v51 = (char *)v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v43 = (char *)v39 - v17;
  uint64_t v54 = a1;
  uint64_t v18 = *(void *)(a4 + 56);
  uint64_t v45 = a4 + 56;
  uint64_t v19 = -1LL;
  uint64_t v20 = -1LL << *(_BYTE *)(a4 + 32);
  v39[1] = ~v20;
  if (-v20 < 64) {
    uint64_t v19 = ~(-1LL << -(char)v20);
  }
  unint64_t v21 = v19 & v18;
  int64_t v44 = (unint64_t)(63 - v20) >> 6;
  uint64_t v53 = a4;
  swift_bridgeObjectRetain(a4);
  uint64_t v52 = a6;
  uint64_t result = swift_retain();
  int64_t v23 = 0LL;
  uint64_t v24 = v47;
  while (1)
  {
    unint64_t v50 = v21;
    if (v21)
    {
      unint64_t v26 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v27 = v26 | (v23 << 6);
      int64_t v28 = v23;
      char v29 = v51;
      goto LABEL_23;
    }

    int64_t v28 = v23 + 1;
    char v29 = v51;
    if (__OFADD__(v23, 1LL))
    {
      __break(1u);
      goto LABEL_38;
    }

    if (v28 >= v44) {
      goto LABEL_33;
    }
    unint64_t v30 = *(void *)(v45 + 8 * v28);
    if (!v30) {
      break;
    }
LABEL_22:
    unint64_t v21 = (v30 - 1) & v30;
    unint64_t v27 = __clz(__rbit64(v30)) + (v28 << 6);
LABEL_23:
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))( v29,  *(void *)(v53 + 48) + *(void *)(v10 + 72) * v27,  v9);
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v32(v29, 0LL, 1LL, v9);
    uint64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    if (v33(v29, 1LL, v9) == 1)
    {
      uint64_t v38 = (uint64_t)v29;
LABEL_34:
      sub_100015794(v38, &qword_10099D8A0);
      v32(v43, 1LL, 1LL, v9);
LABEL_35:
      sub_1000A6F30(v53);
      swift_release();
      return v54;
    }

    int64_t v46 = v23;
    unint64_t v34 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v34(v24, v29, v9);
    if ((v48(v24) & 1) != 0)
    {
      uint64_t v35 = v43;
      v34(v43, v24, v9);
      v32(v35, 0LL, 1LL, v9);
      if (v33(v35, 1LL, v9) == 1) {
        goto LABEL_35;
      }
      uint64_t v36 = v40;
      v34(v40, v35, v9);
      uint64_t v37 = v49;
      v41(&v54, v36);
      uint64_t v49 = v37;
      if (v37)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v10 + 8))(v36, v9);
        sub_1000A6F30(v53);
        return swift_release();
      }

      uint64_t v25 = v36;
    }

    else
    {
      uint64_t v25 = v24;
    }

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v25, v9);
    int64_t v23 = v28;
  }

  int64_t v31 = v23 + 2;
  if (v23 + 2 >= v44) {
    goto LABEL_33;
  }
  unint64_t v30 = *(void *)(v45 + 8 * v31);
  if (v30) {
    goto LABEL_21;
  }
  int64_t v31 = v23 + 3;
  if (v23 + 3 >= v44) {
    goto LABEL_33;
  }
  unint64_t v30 = *(void *)(v45 + 8 * v31);
  if (v30) {
    goto LABEL_21;
  }
  int64_t v31 = v23 + 4;
  if (v23 + 4 >= v44) {
    goto LABEL_33;
  }
  unint64_t v30 = *(void *)(v45 + 8 * v31);
  if (v30) {
    goto LABEL_21;
  }
  int64_t v31 = v23 + 5;
  if (v23 + 5 >= v44) {
    goto LABEL_33;
  }
  unint64_t v30 = *(void *)(v45 + 8 * v31);
  if (v30) {
    goto LABEL_21;
  }
  int64_t v31 = v23 + 6;
  if (v23 + 6 >= v44)
  {
LABEL_33:
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    uint64_t v38 = (uint64_t)v51;
    v32(v51, 1LL, 1LL, v9);
    unint64_t v50 = 0LL;
    goto LABEL_34;
  }

  unint64_t v30 = *(void *)(v45 + 8 * v31);
  if (v30)
  {
LABEL_21:
    int64_t v28 = v31;
    goto LABEL_22;
  }

  while (1)
  {
    int64_t v28 = v31 + 1;
    if (__OFADD__(v31, 1LL)) {
      break;
    }
    if (v28 >= v44) {
      goto LABEL_33;
    }
    unint64_t v30 = *(void *)(v45 + 8 * v28);
    ++v31;
    if (v30) {
      goto LABEL_22;
    }
  }

void sub_100189694(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v35 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v33 = a1 + 56;
  uint64_t v12 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v34 = (unint64_t)(v12 + 63) >> 6;
  __n128 v15 = swift_bridgeObjectRetain(a1);
  int64_t v16 = 0LL;
  int64_t v31 = a2;
  uint64_t v32 = a1;
  if (v14) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v19 = v16 + 1;
  if (__OFADD__(v16, 1LL))
  {
    __break(1u);
  }

  else
  {
    if (v19 >= v34) {
      goto LABEL_30;
    }
    unint64_t v20 = *(void *)(v33 + 8 * v19);
    ++v16;
    if (v20) {
      goto LABEL_22;
    }
    int64_t v16 = v19 + 1;
    if (v19 + 1 >= v34) {
      goto LABEL_30;
    }
    unint64_t v20 = *(void *)(v33 + 8 * v16);
    if (v20) {
      goto LABEL_22;
    }
    int64_t v16 = v19 + 2;
    if (v19 + 2 >= v34) {
      goto LABEL_30;
    }
    unint64_t v20 = *(void *)(v33 + 8 * v16);
    if (v20) {
      goto LABEL_22;
    }
    int64_t v16 = v19 + 3;
    if (v19 + 3 >= v34) {
      goto LABEL_30;
    }
    unint64_t v20 = *(void *)(v33 + 8 * v16);
    if (v20) {
      goto LABEL_22;
    }
    int64_t v21 = v19 + 4;
    if (v21 >= v34)
    {
LABEL_30:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56))(v10, 1LL, 1LL, v4, v15);
LABEL_31:
      swift_release();
      return;
    }

    unint64_t v20 = *(void *)(v33 + 8 * v21);
    if (v20)
    {
      int64_t v16 = v21;
LABEL_22:
      unint64_t v14 = (v20 - 1) & v20;
      for (unint64_t i = __clz(__rbit64(v20)) + (v16 << 6); ; unint64_t i = v17 | (v16 << 6))
      {
        (*(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16))( v10,  *(void *)(a1 + 48) + *(void *)(v5 + 72) * i,  v4,  v15);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v10, 0LL, 1LL, v4);
        (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
        uint64_t v22 = *a2;
        if (*(void *)(*a2 + 16) && (unint64_t v23 = sub_10030D124((uint64_t)v7), (v24 & 1) != 0))
        {
          id v25 = *(id *)(*(void *)(v22 + 56) + 8 * v23);
          uint64_t v26 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v26);
          unint64_t v28 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          unint64_t v27 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v28 >= v27 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1LL);
          }
          uint64_t v29 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v25);
          specialized Array._endMutation()(v29);
          a2 = v31;
          a1 = v32;
          if (!v14) {
            goto LABEL_7;
          }
        }

        else
        {
          (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
          if (!v14) {
            goto LABEL_7;
          }
        }

void *sub_1001899C8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v16[1] = v1;
    unint64_t v17 = _swiftEmptyArrayStorage;
    sub_1000328D0(0, v7, 0);
    uint64_t v8 = v17;
    uint64_t v9 = (void *)(a1 + 32);
    do
    {
      uint64_t v11 = v9[3];
      uint64_t v10 = v9[4];
      sub_100012ED8(v9, v11);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8LL) + 32LL))(v11);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
      unint64_t v17 = v8;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000328D0(0, v8[2] + 1LL, 1);
        uint64_t v8 = v17;
      }

      unint64_t v14 = v8[2];
      unint64_t v13 = v8[3];
      if (v14 >= v13 >> 1)
      {
        sub_1000328D0(v13 > 1, v14 + 1, 1);
        uint64_t v8 = v17;
      }

      void v8[2] = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))( (unint64_t)v8 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
      + *(void *)(v4 + 72) * v14,
        v6,
        v3);
      unint64_t v17 = v8;
      v9 += 5;
      --v7;
    }

    while (v7);
  }

  return v8;
}

unint64_t sub_100189B54()
{
  unint64_t result = qword_1009A4888;
  if (!qword_1009A4888)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for BeaconManagerCommandError,  &type metadata for BeaconManagerCommandError);
    atomic_store(result, (unint64_t *)&qword_1009A4888);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for BeaconManagerCommandError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 1;
  }
  else {
    LODWORD(v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100189BE4 + 4 * byte_1007F4665[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100189C18 + 4 * byte_1007F4660[v4]))();
}

uint64_t sub_100189C18(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100189C20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100189C28LL);
  }
  return result;
}

uint64_t sub_100189C34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100189C3CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100189C40(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100189C48(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconManagerCommandError()
{
  return &type metadata for BeaconManagerCommandError;
}

uint64_t sub_100189C64(uint64_t a1)
{
  return sub_100189D34(a1, qword_100A2A290, 0x61636F4C6576696CLL, 0xED0000736E6F6974LL);
}

uint64_t sub_100189C90()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000014LL,  0x8000000100856EC0LL);
  qword_100A2A2A8 = result;
  return result;
}

uint64_t sub_100189D08(uint64_t a1)
{
  return sub_100189D34(a1, qword_100A2A2B0, 0x6F4C74736574616CLL, 0xEF736E6F69746163LL);
}

uint64_t sub_100189D34(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v7, a2);
  sub_10000A720(v7, (uint64_t)a2);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x80000001008507F0LL, a3, a4);
}

void *sub_100189DA8(uint64_t a1)
{
  uint64_t v47 = a1;
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v51 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v4);
  uint64_t v53 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  __n128 v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v16 = (*(uint64_t (**)(char *, void, uint64_t))(v13 + 104))( v15,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v12);
  static DispatchQoS.unspecified.getter(v16);
  *(void *)&__int128 aBlock = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_100007864( (unint64_t *)&qword_10099BAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009A0CD0);
  uint64_t v19 = sub_1000372EC( (unint64_t *)&qword_10099BAB0,  (uint64_t *)&unk_1009A0CD0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v18, v19, v6, v17);
  dispatch_queue_t v52 = (dispatch_queue_t)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000003ALL,  0x8000000100857350LL,  v11,  v8,  v15,  0LL);
  uint64_t v62 = _swiftEmptyArrayStorage;
  uint64_t v20 = *(void *)(v47 + 16);
  if (v20)
  {
    uint64_t v21 = v47 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    uint64_t v49 = *(void *)(v2 + 72);
    unint64_t v50 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v2 + 16);
    __n128 v22 = swift_bridgeObjectRetain(v47);
    uint64_t v23 = 0LL;
    uint64_t isEscapingClosureAtFileLocation = 0LL;
    id v25 = sub_1001B2044;
    uint64_t v26 = v2;
    uint64_t v27 = (uint64_t)v51;
    while (1)
    {
      uint64_t v54 = v20;
      unint64_t v28 = v53;
      v50(v53, v21, v1, v22);
      uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
      v29(v28, 0LL, 1LL, v1);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v28, 1LL, v1) == 1)
      {

        swift_bridgeObjectRelease();
        goto LABEL_13;
      }

      (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v27, v28, v1);
      sub_100504C28(v27, (uint64_t)&aBlock);
      if (!v57) {
        break;
      }
      char v48 = v29;
      sub_100012EC0(&aBlock, (uint64_t)v61);
      sub_100013044((uint64_t)v61, (uint64_t)v60);
      uint64_t v30 = swift_allocObject(&unk_100945AB0, 64LL, 7LL);
      *(void *)(v30 + swift_weakDestroy(v0 + 16) = &v62;
      sub_100012EC0(v60, v30 + 24);
      sub_10002214C(v23, isEscapingClosureAtFileLocation);
      int64_t v31 = v25;
      uint64_t v32 = swift_allocObject(&unk_100945AD8, 32LL, 7LL);
      *(void *)(v32 + swift_weakDestroy(v0 + 16) = v31;
      *(void *)(v32 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v30;
      uint64_t v58 = sub_100154688;
      uint64_t v59 = v32;
      *(void *)&__int128 aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256LL;
      uint64_t v56 = sub_100025BD4;
      uint64_t v57 = &unk_100945AF0;
      uint64_t v33 = _Block_copy(&aBlock);
      uint64_t v23 = v59;
      swift_retain();
      swift_release();
      dispatch_sync(v52, v33);
      _Block_release(v33);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v61);
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v1);
      uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v32, "", 150LL, 63LL, 30LL, 1LL);
      swift_release();
      if ((isEscapingClosureAtFileLocation & 1) != 0)
      {
        __break(1u);
        goto LABEL_15;
      }

      uint64_t isEscapingClosureAtFileLocation = v30;
      v21 += v49;
      uint64_t v23 = (uint64_t)v31;
      uint64_t v20 = v54 - 1;
      id v25 = v31;
      if (v54 == 1)
      {
        v48(v53, 1LL, 1LL, v1);
        goto LABEL_9;
      }
    }

    uint64_t v27 = v1;
    uint64_t v54 = v26;
    swift_bridgeObjectRelease();
    uint64_t v35 = sub_100015794((uint64_t)&aBlock, (uint64_t *)&unk_1009A9C40);
    uint64_t v26 = static os_log_type_t.error.getter(v35);
    if (qword_10099B6F8 == -1) {
      goto LABEL_12;
    }
LABEL_15:
    swift_once(&qword_10099B6F8, sub_100651098);
LABEL_12:
    uint64_t v36 = qword_100A2B008;
    uint64_t v37 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v38 = swift_allocObject(v37, 72LL, 7LL);
    *(_OWORD *)(v38 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v39 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v40 = v51;
    uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(v27, v39);
    uint64_t v43 = v42;
    *(void *)(v38 + 56) = &type metadata for String;
    *(void *)(v38 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1000226F4();
    *(void *)(v38 + 32) = v41;
    *(void *)(v38 + 40) = v43;
    os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v36, "Unable to obtain beaconRecord for %@", 36LL, 2LL, v38);

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v40, v27);
  }

  else
  {
    int64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
    swift_bridgeObjectRetain(v47);
    id v25 = 0LL;
    uint64_t isEscapingClosureAtFileLocation = 0LL;
    v34(v53, 1LL, 1LL, v1);
LABEL_9:

    swift_bridgeObjectRelease();
    uint64_t v23 = (uint64_t)v25;
  }

uint64_t sub_10018A418(void *a1, uint64_t a2)
{
  uint64_t v3 = (void *)*a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v3 = sub_1004C4740(0LL, v3[2] + 1LL, 1, v3);
    *a1 = v3;
  }

  unint64_t v6 = v3[2];
  unint64_t v5 = v3[3];
  if (v6 >= v5 >> 1)
  {
    uint64_t v3 = sub_1004C4740((void *)(v5 > 1), v6 + 1, 1, v3);
    *a1 = v3;
  }

  v3[2] = v6 + 1;
  return sub_100012EC0(v8, (uint64_t)&v3[5 * v6 + 4]);
}

uint64_t sub_10018A4D8(uint64_t a1)
{
  uint64_t v3 = (int *)type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v4 = __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v84 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v87 = (uint64_t)&v84 - v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v84 - v12;
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v89 = *(void *)(v14 - 8);
  uint64_t v90 = v14;
  __chkstk_darwin(v14);
  uint64_t v88 = (char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100013044(a1, (uint64_t)v95);
  uint64_t v19 = sub_100004AEC(&qword_1009B0530);
  if (!swift_dynamicCast(v18, v95, v19, v16, 0LL))
  {
    if (!swift_dynamicCast(v13, v95, v19, v3, 0LL))
    {
      if (qword_10099B188 != -1) {
        swift_once(&qword_10099B188, sub_100189D08);
      }
      uint64_t v54 = type metadata accessor for Logger(0LL);
      sub_10000A720(v54, (uint64_t)qword_100A2A2B0);
      uint64_t v55 = sub_100013044(a1, (uint64_t)v92);
      uint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
      os_log_type_t v57 = static os_log_type_t.default.getter(v56);
      if (os_log_type_enabled(v56, v57))
      {
        uint64_t v58 = swift_slowAlloc(22LL, -1LL);
        uint64_t v59 = swift_slowAlloc(32LL, -1LL);
        uint64_t v96 = v59;
        *(_DWORD *)uint64_t v58 = 141558275;
        uint64_t v91 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v58 + 4, v58 + 12);
        *(_WORD *)(v58 + 12) = 2081;
        uint64_t v86 = v1;
        uint64_t v87 = v58 + 14;
        uint64_t v61 = v93;
        uint64_t v60 = v94;
        sub_100012ED8(v92, v93);
        uint64_t v62 = v88;
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v60 + 8) + 8LL) + 32LL))(v61);
        uint64_t v63 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v64 = v90;
        uint64_t v65 = dispatch thunk of CustomStringConvertible.description.getter(v90, v63);
        unint64_t v67 = v66;
        (*(void (**)(char *, uint64_t))(v89 + 8))(v62, v64);
        uint64_t v91 = sub_1003F11D4(v65, v67, &v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v87, v58 + 22);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v92);
        _os_log_impl( (void *)&_mh_execute_header,  v56,  v57,  "Unknown beacon type, not locating %{private,mask.hash}s.",  (uint8_t *)v58,  0x16u);
        swift_arrayDestroy(v59, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v59, -1LL, -1LL);
        swift_slowDealloc(v58, -1LL, -1LL);
      }

      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v92);
      }

      goto LABEL_26;
    }

    uint64_t v34 = v87;
    sub_10002218C((uint64_t)v13, v87, type metadata accessor for SharedBeaconRecord);
    int v35 = *(unsigned __int8 *)(v34 + v3[13]);
    sub_10001DC4C(v34, (uint64_t)v9, type metadata accessor for SharedBeaconRecord);
    if (v35 == 1)
    {
      uint64_t v36 = *(void *)&v9[v3[11]];
      sub_10001DC4C((uint64_t)v9, (uint64_t)v6, type metadata accessor for SharedBeaconRecord);
      if (v36 == -1)
      {
        uint64_t v69 = *(void *)&v6[v3[12]];
        sub_100018C68((uint64_t)v6, type metadata accessor for SharedBeaconRecord);
        sub_100018C68((uint64_t)v9, type metadata accessor for SharedBeaconRecord);
        if (v69 == -1)
        {
          if (qword_10099B188 != -1) {
            swift_once(&qword_10099B188, sub_100189D08);
          }
          uint64_t v70 = type metadata accessor for Logger(0LL);
          sub_10000A720(v70, (uint64_t)qword_100A2A2B0);
          uint64_t v71 = sub_100013044(a1, (uint64_t)v92);
          unint64_t v72 = (os_log_s *)Logger.logObject.getter(v71);
          os_log_type_t v73 = static os_log_type_t.default.getter(v72);
          if (os_log_type_enabled(v72, v73))
          {
            uint64_t v74 = swift_slowAlloc(22LL, -1LL);
            uint64_t v75 = swift_slowAlloc(32LL, -1LL);
            uint64_t v96 = v75;
            *(_DWORD *)uint64_t v74 = 141558275;
            uint64_t v91 = 1752392040LL;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v74 + 4, v74 + 12);
            *(_WORD *)(v74 + 12) = 2081;
            uint64_t v85 = v74 + 14;
            uint64_t v86 = v1;
            uint64_t v77 = v93;
            uint64_t v76 = v94;
            sub_100012ED8(v92, v93);
            uint64_t v78 = v88;
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v76 + 8) + 8LL) + 32LL))(v77);
            uint64_t v79 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            uint64_t v80 = v90;
            uint64_t v81 = dispatch thunk of CustomStringConvertible.description.getter(v90, v79);
            unint64_t v83 = v82;
            (*(void (**)(char *, uint64_t))(v89 + 8))(v78, v80);
            uint64_t v91 = sub_1003F11D4(v81, v83, &v96);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v85, v74 + 22);
            swift_bridgeObjectRelease();
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v92);
            _os_log_impl( (void *)&_mh_execute_header,  v72,  v73,  "Allowed to locate shared self-beacon %{private,mask.hash}s.",  (uint8_t *)v74,  0x16u);
            uint64_t v53 = 1LL;
            swift_arrayDestroy(v75, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v75, -1LL, -1LL);
            swift_slowDealloc(v74, -1LL, -1LL);

            sub_100018C68(v87, type metadata accessor for SharedBeaconRecord);
            goto LABEL_27;
          }

          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v92);
          uint64_t v51 = type metadata accessor for SharedBeaconRecord;
          uint64_t v52 = v87;
          goto LABEL_17;
        }

        goto LABEL_11;
      }

      sub_100018C68((uint64_t)v6, type metadata accessor for SharedBeaconRecord);
    }

    sub_100018C68((uint64_t)v9, type metadata accessor for SharedBeaconRecord);
LABEL_11:
    if (qword_10099B188 != -1) {
      swift_once(&qword_10099B188, sub_100189D08);
    }
    uint64_t v37 = type metadata accessor for Logger(0LL);
    sub_10000A720(v37, (uint64_t)qword_100A2A2B0);
    uint64_t v38 = sub_100013044(a1, (uint64_t)v92);
    uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v40 = static os_log_type_t.default.getter(v39);
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = swift_slowAlloc(22LL, -1LL);
      uint64_t v42 = swift_slowAlloc(32LL, -1LL);
      uint64_t v96 = v42;
      *(_DWORD *)uint64_t v41 = 141558275;
      uint64_t v91 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v41 + 4, v41 + 12);
      *(_WORD *)(v41 + 12) = 2081;
      uint64_t v85 = v41 + 14;
      uint64_t v86 = v1;
      uint64_t v44 = v93;
      uint64_t v43 = v94;
      sub_100012ED8(v92, v93);
      uint64_t v45 = v88;
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v43 + 8) + 8LL) + 32LL))(v44);
      uint64_t v46 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v47 = v90;
      uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter(v90, v46);
      unint64_t v50 = v49;
      (*(void (**)(char *, uint64_t))(v89 + 8))(v45, v47);
      uint64_t v91 = sub_1003F11D4(v48, v50, &v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v85, v41 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v92);
      _os_log_impl( (void *)&_mh_execute_header,  v39,  v40,  "Not locating shared beacon %{private,mask.hash}s.",  (uint8_t *)v41,  0x16u);
      swift_arrayDestroy(v42, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1LL, -1LL);
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    else
    {

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v92);
    }

    sub_100018C68(v87, type metadata accessor for SharedBeaconRecord);
LABEL_26:
    uint64_t v53 = 0LL;
    goto LABEL_27;
  }

  if (qword_10099B188 != -1) {
    swift_once(&qword_10099B188, sub_100189D08);
  }
  uint64_t v20 = type metadata accessor for Logger(0LL);
  sub_10000A720(v20, (uint64_t)qword_100A2A2B0);
  uint64_t v21 = sub_100013044(a1, (uint64_t)v92);
  __n128 v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc(22LL, -1LL);
    uint64_t v87 = swift_slowAlloc(32LL, -1LL);
    uint64_t v96 = v87;
    *(_DWORD *)uint64_t v24 = 141558275;
    uint64_t v91 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v24 + 4, v24 + 12);
    *(_WORD *)(v24 + 12) = 2081;
    uint64_t v85 = v24 + 14;
    uint64_t v86 = v1;
    uint64_t v26 = v93;
    uint64_t v25 = v94;
    sub_100012ED8(v92, v93);
    uint64_t v27 = v88;
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v25 + 8) + 8LL) + 32LL))(v26);
    uint64_t v28 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v29 = v90;
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter(v90, v28);
    unint64_t v32 = v31;
    (*(void (**)(char *, uint64_t))(v89 + 8))(v27, v29);
    uint64_t v91 = sub_1003F11D4(v30, v32, &v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v85, v24 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v92);
    _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "Allowed to locate owned beacon %{private,mask.hash}s.",  (uint8_t *)v24,  0x16u);
    uint64_t v33 = v87;
    swift_arrayDestroy(v87, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1LL, -1LL);
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v92);
  }

  uint64_t v51 = type metadata accessor for OwnedBeaconRecord;
  uint64_t v52 = (uint64_t)v18;
LABEL_17:
  sub_100018C68(v52, v51);
  uint64_t v53 = 1LL;
LABEL_27:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v95);
  return v53;
}

uint64_t sub_10018AF88(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v126 = a6;
  uint64_t v124 = a5;
  LODWORD(v6) = a4;
  uint64_t v120 = a2;
  uint64_t v9 = (void *)type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v10 = (char *)*(v9 - 1);
  __chkstk_darwin(v9);
  unint64_t v130 = (char *)&v116 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v129 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v128 = *(void *)(v129 - 8);
  __chkstk_darwin(v129);
  uint64_t v127 = (char *)&v116 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v121 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v122 = v14;
  uint64_t v123 = (uint64_t)&v116 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_1009AA830);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v116 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v138.n128_u64[0] = type metadata accessor for OwnedBeaconGroup(0LL);
  unint64_t v137 = *(unsigned int (***)(char *, uint64_t, unint64_t))(v138.n128_u64[0] - 8);
  uint64_t v18 = __chkstk_darwin(v138.n128_u64[0]);
  uint64_t v136 = (uint64_t *)((char *)&v116 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v135 = (uint64_t)&v116 - v21;
  __chkstk_darwin(v20);
  uint64_t v134 = (uint64_t)&v116 - v22;
  uint64_t v23 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v116 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = type metadata accessor for UUID(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v142 = v26;
  uint64_t v143 = v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v139 = (char *)&v116 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v28);
  unint64_t v31 = (char *)&v116 - v30;
  if (qword_10099B188 != -1) {
    goto LABEL_45;
  }
  while (1)
  {
    uint64_t v32 = type metadata accessor for Logger(0LL);
    uint64_t v33 = sub_10000A720(v32, (uint64_t)qword_100A2A2B0);
    uint64_t v34 = ((uint64_t (*)(uint64_t, uint64_t))swift_bridgeObjectRetain_n)(a3, 2LL);
    uint64_t v141 = v33;
    int v35 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v36 = static os_log_type_t.default.getter(v35);
    int v37 = v36;
    BOOL v38 = os_log_type_enabled(v35, v36);
    int v133 = v6;
    unint64_t v132 = v9;
    unint64_t v131 = v10;
    uint64_t v125 = a3;
    if (v38)
    {
      uint64_t v39 = swift_slowAlloc(12LL, -1LL);
      int v118 = v37;
      uint64_t v119 = (void *)a1;
      os_log_type_t v40 = (uint8_t *)v39;
      uint64_t v41 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 aBlock = v41;
      *(_DWORD *)os_log_type_t v40 = 136446210;
      uint64_t v117 = v40 + 4;
      unint64_t v42 = sub_1001B1D78();
      swift_bridgeObjectRetain(a3);
      uint64_t v44 = Set.description.getter(v43, &type metadata for LocationSource, v42);
      uint64_t v10 = v45;
      swift_bridgeObjectRelease();
      uint64_t v150 = (void *)sub_1003F11D4(v44, (unint64_t)v10, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, v151, v117, v40 + 12);
      swift_bridgeObjectRelease_n(a3, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v35,  (os_log_type_t)v118,  "Latest locations requested for sources %{public}s.",  v40,  0xCu);
      swift_arrayDestroy(v41, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1LL, -1LL);
      uint64_t v46 = v40;
      a1 = (uint64_t)v119;
      swift_slowDealloc(v46, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a3, 2LL);
    }

    uint64_t v9 = _swiftEmptyArrayStorage;
    if (*(void *)(a1 + 16)) {
      break;
    }
    a3 = *(void *)(v140 + 256);
    uint64_t v80 = (char *)sub_100508644();
    uint64_t v25 = v80;
    unint64_t v154 = _swiftEmptyArrayStorage;
    a1 = *((void *)v80 + 2);
    if (!a1)
    {
LABEL_36:
      swift_bridgeObjectRelease();
      uint64_t v136 = sub_10050CBD8();
      uint64_t v88 = (os_log_s *)Logger.logObject.getter(v136);
      os_log_type_t v89 = static os_log_type_t.default.getter(v88);
      BOOL v90 = os_log_type_enabled(v88, v89);
      uint64_t v79 = v140;
      if (v90)
      {
        uint64_t v91 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v91 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v88,  v89,  "Latest locations requested default empty array []. Returning all owned beacons.",  v91,  2u);
        swift_slowDealloc(v91, -1LL, -1LL);
      }

      goto LABEL_39;
    }

    unint64_t v6 = 0LL;
    uint64_t v17 = v80 + 32;
    while (v6 < *((void *)v25 + 2))
    {
      sub_100013044((uint64_t)v17, (uint64_t)&aBlock);
      uint64_t v81 = (uint64_t)v147;
      unint64_t v31 = (char *)v148;
      sub_100012ED8(&aBlock, (uint64_t)v147);
      if ((sub_1007940CC(v81, (uint64_t)v31) & 1) != 0)
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
      }

      else
      {
        sub_100012EC0(&aBlock, (uint64_t)&v150);
        unint64_t v82 = v154;
        if ((swift_isUniquelyReferenced_nonNull_native(v154) & 1) == 0)
        {
          sub_100032928(0, v82[2] + 1LL, 1);
          unint64_t v82 = v154;
        }

        unint64_t v31 = (char *)v82[2];
        unint64_t v83 = v82[3];
        uint64_t v84 = v152;
        uint64_t v9 = v153;
        uint64_t v85 = sub_100037298((uint64_t)&v150, v152);
        __chkstk_darwin(v85);
        uint64_t v10 = (char *)&v116 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *))(v87 + 16))(v10);
        sub_1002BBA60((uint64_t)v31, (uint64_t)v10, (uint64_t *)&v154, v84, (uint64_t)v9);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v150);
      }

      ++v6;
      v17 += 40;
      if (a1 == v6)
      {
        uint64_t v9 = v154;
        goto LABEL_36;
      }
    }

    __break(1u);
LABEL_45:
    swift_once(&qword_10099B188, sub_100189D08);
  }

  uint64_t v47 = sub_100189DA8(a1);
  uint64_t v9 = v47;
  uint64_t v48 = &_swiftEmptySetSingleton;
  unint64_t v154 = &_swiftEmptySetSingleton;
  uint64_t v49 = v47[2];
  uint64_t v119 = v47;
  if (!v49) {
    goto LABEL_16;
  }
  unint64_t v50 = v47 + 4;
  swift_bridgeObjectRetain(v47);
  do
  {
    uint64_t v54 = v50[3];
    uint64_t v53 = v50[4];
    sub_100012ED8(v50, v54);
    (*(void (**)(uint64_t, uint64_t))(v53 + 192))(v54, v53);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v143 + 48))(v25, 1LL, v142) == 1)
    {
      uint64_t v51 = (uint64_t)v25;
      uint64_t v52 = &qword_10099D8A0;
LABEL_9:
      sub_100015794(v51, v52);
      goto LABEL_10;
    }

    (*(void (**)(char *, char *, uint64_t))(v143 + 32))(v31, v25, v142);
    sub_10050F124((uint64_t)v31, (uint64_t)v17);
    if (v137[6](v17, 1LL, v138.n128_u64[0]) == 1)
    {
      (*(void (**)(char *, uint64_t))(v143 + 8))(v31, v142);
      uint64_t v51 = (uint64_t)v17;
      uint64_t v52 = &qword_1009AA830;
      goto LABEL_9;
    }

    uint64_t v55 = (uint64_t)v17;
    uint64_t v56 = v31;
    os_log_type_t v57 = v17;
    uint64_t v58 = v134;
    sub_10002218C(v55, v134, type metadata accessor for OwnedBeaconGroup);
    uint64_t v59 = v136;
    sub_10001DC4C(v58, (uint64_t)v136, type metadata accessor for OwnedBeaconGroup);
    uint64_t v60 = v135;
    sub_1000BEB90(v135, (uint64_t)v59);
    sub_100018C68(v60, type metadata accessor for OwnedBeaconGroup);
    uint64_t v61 = v58;
    uint64_t v17 = v57;
    unint64_t v31 = v56;
    sub_100018C68(v61, type metadata accessor for OwnedBeaconGroup);
    (*(void (**)(char *, uint64_t))(v143 + 8))(v56, v142);
LABEL_10:
    v50 += 5;
    --v49;
  }

  while (v49);
  uint64_t v9 = v119;
  swift_bridgeObjectRelease();
  uint64_t v48 = v154;
LABEL_16:
  swift_bridgeObjectRetain(v48);
  uint64_t v136 = sub_1002FE7FC(v62);
  swift_bridgeObjectRelease();
  uint64_t v63 = v9[2];
  if (v63)
  {
    uint64_t v64 = (uint64_t)(v9 + 4);
    __n128 v65 = swift_bridgeObjectRetain_n(v9, 2LL);
    v65.n128_u64[0] = 141558275LL;
    __n128 v138 = v65;
    unint64_t v137 = (unsigned int (**)(char *, uint64_t, unint64_t))((char *)&type metadata for Any + 8);
    uint64_t v66 = v142;
    unint64_t v67 = v139;
    do
    {
      sub_100013044(v64, (uint64_t)&aBlock);
      uint64_t v68 = sub_100013044((uint64_t)&aBlock, (uint64_t)&v150);
      uint64_t v69 = (os_log_s *)Logger.logObject.getter(v68);
      os_log_type_t v70 = static os_log_type_t.default.getter(v69);
      if (os_log_type_enabled(v69, v70))
      {
        uint64_t v71 = swift_slowAlloc(22LL, -1LL);
        uint64_t v72 = swift_slowAlloc(32LL, -1LL);
        uint64_t v144 = v72;
        *(_DWORD *)uint64_t v71 = v138.n128_u32[0];
        *(void *)(v71 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 1752392040LL;
        *(_WORD *)(v71 + 12) = 2081;
        uint64_t v73 = v152;
        uint64_t v74 = v153;
        sub_100012ED8(&v150, v152);
        (*(void (**)(uint64_t))(*(void *)(v74[1] + 8LL) + 32LL))(v73);
        uint64_t v75 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter(v66, v75);
        unint64_t v78 = v77;
        (*(void (**)(char *, uint64_t))(v143 + 8))(v67, v66);
        *(void *)(v71 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1003F11D4(v76, v78, &v144);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v150);
        _os_log_impl( (void *)&_mh_execute_header,  v69,  v70,  "Latest locations requested for beacon %{private,mask.hash}s.",  (uint8_t *)v71,  0x16u);
        swift_arrayDestroy(v72, 1LL, v137);
        swift_slowDealloc(v72, -1LL, -1LL);
        swift_slowDealloc(v71, -1LL, -1LL);
      }

      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v150);
      }

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
      v64 += 40LL;
      --v63;
    }

    while (v63);
    uint64_t v9 = v119;
    swift_bridgeObjectRelease_n(v119, 2LL);
  }

  swift_bridgeObjectRelease();
  uint64_t v79 = v140;
LABEL_39:
  uint64_t v92 = v120;
  uint64_t v93 = sub_1001ABA6C((uint64_t)v9);
  swift_bridgeObjectRelease();
  sub_1004C20A4();
  uint64_t v94 = v123;
  sub_10001581C(v92, v123, (uint64_t *)&unk_10099D720);
  uint64_t v95 = *(unsigned __int8 *)(v121 + 80);
  uint64_t v96 = (v95 + 40) & ~v95;
  unint64_t v97 = (v122 + v96 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v98 = (v97 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  id v99 = (void *)swift_allocObject(&unk_1009459E8, v98 + 16, v95 | 7);
  v99[2] = v79;
  v99[3] = v93;
  uint64_t v100 = v125;
  v99[4] = v125;
  sub_100015750(v94, (uint64_t)v99 + v96, (uint64_t *)&unk_10099D720);
  *(void *)((char *)v99 + v97) = v136;
  uint64_t v101 = (void *)((char *)v99 + v98);
  uint64_t v102 = v126;
  *uint64_t v101 = v124;
  v101[1] = v102;
  uint64_t v148 = sub_1001B1D04;
  uint64_t v149 = v99;
  *(void *)&__int128 aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256LL;
  uint64_t v146 = sub_1001C31E8;
  uint64_t v147 = &unk_100945A00;
  id v103 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain(v100);
  swift_retain();
  swift_bridgeObjectRetain(v93);
  uint64_t v104 = swift_retain();
  os_log_type_t v105 = v127;
  static DispatchQoS.unspecified.getter(v104);
  uint64_t v150 = _swiftEmptyArrayStorage;
  uint64_t v106 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v107 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v108 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v109 = v130;
  uint64_t v110 = v107;
  unint64_t v111 = v132;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v150, v110, v108, v132, v106);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v105, v109, v103);
  _Block_release(v103);
  (*((void (**)(char *, void *))v131 + 1))(v109, v111);
  (*(void (**)(char *, uint64_t))(v128 + 8))(v105, v129);
  swift_release();
  if ((v133 & 1) != 0)
  {
    uint64_t v112 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v112);
    *(&v116 - 2) = v79;
    *(&v116 - 1) = (uint64_t)v93;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.BeaconManagerService.latestLocationsFromServer",  76LL,  2LL,  sub_1001B1D60,  &v116 - 4);
  }

  uint64_t v113 = swift_bridgeObjectRelease();
  uint64_t v114 = static os_log_type_t.default.getter(v113);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  return os_log(_:dso:log:_:_:)( v114,  &_mh_execute_header,  qword_100A2B030,  "#Durian: scan for tags nearby owner.",  36LL,  2LL,  _swiftEmptyArrayStorage);
}

uint64_t sub_10018BCEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v52 = a7;
  uint64_t v53 = a5;
  uint64_t v50 = a6;
  uint64_t v51 = a3;
  uint64_t v48 = a4;
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v47 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v47 + 64);
  __chkstk_darwin(v8);
  uint64_t v49 = (uint64_t)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  char v13 = sub_1006A0D6C(v57);
  swift_bridgeObjectRelease();
  if ((v13 & 1) != 0) {
    sub_10018C088(a2);
  }
  uint64_t v14 = a2;
  uint64_t v15 = _swiftEmptyArrayStorage;
  v60[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v16 = *(void *)(v14 + 16);
  swift_bridgeObjectRetain(v14);
  if (v16)
  {
    uint64_t v18 = v17;
    uint64_t v19 = v17 + 32;
    do
    {
      sub_100013044(v19, (uint64_t)&v57);
      uint64_t v21 = v58;
      uint64_t v20 = v59;
      sub_100012ED8(&v57, v58);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v20 + 112))(v21, v20) & 1) != 0)
      {
        sub_100012EC0(&v57, (uint64_t)v54);
        uint64_t v22 = (void *)v60[0];
        if ((swift_isUniquelyReferenced_nonNull_native(v60[0]) & 1) == 0)
        {
          sub_100032928(0, v22[2] + 1LL, 1);
          uint64_t v22 = (void *)v60[0];
        }

        unint64_t v24 = v22[2];
        unint64_t v23 = v22[3];
        if (v24 >= v23 >> 1) {
          sub_100032928(v23 > 1, v24 + 1, 1);
        }
        uint64_t v25 = v55;
        uint64_t v26 = v56;
        uint64_t v27 = sub_100037298((uint64_t)v54, v55);
        __chkstk_darwin(v27);
        uint64_t v29 = (char *)&v45 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *))(v30 + 16))(v29);
        sub_1002BBA60(v24, (uint64_t)v29, v60, v25, v26);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v54);
      }

      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v57);
      }

      v19 += 40LL;
      --v16;
    }

    while (v16);
    uint64_t v15 = (void *)v60[0];
  }

  else
  {
    uint64_t v18 = v17;
  }

  swift_bridgeObjectRelease();
  uint64_t v31 = type metadata accessor for TaskPriority(0LL);
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL);
  uint64_t v46 = v12;
  v32(v12, 1LL, 1LL, v31);
  uint64_t v33 = v49;
  sub_10001581C(v48, v49, (uint64_t *)&unk_10099D720);
  uint64_t v34 = *(unsigned __int8 *)(v47 + 80);
  uint64_t v35 = (v34 + 48) & ~v34;
  unint64_t v36 = (v9 + v35 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v37 = (v36 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v38 = (v37 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v39 = (void *)swift_allocObject(&unk_100945A88, v38 + 16, v34 | 7);
  void v39[2] = 0LL;
  v39[3] = 0LL;
  uint64_t v40 = v51;
  v39[4] = v18;
  v39[5] = v40;
  sub_100015750(v33, (uint64_t)v39 + v35, (uint64_t *)&unk_10099D720);
  uint64_t v41 = v53;
  *(void *)((char *)v39 + v36) = v53;
  *(void *)((char *)v39 + v37) = v15;
  unint64_t v42 = (void *)((char *)v39 + v38);
  uint64_t v43 = v52;
  *unint64_t v42 = v50;
  v42[1] = v43;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v40);
  swift_retain();
  swift_bridgeObjectRetain(v41);
  sub_1003B76DC((uint64_t)v46, (uint64_t)&unk_1009A4988, (uint64_t)v39);
  return swift_release();
}

void sub_10018C088(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for LocationFetcher(0LL);
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v5 = *(void *)(v40 + 64);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v41 = (uint64_t)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  unint64_t v42 = (char *)&v38 - v7;
  id v8 = [(id)objc_opt_self(NSBundle) mainBundle];
  id v9 = [v8 bundleIdentifier];

  if (v9)
  {
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    uint64_t v43 = v10;
  }

  else
  {
    uint64_t v39 = 0LL;
    uint64_t v43 = 0LL;
  }

  uint64_t v11 = sub_10036DB04();
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v12 = sub_1006A0F4C(v44[0]);
  swift_bridgeObjectRelease();
  uint64_t My = type metadata accessor for Feature.FindMy(0LL);
  uint64_t v45 = (ValueMetadata *)My;
  unint64_t v46 = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  uint64_t v14 = sub_10000A7C8(v44);
  (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v14,  enum case for Feature.FindMy.networkScalingImprovements(_:),  My);
  char v15 = isFeatureEnabled(_:)(v44);
  uint64_t v16 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v44);
  __chkstk_darwin(v16);
  *(&v38 - 2) = a1;
  *(&v38 - 1) = v2;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009B81E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_1001B1590, &v38 - 4, v17);
  uint64_t v18 = v44[0];
  if (*(void *)(v44[0] + 16))
  {
    uint64_t v19 = *(void *)(v2 + 256);
    uint64_t v45 = &_s13DefaultPolicyVN;
    unint64_t v46 = sub_1001B15A8();
    uint64_t v20 = swift_allocObject(&unk_100945740, 97LL, 7LL);
    v44[0] = v20;
    *(void *)(v20 + swift_weakDestroy(v0 + 16) = v12;
    *(_BYTE *)(v20 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 1;
    *(void *)(v20 + 32) = &off_100933960;
    *(_BYTE *)(v20 + 40) = 0;
    uint64_t v21 = v43;
    *(void *)(v20 + 48) = v39;
    *(void *)(v20 + 56) = v21;
    *(void *)(v20 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v11;
    *(_BYTE *)(v20 + 72) = v15 & 1;
    *(void *)(v20 + 80) = 0LL;
    *(void *)(v20 + 88) = 0LL;
    *(_BYTE *)(v20 + 96) = 1;
    uint64_t v22 = qword_10099B300;
    swift_retain();
    if (v22 != -1) {
      swift_once(&qword_10099B300, sub_1003459EC);
    }
    uint64_t v23 = qword_100A2A6C8;
    swift_retain();
    unint64_t v24 = sub_1004132F8((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v25 = v42;
    sub_1002190F8(v19, v44, v23, v24, v42);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(a1);
    uint64_t v27 = sub_1001AAB80(v26, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v28 = swift_allocObject(&unk_100945768, 32LL, 7LL);
    *(void *)(v28 + swift_weakDestroy(v0 + 16) = v2;
    *(void *)(v28 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v18;
    type metadata accessor for Transaction(0LL);
    uint64_t v29 = v41;
    sub_10001DC4C((uint64_t)v25, v41, type metadata accessor for LocationFetcher);
    uint64_t v30 = *(unsigned __int8 *)(v40 + 80);
    uint64_t v31 = (v30 + 40) & ~v30;
    uint64_t v32 = (void *)swift_allocObject(&unk_100945790, v31 + v5, v30 | 7);
    void v32[2] = sub_1001B164C;
    v32[3] = v28;
    void v32[4] = v27;
    sub_10002218C(v29, (uint64_t)v32 + v31, type metadata accessor for LocationFetcher);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain(v27);
    static Transaction.asyncTask(name:block:)("beaconsFromDisk.FromDisk", 24LL, 2LL, &unk_1009A48C0, v32);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    sub_100018C68((uint64_t)v25, type metadata accessor for LocationFetcher);
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_10099B188 != -1) {
      swift_once(&qword_10099B188, sub_100189D08);
    }
    uint64_t v33 = type metadata accessor for Logger(0LL);
    uint64_t v34 = sub_10000A720(v33, (uint64_t)qword_100A2A2B0);
    uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v36 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      unint64_t v37 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "No new beacons to locate on disk. Skipping.", v37, 2u);
      swift_slowDealloc(v37, -1LL, -1LL);
    }
  }

uint64_t sub_10018C580( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[81] = v25;
  v8[80] = v24;
  v8[79] = a8;
  v8[78] = a7;
  v8[77] = a6;
  v8[76] = a5;
  v8[75] = a4;
  uint64_t v9 = type metadata accessor for OwnedBeaconGroup(0LL);
  v8[82] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[83] = v10;
  v8[84] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D720);
  v8[85] = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Date(0LL);
  v8[86] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v8[87] = v13;
  unint64_t v14 = (*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[88] = swift_task_alloc(v14);
  v8[89] = swift_task_alloc(v14);
  v8[90] = swift_task_alloc(v14);
  unint64_t v15 = (*(void *)(*(void *)(sub_100004AEC(&qword_1009A48E0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[91] = swift_task_alloc(v15);
  v8[92] = swift_task_alloc(v15);
  uint64_t v16 = type metadata accessor for BeaconEstimatedLocation(0LL);
  v8[93] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v8[94] = v17;
  unint64_t v18 = (*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[95] = swift_task_alloc(v18);
  v8[96] = swift_task_alloc(v18);
  v8[97] = swift_task_alloc(v18);
  v8[98] = swift_task_alloc(v18);
  v8[99] = swift_task_alloc(v18);
  v8[100] = swift_task_alloc(v18);
  v8[101] = swift_task_alloc(v18);
  unint64_t v19 = (*(void *)(*(void *)(sub_100004AEC(&qword_10099CA60) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[102] = swift_task_alloc(v19);
  v8[103] = swift_task_alloc(v19);
  uint64_t v20 = type metadata accessor for UUID(0LL);
  v8[104] = v20;
  uint64_t v21 = *(void *)(v20 - 8);
  v8[105] = v21;
  unint64_t v22 = (*(void *)(v21 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[106] = swift_task_alloc(v22);
  v8[107] = swift_task_alloc(v22);
  v8[108] = swift_task_alloc(v22);
  v8[109] = swift_task_alloc(v22);
  v8[110] = swift_task_alloc(v22);
  v8[111] = swift_task_alloc(v22);
  v8[112] = swift_task_alloc(v22);
  v8[113] = swift_task_alloc(v22);
  return swift_task_switch(sub_10018C7C0, 0LL, 0LL);
}

uint64_t sub_10018C7C0(uint64_t a1)
{
  v1[60] = 0LL;
  UUID.init()(a1);
  uint64_t v2 = type metadata accessor for AnalyticsEvent(0LL);
  v1[114] = v2;
  uint64_t v3 = (char *)swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v1[115] = v3;
  swift_defaultActor_initialize();
  unint64_t v4 = sub_10041271C((uint64_t)_swiftEmptyArrayStorage);
  *((void *)v3 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v4;
  UUID.init()(v4);
  uint64_t v5 = &v3[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v6 = type metadata accessor for DispatchTime(0LL);
  v1[116] = v6;
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL);
  v1[117] = v7;
  v7(v5, 1LL, 1LL, v6);
  v7(&v3[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1LL, 1LL, v6);
  *((void *)v3 + 15) = 0xD00000000000002ELL;
  *((void *)v3 + swift_weakDestroy(v0 + 16) = 0x8000000100857130LL;
  return swift_task_switch(sub_10018C8CC, v3, 0LL);
}

uint64_t sub_10018C8CC(uint64_t a1)
{
  uint64_t v2 = (void (*)(uint64_t, void, uint64_t, uint64_t))v1[117];
  uint64_t v3 = v1[116];
  uint64_t v4 = v1[115];
  uint64_t v5 = v1[103];
  uint64_t v6 = v1[102];
  static DispatchTime.now()(a1);
  v2(v5, 0LL, 1LL, v3);
  sub_100015750(v5, v6, &qword_10099CA60);
  uint64_t v7 = v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess(v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime, v1 + 45, 33LL, 0LL);
  sub_100015680(v6, v7);
  swift_endAccess(v1 + 45);
  return swift_task_switch(sub_10018C990, 0LL, 0LL);
}

uint64_t sub_10018C990()
{
  *(void *)(v0 + 432) = &_swiftEmptyDictionarySingleton;
  *(void *)(v0 + 440) = 0LL;
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 336, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 256, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 280))
  {
    sub_100012EC0((__int128 *)(v0 + 256), v0 + 176);
    sub_100012ED8((void *)(v0 + 176), *(void *)(v0 + 200));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C890 + dword_10099C890);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 94_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10018CA88;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10018CA88(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 944LL);
  *(void *)(*(void *)v1 + 952LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10018CAE4, 0LL, 0LL);
}

uint64_t sub_10018CAE4()
{
  uint64_t v1 = (void *)(v0 + 176);
  if (!*(void *)(v0 + 952))
  {
    uint64_t v11 = *(void *)(v0 + 904);
    uint64_t v12 = *(void *)(v0 + 896);
    uint64_t v13 = *(void *)(v0 + 888);
    uint64_t v14 = *(void *)(v0 + 880);
    uint64_t v87 = *(void *)(v0 + 872);
    uint64_t v88 = *(void *)(v0 + 864);
    uint64_t v90 = *(void *)(v0 + 856);
    uint64_t v91 = *(void *)(v0 + 848);
    uint64_t v15 = *(void *)(v0 + 840);
    uint64_t v16 = *(void *)(v0 + 832);
    uint64_t v93 = *(void *)(v0 + 824);
    uint64_t v95 = *(void *)(v0 + 816);
    uint64_t v97 = *(void *)(v0 + 808);
    uint64_t v99 = *(void *)(v0 + 800);
    uint64_t v101 = *(void *)(v0 + 792);
    uint64_t v103 = *(void *)(v0 + 784);
    uint64_t v105 = *(void *)(v0 + 776);
    uint64_t v107 = *(void *)(v0 + 768);
    uint64_t v109 = *(void *)(v0 + 760);
    uint64_t v112 = *(void *)(v0 + 736);
    uint64_t v113 = *(void *)(v0 + 728);
    uint64_t v115 = *(void *)(v0 + 720);
    uint64_t v117 = *(void *)(v0 + 712);
    uint64_t v118 = *(void *)(v0 + 704);
    uint64_t v120 = *(void *)(v0 + 680);
    uint64_t v122 = *(void *)(v0 + 672);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    unint64_t v17 = sub_1000157D0();
    uint64_t v18 = swift_allocError(&type metadata for DaemonError, v17, 0LL, 0LL);
    *unint64_t v19 = 0xD000000000000010LL;
    v19[1] = 0x8000000100850F20LL;
    swift_willThrow(v18);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v11, v16);
    swift_bridgeObjectRelease();
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v93);
    swift_task_dealloc(v95);
    swift_task_dealloc(v97);
    swift_task_dealloc(v99);
    swift_task_dealloc(v101);
    swift_task_dealloc(v103);
    swift_task_dealloc(v105);
    swift_task_dealloc(v107);
    swift_task_dealloc(v109);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v115);
    swift_task_dealloc(v117);
    swift_task_dealloc(v118);
    swift_task_dealloc(v120);
    swift_task_dealloc(v122);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v2 = *(void *)(v0 + 600);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = (void *)v111;
  *(void *)(v111 + 960) = v3;
  if (v3)
  {
    uint64_t v5 = *(void *)(v111 + 600);
    *(_OWORD *)(v111 + 968) = 0u;
    *(_OWORD *)(v111 + 98_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 0u;
    uint64_t v6 = v5 + 32;
    swift_bridgeObjectRetain(v5);
    sub_100013044(v6, v111 + 296);
    uint64_t v7 = *(void *)(v111 + 320);
    uint64_t v8 = *(void *)(v111 + 328);
    sub_100012ED8((void *)(v111 + 296), v7);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v8 + 8) + 8LL) + 32LL))(v7);
    uint64_t v9 = (void *)swift_task_alloc(dword_1009B63A4);
    *(void *)(v111 + 1000) = v9;
    *uint64_t v9 = v111;
    v9[1] = sub_10018D480;
    return sub_1005EBD74(v111 + 296);
  }

  uint64_t v20 = *(void *)(v111 + 624);
  uint64_t v21 = *(void *)(v20 + 16);
  if (!v21)
  {
LABEL_54:
    unint64_t v78 = v4 + 55;
    uint64_t v79 = v4 + 60;
    uint64_t v80 = v4 + 51;
    v4[147] = 0LL;
    v4[51] = 0LL;
    uint64_t v81 = v4;
    uint64_t v82 = v4[115];
    uint64_t v83 = v81[113];
    uint64_t v84 = v81[79];
    uint64_t v85 = v81[75];
    uint64_t v86 = (void *)swift_task_alloc(64LL);
    v81[148] = v86;
    v86[2] = v85;
    v86[3] = v84;
    v86[4] = v83;
    v86[5] = v78;
    v86[6] = v79;
    v86[7] = v80;
    return swift_task_switch(sub_100190724, v82, 0LL);
  }

  uint64_t v121 = (void *)(v111 + 216);
  unint64_t v22 = (uint64_t *)(v111 + 432);
  uint64_t v89 = *(void *)(v111 + 840);
  uint64_t v106 = *(void *)(v111 + 696);
  uint64_t v23 = *(void *)(v111 + 664);
  uint64_t v98 = v20 + ((*(unsigned __int8 *)(v23 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
  uint64_t v94 = *(void *)(v111 + 656);
  uint64_t v96 = *(void *)(v23 + 72);
  swift_bridgeObjectRetain(v20);
  uint64_t v24 = 0LL;
  uint64_t v92 = v21;
  uint64_t v102 = (void *)(v111 + 96);
  uint64_t v104 = (void *)(v111 + 56);
  uint64_t v100 = (void *)(v111 + 136);
  while (1)
  {
    uint64_t v116 = v24;
    sub_10001DC4C(v98 + v24 * v96, v4[84], type metadata accessor for OwnedBeaconGroup);
    sub_1001CC778();
    sub_100189694(v26, v22);
    uint64_t v28 = v27;
    swift_bridgeObjectRelease();
    unint64_t v29 = (unint64_t)v28 >> 62;
    uint64_t v30 = *(void *)((v28 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v28);
    uint64_t v4 = (void *)v111;
    if (v30) {
      goto LABEL_12;
    }
LABEL_7:
    uint64_t v25 = v4[84];
    swift_bridgeObjectRelease();
    sub_100018C68(v25, type metadata accessor for OwnedBeaconGroup);
LABEL_8:
    swift_bridgeObjectRelease();
LABEL_9:
    uint64_t v24 = v116 + 1;
    if (v116 + 1 == v21)
    {
      swift_bridgeObjectRelease();
      goto LABEL_54;
    }
  }

  if (v28 < 0) {
    uint64_t v77 = v28;
  }
  else {
    uint64_t v77 = v28 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v28);
  uint64_t v4 = (void *)v111;
  if (!_CocoaArrayWrapper.endIndex.getter(v77)) {
    goto LABEL_7;
  }
LABEL_12:
  unint64_t v114 = v28 & 0xC000000000000001LL;
  if ((v28 & 0xC000000000000001LL) != 0)
  {
    id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v28);
  }

  else
  {
    if (!*(void *)((v28 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_56;
    }
    id v31 = *(id *)(v28 + 32);
  }

  uint64_t v123 = v31;
  swift_bridgeObjectRelease();
  if (v29)
  {
    if (v28 < 0) {
      uint64_t v33 = v28;
    }
    else {
      uint64_t v33 = v28 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v28);
    uint64_t v32 = _CocoaArrayWrapper.endIndex.getter(v33);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v32 = *(void *)((v28 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v34 = v4[84];
  unint64_t v35 = *(void *)(*(void *)(v34 + *(int *)(v94 + 40)) + 16LL);
  if (v35 >= 0x100) {
    return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
  }
  if (v32 != v35)
  {
    sub_100018C68(v34, type metadata accessor for OwnedBeaconGroup);

    goto LABEL_8;
  }

  if (!v29)
  {
    uint64_t v36 = *(void *)((v28 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v28);
    id v37 = v123;
    if (v36) {
      goto LABEL_31;
    }
    goto LABEL_41;
  }

  if (v28 < 0) {
    uint64_t v38 = v28;
  }
  else {
    uint64_t v38 = v28 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v28);
  id v39 = v123;
  uint64_t v36 = _CocoaArrayWrapper.endIndex.getter(v38);
  if (!v36)
  {
LABEL_41:
    uint64_t v69 = v4[106];
    uint64_t v70 = v4[104];
    uint64_t v71 = v28;
    uint64_t v72 = v4[84];
    swift_bridgeObjectRelease_n(v71, 2LL);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v89 + 16))(v69, v72 + *(int *)(v94 + 24), v70);
    id v73 = v123;
    uint64_t v74 = *(void *)(v111 + 432);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v74);
    uint64_t v124 = v74;
    sub_10005CC34((uint64_t)v73, v69, isUniquelyReferenced_nonNull_native);
    uint64_t v4 = (void *)v111;
    *(void *)(v111 + 432) = v124;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v69, v70);

    sub_100018C68(v72, type metadata accessor for OwnedBeaconGroup);
LABEL_46:
    unint64_t v22 = (uint64_t *)(v111 + 432);
    uint64_t v21 = v92;
    goto LABEL_9;
  }

uint64_t sub_10018D480(uint64_t a1)
{
  uint64_t v2 = (*v1)[125];
  uint64_t v5 = *v1;
  v5[126] = a1;
  swift_task_dealloc(v2);
  uint64_t v3 = (uint64_t **)swift_task_alloc(dword_1009B6394);
  v5[127] = (uint64_t)v3;
  *uint64_t v3 = v5;
  v3[1] = (uint64_t *)sub_10018D4F8;
  return sub_1005EB9CC(v5[112]);
}

uint64_t sub_10018D4F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1016LL);
  *(void *)(*(void *)v1 + 1024LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10018D554, 0LL, 0LL);
}

void sub_10018D554()
{
  uint64_t v1 = *(void *)(v0 + 1024);
  uint64_t v2 = *(void *)(v0 + 608);
  *(void *)(v0 + 42_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = _swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain_n(v2, 2LL);
  swift_bridgeObjectRetain(v1);
  if (v3)
  {
    unint64_t v4 = 0LL;
    __int128 v169 = (uint64_t *)(v0 + 424);
    while (1)
    {
      if (v4 >= *(void *)(v1 + 16))
      {
        __break(1u);
        goto LABEL_105;
      }

      uint64_t v5 = *(void *)(v0 + 752);
      uint64_t v6 = *(void *)(v0 + 608);
      unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      uint64_t v8 = *(void *)(v5 + 72);
      sub_10001DC4C( *(void *)(v0 + 1024) + v7 + v8 * v4,  *(void *)(v0 + 808),  type metadata accessor for BeaconEstimatedLocation);
      if (!*(void *)(v6 + 16)) {
        break;
      }
      uint64_t v9 = *(void *)(v0 + 608);
      Swift::UInt v10 = *(unsigned __int8 *)(*(void *)(v0 + 808) + *(int *)(*(void *)(v0 + 744) + 44LL));
      Hasher.init(_seed:)(v172, *(void *)(v9 + 40));
      Hasher._combine(_:)(v10);
      Swift::Int v11 = Hasher._finalize()();
      uint64_t v12 = -1LL << *(_BYTE *)(v9 + 32);
      unint64_t v13 = v11 & ~v12;
      if (((*(void *)(v9 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v13) & 1) != 0)
      {
        uint64_t v14 = *(void *)(v0 + 608);
        uint64_t v15 = *(void *)(v14 + 48);
        uint64_t v16 = ~v12;
        uint64_t v17 = v14 + 56;
        while (1)
        {
          unint64_t v13 = (v13 + 1) & v16;
          if (((*(void *)(v17 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
            break;
          }
        }
      }

      sub_100018C68(*(void *)(v0 + 808), type metadata accessor for BeaconEstimatedLocation);
LABEL_4:
      if (++v4 == v3) {
        goto LABEL_17;
      }
    }

LABEL_119:
        __break(1u);
        return;
      }

  __break(1u);
LABEL_120:
  ((void (*)(uint64_t, uint64_t))v9)(v5, isUniquelyReferenced_nonNull_native);
  uint64_t result = swift_task_dealloc(v5);
LABEL_121:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_120:
  ((void (*)(uint64_t, uint64_t))v9)(v5, isUniquelyReferenced_nonNull_native);
  uint64_t result = swift_task_dealloc(v5);
LABEL_121:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_120:
  ((void (*)(uint64_t, uint64_t))v9)(v5, isUniquelyReferenced_nonNull_native);
  uint64_t result = swift_task_dealloc(v5);
LABEL_121:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_120:
  ((void (*)(uint64_t, uint64_t))v9)(v5, isUniquelyReferenced_nonNull_native);
  uint64_t result = swift_task_dealloc(v5);
LABEL_121:
  __break(1u);
  return result;
}

LABEL_117:
    __break(1u);
    goto LABEL_118;
  }

  uint64_t v70 = (uint64_t *)(v0 + 432);
  uint64_t v151 = *(void *)(v0 + 840);
  uint64_t v159 = *(void *)(v0 + 696);
  __int128 v160 = (void *)(v0 + 216);
  uint64_t v71 = *(void *)(v0 + 664);
  uint64_t v154 = *(void *)(v0 + 656);
  uint64_t v156 = v68 + ((*(unsigned __int8 *)(v71 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80));
  uint64_t v157 = (void *)(v0 + 136);
  uint64_t v155 = *(void *)(v71 + 72);
  swift_bridgeObjectRetain(v68);
  uint64_t v72 = 0LL;
  uint64_t v158 = (void *)(v0 + 56);
  while (1)
  {
    uint64_t v165 = v72;
    sub_10001DC4C(v156 + v72 * v155, *(void *)(v0 + 672), type metadata accessor for OwnedBeaconGroup);
    sub_1001CC778();
    sub_100189694(v74, v70);
    uint64_t v76 = v75;
    swift_bridgeObjectRelease();
    unint64_t v77 = (unint64_t)v76 >> 62;
    uint64_t v78 = *(void *)((v76 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v76);
    if (v78) {
      goto LABEL_42;
    }
LABEL_37:
    uint64_t v73 = *(void *)(v0 + 672);
    swift_bridgeObjectRelease();
    sub_100018C68(v73, type metadata accessor for OwnedBeaconGroup);
LABEL_38:
    swift_bridgeObjectRelease();
LABEL_39:
    uint64_t v72 = v165 + 1;
    if (v165 + 1 == v69)
    {
      swift_bridgeObjectRelease();
      goto LABEL_98;
    }
  }

  if (v76 < 0) {
    uint64_t v124 = v76;
  }
  else {
    uint64_t v124 = v76 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v76);
  if (!_CocoaArrayWrapper.endIndex.getter(v124)) {
    goto LABEL_37;
  }
LABEL_42:
  unint64_t v164 = v76 & 0xC000000000000001LL;
  if ((v76 & 0xC000000000000001LL) != 0)
  {
    id v79 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v76);
  }

  else
  {
    if (!*(void *)((v76 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_106;
    }
    id v79 = *(id *)(v76 + 32);
  }

  uint64_t v80 = v79;
  swift_bridgeObjectRelease();
  if (v77)
  {
    if (v76 < 0) {
      uint64_t v82 = v76;
    }
    else {
      uint64_t v82 = v76 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v76);
    uint64_t v81 = _CocoaArrayWrapper.endIndex.getter(v82);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v81 = *(void *)((v76 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v83 = *(void *)(v0 + 672);
  unint64_t v84 = *(void *)(*(void *)(v83 + *(int *)(v154 + 40)) + 16LL);
  if (v84 >= 0x100) {
    goto LABEL_107;
  }
  if (v81 != v84)
  {
    sub_100018C68(v83, type metadata accessor for OwnedBeaconGroup);

    goto LABEL_38;
  }

  if (!v77)
  {
    uint64_t v85 = *(void *)((v76 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v76);
    id v86 = v80;
    if (v85) {
      goto LABEL_61;
    }
    goto LABEL_71;
  }

  if (v76 < 0) {
    uint64_t v87 = v76;
  }
  else {
    uint64_t v87 = v76 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v76);
  id v88 = v80;
  uint64_t v85 = _CocoaArrayWrapper.endIndex.getter(v87);
  if (!v85)
  {
LABEL_71:
    uint64_t v117 = *(void *)(v0 + 848);
    uint64_t v118 = *(void *)(v0 + 832);
    uint64_t v119 = *(void *)(v0 + 672);
    swift_bridgeObjectRelease_n(v76, 2LL);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v151 + 16))(v117, v119 + *(int *)(v154 + 24), v118);
    id v120 = v80;
    uint64_t v121 = *(void *)(v0 + 432);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v121);
    v172[0] = v121;
    sub_10005CC34((uint64_t)v120, v117, isUniquelyReferenced_nonNull_native);
    *(void *)(v0 + 432) = v172[0];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v151 + 8))(v117, v118);

    sub_100018C68(v119, type metadata accessor for OwnedBeaconGroup);
LABEL_76:
    uint64_t v70 = (uint64_t *)(v0 + 432);
    uint64_t v69 = v153;
    goto LABEL_39;
  }

      swift_bridgeObjectRelease();
      v123[2] = 0LL;
      return swift_bridgeObjectRelease();
    }

    uint64_t v123 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v14 = v13 >> 1;
    uint64_t v15 = static Array._allocateBufferUninitialized(minimumCapacity:)(v13 >> 1, RequestBeacon);
    *(void *)(v15 + swift_weakDestroy(v0 + 16) = v14;
    uint64_t v16 = *(unsigned __int8 *)(v3 + 80);
    uint64_t v123 = (void *)v15;
    uint64_t v131 = v15 + ((v16 + 32) & ~v16);
  }

  uint64_t v18 = 0LL;
  unint64_t v19 = (char *)_swiftEmptyArrayStorage;
  uint64_t v138 = a1;
  while (1)
  {
    uint64_t v21 = v18;
    uint64_t v22 = v18 + 1;
    uint64_t v130 = v18;
    if (v18 + 1 >= v11)
    {
      uint64_t v30 = v18 + 1;
      goto LABEL_58;
    }

    uint64_t v23 = *a1;
    uint64_t v24 = *(void *)(v3 + 72);
    uint64_t v25 = v135;
    sub_10001DC4C(v23 + v24 * v22, v135, type metadata accessor for FetchRequestBeacon);
    uint64_t v140 = v11;
    uint64_t v26 = v136;
    uint64_t v27 = sub_10001DC4C(v23 + v24 * v21, v136, type metadata accessor for FetchRequestBeacon);
    uint64_t v137 = UUID.hashValue.getter(v27);
    uint64_t v134 = UUID.hashValue.getter(v137);
    uint64_t v28 = v26;
    uint64_t v29 = v140;
    sub_100018C68(v28, type metadata accessor for FetchRequestBeacon);
    sub_100018C68(v25, type metadata accessor for FetchRequestBeacon);
    uint64_t v30 = v21 + 2;
    uint64_t v127 = v23;
    double v141 = v24;
    if (v21 + 2 < v29)
    {
      uint64_t v125 = v19;
      uint64_t v128 = v24 * v22;
      uint64_t v31 = v23;
      uint64_t v32 = v24 * v30;
      while (1)
      {
        uint64_t v33 = v135;
        uint64_t v34 = v137 < v134;
        sub_10001DC4C(v31 + v32, v135, type metadata accessor for FetchRequestBeacon);
        uint64_t v35 = v136;
        uint64_t v36 = sub_10001DC4C(v31 + v128, v136, type metadata accessor for FetchRequestBeacon);
        os_log_type_t v37 = UUID.hashValue.getter(v36);
        LODWORD(v37) = v37 >= UUID.hashValue.getter(v37);
        sub_100018C68(v35, type metadata accessor for FetchRequestBeacon);
        sub_100018C68(v33, type metadata accessor for FetchRequestBeacon);
        if (v34 == (_DWORD)v37) {
          break;
        }
        ++v30;
        v31 += v141;
        uint64_t v29 = v140;
        if (v140 == v30)
        {
          uint64_t v30 = v140;
          unint64_t v19 = v125;
          uint64_t v3 = v126;
          uint64_t v21 = v130;
          goto LABEL_24;
        }
      }

      unint64_t v19 = v125;
      uint64_t v3 = v126;
      uint64_t v21 = v130;
      uint64_t v29 = v140;
LABEL_24:
      uint64_t v23 = v127;
    }

    if (v137 < v134)
    {
      if (v30 < v21) {
        goto LABEL_142;
      }
      if (v21 < v30) {
        break;
      }
    }

    a1 = v138;
    if (v30 < v29) {
      goto LABEL_41;
    }
LABEL_58:
    if (v30 < v21) {
      goto LABEL_135;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
    uint64_t v137 = v30;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      unint64_t v19 = sub_1003CB1DC(0LL, *((void *)v19 + 2) + 1LL, 1, v19);
    }
    char v63 = *((void *)v19 + 2);
    uint64_t v62 = *((void *)v19 + 3);
    unint64_t v20 = v63 + 1;
    if (v63 >= v62 >> 1) {
      unint64_t v19 = sub_1003CB1DC((char *)(v62 > 1), v63 + 1, 1, v19);
    }
    *((void *)v19 + 2) = v20;
    double v64 = v19 + 32;
    uint64_t v65 = &v19[16 * v63 + 32];
    uint64_t v66 = v137;
    *(void *)uint64_t v65 = v21;
    *((void *)v65 + 1) = v66;
    if (v63)
    {
      while (1)
      {
        uint64_t v67 = v20 - 1;
        if (v20 >= 4)
        {
          uint64_t v72 = &v64[16 * v20];
          uint64_t v73 = *((void *)v72 - 8);
          uint64_t v74 = *((void *)v72 - 7);
          uint64_t v78 = __OFSUB__(v74, v73);
          uint64_t v75 = v74 - v73;
          if (v78) {
            goto LABEL_124;
          }
          unint64_t v77 = *((void *)v72 - 6);
          uint64_t v76 = *((void *)v72 - 5);
          uint64_t v78 = __OFSUB__(v76, v77);
          uint64_t v70 = v76 - v77;
          uint64_t v71 = v78;
          if (v78) {
            goto LABEL_125;
          }
          id v79 = v20 - 2;
          uint64_t v80 = &v64[16 * v20 - 32];
          uint64_t v82 = *(void *)v80;
          uint64_t v81 = *((void *)v80 + 1);
          uint64_t v78 = __OFSUB__(v81, v82);
          uint64_t v83 = v81 - v82;
          if (v78) {
            goto LABEL_127;
          }
          uint64_t v78 = __OFADD__(v70, v83);
          unint64_t v84 = v70 + v83;
          if (v78) {
            goto LABEL_130;
          }
          if (v84 >= v75)
          {
            double v102 = &v64[16 * v67];
            double v104 = *(void *)v102;
            double v103 = *((void *)v102 + 1);
            uint64_t v78 = __OFSUB__(v103, v104);
            uint64_t v105 = v103 - v104;
            if (v78) {
              goto LABEL_134;
            }
            id v95 = v70 < v105;
            goto LABEL_95;
          }
        }

        else
        {
          if (v20 != 3)
          {
            uint64_t v96 = *((void *)v19 + 4);
            id v97 = *((void *)v19 + 5);
            uint64_t v78 = __OFSUB__(v97, v96);
            uint64_t v89 = v97 - v96;
            id v90 = v78;
            goto LABEL_89;
          }

          uint64_t v69 = *((void *)v19 + 4);
          uint64_t v68 = *((void *)v19 + 5);
          uint64_t v78 = __OFSUB__(v68, v69);
          uint64_t v70 = v68 - v69;
          uint64_t v71 = v78;
        }

        if ((v71 & 1) != 0) {
          goto LABEL_126;
        }
        id v79 = v20 - 2;
        uint64_t v85 = &v64[16 * v20 - 32];
        uint64_t v87 = *(void *)v85;
        id v86 = *((void *)v85 + 1);
        id v88 = __OFSUB__(v86, v87);
        uint64_t v89 = v86 - v87;
        id v90 = v88;
        if (v88) {
          goto LABEL_129;
        }
        uint64_t v91 = &v64[16 * v67];
        uint64_t v93 = *(void *)v91;
        uint64_t v92 = *((void *)v91 + 1);
        uint64_t v78 = __OFSUB__(v92, v93);
        uint64_t v94 = v92 - v93;
        if (v78) {
          goto LABEL_132;
        }
        if (__OFADD__(v89, v94)) {
          goto LABEL_133;
        }
        if (v89 + v94 >= v70)
        {
          id v95 = v70 < v94;
LABEL_95:
          if (v95) {
            uint64_t v67 = v79;
          }
          goto LABEL_97;
        }

      id v95 = swift_isUniquelyReferenced_nonNull_native(v83);
      v195._countAndFlagsBits = (uint64_t)v83;
      if ((v95 & 1) == 0)
      {
        sub_1000334A8(0, v83[2] + 1LL, 1);
        uint64_t v83 = (void *)v195._countAndFlagsBits;
      }

      id v97 = v83[2];
      uint64_t v96 = v83[3];
      if (v97 >= v96 >> 1)
      {
        sub_1000334A8(v96 > 1, v97 + 1, 1);
        uint64_t v83 = (void *)v195._countAndFlagsBits;
      }

      v83[2] = v97 + 1;
      id v98 = &v83[2 * v97];
      v98[4] = v93;
      *((_BYTE *)v98 + 40) = v94;
      if (!v80) {
        goto LABEL_95;
      }
LABEL_94:
      uint64_t v87 = __clz(__rbit64(v80));
      v80 &= v80 - 1;
    }
  }

  uint64_t v91 = v89 + 5;
  if (v91 < v81)
  {
    id v90 = *(void *)(v27 + 8 * v91);
    if (!v90)
    {
      while (1)
      {
        uint64_t v82 = v91 + 1;
        if (__OFADD__(v91, 1LL)) {
          goto LABEL_190;
        }
        if (v82 >= v81) {
          goto LABEL_123;
        }
        id v90 = *(void *)(v27 + 8 * v82);
        ++v91;
        if (v90) {
          goto LABEL_112;
        }
      }
    }

    uint64_t v82 = v91;
    goto LABEL_112;
  }

LABEL_61:
  uint64_t v89 = 0LL;
  __int128 v162 = v80;
  uint64_t v163 = v76;
  uint64_t v161 = v85;
  while (1)
  {
    id v90 = v164
        ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v89, v76)
        : *(id *)(v76 + 8 * v89 + 32);
    uint64_t v91 = v90;
    if (__OFADD__(v89, 1LL)) {
      break;
    }
    uint64_t v168 = v89 + 1;
    uint64_t v92 = *(void *)(v0 + 720);
    uint64_t v93 = *(void *)(v0 + 704);
    uint64_t v94 = *(void *)(v0 + 688);
    *(void *)(v0 + 80) = sub_100022898(0LL, (unint64_t *)&qword_1009A9C60, &OBJC_CLASS___SPBeaconLocation_ptr);
    *(void *)(v0 + 88) = &off_100974788;
    *(void *)(v0 + 56) = v80;
    id v95 = v80;
    uint64_t v96 = v91;
    id v97 = [v91 timestamp];
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v97);

    __int128 v171 = v95;
    id v98 = [v95 timestamp];
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v98);

    LOBYTE(v98) = static Date.== infix(_:_:)(v92, v93);
    uint64_t v99 = *(void (**)(uint64_t, uint64_t))(v159 + 8);
    v99(v93, v94);
    v99(v92, v94);
    sub_100013044((uint64_t)v158, (uint64_t)v160);
    if ((v98 & 1) == 0)
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v160);
      uint64_t v105 = (void *)(v0 + 136);
      sub_100013044((uint64_t)v158, (uint64_t)v157);
LABEL_73:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v105);
      sub_100013044((uint64_t)v158, v0 + 96);
      uint64_t v111 = v171;
LABEL_74:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 96));
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v158);

LABEL_75:
      swift_bridgeObjectRelease();

      uint64_t v123 = *(void *)(v0 + 672);
      swift_bridgeObjectRelease();
      sub_100018C68(v123, type metadata accessor for OwnedBeaconGroup);

      goto LABEL_76;
    }

    id v100 = v96;
    [v100 longitude];
    double v102 = v101;
    objc_msgSend((id)*sub_100012ED8(v160, *(void *)(v0 + 240)), "longitude");
    double v104 = v103;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v160);
    uint64_t v105 = (void *)(v0 + 136);
    sub_100013044((uint64_t)v158, (uint64_t)v157);
    if (v102 != v104) {
      goto LABEL_73;
    }
    id v106 = v100;
    [v106 latitude];
    double v108 = v107;
    objc_msgSend((id)*sub_100012ED8(v157, *(void *)(v0 + 160)), "latitude");
    double v110 = v109;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v157);
    sub_100013044((uint64_t)v158, v0 + 96);
    uint64_t v111 = v171;
    if (v108 != v110) {
      goto LABEL_74;
    }
    id v112 = v106;
    [v112 horizontalAccuracy];
    double v114 = v113;
    objc_msgSend((id)*sub_100012ED8((void *)(v0 + 96), *(void *)(v0 + 120)), "horizontalAccuracy");
    double v116 = v115;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 96));
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v158);

    if (v114 != v116) {
      goto LABEL_75;
    }
    ++v89;
    uint64_t v80 = v162;
    uint64_t v76 = v163;
    if (v168 == v161) {
      goto LABEL_71;
    }
  }

  swift_bridgeObjectRelease();
  sub_100339CB4(v101, v102, v108);
  sub_100432A9C(v101, v102, v108, 0LL, v165);
  sub_100117A58(v101, v102, v108);
  double v144 = (void *)swift_allocObject(&unk_1009511E0, 56LL, 7LL);
  uint64_t v145 = v168;
  v144[2] = v168;
  v144[3] = v138;
  uint64_t v146 = v172;
  uint64_t v147 = v163;
  v144[4] = v172;
  v144[5] = v147;
  uint64_t v148 = v108;
  uint64_t v149 = v164;
  v144[6] = v164;
  swift_bridgeObjectRetain(v138);
  swift_retain();
  uint64_t v150 = v146;
  swift_retain();
  Future.addSuccess(block:)(sub_100339D70, v144);
  swift_release();
  swift_release();
  uint64_t v151 = (void *)swift_allocObject(&unk_100951208, 40LL, 7LL);
  v151[2] = v145;
  v151[3] = v147;
  v151[4] = v149;
  swift_retain();
  swift_retain();
  Future.addFailure(block:)(sub_100339D94, v151);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100117A58(v101, v160, v148);
  swift_release();
  sub_100018C68((uint64_t)v170, type metadata accessor for SecureLocationsUnsubscribeEndpoint);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
  }
  uint64_t v31 = v2[2];
  uint64_t v30 = v2[3];
  if (v31 >= v30 >> 1) {
    uint64_t v2 = sub_1004C4120((void *)(v30 > 1), v31 + 1, 1, v2);
  }
  v2[2] = v31 + 1;
  uint64_t v32 = (char *)&v2[2 * v31];
  strcpy(v32 + 32, ".allowBattery");
  *((_WORD *)v32 + 23) = -4864;
  if ((a1 & 0x400) == 0)
  {
LABEL_31:
    if ((a1 & 0x800) == 0) {
      goto LABEL_32;
    }
    goto LABEL_71;
  }

  uint64_t v33 = Array.description.getter(v2, &type metadata for String);
  swift_bridgeObjectRelease();
  return v33;
}

    sub_100018C68((uint64_t)v16, type metadata accessor for BeaconStatus);
    sub_100018C68((uint64_t)v20, type metadata accessor for BeaconStatus);
LABEL_62:
    sub_1003CB580(&v60, &v59, (uint64_t *)&v58);
    return 1LL;
  }

    sub_100015794((uint64_t)v99, &qword_1009A89C8);
    return 0LL;
  }

  double v101 = v221;
  sub_10001581C((uint64_t)v99, v221, (uint64_t *)&unk_1009A34D0);
  if (v87(v100, 1LL, v88) == 1)
  {
    sub_100015794(v222, (uint64_t *)&unk_1009A34D0);
    sub_100015794(v223, (uint64_t *)&unk_1009A34D0);
    (*(void (**)(uint64_t, uint64_t))(v232 + 8))(v101, v88);
    goto LABEL_61;
  }

  double v102 = v232;
  double v103 = v227;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v232 + 32))(v227, v100, v88);
  double v104 = sub_100007864( &qword_1009A89D0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v105 = dispatch thunk of static Equatable.== infix(_:_:)(v101, v103, v88, v104);
  id v106 = v88;
  double v107 = *(void (**)(_BYTE *, uint64_t))(v102 + 8);
  v107(v103, v106);
  sub_100015794(v222, (uint64_t *)&unk_1009A34D0);
  sub_100015794(v223, (uint64_t *)&unk_1009A34D0);
  v107((_BYTE *)v101, v106);
  sub_100015794((uint64_t)v99, (uint64_t *)&unk_1009A34D0);
  if ((v105 & 1) == 0) {
    return 0LL;
  }
LABEL_63:
  double v108 = v215;
  double v109 = v215[18];
  double v110 = *(void *)(v96 + v109);
  uint64_t v111 = *(void *)(v96 + v109 + 8);
  id v112 = (void *)(v41 + v109);
  double v113 = v112[1];
  if (v110 != *v112 || v111 != v113)
  {
    double v114 = _stringCompareWithSmolCheck(_:_:expecting:)(v110, v111, *v112, v113, 0LL);
    uint64_t result = 0LL;
    if ((v114 & 1) == 0) {
      return result;
    }
  }

  double v115 = (uint64_t)v219;
  sub_10001581C(v96 + v108[20], (uint64_t)v219, &qword_1009A6DD0);
  double v116 = v226;
  sub_10001581C(v41 + v108[20], (uint64_t)v226, &qword_1009A6DD0);
  uint64_t v117 = (uint64_t)v220;
  uint64_t v118 = (uint64_t)&v220[*(int *)(v224 + 48)];
  sub_10001581C(v115, (uint64_t)v220, &qword_1009A6DD0);
  sub_10001581C((uint64_t)v116, v118, &qword_1009A6DD0);
  uint64_t v119 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v225 + 48);
  if (v119(v117, 1LL, v218) == 1)
  {
    sub_100015794((uint64_t)v226, &qword_1009A6DD0);
    sub_100015794((uint64_t)v219, &qword_1009A6DD0);
    if (v119(v118, 1LL, v218) == 1)
    {
      sub_100015794((uint64_t)v220, &qword_1009A6DD0);
      goto LABEL_74;
    }

LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
}

uint64_t sub_10018E51C(double a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1072LL);
  *(double *)(*(void *)v1 + 108Hasher.init(_seed:)(v5, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10018E570, 0LL, 0LL);
}

uint64_t sub_10018E570()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = v0 + 37;
  if (qword_10099B188 != -1) {
    swift_once(&qword_10099B188, sub_100189D08);
  }
  uint64_t v3 = v0[112];
  uint64_t v4 = v0[110];
  NSString v233 = v0;
  uint64_t v5 = v0[105];
  uint64_t v6 = v233[104];
  uint64_t v7 = type metadata accessor for Logger(0LL);
  v233[136] = sub_10000A720(v7, (uint64_t)qword_100A2A2B0);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  uint64_t v9 = v233;
  v233[137] = v8;
  int v231 = v8;
  v8(v4, v3, v6);
  uint64_t v10 = sub_100013044((uint64_t)v2, (uint64_t)v1);
  Swift::Int v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = v233[135];
    os_log_type_t typea = v12;
    uint64_t v14 = v233[110];
    uint64_t v210 = v233[105];
    uint64_t v15 = v233[104];
    NSString v226 = v2;
    uint64_t v16 = swift_slowAlloc(42LL, -1LL);
    uint64_t v216 = swift_slowAlloc(32LL, -1LL);
    v238[0] = v216;
    *(_DWORD *)uint64_t v16 = 141558787;
    v233[71] = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v233 + 71, v233 + 72, v16 + 4, v16 + 12);
    *(_WORD *)(v16 + 12) = 2081;
    uint64_t v17 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter(v15, v17);
    v233[72] = sub_1003F11D4(v18, v19, v238);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v233 + 72, v233 + 73, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease();
    unint64_t v20 = *(void (**)(uint64_t, uint64_t))(v210 + 8);
    v20(v14, v15);
    *(_WORD *)(v16 + 22) = 2048;
    v233[73] = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v233 + 73, v233 + 74, v16 + 24, v16 + 32);
    *(_WORD *)(v16 + 32) = 2048;
    uint64_t v21 = v233[5];
    uint64_t v22 = v233[6];
    sub_100012ED8(v1, v21);
    uint64_t v23 = sub_1006D3204(v21, v22);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v233[74] = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v233 + 74, v233 + 75, v16 + 34, v16 + 42);
    _os_log_impl( (void *)&_mh_execute_header,  v11,  typea,  "Applying location filter for beacon %{private,mask.hash}s, transmitPower: %f, beaconType: %lu.",  (uint8_t *)v16,  0x2Au);
    swift_arrayDestroy(v216, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v216, -1LL, -1LL);
    uint64_t v24 = v16;
    uint64_t v2 = v226;
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  else
  {
    uint64_t v25 = v233[110];
    uint64_t v26 = v233[105];
    uint64_t v27 = v233[104];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    unint64_t v20 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    uint64_t v9 = v233;
    v20(v25, v27);
  }

  uint64_t v28 = v9 + 54;
  v9[138] = v20;
  double v29 = *((double *)v9 + 135);
  uint64_t v30 = sub_1004E7AD8(v9[129]);
  uint64_t v31 = v9[40];
  uint64_t v32 = v9[41];
  sub_100012ED8(v2, v31);
  uint64_t v33 = sub_1006D3204(v31, v32);
  id v34 = sub_1006D4564((uint64_t)v30, v33, v29);
  v9[139] = v34;
  swift_bridgeObjectRelease();
  uint64_t v203 = v9 + 54;
  if (v34)
  {
    uint64_t v212 = v9 + 59;
    id v214 = v9 + 58;
    id v224 = v20;
    NSString v227 = (void (*)(uint64_t, uint64_t))v9[131];
    uint64_t v35 = v9[99];
    uint64_t v36 = v9[97];
    os_log_type_t v37 = (int *)v9[93];
    uint64_t v38 = v9[90];
    uint64_t v217 = v9[86];
    *(void *)typeb = v9[129];
    sub_10001DC4C(v35, v36, type metadata accessor for BeaconEstimatedLocation);
    double v39 = *(double *)(v36 + v37[7]);
    double v40 = *(double *)(v36 + v37[8]);
    id v41 = objc_allocWithZone(&OBJC_CLASS___CLLocation);
    double v42 = *(double *)(v36 + v37[9]);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v44 = objc_msgSend( v41,  "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:",  isa,  v39,  v40,  -1.0,  v42,  -1.0);

    sub_100018C68(v36, type metadata accessor for BeaconEstimatedLocation);
    id v45 = v34;
    [v45 coordinate];
    double v47 = v46;
    [v45 coordinate];
    double v49 = v48;
    id v50 = objc_allocWithZone(&OBJC_CLASS___CLLocation);
    [v45 horizontalAccuracy];
    double v52 = v51;
    id v53 = [v45 timestamp];
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v53);

    Class v54 = Date._bridgeToObjectiveC()().super.isa;
    v227(v38, v217);
    id v55 = objc_msgSend( v50,  "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:",  v54,  v47,  v49,  -1.0,  v52,  -1.0);

    [v44 distanceFromLocation:v55];
    uint64_t v57 = v56;

    double v58 = *(double *)(v35 + v37[9]);
    id v228 = v45;
    [v45 horizontalAccuracy];
    double v60 = v59;
    uint64_t v61 = *(void *)(*(void *)typeb + 16LL);
    if (v61)
    {
      uint64_t v62 = v9[129];
      char v63 = v9;
      uint64_t v64 = v9[96];
      uint64_t v65 = v63[94];
      uint64_t v66 = *(int *)(v63[93] + 44LL);
      uint64_t v67 = v62 + ((*(unsigned __int8 *)(v65 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80));
      swift_retain();
      uint64_t v68 = *(void *)(v65 + 72);
      uint64_t v69 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v70 = v233[96];
        sub_10001DC4C(v67, v70, type metadata accessor for BeaconEstimatedLocation);
        char v71 = *(_BYTE *)(v64 + v66);
        sub_100018C68(v70, type metadata accessor for BeaconEstimatedLocation);
        if ((swift_isUniquelyReferenced_nonNull_native(v69) & 1) == 0) {
          uint64_t v69 = sub_1004C5494(0LL, v69[2] + 1LL, 1, v69);
        }
        unint64_t v73 = v69[2];
        unint64_t v72 = v69[3];
        if (v73 >= v72 >> 1) {
          uint64_t v69 = sub_1004C5494((void *)(v72 > 1), v73 + 1, 1, v69);
        }
        v69[2] = v73 + 1;
        *((_BYTE *)v69 + v73 + 32) = v71;
        v67 += v68;
        --v61;
      }

      while (v61);
      uint64_t v9 = v233;
      swift_release();
    }

    else
    {
      uint64_t v69 = _swiftEmptyArrayStorage;
    }

    Class v235 = (void (*)(uint64_t, void))v9[131];
    uint64_t v91 = v9[112];
    uint64_t v92 = v9[108];
    uint64_t v93 = v9[104];
    uint64_t v94 = v9[93];
    uint64_t v95 = v9[90];
    uint64_t v218 = v9[99];
    *(void *)typec = v9[86];
    sub_1004E7AFC((uint64_t)v69);
    swift_bridgeObjectRelease();
    id v96 = objc_allocWithZone(&OBJC_CLASS___NSSet);
    Class v97 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v98 = [v96 initWithArray:v97];
    v9[140] = v98;

    v231(v92, v91, v93);
    id v99 = [v228 timestamp];
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v99);

    [v228 coordinate];
    double v101 = v100;
    [v228 coordinate];
    double v103 = v102;
    [v228 horizontalAccuracy];
    double v105 = v104;
    id v106 = (void *)sub_1006D4870(*(_BYTE *)(v218 + *(int *)(v94 + 44)));
    id v107 = objc_allocWithZone(&OBJC_CLASS___SPBeaconLocation);
    id v108 = v106;
    Class v109 = Date._bridgeToObjectiveC()().super.isa;
    id v110 = [v107 initWithTimestamp:v109 latitude:v108 longitude:v101 horizontalAccuracy:v103 source:v105];

    v235(v95, *(void *)typec);
    uint64_t v111 = v9[108];
    uint64_t v112 = v9[104];
    if (v110)
    {
      uint64_t v113 = *v203;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v203);
      v238[0] = v113;
      sub_10005CC34((uint64_t)v110, v111, isUniquelyReferenced_nonNull_native);
      *uint64_t v203 = v238[0];
      swift_bridgeObjectRelease();
      v224(v111, v112);
    }

    else
    {
      double v115 = (void *)sub_100048150(v9[108]);
      v224(v111, v112);
    }

    uint64_t v116 = v9[130];
    uint64_t v117 = v9[126];
    uint64_t v118 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v9[117];
    uint64_t v119 = v9[116];
    uint64_t v120 = v9[113];
    uint64_t v121 = v9[99];
    uint64_t v122 = (char *)swift_allocObject(v9[114], *(unsigned int *)(v9[114] + 48LL), *(unsigned __int16 *)(v9[114] + 52LL));
    v9[141] = v122;
    __int128 v236 = *((_OWORD *)v9 + 64);
    swift_defaultActor_initialize();
    unint64_t v123 = sub_10041271C((uint64_t)_swiftEmptyArrayStorage);
    *((void *)v122 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v123;
    UUID.init()(v123);
    v118(&v122[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime], 1LL, 1LL, v119);
    v118(&v122[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1LL, 1LL, v119);
    *((void *)v122 + 15) = 0xD000000000000030LL;
    *((void *)v122 + swift_weakDestroy(v0 + 16) = 0x8000000100857160LL;
    uint64_t v124 = swift_task_alloc(112LL);
    v9[142] = v124;
    *(void *)(v124 + swift_weakDestroy(v0 + 16) = v120;
    *(void *)(v124 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v116;
    *(void *)(v124 + 32) = v228;
    *(void *)(v124 + 40) = v121;
    *(_OWORD *)(v124 + 48) = v236;
    *(void *)(v124 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v214;
    *(void *)(v124 + 72) = v212;
    *(void *)(v124 + 80) = v57;
    *(double *)(v124 + 88) = vabdd_f64(v58, v60);
    *(void *)(v124 + 96) = v98;
    *(void *)(v124 + 10_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v117;
    uint64_t v125 = sub_10018F880;
    return swift_task_switch(v125, v122, 0LL);
  }

  uint64_t v74 = v9[112];
  uint64_t v75 = v9[109];
  uint64_t v76 = v9[104];
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v77 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v231)(v75, v74, v76);
  uint64_t v78 = (os_log_s *)Logger.logObject.getter(v77);
  os_log_type_t v79 = static os_log_type_t.error.getter(v78);
  BOOL v80 = os_log_type_enabled(v78, v79);
  uint64_t v81 = (void *)v9[126];
  uint64_t v82 = v9[109];
  uint64_t v83 = v9[104];
  if (v80)
  {
    uint64_t v234 = v9[76];
    uint64_t v84 = swift_slowAlloc(22LL, -1LL);
    id v229 = v2;
    uint64_t v85 = swift_slowAlloc(32LL, -1LL);
    v238[0] = v85;
    *(_DWORD *)uint64_t v84 = 141558275;
    v9[61] = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v9 + 61, v9 + 62, v84 + 4, v84 + 12);
    *(_WORD *)(v84 + 12) = 2081;
    uint64_t v86 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v87 = dispatch thunk of CustomStringConvertible.description.getter(v83, v86);
    v9[62] = sub_1003F11D4(v87, v88, v238);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v9 + 62, v9 + 63, v84 + 14, v84 + 22);
    swift_bridgeObjectRelease();
    v20(v82, v83);
    _os_log_impl( (void *)&_mh_execute_header,  v78,  v79,  "Could not produce filtered location for beacon %{private,mask.hash}s.",  (uint8_t *)v84,  0x16u);
    swift_arrayDestroy(v85, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v89 = v85;
    uint64_t v2 = v229;
    swift_slowDealloc(v89, -1LL, -1LL);
    uint64_t v90 = v84;
    uint64_t v28 = v9 + 54;
    swift_slowDealloc(v90, -1LL, -1LL);

    swift_bridgeObjectRelease_n(v234, 2LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v9[76], 2LL);
    v20(v82, v83);
  }

  uint64_t v126 = v9[112];
  uint64_t v127 = v9[104];
  sub_100018C68(v9[99], type metadata accessor for BeaconEstimatedLocation);
  v20(v126, v127);
  uint64_t v128 = v9[133];
  uint64_t v129 = v9[132];
  double v130 = *((double *)v9 + 130) + *((double *)v9 + 123);
  uint64_t v131 = v9[120];
  uint64_t v132 = v9;
  uint64_t v133 = v9[124] + 1LL;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2);
  if (v133 != v131)
  {
    uint64_t v190 = v132[124] + 1LL;
    v132[124] = v190;
    *((double *)v132 + 123) = v130;
    v132[122] = v129;
    v132[121] = v128;
    sub_100013044(v132[75] + 40 * v190 + 32, (uint64_t)v2);
    uint64_t v191 = v132[40];
    uint64_t v192 = v132[41];
    sub_100012ED8(v2, v191);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v192 + 8) + 8LL) + 32LL))(v191);
    uint64_t v193 = (void *)swift_task_alloc(dword_1009B63A4);
    v132[125] = v193;
    *uint64_t v193 = v132;
    v193[1] = sub_10018D480;
    return sub_1005EBD74((uint64_t)v2);
  }

  uint64_t v200 = v129;
  swift_bridgeObjectRelease();
  uint64_t result = v132[78];
  uint64_t v135 = v132;
  uint64_t v206 = *(void *)(result + 16);
  if (!v206)
  {
LABEL_74:
    uint64_t v194 = v135 + 51;
    v135[147] = v128;
    v135[51] = 0LL;
    if (v200 <= 0)
    {
LABEL_79:
      uint64_t v122 = (char *)v135[115];
      uint64_t v196 = v135[113];
      uint64_t v197 = v135[79];
      uint64_t v198 = v135[75];
      uint64_t v199 = (void *)swift_task_alloc(64LL);
      v135[148] = (uint64_t)v199;
      v199[2] = v198;
      v199[3] = v197;
      v199[4] = v196;
      v199[5] = v135 + 55;
      v199[6] = v135 + 60;
      v199[7] = v194;
      uint64_t v125 = sub_100190724;
      return swift_task_switch(v125, v122, 0LL);
    }

    double v195 = v130 / (double)v200;
    if ((~*(void *)&v195 & 0x7FF0000000000000LL) != 0)
    {
      if (v195 > -9.22337204e18)
      {
        if (v195 < 9.22337204e18)
        {
          *uint64_t v194 = (uint64_t)v195;
          goto LABEL_79;
        }

uint64_t sub_10018F880()
{
  uint64_t v1 = v0[133];
  sub_10070F3A0((uint64_t (*)(uint64_t))sub_1001B1FE4);
  v0[143] = v1;
  uint64_t v2 = v0[142];
  if (v1)
  {
    swift_errorRelease(v1);
    swift_release();
    swift_bridgeObjectRelease();
    swift_task_dealloc(v2);
    uint64_t v3 = sub_100190B10;
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_task_dealloc(v2);
    uint64_t v3 = sub_10018F92C;
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10018F92C()
{
  v0[144] = v0[143];
  uint64_t v1 = type metadata accessor for AnalyticsPublisher();
  v0[145] = swift_allocObject(v1, 112LL, 15LL);
  swift_defaultActor_initialize();
  uint64_t v2 = (uint64_t **)swift_task_alloc(dword_1009BDE0C);
  v0[146] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = (uint64_t *)sub_10018F9A0;
  return sub_100713F88(v0[141]);
}

uint64_t sub_10018F9A0()
{
  return swift_task_switch(sub_10018FA00, 0LL, 0LL);
}

uint64_t sub_10018FA00()
{
  uint64_t v1 = (void *)(v0 + 296);
  uint64_t v2 = *(void **)(v0 + 1112);
  uint64_t v3 = *(void *)(v0 + 792);
  uint64_t v4 = *(void *)(v0 + 760);
  (*(void (**)(void, void, void))(v0 + 1096))( *(void *)(v0 + 856),  *(void *)(v0 + 896),  *(void *)(v0 + 832));
  sub_10001DC4C(v3, v4, type metadata accessor for BeaconEstimatedLocation);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v6 = static os_log_type_t.default.getter(v5);
  uint64_t v147 = v5;
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v126 = v0 + 560;
    uint64_t v122 = v0 + 544;
    uint64_t v124 = v0 + 552;
    uint64_t v7 = *(void **)(v0 + 1112);
    double v115 = *(void (**)(uint64_t, uint64_t))(v0 + 1104);
    uint64_t v140 = *(void **)(v0 + 1008);
    uint64_t v142 = *(void **)(v0 + 1120);
    uint64_t v8 = *(void *)(v0 + 856);
    os_log_type_t typea = v6;
    uint64_t v9 = *(void *)(v0 + 832);
    uint64_t v118 = *(void *)(v0 + 760);
    uint64_t v120 = v0 + 536;
    uint64_t v128 = *(void *)(v0 + 720);
    uint64_t v130 = *(void *)(v0 + 688);
    uint64_t v132 = *(void (**)(uint64_t, uint64_t))(v0 + 1048);
    uint64_t v134 = v0 + 568;
    uint64_t v144 = *(void *)(v0 + 608);
    uint64_t v10 = swift_slowAlloc(82LL, -1LL);
    uint64_t v136 = swift_slowAlloc(96LL, -1LL);
    v149[0] = v136;
    *(_DWORD *)uint64_t v10 = 141559811;
    *(void *)(v0 + 50_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 504, v0 + 512, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2081;
    Swift::Int v11 = (void *)(v0 + 296);
    uint64_t v12 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter(v9, v12);
    *(void *)(v0 + 512) = sub_1003F11D4(v13, v14, v149);
    uint64_t v15 = v0 + 520;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 512, v0 + 520, v10 + 14, v10 + 22);
    uint64_t v16 = v0;
    swift_bridgeObjectRelease();
    v115(v8, v9);
    *(_WORD *)(v10 + 22) = 2160;
    *(void *)(v0 + 520) = 1752392040LL;
    uint64_t v17 = v0 + 528;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v15, v17, v10 + 24, v10 + 32);
    *(_WORD *)(v10 + 32) = 2081;
    uint64_t v18 = v12;
    uint64_t v1 = v11;
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter(v9, v18);
    *(void *)(v16 + 528) = sub_1003F11D4(v19, v20, v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v17, v120, v10 + 34, v10 + 42);
    swift_bridgeObjectRelease();
    sub_100018C68(v118, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v10 + 42) = 2049;
    [v7 coordinate];
    *(void *)(v16 + 536) = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v120, v122, v10 + 44, v10 + 52);

    *(_WORD *)(v10 + 52) = 2049;
    [v7 coordinate];
    *(void *)(v16 + 54_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v122, v124, v10 + 54, v10 + 62);

    *(_WORD *)(v10 + 62) = 2050;
    [v7 horizontalAccuracy];
    *(void *)(v16 + 552) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v124, v126, v10 + 64, v10 + 72);

    *(_WORD *)(v10 + 72) = 2082;
    id v24 = [v7 timestamp];
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v24);

    uint64_t v25 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter(v130, v25);
    unint64_t v28 = v27;
    v132(v128, v130);
    *(void *)(v16 + 560) = sub_1003F11D4(v26, v28, v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v126, v134, v10 + 74, v10 + 82);
    swift_bridgeObjectRelease();

    _os_log_impl( (void *)&_mh_execute_header,  v147,  typea,  "Filtered cached latest location returned to client for beacon %{private,mask.hash}s, locationUUID: %{private,mask. hash}s, lat: %{private}f, long: %{private}f, accuracy: %{public}f, timestamp: %{public}s.",  (uint8_t *)v10,  0x52u);
    swift_arrayDestroy(v136, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v136, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);

    swift_release();
    swift_bridgeObjectRelease_n(v144, 2LL);
  }

  else
  {
    double v29 = *(void **)(v0 + 1120);
    uint64_t v30 = *(void **)(v0 + 1112);
    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v0 + 1104);
    uint64_t v32 = *(void **)(v0 + 1008);
    uint64_t v33 = *(void *)(v0 + 856);
    uint64_t v34 = *(void *)(v0 + 832);
    uint64_t v35 = *(void *)(v0 + 760);
    swift_bridgeObjectRelease_n(*(void *)(v0 + 608), 2LL);

    v31(v33, v34);
    sub_100018C68(v35, type metadata accessor for BeaconEstimatedLocation);

    uint64_t v16 = v0;
    swift_release();
  }

  uint64_t v36 = *(void *)(v16 + 896);
  uint64_t v37 = *(void *)(v16 + 840);
  uint64_t v38 = *(void *)(v16 + 832);
  sub_100018C68(*(void *)(v16 + 792), type metadata accessor for BeaconEstimatedLocation);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
  uint64_t v39 = *(void *)(v16 + 1152);
  uint64_t v40 = *(void *)(v16 + 1056);
  double v41 = *(double *)(v16 + 1040) + *(double *)(v16 + 984);
  uint64_t v42 = *(void *)(v16 + 960);
  uint64_t v43 = *(void *)(v16 + 992) + 1LL;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if (v43 != v42)
  {
    uint64_t v101 = *(void *)(v16 + 992) + 1LL;
    *(void *)(v16 + 992) = v101;
    *(double *)(v16 + 98_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v41;
    *(void *)(v16 + 976) = v40;
    *(void *)(v16 + 968) = v39;
    sub_100013044(*(void *)(v16 + 600) + 40 * v101 + 32, (uint64_t)v1);
    uint64_t v102 = *(void *)(v16 + 320);
    uint64_t v103 = *(void *)(v16 + 328);
    sub_100012ED8(v1, v102);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v103 + 8) + 8LL) + 32LL))(v102);
    double v104 = (void *)swift_task_alloc(dword_1009B63A4);
    *(void *)(v16 + 1000) = v104;
    *double v104 = v16;
    v104[1] = sub_10018D480;
    return sub_1005EBD74((uint64_t)v1);
  }

  uint64_t v116 = v40;
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(v16 + 624);
  uint64_t v45 = *(void *)(result + 16);
  uint64_t v119 = v45;
  if (!v45)
  {
LABEL_55:
    double v105 = (void *)(v16 + 408);
    *(void *)(v16 + 1176) = v39;
    *(void *)(v16 + 408) = 0LL;
    if (v116 <= 0)
    {
LABEL_60:
      uint64_t v107 = v16 + 480;
      uint64_t v108 = v16 + 440;
      uint64_t v109 = *(void *)(v16 + 920);
      uint64_t v110 = *(void *)(v16 + 904);
      uint64_t v111 = *(void *)(v16 + 632);
      uint64_t v112 = v16;
      uint64_t v113 = *(void *)(v16 + 600);
      double v114 = (void *)swift_task_alloc(64LL);
      *(void *)(v112 + 118_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v114;
      v114[2] = v113;
      void v114[3] = v111;
      v114[4] = v110;
      v114[5] = v108;
      v114[6] = v107;
      v114[7] = v105;
      return swift_task_switch(sub_100190724, v109, 0LL);
    }

    double v106 = v41 / (double)v116;
    if ((~*(void *)&v106 & 0x7FF0000000000000LL) != 0)
    {
      if (v106 > -9.22337204e18)
      {
        if (v106 < 9.22337204e18)
        {
          *double v105 = (uint64_t)v106;
          goto LABEL_60;
        }

uint64_t sub_100190724()
{
  uint64_t v1 = v0[147];
  sub_10070F3A0((uint64_t (*)(uint64_t))sub_1001B1FD4);
  if (v1) {
    swift_errorRelease(v1);
  }
  uint64_t v2 = v0[115];
  swift_task_dealloc(v0[148]);
  return swift_task_switch(sub_100190790, v2, 0LL);
}

uint64_t sub_100190790(uint64_t a1)
{
  uint64_t v2 = (void (*)(uint64_t, void, uint64_t, uint64_t))v1[117];
  uint64_t v3 = v1[116];
  uint64_t v4 = v1[115];
  uint64_t v5 = v1[103];
  uint64_t v6 = v1[102];
  static DispatchTime.now()(a1);
  v2(v5, 0LL, 1LL, v3);
  sub_100015750(v5, v6, &qword_10099CA60);
  uint64_t v7 = v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime;
  swift_beginAccess(v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime, v1 + 48, 33LL, 0LL);
  sub_100015680(v6, v7);
  swift_endAccess(v1 + 48);
  return swift_task_switch(sub_100190854, 0LL, 0LL);
}

uint64_t sub_100190854()
{
  uint64_t v1 = type metadata accessor for AnalyticsPublisher();
  v0[149] = swift_allocObject(v1, 112LL, 15LL);
  swift_defaultActor_initialize();
  uint64_t v2 = (uint64_t **)swift_task_alloc(dword_1009BDE0C);
  v0[150] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = (uint64_t *)sub_1001908C0;
  return sub_100713F88(v0[115]);
}

uint64_t sub_1001908C0()
{
  return swift_task_switch(sub_100190920, 0LL, 0LL);
}

uint64_t sub_100190920()
{
  uint64_t v1 = *(void *)(v0 + 952);
  uint64_t v2 = *(void *)(v0 + 920);
  uint64_t v3 = *(void *)(v0 + 904);
  uint64_t v4 = *(void *)(v0 + 896);
  uint64_t v11 = *(void *)(v0 + 888);
  uint64_t v12 = *(void *)(v0 + 880);
  uint64_t v13 = *(void *)(v0 + 872);
  uint64_t v14 = *(void *)(v0 + 864);
  uint64_t v15 = *(void *)(v0 + 856);
  uint64_t v16 = *(void *)(v0 + 848);
  uint64_t v5 = *(void *)(v0 + 840);
  uint64_t v6 = *(void *)(v0 + 832);
  uint64_t v17 = *(void *)(v0 + 824);
  uint64_t v18 = *(void *)(v0 + 816);
  uint64_t v19 = *(void *)(v0 + 808);
  uint64_t v20 = *(void *)(v0 + 800);
  uint64_t v21 = *(void *)(v0 + 792);
  uint64_t v22 = *(void *)(v0 + 784);
  uint64_t v23 = *(void *)(v0 + 776);
  uint64_t v24 = *(void *)(v0 + 768);
  uint64_t v25 = *(void *)(v0 + 760);
  uint64_t v26 = *(void *)(v0 + 736);
  uint64_t v27 = *(void *)(v0 + 728);
  uint64_t v28 = *(void *)(v0 + 720);
  uint64_t v29 = *(void *)(v0 + 712);
  uint64_t v30 = *(void *)(v0 + 704);
  uint64_t v31 = *(void *)(v0 + 680);
  uint64_t v32 = *(void *)(v0 + 672);
  uint64_t v7 = *(void (**)(uint64_t))(v0 + 640);
  uint64_t v8 = *(void *)(v0 + 432);
  uint64_t v9 = swift_bridgeObjectRetain(v8);
  v7(v9);
  swift_bridgeObjectRelease(v8);
  swift_release(v1);
  swift_release(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v6);
  swift_bridgeObjectRelease(*(void *)(v0 + 432));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100190B10()
{
  v0[144] = 0LL;
  uint64_t v1 = type metadata accessor for AnalyticsPublisher();
  v0[145] = swift_allocObject(v1, 112LL, 15LL);
  swift_defaultActor_initialize();
  uint64_t v2 = (uint64_t **)swift_task_alloc(dword_1009BDE0C);
  v0[146] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = (uint64_t *)sub_10018F9A0;
  return sub_100713F88(v0[141]);
}

void sub_100190B80(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v5 = __chkstk_darwin(v48);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v51 = (uint64_t)&v43 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v50 = (uint64_t)&v43 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v49 = (uint64_t)&v43 - v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v43 - v14;
  uint64_t v16 = type metadata accessor for UUID(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B188 != -1) {
    swift_once(&qword_10099B188, sub_100189D08);
  }
  uint64_t v20 = type metadata accessor for Logger(0LL);
  sub_10000A720(v20, (uint64_t)qword_100A2A2B0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a2, v16);
  sub_10001DC4C(a1, (uint64_t)v15, type metadata accessor for BeaconEstimatedLocation);
  sub_10001DC4C(a1, v49, type metadata accessor for BeaconEstimatedLocation);
  sub_10001DC4C(a1, v50, type metadata accessor for BeaconEstimatedLocation);
  sub_10001DC4C(a1, v51, type metadata accessor for BeaconEstimatedLocation);
  uint64_t v21 = sub_10001DC4C(a1, (uint64_t)v7, type metadata accessor for BeaconEstimatedLocation);
  uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.default.getter(v22);
  int v24 = v23;
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v25 = swift_slowAlloc(82LL, -1LL);
    uint64_t v46 = swift_slowAlloc(96LL, -1LL);
    uint64_t v54 = v46;
    *(_DWORD *)uint64_t v25 = 141559811;
    uint64_t v52 = 1752392040LL;
    os_log_t v45 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v25 + 4, v25 + 12);
    *(_WORD *)(v25 + 12) = 2081;
    uint64_t v47 = v2;
    uint64_t v26 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v43 = v7;
    uint64_t v27 = v26;
    int v44 = v24;
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter(v16, v26);
    uint64_t v52 = sub_1003F11D4(v28, v29, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v25 + 14, v25 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    *(_WORD *)(v25 + 22) = 2160;
    uint64_t v52 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v25 + 24, v25 + 32);
    *(_WORD *)(v25 + 32) = 2081;
    uint64_t v30 = (int *)v48;
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter(v16, v27);
    uint64_t v52 = sub_1003F11D4(v31, v32, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v25 + 34, v25 + 42);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v15, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v25 + 42) = 2049;
    uint64_t v33 = v49;
    uint64_t v52 = *(void *)(v49 + v30[7]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v25 + 44, v25 + 52);
    sub_100018C68(v33, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v25 + 52) = 2049;
    uint64_t v34 = v50;
    uint64_t v52 = *(void *)(v50 + v30[8]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v25 + 54, v25 + 62);
    sub_100018C68(v34, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v25 + 62) = 2050;
    uint64_t v35 = v51;
    uint64_t v52 = *(void *)(v51 + v30[9]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v25 + 64, v25 + 72);
    sub_100018C68(v35, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v25 + 72) = 2082;
    uint64_t v36 = (uint64_t)v43;
    uint64_t v37 = type metadata accessor for Date(0LL);
    uint64_t v38 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter(v37, v38);
    uint64_t v52 = sub_1003F11D4(v39, v40, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v25 + 74, v25 + 82);
    swift_bridgeObjectRelease();
    sub_100018C68(v36, type metadata accessor for BeaconEstimatedLocation);
    os_log_t v41 = v45;
    _os_log_impl( (void *)&_mh_execute_header,  v45,  (os_log_type_t)v44,  "Filtering the following latest location for beacon %{private,mask.hash}s, locationUUID: %{private,mask.hash}s, lat : %{private}f, long: %{private}f, accuracy: %{public}f, timestamp: %{public}s.",  (uint8_t *)v25,  0x52u);
    uint64_t v42 = v46;
    swift_arrayDestroy(v46, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1LL, -1LL);
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    sub_100018C68((uint64_t)v15, type metadata accessor for BeaconEstimatedLocation);
    sub_100018C68(v49, type metadata accessor for BeaconEstimatedLocation);
    sub_100018C68(v50, type metadata accessor for BeaconEstimatedLocation);
    sub_100018C68(v51, type metadata accessor for BeaconEstimatedLocation);
    sub_100018C68((uint64_t)v7, type metadata accessor for BeaconEstimatedLocation);
  }

id sub_1001910E8( double a1, double a2, double a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  uint64_t v60 = a6;
  uint64_t v61 = a7;
  uint64_t v20 = type metadata accessor for UUID(0LL);
  uint64_t v55 = *(void *)(v20 - 8);
  uint64_t v56 = v20;
  __chkstk_darwin(v20);
  uint64_t v54 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_100004AEC(&qword_1009A0E28);
  uint64_t inited = swift_initStackObject(v22, &v63);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007F47C0;
  *(void *)(inited + 32) = 0x496E6F6973736573LL;
  *(void *)(inited + 40) = 0xE900000000000044LL;
  UUID.uuidString.getter(inited);
  NSString v24 = String._bridgeToObjectiveC()();
  id result = (id)swift_bridgeObjectRelease();
  *(void *)(inited + 48) = v24;
  *(_BYTE *)(inited + 56) = 0;
  *(void *)(inited + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 0x6E6F697461636F6CLL;
  *(void *)(inited + 72) = 0xEF79636E65636552LL;
  if ((~*(void *)&a1 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }

  if (a1 <= -9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  if (a1 >= 9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v58 = a12;
  id v59 = a11;
  id v26 = objc_allocWithZone(&OBJC_CLASS___NSNumber);
  uint64_t v57 = a10;
  *(void *)(inited + 80) = [v26 initWithInteger:(uint64_t)a1];
  *(_BYTE *)(inited + 88) = 0;
  *(void *)(inited + 96) = 0xD000000000000010LL;
  *(void *)(inited + 10_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 0x80000001008571A0LL;
  [a5 horizontalAccuracy];
  *(void *)(inited + 112) = [objc_allocWithZone(NSNumber) initWithDouble:v27];
  *(_BYTE *)(inited + 120) = 0;
  strcpy((char *)(inited + 128), "locationSource");
  *(_BYTE *)(inited + 143) = -18;
  uint64_t v28 = type metadata accessor for BeaconEstimatedLocation(0LL);
  sub_10071EAA8(*(_BYTE *)(v60 + *(int *)(v28 + 44)));
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 14_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v29;
  *(_BYTE *)(inited + 152) = 0;
  *(void *)(inited + 160) = 0xD000000000000013LL;
  *(void *)(inited + 168) = 0x80000001008571C0LL;
  *(void *)(inited + 176) = [objc_allocWithZone(NSNumber) initWithInteger:*(void *)(v61 + 16)];
  *(_BYTE *)(inited + 18_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 0;
  *(void *)(inited + 192) = 0xD000000000000010LL;
  *(void *)(inited + 200) = 0x80000001008571E0LL;
  *(void *)(inited + 208) = [objc_allocWithZone(NSNumber) initWithInteger:*(void *)(a8 + 16)];
  *(_BYTE *)(inited + 2swift_weakDestroy(v0 + 16) = 0;
  *(void *)(inited + 22_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 0xD000000000000011LL;
  *(void *)(inited + 232) = 0x8000000100857200LL;
  *(void *)(inited + 240) = [objc_allocWithZone(NSNumber) initWithInteger:*a9];
  *(_BYTE *)(inited + 248) = 0;
  *(void *)(inited + 256) = 0xD000000000000010LL;
  *(void *)(inited + 26_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 0x8000000100857220LL;
  uint64_t v30 = v58;
  *(void *)(inited + 272) = [objc_allocWithZone(NSNumber) initWithInteger:*v57];
  *(_BYTE *)(inited + 280) = 0;
  *(void *)(inited + 288) = 0xD00000000000001ALL;
  *(void *)(inited + 296) = 0x8000000100857240LL;
  *(void *)(inited + 30_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = [objc_allocWithZone(NSNumber) initWithDouble:a2];
  *(_BYTE *)(inited + 312) = 0;
  *(void *)(inited + 320) = 0xD000000000000024LL;
  *(void *)(inited + 328) = 0x8000000100857260LL;
  *(void *)(inited + 336) = [objc_allocWithZone(NSNumber) initWithDouble:a3];
  *(_BYTE *)(inited + 34_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 0;
  *(void *)(inited + 352) = 0x6F43656372756F73LL;
  *(void *)(inited + 360) = 0xEB00000000746E75LL;
  *(void *)(inited + 368) = objc_msgSend( objc_allocWithZone(NSNumber),  "initWithInteger:",  objc_msgSend(v59, "count"));
  *(_BYTE *)(inited + 376) = 0;
  *(void *)(inited + 38_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 0xD000000000000013LL;
  *(void *)(inited + 392) = 0x8000000100857290LL;
  id result = [v30 systemVersion];
  if (!result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  *(void *)(inited + 400) = result;
  *(_BYTE *)(inited + 408) = 0;
  strcpy((char *)(inited + 416), "batteryLevel");
  *(_BYTE *)(inited + 429) = 0;
  *(_WORD *)(inited + 430) = -5120;
  *(void *)(inited + 432) = objc_msgSend( objc_allocWithZone(NSNumber),  "initWithInteger:",  objc_msgSend(v30, "batteryLevel"));
  *(_BYTE *)(inited + 440) = 0;
  *(void *)(inited + 448) = 0xD00000000000001BLL;
  *(void *)(inited + 456) = 0x80000001008572B0LL;
  id result = [v30 systemVersion];
  if (!result)
  {
LABEL_18:
    __break(1u);
    return result;
  }

  *(void *)(inited + 46_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = result;
  *(_BYTE *)(inited + 472) = 0;
  *(void *)(inited + 480) = 0x6563697665447369LL;
  *(void *)(inited + 488) = 0xEF6465687361654CLL;
  id v31 = SPBeaconTaskNameBeginLeashing;
  id v32 = [v30 taskInformation];
  type metadata accessor for SPBeaconTaskName(0LL);
  uint64_t v34 = v33;
  uint64_t v35 = sub_100022898(0LL, (unint64_t *)&unk_1009AE4B0, &OBJC_CLASS___SPBeaconTaskInformation_ptr);
  uint64_t v36 = sub_100007864( (unint64_t *)&qword_10099C3B0,  (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName,  (uint64_t)&unk_1007E3C50);
  uint64_t v37 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v32, v34, v35, v36);

  if (*(void *)(v37 + 16) && (uint64_t v38 = sub_10030D388(v31), (v39 & 1) != 0))
  {
    id v40 = *(id *)(*(void *)(v37 + 56) + 8 * v38);

    swift_bridgeObjectRelease();
    id v41 = [v40 state];

    BOOL v42 = v41 == 0LL;
  }

  else
  {

    swift_bridgeObjectRelease();
    BOOL v42 = 0LL;
  }

  *(void *)(inited + 496) = v42;
  *(_BYTE *)(inited + 50_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 1;
  *(void *)(inited + 512) = 0xD000000000000011LL;
  *(void *)(inited + 520) = 0x8000000100853CF0LL;
  *(void *)(inited + 528) = [v30 connected];
  *(_BYTE *)(inited + 536) = 1;
  unint64_t v43 = sub_100412AA4(inited);
  id v44 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v45 = [v44 isInternalBuild];

  if (v45)
  {
    id v46 = [v30 identifier];
    uint64_t v47 = v54;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v46);

    UUID.uuidString.getter(v48);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v47, v56);
    NSString v49 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v43);
    unint64_t v62 = v43;
    sub_10005C698((uint64_t)v49, 0, 0x6544646572696170LL, 0xEE00444965636976LL, isUniquelyReferenced_nonNull_native);
    unint64_t v43 = v62;
    swift_bridgeObjectRelease();
    id v51 = [v30 serialNumber];
    if (v51)
    {
      uint64_t v52 = (uint64_t)v51;
      char v53 = swift_isUniquelyReferenced_nonNull_native(v43);
      unint64_t v62 = v43;
      sub_10005C698(v52, 0, 0xD000000000000018LL, 0x8000000100853D10LL, v53);
      unint64_t v43 = v62;
      swift_bridgeObjectRelease();
    }
  }

  return (id)v43;
}

unint64_t sub_100191864(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  uint64_t v11 = sub_100004AEC(&qword_1009A0E28);
  uint64_t inited = swift_initStackObject(v11, v16);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E82A0;
  *(void *)(inited + 32) = 0xD000000000000013LL;
  *(void *)(inited + 40) = 0x80000001008572D0LL;
  *(void *)(inited + 48) = [objc_allocWithZone(NSNumber) initWithInteger:*(void *)(a1 + 16)];
  *(_BYTE *)(inited + 56) = 0;
  *(void *)(inited + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 0xD00000000000001CLL;
  *(void *)(inited + 72) = 0x80000001008572F0LL;
  id v13 = [objc_allocWithZone(NSNumber) initWithInteger:*(void *)(a2 + 16)];
  *(void *)(inited + 80) = v13;
  *(_BYTE *)(inited + 88) = 0;
  *(void *)(inited + 96) = 0x496E6F6973736573LL;
  *(void *)(inited + 10_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 0xE900000000000044LL;
  UUID.uuidString.getter(v13);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 112) = v14;
  *(_BYTE *)(inited + 120) = 0;
  *(void *)(inited + 128) = 0xD000000000000012LL;
  *(void *)(inited + 136) = 0x8000000100857310LL;
  *(void *)(inited + 14_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = [objc_allocWithZone(NSNumber) initWithInteger:*a4];
  *(_BYTE *)(inited + 152) = 0;
  *(void *)(inited + 160) = 0xD00000000000001BLL;
  *(void *)(inited + 168) = 0x8000000100857330LL;
  *(void *)(inited + 176) = [objc_allocWithZone(NSNumber) initWithInteger:*a5];
  *(_BYTE *)(inited + 18_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 0;
  strcpy((char *)(inited + 192), "averageRecency");
  *(_BYTE *)(inited + 207) = -18;
  *(void *)(inited + 208) = [objc_allocWithZone(NSNumber) initWithInteger:*a6];
  *(_BYTE *)(inited + 2swift_weakDestroy(v0 + 16) = 0;
  return sub_100412AA4(inited);
}

uint64_t sub_100191A58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v21 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v20[1] = *(void *)(a2 + 88);
  id v13 = (void *)swift_allocObject(&unk_100945A38, 40LL, 7LL);
  void v13[2] = a1;
  v13[3] = a2;
  v13[4] = a3;
  aBlock[4] = sub_1001B1DF0;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100945A50;
  NSString v14 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain(a3);
  static DispatchQoS.unspecified.getter(v15);
  os_log_type_t v23 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v18 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v6, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t sub_100191C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = [(id)objc_opt_self(NSBundle) mainBundle];
  id v6 = [v5 bundleIdentifier];

  if (v6)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    uint64_t v9 = v8;
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v9 = 0LL;
  }

  uint64_t v10 = sub_10036DB04();
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v11 = sub_1006A0F4C(v19);
  swift_bridgeObjectRelease();
  uint64_t My = type metadata accessor for Feature.FindMy(0LL);
  uint64_t v22 = My;
  uint64_t v23 = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  id v13 = sub_10000A7C8(&v19);
  (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v13,  enum case for Feature.FindMy.networkScalingImprovements(_:),  My);
  LOBYTE(My) = isFeatureEnabled(_:)(&v19);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v19);
  uint64_t v19 = v11;
  char v20 = 0;
  uint64_t v21 = &off_100933988;
  LOBYTE(v22) = 0;
  uint64_t v23 = v7;
  uint64_t v24 = v9;
  uint64_t v25 = v10;
  char v26 = My & 1;
  uint64_t v27 = 0LL;
  uint64_t v28 = 0LL;
  char v29 = 1;
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  sub_1006A0E04(v18);
  double v15 = v14;
  swift_bridgeObjectRelease();
  unint64_t v16 = sub_1004132F8((uint64_t)_swiftEmptyArrayStorage);
  sub_1001A8364(a3, (uint64_t)&v19, 0, v16, a2, v15, 60.0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100191EC0(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v232 = a2;
  uint64_t v245 = type metadata accessor for UUID(0LL);
  uint64_t v244 = *(void *)(v245 - 8);
  uint64_t v3 = __chkstk_darwin(v245);
  uint64_t v5 = (uint64_t)&Configuration - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&Configuration - v7;
  __chkstk_darwin(v6);
  id v230 = (char *)&Configuration - v9;
  uint64_t v10 = sub_100004AEC(&qword_1009A4898);
  uint64_t v11 = __chkstk_darwin(v10);
  NSString v233 = (char *)&Configuration - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  double v14 = (char *)&Configuration - v13;
  uint64_t v238 = type metadata accessor for Date(0LL);
  unint64_t v225 = *(void *)(v238 - 8);
  uint64_t v15 = __chkstk_darwin(v238);
  __int128 v236 = (char *)&Configuration - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  NSString v237 = (char *)&Configuration - v17;
  uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009AE470);
  __chkstk_darwin(v18);
  v242.n128_u64[0] = (unint64_t)&Configuration - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v240 = type metadata accessor for SharedBeaconRecord(0LL);
  NSString v241 = *(char **)(v240 - 8);
  __chkstk_darwin(v240);
  uint64_t v231 = (uint64_t)&Configuration - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t Configuration = type metadata accessor for LocationFetchConfiguration(0LL);
  uint64_t v221 = *(void *)(Configuration - 8);
  uint64_t v21 = __chkstk_darwin(Configuration);
  uint64_t v224 = (uint64_t)&Configuration - (((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v223 = v22;
  __chkstk_darwin(v21);
  id v228 = (char *)&Configuration - v23;
  if (qword_10099B188 != -1) {
    goto LABEL_152;
  }
LABEL_2:
  uint64_t v24 = type metadata accessor for Logger(0LL);
  uint64_t v25 = sub_10000A720(v24, (uint64_t)qword_100A2A2B0);
  sub_1001B142C(a1);
  char v26 = sub_1001B142C(a1);
  id v243 = (id)v25;
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v28 = static os_log_type_t.default.getter(v27);
  BOOL v29 = os_log_type_enabled(v27, v28);
  uint64_t v234 = v14;
  if (v29)
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v31 = swift_slowAlloc(32LL, -1LL);
    *(void *)&__int128 aBlock = v31;
    *(_DWORD *)uint64_t v30 = 136446210;
    unint64_t v239 = (unint64_t)(v30 + 4);
    sub_1001B142C(a1);
    uint64_t v32 = sub_1006E5C68();
    unint64_t v34 = v33;
    sub_1001B1498(a1);
    uint64_t v254 = sub_1003F11D4(v32, v34, (uint64_t *)&aBlock);
    double v14 = v234;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v254, v255, v239, v30 + 12);
    swift_bridgeObjectRelease();
    sub_1001B1498(a1);
    sub_1001B1498(a1);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "One-shot location request with context %{public}s.", v30, 0xCu);
    swift_arrayDestroy(v31, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1LL, -1LL);
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  else
  {
    sub_1001B1498(a1);
    sub_1001B1498(a1);
  }

  id v227 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  LODWORD(v229) = *a1;
  if ((_DWORD)v229 == 2)
  {
    uint64_t v35 = sub_1004C20A4();
    uint64_t v36 = static os_log_type_t.default.getter(v35);
    if (qword_10099B720 != -1) {
      swift_once(&qword_10099B720, sub_10065128C);
    }
    os_log(_:dso:log:_:_:)( v36,  &_mh_execute_header,  qword_100A2B030,  "#Durian: scan for tags nearby owner.",  36LL,  2LL,  _swiftEmptyArrayStorage);
  }

  uint64_t v37 = *((void *)a1 + 1);
  if (!*(void *)(v37 + 16))
  {
    uint64_t v52 = sub_100508644();
    swift_bridgeObjectRetain(*((void *)a1 + 3));
    uint64_t v54 = sub_1006F1530(v53);
    swift_bridgeObjectRelease();
    uint64_t v55 = sub_10028E698((uint64_t)v52, v54, 0, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int64_t v56 = v55[2];
    if (v56)
    {
      uint64_t v254 = (uint64_t)_swiftEmptyArrayStorage;
      sub_1000328D0(0, v56, 0);
      uint64_t v57 = (uint64_t)(v55 + 4);
      uint64_t v47 = (void *)v254;
      do
      {
        sub_100013044(v57, (uint64_t)&aBlock);
        uint64_t v58 = v248;
        id v59 = v249;
        sub_100012ED8(&aBlock, (uint64_t)v248);
        (*(void (**)(void *))(*(void *)(*((void *)v59 + 1) + 8LL) + 32LL))(v58);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
        if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
        {
          sub_1000328D0(0, v47[2] + 1LL, 1);
          uint64_t v47 = (void *)v254;
        }

        unint64_t v61 = v47[2];
        unint64_t v60 = v47[3];
        if (v61 >= v60 >> 1)
        {
          sub_1000328D0(v60 > 1, v61 + 1, 1);
          uint64_t v47 = (void *)v254;
        }

        v47[2] = v61 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v244 + 32))( (unint64_t)v47 + ((*(unsigned __int8 *)(v244 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v244 + 80))
        + *(void *)(v244 + 72) * v61,
          v8,
          v245);
        uint64_t v254 = (uint64_t)v47;
        v57 += 40LL;
        --v56;
      }

      while (v56);
      goto LABEL_17;
    }

LABEL_123:
      swift_bridgeObjectRelease_n(v5, 2LL);
      uint64_t v210 = v248;
      uint64_t v211 = v249;
      sub_100012ED8(&aBlock, (uint64_t)v248);
      uint64_t v212 = (uint64_t)v230;
      (*((void (**)(void *, uint64_t (*)()))v211 + 1))(v210, v211);
      uint64_t v213 = v176;
      uint64_t v214 = v258;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v258);
      uint64_t v254 = v214;
      sub_10005CC34((uint64_t)v213, v212, isUniquelyReferenced_nonNull_native);
      uint64_t v258 = v254;
      swift_bridgeObjectRelease();
      uint64_t v216 = *(void (**)(uint64_t, uint64_t))(v244 + 8);
      uint64_t v217 = v212;
      uint64_t v218 = v245;
      v216(v217, v245);

      double v14 = v234;
      v216((uint64_t)v234, v218);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
      uint64_t v127 = (uint64_t)v233;
      uint64_t v8 = (char *)v242.n128_u64[0];
LABEL_80:
      uint64_t v157 = (uint64_t)v241;
      uint64_t v5 = v240;
    }

    unint64_t v159 = __clz(__rbit64(v5));
    uint64_t v160 = (v5 - 1) & v5;
    unint64_t v161 = v159 | (v157 << 6);
    goto LABEL_83;
  }

  __chkstk_darwin(v66);
  uint64_t v86 = v232;
  uint64_t v87 = v226;
  *(&Configuration - _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v232;
  *(&Configuration - 3) = v87;
  *(&Configuration - 2) = v88;
  uint64_t v89 = v240;
  swift_bridgeObjectRetain(v240);
  uint64_t v90 = sub_100188E54( (uint64_t)_swiftEmptyDictionarySingleton,  (void (*)(uint64_t *, char *))sub_1001B36C4,  (uint64_t)(&Configuration - 6),  v89);
  swift_bridgeObjectRelease();
  if ((_DWORD)v229)
  {
    swift_retain();
    double v91 = sub_1001AB250(v5, v90, v86);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v5 = (uint64_t)v91;
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v222 = v8;
  uint64_t v93 = *(void *)(v5 + 16);
  if (v93)
  {
    uint64_t v94 = v5 + 32;
    unint64_t v239 = v5;
    __n128 v95 = swift_bridgeObjectRetain_n(v5, 2LL);
    v95.n128_u64[0] = 141558275LL;
    __n128 v242 = v95;
    NSString v241 = (char *)&type metadata for Any + 8;
    id v96 = v230;
    do
    {
      sub_100013044(v94, (uint64_t)&aBlock);
      uint64_t v97 = sub_100013044((uint64_t)&aBlock, (uint64_t)&v254);
      id v98 = (os_log_s *)Logger.logObject.getter(v97);
      os_log_type_t v99 = static os_log_type_t.default.getter(v98);
      if (os_log_type_enabled(v98, v99))
      {
        uint64_t v100 = swift_slowAlloc(22LL, -1LL);
        uint64_t v101 = swift_slowAlloc(32LL, -1LL);
        v253[0] = v101;
        *(_DWORD *)uint64_t v100 = v242.n128_u32[0];
        *(void *)(v100 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 1752392040LL;
        *(_WORD *)(v100 + 12) = 2081;
        uint64_t v103 = v256;
        uint64_t v102 = v257;
        sub_100012ED8(&v254, v256);
        (*(void (**)(uint64_t))(*((void *)v102[1] + 1) + 32LL))(v103);
        uint64_t v104 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v105 = v245;
        uint64_t v106 = dispatch thunk of CustomStringConvertible.description.getter(v245, v104);
        unint64_t v108 = v107;
        uint64_t v109 = v105;
        a1 = v235;
        (*(void (**)(char *, uint64_t))(v244 + 8))(v96, v109);
        *(void *)(v100 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1003F11D4(v106, v108, v253);
        double v14 = v234;
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v254);
        _os_log_impl( (void *)&_mh_execute_header,  v98,  v99,  "One-shot location fetching ACSN for beacon without recent location: %{private,mask.hash}s.",  (uint8_t *)v100,  0x16u);
        swift_arrayDestroy(v101, 1LL, v241);
        swift_slowDealloc(v101, -1LL, -1LL);
        swift_slowDealloc(v100, -1LL, -1LL);
      }

      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v254);
      }

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
      v94 += 40LL;
      --v93;
    }

    while (v93);
    uint64_t v5 = v239;
    swift_bridgeObjectRelease_n(v239, 2LL);
    uint64_t v86 = v232;
  }

  uint64_t v110 = *(dispatch_queue_s **)(v86 + 88);
  uint64_t v111 = v224;
  sub_10001DC4C((uint64_t)v228, v224, type metadata accessor for LocationFetchConfiguration);
  uint64_t v112 = *(unsigned __int8 *)(v221 + 80);
  uint64_t v113 = (v112 + 128) & ~v112;
  uint64_t v114 = swift_allocObject(&unk_1009456C8, (char *)v223 + v113, v112 | 7);
  __int128 v115 = *((_OWORD *)a1 + 3);
  *(_OWORD *)(v114 + 48) = *((_OWORD *)a1 + 2);
  *(_OWORD *)(v114 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v115;
  *(_OWORD *)(v114 + 80) = *((_OWORD *)a1 + 4);
  *(_OWORD *)(v114 + 89) = *(_OWORD *)(a1 + 73);
  __int128 v116 = *((_OWORD *)a1 + 1);
  *(_OWORD *)(v114 + swift_weakDestroy(v0 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v114 + 32) = v116;
  *(void *)(v114 + 112) = v86;
  *(void *)(v114 + 120) = v5;
  sub_10002218C(v111, v114 + v113, type metadata accessor for LocationFetchConfiguration);
  uint64_t v117 = swift_allocObject(&unk_1009456F0, 32LL, 7LL);
  uint64_t v223 = sub_1001B157C;
  *(void *)(v117 + swift_weakDestroy(v0 + 16) = sub_1001B157C;
  *(void *)(v117 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v114;
  uint64_t v224 = v114;
  int v249 = sub_100095030;
  uint64_t v250 = v117;
  *(void *)&__int128 aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256LL;
  NSString v247 = sub_100025BD4;
  uint64_t v248 = &unk_100945708;
  uint64_t v118 = _Block_copy(&aBlock);
  sub_1001B142C(a1);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v110, v118);
  _Block_release(v118);
  LOBYTE(v110) = swift_isEscapingClosureAtFileLocation(v117, "", 150LL, 428LL, 44LL, 1LL);
  uint64_t result = swift_release();
  if ((v110 & 1) == 0)
  {
    uint64_t v8 = v222;
    goto LABEL_59;
  }

  __break(1u);
  return result;
}

      swift_bridgeObjectRelease_n(v8, 2LL);
      double v203 = v245;
      double v204 = v246;
      sub_100012ED8(&aBlock, (uint64_t)v245);
      id v205 = (uint64_t)v227;
      (*((void (**)(void *, uint64_t (*)()))v204 + 1))(v203, v204);
      uint64_t v5 = (unint64_t)(id)a1;
      double v206 = v255;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v255);
      uint64_t v251 = v206;
      sub_10005CC34(v5, v205, isUniquelyReferenced_nonNull_native);
      uint64_t v255 = v251;
      swift_bridgeObjectRelease();
      double v208 = *(void (**)(uint64_t, unint64_t))(v242 + 8);
      uint64_t v128 = v232;
      v208(v205, v232);

      uint64_t v70 = (uint64_t)v231;
      v208((uint64_t)v231, v128);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
      id v129 = (uint64_t)v230;
      uint64_t v11 = (char *)v240.n128_u64[0];
      __n128 v156 = (unint64_t)v239;
      a1 = v238;
      if (!v238) {
        goto LABEL_83;
      }
    }
  }

  __chkstk_darwin(v68);
  uint64_t v87 = v222;
  *(&v214 - _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v64;
  *(&v214 - 3) = v87;
  *(&v214 - 2) = v88;
  swift_bridgeObjectRetain(v49);
  uint64_t v89 = sub_100188E54( (uint64_t)&_swiftEmptyDictionarySingleton,  (void (*)(uint64_t *, char *))sub_1001B36C4,  (uint64_t)(&v214 - 6),  (uint64_t)v49);
  swift_bridgeObjectRelease();
  if ((_DWORD)v223)
  {
    swift_retain();
    uint64_t v90 = sub_1001AB250(v8, v89, v64);
    uint64_t v226 = v11;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v8 = (uint64_t)v90;
    double v91 = v90[2];
    if (!v91) {
      goto LABEL_57;
    }
  }

  else
  {
    uint64_t v226 = v11;
    swift_bridgeObjectRelease();
    double v91 = *(void *)(v8 + 16);
    if (!v91) {
      goto LABEL_57;
    }
  }

  uint64_t v93 = v8 + 32;
  NSString v237 = v8;
  uint64_t v94 = swift_bridgeObjectRetain_n(v8, 2LL);
  v94.n128_u64[0] = 141558275LL;
  uint64_t v240 = v94;
  unint64_t v239 = (char *)&type metadata for Any + 8;
  __n128 v95 = v227;
  do
  {
    sub_100013044(v93, (uint64_t)&aBlock);
    id v96 = sub_100013044((uint64_t)&aBlock, (uint64_t)&v251);
    uint64_t v97 = (os_log_s *)Logger.logObject.getter(v96);
    id v98 = static os_log_type_t.default.getter(v97);
    if (os_log_type_enabled(v97, v98))
    {
      os_log_type_t v99 = swift_slowAlloc(22LL, -1LL);
      uint64_t v100 = swift_slowAlloc(32LL, -1LL);
      v250[0] = v100;
      *(_DWORD *)os_log_type_t v99 = v240.n128_u32[0];
      *(void *)(v99 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 1752392040LL;
      *(_WORD *)(v99 + 12) = 2081;
      uint64_t v101 = v253;
      uint64_t v102 = v254;
      sub_100012ED8(&v251, v253);
      (*(void (**)(uint64_t))(*((void *)v102[1] + 1) + 32LL))(v101);
      uint64_t v103 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v104 = v232;
      uint64_t v105 = dispatch thunk of CustomStringConvertible.description.getter(v232, v103);
      unint64_t v107 = v106;
      unint64_t v108 = v104;
      a1 = (unint64_t)v233;
      (*(void (**)(char *, unint64_t))(v242 + 8))(v95, v108);
      *(void *)(v99 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1003F11D4(v105, v107, v250);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v251);
      _os_log_impl( (void *)&_mh_execute_header,  v97,  v98,  "One-shot location fetching ACSN for beacon without recent location: %{private,mask.hash}s.",  (uint8_t *)v99,  0x16u);
      swift_arrayDestroy(v100, 1LL, v239);
      swift_slowDealloc(v100, -1LL, -1LL);
      uint64_t v109 = v99;
      uint64_t v70 = (uint64_t)v231;
      swift_slowDealloc(v109, -1LL, -1LL);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v251);
    }

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
    v93 += 40LL;
    --v91;
  }

  while (v91);
  uint64_t v8 = v237;
  swift_bridgeObjectRelease_n(v237, 2LL);
  id v64 = v228;
LABEL_57:
  uint64_t v110 = *(dispatch_queue_s **)(v64 + 88);
  uint64_t v111 = v218;
  sub_10001DC4C((uint64_t)v225, v218, type metadata accessor for LocationFetchConfiguration);
  uint64_t v112 = *(unsigned __int8 *)(v216 + 80);
  uint64_t v113 = (v112 + 128) & ~v112;
  uint64_t v114 = swift_allocObject(&unk_100946000, v113 + v217, v112 | 7);
  __int128 v115 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v114 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v114 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v115;
  *(_OWORD *)(v114 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v114 + 89) = *(_OWORD *)(a1 + 73);
  __int128 v116 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v114 + swift_weakDestroy(v0 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v114 + 32) = v116;
  *(void *)(v114 + 112) = v64;
  *(void *)(v114 + 120) = v8;
  sub_10002218C(v111, v114 + v113, type metadata accessor for LocationFetchConfiguration);
  uint64_t v117 = swift_allocObject(&unk_100946028, 32LL, 7LL);
  uint64_t v223 = sub_1001B157C;
  *(void *)(v117 + swift_weakDestroy(v0 + 16) = sub_1001B157C;
  *(void *)(v117 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v114;
  v246 = sub_100154688;
  NSString v247 = v117;
  *(void *)&__int128 aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256LL;
  uint64_t v244 = sub_100025BD4;
  uint64_t v245 = &unk_100946040;
  uint64_t v118 = _Block_copy(&aBlock);
  sub_1001B142C((void *)a1);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v110, v118);
  _Block_release(v118);
  LOBYTE(v118) = swift_isEscapingClosureAtFileLocation(v117, "", 150LL, 428LL, 44LL, 1LL);
  uint64_t result = swift_release();
  if ((v118 & 1) == 0)
  {
    uint64_t v218 = v114;
    goto LABEL_59;
  }

  __break(1u);
  return result;
}

  swift_release();
  os_log_type_t v99 = v83[2];
  if (!v99) {
    goto LABEL_174;
  }
  uint64_t v100 = v83[4];
  uint64_t v101 = *((_BYTE *)v83 + 40);
  uint64_t v102 = v99 - 1;
  if (v102)
  {
    uint64_t v103 = v83 + 7;
    do
    {
      uint64_t v104 = *((void *)v103 - 1);
      uint64_t v106 = *v103;
      v103 += 16;
      uint64_t v105 = v106;
      if (v104 < v100)
      {
        uint64_t v100 = v104;
        uint64_t v101 = v105;
      }

      --v102;
    }

    while (v102);
  }

  swift_release();
  unint64_t v107 = 1LL << *(_BYTE *)(v198 + 32);
  unint64_t v108 = -1LL;
  if (v107 < 64) {
    unint64_t v108 = ~(-1LL << v107);
  }
  uint64_t v109 = v108 & *(void *)(v198 + 64);
  id v191 = (unint64_t)(v107 + 63) >> 6;
  swift_bridgeObjectRetain(v198);
  uint64_t v110 = 0LL;
  uint64_t v111 = _swiftEmptyArrayStorage;
  if (v109) {
    goto LABEL_136;
  }
LABEL_137:
  uint64_t v117 = v110 + 1;
  if (__OFADD__(v110, 1LL))
  {
LABEL_188:
    __break(1u);
LABEL_189:
    __break(1u);
LABEL_190:
    __break(1u);
LABEL_191:
    __break(1u);
LABEL_192:
    __break(1u);
    return;
  }

  if (v117 >= v191) {
    goto LABEL_165;
  }
  uint64_t v118 = *(void *)(v192 + 8 * v117);
  ++v110;
  if (v118) {
    goto LABEL_154;
  }
  uint64_t v110 = v117 + 1;
  if (v117 + 1 >= v191) {
    goto LABEL_165;
  }
  uint64_t v118 = *(void *)(v192 + 8 * v110);
  if (v118) {
    goto LABEL_154;
  }
  uint64_t v110 = v117 + 2;
  if (v117 + 2 >= v191) {
    goto LABEL_165;
  }
  uint64_t v118 = *(void *)(v192 + 8 * v110);
  if (v118) {
    goto LABEL_154;
  }
  uint64_t v110 = v117 + 3;
  if (v117 + 3 >= v191) {
    goto LABEL_165;
  }
  uint64_t v118 = *(void *)(v192 + 8 * v110);
  if (v118) {
    goto LABEL_154;
  }
  uint64_t v110 = v117 + 4;
  if (v117 + 4 >= v191) {
    goto LABEL_165;
  }
  uint64_t v118 = *(void *)(v192 + 8 * v110);
  if (v118)
  {
LABEL_154:
    uint64_t v109 = (v118 - 1) & v118;
    for (m = __clz(__rbit64(v118)) + (v110 << 6); ; m = v115 | (v110 << 6))
    {
      uint64_t v120 = *(void *)(v198 + 56) + 16 * m;
      uint64_t v121 = *(void *)v120;
      uint64_t v122 = *(unsigned __int8 *)(v120 + 8);
      if (*(_BYTE *)(v120 + 8))
      {
        if (v122 != 2)
        {
          swift_bridgeObjectRelease();
          goto LABEL_159;
        }

        uint64_t v113 = 0x6F4C657275636553LL;
        uint64_t v112 = 0xEF736E6F69746163LL;
      }

      else
      {
        uint64_t v112 = 0xE700000000000000LL;
        uint64_t v113 = 0x7972616D697250LL;
      }

      uint64_t v114 = _stringCompareWithSmolCheck(_:_:expecting:)(v113, v112, 0x7261646E6F636553LL, 0xE900000000000079LL, 0LL);
      swift_bridgeObjectRelease();
      if ((v114 & 1) == 0)
      {
        if (!v109) {
          goto LABEL_137;
        }
        goto LABEL_136;
      }

uint64_t sub_100193D08(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  uint64_t v13 = sub_100577B58(a2);
  v17[2] = a4;
  v17[3] = a5;
  uint64_t v14 = sub_100023D00((uint64_t (*)(char *))sub_1001B1B00, v17, (uint64_t)v13);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  uint64_t v18 = *a1;
  *a1 = 0x8000000000000000LL;
  sub_10005CF24(v14, (uint64_t)v12, isUniquelyReferenced_nonNull_native);
  *a1 = v18;
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_100193E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t result = __chkstk_darwin(v10);
  uint64_t v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void *)(a2 + 16);
  if (!v14) {
    goto LABEL_9;
  }
  int v15 = *(unsigned __int8 *)(a1 + *(int *)(v10 + 44));
  if (*(unsigned __int8 *)(a2 + 32) == v15)
  {
LABEL_3:
    sub_10001DC4C(a1, (uint64_t)v13, type metadata accessor for BeaconEstimatedLocation);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
    uint64_t v16 = &v13[*(int *)(v10 + 40)];
    uint64_t v17 = sub_100007864( &qword_1009A1280,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    char v18 = dispatch thunk of static Comparable.< infix(_:_:)(v16, v9, v6, v17) ^ 1;
LABEL_10:
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    sub_100018C68((uint64_t)v13, type metadata accessor for BeaconEstimatedLocation);
    return v18 & 1;
  }

  if (v14 == 1)
  {
LABEL_9:
    sub_10001DC4C(a1, (uint64_t)v13, type metadata accessor for BeaconEstimatedLocation);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
    char v18 = 0;
    goto LABEL_10;
  }

  uint64_t v19 = 33LL;
  while (1)
  {
    uint64_t v20 = v19 - 31;
    if (__OFADD__(v19 - 32, 1LL)) {
      break;
    }
    ++v19;
    if (v20 == v14) {
      goto LABEL_9;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_100193FF8(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = *a1;
  uint64_t v8 = *((void *)a1 + 5);
  uint64_t v7 = *((void *)a1 + 6);
  uint64_t v9 = *((void *)a1 + 2);
  uint64_t v10 = *((void *)a1 + 9);
  uint64_t v19 = *((void *)a1 + 10);
  unsigned __int8 v11 = a1[88];
  uint64_t v12 = qword_10099B318;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  if (v12 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  BOOL v13 = v6 == 3;
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v14 = sub_1006A0F4C(v22);
  swift_bridgeObjectRelease();
  uint64_t My = type metadata accessor for Feature.FindMy(0LL);
  uint64_t v25 = My;
  uint64_t v26 = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  uint64_t v16 = sub_10000A7C8(&v22);
  (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v16,  enum case for Feature.FindMy.networkScalingImprovements(_:),  My);
  LOBYTE(My) = isFeatureEnabled(_:)(&v22);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v22);
  uint64_t v22 = v14;
  char v23 = 0;
  uint64_t v24 = &off_1009339E0;
  LOBYTE(v25) = v13;
  uint64_t v26 = v8;
  uint64_t v27 = v7;
  uint64_t v28 = v9;
  char v29 = My & 1;
  uint64_t v30 = v10;
  uint64_t v31 = v19;
  unsigned __int8 v32 = v11;
  double v17 = *(double *)(a4 + *(int *)(type metadata accessor for LocationFetchConfiguration(0LL) + 32));
  sub_1001A8364(a3, (uint64_t)&v22, (a1[56] & 1) == 0, *((void *)a1 + 8), a2, v17, *(double *)(a4 + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001941C0(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v177 = a4;
  uint64_t v184 = a1;
  uint64_t v191 = type metadata accessor for Date(0LL);
  uint64_t v190 = *(void *)(v191 - 8);
  __chkstk_darwin(v191);
  id v189 = (char *)&v168 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009A48D8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v182 = (char *)&v168 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v187 = (uint64_t)&v168 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v188 = (uint64_t)&v168 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v178 = (char *)&v168 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v174 = (uint64_t)&v168 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  os_log_t v175 = (os_log_t)((char *)&v168 - v19);
  uint64_t v20 = __chkstk_darwin(v18);
  unint64_t v173 = (char *)&v168 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  double v196 = (char *)&v168 - v23;
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v168 - v24;
  uint64_t v180 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v26 = __chkstk_darwin(v180);
  double v179 = (char *)&v168 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v181 = (uint64_t)&v168 - v29;
  __chkstk_darwin(v28);
  uint64_t v192 = (__int128 *)((char *)&v168 - v30);
  uint64_t v200 = type metadata accessor for UUID(0LL);
  uint64_t v197 = *(void *)(v200 - 8);
  uint64_t v31 = __chkstk_darwin(v200);
  uint64_t v183 = (char *)&v168 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v185 = (char *)&v168 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  id v186 = (char *)&v168 - v36;
  __chkstk_darwin(v35);
  id v176 = (char *)&v168 - v37;
  uint64_t v38 = sub_100004AEC(&qword_1009A48E0);
  __chkstk_darwin(v38);
  id v40 = (char *)&v168 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v193 = (uint64_t)&v168 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v43);
  uint64_t v46 = (char *)&v168 - v45;
  uint64_t v198 = *(void *)(a3 + 256);
  sub_100504C28(a2, (uint64_t)&v203);
  if (!*((void *)&v204 + 1)) {
    return sub_100015794((uint64_t)&v203, (uint64_t *)&unk_1009A9C40);
  }
  sub_100012EC0(&v203, (uint64_t)&v206);
  uint64_t v199 = *(int *)(v7 + 48);
  sub_1000F0BF0(*(void *)(a2 + v199), (uint64_t)v40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1LL, v41) != 1)
  {
    uint64_t v169 = v42;
    uint64_t v171 = v41;
    uint64_t v194 = v7;
    id v195 = (char *)a2;
    uint64_t v172 = v46;
    sub_10002218C((uint64_t)v40, (uint64_t)v46, type metadata accessor for BeaconEstimatedLocation);
    uint64_t v48 = v207;
    uint64_t v49 = v208;
    sub_100012ED8(&v206, v207);
    unint64_t v50 = v192;
    (*(void (**)(uint64_t, uint64_t))(v49 + 192))(v48, v49);
    uint64_t v51 = v197;
    uint64_t v52 = *(unsigned int (**)(__int128 *, uint64_t, uint64_t))(v197 + 48);
    uint64_t v53 = v200;
    unsigned int v54 = v52(v50, 1LL, v200);
    __int128 v170 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v52;
    if (v54 == 1)
    {
      uint64_t v55 = &qword_10099D8A0;
      int64_t v56 = v50;
LABEL_13:
      sub_100015794((uint64_t)v56, v55);
      goto LABEL_14;
    }

    uint64_t v57 = (uint64_t)v176;
    (*(void (**)(char *, __int128 *, uint64_t))(v51 + 32))(v176, v50, v53);
    uint64_t v58 = *v177;
    if (*(void *)(*v177 + 16) && (unint64_t v59 = sub_10030D124(v57), (v60 & 1) != 0))
    {
      sub_100013044(*(void *)(v58 + 56) + 40 * v59, (uint64_t)&v203);
      sub_100015794((uint64_t)&v203, (uint64_t *)&unk_1009AA790);
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v57, v200);
    }

    else
    {
      uint64_t v205 = 0LL;
      __int128 v203 = 0u;
      __int128 v204 = 0u;
      sub_100015794((uint64_t)&v203, (uint64_t *)&unk_1009AA790);
      sub_100513108(v57, (uint64_t)&v201);
      if (!v202)
      {
        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v57, v200);
        uint64_t v55 = (uint64_t *)&unk_1009AA790;
        int64_t v56 = &v201;
        goto LABEL_13;
      }

      sub_100012EC0(&v201, (uint64_t)&v203);
      uint64_t v61 = (uint64_t)v186;
      uint64_t v62 = v200;
      (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v186, v57, v200);
      sub_100013044((uint64_t)&v203, (uint64_t)&v201);
      sub_100045298((uint64_t)&v201, v61);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v203);
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v57, v62);
    }

void sub_1001954D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v71 = *(void *)(v4 - 8);
  uint64_t v72 = v4;
  __chkstk_darwin(v4);
  uint64_t v68 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v69 = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v6 = __chkstk_darwin(v69);
  uint64_t v70 = (uint64_t)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v59 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v59 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v59 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v59 - v17;
  uint64_t v19 = sub_100004AEC(&qword_1009A48D8);
  uint64_t v20 = __chkstk_darwin(v19);
  os_log_t v67 = (os_log_t)((char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v73 = (uint64_t)&v59 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v74 = (uint64_t)&v59 - v25;
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v59 - v26;
  if (qword_10099B188 != -1) {
    swift_once(&qword_10099B188, sub_100189D08);
  }
  uint64_t v28 = type metadata accessor for Logger(0LL);
  sub_10000A720(v28, (uint64_t)qword_100A2A2B0);
  uint64_t v29 = *(int *)(v19 + 48);
  uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t))(v71 + 16);
  v66(v27, a2, v72);
  uint64_t v30 = *(void *)(a2 + v29);
  *(void *)&v27[v29] = v30;
  sub_10001581C((uint64_t)v27, v74, &qword_1009A48D8);
  sub_100015750((uint64_t)v27, v73, &qword_1009A48D8);
  sub_10001DC4C(a1, (uint64_t)v18, type metadata accessor for BeaconEstimatedLocation);
  sub_10001DC4C(a1, (uint64_t)v16, type metadata accessor for BeaconEstimatedLocation);
  sub_10001DC4C(a1, (uint64_t)v13, type metadata accessor for BeaconEstimatedLocation);
  sub_10001DC4C(a1, (uint64_t)v10, type metadata accessor for BeaconEstimatedLocation);
  uint64_t v31 = v70;
  sub_10001DC4C(a1, v70, type metadata accessor for BeaconEstimatedLocation);
  swift_bridgeObjectRetain(v30);
  uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
  os_log_type_t v34 = static os_log_type_t.default.getter(v33);
  int v35 = v34;
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v36 = swift_slowAlloc(82LL, -1LL);
    uint64_t v65 = swift_slowAlloc(96LL, -1LL);
    uint64_t v77 = v65;
    *(_DWORD *)uint64_t v36 = 141559811;
    uint64_t v75 = 1752392040LL;
    uint64_t v62 = v13;
    double v63 = v10;
    char v60 = v18;
    uint64_t v61 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v36 + 4, v36 + 12);
    *(_WORD *)(v36 + 12) = 2081;
    int v64 = v35;
    os_log_t v37 = v67;
    uint64_t v38 = v74;
    uint64_t v39 = v72;
    v66((char *)v67, v74, v72);
    uint64_t v40 = v71;
    uint64_t v41 = v68;
    (*(void (**)(char *, os_log_t, uint64_t))(v71 + 32))(v68, v37, v39);
    uint64_t v66 = (void (*)(char *, uint64_t, uint64_t))sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    os_log_t v67 = v33;
    uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter(v39, v66);
    unint64_t v44 = v43;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v39);
    uint64_t v75 = sub_1003F11D4(v42, v44, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v36 + 14, v36 + 22);
    swift_bridgeObjectRelease();
    sub_100015794(v73, &qword_1009A48D8);
    sub_100015794(v38, &qword_1009A48D8);
    *(_WORD *)(v36 + 22) = 2160;
    uint64_t v75 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v36 + 24, v36 + 32);
    *(_WORD *)(v36 + 32) = 2081;
    uint64_t v45 = (int *)v69;
    uint64_t v46 = (uint64_t)v60;
    uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter(v39, v66);
    uint64_t v75 = sub_1003F11D4(v47, v48, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v36 + 34, v36 + 42);
    swift_bridgeObjectRelease();
    sub_100018C68(v46, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v36 + 42) = 2049;
    uint64_t v49 = (uint64_t)v61;
    uint64_t v75 = *(void *)&v61[v45[7]];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v36 + 44, v36 + 52);
    sub_100018C68(v49, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v36 + 52) = 2049;
    uint64_t v50 = (uint64_t)v62;
    uint64_t v75 = *(void *)&v62[v45[8]];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v36 + 54, v36 + 62);
    sub_100018C68(v50, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v36 + 62) = 2050;
    uint64_t v51 = (uint64_t)v63;
    uint64_t v75 = *(void *)&v63[v45[9]];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v36 + 64, v36 + 72);
    sub_100018C68(v51, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v36 + 72) = 2082;
    uint64_t v52 = v70;
    uint64_t v53 = type metadata accessor for Date(0LL);
    uint64_t v54 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter(v53, v54);
    uint64_t v75 = sub_1003F11D4(v55, v56, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v36 + 74, v36 + 82);
    swift_bridgeObjectRelease();
    sub_100018C68(v52, type metadata accessor for BeaconEstimatedLocation);
    os_log_t v57 = v67;
    _os_log_impl( (void *)&_mh_execute_header,  v67,  (os_log_type_t)v64,  "Filtering the following latest location for beacon %{private,mask.hash}s, locationUUID: %{private,mask.hash}s, lat : %{private}f, long: %{private}f, accuracy: %{public}f, timestamp: %{public}s.",  (uint8_t *)v36,  0x52u);
    uint64_t v58 = v65;
    swift_arrayDestroy(v65, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1LL, -1LL);
    swift_slowDealloc(v36, -1LL, -1LL);
  }

  else
  {
    sub_100015794(v73, &qword_1009A48D8);
    sub_100015794(v74, &qword_1009A48D8);
    sub_100018C68((uint64_t)v18, type metadata accessor for BeaconEstimatedLocation);
    sub_100018C68((uint64_t)v16, type metadata accessor for BeaconEstimatedLocation);
    sub_100018C68((uint64_t)v13, type metadata accessor for BeaconEstimatedLocation);
    sub_100018C68((uint64_t)v10, type metadata accessor for BeaconEstimatedLocation);
    sub_100018C68(v31, type metadata accessor for BeaconEstimatedLocation);
  }

void *sub_100195B88(uint64_t a1, double a2)
{
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  static Date.trustedNow.getter((uint64_t)v8);
  uint64_t v23 = a1;
  double v24 = a2;
  uint64_t v25 = v2;
  uint64_t v26 = v8;
  uint64_t v9 = sub_100004AEC(&qword_1009A0B30);
  OS_dispatch_queue.sync<A>(execute:)(sub_1001B1A8C, v22, v9);
  uint64_t v10 = v27;
  if (!*(void *)(v27 + 16))
  {
    swift_bridgeObjectRelease();
    if (qword_10099B188 != -1) {
      swift_once(&qword_10099B188, sub_100189D08);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    uint64_t v17 = sub_10000A720(v16, (uint64_t)qword_100A2A2B0);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.default.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "Skipping fetching locations from server. No beacons remaining to fetch.",  v20,  2u);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    goto LABEL_12;
  }

  sub_1001ABC0C(v27);
  swift_bridgeObjectRetain(a1);
  uint64_t v12 = sub_1001AAF10(v11, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v12[2])
  {
    swift_bridgeObjectRelease();
LABEL_12:
    uint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_13;
  }

  uint64_t v13 = sub_1004C54A0(0LL, 1LL, 1, _swiftEmptyArrayStorage);
  unint64_t v15 = v13[2];
  unint64_t v14 = v13[3];
  if (v15 >= v14 >> 1) {
    uint64_t v13 = sub_1004C54A0((void *)(v14 > 1), v15 + 1, 1, v13);
  }
  void v13[2] = v15 + 1;
  v13[v15 + 4] = v12;
LABEL_13:
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  return v13;
}

uint64_t sub_100195DC4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, double a5@<D0>)
{
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(double *)&_OWORD v27[2] = a5;
  void v27[3] = a2;
  v27[4] = a3;
  swift_bridgeObjectRetain(a1);
  uint64_t v15 = sub_100023AD4((uint64_t)sub_1001B1AAC, v27, a1);
  int64_t v16 = *(void *)(v15 + 16);
  if (v16)
  {
    v25[2] = v5;
    uint64_t v26 = a4;
    uint64_t v31 = _swiftEmptyArrayStorage;
    sub_1000328D0(0, v16, 0);
    v25[1] = v15;
    uint64_t v17 = v15 + 32;
    uint64_t v18 = v31;
    do
    {
      sub_100013044(v17, (uint64_t)v28);
      uint64_t v19 = v29;
      uint64_t v20 = v30;
      sub_100012ED8(v28, v29);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v20 + 8) + 8LL) + 32LL))(v19);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
      if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
      {
        sub_1000328D0(0, v18[2] + 1LL, 1);
        uint64_t v18 = v31;
      }

      unint64_t v22 = v18[2];
      unint64_t v21 = v18[3];
      if (v22 >= v21 >> 1)
      {
        sub_1000328D0(v21 > 1, v22 + 1, 1);
        uint64_t v18 = v31;
      }

      _OWORD v18[2] = v22 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))( (unint64_t)v18 + ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
      + *(void *)(v12 + 72) * v22,
        v14,
        v11);
      uint64_t v31 = v18;
      v17 += 40LL;
      --v16;
    }

    while (v16);
    swift_bridgeObjectRelease();
    a4 = v26;
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = _swiftEmptyArrayStorage;
  }

  uint64_t v23 = sub_1006F1060((uint64_t)v18);
  uint64_t result = swift_bridgeObjectRelease();
  *a4 = v23;
  return result;
}

uint64_t sub_100195FD8(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v223 = a3;
  uint64_t v221 = a2;
  uint64_t v222 = type metadata accessor for Logger(0LL);
  uint64_t v224 = *(void (***)(char *, uint64_t))(v222 - 8);
  uint64_t v6 = __chkstk_darwin(v222);
  uint64_t v208 = (char *)&v199 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v213 = (char *)&v199 - v8;
  NSString v233 = (os_log_s *)type metadata accessor for BeaconObservation(0LL);
  uint64_t v236 = *((void *)v233 - 1);
  uint64_t v9 = __chkstk_darwin(v233);
  Class v235 = (uint64_t (**)(uint64_t))((char *)&v199 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v9);
  uint64_t v232 = (char *)&v199 - v11;
  uint64_t v231 = type metadata accessor for UUID(0LL);
  uint64_t v216 = *(void *)(v231 - 8);
  uint64_t v12 = __chkstk_darwin(v231);
  __int128 v204 = (char *)&v199 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v210 = (char *)&v199 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v219 = (char *)&v199 - v17;
  __chkstk_darwin(v16);
  uint64_t v19 = (uint64_t (*)(uint64_t))((char *)&v199 - v18);
  uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009A5990);
  __chkstk_darwin(v20);
  uint64_t v215 = (uint64_t)&v199 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v202 = (uint64_t)&v199 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v23);
  __int128 v203 = (char *)&v199 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v218 = (char *)&v199 - v28;
  __chkstk_darwin(v27);
  uint64_t v217 = (char *)&v199 - v29;
  unint64_t v30 = type metadata accessor for Date(0LL);
  uint64_t v229 = *(void *)(v30 - 8);
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v33 = (char *)&v199 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = __chkstk_darwin(v31);
  uint64_t v36 = (char *)&v199 - v35;
  uint64_t v37 = __chkstk_darwin(v34);
  uint64_t v39 = (char *)&v199 - v38;
  uint64_t v40 = __chkstk_darwin(v37);
  __int128 v201 = (char *)&v199 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v212 = (char *)&v199 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v211 = (char *)&v199 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  unint64_t v48 = (char *)&v199 - v47;
  uint64_t v49 = __chkstk_darwin(v46);
  id v228 = (char *)&v199 - v50;
  uint64_t v51 = __chkstk_darwin(v49);
  uint64_t v226 = (char *)&v199 - v52;
  uint64_t v53 = __chkstk_darwin(v51);
  id v230 = (char *)&v199 - v54;
  __chkstk_darwin(v53);
  unint64_t v225 = (char *)&v199 - v55;
  if (qword_10099B300 != -1) {
    goto LABEL_61;
  }
  while (1)
  {
    uint64_t v56 = qword_100A2A6C8;
    os_log_t v57 = a1;
    uint64_t v59 = a1[3];
    uint64_t v58 = a1[4];
    id v227 = v57;
    sub_100012ED8(v57, v59);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v58 + 8) + 8LL) + 32LL))(v59);
    uint64_t v214 = objc_autoreleasePoolPush();
    uint64_t v60 = sub_100004AEC((uint64_t *)&unk_1009AF790);
    uint64_t v61 = v234;
    OS_dispatch_queue.sync<A>(execute:)(sub_1000DE20C, v56, v60);
    uint64_t v220 = v61;
    uint64_t v62 = v239;
    uint64_t v63 = v239[2];
    uint64_t v207 = v33;
    uint64_t v206 = v36;
    uint64_t v205 = v39;
    double v209 = v48;
    if (!v63)
    {
      swift_bridgeObjectRelease();
      uint64_t v70 = _swiftEmptyArrayStorage;
      uint64_t v74 = v225;
      uint64_t v75 = v229;
      uint64_t v36 = (char *)v233;
      goto LABEL_20;
    }

    unint64_t v64 = sub_10030D124((uint64_t)v19);
    uint64_t v36 = (char *)v233;
    if ((v65 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v70 = _swiftEmptyArrayStorage;
      goto LABEL_19;
    }

    uint64_t v66 = *(void *)(v62[7] + 8 * v64);
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRelease();
    os_log_t v67 = sub_1002FE5F8(v66);
    swift_bridgeObjectRelease();
    sub_1002FFE1C((uint64_t)v67);
    uint64_t v69 = v68;
    swift_release();
    uint64_t v70 = _swiftEmptyArrayStorage;
    unint64_t v239 = _swiftEmptyArrayStorage;
    uint64_t v234 = *(void *)(v69 + 16);
    if (!v234) {
      break;
    }
    uint64_t v199 = v19;
    unint64_t v200 = v30;
    unint64_t v30 = 0LL;
    a1 = _swiftEmptyArrayStorage;
    uint64_t v19 = type metadata accessor for BeaconObservation;
    unint64_t v48 = (char *)v224;
    uint64_t v71 = (uint64_t)v232;
    while (v30 < *(void *)(v69 + 16))
    {
      uint64_t v39 = (char *)((*(unsigned __int8 *)(v236 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v236 + 80));
      uint64_t v33 = *(char **)(v236 + 72);
      sub_10001DC4C((uint64_t)&v39[v69 + (void)v33 * v30], v71, type metadata accessor for BeaconObservation);
      if (*(_BYTE *)(v71 + *((int *)v36 + 6)) == 5)
      {
        sub_10002218C(v71, (uint64_t)v235, type metadata accessor for BeaconObservation);
        if ((swift_isUniquelyReferenced_nonNull_native(a1) & 1) == 0) {
          sub_100032AA8(0, a1[2] + 1LL, 1);
        }
        a1 = v239;
        unint64_t v73 = v239[2];
        unint64_t v72 = v239[3];
        if (v73 >= v72 >> 1)
        {
          sub_100032AA8(v72 > 1, v73 + 1, 1);
          a1 = v239;
        }

        a1[2] = v73 + 1;
        sub_10002218C( (uint64_t)v235,  (uint64_t)&v39[(void)a1 + v73 * (void)v33],  type metadata accessor for BeaconObservation);
        uint64_t v71 = (uint64_t)v232;
        uint64_t v36 = (char *)v233;
      }

      else
      {
        sub_100018C68(v71, type metadata accessor for BeaconObservation);
      }

      ++v30;
      uint64_t v19 = type metadata accessor for BeaconObservation;
      if (v234 == v30)
      {
        uint64_t v70 = v239;
        unint64_t v30 = v200;
        uint64_t v19 = v199;
        goto LABEL_18;
      }
    }

    __break(1u);
LABEL_61:
    swift_once(&qword_10099B300, sub_1003459EC);
  }

uint64_t sub_100197518(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v69 = a5;
  uint64_t v70 = a4;
  uint64_t v77 = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v75 = *(void *)(v7 - 8);
  uint64_t v76 = v7;
  __chkstk_darwin(v7);
  uint64_t v74 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v72 = *(void *)(v9 - 8);
  uint64_t v73 = v9;
  __chkstk_darwin(v9);
  uint64_t v71 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v78 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v87[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v14 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  if (v14)
  {
    uint64_t v68 = a2;
    uint64_t v15 = a2 + 32;
    while (1)
    {
      sub_100013044(v15, (uint64_t)&aBlock);
      uint64_t v16 = v81;
      uint64_t v17 = v82;
      sub_100012ED8(&aBlock, (uint64_t)v81);
      uint64_t v18 = *(void *)(*((void *)v17 + 1) + 8LL);
      uint64_t v19 = *(void (**)(void *, uint64_t, __n128))(v18 + 32);
      __n128 v20 = swift_bridgeObjectRetain(a1);
      v19(v16, v18, v20);
      if (!*(void *)(a1 + 16)) {
        break;
      }
      sub_10030D124((uint64_t)v13);
      char v22 = v21;
      (*(void (**)(char *, uint64_t))(v78 + 8))(v13, v11);
      swift_bridgeObjectRelease();
      if ((v22 & 1) == 0) {
        goto LABEL_9;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
LABEL_4:
      v15 += 40LL;
      if (!--v14)
      {
        uint64_t v32 = (void *)v87[0];
        uint64_t v33 = v68;
        uint64_t v34 = v77;
        goto LABEL_16;
      }
    }

    (*(void (**)(char *, uint64_t))(v78 + 8))(v13, v11);
    swift_bridgeObjectRelease();
LABEL_9:
    sub_100012EC0(&aBlock, (uint64_t)v84);
    uint64_t v23 = v87[0];
    if ((swift_isUniquelyReferenced_nonNull_native(v87[0]) & 1) == 0)
    {
      sub_100032928(0, *(void *)(v23 + 16) + 1LL, 1);
      uint64_t v23 = v87[0];
    }

    unint64_t v25 = *(void *)(v23 + 16);
    unint64_t v24 = *(void *)(v23 + 24);
    if (v25 >= v24 >> 1) {
      sub_100032928(v24 > 1, v25 + 1, 1);
    }
    uint64_t v26 = v85;
    uint64_t v27 = v86;
    uint64_t v28 = sub_100037298((uint64_t)v84, v85);
    __chkstk_darwin(v28);
    unint64_t v30 = (char *)&v68 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *))(v31 + 16))(v30);
    sub_1002BBA60(v25, (uint64_t)v30, v87, v26, v27);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v84);
    goto LABEL_4;
  }

  uint64_t v32 = _swiftEmptyArrayStorage;
  uint64_t v33 = a2;
  uint64_t v34 = v77;
LABEL_16:
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  v87[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v36 = v32[2];
  if (v36)
  {
    unint64_t v37 = 0LL;
    uint64_t v38 = (uint64_t)(v32 + 4);
    while (v37 < v32[2])
    {
      sub_100013044(v38, (uint64_t)&aBlock);
      uint64_t v39 = v81;
      uint64_t v40 = v82;
      sub_100012ED8(&aBlock, (uint64_t)v81);
      if (((*((uint64_t (**)(void *, void (*)()))v40 + 14))(v39, v40) & 1) != 0)
      {
        sub_100012EC0(&aBlock, (uint64_t)v84);
        uint64_t v41 = v87[0];
        if ((swift_isUniquelyReferenced_nonNull_native(v87[0]) & 1) == 0)
        {
          sub_100032928(0, *(void *)(v41 + 16) + 1LL, 1);
          uint64_t v41 = v87[0];
        }

        unint64_t v43 = *(void *)(v41 + 16);
        unint64_t v42 = *(void *)(v41 + 24);
        if (v43 >= v42 >> 1) {
          sub_100032928(v42 > 1, v43 + 1, 1);
        }
        uint64_t v44 = v85;
        uint64_t v45 = v86;
        uint64_t v46 = sub_100037298((uint64_t)v84, v85);
        __chkstk_darwin(v46);
        unint64_t v48 = (char *)&v68 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *))(v49 + 16))(v48);
        sub_1002BBA60(v43, (uint64_t)v48, v87, v44, v45);
        uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v84);
      }

      else
      {
        uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
      }

      ++v37;
      v38 += 40LL;
      if (v36 == v37)
      {
        uint64_t v50 = (void *)v87[0];
        uint64_t v34 = v77;
        goto LABEL_29;
      }
    }

    __break(1u);
  }

  else
  {
    uint64_t v50 = _swiftEmptyArrayStorage;
LABEL_29:
    swift_release();
    uint64_t v51 = sub_1001899C8((uint64_t)v50);
    uint64_t v52 = sub_1006F1060((uint64_t)v51);
    swift_bridgeObjectRelease();
    if (v50[2])
    {
      uint64_t v53 = type metadata accessor for Transaction(0LL);
      __chkstk_darwin(v53);
      uint64_t v54 = v70;
      *(&v68 - 6) = (uint64_t)v34;
      *(&v68 - 5) = v54;
      uint64_t v55 = v69;
      *(&v68 - _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = (uint64_t)v50;
      *(&v68 - 3) = v55;
      *(&v68 - 2) = v52;
      static Transaction.named<A>(_:with:)( "beaconManagerService.ExhaustiveOnlineFetch",  42LL,  2LL,  sub_1001B18A4,  &v68 - 8);
      swift_release();
      uint64_t v56 = v54;
    }

    else
    {
      swift_release();
      uint64_t v56 = v70;
    }

    os_log_t v57 = (void *)swift_allocObject(&unk_100945808, 48LL, 7LL);
    v57[2] = v34;
    v57[3] = v33;
    v57[4] = v52;
    v57[5] = v56;
    uint64_t v82 = sub_1001B18D0;
    uint64_t v83 = v57;
    *(void *)&__int128 aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256LL;
    uint64_t v80 = sub_1001C31E8;
    uint64_t v81 = &unk_100945820;
    uint64_t v58 = _Block_copy(&aBlock);
    id v59 = v34;
    swift_retain();
    swift_bridgeObjectRetain(v33);
    uint64_t v60 = v71;
    static DispatchQoS.unspecified.getter(v61);
    v84[0] = _swiftEmptyArrayStorage;
    uint64_t v62 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v63 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v64 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    char v65 = v74;
    uint64_t v66 = v63;
    uint64_t v67 = v76;
    dispatch thunk of SetAlgebra.init<A>(_:)(v84, v66, v64, v76, v62);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v60, v65, v58);
    _Block_release(v58);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v65, v67);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v60, v73);
    return swift_release();
  }

  return result;
}

uint64_t sub_100197BA0(uint64_t a1, dispatch_group_t group, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  if (group) {
    dispatch_group_enter(group);
  }
  uint64_t v12 = (void *)swift_allocObject(&unk_1009458A8, 48LL, 7LL);
  v12[2] = a3;
  v12[3] = group;
  v12[4] = a1;
  v12[5] = a6;
  swift_retain();
  uint64_t v13 = group;
  swift_retain();
  swift_bridgeObjectRetain(a6);
  sub_100198480(a4, a5, (void (*)(void))sub_1001B198C, (uint64_t)v12);
  return swift_release();
}

uint64_t sub_100197C58(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v25 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v12 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = *(void *)(a2 + 48);
  uint64_t v15 = (void *)swift_allocObject(&unk_1009458D0, 48LL, 7LL);
  v15[2] = a3;
  void v15[3] = a4;
  v15[4] = a5;
  v15[5] = a2;
  aBlock[4] = sub_1001B1A80;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_1009458E8;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = a3;
  swift_retain();
  swift_bridgeObjectRetain(a5);
  uint64_t v18 = swift_retain();
  static DispatchQoS.unspecified.getter(v18);
  uint64_t v26 = _swiftEmptyArrayStorage;
  uint64_t v19 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v21 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v20, v21, v9, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v11, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v24);
  return swift_release();
}

void sub_100197E70(dispatch_group_s *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v58 = a1;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v6);
  char v65 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v69 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v58 - v12;
  uint64_t v14 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Transaction.capture()();
  uint64_t v17 = *(void *)(a3 + 56);
  uint64_t v61 = a3 + 56;
  uint64_t v18 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v19 = -1LL;
  if (v18 < 64) {
    uint64_t v19 = ~(-1LL << v18);
  }
  unint64_t v20 = v19 & v17;
  uint64_t v68 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocating;
  int64_t v62 = (unint64_t)(v18 + 63) >> 6;
  __n128 v21 = swift_bridgeObjectRetain(a3);
  int64_t v22 = 0LL;
  v21.n128_u64[0] = 141558275LL;
  __n128 v60 = v21;
  id v59 = (char *)&type metadata for Any + 8;
  uint64_t v63 = v16;
  uint64_t v64 = v13;
  while (1)
  {
    if (v20)
    {
      uint64_t v67 = (v20 - 1) & v20;
      unint64_t v24 = __clz(__rbit64(v20)) | (v22 << 6);
      goto LABEL_22;
    }

    int64_t v25 = v22 + 1;
    if (__OFADD__(v22, 1LL))
    {
      __break(1u);
LABEL_39:
      __break(1u);
      return;
    }

    if (v25 >= v62) {
      goto LABEL_34;
    }
    unint64_t v26 = *(void *)(v61 + 8 * v25);
    ++v22;
    if (!v26)
    {
      int64_t v22 = v25 + 1;
      if (v25 + 1 >= v62) {
        goto LABEL_34;
      }
      unint64_t v26 = *(void *)(v61 + 8 * v22);
      if (!v26)
      {
        int64_t v22 = v25 + 2;
        if (v25 + 2 >= v62) {
          goto LABEL_34;
        }
        unint64_t v26 = *(void *)(v61 + 8 * v22);
        if (!v26) {
          break;
        }
      }
    }

uint64_t sub_100198480(uint64_t a1, void *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v70 = a4;
  uint64_t v69 = a3;
  uint64_t v71 = a1;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v75 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (void (*)(char *, uint64_t))((char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = type metadata accessor for LocationFetcher(0LL);
  __chkstk_darwin(v8);
  uint64_t v72 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[4];
  sub_100012ED8(a2, v10);
  LODWORD(v73) = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 24))(v10, v11);
  uint64_t v12 = a2[3];
  uint64_t v13 = a2[4];
  sub_100012ED8(a2, v12);
  char v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 48))(v12, v13);
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = a2[3];
  uint64_t v19 = a2[4];
  sub_100012ED8(a2, v20);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 56))(v20, v19);
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v22 = sub_1006A0F4C(v84);
  swift_bridgeObjectRelease();
  uint64_t My = type metadata accessor for Feature.FindMy(0LL);
  *((void *)&v85 + 1) = My;
  *(void *)&__int128 v86 = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  unint64_t v24 = sub_10000A7C8(&v84);
  (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v24,  enum case for Feature.FindMy.networkScalingImprovements(_:),  My);
  LOBYTE(My) = isFeatureEnabled(_:)(&v84);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v84);
  *(void *)&__int128 v84 = v22;
  BYTE8(v8_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v73 & 1;
  *(void *)&__int128 v85 = &off_100933A08;
  BYTE8(v85) = v14;
  *(void *)&__int128 v86 = v16;
  *((void *)&v86 + 1) = v18;
  *(void *)&__int128 v87 = v21;
  BYTE8(v87) = My & 1;
  __int128 v88 = 0uLL;
  char v89 = 1;
  uint64_t v25 = *(void *)(v74 + 256);
  uint64_t v82 = &_s13DefaultPolicyVN;
  unint64_t v83 = sub_1001B15A8();
  uint64_t v26 = swift_allocObject(&unk_100945740, 97LL, 7LL);
  *(void *)&__int128 v81 = v26;
  __int128 v27 = v87;
  *(_OWORD *)(v26 + 48) = v86;
  *(_OWORD *)(v26 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v27;
  *(_OWORD *)(v26 + 80) = v88;
  *(_BYTE *)(v26 + 96) = v89;
  __int128 v28 = v85;
  *(_OWORD *)(v26 + swift_weakDestroy(v0 + 16) = v84;
  *(_OWORD *)(v26 + 32) = v28;
  uint64_t v29 = qword_10099B300;
  swift_retain();
  swift_bridgeObjectRetain(&off_100933A08);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v21);
  uint64_t v30 = v18;
  if (v29 != -1) {
    swift_once(&qword_10099B300, sub_1003459EC);
  }
  uint64_t v31 = qword_100A2A6C8;
  swift_retain();
  char v32 = _swiftEmptyArrayStorage;
  unint64_t v33 = sub_1004132F8((uint64_t)_swiftEmptyArrayStorage);
  sub_1002190F8(v25, &v81, v31, v33, v72);
  if (qword_10099B188 != -1) {
    swift_once(&qword_10099B188, sub_100189D08);
  }
  uint64_t v34 = type metadata accessor for Logger(0LL);
  uint64_t v35 = sub_10000A720(v34, (uint64_t)qword_100A2A2B0);
  swift_bridgeObjectRetain_n(&off_100933A08, 2LL);
  swift_bridgeObjectRetain_n(v18, 2LL);
  uint64_t v36 = swift_bridgeObjectRetain_n(v21, 2LL);
  uint64_t v68 = v35;
  uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v38 = static os_log_type_t.default.getter(v37);
  BOOL v39 = os_log_type_enabled(v37, v38);
  uint64_t v74 = v21;
  if (v39)
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v73 = swift_slowAlloc(32LL, -1LL);
    *(void *)&__int128 v81 = v73;
    *(_DWORD *)uint64_t v40 = 136446210;
    uint64_t v67 = v40 + 4;
    swift_bridgeObjectRetain(&off_100933A08);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v21);
    uint64_t v41 = sub_1001A65F0();
    unint64_t v43 = v42;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v76 = sub_1003F11D4(v41, v43, (uint64_t *)&v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v67, v40 + 12);
    swift_bridgeObjectRelease_n(v74, 2LL);
    swift_bridgeObjectRelease_n(v30, 2LL);
    swift_bridgeObjectRelease_n(&off_100933A08, 2LL);
    uint64_t v21 = v74;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Exhaustive fetch with internal policy %{public}s.", v40, 0xCu);
    uint64_t v44 = v73;
    swift_arrayDestroy(v73, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1LL, -1LL);
    swift_slowDealloc(v40, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v21, 2LL);
    swift_bridgeObjectRelease_n(v18, 2LL);
    swift_bridgeObjectRelease_n(&off_100933A08, 2LL);
  }

  uint64_t v80 = _swiftEmptyArrayStorage;
  uint64_t v45 = *(void *)(v71 + 16);
  swift_bridgeObjectRetain(v71);
  if (v45)
  {
    uint64_t v47 = v46 + 32;
    uint64_t v73 = v30;
    do
    {
      sub_100013044(v47, (uint64_t)&v81);
      uint64_t v49 = v82;
      unint64_t v48 = v83;
      sub_100012ED8(&v81, (uint64_t)v82);
      (*(void (**)(ValueMetadata *))(*(void *)(*(void *)(v48 + 8) + 8LL) + 32LL))(v49);
      uint64_t v50 = qword_100A2A6C8;
      swift_bridgeObjectRetain(&off_100933A08);
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRetain(v21);
      LOBYTE(v50) = sub_1001A88C8(v7, (unint64_t)&v84, v50);
      (*(void (**)(void, uint64_t))(v75 + 8))(v7, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v50 & 1) != 0)
      {
        sub_100012EC0(&v81, (uint64_t)&v76);
        uint64_t v51 = v80;
        if ((swift_isUniquelyReferenced_nonNull_native(v80) & 1) == 0)
        {
          sub_100032928(0, v51[2] + 1LL, 1);
          uint64_t v51 = v80;
        }

        unint64_t v53 = v51[2];
        unint64_t v52 = v51[3];
        if (v53 >= v52 >> 1) {
          sub_100032928(v52 > 1, v53 + 1, 1);
        }
        uint64_t v54 = v78;
        uint64_t v55 = v79;
        uint64_t v56 = sub_100037298((uint64_t)&v76, v78);
        __chkstk_darwin(v56);
        uint64_t v58 = (char *)&v66 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *))(v59 + 16))(v58);
        sub_1002BBA60(v53, (uint64_t)v58, (uint64_t *)&v80, v54, v55);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v76);
        uint64_t v30 = v73;
        uint64_t v21 = v74;
      }

      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v81);
      }

      v47 += 40LL;
      --v45;
    }

    while (v45);
    char v32 = v80;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __n128 v60 = v72;
  if (v32[2])
  {
    sub_1003E1DF8((uint64_t)v32, (uint64_t)v69, v70);
    swift_release();
  }

  else
  {
    uint64_t v61 = swift_release();
    int64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
    os_log_type_t v63 = static os_log_type_t.default.getter(v62);
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v64 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v62,  v63,  "Skipping exhaustive fetch since all beacons located recently.",  v64,  2u);
      swift_slowDealloc(v64, -1LL, -1LL);
    }

    sub_10041348C((uint64_t)_swiftEmptyArrayStorage);
    v69();
    swift_bridgeObjectRelease();
  }

  return sub_100018C68((uint64_t)v60, type metadata accessor for LocationFetcher);
}

void sub_100198CF8(dispatch_group_s *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 v60 = a1;
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  char v14 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v69 = (char *)&v60 - v15;
  uint64_t v16 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v16);
  uint64_t v68 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_1001899C8(a2);
  uint64_t v19 = sub_1006F1060((uint64_t)v18);
  swift_bridgeObjectRelease();
  if (*(void *)(a3 + 16) <= *(void *)(v19 + 16) >> 3)
  {
    uint64_t v73 = (void *)v19;
    sub_1003CBB18(a3);
    uint64_t v20 = v73;
  }

  else
  {
    uint64_t v20 = sub_1003CC7D4(a3, v19);
  }

  uint64_t v21 = v20[7];
  uint64_t v64 = (char *)(v20 + 7);
  uint64_t v22 = 1LL << *((_BYTE *)v20 + 32);
  uint64_t v23 = -1LL;
  if (v22 < 64) {
    uint64_t v23 = ~(-1LL << v22);
  }
  unint64_t v24 = v23 & v21;
  uint64_t v72 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocating;
  int64_t v65 = (unint64_t)(v22 + 63) >> 6;
  __n128 v25 = swift_bridgeObjectRetain(v20);
  int64_t v26 = 0LL;
  v25.n128_u64[0] = 141558275LL;
  __n128 v62 = v25;
  uint64_t v61 = (char *)&type metadata for Any + 8;
  __int128 v28 = v68;
  uint64_t v27 = (uint64_t)v69;
  os_log_type_t v63 = v14;
  uint64_t v66 = v9;
  uint64_t v67 = v20;
  while (1)
  {
    if (v24)
    {
      uint64_t v70 = (v24 - 1) & v24;
      int64_t v71 = v26;
      unint64_t v30 = __clz(__rbit64(v24)) | (v26 << 6);
      goto LABEL_25;
    }

    int64_t v31 = v26 + 1;
    if (__OFADD__(v26, 1LL))
    {
      __break(1u);
LABEL_42:
      __break(1u);
      return;
    }

    if (v31 >= v65) {
      goto LABEL_37;
    }
    unint64_t v32 = *(void *)&v64[8 * v31];
    int64_t v33 = v26 + 1;
    if (!v32)
    {
      int64_t v33 = v26 + 2;
      if (v26 + 2 >= v65) {
        goto LABEL_37;
      }
      unint64_t v32 = *(void *)&v64[8 * v33];
      if (!v32)
      {
        int64_t v33 = v26 + 3;
        if (v26 + 3 >= v65) {
          goto LABEL_37;
        }
        unint64_t v32 = *(void *)&v64[8 * v33];
        if (!v32) {
          break;
        }
      }
    }

uint64_t sub_100199358@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v57 = a3;
  uint64_t v5 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v65 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v65 - 8);
  uint64_t v9 = __chkstk_darwin(v65);
  uint64_t v61 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v64 = (char *)&v56 - v12;
  __chkstk_darwin(v11);
  char v14 = (char *)&v56 - v13;
  int64_t v15 = *(void *)(a1 + 16);
  uint64_t v16 = _swiftEmptyArrayStorage;
  __n128 v60 = v7;
  if (v15)
  {
    uint64_t v69 = _swiftEmptyArrayStorage;
    sub_1000328D0(0, v15, 0);
    uint64_t v17 = a1 + 32;
    uint64_t v16 = v69;
    do
    {
      sub_100013044(v17, (uint64_t)v66);
      uint64_t v19 = v67;
      uint64_t v18 = v68;
      sub_100012ED8(v66, v67);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v18 + 8) + 8LL) + 32LL))(v19);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v66);
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
      {
        sub_1000328D0(0, v16[2] + 1LL, 1);
        uint64_t v16 = v69;
      }

      unint64_t v21 = v16[2];
      unint64_t v20 = v16[3];
      if (v21 >= v20 >> 1)
      {
        sub_1000328D0(v20 > 1, v21 + 1, 1);
        uint64_t v16 = v69;
      }

      void v16[2] = v21 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))( (unint64_t)v16 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
      + *(void *)(v8 + 72) * v21,
        v14,
        v65);
      uint64_t v69 = v16;
      v17 += 40LL;
      --v15;
    }

    while (v15);
    uint64_t v7 = v60;
  }

  uint64_t v22 = v65;
  uint64_t v23 = sub_1006F1060((uint64_t)v16);
  swift_bridgeObjectRelease();
  uint64_t v24 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocalLocating;
  uint64_t v25 = *(void *)(a2 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocalLocating);
  if (*(void *)(v25 + 16) <= *(void *)(v23 + 16) >> 3)
  {
    v66[0] = v23;
    swift_bridgeObjectRetain(v25);
    sub_1003CBB18(v28);
    swift_bridgeObjectRelease();
    uint64_t v27 = (void *)v66[0];
  }

  else
  {
    swift_bridgeObjectRetain(*(void *)(a2
                                       + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocalLocating));
    uint64_t v27 = sub_1003CC7D4(v26, v23);
    swift_bridgeObjectRelease();
  }

  uint64_t v29 = sub_1002FE60C((uint64_t)v27);
  swift_bridgeObjectRelease();
  v66[0] = *(void *)(a2 + v24);
  uint64_t v30 = v66[0];
  swift_retain();
  swift_bridgeObjectRetain(v30);
  sub_100687EC0((uint64_t)v29);
  swift_release();
  uint64_t v31 = v66[0];
  uint64_t v32 = *(void *)(a2 + v24);
  *(void *)(a2 + v2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v66[0];
  swift_bridgeObjectRetain(v31);
  char v33 = sub_100311D54(v32, v31);
  swift_bridgeObjectRelease();
  if ((v33 & 1) == 0) {
    sub_1004E696C(0xDu);
  }
  swift_bridgeObjectRelease();
  uint64_t v34 = v29[2];
  uint64_t v56 = v29;
  if (v34)
  {
    uint64_t v35 = (char *)v29 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v63 = *(void *)(v8 + 72);
    uint64_t v36 = *(void (**)(void, void, void))(v8 + 16);
    swift_retain();
    *(void *)&__int128 v37 = 141558275LL;
    __int128 v59 = v37;
    uint64_t v58 = (char *)&type metadata for Any + 8;
    unint64_t v38 = v61;
    char v39 = v64;
    __n128 v62 = v36;
    while (1)
    {
      v36(v7, v35, v22);
      uint64_t v41 = *(char **)(v8 + 56);
      ((void (*)(char *, void, uint64_t, uint64_t))v41)(v7, 0LL, 1LL, v22);
      uint64_t v61 = v41;
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v39, v7, v22);
      if (qword_10099B188 != -1) {
        swift_once(&qword_10099B188, sub_100189D08);
      }
      uint64_t v42 = type metadata accessor for Logger(0LL);
      sub_10000A720(v42, (uint64_t)qword_100A2A2B0);
      uint64_t v43 = ((uint64_t (*)(char *, char *, uint64_t))v36)(v38, v39, v22);
      uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
      os_log_type_t v45 = static os_log_type_t.default.getter(v44);
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = swift_slowAlloc(22LL, -1LL);
        uint64_t v47 = swift_slowAlloc(32LL, -1LL);
        v66[0] = v47;
        *(_DWORD *)uint64_t v46 = v59;
        *(void *)(v46 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 1752392040LL;
        *(_WORD *)(v46 + 12) = 2081;
        uint64_t v48 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter(v65, v48);
        *(void *)(v46 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1003F11D4(v49, v50, v66);
        swift_bridgeObjectRelease();
        char v40 = *(void (**)(char *, uint64_t))(v8 + 8);
        v40(v38, v65);
        _os_log_impl( (void *)&_mh_execute_header,  v44,  v45,  "Added disk locating state for beacon: %{private,mask.hash}s.",  (uint8_t *)v46,  0x16u);
        swift_arrayDestroy(v47, 1LL, v58);
        uint64_t v51 = v47;
        uint64_t v7 = v60;
        swift_slowDealloc(v51, -1LL, -1LL);
        uint64_t v52 = v46;
        uint64_t v22 = v65;
        swift_slowDealloc(v52, -1LL, -1LL);
      }

      else
      {
        char v40 = *(void (**)(char *, uint64_t))(v8 + 8);
        v40(v38, v22);
      }

      char v39 = v64;
      v40(v64, v22);
      uint64_t v36 = v62;
      v35 += v63;
      if (!--v34)
      {
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v61)(v7, 1LL, 1LL, v22);
        break;
      }
    }
  }

  else
  {
    uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    swift_retain();
    v53(v7, 1LL, 1LL, v22);
  }

  uint64_t v54 = v56;
  uint64_t result = swift_release();
  *unint64_t v57 = v54;
  return result;
}

uint64_t sub_1001998F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  os_log_type_t v45 = (char *)&v42 - v10;
  uint64_t v11 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v11);
  uint64_t v46 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocalLocating;
  uint64_t v50 = *(void *)(a2 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocalLocating);
  swift_bridgeObjectRetain(v50);
  sub_1003CBF2C(a3);
  uint64_t v14 = v50;
  uint64_t v15 = *(void *)(a2 + v13);
  *(void *)(a2 + v13) = v50;
  swift_bridgeObjectRetain(v14);
  char v16 = sub_100311D54(v15, v14);
  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0) {
    sub_1004E696C(0xDu);
  }
  swift_bridgeObjectRelease();
  uint64_t v17 = a3;
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v42 = v17;
  if (v18)
  {
    unint64_t v19 = v17 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v49 = *(void *)(v6 + 72);
    unint64_t v20 = *(void (**)(void, void, void))(v6 + 16);
    __n128 v21 = swift_bridgeObjectRetain(v17);
    v21.n128_u64[0] = 141558275LL;
    __n128 v44 = v21;
    uint64_t v43 = (char *)&type metadata for Any + 8;
    uint64_t v23 = v45;
    uint64_t v22 = v46;
    uint64_t v48 = v20;
    while (1)
    {
      v20(v22, v19, v5);
      uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56);
      ((void (*)(char *, void, uint64_t, uint64_t))v26)(v22, 0LL, 1LL, v5);
      uint64_t v47 = v26;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v23, v22, v5);
      if (qword_10099B188 != -1) {
        swift_once(&qword_10099B188, sub_100189D08);
      }
      uint64_t v27 = type metadata accessor for Logger(0LL);
      sub_10000A720(v27, (uint64_t)qword_100A2A2B0);
      uint64_t v28 = ((uint64_t (*)(char *, char *, uint64_t))v20)(v9, v23, v5);
      uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
      os_log_type_t v30 = static os_log_type_t.default.getter(v29);
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = swift_slowAlloc(22LL, -1LL);
        uint64_t v32 = v6;
        uint64_t v33 = swift_slowAlloc(32LL, -1LL);
        uint64_t v50 = v33;
        *(_DWORD *)uint64_t v31 = v44.n128_u32[0];
        *(void *)(v31 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 1752392040LL;
        *(_WORD *)(v31 + 12) = 2081;
        uint64_t v34 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter(v5, v34);
        *(void *)(v31 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1003F11D4(v35, v36, &v50);
        swift_bridgeObjectRelease();
        uint64_t v24 = *(void (**)(char *, uint64_t))(v32 + 8);
        v24(v9, v5);
        _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "Shared fetch - Removed disk locating state for beacon: %{private,mask.hash}s.",  (uint8_t *)v31,  0x16u);
        swift_arrayDestroy(v33, 1LL, v43);
        uint64_t v37 = v33;
        uint64_t v6 = v32;
        uint64_t v23 = v45;
        swift_slowDealloc(v37, -1LL, -1LL);
        uint64_t v38 = v31;
        uint64_t v22 = v46;
        swift_slowDealloc(v38, -1LL, -1LL);
      }

      else
      {
        uint64_t v24 = *(void (**)(char *, uint64_t))(v6 + 8);
        v24(v9, v5);
      }

      v24(v23, v5);
      unint64_t v20 = v48;
      v19 += v49;
      if (!--v18)
      {
        v47(v22, 1LL, 1LL, v5, v25);
        return swift_bridgeObjectRelease();
      }
    }
  }

  else
  {
    char v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56);
    __n128 v40 = swift_bridgeObjectRetain(v17);
    v39(v46, 1LL, 1LL, v5, v40);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100199CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = type metadata accessor for LocationFetcher(0LL);
  __chkstk_darwin(v14);
  char v16 = (char *)&v23[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = *(void *)(a2 + 256);
  sub_100013044(a3, (uint64_t)v23);
  uint64_t v18 = qword_10099B300;
  swift_retain();
  swift_bridgeObjectRetain(a4);
  if (v18 != -1) {
    swift_once(&qword_10099B300, sub_1003459EC);
  }
  uint64_t v19 = qword_100A2A6C8;
  swift_retain();
  sub_1002190F8(v17, v23, v19, a4, v16);
  unint64_t v20 = (void *)swift_allocObject(&unk_1009457E0, 40LL, 7LL);
  void v20[2] = a1;
  void v20[3] = a6;
  v20[4] = a7;
  swift_retain();
  swift_retain();
  sub_1003E1DF8(a5, (uint64_t)sub_1001B1864, (uint64_t)v20);
  swift_release();
  return sub_100018C68((uint64_t)v16, type metadata accessor for LocationFetcher);
}

uint64_t sub_100199E20(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  unint64_t v36 = a4;
  uint64_t v30 = a3;
  uint64_t v8 = type metadata accessor for LocationFetcher(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v11 = [(id)objc_opt_self(NSBundle) mainBundle];
  id v12 = [v11 bundleIdentifier];

  if (v12)
  {
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    uint64_t v15 = v14;
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v15 = 0LL;
  }

  uint64_t v16 = sub_10036DB04();
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v29 = v5;
  uint64_t v17 = sub_1006A0F4C(v33[0]);
  swift_bridgeObjectRelease();
  uint64_t My = type metadata accessor for Feature.FindMy(0LL);
  uint64_t v34 = (ValueMetadata *)My;
  unint64_t v35 = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  uint64_t v19 = sub_10000A7C8(v33);
  (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v19,  enum case for Feature.FindMy.networkScalingImprovements(_:),  My);
  char v20 = isFeatureEnabled(_:)(v33);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
  uint64_t v21 = *(void *)(a2 + 256);
  uint64_t v34 = &_s13DefaultPolicyVN;
  unint64_t v35 = sub_1001B15A8();
  uint64_t v22 = swift_allocObject(&unk_100945740, 97LL, 7LL);
  v33[0] = v22;
  *(void *)(v22 + swift_weakDestroy(v0 + 16) = v17;
  *(_BYTE *)(v22 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 0;
  *(void *)(v22 + 32) = &off_100933A30;
  *(_BYTE *)(v22 + 40) = 0;
  *(void *)(v22 + 48) = v13;
  *(void *)(v22 + 56) = v15;
  *(void *)(v22 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v16;
  *(_BYTE *)(v22 + 72) = v20 & 1;
  *(void *)(v22 + 80) = 0LL;
  *(void *)(v22 + 88) = 0LL;
  *(_BYTE *)(v22 + 96) = 1;
  uint64_t v23 = qword_10099B300;
  swift_retain();
  if (v23 != -1) {
    swift_once(&qword_10099B300, sub_1003459EC);
  }
  uint64_t v24 = qword_100A2A6C8;
  swift_retain();
  unint64_t v25 = sub_1004132F8((uint64_t)_swiftEmptyArrayStorage);
  sub_1002190F8(v21, v33, v24, v25, v10);
  sub_100504C28(v30, (uint64_t)&v31);
  if (v32)
  {
    sub_100012EC0(&v31, (uint64_t)v33);
    uint64_t v26 = sub_100004AEC((uint64_t *)&unk_1009B1080);
    uint64_t v27 = swift_allocObject(v26, 72LL, 7LL);
    *(_OWORD *)(v27 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    sub_100013044((uint64_t)v33, v27 + 32);
    swift_retain();
    sub_1002424B4(v27, v10, v36, a5);
    swift_bridgeObjectRelease();
    swift_release();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
  }

  else
  {
    sub_100015794((uint64_t)&v31, (uint64_t *)&unk_1009A9C40);
    v36(_swiftEmptyArrayStorage);
  }

  return sub_100018C68((uint64_t)v10, type metadata accessor for LocationFetcher);
}

uint64_t sub_10019A174(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  uint64_t v6 = (int *)type metadata accessor for RawSearchResult(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  __chkstk_darwin(v6);
  uint64_t v9 = (unsigned __int8 *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009A48E0);
  __chkstk_darwin(v10);
  id v12 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_1006F2B0C(a1);
  if (!v13) {
    goto LABEL_12;
  }
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v13 + 16);
  uint64_t v16 = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  if (v15)
  {
    sub_10001DC4C( v14 + ((*(unsigned __int8 *)(v17 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80)),  (uint64_t)v12,  type metadata accessor for BeaconEstimatedLocation);
    uint64_t v18 = 0LL;
  }

  else
  {
    uint64_t v18 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v12, v18, 1LL, v16);
  swift_bridgeObjectRelease();
  type metadata accessor for BeaconEstimatedLocation(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v12, 1LL, v16) == 1)
  {
    sub_100015794((uint64_t)v12, &qword_1009A48E0);
    goto LABEL_12;
  }

  uint64_t v19 = *(void **)&v12[*(int *)(v16 + 52)];
  swift_bridgeObjectRetain(v19);
  sub_100018C68((uint64_t)v12, type metadata accessor for BeaconEstimatedLocation);
  if (!v19)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    uint64_t v19 = _swiftEmptyArrayStorage;
    uint64_t v20 = _swiftEmptyArrayStorage[2];
    if (!v20) {
      goto LABEL_13;
    }
    goto LABEL_9;
  }

  uint64_t v20 = v19[2];
  if (!v20)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    a2(_swiftEmptyArrayStorage);
    return swift_bridgeObjectRelease();
  }

uint64_t sub_10019A488(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10019A4A8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v11 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = *(void *)(a2 + 256);
  sub_10001DC4C(a4, (uint64_t)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL), type metadata accessor for OwnedBeaconRecord);
  uint64_t v15 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = (v15 + 16) & ~v15;
  uint64_t v17 = swift_allocObject(&unk_100945F60, v16 + v13, v15 | 7);
  sub_10002218C( (uint64_t)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v17 + v16,  type metadata accessor for OwnedBeaconRecord);
  swift_retain();
  sub_1005526F8(a3, 0, (void (*)(uint64_t))sub_1001B310C, v17, v14, a5, a6);
  swift_release();
  return swift_release();
}

uint64_t sub_10019A5B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(type metadata accessor for OwnedBeaconGroup(0LL) + 40);
  uint64_t v5 = *(void *)(a1 + v4);
  __int128 v8[2] = a2;
  uint64_t v6 = sub_1001A8064((void (*)(char *))sub_1001B3148, (uint64_t)v8, v5);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v6;
  return result;
}

uint64_t sub_10019A620@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v52 = a2;
  uint64_t v53 = a3;
  uint64_t v4 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v4);
  uint64_t v6 = &v43[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v43[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  __chkstk_darwin(v11);
  uint64_t v13 = &v43[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = &v43[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v15);
  uint64_t v19 = &v43[-v18];
  sub_10001DC4C(a1, (uint64_t)&v43[-v18], v20);
  if (swift_getEnumCaseMultiPayload(v19, v14) != 1)
  {
    sub_10001DC4C(a1, v53, type metadata accessor for OwnedBeaconGroup.PairingState);
    return sub_100018C68((uint64_t)v19, type metadata accessor for OwnedBeaconGroup.PairingState);
  }

  uint64_t v50 = v6;
  uint64_t v51 = v7;
  uint64_t v48 = v10;
  uint64_t v21 = (int *)sub_100004AEC((uint64_t *)&unk_1009A58E0);
  uint64_t v22 = (uint64_t)&v19[v21[12]];
  sub_1000182F0(*(void *)&v19[v21[16]], *(void *)&v19[v21[16] + 8]);
  uint64_t v23 = &v19[v21[24]];
  int v24 = *v23;
  int v25 = v23[1];
  int v44 = v23[2];
  int v45 = v25;
  sub_100015750(v22, (uint64_t)v13, (uint64_t *)&unk_1009AE480);
  sub_10001DC4C(a1, (uint64_t)v17, type metadata accessor for OwnedBeaconGroup.PairingState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v14);
  uint64_t v49 = a1;
  uint64_t v47 = v14;
  int v46 = v24;
  if (EnumCaseMultiPayload == 1)
  {
    id v27 = &v17[v21[12]];
    sub_1000182F0(*(void *)&v17[v21[16]], *(void *)&v17[v21[16] + 8]);
    uint64_t v28 = (uint64_t)v50;
    Class v29 = v17;
    uint64_t v30 = v51;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v50, v29, v51);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v28, 0LL, 1LL, v30);
    uint64_t v31 = (uint64_t)v27;
    uint64_t v32 = v30;
    sub_100015794(v31, (uint64_t *)&unk_1009AE480);
  }

  else
  {
    uint64_t v28 = (uint64_t)v50;
    uint64_t v32 = v51;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v50, 1LL, 1LL, v51);
    sub_100018C68((uint64_t)v17, type metadata accessor for OwnedBeaconGroup.PairingState);
  }

  uint64_t v34 = v53;
  uint64_t v35 = v52;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v28, 1LL, v32) == 1)
  {
    sub_100015794((uint64_t)v13, (uint64_t *)&unk_1009AE480);
    sub_100015794(v28, &qword_10099D8A0);
  }

  else
  {
    unint64_t v36 = v48;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 32))(v48, v28, v32);
    uint64_t v37 = type metadata accessor for OwnedBeaconRecord(0LL);
    char v38 = static UUID.== infix(_:_:)(v36, v35 + *(int *)(v37 + 20));
    uint64_t v39 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
    v39(v36, v32);
    if ((v38 & 1) != 0)
    {
      uint64_t v40 = sub_100004AEC((uint64_t *)&unk_1009A5910);
      uint64_t v41 = v53;
      uint64_t v42 = (_BYTE *)(v53 + *(int *)(v40 + 48));
      sub_100015750((uint64_t)v13, v53, (uint64_t *)&unk_1009AE480);
      *uint64_t v42 = v46;
      v42[1] = v45;
      _OWORD v42[2] = v44;
      swift_storeEnumTagMultiPayload(v41, v47, 0LL);
      return ((uint64_t (*)(_BYTE *, uint64_t))v39)(v19, v32);
    }

    sub_100015794((uint64_t)v13, (uint64_t *)&unk_1009AE480);
    uint64_t v34 = v53;
  }

  sub_10001DC4C(v49, v34, type metadata accessor for OwnedBeaconGroup.PairingState);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v19, v32);
}

uint64_t sub_10019AA08(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = type metadata accessor for OwnedBeaconGroup(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009A49F0);
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t *)((char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v9, &qword_1009A49F0);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v7);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v11 = *v9;
    uint64_t v12 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_10099B748 != -1) {
      swift_once(&qword_10099B748, sub_100651480);
    }
    uint64_t v13 = qword_100A2B058;
    uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
    *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v32 = v11;
    swift_errorRetain(v11);
    uint64_t v16 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v17 = String.init<A>(describing:)(&v32, v16);
    uint64_t v19 = v18;
    *(void *)(v15 + 56) = &type metadata for String;
    *(void *)(v15 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1000226F4();
    *(void *)(v15 + 32) = v17;
    *(void *)(v15 + 40) = v19;
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "Unable to modify existing group. Error %@", 41LL, 2LL, v15);
    swift_bridgeObjectRelease();
    swift_errorRetain(v11);
    a2(v11);
    swift_errorRelease(v11);
    return swift_errorRelease(v11);
  }

  else
  {
    uint64_t v21 = sub_10002218C((uint64_t)v9, (uint64_t)v6, type metadata accessor for OwnedBeaconGroup);
    uint64_t v22 = static os_log_type_t.default.getter(v21);
    if (qword_10099B748 != -1) {
      swift_once(&qword_10099B748, sub_100651480);
    }
    uint64_t v23 = qword_100A2B058;
    uint64_t v24 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v25 = swift_allocObject(v24, 72LL, 7LL);
    *(_OWORD *)(v25 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v26 = type metadata accessor for UUID(0LL);
    uint64_t v27 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter(v26, v27);
    uint64_t v30 = v29;
    *(void *)(v25 + 56) = &type metadata for String;
    *(void *)(v25 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1000226F4();
    *(void *)(v25 + 32) = v28;
    *(void *)(v25 + 40) = v30;
    os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v23, "Successfully modified existing group: %@", 40LL, 2LL, v25);
    swift_bridgeObjectRelease();
    a2(0LL);
    return sub_100018C68((uint64_t)v6, type metadata accessor for OwnedBeaconGroup);
  }

uint64_t sub_10019AD04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v42 = a1;
  uint64_t v7 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v43 = v13;
  int v44 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v37 - v14;
  if (qword_10099B080 != -1) {
    swift_once(&qword_10099B080, sub_10004081C);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  sub_10000A720(v16, (uint64_t)qword_100A29F20);
  uint64_t v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v17 = v41(v15, a2, v10);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc(25LL, -1LL);
    uint64_t v39 = v9;
    uint64_t v21 = v20;
    uint64_t v37 = swift_slowAlloc(32LL, -1LL);
    v47[0] = v37;
    *(_DWORD *)uint64_t v21 = 16777987;
    LOBYTE(v45) = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, (char *)&v45 + 1, v21 + 4, v21 + 5);
    *(_WORD *)(v21 + 5) = 2160;
    *(void *)&__int128 v45 = 1752392040LL;
    uint64_t v40 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, (char *)&v45 + 8, v21 + 7, v21 + 15);
    *(_WORD *)(v21 + 15) = 2081;
    uint64_t v38 = v11;
    uint64_t v22 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v10, v22);
    *(void *)&__int128 v45 = sub_1003F11D4(v23, v24, v47);
    a4 = v40;
    uint64_t v11 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, (char *)&v45 + 8, v21 + 17, v21 + 25);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
    _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "        OwnerSessionProtocol: updateBatteryStatus %hhufor beacon %{private,mask.hash}s.",  (uint8_t *)v21,  0x19u);
    uint64_t v25 = v37;
    swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    uint64_t v26 = v21;
    uint64_t v9 = v39;
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
  }

  sub_100504C28(a2, (uint64_t)&v45);
  if (v46)
  {
    sub_100012EC0(&v45, (uint64_t)v47);
    char v27 = sub_100794418(v47);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v47);
    __asm { BR              X10 }
  }

  sub_100015794((uint64_t)&v45, (uint64_t *)&unk_1009A9C40);
  char v28 = sub_100795860(v42);
  if (v28 == 7) {
    char v29 = 0;
  }
  else {
    char v29 = v28;
  }
  uint64_t v30 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v9, 1LL, 1LL, v30);
  uint64_t v31 = v44;
  v41(v44, a2, v10);
  uint64_t v32 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v33 = (v32 + 48) & ~v32;
  uint64_t v34 = v33 + v43;
  uint64_t v35 = (char *)swift_allocObject(&unk_100946078, v33 + v43 + 1, v32 | 7);
  *((void *)v35 + 2) = 0LL;
  *((void *)v35 + 3) = 0LL;
  *((void *)v35 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = a3;
  *((void *)v35 + 5) = a4;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v35[v33], v31, v10);
  v35[v34] = v29;
  swift_retain();
  sub_1003EDB00((uint64_t)v9, (uint64_t)&unk_1009A4A08, (uint64_t)v35);
  return swift_release();
}

uint64_t sub_10019B134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  *(_BYTE *)(v7 + 192) = a7;
  *(void *)(v7 + 14_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = a5;
  *(void *)(v7 + 152) = a6;
  *(void *)(v7 + 136) = a4;
  return swift_task_switch(sub_10019B154, 0LL, 0LL);
}

uint64_t sub_10019B154()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C998 + dword_10099C998);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C99C);
    *(void *)(v0 + 160) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10019B240;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10019B240(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 160LL);
  *(void *)(*(void *)v1 + 168LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10019B29C, 0LL, 0LL);
}

uint64_t sub_10019B29C()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 168))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc(dword_1009BAE2C);
    *(void *)(v0 + 176) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10019B3B8;
    return sub_10068CD80(*(void *)(v0 + 152), *(_BYTE *)(v0 + 192));
  }

  else
  {
    uint64_t v4 = *(void (**)(void *))(v0 + 136);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    type metadata accessor for UpdateBatteryLevelError(0LL);
    uint64_t v6 = v5;
    *(void *)(v0 + 128) = 3LL;
    unint64_t v7 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v8 = sub_100007864( &qword_10099C180,  (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError,  (uint64_t)&unk_1007E329C);
    _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 120), v0 + 128, v7, v6, v8);
    uint64_t v9 = *(void **)(v0 + 120);
    v4(v9);

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10019B3B8()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 176LL);
  *(void *)(*(void *)v1 + 184LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_10019B45C;
  }
  else {
    uint64_t v3 = sub_10019B41C;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10019B41C()
{
  uint64_t v1 = *(void *)(v0 + 168);
  (*(void (**)(void))(v0 + 136))(0LL);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10019B45C()
{
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void (**)(uint64_t))(v0 + 136);
  swift_errorRetain(v1);
  v3(v1);
  swift_release(v2);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10019B4C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v60 = a3;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7);
  __int128 v59 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v58 = (char *)&v50 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v50 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v50 - v16;
  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v18 = type metadata accessor for Logger(0LL);
  sub_10000A720(v18, (uint64_t)qword_100A2A470);
  os_log_type_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v19(v17, a1, v7);
  uint64_t v20 = ((uint64_t (*)(char *, uint64_t, uint64_t))v19)(v15, a2, v7);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.default.getter(v21);
  unint64_t v57 = v21;
  int v56 = v22;
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc(42LL, -1LL);
    uint64_t v53 = a2;
    uint64_t v24 = v23;
    uint64_t v51 = swift_slowAlloc(96LL, -1LL);
    uint64_t v63 = v51;
    *(_DWORD *)uint64_t v24 = 136446979;
    uint64_t v62 = sub_1003F11D4(0xD00000000000003ELL, 0x80000001008577C0LL, &v63);
    uint64_t v55 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v24 + 4, v24 + 12);
    *(_WORD *)(v24 + 12) = 2082;
    uint64_t v50 = v15;
    uint64_t v25 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v52 = v19;
    uint64_t v26 = v25;
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter(v7, v25);
    uint64_t v62 = sub_1003F11D4(v27, v28, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v24 + 14, v24 + 22);
    swift_bridgeObjectRelease();
    uint64_t v54 = a1;
    uint64_t v29 = v8;
    uint64_t v30 = *(void (**)(char *, uint64_t))(v8 + 8);
    v30(v17, v7);
    *(_WORD *)(v24 + 22) = 2160;
    uint64_t v62 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v24 + 24, v24 + 32);
    *(_WORD *)(v24 + 32) = 2081;
    uint64_t v31 = v50;
    uint64_t v32 = v26;
    os_log_type_t v19 = v52;
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter(v7, v32);
    uint64_t v62 = sub_1003F11D4(v33, v34, &v63);
    a4 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v24 + 34, v24 + 42);
    swift_bridgeObjectRelease();
    v30(v31, v7);
    uint64_t v8 = v29;
    a1 = v54;
    uint64_t v35 = v57;
    _os_log_impl( (void *)&_mh_execute_header,  v57,  (os_log_type_t)v56,  "%{public}s commandIdentifier: %{public}s beaconIdentifier: %{private,mask.hash}s",  (uint8_t *)v24,  0x2Au);
    uint64_t v36 = v51;
    swift_arrayDestroy(v51, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1LL, -1LL);
    uint64_t v37 = v24;
    a2 = v53;
    swift_slowDealloc(v37, -1LL, -1LL);
  }

  else
  {
    uint64_t v38 = *(void (**)(char *, uint64_t))(v8 + 8);
    v38(v17, v7);
    v38(v15, v7);
  }

  type metadata accessor for Transaction(0LL);
  uint64_t v39 = v58;
  v19(v58, a2, v7);
  uint64_t v40 = v59;
  v19(v59, a1, v7);
  uint64_t v41 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v42 = (v41 + 40) & ~v41;
  uint64_t v43 = v8;
  uint64_t v44 = (v9 + v41 + v42) & ~v41;
  __int128 v45 = (char *)swift_allocObject(&unk_100945E70, v44 + v9, v41 | 7);
  uint64_t v46 = v60;
  *((void *)v45 + 2) = v61;
  *((void *)v45 + 3) = v46;
  *((void *)v45 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = a4;
  uint64_t v47 = &v45[v42];
  uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
  v48(v47, v39, v7);
  v48(&v45[v44], v40, v7);
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)("BeaconManagerService.startBTFinding", 35LL, 2LL, &unk_1009A49D8, v45);
  return swift_release();
}

uint64_t sub_10019B924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[38] = a4;
  v5[39] = a5;
  v5[36] = a2;
  v5[37] = a3;
  v5[35] = a1;
  unint64_t v6 = (*(void *)(*(void *)(sub_100004AEC(&qword_10099D8A0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[40] = swift_task_alloc(v6);
  v5[41] = swift_task_alloc(v6);
  uint64_t v7 = type metadata accessor for AccessoryCommand(0LL);
  v5[42] = v7;
  unint64_t v8 = (*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[43] = swift_task_alloc(v8);
  v5[44] = swift_task_alloc(v8);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  v5[45] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[46] = v10;
  uint64_t v11 = *(void *)(v10 + 64);
  v5[47] = v11;
  unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v5[48] = swift_task_alloc(v12);
  v5[49] = swift_task_alloc(v12);
  v5[50] = swift_task_alloc(v12);
  v5[51] = swift_task_alloc(v12);
  v5[52] = swift_task_alloc(v12);
  v5[53] = swift_task_alloc(v12);
  v5[54] = swift_task_alloc(v12);
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  v5[55] = v13;
  v5[56] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10019BA6C, 0LL, 0LL);
}

uint64_t sub_10019BA6C()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 176, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C920 + dword_10099C920);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099C924);
    *(void *)(v0 + 456) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10019BB6C;
    return v4();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10019BB6C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 456LL);
  *(void *)(*(void *)v1 + 464LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10019BBC8, 0LL, 0LL);
}

uint64_t sub_10019BBC8()
{
  uint64_t v1 = *(void *)(v0 + 464);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (v1)
  {
    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 136, (uint64_t *)&unk_10099FA80);
    if (*(void *)(v0 + 160))
    {
      sub_100012EC0((__int128 *)(v0 + 136), v0 + 96);
      sub_100012ED8((void *)(v0 + 96), *(void *)(v0 + 120));
      uint64_t v23 = (uint64_t (__cdecl *)())((char *)&dword_10099C890 + dword_10099C890);
      uint64_t v3 = (void *)swift_task_alloc(unk_10099C894);
      *(void *)(v0 + 472) = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_10019BE20;
      return v23();
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    if (qword_10099B220 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A2A470);
    unint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      unint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing OwnerCommandService to startBTFinding!", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    uint64_t v9 = *(void (**)(void))(v0 + 288);

    unint64_t v10 = sub_10014A2C0();
    uint64_t v11 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v10, 0LL, 0LL);
    *unint64_t v12 = 11;
    v9();
    swift_errorRelease(v11);
    uint64_t v13 = *(void *)(v0 + 424);
    uint64_t v14 = *(void *)(v0 + 432);
    uint64_t v16 = *(void *)(v0 + 408);
    uint64_t v15 = *(void *)(v0 + 416);
    uint64_t v18 = *(void *)(v0 + 392);
    uint64_t v17 = *(void *)(v0 + 400);
    uint64_t v19 = *(void *)(v0 + 384);
    uint64_t v21 = *(void *)(v0 + 344);
    uint64_t v20 = *(void *)(v0 + 352);
    uint64_t v22 = *(void *)(v0 + 328);
    uint64_t v24 = *(void *)(v0 + 320);
    swift_task_dealloc(*(void *)(v0 + 448));
    swift_task_dealloc(v14);
    swift_task_dealloc(v13);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  return result;
}

uint64_t sub_10019BE20(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 472LL);
  *(void *)(*(void *)v1 + 48Hasher.init(_seed:)(v5, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10019BE7C, 0LL, 0LL);
}

uint64_t sub_10019BE7C()
{
  uint64_t v1 = *(void *)(v0 + 480);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 96));
  if (v1) {
    return swift_task_switch(sub_10019C074, *(void *)(v0 + 480), 0LL);
  }
  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = sub_10000A720(v3, (uint64_t)qword_100A2A470);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing BeaconStoreActor to startBTFinding!", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  unint64_t v8 = *(void (**)(void))(v0 + 288);

  unint64_t v9 = sub_10014A2C0();
  uint64_t v10 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v9, 0LL, 0LL);
  *uint64_t v11 = 11;
  v8();
  swift_errorRelease(v10);
  swift_release();
  uint64_t v12 = *(void *)(v0 + 424);
  uint64_t v13 = *(void *)(v0 + 432);
  uint64_t v15 = *(void *)(v0 + 408);
  uint64_t v14 = *(void *)(v0 + 416);
  uint64_t v17 = *(void *)(v0 + 392);
  uint64_t v16 = *(void *)(v0 + 400);
  uint64_t v18 = *(void *)(v0 + 384);
  uint64_t v20 = *(void *)(v0 + 344);
  uint64_t v19 = *(void *)(v0 + 352);
  uint64_t v21 = *(void *)(v0 + 328);
  uint64_t v22 = *(void *)(v0 + 320);
  swift_task_dealloc(*(void *)(v0 + 448));
  swift_task_dealloc(v13);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10019C074()
{
  uint64_t v1 = v0[60];
  uint64_t v2 = v0[54];
  uint64_t v4 = v0[46];
  uint64_t v3 = v0[47];
  uint64_t v5 = v0[45];
  uint64_t v6 = v0[38];
  v0[61] = *(void *)(v1 + 136);
  os_log_type_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[62] = v7;
  v7(v2, v6, v5);
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = (v8 + 24) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_100945E98, v9 + v3, v8 | 7);
  v0[63] = v10;
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v0[64] = v11;
  v11(v10 + v9, v2, v5);
  swift_retain();
  return swift_task_switch(sub_10019C130, 0LL, 0LL);
}

uint64_t sub_10019C130()
{
  uint64_t v1 = v0[63];
  uint64_t v2 = v0[61];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[65] = v3;
  v3[2] = v2;
  v3[3] = sub_1001B2874;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[66] = v4;
  void *v4 = v0;
  v4[1] = sub_10019C1DC;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[56],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100118954,  v3,  v0[55]);
}

uint64_t sub_10019C1DC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 520LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 528LL));
  swift_release();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10019C248, 0LL, 0LL);
}

uint64_t sub_10019C248()
{
  uint64_t v1 = v0[56];
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord(0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(v1, 1LL, v2) == 1)
  {
    sub_100015794(v1, (uint64_t *)&unk_1009A9C30);
    char v3 = 0;
  }

  else
  {
    sub_1005D3A0C();
    uint64_t v5 = v4;
    uint64_t v6 = SPBeaconTypeHele;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    if (v7 == v10 && v9 == v11) {
      char v3 = 1;
    }
    else {
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0LL);
    }
    uint64_t v13 = v0[56];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_100018C68(v13, type metadata accessor for OwnedBeaconRecord);
  }

  uint64_t v14 = (void (*)(uint64_t, uint64_t, uint64_t))v0[62];
  uint64_t v15 = v0[53];
  uint64_t v16 = v0[45];
  uint64_t v17 = v0[46];
  uint64_t v19 = v0[40];
  uint64_t v18 = v0[41];
  uint64_t v20 = v0[38];
  v14(v18, v0[39], v16);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v18, 0LL, 1LL, v16);
  v14(v15, v20, v16);
  sub_10001581C(v18, v19, &qword_10099D8A0);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v19, 1LL, v16);
  if ((_DWORD)v21 == 1)
  {
    uint64_t v23 = v0[40];
    uint64_t v22 = v0[41];
    UUID.init()(v21);
    sub_100015794(v22, &qword_10099D8A0);
    sub_100015794(v23, &qword_10099D8A0);
  }

  else
  {
    uint64_t v24 = (void (*)(uint64_t, uint64_t, uint64_t))v0[64];
    uint64_t v25 = v0[52];
    uint64_t v26 = v0[45];
    uint64_t v27 = v0[40];
    sub_100015794(v0[41], &qword_10099D8A0);
    v24(v25, v27, v26);
  }

  unint64_t v28 = (void (*)(uint64_t, uint64_t, uint64_t))v0[64];
  uint64_t v29 = v0[53];
  uint64_t v31 = v0[44];
  uint64_t v30 = v0[45];
  uint64_t v32 = (int *)v0[42];
  v28(v31, v0[52], v30);
  v28(v31 + v32[5], v29, v30);
  uint64_t v33 = v31 + v32[6];
  *(void *)uint64_t v33 = 120LL;
  *(_BYTE *)(v33 + 8) = 2;
  *(_BYTE *)(v31 + v32[7]) = v3 & 1;
  *(_BYTE *)(v31 + v32[8]) = 1;
  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v34 = v0[43];
  uint64_t v35 = v0[44];
  uint64_t v36 = type metadata accessor for Logger(0LL);
  v0[67] = sub_10000A720(v36, (uint64_t)qword_100A2A470);
  uint64_t v37 = sub_10001DC4C(v35, v34, type metadata accessor for AccessoryCommand);
  uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
  os_log_type_t v39 = static os_log_type_t.default.getter(v38);
  BOOL v40 = os_log_type_enabled(v38, v39);
  uint64_t v41 = v0[43];
  if (v40)
  {
    uint64_t v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v43 = swift_slowAlloc(32LL, -1LL);
    uint64_t v48 = v43;
    *(_DWORD *)uint64_t v42 = 136315138;
    sub_1006CC4C0();
    v0[34] = sub_1003F11D4(v44, v45, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 34, v0 + 35, v42 + 4, v42 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68(v41, type metadata accessor for AccessoryCommand);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Executing startBTFinding command: %s", v42, 0xCu);
    swift_arrayDestroy(v43, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1LL, -1LL);
    swift_slowDealloc(v42, -1LL, -1LL);
  }

  else
  {
    sub_100018C68(v0[43], type metadata accessor for AccessoryCommand);
  }

  uint64_t v46 = (void *)swift_task_alloc(dword_1009BF5F4);
  v0[68] = v46;
  *uint64_t v46 = v0;
  v46[1] = sub_10019C62C;
  return sub_1007702C8(v0[44]);
}

uint64_t sub_10019C62C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 544LL);
  *(void *)(*(void *)v1 + 552LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    char v3 = sub_10019C9F4;
  }
  else {
    char v3 = sub_10019C690;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10019C690()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 496);
  uint64_t v2 = *(void *)(v0 + 400);
  uint64_t v3 = *(void *)(v0 + 360);
  uint64_t v4 = *(void *)(v0 + 304);
  v1(*(void *)(v0 + 408), *(void *)(v0 + 312), v3);
  uint64_t v5 = v1(v2, v4, v3);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    log = v6;
    uint64_t v8 = *(void *)(v0 + 408);
    uint64_t v32 = *(void *)(v0 + 400);
    uint64_t v9 = *(void *)(v0 + 360);
    uint64_t v30 = *(void *)(v0 + 368);
    uint64_t v10 = swift_slowAlloc(42LL, -1LL);
    uint64_t v34 = swift_slowAlloc(96LL, -1LL);
    uint64_t v36 = v34;
    *(_DWORD *)uint64_t v10 = 136446979;
    *(void *)(v0 + 240) = sub_1003F11D4(0xD00000000000003ELL, 0x80000001008577C0LL, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2082;
    uint64_t v11 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter(v9, v11);
    *(void *)(v0 + 248) = sub_1003F11D4(v12, v13, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v14(v8, v9);
    *(_WORD *)(v10 + 22) = 2160;
    *(void *)(v0 + 256) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v10 + 24, v10 + 32);
    *(_WORD *)(v10 + 32) = 2081;
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(v9, v11);
    *(void *)(v0 + 26_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1003F11D4(v15, v16, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v10 + 34, v10 + 42);
    swift_bridgeObjectRelease();
    v14(v32, v9);
    uint64_t v6 = log;
    _os_log_impl( (void *)&_mh_execute_header,  log,  v7,  "%{public}s commandIdentifier: %{public}s beaconIdentifier: %{private,mask.hash}s completed successfully!",  (uint8_t *)v10,  0x2Au);
    swift_arrayDestroy(v34, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
    uint64_t v17 = *(void *)(v0 + 400);
    uint64_t v18 = *(void *)(v0 + 360);
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 368) + 8LL);
    v19(*(void *)(v0 + 408), v18);
    v19(v17, v18);
  }

  (*(void (**)(void))(v0 + 288))(0LL);
  swift_release();
  swift_release();
  sub_100018C68(*(void *)(v0 + 352), type metadata accessor for AccessoryCommand);
  uint64_t v20 = *(void *)(v0 + 424);
  uint64_t v21 = *(void *)(v0 + 432);
  uint64_t v23 = *(void *)(v0 + 408);
  uint64_t v22 = *(void *)(v0 + 416);
  uint64_t v25 = *(void *)(v0 + 392);
  uint64_t v24 = *(void *)(v0 + 400);
  uint64_t v26 = *(void *)(v0 + 384);
  uint64_t v28 = *(void *)(v0 + 344);
  uint64_t v27 = *(void *)(v0 + 352);
  uint64_t v33 = *(void *)(v0 + 328);
  uint64_t v35 = *(void *)(v0 + 320);
  swift_task_dealloc(*(void *)(v0 + 448));
  swift_task_dealloc(v21);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10019C9F4()
{
  uint64_t v1 = *(void *)(v0 + 552);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 496);
  uint64_t v3 = *(void *)(v0 + 384);
  uint64_t v4 = *(void *)(v0 + 360);
  uint64_t v5 = *(void *)(v0 + 304);
  v2(*(void *)(v0 + 392), *(void *)(v0 + 312), v4);
  v2(v3, v5, v4);
  swift_errorRetain(v1);
  uint64_t v6 = swift_errorRetain(v1);
  os_log_type_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v39 = *(void *)(v0 + 552);
    uint64_t v9 = *(void *)(v0 + 392);
    uint64_t v37 = *(void *)(v0 + 384);
    uint64_t v10 = *(void *)(v0 + 360);
    uint64_t v36 = *(void *)(v0 + 368);
    uint64_t v11 = swift_slowAlloc(52LL, -1LL);
    uint64_t v38 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v41 = swift_slowAlloc(96LL, -1LL);
    uint64_t v43 = v41;
    *(_DWORD *)uint64_t v11 = 136447235;
    *(void *)(v0 + 200) = sub_1003F11D4(0xD00000000000003ELL, 0x80000001008577C0LL, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2082;
    uint64_t v12 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter(v10, v12);
    *(void *)(v0 + 208) = sub_1003F11D4(v13, v14, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v15(v9, v10);
    *(_WORD *)(v11 + 22) = 2160;
    *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v11 + 24, v11 + 32);
    *(_WORD *)(v11 + 32) = 2081;
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter(v10, v12);
    *(void *)(v0 + 22_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1003F11D4(v16, v17, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v11 + 34, v11 + 42);
    swift_bridgeObjectRelease();
    v15(v37, v10);
    *(_WORD *)(v11 + 42) = 2114;
    swift_errorRetain(v39);
    uint64_t v18 = _swift_stdlib_bridgeErrorToNSError(v39);
    *(void *)(v0 + 232) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v11 + 44, v11 + 52);
    *uint64_t v38 = v18;
    swift_errorRelease(v39);
    swift_errorRelease(v39);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "%{public}s commandIdentifier: %{public}s beaconIdentifier: %{private,mask.hash}s failed with error: %{public}@!",  (uint8_t *)v11,  0x34u);
    uint64_t v19 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v38, 1LL, v19);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_arrayDestroy(v41, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
    uint64_t v20 = *(void *)(v0 + 552);
    uint64_t v21 = *(void *)(v0 + 384);
    uint64_t v22 = *(void *)(v0 + 360);
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 368) + 8LL);
    v23(*(void *)(v0 + 392), v22);
    v23(v21, v22);
    swift_errorRelease(v20);
    swift_errorRelease(v20);
  }

  uint64_t v24 = *(void *)(v0 + 552);
  uint64_t v25 = *(void (**)(uint64_t))(v0 + 288);
  swift_errorRetain(v24);
  v25(v24);
  swift_release();
  swift_release();
  swift_errorRelease(v24);
  swift_errorRelease(v24);
  sub_100018C68(*(void *)(v0 + 352), type metadata accessor for AccessoryCommand);
  uint64_t v26 = *(void *)(v0 + 424);
  uint64_t v27 = *(void *)(v0 + 432);
  uint64_t v29 = *(void *)(v0 + 408);
  uint64_t v28 = *(void *)(v0 + 416);
  uint64_t v31 = *(void *)(v0 + 392);
  uint64_t v30 = *(void *)(v0 + 400);
  uint64_t v32 = *(void *)(v0 + 384);
  uint64_t v34 = *(void *)(v0 + 344);
  uint64_t v33 = *(void *)(v0 + 352);
  uint64_t v40 = *(void *)(v0 + 328);
  uint64_t v42 = *(void *)(v0 + 320);
  swift_task_dealloc(*(void *)(v0 + 448));
  swift_task_dealloc(v27);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10019CE40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v60 = a3;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7);
  __int128 v59 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v58 = (char *)&v50 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v50 - v14;
  __chkstk_darwin(v13);
  unint64_t v17 = (char *)&v50 - v16;
  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v18 = type metadata accessor for Logger(0LL);
  sub_10000A720(v18, (uint64_t)qword_100A2A470);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v19(v17, a1, v7);
  uint64_t v20 = ((uint64_t (*)(char *, uint64_t, uint64_t))v19)(v15, a2, v7);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.default.getter(v21);
  unint64_t v57 = v21;
  int v56 = v22;
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc(42LL, -1LL);
    uint64_t v53 = a2;
    uint64_t v24 = v23;
    uint64_t v51 = swift_slowAlloc(96LL, -1LL);
    uint64_t v63 = v51;
    *(_DWORD *)uint64_t v24 = 136446979;
    uint64_t v62 = sub_1003F11D4(0xD00000000000003DLL, 0x8000000100857830LL, &v63);
    uint64_t v55 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v24 + 4, v24 + 12);
    *(_WORD *)(v24 + 12) = 2082;
    uint64_t v50 = v15;
    uint64_t v25 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v52 = v19;
    uint64_t v26 = v25;
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter(v7, v25);
    uint64_t v62 = sub_1003F11D4(v27, v28, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v24 + 14, v24 + 22);
    swift_bridgeObjectRelease();
    uint64_t v54 = a1;
    uint64_t v29 = v8;
    uint64_t v30 = *(void (**)(char *, uint64_t))(v8 + 8);
    v30(v17, v7);
    *(_WORD *)(v24 + 22) = 2160;
    uint64_t v62 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v24 + 24, v24 + 32);
    *(_WORD *)(v24 + 32) = 2081;
    uint64_t v31 = v50;
    uint64_t v32 = v26;
    uint64_t v19 = v52;
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter(v7, v32);
    uint64_t v62 = sub_1003F11D4(v33, v34, &v63);
    a4 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v24 + 34, v24 + 42);
    swift_bridgeObjectRelease();
    v30(v31, v7);
    uint64_t v8 = v29;
    a1 = v54;
    uint64_t v35 = v57;
    _os_log_impl( (void *)&_mh_execute_header,  v57,  (os_log_type_t)v56,  "%{public}s commandIdentifier: %{public}s beaconIdentifier: %{private,mask.hash}s",  (uint8_t *)v24,  0x2Au);
    uint64_t v36 = v51;
    swift_arrayDestroy(v51, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1LL, -1LL);
    uint64_t v37 = v24;
    a2 = v53;
    swift_slowDealloc(v37, -1LL, -1LL);
  }

  else
  {
    uint64_t v38 = *(void (**)(char *, uint64_t))(v8 + 8);
    v38(v17, v7);
    v38(v15, v7);
  }

  type metadata accessor for Transaction(0LL);
  uint64_t v39 = v58;
  v19(v58, a2, v7);
  uint64_t v40 = v59;
  v19(v59, a1, v7);
  uint64_t v41 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v42 = (v41 + 40) & ~v41;
  uint64_t v43 = v8;
  uint64_t v44 = (v9 + v41 + v42) & ~v41;
  unint64_t v45 = (char *)swift_allocObject(&unk_100945EC0, v44 + v9, v41 | 7);
  uint64_t v46 = v60;
  *((void *)v45 + 2) = v61;
  *((void *)v45 + 3) = v46;
  *((void *)v45 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = a4;
  uint64_t v47 = &v45[v42];
  uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
  v48(v47, v39, v7);
  v48(&v45[v44], v40, v7);
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)("BeaconManagerService.stopBTFinding", 34LL, 2LL, &unk_1009A49E8, v45);
  return swift_release();
}

uint64_t sub_10019D2A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[38] = a4;
  v5[39] = a5;
  v5[36] = a2;
  v5[37] = a3;
  v5[35] = a1;
  unint64_t v6 = (*(void *)(*(void *)(sub_100004AEC(&qword_10099D8A0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[40] = swift_task_alloc(v6);
  v5[41] = swift_task_alloc(v6);
  uint64_t v7 = type metadata accessor for AccessoryCommand(0LL);
  v5[42] = v7;
  unint64_t v8 = (*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[43] = swift_task_alloc(v8);
  v5[44] = swift_task_alloc(v8);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  v5[45] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[46] = v10;
  uint64_t v11 = *(void *)(v10 + 64);
  v5[47] = v11;
  unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v5[48] = swift_task_alloc(v12);
  v5[49] = swift_task_alloc(v12);
  v5[50] = swift_task_alloc(v12);
  v5[51] = swift_task_alloc(v12);
  v5[52] = swift_task_alloc(v12);
  v5[53] = swift_task_alloc(v12);
  v5[54] = swift_task_alloc(v12);
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  v5[55] = v13;
  v5[56] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10019D3EC, 0LL, 0LL);
}

uint64_t sub_10019D3EC()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 176, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C920 + dword_10099C920);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099C924);
    *(void *)(v0 + 456) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10019D4EC;
    return v4();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10019D4EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 456LL);
  *(void *)(*(void *)v1 + 464LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10019D548, 0LL, 0LL);
}

uint64_t sub_10019D548()
{
  uint64_t v1 = *(void *)(v0 + 464);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (v1)
  {
    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 136, (uint64_t *)&unk_10099FA80);
    if (*(void *)(v0 + 160))
    {
      sub_100012EC0((__int128 *)(v0 + 136), v0 + 96);
      sub_100012ED8((void *)(v0 + 96), *(void *)(v0 + 120));
      uint64_t v23 = (uint64_t (__cdecl *)())((char *)&dword_10099C890 + dword_10099C890);
      uint64_t v3 = (void *)swift_task_alloc(unk_10099C894);
      *(void *)(v0 + 472) = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_10019D7A0;
      return v23();
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    if (qword_10099B220 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A2A470);
    unint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      unint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing OwnerCommandService to startBTFinding!", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    uint64_t v9 = *(void (**)(void))(v0 + 288);

    unint64_t v10 = sub_10014A2C0();
    uint64_t v11 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v10, 0LL, 0LL);
    *unint64_t v12 = 11;
    v9();
    swift_errorRelease(v11);
    uint64_t v13 = *(void *)(v0 + 424);
    uint64_t v14 = *(void *)(v0 + 432);
    uint64_t v16 = *(void *)(v0 + 408);
    uint64_t v15 = *(void *)(v0 + 416);
    uint64_t v18 = *(void *)(v0 + 392);
    uint64_t v17 = *(void *)(v0 + 400);
    uint64_t v19 = *(void *)(v0 + 384);
    uint64_t v21 = *(void *)(v0 + 344);
    uint64_t v20 = *(void *)(v0 + 352);
    uint64_t v22 = *(void *)(v0 + 328);
    uint64_t v24 = *(void *)(v0 + 320);
    swift_task_dealloc(*(void *)(v0 + 448));
    swift_task_dealloc(v14);
    swift_task_dealloc(v13);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  return result;
}

uint64_t sub_10019D7A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 472LL);
  *(void *)(*(void *)v1 + 48Hasher.init(_seed:)(v5, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10019D7FC, 0LL, 0LL);
}

uint64_t sub_10019D7FC()
{
  uint64_t v1 = *(void *)(v0 + 480);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 96));
  if (v1) {
    return swift_task_switch(sub_10019D9F4, *(void *)(v0 + 480), 0LL);
  }
  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = sub_10000A720(v3, (uint64_t)qword_100A2A470);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing BeaconStoreActor to startBTFinding!", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  unint64_t v8 = *(void (**)(void))(v0 + 288);

  unint64_t v9 = sub_10014A2C0();
  uint64_t v10 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v9, 0LL, 0LL);
  *uint64_t v11 = 11;
  v8();
  swift_errorRelease(v10);
  swift_release();
  uint64_t v12 = *(void *)(v0 + 424);
  uint64_t v13 = *(void *)(v0 + 432);
  uint64_t v15 = *(void *)(v0 + 408);
  uint64_t v14 = *(void *)(v0 + 416);
  uint64_t v17 = *(void *)(v0 + 392);
  uint64_t v16 = *(void *)(v0 + 400);
  uint64_t v18 = *(void *)(v0 + 384);
  uint64_t v20 = *(void *)(v0 + 344);
  uint64_t v19 = *(void *)(v0 + 352);
  uint64_t v21 = *(void *)(v0 + 328);
  uint64_t v22 = *(void *)(v0 + 320);
  swift_task_dealloc(*(void *)(v0 + 448));
  swift_task_dealloc(v13);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10019D9F4()
{
  uint64_t v1 = v0[60];
  uint64_t v2 = v0[54];
  uint64_t v4 = v0[46];
  uint64_t v3 = v0[47];
  uint64_t v5 = v0[45];
  uint64_t v6 = v0[38];
  v0[61] = *(void *)(v1 + 136);
  os_log_type_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[62] = v7;
  v7(v2, v6, v5);
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = (v8 + 24) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_100945EE8, v9 + v3, v8 | 7);
  v0[63] = v10;
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v0[64] = v11;
  v11(v10 + v9, v2, v5);
  swift_retain();
  return swift_task_switch(sub_10019DAB0, 0LL, 0LL);
}

uint64_t sub_10019DAB0()
{
  uint64_t v1 = v0[63];
  uint64_t v2 = v0[61];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[65] = v3;
  v3[2] = v2;
  v3[3] = sub_1001B2874;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[66] = v4;
  void *v4 = v0;
  v4[1] = sub_10019DB5C;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[56],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100118954,  v3,  v0[55]);
}

uint64_t sub_10019DB5C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 520LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 528LL));
  swift_release();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10019DBC8, 0LL, 0LL);
}

uint64_t sub_10019DBC8()
{
  uint64_t v1 = v0[56];
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord(0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(v1, 1LL, v2) == 1)
  {
    sub_100015794(v1, (uint64_t *)&unk_1009A9C30);
    char v3 = 0;
  }

  else
  {
    sub_1005D3A0C();
    uint64_t v5 = v4;
    uint64_t v6 = SPBeaconTypeHele;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    if (v7 == v10 && v9 == v11) {
      char v3 = 1;
    }
    else {
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0LL);
    }
    uint64_t v13 = v0[56];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_100018C68(v13, type metadata accessor for OwnedBeaconRecord);
  }

  uint64_t v14 = (void (*)(uint64_t, uint64_t, uint64_t))v0[62];
  uint64_t v15 = v0[53];
  uint64_t v16 = v0[45];
  uint64_t v17 = v0[46];
  uint64_t v19 = v0[40];
  uint64_t v18 = v0[41];
  uint64_t v20 = v0[38];
  v14(v18, v0[39], v16);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v18, 0LL, 1LL, v16);
  v14(v15, v20, v16);
  sub_10001581C(v18, v19, &qword_10099D8A0);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v19, 1LL, v16);
  if ((_DWORD)v21 == 1)
  {
    uint64_t v23 = v0[40];
    uint64_t v22 = v0[41];
    UUID.init()(v21);
    sub_100015794(v22, &qword_10099D8A0);
    sub_100015794(v23, &qword_10099D8A0);
  }

  else
  {
    uint64_t v24 = (void (*)(uint64_t, uint64_t, uint64_t))v0[64];
    uint64_t v25 = v0[52];
    uint64_t v26 = v0[45];
    uint64_t v27 = v0[40];
    sub_100015794(v0[41], &qword_10099D8A0);
    v24(v25, v27, v26);
  }

  unint64_t v28 = (void (*)(uint64_t, uint64_t, uint64_t))v0[64];
  uint64_t v29 = v0[53];
  uint64_t v31 = v0[44];
  uint64_t v30 = v0[45];
  uint64_t v32 = (int *)v0[42];
  v28(v31, v0[52], v30);
  v28(v31 + v32[5], v29, v30);
  uint64_t v33 = v31 + v32[6];
  *(void *)uint64_t v33 = 2LL;
  *(_BYTE *)(v33 + 8) = 3;
  *(_BYTE *)(v31 + v32[7]) = v3 & 1;
  *(_BYTE *)(v31 + v32[8]) = 1;
  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v34 = v0[43];
  uint64_t v35 = v0[44];
  uint64_t v36 = type metadata accessor for Logger(0LL);
  v0[67] = sub_10000A720(v36, (uint64_t)qword_100A2A470);
  uint64_t v37 = sub_10001DC4C(v35, v34, type metadata accessor for AccessoryCommand);
  uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
  os_log_type_t v39 = static os_log_type_t.default.getter(v38);
  BOOL v40 = os_log_type_enabled(v38, v39);
  uint64_t v41 = v0[43];
  if (v40)
  {
    uint64_t v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v43 = swift_slowAlloc(32LL, -1LL);
    uint64_t v48 = v43;
    *(_DWORD *)uint64_t v42 = 136315138;
    sub_1006CC4C0();
    v0[34] = sub_1003F11D4(v44, v45, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 34, v0 + 35, v42 + 4, v42 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68(v41, type metadata accessor for AccessoryCommand);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Executing stopBTFinding command: %s", v42, 0xCu);
    swift_arrayDestroy(v43, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1LL, -1LL);
    swift_slowDealloc(v42, -1LL, -1LL);
  }

  else
  {
    sub_100018C68(v0[43], type metadata accessor for AccessoryCommand);
  }

  uint64_t v46 = (void *)swift_task_alloc(dword_1009BF5F4);
  v0[68] = v46;
  *uint64_t v46 = v0;
  v46[1] = sub_10019DFAC;
  return sub_1007702C8(v0[44]);
}

uint64_t sub_10019DFAC()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 544LL);
  *(void *)(*(void *)v1 + 552LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    char v3 = sub_10019E374;
  }
  else {
    char v3 = sub_10019E010;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10019E010()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 496);
  uint64_t v2 = *(void *)(v0 + 400);
  uint64_t v3 = *(void *)(v0 + 360);
  uint64_t v4 = *(void *)(v0 + 304);
  v1(*(void *)(v0 + 408), *(void *)(v0 + 312), v3);
  uint64_t v5 = v1(v2, v4, v3);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    log = v6;
    uint64_t v8 = *(void *)(v0 + 408);
    uint64_t v32 = *(void *)(v0 + 400);
    uint64_t v9 = *(void *)(v0 + 360);
    uint64_t v30 = *(void *)(v0 + 368);
    uint64_t v10 = swift_slowAlloc(42LL, -1LL);
    uint64_t v34 = swift_slowAlloc(96LL, -1LL);
    uint64_t v36 = v34;
    *(_DWORD *)uint64_t v10 = 136446979;
    *(void *)(v0 + 240) = sub_1003F11D4(0xD00000000000003DLL, 0x8000000100857830LL, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2082;
    uint64_t v11 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter(v9, v11);
    *(void *)(v0 + 248) = sub_1003F11D4(v12, v13, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v14(v8, v9);
    *(_WORD *)(v10 + 22) = 2160;
    *(void *)(v0 + 256) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v10 + 24, v10 + 32);
    *(_WORD *)(v10 + 32) = 2081;
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(v9, v11);
    *(void *)(v0 + 26_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1003F11D4(v15, v16, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v10 + 34, v10 + 42);
    swift_bridgeObjectRelease();
    v14(v32, v9);
    uint64_t v6 = log;
    _os_log_impl( (void *)&_mh_execute_header,  log,  v7,  "%{public}s commandIdentifier: %{public}s beaconIdentifier: %{private,mask.hash}s completed successfully!",  (uint8_t *)v10,  0x2Au);
    swift_arrayDestroy(v34, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
    uint64_t v17 = *(void *)(v0 + 400);
    uint64_t v18 = *(void *)(v0 + 360);
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 368) + 8LL);
    v19(*(void *)(v0 + 408), v18);
    v19(v17, v18);
  }

  (*(void (**)(void))(v0 + 288))(0LL);
  swift_release();
  swift_release();
  sub_100018C68(*(void *)(v0 + 352), type metadata accessor for AccessoryCommand);
  uint64_t v20 = *(void *)(v0 + 424);
  uint64_t v21 = *(void *)(v0 + 432);
  uint64_t v23 = *(void *)(v0 + 408);
  uint64_t v22 = *(void *)(v0 + 416);
  uint64_t v25 = *(void *)(v0 + 392);
  uint64_t v24 = *(void *)(v0 + 400);
  uint64_t v26 = *(void *)(v0 + 384);
  uint64_t v28 = *(void *)(v0 + 344);
  uint64_t v27 = *(void *)(v0 + 352);
  uint64_t v33 = *(void *)(v0 + 328);
  uint64_t v35 = *(void *)(v0 + 320);
  swift_task_dealloc(*(void *)(v0 + 448));
  swift_task_dealloc(v21);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10019E374()
{
  uint64_t v1 = *(void *)(v0 + 552);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 496);
  uint64_t v3 = *(void *)(v0 + 384);
  uint64_t v4 = *(void *)(v0 + 360);
  uint64_t v5 = *(void *)(v0 + 304);
  v2(*(void *)(v0 + 392), *(void *)(v0 + 312), v4);
  v2(v3, v5, v4);
  swift_errorRetain(v1);
  uint64_t v6 = swift_errorRetain(v1);
  os_log_type_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v39 = *(void *)(v0 + 552);
    uint64_t v9 = *(void *)(v0 + 392);
    uint64_t v37 = *(void *)(v0 + 384);
    uint64_t v10 = *(void *)(v0 + 360);
    uint64_t v36 = *(void *)(v0 + 368);
    uint64_t v11 = swift_slowAlloc(52LL, -1LL);
    uint64_t v38 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v41 = swift_slowAlloc(96LL, -1LL);
    uint64_t v43 = v41;
    *(_DWORD *)uint64_t v11 = 136447235;
    *(void *)(v0 + 200) = sub_1003F11D4(0xD00000000000003DLL, 0x8000000100857830LL, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2082;
    uint64_t v12 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter(v10, v12);
    *(void *)(v0 + 208) = sub_1003F11D4(v13, v14, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v15(v9, v10);
    *(_WORD *)(v11 + 22) = 2160;
    *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v11 + 24, v11 + 32);
    *(_WORD *)(v11 + 32) = 2081;
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter(v10, v12);
    *(void *)(v0 + 22_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1003F11D4(v16, v17, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v11 + 34, v11 + 42);
    swift_bridgeObjectRelease();
    v15(v37, v10);
    *(_WORD *)(v11 + 42) = 2114;
    swift_errorRetain(v39);
    uint64_t v18 = _swift_stdlib_bridgeErrorToNSError(v39);
    *(void *)(v0 + 232) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v11 + 44, v11 + 52);
    *uint64_t v38 = v18;
    swift_errorRelease(v39);
    swift_errorRelease(v39);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "%{public}s commandIdentifier: %{public}s beaconIdentifier: %{private,mask.hash}s failed with error: %{public}@!",  (uint8_t *)v11,  0x34u);
    uint64_t v19 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v38, 1LL, v19);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_arrayDestroy(v41, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
    uint64_t v20 = *(void *)(v0 + 552);
    uint64_t v21 = *(void *)(v0 + 384);
    uint64_t v22 = *(void *)(v0 + 360);
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 368) + 8LL);
    v23(*(void *)(v0 + 392), v22);
    v23(v21, v22);
    swift_errorRelease(v20);
    swift_errorRelease(v20);
  }

  uint64_t v24 = *(void *)(v0 + 552);
  uint64_t v25 = *(void (**)(uint64_t))(v0 + 288);
  swift_errorRetain(v24);
  v25(v24);
  swift_release();
  swift_release();
  swift_errorRelease(v24);
  swift_errorRelease(v24);
  sub_100018C68(*(void *)(v0 + 352), type metadata accessor for AccessoryCommand);
  uint64_t v26 = *(void *)(v0 + 424);
  uint64_t v27 = *(void *)(v0 + 432);
  uint64_t v29 = *(void *)(v0 + 408);
  uint64_t v28 = *(void *)(v0 + 416);
  uint64_t v31 = *(void *)(v0 + 392);
  uint64_t v30 = *(void *)(v0 + 400);
  uint64_t v32 = *(void *)(v0 + 384);
  uint64_t v34 = *(void *)(v0 + 344);
  uint64_t v33 = *(void *)(v0 + 352);
  uint64_t v40 = *(void *)(v0 + 328);
  uint64_t v42 = *(void *)(v0 + 320);
  swift_task_dealloc(*(void *)(v0 + 448));
  swift_task_dealloc(v27);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10019E7C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_100004AEC(&qword_1009A4890);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for WildModeAssociationRecord(0LL);
  uint64_t v28 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = swift_allocObject(&unk_100945B78, 24LL, 7LL);
  *(void *)(v16 + swift_weakDestroy(v0 + 16) = a5;
  uint64_t v27 = *(void *)(a4 + 256);
  sub_100504C28(a2, (uint64_t)&v29);
  if (v30)
  {
    sub_100012EC0(&v29, (uint64_t)v31);
    uint64_t v26 = v15;
    uint64_t v17 = a2;
    uint64_t v18 = a3;
    uint64_t v19 = v32;
    uint64_t v20 = v33;
    sub_100012ED8(v31, v32);
    uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 144);
    uint64_t v22 = v20;
    a3 = v18;
    a2 = v17;
    uint64_t v15 = v26;
    LOBYTE(v19) = v21(v19, v22);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v31);
    if ((v19 & 1) == 0) {
      goto LABEL_9;
    }
  }

  else
  {
    sub_100015794((uint64_t)&v29, (uint64_t *)&unk_1009A9C40);
  }

  sub_10050BDEC(a2, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v12, 1LL, v13) == 1)
  {
    sub_100015794((uint64_t)v12, &qword_1009A4890);
  }

  else
  {
    sub_10002218C((uint64_t)v12, (uint64_t)v15, type metadata accessor for WildModeAssociationRecord);
    int v23 = v15[*(int *)(v13 + 52)];
    sub_100018C68((uint64_t)v15, type metadata accessor for WildModeAssociationRecord);
    if (v23 != 3)
    {
LABEL_9:
      sub_10019EA2C(a1, a2, a3, (uint64_t)sub_10009C044, v16);
      return swift_release();
    }
  }

  sub_100375A3C(a1, a2, a3, sub_10009C044, v16, 62.0);
  return swift_release();
}

uint64_t sub_10019EA2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v75 = a1;
  uint64_t v64 = a4;
  uint64_t v65 = a5;
  uint64_t v76 = a2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v69 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v67 = *(void *)(v9 - 8);
  uint64_t v68 = v9;
  __chkstk_darwin(v9);
  uint64_t v66 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v62 = type metadata accessor for UUID(0LL);
  uint64_t v61 = *(void *)(v62 - 8);
  uint64_t v11 = *(void *)(v61 + 64);
  uint64_t v12 = __chkstk_darwin(v62);
  uint64_t v73 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v72 = (char *)&v57 - v14;
  uint64_t v15 = static os_log_type_t.default.getter(v13);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v60 = qword_100A2B030;
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v17 = swift_allocObject(v16, 152LL, 7LL);
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E4050;
  uint64_t v18 = UUID.uuidString.getter(v17);
  uint64_t v20 = v19;
  *(void *)(v17 + 56) = &type metadata for String;
  unint64_t v21 = sub_1000226F4();
  *(void *)(v17 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v21;
  *(void *)(v17 + 32) = v18;
  *(void *)(v17 + 40) = v20;
  uint64_t v22 = UUID.uuidString.getter(v21);
  *(void *)(v17 + 96) = &type metadata for String;
  *(void *)(v17 + 10_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v21;
  *(void *)(v17 + 72) = v22;
  *(void *)(v17 + 80) = v23;
  uint64_t v70 = v7;
  uint64_t v71 = v6;
  uint64_t v63 = a3;
  unint64_t v24 = 0xE800000000000000LL;
  unint64_t v25 = 0x746C75616665642ELL;
  uint64_t v26 = v15;
  switch(a3)
  {
    case 0LL:
      break;
    case 1LL:
      unint64_t v25 = 0x676E69676E61722ELL;
      break;
    case 2LL:
      unint64_t v24 = 0xE900000000000067LL;
      goto LABEL_10;
    case 3LL:
      unint64_t v24 = 0x8000000100857490LL;
      unint64_t v25 = 0xD000000000000010LL;
      break;
    case 4LL:
      unint64_t v24 = 0xEF64656D7269666ELL;
      unint64_t v25 = 0x6F4365756575712ELL;
      break;
    case 5LL:
      unint64_t v24 = 0xEE0074726F685367LL;
LABEL_10:
      unint64_t v25 = 0x6E696B636172742ELL;
      break;
    default:
      unint64_t v24 = 0xE700000000000000LL;
      unint64_t v25 = 0x6E776F6E6B6E75LL;
      uint64_t v26 = v15;
      break;
  }

  *(void *)(v17 + 136) = &type metadata for String;
  *(void *)(v17 + 14_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v21;
  *(void *)(v17 + 112) = v25;
  *(void *)(v17 + 120) = v24;
  os_log(_:dso:log:_:_:)( v26,  &_mh_execute_header,  v60,  "#Durian: Command playSound commandIdentifier: %{public}@ beaconIdentifier: %{mask.hash}@ context: %@",  100LL,  2LL,  v17);
  swift_bridgeObjectRelease();
  uint64_t v27 = v61;
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 16);
  uint64_t v29 = v62;
  v28(v72, v76, v62);
  v28(v73, v75, v29);
  uint64_t v30 = *(unsigned __int8 *)(v27 + 80);
  uint64_t v31 = (v30 + 24) & ~v30;
  uint64_t v59 = v30 | 7;
  uint64_t v32 = (v11 + v30 + v31) & ~v30;
  uint64_t v58 = v32;
  unint64_t v33 = (v11 + v32 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v34 = (v33 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v35 = swift_allocObject(&unk_100945BA0, v34 + 16, v30 | 7);
  uint64_t v60 = v35;
  *(void *)(v35 + swift_weakDestroy(v0 + 16) = v74;
  uint64_t v36 = *(void (**)(uint64_t, char *, uint64_t))(v27 + 32);
  uint64_t v37 = v72;
  v36(v35 + v31, v72, v29);
  uint64_t v38 = v73;
  v36(v35 + v32, v73, v29);
  uint64_t v39 = v64;
  *(void *)(v35 + v33) = v63;
  uint64_t v40 = (void *)(v35 + v34);
  uint64_t v41 = v65;
  *uint64_t v40 = v39;
  v40[1] = v41;
  uint64_t v42 = v74;
  uint64_t v64 = *(void *)(v74 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorModQueue);
  v28(v37, v76, v29);
  uint64_t v43 = v38;
  v28(v38, v75, v29);
  uint64_t v44 = swift_allocObject(&unk_100945BC8, v33 + 16, v59);
  *(void *)(v44 + swift_weakDestroy(v0 + 16) = v42;
  v36(v44 + v31, v37, v29);
  v36(v44 + v58, v43, v29);
  unint64_t v45 = (uint64_t (**)())(v44 + v33);
  uint64_t v46 = v60;
  char *v45 = sub_1001B2364;
  v45[1] = (uint64_t (*)())v46;
  aBlock[4] = sub_1001B23CC;
  aBlock[5] = v44;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100945BE0;
  uint64_t v47 = _Block_copy(aBlock);
  swift_retain_n(v42, 2LL);
  swift_retain();
  uint64_t v48 = swift_retain();
  uint64_t v49 = v66;
  static DispatchQoS.unspecified.getter(v48);
  uint64_t v77 = _swiftEmptyArrayStorage;
  uint64_t v50 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v51 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v52 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v53 = v69;
  uint64_t v54 = v51;
  uint64_t v55 = v71;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v77, v54, v52, v71, v50);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v49, v53, v47);
  _Block_release(v47);
  swift_release();
  (*(void (**)(char *, uint64_t))(v70 + 8))(v53, v55);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v49, v68);
  return swift_release();
}

uint64_t sub_10019EFC8(void *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v34 = a5;
  uint64_t v35 = a6;
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v8 = sub_100004AEC(&qword_10099D4A0);
  uint64_t v32 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v33 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void **)((char *)a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_tagCommandManager);
  uint64_t v31 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
  v31(v13, a2, v11);
  uint64_t v16 = type metadata accessor for TagCommandManager();
  uint64_t v43 = v16;
  uint64_t v44 = &off_100956E40;
  v42[0] = v14;
  uint64_t v17 = type metadata accessor for SoundPlaybackCoordinator(0LL);
  uint64_t v18 = (char *)swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  uint64_t v19 = sub_100037298((uint64_t)v42, v16);
  __chkstk_darwin(v19);
  unint64_t v21 = (uint64_t *)((char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  uint64_t v23 = *v21;
  id v24 = v14;
  unint64_t v25 = sub_1001A9290(v23, (uint64_t)v13, v18);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);

  uint64_t v43 = type metadata accessor for BeaconManagerService(0LL);
  uint64_t v44 = &off_1009454C8;
  v42[0] = a1;
  uint64_t v39 = v42;
  uint64_t v40 = v25;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_1001B2454, v38, v8);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v8);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
  swift_retain();
  sub_1002C5DF4(a2, a1, (uint64_t)v25);
  swift_release();
  v31(v13, a2, v11);
  uint64_t v26 = (void *)((char *)a1
                 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorByBeaconIdentifier);
  swift_beginAccess( (char *)a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorByBeaconIdentifier,  v42,  33LL,  0LL);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v26);
  uint64_t v41 = *v26;
  *uint64_t v26 = 0x8000000000000000LL;
  sub_10005D3AC((uint64_t)v25, (uint64_t)v13, isUniquelyReferenced_nonNull_native);
  *uint64_t v26 = v41;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v13, v11);
  swift_endAccess(v42);
  uint64_t v28 = swift_allocObject(&unk_100945C90, 32LL, 7LL);
  *(void *)(v28 + swift_weakDestroy(v0 + 16) = v34;
  *(void *)(v28 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v35;
  swift_retain();
  sub_1005A061C(v36, v37, (uint64_t)sub_1001B246C, v28);
  swift_release();
  return swift_release();
}

uint64_t sub_10019F2E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = a2;
  uint64_t v34 = a3;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v38 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  __chkstk_darwin(v4);
  uint64_t v37 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v35 = *(void *)(v6 - 8);
  uint64_t v36 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = static os_log_type_t.default.getter(v11);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v15 = qword_100A2B030;
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  aBlock[0] = a1;
  swift_errorRetain(a1);
  uint64_t v18 = sub_100004AEC(&qword_10099C678);
  uint64_t v19 = String.init<A>(describing:)(aBlock, v18);
  uint64_t v21 = v20;
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1000226F4();
  *(void *)(v17 + 32) = v19;
  *(void *)(v17 + 40) = v21;
  os_log(_:dso:log:_:_:)( v14,  &_mh_execute_header,  v15,  "#Durian: Command playSound completed with error (%@)",  52LL,  2LL,  v17);
  swift_bridgeObjectRelease();
  sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v9);
  uint64_t v22 = (void *)static OS_dispatch_queue.global(qos:)(v13);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  uint64_t v23 = (void *)swift_allocObject(&unk_100945CB8, 40LL, 7LL);
  uint64_t v24 = v34;
  void v23[2] = v33;
  void v23[3] = v24;
  uint64_t v23[4] = a1;
  aBlock[4] = sub_1000D4F98;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100945CD0;
  unint64_t v25 = _Block_copy(aBlock);
  swift_errorRetain(a1);
  uint64_t v26 = swift_retain();
  static DispatchQoS.unspecified.getter(v26);
  uint64_t v40 = _swiftEmptyArrayStorage;
  uint64_t v27 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v28 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v29 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v30 = v37;
  uint64_t v31 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v28, v29, v39, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v30, v25);
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v38 + 8))(v30, v31);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v36);
  return swift_release();
}

uint64_t sub_10019F648( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, __n128), uint64_t a5)
{
  uint64_t v10 = sub_100004AEC(&qword_1009A4890);
  __chkstk_darwin(v10);
  uint64_t v12 = &v23[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_10050BDEC(a2, (uint64_t)v12);
  uint64_t v13 = type metadata accessor for WildModeAssociationRecord(0LL);
  int v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48LL))(v12, 1LL, v13);
  uint64_t v15 = sub_100015794((uint64_t)v12, &qword_1009A4890);
  if (v14 == 1)
  {
    uint64_t v17 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorByBeaconIdentifier);
    __n128 v16 = swift_beginAccess( a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorByBeaconIdentifier,  v23,  0LL,  0LL);
    uint64_t v18 = *v17;
    if (*(void *)(v18 + 16))
    {
      swift_bridgeObjectRetain(v18);
      sub_10030D124(a2);
      if ((v19 & 1) != 0)
      {
        swift_retain();
        swift_bridgeObjectRelease();
        uint64_t v20 = (void *)swift_allocObject(&unk_100945C18, 40LL, 7LL);
        void v20[2] = a1;
        void v20[3] = a4;
        v20[4] = a5;
        swift_retain();
        swift_retain();
        sub_1005A0AE0(a3, (uint64_t)sub_1001B2424, (uint64_t)v20);
        swift_release();
        return swift_release();
      }

      uint64_t v15 = swift_bridgeObjectRelease();
    }
  }

  return a4(v15, v16);
}

uint64_t sub_10019F7E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v20 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = swift_allocObject(&unk_100945C40, 32LL, 7LL);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(v13 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = a4;
  aBlock[4] = sub_1000228F4;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100945C58;
  int v14 = _Block_copy(aBlock);
  uint64_t v15 = swift_retain();
  static DispatchQoS.unspecified.getter(v15);
  uint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v18 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v6, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t sub_10019F9E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  int v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100504F30(a2, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11) == 1)
  {
    sub_100015794((uint64_t)v10, (uint64_t *)&unk_1009A9C30);
    return sub_1003796C8(a1, a2, a3, a4, 62.0);
  }

  sub_10002218C((uint64_t)v10, (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
  sub_1005D3400();
  if ((v15 & 1) != 0)
  {
    sub_100018C68((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
    return sub_1003796C8(a1, a2, a3, a4, 62.0);
  }

  sub_10019FB6C(a1, a2, a3, a4);
  return sub_100018C68((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
}

uint64_t sub_10019FB6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v55 = a4;
  uint64_t v52 = a2;
  uint64_t v53 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v60 = *(void *)(v5 - 8);
  uint64_t v61 = v5;
  __chkstk_darwin(v5);
  uint64_t v59 = (char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v57 = *(void *)(v7 - 8);
  uint64_t v58 = v7;
  __chkstk_darwin(v7);
  int v56 = (char *)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v49[0] = type metadata accessor for UUID(0LL);
  uint64_t v50 = *(void *)(v49[0] - 8LL);
  uint64_t v9 = *(void *)(v50 + 64);
  uint64_t v10 = __chkstk_darwin(v49[0]);
  uint64_t v51 = (char *)v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)v49 - v12;
  uint64_t v14 = static os_log_type_t.default.getter(v11);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v15 = qword_100A2B030;
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v17 = swift_allocObject(v16, 112LL, 7LL);
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v18 = UUID.uuidString.getter(v17);
  uint64_t v20 = v19;
  *(void *)(v17 + 56) = &type metadata for String;
  unint64_t v21 = sub_1000226F4();
  *(void *)(v17 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v21;
  *(void *)(v17 + 32) = v18;
  *(void *)(v17 + 40) = v20;
  uint64_t v22 = v52;
  uint64_t v23 = UUID.uuidString.getter(v21);
  *(void *)(v17 + 96) = &type metadata for String;
  *(void *)(v17 + 10_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v21;
  *(void *)(v17 + 72) = v23;
  *(void *)(v17 + 80) = v24;
  os_log(_:dso:log:_:_:)( v14,  &_mh_execute_header,  v15,  "#Durian: Command stopSound commandIdentifier: %@ beaconIdentifier: %@",  69LL,  2LL,  v17);
  swift_bridgeObjectRelease();
  uint64_t v25 = v54;
  v49[1] = *(void *)(v54 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorModQueue);
  uint64_t v26 = v50;
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
  uint64_t v28 = v49[0];
  v27(v13, v22, v49[0]);
  uint64_t v29 = v51;
  v27(v51, a1, v28);
  uint64_t v30 = *(unsigned __int8 *)(v26 + 80);
  uint64_t v31 = (v30 + 24) & ~v30;
  uint64_t v32 = (v9 + v30 + v31) & ~v30;
  unint64_t v33 = (v9 + v32 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v34 = swift_allocObject(&unk_100945D08, v33 + 16, v30 | 7);
  *(void *)(v34 + swift_weakDestroy(v0 + 16) = v25;
  uint64_t v35 = v34 + v31;
  uint64_t v36 = *(void (**)(uint64_t, char *, uint64_t))(v26 + 32);
  v36(v35, v13, v28);
  v36(v34 + v32, v29, v28);
  uint64_t v37 = (void *)(v34 + v33);
  uint64_t v38 = v55;
  *uint64_t v37 = v53;
  v37[1] = v38;
  aBlock[4] = sub_1001B2550;
  aBlock[5] = v34;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100945D20;
  uint64_t v39 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v40 = swift_retain();
  uint64_t v41 = v56;
  static DispatchQoS.unspecified.getter(v40);
  uint64_t v62 = _swiftEmptyArrayStorage;
  uint64_t v42 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v43 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v44 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  unint64_t v45 = v59;
  uint64_t v46 = v43;
  uint64_t v47 = v61;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v62, v46, v44, v61, v42);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v41, v45, v39);
  _Block_release(v39);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v45, v47);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v41, v58);
  return swift_release();
}

uint64_t sub_10019FF44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v42 = a3;
  uint64_t v9 = sub_100004AEC(&qword_10099D4A0);
  uint64_t v40 = *(void *)(v9 - 8);
  uint64_t v41 = v9;
  __chkstk_darwin(v9);
  uint64_t v39 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = (void *)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorByBeaconIdentifier);
  __n128 v16 = swift_beginAccess( a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorByBeaconIdentifier,  v47,  0LL,  0LL);
  if (!*(void *)(*v15 + 16LL)) {
    goto LABEL_5;
  }
  swift_bridgeObjectRetain(*v15);
  sub_10030D124(a2);
  if ((v17 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    uint64_t v38 = a4;
    uint64_t v18 = *(void **)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_tagCommandManager);
    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16);
    v35(v14, a2, v11, v16);
    uint64_t v19 = type metadata accessor for TagCommandManager();
    uint64_t v45 = v19;
    uint64_t v46 = &off_100956E40;
    v44[0] = v18;
    uint64_t v20 = type metadata accessor for SoundPlaybackCoordinator(0LL);
    uint64_t v21 = swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    uint64_t v37 = a5;
    uint64_t v22 = (char *)v21;
    uint64_t v23 = sub_100037298((uint64_t)v44, v19);
    uint64_t v36 = v12;
    __chkstk_darwin(v23);
    uint64_t v25 = (uint64_t *)((char *)&v35 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    (*(void (**)(uint64_t *))(v26 + 16))(v25);
    uint64_t v27 = *v25;
    id v28 = v18;
    uint64_t v29 = sub_1001A9290(v27, (uint64_t)v14, v22);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v44);

    uint64_t v45 = type metadata accessor for BeaconManagerService(0LL);
    uint64_t v46 = &off_1009454C8;
    v44[0] = a1;
    __chkstk_darwin(v45);
    *(&v35 - 2) = (void (*)(char *, uint64_t, uint64_t, __n128))v44;
    *(&v35 - 1) = (void (*)(char *, uint64_t, uint64_t, __n128))v29;
    swift_retain();
    uint64_t v30 = v39;
    uint64_t v31 = v41;
    OS_dispatch_queue.sync<A>(execute:)(sub_1001B36AC, &v35 - 4, v41);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v30, v31);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v44);
    ((void (*)(char *, uint64_t, uint64_t))v35)(v14, a2, v11);
    swift_beginAccess(v15, v44, 33LL, 0LL);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v15);
    uint64_t v43 = *v15;
    *uint64_t v15 = 0x8000000000000000LL;
    sub_10005D3AC((uint64_t)v29, (uint64_t)v14, isUniquelyReferenced_nonNull_native);
    *uint64_t v15 = v43;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v11);
    swift_endAccess(v44);
    uint64_t v33 = swift_allocObject(&unk_100945D58, 32LL, 7LL);
    *(void *)(v33 + swift_weakDestroy(v0 + 16) = v38;
    *(void *)(v33 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v37;
    swift_retain();
    sub_1005A0AE0(v42, (uint64_t)sub_1001B25C4, v33);
    swift_release();
    return swift_release();
  }

  swift_retain();
  swift_bridgeObjectRelease();
  sub_1005A0AE0(v42, a4, a5);
  return swift_release();
}

uint64_t sub_1001A02F4(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = static os_log_type_t.default.getter(a1);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v5 = qword_100A2B030;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v13 = a1;
  swift_errorRetain(a1);
  uint64_t v8 = sub_100004AEC(&qword_10099C678);
  uint64_t v9 = String.init<A>(describing:)(&v13, v8);
  uint64_t v11 = v10;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1000226F4();
  *(void *)(v7 + 32) = v9;
  *(void *)(v7 + 40) = v11;
  os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  v5,  "#Durian: Command stopSound completed with error (%@)",  52LL,  2LL,  v7);
  swift_bridgeObjectRelease();
  return a2(a1);
}

uint64_t sub_1001A0414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v39 = a2;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v38 = &v32[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v10);
  uint64_t v12 = &v32[-v11];
  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  sub_10000A720(v13, (uint64_t)qword_100A2A470);
  uint64_t v14 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v15 = v14(v12, a1, v7);
  __n128 v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter(v16);
  int v18 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    uint64_t v35 = v14;
    uint64_t v20 = v19;
    uint64_t v34 = swift_slowAlloc(64LL, -1LL);
    uint64_t v41 = v34;
    *(_DWORD *)uint64_t v20 = 136446723;
    int v33 = v18;
    uint64_t v40 = sub_1003F11D4(0xD000000000000024LL, 0x8000000100857760LL, &v41);
    uint64_t v37 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2160;
    uint64_t v40 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v20 + 14, v20 + 22);
    *(_WORD *)(v20 + 22) = 2081;
    uint64_t v36 = a1;
    uint64_t v21 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter(v7, v21);
    uint64_t v40 = sub_1003F11D4(v22, v23, &v41);
    a1 = v36;
    uint64_t v4 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v20 + 24, v20 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v12, v7);
    _os_log_impl( (void *)&_mh_execute_header,  v16,  (os_log_type_t)v33,  "%{public}s beaconIdentifier: %{private,mask.hash}s",  (uint8_t *)v20,  0x20u);
    uint64_t v24 = v34;
    swift_arrayDestroy(v34, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    uint64_t v25 = v20;
    uint64_t v14 = v35;
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v12, v7);
  }

  type metadata accessor for Transaction(0LL);
  uint64_t v26 = v38;
  v14(v38, a1, v7);
  uint64_t v27 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v28 = (v27 + 40) & ~v27;
  uint64_t v29 = (char *)swift_allocObject(&unk_100945E20, v28 + v9, v27 | 7);
  uint64_t v30 = v39;
  *((void *)v29 + 2) = v4;
  *((void *)v29 + 3) = v30;
  *((void *)v29 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = a3;
  (*(void (**)(char *, _BYTE *, uint64_t))(v8 + 32))(&v29[v28], v26, v7);
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)( "BeaconManagerService.unpair.beaconIdentifier",  44LL,  2LL,  &unk_1009A49C8,  v29);
  return swift_release();
}

uint64_t sub_1001A0774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[35] = a3;
  v4[36] = a4;
  v4[33] = a1;
  v4[34] = a2;
  unint64_t v5 = (*(void *)(*(void *)(sub_100004AEC(&qword_10099D8A0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[37] = swift_task_alloc(v5);
  v4[38] = swift_task_alloc(v5);
  uint64_t v6 = type metadata accessor for AccessoryCommand(0LL);
  v4[39] = v6;
  unint64_t v7 = (*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[40] = swift_task_alloc(v7);
  v4[41] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  v4[42] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[43] = v9;
  uint64_t v10 = *(void *)(v9 + 64);
  v4[44] = v10;
  unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v4[45] = swift_task_alloc(v11);
  v4[46] = swift_task_alloc(v11);
  v4[47] = swift_task_alloc(v11);
  v4[48] = swift_task_alloc(v11);
  v4[49] = swift_task_alloc(v11);
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  v4[50] = v12;
  v4[51] = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1001A08A0, 0LL, 0LL);
}

uint64_t sub_1001A08A0()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 176, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C920 + dword_10099C920);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099C924);
    *(void *)(v0 + 4swift_weakDestroy(v0 + 16) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1001A09A0;
    return v4();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1001A09A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 416LL);
  *(void *)(*(void *)v1 + 424LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001A09FC, 0LL, 0LL);
}

uint64_t sub_1001A09FC()
{
  uint64_t v1 = *(void *)(v0 + 424);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (v1)
  {
    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 136, (uint64_t *)&unk_10099FA80);
    if (*(void *)(v0 + 160))
    {
      sub_100012EC0((__int128 *)(v0 + 136), v0 + 96);
      sub_100012ED8((void *)(v0 + 96), *(void *)(v0 + 120));
      uint64_t v22 = (uint64_t (__cdecl *)())((char *)&dword_10099C890 + dword_10099C890);
      uint64_t v3 = (void *)swift_task_alloc(unk_10099C894);
      *(void *)(v0 + 432) = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_1001A0C38;
      return v22();
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    if (qword_10099B220 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A2A470);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing OwnerCommandService to startBTFinding!", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    uint64_t v9 = *(void (**)(void))(v0 + 272);

    unint64_t v10 = sub_10014A2C0();
    uint64_t v11 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v10, 0LL, 0LL);
    *uint64_t v12 = 11;
    v9();
    swift_errorRelease(v11);
    uint64_t v13 = *(void *)(v0 + 384);
    uint64_t v14 = *(void *)(v0 + 392);
    uint64_t v16 = *(void *)(v0 + 368);
    uint64_t v15 = *(void *)(v0 + 376);
    uint64_t v17 = *(void *)(v0 + 360);
    uint64_t v19 = *(void *)(v0 + 320);
    uint64_t v18 = *(void *)(v0 + 328);
    uint64_t v21 = *(void *)(v0 + 296);
    uint64_t v20 = *(void *)(v0 + 304);
    swift_task_dealloc(*(void *)(v0 + 408));
    swift_task_dealloc(v14);
    swift_task_dealloc(v13);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  return result;
}

uint64_t sub_1001A0C38(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 432LL);
  *(void *)(*(void *)v1 + 44Hasher.init(_seed:)(v5, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001A0C94, 0LL, 0LL);
}

uint64_t sub_1001A0C94()
{
  uint64_t v1 = *(void *)(v0 + 440);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 96));
  if (v1) {
    return swift_task_switch(sub_1001A0E70, *(void *)(v0 + 440), 0LL);
  }
  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = sub_10000A720(v3, (uint64_t)qword_100A2A470);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing BeaconStoreActor to startBTFinding!", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  uint64_t v8 = *(void (**)(void))(v0 + 272);

  unint64_t v9 = sub_10014A2C0();
  uint64_t v10 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v9, 0LL, 0LL);
  *uint64_t v11 = 11;
  v8();
  swift_errorRelease(v10);
  swift_release();
  uint64_t v12 = *(void *)(v0 + 384);
  uint64_t v13 = *(void *)(v0 + 392);
  uint64_t v15 = *(void *)(v0 + 368);
  uint64_t v14 = *(void *)(v0 + 376);
  uint64_t v16 = *(void *)(v0 + 360);
  uint64_t v18 = *(void *)(v0 + 320);
  uint64_t v17 = *(void *)(v0 + 328);
  uint64_t v20 = *(void *)(v0 + 296);
  uint64_t v19 = *(void *)(v0 + 304);
  swift_task_dealloc(*(void *)(v0 + 408));
  swift_task_dealloc(v13);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A0E70()
{
  uint64_t v1 = v0[55];
  uint64_t v2 = v0[49];
  uint64_t v4 = v0[43];
  uint64_t v3 = v0[44];
  uint64_t v5 = v0[42];
  uint64_t v6 = v0[36];
  v0[56] = *(void *)(v1 + 136);
  os_log_type_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[57] = v7;
  v7(v2, v6, v5);
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = (v8 + 24) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_100945E48, v9 + v3, v8 | 7);
  v0[58] = v10;
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v0[59] = v11;
  v11(v10 + v9, v2, v5);
  swift_retain();
  return swift_task_switch(sub_1001A0F2C, 0LL, 0LL);
}

uint64_t sub_1001A0F2C()
{
  uint64_t v1 = v0[58];
  uint64_t v2 = v0[56];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[60] = v3;
  v3[2] = v2;
  v3[3] = sub_1001B2874;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[61] = v4;
  void *v4 = v0;
  v4[1] = sub_1001A0FD8;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[51],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100117968,  v3,  v0[50]);
}

uint64_t sub_1001A0FD8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 480LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 488LL));
  swift_release();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1001A1040, 0LL, 0LL);
}

uint64_t sub_1001A1040()
{
  uint64_t v1 = v0[51];
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord(0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(v1, 1LL, v2) == 1)
  {
    sub_100015794(v1, (uint64_t *)&unk_1009A9C30);
    char v3 = 0;
  }

  else
  {
    sub_1005D3A0C();
    uint64_t v5 = v4;
    uint64_t v6 = SPBeaconTypeHele;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    if (v7 == v10 && v9 == v11) {
      char v3 = 1;
    }
    else {
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0LL);
    }
    uint64_t v13 = v0[51];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_100018C68(v13, type metadata accessor for OwnedBeaconRecord);
  }

  uint64_t v14 = (void (*)(uint64_t, uint64_t, uint64_t))v0[57];
  uint64_t v15 = v0[48];
  uint64_t v16 = v0[42];
  uint64_t v17 = v0[43];
  uint64_t v19 = v0[37];
  uint64_t v18 = v0[38];
  uint64_t v20 = v0[36];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v18, 1LL, 1LL, v16);
  v14(v15, v20, v16);
  sub_10001581C(v18, v19, &qword_10099D8A0);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v19, 1LL, v16);
  if ((_DWORD)v21 == 1)
  {
    uint64_t v23 = v0[37];
    uint64_t v22 = v0[38];
    UUID.init()(v21);
    sub_100015794(v22, &qword_10099D8A0);
    sub_100015794(v23, &qword_10099D8A0);
  }

  else
  {
    uint64_t v24 = (void (*)(uint64_t, uint64_t, uint64_t))v0[59];
    uint64_t v25 = v0[47];
    uint64_t v26 = v0[42];
    uint64_t v27 = v0[37];
    sub_100015794(v0[38], &qword_10099D8A0);
    v24(v25, v27, v26);
  }

  uint64_t v28 = (void (*)(uint64_t, uint64_t, uint64_t))v0[59];
  uint64_t v29 = v0[48];
  uint64_t v31 = v0[41];
  uint64_t v30 = v0[42];
  uint64_t v32 = (int *)v0[39];
  v28(v31, v0[47], v30);
  v28(v31 + v32[5], v29, v30);
  uint64_t v33 = v31 + v32[6];
  *(void *)uint64_t v33 = 0LL;
  *(_BYTE *)(v33 + 8) = 0;
  *(_BYTE *)(v31 + v32[7]) = v3 & 1;
  *(_BYTE *)(v31 + v32[8]) = 1;
  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v34 = v0[40];
  uint64_t v35 = v0[41];
  uint64_t v36 = type metadata accessor for Logger(0LL);
  v0[62] = sub_10000A720(v36, (uint64_t)qword_100A2A470);
  uint64_t v37 = sub_10001DC4C(v35, v34, type metadata accessor for AccessoryCommand);
  uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
  os_log_type_t v39 = static os_log_type_t.default.getter(v38);
  BOOL v40 = os_log_type_enabled(v38, v39);
  uint64_t v41 = v0[40];
  if (v40)
  {
    uint64_t v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v43 = swift_slowAlloc(32LL, -1LL);
    uint64_t v48 = v43;
    *(_DWORD *)uint64_t v42 = 136315138;
    sub_1006CC4C0();
    v0[32] = sub_1003F11D4(v44, v45, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 33, v42 + 4, v42 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68(v41, type metadata accessor for AccessoryCommand);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Executing startBTFinding command: %s", v42, 0xCu);
    swift_arrayDestroy(v43, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1LL, -1LL);
    swift_slowDealloc(v42, -1LL, -1LL);
  }

  else
  {
    sub_100018C68(v0[40], type metadata accessor for AccessoryCommand);
  }

  uint64_t v46 = (void *)swift_task_alloc(dword_1009BF5F4);
  v0[63] = v46;
  *uint64_t v46 = v0;
  v46[1] = sub_1001A1410;
  return sub_1007702C8(v0[41]);
}

uint64_t sub_1001A1410()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 504LL);
  *(void *)(*(void *)v1 + 512LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    char v3 = sub_1001A1720;
  }
  else {
    char v3 = sub_1001A1474;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1001A1474()
{
  uint64_t v1 = (*(uint64_t (**)(void, void, void))(v0 + 456))( *(void *)(v0 + 368),  *(void *)(v0 + 288),  *(void *)(v0 + 336));
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void *)(v0 + 368);
    uint64_t v5 = *(void *)(v0 + 336);
    uint64_t v20 = *(void *)(v0 + 344);
    uint64_t v6 = swift_slowAlloc(32LL, -1LL);
    uint64_t v21 = swift_slowAlloc(64LL, -1LL);
    uint64_t v22 = v21;
    *(_DWORD *)uint64_t v6 = 136446723;
    *(void *)(v0 + 232) = sub_1003F11D4(0xD000000000000024LL, 0x8000000100857760LL, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2160;
    *(void *)(v0 + 240) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v6 + 14, v6 + 22);
    *(_WORD *)(v6 + 22) = 2081;
    uint64_t v7 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter(v5, v7);
    *(void *)(v0 + 248) = sub_1003F11D4(v8, v9, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v6 + 24, v6 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v4, v5);
    _os_log_impl( (void *)&_mh_execute_header,  v2,  v3,  "%{public}s beaconIdentifier: %{private,mask.hash}s completed successfully!",  (uint8_t *)v6,  0x20u);
    swift_arrayDestroy(v21, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 344) + 8LL))(*(void *)(v0 + 368), *(void *)(v0 + 336));
  }

  (*(void (**)(void))(v0 + 272))(0LL);
  swift_release();
  swift_release();
  sub_100018C68(*(void *)(v0 + 328), type metadata accessor for AccessoryCommand);
  uint64_t v10 = *(void *)(v0 + 384);
  uint64_t v11 = *(void *)(v0 + 392);
  uint64_t v13 = *(void *)(v0 + 368);
  uint64_t v12 = *(void *)(v0 + 376);
  uint64_t v14 = *(void *)(v0 + 360);
  uint64_t v16 = *(void *)(v0 + 320);
  uint64_t v15 = *(void *)(v0 + 328);
  uint64_t v18 = *(void *)(v0 + 296);
  uint64_t v17 = *(void *)(v0 + 304);
  swift_task_dealloc(*(void *)(v0 + 408));
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A1720()
{
  uint64_t v1 = *(void *)(v0 + 512);
  (*(void (**)(void, void, void))(v0 + 456))( *(void *)(v0 + 360),  *(void *)(v0 + 288),  *(void *)(v0 + 336));
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  os_log_type_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 512);
    log = v3;
    uint64_t v6 = *(void *)(v0 + 360);
    uint64_t v7 = *(void *)(v0 + 336);
    uint64_t v27 = *(void *)(v0 + 344);
    uint64_t v8 = swift_slowAlloc(42LL, -1LL);
    uint64_t v29 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v30 = swift_slowAlloc(64LL, -1LL);
    uint64_t v31 = v30;
    *(_DWORD *)uint64_t v8 = 136446979;
    *(void *)(v0 + 200) = sub_1003F11D4(0xD000000000000024LL, 0x8000000100857760LL, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2160;
    *(void *)(v0 + 208) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v8 + 14, v8 + 22);
    *(_WORD *)(v8 + 22) = 2081;
    uint64_t v9 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter(v7, v9);
    *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = sub_1003F11D4(v10, v11, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v8 + 24, v8 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v6, v7);
    *(_WORD *)(v8 + 32) = 2114;
    swift_errorRetain(v5);
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(void *)(v0 + 22_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v8 + 34, v8 + 42);
    *uint64_t v29 = v12;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    os_log_type_t v3 = log;
    _os_log_impl( (void *)&_mh_execute_header,  log,  v4,  "%{public}s beaconIdentifier: %{private,mask.hash}s\nfailed with error: %{public}@!",  (uint8_t *)v8,  0x2Au);
    uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v29, 1LL, v13);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_arrayDestroy(v30, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    uint64_t v14 = *(void *)(v0 + 512);
    (*(void (**)(void, void))(*(void *)(v0 + 344) + 8LL))(*(void *)(v0 + 360), *(void *)(v0 + 336));
    swift_errorRelease(v14);
    swift_errorRelease(v14);
  }

  uint64_t v15 = *(void *)(v0 + 512);
  uint64_t v16 = *(void (**)(uint64_t))(v0 + 272);
  swift_errorRetain(v15);
  v16(v15);
  swift_release();
  swift_release();
  swift_errorRelease(v15);
  swift_errorRelease(v15);
  sub_100018C68(*(void *)(v0 + 328), type metadata accessor for AccessoryCommand);
  uint64_t v17 = *(void *)(v0 + 384);
  uint64_t v18 = *(void *)(v0 + 392);
  uint64_t v20 = *(void *)(v0 + 368);
  uint64_t v19 = *(void *)(v0 + 376);
  uint64_t v21 = *(void *)(v0 + 360);
  uint64_t v23 = *(void *)(v0 + 320);
  uint64_t v22 = *(void *)(v0 + 328);
  uint64_t v25 = *(void *)(v0 + 296);
  uint64_t v24 = *(void *)(v0 + 304);
  swift_task_dealloc(*(void *)(v0 + 408));
  swift_task_dealloc(v18);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A1AB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v61 = a3;
  uint64_t v62 = a4;
  uint64_t v59 = a1;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v58 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v57 = (char *)&v53 - v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v53 - v13;
  if (qword_10099B7A8 != -1) {
    swift_once(&qword_10099B7A8, sub_100651904);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  sub_10000A720(v15, (uint64_t)qword_100A2B0C8);
  int v56 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v16 = v56(v14, a2, v7);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter(v17);
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v60 = a2;
  if (v19)
  {
    uint64_t v20 = swift_slowAlloc(22LL, -1LL);
    uint64_t v54 = v4;
    uint64_t v21 = v20;
    uint64_t v22 = swift_slowAlloc(32LL, -1LL);
    uint64_t v53 = v15;
    uint64_t v23 = v22;
    *(_DWORD *)uint64_t v21 = 141558275;
    uint64_t v63 = 1752392040LL;
    v64[0] = v22;
    uint64_t v55 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v21 + 4, v21 + 12);
    *(_WORD *)(v21 + 12) = 2081;
    uint64_t v24 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter(v7, v24);
    uint64_t v63 = sub_1003F11D4(v25, v26, v64);
    uint64_t v8 = v55;
    a2 = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v21 + 14, v21 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
    _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "#Durian: Client asking to connect to beacon with UUID - %{private,mask.hash}s",  (uint8_t *)v21,  0x16u);
    swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v27 = v23;
    uint64_t v15 = v53;
    swift_slowDealloc(v27, -1LL, -1LL);
    uint64_t v28 = v21;
    uint64_t v5 = v54;
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
  }

  uint64_t My = type metadata accessor for Feature.FindMy(0LL);
  v64[3] = My;
  v64[4] = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  uint64_t v30 = sub_10000A7C8(v64);
  (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v30,  enum case for Feature.FindMy.spPlaySoundAll(_:),  My);
  LOBYTE(My) = isFeatureEnabled(_:)(v64);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v64);
  if ((My & 1) != 0)
  {
    uint64_t v55 = *(void *)(v5 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_soundPlaybackManager);
    uint64_t v31 = (void (*)(char *, uint64_t, uint64_t))v56;
    uint64_t v32 = v57;
    v56(v57, a2, v7);
    uint64_t v34 = v58;
    uint64_t v33 = v59;
    v31(v58, v59, v7);
    uint64_t v35 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v36 = (v35 + 16) & ~v35;
    uint64_t v37 = (v9 + v35 + v36) & ~v35;
    unint64_t v38 = (v9 + v37 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    os_log_type_t v39 = (void (*)(void **))swift_allocObject(&unk_100945DD0, v38 + 16, v35 | 7);
    BOOL v40 = (char *)v39 + v36;
    uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v41(v40, v32, v7);
    v41((char *)v39 + v37, v34, v7);
    uint64_t v42 = (void *)((char *)v39 + v38);
    uint64_t v43 = v62;
    *uint64_t v42 = v61;
    v42[1] = v43;
    swift_retain();
    sub_100374668(v60, v33, (void (*)(void **))sub_1001B2624, v39);
  }

  else
  {
    if (qword_10099B220 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    uint64_t v44 = sub_10000A720(v15, (uint64_t)qword_100A2A470);
    unint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
    os_log_type_t v46 = static os_log_type_t.default.getter(v45);
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Connecting legacy when spPlaySoundAll is off!", v47, 2u);
      swift_slowDealloc(v47, -1LL, -1LL);
    }

    sub_1003E2EEC(a2);
    uint64_t v48 = swift_allocObject(&unk_100945D80, 32LL, 7LL);
    uint64_t v49 = v61;
    uint64_t v50 = v62;
    *(void *)(v48 + swift_weakDestroy(v0 + 16) = v61;
    *(void *)(v48 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v50;
    swift_retain();
    Future.addFailure(block:)(sub_1001B2610, v48);
    swift_release();
    swift_release();
    uint64_t v51 = swift_allocObject(&unk_100945DA8, 32LL, 7LL);
    *(void *)(v51 + swift_weakDestroy(v0 + 16) = v49;
    *(void *)(v51 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v50;
    swift_retain();
    Future.addSuccess(block:)(sub_1001B2618, v51);
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t sub_1001A1FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v48 = a3;
  uint64_t v49 = a4;
  uint64_t v50 = a1;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v47 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  os_log_type_t v46 = (char *)&v41 - v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v41 - v13;
  if (qword_10099B7A8 != -1) {
    swift_once(&qword_10099B7A8, sub_100651904);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  sub_10000A720(v15, (uint64_t)qword_100A2B0C8);
  unint64_t v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v16 = v45(v14, a2, v7);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc(22LL, -1LL);
    uint64_t v44 = a2;
    uint64_t v20 = v19;
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    uint64_t v43 = v21;
    *(_DWORD *)uint64_t v20 = 141558275;
    uint64_t v51 = 1752392040LL;
    uint64_t v52 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2081;
    uint64_t v42 = v20 + 14;
    uint64_t v22 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v7, v22);
    uint64_t v51 = sub_1003F11D4(v23, v24, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v42, v20 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
    _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "#Durian: Client asking to disconnect from beacon with UUID - %{private,mask.hash}s",  (uint8_t *)v20,  0x16u);
    uint64_t v25 = v43;
    swift_arrayDestroy(v43, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    uint64_t v26 = v20;
    a2 = v44;
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
  }

  uint64_t v44 = *(void *)(v5 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_soundPlaybackManager);
  uint64_t v27 = (void (*)(char *, uint64_t, uint64_t))v45;
  uint64_t v28 = v46;
  v45(v46, a2, v7);
  uint64_t v29 = v47;
  uint64_t v30 = v50;
  v27(v47, v50, v7);
  uint64_t v31 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v32 = (v31 + 16) & ~v31;
  uint64_t v33 = (v9 + v31 + v32) & ~v31;
  unint64_t v34 = (v9 + v33 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v35 = a2;
  uint64_t v36 = swift_allocObject(&unk_100945DF8, v34 + 16, v31 | 7);
  uint64_t v37 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 32);
  v37(v36 + v32, v28, v7);
  v37(v36 + v33, v29, v7);
  unint64_t v38 = (void *)(v36 + v34);
  uint64_t v39 = v49;
  *unint64_t v38 = v48;
  v38[1] = v39;
  swift_retain();
  sub_100375594(v35, v30, (uint64_t)sub_1001B26E0, v36);
  return swift_release();
}

uint64_t sub_1001A233C( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, const char *a6, const char *a7)
{
  uint64_t v67 = a6;
  uint64_t v68 = a3;
  uint64_t v69 = a5;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  os_log_type_t v18 = (char *)&v64 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v64 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v64 - v22;
  if (a1)
  {
    uint64_t v66 = a4;
    swift_errorRetain(a1);
    if (qword_10099B220 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    sub_10000A720(v24, (uint64_t)qword_100A2A470);
    uint64_t v25 = v12;
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v26(v18, a2, v11);
    v26(v15, v68, v11);
    swift_errorRetain(a1);
    uint64_t v27 = swift_errorRetain(a1);
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.error.getter(v28);
    int v30 = v29;
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v31 = swift_slowAlloc(42LL, -1LL);
      uint64_t v32 = swift_slowAlloc(96LL, -1LL);
      uint64_t v68 = v32;
      *(_DWORD *)uint64_t v31 = 141558787;
      uint64_t v70 = 1752392040LL;
      uint64_t v71 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v31 + 4, v31 + 12);
      *(_WORD *)(v31 + 12) = 2081;
      uint64_t v64 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      LODWORD(v65) = v30;
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter(v11, v64);
      uint64_t v70 = sub_1003F11D4(v33, v34, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v31 + 14, v31 + 22);
      swift_bridgeObjectRelease();
      uint64_t v35 = *(void (**)(char *, uint64_t))(v25 + 8);
      v35(v18, v11);
      *(_WORD *)(v31 + 22) = 2082;
      uint64_t v70 = a1;
      swift_errorRetain(a1);
      uint64_t v36 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v37 = String.init<A>(describing:)(&v70, v36);
      uint64_t v70 = sub_1003F11D4(v37, v38, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v31 + 24, v31 + 32);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      *(_WORD *)(v31 + 32) = 2082;
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter(v11, v64);
      uint64_t v70 = sub_1003F11D4(v39, v40, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v31 + 34, v31 + 42);
      swift_bridgeObjectRelease();
      v35(v15, v11);
      _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v65, v67, (uint8_t *)v31, 0x2Au);
      uint64_t v41 = v68;
      swift_arrayDestroy(v68, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    else
    {
      uint64_t v62 = *(void (**)(char *, uint64_t))(v25 + 8);
      v62(v18, v11);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      v62(v15, v11);
    }

    swift_errorRetain(a1);
    v66(a1);
    swift_errorRelease(a1);
    return swift_errorRelease(a1);
  }

  else
  {
    uint64_t v67 = a7;
    if (qword_10099B220 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    uint64_t v42 = type metadata accessor for Logger(0LL);
    sub_10000A720(v42, (uint64_t)qword_100A2A470);
    uint64_t v43 = v12;
    uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v44(v23, a2, v11);
    uint64_t v45 = ((uint64_t (*)(char *, uint64_t, uint64_t))v44)(v21, v68, v11);
    os_log_type_t v46 = (os_log_s *)Logger.logObject.getter(v45);
    os_log_type_t v47 = static os_log_type_t.default.getter(v46);
    int v48 = v47;
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v49 = swift_slowAlloc(32LL, -1LL);
      LODWORD(v66) = v48;
      uint64_t v50 = v49;
      uint64_t v51 = swift_slowAlloc(64LL, -1LL);
      uint64_t v68 = v51;
      *(_DWORD *)uint64_t v50 = 141558531;
      uint64_t v70 = 1752392040LL;
      uint64_t v71 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v50 + 4, v50 + 12);
      *(_WORD *)(v50 + 12) = 2081;
      uint64_t v52 = a4;
      uint64_t v53 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      os_log_t v65 = v46;
      uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter(v11, v53);
      uint64_t v70 = sub_1003F11D4(v54, v55, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v50 + 14, v50 + 22);
      swift_bridgeObjectRelease();
      int v56 = *(void (**)(char *, uint64_t))(v43 + 8);
      v56(v23, v11);
      *(_WORD *)(v50 + 22) = 2082;
      uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter(v11, v53);
      uint64_t v70 = sub_1003F11D4(v57, v58, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v50 + 24, v50 + 32);
      swift_bridgeObjectRelease();
      v56(v21, v11);
      os_log_t v59 = v65;
      _os_log_impl((void *)&_mh_execute_header, v65, (os_log_type_t)v66, v67, (uint8_t *)v50, 0x20u);
      uint64_t v60 = v68;
      swift_arrayDestroy(v68, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v60, -1LL, -1LL);
      swift_slowDealloc(v50, -1LL, -1LL);

      return ((uint64_t (*)(void))v52)(0LL);
    }

    else
    {
      uint64_t v63 = *(void (**)(char *, uint64_t))(v43 + 8);
      v63(v23, v11);
      v63(v21, v11);

      return ((uint64_t (*)(void))a4)(0LL);
    }
  }

uint64_t sub_1001A2978(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = static os_log_type_t.error.getter(a1);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v5 = qword_100A2B030;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  swift_getErrorValue(a1, v13, v12);
  uint64_t v8 = Error.localizedDescription.getter(v12[1], v12[2]);
  uint64_t v10 = v9;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1000226F4();
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v10;
  os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  v5,  "#Durian: Error while connecting to beacon. Error - %@",  53LL,  2LL,  v7);
  swift_bridgeObjectRelease();
  return a2(a1);
}

uint64_t sub_1001A2A94(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = static os_log_type_t.default.getter(a1);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  os_log(_:dso:log:_:_:)( v3,  &_mh_execute_header,  qword_100A2B030,  "#Durian: Connection successful for beacon.",  42LL,  2LL,  _swiftEmptyArrayStorage);
  return a2(0LL);
}

uint64_t sub_1001A2B24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001A3268( a1,  a2,  a3,  a4,  "Command enable notify when found uuid: %@",  41LL,  (uint64_t)&unk_100945B28,  (uint64_t)&unk_1009A4998);
}

uint64_t sub_1001A2B44( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[21] = a7;
  v8[22] = a8;
  v8[19] = a5;
  v8[20] = a6;
  v8[18] = a4;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  v8[23] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  _BYTE v8[24] = v10;
  v8[25] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1001A2BAC, 0LL, 0LL);
}

uint64_t sub_1001A2BAC()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C908 + dword_10099C908);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099C90C);
    *(void *)(v0 + 208) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1001A2CAC;
    return v4();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1001A2CAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 208LL);
  *(void *)(*(void *)v1 + 216LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001A2D08, 0LL, 0LL);
}

uint64_t sub_1001A2D08()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 216))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc(dword_1009A1504);
    *(void *)(v0 + 22_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1001A2E88;
    return sub_1000FA120(*(void *)(v0 + 168), *(void *)(v0 + 176));
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B118 != -1) {
      swift_once(&qword_10099B118, sub_1000F95A0);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A2A1C8);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing NotifyWhenFoundManager.", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    uint64_t v9 = *(void (**)(void))(v0 + 152);

    unint64_t v10 = sub_1000157D0();
    uint64_t v11 = swift_allocError(&type metadata for DaemonError, v10, 0LL, 0LL);
    *uint64_t v12 = 0xD000000000000016LL;
    v12[1] = 0x80000001008553D0LL;
    v9();
    swift_errorRelease(v11);
    swift_task_dealloc(*(void *)(v0 + 200));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1001A2E88()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 224LL);
  *(void *)(*(void *)v1 + 232LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1001A2F34;
  }
  else {
    uint64_t v3 = sub_1001A2EEC;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1001A2EEC()
{
  uint64_t v1 = *(void *)(v0 + 216);
  (*(void (**)(void))(v0 + 152))(0LL);
  swift_release(v1);
  swift_task_dealloc(*(void *)(v0 + 200));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A2F34()
{
  if (qword_10099B7A8 != -1) {
    swift_once(&qword_10099B7A8, sub_100651904);
  }
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v5 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10000A720(v6, (uint64_t)qword_100A2B0C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain(v1);
  uint64_t v7 = swift_errorRetain(v1);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.error.getter(v8);
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = *(void *)(v0 + 232);
  uint64_t v12 = *(void *)(v0 + 192);
  uint64_t v13 = *(void *)(v0 + 200);
  uint64_t v14 = *(void *)(v0 + 184);
  if (v10)
  {
    log = v8;
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v24 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v26 = swift_slowAlloc(32LL, -1LL);
    uint64_t v27 = v26;
    *(_DWORD *)uint64_t v15 = 141558531;
    *(void *)(v0 + 120) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2081;
    uint64_t v16 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    *(void *)(v0 + 128) = sub_1003F11D4(v17, v18, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    *(_WORD *)(v15 + 22) = 2114;
    swift_errorRetain(v11);
    uint64_t v19 = _swift_stdlib_bridgeErrorToNSError(v11);
    *(void *)(v0 + 136) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v15 + 24, v15 + 32);
    *uint64_t v24 = v19;
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl( (void *)&_mh_execute_header,  log,  v9,  "Failed to enable notify when found for %{private,mask.hash}s, %{public}@.",  (uint8_t *)v15,  0x20u);
    uint64_t v20 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v24, 1LL, v20);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(void, void))(v12 + 8))(*(void *)(v0 + 200), *(void *)(v0 + 184));
    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  uint64_t v21 = *(void *)(v0 + 232);
  uint64_t v22 = *(void (**)(uint64_t))(v0 + 152);
  swift_errorRetain(v21);
  v22(v21);
  swift_release();
  swift_errorRelease(v21);
  swift_errorRelease(v21);
  swift_task_dealloc(*(void *)(v0 + 200));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A3248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001A3268( a1,  a2,  a3,  a4,  "Command disable notify when found uuid: %@",  42LL,  (uint64_t)&unk_100945B50,  (uint64_t)&unk_1009A49A8);
}

uint64_t sub_1001A3268( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v51 = a4;
  uint64_t v52 = a8;
  uint64_t v48 = a7;
  uint64_t v49 = a3;
  uint64_t v43 = a6;
  uint64_t v44 = a1;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v45 = v10;
  uint64_t v46 = v11;
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v10);
  os_log_type_t v47 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v41 - v14;
  uint64_t v16 = sub_100004AEC(&qword_1009A9BF0);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = static os_log_type_t.default.getter(v17);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v21 = qword_100A2B030;
  uint64_t v22 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v23 = swift_allocObject(v22, 72LL, 7LL);
  *(_OWORD *)(v23 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v24 = UUID.uuidString.getter(v23);
  uint64_t v26 = v25;
  *(void *)(v23 + 56) = &type metadata for String;
  *(void *)(v23 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1000226F4();
  *(void *)(v23 + 32) = v24;
  *(void *)(v23 + 40) = v26;
  os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, a5, v43, 2LL, v23);
  swift_bridgeObjectRelease();
  uint64_t v27 = type metadata accessor for TaskPriority(0LL);
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL);
  uint64_t v42 = v19;
  v28(v19, 1LL, 1LL, v27);
  uint64_t v30 = v45;
  uint64_t v29 = v46;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
  v31(v15, v44, v45);
  uint64_t v32 = v47;
  v31(v47, a2, v30);
  uint64_t v33 = *(unsigned __int8 *)(v29 + 80);
  uint64_t v34 = (v33 + 56) & ~v33;
  uint64_t v35 = (v12 + v33 + v34) & ~v33;
  uint64_t v36 = (char *)swift_allocObject(v48, v35 + v12, v33 | 7);
  *((void *)v36 + 2) = 0LL;
  *((void *)v36 + 3) = 0LL;
  uint64_t v37 = v49;
  *((void *)v36 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v50;
  *((void *)v36 + 5) = v37;
  *((void *)v36 + 6) = v51;
  unint64_t v38 = &v36[v34];
  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
  v39(v38, v15, v30);
  v39(&v36[v35], v32, v30);
  swift_retain();
  swift_retain();
  sub_1003EDB00((uint64_t)v42, v52, (uint64_t)v36);
  return swift_release();
}

uint64_t sub_1001A34E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[21] = a7;
  v8[22] = a8;
  v8[19] = a5;
  v8[20] = a6;
  v8[18] = a4;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  v8[23] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  _BYTE v8[24] = v10;
  v8[25] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1001A3550, 0LL, 0LL);
}

uint64_t sub_1001A3550()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C908 + dword_10099C908);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099C90C);
    *(void *)(v0 + 208) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1001A3650;
    return v4();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1001A3650(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 208LL);
  *(void *)(*(void *)v1 + 216LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001A36AC, 0LL, 0LL);
}

uint64_t sub_1001A36AC()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 216))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc(dword_1009A1524);
    *(void *)(v0 + 22_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1001A382C;
    return sub_1000FF930(*(void *)(v0 + 168), *(void *)(v0 + 176));
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B118 != -1) {
      swift_once(&qword_10099B118, sub_1000F95A0);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A2A1C8);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing NotifyWhenFoundManager.", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    uint64_t v9 = *(void (**)(void))(v0 + 152);

    unint64_t v10 = sub_1000157D0();
    uint64_t v11 = swift_allocError(&type metadata for DaemonError, v10, 0LL, 0LL);
    *uint64_t v12 = 0xD000000000000016LL;
    v12[1] = 0x80000001008553D0LL;
    v9();
    swift_errorRelease(v11);
    swift_task_dealloc(*(void *)(v0 + 200));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1001A382C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 224LL);
  *(void *)(*(void *)v1 + 232LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1001A3890;
  }
  else {
    uint64_t v3 = sub_1001B3628;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1001A3890()
{
  if (qword_10099B7A8 != -1) {
    swift_once(&qword_10099B7A8, sub_100651904);
  }
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v5 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10000A720(v6, (uint64_t)qword_100A2B0C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain(v1);
  uint64_t v7 = swift_errorRetain(v1);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.error.getter(v8);
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = *(void *)(v0 + 232);
  uint64_t v12 = *(void *)(v0 + 192);
  uint64_t v13 = *(void *)(v0 + 200);
  uint64_t v14 = *(void *)(v0 + 184);
  if (v10)
  {
    log = v8;
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v24 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v26 = swift_slowAlloc(32LL, -1LL);
    uint64_t v27 = v26;
    *(_DWORD *)uint64_t v15 = 141558531;
    *(void *)(v0 + 120) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2081;
    uint64_t v16 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    *(void *)(v0 + 128) = sub_1003F11D4(v17, v18, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    *(_WORD *)(v15 + 22) = 2114;
    swift_errorRetain(v11);
    uint64_t v19 = _swift_stdlib_bridgeErrorToNSError(v11);
    *(void *)(v0 + 136) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v15 + 24, v15 + 32);
    *uint64_t v24 = v19;
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl( (void *)&_mh_execute_header,  log,  v9,  "Failed to disable notify when found for %{private,mask.hash}s, %{public}@.",  (uint8_t *)v15,  0x20u);
    uint64_t v20 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v24, 1LL, v20);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(void, void))(v12 + 8))(*(void *)(v0 + 200), *(void *)(v0 + 184));
    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  uint64_t v21 = *(void *)(v0 + 232);
  uint64_t v22 = *(void (**)(uint64_t))(v0 + 152);
  swift_errorRetain(v21);
  v22(v21);
  swift_release();
  swift_errorRelease(v21);
  swift_errorRelease(v21);
  swift_task_dealloc(*(void *)(v0 + 200));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A3BA4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[19] = a8;
  v8[20] = v11;
  v8[17] = a6;
  v8[18] = a7;
  v8[15] = a4;
  v8[16] = a5;
  uint64_t v9 = type metadata accessor for KeySyncMetadata(0LL);
  v8[21] = v9;
  v8[22] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1001A3C0C, 0LL, 0LL);
}

uint64_t sub_1001A3C0C()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C878 + dword_10099C878);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099C87C);
    *(void *)(v0 + 18_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1001A3D0C;
    return v4();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1001A3D0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 184LL);
  *(void *)(*(void *)v1 + 192LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001A3D68, 0LL, 0LL);
}

uint64_t sub_1001A3D68()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 192))
  {
    uint64_t v3 = *(int **)(v0 + 168);
    uint64_t v2 = *(void *)(v0 + 176);
    uint64_t v5 = *(void *)(v0 + 136);
    uint64_t v4 = *(void *)(v0 + 144);
    uint64_t v6 = *(void *)(v0 + 128);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(v2, v6, v7);
    uint64_t v8 = (void *)(v2 + v3[6]);
    v8[3] = &type metadata for PrimaryIndex;
    void v8[4] = sub_1000868E4();
    *uint64_t v8 = v5;
    uint64_t v9 = v2 + v3[7];
    uint64_t v10 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v9, v4, v10);
    *(_BYTE *)(v2 + v3[5]) = 1;
    uint64_t v11 = (void *)swift_task_alloc(dword_1009BCDBC);
    *(void *)(v0 + 200) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_1001A3E8C;
    return sub_1006D55B8(*(void *)(v0 + 176));
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v13 = *(void *)(v0 + 176);
    (*(void (**)(void))(v0 + 152))(0LL);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1001A3E8C()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 200));
  uint64_t v3 = *(void *)(v2 + 176);
  if (v0)
  {
    swift_errorRelease(v0);
    sub_100018C68(v3, type metadata accessor for KeySyncMetadata);
    uint64_t v4 = sub_1001B3630;
  }

  else
  {
    sub_100018C68(v3, type metadata accessor for KeySyncMetadata);
    uint64_t v4 = sub_1001A3F18;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1001A3F18()
{
  uint64_t v1 = *(void *)(v0 + 176);
  (*(void (**)(void))(v0 + 152))(0LL);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A3F60(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  uint64_t result = sub_1001CB944(*a2, v7);
  if ((result & 0x100) == 0)
  {
    uint64_t result = sub_1000BAD04(result, a4);
    if ((result & 1) != 0)
    {
      sub_1001CCEE8(v6, v7);
      uint64_t v10 = v9;
      uint64_t v12 = v11;
      uint64_t v13 = (void *)*a1;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(*a1);
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1004C4FBC(0LL, v13[2] + 1LL, 1, v13);
        uint64_t v13 = (void *)result;
      }

      unint64_t v14 = v13[2];
      unint64_t v15 = v13[3];
      unint64_t v16 = v14 + 1;
      if (v14 >= v15 >> 1)
      {
        unint64_t v18 = v13;
        unint64_t v19 = v13[2];
        uint64_t result = (uint64_t)sub_1004C4FBC((void *)(v15 > 1), v14 + 1, 1, v18);
        unint64_t v14 = v19;
        uint64_t v13 = (void *)result;
      }

      void v13[2] = v16;
      uint64_t v17 = &v13[2 * v14];
      void v17[4] = v10;
      v17[5] = v12;
      *a1 = v13;
    }
  }

  return result;
}

uint64_t sub_1001A4048(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = swift_allocObject(&unk_100945920, 24LL, 7LL);
  swift_weakInit(v9 + 16, v4);
  void v16[2] = v9;
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = a3;
  v16[6] = a4;
  static Transaction.named<A>(_:with:)("requestLiveLocationForFriend", 28LL, 2LL, sub_1001B1B58, v16);
  uint64_t v10 = swift_release();
  os_log_type_t v11 = static os_log_type_t.default.getter(v10);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v12 = (os_log_s *)qword_100A2B008;
  uint64_t result = os_log_type_enabled((os_log_t)qword_100A2B008, v11);
  if ((_DWORD)result)
  {
    swift_bridgeObjectRetain_n(a2, 2LL);
    unint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    v18[0] = v15;
    *(_DWORD *)unint64_t v14 = 136315138;
    swift_bridgeObjectRetain(a2);
    uint64_t v17 = sub_1003F11D4(a1, a2, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, v18, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v12,  v11,  "requestLiveLocation(forFriend:completion:) friend: %s",  v14,  0xCu);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    return swift_slowDealloc(v14, -1LL, -1LL);
  }

  return result;
}

uint64_t sub_1001A4238(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorByBeaconIdentifier);
  swift_beginAccess( a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorByBeaconIdentifier,  v13,  33LL,  0LL);
  swift_bridgeObjectRetain(*v3);
  unint64_t v4 = sub_10030D124(a2);
  char v6 = v5;
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v8 = *v3;
    uint64_t v12 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100064138();
      uint64_t v8 = v12;
    }

    uint64_t v9 = *(void *)(v8 + 48);
    uint64_t v10 = type metadata accessor for UUID(0LL);
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))( v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * v4,  v10);
    sub_100058B00(v4, v12);
    *uint64_t v3 = v12;
    swift_bridgeObjectRelease();
  }

  swift_endAccess(v13);
  return swift_release();
}

uint64_t sub_1001A4344(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, void), uint64_t a5)
{
  uint64_t v70 = a4;
  uint64_t v71 = a5;
  uint64_t v69 = type metadata accessor for BeaconSharingSessionContext(0LL);
  __chkstk_darwin(v69);
  uint64_t v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009A48E8);
  uint64_t v64 = *(void *)(v10 - 8);
  uint64_t v65 = v10;
  __chkstk_darwin(v10);
  uint64_t v63 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009A48F0);
  uint64_t v67 = *(void *)(v12 - 8);
  uint64_t v68 = v12;
  __chkstk_darwin(v12);
  uint64_t v66 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v72 = *(void *)(v14 - 8);
  uint64_t v73 = (char *)v14;
  __chkstk_darwin(v14);
  unint64_t v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009AE470);
  __chkstk_darwin(v17);
  unint64_t v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v75, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v61 = a1;
    uint64_t v25 = result;
    swift_retain();
    uint64_t v60 = a3;
    sub_100506334(a3, (uint64_t)v19);
    swift_release();
    int v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1LL, v20);
    uint64_t v62 = v25;
    if (v26 == 1)
    {
      sub_100015794((uint64_t)v19, (uint64_t *)&unk_1009AE470);
      if (qword_10099B178 != -1) {
        swift_once(&qword_10099B178, sub_100189C64);
      }
      uint64_t v27 = type metadata accessor for Logger(0LL);
      sub_10000A720(v27, (uint64_t)qword_100A2A290);
      uint64_t v29 = v72;
      uint64_t v28 = (uint64_t)v73;
      uint64_t v30 = (*(uint64_t (**)(char *, uint64_t, char *))(v72 + 16))(v16, v60, v73);
      uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
      os_log_type_t v32 = static os_log_type_t.error.getter(v31);
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v34 = swift_slowAlloc(32LL, -1LL);
        uint64_t v76 = v34;
        *(_DWORD *)uint64_t v33 = 136315138;
        uint64_t v69 = (uint64_t)(v33 + 4);
        uint64_t v35 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter(v28, v35);
        uint64_t v74 = sub_1003F11D4(v36, v37, &v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75, v69, v33 + 12);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v28);
        _os_log_impl( (void *)&_mh_execute_header,  v31,  v32,  "requestLiveLocation could not find SharedBeaconRecord for: %s",  v33,  0xCu);
        swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v34, -1LL, -1LL);
        swift_slowDealloc(v33, -1LL, -1LL);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v28);
      }

      v70(0LL, 0LL);
      return swift_release();
    }

    else
    {
      uint64_t v38 = sub_10002218C((uint64_t)v19, (uint64_t)v23, type metadata accessor for SharedBeaconRecord);
      uint64_t result = Transaction.subscriptionCleaner.getter(v38);
      uint64_t v39 = *(void *)(v25 + 40);
      if (v39)
      {
        uint64_t v40 = result;
        (*(void (**)(char *, char *, char *))(v72 + 16))(v9, &v23[*(int *)(v20 + 20)], v73);
        uint64_t result = swift_storeEnumTagMultiPayload(v9, v69, 2LL);
        uint64_t v41 = *(void *)(v39 + 352);
        uint64_t v73 = v23;
        if (v41)
        {
          swift_retain();
          swift_retain();
          uint64_t v42 = dispatch thunk of AsynchronousCache.value(for:)(v9);
          swift_release();
          uint64_t v76 = v42;
          uint64_t v43 = sub_100004AEC(&qword_1009A48F8);
          uint64_t v44 = sub_1000372EC( &qword_1009A4900,  &qword_1009A48F8,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
          uint64_t v45 = Publisher.eraseToAnyPublisher()(v43, v44);
          swift_release();
          sub_100018C68((uint64_t)v9, type metadata accessor for BeaconSharingSessionContext);
          swift_release();
          uint64_t v76 = v45;
          uint64_t v46 = sub_100004AEC(&qword_1009A4908);
          os_log_type_t v47 = v63;
          Publisher.map<A>(_:)(sub_1001A49BC, 0LL, v43, v46, v44);
          swift_release();
          uint64_t v48 = sub_100004AEC(&qword_1009A4910);
          uint64_t v49 = sub_1000372EC( &qword_1009A4918,  &qword_1009A48E8,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
          uint64_t v50 = sub_1000372EC(&qword_1009A4920, &qword_1009A4910, (uint64_t)&protocol conformance descriptor for Just<A>);
          uint64_t v51 = v65;
          uint64_t v52 = v66;
          Publisher.catch<A>(_:)(sub_1001A49CC, 0LL, v65, v48, v49, v50);
          (*(void (**)(char *, uint64_t))(v64 + 8))(v47, v51);
          uint64_t v53 = (void *)swift_allocObject(&unk_100945998, 48LL, 7LL);
          uint64_t v54 = v70;
          uint64_t v55 = v71;
          v53[2] = v40;
          v53[3] = v54;
          uint64_t v56 = v61;
          v53[4] = v55;
          v53[5] = v56;
          uint64_t v57 = sub_1000372EC( &qword_1009A4928,  &qword_1009A48F0,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
          swift_unknownObjectRetain(v40);
          swift_retain();
          swift_retain();
          uint64_t v58 = v68;
          Publisher<>.sink(receiveValue:)(sub_1001B1BF8, v53, v68, v57);
          swift_release();
          (*(void (**)(char *, uint64_t))(v67 + 8))(v52, v58);
          AnyCancellable.store(in:)(v56);
          swift_unknownObjectRelease(v40);
          swift_release();
          swift_release();
          return sub_100018C68((uint64_t)v73, type metadata accessor for SharedBeaconRecord);
        }
      }

      else
      {
        __break(1u);
      }

      __break(1u);
    }
  }

  return result;
}

uint64_t sub_1001A49BC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(void *)a2 = v2;
  *(_BYTE *)(a2 + 8) = 0;
  return swift_retain(v2);
}

void sub_1001A49D0(uint64_t a1, uint64_t a2, os_log_s *a3, uint64_t a4, uint64_t a5)
{
  os_log_type_t v47 = a3;
  uint64_t v9 = sub_100004AEC(&qword_1009A4930);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_1009A4938);
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v17 = *(void *)a1;
  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
  {
    uint64_t v45 = v14;
    uint64_t v46 = a5;
    uint64_t v48 = *(void *)(v17 + qword_100A2A288);
    sub_1001B1B94(v17, 0);
    swift_retain();
    uint64_t v30 = sub_100004AEC(&qword_1009A4940);
    uint64_t v44 = a2;
    uint64_t v31 = v30;
    uint64_t v32 = sub_100004AEC(&qword_1009A4948);
    uint64_t v43 = a4;
    uint64_t v33 = v32;
    uint64_t v34 = sub_1000372EC( &qword_1009A4950,  &qword_1009A4940,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher.map<A>(_:)(sub_1001A4E50, 0LL, v31, v33, v34);
    swift_release();
    uint64_t v35 = sub_100004AEC(&qword_1009A4958);
    uint64_t v36 = sub_1000372EC( &qword_1009A4960,  &qword_1009A4930,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    uint64_t v37 = sub_1000372EC(&qword_1009A4968, &qword_1009A4958, (uint64_t)&protocol conformance descriptor for Just<A>);
    Publisher.catch<A>(_:)(sub_1001A4E54, 0LL, v9, v35, v36, v37);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v38 = (void *)swift_allocObject(&unk_1009459C0, 40LL, 7LL);
    uint64_t v40 = v43;
    uint64_t v39 = v44;
    uint64_t v41 = v47;
    _OWORD v38[2] = v44;
    v38[3] = v41;
    v38[4] = v40;
    uint64_t v42 = sub_1000372EC( &qword_1009A4970,  &qword_1009A4938,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
    swift_unknownObjectRetain(v39);
    swift_retain();
    Publisher<>.sink(receiveValue:)(sub_1001B1C18, v38, v13, v42);
    swift_release();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v16, v13);
    AnyCancellable.store(in:)(v46);
    swift_release();
    unint64_t v28 = v17;
    char v29 = 0;
    goto LABEL_7;
  }

  sub_1000A4D58(*(void *)a1);
  if (qword_10099B178 != -1) {
    swift_once(&qword_10099B178, sub_100189C64);
  }
  uint64_t v18 = type metadata accessor for Logger(0LL);
  sub_10000A720(v18, (uint64_t)qword_100A2A290);
  sub_1000A4D58(v17);
  unint64_t v19 = sub_1000A4D58(v17);
  os_log_type_t v47 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v20 = static os_log_type_t.error.getter(v47);
  if (os_log_type_enabled(v47, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v22 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v21 = 138543362;
    unint64_t v23 = sub_100044AD4();
    uint64_t v24 = swift_allocError(&type metadata for MessagingError, v23, 0LL, 0LL);
    *uint64_t v25 = v17;
    sub_1000A4D58(v17);
    uint64_t v26 = _swift_stdlib_bridgeErrorToNSError(v24);
    uint64_t v48 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v21 + 4, v21 + 12);
    *uint64_t v22 = v26;
    sub_1001B1B88(v17, 1);
    sub_1001B1B88(v17, 1);
    _os_log_impl((void *)&_mh_execute_header, v47, v20, "ERROR retrieving messagingSession: %{public}@", v21, 0xCu);
    uint64_t v27 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v22, 1LL, v27);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);

    unint64_t v28 = v17;
    char v29 = 1;
LABEL_7:
    sub_1001B1B88(v28, v29);
    return;
  }

  sub_1001B1B88(v17, 1);
  sub_1001B1B88(v17, 1);
  sub_1000A4D68(v17);
}

void sub_1001A4E58(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5 = sub_100004AEC(&qword_1009A4978);
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009A4948);
  __chkstk_darwin(v8);
  uint64_t v10 = (unint64_t *)((char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v10, &qword_1009A4948);
  if (swift_getEnumCaseMultiPayload(v10, v8) == 1)
  {
    unint64_t v11 = *v10;
    if (qword_10099B178 != -1) {
      swift_once(&qword_10099B178, sub_100189C64);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    sub_10000A720(v12, (uint64_t)qword_100A2A290);
    sub_1000A4D58(v11);
    unint64_t v13 = sub_1000A4D58(v11);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      unint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      unint64_t v17 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)unint64_t v16 = 138543362;
      unint64_t v18 = sub_100044AD4();
      uint64_t v19 = swift_allocError(&type metadata for MessagingError, v18, 0LL, 0LL);
      unint64_t *v20 = v11;
      sub_1000A4D58(v11);
      uint64_t v21 = _swift_stdlib_bridgeErrorToNSError(v19);
      uint64_t v25 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v16 + 4, v16 + 12);
      *unint64_t v17 = v21;
      sub_1000A4D68(v11);
      sub_1000A4D68(v11);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "TRACE received error: %{public}@", v16, 0xCu);
      uint64_t v22 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v17, 1LL, v22);
      swift_slowDealloc(v17, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);

      sub_1000A4D68(v11);
    }

    else
    {
      sub_1000A4D68(v11);
      sub_1000A4D68(v11);
      sub_1000A4D68(v11);
    }
  }

  else
  {
    sub_100015750((uint64_t)v10, (uint64_t)v7, &qword_1009A4978);
    uint64_t v23 = sub_10058001C();
    a3(v23);
    swift_bridgeObjectRelease();
    sub_100015794((uint64_t)v7, &qword_1009A4978);
  }

uint64_t sub_1001A52B4( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(void, void), uint64_t a6)
{
  uint64_t v59 = a1;
  uint64_t v11 = type metadata accessor for BeaconSharingSessionContext(0LL);
  __chkstk_darwin(v11);
  unint64_t v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100004AEC(&qword_1009A48E8);
  uint64_t v55 = *(void *)(v14 - 8);
  uint64_t v56 = v14;
  __chkstk_darwin(v14);
  unint64_t v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100004AEC(&qword_1009A48F0);
  uint64_t v58 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v57 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v62, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  uint64_t v60 = result;
  if (result)
  {
    uint64_t v52 = v17;
    uint64_t v53 = a5;
    uint64_t v54 = a6;
    swift_bridgeObjectRetain(a4);
    _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(a3, a4);
    if (v22)
    {
      char v23 = v20;
      uint64_t v24 = v21;
      uint64_t v25 = v22;
      uint64_t result = Transaction.subscriptionCleaner.getter(v20);
      uint64_t v51 = result;
      uint64_t v26 = *(void *)(v60 + 40);
      if (v26)
      {
        char *v13 = v23;
        *((void *)v13 + 1) = v24;
        *((void *)v13 + 2) = v25;
        uint64_t result = swift_storeEnumTagMultiPayload(v13, v11, 1LL);
        if (*(void *)(v26 + 352))
        {
          swift_retain();
          swift_bridgeObjectRetain(v25);
          swift_retain();
          uint64_t v27 = dispatch thunk of AsynchronousCache.value(for:)(v13);
          swift_release();
          uint64_t v63 = v27;
          uint64_t v28 = sub_100004AEC(&qword_1009A48F8);
          uint64_t v29 = sub_1000372EC( &qword_1009A4900,  &qword_1009A48F8,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
          uint64_t v30 = Publisher.eraseToAnyPublisher()(v28, v29);
          swift_release();
          sub_100018C68((uint64_t)v13, type metadata accessor for BeaconSharingSessionContext);
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t v63 = v30;
          uint64_t v31 = sub_100004AEC(&qword_1009A4908);
          Publisher.map<A>(_:)(sub_1001B36C0, 0LL, v28, v31, v29);
          swift_release();
          uint64_t v32 = sub_100004AEC(&qword_1009A4910);
          uint64_t v33 = sub_1000372EC( &qword_1009A4918,  &qword_1009A48E8,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
          uint64_t v34 = sub_1000372EC(&qword_1009A4920, &qword_1009A4910, (uint64_t)&protocol conformance descriptor for Just<A>);
          uint64_t v36 = v56;
          uint64_t v35 = v57;
          Publisher.catch<A>(_:)(sub_1001A49CC, 0LL, v56, v32, v33, v34);
          (*(void (**)(char *, uint64_t))(v55 + 8))(v16, v36);
          uint64_t v37 = (void *)swift_allocObject(&unk_100945948, 48LL, 7LL);
          uint64_t v38 = v51;
          uint64_t v39 = v53;
          uint64_t v40 = v54;
          void v37[2] = v51;
          void v37[3] = v39;
          uint64_t v41 = v59;
          v37[4] = v40;
          v37[5] = v41;
          uint64_t v42 = sub_1000372EC( &qword_1009A4928,  &qword_1009A48F0,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
          swift_unknownObjectRetain(v38);
          swift_retain();
          swift_retain();
          uint64_t v43 = v52;
          Publisher<>.sink(receiveValue:)(sub_1001B1B7C, v37, v52, v42);
          swift_release();
          (*(void (**)(char *, uint64_t))(v58 + 8))(v35, v43);
          AnyCancellable.store(in:)(v41);
          swift_release();
          swift_unknownObjectRelease(v38);
          return swift_release();
        }
      }

      else
      {
        __break(1u);
      }

      __break(1u);
      return result;
    }

    if (qword_10099B178 != -1) {
      swift_once(&qword_10099B178, sub_100189C64);
    }
    uint64_t v44 = type metadata accessor for Logger(0LL);
    sub_10000A720(v44, (uint64_t)qword_100A2A290);
    swift_bridgeObjectRetain_n(a4, 2LL);
    uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
    os_log_type_t v47 = static os_log_type_t.error.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v49 = swift_slowAlloc(32LL, -1LL);
      uint64_t v63 = v49;
      *(_DWORD *)uint64_t v48 = 136315138;
      swift_bridgeObjectRetain(a4);
      uint64_t v61 = sub_1003F11D4(a3, a4, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62, v48 + 4, v48 + 12);
      swift_bridgeObjectRelease_n(a4, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v46,  v47,  "requestLiveLocation could not create MessagingDestination for: %s",  v48,  0xCu);
      swift_arrayDestroy(v49, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1LL, -1LL);
      swift_slowDealloc(v48, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a4, 2LL);
    }

    v53(0LL, 0LL);
    return swift_release();
  }

  return result;
}

uint64_t sub_1001A57F4(unint64_t *a1)
{
  unint64_t v3 = *a1;
  char v4 = 1;
  sub_1000A4D58(v3);
  uint64_t v1 = sub_100004AEC(&qword_1009A4908);
  return Just.init(_:)(&v3, v1);
}

unint64_t sub_1001A5848( uint64_t a1, uint64_t a2, void (*a3)(void, void), uint64_t a4, uint64_t a5)
{
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v8 = sub_100004AEC(&qword_1009A4930);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009A4938);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v16 = *(void *)a1;
  LODWORD(v17) = *(unsigned __int8 *)(a1 + 8);
  if ((v17 & 1) != 0)
  {
    sub_1000A4D58(*(void *)a1);
    if (qword_10099B178 != -1) {
      swift_once(&qword_10099B178, sub_100189C64);
    }
    uint64_t v18 = type metadata accessor for Logger(0LL);
    sub_10000A720(v18, (uint64_t)qword_100A2A290);
    sub_1000A4D58(v16);
    unint64_t v19 = sub_1000A4D58(v16);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      char v23 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v22 = 138543362;
      unint64_t v24 = sub_100044AD4();
      uint64_t v25 = swift_allocError(&type metadata for MessagingError, v24, 0LL, 0LL);
      *uint64_t v26 = v16;
      sub_1000A4D58(v16);
      uint64_t v27 = _swift_stdlib_bridgeErrorToNSError(v25);
      uint64_t v49 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v22 + 4, v22 + 12);
      *char v23 = v27;
      sub_1001B1B88(v16, 1);
      sub_1001B1B88(v16, 1);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "ERROR retrieving messagingSession: %{public}@", v22, 0xCu);
      uint64_t v28 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v23, 1LL, v28);
      swift_slowDealloc(v23, -1LL, -1LL);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    else
    {
      sub_1001B1B88(v16, 1);
      sub_1001B1B88(v16, 1);
    }

    v48(0LL, 0LL);
  }

  else
  {
    uint64_t v43 = a4;
    uint64_t v49 = *(void *)(v16 + qword_100A2A288);
    uint64_t v45 = v13;
    sub_1001B1B94(v16, 0);
    swift_retain();
    uint64_t v29 = sub_100004AEC(&qword_1009A4940);
    uint64_t v44 = a5;
    uint64_t v30 = v29;
    uint64_t v31 = sub_100004AEC(&qword_1009A4948);
    int v46 = v17;
    uint64_t v32 = v31;
    uint64_t v33 = sub_1000372EC( &qword_1009A4950,  &qword_1009A4940,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher.map<A>(_:)(sub_1001A4E50, 0LL, v30, v32, v33);
    swift_release();
    uint64_t v34 = sub_100004AEC(&qword_1009A4958);
    uint64_t v17 = sub_1000372EC( &qword_1009A4960,  &qword_1009A4930,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    uint64_t v35 = sub_1000372EC(&qword_1009A4968, &qword_1009A4958, (uint64_t)&protocol conformance descriptor for Just<A>);
    uint64_t v36 = v17;
    LOBYTE(v17) = v46;
    Publisher.catch<A>(_:)(sub_1001A4E54, 0LL, v8, v34, v36, v35);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v37 = (void *)swift_allocObject(&unk_100945970, 40LL, 7LL);
    uint64_t v39 = v47;
    uint64_t v38 = v48;
    void v37[2] = v47;
    void v37[3] = v38;
    v37[4] = v43;
    uint64_t v40 = sub_1000372EC( &qword_1009A4970,  &qword_1009A4938,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
    swift_unknownObjectRetain(v39);
    swift_retain();
    Publisher<>.sink(receiveValue:)(sub_1001B1BB4, v37, v12, v40);
    swift_release();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v15, v12);
    AnyCancellable.store(in:)(v44);
    swift_release();
  }

  return sub_1001B1B88(v16, v17);
}

uint64_t sub_1001A5CBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_100004AEC(&qword_1009A4948);
  return swift_storeEnumTagMultiPayload(a2, v3, 0LL);
}

uint64_t sub_1001A5D00(unint64_t *a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009A4948);
  __chkstk_darwin(v2);
  char v4 = (unint64_t *)((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unint64_t v5 = *a1;
  unint64_t *v4 = v5;
  swift_storeEnumTagMultiPayload(v4, v2, 1LL);
  sub_1000A4D58(v5);
  return Just.init(_:)(v4, v2);
}

unint64_t sub_1001A5D98(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v5 = sub_100004AEC(&qword_1009A4978);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009A4948);
  __chkstk_darwin(v8);
  uint64_t v10 = (unint64_t *)((char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v10, &qword_1009A4948);
  if (swift_getEnumCaseMultiPayload(v10, v8) == 1)
  {
    unint64_t v11 = *v10;
    if (qword_10099B178 != -1) {
      swift_once(&qword_10099B178, sub_100189C64);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    sub_10000A720(v12, (uint64_t)qword_100A2A290);
    sub_1000A4D58(v11);
    unint64_t v13 = sub_1000A4D58(v11);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      unint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v17 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)unint64_t v16 = 138543362;
      unint64_t v18 = sub_100044AD4();
      uint64_t v19 = swift_allocError(&type metadata for MessagingError, v18, 0LL, 0LL);
      unint64_t *v20 = v11;
      sub_1000A4D58(v11);
      uint64_t v21 = _swift_stdlib_bridgeErrorToNSError(v19);
      uint64_t v26 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v16 + 4, v16 + 12);
      *uint64_t v17 = v21;
      sub_1000A4D68(v11);
      sub_1000A4D68(v11);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "readMessagePublisher error: %{public}@", v16, 0xCu);
      uint64_t v22 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v17, 1LL, v22);
      swift_slowDealloc(v17, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    else
    {
      sub_1000A4D68(v11);
      sub_1000A4D68(v11);
    }

    ((void (*)(void, void))a3)(0LL, 0LL);
    return sub_1000A4D68(v11);
  }

  else
  {
    sub_100015750((uint64_t)v10, (uint64_t)v7, &qword_1009A4978);
    uint64_t v23 = sub_10058001C();
    a3(v23);
    swift_bridgeObjectRelease();
    return sub_100015794((uint64_t)v7, &qword_1009A4978);
  }

uint64_t sub_1001A6210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 120) = a4;
  return swift_task_switch(sub_1001A6228, 0LL, 0LL);
}

uint64_t sub_1001A6228()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C8F0 + dword_10099C8F0);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C8F4);
    *(void *)(v0 + 128) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1001A6314;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1001A6314(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 128LL);
  *(void *)(*(void *)v1 + 136LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001A6370, 0LL, 0LL);
}

uint64_t sub_1001A6370()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 136))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc(dword_1009AE1CC);
    *(void *)(v0 + 14_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1001A63E4;
    return sub_10043DFEC(*(void *)(v0 + 120));
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1001A63E4()
{
  return swift_task_switch(sub_1001A6438, 0LL, 0LL);
}

uint64_t sub_1001A6438()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Int sub_1001A6468(void *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for BeaconEstimatedLocation(0LL) - 8);
  uint64_t v3 = (void *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v3 = (void *)sub_1003D4A00(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_1001A6F7C(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_1001A64E8()
{
  if ((*(_BYTE *)(v0 + 8) & 1) == 0)
  {
    uint64_t v1 = *(void *)(v0 + 16);
    uint64_t v6 = v1;
    if (*(void *)(v1 + 16) == 1LL)
    {
      swift_bridgeObjectRetain(v1);
      sub_1001B1998(&v6);
      sub_1001B17A0((void *)v0);
      if (*(_BYTE *)(v1 + 32))
      {
        if (*(_BYTE *)(v1 + 32) == 1)
        {
          char v2 = 1;
LABEL_10:
          swift_bridgeObjectRelease();
          sub_1001B19C0(&v6);
          sub_1001B19C0(&v6);
          sub_1001B19E8((void *)v0);
          return v2 & 1;
        }

        unint64_t v3 = 0xEF736E6F69746163LL;
        uint64_t v4 = 0x6F4C657275636553LL;
      }

      else
      {
        unint64_t v3 = 0xE700000000000000LL;
        uint64_t v4 = 0x7972616D697250LL;
      }

      char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v3, 0x7261646E6F636553LL, 0xE900000000000079LL, 0LL);
      goto LABEL_10;
    }
  }

  char v2 = 0;
  return v2 & 1;
}

uint64_t sub_1001A65F0()
{
  v1._object = (void *)0x8000000100857060LL;
  v1._countAndFlagsBits = 0xD000000000000016LL;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._object = (void *)0xEC000000203A6B73LL;
  v3._countAndFlagsBits = 0x69446D6F7266202CLL;
  String.append(_:)(v3);
  if ((*(_BYTE *)(v0 + 8) & 1) != 0) {
    uint64_t v4 = 1702195828LL;
  }
  else {
    uint64_t v4 = 0x65736C6166LL;
  }
  if ((*(_BYTE *)(v0 + 8) & 1) != 0) {
    unint64_t v5 = 0xE400000000000000LL;
  }
  else {
    unint64_t v5 = 0xE500000000000000LL;
  }
  unint64_t v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x6E6575716573202CLL;
  v7._object = (void *)0xED0000203A736563LL;
  String.append(_:)(v7);
  swift_bridgeObjectRetain(*(void *)(v0 + 16));
  v9._countAndFlagsBits = Array.description.getter(v8, &type metadata for BeaconKeyManager.KeySequence);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 8236LL;
  v10._object = (void *)0xE200000000000000LL;
  String.append(_:)(v10);
  _StringGuts.grow(_:)(71LL);
  v11._countAndFlagsBits = 0x6974737561687865LL;
  v11._object = (void *)0xEC000000203A6576LL;
  String.append(_:)(v11);
  char v12 = sub_1001A64E8();
  BOOL v13 = (v12 & 1) == 0;
  if ((v12 & 1) != 0) {
    uint64_t v14 = 1702195828LL;
  }
  else {
    uint64_t v14 = 0x65736C6166LL;
  }
  if (v13) {
    unint64_t v15 = 0xE500000000000000LL;
  }
  else {
    unint64_t v15 = 0xE400000000000000LL;
  }
  unint64_t v16 = v15;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  v17._object = (void *)0x8000000100857080LL;
  v17._countAndFlagsBits = 0xD000000000000016LL;
  String.append(_:)(v17);
  v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 0xD00000000000001FLL;
  v19._object = (void *)0x80000001008570A0LL;
  String.append(_:)(v19);
  if ((*(_BYTE *)(v0 + 56) & 1) != 0) {
    uint64_t v20 = 1702195828LL;
  }
  else {
    uint64_t v20 = 0x65736C6166LL;
  }
  if ((*(_BYTE *)(v0 + 56) & 1) != 0) {
    unint64_t v21 = 0xE400000000000000LL;
  }
  else {
    unint64_t v21 = 0xE500000000000000LL;
  }
  unint64_t v22 = v21;
  String.append(_:)(*(Swift::String *)&v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(0xE000000000000000LL);
  v23._countAndFlagsBits = 0LL;
  v23._object = (void *)0xE000000000000000LL;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0LL;
}

void sub_1001A6900(void *a1, void *a2)
{
  uint64_t v4 = sub_100663C28(a1);
  if (v4)
  {
    void v14[2] = v2;
    v14[3] = __chkstk_darwin(v4);
    v14[4] = a2;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_1001B1ACC,  v14,  v5,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
    swift_release();
  }

  else
  {
    if (qword_10099B328 != -1) {
      swift_once(&qword_10099B328, sub_10035A0D4);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    sub_10000A720(v6, (uint64_t)qword_100A2A730);
    sub_1001B142C(a2);
    Swift::String v7 = sub_1001B142C(a2);
    unint64_t v15 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v8 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v8))
    {
      uint64_t v9 = swift_slowAlloc(22LL, -1LL);
      uint64_t v10 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v9 = 141558275;
      uint64_t v16 = 1752392040LL;
      uint64_t v17 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v9 + 4, v9 + 12);
      *(_WORD *)(v9 + 12) = 2081;
      uint64_t v11 = a2[6];
      if (v11)
      {
        uint64_t v12 = a2[5];
        unint64_t v13 = a2[6];
      }

      else
      {
        unint64_t v13 = 0xE700000000000000LL;
        uint64_t v12 = 0x6E776F6E6B6E75LL;
      }

      swift_bridgeObjectRetain(v11);
      uint64_t v16 = sub_1003F11D4(v12, v13, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v9 + 14, v9 + 22);
      swift_bridgeObjectRelease();
      sub_1001B1498(a2);
      sub_1001B1498(a2);
      _os_log_impl( (void *)&_mh_execute_header,  v15,  v8,  "Failed to store wrapped connection for context %{private,mask.hash}s.",  (uint8_t *)v9,  0x16u);
      swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1LL, -1LL);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    else
    {
      sub_1001B1498(a2);
      sub_1001B1498(a2);
    }
  }

void sub_1001A6B74(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v30 = *a3;
  uint64_t v6 = *((void *)a3 + 5);
  uint64_t v34 = *((void *)a3 + 6);
  uint64_t v35 = v6;
  unsigned __int8 v7 = a3[56];
  LOBYTE(v6) = a3[57];
  __int128 v33 = *((_OWORD *)a3 + 4);
  uint64_t v32 = *((void *)a3 + 10);
  int v31 = a3[88];
  char v8 = v7 & 1;
  int v29 = v6 & 1;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v28 = *(_OWORD *)(a3 + 8);
  __int128 v27 = *(_OWORD *)(a3 + 24);
  XPCSession.identifier.getter(v11);
  swift_beginAccess(a1 + 80, v47, 33LL, 0LL);
  swift_retain();
  sub_1001B142C(a3);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + 80));
  uint64_t v48 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0x8000000000000000LL;
  uint64_t v36 = a2;
  char v37 = v30;
  __int128 v38 = v28;
  __int128 v39 = v27;
  uint64_t v40 = v35;
  uint64_t v41 = v34;
  char v42 = v8;
  char v43 = v29;
  __int128 v44 = v33;
  uint64_t v45 = v32;
  char v46 = v31 & 1;
  sub_10005CC40((uint64_t)&v36, (uint64_t)v13, isUniquelyReferenced_nonNull_native);
  *(void *)(a1 + 80) = v48;
  swift_bridgeObjectRelease();
  unint64_t v15 = *(void (**)(char *, uint64_t))(v10 + 8);
  v15(v13, v9);
  swift_endAccess(v47);
  if (qword_10099B328 != -1) {
    swift_once(&qword_10099B328, sub_10035A0D4);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  sub_10000A720(v16, (uint64_t)qword_100A2A730);
  uint64_t v17 = swift_retain_n(a2, 2LL);
  Swift::String v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc(22LL, -1LL);
    uint64_t v35 = swift_slowAlloc(32LL, -1LL);
    v47[0] = v35;
    *(_DWORD *)uint64_t v20 = 141558275;
    uint64_t v48 = 1752392040LL;
    *(void *)&__int128 v33 = v15;
    uint64_t v21 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2081;
    uint64_t v34 = v20 + 14;
    XPCSession.identifier.getter(v21);
    uint64_t v22 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v9, v22);
    unint64_t v25 = v24;
    ((void (*)(char *, uint64_t))v33)(v13, v9);
    uint64_t v48 = sub_1003F11D4(v23, v25, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v34, v20 + 22);
    swift_release_n(a2, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "Added new location fetch subscription %{private,mask.hash}s.",  (uint8_t *)v20,  0x16u);
    uint64_t v26 = v35;
    swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  else
  {

    swift_release_n(a2, 2LL);
  }

uint64_t sub_1001A6F34@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100012ED8(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

Swift::Int sub_1001A6F7C(void *a1)
{
  uint64_t v134 = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v127 = *(void *)(v134 - 8);
  uint64_t v3 = __chkstk_darwin(v134);
  uint64_t v124 = (uint64_t)&v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v135 = (uint64_t)&v120 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v132 = (uint64_t)&v120 - v8;
  __chkstk_darwin(v7);
  uint64_t v131 = (uint64_t)&v120 - v9;
  Swift::Int v10 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v10);
  if (result >= v10)
  {
    if (v10 < 0) {
      goto LABEL_139;
    }
    if (v10) {
      return sub_1001A7978(0LL, v10, 1LL, a1);
    }
    return result;
  }

  if (v10 >= 0) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v10 + 1;
  }
  if (v10 < -1) {
    goto LABEL_147;
  }
  uint64_t v133 = a1;
  Swift::Int v122 = result;
  uint64_t v128 = v1;
  if (v10 < 2)
  {
    uint64_t v16 = (char *)_swiftEmptyArrayStorage;
    unint64_t v126 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v127 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80));
    uint64_t v121 = _swiftEmptyArrayStorage;
    if (v10 != 1)
    {
      unint64_t v18 = _swiftEmptyArrayStorage[2];
LABEL_105:
      uint64_t v112 = v16;
      if (v18 >= 2)
      {
        uint64_t v113 = *v133;
        do
        {
          unint64_t v114 = v18 - 2;
          if (v18 < 2) {
            goto LABEL_134;
          }
          if (!v113) {
            goto LABEL_146;
          }
          uint64_t v115 = *(void *)&v112[16 * v114 + 32];
          uint64_t v116 = *(void *)&v112[16 * v18 + 24];
          uint64_t v117 = v128;
          sub_1001A7BB4( v113 + *(void *)(v127 + 72) * v115,  v113 + *(void *)(v127 + 72) * *(void *)&v112[16 * v18 + 16],  v113 + *(void *)(v127 + 72) * v116,  v126);
          uint64_t v128 = v117;
          if (v117) {
            break;
          }
          if (v116 < v115) {
            goto LABEL_135;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v112) & 1) == 0) {
            uint64_t v112 = sub_1003CBA90((uint64_t)v112);
          }
          if (v114 >= *((void *)v112 + 2)) {
            goto LABEL_136;
          }
          uint64_t v118 = &v112[16 * v114 + 32];
          *(void *)uint64_t v118 = v115;
          *((void *)v118 + 1) = v116;
          unint64_t v119 = *((void *)v112 + 2);
          if (v18 > v119) {
            goto LABEL_137;
          }
          memmove(&v112[16 * v18 + 16], &v112[16 * v18 + 32], 16 * (v119 - v18));
          *((void *)v112 + 2) = v119 - 1;
          unint64_t v18 = v119 - 1;
        }

        while (v119 > 2);
      }

uint64_t sub_1001A7978(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v26 = a1;
  uint64_t v30 = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v7 = __chkstk_darwin(v30);
  uint64_t v31 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v27 = (uint64_t)&v24 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v24 - v13;
  uint64_t v29 = a3;
  uint64_t v25 = a2;
  if (a3 != a2)
  {
    uint64_t v15 = *(void *)(v12 + 72);
    uint64_t v33 = v15 * (v29 - 1);
    uint64_t v28 = v15;
    uint64_t v32 = v15 * v29;
LABEL_5:
    uint64_t v16 = 0LL;
    uint64_t v17 = v26;
    while (1)
    {
      uint64_t v18 = *a4;
      sub_10001DC4C(v32 + v16 + *a4, (uint64_t)v14, type metadata accessor for BeaconEstimatedLocation);
      uint64_t v19 = v27;
      sub_10001DC4C(v33 + v16 + v18, v27, type metadata accessor for BeaconEstimatedLocation);
      LOBYTE(v18) = static Date.< infix(_:_:)(&v14[*(int *)(v30 + 40)], v19 + *(int *)(v30 + 40));
      sub_100018C68(v19, type metadata accessor for BeaconEstimatedLocation);
      uint64_t result = sub_100018C68((uint64_t)v14, type metadata accessor for BeaconEstimatedLocation);
      if ((v18 & 1) == 0)
      {
LABEL_4:
        v33 += v28;
        v32 += v28;
        if (++v29 == v25) {
          return result;
        }
        goto LABEL_5;
      }

      uint64_t v20 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v21 = a4;
      uint64_t v22 = v20 + v32 + v16;
      uint64_t v23 = v20 + v33 + v16;
      sub_10002218C(v22, v31, type metadata accessor for BeaconEstimatedLocation);
      swift_arrayInitWithTakeFrontToBack(v22, v23, 1LL, v30);
      uint64_t result = sub_10002218C(v31, v23, type metadata accessor for BeaconEstimatedLocation);
      v16 -= v28;
      ++v17;
      a4 = v21;
      if (v29 == v17) {
        goto LABEL_4;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_1001A7BB4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v45 = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v8 = __chkstk_darwin(v45);
  uint64_t v44 = (uint64_t)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v41 - v10;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }

  if (a2 - a1 == 0x8000000000000000LL && v13 == -1) {
    goto LABEL_62;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000LL && v13 == -1) {
    goto LABEL_63;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v13;
  unint64_t v48 = a1;
  unint64_t v47 = a4;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000LL) == 0)
    {
      uint64_t v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v16, v45);
      }

      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }

      unint64_t v25 = a4 + v18;
      unint64_t v46 = a4 + v18;
      unint64_t v48 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        uint64_t v27 = -v13;
        unint64_t v42 = a4;
        unint64_t v43 = a1;
        do
        {
          unint64_t v28 = a3 + v27;
          sub_10001DC4C(v25 + v27, (uint64_t)v11, type metadata accessor for BeaconEstimatedLocation);
          unint64_t v29 = a2 + v27;
          unint64_t v30 = a3;
          uint64_t v31 = (uint64_t)v11;
          uint64_t v32 = v44;
          sub_10001DC4C(a2 + v27, v44, type metadata accessor for BeaconEstimatedLocation);
          char v33 = static Date.< infix(_:_:)(v31 + *(int *)(v45 + 40), v32 + *(int *)(v45 + 40));
          uint64_t v34 = v32;
          uint64_t v11 = (char *)v31;
          sub_100018C68(v34, type metadata accessor for BeaconEstimatedLocation);
          sub_100018C68(v31, type metadata accessor for BeaconEstimatedLocation);
          if ((v33 & 1) != 0)
          {
            if (v30 < a2 || v28 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v28, a2 + v27, 1LL, v45);
              unint64_t v37 = v42;
              unint64_t v36 = v43;
            }

            else
            {
              BOOL v35 = v30 == a2;
              unint64_t v37 = v42;
              unint64_t v36 = v43;
              if (!v35) {
                swift_arrayInitWithTakeBackToFront(v28, a2 + v27);
              }
            }

            v48 += v27;
          }

          else
          {
            unint64_t v38 = v46;
            unint64_t v39 = v46 + v27;
            v46 += v27;
            if (v30 < v38 || v28 >= v38)
            {
              swift_arrayInitWithTakeFrontToBack(v28, v39, 1LL, v45);
              unint64_t v29 = a2;
              unint64_t v37 = v42;
              unint64_t v36 = v43;
            }

            else
            {
              BOOL v35 = v30 == v38;
              unint64_t v37 = v42;
              unint64_t v36 = v43;
              if (!v35) {
                swift_arrayInitWithTakeBackToFront(v28, v39);
              }
              unint64_t v29 = a2;
            }
          }

          unint64_t v25 = v46;
          if (v46 <= v37) {
            break;
          }
          a2 = v29;
          a3 = v28;
        }

        while (v29 > v36);
      }

      goto LABEL_60;
    }
  }

  else if ((v15 & 0x8000000000000000LL) == 0)
  {
    uint64_t v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v15, v45);
    }

    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }

    unint64_t v43 = a4 + v17;
    unint64_t v46 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      uint64_t v20 = v44;
      do
      {
        sub_10001DC4C(a2, (uint64_t)v11, type metadata accessor for BeaconEstimatedLocation);
        sub_10001DC4C(a4, v20, type metadata accessor for BeaconEstimatedLocation);
        char v21 = static Date.< infix(_:_:)(&v11[*(int *)(v45 + 40)], v20 + *(int *)(v45 + 40));
        sub_100018C68(v20, type metadata accessor for BeaconEstimatedLocation);
        sub_100018C68((uint64_t)v11, type metadata accessor for BeaconEstimatedLocation);
        unint64_t v22 = v48;
        if ((v21 & 1) != 0)
        {
          unint64_t v23 = a2 + v13;
          if (v48 < a2 || v48 >= v23)
          {
            swift_arrayInitWithTakeFrontToBack(v48, a2, 1LL, v45);
          }

          else if (v48 == a2)
          {
            unint64_t v22 = a2;
          }

          else
          {
            swift_arrayInitWithTakeBackToFront(v48, a2);
          }
        }

        else
        {
          unint64_t v24 = v47 + v13;
          if (v48 < v47 || v48 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack(v48, v47, 1LL, v45);
          }

          else if (v48 != v47)
          {
            swift_arrayInitWithTakeBackToFront(v48, v47);
          }

          unint64_t v47 = v24;
          unint64_t v23 = a2;
        }

        unint64_t v48 = v22 + v13;
        a4 = v47;
        if (v47 >= v43) {
          break;
        }
        a2 = v23;
      }

      while (v23 < a3);
    }

uint64_t sub_1001A8064(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  uint64_t v4 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
  uint64_t v39 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v35 - v8;
  sub_100004AEC(&qword_10099E318);
  uint64_t result = static _DictionaryStorage.copy(original:)(a3);
  uint64_t v11 = result;
  int64_t v12 = 0LL;
  uint64_t v42 = a3;
  uint64_t v15 = *(void *)(a3 + 64);
  uint64_t v14 = a3 + 64;
  uint64_t v13 = v15;
  uint64_t v16 = 1LL << *(_BYTE *)(v14 - 32);
  uint64_t v17 = -1LL;
  if (v16 < 64) {
    uint64_t v17 = ~(-1LL << v16);
  }
  unint64_t v18 = v17 & v13;
  uint64_t v36 = v14;
  int64_t v37 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v38 = result + 64;
  uint64_t v43 = result;
  if ((v17 & v13) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v19 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  int64_t v44 = v12;
  for (unint64_t i = v19 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v23)) + (v22 << 6))
  {
    unint64_t v25 = (uint64_t *)(*(void *)(v42 + 48) + 16 * i);
    uint64_t v27 = *v25;
    unint64_t v26 = v25[1];
    unint64_t v28 = *(void *)(v39 + 72) * i;
    sub_10001DC4C(*(void *)(v42 + 56) + v28, (uint64_t)v9, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_10001736C(v27, v26);
    uint64_t v29 = v45;
    v40(v9);
    if (v29)
    {
      uint64_t v11 = v43;
      swift_release();
      sub_100016F9C(v27, v26);
      sub_100018C68((uint64_t)v9, type metadata accessor for OwnedBeaconGroup.PairingState);
      return v11;
    }

    uint64_t v45 = 0LL;
    sub_100018C68((uint64_t)v9, type metadata accessor for OwnedBeaconGroup.PairingState);
    *(void *)(v38 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    uint64_t v30 = v43;
    uint64_t v31 = (uint64_t *)(*(void *)(v43 + 48) + 16 * i);
    *uint64_t v31 = v27;
    v31[1] = v26;
    uint64_t v32 = *(void *)(v30 + 56) + v28;
    uint64_t v11 = v30;
    uint64_t result = sub_10002218C((uint64_t)v7, v32, type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v33 = *(void *)(v11 + 16);
    BOOL v21 = __OFADD__(v33, 1LL);
    uint64_t v34 = v33 + 1;
    if (v21)
    {
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }

    *(void *)(v11 + swift_weakDestroy(v0 + 16) = v34;
    int64_t v12 = v44;
    if (v18) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v21 = __OFADD__(v12, 1LL);
    int64_t v22 = v12 + 1;
    if (v21) {
      goto LABEL_28;
    }
    if (v22 >= v37) {
      return v11;
    }
    unint64_t v23 = *(void *)(v36 + 8 * v22);
    if (!v23) {
      break;
    }
LABEL_15:
    unint64_t v18 = (v23 - 1) & v23;
    int64_t v44 = v22;
  }

  int64_t v24 = v22 + 1;
  if (v22 + 1 >= v37) {
    return v11;
  }
  unint64_t v23 = *(void *)(v36 + 8 * v24);
  if (v23) {
    goto LABEL_14;
  }
  int64_t v24 = v22 + 2;
  if (v22 + 2 >= v37) {
    return v11;
  }
  unint64_t v23 = *(void *)(v36 + 8 * v24);
  if (v23) {
    goto LABEL_14;
  }
  int64_t v24 = v22 + 3;
  if (v22 + 3 >= v37) {
    return v11;
  }
  unint64_t v23 = *(void *)(v36 + 8 * v24);
  if (v23)
  {
LABEL_14:
    int64_t v22 = v24;
    goto LABEL_15;
  }

  while (1)
  {
    int64_t v22 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v22 >= v37) {
      return v43;
    }
    unint64_t v23 = *(void *)(v36 + 8 * v22);
    ++v24;
    if (v23) {
      goto LABEL_15;
    }
  }

uint64_t sub_1001A8364( uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  uint64_t v67 = a4;
  uint64_t v13 = type metadata accessor for DispatchTime(0LL);
  uint64_t v61 = *(void *)(v13 - 8);
  uint64_t v62 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  unint64_t v60 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v59 = (char *)&v56 - v16;
  uint64_t v17 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (uint64_t *)((char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  v70[3] = &_s13DefaultPolicyVN;
  v70[4] = sub_1001B15A8();
  uint64_t v21 = swift_allocObject(&unk_100945740, 97LL, 7LL);
  v70[0] = v21;
  __int128 v22 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v21 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v21 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v22;
  *(_OWORD *)(v21 + 80) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(v21 + 96) = *(_BYTE *)(a2 + 80);
  __int128 v23 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v21 + swift_weakDestroy(v0 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v21 + 32) = v23;
  int64_t v24 = *(void **)(a5 + 88);
  void *v20 = v24;
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  sub_1001B17A0((void *)a2);
  id v25 = v24;
  LOBYTE(a2) = _dispatchPreconditionTest(_:)(v20);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v18 + 8))(v20, v17);
  if ((a2 & 1) != 0)
  {
    uint64_t v57 = sub_100195B88(a1, a6);
    uint64_t v27 = v57[2];
    if (v27)
    {
      uint64_t v65 = type metadata accessor for Transaction(0LL);
      unint64_t v28 = v57 + 4;
      int v64 = a3 & (a7 > 0.0);
      uint64_t v63 = (char *)&type metadata for () + 8;
      *(void *)&__int128 v29 = 138543362LL;
      __int128 v58 = v29;
      uint64_t v66 = a5;
      do
      {
        uint64_t v30 = *v28;
        swift_bridgeObjectRetain(*v28);
        if (v64)
        {
          uint64_t v31 = dispatch_group_create();
          dispatch_group_enter(v31);
        }

        else
        {
          uint64_t v31 = 0LL;
        }

        sub_100013044((uint64_t)v70, (uint64_t)v69);
        uint64_t v32 = (void *)swift_allocObject(&unk_1009457B8, 80LL, 7LL);
        void v32[2] = v30;
        v32[3] = v31;
        void v32[4] = a5;
        uint64_t v33 = sub_100012EC0(v69, (uint64_t)(v32 + 5));
        __chkstk_darwin(v33);
        *(&v56 - 6) = a5;
        *(&v56 - 5) = (uint64_t)v70;
        *(&v56 - _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v67;
        *(&v56 - 3) = v30;
        *(&v56 - 2) = (uint64_t)sub_1001B1824;
        *(&v56 - 1) = (uint64_t)v32;
        uint64_t v34 = v31;
        swift_bridgeObjectRetain(v30);
        swift_retain();
        static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.BeaconManagerService.fetchLocations",  65LL,  2LL,  sub_1001B1834,  &v56 - 8);
        swift_release();
        if (v31)
        {
          uint64_t v35 = v34;
          uint64_t v36 = v60;
          static DispatchTime.now()(v35);
          int64_t v37 = v59;
          + infix(_:_:)(v36, a7);
          uint64_t v38 = v62;
          uint64_t v39 = *(void (**)(char *, uint64_t))(v61 + 8);
          v39(v36, v62);
          LOBYTE(v36) = OS_dispatch_group.wait(timeout:)(v37);

          uint64_t v40 = v36 & 1;
          v39(v37, v38);
        }

        else
        {
          uint64_t v40 = 0LL;
        }

        if ((static DispatchTimeoutResult.== infix(_:_:)(v40, 0LL) & 1) != 0)
        {
          swift_bridgeObjectRelease();
          a5 = v66;
        }

        else
        {
          type metadata accessor for SPOwnerSessionError(0LL);
          uint64_t v42 = v41;
          uint64_t v68 = 4LL;
          unint64_t v43 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
          uint64_t v44 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
          uint64_t v45 = _BridgedStoredNSError.init(_:userInfo:)(v69, &v68, v43, v42, v44);
          unint64_t v46 = *(void **)&v69[0];
          swift_willThrow(v45);

          if (qword_10099B188 != -1) {
            swift_once(&qword_10099B188, sub_100189D08);
          }
          uint64_t v47 = type metadata accessor for Logger(0LL);
          sub_10000A720(v47, (uint64_t)qword_100A2A2B0);
          uint64_t v34 = v46;
          unint64_t v48 = (os_log_s *)Logger.logObject.getter(v34);
          os_log_type_t v49 = static os_log_type_t.error.getter(v48);
          BOOL v50 = os_log_type_enabled(v48, v49);
          a5 = v66;
          if (v50)
          {
            uint64_t v51 = swift_slowAlloc(12LL, -1LL);
            uint64_t v52 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
            *(_DWORD *)uint64_t v51 = v58;
            uint64_t v53 = v34;
            uint64_t v54 = _swift_stdlib_bridgeErrorToNSError(v53);
            *(void *)(v51 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v54;
            *uint64_t v52 = v54;

            _os_log_impl( (void *)&_mh_execute_header,  v48,  v49,  "Failed to fetch owned beacons locations %{public}@",  (uint8_t *)v51,  0xCu);
            uint64_t v55 = sub_100004AEC((uint64_t *)&unk_10099FB20);
            swift_arrayDestroy(v52, 1LL, v55);
            swift_slowDealloc(v52, -1LL, -1LL);
            swift_slowDealloc(v51, -1LL, -1LL);

            swift_bridgeObjectRelease();
            uint64_t v34 = (dispatch_group_s *)v48;
          }

          else
          {
            swift_bridgeObjectRelease();
          }
        }

        ++v28;
        --v27;
      }

      while (v27);
    }

    swift_bridgeObjectRelease();
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v70);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1001A88C8(void (*a1)(char *, uint64_t), unint64_t a2, uint64_t a3)
{
  uint64_t v101 = a1;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v100 = *(uint64_t (***)(char *, void (*)(char *, uint64_t), uint64_t))(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v93 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  BOOL v92 = (char *)&v84 - v8;
  uint64_t v9 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v91 = (uint64_t)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t (**)(char *, void (*)(char *, uint64_t), uint64_t))((char *)&v84 - v13);
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009A5990);
  __chkstk_darwin(v15);
  uint64_t v98 = (uint64_t)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v17);
  uint64_t v95 = (char *)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for Date(0LL);
  uint64_t v96 = *(void *)(v19 - 8);
  uint64_t v97 = v19;
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v99 = (uint64_t)&v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  __int128 v23 = (char *)&v84 - v22;
  sub_1001B17A0((void *)a2);
  if ((sub_1001A64E8() & 1) == 0) {
    goto LABEL_44;
  }
  uint64_t v94 = v23;
  uint64_t v89 = v5;
  char v24 = *(_BYTE *)(a2 + 8);
  uint64_t v90 = objc_autoreleasePoolPush();
  uint64_t v25 = sub_100004AEC((uint64_t *)&unk_1009AF790);
  OS_dispatch_queue.sync<A>(execute:)(sub_1000DE20C, a3, v25);
  uint64_t v26 = v104[0];
  if (!*(void *)(v104[0] + 16) || (unint64_t v27 = sub_10030D124((uint64_t)v101), (v28 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v33 = _swiftEmptyArrayStorage;
    uint64_t v45 = v94;
    uint64_t v44 = (uint64_t)v95;
    uint64_t v14 = v100;
    goto LABEL_27;
  }

  uint64_t v87 = 0LL;
  uint64_t v29 = *(void *)(*(void *)(v26 + 56) + 8 * v27);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease();
  uint64_t v30 = sub_1002FE5F8(v29);
  swift_bridgeObjectRelease();
  sub_1002FFE1C((uint64_t)v30);
  uint64_t v32 = v31;
  swift_release();
  uint64_t v33 = _swiftEmptyArrayStorage;
  v104[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v34 = *(void **)(v32 + 16);
  if (!v34)
  {
LABEL_26:
    swift_release();
    uint64_t v45 = v94;
    uint64_t v44 = (uint64_t)v95;
    uint64_t v14 = v100;
LABEL_27:
    objc_autoreleasePoolPop(v90);
    uint64_t v46 = v98;
    sub_1000F0A44((uint64_t)v33, v98);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v46, 1LL, v9) == 1)
    {
      sub_100015794(v46, (uint64_t *)&unk_1009A5990);
      uint64_t v9 = v96;
      uint64_t v10 = v97;
      uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v96 + 56))(v44, 1LL, 1LL, v97);
    }

    else
    {
      uint64_t v48 = v46 + *(int *)(v9 + 20);
      uint64_t v9 = v96;
      uint64_t v10 = v97;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 16))(v44, v48, v97);
      sub_100018C68(v46, type metadata accessor for BeaconObservation);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v44, 0LL, 1LL, v10);
      uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v44, 1LL, v10);
      if ((_DWORD)v47 != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v45, v44, v10);
LABEL_32:
        if (qword_10099B318 == -1) {
          goto LABEL_33;
        }
        goto LABEL_48;
      }
    }

    static Date.distantPast.getter(v47);
    sub_100015794(v44, (uint64_t *)&unk_10099D720);
    goto LABEL_32;
  }

  __int128 v88 = (void *)a2;
  a2 = 0LL;
  uint64_t v35 = 405LL;
  if ((v24 & 1) == 0) {
    uint64_t v35 = 403LL;
  }
  uint64_t v86 = v35;
  while (a2 < *(void *)(v32 + 16))
  {
    unint64_t v36 = (*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v37 = *(void *)(v10 + 72);
    sub_10001DC4C(v32 + v36 + v37 * a2, (uint64_t)v14, type metadata accessor for BeaconObservation);
    unsigned int v38 = *((unsigned __int8 *)v14 + *(int *)(v9 + 24));
    BOOL v39 = v38 - 4 >= 0x27 && v38 >= 2;
    if (v39 && (v38 != 2 ? (uint64_t v40 = 405LL) : (uint64_t v40 = 403LL), v40 == v86))
    {
      sub_10002218C((uint64_t)v14, v91, type metadata accessor for BeaconObservation);
      if ((swift_isUniquelyReferenced_nonNull_native(v33) & 1) == 0) {
        sub_100032AA8(0, v33[2] + 1LL, 1);
      }
      uint64_t v33 = (void *)v104[0];
      unint64_t v42 = *(void *)(v104[0] + 16);
      unint64_t v41 = *(void *)(v104[0] + 24);
      unint64_t v43 = v42 + 1;
      if (v42 >= v41 >> 1)
      {
        unint64_t v85 = v42 + 1;
        unint64_t v84 = v42;
        sub_100032AA8(v41 > 1, v42 + 1, 1);
        unint64_t v43 = v85;
        unint64_t v42 = v84;
        uint64_t v33 = (void *)v104[0];
      }

      v33[2] = v43;
      sub_10002218C(v91, (uint64_t)v33 + v36 + v42 * v37, type metadata accessor for BeaconObservation);
    }

    else
    {
      sub_100018C68((uint64_t)v14, type metadata accessor for BeaconObservation);
    }

    if (v34 == (void *)++a2)
    {
      uint64_t v33 = (void *)v104[0];
      a2 = (unint64_t)v88;
      goto LABEL_26;
    }
  }

  __break(1u);
LABEL_48:
  swift_once(&qword_10099B318, sub_100352F58);
LABEL_33:
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  sub_1006A0E04(v104[0]);
  double v50 = v49;
  swift_bridgeObjectRelease();
  double v51 = v50 * 3.0;
  uint64_t v52 = v99;
  static Date.trustedNow.getter(v99);
  double v53 = Date.timeIntervalSince(_:)(v52);
  uint64_t v54 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v54(v52, v10);
  if (v51 >= fabs(v53))
  {
    uint64_t v69 = v89;
    if (qword_10099B188 != -1) {
      swift_once(&qword_10099B188, sub_100189D08);
    }
    uint64_t v70 = type metadata accessor for Logger(0LL);
    sub_10000A720(v70, (uint64_t)qword_100A2A2B0);
    uint64_t v71 = v93;
    uint64_t v72 = v14[2](v93, v101, v69);
    uint64_t v73 = (os_log_s *)Logger.logObject.getter(v72);
    os_log_type_t v74 = static os_log_type_t.default.getter(v73);
    if (os_log_type_enabled(v73, v74))
    {
      uint64_t v75 = swift_slowAlloc(22LL, -1LL);
      uint64_t v101 = (void (*)(char *, uint64_t))v54;
      uint64_t v76 = v75;
      uint64_t v77 = swift_slowAlloc(32LL, -1LL);
      __int128 v88 = (void *)a2;
      uint64_t v78 = v77;
      v104[0] = v77;
      *(_DWORD *)uint64_t v76 = 141558275;
      uint64_t v102 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v76 + 4, v76 + 12);
      *(_WORD *)(v76 + 12) = 2081;
      uint64_t v79 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v80 = dispatch thunk of CustomStringConvertible.description.getter(v69, v79);
      uint64_t v102 = sub_1003F11D4(v80, v81, v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v76 + 14, v76 + 22);
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v100[1])(v71, v69);
      _os_log_impl( (void *)&_mh_execute_header,  v73,  v74,  "Not allowed to exhaustively fetch beacon %{private,mask.hash}s based on policy.",  (uint8_t *)v76,  0x16u);
      swift_arrayDestroy(v78, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v78, -1LL, -1LL);
      swift_slowDealloc(v76, -1LL, -1LL);

      v101(v94, v10);
      uint64_t v82 = v88;
LABEL_45:
      sub_1001B19E8(v82);
      return 0LL;
    }

    ((void (*)(char *, uint64_t))v14[1])(v71, v69);
    v54((uint64_t)v94, v10);
LABEL_44:
    uint64_t v82 = (void *)a2;
    goto LABEL_45;
  }

  uint64_t v55 = v89;
  if (qword_10099B188 != -1) {
    swift_once(&qword_10099B188, sub_100189D08);
  }
  uint64_t v56 = type metadata accessor for Logger(0LL);
  sub_10000A720(v56, (uint64_t)qword_100A2A2B0);
  uint64_t v57 = v92;
  uint64_t v58 = v14[2](v92, v101, v55);
  uint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
  os_log_type_t v60 = static os_log_type_t.default.getter(v59);
  if (os_log_type_enabled(v59, v60))
  {
    uint64_t v61 = swift_slowAlloc(22LL, -1LL);
    uint64_t v101 = (void (*)(char *, uint64_t))v54;
    uint64_t v62 = v61;
    uint64_t v63 = swift_slowAlloc(32LL, -1LL);
    __int128 v88 = (void *)a2;
    uint64_t v64 = v63;
    v104[0] = v63;
    *(_DWORD *)uint64_t v62 = 141558275;
    uint64_t v102 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v62 + 4, v62 + 12);
    *(_WORD *)(v62 + 12) = 2081;
    uint64_t v65 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter(v55, v65);
    uint64_t v102 = sub_1003F11D4(v66, v67, v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v62 + 14, v62 + 22);
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v100[1])(v57, v55);
    _os_log_impl( (void *)&_mh_execute_header,  v59,  v60,  "Allowed to exhaustively fetch beacon %{private,mask.hash}s based on policy.",  (uint8_t *)v62,  0x16u);
    uint64_t v68 = 1LL;
    swift_arrayDestroy(v64, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v64, -1LL, -1LL);
    swift_slowDealloc(v62, -1LL, -1LL);

    v101(v94, v10);
    sub_1001B19E8(v88);
  }

  else
  {

    ((void (*)(char *, uint64_t))v14[1])(v57, v55);
    v54((uint64_t)v94, v10);
    sub_1001B19E8((void *)a2);
    return 1LL;
  }

  return v68;
}

char *sub_1001A9290(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v33 = a2;
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = &v29[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = &v29[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v32 = v11;
  __chkstk_darwin(v11);
  uint64_t v14 = &v29[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v36 = type metadata accessor for TagCommandManager();
  uint64_t v37 = &off_100956E40;
  *(void *)&__int128 v35 = a1;
  sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  unsigned int v30 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v31 = *(uint64_t (**)(_BYTE *))(v12 + 104);
  uint64_t v15 = v31(v14);
  static DispatchQoS.unspecified.getter(v15);
  uint64_t v34 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_100007864( (unint64_t *)&qword_10099BAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009A0CD0);
  uint64_t v18 = sub_1000372EC( (unint64_t *)&qword_10099BAB0,  (uint64_t *)&unk_1009A0CD0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v17, v18, v5, v16);
  *((void *)a3 + 7) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000003FLL,  0x80000001008574F0LL,  v10,  v7,  v14,  0LL);
  uint64_t v19 = ((uint64_t (*)(_BYTE *, void, uint64_t))v31)(v14, v30, v32);
  static DispatchQoS.unspecified.getter(v19);
  uint64_t v34 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v17, v18, v5, v16);
  *((void *)a3 + 8) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000043LL,  0x8000000100857530LL,  v10,  v7,  v14,  0LL);
  *((void *)a3 + 9) = _swiftEmptyArrayStorage;
  *(void *)&a3[OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_targetBeacon] = 0LL;
  uint64_t v20 = OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playFuture;
  uint64_t v21 = sub_100004AEC(&qword_1009A49B0);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  *(void *)&a3[v20] = Future.init()();
  uint64_t v22 = OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_stopFuture;
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  *(void *)&a3[v22] = Future.init()();
  __int128 v23 = &a3[OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playCommandIdentifier];
  uint64_t v24 = type metadata accessor for UUID(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
  v26(v23, 1LL, 1LL, v24);
  v26(&a3[OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_stopCommandIdentifier], 1LL, 1LL, v24);
  *(void *)&a3[OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playCommandError] = 0LL;
  *(void *)&a3[OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_stopCommandError] = 0LL;
  unint64_t v27 = &a3[OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playSoundTimer];
  *((void *)v27 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 0LL;
  *(_OWORD *)unint64_t v27 = 0u;
  *((_OWORD *)v27 + 1) = 0u;
  sub_100012EC0(&v35, (uint64_t)(a3 + 16));
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 32))( &a3[OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_beaconIdentifier],  v33,  v24);
  return a3;
}

uint64_t sub_1001A9630()
{
  v0._object = (void *)0x8000000100857060LL;
  v0._countAndFlagsBits = 0xD000000000000016LL;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._object = (void *)0xEC000000203A6B73LL;
  v3._countAndFlagsBits = 0x69446D6F7266202CLL;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 1702195828LL;
  v4._object = (void *)0xE400000000000000LL;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 0x6E6575716573202CLL;
  v5._object = (void *)0xED0000203A736563LL;
  String.append(_:)(v5);
  v6._countAndFlagsBits = Array.description.getter( &_swiftEmptyArrayStorage,  &type metadata for BeaconKeyManager.KeySequence);
  uint64_t v7 = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v7);
  v8._countAndFlagsBits = 8236LL;
  v8._object = (void *)0xE200000000000000LL;
  String.append(_:)(v8);
  _StringGuts.grow(_:)(71LL);
  v9._countAndFlagsBits = 0x6974737561687865LL;
  v9._object = (void *)0xEC000000203A6576LL;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0x65736C6166LL;
  v10._object = (void *)0xE500000000000000LL;
  String.append(_:)(v10);
  v11._object = (void *)0x8000000100857080LL;
  v11._countAndFlagsBits = 0xD000000000000016LL;
  String.append(_:)(v11);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  uint64_t v13 = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v13);
  v14._countAndFlagsBits = 0xD00000000000001FLL;
  v14._object = (void *)0x80000001008570A0LL;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 1702195828LL;
  v15._object = (void *)0xE400000000000000LL;
  String.append(_:)(v15);
  swift_bridgeObjectRetain(0xE000000000000000LL);
  v16._countAndFlagsBits = 0LL;
  v16._object = (void *)0xE000000000000000LL;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  return 0LL;
}

void sub_1001A988C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v7 = sub_100004AEC(&qword_1009A48D8);
  uint64_t v8 = __chkstk_darwin(v7);
  Swift::String v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  Swift::String v12 = (char *)&v26 - v11;
  uint64_t v30 = a1;
  uint64_t v13 = *(void *)(a2 + 64);
  uint64_t v26 = a2 + 64;
  uint64_t v14 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v27 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  int64_t v17 = 0LL;
  if (!v16) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v18 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    uint64_t v23 = *(void *)(a2 + 48);
    uint64_t v24 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v24 - 8) + 16LL))( v12,  v23 + *(void *)(*(void *)(v24 - 8) + 72LL) * i,  v24);
    uint64_t v25 = *(void *)(*(void *)(a2 + 56) + 8 * i);
    *(void *)&v12[*(int *)(v7 + 48)] = v25;
    sub_100015750((uint64_t)v12, (uint64_t)v10, &qword_1009A48D8);
    swift_bridgeObjectRetain(v25);
    sub_1001941C0(&v30, (uint64_t)v10, v28, v29);
    if (v4)
    {
      swift_bridgeObjectRelease();
      sub_100015794((uint64_t)v10, &qword_1009A48D8);
      swift_release();
      return;
    }

    sub_100015794((uint64_t)v10, &qword_1009A48D8);
    if (v16) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v17++, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v17 >= v27) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v26 + 8 * v17);
    if (!v21) {
      break;
    }
LABEL_17:
    unint64_t v16 = (v21 - 1) & v21;
  }

  int64_t v22 = v17 + 1;
  if (v17 + 1 >= v27) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v26 + 8 * v22);
  if (v21) {
    goto LABEL_16;
  }
  int64_t v22 = v17 + 2;
  if (v17 + 2 >= v27) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v26 + 8 * v22);
  if (v21) {
    goto LABEL_16;
  }
  int64_t v22 = v17 + 3;
  if (v17 + 3 >= v27) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v26 + 8 * v22);
  if (v21) {
    goto LABEL_16;
  }
  int64_t v22 = v17 + 4;
  if (v17 + 4 >= v27)
  {
LABEL_26:
    swift_release();
    return;
  }

  unint64_t v21 = *(void *)(v26 + 8 * v22);
  if (v21)
  {
LABEL_16:
    int64_t v17 = v22;
    goto LABEL_17;
  }

  while (1)
  {
    int64_t v17 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v17 >= v27) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v26 + 8 * v17);
    ++v22;
    if (v21) {
      goto LABEL_17;
    }
  }

void *sub_1001A9B2C(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = a2;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v25 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v12 = *(void *)(v5 + 72);
    void v22[2] = v2;
    uint64_t v23 = v12;
    uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
    v22[1] = a1;
    __n128 v13 = swift_bridgeObjectRetain(a1);
    uint64_t v14 = _swiftEmptyArrayStorage;
    while (1)
    {
      v24(v9, v11, v4, v13);
      uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56);
      ((void (*)(char *, void, uint64_t, uint64_t))v15)(v9, 0LL, 1LL, v4);
      uint64_t v16 = (uint64_t)v25;
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v25, v9, v4);
      sub_100504C28(v16, (uint64_t)&v26);
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v16, v4);
      if (v27)
      {
        sub_100012EC0(&v26, (uint64_t)v28);
        sub_100012EC0(v28, (uint64_t)&v26);
        if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0) {
          uint64_t v14 = sub_1004C4740(0LL, v14[2] + 1LL, 1, v14);
        }
        unint64_t v18 = v14[2];
        unint64_t v17 = v14[3];
        if (v18 >= v17 >> 1) {
          uint64_t v14 = sub_1004C4740((void *)(v17 > 1), v18 + 1, 1, v14);
        }
        void v14[2] = v18 + 1;
        sub_100012EC0(&v26, (uint64_t)&v14[5 * v18 + 4]);
      }

      else
      {
        sub_100015794((uint64_t)&v26, (uint64_t *)&unk_1009A9C40);
      }

      v11 += v23;
      if (!--v10)
      {
        v15(v9, 1LL, 1LL, v4, v13);
        break;
      }
    }
  }

  else
  {
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56);
    __n128 v20 = swift_bridgeObjectRetain(a1);
    uint64_t v14 = _swiftEmptyArrayStorage;
    v19(v9, 1LL, 1LL, v4, v20);
  }

  swift_bridgeObjectRelease();
  return v14;
}

void *sub_1001A9DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v39 - v11;
  uint64_t v13 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(void *)(a1 + 16);
  void v39[2] = a1;
  if (v16)
  {
    v39[1] = v3;
    uint64_t v17 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v44 = *(void *)(v7 + 72);
    double v53 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    __n128 v18 = swift_bridgeObjectRetain(a1);
    double v49 = _swiftEmptyArrayStorage;
    v18.n128_u64[0] = 141558275LL;
    __n128 v41 = v18;
    uint64_t v40 = (char *)&type metadata for Any + 8;
    uint64_t v45 = v12;
    uint64_t v46 = v7;
    unint64_t v42 = v15;
    uint64_t v43 = a2;
    while (1)
    {
      uint64_t v48 = v16;
      v53(v15, v17, v6);
      uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v7 + 56);
      ((void (*)(char *, void, uint64_t, uint64_t))v47)(v15, 0LL, 1LL, v6);
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v15, v6);
      if (qword_10099B188 != -1) {
        swift_once(&qword_10099B188, sub_100189D08);
      }
      uint64_t v20 = type metadata accessor for Logger(0LL);
      sub_10000A720(v20, (uint64_t)qword_100A2A2B0);
      uint64_t v21 = ((uint64_t (*)(char *, char *, uint64_t))v53)(v10, v12, v6);
      int64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
      os_log_type_t v23 = static os_log_type_t.default.getter(v22);
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = swift_slowAlloc(22LL, -1LL);
        uint64_t v25 = v10;
        uint64_t v26 = swift_slowAlloc(32LL, -1LL);
        *(void *)&v52[0] = v26;
        *(_DWORD *)uint64_t v24 = v41.n128_u32[0];
        *(void *)(v24 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 1752392040LL;
        *(_WORD *)(v24 + 12) = 2081;
        uint64_t v27 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter(v6, v27);
        *(void *)(v24 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1003F11D4(v28, v29, (uint64_t *)v52);
        swift_bridgeObjectRelease();
        uint64_t v30 = *(void (**)(char *, uint64_t))(v7 + 8);
        v30(v25, v6);
        _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "One-shot location includes beaconID: %{private,mask.hash}s.",  (uint8_t *)v24,  0x16u);
        swift_arrayDestroy(v26, 1LL, v40);
        uint64_t v31 = v26;
        uint64_t v10 = v25;
        uint64_t v15 = v42;
        swift_slowDealloc(v31, -1LL, -1LL);
        swift_slowDealloc(v24, -1LL, -1LL);
      }

      else
      {
        uint64_t v30 = *(void (**)(char *, uint64_t))(v7 + 8);
        v30(v10, v6);
      }

      uint64_t v12 = v45;
      sub_100504C28((uint64_t)v45, (uint64_t)&v50);
      v30(v12, v6);
      if (v51)
      {
        sub_100012EC0(&v50, (uint64_t)v52);
        sub_100012EC0(v52, (uint64_t)&v50);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v49);
        uint64_t v7 = v46;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          double v49 = sub_1004C4740(0LL, v49[2] + 1LL, 1, v49);
        }
        unint64_t v34 = v49[2];
        unint64_t v33 = v49[3];
        if (v34 >= v33 >> 1) {
          double v49 = sub_1004C4740((void *)(v33 > 1), v34 + 1, 1, v49);
        }
        __int128 v35 = v49;
        void v49[2] = v34 + 1;
        sub_100012EC0(&v50, (uint64_t)&v35[5 * v34 + 4]);
      }

      else
      {
        sub_100015794((uint64_t)&v50, (uint64_t *)&unk_1009A9C40);
        uint64_t v7 = v46;
      }

      v17 += v44;
      uint64_t v16 = v48 - 1;
      if (v48 == 1)
      {
        v47(v15, 1LL, 1LL, v6, v19);
        break;
      }
    }
  }

  else
  {
    uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v7 + 56);
    __n128 v37 = swift_bridgeObjectRetain(a1);
    double v49 = _swiftEmptyArrayStorage;
    v36(v15, 1LL, 1LL, v6, v37);
  }

  swift_bridgeObjectRelease();
  return v49;
}

void *sub_1001AA234(uint64_t a1, uint64_t a2)
{
  uint64_t v57 = a2;
  uint64_t v4 = type metadata accessor for Endianness(0LL);
  __chkstk_darwin(v4);
  v56[3] = (char *)v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  __chkstk_darwin(v6);
  uint64_t v67 = (uint64_t)v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v68 = type metadata accessor for StableIdentifier(0LL);
  uint64_t v9 = __chkstk_darwin(v68);
  uint64_t v11 = (char *)v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)v56 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)v56 - v16;
  __chkstk_darwin(v15);
  uint64_t v65 = (uint64_t)v56 - v18;
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v71 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v64 = *(void *)(a1 + 16);
  if (v64)
  {
    uint64_t v62 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v61 = *(void *)(v7 + 72);
    v56[5] = v14 + 8;
    uint64_t v58 = v11 + 8;
    v56[1] = a1;
    swift_bridgeObjectRetain(a1);
    uint64_t v20 = 0LL;
    uint64_t v59 = v14;
    os_log_type_t v60 = v6;
    uint64_t v66 = v17;
    uint64_t v63 = v11;
    while (1)
    {
      uint64_t v21 = v62 + v61 * v20;
      uint64_t v22 = v21 + v6[6];
      uint64_t v23 = v65;
      sub_10001DC4C(v22, v65, type metadata accessor for StableIdentifier);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v23, v68);
      sub_100018C68(v23, type metadata accessor for StableIdentifier);
      sub_10001DC4C(v22, (uint64_t)v17, type metadata accessor for StableIdentifier);
      if (EnumCaseMultiPayload != 1)
      {
        sub_10001DC4C((uint64_t)v17, (uint64_t)v14, type metadata accessor for StableIdentifier);
        int v25 = swift_getEnumCaseMultiPayload(v14, v68);
        if (v25 == 3)
        {
          sub_100004AEC((uint64_t *)&unk_1009AF840);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }

        else
        {
          if (v25 != 2)
          {
            sub_100018C68((uint64_t)v14, type metadata accessor for StableIdentifier);
            sub_100018C68((uint64_t)v17, type metadata accessor for StableIdentifier);
            sub_10001DC4C(v21, v67, type metadata accessor for OwnedBeaconRecord);
            BOOL v34 = 0;
            goto LABEL_16;
          }

          sub_100004AEC((uint64_t *)&unk_1009B0520);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease();
        uint64_t v26 = type metadata accessor for UUID(0LL);
        (*(void (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8LL))(v14, v26);
      }

      sub_100018C68((uint64_t)v17, type metadata accessor for StableIdentifier);
      uint64_t v27 = v67;
      sub_10001DC4C(v21, v67, type metadata accessor for OwnedBeaconRecord);
      uint64_t v28 = v6[17];
      uint64_t v29 = *(void *)(v27 + v6[16]);
      uint64_t v30 = *(void *)(v27 + v28);
      if (qword_10099B318 != -1) {
        swift_once(&qword_10099B318, sub_100352F58);
      }
      OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
      uint64_t v31 = sub_1006A1524(v70);
      swift_bridgeObjectRelease();
      uint64_t v32 = sub_1006F1330(v31);
      swift_bridgeObjectRelease();
      uint64_t v70 = v32;
      sub_1000BDCF0(&v69, 8212LL);
      sub_1000BDCF0(&v69, 8213LL);
      sub_1000BDCF0(&v69, 8216LL);
      sub_1000BDCF0(&v69, 8219LL);
      sub_1000BDCF0(&v69, 8220LL);
      sub_1000BDCF0(&v69, 8223LL);
      BOOL v33 = v29 == 76 && sub_1004E4E60(v30, v70);
      uint64_t v6 = v60;
      uint64_t v17 = v66;
      swift_bridgeObjectRelease();
      BOOL v34 = !v33;
LABEL_16:
      sub_100018C68(v67, type metadata accessor for OwnedBeaconRecord);
      uint64_t v35 = v22;
      uint64_t v36 = (uint64_t)v63;
      sub_10001DC4C(v35, (uint64_t)v63, type metadata accessor for StableIdentifier);
      int v37 = swift_getEnumCaseMultiPayload(v36, v68);
      if (v37 == 3)
      {
        sub_100004AEC((uint64_t *)&unk_1009AF840);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      else
      {
        if (v37 != 2)
        {
          sub_100018C68(v36, type metadata accessor for StableIdentifier);
          if (v34) {
            goto LABEL_27;
          }
          goto LABEL_3;
        }

        sub_100004AEC((uint64_t *)&unk_1009B0520);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      swift_bridgeObjectRelease();
      uint64_t v38 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8LL))(v36, v38);
      uint64_t v39 = sub_1000F5F2C(*(void *)(v21 + v6[16]), *(void *)(v21 + v6[17]));
      if (v40 >> 60 != 15)
      {
        unint64_t v41 = v40;
        if (v34)
        {
          sub_1000182F0(v39, v40);
          uint64_t v17 = v66;
LABEL_27:
          unint64_t v42 = sub_1001455C0(v21, *(void *)(v57 + 256));
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v42);
          unint64_t v44 = *(void *)((v71 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          unint64_t v43 = *(void *)((v71 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v44 >= v43 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1LL);
          }
          uint64_t v45 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v44, v42);
          specialized Array._endMutation()(v45);
          goto LABEL_3;
        }

        v56[6] = v39;
        v56[4] = v2;
        uint64_t v46 = Set.init(minimumCapacity:)(1LL);
        uint64_t v47 = 0LL;
        for (uint64_t i = v46 + 56; ; uint64_t i = v46 + 56)
        {
          while (2)
          {
            uint64_t v49 = (uint64_t)*(&off_100932818 + v47++ + 4);
            uint64_t v50 = static Hasher._hash(seed:_:)(*(void *)(v46 + 40), v49);
            uint64_t v51 = -1LL << *(_BYTE *)(v46 + 32);
            unint64_t v52 = v50 & ~v51;
            if (((*(void *)(i + ((v52 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v52) & 1) != 0)
            {
              uint64_t v53 = *(void *)(v46 + 48);
              if (*(void *)(v53 + 8 * v52) == v49)
              {
LABEL_32:
                if (v47 == 1) {
                  goto LABEL_41;
                }
                continue;
              }

              uint64_t v54 = ~v51;
              while (1)
              {
                unint64_t v52 = (v52 + 1) & v54;
                if (((*(void *)(i + ((v52 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v52) & 1) == 0) {
                  break;
                }
                if (*(void *)(v53 + 8 * v52) == v49) {
                  goto LABEL_32;
                }
              }
            }

            break;
          }

          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v46);
          uint64_t v69 = v46;
          sub_1000C9698(v49, v52, isUniquelyReferenced_nonNull_native);
          uint64_t v46 = v69;
          swift_bridgeObjectRelease();
          if (v47 == 1)
          {
LABEL_41:
            uint64_t v70 = v46;
            sub_1000BDCF0(&v69, 8216LL);
            sub_1000BDCF0(&v69, 8220LL);
            __asm { BR              X9 }
          }
        }
      }

      uint64_t v17 = v66;
      if (v34) {
        goto LABEL_27;
      }
LABEL_3:
      ++v20;
      uint64_t v14 = v59;
      if (v20 == v64)
      {
        swift_bridgeObjectRelease();
        return (void *)v71;
      }
    }
  }

  return result;
}

void *sub_1001AAB80(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v40 = (char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  unint64_t v43 = (char *)v35 - v12;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v50 = _swiftEmptyArrayStorage;
  uint64_t v38 = *(void *)(a1 + 16);
  if (v38)
  {
    uint64_t v14 = 0LL;
    v35[1] = v2;
    uint64_t v36 = a1 + 32;
    uint64_t v37 = a2;
    do
    {
      uint64_t v39 = v14;
      sub_100013044(v36 + 40 * v14, (uint64_t)&v47);
      uint64_t v18 = v48;
      uint64_t v17 = v49;
      sub_100012ED8(&v47, v48);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v17 + 8) + 8LL) + 32LL))(v18);
      uint64_t v19 = *(void *)(a2 + 16);
      if (v19)
      {
        uint64_t v20 = a2 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
        __n128 v15 = swift_bridgeObjectRetain(a2);
        uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16);
        uint64_t v41 = *(void *)(v9 + 72);
        unint64_t v42 = v21;
        while (1)
        {
          v42(v7, v20, v8, v15);
          uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v9 + 56);
          ((void (*)(char *, void, uint64_t, uint64_t))v16)(v7, 0LL, 1LL, v8);
          uint64_t v22 = v40;
          (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v40, v7, v8);
          uint64_t v23 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          char v24 = dispatch thunk of static Equatable.== infix(_:_:)(v22, v43, v8, v23);
          int v25 = *(void (**)(char *, uint64_t))(v9 + 8);
          v25(v22, v8);
          if ((v24 & 1) != 0)
          {
            a2 = v37;
            swift_bridgeObjectRelease();
            v25(v43, v8);
            sub_100012EC0(&v47, (uint64_t)v44);
            uint64_t v26 = v50;
            if ((swift_isUniquelyReferenced_nonNull_native(v50) & 1) == 0)
            {
              sub_100032928(0, v26[2] + 1LL, 1);
              uint64_t v26 = v50;
            }

            unint64_t v28 = v26[2];
            unint64_t v27 = v26[3];
            if (v28 >= v27 >> 1) {
              sub_100032928(v27 > 1, v28 + 1, 1);
            }
            uint64_t v29 = v45;
            uint64_t v30 = v46;
            uint64_t v31 = sub_100037298((uint64_t)v44, v45);
            __chkstk_darwin(v31);
            BOOL v33 = (char *)v35 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
            (*(void (**)(char *))(v34 + 16))(v33);
            sub_1002BBA60(v28, (uint64_t)v33, (uint64_t *)&v50, v29, v30);
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v44);
            goto LABEL_6;
          }

          v20 += v41;
          if (!--v19) {
            goto LABEL_4;
          }
        }
      }

      else
      {
        __n128 v15 = swift_bridgeObjectRetain(a2);
        uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v9 + 56);
LABEL_4:
        v16(v7, 1LL, 1LL, v8, v15);
      }

      a2 = v37;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v43, v8);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v47);
LABEL_6:
      uint64_t v14 = v39 + 1;
    }

    while (v39 + 1 != v38);
    return v50;
  }

  return result;
}

void *sub_1001AAF10(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID(0LL);
  unint64_t v40 = *(void **)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v41 = (char *)v35 - v9;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v48 = _swiftEmptyArrayStorage;
  uint64_t v37 = *(void *)(a1 + 16);
  if (v37)
  {
    uint64_t v11 = 0LL;
    v35[1] = v2;
    uint64_t v36 = a1 + 32;
    uint64_t v39 = a2 + 56;
    do
    {
      uint64_t v38 = v11;
      sub_100013044(v36 + 40 * v11, (uint64_t)&v45);
      uint64_t v13 = v46;
      uint64_t v12 = v47;
      sub_100012ED8(&v45, v46);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v12 + 8) + 8LL) + 32LL))(v13);
      if (*(void *)(a2 + 16)
        && (uint64_t v14 = *(void *)(a2 + 40),
            uint64_t v15 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID),  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v5, v15),  v17 = -1LL << *(_BYTE *)(a2 + 32),  v18 = v16 & ~v17,  ((*(void *)(v39 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v18) & 1) != 0))
      {
        uint64_t v19 = ~v17;
        uint64_t v20 = v40[9];
        uint64_t v21 = (void (*)(char *, unint64_t, uint64_t))v40[2];
        while (1)
        {
          uint64_t v22 = a2;
          v21(v8, *(void *)(a2 + 48) + v20 * v18, v5);
          uint64_t v23 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          char v24 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v41, v5, v23);
          int v25 = (void (*)(char *, uint64_t))v40[1];
          v25(v8, v5);
          if ((v24 & 1) != 0) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v19;
          a2 = v22;
          if (((*(void *)(v39 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v18) & 1) == 0) {
            goto LABEL_3;
          }
        }

        v25(v41, v5);
        sub_100012EC0(&v45, (uint64_t)v42);
        uint64_t v26 = v48;
        if ((swift_isUniquelyReferenced_nonNull_native(v48) & 1) == 0)
        {
          sub_100032928(0, v26[2] + 1LL, 1);
          uint64_t v26 = v48;
        }

        a2 = v22;
        unint64_t v28 = v26[2];
        unint64_t v27 = v26[3];
        if (v28 >= v27 >> 1) {
          sub_100032928(v27 > 1, v28 + 1, 1);
        }
        uint64_t v29 = v43;
        uint64_t v30 = v44;
        uint64_t v31 = sub_100037298((uint64_t)v42, v43);
        __chkstk_darwin(v31);
        BOOL v33 = (char *)v35 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *))(v34 + 16))(v33);
        sub_1002BBA60(v28, (uint64_t)v33, (uint64_t *)&v48, v29, v30);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
      }

      else
      {
LABEL_3:
        ((void (*)(char *, uint64_t))v40[1])(v41, v5);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v45);
      }

      uint64_t v11 = v38 + 1;
    }

    while (v38 + 1 != v37);
    return v48;
  }

  return result;
}

void *sub_1001AB250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v53 = a3;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v6);
  uint64_t v52 = (uint64_t)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v58 = (uint64_t)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v50 - v12;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v66 = _swiftEmptyArrayStorage;
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15)
  {
    uint64_t v57 = v3;
    uint64_t v16 = a1 + 32;
    uint64_t v51 = v9;
    uint64_t v54 = v8;
    while (1)
    {
      sub_100013044(v16, (uint64_t)&v63);
      uint64_t v17 = v64;
      uint64_t v18 = v65;
      sub_100012ED8(&v63, v64);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v18 + 8) + 8LL) + 32LL))(v17);
      if (!*(void *)(a2 + 16)) {
        break;
      }
      unint64_t v19 = sub_10030D124((uint64_t)v13);
      if ((v20 & 1) == 0) {
        break;
      }
      uint64_t v21 = *(void *)(*(void *)(a2 + 56) + 8 * v19);
      __n128 v22 = swift_bridgeObjectRetain(v21);
      uint64_t v23 = *(void (**)(char *, uint64_t, __n128))(v9 + 8);
      v23(v13, v8, v22);
      uint64_t v24 = *(void *)(v21 + 16);
      swift_bridgeObjectRelease();
      sub_100013044((uint64_t)&v63, (uint64_t)v60);
      if (v24) {
        goto LABEL_12;
      }
      uint64_t v55 = *(void *)(v53 + 256);
      uint64_t v25 = v61;
      uint64_t v26 = v62;
      sub_100012ED8(v60, v61);
      (*(void (**)(uint64_t))(*(void *)(v26[1] + 8LL) + 32LL))(v25);
      if (qword_10099B300 != -1) {
        swift_once(&qword_10099B300, sub_1003459EC);
      }
      uint64_t v27 = qword_100A2A6C8;
      unint64_t v28 = objc_autoreleasePoolPush();
      uint64_t v29 = sub_100004AEC((uint64_t *)&unk_1009AF790);
      uint64_t v30 = v57;
      OS_dispatch_queue.sync<A>(execute:)(sub_1000DE20C, v27, v29);
      uint64_t v57 = v30;
      uint64_t v31 = v59;
      if (*(void *)(v59 + 16) && (unint64_t v32 = sub_10030D124(v58), (v33 & 1) != 0))
      {
        uint64_t v56 = (void (*)(uint64_t, uint64_t))v23;
        uint64_t v34 = *(void *)(*(void *)(v31 + 56) + 8 * v32);
        swift_bridgeObjectRetain(v34);
        swift_bridgeObjectRelease();
        uint64_t v35 = sub_1002FE5F8(v34);
        swift_bridgeObjectRelease();
        sub_1002FFE1C((uint64_t)v35);
        uint64_t v37 = v36;
        swift_release();
      }

      else
      {
        uint64_t v56 = (void (*)(uint64_t, uint64_t))v23;
        swift_bridgeObjectRelease();
        uint64_t v37 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))_swiftEmptyArrayStorage;
      }

      objc_autoreleasePoolPop(v28);
      uint64_t v38 = v52;
      uint64_t v39 = v58;
      char v40 = sub_100518274(v52, v58, v37, 1);
      swift_bridgeObjectRelease();
      uint64_t v8 = v54;
      v56(v39, v54);
      sub_100015794(v38, (uint64_t *)&unk_10099D720);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v60);
      if ((v40 & 1) == 0)
      {
        sub_100012EC0(&v63, (uint64_t)v60);
        uint64_t v41 = v66;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v66);
        uint64_t v9 = v51;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100032928(0, v41[2] + 1LL, 1);
          uint64_t v41 = v66;
        }

        unint64_t v44 = v41[2];
        unint64_t v43 = v41[3];
        if (v44 >= v43 >> 1) {
          sub_100032928(v43 > 1, v44 + 1, 1);
        }
        uint64_t v45 = v61;
        uint64_t v56 = (void (*)(uint64_t, uint64_t))v62;
        uint64_t v46 = sub_100037298((uint64_t)v60, v61);
        __chkstk_darwin(v46);
        uint64_t v48 = (char *)&v50 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *))(v49 + 16))(v48);
        sub_1002BBA60(v44, (uint64_t)v48, (uint64_t *)&v66, v45, (uint64_t)v56);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v60);
        uint64_t v8 = v54;
        goto LABEL_14;
      }

      uint64_t v9 = v51;
LABEL_13:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v63);
LABEL_14:
      v16 += 40LL;
      if (!--v15) {
        return v66;
      }
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
    sub_100013044((uint64_t)&v63, (uint64_t)v60);
LABEL_12:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v60);
    goto LABEL_13;
  }

  return result;
}

char *sub_1001AB69C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v37 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v6 = __chkstk_darwin(v37);
  uint64_t v36 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - v8;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  __chkstk_darwin(v12);
  uint64_t v38 = (char *)&v29 - v14;
  int64_t v15 = *(void *)(a1 + 16);
  uint64_t v16 = (char *)_swiftEmptyArrayStorage;
  if (v15)
  {
    uint64_t v33 = v13;
    uint64_t v35 = v9;
    uint64_t v39 = (char *)_swiftEmptyArrayStorage;
    sub_1000328D0(0, v15, 0);
    unint64_t v32 = (*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v17 = a1 + v32;
    uint64_t v18 = *(void *)(a2 + 256);
    uint64_t v30 = *(void *)(v11 + 72);
    uint64_t v31 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedBeaconRecordsQueueSynchronizer;
    uint64_t v34 = v11;
    do
    {
      sub_1005073E4();
      uint64_t v19 = swift_bridgeObjectRelease();
      __chkstk_darwin(v19);
      *(&v29 - 2) = v18;
      *(&v29 - 1) = v17;
      uint64_t v20 = (uint64_t)v36;
      uint64_t v21 = v3;
      QueueSynchronizer.conditionalSync<A>(_:)(sub_1001B1B1C);
      uint64_t v22 = (uint64_t)v35;
      sub_100015750(v20, (uint64_t)v35, &qword_10099D8A0);
      uint64_t v23 = v33;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v33, v17, v10);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v22, 1LL, v10) == 1)
      {
        uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 32);
        v24(v38, v23, v10);
        sub_100015794(v22, &qword_10099D8A0);
      }

      else
      {
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v23, v10);
        uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 32);
        v24(v38, v22, v10);
      }

      uint64_t v16 = v39;
      if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0)
      {
        sub_1000328D0(0, *((void *)v16 + 2) + 1LL, 1);
        uint64_t v16 = v39;
      }

      unint64_t v26 = *((void *)v16 + 2);
      unint64_t v25 = *((void *)v16 + 3);
      if (v26 >= v25 >> 1)
      {
        sub_1000328D0(v25 > 1, v26 + 1, 1);
        uint64_t v16 = v39;
      }

      *((void *)v16 + 2) = v26 + 1;
      uint64_t v27 = v30;
      v24(&v16[v32 + v26 * v30], (uint64_t)v38, v10);
      uint64_t v39 = v16;
      v17 += v27;
      --v15;
      uint64_t v3 = v21;
      uint64_t v11 = v34;
    }

    while (v15);
  }

  return v16;
}

uint64_t sub_1001AB98C(uint64_t a1)
{
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t KeyPath = swift_getKeyPath(&unk_1007F4770);
  sub_10065EF74(KeyPath, v7[0], v7);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v3 = v7[0];
  unint64_t v4 = v7[1];
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a1 + 16))(a1, isa);

  return sub_100016F9C(v3, v4);
}

void *sub_1001ABA6C(uint64_t a1)
{
  uint64_t v2 = _swiftEmptyArrayStorage;
  uint64_t v19 = _swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  if (v3)
  {
    uint64_t v4 = a1 + 32;
    do
    {
      sub_100013044(v4, (uint64_t)v18);
      if ((sub_10018A4D8((uint64_t)v18) & 1) != 0)
      {
        sub_100012EC0(v18, (uint64_t)v15);
        uint64_t v5 = v19;
        if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
        {
          sub_100032928(0, v5[2] + 1LL, 1);
          uint64_t v5 = v19;
        }

        unint64_t v7 = v5[2];
        unint64_t v6 = v5[3];
        if (v7 >= v6 >> 1) {
          sub_100032928(v6 > 1, v7 + 1, 1);
        }
        uint64_t v8 = v16;
        uint64_t v9 = v17;
        uint64_t v10 = sub_100037298((uint64_t)v15, v16);
        __chkstk_darwin(v10);
        uint64_t v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *))(v13 + 16))(v12);
        sub_1002BBA60(v7, (uint64_t)v12, (uint64_t *)&v19, v8, v9);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v15);
      }

      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v18);
      }

      v4 += 40LL;
      --v3;
    }

    while (v3);
    uint64_t v2 = v19;
  }

  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1001ABC0C(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for TaskPriority(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1LL, 1LL, v5);
  unint64_t v7 = (void *)swift_allocObject(&unk_100945858, 40LL, 7LL);
  v7[2] = 0LL;
  uint64_t v8 = v7 + 2;
  uint64_t v7[3] = 0LL;
  void v7[4] = a1;
  int v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5);
  swift_bridgeObjectRetain(a1);
  if (v9 == 1)
  {
    sub_100015794((uint64_t)v4, &qword_1009A9BF0);
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 7168LL;
  }

  else
  {
    unsigned __int8 v14 = TaskPriority.rawValue.getter(v10);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    uint64_t v13 = v14 | 0x1C00LL;
    uint64_t v15 = *v8;
    if (*v8)
    {
      uint64_t v16 = v7[3];
      uint64_t ObjectType = swift_getObjectType(*v8);
      swift_unknownObjectRetain(v15);
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      uint64_t v12 = v18;
      swift_unknownObjectRelease(v15);
    }

    else
    {
      uint64_t v11 = 0LL;
      uint64_t v12 = 0LL;
    }
  }

  uint64_t v19 = swift_allocObject(&unk_100945880, 32LL, 7LL);
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = &unk_1009A48D0;
  *(void *)(v19 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v7;
  if (v12 | v11)
  {
    v22[0] = 0LL;
    v22[1] = 0LL;
    uint64_t v20 = v22;
    void v22[2] = v11;
    void v22[3] = v12;
  }

  else
  {
    uint64_t v20 = 0LL;
  }

  swift_task_create(v13, v20, (char *)&type metadata for () + 8, &unk_1009AB890, v19);
  return swift_release();
}

uint64_t sub_1001ABDE0(unint64_t a1, int64_t a2, void (*a3)(id, void), uint64_t a4)
{
  uint64_t v219 = a4;
  uint64_t v220 = a3;
  int64_t v228 = a2;
  unint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v242 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t)&v214 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v214 - v10;
  __chkstk_darwin(v9);
  id v227 = (char *)&v214 - v12;
  uint64_t v13 = sub_100004AEC(&qword_1009A4898);
  uint64_t v14 = __chkstk_darwin(v13);
  id v230 = (char *)&v214 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v231 = (char *)&v214 - v16;
  uint64_t v236 = type metadata accessor for Date(0LL);
  unint64_t v221 = *(void *)(v236 - 8);
  uint64_t v17 = __chkstk_darwin(v236);
  uint64_t v234 = (char *)&v214 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  Class v235 = (char *)&v214 - v19;
  uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009AE470);
  __chkstk_darwin(v20);
  v240.n128_u64[0] = (unint64_t)&v214 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v238 = type metadata accessor for SharedBeaconRecord(0LL);
  unint64_t v239 = *(char **)(v238 - 8);
  __chkstk_darwin(v238);
  uint64_t v229 = (char *)&v214 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t Configuration = type metadata accessor for LocationFetchConfiguration(0LL);
  uint64_t v216 = *(void *)(Configuration - 8);
  uint64_t v23 = __chkstk_darwin(Configuration);
  uint64_t v218 = (uint64_t)&v214 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v217 = v24;
  __chkstk_darwin(v23);
  unint64_t v225 = (char *)&v214 - v25;
  if (qword_10099B188 == -1) {
    goto LABEL_2;
  }
LABEL_153:
  swift_once(&qword_10099B188, sub_100189D08);
LABEL_2:
  uint64_t v26 = type metadata accessor for Logger(0LL);
  uint64_t v27 = sub_10000A720(v26, (uint64_t)qword_100A2A2B0);
  sub_1001B142C((void *)a1);
  unint64_t v28 = sub_1001B142C((void *)a1);
  uint64_t v241 = v27;
  uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
  os_log_type_t v30 = static os_log_type_t.default.getter(v29);
  BOOL v31 = os_log_type_enabled(v29, v30);
  unint64_t v232 = v5;
  if (v31)
  {
    unint64_t v32 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v33 = swift_slowAlloc(32LL, -1LL);
    *(void *)&__int128 aBlock = v33;
    *(_DWORD *)unint64_t v32 = 136446210;
    unint64_t v237 = (unint64_t)(v32 + 4);
    sub_1001B142C((void *)a1);
    uint64_t v34 = sub_1006E5C68();
    unint64_t v36 = v35;
    sub_1001B1498((void *)a1);
    uint64_t v251 = sub_1003F11D4(v34, v36, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v237, v32 + 12);
    swift_bridgeObjectRelease();
    sub_1001B1498((void *)a1);
    sub_1001B1498((void *)a1);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "One-shot location request with context %{public}s.", v32, 0xCu);
    swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1LL, -1LL);
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  else
  {
    sub_1001B1498((void *)a1);
    sub_1001B1498((void *)a1);
  }

  id v224 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  LODWORD(v223) = *(unsigned __int8 *)a1;
  uint64_t v37 = v228;
  if ((_DWORD)v223 == 2)
  {
    uint64_t v38 = sub_1004C20A4();
    uint64_t v39 = static os_log_type_t.default.getter(v38);
    if (qword_10099B720 != -1) {
      swift_once(&qword_10099B720, sub_10065128C);
    }
    os_log(_:dso:log:_:_:)( v39,  &_mh_execute_header,  qword_100A2B030,  "#Durian: scan for tags nearby owner.",  36LL,  2LL,  _swiftEmptyArrayStorage);
  }

  uint64_t v40 = *(void *)(a1 + 8);
  if (!*(void *)(v40 + 16))
  {
    uint64_t v54 = sub_100508644();
    swift_bridgeObjectRetain(*(void *)(a1 + 24));
    uint64_t v56 = sub_1006F1530(v55);
    swift_bridgeObjectRelease();
    uint64_t v57 = sub_10028E698((uint64_t)v54, v56, 0, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int64_t v58 = v57[2];
    if (v58)
    {
      uint64_t v251 = (uint64_t)_swiftEmptyArrayStorage;
      sub_1000328D0(0, v58, 0);
      uint64_t v59 = (uint64_t)(v57 + 4);
      uint64_t v49 = (void *)v251;
      do
      {
        sub_100013044(v59, (uint64_t)&aBlock);
        os_log_type_t v60 = v245;
        uint64_t v61 = v246;
        sub_100012ED8(&aBlock, (uint64_t)v245);
        (*(void (**)(void *))(*(void *)(*((void *)v61 + 1) + 8LL) + 32LL))(v60);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
        if ((swift_isUniquelyReferenced_nonNull_native(v49) & 1) == 0)
        {
          sub_1000328D0(0, v49[2] + 1LL, 1);
          uint64_t v49 = (void *)v251;
        }

        unint64_t v63 = v49[2];
        unint64_t v62 = v49[3];
        if (v63 >= v62 >> 1)
        {
          sub_1000328D0(v62 > 1, v63 + 1, 1);
          uint64_t v49 = (void *)v251;
        }

        void v49[2] = v63 + 1;
        (*(void (**)(unint64_t, char *, unint64_t))(v242 + 32))( (unint64_t)v49 + ((*(unsigned __int8 *)(v242 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v242 + 80))
        + *(void *)(v242 + 72) * v63,
          v11,
          v232);
        uint64_t v251 = (uint64_t)v49;
        v59 += 40LL;
        --v58;
      }

      while (v58);
      goto LABEL_17;
    }

void sub_1001ADD34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = &v27[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = &v27[-v12];
  static SystemInfo.lockState.getter(v11);
  (*(void (**)(_BYTE *, void, uint64_t))(v7 + 104))( v10,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v6);
  uint64_t v14 = sub_100007864( (unint64_t *)&qword_1009A2650,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  char v15 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v10, v6, v14);
  uint64_t v16 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
  v16(v10, v6);
  v16(v13, v6);
  if ((v15 & 1) != 0)
  {
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v18 = v17;
    uint64_t v19 = 16LL;
  }

  else
  {
    sub_100504C28(a1, (uint64_t)&v28);
    if (v29)
    {
      sub_100012EC0(&v28, (uint64_t)v30);
      uint64_t v20 = objc_autoreleasePoolPush();
      sub_100296390(a2, v30, &v28);
      objc_autoreleasePoolPop(v20);
      uint64_t v26 = (void *)v28;
      (*(void (**)(uint64_t, void, void))(a3 + 16))(a3, v28, 0LL);

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v30);
      return;
    }

    sub_100015794((uint64_t)&v28, (uint64_t *)&unk_1009A9C40);
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v18 = v21;
    uint64_t v19 = 2LL;
  }

  *(void *)&__int128 v28 = v19;
  unint64_t v22 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v23 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
  _BridgedStoredNSError.init(_:userInfo:)(v30, &v28, v22, v18, v23);
  unint64_t v24 = (void *)v30[0];
  uint64_t v25 = (void *)_convertErrorToNSError(_:)(v30[0]);
  (*(void (**)(uint64_t, void, void *))(a3 + 16))(a3, 0LL, v25);
}

void sub_1001ADFB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v26 - v11;
  static SystemInfo.lockState.getter(v10);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))( v9,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v5);
  uint64_t v13 = sub_100007864( (unint64_t *)&qword_1009A2650,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  char v14 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v5, v13);
  char v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v9, v5);
  v15(v12, v5);
  if ((v14 & 1) != 0)
  {
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v17 = v16;
    uint64_t v18 = 16LL;
  }

  else
  {
    sub_100513108(a1, (uint64_t)&v26);
    if (v27)
    {
      sub_100012EC0(&v26, (uint64_t)v28);
      uint64_t v19 = (void *)sub_10050EF2C((uint64_t)v28);
      sub_10028E9A4((uint64_t)v28);
      type metadata accessor for SPBeaconTaskName(0LL);
      sub_100022898(0LL, (unint64_t *)&unk_1009AE4B0, &OBJC_CLASS___SPBeaconTaskInformation_ptr);
      sub_100007864( (unint64_t *)&qword_10099C3B0,  (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName,  (uint64_t)&unk_1007E3C50);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v19 setTaskInformation:isa];

      (*(void (**)(uint64_t, void *, void))(a3 + 16))(a3, v19, 0LL);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
      return;
    }

    sub_100015794((uint64_t)&v26, (uint64_t *)&unk_1009AA790);
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v17 = v21;
    uint64_t v18 = 17LL;
  }

  *(void *)&__int128 v26 = v18;
  unint64_t v22 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v23 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
  _BridgedStoredNSError.init(_:userInfo:)(v28, &v26, v22, v17, v23);
  unint64_t v24 = (void *)v28[0];
  uint64_t v25 = (void *)_convertErrorToNSError(_:)(v28[0]);
  (*(void (**)(uint64_t, void, void *))(a3 + 16))(a3, 0LL, v25);
}

void sub_1001AE25C(uint64_t a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v6 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v37 - v10;
  uint64_t v12 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v13 = __chkstk_darwin(v12);
  char v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v37 - v16;
  uint64_t v18 = swift_allocObject(&unk_100945F88, 24LL, 7LL);
  *(void *)(v18 + swift_weakDestroy(v0 + 16) = a3;
  uint64_t v37 = a1;
  sub_100013044(a1, (uint64_t)v40);
  _Block_copy(a3);
  _Block_copy(a3);
  uint64_t v19 = sub_100004AEC(&qword_1009B0530);
  if (swift_dynamicCast(v17, v40, v19, v12, 0LL))
  {
    sub_10002218C((uint64_t)v17, (uint64_t)v15, type metadata accessor for OwnedBeaconRecord);
    _Block_copy(a3);
    swift_retain();
    sub_10014C58C((uint64_t)v15, 1, a2, a3);
    _Block_release(a3);
    swift_release();
    uint64_t v20 = (uint64_t)v15;
    uint64_t v21 = type metadata accessor for OwnedBeaconRecord;
LABEL_5:
    sub_100018C68(v20, v21);
    goto LABEL_9;
  }

  uint64_t v22 = swift_dynamicCast(v11, v40, v19, v6, 0LL);
  if ((v22 & 1) != 0)
  {
    sub_10002218C((uint64_t)v11, (uint64_t)v9, type metadata accessor for SharedBeaconRecord);
    uint64_t v23 = swift_allocObject(&unk_100945FB0, 32LL, 7LL);
    *(void *)(v23 + swift_weakDestroy(v0 + 16) = sub_10009C9E4;
    *(void *)(v23 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v18;
    swift_retain();
    sub_1001359BC((uint64_t)v9, (uint64_t)sub_1000228F4, v23);
    swift_release();
    uint64_t v20 = (uint64_t)v9;
    uint64_t v21 = type metadata accessor for SharedBeaconRecord;
    goto LABEL_5;
  }

  uint64_t v24 = static os_log_type_t.error.getter(v22);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v25 = qword_100A2B030;
  uint64_t v26 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v27 = swift_allocObject(v26, 72LL, 7LL);
  *(_OWORD *)(v27 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  sub_100013044(v37, (uint64_t)v39);
  uint64_t v28 = String.init<A>(describing:)(v39, v19);
  uint64_t v30 = v29;
  *(void *)(v27 + 56) = &type metadata for String;
  *(void *)(v27 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1000226F4();
  *(void *)(v27 + 32) = v28;
  *(void *)(v27 + 40) = v30;
  os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "Unhandle beacon type: %@", 24LL, 2LL, v27);
  swift_bridgeObjectRelease();
  type metadata accessor for SPOwnerSessionError(0LL);
  uint64_t v32 = v31;
  uint64_t v38 = 0LL;
  unint64_t v33 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v34 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
  _BridgedStoredNSError.init(_:userInfo:)(v39, &v38, v33, v32, v34);
  unint64_t v35 = (void *)v39[0];
  unint64_t v36 = (void *)_convertErrorToNSError(_:)(v39[0]);
  ((void (**)(void, void *))a3)[2](a3, v36);

LABEL_9:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v40);
  swift_release();
  _Block_release(a3);
}

uint64_t sub_1001AE600(uint64_t a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v89 = a1;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v94 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v90 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v92 = sub_100004AEC((uint64_t *)&unk_1009B5370);
  __chkstk_darwin(v92);
  uint64_t v8 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v93 = (uint64_t)&v75 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v75 - v15;
  uint64_t v88 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v79 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v80 = v17;
  uint64_t v86 = (uint64_t)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100004AEC(&qword_1009AA830);
  __chkstk_darwin(v18);
  uint64_t v85 = (char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v83 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v84 = *(void *)(v83 - 8);
  uint64_t v20 = __chkstk_darwin(v83);
  uint64_t v78 = (uint64_t)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = v21;
  __chkstk_darwin(v20);
  uint64_t v81 = (uint64_t)&v75 - v22;
  uint64_t v87 = swift_allocObject(&unk_100945F10, 24LL, 7LL);
  *(void *)(v87 + swift_weakDestroy(v0 + 16) = a3;
  uint64_t v82 = a2;
  _Block_copy(a3);
  uint64_t v23 = sub_10050CBD8();
  uint64_t v24 = sub_1004E7C18((uint64_t)v23);
  swift_bridgeObjectRelease();
  uint64_t v25 = sub_10050CD78();
  uint64_t v26 = sub_1004E7C3C((uint64_t)v25);
  swift_bridgeObjectRelease();
  *(void *)&v99[0] = v24;
  sub_100184210((uint64_t)v26);
  uint64_t v27 = *(void *)(*(void *)&v99[0] + 16LL);
  if (!v27)
  {
LABEL_12:
    uint64_t v100 = 0LL;
    memset(v99, 0, sizeof(v99));
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }

  char v76 = a3;
  uint64_t v28 = *(void *)&v99[0] + 32LL;
  uint64_t v91 = v89 + *(int *)(v88 + 28);
  uint64_t v75 = *(void *)&v99[0];
  swift_bridgeObjectRetain(*(void *)&v99[0]);
  while (1)
  {
    uint64_t v29 = (uint64_t)v12;
    sub_100013044(v28, (uint64_t)&v96);
    uint64_t v30 = v97;
    uint64_t v31 = v98;
    sub_100012ED8(&v96, v97);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v31);
    uint64_t v32 = v94;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v94 + 56))(v16, 0LL, 1LL, v5);
    uint64_t v33 = v93;
    sub_10001581C(v91, v93, &qword_10099D8A0);
    uint64_t v34 = (uint64_t)&v8[*(int *)(v92 + 48)];
    sub_10001581C((uint64_t)v16, (uint64_t)v8, &qword_10099D8A0);
    sub_10001581C(v33, v34, &qword_10099D8A0);
    unint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
    if (v35(v8, 1LL, v5) == 1) {
      break;
    }
    uint64_t v12 = (char *)v29;
    sub_10001581C((uint64_t)v8, v29, &qword_10099D8A0);
    if (v35((char *)v34, 1LL, v5) == 1)
    {
      sub_100015794(v93, &qword_10099D8A0);
      sub_100015794((uint64_t)v16, &qword_10099D8A0);
      (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v29, v5);
      goto LABEL_4;
    }

    uint64_t v36 = v94;
    uint64_t v37 = v90;
    (*(void (**)(char *, uint64_t, uint64_t))(v94 + 32))(v90, v34, v5);
    uint64_t v38 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    char v39 = dispatch thunk of static Equatable.== infix(_:_:)(v29, v37, v5, v38);
    uint64_t v40 = *(void (**)(char *, uint64_t))(v36 + 8);
    uint64_t v41 = v37;
    uint64_t v12 = (char *)v29;
    v40(v41, v5);
    sub_100015794(v93, &qword_10099D8A0);
    sub_100015794((uint64_t)v16, &qword_10099D8A0);
    v40((char *)v29, v5);
    sub_100015794((uint64_t)v8, &qword_10099D8A0);
    if ((v39 & 1) != 0) {
      goto LABEL_14;
    }
LABEL_5:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v96);
    v28 += 40LL;
    if (!--v27)
    {
      swift_bridgeObjectRelease();
      a3 = v76;
      goto LABEL_12;
    }
  }

  sub_100015794(v33, &qword_10099D8A0);
  sub_100015794((uint64_t)v16, &qword_10099D8A0);
  uint64_t v12 = (char *)v29;
  if (v35((char *)v34, 1LL, v5) != 1)
  {
LABEL_4:
    sub_100015794((uint64_t)v8, (uint64_t *)&unk_1009B5370);
    goto LABEL_5;
  }

  sub_100015794((uint64_t)v8, &qword_10099D8A0);
LABEL_14:
  swift_bridgeObjectRelease();
  sub_100012EC0(&v96, (uint64_t)v99);
  swift_bridgeObjectRelease();
  a3 = v76;
LABEL_15:
  sub_10001581C((uint64_t)v99, (uint64_t)&v96, (uint64_t *)&unk_1009AA790);
  uint64_t v42 = (uint64_t)v85;
  uint64_t v43 = v84;
  if (v97)
  {
    uint64_t v44 = sub_100004AEC((uint64_t *)&unk_1009B1230);
    uint64_t v45 = v83;
    int v46 = swift_dynamicCast(v42, &v96, v44, v83, 6LL);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v42, v46 ^ 1u, 1LL, v45);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v42, 1LL, v45) != 1)
    {
      uint64_t v47 = v81;
      sub_10002218C(v42, v81, type metadata accessor for OwnedBeaconGroup);
      uint64_t v48 = v78;
      sub_10001DC4C(v47, v78, type metadata accessor for OwnedBeaconGroup);
      uint64_t v49 = v89;
      uint64_t v50 = v86;
      sub_10001DC4C(v89, v86, type metadata accessor for OwnedBeaconRecord);
      uint64_t v51 = *(unsigned __int8 *)(v43 + 80);
      uint64_t v52 = (v51 + 24) & ~v51;
      uint64_t v53 = *(unsigned __int8 *)(v79 + 80);
      uint64_t v54 = (v77 + v53 + v52) & ~v53;
      unint64_t v55 = (v80 + v54 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v56 = swift_allocObject(&unk_100945F38, v55 + 16, v51 | v53 | 7);
      *(void *)(v56 + swift_weakDestroy(v0 + 16) = v82;
      sub_10002218C(v48, v56 + v52, type metadata accessor for OwnedBeaconGroup);
      sub_10002218C(v50, v56 + v54, type metadata accessor for OwnedBeaconRecord);
      uint64_t v57 = (void *)(v56 + v55);
      uint64_t v58 = v87;
      *uint64_t v57 = sub_10009C9E4;
      v57[1] = v58;
      swift_retain();
      swift_retain();
      sub_1001305E0(v49, 0, (void (*)(uint64_t))sub_1001B2DF0, (void (*)(uint64_t))v56);
      swift_release();
      sub_100018C68(v47, type metadata accessor for OwnedBeaconGroup);
      sub_100015794((uint64_t)v99, (uint64_t *)&unk_1009AA790);
      return swift_release();
    }
  }

  else
  {
    sub_100015794((uint64_t)&v96, (uint64_t *)&unk_1009AA790);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v42, 1LL, 1LL, v83);
  }

  uint64_t v59 = sub_100015794(v42, &qword_1009AA830);
  uint64_t v60 = static os_log_type_t.error.getter(v59);
  if (qword_10099B748 != -1) {
    swift_once(&qword_10099B748, sub_100651480);
  }
  uint64_t v61 = qword_100A2B058;
  uint64_t v62 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v63 = swift_allocObject(v62, 72LL, 7LL);
  *(_OWORD *)(v63 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v64 = v86;
  sub_10001DC4C(v89, v86, type metadata accessor for OwnedBeaconRecord);
  uint64_t v65 = String.init<A>(describing:)(v64, v88);
  uint64_t v67 = v66;
  *(void *)(v63 + 56) = &type metadata for String;
  *(void *)(v63 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1000226F4();
  *(void *)(v63 + 32) = v65;
  *(void *)(v63 + 40) = v67;
  os_log(_:dso:log:_:_:)(v60, &_mh_execute_header, v61, "Unable to get beacon group for beacon: %@", 41LL, 2LL, v63);
  swift_bridgeObjectRelease();
  type metadata accessor for SPOwnerSessionError(0LL);
  uint64_t v69 = v68;
  uint64_t v95 = 2LL;
  unint64_t v70 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v71 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
  _BridgedStoredNSError.init(_:userInfo:)(&v96, &v95, v70, v69, v71);
  unint64_t v72 = (void *)v96;
  uint64_t v73 = (void *)_convertErrorToNSError(_:)(v96);
  ((void (**)(void, void *))a3)[2](a3, v73);

  sub_100015794((uint64_t)v99, (uint64_t *)&unk_1009AA790);
  return swift_release();
}

uint64_t sub_1001AEEE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for UUID(0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = a1;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  sub_10001581C(v19, (uint64_t)v15, &qword_10099D8A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v15, 1LL, v21) == 1)
  {
    sub_100015794((uint64_t)v15, &qword_10099D8A0);
    uint64_t v24 = *(void *)(a2 + 256);
    uint64_t v25 = *(void *)(v24 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
    uint64_t v26 = type metadata accessor for BeaconKeyManager(0LL);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10014F014, v24, v25, (char *)&type metadata for () + 8, v26);
    sub_1007A48D4(0);
    swift_release();
    return (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, 0LL);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v18, v15, v21);
    uint64_t v28 = *(void *)(a2 + 256);
    sub_100504F30((uint64_t)v18, (uint64_t)v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) == 1)
    {
      uint64_t v29 = v21;
      uint64_t v30 = sub_100015794((uint64_t)v8, (uint64_t *)&unk_1009A9C30);
      uint64_t v31 = static os_log_type_t.error.getter(v30);
      uint64_t v56 = a3;
      if (qword_10099B720 != -1) {
        swift_once(&qword_10099B720, sub_10065128C);
      }
      uint64_t v32 = qword_100A2B030;
      uint64_t v33 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v34 = swift_allocObject(v33, 72LL, 7LL);
      __int128 v55 = xmmword_1007E67D0;
      *(_OWORD *)(v34 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v35 = UUID.uuidString.getter(v34);
      uint64_t v37 = v36;
      *(void *)(v34 + 56) = &type metadata for String;
      *(void *)(v34 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1000226F4();
      *(void *)(v34 + 32) = v35;
      *(void *)(v34 + 40) = v37;
      os_log(_:dso:log:_:_:)( v31,  &_mh_execute_header,  v32,  "Unable to find owned beacon record for UUID: %@",  47LL,  2LL,  v34);
      swift_bridgeObjectRelease();
      uint64_t v38 = sub_100004AEC(&qword_1009B9A10);
      uint64_t inited = swift_initStackObject(v38, v59);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = v55;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
      *(void *)(inited + 40) = v40;
      unint64_t v57 = 0LL;
      unint64_t v58 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(47LL);
      swift_bridgeObjectRelease();
      unint64_t v57 = 0xD00000000000002DLL;
      unint64_t v58 = 0x8000000100857950LL;
      uint64_t v41 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v29, v41);
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      unint64_t v43 = v58;
      *(void *)(inited + 48) = v57;
      *(void *)(inited + 56) = v43;
      unint64_t v44 = sub_100412D14(inited);
      sub_10028BD3C(v44);
      swift_bridgeObjectRelease();
      id v45 = objc_allocWithZone(&OBJC_CLASS___NSError);
      NSString v46 = String._bridgeToObjectiveC()();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v48 = [v45 initWithDomain:v46 code:500 userInfo:isa];

      id v49 = v48;
      uint64_t v50 = (void *)_convertErrorToNSError(_:)(v49);
      (*(void (**)(uint64_t, void *))(v56 + 16))(v56, v50);

      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v18, v29);
    }

    else
    {
      sub_10002218C((uint64_t)v8, (uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
      uint64_t v51 = *(void *)(v28 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
      uint64_t v52 = type metadata accessor for BeaconKeyManager(0LL);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10014F014, v28, v51, (char *)&type metadata for () + 8, v52);
      unint64_t v53 = v57;
      uint64_t v54 = type metadata accessor for Transaction(0LL);
      __chkstk_darwin(v54);
      *((void *)&v55 - 6) = v53;
      *((void *)&v55 - 5) = v12;
      *((_BYTE *)&v55 - 32) = 2;
      *((void *)&v55 - 3) = 0LL;
      *((void *)&v55 - 2) = 0LL;
      static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.checkForMissingKeyMaps.forbeacon",  62LL,  2LL,  sub_1001B3160);
      swift_release();
      (*(void (**)(uint64_t, void))(a3 + 16))(a3, 0LL);
      sub_100018C68((uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v18, v21);
    }
  }

void sub_1001AF46C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v45 = a3;
  uint64_t v44 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v42 - v15;
  sub_100504F30(a1, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10) == 1)
  {
    sub_100015794((uint64_t)v9, (uint64_t *)&unk_1009A9C30);
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    sub_10000A720(v17, (uint64_t)qword_100A2AC98);
    uint64_t v18 = v44;
    uint64_t v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v44);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc(22LL, -1LL);
      uint64_t v23 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v22 = 141558275;
      uint64_t v46 = 1752392040LL;
      uint64_t v47 = (void *)v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v22 + 4, v22 + 12);
      *(_WORD *)(v22 + 12) = 2081;
      uint64_t v24 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter(v18, v24);
      uint64_t v46 = sub_1003F11D4(v25, v26, (uint64_t *)&v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v22 + 14, v22 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v18);
      _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "Unable to get keySync/keyAlignment record for beacon: %{private,mask.hash}s.",  (uint8_t *)v22,  0x16u);
      swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1LL, -1LL);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v18);
    }

    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v37 = v36;
    uint64_t v46 = 2LL;
    unint64_t v38 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v39 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    _BridgedStoredNSError.init(_:userInfo:)(&v47, &v46, v38, v37, v39);
    uint64_t v40 = v47;
    uint64_t v41 = (void *)_convertErrorToNSError(_:)(v47);
    (*(void (**)(uint64_t, void *))(v45 + 16))(v45, v41);
  }

  else
  {
    sub_10002218C((uint64_t)v9, (uint64_t)v16, type metadata accessor for OwnedBeaconRecord);
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v27 = type metadata accessor for Logger(0LL);
    sub_10000A720(v27, (uint64_t)qword_100A2AC98);
    uint64_t v28 = sub_10001DC4C((uint64_t)v16, (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.default.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc(22LL, -1LL);
      uint64_t v32 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v31 = 141558275;
      uint64_t v46 = 1752392040LL;
      uint64_t v47 = (void *)v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v31 + 4, v31 + 12);
      *(_WORD *)(v31 + 12) = 2081;
      uint64_t v43 = v31 + 14;
      uint64_t v33 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter(v44, v33);
      uint64_t v46 = sub_1003F11D4(v34, v35, (uint64_t *)&v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v43, v31 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "Forcing KeyAlignmentRecord update for beacon: %{private,mask.hash}s.",  (uint8_t *)v31,  0x16u);
      swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
    }

    sub_10050A054((uint64_t)v16);
    (*(void (**)(uint64_t, void))(v45 + 16))(v45, 0LL);
    sub_100018C68((uint64_t)v16, type metadata accessor for OwnedBeaconRecord);
  }

uint64_t sub_1001AF9F8(uint64_t a1, void *a2, char a3, uint64_t a4, void (*a5)(void *, void *))
{
  if (!v28)
  {
    sub_100015794((uint64_t)&v27, (uint64_t *)&unk_1009A9C40);
    unint64_t v11 = sub_10014A2C0();
    uint64_t v12 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v11, 0LL, 0LL);
    _BYTE *v13 = 10;
    uint64_t v14 = (void *)_convertErrorToNSError(_:)(v12);
    a5(_swiftEmptyArrayStorage, v14);

    return swift_errorRelease(v12);
  }

  sub_100012EC0(&v27, (uint64_t)v30);
  unsigned int v8 = [a2 sequence];
  if (v8 == 1)
  {
    id v9 = [a2 index];
    uint64_t v28 = &type metadata for PrimaryIndex;
    unint64_t v10 = sub_1000868E4();
    goto LABEL_9;
  }

  if (v8 == 2)
  {
    id v9 = [a2 index];
    uint64_t v28 = &type metadata for PrimaryWildIndex;
    unint64_t v10 = sub_100086928();
    goto LABEL_9;
  }

  if (v8 != 3)
  {
    unint64_t v24 = sub_10014A2C0();
    uint64_t v12 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v24, 0LL, 0LL);
    *uint64_t v25 = 4;
    unint64_t v26 = (void *)_convertErrorToNSError(_:)(v12);
    a5(_swiftEmptyArrayStorage, v26);

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v30);
    return swift_errorRelease(v12);
  }

  id v9 = [a2 index];
  uint64_t v28 = &type metadata for SecondaryIndex;
  unint64_t v10 = sub_1000868A0();
LABEL_9:
  unint64_t v29 = v10;
  *(void *)&__int128 v27 = v9;
  uint64_t v15 = sub_10050989C((uint64_t)v30, &v27, a3);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = _swiftEmptyArrayStorage;
  }
  uint64_t v17 = v16[2];
  if (v17)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v17);
    uint64_t v18 = 0LL;
    do
    {
      uint64_t v19 = v18 + 1;
      id v20 = [objc_allocWithZone(NSNumber) initWithUnsignedLongLong:v16[v18 + 4]];
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v20);
      uint64_t v21 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v21);
      uint64_t v22 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v20);
      specialized ContiguousArray._endMutation()(v22);
      uint64_t v18 = v19;
    }

    while (v17 != v19);
  }

  swift_bridgeObjectRelease();
  a5(_swiftEmptyArrayStorage, 0LL);
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v27);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v30);
}

void sub_1001AFCB4(uint64_t a1, uint64_t a2)
{
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v4 = (void *)sub_1006A0E1C(v38);
  swift_bridgeObjectRelease();
  uint64_t v5 = SPServiceStateEnabled;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v8 = v7;
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  if (v6 == v9 && v8 == v10)
  {

    uint64_t v13 = swift_bridgeObjectRelease_n(v8, 2LL);
  }

  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v9, v10, 0LL);

    swift_bridgeObjectRelease();
    uint64_t v13 = swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      uint64_t v14 = static os_log_type_t.default.getter(v13);
      if (qword_10099B180 != -1) {
        swift_once(&qword_10099B180, sub_100189C90);
      }
      os_log(_:dso:log:_:_:)( v14,  &_mh_execute_header,  qword_100A2A2A8,  "BA service not enabled - not persisting connections.",  52LL,  2LL,  _swiftEmptyArrayStorage);
      goto LABEL_20;
    }
  }

  if (!*(void *)(a1 + 176))
  {
    uint64_t v29 = static os_log_type_t.error.getter(v13);
    if (qword_10099B180 != -1) {
      swift_once(&qword_10099B180, sub_100189C90);
    }
    os_log(_:dso:log:_:_:)( v29,  &_mh_execute_header,  qword_100A2A2A8,  "Persisting connections disabled - missing observer.",  51LL,  2LL,  _swiftEmptyArrayStorage);
LABEL_20:
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) == 0)
    {
LABEL_25:
      sub_100022898(0LL, (unint64_t *)&unk_1009A0B20, &OBJC_CLASS___SPBeacon_ptr);
      sub_1001B33FC();
      goto LABEL_26;
    }

void sub_1001B015C( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10)
{
  uint64_t v79 = a5;
  uint64_t v80 = a8;
  uint64_t v77 = a7;
  uint64_t v81 = a3;
  uint64_t v82 = a6;
  int v88 = a2;
  uint64_t v89 = a4;
  uint64_t v90 = a9;
  uint64_t v11 = sub_100004AEC(&qword_1009AA840);
  __chkstk_darwin(v11);
  uint64_t v85 = (uint64_t)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v87 = type metadata accessor for LostModeRecord(0LL);
  uint64_t v84 = *(void *)(v87 - 8);
  uint64_t v13 = __chkstk_darwin(v87);
  uint64_t v76 = (uint64_t)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v86 = (char *)&v75 - v16;
  __chkstk_darwin(v15);
  uint64_t v78 = (uint64_t)&v75 - v17;
  uint64_t v18 = sub_100004AEC(&qword_1009AA830);
  __chkstk_darwin(v18);
  uint64_t v83 = (uint64_t)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for UUID(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  _Block_copy(a10);
  uint64_t v91 = a10;
  uint64_t v24 = _Block_copy(a10);
  uint64_t v25 = static os_log_type_t.default.getter(v24);
  if (qword_10099B778 != -1) {
    swift_once(&qword_10099B778, sub_1006516DC);
  }
  uint64_t v26 = qword_100A2B088;
  uint64_t v27 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v28 = swift_allocObject(v27, 72LL, 7LL);
  __int128 v75 = xmmword_1007E67D0;
  *(_OWORD *)(v28 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v29 = UUID.uuidString.getter(v28);
  uint64_t v92 = a1;
  uint64_t v31 = v30;
  *(void *)(v28 + 56) = &type metadata for String;
  unint64_t v32 = sub_1000226F4();
  *(void *)(v28 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v32;
  *(void *)(v28 + 32) = v29;
  *(void *)(v28 + 40) = v31;
  uint64_t v33 = v92;
  os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v26, "Command lost mode uuid: %@", 26LL, 2LL, v28);
  swift_bridgeObjectRelease();
  uint64_t v34 = v90;
  sub_100504C28(v33, (uint64_t)v93);
  uint64_t v35 = v94;
  sub_100015794((uint64_t)v93, (uint64_t *)&unk_1009A9C40);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, v33, v20);
  if (v35)
  {
    uint64_t v36 = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  }

  else
  {
    uint64_t v37 = v83;
    sub_10050F124((uint64_t)v23, v83);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
    uint64_t v38 = type metadata accessor for OwnedBeaconGroup(0LL);
    int v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 48LL))(v37, 1LL, v38);
    uint64_t v36 = sub_100015794(v37, &qword_1009AA830);
    if (v39 == 1)
    {
      uint64_t v40 = static os_log_type_t.error.getter(v36);
      if (qword_10099B720 != -1) {
        swift_once(&qword_10099B720, sub_10065128C);
      }
      uint64_t v41 = qword_100A2B030;
      uint64_t v42 = swift_allocObject(v27, 72LL, 7LL);
      *(_OWORD *)(v42 + swift_weakDestroy(v0 + 16) = v75;
      uint64_t v43 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter(v20, v43);
      *(void *)(v42 + 56) = &type metadata for String;
      *(void *)(v42 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v32;
      *(void *)(v42 + 32) = v44;
      *(void *)(v42 + 40) = v45;
      os_log(_:dso:log:_:_:)( v40,  &_mh_execute_header,  v41,  "Could not find beacon/group for given UUID - %@",  47LL,  2LL,  v42);
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
  }

  uint64_t v46 = v89;
  char v47 = v88;
  if ((v88 & 1) != 0 && !v89)
  {
    uint64_t v48 = static os_log_type_t.error.getter(v36);
    os_log(_:dso:log:_:_:)( v48,  &_mh_execute_header,  qword_100A2B088,  "Lost mode cannot be enabled without a message",  45LL,  2LL,  _swiftEmptyArrayStorage);
LABEL_12:
    unint64_t v49 = sub_1001B25CC();
    uint64_t v50 = swift_allocError(&type metadata for BeaconManagerCommandError, v49, 0LL, 0LL);
    *uint64_t v51 = 0;
    uint64_t v52 = (void *)_convertErrorToNSError(_:)(v50);
    unint64_t v53 = (void (**)(void, void))v91;
    (*((void (**)(const void *, void *))v91 + 2))(v91, v52);

    swift_errorRelease(v50);
    goto LABEL_34;
  }

  uint64_t v54 = sub_100577004(v33);
  unint64_t v53 = (void (**)(void, void))v91;
  if (v54[2])
  {
    uint64_t v56 = v84;
    uint64_t v55 = v85;
    sub_10001DC4C( (uint64_t)v54 + ((*(unsigned __int8 *)(v84 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80)),  v85,  type metadata accessor for LostModeRecord);
    uint64_t v57 = 0LL;
    uint64_t v59 = (uint64_t)v86;
    unint64_t v58 = (int *)v87;
  }

  else
  {
    uint64_t v57 = 1LL;
    uint64_t v59 = (uint64_t)v86;
    unint64_t v58 = (int *)v87;
    uint64_t v56 = v84;
    uint64_t v55 = v85;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v56 + 56))(v55, v57, 1LL, v58);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v56 + 48))(v55, 1LL, v58) != 1)
  {
    uint64_t v60 = v78;
    sub_10002218C(v55, v78, type metadata accessor for LostModeRecord);
    uint64_t v61 = (void *)(v60 + v58[9]);
    uint64_t v62 = v61[1];
    if (v62)
    {
      if (v46)
      {
        if (*v61 != v81 || v62 != v46)
        {
          char v63 = _stringCompareWithSmolCheck(_:_:expecting:)(*v61, v62, v81, v46, 0LL);
          sub_10001DC4C(v60, v59, type metadata accessor for LostModeRecord);
          if ((v63 & 1) == 0) {
            goto LABEL_26;
          }
          goto LABEL_36;
        }

uint64_t sub_1001B0990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100004AEC(&qword_1009AA830);
  __chkstk_darwin(v7);
  uint64_t v9 = &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = &v25[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_10050F124(a1, (uint64_t)v9);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10) == 1)
  {
    sub_100015794((uint64_t)v9, &qword_1009AA830);
    unint64_t v14 = sub_10014A2C0();
    uint64_t v15 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v14, 0LL, 0LL);
    *uint64_t v16 = 1;
    uint64_t v17 = (void *)_convertErrorToNSError(_:)(v15);
    (*(void (**)(uint64_t, void *))(a4 + 16))(a4, v17);

    return swift_errorRelease(v15);
  }

  else
  {
    uint64_t v19 = sub_10002218C((uint64_t)v9, (uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
    uint64_t v20 = *(void *)&v13[*(int *)(v10 + 40)];
    __chkstk_darwin(v19);
    *(void *)&v25[-16] = v13;
    *(void *)&v25[-8] = a2;
    swift_bridgeObjectRetain(v20);
    sub_10018903C( (uint64_t)_swiftEmptyArrayStorage,  (void (*)(uint64_t *, void *))sub_1001B3454,  (uint64_t)&v25[-32],  v20);
    swift_bridgeObjectRelease();
    unint64_t v21 = sub_1001B346C();
    uint64_t v22 = swift_allocError(&type metadata for ClassicPairingSupport.Error, v21, 0LL, 0LL);
    *uint64_t v23 = 0;
    uint64_t v24 = (void *)_convertErrorToNSError(_:)(v22);
    (*(void (**)(uint64_t, void *))(a4 + 16))(a4, v24);

    swift_errorRelease(v22);
    swift_bridgeObjectRelease();
    return sub_100018C68((uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
  }

uint64_t sub_1001B0BAC(uint64_t a1)
{
  uint64_t v60 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v61 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v62 = (char *)&v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v3);
  uint64_t v63 = (uint64_t)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v5);
  uint64_t v72 = (uint64_t)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v70 = *(void *)(v7 - 8);
  uint64_t v71 = v7;
  __chkstk_darwin(v7);
  uint64_t v64 = (uint64_t)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v68 = *(void *)(v9 - 8);
  uint64_t v69 = v9;
  __chkstk_darwin(v9);
  uint64_t v67 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v65 = *(void *)(v11 - 8);
  uint64_t v66 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v74 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v74 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v16 = __chkstk_darwin(v74);
  uint64_t v59 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v56 - v18;
  uint64_t v20 = static os_log_type_t.default.getter(v17);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v21 = qword_100A2B030;
  uint64_t v22 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v23 = swift_allocObject(v22, 72LL, 7LL);
  __int128 v58 = xmmword_1007E67D0;
  *(_OWORD *)(v23 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v24 = UUID.uuidString.getter(v23);
  uint64_t v26 = v25;
  *(void *)(v23 + 56) = &type metadata for String;
  *(void *)(v23 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1000226F4();
  *(void *)(v23 + 32) = v24;
  *(void *)(v23 + 40) = v26;
  os_log(_:dso:log:_:_:)( v20,  &_mh_execute_header,  v21,  "SoundPlaybackCoordinator reported allCommandsCompleted %@.",  58LL,  2LL,  v23);
  swift_bridgeObjectRelease();
  uint64_t v27 = v73;
  uint64_t v28 = v74;
  uint64_t v57 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v57(v19, a1, v74);
  uint64_t v29 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v30 = (v29 + 24) & ~v29;
  uint64_t v31 = swift_allocObject(&unk_100945650, v30 + v15, v29 | 7);
  *(void *)(v31 + swift_weakDestroy(v0 + 16) = v27;
  uint64_t v56 = *(void (**)(uint64_t, char *, uint64_t))(v14 + 32);
  v56(v31 + v30, v19, v28);
  aBlock[4] = sub_1001B125C;
  aBlock[5] = v31;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100945668;
  unint64_t v32 = _Block_copy(aBlock);
  uint64_t v33 = swift_retain();
  static DispatchQoS.unspecified.getter(v33);
  __int128 v75 = _swiftEmptyArrayStorage;
  uint64_t v34 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v35 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v36 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v37 = v67;
  uint64_t v38 = v35;
  uint64_t v39 = v69;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v75, v38, v36, v69, v34);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v37, v32);
  _Block_release(v32);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v37, v39);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v13, v66);
  swift_release();
  uint64_t v40 = v72;
  sub_100504F30(a1, v72);
  uint64_t v41 = v71;
  uint64_t v43 = v64;
  sub_10002218C(v40, v64, type metadata accessor for OwnedBeaconRecord);
  uint64_t v44 = v43 + *(int *)(v41 + 28);
  uint64_t v45 = v63;
  sub_10001581C(v44, v63, &qword_10099D8A0);
  uint64_t v46 = v74;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v45, 1LL, v74) == 1)
  {
    sub_100018C68(v43, type metadata accessor for OwnedBeaconRecord);
    return sub_100015794(v45, &qword_10099D8A0);
  }

  else
  {
    uint64_t v73 = v14;
    char v47 = v59;
    v56((uint64_t)v59, (char *)v45, v46);
    if (qword_10099B300 != -1) {
      swift_once(&qword_10099B300, sub_1003459EC);
    }
    uint64_t v48 = qword_100A2A6C8;
    uint64_t v49 = (uint64_t)v62;
    v57(v62, (uint64_t)v47, v46);
    uint64_t v50 = v60;
    static Date.trustedNow.getter(v49 + *(int *)(v60 + 20));
    *(_BYTE *)(v49 + *(int *)(v50 + swift_release(*(void *)(v0 + 24)) = 29;
    uint64_t v51 = sub_100004AEC(&qword_10099D318);
    uint64_t v52 = *(unsigned __int8 *)(v61 + 80);
    uint64_t v53 = (v52 + 32) & ~v52;
    uint64_t v54 = swift_allocObject(v51, v53 + *(void *)(v61 + 72), v52 | 7);
    *(_OWORD *)(v54 + swift_weakDestroy(v0 + 16) = v58;
    sub_10001DC4C(v49, v54 + v53, type metadata accessor for BeaconObservation);
    uint64_t v55 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v55);
    *(&v56 - _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = (void (*)(uint64_t, char *, uint64_t))v48;
    *(&v56 - 3) = (void (*)(uint64_t, char *, uint64_t))v54;
    *(&v56 - 2) = 0LL;
    *(&v56 - 1) = 0LL;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.BeaconObservationStore.save",  57LL,  2LL,  sub_1000DF788);
    swift_bridgeObjectRelease();
    sub_100018C68(v49, type metadata accessor for BeaconObservation);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v47, v46);
    return sub_100018C68(v43, type metadata accessor for OwnedBeaconRecord);
  }

uint64_t sub_1001B125C()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  return sub_1001A4238(*(void *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_1001B128C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001B129C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1001B12A4(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009A4890);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = static os_log_type_t.default.getter(v3);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v7 = qword_100A2B030;
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v10 = UUID.uuidString.getter(v9);
  uint64_t v12 = v11;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1000226F4();
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = v12;
  os_log(_:dso:log:_:_:)( v6,  &_mh_execute_header,  v7,  "SoundPlaybackCoordinator reported soundPlaybackStateChanged %@.",  63LL,  2LL,  v9);
  swift_bridgeObjectRelease();
  sub_10050BDEC(a1, (uint64_t)v5);
  uint64_t v13 = type metadata accessor for WildModeAssociationRecord(0LL);
  int v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48LL))(v5, 1LL, v13);
  sub_100015794((uint64_t)v5, &qword_1009A4890);
  if (v14 == 1) {
    return sub_1004E696C(0xAu);
  }
  else {
    return sub_1004E97E0();
  }
}

void *sub_1001B142C(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[8];
  swift_bridgeObjectRetain(a1[6]);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

void *sub_1001B1498(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[6];
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t sub_1001B1504(void *a1, uint64_t a2)
{
  return sub_100193D08(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_1001B1524()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc(dword_1009AA704);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100015D58;
  return sub_10035A1CC(v2, v0 + 24);
}

uint64_t sub_1001B1580()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001B1590@<X0>(void *a1@<X8>)
{
  return sub_100199358(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

unint64_t sub_1001B15A8()
{
  unint64_t result = qword_1009A48B8;
  if (!qword_1009A48B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FF328, &_s13DefaultPolicyVN);
    atomic_store(result, (unint64_t *)&qword_1009A48B8);
  }

  return result;
}

uint64_t sub_1001B15EC()
{
  return swift_deallocObject(v0, 97LL, 7LL);
}

uint64_t sub_1001B1620()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001B164C(uint64_t a1)
{
  return sub_1001998F4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001B1654()
{
  uint64_t v1 = type metadata accessor for LocationFetcher(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + v4 + 24));
  uint64_t v7 = v0 + v4 + *(int *)(v1 + 32);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001B1720()
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for LocationFetcher(0LL) - 8) + 80LL);
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = (uint64_t)v0 + ((v2 + 40) & ~v2);
  uint64_t v7 = (void *)swift_task_alloc(dword_1009A65DC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_1000159BC;
  return sub_10021FF4C(v3, v4, v5, v6);
}

void *sub_1001B17A0(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[6];
  swift_bridgeObjectRetain(a1[5]);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_1001B17E8()
{
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 40));
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_1001B1824(uint64_t a1)
{
  return sub_100197518(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), v1 + 40);
}

uint64_t sub_1001B1834(uint64_t a1)
{
  return sub_100199CB8(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_1001B1854()
{
  return sub_1001B23E8((void (*)(void))&_swift_release, (void (*)(void))&_swift_release);
}

uint64_t sub_1001B1864(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v1 + 24);
  Transaction.capture()();
  return v3(a1);
}

uint64_t sub_1001B18A4(uint64_t a1)
{
  return sub_100197BA0( a1,  *(dispatch_group_t *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void **)(v1 + 40),  *(void *)(v1 + 48));
}

uint64_t sub_1001B18C4()
{
  return sub_1001B1A38((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_1001B18D0()
{
}

uint64_t sub_1001B18DC()
{
  return sub_1001B23E8( (void (*)(void))&_swift_unknownObjectRelease,  (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1001B18F0()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc(dword_1009A48CC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100015D58;
  v3[15] = v2;
  return swift_task_switch(sub_1001A6228, 0LL, 0LL);
}

uint64_t sub_1001B1950()
{
  swift_release(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1001B198C(uint64_t a1)
{
  return sub_100197C58(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

void *sub_1001B1998(void *a1)
{
  return a1;
}

void *sub_1001B19C0(void *a1)
{
  return a1;
}

void *sub_1001B19E8(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[5];
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t sub_1001B1A2C()
{
  return sub_1001B1A38((void (*)(void))&_swift_release);
}

uint64_t sub_1001B1A38(void (*a1)(void))
{
  a1(*(void *)(v1 + 24));
  swift_bridgeObjectRelease(*(void *)(v1 + 32));
  swift_release(*(void *)(v1 + 40));
  return swift_deallocObject(v1, 48LL, 7LL);
}

void sub_1001B1A80()
{
}

uint64_t sub_1001B1A8C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100195DC4(*(void *)(v1 + 16), *(void *)(v1 + 32), *(void *)(v1 + 40), a1, *(double *)(v1 + 24));
}

uint64_t sub_1001B1AAC(void *a1)
{
  return sub_100195FD8(a1, *(void *)(v1 + 24), *(void *)(v1 + 32), *(double *)(v1 + 16)) & 1;
}

void sub_1001B1ACC()
{
}

uint64_t sub_1001B1AE8@<X0>(uint64_t a1@<X8>)
{
  return sub_100508878(*(void *)(v1 + 24), a1);
}

uint64_t sub_1001B1B00(uint64_t a1)
{
  return sub_100193E30(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t sub_1001B1B1C@<X0>(uint64_t a1@<X8>)
{
  return sub_1005088CC(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1001B1B34()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001B1B58(uint64_t a1)
{
  return sub_1001A52B4( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void (**)(void, void))(v1 + 40),  *(void *)(v1 + 48));
}

unint64_t sub_1001B1B7C(uint64_t a1)
{
  return sub_1001A5848( a1,  *(void *)(v1 + 16),  *(void (**)(void, void))(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40));
}

unint64_t sub_1001B1B88(unint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return sub_1000A4D68(result);
  }
  else {
    return swift_release();
  }
}

unint64_t sub_1001B1B94(unint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return sub_1000A4D58(result);
  }
  else {
    return swift_retain();
  }
}

uint64_t sub_1001B1BA0()
{
  return sub_1001B23E8( (void (*)(void))&_swift_unknownObjectRelease,  (void (*)(void))&_swift_release);
}

unint64_t sub_1001B1BB4(uint64_t a1)
{
  return sub_1001A5D98(a1, *(void *)(v1 + 16), *(void (**)(void))(v1 + 24));
}

uint64_t sub_1001B1BC4()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_1001B1BF8(uint64_t a1)
{
}

uint64_t sub_1001B1C04()
{
  return sub_1001B23E8( (void (*)(void))&_swift_unknownObjectRelease,  (void (*)(void))&_swift_release);
}

void sub_1001B1C18(uint64_t a1)
{
}

uint64_t sub_1001B1C24()
{
  uint64_t v1 = *(void *)(sub_100004AEC((uint64_t *)&unk_10099D720) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 16, v2 | 7);
}

uint64_t sub_1001B1D04()
{
  uint64_t v1 = *(void *)(sub_100004AEC((uint64_t *)&unk_10099D720) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_10018BCEC( v0[2],  v0[3],  v0[4],  (uint64_t)v0 + v2,  *(uint64_t *)((char *)v0 + v3),  *(uint64_t *)((char *)v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(uint64_t *)((char *)v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_1001B1D60(uint64_t a1)
{
  return sub_100191A58(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t sub_1001B1D78()
{
  unint64_t result = qword_1009AA8E0;
  if (!qword_1009AA8E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EF2A8, &type metadata for LocationSource);
    atomic_store(result, (unint64_t *)&qword_1009AA8E0);
  }

  return result;
}

uint64_t sub_1001B1DBC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1001B1DF0()
{
  return sub_100191C6C(v0[2], v0[3], v0[4]);
}

uint64_t sub_1001B1DFC()
{
  uint64_t v1 = *(void *)(sub_100004AEC((uint64_t *)&unk_10099D720) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject( v0,  ((((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 16,  v2 | 7);
}

uint64_t sub_1001B1EEC(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_100004AEC((uint64_t *)&unk_10099D720) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = *(void *)((char *)v1 + v5);
  uint64_t v11 = *(void *)((char *)v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v12 = (uint64_t)v1 + v4;
  uint64_t v13 = (void *)swift_task_alloc(dword_1009A4984);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v13;
  void *v13 = v2;
  v13[1] = sub_1000159BC;
  return sub_10018C580(a1, v6, v7, v8, v9, v12, v10, v11);
}

unint64_t sub_1001B1FD4()
{
  return sub_100191864( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void **)(v0 + 40),  *(void **)(v0 + 48),  *(void **)(v0 + 56));
}

id sub_1001B1FE4()
{
  return sub_1001910E8( *(double *)(v0 + 24),  *(double *)(v0 + 80),  *(double *)(v0 + 88),  *(void *)(v0 + 16),  *(void **)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56),  *(void **)(v0 + 64),  *(void **)(v0 + 72),  *(void **)(v0 + 96),  *(void **)(v0 + 104));
}

uint64_t sub_1001B2020()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1001B2044()
{
  return sub_10018A418(*(void **)(v0 + 16), v0 + 24);
}

uint64_t sub_1001B2050()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001B2064(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 56) & ~v5;
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = v1[5];
  uint64_t v11 = v1[6];
  uint64_t v12 = (uint64_t)v1 + v6;
  uint64_t v13 = (uint64_t)v1 + ((*(void *)(v4 + 64) + v5 + v6) & ~v5);
  int v14 = (void *)swift_task_alloc(dword_1009A4994);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v14;
  *int v14 = v2;
  v14[1] = sub_100015D58;
  return sub_1001A2B44(a1, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_1001B2128()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  uint64_t v8 = v7 + v5;
  swift_unknownObjectRelease(*((void *)v0 + 2));
  swift_release(*((void *)v0 + 4));
  swift_release(*((void *)v0 + 6));
  uint64_t v9 = *(void (**)(char *, uint64_t))(v2 + 8);
  v9(&v0[v4], v1);
  v9(&v0[v7], v1);
  return swift_deallocObject(v0, v8, v6);
}

uint64_t sub_1001B21CC(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 56) & ~v5;
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = v1[5];
  uint64_t v11 = v1[6];
  uint64_t v12 = (uint64_t)v1 + v6;
  uint64_t v13 = (uint64_t)v1 + ((*(void *)(v4 + 64) + v5 + v6) & ~v5);
  int v14 = (void *)swift_task_alloc(dword_1009A49A4);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v14;
  *int v14 = v2;
  v14[1] = sub_100015D58;
  return sub_1001A34E8(a1, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_1001B228C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001B22B0()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  unint64_t v8 = (((v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 16));
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  swift_release(*(void *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v6);
}

uint64_t sub_1001B2364()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = (v4 + v2 + v3) & ~v2;
  return sub_10019EFC8( *(void **)(v0 + 16),  v0 + v3,  v0 + v5,  *(void *)(v0 + ((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v0 + ((((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v0 + ((((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_1001B23CC()
{
  return sub_1001B255C((uint64_t (*)(void, uint64_t, uint64_t, void, void))sub_10019F648);
}

uint64_t sub_1001B23D8()
{
  return sub_1001B23E8((void (*)(void))&_swift_release, (void (*)(void))&_swift_release);
}

uint64_t sub_1001B23E8(void (*a1)(void), void (*a2)(void))
{
  return swift_deallocObject(v2, 40LL, 7LL);
}

uint64_t sub_1001B2424(uint64_t a1)
{
  return sub_10019F7E0(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1001B2430()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001B2454@<X0>(uint64_t a1@<X8>)
{
  return sub_1005A5FC0(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1001B246C(uint64_t a1)
{
  return sub_10019F2E0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001B2474()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1001B24A4()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  unint64_t v8 = (v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 16));
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  swift_release(*(void *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v6);
}

uint64_t sub_1001B2550()
{
  return sub_1001B255C(sub_10019FF44);
}

uint64_t sub_1001B255C(uint64_t (*a1)(void, uint64_t, uint64_t, void, void))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  return a1( *(void *)(v1 + 16),  v1 + v4,  v1 + ((v5 + v3 + v4) & ~v3),  *(void *)(v1 + ((v5 + ((v5 + v3 + v4) & ~v3) + 7) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v1 + ((v5 + ((v5 + v3 + v4) & ~v3) + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_1001B25C4(uint64_t a1)
{
  return sub_1001A02F4(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

unint64_t sub_1001B25CC()
{
  unint64_t result = qword_1009A49B8;
  if (!qword_1009A49B8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for BeaconManagerCommandError,  &type metadata for BeaconManagerCommandError);
    atomic_store(result, &qword_1009A49B8);
  }

  return result;
}

uint64_t sub_1001B2610(uint64_t a1)
{
  return sub_1001A2978(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_1001B2618(uint64_t a1)
{
  return sub_1001A2A94(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1001B2624(uint64_t a1)
{
  return sub_1001B26F4( a1,  "Connect to %{private,mask.hash}s failed with error %{public}s. CommandId: %{public}s",  "Connect to %{private,mask.hash}s completed successfully. CommandId: %{public}s.");
}

uint64_t sub_1001B263C()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  unint64_t v8 = (v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  swift_release(*(void *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v6);
}

uint64_t sub_1001B26E0(uint64_t a1)
{
  return sub_1001B26F4( a1,  "Disconnect from %{private,mask.hash}s failed with error %{public}s. CommandId: %{public}s",  "Disconnect from %{private,mask.hash}s completed successfully. CommandId: %{public}s.");
}

uint64_t sub_1001B26F4(uint64_t a1, const char *a2, const char *a3)
{
  uint64_t v7 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v8 + 16) & ~v8;
  uint64_t v10 = *(void *)(v7 + 64);
  return sub_1001A233C( a1,  v3 + v9,  v3 + ((v10 + v8 + v9) & ~v8),  *(void (**)(uint64_t))(v3 + ((v10 + ((v10 + v8 + v9) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v3 + ((v10 + ((v10 + v8 + v9) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8),  a2,  a3);
}

uint64_t sub_1001B2774()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001B27F0()
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = (uint64_t)v0 + ((v2 + 40) & ~v2);
  uint64_t v7 = (void *)swift_task_alloc(dword_1009A49C4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_100015D58;
  return sub_1001A0774(v3, v4, v5, v6);
}

uint64_t sub_1001B287C()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v0[2];
  uint64_t v6 = v0[3];
  uint64_t v7 = v0[4];
  uint64_t v8 = (uint64_t)v0 + v4;
  uint64_t v9 = (uint64_t)v0 + ((*(void *)(v2 + 64) + v3 + v4) & ~v3);
  uint64_t v10 = (void *)swift_task_alloc(dword_1009A49D4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v10;
  *uint64_t v10 = v1;
  v10[1] = sub_100015D58;
  return sub_10019B924(v5, v6, v7, v8, v9);
}

uint64_t sub_1001B2924()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  uint64_t v8 = v7 + v5;
  swift_release(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 32));
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  return swift_deallocObject(v0, v8, v6);
}

uint64_t sub_1001B29C0()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v0[2];
  uint64_t v6 = v0[3];
  uint64_t v7 = v0[4];
  uint64_t v8 = (uint64_t)v0 + v4;
  uint64_t v9 = (uint64_t)v0 + ((*(void *)(v2 + 64) + v3 + v4) & ~v3);
  uint64_t v10 = (void *)swift_task_alloc(dword_1009A49E4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v10;
  *uint64_t v10 = v1;
  v10[1] = sub_100015D58;
  return sub_10019D2A4(v5, v6, v7, v8, v9);
}

uint64_t sub_1001B2A64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  return sub_1005EA75C(v1 + ((v3 + 24) & ~v3), a1);
}

uint64_t sub_1001B2AA4()
{
  uint64_t v1 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v29 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v3 = (v29 + 24) & ~v29;
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v6 = *((void *)v5 - 1);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v3 + v4 + v7) & ~v7;
  uint64_t v28 = *(void *)(v6 + 64);
  swift_release();
  uint64_t v9 = v0 + v3;
  sub_100016F9C(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v10 = v0 + v3 + *(int *)(v1 + 24);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v13(v10, v11);
  uint64_t v14 = v9 + *(int *)(v1 + 28);
  uint64_t v15 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = v0 + v8;
  sub_100016F9C(*(void *)(v0 + v8), *(void *)(v0 + v8 + 8));
  v13(v0 + v8 + v5[5], v11);
  uint64_t v17 = v0 + v8 + v5[6];
  uint64_t v18 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v17, v18))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v13(v17, v11);
      uint64_t v27 = v8;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v13(v17, v11);
      uint64_t v27 = v8;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v8 = v27;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v19 = v16 + v5[7];
  uint64_t v20 = v16 + v5[8];
  uint64_t v21 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8LL))(v20, v21);
  sub_100016F9C(*(void *)(v16 + v5[9]), *(void *)(v16 + v5[9] + 8));
  uint64_t v22 = (uint64_t *)(v16 + v5[10]);
  unint64_t v23 = v22[1];
  if (v23 >> 60 != 15) {
    sub_100016F9C(*v22, v23);
  }
  uint64_t v24 = (uint64_t *)(v16 + v5[11]);
  unint64_t v25 = v24[1];
  if (v25 >> 60 != 15) {
    sub_100016F9C(*v24, v25);
  }
  sub_100016F9C(*(void *)(v16 + v5[12]), *(void *)(v16 + v5[12] + 8));
  sub_100016F9C(*(void *)(v16 + v5[13]), *(void *)(v16 + v5[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v28 + v8 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16, v29 | v7 | 7);
}

uint64_t sub_1001B2DF0(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconGroup(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = v1 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_10019A4A8( a1,  *(void *)(v1 + 16),  v1 + v4,  v1 + v7,  *(void (**)(uint64_t))v8,  *(void *)(v8 + 8));
}

uint64_t sub_1001B2E74()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1001B310C(uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8) + 80LL);
  return sub_10019A5B8(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_1001B3148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10019A620(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_1001B3160(uint64_t a1)
{
  return sub_1007AC074( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(unsigned __int8 *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48));
}

uint64_t sub_1001B3184()
{
  return swift_deallocObject(v0, 113LL, 7LL);
}

uint64_t sub_1001B31DC()
{
  uint64_t Configuration = type metadata accessor for LocationFetchConfiguration(0LL);
  uint64_t v2 = *(void *)(Configuration - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 128) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v7 = v0 + *(int *)(Configuration + 28) + v4;
  uint64_t v8 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001B32A0()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for LocationFetchConfiguration(0LL) - 8) + 80LL);
  return sub_100193FF8( (unsigned __int8 *)(v0 + 16),  *(void *)(v0 + 112),  *(void *)(v0 + 120),  v0 + ((v1 + 128) & ~v1));
}

uint64_t sub_1001B32D4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001B32E4()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  uint64_t v6 = *(void *)(v2 + 64) + v4 + 1;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 40));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1001B3364()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0 + v3;
  char v5 = *(_BYTE *)(v0 + v3 + *(void *)(v2 + 64));
  uint64_t v6 = swift_task_alloc(dword_1009A4A04);
  __int128 v7 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v6;
  *(void *)uint64_t v6 = v1;
  *(void *)(v6 + 8) = sub_100015D58;
  *(_BYTE *)(v6 + 192) = v5;
  *(void *)(v6 + 152) = v4;
  *(_OWORD *)(v6 + 136) = v7;
  return swift_task_switch(sub_10019B154, 0LL, 0LL);
}

unint64_t sub_1001B33FC()
{
  unint64_t result = qword_1009A4A10;
  if (!qword_1009A4A10)
  {
    uint64_t v1 = sub_100022898(255LL, (unint64_t *)&unk_1009A0B20, &OBJC_CLASS___SPBeacon_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1009A4A10);
  }

  return result;
}

uint64_t sub_1001B3454(void *a1, uint64_t *a2)
{
  return sub_1001A3F60(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

unint64_t sub_1001B346C()
{
  unint64_t result = qword_1009A4A18;
  if (!qword_1009A4A18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EED84, &type metadata for ClassicPairingSupport.Error);
    atomic_store(result, &qword_1009A4A18);
  }

  return result;
}

uint64_t sub_1001B34B0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100012ED8(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for BeaconKeyService.KeyStreamChange(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for BeaconKeyService.KeyStreamChange(void *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t *assignWithCopy for BeaconKeyService.KeyStreamChange(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t *assignWithTake for BeaconKeyService.KeyStreamChange(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for BeaconKeyService.KeyStreamChange(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 8)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BeaconKeyService.KeyStreamChange(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *_s10FetchGroupOMa()
{
  return &_s10FetchGroupON;
}

uint64_t sub_1001B36AC@<X0>(uint64_t a1@<X8>)
{
  return sub_1001B2454(a1);
}

uint64_t sub_1001B36C4(void *a1, uint64_t a2)
{
  return sub_1001B1504(a1, a2);
}

uint64_t *sub_1001B36D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v12);
  }

  else
  {
    uint64_t v7 = type metadata accessor for ServerStatusCode(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain(v11);
  }

  return a1;
}

uint64_t sub_1001B376C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ServerStatusCode(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t sub_1001B37B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ServerStatusCode(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_1001B381C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ServerStatusCode(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t sub_1001B3898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ServerStatusCode(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1001B38F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ServerStatusCode(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v12 = v8[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_1001B3960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001B396C);
}

uint64_t sub_1001B396C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ServerStatusCode(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_1001B39EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001B39F8);
}

uint64_t sub_1001B39F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ServerStatusCode(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for LostModeResponse(uint64_t a1)
{
  uint64_t result = qword_1009A4A80;
  if (!qword_1009A4A80) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LostModeResponse);
  }
  return result;
}

uint64_t sub_1001B3AB0(uint64_t a1)
{
  uint64_t result = type metadata accessor for ServerStatusCode(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_1007F47F8;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1001B3B20@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v28 = type metadata accessor for ServerStatusCode(0LL);
  uint64_t v26 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v29 = (uint64_t *)((char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v27 = sub_100004AEC(&qword_1009A4AB8);
  uint64_t v5 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for LostModeResponse(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v11 = a1[4];
  sub_100012ED8(a1, v12);
  unint64_t v13 = sub_1001B3E4C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for LostModeResponse.CodingKeys,  &type metadata for LostModeResponse.CodingKeys,  v13,  v12,  v11);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v24 = v5;
  uint64_t v14 = (uint64_t)v10;
  uint64_t v15 = v26;
  char v31 = 0;
  unint64_t v16 = sub_1001B3E90();
  uint64_t v17 = v28;
  uint64_t v18 = v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v29, v28, &v31, v27, v28, v16);
  (*(void (**)(uint64_t, void *, uint64_t))(v15 + 32))(v14, v29, v17);
  char v30 = 1;
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v18);
  uint64_t v21 = v20;
  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v18);
  uint64_t v22 = (uint64_t *)(v14 + *(int *)(v8 + 20));
  *uint64_t v22 = v19;
  v22[1] = v21;
  sub_1001B3ED8(v14, v25);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return sub_1001B3F1C(v14);
}

uint64_t sub_1001B3D78()
{
  if (*v0) {
    return 0x4D6572756C696166LL;
  }
  else {
    return 0x6F43737574617473LL;
  }
}

uint64_t sub_1001B3DC4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001B40FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001B3DE8(uint64_t a1)
{
  unint64_t v2 = sub_1001B3E4C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B3E10(uint64_t a1)
{
  unint64_t v2 = sub_1001B3E4C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001B3E38@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001B3B20(a1, a2);
}

unint64_t sub_1001B3E4C()
{
  unint64_t result = qword_1009A4AC0;
  if (!qword_1009A4AC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F48FC, &type metadata for LostModeResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4AC0);
  }

  return result;
}

unint64_t sub_1001B3E90()
{
  unint64_t result = qword_1009A4AC8;
  if (!qword_1009A4AC8)
  {
    uint64_t v1 = type metadata accessor for ServerStatusCode(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ServerStatusCode, v1);
    atomic_store(result, (unint64_t *)&qword_1009A4AC8);
  }

  return result;
}

uint64_t sub_1001B3ED8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LostModeResponse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001B3F1C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LostModeResponse(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for LostModeResponse.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 1;
  }
  else {
    LODWORD(v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1001B3FA4 + 4 * byte_1007F47D5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001B3FD8 + 4 * byte_1007F47D0[v4]))();
}

uint64_t sub_1001B3FD8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001B3FE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001B3FE8LL);
  }
  return result;
}

uint64_t sub_1001B3FF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001B3FFCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1001B4000(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001B4008(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LostModeResponse.CodingKeys()
{
  return &type metadata for LostModeResponse.CodingKeys;
}

unint64_t sub_1001B4028()
{
  unint64_t result = qword_1009A4AD0;
  if (!qword_1009A4AD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F48D4, &type metadata for LostModeResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4AD0);
  }

  return result;
}

unint64_t sub_1001B4070()
{
  unint64_t result = qword_1009A4AD8;
  if (!qword_1009A4AD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F4844, &type metadata for LostModeResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4AD8);
  }

  return result;
}

unint64_t sub_1001B40B8()
{
  unint64_t result = qword_1009A4AE0;
  if (!qword_1009A4AE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F486C, &type metadata for LostModeResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4AE0);
  }

  return result;
}

uint64_t sub_1001B40FC(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6F43737574617473LL && a2 == 0xEA00000000006564LL)
  {
    unint64_t v5 = 0xEA00000000006564LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43737574617473LL, 0xEA00000000006564LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x4D6572756C696166LL && a2 == 0xEE00656761737365LL)
  {
    swift_bridgeObjectRelease(0xEE00656761737365LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4D6572756C696166LL, 0xEE00656761737365LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1001B421C(uint64_t a1)
{
  return sub_1001B4264(a1, qword_100A2A2C8, 0xD000000000000014LL, 0x8000000100857CE0LL);
}

uint64_t sub_1001B4240(uint64_t a1)
{
  return sub_1001B4264(a1, qword_100A2A2E0, 0xD000000000000017LL, 0x8000000100857F40LL);
}

uint64_t sub_1001B4264(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v7, a2);
  sub_10000A720(v7, (uint64_t)a2);
  return Logger.init(subsystem:category:)(0xD000000000000010LL, 0x80000001008506D0LL, a3, a4);
}

uint64_t sub_1001B42D8()
{
  uint64_t v0 = type metadata accessor for ServerInteractionControllerKeeper();
  uint64_t v1 = swift_allocObject(v0, 120LL, 15LL);
  uint64_t result = swift_defaultActor_initialize();
  *(void *)(v1 + 112) = _swiftEmptyArrayStorage;
  qword_100A2A2F8 = v1;
  return result;
}

uint64_t sub_1001B431C(uint64_t a1)
{
  int v3 = (void *)(v1 + 112);
  swift_beginAccess(v1 + 112, v24, 0LL, 0LL);
  uint64_t v4 = *(void *)(v1 + 112);
  swift_retain();
  swift_bridgeObjectRetain(v4);
  char v6 = sub_1001BAAE4(v5, a1);
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  if ((v6 & 1) == 0)
  {
    if (qword_10099B198 != -1) {
      swift_once(&qword_10099B198, sub_1001B4240);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    sub_10000A720(v8, (uint64_t)qword_100A2A2E0);
    uint64_t v9 = swift_retain_n(a1, 2LL);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v13 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v12 = 136446210;
      v23[0] = v13;
      uint64_t v14 = type metadata accessor for UUID(0LL);
      uint64_t v15 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter(v14, v15);
      uint64_t v22 = sub_1003F11D4(v16, v17, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, v23, v12 + 4, v12 + 12);
      swift_release_n(a1, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Add new controller %{public}s", v12, 0xCu);
      swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    else
    {

      swift_release_n(a1, 2LL);
    }

    swift_beginAccess(v3, v23, 33LL, 0LL);
    uint64_t v18 = swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v18);
    unint64_t v20 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v19 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v20 >= v19 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1LL);
    }
    uint64_t v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, a1);
    specialized Array._endMutation()(v21);
    return swift_endAccess(v23);
  }

  return result;
}

void sub_1001B45BC()
{
  uint64_t v1 = (uint64_t *)(v0 + 112);
  swift_beginAccess(v0 + 112, &v69, 33LL, 0LL);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(v2);
  if (!v3)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    uint64_t v9 = *v1;
    if ((unint64_t)*v1 >> 62)
    {
      if (v9 < 0) {
        uint64_t v63 = *v1;
      }
      else {
        uint64_t v63 = v9 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*v1);
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v63);
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v4 = *(void *)((v9 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    goto LABEL_12;
  }

uint64_t sub_1001B4E6C()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ServerInteractionControllerKeeper()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd33ServerInteractionControllerKeeper);
}

uint64_t type metadata accessor for ServerInteractionController(uint64_t a1)
{
  return sub_10008BED8(a1, (uint64_t *)&unk_1009A4BE0, (uint64_t)&nominal type descriptor for ServerInteractionController);
}

uint64_t sub_1001B4EC4(uint64_t a1)
{
  uint64_t v2 = qword_100A2A308;
  v5[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v5[1] = "(";
  void v5[2] = &unk_1007F49C8;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v4 <= 0x3F)
  {
    v5[3] = *(void *)(result - 8) + 64LL;
    v5[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v5[5] = &unk_1007F49E0;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 6LL, v5, a1 + v2);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void sub_1001B4F74()
{
  uint64_t v1 = v0 + qword_100A2A300;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
}

uint64_t sub_1001B4FF0()
{
  uint64_t v1 = v0;
  sub_1001B9018();
  uint64_t v2 = swift_retain_n(v0, 2LL);
  uint64_t v3 = (os_log_s *)static OS_os_log.default.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = v1;
    uint64_t v16 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v7 = type metadata accessor for ServerInteractionController(0LL);
    swift_retain();
    uint64_t v8 = String.init<A>(describing:)(&v15, v7);
    uint64_t v15 = sub_1003F11D4(v8, v9, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    swift_release_n(v1, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ServerInteractionController deinit (%s", v5, 0xCu);
    swift_arrayDestroy(v6, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {

    uint64_t v10 = swift_release_n(v1, 2LL);
  }

  uint64_t v11 = FMNServerInteractionController.deinit(v10);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v11 + qword_1009A4BC0));
  swift_unownedRelease(*(void *)(v11 + qword_1009A4BC8));
  uint64_t v12 = v11 + qword_100A2A300;
  uint64_t v13 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(v12, v13);

  return v11;
}

uint64_t sub_1001B51F0()
{
  uint64_t v0 = sub_1001B4FF0();
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_1001B5210(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *v2;
  uint64_t v4 = sub_100004AEC(&qword_1009A9BF0);
  v3[6] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1001B5278, 0LL, 0LL);
}

uint64_t sub_1001B5278()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v5 = *(void **)(v3 + qword_1009A4BD0);
  [v5 lock];
  *(_BYTE *)(v3 + qword_1009A4BD8) = 0;
  [v5 unlock];
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v1, 1LL, 1LL, v6);
  uint64_t v7 = swift_allocObject(&unk_1009462D8, 24LL, 7LL);
  swift_weakInit(v7 + 16, v3);
  uint64_t v8 = (void *)swift_allocObject(&unk_100946440, 40LL, 7LL);
  __int128 v8[2] = 0LL;
  v8[3] = 0LL;
  void v8[4] = v7;
  uint64_t v9 = sub_1003EDB00(v1, (uint64_t)&unk_1009A4D38, (uint64_t)v8);
  swift_release(v9);
  uint64_t v10 = (void *)swift_task_alloc(48LL);
  v0[7] = v10;
  v10[2] = v3;
  v10[3] = v4;
  v10[4] = v2;
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[8] = v11;
  uint64_t v12 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0LL);
  *uint64_t v11 = v0;
  v11[1] = sub_1001B53EC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0[2],  0LL,  0LL,  0x71657228646E6573LL,  0xEE00293A74736575LL,  sub_1001BB178,  v10,  v12);
}

uint64_t sub_1001B53EC()
{
  uint64_t v2 = *(void *)(*v1 + 64);
  uint64_t v3 = *v1;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_1001B546C, 0LL, 0LL);
  }
  uint64_t v5 = *(void *)(v3 + 48);
  swift_task_dealloc(*(void *)(v3 + 56));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1001B546C()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 56));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B54A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v76 = a4;
  uint64_t v71 = a1;
  uint64_t v75 = sub_100004AEC(&qword_1009A4D40);
  uint64_t v74 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  uint64_t v72 = v6;
  uint64_t v73 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for URLComponents(0LL);
  uint64_t v70 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1001B8AE8(a3, (uint64_t)v87);
  uint64_t v77 = a2;
  sub_100013044(a2 + qword_1009A4BC0, (uint64_t)v86);
  if (qword_10099B190 != -1) {
    swift_once(&qword_10099B190, sub_1001B421C);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = sub_10000A720(v13, (uint64_t)qword_100A2A2C8);
  sub_100013044((uint64_t)v86, (uint64_t)&v83);
  uint64_t v15 = sub_100013044((uint64_t)v87, (uint64_t)v80);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.info.getter(v16);
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v69 = v10;
  if (v18)
  {
    uint64_t v19 = swift_slowAlloc(22LL, -1LL);
    uint64_t v67 = v14;
    uint64_t v20 = v19;
    uint64_t v21 = swift_slowAlloc(64LL, -1LL);
    uint64_t v79 = v21;
    *(_DWORD *)uint64_t v20 = 136315394;
    uint64_t v68 = v9;
    uint64_t v22 = v84;
    uint64_t v23 = v85;
    sub_100012ED8(&v83, v84);
    dispatch thunk of FMNRequestConfigurating.urlComponents.getter(v22, v23);
    uint64_t v24 = sub_100007864( &qword_1009A4D08,  (uint64_t (*)(uint64_t))&type metadata accessor for URLComponents,  (uint64_t)&protocol conformance descriptor for URLComponents);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter(v10, v24);
    unint64_t v27 = v26;
    (*(void (**)(char *, uint64_t))(v70 + 8))(v12, v10);
    uint64_t v78 = sub_1003F11D4(v25, v27, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v83);
    *(_WORD *)(v20 + 12) = 2080;
    uint64_t v29 = v81;
    uint64_t v28 = v82;
    sub_100012ED8(v80, v81);
    uint64_t v30 = dispatch thunk of FMNRequestContentRepresentable.headerDictionary.getter(v29, v28);
    uint64_t v31 = Dictionary.description.getter( v30,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
    unint64_t v33 = v32;
    swift_bridgeObjectRelease();
    uint64_t v78 = sub_1003F11D4(v31, v33, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v20 + 14, v20 + 22);
    uint64_t v9 = v68;
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v80);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "SendRequest: %s headerDictionary - %s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy(v21, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v83);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v80);
  }

  sub_100013044((uint64_t)v86, (uint64_t)&v83);
  uint64_t v34 = sub_100013044((uint64_t)v87, (uint64_t)v80);
  unint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
  os_log_type_t v36 = static os_log_type_t.info.getter(v35);
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = swift_slowAlloc(22LL, -1LL);
    uint64_t v38 = swift_slowAlloc(64LL, -1LL);
    uint64_t v79 = v38;
    *(_DWORD *)uint64_t v37 = 136315394;
    uint64_t v39 = v84;
    uint64_t v40 = v85;
    sub_100012ED8(&v83, v84);
    dispatch thunk of FMNRequestConfigurating.urlComponents.getter(v39, v40);
    uint64_t v41 = sub_100007864( &qword_1009A4D08,  (uint64_t (*)(uint64_t))&type metadata accessor for URLComponents,  (uint64_t)&protocol conformance descriptor for URLComponents);
    uint64_t v42 = v69;
    uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter(v69, v41);
    unint64_t v45 = v44;
    (*(void (**)(char *, uint64_t))(v70 + 8))(v12, v42);
    uint64_t v78 = sub_1003F11D4(v43, v45, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v37 + 4, v37 + 12);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v83);
    *(_WORD *)(v37 + 12) = 2080;
    uint64_t v46 = v81;
    uint64_t v47 = v82;
    sub_100012ED8(v80, v81);
    uint64_t v48 = dispatch thunk of FMNRequestContentRepresentable.body.getter(v46, v47);
    unint64_t v50 = v49;
    static String.Encoding.utf8.getter(v48);
    uint64_t v51 = String.init(data:encoding:)(v48, v50, v9);
    unint64_t v53 = v52;
    sub_100016F9C(v48, v50);
    if (v53) {
      uint64_t v54 = v51;
    }
    else {
      uint64_t v54 = 0LL;
    }
    if (v53) {
      unint64_t v55 = v53;
    }
    else {
      unint64_t v55 = 0xE000000000000000LL;
    }
    uint64_t v78 = sub_1003F11D4(v54, v55, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v37 + 14, v37 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v80);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "SendRequest: %s body - %s", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy(v38, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v37, -1LL, -1LL);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v83);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v80);
  }

  uint64_t v56 = swift_allocObject(&unk_1009462D8, 24LL, 7LL);
  swift_weakInit(v56 + 16, v77);
  uint64_t v57 = v74;
  uint64_t v58 = v73;
  uint64_t v59 = v75;
  (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v73, v71, v75);
  sub_100013044((uint64_t)v86, (uint64_t)&v83);
  uint64_t v60 = *(unsigned __int8 *)(v57 + 80);
  uint64_t v61 = (v60 + 16) & ~v60;
  unint64_t v62 = (v72 + v61 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v63 = (v62 + 47) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v64 = (v63 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v65 = swift_allocObject(&unk_100946468, v64 + 8, v60 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v57 + 32))(v65 + v61, v58, v59);
  sub_100012EC0(&v83, v65 + v62);
  *(void *)(v65 + v63) = v56;
  *(void *)(v65 + v6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v76;
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)( v86,  v87,  0x6170686372616573LL,  0xEC00000064797472LL,  0LL,  sub_1001BB21C,  v65);
  swift_release(v65);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v86);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v87);
  return swift_release(v56);
}

uint64_t sub_1001B5C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v143 = a4;
  uint64_t v144 = a3;
  uint64_t v142 = a2;
  uint64_t v5 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v5);
  uint64_t v7 = &v127[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v8);
  uint64_t v133 = &v127[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = type metadata accessor for URLComponents(0LL);
  uint64_t v138 = *(void *)(v10 - 8);
  uint64_t v139 = v10;
  __chkstk_darwin(v10);
  unint64_t v137 = &v127[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = &v127[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v140 = &v127[-v18];
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v135 = &v127[-v20];
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = &v127[-v22];
  __chkstk_darwin(v21);
  uint64_t v25 = &v127[-v24];
  uint64_t v26 = sub_100004AEC(&qword_1009A4CE0);
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v29 = (uint64_t *)&v127[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v27 + 16))(v29, a1, v26);
  int v30 = (*(uint64_t (**)(uint64_t *, uint64_t))(v27 + 88))(v29, v26);
  if (v30 == enum case for LegacyResult.success<A>(_:))
  {
    uint64_t v131 = v7;
    (*(void (**)(uint64_t *, uint64_t))(v27 + 96))(v29, v26);
    uint64_t v31 = (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t))(v13 + 32))(v25, v29, v12);
    uint64_t v32 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter(v31);
    sub_1001BABFC(v32);
    swift_bridgeObjectRelease();
    unint64_t v33 = v25;
    if (qword_10099B190 != -1) {
      swift_once(&qword_10099B190, sub_1001B421C);
    }
    uint64_t v34 = type metadata accessor for Logger(0LL);
    uint64_t v35 = sub_10000A720(v34, (uint64_t)qword_100A2A2C8);
    sub_100013044(v144, (uint64_t)v149);
    os_log_type_t v36 = *(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 16);
    uint64_t v37 = v36(v23, v25, v12);
    uint64_t v134 = v35;
    uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.info.getter(v38);
    BOOL v40 = os_log_type_enabled(v38, v39);
    uint64_t v136 = v25;
    os_log_type_t v132 = v36;
    Swift::Int v130 = v16;
    if (v40)
    {
      uint64_t v41 = swift_slowAlloc(22LL, -1LL);
      uint64_t v129 = swift_slowAlloc(32LL, -1LL);
      uint64_t v148 = v129;
      *(_DWORD *)uint64_t v41 = 136315394;
      uint64_t v141 = (void (*)(_BYTE *, uint64_t))(v41 + 4);
      uint64_t v42 = v150;
      uint64_t v43 = v151;
      sub_100012ED8(v149, v150);
      unint64_t v44 = v137;
      dispatch thunk of FMNRequestConfigurating.urlComponents.getter(v42, v43);
      uint64_t v45 = sub_100007864( &qword_1009A4D08,  (uint64_t (*)(uint64_t))&type metadata accessor for URLComponents,  (uint64_t)&protocol conformance descriptor for URLComponents);
      uint64_t v46 = v139;
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter(v139, v45);
      unint64_t v49 = v48;
      (*(void (**)(_BYTE *, uint64_t))(v138 + 8))(v44, v46);
      uint64_t v147 = sub_1003F11D4(v47, v49, &v148);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148, v141, v41 + 12);
      swift_bridgeObjectRelease();
      uint64_t v50 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v149);
      *(_WORD *)(v41 + 12) = 2048;
      uint64_t v51 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v50);
      uint64_t v141 = *(void (**)(_BYTE *, uint64_t))(v13 + 8);
      v141(v23, v12);
      uint64_t v147 = v51;
      unint64_t v33 = v136;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148, v41 + 14, v41 + 22);
      _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "SendRequest %s Received Response: status - %ld",  (uint8_t *)v41,  0x16u);
      uint64_t v52 = v129;
      swift_arrayDestroy(v129, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1LL, -1LL);
      uint64_t v53 = v41;
      os_log_type_t v36 = v132;
      swift_slowDealloc(v53, -1LL, -1LL);
    }

    else
    {
      uint64_t v141 = *(void (**)(_BYTE *, uint64_t))(v13 + 8);
      v141(v23, v12);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v149);
    }

    sub_100013044(v144, (uint64_t)v149);
    uint64_t v65 = v135;
    uint64_t v66 = v36(v135, v33, v12);
    uint64_t v67 = (os_log_s *)Logger.logObject.getter(v66);
    os_log_type_t v68 = static os_log_type_t.info.getter(v67);
    int v69 = v68;
    BOOL v70 = os_log_type_enabled(v67, v68);
    uint64_t v71 = v140;
    if (v70)
    {
      uint64_t v72 = swift_slowAlloc(22LL, -1LL);
      uint64_t v129 = swift_slowAlloc(64LL, -1LL);
      uint64_t v148 = v129;
      *(_DWORD *)uint64_t v72 = 136315394;
      uint64_t v73 = v150;
      uint64_t v74 = v151;
      sub_100012ED8(v149, v150);
      uint64_t v75 = v137;
      int v128 = v69;
      dispatch thunk of FMNRequestConfigurating.urlComponents.getter(v73, v74);
      uint64_t v76 = sub_100007864( &qword_1009A4D08,  (uint64_t (*)(uint64_t))&type metadata accessor for URLComponents,  (uint64_t)&protocol conformance descriptor for URLComponents);
      uint64_t v77 = v139;
      uint64_t v78 = dispatch thunk of CustomStringConvertible.description.getter(v139, v76);
      unint64_t v80 = v79;
      uint64_t v81 = v75;
      uint64_t v82 = v141;
      (*(void (**)(_BYTE *, uint64_t))(v138 + 8))(v81, v77);
      uint64_t v147 = sub_1003F11D4(v78, v80, &v148);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148, v72 + 4, v72 + 12);
      swift_bridgeObjectRelease();
      uint64_t v83 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v149);
      *(_WORD *)(v72 + 12) = 2080;
      uint64_t v84 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter(v83);
      uint64_t v85 = Dictionary.description.getter( v84,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
      unint64_t v87 = v86;
      swift_bridgeObjectRelease();
      uint64_t v147 = sub_1003F11D4(v85, v87, &v148);
      unint64_t v33 = v136;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148, v72 + 14, v72 + 22);
      os_log_type_t v36 = v132;
      swift_bridgeObjectRelease();
      v82(v65, v12);
      _os_log_impl( (void *)&_mh_execute_header,  v67,  (os_log_type_t)v128,  "SendRequest %s Received Response: header - %s",  (uint8_t *)v72,  0x16u);
      uint64_t v88 = v129;
      swift_arrayDestroy(v129, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v88, -1LL, -1LL);
      uint64_t v89 = v72;
      uint64_t v71 = v140;
      swift_slowDealloc(v89, -1LL, -1LL);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v149);
      v141(v65, v12);
    }

    sub_100013044(v144, (uint64_t)v149);
    uint64_t v90 = v36(v71, v33, v12);
    uint64_t v91 = (os_log_s *)Logger.logObject.getter(v90);
    os_log_type_t v92 = static os_log_type_t.info.getter(v91);
    int v93 = v92;
    if (os_log_type_enabled(v91, v92))
    {
      uint64_t v94 = v71;
      uint64_t v95 = swift_slowAlloc(22LL, -1LL);
      uint64_t v144 = swift_slowAlloc(64LL, -1LL);
      uint64_t v148 = v144;
      *(_DWORD *)uint64_t v95 = 136315394;
      uint64_t v134 = v95 + 4;
      uint64_t v96 = v150;
      uint64_t v97 = v151;
      sub_100012ED8(v149, v150);
      uint64_t v98 = v137;
      LODWORD(v135) = v93;
      dispatch thunk of FMNRequestConfigurating.urlComponents.getter(v96, v97);
      uint64_t v99 = sub_100007864( &qword_1009A4D08,  (uint64_t (*)(uint64_t))&type metadata accessor for URLComponents,  (uint64_t)&protocol conformance descriptor for URLComponents);
      uint64_t v100 = v139;
      uint64_t v101 = dispatch thunk of CustomStringConvertible.description.getter(v139, v99);
      unint64_t v103 = v102;
      unint64_t v104 = v141;
      (*(void (**)(_BYTE *, uint64_t))(v138 + 8))(v98, v100);
      uint64_t v147 = sub_1003F11D4(v101, v103, &v148);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148, v134, v95 + 12);
      swift_bridgeObjectRelease();
      uint64_t v105 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v149);
      *(_WORD *)(v95 + 12) = 2080;
      unint64_t v106 = v94;
      uint64_t v107 = FMNServerInteractionController.FMNResponseFields.data.getter(v105);
      unint64_t v109 = v108;
      uint64_t v110 = v133;
      static String.Encoding.utf8.getter(v107);
      uint64_t v111 = String.init(data:encoding:)(v107, v109, v110);
      unint64_t v113 = v112;
      sub_100016F9C(v107, v109);
      if (v113) {
        uint64_t v114 = v111;
      }
      else {
        uint64_t v114 = 0LL;
      }
      os_log_type_t v36 = v132;
      if (v113) {
        unint64_t v115 = v113;
      }
      else {
        unint64_t v115 = 0xE000000000000000LL;
      }
      uint64_t v147 = sub_1003F11D4(v114, v115, &v148);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148, v95 + 14, v95 + 22);
      swift_bridgeObjectRelease();
      v104(v106, v12);
      _os_log_impl( (void *)&_mh_execute_header,  v91,  (os_log_type_t)v135,  "SendRequest %s Received Response: body - %s",  (uint8_t *)v95,  0x16u);
      uint64_t v116 = v144;
      swift_arrayDestroy(v144, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v116, -1LL, -1LL);
      swift_slowDealloc(v95, -1LL, -1LL);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v149);
      v141(v71, v12);
    }

    uint64_t v7 = v131;
    uint64_t v64 = v143;
    uint64_t v117 = v130;
    uint64_t v118 = v136;
    v36(v130, v136, v12);
    uint64_t v119 = sub_100004AEC(&qword_1009A4D40);
    CheckedContinuation.resume(returning:)(v117, v119);
    v141(v118, v12);
  }

  else
  {
    if (v30 != enum case for LegacyResult.failure<A>(_:))
    {
      uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)(v26, v26);
      __break(1u);
      return result;
    }

    (*(void (**)(uint64_t *, uint64_t))(v27 + 96))(v29, v26);
    uint64_t v54 = *v29;
    uint64_t v55 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v56 = swift_allocObject(v55, 72LL, 7LL);
    *(_OWORD *)(v56 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    swift_getErrorValue(v54, v146, v145);
    uint64_t v57 = Error.localizedDescription.getter(v145[1], v145[2]);
    uint64_t v59 = v58;
    *(void *)(v56 + 56) = &type metadata for String;
    *(void *)(v56 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1000226F4();
    *(void *)(v56 + 32) = v57;
    *(void *)(v56 + 40) = v59;
    unint64_t v60 = sub_1001B9018();
    uint64_t v61 = (void *)static OS_os_log.default.getter(v60);
    uint64_t v62 = static os_log_type_t.default.getter(v61);
    os_log(_:dso:log:type:_:)( "ServerInteractionController Error calling server: %@",  52LL,  2LL,  &_mh_execute_header,  v61,  v62,  v56);

    swift_bridgeObjectRelease();
    v149[0] = v54;
    uint64_t v63 = sub_100004AEC(&qword_1009A4D40);
    CheckedContinuation.resume(throwing:)(v149, v63);
    uint64_t v64 = v143;
  }

  swift_beginAccess(v64 + 16, v149, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v64 + 16);
  if (result)
  {
    uint64_t v121 = result;
    uint64_t v122 = *(void **)(result + qword_1009A4BD0);
    [v122 lock];
    *(_BYTE *)(v121 + qword_1009A4BD8) = 1;
    [v122 unlock];
    uint64_t v123 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v123 - 8) + 56LL))(v7, 1LL, 1LL, v123);
    uint64_t v124 = swift_allocObject(&unk_1009462D8, 24LL, 7LL);
    swift_weakInit(v124 + 16, v121);
    uint64_t v125 = (void *)swift_allocObject(&unk_100946490, 40LL, 7LL);
    v125[2] = 0LL;
    v125[3] = 0LL;
    v125[4] = v124;
    uint64_t v126 = sub_1003EDC4C((uint64_t)v7, (uint64_t)&unk_1009A4D48, (uint64_t)v125);
    swift_release(v126);
    return swift_release(v121);
  }

  return result;
}

uint64_t sub_1001B67E4(uint64_t a1, void (*a2)(void *), uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v42 = a5;
  uint64_t v43 = a2;
  int v44 = a4;
  uint64_t v6 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v6);
  uint64_t v41 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009A4D20);
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)((char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = sub_100004AEC(&qword_1009A4CE0);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 16))(v18, a1, v15);
  int v19 = (*(uint64_t (**)(uint64_t *, uint64_t))(v16 + 88))(v18, v15);
  if (v19 == enum case for LegacyResult.success<A>(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v16 + 96))(v18, v15);
    uint64_t v20 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v9 + 32))(v11, v18, v8);
    uint64_t v21 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter(v20);
    sub_1001BABFC(v21);
    swift_bridgeObjectRelease();
    (*(void (**)(void *, char *, uint64_t))(v9 + 16))(v14, v11, v8);
    swift_storeEnumTagMultiPayload(v14, v12, 0LL);
    v43(v14);
    sub_100015794((uint64_t)v14, &qword_1009A4D20);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if ((v44 & 1) == 0) {
      return result;
    }
    goto LABEL_6;
  }

  uint64_t v23 = v43;
  if (v19 != enum case for LegacyResult.failure<A>(_:))
  {
    uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)(v15, v15);
    __break(1u);
    return result;
  }

  (*(void (**)(uint64_t *, uint64_t))(v16 + 96))(v18, v15);
  uint64_t v24 = *v18;
  uint64_t v25 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v26 = swift_allocObject(v25, 72LL, 7LL);
  *(_OWORD *)(v26 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  swift_getErrorValue(v24, v46, v45);
  uint64_t v27 = Error.localizedDescription.getter(v45[1], v45[2]);
  uint64_t v29 = v28;
  *(void *)(v26 + 56) = &type metadata for String;
  *(void *)(v26 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1000226F4();
  *(void *)(v26 + 32) = v27;
  *(void *)(v26 + 40) = v29;
  unint64_t v30 = sub_1001B9018();
  uint64_t v31 = (void *)static OS_os_log.default.getter(v30);
  uint64_t v32 = static os_log_type_t.default.getter(v31);
  os_log(_:dso:log:type:_:)( "ServerInteractionController Error calling server: %@",  52LL,  2LL,  &_mh_execute_header,  v31,  v32,  v26);
  swift_bridgeObjectRelease();

  *uint64_t v14 = v24;
  swift_storeEnumTagMultiPayload(v14, v12, 1LL);
  swift_errorRetain(v24);
  v23(v14);
  swift_errorRelease(v24);
  uint64_t result = sub_100015794((uint64_t)v14, &qword_1009A4D20);
  if ((v44 & 1) != 0)
  {
LABEL_6:
    uint64_t v33 = v42 + 16;
    swift_beginAccess(v42 + 16, v47, 0LL, 0LL);
    uint64_t result = swift_weakLoadStrong(v33);
    if (result)
    {
      uint64_t v34 = result;
      uint64_t v35 = *(void **)(result + qword_1009A4BD0);
      [v35 lock];
      *(_BYTE *)(v34 + qword_1009A4BD8) = 1;
      [v35 unlock];
      uint64_t v36 = type metadata accessor for TaskPriority(0LL);
      uint64_t v37 = (uint64_t)v41;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56LL))(v41, 1LL, 1LL, v36);
      uint64_t v38 = swift_allocObject(&unk_1009462D8, 24LL, 7LL);
      swift_weakInit(v38 + 16, v34);
      os_log_type_t v39 = (void *)swift_allocObject(&unk_1009463F0, 40LL, 7LL);
      void v39[2] = 0LL;
      void v39[3] = 0LL;
      v39[4] = v38;
      sub_1003EDC4C(v37, (uint64_t)&unk_1009A4D28, (uint64_t)v39);
      swift_release();
      return swift_release();
    }
  }

  return result;
}

uint64_t sub_1001B6C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v135 = a3;
  uint64_t v7 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v7);
  uint64_t v134 = &v119[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v9);
  uint64_t v125 = &v119[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = type metadata accessor for URLComponents(0LL);
  uint64_t v132 = *(void *)(v11 - 8);
  uint64_t v133 = v11;
  __chkstk_darwin(v11);
  uint64_t v131 = &v119[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v129 = &v119[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v17 = __chkstk_darwin(v15);
  int v128 = &v119[-v18];
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = &v119[-v20];
  __chkstk_darwin(v19);
  uint64_t v23 = &v119[-v22];
  uint64_t v24 = sub_100004AEC(&qword_1009A4D20);
  __chkstk_darwin(v24);
  uint64_t v26 = (uint64_t *)&v119[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v27 = a4 + 16;
  sub_1001BB0C8(a1, (uint64_t)v26);
  if (swift_getEnumCaseMultiPayload(v26, v24) == 1)
  {
    uint64_t v28 = *v26;
    uint64_t v29 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v30 = swift_allocObject(v29, 72LL, 7LL);
    *(_OWORD *)(v30 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    swift_getErrorValue(v28, v137, v136);
    uint64_t v31 = Error.localizedDescription.getter(v136[1], v136[2]);
    uint64_t v33 = v32;
    *(void *)(v30 + 56) = &type metadata for String;
    *(void *)(v30 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1000226F4();
    *(void *)(v30 + 32) = v31;
    *(void *)(v30 + 40) = v33;
    unint64_t v34 = sub_1001B9018();
    uint64_t v35 = (void *)static OS_os_log.default.getter(v34);
    uint64_t v36 = static os_log_type_t.default.getter(v35);
    os_log(_:dso:log:type:_:)( "ServerInteractionController Error calling server: %@",  52LL,  2LL,  &_mh_execute_header,  v35,  v36,  v30);
    swift_bridgeObjectRelease();

    Future.finish(error:)(v28);
    swift_errorRelease(v28);
    uint64_t v37 = (uint64_t)v134;
  }

  else
  {
    (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v14 + 32))(v23, v26, v13);
    if (qword_10099B190 != -1) {
      swift_once(&qword_10099B190, sub_1001B421C);
    }
    uint64_t v38 = type metadata accessor for Logger(0LL);
    uint64_t v39 = sub_10000A720(v38, (uint64_t)qword_100A2A2C8);
    sub_100013044(v135, (uint64_t)v140);
    uint64_t v40 = *(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 16);
    Swift::Int v130 = v23;
    uint64_t v126 = v40;
    uint64_t v41 = v40(v21, v23, v13);
    uint64_t v127 = v39;
    uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v43 = static os_log_type_t.info.getter(v42);
    BOOL v44 = os_log_type_enabled(v42, v43);
    uint64_t v123 = a2;
    uint64_t v122 = v27;
    if (v44)
    {
      uint64_t v45 = swift_slowAlloc(22LL, -1LL);
      uint64_t v121 = v13;
      uint64_t v46 = v45;
      uint64_t v47 = swift_slowAlloc(32LL, -1LL);
      uint64_t v139 = v47;
      *(_DWORD *)uint64_t v46 = 136315394;
      uint64_t v124 = (void (*)(_BYTE *, uint64_t))(v46 + 4);
      uint64_t v49 = v141;
      uint64_t v48 = v142;
      sub_100012ED8(v140, v141);
      uint64_t v50 = v131;
      dispatch thunk of FMNRequestConfigurating.urlComponents.getter(v49, v48);
      uint64_t v51 = sub_100007864( &qword_1009A4D08,  (uint64_t (*)(uint64_t))&type metadata accessor for URLComponents,  (uint64_t)&protocol conformance descriptor for URLComponents);
      uint64_t v52 = v133;
      uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter(v133, v51);
      unint64_t v55 = v54;
      (*(void (**)(_BYTE *, uint64_t))(v132 + 8))(v50, v52);
      uint64_t v138 = sub_1003F11D4(v53, v55, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v124, v46 + 12);
      swift_bridgeObjectRelease();
      uint64_t v56 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v140);
      *(_WORD *)(v46 + 12) = 2048;
      uint64_t v57 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v56);
      uint64_t v58 = *(void (**)(_BYTE *, uint64_t))(v14 + 8);
      uint64_t v59 = v121;
      uint64_t v124 = v58;
      v58(v21, v121);
      uint64_t v138 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v46 + 14, v46 + 22);
      _os_log_impl( (void *)&_mh_execute_header,  v42,  v43,  "SendRequest %s Received Response: status - %ld",  (uint8_t *)v46,  0x16u);
      swift_arrayDestroy(v47, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1LL, -1LL);
      swift_slowDealloc(v46, -1LL, -1LL);

      uint64_t v60 = v59;
    }

    else
    {
      uint64_t v124 = *(void (**)(_BYTE *, uint64_t))(v14 + 8);
      v124(v21, v13);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v140);

      uint64_t v60 = v13;
    }

    sub_100013044(v135, (uint64_t)v140);
    uint64_t v61 = v128;
    uint64_t v62 = v130;
    uint64_t v63 = v126(v128, v130, v60);
    uint64_t v64 = (os_log_s *)Logger.logObject.getter(v63);
    os_log_type_t v65 = static os_log_type_t.info.getter(v64);
    int v66 = v65;
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v67 = swift_slowAlloc(22LL, -1LL);
      uint64_t v121 = swift_slowAlloc(64LL, -1LL);
      uint64_t v139 = v121;
      *(_DWORD *)uint64_t v67 = 136315394;
      uint64_t v68 = v141;
      uint64_t v69 = v142;
      sub_100012ED8(v140, v141);
      BOOL v70 = v131;
      int v120 = v66;
      dispatch thunk of FMNRequestConfigurating.urlComponents.getter(v68, v69);
      uint64_t v71 = sub_100007864( &qword_1009A4D08,  (uint64_t (*)(uint64_t))&type metadata accessor for URLComponents,  (uint64_t)&protocol conformance descriptor for URLComponents);
      uint64_t v72 = v60;
      uint64_t v73 = v61;
      uint64_t v74 = v133;
      uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter(v133, v71);
      unint64_t v77 = v76;
      (*(void (**)(_BYTE *, uint64_t))(v132 + 8))(v70, v74);
      uint64_t v138 = sub_1003F11D4(v75, v77, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v67 + 4, v67 + 12);
      swift_bridgeObjectRelease();
      uint64_t v78 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v140);
      *(_WORD *)(v67 + 12) = 2080;
      unint64_t v79 = v73;
      uint64_t v60 = v72;
      uint64_t v80 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter(v78);
      uint64_t v81 = Dictionary.description.getter( v80,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
      unint64_t v83 = v82;
      swift_bridgeObjectRelease();
      uint64_t v138 = sub_1003F11D4(v81, v83, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v67 + 14, v67 + 22);
      swift_bridgeObjectRelease();
      uint64_t v84 = v124;
      v124(v79, v72);
      _os_log_impl( (void *)&_mh_execute_header,  v64,  (os_log_type_t)v120,  "SendRequest %s Received Response: header - %s",  (uint8_t *)v67,  0x16u);
      uint64_t v85 = v121;
      swift_arrayDestroy(v121, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v85, -1LL, -1LL);
      uint64_t v86 = v67;
      uint64_t v62 = v130;
      swift_slowDealloc(v86, -1LL, -1LL);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v140);
      uint64_t v84 = v124;
      v124(v61, v60);
    }

    unint64_t v87 = v129;
    sub_100013044(v135, (uint64_t)v140);
    uint64_t v88 = v126(v87, v62, v60);
    uint64_t v89 = (os_log_s *)Logger.logObject.getter(v88);
    os_log_type_t v90 = static os_log_type_t.info.getter(v89);
    if (os_log_type_enabled(v89, v90))
    {
      uint64_t v91 = swift_slowAlloc(22LL, -1LL);
      uint64_t v135 = swift_slowAlloc(64LL, -1LL);
      uint64_t v139 = v135;
      *(_DWORD *)uint64_t v91 = 136315394;
      uint64_t v129 = (_BYTE *)(v91 + 4);
      uint64_t v92 = v141;
      uint64_t v93 = v142;
      sub_100012ED8(v140, v141);
      uint64_t v94 = v131;
      dispatch thunk of FMNRequestConfigurating.urlComponents.getter(v92, v93);
      uint64_t v95 = sub_100007864( &qword_1009A4D08,  (uint64_t (*)(uint64_t))&type metadata accessor for URLComponents,  (uint64_t)&protocol conformance descriptor for URLComponents);
      uint64_t v96 = v133;
      uint64_t v97 = dispatch thunk of CustomStringConvertible.description.getter(v133, v95);
      unint64_t v99 = v98;
      (*(void (**)(_BYTE *, uint64_t))(v132 + 8))(v94, v96);
      uint64_t v138 = sub_1003F11D4(v97, v99, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v129, v91 + 12);
      swift_bridgeObjectRelease();
      uint64_t v100 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v140);
      *(_WORD *)(v91 + 12) = 2080;
      uint64_t v101 = FMNServerInteractionController.FMNResponseFields.data.getter(v100);
      unint64_t v103 = v102;
      unint64_t v104 = v125;
      static String.Encoding.utf8.getter(v101);
      uint64_t v105 = String.init(data:encoding:)(v101, v103, v104);
      unint64_t v106 = v87;
      unint64_t v108 = v107;
      sub_100016F9C(v101, v103);
      if (v108) {
        uint64_t v109 = v105;
      }
      else {
        uint64_t v109 = 0LL;
      }
      uint64_t v84 = v124;
      if (v108) {
        unint64_t v110 = v108;
      }
      else {
        unint64_t v110 = 0xE000000000000000LL;
      }
      uint64_t v138 = sub_1003F11D4(v109, v110, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v91 + 14, v91 + 22);
      swift_bridgeObjectRelease();
      v84(v106, v60);
      _os_log_impl( (void *)&_mh_execute_header,  v89,  v90,  "SendRequest %s Received Response: body - %s",  (uint8_t *)v91,  0x16u);
      uint64_t v111 = v135;
      swift_arrayDestroy(v135, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v111, -1LL, -1LL);
      uint64_t v112 = v91;
      uint64_t v62 = v130;
      swift_slowDealloc(v112, -1LL, -1LL);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v140);
      v84(v87, v60);
    }

    uint64_t v37 = (uint64_t)v134;
    uint64_t v27 = v122;
    Future.finish(result:)(v62);
    v84(v62, v60);
  }

  swift_beginAccess(v27, v140, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v27);
  if (result)
  {
    uint64_t v114 = result;
    unint64_t v115 = *(void **)(result + qword_1009A4BD0);
    [v115 lock];
    *(_BYTE *)(v114 + qword_1009A4BD8) = 1;
    [v115 unlock];
    uint64_t v116 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v116 - 8) + 56LL))(v37, 1LL, 1LL, v116);
    uint64_t v117 = swift_allocObject(&unk_1009462D8, 24LL, 7LL);
    swift_weakInit(v117 + 16, v114);
    uint64_t v118 = (void *)swift_allocObject(&unk_100946418, 40LL, 7LL);
    v118[2] = 0LL;
    v118[3] = 0LL;
    v118[4] = v117;
    sub_1003EDC4C(v37, (uint64_t)&unk_1009A4D30, (uint64_t)v118);
    swift_release();
    return swift_release();
  }

  return result;
}

void sub_1001B7748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v68 = a6;
  uint64_t v69 = a4;
  uint64_t v70 = a5;
  uint64_t v71 = a2;
  uint64_t v8 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_1009A4CD8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100004AEC(&qword_1009A4CE0);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (uint64_t *)((char *)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v22 = a3 + 16;
  (*(void (**)(void *, uint64_t, uint64_t))(v19 + 16))(v21, a1, v18);
  int v23 = (*(uint64_t (**)(void *, uint64_t))(v19 + 88))(v21, v18);
  if (v23 == enum case for LegacyResult.success<A>(_:))
  {
    (*(void (**)(void *, uint64_t))(v19 + 96))(v21, v18);
    uint64_t v24 = (*(uint64_t (**)(char *, void *, uint64_t))(v9 + 32))(v11, v21, v8);
    uint64_t v25 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v24);
    if ((unint64_t)(v25 - 600) < 0xFFFFFFFFFFFFFF9CLL)
    {
      uint64_t v26 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter(v25);
      sub_1001BABFC(v26);
      swift_bridgeObjectRelease();
      Future.finish(result:)(v11);
      swift_beginAccess(v22, v72, 0LL, 0LL);
      uint64_t Strong = swift_weakLoadStrong(v22);
      if (Strong)
      {
        uint64_t v28 = Strong;
        uint64_t v29 = *(void **)(Strong + qword_1009A4BD0);
        [v29 lock];
        *(_BYTE *)(v28 + qword_1009A4BD8) = 1;
        [v29 unlock];
        uint64_t v30 = type metadata accessor for TaskPriority(0LL);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v14, 1LL, 1LL, v30);
        uint64_t v31 = swift_allocObject(&unk_1009462D8, 24LL, 7LL);
        swift_weakInit(v31 + 16, v28);
        uint64_t v32 = (void *)swift_allocObject(&unk_100946328, 40LL, 7LL);
        void v32[2] = 0LL;
        v32[3] = 0LL;
        void v32[4] = v31;
        sub_1003EDC4C((uint64_t)v14, (uint64_t)&unk_1009A4CF0, (uint64_t)v32);
        swift_release();
        swift_release();
      }

      goto LABEL_14;
    }

    uint64_t v43 = static os_log_type_t.error.getter(v25);
    unint64_t v44 = sub_1001B9018();
    uint64_t v45 = (void *)static OS_os_log.default.getter(v44);
    os_log(_:dso:log:_:_:)( v43,  &_mh_execute_header,  v45,  "ServerInteractionController: Server success with 500 error code, retrying.",  74LL,  2LL,  _swiftEmptyArrayStorage);

    swift_beginAccess(v22, v74, 0LL, 0LL);
    if (!swift_weakLoadStrong(v22))
    {
LABEL_14:
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      return;
    }

    uint64_t v46 = type metadata accessor for FMNRedirectHostStore(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56LL))(v17, 1LL, 1LL, v46);
    uint64_t v47 = swift_allocObject(&unk_1009462D8, 24LL, 7LL);
    swift_beginAccess(v22, v73, 0LL, 0LL);
    uint64_t v48 = swift_weakLoadStrong(v22);
    swift_weakInit(v47 + 16, v48);
    swift_release();
    uint64_t v49 = v69;
    sub_100013044(v69, (uint64_t)v72);
    uint64_t v50 = (void *)swift_allocObject(&unk_100946300, 80LL, 7LL);
    v50[2] = v71;
    sub_100012EC0(v72, (uint64_t)(v50 + 3));
    uint64_t v51 = v68;
    v50[8] = v47;
    v50[9] = v51;
    swift_retain();
    swift_retain();
    dispatch thunk of FMNServerInteractionController.retryRequest(consolidatedContent:redirectedHostStore:responseHandler:retryCount:)( v49,  v70,  v17,  sub_1001B907C,  v50,  0LL);
    swift_release();
    swift_release();
    sub_100015794((uint64_t)v17, &qword_1009A4CD8);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    goto LABEL_19;
  }

  if (v23 != enum case for LegacyResult.failure<A>(_:))
  {
    _diagnoseUnexpectedEnumCase<A>(type:)(v18, v18);
    __break(1u);
    return;
  }

  (*(void (**)(void *, uint64_t))(v19 + 96))(v21, v18);
  uint64_t v33 = *v21;
  unint64_t v34 = (void *)_convertErrorToNSError(_:)(*v21);
  id v35 = [v34 domain];
  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  uint64_t v38 = v37;

  uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSURLErrorDomain);
  if (v36 == v39 && v38 == v40)
  {
    swift_bridgeObjectRelease_n(v38, 2LL);
  }

  else
  {
    char v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, v39, v40, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v42 & 1) == 0)
    {
LABEL_20:

      Future.finish(error:)(v33);
      swift_beginAccess(v22, v72, 0LL, 0LL);
      uint64_t v61 = swift_weakLoadStrong(v22);
      if (v61)
      {
        uint64_t v62 = v61;
        uint64_t v63 = *(void **)(v61 + qword_1009A4BD0);
        [v63 lock];
        *(_BYTE *)(v62 + qword_1009A4BD8) = 1;
        [v63 unlock];
        uint64_t v64 = type metadata accessor for TaskPriority(0LL);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56LL))(v14, 1LL, 1LL, v64);
        uint64_t v65 = swift_allocObject(&unk_1009462D8, 24LL, 7LL);
        swift_weakInit(v65 + 16, v62);
        int v66 = (void *)swift_allocObject(&unk_100946350, 40LL, 7LL);
        v66[2] = 0LL;
        uint64_t v66[3] = 0LL;
        v66[4] = v65;
        sub_1003EDC4C((uint64_t)v14, (uint64_t)&unk_1009A4CF8, (uint64_t)v66);
        swift_release();
        swift_errorRelease(v33);
        swift_release();
      }

      else
      {
        swift_errorRelease(v33);
      }

      return;
    }
  }

  if ([v34 code] != (id)-1001) {
    goto LABEL_20;
  }
  uint64_t v52 = static os_log_type_t.error.getter(-1001LL);
  unint64_t v53 = sub_1001B9018();
  unint64_t v54 = (void *)static OS_os_log.default.getter(v53);
  os_log(_:dso:log:_:_:)( v52,  &_mh_execute_header,  v54,  "ServerInteractionController: Timed Out Error, retrying.",  55LL,  2LL,  _swiftEmptyArrayStorage);

  swift_beginAccess(v22, v74, 0LL, 0LL);
  if (swift_weakLoadStrong(v22))
  {
    uint64_t v55 = type metadata accessor for FMNRedirectHostStore(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56LL))(v17, 1LL, 1LL, v55);
    uint64_t v56 = swift_allocObject(&unk_1009462D8, 24LL, 7LL);
    swift_beginAccess(v22, v73, 0LL, 0LL);
    uint64_t v57 = swift_weakLoadStrong(v22);
    swift_weakInit(v56 + 16, v57);
    swift_release();
    uint64_t v58 = v69;
    sub_100013044(v69, (uint64_t)v72);
    uint64_t v59 = (void *)swift_allocObject(&unk_100946378, 80LL, 7LL);
    v59[2] = v71;
    sub_100012EC0(v72, (uint64_t)(v59 + 3));
    uint64_t v60 = v68;
    v59[8] = v56;
    v59[9] = v60;
    swift_retain();
    swift_retain();
    dispatch thunk of FMNServerInteractionController.retryRequest(consolidatedContent:redirectedHostStore:responseHandler:retryCount:)( v58,  v70,  v17,  sub_1001BB074,  v59,  0LL);
    swift_errorRelease(v33);
    swift_release();
    swift_release();

    sub_100015794((uint64_t)v17, &qword_1009A4CD8);
LABEL_19:
    swift_release();
    return;
  }

  swift_errorRelease(v33);
}

uint64_t sub_1001B7F30( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v141 = a8;
  uint64_t v148 = a4;
  uint64_t v149 = a3;
  uint64_t v147 = a2;
  uint64_t v12 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v12);
  uint64_t v140 = (char *)&v132 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v14);
  unint64_t v137 = (char *)&v132 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for URLComponents(0LL);
  uint64_t v144 = *(void *)(v16 - 8);
  uint64_t v145 = v16;
  __chkstk_darwin(v16);
  uint64_t v143 = (char *)&v132 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v146 = (char *)&v132 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v142 = (char *)&v132 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v132 - v25;
  __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v132 - v27;
  uint64_t v29 = sub_100004AEC(&qword_1009A4CE0);
  uint64_t v30 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v32 = (uint64_t *)((char *)&v132 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v30 + 16))(v32, a1, v29);
  int v33 = (*(uint64_t (**)(uint64_t *, uint64_t))(v30 + 88))(v32, v29);
  if (v33 == enum case for LegacyResult.success<A>(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v30 + 96))(v32, v29);
    uint64_t v34 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v19 + 32))(v28, v32, v18);
    uint64_t v35 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter(v34);
    sub_1001BABFC(v35);
    swift_bridgeObjectRelease();
    if (qword_10099B190 != -1) {
      swift_once(&qword_10099B190, sub_1001B421C);
    }
    uint64_t v36 = type metadata accessor for Logger(0LL);
    uint64_t v37 = sub_10000A720(v36, (uint64_t)qword_100A2A2C8);
    sub_100013044(v149, (uint64_t)v154);
    uint64_t v138 = *(uint64_t (**)(char *, char *, uint64_t))(v19 + 16);
    uint64_t v38 = v138(v26, v28, v18);
    uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v40 = static os_log_type_t.info.getter(v39);
    int v41 = v40;
    BOOL v42 = os_log_type_enabled(v39, v40);
    uint64_t v139 = v28;
    if (v42)
    {
      uint64_t v43 = swift_slowAlloc(22LL, -1LL);
      uint64_t v136 = swift_slowAlloc(32LL, -1LL);
      uint64_t v153 = v136;
      *(_DWORD *)uint64_t v43 = 136315394;
      uint64_t v134 = v43 + 4;
      LODWORD(v135) = v41;
      uint64_t v45 = v155;
      uint64_t v44 = v156;
      sub_100012ED8(v154, v155);
      uint64_t v46 = v18;
      uint64_t v47 = v37;
      uint64_t v48 = v143;
      dispatch thunk of FMNRequestConfigurating.urlComponents.getter(v45, v44);
      uint64_t v49 = sub_100007864( &qword_1009A4D08,  (uint64_t (*)(uint64_t))&type metadata accessor for URLComponents,  (uint64_t)&protocol conformance descriptor for URLComponents);
      uint64_t v50 = v145;
      uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter(v145, v49);
      unint64_t v53 = v52;
      unint64_t v54 = v48;
      uint64_t v37 = v47;
      uint64_t v18 = v46;
      (*(void (**)(char *, uint64_t))(v144 + 8))(v54, v50);
      uint64_t v152 = sub_1003F11D4(v51, v53, &v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &v153, v134, v43 + 12);
      swift_bridgeObjectRelease();
      uint64_t v55 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v154);
      *(_WORD *)(v43 + 12) = 2048;
      uint64_t v56 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v55);
      uint64_t v57 = *(void (**)(char *, uint64_t))(v19 + 8);
      v57(v26, v46);
      uint64_t v152 = v56;
      uint64_t v28 = v139;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &v153, v43 + 14, v43 + 22);
      _os_log_impl( (void *)&_mh_execute_header,  v39,  (os_log_type_t)v135,  "SendRequest %s Received Response: status - %ld",  (uint8_t *)v43,  0x16u);
      uint64_t v58 = v136;
      swift_arrayDestroy(v136, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1LL, -1LL);
      swift_slowDealloc(v43, -1LL, -1LL);
    }

    else
    {
      uint64_t v57 = *(void (**)(char *, uint64_t))(v19 + 8);
      v57(v26, v18);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v154);
    }

    sub_100013044(v149, (uint64_t)v154);
    uint64_t v69 = v142;
    uint64_t v70 = v138(v142, v28, v18);
    uint64_t v71 = (os_log_s *)Logger.logObject.getter(v70);
    os_log_type_t v72 = static os_log_type_t.info.getter(v71);
    int v73 = v72;
    BOOL v74 = os_log_type_enabled(v71, v72);
    uint64_t v75 = v146;
    if (v74)
    {
      uint64_t v76 = swift_slowAlloc(22LL, -1LL);
      uint64_t v135 = swift_slowAlloc(64LL, -1LL);
      uint64_t v153 = v135;
      *(_DWORD *)uint64_t v76 = 136315394;
      uint64_t v133 = v76 + 4;
      uint64_t v136 = v37;
      uint64_t v77 = v155;
      uint64_t v78 = v156;
      sub_100012ED8(v154, v155);
      LODWORD(v13_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v73;
      unint64_t v79 = v57;
      uint64_t v80 = v143;
      dispatch thunk of FMNRequestConfigurating.urlComponents.getter(v77, v78);
      uint64_t v81 = sub_100007864( &qword_1009A4D08,  (uint64_t (*)(uint64_t))&type metadata accessor for URLComponents,  (uint64_t)&protocol conformance descriptor for URLComponents);
      uint64_t v82 = v145;
      uint64_t v83 = dispatch thunk of CustomStringConvertible.description.getter(v145, v81);
      unint64_t v85 = v84;
      (*(void (**)(char *, uint64_t))(v144 + 8))(v80, v82);
      uint64_t v152 = sub_1003F11D4(v83, v85, &v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &v153, v133, v76 + 12);
      swift_bridgeObjectRelease();
      uint64_t v86 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v154);
      *(_WORD *)(v76 + 12) = 2080;
      unint64_t v87 = v142;
      uint64_t v88 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter(v86);
      uint64_t v89 = Dictionary.description.getter( v88,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
      unint64_t v91 = v90;
      swift_bridgeObjectRelease();
      uint64_t v92 = v89;
      uint64_t v28 = v139;
      uint64_t v152 = sub_1003F11D4(v92, v91, &v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &v153, v76 + 14, v76 + 22);
      swift_bridgeObjectRelease();
      uint64_t v93 = v87;
      uint64_t v57 = v79;
      v79(v93, v18);
      _os_log_impl( (void *)&_mh_execute_header,  v71,  (os_log_type_t)v134,  "SendRequest %s Received Response: header - %s",  (uint8_t *)v76,  0x16u);
      uint64_t v94 = v135;
      swift_arrayDestroy(v135, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v94, -1LL, -1LL);
      uint64_t v95 = v76;
      uint64_t v75 = v146;
      swift_slowDealloc(v95, -1LL, -1LL);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v154);
      v57(v69, v18);
    }

    sub_100013044(v149, (uint64_t)v154);
    uint64_t v96 = v138(v75, v28, v18);
    uint64_t v97 = (os_log_s *)Logger.logObject.getter(v96);
    os_log_type_t v98 = static os_log_type_t.info.getter(v97);
    int v99 = v98;
    if (os_log_type_enabled(v97, v98))
    {
      uint64_t v100 = swift_slowAlloc(22LL, -1LL);
      uint64_t v149 = swift_slowAlloc(64LL, -1LL);
      uint64_t v153 = v149;
      *(_DWORD *)uint64_t v100 = 136315394;
      uint64_t v138 = (uint64_t (*)(char *, char *, uint64_t))(v100 + 4);
      uint64_t v101 = v155;
      uint64_t v102 = v156;
      sub_100012ED8(v154, v155);
      LODWORD(v142) = v99;
      unint64_t v103 = v57;
      unint64_t v104 = v143;
      dispatch thunk of FMNRequestConfigurating.urlComponents.getter(v101, v102);
      uint64_t v105 = sub_100007864( &qword_1009A4D08,  (uint64_t (*)(uint64_t))&type metadata accessor for URLComponents,  (uint64_t)&protocol conformance descriptor for URLComponents);
      unint64_t v106 = v75;
      uint64_t v107 = v145;
      uint64_t v108 = dispatch thunk of CustomStringConvertible.description.getter(v145, v105);
      unint64_t v110 = v109;
      uint64_t v111 = v104;
      uint64_t v57 = v103;
      (*(void (**)(char *, uint64_t))(v144 + 8))(v111, v107);
      uint64_t v152 = sub_1003F11D4(v108, v110, &v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &v153, v138, v100 + 12);
      swift_bridgeObjectRelease();
      uint64_t v112 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v154);
      *(_WORD *)(v100 + 12) = 2080;
      uint64_t v113 = FMNServerInteractionController.FMNResponseFields.data.getter(v112);
      unint64_t v115 = v114;
      uint64_t v116 = v137;
      static String.Encoding.utf8.getter(v113);
      uint64_t v117 = String.init(data:encoding:)(v113, v115, v116);
      unint64_t v119 = v118;
      sub_100016F9C(v113, v115);
      if (v119) {
        uint64_t v120 = v117;
      }
      else {
        uint64_t v120 = 0LL;
      }
      if (v119) {
        unint64_t v121 = v119;
      }
      else {
        unint64_t v121 = 0xE000000000000000LL;
      }
      uint64_t v152 = sub_1003F11D4(v120, v121, &v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &v153, v100 + 14, v100 + 22);
      swift_bridgeObjectRelease();
      v57(v106, v18);
      _os_log_impl( (void *)&_mh_execute_header,  v97,  (os_log_type_t)v142,  "SendRequest %s Received Response: body - %s",  (uint8_t *)v100,  0x16u);
      uint64_t v122 = v149;
      swift_arrayDestroy(v149, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v122, -1LL, -1LL);
      swift_slowDealloc(v100, -1LL, -1LL);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v154);
      v57(v75, v18);
    }

    uint64_t v123 = v139;
    Future.finish(result:)(v139);
    v57(v123, v18);
  }

  else
  {
    if (v33 != enum case for LegacyResult.failure<A>(_:))
    {
      uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)(v29, v29);
      __break(1u);
      return result;
    }

    uint64_t v59 = (*(uint64_t (**)(uint64_t *, uint64_t))(v30 + 96))(v32, v29);
    uint64_t v60 = *v32;
    uint64_t v61 = static os_log_type_t.error.getter(v59);
    uint64_t v62 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v63 = swift_allocObject(v62, 72LL, 7LL);
    *(_OWORD *)(v63 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    swift_getErrorValue(v60, v151, v150);
    uint64_t v64 = Error.localizedDescription.getter(v150[1], v150[2]);
    uint64_t v66 = v65;
    *(void *)(v63 + 56) = &type metadata for String;
    *(void *)(v63 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = sub_1000226F4();
    *(void *)(v63 + 32) = v64;
    *(void *)(v63 + 40) = v66;
    unint64_t v67 = sub_1001B9018();
    uint64_t v68 = (void *)static OS_os_log.default.getter(v67);
    os_log(_:dso:log:_:_:)(v61, &_mh_execute_header, v68, a6, a7, 2LL, v63);
    swift_bridgeObjectRelease();

    Future.finish(error:)(v60);
    swift_errorRelease(v60);
  }

  uint64_t v124 = v148 + 16;
  swift_beginAccess(v148 + 16, v154, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v124);
  if (result)
  {
    uint64_t v126 = result;
    uint64_t v127 = *(void **)(result + qword_1009A4BD0);
    [v127 lock];
    *(_BYTE *)(v126 + qword_1009A4BD8) = 1;
    [v127 unlock];
    uint64_t v128 = type metadata accessor for TaskPriority(0LL);
    uint64_t v129 = (uint64_t)v140;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v128 - 8) + 56LL))(v140, 1LL, 1LL, v128);
    uint64_t v130 = swift_allocObject(&unk_1009462D8, 24LL, 7LL);
    swift_weakInit(v130 + 16, v126);
    uint64_t v131 = (void *)swift_allocObject(v141, 40LL, 7LL);
    v131[2] = 0LL;
    v131[3] = 0LL;
    v131[4] = v130;
    sub_1003EDC4C(v129, a9, (uint64_t)v131);
    swift_release();
    return swift_release();
  }

  return result;
}

uint64_t sub_1001B8AE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  char v4 = sub_1006A0B60(v12[0]);
  swift_bridgeObjectRelease();
  if ((v4 & 1) == 0) {
    return sub_100013044(a1, a2);
  }
  sub_100013044(a1, (uint64_t)v12);
  uint64_t v5 = v13;
  uint64_t v6 = v14;
  sub_100012ED8(v12, v13);
  uint64_t v7 = dispatch thunk of FMNRequestContentRepresentable.headerDictionary.getter(v5, v6);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
  sub_10005C260( 1702195828LL,  0xE400000000000000LL,  0xD000000000000018LL,  0x8000000100857F20LL,  isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  uint64_t v9 = v13;
  uint64_t v10 = v14;
  sub_100037298((uint64_t)v12, v13);
  dispatch thunk of FMNRequestContentRepresentable.headerDictionary.setter(v7, v9, v10);
  sub_100013044((uint64_t)v12, a2);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v12);
}

uint64_t sub_1001B8C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a4;
  return swift_task_switch(sub_1001B8C5C, 0LL, 0LL);
}

uint64_t sub_1001B8C5C()
{
  uint64_t v1 = *(void *)(v0 + 40) + 16LL;
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  *(void *)(v0 + 48) = Strong;
  if (!Strong) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  uint64_t v3 = *(void *)(Strong + qword_1009A4BC8);
  *(void *)(v0 + 56) = v3;
  swift_unownedRetainStrong(v3);
  return swift_task_switch(sub_1001B8CE8, v3, 0LL);
}

uint64_t sub_1001B8CE8()
{
  return swift_task_switch(sub_1001B8D2C, 0LL, 0LL);
}

uint64_t sub_1001B8D2C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B8D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a1;
  *(void *)(v4 + 48) = a4;
  return swift_task_switch(sub_1001B8D74, 0LL, 0LL);
}

uint64_t sub_1001B8D74()
{
  uint64_t v1 = *(void *)(v0 + 48) + 16LL;
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  *(void *)(v0 + 56) = Strong;
  if (Strong)
  {
    uint64_t v3 = *(void *)(Strong + qword_1009A4BC8);
    *(void *)(v0 + 6_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = v3;
    swift_unownedRetainStrong(v3);
    swift_release();
    return swift_task_switch(sub_1001B8E18, v3, 0LL);
  }

  else
  {
    **(_BYTE **)(v0 + 40) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1001B8E18()
{
  return swift_task_switch(sub_1001B8E5C, 0LL, 0LL);
}

uint64_t sub_1001B8E5C()
{
  **(_BYTE **)(v0 + 40) = *(void *)(v0 + 56) == 0LL;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1001B8E78()
{
}

uint64_t sub_1001B8EA4()
{
  return type metadata accessor for ServerInteractionController(0LL);
}

uint64_t type metadata accessor for SearchPartyURLSessionFactory(uint64_t a1)
{
  return sub_10008BED8( a1,  (uint64_t *)&unk_1009A4C38,  (uint64_t)&nominal type descriptor for SearchPartyURLSessionFactory);
}

uint64_t sub_1001B8EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B8F20(a1, a2, a3, qword_100A2A318);
}

void sub_1001B8ECC()
{
}

uint64_t sub_1001B8EF8()
{
  return type metadata accessor for SearchPartyURLSessionFactory(0LL);
}

uint64_t type metadata accessor for FindMyAppURLSessionFactory(uint64_t a1)
{
  return sub_10008BED8(a1, (uint64_t *)&unk_1009A4C88, (uint64_t)&nominal type descriptor for FindMyAppURLSessionFactory);
}

uint64_t sub_1001B8F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B8F20(a1, a2, a3, qword_100A2A328);
}

uint64_t sub_1001B8F20(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v5, a1 + *a4);
}

uint64_t sub_1001B8F58(void *a1, uint64_t a2)
{
  NSString v4 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "set_sourceApplicationBundleIdentifier:", v4);

  uint64_t v5 = type metadata accessor for SearchPartyURLSessionFactory(0LL);
  uint64_t v6 = (uint64_t (*)(void *, uint64_t))method lookup function for FMNURLSessionFactory( v5,  &method descriptor for FMNURLSessionFactory.session(_:_:));
  return v6(a1, a2);
}

uint64_t sub_1001B8FF4()
{
  uint64_t v0 = FMNURLSessionFactory.deinit();
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t sub_1001B9010()
{
  return type metadata accessor for FindMyAppURLSessionFactory(0LL);
}

unint64_t sub_1001B9018()
{
  unint64_t result = qword_10099D930;
  if (!qword_10099D930)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_os_log);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10099D930);
  }

  return result;
}

uint64_t sub_1001B9054()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001B907C(uint64_t a1)
{
  return sub_1001B7F30( a1,  v1[2],  (uint64_t)(v1 + 3),  v1[8],  v1[9],  "ServerInteractionController: Error calling server on Retry: %@",  62LL,  (uint64_t)&unk_1009463C8,  (uint64_t)&unk_1009A4D10);
}

void *sub_1001B90C4(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_100004AEC(&qword_10099D328);
  uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  void v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_1001B9128(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = a1;
  unint64_t v6 = a1 >> 16;
  uint64_t v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000LL) == 0 || (a2 & 0x800000000000000LL) != 0)
  {
    uint64_t v13 = String.UTF16View.index(_:offsetBy:)(15LL, v6, a2);
    uint64_t v14 = v13 + (v7 << 16);
    unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    unint64_t v16 = v14 & 0xFFFFFFFFFFFF0000LL;
    if (!v7) {
      unint64_t v16 = v15;
    }
    return v16 | 4;
  }

  else
  {
    uint64_t v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15LL, v6);
    uint64_t v9 = v8 + (v7 << 16);
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    unint64_t v11 = v9 & 0xFFFFFFFFFFFF0000LL;
    if (!v7) {
      unint64_t v11 = v10;
    }
    return v11 | 8;
  }

unsigned __int8 *sub_1001B91A0(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B958C(a1, a2, a3);
}

unsigned __int8 *sub_1001B91B4(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B9834(a1, a2, a3);
}

unsigned __int8 *sub_1001B91C8(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B9D58(a1, a2, a3);
}

unsigned __int8 *sub_1001B91DC(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B9FD4(a1, a2, a3);
}

uint64_t sub_1001B91F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v4 = String.init<A>(_:)( &v14,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
  uint64_t v6 = v4;
  unint64_t v7 = v5;
  if ((v5 & 0x1000000000000000LL) == 0)
  {
    if ((v5 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v9 = HIBYTE(v7) & 0xF;
    uint64_t v14 = v6;
    uint64_t v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }

  uint64_t v6 = sub_1001BA254(v4, v5);
  unint64_t v11 = v10;
  swift_bridgeObjectRelease();
  unint64_t v7 = v11;
  if ((v11 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }

uint64_t sub_1001B92D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v4 = String.init<A>(_:)( &v14,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
  uint64_t v6 = v4;
  unint64_t v7 = v5;
  if ((v5 & 0x1000000000000000LL) == 0)
  {
    if ((v5 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v9 = HIBYTE(v7) & 0xF;
    uint64_t v14 = v6;
    uint64_t v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }

  uint64_t v6 = sub_1001BA254(v4, v5);
  unint64_t v11 = v10;
  swift_bridgeObjectRelease();
  unint64_t v7 = v11;
  if ((v11 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }

uint64_t sub_1001B93AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B93B8(a1, a2, a3, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_1001B9D58);
}

uint64_t sub_1001B93B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *, uint64_t, uint64_t))
{
  uint64_t v16 = a1;
  uint64_t v17 = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v6 = String.init<A>(_:)( &v16,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
  uint64_t v8 = v6;
  unint64_t v9 = v7;
  if ((v7 & 0x1000000000000000LL) == 0)
  {
    if ((v7 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v11 = HIBYTE(v9) & 0xF;
    uint64_t v16 = v8;
    uint64_t v17 = v9 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v10 = &v16;
    goto LABEL_7;
  }

  uint64_t v8 = sub_1001BA254(v6, v7);
  unint64_t v13 = v12;
  swift_bridgeObjectRelease();
  unint64_t v9 = v13;
  if ((v13 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v8 & 0x1000000000000000LL) != 0)
  {
    unint64_t v10 = (uint64_t *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    unint64_t v10 = (uint64_t *)_StringObject.sharedUTF8.getter(v8, v9);
  }

uint64_t sub_1001B94A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v4 = String.init<A>(_:)( &v14,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
  uint64_t v6 = v4;
  unint64_t v7 = v5;
  if ((v5 & 0x1000000000000000LL) == 0)
  {
    if ((v5 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v9 = HIBYTE(v7) & 0xF;
    uint64_t v14 = v6;
    uint64_t v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }

  uint64_t v6 = sub_1001BA254(v4, v5);
  unint64_t v11 = v10;
  swift_bridgeObjectRelease();
  unint64_t v7 = v11;
  if ((v11 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }

unsigned __int8 *sub_1001B958C(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v14 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v15 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = a3 + 55;
        }

        else
        {
          unsigned __int8 v15 = 97;
          unsigned __int8 v16 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v17 = a3 + 48;
        }
        else {
          unsigned __int8 v17 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          uint64_t v18 = result + 1;
          do
          {
            unsigned int v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v19 < 0x61 || v19 >= v15) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v20 = -87;
              }

              else
              {
                char v20 = -55;
              }
            }

            else
            {
              char v20 = -48;
            }

            unsigned int v8 = (v8 * a3) + (v19 + v20);
            if (((v8 >> 8) & 1) != 0) {
              goto LABEL_72;
            }
            ++v18;
            --v14;
          }

          while (v14);
LABEL_48:
          int v13 = 0;
          unsigned __int8 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }

        goto LABEL_71;
      }

LABEL_72:
      unsigned __int8 v12 = 0;
      int v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 8));
    }
  }

  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v21 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v22 = a3 + 55;
        }

        else
        {
          unsigned __int8 v21 = 97;
          unsigned __int8 v22 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v23 = a3 + 48;
        }
        else {
          unsigned __int8 v23 = 58;
        }
        if (result)
        {
          LOBYTE(v2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 0;
          do
          {
            unsigned int v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v25 < 0x61 || v25 >= v21) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v26 = -87;
              }

              else
              {
                char v26 = -55;
              }
            }

            else
            {
              char v26 = -48;
            }

            unsigned int v24 = (v24 * a3) + (v25 + v26);
            if (((v24 >> 8) & 1) != 0) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }

          while (a2);
          int v13 = 0;
          unsigned __int8 v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }

        goto LABEL_71;
      }

      goto LABEL_72;
    }

    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }

        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          uint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v11 = -87;
              }

              else
              {
                char v11 = -55;
              }
            }

            else
            {
              char v11 = -48;
            }

            unsigned int v8 = (v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFFFF00) != 0) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }

      unsigned __int8 v12 = 0;
      int v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 16));
    }
  }

  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v21 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v22 = a3 + 55;
        }

        else
        {
          unsigned __int8 v21 = 97;
          unsigned __int8 v22 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v23 = a3 + 48;
        }
        else {
          unsigned __int8 v23 = 58;
        }
        if (result)
        {
          LOWORD(v2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4) = 0;
          do
          {
            unsigned int v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v25 < 0x61 || v25 >= v21) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v26 = -87;
              }

              else
              {
                char v26 = -55;
              }
            }

            else
            {
              char v26 = -48;
            }

            unsigned int v24 = (unsigned __int16)(v24 * a3) + (v25 + v26);
            if ((v24 & 0x10000) != 0) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }

          while (a2);
          int v13 = 0;
          unsigned __int8 v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }

        goto LABEL_71;
      }

      goto LABEL_72;
    }

    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }

        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          uint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v11 = -87;
              }

              else
              {
                char v11 = -55;
              }
            }

            else
            {
              char v11 = -48;
            }

            unsigned int v8 = (unsigned __int16)(v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFF0000) != 0) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }

      unsigned __int8 v12 = 0;
      int v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }

  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned int v25 = a3 + 87;
        if (a3 > 10)
        {
          char v26 = a3 + 55;
        }

        else
        {
          unsigned int v25 = 97;
          char v26 = 65;
        }

        if (a3 <= 10) {
          uint64_t v27 = a3 + 48;
        }
        else {
          uint64_t v27 = 58;
        }
        if (result)
        {
          uint64_t v28 = 0;
          do
          {
            uint64_t v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                uint64_t v30 = -87;
              }

              else
              {
                uint64_t v30 = -55;
              }
            }

            else
            {
              uint64_t v30 = -48;
            }

            uint64_t v31 = (int)v28 * (uint64_t)(int)a3;
            uint64_t v32 = v29 + v30;
            uint64_t v28 = v31 + v32;
            if (__OFADD__((_DWORD)v31, v32)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }

          while (a2);
          int v13 = 0;
          unsigned __int8 v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }

        goto LABEL_71;
      }

      goto LABEL_72;
    }

    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }

        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v11 = -87;
              }

              else
              {
                char v11 = -55;
              }
            }

            else
            {
              char v11 = -48;
            }

            uint64_t v14 = (int)v8 * (uint64_t)(int)a3;
            unsigned __int8 v15 = v10 + v11;
            unsigned int v8 = v14 - v15;
            if (__OFSUB__((_DWORD)v14, v15)) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

      uint64_t v117 = __clz(__rbit64(v40));
      v40 &= v40 - 1;
    }
  }

  uint64_t v120 = v113 + 1;
  if (v113 + 1 >= v116) {
    goto LABEL_96;
  }
  unint64_t v119 = *(void *)(a3 + 8 * v120);
  if (v119) {
    goto LABEL_82;
  }
  uint64_t v120 = v113 + 2;
  if (v113 + 2 >= v116) {
    goto LABEL_96;
  }
  unint64_t v119 = *(void *)(a3 + 8 * v120);
  if (v119) {
    goto LABEL_82;
  }
  uint64_t v120 = v113 + 3;
  if (v113 + 3 >= v116)
  {
LABEL_96:
    swift_release(v176);
    v171(0LL, 0LL);
    uint64_t v126 = v174;
    uint64_t v127 = *(void (**)(uint64_t))(v174 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged);
    os_log_type_t v40 = (uint64_t)v162;
    uint64_t v128 = v161;
    if (v127)
    {
      uint64_t v129 = *(void *)(v174 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged + 8);
      swift_retain();
      v127(v126);
      sub_10002214C((uint64_t)v127, v129);
    }

    uint64_t v130 = v128[2];
    if (v130)
    {
      uint64_t v131 = v128 + 4;
      swift_bridgeObjectRetain(v128);
      do
      {
        PassthroughSubject.send(_:)(v131);
        v131 += 5;
        --v130;
      }

      while (v130);
      swift_bridgeObjectRelease_n(v128, 2LL);
    }

    else
    {
      swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRelease();
    uint64_t v146 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
    uint64_t v147 = String._bridgeToObjectiveC()();
    [v146 removeObjectForKey:v147];

    if (v35[165] != (_UNKNOWN *)-1LL) {
      goto LABEL_125;
    }
  }

  else
  {
    unint64_t v119 = *(void *)(a3 + 8 * v120);
    if (v119)
    {
LABEL_82:
      uint64_t v113 = v120;
      goto LABEL_83;
    }

    while (1)
    {
      uint64_t v113 = v120 + 1;
      if (__OFADD__(v120, 1LL)) {
        break;
      }
      if (v113 >= v116) {
        goto LABEL_96;
      }
      unint64_t v119 = *(void *)(a3 + 8 * v113);
      ++v120;
      if (v119) {
        goto LABEL_83;
      }
    }

    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    swift_once(&qword_10099B528, sub_1004F3B00);
  }

  uint64_t v148 = type metadata accessor for Logger(0LL);
  sub_10000A720(v148, (uint64_t)qword_100A2AC98);
  sub_10001DC4C(v175, v40, type metadata accessor for CloudKitChangeSet);
  variable initialization expression of CurrentLocationMonitor._currentAuthorizationStatus();
  uint64_t v149 = variable initialization expression of CurrentLocationMonitor._currentAuthorizationStatus();
  uint64_t v150 = (os_log_s *)Logger.logObject.getter(v149);
  uint64_t v151 = static os_log_type_t.default.getter(v150);
  if (os_log_type_enabled(v150, v151))
  {
    uint64_t v152 = swift_slowAlloc(28LL, -1LL);
    uint64_t v153 = swift_slowAlloc(32LL, -1LL);
    id v184 = (void *)v153;
    *(_DWORD *)uint64_t v152 = 136446722;
    uint64_t v154 = sub_100611D78();
    *(void *)&id v181 = sub_1003F11D4(v154, v155, (uint64_t *)&v184);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, (char *)&v181 + 8, v152 + 4, v152 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68(v40, type metadata accessor for CloudKitChangeSet);
    *(_WORD *)(v152 + 12) = 1040;
    LODWORD(v181) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, (char *)&v181 + 4, v152 + 14, v152 + 18);
    *(_WORD *)(v152 + 18) = 2048;
    *(double *)&id v181 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, (char *)&v181 + 8, v152 + 20, v152 + 28);
    _os_log_impl( (void *)&_mh_execute_header,  v150,  v151,  "Done applying %{public}s duration: %.*fms [Success]",  (uint8_t *)v152,  0x1Cu);
    swift_arrayDestroy(v153, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v153, -1LL, -1LL);
    swift_slowDealloc(v152, -1LL, -1LL);
  }

  else
  {
    sub_100018C68(v40, type metadata accessor for CloudKitChangeSet);
  }

  a4 = v170;
  a3 = v160;
  return sub_1005278E4(v175, (uint64_t (*)(void))a3, a4, "Calling wakeChangeSetQueue() after completing %{public}s");
}

    sub_100015794((uint64_t)v220, &qword_1009A8A80);
    return 0LL;
  }

  sub_10001581C((uint64_t)v220, (uint64_t)v217, &qword_1009A6DD0);
  if (v119(v118, 1LL, v218) == 1)
  {
    sub_100015794((uint64_t)v226, &qword_1009A6DD0);
    sub_100015794((uint64_t)v219, &qword_1009A6DD0);
    sub_100018C68((uint64_t)v217, type metadata accessor for AccessoryInfoResponseContent.Configuration);
    goto LABEL_72;
  }

  uint64_t v120 = (uint64_t)v216;
  sub_10002218C(v118, (uint64_t)v216, type metadata accessor for AccessoryInfoResponseContent.Configuration);
  unint64_t v121 = (uint64_t)v217;
  uint64_t v122 = sub_1002F6F8C((uint64_t)v217, v120);
  sub_100018C68(v120, type metadata accessor for AccessoryInfoResponseContent.Configuration);
  sub_100015794((uint64_t)v226, &qword_1009A6DD0);
  sub_100015794((uint64_t)v219, &qword_1009A6DD0);
  sub_100018C68(v121, type metadata accessor for AccessoryInfoResponseContent.Configuration);
  sub_100015794((uint64_t)v220, &qword_1009A6DD0);
  if (!v122) {
    return 0LL;
  }
LABEL_74:
  if (*(_DWORD *)(v214 + v215[21]) != *(_DWORD *)(v41 + v215[21])) {
    return 0LL;
  }
  uint64_t v123 = v215[22];
  uint64_t v124 = *(void *)(v214 + v123);
  uint64_t v125 = *(void *)(v41 + v123);
  if (v124)
  {
    if (!v125 || (sub_1001265D0(v124, v125) & 1) == 0) {
      return 0LL;
    }
  }

  else if (v125)
  {
    return 0LL;
  }

  uint64_t v126 = v215[23];
  uint64_t v127 = *(void *)(v214 + v126);
  uint64_t v128 = *(void *)(v214 + v126 + 8);
  uint64_t v129 = (uint64_t *)(v41 + v126);
  uint64_t v130 = *v129;
  uint64_t v131 = v129[1];
  if (v128 >> 60 != 15)
  {
    if (v131 >> 60 == 15) {
      goto LABEL_89;
    }
    sub_100018BE4(v127, v128);
    sub_100018BE4(v130, v131);
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v127, v128);
    uint64_t v133 = v132;
    sub_1000182F0(v130, v131);
    sub_1000182F0(v127, v128);
    if ((v133 & 1) != 0) {
      goto LABEL_85;
    }
    return 0LL;
  }

  if (v131 >> 60 != 15) {
    goto LABEL_89;
  }
LABEL_85:
  uint64_t v134 = v215[24];
  uint64_t v127 = *(void *)(v214 + v134);
  uint64_t v128 = *(void *)(v214 + v134 + 8);
  uint64_t v135 = (uint64_t *)(v41 + v134);
  uint64_t v130 = *v135;
  uint64_t v131 = v135[1];
  if (v128 >> 60 == 15)
  {
    if (v131 >> 60 == 15) {
      goto LABEL_91;
    }
LABEL_89:
    sub_100018BE4(v127, v128);
    sub_100018BE4(v130, v131);
    sub_1000182F0(v127, v128);
    sub_1000182F0(v130, v131);
    return 0LL;
  }

  if (v131 >> 60 == 15) {
    goto LABEL_89;
  }
  sub_100018BE4(v127, v128);
  sub_100018BE4(v130, v131);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v127, v128);
  unint64_t v137 = v136;
  sub_1000182F0(v130, v131);
  sub_1000182F0(v127, v128);
  if ((v137 & 1) == 0) {
    return 0LL;
  }
LABEL_91:
  if ((static URL.== infix(_:_:)(v214 + v215[25], v41 + v215[25]) & 1) == 0
    || (static URL.== infix(_:_:)(v214 + v215[26], v41 + v215[26]) & 1) == 0
    || (static URL.== infix(_:_:)(v214 + v215[27], v41 + v215[27]) & 1) == 0
    || (static URL.== infix(_:_:)(v214 + v215[28], v41 + v215[28]) & 1) == 0
    || (static URL.== infix(_:_:)(v214 + v215[29], v41 + v215[29]) & 1) == 0
    || (static URL.== infix(_:_:)(v214 + v215[30], v41 + v215[30]) & 1) == 0)
  {
    return 0LL;
  }

  uint64_t v138 = v215[31];
  uint64_t v139 = (void *)(v214 + v138);
  uint64_t v140 = *(void *)(v214 + v138 + 8);
  uint64_t v141 = (void *)(v41 + v138);
  uint64_t v142 = v141[1];
  if (v140)
  {
    if (!v142) {
      return 0LL;
    }
    uint64_t v143 = v41;
    uint64_t v144 = v214;
    uint64_t v145 = v215;
    if (*v139 != *v141 || v140 != v142)
    {
      uint64_t v146 = _stringCompareWithSmolCheck(_:_:expecting:)(*v139, v140, *v141, v142, 0LL);
      unint64_t result = 0LL;
      if ((v146 & 1) == 0) {
        return result;
      }
    }
  }

  else
  {
    uint64_t v143 = v41;
    uint64_t v144 = v214;
    uint64_t v145 = v215;
    if (v142) {
      return 0LL;
    }
  }

  if ((sub_100125B04(*(void **)(v144 + v145[32]), *(void **)(v143 + v145[32])) & 1) == 0) {
    return 0LL;
  }
  uint64_t v147 = v215[33];
  uint64_t v148 = (void *)(v214 + v147);
  uint64_t v149 = *(void *)(v214 + v147 + 8);
  uint64_t v150 = (void *)(v41 + v147);
  uint64_t v151 = v150[1];
  if (v149)
  {
    if (!v151) {
      return 0LL;
    }
    uint64_t v152 = v41;
    uint64_t v153 = v214;
    uint64_t v154 = v215;
    if (*v148 != *v150 || v149 != v151)
    {
      uint64_t v155 = _stringCompareWithSmolCheck(_:_:expecting:)(*v148, v149, *v150, v151, 0LL);
      unint64_t result = 0LL;
      if ((v155 & 1) == 0) {
        return result;
      }
    }
  }

  else
  {
    uint64_t v152 = v41;
    uint64_t v153 = v214;
    uint64_t v154 = v215;
    if (v151) {
      return 0LL;
    }
  }

  if ((sub_100125B04(*(void **)(v153 + v154[34]), *(void **)(v152 + v154[34])) & 1) == 0) {
    return 0LL;
  }
  uint64_t v156 = v215[35];
  uint64_t v157 = (double *)(v214 + v156);
  unint64_t v158 = *(_BYTE *)(v214 + v156 + 16);
  unint64_t v159 = v41 + v156;
  uint64_t v160 = *(unsigned __int8 *)(v159 + 16);
  if ((v158 & 1) != 0)
  {
    uint64_t v161 = v41;
    uint64_t v162 = v214;
    id v163 = v215;
    if (!v160) {
      return 0LL;
    }
  }

  else
  {
    if ((v160 & 1) != 0) {
      return 0LL;
    }
    unint64_t result = 0LL;
    unint64_t v164 = v157[1];
    uint64_t v165 = *(double *)(v159 + 8);
    uint64_t v161 = v41;
    uint64_t v162 = v214;
    id v163 = v215;
    if (v164 != v165) {
      return result;
    }
  }

  uint64_t v166 = v163[36];
  uint64_t v167 = v162 + v166;
  uint64_t v168 = v161 + v166;
  uint64_t v169 = *(unsigned __int8 *)(v168 + 16);
  if ((*(_BYTE *)(v167 + 16) & 1) != 0)
  {
    uint64_t v170 = v41;
    id v172 = v214;
    unint64_t v171 = v215;
    if (!v169) {
      return 0LL;
    }
  }

  else
  {
    if ((v169 & 1) != 0) {
      return 0LL;
    }
    unint64_t result = 0LL;
    uint64_t v173 = *(double *)(v167 + 8);
    uint64_t v174 = *(double *)(v168 + 8);
    uint64_t v170 = v41;
    id v172 = v214;
    unint64_t v171 = v215;
    if (v173 != v174) {
      return result;
    }
  }

  if ((static URL.== infix(_:_:)(v172 + v171[37], v170 + v171[37]) & 1) == 0
    || (static URL.== infix(_:_:)(v214 + v215[38], v41 + v215[38]) & 1) == 0
    || (static URL.== infix(_:_:)(v214 + v215[39], v41 + v215[39]) & 1) == 0
    || (static URL.== infix(_:_:)(v214 + v215[40], v41 + v215[40]) & 1) == 0
    || (static URL.== infix(_:_:)(v214 + v215[41], v41 + v215[41]) & 1) == 0
    || (static URL.== infix(_:_:)(v214 + v215[42], v41 + v215[42]) & 1) == 0)
  {
    return 0LL;
  }

  uint64_t v175 = v215[43];
  uint64_t v176 = *(unsigned __int8 *)(v214 + v175);
  id v177 = *(unsigned __int8 *)(v41 + v175);
  if (v176 == 2)
  {
    uint64_t v178 = v41;
    id v179 = v214;
    uint64_t v180 = v215;
    if (v177 != 2) {
      return 0LL;
    }
  }

  else
  {
    unint64_t result = 0LL;
    id v181 = (v176 & 1) == 0;
    if (v177 == 2) {
      return result;
    }
    uint64_t v182 = v181 ^ v177;
    uint64_t v178 = v41;
    id v179 = v214;
    uint64_t v180 = v215;
    if ((v182 & 1) == 0) {
      return result;
    }
  }

  unint64_t v183 = v180[44];
  id v184 = *(unsigned __int8 *)(v179 + v183);
  id v185 = *(unsigned __int8 *)(v178 + v183);
  if (v184 == 2)
  {
    uint64_t v186 = v41;
    id v187 = v214;
    uint64_t v188 = v215;
    if (v185 != 2) {
      return 0LL;
    }
  }

  else
  {
    unint64_t result = 0LL;
    uint64_t v189 = (v184 & 1) == 0;
    if (v185 == 2) {
      return result;
    }
    uint64_t v190 = v189 ^ v185;
    uint64_t v186 = v41;
    id v187 = v214;
    uint64_t v188 = v215;
    if ((v190 & 1) == 0) {
      return result;
    }
  }

  double v191 = v188[45];
  double v192 = *(unsigned __int8 *)(v187 + v191);
  double v193 = *(unsigned __int8 *)(v186 + v191);
  if (v192 == 2)
  {
    double v194 = v41;
    double v196 = v214;
    double v195 = v215;
    if (v193 != 2) {
      return 0LL;
    }
  }

  else
  {
    unint64_t result = 0LL;
    double v197 = (v192 & 1) == 0;
    if (v193 == 2) {
      return result;
    }
    double v198 = v197 ^ v193;
    double v194 = v41;
    double v196 = v214;
    double v195 = v215;
    if ((v198 & 1) == 0) {
      return result;
    }
  }

  double v199 = v195[46];
  double v200 = (void *)(v196 + v199);
  double v201 = *(void *)(v196 + v199 + 8);
  double v202 = (void *)(v194 + v199);
  __int128 v203 = v202[1];
  if (!v201)
  {
    __int128 v204 = v214;
    uint64_t v205 = v215;
    if (v203) {
      return 0LL;
    }
    goto LABEL_153;
  }

  if (!v203) {
    return 0LL;
  }
  __int128 v204 = v214;
  uint64_t v205 = v215;
  if (*v200 == *v202 && v201 == v203
    || (v206 = _stringCompareWithSmolCheck(_:_:expecting:)(*v200, v201, *v202, v203, 0LL), unint64_t result = 0LL, (v206 & 1) != 0))
  {
LABEL_153:
    uint64_t v207 = v205[47];
    uint64_t v208 = (void *)(v204 + v207);
    uint64_t v209 = *(void *)(v204 + v207 + 8);
    uint64_t v210 = (void *)(v41 + v207);
    id v211 = v210[1];
    if (v209)
    {
      if (!v211
        || (*v208 != *v210 || v209 != v211)
        && (_stringCompareWithSmolCheck(_:_:expecting:)(*v208, v209, *v210, v211, 0LL) & 1) == 0)
      {
        return 0LL;
      }
    }

    else if (v211)
    {
      return 0LL;
    }

    return 1LL;
  }

  return result;
}

    __break(1u);
    goto LABEL_73;
  }

  double v195 = v68;
  double v196 = v81;
  sub_10002218C(v141, (uint64_t)v85, type metadata accessor for BeaconKeyManager.FileSwapInfo);
  double v197 = (uint64_t)v85;
  double v198 = *v84 | v84[1];
  double v199 = v306;
  sub_10001DC4C(v197, (uint64_t)v306, type metadata accessor for BeaconKeyManager.FileSwapInfo);
  double v200 = (uint64_t)v84;
  double v201 = v305;
  sub_10001DC4C(v200, (uint64_t)v305, type metadata accessor for BeaconKeyManager.FileSwapInfo);
  if (v198)
  {
    uint64_t v209 = *v199;
    uint64_t v208 = v199[1];
    uint64_t v210 = (uint64_t)v201;
    uint64_t v212 = *v201;
    id v211 = v201[1];
    sub_100018C68(v210, type metadata accessor for BeaconKeyManager.FileSwapInfo);
    sub_100018C68((uint64_t)v199, type metadata accessor for BeaconKeyManager.FileSwapInfo);
    sub_100018C68(v197, type metadata accessor for BeaconKeyManager.FileSwapInfo);
    id v213 = v209 == v212;
    uint64_t v80 = v333;
    uint64_t v83 = v328;
    uint64_t v81 = v196;
    uint64_t v68 = v195;
    uint64_t v140 = v323;
    if (v213 && v208 == v211)
    {
      uint64_t v325 = 0LL;
      uint64_t v326 = 0LL;
      uint64_t v329 = 0LL;
      __int128 v204 = 0LL;
      double v202 = v320;
      __int128 v203 = v324;
      double v192 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v327;
      goto LABEL_66;
    }

    goto LABEL_38;
  }

  sub_100018C68((uint64_t)v201, type metadata accessor for BeaconKeyManager.FileSwapInfo);
  sub_100018C68((uint64_t)v199, type metadata accessor for BeaconKeyManager.FileSwapInfo);
  sub_100018C68(v197, type metadata accessor for BeaconKeyManager.FileSwapInfo);
  uint64_t v325 = 0LL;
  uint64_t v326 = 0LL;
  uint64_t v329 = 0LL;
  double v202 = v320;
  __int128 v203 = v324;
  uint64_t v68 = v195;
  __int128 v204 = 0LL;
  double v192 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v327;
LABEL_66:
  sub_1007B0324(v203);
  if (v192(v83, 1LL, v80) == 1)
  {
    __int128 v333 = *(void *)((char *)v202 + OBJC_IVAR____TtC12searchpartyd16BeaconKeyManager_publishQueue);
    v327 = v204;
    v274 = v298;
    sub_10001DC4C(v203, v298, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
    uint64_t v275 = *(unsigned __int8 *)(v296 + 80);
    uint64_t v276 = (v275 + 16) & ~v275;
    uint64_t v277 = v335;
    uint64_t v278 = v68;
    uint64_t v279 = (v297 + v276 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v280 = swift_allocObject(&unk_10097A440, v279 + 8, v275 | 7);
    sub_10002218C(v274, v280 + v276, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
    *(void *)(v280 + v279) = v202;
    v340 = sub_1007C3D40;
    v341 = v280;
    __int128 aBlock = _NSConcreteStackBlock;
    v337 = 1107296256LL;
    v338 = sub_1001C31E8;
    v339 = &unk_10097A458;
    uint64_t v281 = _Block_copy(&aBlock);
    uint64_t v282 = swift_retain();
    uint64_t v283 = v299;
    static DispatchQoS.unspecified.getter(v282);
    v342 = _swiftEmptyArrayStorage;
    uint64_t v284 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v285 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v286 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    v287 = v302;
    uint64_t v288 = v285;
    uint64_t v289 = v304;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v342, v288, v286, v304, v284);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v283, v287, v281);

    _Block_release(v281);
    (*(void (**)(char *, uint64_t))(v303 + 8))(v287, v289);
    (*(void (**)(char *, uint64_t))(v300 + 8))(v283, v301);
    v278(v331, v277);
    v278(v330, v277);
    v278(v311, v277);
    swift_release(v341);
    sub_10002214C((uint64_t)v316, v317);
    sub_10002214C((uint64_t)v310, v314);
    sub_10002214C((uint64_t)v325, (uint64_t)v326);
    uint64_t v290 = (uint64_t)v329;
    uint64_t v291 = (uint64_t)v327;
  }

  else
  {

    v292 = v335;
    v68(v331, v335);
    v68(v330, v292);
    v68(v311, v292);
    sub_10002214C((uint64_t)v316, v317);
    sub_10002214C((uint64_t)v310, v314);
    sub_10002214C((uint64_t)v325, (uint64_t)v326);
    uint64_t v290 = (uint64_t)v329;
    uint64_t v291 = (uint64_t)v204;
  }

  sub_10002214C(v290, v291);
}

    swift_once(&qword_10099B3E8, sub_1003E02E8);
    goto LABEL_68;
  }

  if (v127 >= v117) {
    BOOL v42 = v127;
  }
  ((void (*)(char *, uint64_t))v49)(v144, v27);
  sub_100015794((uint64_t)v153, (uint64_t *)&unk_1009A34D0);
  sub_100015794((uint64_t)v157, (uint64_t *)&unk_1009A34D0);
  ((void (*)(char *, uint64_t))v49)(v154, v27);
  return v42;
}

  __break(1u);
  return result;
}

LABEL_71:
        unsigned __int8 v12 = 0;
        int v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 8));
      }

      goto LABEL_72;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

        unsigned __int8 v12 = 0;
        int v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 16));
      }

      goto LABEL_72;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

        unsigned __int8 v12 = 0;
        int v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }

      goto LABEL_72;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

      sub_1003CB58C((unint64_t *)&v109, (unint64_t *)&v108, (uint64_t *)&v107);
      return 1LL;
    }
  }

  else if ((v34 & 0x8000000000000000LL) == 0)
  {
    uint64_t v36 = v94;
    uint64_t v37 = v34 * v94;
    if (a4 < v93 || v93 + v37 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, v93, v34, v24);
    }

    else if (a4 != v93)
    {
      swift_arrayInitWithTakeBackToFront(a4, v93);
    }

    uint64_t v101 = (_BYTE *)(a4 + v37);
    uint64_t v107 = a4 + v37;
    if (v37 >= 1 && v106 < a3)
    {
      unint64_t v104 = a3;
      while (1)
      {
        BOOL v42 = v36;
        uint64_t v43 = v99;
        sub_10001DC4C(v106, v99, type metadata accessor for ShareRecord);
        uint64_t v44 = v96;
        sub_10001DC4C((uint64_t)v105, (uint64_t)v96, type metadata accessor for ShareRecord);
        uint64_t v45 = v98;
        sub_10001581C(v43 + *(int *)(v24 + 32), (uint64_t)v98, (uint64_t *)&unk_10099D720);
        uint64_t v46 = v100;
        uint64_t v47 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v100 + 48);
        uint64_t v48 = v102;
        if (v47(v45, 1LL, v102) == 1) {
          goto LABEL_26;
        }
        uint64_t v49 = (uint64_t)v44;
        uint64_t v50 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v46 + 32);
        v50(v95, v98, v48);
        uint64_t v45 = v90;
        sub_10001581C((uint64_t)&v44[*(int *)(v103 + 32)], (uint64_t)v90, (uint64_t *)&unk_10099D720);
        if (v47(v45, 1LL, v48) == 1) {
          break;
        }
        uint64_t v55 = v95;
        uint64_t v56 = v88;
        v50(v88, v45, v48);
        uint64_t v57 = static Date.< infix(_:_:)(v55, v56);
        uint64_t v58 = *(void (**)(_BYTE *, uint64_t))(v46 + 8);
        v58(v56, v48);
        v58(v55, v48);
        sub_100018C68(v49, type metadata accessor for ShareRecord);
        sub_100018C68(v99, type metadata accessor for ShareRecord);
        uint64_t v36 = v94;
        if ((v57 & 1) == 0) {
          goto LABEL_27;
        }
        uint64_t v51 = (unint64_t)v109;
        unint64_t v54 = v106 + v94;
        unsigned int v24 = v103;
        unint64_t v53 = v104;
        if ((unint64_t)v109 < v106 || (unint64_t)v109 >= v54)
        {
          swift_arrayInitWithTakeFrontToBack(v109, v106, 1LL, v103);
        }

        else if (v109 == (_BYTE *)v106)
        {
          uint64_t v51 = v106;
        }

        else
        {
          swift_arrayInitWithTakeBackToFront(v109, v106);
        }

        int64_t v228 = sub_100004AEC(v215);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v228 - 8) + 56LL))( v217,  1LL,  1LL,  v228);
        uint64_t v219 = 0LL;
        goto LABEL_72;
      }

      uint64_t v190 = *(void *)(v180 + 8 * v189);
      ++v174;
      if (!v190)
      {
        uint64_t v174 = v189 + 1;
        if (v189 + 1 >= v183) {
          goto LABEL_56;
        }
        uint64_t v190 = *(void *)(v180 + 8 * v174);
        if (!v190)
        {
          uint64_t v174 = v189 + 2;
          if (v189 + 2 >= v183) {
            goto LABEL_56;
          }
          uint64_t v190 = *(void *)(v180 + 8 * v174);
          if (!v190)
          {
            uint64_t v174 = v189 + 3;
            if (v189 + 3 >= v183) {
              goto LABEL_56;
            }
            uint64_t v190 = *(void *)(v180 + 8 * v174);
            if (!v190)
            {
              uint64_t v174 = v189 + 4;
              if (v189 + 4 >= v183) {
                goto LABEL_56;
              }
              uint64_t v190 = *(void *)(v180 + 8 * v174);
              if (!v190)
              {
                double v191 = v189 + 5;
                if (v191 >= v183) {
                  goto LABEL_56;
                }
                uint64_t v190 = *(void *)(v180 + 8 * v191);
                if (!v190)
                {
                  while (1)
                  {
                    uint64_t v174 = v191 + 1;
                    if (__OFADD__(v191, 1LL)) {
                      goto LABEL_99;
                    }
                    if (v174 >= v183) {
                      goto LABEL_56;
                    }
                    uint64_t v190 = *(void *)(v180 + 8 * v174);
                    ++v191;
                    if (v190) {
                      goto LABEL_55;
                    }
                  }
                }

                uint64_t v174 = v191;
              }
            }
          }
        }
      }

        int64_t v228 = sub_100004AEC(v215);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v228 - 8) + 56LL))( v217,  1LL,  1LL,  v228);
        uint64_t v219 = 0LL;
        goto LABEL_72;
      }

      uint64_t v190 = *(void *)(v180 + 8 * v189);
      ++v174;
      if (!v190)
      {
        uint64_t v174 = v189 + 1;
        if (v189 + 1 >= v183) {
          goto LABEL_56;
        }
        uint64_t v190 = *(void *)(v180 + 8 * v174);
        if (!v190)
        {
          uint64_t v174 = v189 + 2;
          if (v189 + 2 >= v183) {
            goto LABEL_56;
          }
          uint64_t v190 = *(void *)(v180 + 8 * v174);
          if (!v190)
          {
            uint64_t v174 = v189 + 3;
            if (v189 + 3 >= v183) {
              goto LABEL_56;
            }
            uint64_t v190 = *(void *)(v180 + 8 * v174);
            if (!v190)
            {
              uint64_t v174 = v189 + 4;
              if (v189 + 4 >= v183) {
                goto LABEL_56;
              }
              uint64_t v190 = *(void *)(v180 + 8 * v174);
              if (!v190)
              {
                double v191 = v189 + 5;
                if (v191 >= v183) {
                  goto LABEL_56;
                }
                uint64_t v190 = *(void *)(v180 + 8 * v191);
                if (!v190)
                {
                  while (1)
                  {
                    uint64_t v174 = v191 + 1;
                    if (__OFADD__(v191, 1LL)) {
                      goto LABEL_99;
                    }
                    if (v174 >= v183) {
                      goto LABEL_56;
                    }
                    uint64_t v190 = *(void *)(v180 + 8 * v174);
                    ++v191;
                    if (v190) {
                      goto LABEL_55;
                    }
                  }
                }

                uint64_t v174 = v191;
              }
            }
          }
        }
      }

  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
  }
  uint64_t v37 = v2[2];
  uint64_t v36 = v2[3];
  if (v37 >= v36 >> 1) {
    uint64_t v2 = sub_1004C4120((void *)(v36 > 1), v37 + 1, 1, v2);
  }
  v2[2] = v37 + 1;
  uint64_t v38 = (char *)&v2[2 * v37];
  strcpy(v38 + 32, ".cpuIntensive");
  *((_WORD *)v38 + 23) = -4864;
  if ((a1 & 0x1000) == 0)
  {
LABEL_33:
    if ((a1 & 0x2000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_81;
  }

                uint64_t v173 = v202;
                uint64_t v305 = v7;
                ((void (*)(uint64_t, __n128 *))v7)(v129, v202);
                id v181 = v187;
                unint64_t v158 = (uint64_t)v296;
                uint64_t v182 = v299;
                continue;
              }

              double v199 = *(void *)(v158 + *(int *)(v198 + 36));
              swift_bridgeObjectRetain(v199);
              sub_100018C68(v158, type metadata accessor for BeaconStatus);
              double v200 = (uint64_t)v288;
              if (!v199) {
                goto LABEL_93;
              }
              ((void (*)(uint64_t, uint64_t, __n128 *))v180)(v182, v293, v7);
              v304((char *)v182, 0LL, 1LL, v7);
              double v201 = v200 + *(int *)(v282 + 48);
              sub_10001581C(v182, v200, &qword_10099D8A0);
              sub_10001581C(v283, v201, &qword_10099D8A0);
              if (v191(v200, 1LL, v7) == 1)
              {
                sub_100015794(v182, &qword_10099D8A0);
                double v202 = v7;
                if (v191(v201, 1LL, v7) != 1)
                {
LABEL_97:
                  sub_100015794(v200, (uint64_t *)&unk_1009B5370);
                  unint64_t v183 = (uint64_t)v286;
                  uint64_t v180 = (void (*)(char *, unint64_t, __n128 *, __n128))v308;
                  v308((uint64_t)v286, v293, v202);
                  id v184 = v281;
                  ((void (*)(char *, uint64_t, __n128 *))v180)(v281, v306, v202);
                  goto LABEL_98;
                }

                sub_100015794(v200, &qword_10099D8A0);
                unint64_t v183 = (uint64_t)v286;
                uint64_t v180 = (void (*)(char *, unint64_t, __n128 *, __n128))v308;
                v308((uint64_t)v286, v293, v7);
                id v184 = v281;
                ((void (*)(char *, uint64_t, __n128 *))v180)(v281, v306, v7);
LABEL_69:
                swift_bridgeObjectRelease();
                unsigned __int8 v7 = v305;
                ((void (*)(char *, __n128 *))v305)(v184, v202);
                ((void (*)(uint64_t, __n128 *))v7)(v183, v202);
                id v172 = v301;
LABEL_70:
                id v185 = v289;
                uint64_t v129 = v306;
                ((void (*)(char *, uint64_t, __n128 *))v180)(v289, v306, v202);
                uint64_t v186 = v295;
                sub_1000BD768(v295, v185);
                ((void (*)(uint64_t, __n128 *))v7)(v186, v202);
                id v187 = v310;
                goto LABEL_71;
              }

              uint64_t v208 = v269;
              sub_10001581C(v200, v269, &qword_10099D8A0);
              if (v191(v201, 1LL, v7) == 1)
              {
                sub_100015794(v299, &qword_10099D8A0);
                ((void (*)(uint64_t, __n128 *))v305)(v208, v7);
                double v202 = v7;
                goto LABEL_97;
              }

              uint64_t v214 = v295;
              v195(v295, (char *)v201, v7);
              uint64_t v215 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
              uint64_t v268 = dispatch thunk of static Equatable.== infix(_:_:)(v208, v214, v7, v215);
              uint64_t v216 = v305;
              ((void (*)(uint64_t, __n128 *))v305)(v214, v7);
              sub_100015794(v299, &qword_10099D8A0);
              ((void (*)(uint64_t, __n128 *))v216)(v208, v7);
              sub_100015794(v200, &qword_10099D8A0);
              unint64_t v183 = (uint64_t)v286;
              uint64_t v180 = (void (*)(char *, unint64_t, __n128 *, __n128))v308;
              v308((uint64_t)v286, v293, v7);
              id v184 = v281;
              ((void (*)(char *, uint64_t, __n128 *))v180)(v281, v306, v7);
              double v202 = v7;
              if ((v268 & 1) != 0) {
                goto LABEL_69;
              }
LABEL_98:
              uint64_t v209 = sub_1004E4BF0(v183, v199);
              swift_bridgeObjectRelease();
              uint64_t v210 = v280;
              ((void (*)(char *, char *, __n128 *))v180)(v280, v184, v202);
              id v172 = v301;
              if ((v209 & 1) != 0)
              {
                id v211 = (uint64_t)v210;
                uint64_t v212 = (uint64_t)v317;
                swift_bridgeObjectRetain(v317);
                id v213 = sub_1004E4BF0(v211, v212);
                swift_bridgeObjectRelease();
                unsigned __int8 v7 = v305;
                ((void (*)(uint64_t, __n128 *))v305)(v211, v202);
                ((void (*)(char *, __n128 *))v7)(v184, v202);
                ((void (*)(char *, __n128 *))v7)(v286, v202);
                if ((v213 & 1) == 0) {
                  goto LABEL_70;
                }
              }

              else
              {
                unsigned __int8 v7 = v305;
                ((void (*)(char *, __n128 *))v305)(v210, v202);
                ((void (*)(char *, __n128 *))v7)(v184, v202);
                ((void (*)(uint64_t, __n128 *))v7)(v183, v202);
              }

              id v187 = v310;
              uint64_t v129 = v306;
              goto LABEL_71;
            }

            id v230 = v287;
            uint64_t v231 = v273;
LABEL_119:
            swift_release();
            uint64_t v247 = v315;
            swift_bridgeObjectRetain(v315);
            sub_1000BF79C(&v313, v247);
            swift_bridgeObjectRelease();
            swift_beginAccess(&v317, &v313, 33LL, 0LL);
            sub_100673B54(v247);
            uint64_t v248 = swift_endAccess(&v313);
            int v249 = (os_log_s *)Logger.logObject.getter(v248);
            uint64_t v250 = static os_log_type_t.debug.getter(v249);
            if (os_log_type_enabled(v249, v250))
            {
              uint64_t v251 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
              uint64_t v252 = swift_slowAlloc(32LL, -1LL);
              uint64_t v313 = v252;
              *(_DWORD *)uint64_t v251 = v258.n128_u32[0];
              v310 = (__n128 *)(v251 + 4);
              swift_bridgeObjectRetain(v317);
              uint64_t v254 = Set.description.getter(v253, v7, v231);
              uint64_t v256 = v255;
              swift_bridgeObjectRelease();
              uint64_t v312 = sub_1003F11D4(v254, v256, &v313);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v312, v259, v310, v251 + 12);
              id v230 = v287;
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v249, v250, "Inserted: %s", v251, 0xCu);
              swift_arrayDestroy(v252, 1LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v252, -1LL, -1LL);
              uint64_t v257 = v251;
              uint64_t v94 = v230;
              swift_slowDealloc(v257, -1LL, -1LL);

              uint64_t v93 = v293;
              ((void (*)(uint64_t, __n128 *))v309)(v293, v7);
            }

            else
            {

              uint64_t v93 = v293;
              ((void (*)(uint64_t, __n128 *))v309)(v293, v7);
              uint64_t v94 = v230;
            }

            sub_100018C68(v230, type metadata accessor for BeaconStatus);
            uint64_t v97 = (uint64_t)v277;
            int v99 = v278;
            goto LABEL_123;
          }

          break;
        }

        double v194 = v179 + 1;
        double v191 = (unsigned int (*)(uint64_t, uint64_t, __n128 *))v297;
        if (v179 + 1 >= v292) {
          goto LABEL_118;
        }
        double v193 = *(void *)(v291 + 8 * v194);
        if (v193) {
          goto LABEL_84;
        }
        double v194 = v179 + 2;
        if (v179 + 2 >= v292) {
          goto LABEL_118;
        }
        double v193 = *(void *)(v291 + 8 * v194);
        if (v193) {
          goto LABEL_84;
        }
        double v194 = v179 + 3;
        if (v179 + 3 >= v292) {
          goto LABEL_118;
        }
        double v193 = *(void *)(v291 + 8 * v194);
        if (v193)
        {
LABEL_84:
          id v179 = v194;
          goto LABEL_85;
        }

        while (1)
        {
          id v179 = v194 + 1;
          if (__OFADD__(v194, 1LL)) {
            break;
          }
          if (v179 >= v292) {
            goto LABEL_118;
          }
          double v193 = *(void *)(v291 + 8 * v179);
          ++v194;
          if (v193) {
            goto LABEL_85;
          }
        }

        uint64_t v61 = swift_isUniquelyReferenced_nonNull_native(v49);
        v195._countAndFlagsBits = (uint64_t)v49;
        if ((v61 & 1) == 0)
        {
          sub_1000334A8(0, v49[2] + 1LL, 1);
          uint64_t v49 = (void *)v195._countAndFlagsBits;
        }

        uint64_t v63 = v49[2];
        uint64_t v62 = v49[3];
        if (v63 >= v62 >> 1)
        {
          sub_1000334A8(v62 > 1, v63 + 1, 1);
          uint64_t v49 = (void *)v195._countAndFlagsBits;
        }

        void v49[2] = v63 + 1;
        uint64_t v64 = &v49[2 * v63];
        v64[4] = v59;
        *((_BYTE *)v64 + 40) = v60;
        if (!v47) {
          goto LABEL_50;
        }
LABEL_49:
        unint64_t v53 = __clz(__rbit64(v47));
        v47 &= v47 - 1;
      }
    }

    uint64_t v57 = v55 + 5;
    if (v57 < v191)
    {
      uint64_t v56 = *(void *)(v192 + 8 * v57);
      if (!v56)
      {
        while (1)
        {
          uint64_t v48 = v57 + 1;
          if (__OFADD__(v57, 1LL)) {
            goto LABEL_191;
          }
          if (v48 >= v191) {
            goto LABEL_77;
          }
          uint64_t v56 = *(void *)(v192 + 8 * v48);
          ++v57;
          if (v56) {
            goto LABEL_67;
          }
        }
      }

      uint64_t v48 = v57;
      goto LABEL_67;
    }
  }

                  __break(1u);
                  goto LABEL_72;
                }

                uint64_t v18 = v19;
              }
            }
          }

unsigned __int8 *sub_1001B9834(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v14 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v15 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = a3 + 55;
        }

        else
        {
          unsigned __int8 v15 = 97;
          unsigned __int8 v16 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v17 = a3 + 48;
        }
        else {
          unsigned __int8 v17 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          uint64_t v18 = result + 1;
          do
          {
            unsigned int v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                unsigned __int16 v12 = 0;
                int v13 = 1;
                if (v19 < 0x61 || v19 >= v15) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v20 = -87;
              }

              else
              {
                char v20 = -55;
              }
            }

            else
            {
              char v20 = -48;
            }

            int v8 = (unsigned __int16)(v8 * a3) + (v19 + v20);
            if ((v8 & 0x10000) != 0) {
              goto LABEL_72;
            }
            ++v18;
            --v14;
          }

          while (v14);
LABEL_48:
          int v13 = 0;
          unsigned __int16 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }

        goto LABEL_71;
      }

unsigned __int8 *sub_1001B9ADC(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }

          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }

          if (result)
          {
            unint64_t v9 = 0LL;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0LL;
                  }
                  char v12 = -87;
                }

                else
                {
                  char v12 = -55;
                }
              }

              else
              {
                char v12 = -48;
              }

              if (!is_mul_ok(v9, a3)) {
                return 0LL;
              }
              unint64_t v13 = v9 * a3;
              unsigned __int8 v14 = v11 + v12;
              BOOL v15 = v13 >= v14;
              unint64_t v9 = v13 - v14;
              if (!v15) {
                return 0LL;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }

          return 0LL;
        }

        return 0LL;
      }

      __break(1u);
      goto LABEL_66;
    }

    if (a2)
    {
      unsigned __int8 v25 = a3 + 48;
      unsigned __int8 v26 = a3 + 55;
      unsigned __int8 v27 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v25 = 58;
      }

      else
      {
        unsigned __int8 v27 = 97;
        unsigned __int8 v26 = 65;
      }

      if (result)
      {
        unint64_t v28 = 0LL;
        do
        {
          unsigned int v29 = *result;
          if (v29 < 0x30 || v29 >= v25)
          {
            if (v29 < 0x41 || v29 >= v26)
            {
              if (v29 < 0x61 || v29 >= v27) {
                return 0LL;
              }
              char v30 = -87;
            }

            else
            {
              char v30 = -55;
            }
          }

          else
          {
            char v30 = -48;
          }

          if (!is_mul_ok(v28, a3)) {
            return 0LL;
          }
          unint64_t v31 = v28 * a3;
          unsigned __int8 v32 = v29 + v30;
          BOOL v15 = __CFADD__(v31, v32);
          unint64_t v28 = v31 + v32;
          if (v15) {
            return 0LL;
          }
          ++result;
          --v3;
        }

        while (v3);
        return (unsigned __int8 *)v28;
      }

      return 0LL;
    }

    return 0LL;
  }

  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }

  uint64_t v16 = a2 - 1;
  if (a2 == 1) {
    return 0LL;
  }
  unsigned __int8 v17 = a3 + 48;
  unsigned __int8 v18 = a3 + 55;
  unsigned __int8 v19 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v17 = 58;
  }

  else
  {
    unsigned __int8 v19 = 97;
    unsigned __int8 v18 = 65;
  }

  if (!result) {
    return 0LL;
  }
  unint64_t v9 = 0LL;
  char v20 = result + 1;
  do
  {
    unsigned int v21 = *v20;
    if (v21 < 0x30 || v21 >= v17)
    {
      if (v21 < 0x41 || v21 >= v18)
      {
        if (v21 < 0x61 || v21 >= v19) {
          return 0LL;
        }
        char v22 = -87;
      }

      else
      {
        char v22 = -55;
      }
    }

    else
    {
      char v22 = -48;
    }

    if (!is_mul_ok(v9, a3)) {
      return 0LL;
    }
    unint64_t v23 = v9 * a3;
    unsigned __int8 v24 = v21 + v22;
    BOOL v15 = __CFADD__(v23, v24);
    unint64_t v9 = v23 + v24;
    if (v15) {
      return 0LL;
    }
    ++v20;
    --v16;
  }

  while (v16);
  return (unsigned __int8 *)v9;
}

unsigned __int8 *sub_1001B9D58(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }

          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }

          if (result)
          {
            uint64_t v9 = 0LL;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0LL;
                  }
                  char v12 = -87;
                }

                else
                {
                  char v12 = -55;
                }
              }

              else
              {
                char v12 = -48;
              }

              uint64_t v13 = v9 * a3;
              uint64_t v9 = v13 - (v11 + v12);
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }

          return 0LL;
        }

        return 0LL;
      }

      __break(1u);
      goto LABEL_65;
    }

    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }

      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }

      if (result)
      {
        uint64_t v25 = 0LL;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0LL;
              }
              char v27 = -87;
            }

            else
            {
              char v27 = -55;
            }
          }

          else
          {
            char v27 = -48;
          }

          uint64_t v28 = v25 * a3;
          uint64_t v25 = v28 + (v26 + v27);
          ++result;
          --v3;
        }

        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }

      return 0LL;
    }

    return 0LL;
  }

  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }

  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0LL;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }

  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }

  if (!result) {
    return 0LL;
  }
  uint64_t v9 = 0LL;
  unsigned __int8 v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0LL;
        }
        char v20 = -87;
      }

      else
      {
        char v20 = -55;
      }
    }

    else
    {
      char v20 = -48;
    }

    uint64_t v21 = v9 * a3;
    uint64_t v9 = v21 + (v19 + v20);
    ++v18;
    --v14;
  }

  while (v14);
  return (unsigned __int8 *)v9;
}

unsigned __int8 *sub_1001B9FD4(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }

        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          char v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v22 = -87;
              }

              else
              {
                char v22 = -55;
              }
            }

            else
            {
              char v22 = -48;
            }

            uint64_t v23 = (int)v8 * (uint64_t)(int)a3;
            unsigned __int8 v24 = v21 + v22;
            unsigned int v8 = v23 + v24;
            if (__OFADD__((_DWORD)v23, v24)) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }

          while (v16);
LABEL_48:
          unsigned __int8 v13 = 0;
          unsigned int v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }

        goto LABEL_71;
      }

uint64_t sub_1001BA254(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1;
  }
  uint64_t v3 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v3 = 11LL;
  }
  unint64_t v4 = String.subscript.getter(15LL, v3 | (v2 << 16), a1, a2);
  uint64_t v8 = sub_1001BA2D0(v4, v5, v6, v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1001BA2D0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a3;
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    unint64_t v12 = sub_1001BA414(a1, a2, a3, a4);
    if (v12)
    {
      uint64_t v9 = v12;
      unint64_t v8 = (unint64_t)sub_1001B90C4(v12, 0LL);
      unint64_t v5 = sub_1001BA500((unint64_t)v14, v8 + 32, v9, a1, a2, v5, a4);
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease();
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }

    else
    {
      unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
    }

    uint64_t v13 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(void *)(v8 + 16));
    swift_release(v8);
    return v13;
  }

  else
  {
    unint64_t v8 = a1 >> 16;
    uint64_t v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000LL) == 0)
    {
      if ((a3 & 0x1000000000000000LL) != 0)
      {
        uint64_t v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }

unint64_t sub_1001BA414( unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4LL << v8;
  if ((result & 0xC) == 4LL << v8)
  {
    unint64_t result = sub_1001B9128(result, a3, a4);
    unint64_t v7 = result;
  }

  if ((a2 & 0xC) == v9)
  {
    unint64_t result = sub_1001B9128(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000LL) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }

  else if ((a4 & 0x1000000000000000LL) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }

  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }

  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }

  __break(1u);
  return result;
}