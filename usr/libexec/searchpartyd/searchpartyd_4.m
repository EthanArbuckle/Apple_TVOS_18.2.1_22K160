unint64_t sub_1001BA500( unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  void *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  void v28[2];
  v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    v12 = a4;
    v11 = 0LL;
    goto LABEL_33;
  }

  if (a3 < 0) {
    goto LABEL_36;
  }
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0LL;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }

  v11 = 0LL;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000LL) == 0) {
    LOBYTE(v14) = 1;
  }
  v15 = 4LL << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000LL) == 0) {
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15) {
      result = sub_1001B9128(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000LL) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }

    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000LL) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }

      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000LL) == 0) {
          result = _StringObject.sharedUTF8.getter(a6, a7);
        }
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000LL) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }

    result = sub_1001B9128(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000LL) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000LL) + 65540;
      goto LABEL_29;
    }

uint64_t sub_1001BA710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009A6DB0);
  __chkstk_darwin(v10);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  v19 = (char *)&v40 - v18;
  v43[3] = a4;
  v43[4] = a5;
  v20 = sub_10000A7C8(v43);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32LL))(v20, a1, a4);
  uint64_t v21 = qword_1009A4BB8;
  uint64_t v22 = type metadata accessor for FMNAuthenticationProvider(0LL);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  uint64_t v23 = swift_retain();
  *(void *)(a3 + v21) = FMNAuthenticationProvider.init()(v23);
  uint64_t v24 = qword_1009A4BC8;
  if (qword_10099B1A0 != -1) {
    swift_once(&qword_10099B1A0, sub_1001B42D8);
  }
  uint64_t v25 = qword_100A2A2F8;
  *(void *)(a3 + v24) = qword_100A2A2F8;
  uint64_t v26 = swift_unownedRetain(v25);
  UUID.init()(v26);
  uint64_t v27 = qword_1009A4BD0;
  id v28 = [objc_allocWithZone(NSLock) init];
  *(void *)(a3 + v27) = v28;
  *(_BYTE *)(a3 + qword_1009A4BD8) = 0;
  static SystemInfo.lockState.getter(v28);
  (*(void (**)(char *, void, uint64_t))(v14 + 104))( v17,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v13);
  uint64_t v29 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v42, v13, v29);
  dispatch thunk of RawRepresentable.rawValue.getter(&v41, v13, v29);
  uint64_t v31 = v41;
  uint64_t v30 = v42;
  v32 = *(void (**)(char *, uint64_t))(v14 + 8);
  v32(v17, v13);
  v32(v19, v13);
  if (v30 == v31)
  {
    unint64_t v33 = sub_1001B9018();
    v34 = (void *)static OS_os_log.default.getter(v33);
    uint64_t v35 = static os_log_type_t.default.getter(v34);
    os_log(_:dso:log:type:_:)( "ServerInteractionController preventing auto-renew credentials before first unlock.",  82LL,  2LL,  &_mh_execute_header,  v34,  v35,  _swiftEmptyArrayStorage);

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter(0LL);
    swift_release();
  }

  sub_100013044((uint64_t)v43, a3 + qword_1009A4BC0);
  swift_release();
  uint64_t v36 = type metadata accessor for FMNMockingPreferences(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56LL))(v12, 1LL, 1LL, v36);
  uint64_t v37 = swift_retain();
  uint64_t v38 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)( v37,  &protocol witness table for FMNAuthenticationProvider,  v12,  a2);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v43);
  return v38;
}

uint64_t sub_1001BAA30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a4 - 8);
  __chkstk_darwin(a1);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for ServerInteractionController(0LL);
  uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a4);
  return sub_1001BA710((uint64_t)v11, a2, v13, a4, a5);
}

uint64_t sub_1001BAAE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v4)
  {
    a2 += qword_100A2A300;
    uint64_t v5 = 4LL;
    while (1)
    {
      uint64_t v6 = v5 - 4;
      if ((a1 & 0xC000000000000001LL) == 0) {
        break;
      }
      uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1);
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v6, 1LL)) {
        goto LABEL_12;
      }
LABEL_9:
      char v9 = static UUID.== infix(_:_:)(v7 + qword_100A2A300, a2);
      swift_release(v7);
      if ((v9 & 1) == 0)
      {
        ++v5;
        if (v8 != v4) {
          continue;
        }
      }

      goto LABEL_18;
    }

    uint64_t v7 = *(void *)(a1 + 8 * v5);
    swift_retain(v7);
    uint64_t v8 = v5 - 3;
    if (!__OFADD__(v6, 1LL)) {
      goto LABEL_9;
    }
LABEL_12:
    __break(1u);
LABEL_13:
    if (a1 < 0) {
      uint64_t v10 = a1;
    }
    else {
      uint64_t v10 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v10);
  }

  char v9 = 0;
LABEL_18:
  swift_bridgeObjectRelease(a1);
  return v9 & 1;
}

void sub_1001BABFC(uint64_t a1)
{
  if (!*(void *)(a1 + 16)
    || (uint64_t v2 = sub_10030CF14(0xD00000000000001FLL, 0x8000000100857D00LL), (v3 & 1) == 0)
    || ((uint64_t v4 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v2),
         uint64_t v5 = *v4,
         unint64_t v6 = v4[1],
         uint64_t v7 = HIBYTE(v6) & 0xF,
         uint64_t v8 = *v4 & 0xFFFFFFFFFFFFLL,
         (v6 & 0x2000000000000000LL) != 0)
      ? (uint64_t v9 = HIBYTE(v6) & 0xF)
      : (uint64_t v9 = *v4 & 0xFFFFFFFFFFFFLL),
        !v9))
  {
LABEL_61:
    unint64_t v29 = sub_1001B9018();
    uint64_t v30 = (void *)static OS_os_log.default.getter(v29);
    uint64_t v31 = static os_log_type_t.default.getter(v30);
    os_log(_:dso:log:type:_:)( "ServerInteractionController did not find serial-number header.",  62LL,  2LL,  &_mh_execute_header,  v30,  v31,  _swiftEmptyArrayStorage);

    return;
  }

  if ((v6 & 0x1000000000000000LL) != 0)
  {
    swift_bridgeObjectRetain(v4[1]);
    uint64_t v13 = sub_1001B93B8(v5, v6, 10LL, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_1001B9ADC);
    char v28 = v27;
    swift_bridgeObjectRelease();
    if ((v28 & 1) == 0) {
      goto LABEL_40;
    }
    goto LABEL_61;
  }

  if ((v6 & 0x2000000000000000LL) == 0)
  {
    if ((v5 & 0x1000000000000000LL) != 0) {
      uint64_t v10 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v10 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(*v4, v4[1]);
    }
    uint64_t v11 = sub_1001B9ADC(v10, v8, 10LL);
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = (uint64_t)v11;
LABEL_40:
      sub_10043A7D0(v13);
      return;
    }

    goto LABEL_61;
  }

  v32[0] = *v4;
  v32[1] = v6 & 0xFFFFFFFFFFFFFFLL;
  if (v5 == 43)
  {
    if (v7)
    {
      if (v7 != 1 && (BYTE1(v5) - 48) <= 9u)
      {
        uint64_t v13 = (BYTE1(v5) - 48);
        if (v7 == 2) {
          goto LABEL_38;
        }
        if ((BYTE2(v5) - 48) <= 9u)
        {
          uint64_t v13 = 10LL * (BYTE1(v5) - 48) + (BYTE2(v5) - 48);
          uint64_t v15 = v7 - 3;
          if (v15)
          {
            uint64_t v16 = (unsigned __int8 *)v32 + 3;
            while (1)
            {
              unsigned int v17 = *v16 - 48;
              if (v17 > 9) {
                goto LABEL_35;
              }
              if (!is_mul_ok(v13, 0xAuLL)) {
                goto LABEL_35;
              }
              BOOL v18 = __CFADD__(10 * v13, v17);
              uint64_t v13 = 10 * v13 + v17;
              if (v18) {
                goto LABEL_35;
              }
              char v14 = 0;
              ++v16;
              if (!--v15) {
                goto LABEL_39;
              }
            }
          }

          goto LABEL_38;
        }
      }

      goto LABEL_35;
    }
  }

  else
  {
    if (v5 != 45)
    {
      if (v7 && (v5 - 48) <= 9u)
      {
        uint64_t v13 = (v5 - 48);
        if (v7 == 1) {
          goto LABEL_38;
        }
        if ((BYTE1(v5) - 48) <= 9u)
        {
          uint64_t v13 = 10LL * (v5 - 48) + (BYTE1(v5) - 48);
          uint64_t v19 = v7 - 2;
          if (v19)
          {
            v20 = (unsigned __int8 *)v32 + 2;
            while (1)
            {
              unsigned int v21 = *v20 - 48;
              if (v21 > 9) {
                goto LABEL_35;
              }
              if (!is_mul_ok(v13, 0xAuLL)) {
                goto LABEL_35;
              }
              BOOL v18 = __CFADD__(10 * v13, v21);
              uint64_t v13 = 10 * v13 + v21;
              if (v18) {
                goto LABEL_35;
              }
              char v14 = 0;
              ++v20;
              if (!--v19) {
                goto LABEL_39;
              }
            }
          }

          goto LABEL_38;
        }
      }

uint64_t sub_1001BAF70(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc(dword_1009A4CEC);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100015D58;
  v5[5] = a1;
  v5[6] = v4;
  return swift_task_switch(sub_1001B8D74, 0LL, 0LL);
}

uint64_t sub_1001BAFD8(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc(dword_1009A4CEC);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000159BC;
  v5[5] = a1;
  v5[6] = v4;
  return swift_task_switch(sub_1001B8D74, 0LL, 0LL);
}

uint64_t sub_1001BB040()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_1001BB074(uint64_t a1)
{
  return sub_1001B7F30( a1,  v1[2],  (uint64_t)(v1 + 3),  v1[8],  v1[9],  "ServerInteractionController Error calling server on Retry: %@",  61LL,  (uint64_t)&unk_1009463A0,  (uint64_t)&unk_1009A4D00);
}

uint64_t sub_1001BB0C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A4D20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001BB118()
{
  uint64_t v2 = *(void *)(v0 + 32);
  char v3 = (void *)swift_task_alloc(dword_1009A4D1C);
  *(void *)(v1 + 16) = v3;
  *char v3 = v1;
  v3[1] = sub_100015D58;
  v3[5] = v2;
  return swift_task_switch(sub_1001B8C5C, 0LL, 0LL);
}

uint64_t sub_1001BB178(uint64_t a1)
{
  return sub_1001B54A8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1001BB184()
{
  uint64_t v1 = sub_100004AEC(&qword_1009A4D40);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + v6));
  swift_release();
  return swift_deallocObject(v0, ((((v6 + 47) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8, v5);
}

uint64_t sub_1001BB21C(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_100004AEC(&qword_1009A4D40) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_1001B5C0C(a1, v1 + v4, v1 + v5, *(void *)(v1 + ((v5 + 47) & 0xFFFFFFFFFFFFFFF8LL)));
}

void sub_1001BB290(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v64 - v8;
  uint64_t v69 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v69 - 8);
  uint64_t v11 = __chkstk_darwin(v69);
  uint64_t v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v11);
  v68 = (char *)&v64 - v15;
  uint64_t v16 = CKRecord.recordType.getter(v14);
  if (v16 == 0xD000000000000015LL && v17 == 0x80000001007F4B30LL)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, 0xD000000000000015LL, 0x80000001007F4B30LL, 0LL);
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
    {
      unint64_t v54 = sub_1001BC568();
      uint64_t v27 = swift_allocError( &type metadata for NotifyWhenFoundRecord.NotifyWhenFoundRecordConversionError,  v54,  0LL,  0LL);
      _BYTE *v55 = 0;
      goto LABEL_13;
    }
  }

  v67 = a2;
  id v19 = [a1 recordID];
  id v20 = [v19 recordName];

  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  uint64_t v23 = v22;

  UUID.init(uuidString:)(v21, v23);
  swift_bridgeObjectRelease();
  uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  uint64_t v25 = v69;
  if (v24(v9, 1LL, v69) == 1)
  {
    sub_1001BC5AC((uint64_t)v9);
    unint64_t v26 = sub_1001BC568();
    uint64_t v27 = swift_allocError(&type metadata for NotifyWhenFoundRecord.NotifyWhenFoundRecordConversionError, v26, 0LL, 0LL);
    *char v28 = 1;
LABEL_13:
    swift_willThrow(v27);

    return;
  }

  unint64_t v29 = v9;
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v30(v68, v29, v25);
  id v31 = [a1 encryptedValues];
  NSString v32 = String._bridgeToObjectiveC()();
  id v66 = v31;
  id v33 = [v31 objectForKeyedSubscript:v32];

  if (v33
    && (id v71 = v33,
        uint64_t v35 = sub_100004AEC((uint64_t *)&unk_10099D910),
        uint64_t v34 = swift_dynamicCast(v70, &v71, v35, &type metadata for String, 6LL),
        (v34 & 1) != 0))
  {
    UUID.init(uuidString:)(v70[0], v70[1]);
    swift_bridgeObjectRelease();
    uint64_t v36 = v69;
    if (v24(v7, 1LL, v69) == 1)
    {
      uint64_t v37 = sub_1001BC5AC((uint64_t)v7);
      uint64_t v38 = static os_log_type_t.error.getter(v37);
      uint64_t v39 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v40 = swift_allocObject(v39, 72LL, 7LL);
      *(_OWORD *)(v40 + 16) = xmmword_1007E67D0;
      *(void *)(v40 + 56) = sub_100022898(0LL, (unint64_t *)&qword_10099D920, &OBJC_CLASS___CKRecord_ptr);
      *(void *)(v40 + 64) = sub_100022738();
      *(void *)(v40 + 32) = a1;
      sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
      id v41 = a1;
      uint64_t v42 = (void *)static OS_os_log.default.getter(v41);
      os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, v42, "beaconIdentifier is not a valid UUID - %@", 41LL, 2LL, v40);
      swift_bridgeObjectRelease();

      unint64_t v43 = sub_1001BC568();
      uint64_t v44 = swift_allocError( &type metadata for NotifyWhenFoundRecord.NotifyWhenFoundRecordConversionError,  v43,  0LL,  0LL);
      _BYTE *v45 = 2;
      swift_willThrow(v44);
      swift_unknownObjectRelease(v66);

      (*(void (**)(char *, uint64_t))(v10 + 8))(v68, v36);
    }

    else
    {
      v30(v13, v7, v36);
      v65 = objc_autoreleasePoolPush();
      id v56 = [objc_allocWithZone(NSKeyedArchiver) initRequiringSecureCoding:1];
      [a1 encodeSystemFieldsWithCoder:v56];
      [v56 finishEncoding];
      id v57 = [v56 encodedData];
      uint64_t v58 = v36;
      uint64_t v59 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v57);
      uint64_t v61 = v60;

      objc_autoreleasePoolPop(v65);
      swift_unknownObjectRelease(v66);

      v62 = v67;
      uint64_t *v67 = v59;
      v62[1] = v61;
      uint64_t found = type metadata accessor for NotifyWhenFoundRecord(0LL);
      v30((char *)v62 + *(int *)(found + 20), v68, v58);
      v30((char *)v62 + *(int *)(found + 24), v13, v58);
    }
  }

  else
  {
    uint64_t v46 = static os_log_type_t.error.getter(v34);
    uint64_t v47 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v48 = swift_allocObject(v47, 72LL, 7LL);
    *(_OWORD *)(v48 + 16) = xmmword_1007E67D0;
    *(void *)(v48 + 56) = sub_100022898(0LL, (unint64_t *)&qword_10099D920, &OBJC_CLASS___CKRecord_ptr);
    *(void *)(v48 + 64) = sub_100022738();
    *(void *)(v48 + 32) = a1;
    sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
    id v49 = a1;
    v50 = (void *)static OS_os_log.default.getter(v49);
    os_log(_:dso:log:_:_:)(v46, &_mh_execute_header, v50, "Invalid subscriptionIdentifier - %@", 35LL, 2LL, v48);
    swift_bridgeObjectRelease();

    unint64_t v51 = sub_1001BC568();
    uint64_t v52 = swift_allocError(&type metadata for NotifyWhenFoundRecord.NotifyWhenFoundRecordConversionError, v51, 0LL, 0LL);
    _BYTE *v53 = 3;
    swift_willThrow(v52);
    swift_unknownObjectRelease(v66);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v68, v69);
  }

uint64_t sub_1001BB8C8()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000A8AC(v2, qword_100A2A338);
  sub_10000A720(v0, (uint64_t)qword_100A2A338);
  type metadata accessor for BeaconStore(0LL);
  sub_1004E6208((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000016LL, 0x8000000100857F60LL, 1LL);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

unint64_t sub_1001BB998()
{
  unint64_t v1 = 0x696669746E656469LL;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000010LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000010LL;
  }
}

uint64_t sub_1001BB9F8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001BCDFC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001BBA1C(uint64_t a1)
{
  unint64_t v2 = sub_1001BC4A4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001BBA44(uint64_t a1)
{
  unint64_t v2 = sub_1001BC4A4();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_1001BBA6C()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1001BBB20(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v3, v4);
  return dispatch thunk of Hashable.hash(into:)(a1, v3, v4);
}

Swift::Int sub_1001BBBB8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v5, v2, v3);
  dispatch thunk of Hashable.hash(into:)(v5, v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_1001BBC68(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  else {
    return 0LL;
  }
}

uint64_t sub_1001BBCDC(id *a1)
{
  id v1 = [*a1 encryptedValues];
  uint64_t ObjectType = swift_getObjectType(v1);
  CKRecordKeyValueSetting.subscript.getter( &v14,  0xD000000000000010LL,  0x800000010084D8A0LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  uint64_t v4 = v14;
  uint64_t v3 = v15;
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord(0LL);
  uint64_t v6 = UUID.uuidString.getter(found);
  if (!v3)
  {
    uint64_t v10 = swift_bridgeObjectRelease();
LABEL_9:
    uint64_t v11 = UUID.uuidString.getter(v10);
    uint64_t v16 = &type metadata for String;
    uint64_t v17 = &protocol witness table for String;
    uint64_t v14 = v11;
    uint64_t v15 = v12;
    CKRecordKeyValueSetting.subscript.setter(&v14, 0xD000000000000010LL, 0x800000010084D8A0LL, ObjectType);
    return swift_unknownObjectRelease(v1);
  }

  if (v4 != v6 || v3 != v7)
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v3, v6, v7, 0LL);
    swift_bridgeObjectRelease();
    uint64_t v10 = swift_bridgeObjectRelease();
    if ((v9 & 1) != 0) {
      return swift_unknownObjectRelease(v1);
    }
    goto LABEL_9;
  }

  swift_unknownObjectRelease(v1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001BBE38(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009A4D78);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1001BC4A4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NotifyWhenFoundRecord.CodingKeys,  &type metadata for NotifyWhenFoundRecord.CodingKeys,  v11,  v9,  v10);
  __int128 v19 = *v3;
  char v20 = 0;
  unint64_t v12 = sub_1000170A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v5, &type metadata for Data, v12);
  if (!v2)
  {
    uint64_t found = type metadata accessor for NotifyWhenFoundRecord(0LL);
    uint64_t v14 = (char *)v3 + *(int *)(found + 20);
    LOBYTE(v19) = 1;
    uint64_t v15 = type metadata accessor for UUID(0LL);
    uint64_t v16 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v19, v5, v15, v16);
    uint64_t v17 = (char *)v3 + *(int *)(found + 24);
    LOBYTE(v19) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v19, v5, v15, v16);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001BBFE8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v34 = *(void *)(v3 - 8);
  uint64_t v35 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (void *)((char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v31 - v7;
  uint64_t v36 = sub_100004AEC(&qword_1009A4D68);
  uint64_t v9 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  unint64_t v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord(0LL);
  __chkstk_darwin(found);
  uint64_t v14 = (_OWORD *)((char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  uint64_t v38 = a1;
  sub_100012ED8(a1, v15);
  unint64_t v17 = sub_1001BC4A4();
  uint64_t v37 = v11;
  uint64_t v18 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NotifyWhenFoundRecord.CodingKeys,  &type metadata for NotifyWhenFoundRecord.CodingKeys,  v17,  v15,  v16);
  if (v18) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
  }
  uint64_t v19 = v9;
  uint64_t v39 = found;
  NSString v32 = v6;
  uint64_t v20 = v35;
  char v41 = 0;
  unint64_t v21 = sub_100016FE0();
  uint64_t v22 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v40, &type metadata for Data, &v41, v36, &type metadata for Data, v21);
  uint64_t v23 = (uint64_t)v14;
  *uint64_t v14 = v40;
  LOBYTE(v40) = 1;
  uint64_t v24 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v25 = v8;
  unint64_t v26 = v8;
  uint64_t v27 = v24;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v26, v20, &v40, v22, v20, v24);
  uint64_t v28 = v23 + *(int *)(v39 + 20);
  v31[0] = *(void *)(v34 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v31[0])(v28, v25, v20);
  LOBYTE(v40) = 2;
  unint64_t v29 = v32;
  v31[1] = 0LL;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v32, v20, &v40, v22, v20, v27);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v37, v22);
  ((void (*)(uint64_t, void *, uint64_t))v31[0])(v23 + *(int *)(v39 + 24), v29, v20);
  sub_1001BC4E8(v23, v33);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
  return sub_1001BC52C(v23);
}

uint64_t sub_1001BC31C()
{
  if (qword_10099B1A8 != -1) {
    swift_once(&qword_10099B1A8, sub_1001BB8C8);
  }
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2A338);
  uint64_t v2 = UUID.uuidString.getter(v1);
  URL.appendingPathComponent(_:isDirectory:)(v2, v3, 1LL);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001BC3A8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001BBFE8(a1, a2);
}

uint64_t sub_1001BC3BC(void *a1)
{
  return sub_1001BBE38(a1);
}

uint64_t sub_1001BC3D0(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100007864( &qword_1009A4D50,  type metadata accessor for NotifyWhenFoundRecord,  (uint64_t)&unk_1007F4AEC);
  uint64_t result = sub_100007864(&qword_1009A4D58, type metadata accessor for NotifyWhenFoundRecord, (uint64_t)&unk_1007F4AC4);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for NotifyWhenFoundRecord(uint64_t a1)
{
  uint64_t result = qword_1009A4DF0;
  if (!qword_1009A4DF0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NotifyWhenFoundRecord);
  }
  return result;
}

uint64_t sub_1001BC468(uint64_t a1)
{
  uint64_t result = sub_100007864(&qword_1009A4D60, type metadata accessor for NotifyWhenFoundRecord, (uint64_t)&unk_1007F4B14);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001BC4A4()
{
  unint64_t result = qword_1009A4D70;
  if (!qword_1009A4D70)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F4D80, &type metadata for NotifyWhenFoundRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4D70);
  }

  return result;
}

uint64_t sub_1001BC4E8(uint64_t a1, uint64_t a2)
{
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(found - 8) + 16LL))(a2, a1, found);
  return a2;
}

uint64_t sub_1001BC52C(uint64_t a1)
{
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(found - 8) + 8LL))(a1, found);
  return a1;
}

unint64_t sub_1001BC568()
{
  unint64_t result = qword_1009A4D88;
  if (!qword_1009A4D88)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007F4D40,  &type metadata for NotifyWhenFoundRecord.NotifyWhenFoundRecordConversionError);
    atomic_store(result, (unint64_t *)&qword_1009A4D88);
  }

  return result;
}

uint64_t sub_1001BC5AC(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_10099D8A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for NotifyWhenFoundRecord.NotifyWhenFoundRecordConversionError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1001BC638 + 4 * byte_1007F4AB5[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1001BC66C + 4 * byte_1007F4AB0[v4]))();
}

uint64_t sub_1001BC66C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001BC674(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001BC67CLL);
  }
  return result;
}

uint64_t sub_1001BC688(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001BC690LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1001BC694(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001BC69C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NotifyWhenFoundRecord.NotifyWhenFoundRecordConversionError()
{
  return &type metadata for NotifyWhenFoundRecord.NotifyWhenFoundRecordConversionError;
}

uint64_t storeEnumTagSinglePayload for NotifyWhenFoundRecord.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1001BC704 + 4 * byte_1007F4ABF[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001BC738 + 4 * byte_1007F4ABA[v4]))();
}

uint64_t sub_1001BC738(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001BC740(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001BC748LL);
  }
  return result;
}

uint64_t sub_1001BC754(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001BC75CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1001BC760(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001BC768(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NotifyWhenFoundRecord.CodingKeys()
{
  return &type metadata for NotifyWhenFoundRecord.CodingKeys;
}

uint64_t *sub_1001BC784(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_10001736C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    unint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID(0LL);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
    v13(v10, v11, v12);
    v13((char *)a1 + *(int *)(a3 + 24), (char *)a2 + *(int *)(a3 + 24), v12);
  }

  return a1;
}

uint64_t sub_1001BC848(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v7(v4, v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(a1 + *(int *)(a2 + 24), v5);
}

uint64_t *sub_1001BC8C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
  v12(v9, v10, v11);
  v12((char *)a1 + *(int *)(a3 + 24), (char *)a2 + *(int *)(a3 + 24), v11);
  return a1;
}

uint64_t *sub_1001BC95C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100016F9C(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24LL);
  v14(v11, v12, v13);
  v14((char *)a1 + *(int *)(a3 + 24), (char *)a2 + *(int *)(a3 + 24), v13);
  return a1;
}

char *sub_1001BC9FC(char *a1, char *a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = *(int *)(a3 + 20);
  unint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  v10(&a1[*(int *)(a3 + 24)], &a2[*(int *)(a3 + 24)], v9);
  return a1;
}

uint64_t *sub_1001BCA88(uint64_t *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016F9C(v6, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL);
  v12(v9, v10, v11);
  v12((char *)a1 + *(int *)(a3 + 24), &a2[*(int *)(a3 + 24)], v11);
  return a1;
}

uint64_t sub_1001BCB20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001BCB2C);
}

uint64_t sub_1001BCB2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0) {
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = type metadata accessor for UUID(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 20),  a2,  v8);
  }

uint64_t sub_1001BCBB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001BCBC0);
}

char *sub_1001BCBC0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)unint64_t result = 0LL;
    *((void *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1001BCC3C(uint64_t a1)
{
  uint64_t v4 = &unk_1007F4BA0;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(result - 8) + 64LL;
    uint64_t v6 = v5;
    swift_initStructMetadata(a1, 256LL, 3LL, &v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1001BCCB0()
{
  return sub_100007864(&qword_1009A4E30, type metadata accessor for NotifyWhenFoundRecord, (uint64_t)&unk_1007F4BB8);
}

unint64_t sub_1001BCCE0()
{
  unint64_t result = qword_1009A4E38;
  if (!qword_1009A4E38)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F4CB0, &type metadata for NotifyWhenFoundRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4E38);
  }

  return result;
}

unint64_t sub_1001BCD28()
{
  unint64_t result = qword_1009A4E40;
  if (!qword_1009A4E40)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007F4D18,  &type metadata for NotifyWhenFoundRecord.NotifyWhenFoundRecordConversionError);
    atomic_store(result, (unint64_t *)&qword_1009A4E40);
  }

  return result;
}

unint64_t sub_1001BCD70()
{
  unint64_t result = qword_1009A4E48;
  if (!qword_1009A4E48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F4C20, &type metadata for NotifyWhenFoundRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4E48);
  }

  return result;
}

unint64_t sub_1001BCDB8()
{
  unint64_t result = qword_1009A4E50;
  if (!qword_1009A4E50)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F4C48, &type metadata for NotifyWhenFoundRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A4E50);
  }

  return result;
}

uint64_t sub_1001BCDFC(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x800000010084DE70LL;
    if (a2 == 0x800000010084DE70LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010084DE70LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v6 = 0xEA00000000007265LL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_11;
  }

  if (a1 == 0xD000000000000010LL && a2 == 0x800000010084D8A0LL)
  {
    swift_bridgeObjectRelease(0x800000010084D8A0LL);
    return 2LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010084D8A0LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_1001BCF54@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X2>, char *a4@<X8>)
{
  v75 = a4;
  uint64_t v7 = sub_100004AEC(&qword_1009A4E58);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Destination(0LL);
  uint64_t v76 = *(void *)(v10 - 8);
  uint64_t v77 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v74 - v15;
  uint64_t v74 = a1;
  uint64_t v17 = Destination.destination.getter(v14);
  uint64_t v19 = _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0(v17, v18);
  if (!v21)
  {
    if (qword_10099B6E8 != -1) {
      swift_once(&qword_10099B6E8, sub_100651020);
    }
    uint64_t v46 = type metadata accessor for Logger(0LL);
    sub_10000A720(v46, (uint64_t)qword_100A2AFE8);
    uint64_t v48 = v76;
    uint64_t v47 = v77;
    id v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v76 + 16);
    uint64_t v50 = v74;
    uint64_t v51 = v49(v16, v74, v77);
    uint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
    os_log_type_t v53 = static os_log_type_t.fault.getter(v52);
    if (os_log_type_enabled(v52, v53))
    {
      unint64_t v54 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v55 = swift_slowAlloc(32LL, -1LL);
      uint64_t v79 = v55;
      *(_DWORD *)unint64_t v54 = 136315138;
      unint64_t v56 = sub_1001BD5A0();
      uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter(v77, v56);
      uint64_t v78 = sub_1003F11D4(v57, v58, &v79);
      uint64_t v47 = v77;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v54 + 4, v54 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v76 + 8))(v16, v47);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Unable to convert %s to MessageDestination!", v54, 0xCu);
      swift_arrayDestroy(v55, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1LL, -1LL);
      swift_slowDealloc(v54, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v48 + 8))(v16, v47);
    }

    v72 = v75;
    uint64_t v73 = v50;
    return v49(v72, v73, v47);
  }

  uint64_t v22 = v19;
  uint64_t v23 = v20;
  uint64_t v24 = v21;
  uint64_t v25 = Destination.destination.getter(v19);
  uint64_t v27 = _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0(v25, v26);
  if (!v29)
  {
    swift_bridgeObjectRelease();
    if (qword_10099B6E8 != -1) {
      swift_once(&qword_10099B6E8, sub_100651020);
    }
    uint64_t v59 = type metadata accessor for Logger(0LL);
    sub_10000A720(v59, (uint64_t)qword_100A2AFE8);
    uint64_t v60 = v76;
    uint64_t v47 = v77;
    id v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v76 + 16);
    uint64_t v61 = v49(v13, a2, v77);
    v62 = (os_log_s *)Logger.logObject.getter(v61);
    os_log_type_t v63 = static os_log_type_t.fault.getter(v62);
    BOOL v64 = os_log_type_enabled(v62, v63);
    uint64_t v65 = v74;
    if (v64)
    {
      id v66 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v67 = swift_slowAlloc(32LL, -1LL);
      uint64_t v79 = v67;
      *(_DWORD *)id v66 = 136315138;
      unint64_t v68 = sub_1001BD5A0();
      uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter(v77, v68);
      uint64_t v78 = sub_1003F11D4(v69, v70, &v79);
      uint64_t v47 = v77;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v66 + 4, v66 + 12);
      uint64_t v65 = v74;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v60 + 8))(v13, v47);
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Unable to convert %s to MessageDestination!", v66, 0xCu);
      swift_arrayDestroy(v67, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v67, -1LL, -1LL);
      swift_slowDealloc(v66, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v60 + 8))(v13, v47);
    }

    v72 = v75;
    uint64_t v73 = v65;
    return v49(v72, v73, v47);
  }

  a3(v22, v23, v24, v27, v28, v29);
  uint64_t v31 = v30;
  unint64_t v33 = v32;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __n128 v34 = swift_bridgeObjectRetain(v33);
  Destination.init(stringRepresentation:)(v31, v33, v34);
  uint64_t v36 = v76;
  uint64_t v35 = v77;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v9, 1LL, v77) == 1)
  {
    sub_1001BD5E8((uint64_t)v9);
    if (qword_10099B6E8 != -1) {
      swift_once(&qword_10099B6E8, sub_100651020);
    }
    uint64_t v37 = type metadata accessor for Logger(0LL);
    sub_10000A720(v37, (uint64_t)qword_100A2AFE8);
    swift_bridgeObjectRetain(v33);
    uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v40 = static os_log_type_t.fault.getter(v39);
    BOOL v41 = os_log_type_enabled(v39, v40);
    uint64_t v42 = v74;
    if (v41)
    {
      unint64_t v43 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v44 = swift_slowAlloc(32LL, -1LL);
      uint64_t v79 = v44;
      *(_DWORD *)unint64_t v43 = 136315138;
      swift_bridgeObjectRetain(v33);
      uint64_t v78 = sub_1003F11D4(v31, v33, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v43 + 4, v43 + 12);
      swift_bridgeObjectRelease_n(v33, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Unable to convert %s to Destination!", v43, 0xCu);
      swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v45 = v44;
      uint64_t v35 = v77;
      swift_slowDealloc(v45, -1LL, -1LL);
      swift_slowDealloc(v43, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v33, 2LL);
    }

    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v76 + 16))(v75, v42, v35);
  }

  else
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v36 + 32))(v75, v9, v35);
  }

unint64_t sub_1001BD5A0()
{
  unint64_t result = qword_1009A4E60;
  if (!qword_1009A4E60)
  {
    uint64_t v1 = type metadata accessor for Destination(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Destination, v1);
    atomic_store(result, (unint64_t *)&qword_1009A4E60);
  }

  return result;
}

uint64_t sub_1001BD5E8(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009A4E58);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1001BD628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001BD634);
}

uint64_t sub_1001BD634(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for FMNAccountType(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 20)],  a2,  v8);
  }

uint64_t sub_1001BD6B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001BD6BC);
}

char *sub_1001BD6BC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)unint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for FMNAccountType(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata accessor for AirPodsUnpairEndPoint(uint64_t a1)
{
  uint64_t result = qword_1009A4EC0;
  if (!qword_1009A4EC0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AirPodsUnpairEndPoint);
  }
  return result;
}

void sub_1001BD76C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = sub_100004AEC(&qword_1009A14C8);
  uint64_t v3 = OS_dispatch_queue.sync<A>(execute:)(sub_1000F9588, v1, v2);
  URLComponents.init()(v3);
  URLComponents.scheme.setter(0x7370747468LL, 0xE500000000000000LL);
  URLComponents.host.setter(v14[2], v14[3]);
  URLComponents.path.setter(v14[0], v14[1]);
  uint64_t v4 = (void (*)(void *, void))URLComponents.path.modify(v14);
  v5._countAndFlagsBits = 0xD000000000000015LL;
  v5._object = (void *)0x8000000100857FE0LL;
  String.append(_:)(v5);
  v4(v14, 0LL);
  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  unint64_t v6 = (void *)qword_100A2AF38;
  id v7 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v8 = [v7 isInternalBuild];

  if (v8)
  {
    NSString v9 = String._bridgeToObjectiveC()();
    id v10 = [v6 stringForKey:v9];

    if (v10)
    {
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      uint64_t v13 = v12;

      URLComponents.host.setter(v11, v13);
    }
  }

uint64_t *sub_1001BD930(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v12);
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v13 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16LL))(a1, a2, v13);
      NSString v9 = a1;
      uint64_t v10 = a3;
      uint64_t v11 = 2LL;
    }

    else if (EnumCaseMultiPayload == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      uint64_t v8 = a2[2];
      a1[1] = a2[1];
      a1[2] = v8;
      swift_bridgeObjectRetain(v8);
      NSString v9 = a1;
      uint64_t v10 = a3;
      uint64_t v11 = 1LL;
    }

    else
    {
      uint64_t v14 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 16LL))(a1, a2, v14);
      NSString v9 = a1;
      uint64_t v10 = a3;
      uint64_t v11 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }

  return a1;
}

uint64_t sub_1001BDA2C(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 2)
  {
LABEL_4:
    uint64_t v4 = type metadata accessor for UUID(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  }

  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result) {
      return result;
    }
    goto LABEL_4;
  }

  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

uint64_t sub_1001BDA94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v11 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL))(a1, a2, v11);
    uint64_t v8 = a1;
    uint64_t v9 = a3;
    uint64_t v10 = 2LL;
  }

  else if (EnumCaseMultiPayload == 1)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    uint64_t v7 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = v7;
    swift_bridgeObjectRetain(v7);
    uint64_t v8 = a1;
    uint64_t v9 = a3;
    uint64_t v10 = 1LL;
  }

  else
  {
    uint64_t v12 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL))(a1, a2, v12);
    uint64_t v8 = a1;
    uint64_t v9 = a3;
    uint64_t v10 = 0LL;
  }

  swift_storeEnumTagMultiPayload(v8, v9, v10);
  return a1;
}

uint64_t sub_1001BDB64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1001BDC4C(a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v11 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL))(a1, a2, v11);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 2LL;
    }

    else if (EnumCaseMultiPayload == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      uint64_t v7 = *(void *)(a2 + 16);
      *(void *)(a1 + 16) = v7;
      swift_bridgeObjectRetain(v7);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 1LL;
    }

    else
    {
      uint64_t v12 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL))(a1, a2, v12);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }

  return a1;
}

uint64_t sub_1001BDC4C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeaconSharingSessionContext(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for BeaconSharingSessionContext(uint64_t a1)
{
  uint64_t result = qword_1009A4F68;
  if (!qword_1009A4F68) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeaconSharingSessionContext);
  }
  return result;
}

void *sub_1001BDCC4(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v8 = type metadata accessor for UUID(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, a3, 2LL);
  }

  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

void *sub_1001BDD88(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1001BDC4C((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v8 = type metadata accessor for UUID(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, a3, 2LL);
    }

    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      uint64_t v7 = type metadata accessor for UUID(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t sub_1001BDE5C(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_1007F4E50;
    v4[2] = v4[0];
    swift_initEnumMetadataMultiPayload(a1, 256LL, 3LL, v4);
    return 0LL;
  }

  return result;
}

uint64_t sub_1001BDECC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v41 = a2;
  uint64_t v40 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v40 - 8);
  uint64_t v4 = __chkstk_darwin(v40);
  unint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v36 - v7;
  uint64_t v9 = type metadata accessor for BeaconSharingSessionContext(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100012ED8(a1, v12);
  uint64_t v14 = v48;
  dispatch thunk of Decoder.unkeyedContainer()(v45, v12, v13);
  if (!v14)
  {
    uint64_t v48 = v6;
    uint64_t v38 = v11;
    uint64_t v39 = v8;
    uint64_t v37 = v3;
    uint64_t v15 = v41;
    uint64_t v16 = v46;
    uint64_t v17 = v47;
    sub_100037298((uint64_t)v45, v46);
    uint64_t v18 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v16, v17);
    if (v18 == 2)
    {
      uint64_t v26 = v46;
      uint64_t v27 = v47;
      sub_100037298((uint64_t)v45, v46);
      uint64_t v28 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v40, v40, v28, v26, v27);
      uint64_t v24 = (uint64_t)v38;
      (*(void (**)(_BYTE *, char *, uint64_t))(v37 + 32))(v38, v48, v40);
      uint64_t v25 = 2LL;
      goto LABEL_14;
    }

    uint64_t v20 = v40;
    if (v18 == 1)
    {
      uint64_t v29 = v46;
      uint64_t v30 = v47;
      sub_100037298((uint64_t)v45, v46);
      unint64_t v31 = sub_100040120();
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)( &type metadata for MessagingDestination,  &type metadata for MessagingDestination,  v31,  v29,  v30);
      uint64_t v32 = v43;
      uint64_t v33 = v44;
      uint64_t v24 = (uint64_t)v38;
      *uint64_t v38 = v42;
      *(void *)(v24 + 8) = v32;
      *(void *)(v24 + 16) = v33;
      uint64_t v25 = 1LL;
      goto LABEL_14;
    }

    if (!v18)
    {
      uint64_t v21 = v46;
      uint64_t v22 = v47;
      sub_100037298((uint64_t)v45, v46);
      uint64_t v23 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v20, v20, v23, v21, v22);
      uint64_t v24 = (uint64_t)v38;
      (*(void (**)(_BYTE *, char *, uint64_t))(v37 + 32))(v38, v39, v40);
      uint64_t v25 = 0LL;
LABEL_14:
      swift_storeEnumTagMultiPayload(v24, v9, v25);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v45);
      sub_1001BEA64(v24, v15);
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    }

    unint64_t v34 = sub_1001BEA20();
    uint64_t v35 = swift_allocError(&type metadata for BeaconSharingSessionContext.Error, v34, 0LL, 0LL);
    swift_willThrow(v35);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v45);
  }

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

uint64_t sub_1001BE1E8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v43 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v43 - 8);
  uint64_t v5 = __chkstk_darwin(v43);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v42 - v8;
  uint64_t v10 = type metadata accessor for BeaconSharingSessionContext(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_100012ED8(a1, v14);
  dispatch thunk of Encoder.unkeyedContainer()(v47, v14, v13);
  sub_1001BE9DC(v2, (uint64_t)v12);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v10);
  if (!EnumCaseMultiPayload)
  {
    uint64_t v25 = v4;
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v27 = v43;
    v26(v9, v12, v43);
    uint64_t v28 = v48;
    uint64_t v29 = v49;
    sub_100037298((uint64_t)v47, v48);
    uint64_t v30 = v50;
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(2LL, v28, v29);
    if (v30)
    {
      (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v27);
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v47);
    }

    uint64_t v31 = v48;
    uint64_t v32 = v49;
    sub_100037298((uint64_t)v47, v48);
    uint64_t v33 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v9, v27, v33, v31, v32);
    uint64_t v7 = v9;
LABEL_12:
    (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v27);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v47);
  }

  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v25 = v4;
    unint64_t v34 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v27 = v43;
    v34(v7, v12, v43);
    uint64_t v35 = v48;
    uint64_t v36 = v49;
    sub_100037298((uint64_t)v47, v48);
    uint64_t v37 = v50;
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(2LL, v35, v36);
    if (!v37)
    {
      uint64_t v38 = v48;
      uint64_t v39 = v49;
      sub_100037298((uint64_t)v47, v48);
      uint64_t v40 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v7, v27, v40, v38, v39);
    }

    goto LABEL_12;
  }

  char v16 = *v12;
  uint64_t v18 = *((void *)v12 + 1);
  uint64_t v17 = *((void *)v12 + 2);
  uint64_t v19 = v48;
  uint64_t v20 = v49;
  sub_100037298((uint64_t)v47, v48);
  uint64_t v21 = v50;
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(1LL, v19, v20);
  if (!v21)
  {
    v44[0] = v16;
    uint64_t v45 = v18;
    uint64_t v46 = v17;
    uint64_t v22 = v48;
    uint64_t v23 = v49;
    sub_100037298((uint64_t)v47, v48);
    unint64_t v24 = sub_100040098();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( v44,  &type metadata for MessagingDestination,  v24,  v22,  v23);
  }

  swift_bridgeObjectRelease();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v47);
}

uint64_t sub_1001BE500(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for BeaconSharingSessionContext(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (unsigned __int8 *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1001BE9DC(v2, (uint64_t)v10);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v8);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      Swift::UInt v12 = *v10;
      uint64_t v13 = *((void *)v10 + 1);
      uint64_t v14 = *((void *)v10 + 2);
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(v12);
      swift_bridgeObjectRetain(v14);
      String.hash(into:)(a1, v13, v14);
      return swift_bridgeObjectRelease_n(v14, 2LL);
    }

    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 32))(v7, v10, v4);
    Swift::UInt v16 = 2LL;
  }

  else
  {
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 32))(v7, v10, v4);
    Swift::UInt v16 = 0LL;
  }

  Hasher._combine(_:)(v16);
  uint64_t v17 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v4, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1001BE688@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001BDECC(a1, a2);
}

uint64_t sub_1001BE69C(void *a1)
{
  return sub_1001BE1E8(a1);
}

Swift::Int sub_1001BE6B0()
{
  return Hasher._finalize()();
}

Swift::Int sub_1001BE6F0(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1001BE72C()
{
  return sub_100007864( &qword_1009A4FA0,  type metadata accessor for BeaconSharingSessionContext,  (uint64_t)&unk_1007F4E68);
}

uint64_t sub_1001BE758(void *a1)
{
  a1[1] = sub_100007864( &qword_1009A4FA8,  type metadata accessor for BeaconSharingSessionContext,  (uint64_t)&unk_1007F4EF8);
  a1[2] = sub_100007864( &qword_1009A4FB0,  type metadata accessor for BeaconSharingSessionContext,  (uint64_t)&unk_1007F4ED0);
  uint64_t result = sub_100007864( &qword_1009A4FB8,  type metadata accessor for BeaconSharingSessionContext,  (uint64_t)&unk_1007F4E90);
  a1[3] = result;
  return result;
}

uint64_t sub_1001BE7D0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for BeaconSharingSessionContext(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1001BE9DC(v1, (uint64_t)v8);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v6);
  if (!EnumCaseMultiPayload)
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    unint64_t v15 = 0x6E696D6F636E692ELL;
    unint64_t v16 = 0xEA00000000002867LL;
LABEL_6:
    uint64_t v21 = v15;
    unint64_t v22 = v16;
    uint64_t v17 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v17);
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 41LL;
    v19._object = (void *)0xE100000000000000LL;
    String.append(_:)(v19);
    uint64_t v14 = v21;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return v14;
  }

  if (EnumCaseMultiPayload != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    uint64_t v21 = 0LL;
    unint64_t v22 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(24LL);
    swift_bridgeObjectRelease();
    unint64_t v15 = 0xD000000000000015LL;
    unint64_t v16 = 0x8000000100858020LL;
    goto LABEL_6;
  }

  uint64_t v10 = *((void *)v8 + 1);
  uint64_t v11 = (void *)*((void *)v8 + 2);
  uint64_t v21 = 0x6369766544656D2ELL;
  unint64_t v22 = 0xEA00000000002865LL;
  swift_bridgeObjectRetain(v11);
  v12._countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease_n(v11, 2LL);
  v13._countAndFlagsBits = 41LL;
  v13._object = (void *)0xE100000000000000LL;
  String.append(_:)(v13);
  return v21;
}

uint64_t sub_1001BE9DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconSharingSessionContext(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001BEA20()
{
  unint64_t result = qword_1009A4FC0;
  if (!qword_1009A4FC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F4FD4, &type metadata for BeaconSharingSessionContext.Error);
    atomic_store(result, (unint64_t *)&qword_1009A4FC0);
  }

  return result;
}

uint64_t sub_1001BEA64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconSharingSessionContext(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001BEAA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v38 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v38 - v8;
  uint64_t v10 = type metadata accessor for BeaconSharingSessionContext(0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  Swift::String v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v11);
  unint64_t v16 = (unsigned __int8 *)&v38 - v15;
  __chkstk_darwin(v14);
  Swift::String v18 = (char *)&v38 - v17;
  uint64_t v19 = sub_100004AEC(&qword_1009A4FC8);
  uint64_t v20 = __chkstk_darwin(v19);
  unint64_t v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = (unsigned __int8 *)&v22[*(int *)(v20 + 48)];
  sub_1001BE9DC(a1, (uint64_t)v22);
  sub_1001BE9DC(a2, (uint64_t)v23);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v22, v10);
  if (!EnumCaseMultiPayload)
  {
    sub_1001BE9DC((uint64_t)v22, (uint64_t)v18);
    if (swift_getEnumCaseMultiPayload(v23, v10))
    {
      (*(void (**)(char *, uint64_t))(v38 + 8))(v18, v39);
      goto LABEL_17;
    }

    uint64_t v34 = v38;
    uint64_t v35 = v39;
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v38 + 32))(v9, v23, v39);
    char v32 = static UUID.== infix(_:_:)(v18, v9);
    uint64_t v36 = *(void (**)(char *, uint64_t))(v34 + 8);
    v36(v9, v35);
    v36(v18, v35);
LABEL_20:
    sub_1001BDC4C((uint64_t)v22);
    return v32 & 1;
  }

  if (EnumCaseMultiPayload != 1)
  {
    sub_1001BE9DC((uint64_t)v22, (uint64_t)v13);
    if (swift_getEnumCaseMultiPayload(v23, v10) != 2)
    {
      (*(void (**)(char *, uint64_t))(v38 + 8))(v13, v39);
      goto LABEL_17;
    }

    uint64_t v30 = v38;
    uint64_t v31 = v39;
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v38 + 32))(v7, v23, v39);
    char v32 = static UUID.== infix(_:_:)(v13, v7);
    uint64_t v33 = *(void (**)(char *, uint64_t))(v30 + 8);
    v33(v7, v31);
    v33(v13, v31);
    goto LABEL_20;
  }

  sub_1001BE9DC((uint64_t)v22, (uint64_t)v16);
  uint64_t v26 = *((void *)v16 + 1);
  uint64_t v25 = *((void *)v16 + 2);
  if (swift_getEnumCaseMultiPayload(v23, v10) == 1)
  {
    if (*v16 == *v23)
    {
      uint64_t v27 = *((void *)v23 + 1);
      if (v26 == v27 && v25 == *((void *)v23 + 2))
      {
        swift_bridgeObjectRelease_n(v25, 2LL);
LABEL_25:
        sub_1001BDC4C((uint64_t)v22);
        char v32 = 1;
        return v32 & 1;
      }

      char v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v25, v27, *((void *)v23 + 2), 0LL);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v29 & 1) != 0) {
        goto LABEL_25;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    sub_1001BDC4C((uint64_t)v22);
    goto LABEL_18;
  }

  swift_bridgeObjectRelease();
LABEL_17:
  sub_1001BEDE8((uint64_t)v22);
LABEL_18:
  char v32 = 0;
  return v32 & 1;
}

uint64_t sub_1001BEDE8(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009A4FC8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for BeaconSharingSessionContext.Error(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1001BEE68 + 4 * byte_1007F4E20[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1001BEE88 + 4 * byte_1007F4E25[v4]))();
  }
}

_BYTE *sub_1001BEE68(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1001BEE88(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1001BEE90(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1001BEE98(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1001BEEA0(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1001BEEA8(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BeaconSharingSessionContext.Error()
{
  return &type metadata for BeaconSharingSessionContext.Error;
}

unint64_t sub_1001BEEC8()
{
  unint64_t result = qword_1009A4FD0;
  if (!qword_1009A4FD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F4FAC, &type metadata for BeaconSharingSessionContext.Error);
    atomic_store(result, (unint64_t *)&qword_1009A4FD0);
  }

  return result;
}

char *sub_1001BEF0C()
{
  uint64_t v1 = *(void **)(v0 + 32);
  if (v1)
  {
    uint64_t v2 = *(char **)(v0 + 32);
  }

  else
  {
    uint64_t v3 = v0;
    id v4 = objc_allocWithZone((Class)type metadata accessor for CurrentLocationMonitor());
    uint64_t v5 = (char *)CurrentLocationMonitor.init(mode:desiredAccuracy:)(0, 0LL, 1);
    uint64_t v6 = &v5[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate];
    swift_beginAccess(&v5[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate], v10, 1LL, 0LL);
    *((void *)v6 + 1) = &off_1009468B8;
    swift_unknownObjectWeakAssign(v6, v3);
    uint64_t v7 = *(void **)(v3 + 32);
    *(void *)(v3 + 32) = v5;
    uint64_t v2 = v5;

    uint64_t v1 = 0LL;
  }

  id v8 = v1;
  return v2;
}

unint64_t sub_1001BEFC8()
{
  uint64_t v1 = *(void *)(v0 + 48);
  if (v1)
  {
    unint64_t v2 = *(void *)(v0 + 48);
  }

  else
  {
    uint64_t v3 = sub_100004AEC(&qword_10099FAA8);
    uint64_t inited = swift_initStackObject(v3, &v11);
    *(_OWORD *)(inited + 16) = xmmword_1007E67D0;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(kFMIPStateDidChangeNotification);
    uint64_t v7 = v6;
    uint64_t v8 = swift_allocObject(&unk_100946908, 24LL, 7LL);
    swift_weakInit(v8 + 16, v0);
    uint64_t v9 = swift_allocObject(&unk_100946B60, 32LL, 7LL);
    *(void *)(v9 + 16) = sub_1001C0E74;
    *(void *)(v9 + 24) = v8;
    *(void *)(inited + 32) = v5;
    *(void *)(inited + 40) = v7;
    *(void *)(inited + 48) = sub_10009BF1C;
    *(void *)(inited + 56) = v9;
    unint64_t v2 = sub_100412BD0(inited);
    *(void *)(v0 + 48) = v2;
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRelease();
    uint64_t v1 = 0LL;
  }

  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t sub_1001BF0C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v4, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v2);
  if (result)
  {
    type metadata accessor for Transaction(0LL);
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.FMIPStateManager.fmipstatechange",  62LL,  2LL,  sub_1001C0DE0);
    return swift_release();
  }

  return result;
}

id sub_1001BF158()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
  id v3 = [v2 standardUserDefaults];
  NSString v4 = String._bridgeToObjectiveC()();
  [v3 BOOLForKey:v4];

  id v5 = [v2 standardUserDefaults];
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 objectForKey:v6];

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)(v13, v7);
    swift_unknownObjectRelease(v7);
  }

  else
  {
    memset(v13, 0, sizeof(v13));
  }

  sub_1000F3128((uint64_t)v13, (uint64_t)v14);
  if (v15)
  {
    uint64_t v8 = sub_100022898(0LL, (unint64_t *)&qword_1009A9C80, &OBJC_CLASS___NSNumber_ptr);
    if ((swift_dynamicCast(v12, v14, (char *)&type metadata for Any + 8, v8, 6LL) & 1) != 0)
    {
      id v9 = v12[0];
      id v10 = [v12[0] BOOLValue];

      return v10;
    }
  }

  else
  {
    sub_1001C0D4C((uint64_t)v14);
  }

  OS_dispatch_queue.sync<A>(execute:)(sub_1001C0D8C, v1, &type metadata for Bool);
  if (v14[0] == 1)
  {
    type metadata accessor for Transaction(0LL);
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.FMIPStateManager.fmipstatechange",  62LL,  2LL,  sub_1001C0DE0);
  }

  return 0LL;
}

void *sub_1001BF354()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v2);
  NSString v4 = (char *)&v23[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v5);
  id v7 = (char *)&v23[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v23[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v1[2] = _swiftEmptyArrayStorage;
  sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v12 = (*(uint64_t (**)(char *, void, uint64_t))(v9 + 104))( v11,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v8);
  static DispatchQoS.unspecified.getter(v12);
  v23[0] = _swiftEmptyArrayStorage;
  uint64_t v13 = sub_100007864( (unint64_t *)&qword_10099BAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009A0CD0);
  uint64_t v15 = sub_1000372EC( (unint64_t *)&qword_10099BAB0,  (uint64_t *)&unk_1009A0CD0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v23, v14, v15, v2, v13);
  v1[3] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000003FLL,  0x80000001008580C0LL,  v7,  v4,  v11,  0LL);
  v1[4] = 0LL;
  v1[5] = 0LL;
  v1[6] = 0LL;
  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  v23[0] = 0x7365547265646E75LL;
  v23[1] = 0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v24, v23, sub_10000A71C, 0LL, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((v24 & 1) == 0)
  {
    unint64_t v16 = sub_1001BEFC8();
    uint64_t v17 = type metadata accessor for DarwinNotificationHelper(0LL);
    swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
    v1[5] = DarwinNotificationHelper.init(notificationHandlers:)(v16);
    swift_release();
  }

  uint64_t v18 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v19 = (void *)static OS_os_log.default.getter(v18);
  uint64_t v20 = static os_log_type_t.default.getter(v19);
  os_log(_:dso:log:type:_:)( "FMIPStateManager darwin handlers set",  36LL,  2LL,  &_mh_execute_header,  v19,  v20,  _swiftEmptyArrayStorage);

  return v1;
}

void sub_1001BF648(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject(&unk_100946AC0, 32LL, 7LL);
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  uint64_t v5 = (void *)objc_opt_self(&OBJC_CLASS___FMDFMIPManager);
  swift_retain();
  swift_retain();
  id v6 = [v5 sharedInstance];
  uint64_t v7 = swift_allocObject(&unk_100946AE8, 32LL, 7LL);
  *(void *)(v7 + 16) = sub_1001C0E24;
  *(void *)(v7 + 24) = v4;
  v10[4] = sub_1001C0E54;
  uint64_t v11 = v7;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256LL;
  v10[2] = sub_10000AFD0;
  v10[3] = &unk_100946B00;
  uint64_t v8 = _Block_copy(v10);
  uint64_t v9 = v11;
  swift_retain();
  swift_release(v9);
  [v6 fmipStateWithCompletion:v8];
  _Block_release(v8);
  swift_release(v4);
}

void sub_1001BF778(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = (void *)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
    id v4 = [v3 standardUserDefaults];
    NSString v5 = String._bridgeToObjectiveC()();
    id v6 = [v4 objectForKey:v5];

    if (v6)
    {
      _bridgeAnyObjectToAny(_:)(v26, v6);
      swift_unknownObjectRelease(v6);
    }

    else
    {
      memset(v26, 0, sizeof(v26));
    }

    sub_1000F3128((uint64_t)v26, (uint64_t)v27);
    if (v27[3])
    {
      uint64_t v17 = sub_100022898(0LL, (unint64_t *)&qword_1009A9C80, &OBJC_CLASS___NSNumber_ptr);
      if ((swift_dynamicCast(&v25, v27, (char *)&type metadata for Any + 8, v17, 6LL) & 1) != 0)
      {
        id v18 = v25;
        if ([v25 BOOLValue] == (a1 & 1))
        {

          goto LABEL_13;
        }

uint64_t sub_1001BFAC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009A0850);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  sub_100013044(a1, (uint64_t)aBlock);
  uint64_t v8 = swift_allocObject(&unk_100946908, 24LL, 7LL);
  swift_weakInit(v8 + 16, v2);
  uint64_t v9 = sub_100004AEC(&qword_1009A5140);
  Subscription.init(subscriber:unsubscribeBlock:)(aBlock, sub_1001C0C58, v8, v9);
  uint64_t v10 = *(dispatch_queue_s **)(v2 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))( (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a2,  v5);
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = (v11 + 24) & ~v11;
  uint64_t v13 = swift_allocObject(&unk_100946A48, v12 + v7, v11 | 7);
  *(void *)(v13 + 16) = v2;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))( v13 + v12,  (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v5);
  uint64_t v14 = swift_allocObject(&unk_100946A70, 32LL, 7LL);
  *(void *)(v14 + 16) = sub_1001C0CEC;
  *(void *)(v14 + 24) = v13;
  aBlock[4] = sub_100154688;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100025BD4;
  aBlock[3] = &unk_100946A88;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v10, v15);
  _Block_release(v15);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v14, "", 95LL, 102LL, 32LL, 1LL);
  swift_release();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001BFCBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    sub_1001BFE84(a1);
    return swift_release();
  }

  return result;
}

uint64_t sub_1001BFD3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009A0850);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v8 = (unint64_t *)(a1 + 16);
  swift_beginAccess(a1 + 16, v15, 33LL, 0LL);
  unint64_t v9 = *(void *)(a1 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
  *(void *)(a1 + 16) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v9 = sub_1004C5AC0(0, *(void *)(v9 + 16) + 1LL, 1, v9);
    *uint64_t v8 = v9;
  }

  unint64_t v12 = *(void *)(v9 + 16);
  unint64_t v11 = *(void *)(v9 + 24);
  if (v12 >= v11 >> 1)
  {
    unint64_t v9 = sub_1004C5AC0(v11 > 1, v12 + 1, 1, v9);
    *uint64_t v8 = v9;
  }

  *(void *)(v9 + 16) = v12 + 1;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v5 + 32))( v9 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
  + *(void *)(v5 + 72) * v12,
    v7,
    v4);
  return swift_endAccess(v15);
}

uint64_t sub_1001BFE84(uint64_t a1)
{
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_1009A0850);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  uint64_t v6 = *(dispatch_queue_s **)(v1 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))( (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v3);
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = (v7 + 24) & ~v7;
  uint64_t v9 = swift_allocObject(&unk_1009469D0, v8 + v5, v7 | 7);
  *(void *)(v9 + 16) = v1;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))( v9 + v8,  (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v3);
  uint64_t v10 = swift_allocObject(&unk_1009469F8, 32LL, 7LL);
  *(void *)(v10 + 16) = sub_1001C0C20;
  *(void *)(v10 + 24) = v9;
  aBlock[4] = sub_100095030;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100025BD4;
  aBlock[3] = &unk_100946A10;
  unint64_t v11 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v6, v11);
  _Block_release(v11);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v10, "", 95LL, 110LL, 32LL, 1LL);
  swift_release();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001C0034(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  v6[2] = a2;
  swift_bridgeObjectRetain(v4);
  *(void *)(a1 + 16) = sub_100023D24((uint64_t (*)(char *))sub_1001C0C3C, (uint64_t)v6, v4);
  return swift_bridgeObjectRelease();
}

BOOL sub_1001C00B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009A0850);
  uint64_t v5 = sub_1000372EC( &qword_1009A5138,  (uint64_t *)&unk_1009A0850,  (uint64_t)&protocol conformance descriptor for Subscription<A>);
  return (dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, v5) & 1) == 0;
}

uint64_t sub_1001C0134(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_1009A0850);
  Subscription.subscriber.getter(v7, v3);
  uint64_t v4 = v8;
  uint64_t v5 = v9;
  sub_100012ED8(v7, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 8))(a2, v4, v5);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v7);
}

uint64_t sub_1001C01A8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v22 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v21[1] = *(void *)(v2 + 24);
  uint64_t v12 = swift_allocObject(&unk_100946908, 24LL, 7LL);
  swift_weakInit(v12 + 16, v2);
  uint64_t v13 = (void *)swift_allocObject(&unk_100946930, 40LL, 7LL);
  _OWORD v13[2] = v12;
  v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = sub_1001C0B3C;
  id v25 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100946948;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v15 = swift_retain();
  static DispatchQoS.unspecified.getter(v15);
  NSString v23 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v18 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v7, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v19 = v25;
  swift_release(v12);
  return swift_release(v19);
}

uint64_t sub_1001C03E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v63 = a3;
  uint64_t v62 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v64 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v60 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v61 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v69 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v67 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v66 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v72 = sub_100004AEC((uint64_t *)&unk_1009A0850);
  uint64_t v68 = *(void *)(v72 - 8);
  uint64_t v10 = *(void *)(v68 + 64);
  uint64_t v11 = __chkstk_darwin(v72);
  uint64_t v65 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  unint64_t v70 = (char *)&v49 - v12;
  a1 += 16LL;
  swift_beginAccess(a1, v77, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a1);
  if (result)
  {
    uint64_t v14 = result;
    uint64_t v59 = v8;
    uint64_t v15 = v4;
    swift_beginAccess(result + 16, v76, 0LL, 0LL);
    uint64_t v16 = *(void *)(v14 + 16);
    swift_bridgeObjectRetain(v16);
    uint64_t v17 = v14;
    uint64_t v18 = v16;
    swift_release(v17);
    uint64_t v19 = *(void *)(v16 + 16);
    if (v19)
    {
      uint64_t v58 = sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
      uint64_t v20 = *(unsigned __int8 *)(v68 + 80);
      uint64_t v21 = (v20 + 32) & ~v20;
      uint64_t v49 = v18;
      uint64_t v22 = (char *)(v18 + v21);
      uint64_t v57 = v21;
      uint64_t v56 = v21 + v10;
      uint64_t v55 = *(void *)(v68 + 72);
      uint64_t v54 = v20 | 7;
      os_log_type_t v53 = *(void (**)(char *, char *, uint64_t))(v68 + 16);
      unsigned int v52 = enum case for DispatchQoS.QoSClass.default(_:);
      uint64_t v51 = v15;
      uint64_t v23 = v68;
      uint64_t v50 = v6;
      uint64_t v24 = v72;
      do
      {
        id v71 = v22;
        id v25 = v70;
        uint64_t v26 = v53;
        v53(v70, v22, v24);
        uint64_t v27 = v67;
        uint64_t v28 = v66;
        uint64_t v29 = v59;
        (*(void (**)(char *, void, uint64_t))(v67 + 104))(v66, v52, v59);
        uint64_t v30 = static OS_dispatch_queue.global(qos:)(v28);
        (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v29);
        uint64_t v31 = v65;
        v26(v65, v25, v72);
        uint64_t v32 = swift_allocObject(&unk_100946980, v56, v54);
        uint64_t v33 = v63;
        *(void *)(v32 + 16) = v62;
        *(void *)(v32 + 24) = v33;
        (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v32 + v57, v31, v72);
        aBlock[4] = sub_1001C0BD8;
        uint64_t v75 = v32;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256LL;
        aBlock[2] = sub_1001C31E8;
        aBlock[3] = &unk_100946998;
        uint64_t v34 = _Block_copy(aBlock);
        uint64_t v35 = swift_retain();
        static DispatchQoS.unspecified.getter(v35);
        uint64_t v73 = _swiftEmptyArrayStorage;
        uint64_t v36 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v37 = sub_100004AEC((uint64_t *)&unk_1009AB860);
        uint64_t v38 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
        uint64_t v39 = v19;
        uint64_t v40 = v50;
        uint64_t v41 = v51;
        uint64_t v42 = v36;
        uint64_t v43 = v64;
        uint64_t v44 = v61;
        uint64_t v45 = v69;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v73, v37, v38, v51, v42);
        uint64_t v46 = (void *)v30;
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v45, v40, v34);
        uint64_t v24 = v72;
        uint64_t v47 = v34;
        uint64_t v48 = v60;
        uint64_t v23 = v68;
        _Block_release(v47);

        (*(void (**)(char *, uint64_t))(v43 + 8))(v40, v41);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v48);
        (*(void (**)(char *, uint64_t))(v23 + 8))(v70, v24);
        swift_release(v75);
        uint64_t v22 = &v71[v55];
        uint64_t v19 = v39 - 1;
      }

      while (v39 != 1);
    }

    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_1001C08E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(BOOL))
{
  if (!a2) {
    return a3(a1 == 1);
  }
  swift_errorRetain(a2);
  ((void (*)(uint64_t, uint64_t))a3)(a2, 1LL);
  return swift_errorRelease(a2);
}

uint64_t sub_1001C0948()
{
  swift_release(*(void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t type metadata accessor for FMIPStateManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd16FMIPStateManager);
}

uint64_t sub_1001C09AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_1009A0850);
  Subscription.subscriber.getter(v7, v3);
  uint64_t v4 = v8;
  uint64_t v5 = v9;
  sub_100012ED8(v7, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, v4, v5);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v7);
}

uint64_t sub_1001C0A20()
{
  uint64_t v0 = sub_1001BEF0C();
  v5[2] = v0;
  type metadata accessor for CLAuthorizationStatus(0LL);
  OS_dispatch_queue.sync<A>(execute:)(sub_1000D44D4, v5, v1);

  BOOL v2 = (v6 - 3) < 2;
  uint64_t v3 = swift_allocObject(&unk_1009468E0, 17LL, 7LL);
  *(_BYTE *)(v3 + 16) = v2;
  sub_1001C01A8((uint64_t)sub_1001C0AE4, v3);
  return swift_release();
}

uint64_t sub_1001C0AD4()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1001C0AE4(uint64_t a1)
{
  return sub_1001C09AC(a1, *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_1001C0AEC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001C0B10()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1001C0B3C()
{
  return sub_1001C03E0(v0[2], v0[3], v0[4]);
}

uint64_t sub_1001C0B48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001C0B58(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1001C0B60()
{
  uint64_t v1 = sub_100004AEC((uint64_t *)&unk_1009A0850);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001C0BD8()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A0850) - 8) + 80LL);
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(v0 + ((v1 + 32) & ~v1));
}

uint64_t sub_1001C0C20()
{
  return sub_1001C0CF8(sub_1001C0034);
}

uint64_t sub_1001C0C2C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

BOOL sub_1001C0C3C(uint64_t a1)
{
  return sub_1001C00B0(a1, *(void *)(v1 + 16));
}

uint64_t sub_1001C0C58(uint64_t a1)
{
  return sub_1001BFCBC(a1, v1);
}

uint64_t sub_1001C0C74()
{
  uint64_t v1 = sub_100004AEC((uint64_t *)&unk_1009A0850);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001C0CEC()
{
  return sub_1001C0CF8(sub_1001BFD3C);
}

uint64_t sub_1001C0CF8(uint64_t (*a1)(void, uint64_t))
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A0850) - 8) + 80LL);
  return a1(*(void *)(v1 + 16), v1 + ((v2 + 24) & ~v2));
}

uint64_t sub_1001C0D3C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001C0D4C(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_10099E200);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1001C0D8C@<X0>(BOOL *a1@<X8>)
{
  uint64_t result = swift_beginAccess(v1 + 16, v4, 0LL, 0LL);
  *a1 = *(void *)(*(void *)(v1 + 16) + 16LL) != 0LL;
  return result;
}

void sub_1001C0DE0(uint64_t a1)
{
}

uint64_t sub_1001C0DF8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1001C0E24(uint64_t a1, char a2)
{
}

uint64_t sub_1001C0E30()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001C0E54(uint64_t a1, uint64_t a2)
{
  return sub_1001C08E4(a1, a2, *(uint64_t (**)(BOOL))(v2 + 16));
}

uint64_t sub_1001C0E5C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1001C0E6C(uint64_t a1)
{
  return sub_1001C0134(a1, *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_1001C0E74(uint64_t a1)
{
  return sub_1001BF0C4(a1, v1);
}

uint64_t sub_1001C0EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return swift_task_switch(sub_1001C0EB8, 0LL, 0LL);
}

uint64_t sub_1001C0EB8()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = v1[2];
  *(void *)(v0 + 32) = v2;
  if (v2)
  {
    *(void *)(v0 + 40) = 0LL;
    uint64_t v4 = v1[4];
    uint64_t v3 = v1[5];
    swift_bridgeObjectRetain(v1);
    uint64_t ObjectType = swift_getObjectType(v4);
    uint64_t v6 = *(int **)(v3 + 32);
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
    uint64_t v7 = (void *)swift_task_alloc(v6[1]);
    *(void *)(v0 + 48) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1001C0F64;
    return v9(ObjectType, v3);
  }

  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(v0 + 24));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1001C0F64()
{
  return swift_task_switch(sub_1001C0FB8, 0LL, 0LL);
}

uint64_t sub_1001C0FB8()
{
  uint64_t v1 = *(void *)(v0 + 40) + 1LL;
  if (v1 == *(void *)(v0 + 32))
  {
    swift_bridgeObjectRelease();
    dispatch_group_leave(*(dispatch_group_t *)(v0 + 24));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    *(void *)(v0 + 40) = v1;
    uint64_t v3 = *(void *)(v0 + 16) + 16 * v1;
    uint64_t v4 = *(void *)(v3 + 40);
    uint64_t ObjectType = swift_getObjectType(*(void *)(v3 + 32));
    uint64_t v6 = *(int **)(v4 + 32);
    uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
    uint64_t v7 = (void *)swift_task_alloc(v6[1]);
    *(void *)(v0 + 48) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1001C0F64;
    return v8(ObjectType, v4);
  }

uint64_t sub_1001C1070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  void v7[3] = a5;
  return swift_task_switch(sub_1001C108C, 0LL, 0LL);
}

uint64_t sub_1001C108C()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = v1[2];
  *(void *)(v0 + 48) = v2;
  if (v2)
  {
    *(void *)(v0 + 56) = 0LL;
    uint64_t v3 = v1[4];
    *(void *)(v0 + 64) = v3;
    uint64_t v4 = v1[5];
    swift_bridgeObjectRetain(v1);
    uint64_t ObjectType = swift_getObjectType(v3);
    uint64_t v6 = *(int **)(v4 + 40);
    uint64_t v7 = v6[1];
    uint64_t v10 = (int *)((char *)v6 + *v6);
    swift_unknownObjectRetain(v3);
    uint64_t v8 = (void *)swift_task_alloc(v7);
    *(void *)(v0 + 72) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_1001C115C;
    return ((uint64_t (*)(void, void, uint64_t, uint64_t))v10)( *(void *)(v0 + 24),  *(void *)(v0 + 32),  ObjectType,  v4);
  }

  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(v0 + 40));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1001C115C()
{
  return swift_task_switch(sub_1001C11B0, 0LL, 0LL);
}

uint64_t sub_1001C11B0()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 48);
  swift_unknownObjectRelease(*(void *)(v0 + 64));
  if (v1 + 1 == v2)
  {
    swift_bridgeObjectRelease();
    dispatch_group_leave(*(dispatch_group_t *)(v0 + 40));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 56) + 1LL;
    *(void *)(v0 + 56) = v4;
    uint64_t v5 = *(void *)(v0 + 16) + 16 * v4;
    uint64_t v6 = *(void *)(v5 + 32);
    *(void *)(v0 + 64) = v6;
    uint64_t v7 = *(void *)(v5 + 40);
    uint64_t ObjectType = swift_getObjectType(v6);
    uint64_t v9 = *(int **)(v7 + 40);
    uint64_t v10 = v9[1];
    uint64_t v12 = (int *)((char *)v9 + *v9);
    swift_unknownObjectRetain(v6);
    uint64_t v11 = (void *)swift_task_alloc(v10);
    *(void *)(v0 + 72) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_1001C115C;
    return ((uint64_t (*)(void, void, uint64_t, uint64_t))v12)( *(void *)(v0 + 24),  *(void *)(v0 + 32),  ObjectType,  v7);
  }

uint64_t sub_1001C129C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return swift_task_switch(sub_1001C12B4, 0LL, 0LL);
}

uint64_t sub_1001C12B4()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = v1[2];
  *(void *)(v0 + 32) = v2;
  if (v2)
  {
    *(void *)(v0 + 40) = 0LL;
    uint64_t v4 = v1[4];
    uint64_t v3 = v1[5];
    swift_bridgeObjectRetain(v1);
    uint64_t ObjectType = swift_getObjectType(v4);
    uint64_t v6 = *(int **)(v3 + 48);
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
    uint64_t v7 = (void *)swift_task_alloc(v6[1]);
    *(void *)(v0 + 48) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1001C1360;
    return v9(ObjectType, v3);
  }

  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(v0 + 24));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1001C1360()
{
  return swift_task_switch(sub_1001C13B4, 0LL, 0LL);
}

uint64_t sub_1001C13B4()
{
  uint64_t v1 = *(void *)(v0 + 40) + 1LL;
  if (v1 == *(void *)(v0 + 32))
  {
    swift_bridgeObjectRelease();
    dispatch_group_leave(*(dispatch_group_t *)(v0 + 24));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    *(void *)(v0 + 40) = v1;
    uint64_t v3 = *(void *)(v0 + 16) + 16 * v1;
    uint64_t v4 = *(void *)(v3 + 40);
    uint64_t ObjectType = swift_getObjectType(*(void *)(v3 + 32));
    uint64_t v6 = *(int **)(v4 + 48);
    uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
    uint64_t v7 = (void *)swift_task_alloc(v6[1]);
    *(void *)(v0 + 48) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1001C1360;
    return v8(ObjectType, v4);
  }

ValueMetadata *type metadata accessor for AirPodsSendBeaconGroupDataCommandPayload()
{
  return &type metadata for AirPodsSendBeaconGroupDataCommandPayload;
}

uint64_t sub_1001C147C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1001C155C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }

  return result;
}

unint64_t sub_1001C14A8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1001C14D4();
  unint64_t result = sub_1001C1518();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_1001C14D4()
{
  unint64_t result = qword_1009A5160;
  if (!qword_1009A5160)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F50DC, &type metadata for AirPodsSendBeaconGroupDataCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009A5160);
  }

  return result;
}

unint64_t sub_1001C1518()
{
  unint64_t result = qword_1009A5168;
  if (!qword_1009A5168)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F5104, &type metadata for AirPodsSendBeaconGroupDataCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009A5168);
  }

  return result;
}

uint64_t sub_1001C155C(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100012ED8(a1, v3);
  dispatch thunk of BinaryDecoding.container()(v17, v3, v4);
  uint64_t v5 = v18;
  uint64_t v6 = v19;
  sub_100037298((uint64_t)v17, v18);
  uint64_t v7 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1LL, v5, v6);
  if (!v1)
  {
    uint64_t v8 = static MACAddress.length.getter(v7);
    if ((unint64_t)(v8 - 0x2000000000000000LL) >> 62 == 3)
    {
      if (!__OFADD__(4 * v8, 80LL))
      {
        if (!__OFADD__(4 * v8 + 80, 4LL))
        {
          uint64_t v9 = 4 * v8 + 88;
          if (!__OFADD__(4 * v8 + 84, 4LL))
          {
            uint64_t v10 = v18;
            uint64_t v11 = v19;
            sub_100037298((uint64_t)v17, v18);
            dispatch thunk of BinaryDecodingContaining.decode(length:)(v9, v10, v11);
            uint64_t v13 = v12;
            sub_100042F34();
            uint64_t v14 = DataProtocol.intValue.getter(&type metadata for Data);
            uint64_t v15 = static MACAddress.length.getter(v14);
            if (!__OFADD__(v15, 20LL))
            {
              if (!__OFADD__(v15 + 20, 1LL))
              {
                if (!__OFADD__(v15 + 21, 1LL))
                {
                  if ((unsigned __int128)(v14 * (__int128)(v15 + 22)) >> 64 == (v14 * (v15 + 22)) >> 63) {
                    __asm { BR              X10 }
                  }

LABEL_19:
                  __break(1u);
                  JUMPOUT(0x1001C17ECLL);
                }

  uint64_t v62 = sub_1006DDC00();
  v144 = v8;
  if ((v62 & 1) == 0)
  {
    v143 = v28;
    LODWORD(v142) = static os_log_type_t.default.getter(v62);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    v90 = qword_100A2B010;
    v91 = sub_100004AEC((uint64_t *)&unk_10099D740);
    v92 = swift_allocObject(v91, 192LL, 7LL);
    *(_OWORD *)(v92 + swift_weakDestroy(v0 + 16) = xmmword_1007E8290;
    v93 = *(void *)(v23 + 16);
    *(void *)(v92 + 56) = &type metadata for Int;
    *(void *)(v92 + 64) = &protocol witness table for Int;
    *(void *)(v92 + 32) = v93;
    v94 = type metadata accessor for DateInterval(0LL);
    v95 = sub_100007864( &qword_1009A0DE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval,  (uint64_t)&protocol conformance descriptor for DateInterval);
    v96 = dispatch thunk of CustomStringConvertible.description.getter(v94, v95);
    v98 = v97;
    *(void *)(v92 + 96) = &type metadata for String;
    v99 = sub_1000226F4();
    *(void *)(v92 + 104) = v99;
    *(void *)(v92 + 72) = v96;
    *(void *)(v92 + 80) = v98;
    v100 = UUID.uuidString.getter(v99);
    *(void *)(v92 + 136) = &type metadata for String;
    *(void *)(v92 + 144) = v99;
    *(void *)(v92 + 112) = v100;
    *(void *)(v92 + 120) = v101;
    *(void *)(v92 + 176) = &type metadata for String;
    *(void *)(v92 + 184) = v99;
    uint64_t v64 = v148;
    *(void *)(v92 + 152) = v153;
    *(void *)(v92 + 160) = v64;
    *(void *)&v102 = swift_bridgeObjectRetain(v64).n128_u64[0];
    os_log(_:dso:log:_:_:)( v142,  &_mh_execute_header,  v90,  "Distributing %ld primary keys for %@ for beacon: %@ to destination: %@",  70LL,  2LL,  v92,  v102);
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }

  uint64_t v63 = *(void *)(v23 + 16);
  uint64_t v64 = v148;
  if (!v63) {
    goto LABEL_29;
  }
  uint64_t v65 = v23;
  id v66 = (*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v142 = v65;
  uint64_t v67 = v65 + v66;
  sub_10001DC4C(v65 + v66, (uint64_t)v18, type metadata accessor for TimeBasedKey);
  uint64_t v68 = v63 - 1;
  uint64_t v69 = *(void *)(v13 + 72);
  unint64_t v70 = sub_10001DC4C(v67 + v69 * v68, (uint64_t)v16, type metadata accessor for TimeBasedKey);
  id v71 = v28[2];
  if (v71)
  {
    uint64_t v72 = (v71 - 1) * v69;
    uint64_t v73 = v28;
    uint64_t v74 = *v18;
    uint64_t v75 = *v16;
    v139 = *(void *)((char *)v28 + v66);
    v143 = *(void **)((char *)v28 + v66 + v72);
    v141 = static os_log_type_t.default.getter(v70);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    v140 = qword_100A2B010;
    uint64_t v76 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v77 = swift_allocObject(v76, 392LL, 7LL);
    *(_OWORD *)(v77 + swift_weakDestroy(v0 + 16) = xmmword_1007F70C0;
    uint64_t v23 = v142;
    uint64_t v78 = *(void *)(v142 + 16);
    *(void *)(v77 + 56) = &type metadata for Int;
    *(void *)(v77 + 64) = &protocol witness table for Int;
    *(void *)(v77 + 32) = v78;
    *(void *)(v77 + 96) = &type metadata for UInt64;
    *(void *)(v77 + 104) = &protocol witness table for UInt64;
    *(void *)(v77 + 72) = v74;
    *(void *)(v77 + 136) = &type metadata for UInt64;
    *(void *)(v77 + 144) = &protocol witness table for UInt64;
    *(void *)(v77 + 112) = v75;
    uint64_t v79 = v73[2];
    *(void *)(v77 + 176) = &type metadata for Int;
    *(void *)(v77 + 184) = &protocol witness table for Int;
    *(void *)(v77 + 152) = v79;
    *(void *)(v77 + 2swift_weakDestroy(v0 + 16) = &type metadata for UInt64;
    *(void *)(v77 + 224) = &protocol witness table for UInt64;
    *(void *)(v77 + 192) = v139;
    *(void *)(v77 + 256) = &type metadata for UInt64;
    *(void *)(v77 + 264) = &protocol witness table for UInt64;
    *(void *)(v77 + 232) = v143;
    v80 = type metadata accessor for DateInterval(0LL);
    v81 = sub_100007864( &qword_1009A0DE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval,  (uint64_t)&protocol conformance descriptor for DateInterval);
    v82 = dispatch thunk of CustomStringConvertible.description.getter(v80, v81);
    v139 = v83;
    v143 = v73;
    *(void *)(v77 + 296) = &type metadata for String;
    v84 = sub_1000226F4();
    *(void *)(v77 + 304) = v84;
    v85 = v139;
    *(void *)(v77 + 272) = v82;
    *(void *)(v77 + 280) = v85;
    v86 = UUID.uuidString.getter(v84);
    *(void *)(v77 + 336) = &type metadata for String;
    *(void *)(v77 + 344) = v84;
    *(void *)(v77 + 312) = v86;
    *(void *)(v77 + 320) = v87;
    *(void *)(v77 + 376) = &type metadata for String;
    *(void *)(v77 + 384) = v84;
    v88 = (uint64_t)v148;
    *(void *)(v77 + 352) = v153;
    *(void *)(v77 + 360) = v88;
    *(void *)&v89 = swift_bridgeObjectRetain(v88).n128_u64[0];
    os_log(_:dso:log:_:_:)( v141,  &_mh_execute_header,  v140,  "Distributing %ld primary keys [%llu...%llu] and %ld secondary keys [%llu...%llu] for %@ for beacon: %@ to destination: %@",  121LL,  2LL,  v77,  v89);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v16, type metadata accessor for TimeBasedKey);
    uint64_t v64 = (void (*)(void, void, void))v88;
    sub_100018C68((uint64_t)v18, type metadata accessor for TimeBasedKey);
LABEL_28:
    uint64_t v28 = v143;
    goto LABEL_29;
  }

  sub_100018C68((uint64_t)v16, type metadata accessor for TimeBasedKey);
  sub_100018C68((uint64_t)v18, type metadata accessor for TimeBasedKey);
  uint64_t v64 = v148;
  uint64_t v23 = v142;
LABEL_29:
  v103 = v144;
  v104 = v150;
  sub_1001F82E8(v23, (uint64_t)v28, a1, v151, (uint64_t)v153, v64);
  if (!v104)
  {
    swift_bridgeObjectRelease();
    if ((sub_1006DDC00() & 1) == 0)
    {
      v105 = dispatch_group_create();
      v150 = sub_1006F13B0((uint64_t)&off_100933AD0);
      v106 = swift_allocObject(&unk_100948A68, 17LL, 7LL);
      *(_BYTE *)(v106 + swift_weakDestroy(v0 + 16) = 0;
      v107 = (unsigned __int8 *)(v106 + 16);
      dispatch_group_enter(v105);
      v146 = *(void *)(v103 + 24);
      v108 = (void *)swift_allocObject(&unk_100948EF0, 40LL, 7LL);
      v109 = v150;
      v108[2] = v106;
      v108[3] = v109;
      v108[4] = v105;
      swift_retain();
      v110 = v105;
      sub_1001F1284(v151, (uint64_t)v153, (uint64_t)v148, (uint64_t)sub_10020B2B8, (uint64_t)v108);
      swift_release();
      OS_dispatch_group.wait()();

      swift_beginAccess(v107, v152, 0LL, 0LL);
      LODWORD(v105) = *v107;
      v111 = swift_release();
      if ((_DWORD)v105 == 1)
      {
        __chkstk_darwin(v111);
        *(&v139 - 2) = v149;
        v112 = sub_1006EF99C((void (*)(uint64_t, uint64_t *))sub_10020B2C4, (uint64_t)(&v139 - 4), v23);
        v113 = sub_100117B2C(v23, v147, 1);
        LODWORD(v150) = static os_log_type_t.default.getter(v113);
        if (qword_10099B700 != -1) {
          swift_once(&qword_10099B700, sub_100651100);
        }
        v114 = qword_100A2B010;
        v115 = sub_100004AEC((uint64_t *)&unk_10099D740);
        v116 = swift_allocObject(v115, 192LL, 7LL);
        *(_OWORD *)(v116 + swift_weakDestroy(v0 + 16) = xmmword_1007E8290;
        v117 = v112[2];
        *(void *)(v116 + 56) = &type metadata for Int;
        *(void *)(v116 + 64) = &protocol witness table for Int;
        *(void *)(v116 + 32) = v117;
        v118 = type metadata accessor for DateInterval(0LL);
        v119 = sub_100007864( &qword_1009A0DE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval,  (uint64_t)&protocol conformance descriptor for DateInterval);
        v120 = dispatch thunk of CustomStringConvertible.description.getter(v118, v119);
        v122 = v121;
        *(void *)(v116 + 96) = &type metadata for String;
        v123 = sub_1000226F4();
        *(void *)(v116 + 104) = v123;
        *(void *)(v116 + 72) = v120;
        *(void *)(v116 + 80) = v122;
        v124 = UUID.uuidString.getter(v123);
        *(void *)(v116 + 136) = &type metadata for String;
        *(void *)(v116 + 144) = v123;
        *(void *)(v116 + 112) = v124;
        *(void *)(v116 + 120) = v125;
        *(void *)(v116 + 176) = &type metadata for String;
        *(void *)(v116 + 184) = v123;
        v126 = v153;
        v127 = v148;
        *(void *)(v116 + 152) = v153;
        *(void *)(v116 + 160) = v127;
        *(void *)&v128 = swift_bridgeObjectRetain(v127).n128_u64[0];
        os_log(_:dso:log:_:_:)( v150,  &_mh_execute_header,  v114,  "Distributing %ld primary keys for %@ for beacon: %@ to destination: %@",  70LL,  2LL,  v116,  v128);
        swift_bridgeObjectRelease();
        sub_1001F7BD4((uint64_t)v112, 5, a1, v151, v126, v127);
        return swift_bridgeObjectRelease();
      }
    }

    uint64_t v48 = v23;
    uint64_t v49 = v147;
    uint64_t v50 = 1;
    return sub_100117B2C(v48, v49, v50);
  }

  sub_100117B2C(v23, v147, 1);
  return swift_bridgeObjectRelease();
}

        uint64_t v3 = v113;
        uint64_t v13 = v112;
        uint64_t v51 = sub_1004E55A0(v112[*(int *)(v113 + 24)], v40);
        swift_bridgeObjectRelease();
        if (v51)
        {
          sub_10002218C((uint64_t)v13, v115, type metadata accessor for BeaconObservation);
          unsigned int v52 = v123;
          if ((swift_isUniquelyReferenced_nonNull_native(v123) & 1) == 0)
          {
            sub_100032AA8(0, *(void *)(v52 + 16) + 1LL, 1);
            unsigned int v52 = v123;
          }

          uint64_t v54 = *(void *)(v52 + 16);
          os_log_type_t v53 = *(void *)(v52 + 24);
          if (v54 >= v53 >> 1)
          {
            sub_100032AA8(v53 > 1, v54 + 1, 1);
            unsigned int v52 = v123;
          }

          *(void *)(v52 + swift_weakDestroy(v0 + 16) = v54 + 1;
          sub_10002218C(v115, v52 + v118 + v54 * v117, type metadata accessor for BeaconObservation);
        }

        else
        {
          sub_100018C68((uint64_t)v13, type metadata accessor for BeaconObservation);
        }

        uint64_t v36 = v111;
        uint64_t v38 = v119;
        if (v119 == v114)
        {
          uint64_t v37 = (void *)v123;
          uint64_t v26 = v97;
          break;
        }
      }
    }

    swift_release(v36);
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v37 = _swiftEmptyArrayStorage;
  }

  uint64_t v55 = (uint64_t)v109;
  objc_autoreleasePoolPop(v108);
  sub_1000F0A44((uint64_t)v37, (uint64_t)v26);
  swift_bridgeObjectRelease();
  uint64_t v56 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v116 + 48);
  uint64_t v57 = v56(v26, 1LL, v3);
  if (v110 <= 1)
  {
    sub_10001581C((uint64_t)v26, v55, (uint64_t *)&unk_1009A5990);
    if (v57 == 1)
    {
      sub_100015794(v55, (uint64_t *)&unk_1009A5990);
    }

    else
    {
      uint64_t v59 = v100;
      sub_100015750(v55, v100, (uint64_t *)&unk_1009A5990);
      id v71 = v59;
      uint64_t v72 = *(unsigned __int8 *)(v59 + *(int *)(v3 + 24));
      sub_100018C68(v71, type metadata accessor for BeaconObservation);
      if (v72 != 30) {
        return sub_100015794((uint64_t)v26, (uint64_t *)&unk_1009A5990);
      }
    }

    uint64_t v73 = (uint64_t)v26;
    uint64_t v74 = type metadata accessor for UUID(0LL);
    uint64_t v75 = v107;
    uint64_t v76 = (uint64_t)v106;
    uint64_t v77 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)(v74 - 8) + 16LL))(v107, v106, v74);
    Date.init()(v77);
    *(_BYTE *)(v75 + *(int *)(v3 + swift_release(*(void *)(v0 + 24)) = 31;
    uint64_t v78 = qword_100A2A6C8;
    uint64_t v79 = sub_100004AEC(&qword_10099D318);
    v80 = *(unsigned __int8 *)(v116 + 80);
    v81 = (v80 + 32) & ~v80;
    v82 = swift_allocObject(v79, v81 + *(void *)(v116 + 72), v80 | 7);
    *(_OWORD *)(v82 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    sub_10001DC4C(v75, v82 + v81, type metadata accessor for BeaconObservation);
    v83 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v83);
    *(&v96 - 4) = v78;
    *(&v96 - 3) = v82;
    *(&v96 - 2) = 0LL;
    *(&v96 - 1) = 0LL;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.BeaconObservationStore.save",  57LL,  2LL,  sub_1000DF788);
    swift_bridgeObjectRelease();
    v84 = *(void *)(v102 + 256);
    sub_100504C28(v76, (uint64_t)&v123);
    if (v124)
    {
      sub_100012EC0(&v123, (uint64_t)v120);
      v85 = v121;
      v86 = v122;
      v87 = sub_100012ED8(v120, v121);
      v88 = sub_10054A858((uint64_t)v87, v84, v85, v86);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v120);
    }

    else
    {
      sub_100015794((uint64_t)&v123, (uint64_t *)&unk_1009A9C40);
      v88 = 0LL;
    }

    v89 = v103;
    sub_10001581C(v73, v103, (uint64_t *)&unk_1009A5990);
    if (v56((char *)v89, 1LL, v3) == 1)
    {
      sub_100015794(v89, (uint64_t *)&unk_1009A5990);
      v90 = 0.0;
    }

    else
    {
      v91 = v98;
      v92 = sub_10002218C(v89, v98, type metadata accessor for BeaconObservation);
      v90 = fabs(Date.timeIntervalSinceNow.getter(v92));
      sub_100018C68(v91, type metadata accessor for BeaconObservation);
    }

    v93 = swift_allocObject(&unk_10094D358, 32LL, 7LL);
    *(double *)(v93 + swift_weakDestroy(v0 + 16) = v90;
    *(void *)(v93 + 24) = v88;
    v94 = v88;
    static Transaction.asyncTask(name:block:)("MultiConnectionAnalytics", 24LL, 2LL, &unk_1009A7DA8, v93);

    swift_release(v93);
    sub_100018C68(v107, type metadata accessor for BeaconObservation);
    uint64_t v26 = (char *)v73;
    return sub_100015794((uint64_t)v26, (uint64_t *)&unk_1009A5990);
  }

  uint64_t v58 = v104;
  sub_10001581C((uint64_t)v26, v104, (uint64_t *)&unk_1009A5990);
  if (v57 == 1)
  {
    sub_100015794(v58, (uint64_t *)&unk_1009A5990);
LABEL_35:
    uint64_t v62 = type metadata accessor for UUID(0LL);
    uint64_t v63 = (uint64_t)v101;
    uint64_t v64 = (*(uint64_t (**)(char *, void *, uint64_t))(*(void *)(v62 - 8) + 16LL))(v101, v106, v62);
    Date.init()(v64);
    *(_BYTE *)(v63 + *(int *)(v3 + swift_release(*(void *)(v0 + 24)) = 30;
    uint64_t v65 = qword_100A2A6C8;
    id v66 = sub_100004AEC(&qword_10099D318);
    uint64_t v67 = *(unsigned __int8 *)(v116 + 80);
    uint64_t v68 = (v67 + 32) & ~v67;
    uint64_t v69 = swift_allocObject(v66, v68 + *(void *)(v116 + 72), v67 | 7);
    *(_OWORD *)(v69 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    sub_10001DC4C(v63, v69 + v68, type metadata accessor for BeaconObservation);
    unint64_t v70 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v70);
    *(&v96 - 4) = v65;
    *(&v96 - 3) = v69;
    *(&v96 - 2) = 0LL;
    *(&v96 - 1) = 0LL;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.BeaconObservationStore.save",  57LL,  2LL,  sub_1002DDE58);
    swift_bridgeObjectRelease();
    sub_100018C68(v63, type metadata accessor for BeaconObservation);
    return sub_100015794((uint64_t)v26, (uint64_t *)&unk_1009A5990);
  }

  uint64_t v59 = v99;
  sub_100015750(v58, v99, (uint64_t *)&unk_1009A5990);
  if (v56((char *)v59, 1LL, v3) == 1)
  {
LABEL_37:
    sub_100015794(v59, (uint64_t *)&unk_1009A5990);
    return sub_100015794((uint64_t)v26, (uint64_t *)&unk_1009A5990);
  }

  uint64_t v60 = v59;
  uint64_t v61 = *(unsigned __int8 *)(v59 + *(int *)(v3 + 24));
  sub_100018C68(v60, type metadata accessor for BeaconObservation);
  if (v61 == 31) {
    goto LABEL_35;
  }
  return sub_100015794((uint64_t)v26, (uint64_t *)&unk_1009A5990);
}

          uint64_t v22 = a1[56];
          uint64_t v23 = a2[56];
          if (v22 == 2)
          {
            if (v23 != 2) {
              return 0LL;
            }
          }

          else
          {
            uint64_t v24 = (v22 & 1) == 0;
            if (v23 == 2 || ((v24 ^ v23) & 1) == 0) {
              return 0LL;
            }
          }

          return 1LL;
        }
      }

      else if (!v18)
      {
        goto LABEL_19;
      }

      return 0LL;
    }
  }

  return result;
}

  if (v5 != v7) {
    goto LABEL_21;
  }
  uint64_t v8 = 1;
  uint64_t v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

  if (v5 != v2) {
    goto LABEL_21;
  }
  uint64_t v8 = 1;
  uint64_t v2 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v2);
  return v8 & 1;
}

  if (v5 != v7) {
    goto LABEL_21;
  }
  uint64_t v8 = 1;
  uint64_t v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

  (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 1448))( *(void *)(v0 + 1120),  1LL,  1LL,  *(void *)(v0 + 1144));
LABEL_20:
  swift_release();
  if (qword_10099B328 != -1) {
    swift_once(&qword_10099B328, sub_10035A0D4);
  }
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1328);
  uint64_t v19 = *(void *)(v0 + 1208);
  uint64_t v20 = *(void *)(v0 + 1184);
  uint64_t v21 = *(void *)(v0 + 1144);
  uint64_t v22 = *(void *)(v0 + 968);
  uint64_t v23 = type metadata accessor for Logger(0LL);
  sub_10000A720(v23, (uint64_t)qword_100A2A730);
  v18(v20, v19, v21);
  uint64_t v24 = sub_100013044(v22, v0 + 768);
  id v25 = (os_log_s *)Logger.logObject.getter(v24);
  uint64_t v26 = static os_log_type_t.info.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v48 = *(void *)(v0 + 1200);
    type = v26;
    uint64_t v27 = *(void *)(v0 + 1184);
    log = *(os_log_t *)(v0 + 1152);
    uint64_t v51 = v2;
    uint64_t v28 = *(void *)(v0 + 1144);
    uint64_t v29 = swift_slowAlloc(42LL, -1LL);
    uint64_t v49 = swift_slowAlloc(64LL, -1LL);
    unsigned int v52 = v49;
    *(_DWORD *)uint64_t v29 = 141558787;
    *(void *)(v0 + 872) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 872, v0 + 880, v29 + 4, v29 + 12);
    *(_WORD *)(v29 + 12) = 2081;
    uint64_t v30 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter(v28, v30);
    *(void *)(v0 + 880) = sub_1003F11D4(v31, v32, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 880, v0 + 888, v29 + 14, v29 + 22);
    swift_bridgeObjectRelease();
    uint64_t v33 = (void (*)(uint64_t, uint64_t))*((void *)log + 1);
    v33(v27, v28);
    *(_WORD *)(v29 + 22) = 2160;
    *(void *)(v0 + 888) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 888, v0 + 896, v29 + 24, v29 + 32);
    *(_WORD *)(v29 + 32) = 2081;
    uint64_t v34 = *(void *)(v0 + 792);
    uint64_t v35 = *(void *)(v0 + 800);
    sub_100012ED8((void *)(v0 + 768), v34);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v35 + 8) + 8LL) + 32LL))(v34);
    uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter(v28, v30);
    uint64_t v38 = v37;
    uint64_t v39 = v28;
    uint64_t v2 = v51;
    v33(v48, v39);
    *(void *)(v0 + 896) = sub_1003F11D4(v36, v38, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 896, v0 + 904, v29 + 34, v29 + 42);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 768));
    _os_log_impl( (void *)&_mh_execute_header,  v25,  type,  "Updating location for subscribers - from beacon store update for beacongroup: %{private,mask.hash}s, beacon: %{pri vate,mask.hash}s.",  (uint8_t *)v29,  0x2Au);
    swift_arrayDestroy(v49, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1LL, -1LL);
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  else
  {
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 1152) + 8LL);
    v33(*(void *)(v0 + 1184), *(void *)(v0 + 1144));
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 768));
  }

  *(void *)(v0 + 1536) = v33;
  uint64_t v40 = *(void **)(v0 + 1280);
  uint64_t v41 = *(void *)(v0 + 968);
  uint64_t v42 = *(void *)(v0 + 960);
  sub_100013044(v0 + 608, v0 + 808);
  sub_100013044(v41, v0 + 208);
  uint64_t v43 = (void *)swift_allocObject(&unk_100953D90, 120LL, 7LL);
  *(void *)(v0 + 1544) = v43;
  v43[2] = v42;
  v43[3] = v2;
  sub_100012EC0((__int128 *)(v0 + 808), (uint64_t)(v43 + 4));
  sub_100012EC0((__int128 *)(v0 + 208), (uint64_t)(v43 + 9));
  v43[14] = v40;
  uint64_t v44 = async function pointer to unsafeBlocking<A>(_:)[1];
  uint64_t v45 = v40;
  swift_retain();
  uint64_t v46 = (void *)swift_task_alloc(v44);
  *(void *)(v0 + 1552) = v46;
  *uint64_t v46 = v0;
  v46[1] = sub_100362D48;
  return unsafeBlocking<A>(_:)(v46, sub_10036E608, v43, (char *)&type metadata for () + 8);
}

    uint64_t v8 = (v14 - 1) & v14;
    uint64_t v9 = __clz(__rbit64(v14)) + (v6 << 6);
  }

  uint64_t v45 = v76[13];
  v88 = v76[16];
  v91 = v76[12];
  v83 = v76[9];
  v104 = v76[8];
  uint64_t v46 = v45 + *(int *)(v83 + 48);
  ((void (*)(uint64_t))v101)(v45);
  *(void *)uint64_t v46 = v107;
  *(_BYTE *)(v46 + 8) = v100;
  *(void *)(v46 + swift_weakDestroy(v0 + 16) = v108;
  *(void *)(v46 + 24) = v25;
  *(void *)(v46 + 32) = v93;
  *(void *)(v46 + 40) = v27;
  *(void *)(v46 + 48) = v99;
  *(void *)(v46 + 56) = v84;
  *(_BYTE *)(v46 + 64) = v98;
  *(_BYTE *)(v46 + 65) = v97;
  *(void *)(v46 + 72) = v79;
  *(void *)(v46 + 80) = v96;
  *(void *)(v46 + 88) = v95;
  *(_BYTE *)(v46 + 96) = v94;
  uint64_t v47 = swift_task_alloc(32LL);
  *(void *)(v47 + swift_weakDestroy(v0 + 16) = v45;
  swift_retain();
  swift_bridgeObjectRetain(v108);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v93);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v84);
  swift_bridgeObjectRetain(v79);
  v105 = sub_10036D818(v104, (uint64_t (*)(char *, uint64_t, void, void))sub_10036E8E4, v47);
  swift_task_dealloc(v47);
  sub_100015794(v45, &qword_1009AA650);
  uint64_t v48 = v91 + *(int *)(v83 + 48);
  ((void (*)(uint64_t, uint64_t, uint64_t))v101)(v91, v88, v102);
  *(void *)uint64_t v48 = v107;
  *(_BYTE *)(v48 + 8) = v100;
  *(void *)(v48 + swift_weakDestroy(v0 + 16) = v108;
  *(void *)(v48 + 24) = v25;
  *(void *)(v48 + 32) = v93;
  *(void *)(v48 + 40) = v27;
  *(void *)(v48 + 48) = v99;
  *(void *)(v48 + 56) = v84;
  *(_BYTE *)(v48 + 64) = v98;
  *(_BYTE *)(v48 + 65) = v97;
  *(void *)(v48 + 72) = v79;
  *(void *)(v48 + 80) = v96;
  *(void *)(v48 + 88) = v95;
  *(_BYTE *)(v48 + 96) = v94;
  uint64_t v49 = swift_task_alloc(32LL);
  *(void *)(v49 + swift_weakDestroy(v0 + 16) = v91;
  swift_retain();
  swift_bridgeObjectRetain(v108);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v93);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v84);
  swift_bridgeObjectRetain(v79);
  uint64_t v50 = sub_10036D9B0(v43, (uint64_t (*)(char *, void *, void, void))sub_10036E8EC, v49);
  swift_task_dealloc(v49);
  sub_100015794(v91, &qword_1009AA650);
  swift_bridgeObjectRelease();
  sub_1001859D0((uint64_t)v50);
  uint64_t v51 = v105[2];
  if (v51)
  {
    sub_100004AEC((uint64_t *)&unk_10099E440);
    unsigned int v52 = (void *)static _DictionaryStorage.allocate(capacity:)(v51);
  }

  else
  {
    unsigned int v52 = &_swiftEmptyDictionarySingleton;
  }

  v76[4] = v52;
  swift_bridgeObjectRetain(v105);
  sub_10036D27C(v53, 1, v75);
  v76[20] = v40;
  v89 = v76[16];
  uint64_t v54 = v76[13];
  v106 = v76[11];
  uint64_t v55 = v76[9];
  v92 = v76[10];
  swift_bridgeObjectRelease();
  uint64_t v56 = objc_allocWithZone(&OBJC_CLASS___SPLocationFetchResult);
  sub_10036E8F4();
  sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_release();
  uint64_t v58 = [v56 initWithResults:isa];
  v76[21] = v58;

  uint64_t v59 = *(int *)(v55 + 48);
  ((void (*)(uint64_t, uint64_t, uint64_t))v101)(v54, v89, v102);
  uint64_t v60 = *(unsigned __int8 *)(v92 + 80);
  uint64_t v61 = (v60 + 16) & ~v60;
  uint64_t v62 = v54 + v59;
  *(void *)uint64_t v62 = v107;
  *(_BYTE *)(v62 + 8) = v100;
  *(void *)(v62 + swift_weakDestroy(v0 + 16) = v108;
  *(void *)(v62 + 24) = v25;
  *(void *)(v62 + 32) = v93;
  *(void *)(v62 + 40) = v27;
  *(void *)(v62 + 48) = v99;
  *(void *)(v62 + 56) = v84;
  *(_BYTE *)(v62 + 64) = v98;
  *(_BYTE *)(v62 + 65) = v97;
  *(void *)(v62 + 72) = v79;
  *(void *)(v62 + 80) = v96;
  *(void *)(v62 + 88) = v95;
  *(_BYTE *)(v62 + 96) = v94;
  uint64_t v63 = (v106 + v61 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v64 = swift_allocObject(&unk_100953E58, v63 + 8, v60 | 7);
  v76[22] = v64;
  sub_100015750(v54, v64 + v61, &qword_1009AA650);
  *(void *)(v64 + v63) = v58;
  uint64_t v65 = async function pointer to unsafeBlocking<A>(_:)[1];
  id v66 = v58;
  uint64_t v67 = (void *)swift_task_alloc(v65);
  v76[23] = v67;
  uint64_t v68 = sub_100004AEC(&qword_1009AE4D0);
  uint64_t *v67 = v76;
  v67[1] = sub_10036AFE8;
  unsafeBlocking<A>(_:)(v76 + 24, sub_10036EA04, v64, v68);
}

    swift_bridgeObjectRelease_n(v21, 2LL);
    uint64_t v30 = SPBeaconTaskNameStopSound;
    static Date.trustedNow.getter((uint64_t)v8);
    uint64_t v31 = objc_allocWithZone(&OBJC_CLASS___SPBeaconTaskInformation);
    isa = Date._bridgeToObjectiveC()().super.isa;
    uint64_t v17 = [v31 initWithName:v30 lastUpdated:isa error:0 state:2];

    (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v36);
LABEL_22:
    unint64_t result = sub_100018C68((uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
  }

    uint64_t v58 = sub_100004AEC(&qword_1009A6DD0);
    memcpy((void *)v43, (const void *)v44, *(void *)(*(void *)(v58 - 8) + 64LL));
    goto LABEL_43;
  }

  if (v48)
  {
    sub_100018C68(v43, type metadata accessor for AccessoryInfoResponseContent.Configuration);
    goto LABEL_19;
  }

  v137 = v27;
  *(void *)uint64_t v43 = *(void *)v44;
  uint64_t v59 = *(void *)(v44 + 8);
  *(void *)(v43 + 8) = v59;
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRelease();
  *(void *)(v43 + swift_weakDestroy(v0 + 16) = *(void *)(v44 + 16);
  uint64_t v60 = *(void *)(v44 + 24);
  *(void *)(v43 + 24) = v60;
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRelease();
  *(void *)(v43 + 32) = *(void *)(v44 + 32);
  uint64_t v61 = *(void *)(v44 + 40);
  *(void *)(v43 + 40) = v61;
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRelease();
  *(_WORD *)(v43 + 48) = *(_WORD *)(v44 + 48);
  *(void *)(v43 + 56) = *(void *)(v44 + 56);
  uint64_t v62 = *(void *)(v44 + 64);
  *(_BYTE *)(v43 + 72) = *(_BYTE *)(v44 + 72);
  *(void *)(v43 + 64) = v62;
  uint64_t v63 = v45[10];
  uint64_t v64 = (const void *)(v44 + v63);
  __dsta = (void *)(v43 + v63);
  uint64_t v65 = ((uint64_t (*)(void))v139)();
  id v66 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v139)(v64, 1LL, v26);
  if (v65)
  {
    if (!v66)
    {
      (*(void (**)(void *, const void *, uint64_t))(v137 + 16))(__dsta, v64, v26);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v137 + 56))(__dsta, 0LL, 1LL, v26);
      goto LABEL_35;
    }

    uint64_t v67 = *(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A34D0) - 8) + 64LL);
    uint64_t v68 = __dsta;
  }

  else
  {
    if (!v66)
    {
      (*(void (**)(void *, const void *, uint64_t))(v137 + 24))(__dsta, v64, v26);
      goto LABEL_35;
    }

    (*(void (**)(void *, uint64_t))(v137 + 8))(__dsta, v26);
    uint64_t v67 = *(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A34D0) - 8) + 64LL);
    uint64_t v68 = __dsta;
  }

  memcpy(v68, v64, v67);
LABEL_35:
  v99 = v45[11];
  v100 = (const void *)(v44 + v99);
  __dstb = (void *)(v43 + v99);
  v101 = ((uint64_t (*)(void))v139)();
  v102 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v139)(v100, 1LL, v26);
  if (v101)
  {
    if (v102)
    {
      v103 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(__dstb, v100, *(void *)(*(void *)(v103 - 8) + 64LL));
      uint64_t v27 = v137;
    }

    else
    {
      uint64_t v27 = v137;
      (*(void (**)(void *, const void *, uint64_t))(v137 + 16))(__dstb, v100, v26);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v137 + 56))(__dstb, 0LL, 1LL, v26);
    }
  }

  else
  {
    uint64_t v27 = v137;
    if (v102)
    {
      (*(void (**)(void *, uint64_t))(v137 + 8))(__dstb, v26);
      v104 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(__dstb, v100, *(void *)(*(void *)(v104 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v137 + 24))(__dstb, v100, v26);
    }
  }

  v105 = v45[12];
  v106 = v43 + v105;
  v107 = (uint64_t *)(v44 + v105);
  v108 = *v107;
  *(_BYTE *)(v106 + 8) = *((_BYTE *)v107 + 8);
  *(void *)v106 = v108;
  v109 = v45[13];
  v110 = (void *)(v43 + v109);
  v111 = (void *)(v44 + v109);
  *v110 = *v111;
  v112 = v111[1];
  v110[1] = v112;
  swift_bridgeObjectRetain(v112);
  swift_bridgeObjectRelease();
  v113 = v45[14];
  v114 = *(void *)(v44 + v113);
  *(void *)(v43 + v113) = v114;
  swift_bridgeObjectRetain(v114);
  swift_bridgeObjectRelease();
  v115 = v45[15];
  v116 = (void *)(v43 + v115);
  v117 = (void *)(v44 + v115);
  *v116 = *v117;
  v118 = v117[1];
  v116[1] = v118;
  swift_bridgeObjectRetain(v118);
  swift_bridgeObjectRelease();
  v119 = v45[16];
  v120 = *(void *)(v44 + v119);
  *(void *)(v43 + v119) = v120;
  swift_bridgeObjectRetain(v120);
  swift_bridgeObjectRelease();
  v121 = v45[17];
  v122 = v43 + v121;
  v123 = (__int128 *)(v44 + v121);
  v124 = *v123;
  *(_BYTE *)(v122 + swift_weakDestroy(v0 + 16) = *((_BYTE *)v123 + 16);
  *(_OWORD *)v122 = v124;
  v125 = v45[18];
  v126 = v43 + v125;
  v127 = (__int128 *)(v44 + v125);
  v128 = *v127;
  *(_BYTE *)(v126 + swift_weakDestroy(v0 + 16) = *((_BYTE *)v127 + 16);
  *(_OWORD *)v126 = v128;
LABEL_43:
  *(_DWORD *)(a1 + a3[17]) = *(_DWORD *)(a2 + a3[17]);
  v129 = a3[18];
  v130 = *(void *)(a2 + v129);
  *(void *)(a1 + v129) = v130;
  swift_bridgeObjectRetain(v130);
  swift_bridgeObjectRelease();
  v131 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 24);
  v131(a1 + a3[19], a2 + a3[19], v26);
  v131(a1 + a3[20], a2 + a3[20], v26);
  v131(a1 + a3[21], a2 + a3[21], v26);
  v131(a1 + a3[22], a2 + a3[22], v26);
  v131(a1 + a3[23], a2 + a3[23], v26);
  v131(a1 + a3[24], a2 + a3[24], v26);
  return a1;
}

    uint64_t v59 = sub_100004AEC(&qword_1009A6DD0);
    memcpy((void *)v47, (const void *)v48, *(void *)(*(void *)(v59 - 8) + 64LL));
    uint64_t v60 = v116;
    goto LABEL_43;
  }

  if (v52)
  {
    sub_100018C68(v47, type metadata accessor for AccessoryInfoResponseContent.Configuration);
    goto LABEL_19;
  }

  uint64_t v61 = *(void *)(v48 + 8);
  *(void *)uint64_t v47 = *(void *)v48;
  *(void *)(v47 + 8) = v61;
  swift_bridgeObjectRelease();
  uint64_t v62 = *(void *)(v48 + 24);
  *(void *)(v47 + swift_weakDestroy(v0 + 16) = *(void *)(v48 + 16);
  *(void *)(v47 + 24) = v62;
  swift_bridgeObjectRelease();
  uint64_t v63 = *(void *)(v48 + 40);
  *(void *)(v47 + 32) = *(void *)(v48 + 32);
  *(void *)(v47 + 40) = v63;
  swift_bridgeObjectRelease();
  *(_WORD *)(v47 + 48) = *(_WORD *)(v48 + 48);
  uint64_t v64 = *(void *)(v48 + 64);
  *(void *)(v47 + 56) = *(void *)(v48 + 56);
  *(void *)(v47 + 64) = v64;
  *(_BYTE *)(v47 + 72) = *(_BYTE *)(v48 + 72);
  uint64_t v65 = v49[10];
  id v66 = (const void *)(v48 + v65);
  v113 = (void *)(v47 + v65);
  uint64_t v67 = v31();
  uint64_t v68 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v31)(v66, 1LL, v29);
  if (v67)
  {
    if (!v68)
    {
      (*(void (**)(void *, const void *, uint64_t))(v116 + 32))(v113, v66, v29);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v116 + 56))(v113, 0LL, 1LL, v29);
      goto LABEL_35;
    }

    uint64_t v69 = *(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A34D0) - 8) + 64LL);
    unint64_t v70 = v113;
  }

  else
  {
    if (!v68)
    {
      (*(void (**)(void *, const void *, uint64_t))(v116 + 40))(v113, v66, v29);
      goto LABEL_35;
    }

    (*(void (**)(void *, uint64_t))(v116 + 8))(v113, v29);
    uint64_t v69 = *(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A34D0) - 8) + 64LL);
    unint64_t v70 = v113;
  }

  memcpy(v70, v66, v69);
LABEL_35:
  v85 = v49[11];
  v86 = (const void *)(v48 + v85);
  v114 = (void *)(v47 + v85);
  v87 = v31();
  v88 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v31)(v86, 1LL, v29);
  if (v87)
  {
    if (v88)
    {
      v89 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(v114, v86, *(void *)(*(void *)(v89 - 8) + 64LL));
      uint64_t v60 = v116;
    }

    else
    {
      uint64_t v60 = v116;
      (*(void (**)(void *, const void *, uint64_t))(v116 + 32))(v114, v86, v29);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v116 + 56))(v114, 0LL, 1LL, v29);
    }
  }

  else
  {
    uint64_t v60 = v116;
    if (v88)
    {
      (*(void (**)(void *, uint64_t))(v116 + 8))(v114, v29);
      v90 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(v114, v86, *(void *)(*(void *)(v90 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v116 + 40))(v114, v86, v29);
    }
  }

  v91 = v49[12];
  v92 = v47 + v91;
  v93 = v48 + v91;
  *(void *)v92 = *(void *)v93;
  *(_BYTE *)(v92 + 8) = *(_BYTE *)(v93 + 8);
  v94 = v49[13];
  v95 = (void *)(v47 + v94);
  v96 = (uint64_t *)(v48 + v94);
  v98 = *v96;
  v97 = v96[1];
  *v95 = v98;
  v95[1] = v97;
  swift_bridgeObjectRelease();
  *(void *)(v47 + v49[14]) = *(void *)(v48 + v49[14]);
  swift_bridgeObjectRelease();
  v99 = v49[15];
  v100 = (void *)(v47 + v99);
  v101 = (uint64_t *)(v48 + v99);
  v103 = *v101;
  v102 = v101[1];
  *v100 = v103;
  v100[1] = v102;
  swift_bridgeObjectRelease();
  *(void *)(v47 + v49[16]) = *(void *)(v48 + v49[16]);
  swift_bridgeObjectRelease();
  v104 = v49[17];
  v105 = v47 + v104;
  v106 = v48 + v104;
  *(_OWORD *)v105 = *(_OWORD *)v106;
  *(_BYTE *)(v105 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(v106 + 16);
  v107 = v49[18];
  v108 = v47 + v107;
  v109 = v48 + v107;
  *(_BYTE *)(v108 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(v109 + 16);
  *(_OWORD *)v108 = *(_OWORD *)v109;
LABEL_43:
  v110 = a3[18];
  *(_DWORD *)(a1 + a3[17]) = *(_DWORD *)(a2 + a3[17]);
  *(void *)(a1 + v110) = *(void *)(a2 + v110);
  swift_bridgeObjectRelease();
  v111 = *(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 40);
  v111(a1 + a3[19], a2 + a3[19], v29);
  v111(a1 + a3[20], a2 + a3[20], v29);
  v111(a1 + a3[21], a2 + a3[21], v29);
  v111(a1 + a3[22], a2 + a3[22], v29);
  v111(a1 + a3[23], a2 + a3[23], v29);
  v111(a1 + a3[24], a2 + a3[24], v29);
  return a1;
}

    uint64_t v10 = (v18 - 1) & v18;
    uint64_t v13 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_20:
    *(void *)(v0 + 272) = v9;
    *(void *)(v0 + 280) = v10;
    uint64_t v20 = *(void *)(v0 + 144);
    uint64_t v21 = *(void *)(v0 + 152);
    uint64_t v22 = *(void *)(v0 + 120);
    sub_10001DC4C(*(void *)(v14 + 48) + *(void *)(v21 + 72) * v13, v22, type metadata accessor for BeaconIdentifier);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56))(v22, 0LL, 1LL, v20);
    uint64_t v23 = *(void *)(v0 + 248);
    sub_10002218C(*(void *)(v0 + 120), *(void *)(v0 + 176), type metadata accessor for BeaconIdentifier);
    if (*(void *)(v23 + 16) && (uint64_t v24 = sub_10030D1C4(*(void *)(v0 + 176)), (v25 & 1) != 0))
    {
      uint64_t v26 = *(void *)(v0 + 80);
      uint64_t v27 = *(void *)(v0 + 88);
      uint64_t v28 = *(void *)(v0 + 72);
      uint64_t v29 = *(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 16);
      v29(v28, *(void *)(*(void *)(v0 + 248) + 56LL) + *(void *)(v27 + 72) * v24, v26);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56))(v28, 0LL, 1LL, v26);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v28, 1LL, v26) != 1)
      {
        uint64_t v31 = *(void *)(v0 + 168);
        uint64_t v30 = *(void *)(v0 + 176);
        uint64_t v56 = *(void *)(v0 + 152);
        uint64_t v57 = *(void *)(v0 + 160);
        uint64_t v33 = *(void *)(v0 + 104);
        uint64_t v32 = *(void *)(v0 + 112);
        uint64_t v34 = *(void *)(v0 + 88);
        uint64_t v35 = *(void *)(v0 + 96);
        uint64_t v36 = *(void *)(v0 + 80);
        uint64_t v61 = *(void *)(v0 + 64);
        uint64_t v58 = *(void *)(v0 + 40);
        uint64_t v59 = *(void *)(v0 + 32);
        uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32);
        v37(v32, *(void *)(v0 + 72), v36);
        v29(v33, v32, v36);
        uint64_t v38 = v30;
        uint64_t v39 = v31;
        sub_10001DC4C(v30, v31, type metadata accessor for BeaconIdentifier);
        uint64_t v40 = *(unsigned __int8 *)(v34 + 80);
        uint64_t v41 = (v40 + 16) & ~v40;
        uint64_t v42 = *(unsigned __int8 *)(v56 + 80);
        uint64_t v43 = (v35 + v42 + v41) & ~v42;
        uint64_t v44 = (v57 + v43 + 7) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v45 = swift_allocObject(&unk_100956098, v44 + 8, v40 | v42 | 7);
        *(void *)(v0 + 288) = v45;
        v37(v45 + v41, v33, v36);
        uint64_t v46 = sub_10002218C(v39, v45 + v43, type metadata accessor for BeaconIdentifier);
        *(void *)(v45 + v44) = v58;
        UUID.init()(v46);
        uint64_t v47 = (void *)swift_task_alloc(64LL);
        *(void *)(v0 + 296) = v47;
        v47[2] = v61;
        void v47[3] = &unk_1009AC088;
        v47[4] = v45;
        v47[5] = v59;
        v47[6] = v38;
        uint64_t v48 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
        *(void *)(v0 + 304) = v48;
        *uint64_t v48 = v0;
        v48[1] = sub_1003B97A8;
        return withCheckedContinuation<A>(isolation:function:_:)( v48,  0LL,  0LL,  0xD000000000000027LL,  0x80000001008602E0LL,  sub_1003D51D0,  v47,  (char *)&type metadata for () + 8);
      }
    }

    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 88) + 56LL))( *(void *)(v0 + 72),  1LL,  1LL,  *(void *)(v0 + 80));
    }

    uint64_t v11 = *(void *)(v0 + 72);
    sub_100018C68(*(void *)(v0 + 176), type metadata accessor for BeaconIdentifier);
    unint64_t result = sub_100015794(v11, (uint64_t *)&unk_1009A34D0);
  }

  uint64_t v19 = v15 + 3;
  if (v19 >= v16)
  {
LABEL_26:
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 152) + 56LL))( *(void *)(v0 + 120),  1LL,  1LL,  *(void *)(v0 + 144));
LABEL_27:
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v49 = *(void *)(v0 + 256);
    uint64_t v60 = *(_OWORD *)(v0 + 224);
    uint64_t v51 = *(void *)(v0 + 208);
    uint64_t v50 = *(void *)(v0 + 216);
    os_log_type_t v53 = *(void *)(v0 + 32);
    unsigned int v52 = *(void *)(v0 + 40);
    uint64_t v54 = swift_task_alloc(80LL);
    *(void *)(v0 + 312) = v54;
    *(void *)(v54 + swift_weakDestroy(v0 + 16) = v49;
    *(void *)(v54 + 24) = v53;
    *(void *)(v54 + 32) = v51;
    *(void *)(v54 + 40) = v50;
    *(_OWORD *)(v54 + 48) = v60;
    *(void *)(v54 + 64) = v52;
    uint64_t v55 = (void *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
    *(void *)(v0 + 320) = v55;
    _BYTE *v55 = v0;
    v55[1] = sub_1003B9CE8;
    return withTaskGroup<A, B>(of:returning:isolation:body:)( v55,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8,  0LL,  0LL,  &unk_1009AC070,  v54,  (char *)&type metadata for () + 8);
  }

  uint64_t v18 = *(void *)(v17 + 8 * v19);
  if (v18)
  {
    uint64_t v9 = v19;
    goto LABEL_19;
  }

  while (1)
  {
    uint64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v16) {
      goto LABEL_26;
    }
    uint64_t v18 = *(void *)(v17 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_19;
    }
  }

    __break(1u);
LABEL_20:
    swift_once(&qword_10099B3E8, sub_1003E02E8);
  }

  __break(1u);
  return result;
}

    __break(1u);
LABEL_20:
    swift_once(&qword_10099B3E8, sub_1003E02E8);
  }

  __break(1u);
  return result;
}

    swift_bridgeObjectRelease();
    if ((v23 & 0x800000) == 0)
    {
LABEL_9:
      if ((v23 & 0x40000000000LL) == 0) {
        goto LABEL_10;
      }
      goto LABEL_21;
    }

        __break(1u);
LABEL_20:
        swift_once(&qword_10099B318, sub_100352F58);
LABEL_11:
        OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
        uint64_t v63 = sub_1006A1BB8(v77);
        swift_bridgeObjectRelease();
        uint64_t v64 = v73;
        if ((v63 & 1) != 0) {
          goto LABEL_15;
        }
        if (qword_10099B6A0 != -1) {
          swift_once(&qword_10099B6A0, sub_100626B90);
        }
        uint64_t v77 = 0x7365547265646E75LL;
        uint64_t v78 = 0xE900000000000074LL;
        SynchronousCache.cachedValue<A>(key:computeBlock:)(&v82, &v77, sub_10000A71C, 0LL, &type metadata for Bool);
        swift_bridgeObjectRelease();
        if (v82 == 1)
        {
LABEL_15:
          uint64_t v65 = (int *)((char *)v64 + *(int *)(v47 + 40));
          id v66 = *v65;
          BYTE4(v77) = *((_BYTE *)v65 + 4);
          LODWORD(v77) = v66;
          uint64_t v67 = v80;
          uint64_t v68 = v81;
          sub_100037298((uint64_t)v79, v80);
          uint64_t v69 = sub_1004D92AC();
          dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v77, &type metadata for TLVPackets, v69, v67, v68);
        }

        uint64_t v33 = v42;
        uint64_t v34 = v46;
        goto LABEL_6;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_19;
  }

  uint64_t v16 = sub_100016F9C(v14, v13);
  uint64_t v21 = static os_log_type_t.error.getter(v16);
  if (qword_10099B520 != -1) {
    swift_once(&qword_10099B520, sub_1004DC610);
  }
  uint64_t v22 = qword_100A2AC90;
  uint64_t v23 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v24 = swift_allocObject(v23, 72LL, 7LL);
  *(_OWORD *)(v24 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v77 = v2;
  swift_errorRetain(v2);
  id v25 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  uint64_t v26 = String.init<A>(describing:)(&v77, v25);
  uint64_t v28 = v27;
  *(void *)(v24 + 56) = &type metadata for String;
  *(void *)(v24 + 64) = sub_1000226F4();
  *(void *)(v24 + 32) = v26;
  *(void *)(v24 + 40) = v28;
  os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "Error deriving advertisementKey: %@", 35LL, 2LL, v24);
  swift_bridgeObjectRelease();
  uint64_t v29 = sub_100117A8C();
  uint64_t v30 = swift_allocError(&type metadata for CryptoTokenError, v29, 0LL, 0LL);
  *uint64_t v31 = 1;
  swift_willThrow(v30);
  swift_errorRelease(v2);
  uint64_t v32 = v76;
  objc_autoreleasePoolPop(v75);
  uint64_t v33 = v32;
  uint64_t v34 = v12;
LABEL_6:
  sub_100016F9C(v33, v34);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v79);
}

      unint64_t v70 = 0LL;
      uint64_t v36 = (char *)0xE000000000000000LL;
      unsigned int v52 = 0x4E206D6F74737543LL;
      uint64_t v58 = (dispatch_group_s *)0xEB00000000656D61LL;
LABEL_22:
      aBlock = v60;
      uint64_t v72 = (unint64_t)v60[2];
      id v71 = (unint64_t)v60[3];
      if (v72 >= v71 >> 1)
      {
        sub_100033428(v71 > 1, v72 + 1, 1);
        uint64_t v61 = (char *)v310;
        uint64_t v60 = aBlock;
      }

      ++v59;
      v60[2] = (void *)(v72 + 1);
      uint64_t v73 = &v60[5 * v72];
      v73[4] = v51;
      v73[5] = (void *)v52;
      v73[6] = v58;
      v73[7] = v70;
      v73[8] = v36;
      if (v59 == v57)
      {
        swift_bridgeObjectRelease();
        uint64_t v31 = v298;
        if (!v60[2]) {
          goto LABEL_28;
        }
LABEL_26:
        uint64_t v55 = v60[7];
        uint64_t v54 = (unint64_t)v60[8];
        swift_bridgeObjectRetain(v54);
        uint64_t v56 = swift_bridgeObjectRelease();
        goto LABEL_29;
      }
    }
  }

  swift_bridgeObjectRelease();
  uint64_t v60 = (void **)_swiftEmptyArrayStorage;
  if (_swiftEmptyArrayStorage[2]) {
    goto LABEL_26;
  }
LABEL_28:
  uint64_t v56 = swift_bridgeObjectRelease();
  uint64_t v55 = 0LL;
  uint64_t v54 = 0xE000000000000000LL;
LABEL_29:
  a2 = v279;
LABEL_30:
  UUID.init()(v56);
  ((void (*)(char *, char *, uint64_t))v309)(v304, v311, v31);
  uint64_t v74 = a2[1];
  if (v74)
  {
    uint64_t v75 = *a2;
    uint64_t v76 = a2[1];
  }

  else
  {
    uint64_t v75 = 0LL;
    uint64_t v76 = 0xE000000000000000LL;
  }

  v310 = xmmword_1007E4480;
  uint64_t v77 = v299;
  *(_OWORD *)v299 = xmmword_1007E4480;
  uint64_t v78 = (int *)v288;
  uint64_t v79 = *(void (**)(char *, unint64_t, uint64_t))(v307 + 32);
  v79(&v77[*(int *)(v288 + 20)], v303, v31);
  v80 = &v77[v78[6]];
  v81 = v304;
  v304 = (char *)v79;
  v79(v80, (unint64_t)v81, v31);
  *(void *)&v77[v78[7]] = v51;
  v82 = &v77[v78[8]];
  *(void *)v82 = v75;
  *((void *)v82 + 1) = v76;
  v83 = &v77[v78[9]];
  *(void *)v83 = v55;
  *((void *)v83 + 1) = v54;
  v84 = (int *)v289;
  v85 = v306;
  swift_bridgeObjectRetain(v74);
  UUID.init()(v86);
  v87 = v311;
  v88 = v309;
  ((void (*)(char *, char *, uint64_t))v309)((char *)v85 + v84[6], v311, v31);
  v89 = *(void (**)(char *, char *, uint64_t))(v300 + 16);
  v90 = v301;
  v91 = v302;
  v89((char *)v85 + v84[8], v301, v302);
  *v85 = v310;
  *(void *)((char *)v85 + v84[7]) = 1LL;
  v92 = v305;
  ((void (*)(uint64_t, char *, uint64_t))v88)(v305, v87, v31);
  v93 = v293;
  v94 = (void *)(v92 + *(int *)(v293 + 24));
  v94[3] = &type metadata for PrimaryIndex;
  v94[4] = sub_1000868E4();
  *v94 = 1LL;
  v89((char *)(v92 + *(int *)(v93 + 28)), v90, v91);
  *(_BYTE *)(v92 + *(int *)(v93 + 20)) = 1;
  v95 = swift_allocObject(&unk_100962B50, 24LL, 7LL);
  *(void *)(v95 + swift_weakDestroy(v0 + 16) = 0LL;
  v96 = (uint64_t *)(v95 + 16);
  v97 = dispatch_group_create();
  dispatch_group_enter(v97);
  v98 = v292;
  sub_10001DC4C((uint64_t)v77, v292, type metadata accessor for BeaconNamingRecord);
  v99 = *(unsigned __int8 *)(v290 + 80);
  v100 = (v99 + 24) & ~v99;
  v101 = (v291 + v100 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  v102 = swift_allocObject(&unk_100962B78, v101 + 8, v99 | 7);
  *(void *)(v102 + swift_weakDestroy(v0 + 16) = v97;
  sub_10002218C(v98, v102 + v100, type metadata accessor for BeaconNamingRecord);
  *(void *)(v102 + v101) = v95;
  v103 = v97;
  swift_retain();
  sub_1004FC794((uint64_t)v77, 0, (uint64_t)sub_10056C7B0, v102);
  v104 = swift_release();
  v105 = v295;
  static DispatchTime.now()(v104);
  v106 = v296;
  + infix(_:_:)(v105, 60.0);
  v107 = *(void (**)(dispatch_group_s *, uint64_t))(v294 + 8);
  v108 = v297;
  v107(v105, v297);
  v109 = OS_dispatch_group.wait(timeout:)(v106) & 1;
  v107((dispatch_group_s *)v106, v108);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v109, 1LL) & 1) != 0)
  {
    if (qword_10099B7A0 != -1) {
      swift_once(&qword_10099B7A0, sub_1006518D8);
    }
    v110 = type metadata accessor for Logger(0LL);
    sub_10000A720(v110, (uint64_t)qword_100A2B0B0);
    v111 = v278;
    uint64_t v51 = (char *)v298;
    v112 = ((uint64_t (*)(char *, char *, uint64_t))v309)(v278, v311, v298);
    v113 = (os_log_s *)Logger.logObject.getter(v112);
    v114 = static os_log_type_t.error.getter(v113);
    v115 = os_log_type_enabled(v113, v114);
    *(void *)&v310 = v95;
    if (v115)
    {
      v116 = v111;
      v117 = swift_slowAlloc(22LL, -1LL);
      v118 = (void **)swift_slowAlloc(32LL, -1LL);
      aBlock = v118;
      *(_DWORD *)v117 = 141558275;
      v319 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v319, v320, v117 + 4, v117 + 12);
      *(_WORD *)(v117 + 12) = 2081;
      v119 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      v120 = dispatch thunk of CustomStringConvertible.description.getter(v51, v119);
      v319 = sub_1003F11D4(v120, v121, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v319, v320, v117 + 14, v117 + 22);
      swift_bridgeObjectRelease();
      v122 = *(void (**)(char *, char *))(v307 + 8);
      v122(v116, v51);
      _os_log_impl( (void *)&_mh_execute_header,  v113,  v114,  "Timed out saving beacon naming record for beacon %{private,mask.hash}s",  (uint8_t *)v117,  0x16u);
      swift_arrayDestroy(v118, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v118, -1LL, -1LL);
      swift_slowDealloc(v117, -1LL, -1LL);
    }

    else
    {
      v122 = *(void (**)(char *, char *))(v307 + 8);
      v122(v111, v51);
    }

    v135 = swift_allocObject(&unk_100962D30, 32LL, 7LL);
    v136 = v281;
    *(void *)(v135 + swift_weakDestroy(v0 + 16) = v280;
    *(void *)(v135 + 24) = v136;
    v317 = sub_10056CDC4;
    v318 = (void *)v135;
    aBlock = _NSConcreteStackBlock;
    v314 = 1107296256LL;
    v315 = sub_1001C31E8;
    v316 = &unk_100962D48;
    v137 = _Block_copy(&aBlock);
    v138 = swift_retain();
    v139 = v285;
    static DispatchQoS.unspecified.getter(v138);
    v319 = (uint64_t)_swiftEmptyArrayStorage;
    v140 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v141 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    v142 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    v143 = v283;
    v144 = v141;
    v145 = v286;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v319, v144, v142, v286, v140);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v139, v143, v137);
    _Block_release(v137);

    (*(void (**)(char *, uint64_t))(v282 + 8))(v143, v145);
    (*(void (**)(char *, uint64_t))(v284 + 8))(v139, v287);
LABEL_43:
    sub_100018C68(v305, type metadata accessor for KeySyncMetadata);
    sub_100018C68((uint64_t)v306, type metadata accessor for KeyAlignmentRecord);
    sub_100018C68((uint64_t)v299, type metadata accessor for BeaconNamingRecord);
    (*(void (**)(char *, uint64_t))(v300 + 8))(v301, v302);
    v122(v311, v51);
    goto LABEL_44;
  }

  swift_beginAccess(v96, &v319, 0LL, 0LL);
  v123 = *v96;
  if (*v96)
  {
    v124 = (void *)swift_allocObject(&unk_100962CE0, 40LL, 7LL);
    v125 = v281;
    v124[2] = v280;
    v124[3] = v125;
    v124[4] = v123;
    v317 = sub_10056CDA8;
    v318 = v124;
    aBlock = _NSConcreteStackBlock;
    v314 = 1107296256LL;
    v315 = sub_1001C31E8;
    v316 = &unk_100962CF8;
    v126 = _Block_copy(&aBlock);
    swift_errorRetain(v123);
    swift_retain();
    v127 = swift_errorRetain(v123);
    v128 = v285;
    static DispatchQoS.unspecified.getter(v127);
    v312 = (uint64_t)_swiftEmptyArrayStorage;
    v129 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v130 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    v131 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    v132 = v283;
    v133 = v130;
    v134 = v286;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v312, v133, v131, v286, v129);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v128, v132, v126);
    _Block_release(v126);
    swift_errorRelease(v123);

    (*(void (**)(char *, uint64_t))(v282 + 8))(v132, v134);
    (*(void (**)(char *, uint64_t))(v284 + 8))(v128, v287);
LABEL_40:
    sub_100018C68(v305, type metadata accessor for KeySyncMetadata);
    sub_100018C68((uint64_t)v306, type metadata accessor for KeyAlignmentRecord);
    sub_100018C68((uint64_t)v299, type metadata accessor for BeaconNamingRecord);
    (*(void (**)(char *, uint64_t))(v300 + 8))(v301, v302);
    (*(void (**)(char *, uint64_t))(v307 + 8))(v311, v298);
LABEL_44:
    swift_release();
    return swift_release();
  }

  if ((sub_1005D38B0() & 1) != 0)
  {
    v147 = type metadata accessor for PairingConfig(0LL);
    v148 = v263;
    sub_10001581C((uint64_t)v279 + *(int *)(v147 + 28), v263, &qword_10099CE68);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v261 + 48))(v148, 1LL, v262) == 1)
    {
      v149 = sub_100015794(v148, &qword_10099CE68);
      v150 = static os_log_type_t.error.getter(v149);
      if (qword_10099B798 != -1) {
        swift_once(&qword_10099B798, sub_100651870);
      }
      os_log(_:dso:log:_:_:)( v150,  &_mh_execute_header,  qword_100A2B0A8,  "Missing info for BeaconProductInfoRecord!",  41LL,  2LL,  _swiftEmptyArrayStorage);

      sub_100018C68(v305, type metadata accessor for KeySyncMetadata);
      sub_100018C68((uint64_t)v306, type metadata accessor for KeyAlignmentRecord);
      sub_100018C68((uint64_t)v299, type metadata accessor for BeaconNamingRecord);
      (*(void (**)(char *, uint64_t))(v300 + 8))(v301, v302);
      (*(void (**)(char *, uint64_t))(v307 + 8))(v311, v298);
      return swift_release();
    }

    v151 = v148;
    v152 = v259;
    sub_10002218C(v151, v259, type metadata accessor for AccessoryProductInfo);
    v153 = v257;
    sub_10001DC4C(v152, v257, type metadata accessor for AccessoryProductInfo);
    v154 = (uint64_t)v277;
    ((void (*)(char *, char *, uint64_t))v309)(v277, v311, v298);
    v155 = v260;
    sub_10039DC30(v153, v154, v260);
    dispatch_group_enter(v103);
    v156 = swift_allocObject(&unk_100962C18, 32LL, 7LL);
    *(void *)(v156 + swift_weakDestroy(v0 + 16) = v103;
    *(void *)(v156 + 24) = v95;
    uint64_t v58 = v103;
    swift_retain();
    sub_1006B37D4(v155, (uint64_t)sub_10056CD88, v156);
    v157 = swift_release();
    v158 = v295;
    static DispatchTime.now()(v157);
    v159 = v296;
    + infix(_:_:)(v158, 60.0);
    v160 = v297;
    v107(v158, v297);
    v161 = OS_dispatch_group.wait(timeout:)(v159) & 1;
    v107((dispatch_group_s *)v159, v160);
    if ((static DispatchTimeoutResult.== infix(_:_:)(v161, 1LL) & 1) != 0)
    {
      if (qword_10099B7A0 != -1) {
        swift_once(&qword_10099B7A0, sub_1006518D8);
      }
      v162 = type metadata accessor for Logger(0LL);
      sub_10000A720(v162, (uint64_t)qword_100A2B0B0);
      uint64_t v36 = v256;
      uint64_t v51 = (char *)v298;
      v163 = ((uint64_t (*)(char *, char *, uint64_t))v309)(v256, v311, v298);
      unsigned int v52 = Logger.logObject.getter(v163);
      v164 = static os_log_type_t.error.getter(v52);
      v165 = os_log_type_enabled((os_log_t)v52, v164);
      *(void *)&v310 = v95;
      if (v165)
      {
        v166 = v36;
        v167 = swift_slowAlloc(22LL, -1LL);
        v168 = (void **)swift_slowAlloc(32LL, -1LL);
        *(_DWORD *)v167 = 141558275;
        v312 = 1752392040LL;
        aBlock = v168;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v312, &aBlock, v167 + 4, v167 + 12);
        *(_WORD *)(v167 + 12) = 2081;
        v169 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        v170 = dispatch thunk of CustomStringConvertible.description.getter(v51, v169);
        v312 = sub_1003F11D4(v170, v171, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v312, &aBlock, v167 + 14, v167 + 22);
        swift_bridgeObjectRelease();
        v122 = *(void (**)(char *, char *))(v307 + 8);
        v122(v166, v51);
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v52,  v164,  "Timed out saving productInfoRecord for beacon %{private,mask.hash}s",  (uint8_t *)v167,  0x16u);
        swift_arrayDestroy(v168, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v168, -1LL, -1LL);
        swift_slowDealloc(v167, -1LL, -1LL);
      }

      else
      {
LABEL_59:
        v122 = *(void (**)(char *, char *))(v307 + 8);
        v122(v36, v51);
      }

      v184 = swift_allocObject(&unk_100962C90, 32LL, 7LL);
      v185 = v281;
      *(void *)(v184 + swift_weakDestroy(v0 + 16) = v280;
      *(void *)(v184 + 24) = v185;
      v317 = sub_1005717E0;
      v318 = (void *)v184;
      aBlock = _NSConcreteStackBlock;
      v314 = 1107296256LL;
      v315 = sub_1001C31E8;
      v316 = &unk_100962CA8;
      v186 = _Block_copy(&aBlock);
      v187 = swift_retain();
      v188 = v285;
      static DispatchQoS.unspecified.getter(v187);
      v312 = (uint64_t)_swiftEmptyArrayStorage;
      v189 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v190 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      v191 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      v192 = v283;
      v193 = v190;
      v194 = v286;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v312, v193, v191, v286, v189);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v188, v192, v186);
      _Block_release(v186);

      (*(void (**)(char *, uint64_t))(v282 + 8))(v192, v194);
      (*(void (**)(char *, uint64_t))(v284 + 8))(v188, v287);
      sub_100018C68(v260, type metadata accessor for BeaconProductInfoRecord);
      sub_100018C68(v259, type metadata accessor for AccessoryProductInfo);
      goto LABEL_43;
    }

    v172 = *v96;
    if (v172)
    {
      v173 = (void *)swift_allocObject(&unk_100962C40, 40LL, 7LL);
      v174 = v281;
      v173[2] = v280;
      v173[3] = v174;
      v173[4] = v172;
      v317 = sub_100571BA8;
      v318 = v173;
      aBlock = _NSConcreteStackBlock;
      v314 = 1107296256LL;
      v315 = sub_1001C31E8;
      v316 = &unk_100962C58;
      v175 = _Block_copy(&aBlock);
      swift_errorRetain(v172);
      swift_retain();
      v176 = swift_errorRetain(v172);
      v177 = v285;
      static DispatchQoS.unspecified.getter(v176);
      v312 = (uint64_t)_swiftEmptyArrayStorage;
      v178 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v179 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      v180 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      v181 = v283;
      v182 = v179;
      v183 = v286;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v312, v182, v180, v286, v178);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v177, v181, v175);
      _Block_release(v175);
      swift_errorRelease(v172);

      (*(void (**)(char *, uint64_t))(v282 + 8))(v181, v183);
      (*(void (**)(char *, uint64_t))(v284 + 8))(v177, v287);
      sub_100018C68(v260, type metadata accessor for BeaconProductInfoRecord);
      sub_100018C68(v259, type metadata accessor for AccessoryProductInfo);
      goto LABEL_40;
    }

    sub_100018C68(v260, type metadata accessor for BeaconProductInfoRecord);
    sub_100018C68(v259, type metadata accessor for AccessoryProductInfo);
  }

  dispatch_group_enter(v103);
  sub_10001DC4C((uint64_t)v306, v273, type metadata accessor for KeyAlignmentRecord);
  sub_10001DC4C(v305, v274, type metadata accessor for KeySyncMetadata);
  v195 = v298;
  ((void (*)(char *, char *, uint64_t))v309)(v277, v311, v298);
  v196 = *(unsigned __int8 *)(v264 + 80);
  v197 = (v196 + 32) & ~v196;
  v198 = *(unsigned __int8 *)(v266 + 80);
  v199 = (v265 + v198 + v197) & ~v198;
  v200 = *(unsigned __int8 *)(v307 + 80);
  v201 = (v267 + v200 + v199) & ~v200;
  v303 = v200;
  v202 = v95;
  v203 = (v275 + v201 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  v204 = swift_allocObject(&unk_100962BA0, v203 + 8, v200 | v196 | v198 | 7);
  v205 = v308;
  *(void *)(v204 + swift_weakDestroy(v0 + 16) = v103;
  *(void *)(v204 + 24) = v205;
  v206 = v204 + v197;
  v207 = v195;
  sub_10002218C(v273, v206, type metadata accessor for KeyAlignmentRecord);
  sub_10002218C(v274, v204 + v199, type metadata accessor for KeySyncMetadata);
  ((void (*)(unint64_t, char *, uint64_t))v304)(v204 + v201, v277, v195);
  *(void *)(v204 + v203) = v202;
  v208 = v202;
  v209 = v276;
  v210 = v103;
  *(void *)&v310 = v208;
  swift_retain();
  swift_retain();
  sub_1004FC074(v209, 0, (uint64_t)sub_10056C9A0, v204);
  v211 = swift_release();
  v212 = v295;
  static DispatchTime.now()(v211);
  v213 = v296;
  + infix(_:_:)(v212, 60.0);
  v214 = v297;
  v107(v212, v297);
  v295 = v210;
  v215 = OS_dispatch_group.wait(timeout:)(v213) & 1;
  v107((dispatch_group_s *)v213, v214);
  v216 = static DispatchTimeoutResult.== infix(_:_:)(v215, 1LL);
  if ((v216 & 1) != 0)
  {
    if (qword_10099B7A0 != -1) {
      swift_once(&qword_10099B7A0, sub_1006518D8);
    }
    v217 = type metadata accessor for Logger(0LL);
    sub_10000A720(v217, (uint64_t)qword_100A2B0B0);
    v218 = v258;
    v219 = ((uint64_t (*)(char *, char *, uint64_t))v309)(v258, v311, v207);
    v220 = (os_log_s *)Logger.logObject.getter(v219);
    v221 = static os_log_type_t.error.getter(v220);
    if (os_log_type_enabled(v220, v221))
    {
      v222 = swift_slowAlloc(22LL, -1LL);
      v223 = (void **)swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)v222 = 141558275;
      v312 = 1752392040LL;
      aBlock = v223;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v312, &aBlock, v222 + 4, v222 + 12);
      *(_WORD *)(v222 + 12) = 2081;
      v224 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      v225 = dispatch thunk of CustomStringConvertible.description.getter(v298, v224);
      v312 = sub_1003F11D4(v225, v226, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v312, &aBlock, v222 + 14, v222 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v307 + 8))(v218, v298);
      _os_log_impl( (void *)&_mh_execute_header,  v220,  v221,  "Timed out saving new beacon %{private,mask.hash}s",  (uint8_t *)v222,  0x16u);
      swift_arrayDestroy(v223, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v223, -1LL, -1LL);
      swift_slowDealloc(v222, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v307 + 8))(v218, v207);
    }
  }

  v227 = v303;
  v296 = ~v303;
  v228 = static os_log_type_t.default.getter(v216);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  v229 = qword_100A2B018;
  v230 = sub_100004AEC((uint64_t *)&unk_10099D740);
  v231 = swift_allocObject(v230, 72LL, 7LL);
  *(_OWORD *)(v231 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  v232 = UUID.uuidString.getter(v231);
  v234 = v233;
  *(void *)(v231 + 56) = &type metadata for String;
  *(void *)(v231 + 64) = sub_1000226F4();
  *(void *)(v231 + 32) = v232;
  *(void *)(v231 + 40) = v234;
  os_log(_:dso:log:_:_:)(v228, &_mh_execute_header, v229, "completed beacon creation: %@", 29LL, 2LL, v231);
  swift_bridgeObjectRelease();
  v297 = *(void *)(v308 + 104);
  v235 = v277;
  v236 = v298;
  ((void (*)(char *, char *, uint64_t))v309)(v277, v311, v298);
  v237 = v209;
  v238 = v272;
  sub_10001DC4C(v237, v272, type metadata accessor for OwnedBeaconRecord);
  v239 = (v227 + 40) & v296;
  v240 = *(unsigned __int8 *)(v270 + 80);
  v241 = (v239 + v275 + v240) & ~v240;
  v242 = (void *)swift_allocObject(&unk_100962BC8, v241 + v271, v227 | v240 | 7);
  v243 = v280;
  v242[2] = v310;
  v242[3] = v243;
  v242[4] = v281;
  ((void (*)(char *, char *, uint64_t))v304)((char *)v242 + v239, v235, v236);
  sub_10002218C(v238, (uint64_t)v242 + v241, type metadata accessor for OwnedBeaconRecord);
  v317 = sub_10056CD1C;
  v318 = v242;
  aBlock = _NSConcreteStackBlock;
  v314 = 1107296256LL;
  v315 = sub_1001C31E8;
  v316 = &unk_100962BE0;
  v244 = _Block_copy(&aBlock);
  swift_retain();
  v245 = swift_retain();
  v246 = v285;
  static DispatchQoS.unspecified.getter(v245);
  v312 = (uint64_t)_swiftEmptyArrayStorage;
  v247 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v248 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  v249 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  v250 = v283;
  v251 = v248;
  v252 = v286;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v312, v251, v249, v286, v247);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v246, v250, v244);
  _Block_release(v244);
  (*(void (**)(char *, uint64_t))(v282 + 8))(v250, v252);
  (*(void (**)(char *, uint64_t))(v284 + 8))(v246, v287);
  swift_release();
  v253 = v269;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
  sub_1004E696C(3u);
  sub_1004F1250();
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0LL);
  if (v253) {
    swift_errorRelease(v253);
  }
  v254 = v295;
  type metadata accessor for Transaction(0LL);
  static Transaction.asyncTask(name:block:)( "BeaconStore.canBeLeashedByHostStateChanged",  42LL,  2LL,  &unk_1009B2780,  0LL);
  static Transaction.named<A>(_:with:)( "com.apple.searchpartyd.triggerSiriDeviceNameSync",  48LL,  2LL,  sub_1000220C8,  v308);

  sub_100018C68(v305, type metadata accessor for KeySyncMetadata);
  sub_100018C68((uint64_t)v306, type metadata accessor for KeyAlignmentRecord);
  sub_100018C68((uint64_t)v299, type metadata accessor for BeaconNamingRecord);
  (*(void (**)(char *, uint64_t))(v300 + 8))(v301, v302);
  (*(void (**)(char *, uint64_t))(v307 + 8))(v311, v298);
  return swift_release();
}

        uint64_t v16 = v74;
        uint64_t v11 = v75;
        uint64_t v42 = sub_1004E55A0(v74[*(int *)(v75 + 24)], (uint64_t)v3);
        swift_bridgeObjectRelease();
        if (v42)
        {
          sub_1003493E8((uint64_t)v16, v77);
          uint64_t v3 = v83;
          if ((swift_isUniquelyReferenced_nonNull_native(v83) & 1) == 0)
          {
            sub_100032AA8(0, v3[2] + 1LL, 1);
            uint64_t v3 = v83;
          }

          uint64_t v8 = v79;
          uint64_t v44 = v3[2];
          uint64_t v43 = v3[3];
          a2 = v44 + 1;
          if (v44 >= v43 >> 1)
          {
            sub_100032AA8(v43 > 1, v44 + 1, 1);
            uint64_t v3 = v83;
          }

          v3[2] = a2;
          sub_1003493E8(v77, (uint64_t)v3 + v8 + v44 * v80);
        }

        else
        {
          sub_100303000((uint64_t)v16);
        }

        uint64_t v31 = v73;
        uint64_t v32 = v81;
        if (v81 == v76)
        {
          uint64_t v3 = v83;
          a2 = v65;
          uint64_t v8 = v64;
          a1 = v63;
          break;
        }
      }
    }

    swift_release();
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = _swiftEmptyArrayStorage;
  }

  uint64_t v45 = v70;
  uint64_t v46 = (void *)SPBeaconTaskNamePlaySound;
  objc_autoreleasePoolPop(v67);
  uint64_t v47 = v68;
  sub_1000F0A44((uint64_t)v3, v68);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v47, 1LL, v11) == 1)
  {
    sub_100015794(v47, (uint64_t *)&unk_1009A5990);
    uint64_t v48 = 2LL;
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v71 + 8))(v45, v72);
    uint64_t v49 = v47;
    uint64_t v50 = v66;
    sub_1003493E8(v49, v66);
    uint64_t v51 = *(unsigned __int8 *)(v50 + *(int *)(v11 + 24)) - 23;
    if (v51 > 2) {
      uint64_t v48 = 2LL;
    }
    else {
      uint64_t v48 = qword_100808970[(char)v51];
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v45, v50 + *(int *)(v11 + 20), v72);
    sub_100303000(v50);
  }

  unsigned int v52 = *(void *)((char *)a1 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playCommandError);
  if (v52) {
    uint64_t v48 = 3LL;
  }
  os_log_type_t v53 = v46;
  swift_errorRetain(v52);
  v54.super.isa = Date._bridgeToObjectiveC()().super.isa;
  if (v52)
  {
    uint64_t v55 = (void *)_convertErrorToNSError(_:)(v52);
    swift_errorRelease(v52);
  }

  else
  {
    uint64_t v55 = 0LL;
  }

  uint64_t v56 = [objc_allocWithZone(SPBeaconTaskInformation) initWithName:v53 lastUpdated:v54.super.isa error:v55 state:v48];

  uint64_t v57 = (uint64_t)a1 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playCommandIdentifier;
  swift_beginAccess( (char *)a1 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playCommandIdentifier,  v82,  0LL,  0LL);
  sub_10001581C(v57, v8, &qword_10099D8A0);
  uint64_t v58 = type metadata accessor for UUID(0LL);
  uint64_t v59 = *(void *)(v58 - 8);
  isa = 0LL;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v8, 1LL, v58) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v8, v58);
  }

  [v56 setCommandIdentifier:isa];

  unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v70, v72);
  *(void *)a2 = v56;
  return result;
}

        uint64_t v15 = v72;
        uint64_t v10 = v73;
        uint64_t v41 = sub_1004E55A0(v72[*(int *)(v73 + 24)], (uint64_t)v3);
        swift_bridgeObjectRelease();
        if (v41)
        {
          sub_1003493E8((uint64_t)v15, v76);
          uint64_t v3 = v82;
          uint64_t v42 = swift_isUniquelyReferenced_nonNull_native(v82);
          uint64_t v19 = v74;
          if ((v42 & 1) == 0)
          {
            sub_100032AA8(0, v3[2] + 1LL, 1);
            uint64_t v3 = v82;
          }

          uint64_t v44 = v3[2];
          uint64_t v43 = v3[3];
          a2 = v44 + 1;
          if (v44 >= v43 >> 1)
          {
            sub_100032AA8(v43 > 1, v44 + 1, 1);
            uint64_t v3 = v82;
          }

          v3[2] = a2;
          sub_1003493E8(v76, (uint64_t)v3 + v79 + v44 * v78);
        }

        else
        {
          sub_100303000((uint64_t)v15);
          uint64_t v19 = v74;
        }

        uint64_t v29 = v71;
        uint64_t v30 = v80;
        if (v80 == v75)
        {
          uint64_t v3 = v82;
          a2 = v63;
          uint64_t v7 = v62;
          break;
        }
      }
    }

    swift_release();
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = _swiftEmptyArrayStorage;
  }

  objc_autoreleasePoolPop(v65);
  uint64_t v45 = v66;
  sub_1000F0A44((uint64_t)v3, v66);
  uint64_t v46 = v45;
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48))(v45, 1LL, v10) == 1)
  {
    sub_100015794(v45, (uint64_t *)&unk_1009A5990);
    uint64_t v47 = 2LL;
  }

  else
  {
    uint64_t v48 = v68;
    uint64_t v49 = v69;
    (*(void (**)(char *, uint64_t))(v68 + 8))(v19, v69);
    uint64_t v50 = v64;
    sub_1003493E8(v46, v64);
    uint64_t v47 = 2LL * (*(_BYTE *)(v50 + *(int *)(v10 + 24)) != 26);
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v19, v50 + *(int *)(v10 + 20), v49);
    sub_100303000(v50);
  }

  uint64_t v51 = *(void *)(v70 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_stopCommandError);
  if (v51) {
    uint64_t v47 = 3LL;
  }
  unsigned int v52 = SPBeaconTaskNameStopSound;
  swift_errorRetain(v51);
  v53.super.isa = Date._bridgeToObjectiveC()().super.isa;
  if (v51)
  {
    uint64_t v54 = (void *)_convertErrorToNSError(_:)(v51);
    swift_errorRelease(v51);
  }

  else
  {
    uint64_t v54 = 0LL;
  }

  uint64_t v55 = [objc_allocWithZone(SPBeaconTaskInformation) initWithName:v52 lastUpdated:v53.super.isa error:v54 state:v47];

  uint64_t v56 = v70 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_stopCommandIdentifier;
  swift_beginAccess(v70 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_stopCommandIdentifier, v81, 0LL, 0LL);
  sub_10001581C(v56, (uint64_t)v7, &qword_10099D8A0);
  uint64_t v57 = type metadata accessor for UUID(0LL);
  uint64_t v58 = *(void *)(v57 - 8);
  isa = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v7, 1LL, v57) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v7, v57);
  }

  [v55 setCommandIdentifier:isa];

  unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v19, v69);
  *(void *)a2 = v55;
  return result;
}

  CKRecordKeyValueSetting.subscript.getter( &v25,  0x696A6F6D65LL,  0xE500000000000000LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  uint64_t v20 = (unint64_t *)(v2 + v7[9]);
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  if (!*((void *)&v25 + 1))
  {
    if (!v21) {
      return swift_unknownObjectRelease(v3);
    }
    goto LABEL_27;
  }

  if (!v21)
  {
    swift_bridgeObjectRelease();
    uint64_t v27 = 0LL;
    id v25 = 0u;
    uint64_t v26 = 0u;
LABEL_28:
    swift_bridgeObjectRetain(v21);
    CKRecordKeyValueSetting.subscript.setter(&v25, 0x696A6F6D65LL, 0xE500000000000000LL, ObjectType);
    return swift_unknownObjectRelease(v3);
  }

  if (v25 == __PAIR128__(v21, v22))
  {
    swift_unknownObjectRelease(v3);
    return swift_bridgeObjectRelease();
  }

  uint64_t v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, *((void *)&v25 + 1), *v20, v20[1], 0LL);
  swift_bridgeObjectRelease();
  if ((v24 & 1) == 0)
  {
LABEL_27:
    *((void *)&v26 + 1) = &type metadata for String;
    uint64_t v27 = &protocol witness table for String;
    *(void *)&id v25 = v22;
    *((void *)&v25 + 1) = v21;
    goto LABEL_28;
  }

  return swift_unknownObjectRelease(v3);
}

  __break(1u);
}

    id v66 = sub_100004AEC(&qword_1009A6DD0);
    memcpy((void *)v51, (const void *)v52, *(void *)(*(void *)(v66 - 8) + 64LL));
    goto LABEL_43;
  }

  if (v56)
  {
    sub_100018C68(v51, type metadata accessor for AccessoryInfoResponseContent.Configuration);
    goto LABEL_19;
  }

  v189 = v35;
  *(void *)uint64_t v51 = *(void *)v52;
  uint64_t v67 = *(void *)(v52 + 8);
  *(void *)(v51 + 8) = v67;
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRelease();
  *(void *)(v51 + swift_weakDestroy(v0 + 16) = *(void *)(v52 + 16);
  uint64_t v68 = *(void *)(v52 + 24);
  *(void *)(v51 + 24) = v68;
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRelease();
  *(void *)(v51 + 32) = *(void *)(v52 + 32);
  uint64_t v69 = *(void *)(v52 + 40);
  *(void *)(v51 + 40) = v69;
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRelease();
  *(_WORD *)(v51 + 48) = *(_WORD *)(v52 + 48);
  *(void *)(v51 + 56) = *(void *)(v52 + 56);
  unint64_t v70 = *(void *)(v52 + 64);
  *(_BYTE *)(v51 + 72) = *(_BYTE *)(v52 + 72);
  *(void *)(v51 + 64) = v70;
  id v71 = v53[10];
  uint64_t v72 = (const void *)(v52 + v71);
  __dsta = (void *)(v51 + v71);
  uint64_t v73 = ((uint64_t (*)(void))v191)();
  uint64_t v74 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v191)(v72, 1LL, v34);
  if (v73)
  {
    if (!v74)
    {
      (*(void (**)(void *, const void *, uint64_t))(v189 + 16))(__dsta, v72, v34);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v189 + 56))(__dsta, 0LL, 1LL, v34);
      goto LABEL_35;
    }

    uint64_t v75 = *(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A34D0) - 8) + 64LL);
    uint64_t v76 = __dsta;
  }

  else
  {
    if (!v74)
    {
      (*(void (**)(void *, const void *, uint64_t))(v189 + 24))(__dsta, v72, v34);
      goto LABEL_35;
    }

    (*(void (**)(void *, uint64_t))(v189 + 8))(__dsta, v34);
    uint64_t v75 = *(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A34D0) - 8) + 64LL);
    uint64_t v76 = __dsta;
  }

  memcpy(v76, v72, v75);
LABEL_35:
  v107 = v53[11];
  v108 = (const void *)(v52 + v107);
  __dstb = (void *)(v51 + v107);
  v109 = ((uint64_t (*)(void))v191)();
  v110 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v191)(v108, 1LL, v34);
  if (v109)
  {
    if (v110)
    {
      v111 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(__dstb, v108, *(void *)(*(void *)(v111 - 8) + 64LL));
      uint64_t v35 = v189;
    }

    else
    {
      uint64_t v35 = v189;
      (*(void (**)(void *, const void *, uint64_t))(v189 + 16))(__dstb, v108, v34);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v189 + 56))(__dstb, 0LL, 1LL, v34);
    }
  }

  else
  {
    uint64_t v35 = v189;
    if (v110)
    {
      (*(void (**)(void *, uint64_t))(v189 + 8))(__dstb, v34);
      v112 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(__dstb, v108, *(void *)(*(void *)(v112 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v189 + 24))(__dstb, v108, v34);
    }
  }

  v113 = v53[12];
  v114 = v51 + v113;
  v115 = (uint64_t *)(v52 + v113);
  v116 = *v115;
  *(_BYTE *)(v114 + 8) = *((_BYTE *)v115 + 8);
  *(void *)v114 = v116;
  v117 = v53[13];
  v118 = (void *)(v51 + v117);
  v119 = (void *)(v52 + v117);
  *v118 = *v119;
  v120 = v119[1];
  v118[1] = v120;
  swift_bridgeObjectRetain(v120);
  swift_bridgeObjectRelease();
  v121 = v53[14];
  v122 = *(void *)(v52 + v121);
  *(void *)(v51 + v121) = v122;
  swift_bridgeObjectRetain(v122);
  swift_bridgeObjectRelease();
  v123 = v53[15];
  v124 = (void *)(v51 + v123);
  v125 = (void *)(v52 + v123);
  *v124 = *v125;
  v126 = v125[1];
  v124[1] = v126;
  swift_bridgeObjectRetain(v126);
  swift_bridgeObjectRelease();
  v127 = v53[16];
  v128 = *(void *)(v52 + v127);
  *(void *)(v51 + v127) = v128;
  swift_bridgeObjectRetain(v128);
  swift_bridgeObjectRelease();
  v129 = v53[17];
  v130 = v51 + v129;
  v131 = (__int128 *)(v52 + v129);
  v132 = *v131;
  *(_BYTE *)(v130 + swift_weakDestroy(v0 + 16) = *((_BYTE *)v131 + 16);
  *(_OWORD *)v130 = v132;
  v133 = v53[18];
  v134 = v51 + v133;
  v135 = (__int128 *)(v52 + v133);
  v136 = *v135;
  *(_BYTE *)(v134 + swift_weakDestroy(v0 + 16) = *((_BYTE *)v135 + 16);
  *(_OWORD *)v134 = v136;
LABEL_43:
  *(_DWORD *)(a1 + a3[21]) = *(_DWORD *)((char *)a2 + a3[21]);
  v137 = a3[22];
  v138 = *(uint64_t *)((char *)a2 + v137);
  *(void *)(a1 + v137) = v138;
  swift_bridgeObjectRetain(v138);
  swift_bridgeObjectRelease();
  v139 = a3[23];
  v140 = (uint64_t *)(a1 + v139);
  v141 = (uint64_t *)((char *)a2 + v139);
  v142 = *(uint64_t *)((char *)a2 + v139 + 8);
  if (*(void *)(a1 + v139 + 8) >> 60 == 15LL)
  {
    if (v142 >> 60 != 15)
    {
      v143 = *v141;
      sub_10001736C(v143, v142);
      *v140 = v143;
      v140[1] = v142;
      goto LABEL_50;
    }

    goto LABEL_48;
  }

  if (v142 >> 60 == 15)
  {
    sub_100041D4C((uint64_t)v140);
LABEL_48:
    *(_OWORD *)v140 = *(_OWORD *)v141;
    goto LABEL_50;
  }

  v144 = *v141;
  sub_10001736C(v144, v142);
  v145 = *v140;
  v146 = v140[1];
  *v140 = v144;
  v140[1] = v142;
  sub_100016F9C(v145, v146);
LABEL_50:
  v147 = a3[24];
  v148 = (uint64_t *)(a1 + v147);
  v149 = (uint64_t *)((char *)a2 + v147);
  v150 = *(uint64_t *)((char *)a2 + v147 + 8);
  if (*(void *)(a1 + v147 + 8) >> 60 != 15LL)
  {
    if (v150 >> 60 != 15)
    {
      v152 = *v149;
      sub_10001736C(v152, v150);
      v153 = *v148;
      v154 = v148[1];
      *v148 = v152;
      v148[1] = v150;
      sub_100016F9C(v153, v154);
      goto LABEL_57;
    }

    sub_100041D4C((uint64_t)v148);
    goto LABEL_55;
  }

  if (v150 >> 60 == 15)
  {
LABEL_55:
    *(_OWORD *)v148 = *(_OWORD *)v149;
    goto LABEL_57;
  }

  v151 = *v149;
  sub_10001736C(v151, v150);
  *v148 = v151;
  v148[1] = v150;
LABEL_57:
  v155 = *(void (**)(uint64_t, char *, uint64_t))(v35 + 24);
  v155(a1 + a3[25], (char *)a2 + a3[25], v34);
  v155(a1 + a3[26], (char *)a2 + a3[26], v34);
  v155(a1 + a3[27], (char *)a2 + a3[27], v34);
  v155(a1 + a3[28], (char *)a2 + a3[28], v34);
  v155(a1 + a3[29], (char *)a2 + a3[29], v34);
  v155(a1 + a3[30], (char *)a2 + a3[30], v34);
  v156 = a3[31];
  v157 = (void *)(a1 + v156);
  v158 = (uint64_t *)((char *)a2 + v156);
  *v157 = *v158;
  v159 = v158[1];
  v157[1] = v159;
  swift_bridgeObjectRetain(v159);
  swift_bridgeObjectRelease();
  v160 = a3[32];
  v161 = *(uint64_t *)((char *)a2 + v160);
  *(void *)(a1 + v160) = v161;
  swift_bridgeObjectRetain(v161);
  swift_bridgeObjectRelease();
  v162 = a3[33];
  v163 = (void *)(a1 + v162);
  v164 = (uint64_t *)((char *)a2 + v162);
  *v163 = *v164;
  v165 = v164[1];
  v163[1] = v165;
  swift_bridgeObjectRetain(v165);
  swift_bridgeObjectRelease();
  v166 = a3[34];
  v167 = *(uint64_t *)((char *)a2 + v166);
  *(void *)(a1 + v166) = v167;
  swift_bridgeObjectRetain(v167);
  swift_bridgeObjectRelease();
  v168 = a3[35];
  v169 = a1 + v168;
  v170 = (__int128 *)((char *)a2 + v168);
  v171 = *v170;
  *(_BYTE *)(v169 + swift_weakDestroy(v0 + 16) = *((_BYTE *)v170 + 16);
  *(_OWORD *)v169 = v171;
  v172 = a3[36];
  v173 = a1 + v172;
  v174 = (__int128 *)((char *)a2 + v172);
  v175 = *v174;
  *(_BYTE *)(v173 + swift_weakDestroy(v0 + 16) = *((_BYTE *)v174 + 16);
  *(_OWORD *)v173 = v175;
  v155(a1 + a3[37], (char *)a2 + a3[37], v34);
  v155(a1 + a3[38], (char *)a2 + a3[38], v34);
  v155(a1 + a3[39], (char *)a2 + a3[39], v34);
  v155(a1 + a3[40], (char *)a2 + a3[40], v34);
  v155(a1 + a3[41], (char *)a2 + a3[41], v34);
  v155(a1 + a3[42], (char *)a2 + a3[42], v34);
  *(_BYTE *)(a1 + a3[43]) = *((_BYTE *)a2 + a3[43]);
  *(_BYTE *)(a1 + a3[44]) = *((_BYTE *)a2 + a3[44]);
  *(_BYTE *)(a1 + a3[45]) = *((_BYTE *)a2 + a3[45]);
  v176 = a3[46];
  v177 = (void *)(a1 + v176);
  v178 = (uint64_t *)((char *)a2 + v176);
  *v177 = *v178;
  v179 = v178[1];
  v177[1] = v179;
  swift_bridgeObjectRetain(v179);
  swift_bridgeObjectRelease();
  v180 = a3[47];
  v181 = (void *)(a1 + v180);
  v182 = (uint64_t *)((char *)a2 + v180);
  *v181 = *v182;
  v183 = v182[1];
  v181[1] = v183;
  swift_bridgeObjectRetain(v183);
  swift_bridgeObjectRelease();
  return a1;
}

    uint64_t v68 = sub_100004AEC(&qword_1009A6DD0);
    memcpy((void *)v56, (const void *)v57, *(void *)(*(void *)(v68 - 8) + 64LL));
    uint64_t v69 = v165;
    goto LABEL_43;
  }

  if (v61)
  {
    sub_100018C68(v56, type metadata accessor for AccessoryInfoResponseContent.Configuration);
    goto LABEL_19;
  }

  unint64_t v70 = *(void *)(v57 + 8);
  *(void *)uint64_t v56 = *(void *)v57;
  *(void *)(v56 + 8) = v70;
  swift_bridgeObjectRelease();
  id v71 = *(void *)(v57 + 24);
  *(void *)(v56 + swift_weakDestroy(v0 + 16) = *(void *)(v57 + 16);
  *(void *)(v56 + 24) = v71;
  swift_bridgeObjectRelease();
  uint64_t v72 = *(void *)(v57 + 40);
  *(void *)(v56 + 32) = *(void *)(v57 + 32);
  *(void *)(v56 + 40) = v72;
  swift_bridgeObjectRelease();
  *(_WORD *)(v56 + 48) = *(_WORD *)(v57 + 48);
  uint64_t v73 = *(void *)(v57 + 64);
  *(void *)(v56 + 56) = *(void *)(v57 + 56);
  *(void *)(v56 + 64) = v73;
  *(_BYTE *)(v56 + 72) = *(_BYTE *)(v57 + 72);
  uint64_t v74 = v58[10];
  uint64_t v75 = (const void *)(v57 + v74);
  v162 = (void *)(v56 + v74);
  uint64_t v76 = v40();
  uint64_t v77 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v40)(v75, 1LL, v38);
  if (v76)
  {
    if (!v77)
    {
      (*(void (**)(void *, const void *, uint64_t))(v165 + 32))(v162, v75, v38);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v165 + 56))(v162, 0LL, 1LL, v38);
      goto LABEL_35;
    }

    uint64_t v78 = *(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A34D0) - 8) + 64LL);
    uint64_t v79 = v162;
  }

  else
  {
    if (!v77)
    {
      (*(void (**)(void *, const void *, uint64_t))(v165 + 40))(v162, v75, v38);
      goto LABEL_35;
    }

    (*(void (**)(void *, uint64_t))(v165 + 8))(v162, v38);
    uint64_t v78 = *(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A34D0) - 8) + 64LL);
    uint64_t v79 = v162;
  }

  memcpy(v79, v75, v78);
LABEL_35:
  v94 = v58[11];
  v95 = (const void *)(v57 + v94);
  v163 = (void *)(v56 + v94);
  v96 = v40();
  v97 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v40)(v95, 1LL, v38);
  if (v96)
  {
    if (v97)
    {
      v98 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(v163, v95, *(void *)(*(void *)(v98 - 8) + 64LL));
      uint64_t v69 = v165;
    }

    else
    {
      uint64_t v69 = v165;
      (*(void (**)(void *, const void *, uint64_t))(v165 + 32))(v163, v95, v38);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v165 + 56))(v163, 0LL, 1LL, v38);
    }
  }

  else
  {
    uint64_t v69 = v165;
    if (v97)
    {
      (*(void (**)(void *, uint64_t))(v165 + 8))(v163, v38);
      v99 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(v163, v95, *(void *)(*(void *)(v99 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v165 + 40))(v163, v95, v38);
    }
  }

  v100 = v58[12];
  v101 = v56 + v100;
  v102 = v57 + v100;
  *(void *)v101 = *(void *)v102;
  *(_BYTE *)(v101 + 8) = *(_BYTE *)(v102 + 8);
  v103 = v58[13];
  v104 = (void *)(v56 + v103);
  v105 = (uint64_t *)(v57 + v103);
  v107 = *v105;
  v106 = v105[1];
  *v104 = v107;
  v104[1] = v106;
  swift_bridgeObjectRelease();
  *(void *)(v56 + v58[14]) = *(void *)(v57 + v58[14]);
  swift_bridgeObjectRelease();
  v108 = v58[15];
  v109 = (void *)(v56 + v108);
  v110 = (uint64_t *)(v57 + v108);
  v112 = *v110;
  v111 = v110[1];
  *v109 = v112;
  v109[1] = v111;
  swift_bridgeObjectRelease();
  *(void *)(v56 + v58[16]) = *(void *)(v57 + v58[16]);
  swift_bridgeObjectRelease();
  v113 = v58[17];
  v114 = v56 + v113;
  v115 = v57 + v113;
  *(_OWORD *)v114 = *(_OWORD *)v115;
  *(_BYTE *)(v114 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(v115 + 16);
  v116 = v58[18];
  v117 = v56 + v116;
  v118 = v57 + v116;
  *(_BYTE *)(v117 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(v118 + 16);
  *(_OWORD *)v117 = *(_OWORD *)v118;
LABEL_43:
  v119 = a3[22];
  *(_DWORD *)(a1 + a3[21]) = *(_DWORD *)(a2 + a3[21]);
  *(void *)(a1 + v119) = *(void *)(a2 + v119);
  swift_bridgeObjectRelease();
  v120 = a3[23];
  v121 = a1 + v120;
  v122 = a2 + v120;
  v123 = *(void *)(a1 + v120 + 8);
  if (v123 >> 60 == 15)
  {
LABEL_46:
    *(_OWORD *)v121 = *(_OWORD *)v122;
    goto LABEL_48;
  }

  v124 = *(void *)(v122 + 8);
  if (v124 >> 60 == 15)
  {
    sub_100041D4C(v121);
    goto LABEL_46;
  }

  v125 = *(void *)v121;
  *(void *)v121 = *(void *)v122;
  *(void *)(v121 + 8) = v124;
  sub_100016F9C(v125, v123);
LABEL_48:
  v126 = a3[24];
  v127 = (uint64_t *)(a1 + v126);
  v128 = (uint64_t *)(a2 + v126);
  v129 = *(void *)(a1 + v126 + 8);
  if (v129 >> 60 != 15)
  {
    v130 = v128[1];
    if (v130 >> 60 != 15)
    {
      v131 = *v127;
      *v127 = *v128;
      v127[1] = v130;
      sub_100016F9C(v131, v129);
      goto LABEL_53;
    }

    sub_100041D4C((uint64_t)v127);
  }

  *(_OWORD *)v127 = *(_OWORD *)v128;
LABEL_53:
  v132 = *(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 40);
  v132(a1 + a3[25], a2 + a3[25], v38);
  v132(a1 + a3[26], a2 + a3[26], v38);
  v132(a1 + a3[27], a2 + a3[27], v38);
  v132(a1 + a3[28], a2 + a3[28], v38);
  v132(a1 + a3[29], a2 + a3[29], v38);
  v132(a1 + a3[30], a2 + a3[30], v38);
  v133 = a3[31];
  v134 = (void *)(a1 + v133);
  v135 = (uint64_t *)(a2 + v133);
  v137 = *v135;
  v136 = v135[1];
  *v134 = v137;
  v134[1] = v136;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[32]) = *(void *)(a2 + a3[32]);
  swift_bridgeObjectRelease();
  v138 = a3[33];
  v139 = (void *)(a1 + v138);
  v140 = (uint64_t *)(a2 + v138);
  v142 = *v140;
  v141 = v140[1];
  *v139 = v142;
  v139[1] = v141;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[34]) = *(void *)(a2 + a3[34]);
  swift_bridgeObjectRelease();
  v143 = a3[35];
  v144 = a3[36];
  v145 = a1 + v143;
  v146 = (__int128 *)(a2 + v143);
  v147 = *v146;
  *(_BYTE *)(v145 + swift_weakDestroy(v0 + 16) = *((_BYTE *)v146 + 16);
  *(_OWORD *)v145 = v147;
  v148 = a1 + v144;
  v149 = a2 + v144;
  *(_OWORD *)v148 = *(_OWORD *)v149;
  *(_BYTE *)(v148 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(v149 + 16);
  v132(a1 + a3[37], a2 + a3[37], v38);
  v132(a1 + a3[38], a2 + a3[38], v38);
  v132(a1 + a3[39], a2 + a3[39], v38);
  v132(a1 + a3[40], a2 + a3[40], v38);
  v132(a1 + a3[41], a2 + a3[41], v38);
  v132(a1 + a3[42], a2 + a3[42], v38);
  v150 = a3[44];
  *(_BYTE *)(a1 + a3[43]) = *(_BYTE *)(a2 + a3[43]);
  *(_BYTE *)(a1 + v150) = *(_BYTE *)(a2 + v150);
  v151 = a3[46];
  *(_BYTE *)(a1 + a3[45]) = *(_BYTE *)(a2 + a3[45]);
  v152 = (void *)(a1 + v151);
  v153 = (uint64_t *)(a2 + v151);
  v155 = *v153;
  v154 = v153[1];
  *v152 = v155;
  v152[1] = v154;
  swift_bridgeObjectRelease();
  v156 = a3[47];
  v157 = (void *)(a1 + v156);
  v158 = (uint64_t *)(a2 + v156);
  v160 = *v158;
  v159 = v158[1];
  *v157 = v160;
  v157[1] = v159;
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1001C1808()
{
  unint64_t result = qword_1009A27E0;
  if (!qword_1009A27E0)
  {
    uint64_t v1 = type metadata accessor for BinaryDecodingError(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for BinaryDecodingError, v1);
    atomic_store(result, (unint64_t *)&qword_1009A27E0);
  }

  return result;
}

uint64_t sub_1001C1850@<X0>(uint64_t a1@<X8>)
{
  return sub_1001C1878(a1);
}

uint64_t sub_1001C1864@<X0>(uint64_t a1@<X8>)
{
  return sub_1001C1878(a1);
}

uint64_t sub_1001C1878@<X0>(uint64_t a1@<X8>)
{
  id v2 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 valueForKey:v3];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v9, v4);
    swift_unknownObjectRelease(v4);
  }

  else
  {
    memset(v9, 0, sizeof(v9));
  }

  sub_100015750((uint64_t)v9, (uint64_t)v10, &qword_10099E200);
  if (v11)
  {
    uint64_t v5 = type metadata accessor for Date(0LL);
    int v6 = swift_dynamicCast(a1, v10, (char *)&type metadata for Any + 8, v5, 6LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))( a1,  v6 ^ 1u,  1LL,  v5);
  }

  else
  {
    sub_100015794((uint64_t)v10, &qword_10099E200);
    uint64_t v8 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))( a1,  1LL,  1LL,  v8);
  }

void *sub_1001C19C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = v3;
  v3[2] = 0LL;
  uint64_t v8 = sub_100004AEC(&qword_1009A5320);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  uint64_t v9 = PassthroughSubject.init()();
  v3[4] = 0LL;
  v3[5] = 0LL;
  v3[3] = v9;
  if (qword_10099BA48 != -1) {
    swift_once(&qword_10099BA48, sub_1007C7B1C);
  }
  uint64_t v10 = *(void *)(qword_100A2B838 + 48);
  uint64_t v11 = swift_retain();
  AnyCurrentValuePublisher.value.getter(&v27, v11);
  swift_release(v10);
  *((_BYTE *)v4 + 48) = v27;
  sub_100015750(a1, (uint64_t)(v4 + 9), &qword_1009AECF0);
  v4[7] = a2;
  v4[8] = a3;
  uint64_t v27 = v4[3];
  uint64_t v12 = swift_allocObject(&unk_100946CA0, 24LL, 7LL);
  swift_weakInit(v12 + 16, v4);
  uint64_t v13 = sub_1000372EC( &qword_1009A5328,  &qword_1009A5320,  (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  swift_retain();
  swift_retain();
  uint64_t v14 = Publisher<>.sink(receiveValue:)(sub_1001C2A80, v12, v8, v13);
  swift_release(v12);
  swift_release(v27);
  uint64_t v15 = v4[4];
  v4[4] = v14;
  swift_release(v15);
  uint64_t v16 = *(void *)(qword_100A2B838 + 48);
  uint64_t v17 = swift_retain();
  uint64_t v18 = AnyCurrentValuePublisher.publisher.getter(v17);
  swift_release(v16);
  uint64_t v27 = v18;
  uint64_t v19 = swift_allocObject(&unk_100946CA0, 24LL, 7LL);
  swift_weakInit(v19 + 16, v4);
  uint64_t v20 = sub_100004AEC(&qword_1009A39E0);
  uint64_t v21 = sub_1000372EC( &qword_1009A39E8,  &qword_1009A39E0,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v22 = Publisher<>.sink(receiveValue:)(sub_1001C2A88, v19, v20, v21);
  swift_release(v19);
  swift_release(v27);
  uint64_t v23 = v4[5];
  v4[5] = v22;
  swift_release(v23);
  uint64_t v24 = sub_1001C2800();
  LOBYTE(v19) = v25;
  swift_release(a3);
  sub_10006A58C(v24, v19 & 1);
  return v4;
}

uint64_t sub_1001C1C18(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v3);
  uint64_t v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a2 += 16LL;
  swift_beginAccess(a2, v10, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v7 = result;
    static Date.trustedNow.getter((uint64_t)v5);
    uint64_t v8 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v5, 0LL, 1LL, v8);
    sub_1001C2A90((uint64_t)v5);
    return swift_release(v7);
  }

  return result;
}

uint64_t sub_1001C1CE8(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v4);
  int v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  int v7 = *a1;
  a2 += 16LL;
  swift_beginAccess(a2, v13, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v9 = result;
    if (v7 != *(unsigned __int8 *)(result + 48))
    {
      *(_BYTE *)(result + 48) = v7;
      uint64_t v10 = type metadata accessor for Date(0LL);
      uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
      v11(v6, 1LL, 1LL, v10);
      sub_1001C2A90((uint64_t)v6);
      v11(v6, 1LL, 1LL, v10);
      sub_1001C2A90((uint64_t)v6);
    }

    return swift_release(v9);
  }

  return result;
}

uint64_t sub_1001C1E00()
{
  uint64_t v0 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v1 = __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v20 - v4;
  uint64_t v6 = type metadata accessor for Date(0LL);
  int v7 = *(void **)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v20 - v11;
  sub_1001C1850((uint64_t)v5);
  uint64_t v13 = (uint64_t (*)(char *, uint64_t, uint64_t))v7[6];
  if (v13(v5, 1LL, v6) == 1)
  {
    sub_100015794((uint64_t)v5, (uint64_t *)&unk_10099D720);
    char v14 = 0;
  }

  else
  {
    uint64_t v15 = (void (*)(char *, char *, uint64_t))v7[4];
    v15(v12, v5, v6);
    sub_1001C1864((uint64_t)v3);
    uint64_t v16 = v13(v3, 1LL, v6);
    if ((_DWORD)v16 == 1)
    {
      static Date.distantPast.getter(v16);
      sub_100015794((uint64_t)v3, (uint64_t *)&unk_10099D720);
    }

    else
    {
      v15(v10, v3, v6);
    }

    uint64_t v17 = sub_100007864( &qword_1009A1280,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    char v14 = dispatch thunk of static Comparable.< infix(_:_:)(v12, v10, v6, v17) ^ 1;
    uint64_t v18 = (void (*)(char *, uint64_t))v7[1];
    v18(v10, v6);
    v18(v12, v6);
  }

  return v14 & 1;
}

uint64_t sub_1001C1FCC()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v50 = *(void *)(v0 - 8);
  uint64_t v51 = v0;
  __chkstk_darwin(v0);
  uint64_t v49 = (char *)&v45 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  *(void *)&__int128 v53 = type metadata accessor for DispatchTime(0LL);
  uint64_t v10 = *(void *)(v53 - 8);
  uint64_t v11 = __chkstk_darwin(v53);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v45 - v14;
  uint64_t v16 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v47 = *(void *)(v16 - 8);
  uint64_t v48 = v16;
  __chkstk_darwin(v16);
  unsigned int v52 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  uint64_t aBlock = 0x7365547265646E75LL;
  unint64_t v57 = 0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v55, &aBlock, sub_10000A71C, 0LL, &type metadata for Bool);
  uint64_t v18 = swift_bridgeObjectRelease();
  if ((v55 & 1) != 0)
  {
    static DispatchTime.now()(v18);
    *uint64_t v9 = 1LL;
    (*(void (**)(void *, void, uint64_t))(v7 + 104))( v9,  enum case for DispatchTimeInterval.seconds(_:),  v6);
    + infix(_:_:)(v13, v9);
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v46 = *(void (**)(char *, void))(v10 + 8);
    v46(v13, v53);
    sub_100004AB0();
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchQoS.QoSClass.default(_:), v2);
    uint64_t v19 = (void *)static OS_dispatch_queue.global(qos:)(v5);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v60 = sub_1001C2C68;
    uint64_t v61 = v54;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    unint64_t v57 = 1107296256LL;
    uint64_t v58 = sub_1001C31E8;
    uint64_t v59 = &unk_100946CE0;
    uint64_t v20 = _Block_copy(&aBlock);
    uint64_t v21 = swift_retain();
    uint64_t v22 = v52;
    static DispatchQoS.unspecified.getter(v21);
    uint64_t v55 = _swiftEmptyArrayStorage;
    uint64_t v23 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v24 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v25 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v26 = v49;
    uint64_t v27 = v51;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v55, v24, v25, v51, v23);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v15, v22, v26, v20);
    _Block_release(v20);

    (*(void (**)(char *, uint64_t))(v50 + 8))(v26, v27);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v22, v48);
    v46(v15, v53);
    return swift_release(v61);
  }

  else
  {
    uint64_t v29 = v54;
    uint64_t v30 = *(void *)(v54 + 72);
    if (v30 == 2LL)
    {
      uint64_t v31 = static os_log_type_t.default.getter(v18);
      if (qword_10099B710 != -1) {
        swift_once(&qword_10099B710, sub_1006511CC);
      }
      return os_log(_:dso:log:_:_:)( v31,  &_mh_execute_header,  qword_100A2B020,  "Not scheduling coalesced cloudkit activity - no criteria.",  57LL,  2LL,  _swiftEmptyArrayStorage);
    }

    else
    {
      uint64_t v33 = *(void *)(v54 + 96);
      uint64_t v32 = *(void *)(v54 + 104);
      char v34 = v30 & 1;
      unsigned int v35 = (v30 >> 8) & 1;
      __int128 v53 = *(_OWORD *)(v54 + 80);
      uint64_t v36 = (uint64_t)v52;
      static DispatchQoS.background.getter(v18);
      uint64_t v37 = swift_allocObject(&unk_100946CA0, 24LL, 7LL);
      swift_weakInit(v37 + 16, v29);
      uint64_t v38 = swift_allocObject(&unk_100946CC8, 64LL, 7LL);
      *(void *)(v38 + swift_weakDestroy(v0 + 16) = v37;
      *(_BYTE *)(v38 + 24) = v34;
      *(_BYTE *)(v38 + 25) = v35;
      *(_OWORD *)(v38 + 32) = v53;
      *(void *)(v38 + 48) = v33;
      *(void *)(v38 + 56) = v32;
      uint64_t v39 = swift_allocObject(&unk_100946CA0, 24LL, 7LL);
      swift_weakInit(v39 + 16, v29);
      uint64_t v40 = type metadata accessor for XPCActivity();
      swift_allocObject(v40, 112LL, 7LL);
      uint64_t v41 = sub_10045AD78( 0xD00000000000002FLL,  (void *)0x80000001008583F0LL,  v36,  (uint64_t)sub_1001C2C54,  v38,  (uint64_t)sub_1001C2C60,  v39);
      swift_release(v38);
      swift_release(v39);
      uint64_t v42 = *(void *)(v29 + 16);
      *(void *)(v29 + swift_weakDestroy(v0 + 16) = v41;
      uint64_t v43 = swift_release(v42);
      uint64_t v44 = static os_log_type_t.default.getter(v43);
      if (qword_10099B710 != -1) {
        swift_once(&qword_10099B710, sub_1006511CC);
      }
      return os_log(_:dso:log:_:_:)( v44,  &_mh_execute_header,  qword_100A2B020,  "Scheduled coalesced cloudkit activity.",  38LL,  2LL,  _swiftEmptyArrayStorage);
    }
  }

uint64_t sub_1001C2584()
{
  return static Transaction.named<A>(_:with:)("CloudKitCoalescer.Immediate-Test", 32LL, 2LL, sub_1001C2C88);
}

uint64_t sub_1001C25EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t *a4@<X8>)
{
  char v6 = *a3;
  char v7 = a3[1];
  uint64_t v8 = *((void *)a3 + 1);
  uint64_t v21 = *((void *)a3 + 3);
  uint64_t v22 = *((void *)a3 + 2);
  uint64_t v20 = *((void *)a3 + 4);
  sub_100015750(a1, (uint64_t)v24, &qword_1009AECF0);
  uint64_t v9 = v24[0];
  uint64_t v10 = v24[1];
  uint64_t v11 = v24[2];
  uint64_t v12 = v24[3];
  a2 += 16LL;
  uint64_t v13 = v24[4];
  swift_beginAccess(a2, v23, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v15 = result;
    uint64_t v19 = v8;
    uint64_t v16 = v6 & 1;
    uint64_t v17 = v7 & 1;
    char v18 = sub_1001C1E00();
    uint64_t result = swift_release(v15);
    if ((v18 & 1) != 0)
    {
      uint64_t v9 = v16 | (v17 << 8);
      uint64_t v10 = v19;
      uint64_t v11 = v22;
      uint64_t v12 = v21;
      uint64_t v13 = v20;
    }
  }

  *a4 = v9;
  a4[1] = v10;
  a4[2] = v11;
  a4[3] = v12;
  a4[4] = v13;
  return result;
}

uint64_t sub_1001C26E8(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6 = a4 + 16;
  swift_beginAccess(a4 + 16, v14, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v6);
  if (result)
  {
    uint64_t v8 = result;
    Transaction.capture()();
    if (a3 == 3)
    {
      sub_100458824();
    }

    else if (a3 == 2)
    {
      uint64_t v10 = static os_log_type_t.default.getter(v9);
      if (qword_10099B710 != -1)
      {
        uint64_t v12 = v10;
        swift_once(&qword_10099B710, sub_1006511CC);
        uint64_t v10 = v12;
      }

      os_log(_:dso:log:_:_:)( v10,  &_mh_execute_header,  qword_100A2B020,  "CloudKitCoalescer task allowed to execute now - XPCActivity.",  60LL,  2LL,  _swiftEmptyArrayStorage);
      uint64_t v11 = *(void *)(v8 + 24);
      uint64_t v13 = a2;
      swift_retain();
      PassthroughSubject.send(_:)(&v13);
      swift_release(v11);
      sub_100458840();
    }

    return swift_release(v8);
  }

  return result;
}

uint64_t sub_1001C2800()
{
  uint64_t v1 = sub_1001C1E00();
  if ((v1 & 1) != 0)
  {
    if (((*(uint64_t (**)(void))(v0 + 56))() & 1) != 0)
    {
      type metadata accessor for Transaction(0LL);
      static Transaction.named<A>(_:with:)("CloudKitCoalescer.Immediate", 27LL, 2LL, sub_1001C2C0C);
      return 0LL;
    }

    else
    {
      sub_1001C1FCC();
      return 1LL;
    }
  }

  else
  {
    uint64_t v3 = static os_log_type_t.default.getter(v1);
    if (qword_10099B710 != -1) {
      swift_once(&qword_10099B710, sub_1006511CC);
    }
    os_log(_:dso:log:_:_:)( v3,  &_mh_execute_header,  qword_100A2B020,  "CloudKitCoalescer no need to run - last execution is after last request.",  72LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v4 = sub_1001C2BC8();
    return swift_allocError(&type metadata for CloudKitCoalescer.CloudKitCoalescerError, v4, 0LL, 0LL);
  }

uint64_t sub_1001C291C(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t v8 = static os_log_type_t.default.getter(a1);
  if (qword_10099B710 != -1) {
    swift_once(&qword_10099B710, sub_1006511CC);
  }
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, qword_100A2B020, a3, a4, 2LL, _swiftEmptyArrayStorage);
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v11 = a1;
  swift_retain();
  PassthroughSubject.send(_:)(&v11);
  return swift_release(v9);
}

uint64_t sub_1001C29E4()
{
  return swift_deallocClassInstance(v0, 112LL, 7LL);
}

uint64_t type metadata accessor for CloudKitCoalescer()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd17CloudKitCoalescer);
}

uint64_t sub_1001C2A48(uint64_t a1)
{
  return sub_1001C2A90(a1);
}

uint64_t sub_1001C2A5C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001C2A80(uint64_t a1)
{
  return sub_1001C1C18(a1, v1);
}

uint64_t sub_1001C2A88(unsigned __int8 *a1)
{
  return sub_1001C1CE8(a1, v1);
}

uint64_t sub_1001C2A90(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v2);
  unint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v5 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  sub_10000A824(a1, (uint64_t)v4);
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  Class isa = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1LL, v6) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
  }

  NSString v9 = String._bridgeToObjectiveC()();
  [v5 setObject:isa forKey:v9];

  swift_unknownObjectRelease(isa);
  return sub_100015794(a1, (uint64_t *)&unk_10099D720);
}

unint64_t sub_1001C2BC8()
{
  unint64_t result = qword_1009A5330;
  if (!qword_1009A5330)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F5260, &type metadata for CloudKitCoalescer.CloudKitCoalescerError);
    atomic_store(result, (unint64_t *)&qword_1009A5330);
  }

  return result;
}

uint64_t sub_1001C2C0C(uint64_t a1)
{
  return sub_1001C291C(a1, v1, "CloudKitCoalescer task allowed to execute now.", 46LL);
}

uint64_t sub_1001C2C30()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1001C2C54@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1001C25EC(a1, *(void *)(v2 + 16), (char *)(v2 + 24), a2);
}

uint64_t sub_1001C2C60(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1001C26E8(a1, a2, a3, v3);
}

uint64_t sub_1001C2C68()
{
  return sub_1001C2584();
}

uint64_t sub_1001C2C70(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001C2C80(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1001C2C88(uint64_t a1)
{
  return sub_1001C291C(a1, v1, "CloudKitCoalescer Test task allowed to execute now.", 51LL);
}

uint64_t storeEnumTagSinglePayload for CloudKitCoalescer.CloudKitCoalescerError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1001C2CEC + 4 * byte_1007F5150[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1001C2D0C + 4 * byte_1007F5155[v4]))();
  }
}

_BYTE *sub_1001C2CEC(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1001C2D0C(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1001C2D14(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1001C2D1C(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1001C2D24(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1001C2D2C(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CloudKitCoalescer.CloudKitCoalescerError()
{
  return &type metadata for CloudKitCoalescer.CloudKitCoalescerError;
}

unint64_t sub_1001C2D4C()
{
  unint64_t result = qword_1009A5338;
  if (!qword_1009A5338)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F5238, &type metadata for CloudKitCoalescer.CloudKitCoalescerError);
    atomic_store(result, (unint64_t *)&qword_1009A5338);
  }

  return result;
}

uint64_t sub_1001C2D90()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for Descriptor()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd10Descriptor);
}

Swift::Int sub_1001C2DDC()
{
  return Hasher._finalize()();
}

void sub_1001C2E20(uint64_t a1)
{
  id v3 = *(id *)(*(void *)v1 + 24LL);
  NSObject.hash(into:)(a1);
}

Swift::Int sub_1001C2E68(uint64_t a1)
{
  id v2 = *(id *)(*(void *)v1 + 24LL);
  NSObject.hash(into:)(v4);

  return Hasher._finalize()();
}

BOOL sub_1001C2EB4(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)a1 + 24LL) == *(void *)(*(void *)a2 + 24LL);
}

uint64_t sub_1001C2ED0()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v5 = *(void **)(v0 + 24);
  *(void *)&v29[0] = 0LL;
  *((void *)&v29[0] + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(20LL);
  swift_bridgeObjectRelease();
  uint64_t v30 = 60LL;
  unint64_t v31 = 0xE100000000000000LL;
  *(void *)&v29[0] = v0;
  uint64_t v6 = type metadata accessor for Descriptor();
  uint64_t v8 = sub_100015C48( &qword_1009A5408,  v7,  (uint64_t (*)(uint64_t))type metadata accessor for Descriptor,  (uint64_t)&unk_1007F52C0);
  v9._countAndFlagsBits = CustomDebugStringConvertible.typeDescription.getter(v6, v8);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 32LL;
  v10._object = (void *)0xE100000000000000LL;
  String.append(_:)(v10);
  v11._countAndFlagsBits = CustomDebugStringConvertible<>.addressDescription.getter(v6, v8);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 8250LL;
  v12._object = (void *)0xE200000000000000LL;
  String.append(_:)(v12);
  id v13 = [v5 UUID];
  sub_100598998();

  uint64_t v14 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v14);
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v16._countAndFlagsBits = 23328LL;
  v16._object = (void *)0xE200000000000000LL;
  String.append(_:)(v16);
  id v17 = [v5 description];
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  uint64_t v20 = v19;

  v21._countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 2112093LL;
  v22._object = (void *)0xE300000000000000LL;
  String.append(_:)(v22);
  id v23 = [v5 value];
  if (v23)
  {
    id v24 = v23;
    _bridgeAnyObjectToAny(_:)(v29, v23);
    swift_unknownObjectRelease(v24);
  }

  else
  {
    memset(v29, 0, sizeof(v29));
  }

  uint64_t v25 = sub_100004AEC(&qword_10099E200);
  v26._countAndFlagsBits = String.init<A>(describing:)(v29, v25);
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 62LL;
  v27._object = (void *)0xE100000000000000LL;
  String.append(_:)(v27);
  return v30;
}

uint64_t sub_1001C3154()
{
  return sub_1001C2ED0();
}

uint64_t sub_1001C3174(uint64_t a1, uint64_t a2)
{
  return sub_100015C48( &qword_1009A5400,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for Descriptor,  (uint64_t)&unk_1007F52E8);
}

id CurrentLocationMonitor.__allocating_init(mode:desiredAccuracy:)(char a1, uint64_t a2, char a3)
{
  char v5 = a1 & 1;
  int v6 = a3 & 1;
  id v7 = objc_allocWithZone(v3);
  return CurrentLocationMonitor.init(mode:desiredAccuracy:)(v5, a2, v6);
}

uint64_t sub_1001C31E8(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t CurrentLocationMonitor.delegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate;
  swift_beginAccess(v0 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate, v3, 0LL, 0LL);
  return swift_unknownObjectWeakLoadStrong(v1);
}

uint64_t CurrentLocationMonitor.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate;
  swift_beginAccess(v5, v7, 1LL, 0LL);
  *(void *)(v5 + 8) = a2;
  swift_unknownObjectWeakAssign(v5, a1);
  return swift_unknownObjectRelease(a1);
}

uint64_t (*CurrentLocationMonitor.delegate.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = Strong;
  v3[4] = v7;
  return sub_1001C333C;
}

void sub_1001C3340(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void **)(*a2 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = v2;
  id v5 = v2;
}

void *CurrentLocationMonitor.currentLocation.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation);
  swift_beginAccess(v0 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation, v5, 0LL, 0LL);
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

uint64_t sub_1001C33EC@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  v5[2] = *a1;
  type metadata accessor for CLAuthorizationStatus(0LL);
  uint64_t result = OS_dispatch_queue.sync<A>(execute:)(sub_1001C5680, v5, v3);
  *a2 = v6;
  return result;
}

uint64_t CurrentLocationMonitor.currentAuthorizationStatus.getter()
{
  return v2[11];
}

uint64_t sub_1001C34BC@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor__currentAuthorizationStatus);
  return result;
}

uint64_t sub_1001C34D0(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v35 = *(void *)(v4 - 8);
  uint64_t v36 = v4;
  __chkstk_darwin(v4);
  char v34 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v32 = *(void *)(v6 - 8);
  uint64_t v33 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  Swift::String v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  Swift::String v16 = (uint64_t *)((char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v17 = *(void **)&v2[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_queue];
  *Swift::String v16 = v17;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  id v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v16);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  if ((v17 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    swift_once(&qword_10099B1B0, sub_1001C4DCC);
    goto LABEL_4;
  }

  uint64_t v14 = OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor__currentAuthorizationStatus;
  if (*(_DWORD *)&v2[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor__currentAuthorizationStatus] == a1) {
    return result;
  }
  uint64_t v13 = static os_log_type_t.default.getter(result);
  if (qword_10099B1B0 != -1) {
    goto LABEL_7;
  }
LABEL_4:
  uint64_t v20 = qword_100A2A350;
  uint64_t v21 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v22 = swift_allocObject(v21, 112LL, 7LL);
  *(_OWORD *)(v22 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  int v23 = *(_DWORD *)&v2[v14];
  *(void *)(v22 + 56) = &type metadata for Int32;
  *(void *)(v22 + 64) = &protocol witness table for Int32;
  *(_DWORD *)(v22 + 32) = v23;
  *(void *)(v22 + 96) = &type metadata for Int32;
  *(void *)(v22 + 104) = &protocol witness table for Int32;
  *(_DWORD *)(v22 + 72) = a1;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v20, "authorization changed from %d to %d", v32, v33);
  swift_bridgeObjectRelease();
  *(_DWORD *)&v2[v14] = a1;
  sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
  id v24 = (void *)static OS_dispatch_queue.global(qos:)(v12);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v25 = swift_allocObject(&unk_100947120, 28LL, 7LL);
  *(void *)(v25 + swift_weakDestroy(v0 + 16) = v2;
  *(_DWORD *)(v25 + 24) = a1;
  aBlock[4] = sub_1001C55F8;
  uint64_t v39 = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100947138;
  Swift::String v26 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v2);
  uint64_t v37 = _swiftEmptyArrayStorage;
  uint64_t v27 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v28 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v29 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v30 = v34;
  uint64_t v31 = v36;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v28, v29, v36, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v30, v26);
  _Block_release(v26);

  (*(void (**)(char *, uint64_t))(v35 + 8))(v30, v31);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v33);
  return swift_release(v39);
}

uint64_t sub_1001C38AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate;
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate, v9, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(v4);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(v4 + 8);
    uint64_t ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v7 + 16))( a1,  &protocol witness table for CurrentLocationMonitor,  a2,  ObjectType,  v7);
    return swift_unknownObjectRelease(v6);
  }

  return result;
}

id CurrentLocationMonitor.init(mode:desiredAccuracy:)(char a1, uint64_t a2, int a3)
{
  uint64_t v4 = v3;
  int v49 = a3;
  uint64_t v48 = a2;
  int v57 = a1 & 1;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v54 = *(void *)(v5 - 8);
  uint64_t v55 = v5;
  __chkstk_darwin(v5);
  __int128 v53 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v51 = *(void *)(v10 - 8);
  uint64_t v52 = v10;
  __chkstk_darwin(v10);
  Swift::String v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  Swift::String v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v17 = &v4[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate];
  *((void *)v17 + 1) = 0LL;
  swift_unknownObjectWeakInit(v17, 0LL);
  *(void *)&v4[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation] = 0LL;
  *(_DWORD *)&v4[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor__currentAuthorizationStatus] = 0;
  *(void *)&v4[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationManager] = 0LL;
  uint64_t v56 = OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_queue;
  sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v14 + 104))( v16,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v13);
  id v18 = v4;
  static DispatchQoS.unspecified.getter(v18);
  aBlock[0] = _swiftEmptyArrayStorage;
  uint64_t v19 = sub_100007864( (unint64_t *)&qword_10099BAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009A0CD0);
  uint64_t v21 = sub_1000372EC( (unint64_t *)&qword_10099BAB0,  (uint64_t *)&unk_1009A0CD0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v20, v21, v7, v19);
  uint64_t v50 = v12;
  uint64_t v22 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002ELL,  0x8000000100850200LL,  v12,  v9,  v16,  0LL);
  *(void *)&v4[v56] = v22;
  *(void *)&v18[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_startCounts] = 0LL;
  v18[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationMonitorStarted] = 0;
  id v23 = objc_allocWithZone(&OBJC_CLASS___NSBundle);
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = [v23 initWithPath:v24];

  if (v25)
  {
    unsigned int v26 = [(id)objc_opt_self(CLLocationManager) authorizationStatusForBundle:v25];
  }

  else
  {
    unsigned int v26 = 0;
  }

  v18[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_mode] = v57;
  LODWORD(aBlock[0]) = v26;
  uint64_t v27 = sub_100004AEC(&qword_1009A5450);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  uint64_t v28 = CurrentValueSubject.init(_:)(aBlock);
  *(void *)&v18[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_authorizationStatusSubject] = v28;
  aBlock[0] = v28;
  uint64_t v29 = sub_1000372EC( &qword_1009A5460,  &qword_1009A5450,  (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  *(void *)&v18[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_authorizationStatusPublisher] = Publisher.eraseToAnyPublisher()(v27, v29);

  uint64_t v30 = (objc_class *)type metadata accessor for CurrentLocationMonitor();
  v61.receiver = v18;
  v61.super_class = v30;
  id v31 = objc_msgSendSuper2(&v61, "init");
  id v32 = objc_allocWithZone(&OBJC_CLASS___NSBundle);
  id v33 = v31;
  NSString v34 = String._bridgeToObjectiveC()();
  id v35 = [v32 initWithPath:v34];

  if (v35)
  {
    uint64_t v36 = swift_allocObject(&unk_100946E50, 41LL, 7LL);
    *(void *)(v36 + swift_weakDestroy(v0 + 16) = v33;
    *(void *)(v36 + 24) = v35;
    *(void *)(v36 + 32) = v48;
    *(_BYTE *)(v36 + 40) = v49 & 1;
    aBlock[4] = sub_1001C4054;
    uint64_t v60 = v36;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    aBlock[3] = &unk_100946E68;
    uint64_t v37 = _Block_copy(aBlock);
    id v38 = v33;
    id v39 = v35;
    uint64_t v40 = v50;
    static DispatchQoS.unspecified.getter(v39);
    uint64_t v58 = _swiftEmptyArrayStorage;
    uint64_t v41 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v42 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v43 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v44 = v53;
    uint64_t v45 = v42;
    uint64_t v46 = v55;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v58, v45, v43, v55, v41);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v40, v44, v37);

    _Block_release(v37);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v44, v46);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v40, v52);
    swift_release(v60);
  }

  else
  {
  }

  return v33;
}

void sub_1001C3EB8(_DWORD *a1@<X8>)
{
  *a1 = *(_DWORD *)(*(void *)(v1 + 16)
                  + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor__currentAuthorizationStatus);
}

uint64_t type metadata accessor for CurrentLocationMonitor()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd22CurrentLocationMonitor);
}

uint64_t sub_1001C3EF0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  id v8 = [objc_allocWithZone(CLLocationManager) initWithEffectiveBundle:a2 delegate:a1 onQueue:*(void *)(a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_queue)];
  uint64_t v9 = OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationManager;
  uint64_t v10 = *(void **)(a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationManager);
  *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationManager) = v8;

  if ((a4 & 1) == 0) {
    [*(id *)(a1 + v9) setDesiredAccuracy:*(double *)&a3];
  }
  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  v13[0] = 0x7365547265646E75LL;
  v13[1] = 0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v14, v13, sub_10000A71C, 0LL, &type metadata for Bool);
  uint64_t result = swift_bridgeObjectRelease();
  if ((v14 & 1) == 0)
  {
    int v12 = [(id)objc_opt_self(CLLocationManager) authorizationStatusForBundle:a2];
    return sub_1001C34D0(v12);
  }

  return result;
}

uint64_t sub_1001C4028()
{
  return swift_deallocObject(v0, 41LL, 7LL);
}

uint64_t sub_1001C4054()
{
  return sub_1001C3EF0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(_BYTE *)(v0 + 40));
}

uint64_t sub_1001C4064(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001C4074(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

Swift::Void __swiftcall CurrentLocationMonitor.requestLocation()()
{
}

id sub_1001C4098(uint64_t a1)
{
  uint64_t v2 = static os_log_type_t.default.getter(a1);
  if (qword_10099B1B0 != -1) {
    swift_once(&qword_10099B1B0, sub_1001C4DCC);
  }
  os_log(_:dso:log:_:_:)( v2,  &_mh_execute_header,  qword_100A2A350,  "requesting location",  19LL,  2LL,  _swiftEmptyArrayStorage);
  return [*(id *)(a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationManager) requestLocation];
}

id sub_1001C4128()
{
  return sub_1001C4098(*(void *)(v0 + 16));
}

Swift::Void __swiftcall CurrentLocationMonitor.startMonitor()()
{
}

uint64_t sub_1001C414C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v21 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v20[1] = *(void *)&v3[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_queue];
  uint64_t v14 = swift_allocObject(a1, 24LL, 7LL);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = v3;
  aBlock[4] = a2;
  void aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = a3;
  uint64_t v15 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v3);
  uint64_t v22 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v18 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v17, v18, v7, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

id sub_1001C4338(uint64_t a1)
{
  uint64_t v3 = OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_startCounts;
  uint64_t v4 = *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_startCounts);
  BOOL v5 = __OFADD__(v4, 1LL);
  uint64_t v6 = v4 + 1;
  if (v5)
  {
    __break(1u);
  }

  else
  {
    uint64_t v1 = a1;
    *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_startCounts) = v6;
    uint64_t v2 = static os_log_type_t.default.getter(a1);
    if (qword_10099B1B0 == -1) {
      goto LABEL_3;
    }
  }

  swift_once(&qword_10099B1B0, sub_1001C4DCC);
LABEL_3:
  uint64_t v7 = qword_100A2A350;
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
  uint64_t v10 = *(void *)(v1 + v3);
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(v9 + 56) = &type metadata for Int;
  *(void *)(v9 + 64) = &protocol witness table for Int;
  *(void *)(v9 + 32) = v10;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v7, "startCounts = %d", v14);
  id result = (id)swift_bridgeObjectRelease();
  if (*(void *)(v1 + v3) == 1LL)
  {
    uint64_t v12 = static os_log_type_t.default.getter(result);
    os_log(_:dso:log:_:_:)( v12,  &_mh_execute_header,  qword_100A2A350,  "starting location monitor",  25LL,  2LL,  _swiftEmptyArrayStorage);
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_mode)) {
      uint64_t v13 = &selRef_startMonitoringSignificantLocationChanges;
    }
    else {
      uint64_t v13 = &selRef_startUpdatingLocation;
    }
    id result = [*(id *)(v1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationManager) *v13];
    *(_BYTE *)(v1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationMonitorStarted) = 1;
  }

  return result;
}

id sub_1001C44AC()
{
  return sub_1001C4338(*(void *)(v0 + 16));
}

Swift::Void __swiftcall CurrentLocationMonitor.stopMonitor()()
{
}

id sub_1001C44D0(uint64_t a1)
{
  uint64_t v3 = OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_startCounts;
  uint64_t v4 = *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_startCounts);
  BOOL v5 = __OFSUB__(v4, 1LL);
  uint64_t v6 = v4 - 1;
  if (v5)
  {
    __break(1u);
  }

  else
  {
    uint64_t v1 = a1;
    *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_startCounts) = v6;
    uint64_t v2 = static os_log_type_t.default.getter(a1);
    if (qword_10099B1B0 == -1) {
      goto LABEL_3;
    }
  }

  swift_once(&qword_10099B1B0, sub_1001C4DCC);
LABEL_3:
  uint64_t v7 = qword_100A2A350;
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
  uint64_t v10 = *(void *)(v1 + v3);
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(v9 + 56) = &type metadata for Int;
  *(void *)(v9 + 64) = &protocol witness table for Int;
  *(void *)(v9 + 32) = v10;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v7, "startCounts = %d", v14);
  id result = (id)swift_bridgeObjectRelease();
  if (!*(void *)(v1 + v3))
  {
    uint64_t v12 = static os_log_type_t.default.getter(result);
    os_log(_:dso:log:_:_:)( v12,  &_mh_execute_header,  qword_100A2A350,  "stopping location monitor",  25LL,  2LL,  _swiftEmptyArrayStorage);
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_mode)) {
      uint64_t v13 = &selRef_stopMonitoringSignificantLocationChanges;
    }
    else {
      uint64_t v13 = &selRef_stopUpdatingLocation;
    }
    id result = [*(id *)(v1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationManager) *v13];
    *(_BYTE *)(v1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationMonitorStarted) = 0;
  }

  return result;
}

uint64_t sub_1001C463C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

id sub_1001C4660()
{
  return sub_1001C44D0(*(void *)(v0 + 16));
}

Swift::Void __swiftcall CurrentLocationMonitor.startMonitorIfNeeded()()
{
}

_BYTE *sub_1001C4684(_BYTE *result)
{
  uint64_t v1 = OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationMonitorStarted;
  if ((result[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationMonitorStarted] & 1) == 0)
  {
    uint64_t v2 = result;
    uint64_t v3 = static os_log_type_t.default.getter(result);
    if (qword_10099B1B0 != -1) {
      swift_once(&qword_10099B1B0, sub_1001C4DCC);
    }
    os_log(_:dso:log:_:_:)( v3,  &_mh_execute_header,  qword_100A2A350,  "startMonitorIfNeeded starting location monitor",  46LL,  2LL,  _swiftEmptyArrayStorage);
    id result = [*(id *)&v2[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationManager] startUpdatingLocation];
    v2[v1] = 1;
  }

  return result;
}

_BYTE *sub_1001C4738()
{
  return sub_1001C4684(*(_BYTE **)(v0 + 16));
}

Swift::Void __swiftcall CurrentLocationMonitor.forceStopMonitor()()
{
}

_BYTE *sub_1001C475C(_BYTE *result)
{
  uint64_t v1 = OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationMonitorStarted;
  if (result[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationMonitorStarted] == 1)
  {
    uint64_t v2 = result;
    uint64_t v3 = static os_log_type_t.default.getter(result);
    if (qword_10099B1B0 != -1) {
      swift_once(&qword_10099B1B0, sub_1001C4DCC);
    }
    os_log(_:dso:log:_:_:)( v3,  &_mh_execute_header,  qword_100A2A350,  "force stopping location monitor",  31LL,  2LL,  _swiftEmptyArrayStorage);
    id result = [*(id *)&v2[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationManager] stopUpdatingLocation];
    v2[v1] = 0;
  }

  return result;
}

_BYTE *sub_1001C4810()
{
  return sub_1001C475C(*(_BYTE **)(v0 + 16));
}

id CurrentLocationMonitor.__allocating_init()()
{
  return [objc_allocWithZone(v0) init];
}

void CurrentLocationMonitor.init()()
{
}

id CurrentLocationMonitor.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CurrentLocationMonitor();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001C4938()
{
  return v2[11];
}

void sub_1001C499C(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  uint64_t v5 = *(void *)(*(void *)a1 + 32LL);
  uint64_t v6 = *(void *)(*(void *)a1 + 40LL) + *(void *)(*(void *)a1 + 48LL);
  *(void *)(v6 + 8) = v5;
  swift_unknownObjectWeakAssign(v6, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }

  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }

  free(v3);
}

Swift::Void __swiftcall CurrentLocationMonitor.locationManager(_:didUpdateLocations:)( CLLocationManager _, Swift::OpaquePointer didUpdateLocations)
{
}

uint64_t sub_1001C4A20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate;
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate, v9, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(v4);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(v4 + 8);
    uint64_t ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v7 + 8))( a1,  &protocol witness table for CurrentLocationMonitor,  a2,  ObjectType,  v7);
    return swift_unknownObjectRelease(v6);
  }

  return result;
}

uint64_t CurrentLocationMonitor.locationManager(_:didFailWithError:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static os_log_type_t.error.getter(a1);
  if (qword_10099B1B0 != -1) {
    swift_once(&qword_10099B1B0, sub_1001C4DCC);
  }
  uint64_t v4 = qword_100A2A350;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v6 = swift_allocObject(v5, 72LL, 7LL);
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v12 = a2;
  swift_errorRetain(a2);
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  uint64_t v8 = String.init<A>(describing:)(&v12, v7);
  uint64_t v10 = v9;
  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 64) = sub_1000226F4();
  *(void *)(v6 + 32) = v8;
  *(void *)(v6 + 40) = v10;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "failed with error - %{public}@", 30LL, 2LL, v6);
  return swift_bridgeObjectRelease();
}

uint64_t CurrentLocationMonitor.locationManager(_:didChangeAuthorization:)(uint64_t a1, uint64_t a2)
{
  return sub_1001C5320(a2);
}

uint64_t sub_1001C4DCC()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000016LL,  0x8000000100858760LL);
  qword_100A2A350 = result;
  return result;
}

void sub_1001C4E40(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v57 = *(void *)(v3 - 8);
  uint64_t v58 = v3;
  __chkstk_darwin(v3);
  uint64_t v56 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v54 = *(void *)(v5 - 8);
  uint64_t v55 = v5;
  __chkstk_darwin(v5);
  __int128 v53 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v51 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v7 = *(void *)(v51 - 8);
  uint64_t v8 = __chkstk_darwin(v51);
  uint64_t v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = static os_log_type_t.default.getter(v8);
  if (qword_10099B1B0 != -1) {
    swift_once(&qword_10099B1B0, sub_1001C4DCC);
  }
  uint64_t v12 = qword_100A2A350;
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v14 = swift_allocObject(v13, 112LL, 7LL);
  *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v52 = v1;
  uint64_t v15 = &v1[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate];
  swift_beginAccess(v15, v67, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v15);
  uint64_t v17 = *((void *)v15 + 1);
  uint64_t aBlock = (void **)Strong;
  uint64_t v61 = v17;
  uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009A5520);
  uint64_t v19 = String.init<A>(describing:)(&aBlock, v18);
  uint64_t v21 = v20;
  *(void *)(v14 + 56) = &type metadata for String;
  unint64_t v22 = sub_1000226F4();
  *(void *)(v14 + 64) = v22;
  *(void *)(v14 + 32) = v19;
  *(void *)(v14 + 40) = v21;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v50 = a1;
    }
    else {
      uint64_t v50 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter(v50);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v23 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t aBlock = (void **)v23;
  uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  *(void *)(v14 + 96) = &type metadata for String;
  *(void *)(v14 + 104) = v22;
  *(void *)(v14 + 72) = v24;
  *(void *)(v14 + 80) = v25;
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "didUpdateLocations(%{pubic}@) - %{public}@", 42LL, 2LL, v14);
  swift_bridgeObjectRelease();
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v26 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v26) {
      goto LABEL_7;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    return;
  }

  if (a1 < 0) {
    uint64_t v31 = a1;
  }
  else {
    uint64_t v31 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a1);
  if (!_CocoaArrayWrapper.endIndex.getter(v31)) {
    goto LABEL_16;
  }
LABEL_7:
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
  }

  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      __break(1u);
      return;
    }

    id v27 = *(id *)(a1 + 32);
  }

  uint64_t v28 = v27;
  swift_bridgeObjectRelease();
  id v29 = v28;
  LOBYTE(v28) = sub_100658D94();

  if ((v28 & 1) != 0)
  {
    uint64_t v30 = 0LL;
  }

  else
  {
    id v32 = v29;
    uint64_t v30 = v29;
  }

  id v33 = v52;
  NSString v34 = (void **)&v52[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation];
  swift_beginAccess(&v52[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation], v66, 1LL, 0LL);
  id v35 = *v34;
  char *v34 = v30;
  id v36 = v30;

  sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v37 = v51;
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchQoS.QoSClass.default(_:), v51);
  id v38 = (void *)static OS_dispatch_queue.global(qos:)(v10);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v37);
  uint64_t v39 = swift_allocObject(&unk_100947170, 32LL, 7LL);
  *(void *)(v39 + swift_weakDestroy(v0 + 16) = v33;
  *(void *)(v39 + 24) = v30;
  uint64_t v64 = sub_1001C5630;
  uint64_t v65 = v39;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v61 = 1107296256LL;
  uint64_t v62 = sub_1001C31E8;
  uint64_t v63 = &unk_100947188;
  uint64_t v40 = _Block_copy(&aBlock);
  id v41 = v36;
  id v42 = v33;
  uint64_t v43 = v53;
  static DispatchQoS.unspecified.getter(v42);
  uint64_t v59 = _swiftEmptyArrayStorage;
  uint64_t v44 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v45 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v46 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v47 = v56;
  uint64_t v48 = v45;
  uint64_t v49 = v58;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v59, v48, v46, v58, v44);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v43, v47, v40);
  _Block_release(v40);

  (*(void (**)(char *, uint64_t))(v57 + 8))(v47, v49);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v43, v55);
  swift_release();
}

uint64_t sub_1001C5320(uint64_t a1)
{
  int v1 = a1;
  uint64_t v2 = static os_log_type_t.default.getter(a1);
  if (qword_10099B1B0 != -1) {
    swift_once(&qword_10099B1B0, sub_1001C4DCC);
  }
  uint64_t v3 = qword_100A2A350;
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  int v12 = v1;
  type metadata accessor for CLAuthorizationStatus(0LL);
  uint64_t v7 = String.init<A>(describing:)(&v12, v6);
  uint64_t v9 = v8;
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_1000226F4();
  *(void *)(v5 + 32) = v7;
  *(void *)(v5 + 40) = v9;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "didChangeAuthorization - %{public}@", 35LL, 2LL, v5);
  swift_bridgeObjectRelease();
  sub_1001C34D0(v1);
  int v11 = v1;
  return CurrentValueSubject.send(_:)(&v11);
}

unint64_t sub_1001C5448()
{
  unint64_t result = qword_1009A5480;
  if (!qword_1009A5480)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CurrentLocationMonitor.Mode,  &type metadata for CurrentLocationMonitor.Mode);
    atomic_store(result, (unint64_t *)&qword_1009A5480);
  }

  return result;
}

id sub_1001C548C@<X0>(void *a1@<X0>, void **a2@<X8>)
{
  uint64_t v3 = (void **)(*a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation);
  swift_beginAccess(v3, v6, 0LL, 0LL);
  uint64_t v4 = *v3;
  *a2 = *v3;
  return v4;
}

uint64_t sub_1001C54E4(int *a1)
{
  return sub_1001C34D0(*a1);
}

uint64_t storeEnumTagSinglePayload for CurrentLocationMonitor.Mode( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1001C5554 + 4 * byte_1007F5355[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001C5588 + 4 * byte_1007F5350[v4]))();
}

uint64_t sub_1001C5588(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C5590(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001C5598LL);
  }
  return result;
}

uint64_t sub_1001C55A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001C55ACLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1001C55B0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C55B8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CurrentLocationMonitor.Mode()
{
  return &type metadata for CurrentLocationMonitor.Mode;
}

uint64_t sub_1001C55D4()
{
  return swift_deallocObject(v0, 28LL, 7LL);
}

uint64_t sub_1001C55F8()
{
  return sub_1001C38AC(*(void *)(v0 + 16), *(unsigned int *)(v0 + 24));
}

uint64_t sub_1001C5604()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001C5630()
{
  return sub_1001C4A20(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1001C5680(_DWORD *a1@<X8>)
{
}

ValueMetadata *type metadata accessor for PairingCompleteCommandPayload()
{
  return &type metadata for PairingCompleteCommandPayload;
}

uint64_t sub_1001C56A4(void *a1)
{
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

unint64_t sub_1001C56C8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1001C56F4();
  unint64_t result = sub_1001C5738();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_1001C56F4()
{
  unint64_t result = qword_1009A5530;
  if (!qword_1009A5530)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F54B4, &type metadata for PairingCompleteCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009A5530);
  }

  return result;
}

unint64_t sub_1001C5738()
{
  unint64_t result = qword_1009A5538;
  if (!qword_1009A5538)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F5470, &type metadata for PairingCompleteCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009A5538);
  }

  return result;
}

id sub_1001C577C()
{
  __int16 v1 = (void *)objc_opt_self(&OBJC_CLASS___AKAccountManager);
  id v2 = [v1 sharedInstance];
  id v3 = [v2 altDSIDForAccount:v0];

  if (!v3) {
    return 0LL;
  }
  id v4 = [v1 sharedInstance];
  id v5 = [v4 authKitAccountWithAltDSID:v3];

  if (!v5) {
    return 0LL;
  }
  id v6 = [v1 sharedInstance];
  id v7 = [v6 securityLevelForAccount:v5];

  return v7;
}

uint64_t sub_1001C5870@<X0>(uint64_t a1@<X8>)
{
  uint64_t v34 = a1;
  uint64_t v1 = sub_100004AEC(&qword_1009A1D88);
  __chkstk_darwin(v1);
  id v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = type metadata accessor for URLComponents(0LL);
  uint64_t v4 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  id v32 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for FMNAccountType(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v10);
  int v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for FMNAuthenticationProvider(0LL);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for FMNAccountType.secureLocations(_:), v6);
  static FMNAuthenticationProvider.configurationURL(accountType:)(v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13) == 1)
  {
    uint64_t v17 = (uint64_t *)&unk_1009A34D0;
    uint64_t v18 = (uint64_t)v12;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    URLComponents.init(url:resolvingAgainstBaseURL:)(v16, 0LL);
    uint64_t v19 = v33;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v3, 1LL, v33) != 1)
    {
      id v27 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      uint64_t v28 = v32;
      v27(v32, v3, v19);
      id v29 = (void (*)(_BYTE *, void))URLComponents.path.modify(v35);
      v30._countAndFlagsBits = 0x6863746566LL;
      v30._object = (void *)0xE500000000000000LL;
      String.append(_:)(v30);
      v29(v35, 0LL);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(v34, v28, v19);
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    uint64_t v17 = &qword_1009A1D88;
    uint64_t v18 = (uint64_t)v3;
  }

  sub_100015794(v18, v17);
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v20 = type metadata accessor for Logger(0LL);
  uint64_t v21 = sub_10000A720(v20, (uint64_t)qword_100A2AE08);
  unint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "No url found in account bag.", v24, 2u);
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  URLComponents.init()(v25);
  URLComponents.scheme.setter(0x7370747468LL, 0xE500000000000000LL);
  URLComponents.path.setter(0xD000000000000014LL, 0x80000001008588C0LL);
  return URLComponents.host.setter(0xD000000000000012LL, 0x8000000100854BE0LL);
}

uint64_t sub_1001C5C1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v54 = a1;
  uint64_t v1 = sub_100004AEC(&qword_1009A1D88);
  __chkstk_darwin(v1);
  uint64_t v52 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for URLComponents(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  __int128 v53 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v51 = (char *)&v50 - v7;
  uint64_t v8 = type metadata accessor for FMNAccountType(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for URL(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for FMNAuthenticationProvider(0LL);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))( v11,  enum case for FMNAccountType.ownedDeviceLocations(_:),  v8);
  static FMNAuthenticationProvider.configurationURL(accountType:)(v11);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15) == 1)
  {
    sub_100015794((uint64_t)v14, (uint64_t *)&unk_1009A34D0);
    uint64_t v19 = v3;
    uint64_t v20 = v4;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    uint64_t v21 = (uint64_t)v52;
    URLComponents.init(url:resolvingAgainstBaseURL:)(v18, 0LL);
    uint64_t v19 = v3;
    uint64_t v20 = v4;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v21, 1LL, v3) != 1)
    {
      uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
      uint64_t v44 = v51;
      v43(v51, v21, v3);
      uint64_t v45 = (void (*)(uint64_t *, void))URLComponents.path.modify(&v55);
      v46._countAndFlagsBits = 0x68637465662F3276LL;
      v46._object = (void *)0xE800000000000000LL;
      String.append(_:)(v46);
      v45(&v55, 0LL);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v43)(v54, v44, v3);
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    sub_100015794(v21, &qword_1009A1D88);
  }

  unint64_t v22 = v53;
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v23 = type metadata accessor for Logger(0LL);
  uint64_t v24 = sub_10000A720(v23, (uint64_t)qword_100A2AE08);
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.default.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    id v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "No url found in account bag.", v27, 2u);
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  URLComponents.init()(v28);
  URLComponents.scheme.setter(0x7370747468LL, 0xE500000000000000LL);
  id v29 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  id v30 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v31 = [v30 isInternalBuild];

  if (v31
    && (NSString v32 = String._bridgeToObjectiveC()(),
        id v33 = [v29 stringForKey:v32],
        v32,
        v33))
  {
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    id v36 = v35;

    uint64_t v37 = swift_bridgeObjectRetain_n(v36, 2LL);
    id v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.default.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v41 = swift_slowAlloc(32LL, -1LL);
      uint64_t v55 = v41;
      *(_DWORD *)uint64_t v40 = 136315138;
      swift_bridgeObjectRetain(v36);
      uint64_t v57 = sub_1003F11D4(v34, (unint64_t)v36, &v55);
      unint64_t v22 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v40 + 4, v40 + 12);
      swift_bridgeObjectRelease_n(v36, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Override url found in user defaults %s. ", v40, 0xCu);
      swift_arrayDestroy(v41, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1LL, -1LL);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v36, 2LL);
    }

    uint64_t v42 = v54;
    uint64_t v55 = 47LL;
    unint64_t v56 = 0xE100000000000000LL;
    v48._countAndFlagsBits = v34;
    v48._object = v36;
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    v49._countAndFlagsBits = 0x637465662F32762FLL;
    v49._object = (void *)0xE900000000000068LL;
    String.append(_:)(v49);
    URLComponents.path.setter(v55, v56);
  }

  else
  {

    URLComponents.path.setter(0xD000000000000017LL, 0x80000001008588A0LL);
    uint64_t v42 = v54;
  }

  URLComponents.host.setter(0xD000000000000012LL, 0x8000000100854BE0LL);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v20 + 32))(v42, v22, v19);
}

void sub_1001C627C(char *a1)
{
}

void sub_1001C6288()
{
}

void sub_1001C6290(uint64_t a1)
{
}

void sub_1001C6298(uint64_t a1)
{
}

unint64_t sub_1001C62A0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1001C6D38(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001C62CC()
{
  return ((uint64_t (*)(void))((char *)sub_1001C6308 + 4 * byte_1007F54E0[*v0]))();
}

void sub_1001C6308(void *a1@<X8>)
{
  *a1 = 1818322280LL;
  a1[1] = 0xE400000000000000LL;
}

void sub_1001C631C(void *a1@<X8>)
{
  *a1 = 0xD000000000000014LL;
  a1[1] = 0x800000010084DE30LL;
}

void sub_1001C633C(void *a1@<X8>)
{
  *a1 = 0xD000000000000015LL;
  a1[1] = 0x800000010084DE50LL;
}

uint64_t sub_1001C6360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001C8FF8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001C63BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001C8FF8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001C6408(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A56D8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1001C8A38();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SecureLocationsFetchData.CodingKeys,  &type metadata for SecureLocationsFetchData.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  LOBYTE(v23) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v23, v5);
  if (!v2)
  {
    uint64_t v23 = v3[2];
    char v22 = 1;
    uint64_t v14 = sub_100004AEC(&qword_10099E868);
    uint64_t v15 = sub_1001C8A7C( (unint64_t *)&qword_1009A2798,  &qword_10099E868,  (void (*)(void))sub_1000170A4,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v5, v14, v15);
    uint64_t v23 = v3[3];
    char v22 = 2;
    type metadata accessor for SPSecureLocationSubscriptionMode(0LL);
    uint64_t v17 = v16;
    unint64_t v18 = sub_1001C8AE0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v5, v17, v18);
    sub_100015750((uint64_t)(v3 + 4), (uint64_t)&v24, &qword_1009A56F0);
    sub_100015750((uint64_t)&v24, (uint64_t)&v23, &qword_1009A56F0);
    char v22 = 3;
    unint64_t v19 = sub_1001C8B28();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)( &v23,  &v22,  v5,  &type metadata for SecureLocationsSubscriptionIntent,  v19);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001C6608()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001C6630 + 4 * byte_1007F54E4[*v0]))( 1682533734LL,  0xE400000000000000LL);
}

uint64_t sub_1001C6630()
{
  return 7562345LL;
}

uint64_t sub_1001C6640()
{
  return 1701080941LL;
}

uint64_t sub_1001C664C()
{
  return 0x746E65746E69LL;
}

uint64_t sub_1001C6660@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001C6D80(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001C6684(uint64_t a1)
{
  unint64_t v2 = sub_1001C8A38();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C66AC(uint64_t a1)
{
  unint64_t v2 = sub_1001C8A38();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001C66D4(void *a1)
{
  return sub_1001C6408(a1);
}

uint64_t sub_1001C670C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A5670);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1001C8240();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SecureLocationsFetchBody.CodingKeys,  &type metadata for SecureLocationsFetchBody.CodingKeys,  v11,  v9,  v10);
  *(void *)&v19[0] = *(void *)v3;
  char v21 = 0;
  uint64_t v12 = sub_100004AEC(&qword_1009A5680);
  uint64_t v13 = sub_1001C8A7C( &qword_1009A5688,  &qword_1009A5680,  (void (*)(void))sub_1001C8284,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v21, v5, v12, v13);
  if (!v2)
  {
    __int128 v14 = *(_OWORD *)(v3 + 88);
    v19[4] = *(_OWORD *)(v3 + 72);
    v19[5] = v14;
    v19[6] = *(_OWORD *)(v3 + 104);
    uint64_t v20 = *(void *)(v3 + 120);
    __int128 v15 = *(_OWORD *)(v3 + 24);
    v19[0] = *(_OWORD *)(v3 + 8);
    v19[1] = v15;
    __int128 v16 = *(_OWORD *)(v3 + 56);
    v19[2] = *(_OWORD *)(v3 + 40);
    v19[3] = v16;
    char v21 = 1;
    unint64_t v17 = sub_1001C82C8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v21, v5, &type metadata for SecureLocationsClientContext, v17);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001C68A8()
{
  if (*v0) {
    return 0x6F43746E65696C63LL;
  }
  else {
    return 0x6863746566LL;
  }
}

uint64_t sub_1001C68EC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001C830C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001C6910(uint64_t a1)
{
  unint64_t v2 = sub_1001C8240();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C6938(uint64_t a1)
{
  unint64_t v2 = sub_1001C8240();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001C6960(void *a1)
{
  return sub_1001C670C(a1);
}

uint64_t sub_1001C69A8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A56C8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1001C8950();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SecureLocationsFetchResponseBody.CodingKeys,  &type metadata for SecureLocationsFetchResponseBody.CodingKeys,  v11,  v9,  v10);
  uint64_t v23 = *v3;
  char v22 = 0;
  uint64_t v12 = sub_100004AEC(&qword_1009A1EC8);
  uint64_t v13 = sub_1001C8A7C( (unint64_t *)&qword_1009A1ED0,  &qword_1009A1EC8,  (void (*)(void))sub_10012AB78,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v5, v12, v13);
  if (!v2)
  {
    uint64_t v14 = v3[1];
    uint64_t v15 = v3[2];
    LOBYTE(v23) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v23, v5);
    sub_100015750((uint64_t)(v3 + 3), (uint64_t)v24, &qword_1009A56D0);
    sub_100015750((uint64_t)v24, (uint64_t)&v23, &qword_1009A56D0);
    char v22 = 2;
    uint64_t v16 = sub_100004AEC(&qword_1009AED50);
    uint64_t v17 = sub_1001C89D8( (unint64_t *)&qword_1009B0650,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v23, &v22, v5, v16, v17);
    uint64_t v18 = v3[4];
    uint64_t v19 = *((unsigned __int8 *)v3 + 40);
    LOBYTE(v23) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v23, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001C6BB0()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001C6BEC + 4 * byte_1007F54E8[*v0]))( 0x6E6F697461636F6CLL,  0xEF64616F6C796150LL);
}

uint64_t sub_1001C6BEC()
{
  return 0x6F43737574617473LL;
}

uint64_t sub_1001C6C08()
{
  return 0x6D4664656C696166LL;
}

uint64_t sub_1001C6C28()
{
  return 0x65566769666E6F63LL;
}

uint64_t sub_1001C6C4C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001C8418(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001C6C70(uint64_t a1)
{
  unint64_t v2 = sub_1001C8950();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C6C98(uint64_t a1)
{
  unint64_t v2 = sub_1001C8950();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1001C6CC0@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    double result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v7 + 9);
  }

  return result;
}

uint64_t sub_1001C6D00(void *a1)
{
  return sub_1001C69A8(a1);
}

unint64_t sub_1001C6D38(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100933B48, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1001C6D80(uint64_t a1, unint64_t a2)
{
  if (a1 == 1682533734 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1682533734LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 7562345 && a2 == 0xE300000000000000LL)
  {
    unint64_t v7 = 0xE300000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7562345LL, 0xE300000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 1701080941 && a2 == 0xE400000000000000LL)
  {
    unint64_t v8 = 0xE400000000000000LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701080941LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x746E65746E69LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    return 3LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746E65746E69LL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_1001C6F00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 328) = a2;
  *(void *)(v3 + 336) = a3;
  *(void *)(v3 + 320) = a1;
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v3 + 344) = *(_OWORD *)a2;
  *(_OWORD *)(v3 + 360) = v4;
  *(void *)(v3 + 376) = *(void *)(a2 + 32);
  __int128 v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v3 + 384) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v3 + 400) = v5;
  __int128 v6 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v3 + 4swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v3 + 432) = v6;
  *(_BYTE *)(v3 + 584) = *(_BYTE *)(a2 + 104);
  *(void *)(v3 + 448) = *(void *)(a2 + 112);
  uint64_t v7 = type metadata accessor for HashAlgorithm(0LL);
  *(void *)(v3 + 456) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v3 + 464) = v8;
  *(void *)(v3 + 472) = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1001C6FA8, 0LL, 0LL);
}

id sub_1001C6FA8()
{
  if (*(void *)(*(void *)(v0 + 320) + 16LL))
  {
    uint64_t v1 = (unint64_t *)(v0 + 272);
    unint64_t v2 = sub_100412D14((uint64_t)_swiftEmptyArrayStorage);
    *(void *)(v0 + 272) = v2;
    id result = [(id)objc_opt_self(AKDevice) currentDevice];
    if (result)
    {
      __int128 v4 = result;
      id v5 = [result serverFriendlyDescription];

      if (v5)
      {
        uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
        uint64_t v8 = v7;

        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
        *uint64_t v1 = 0x8000000000000000LL;
        sub_10005C260(v6, v8, 0xD000000000000011LL, 0x8000000100854B60LL, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease();
      }

      else
      {
        sub_100047E14(0xD000000000000011LL, 0x8000000100854B60LL);
        swift_bridgeObjectRelease();
        unint64_t v2 = *v1;
      }

      uint64_t v33 = *(void *)(v0 + 448);
      char v32 = *(_BYTE *)(v0 + 584);
      uint64_t v30 = *(void *)(v0 + 432);
      uint64_t v31 = *(void *)(v0 + 440);
      uint64_t v11 = *(void *)(v0 + 368);
      uint64_t v12 = *(void *)(v0 + 376);
      uint64_t v14 = *(void *)(v0 + 352);
      uint64_t v13 = *(void *)(v0 + 360);
      uint64_t v15 = *(void *)(v0 + 344);
      uint64_t v16 = *(void *)(v0 + 320);
      __int128 v28 = *(_OWORD *)(v0 + 400);
      __int128 v29 = *(_OWORD *)(v0 + 416);
      __int128 v27 = *(_OWORD *)(v0 + 384);
      char v17 = swift_isUniquelyReferenced_nonNull_native(v2);
      sub_10005C260(49LL, 0xE100000000000000LL, 0x562D747065636341LL, 0xEE006E6F69737265LL, v17);
      swift_bridgeObjectRelease();
      char v18 = swift_isUniquelyReferenced_nonNull_native(v2);
      sub_10005C260(0xD000000000000010LL, 0x8000000100854B80LL, 0x2D746E65746E6F43LL, 0xEC00000065707954LL, v18);
      *(void *)(v0 + 272) = v2;
      swift_bridgeObjectRelease();
      *(void *)(v0 + swift_weakDestroy(v0 + 16) = v16;
      *(void *)(v0 + 24) = v15;
      *(void *)(v0 + 32) = v14;
      *(void *)(v0 + 40) = v13;
      *(void *)(v0 + 48) = v11;
      *(void *)(v0 + 56) = v12;
      *(_OWORD *)(v0 + 64) = v27;
      *(_OWORD *)(v0 + 80) = v28;
      *(_OWORD *)(v0 + 96) = v29;
      *(void *)(v0 + 112) = v30;
      *(void *)(v0 + 120) = v31;
      *(_BYTE *)(v0 + 128) = v32;
      *(void *)(v0 + 136) = v33;
      uint64_t v19 = type metadata accessor for JSONEncoder(0LL);
      swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
      *(void *)(v0 + 480) = JSONEncoder.init()();
      __int128 v20 = *(_OWORD *)(v0 + 96);
      *(_OWORD *)(v0 + 208) = *(_OWORD *)(v0 + 80);
      *(_OWORD *)(v0 + 224) = v20;
      __int128 v21 = *(_OWORD *)(v0 + 128);
      *(_OWORD *)(v0 + 240) = *(_OWORD *)(v0 + 112);
      *(_OWORD *)(v0 + 256) = v21;
      __int128 v22 = *(_OWORD *)(v0 + 32);
      *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 16);
      *(_OWORD *)(v0 + 160) = v22;
      __int128 v23 = *(_OWORD *)(v0 + 64);
      *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 48);
      *(_OWORD *)(v0 + 192) = v23;
      unint64_t v24 = sub_1001C78A8();
      *(void *)(v0 + 488) = dispatch thunk of JSONEncoder.encode<A>(_:)( v0 + 144,  &type metadata for SecureLocationsFetchBody,  v24);
      *(void *)(v0 + 496) = v25;
      sub_1001C78EC((uint64_t *)(v0 + 16));
      uint64_t v34 = (uint64_t (__cdecl *)())((char *)&dword_1009AD0A0 + dword_1009AD0A0);
      os_log_type_t v26 = (void *)swift_task_alloc(unk_1009AD0A4);
      *(void *)(v0 + 504) = v26;
      *os_log_type_t v26 = v0;
      v26[1] = sub_1001C736C;
      return (id)v34();
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    uint64_t v10 = *(void **)(v0 + 328);
    swift_release();
    sub_1001C7970(v10);
    swift_bridgeObjectRelease();
    swift_task_dealloc(*(void *)(v0 + 472));
    return (id)(*(uint64_t (**)(void, void, void))(v0 + 8))(0LL, 0LL, 0LL);
  }

  return result;
}

uint64_t sub_1001C736C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 504);
  *(void *)(v3 + 512) = a1;
  *(void *)(v3 + 520) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_1001C73CC, 0LL, 0LL);
}

uint64_t sub_1001C73CC()
{
  unint64_t v1 = v0[65];
  uint64_t v2 = v0[64];
  uint64_t v4 = v0[61];
  unint64_t v3 = v0[62];
  uint64_t v6 = v0[58];
  uint64_t v5 = v0[59];
  uint64_t v7 = v0[57];
  v0[37] = v2;
  v0[38] = v1;
  sub_10001736C(v2, v1);
  sub_10001736C(v4, v3);
  sub_1004A8638(v4, v3);
  sub_100016F9C(v4, v3);
  sub_100016F9C(v2, v1);
  uint64_t v9 = v0[37];
  uint64_t v8 = v0[38];
  v0[66] = v9;
  v0[67] = v8;
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  uint64_t v10 = Data.hash(algorithm:)(v5, v9, v8);
  uint64_t v12 = v11;
  v0[68] = v10;
  v0[69] = v11;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v15 = (char *)&dword_1009AD098 + dword_1009AD098;
  uint64_t v13 = (void *)swift_task_alloc(unk_1009AD09C);
  v0[70] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_1001C74FC;
  return ((uint64_t (*)(uint64_t, uint64_t, void))v15)(v10, v12, v0[42]);
}

uint64_t sub_1001C74FC(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 560LL);
  *(void *)(*(void *)v2 + 568LL) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_1001C7670;
  }

  else
  {
    unint64_t v7 = v4[69];
    uint64_t v8 = v4[68];
    v4[72] = a1;
    sub_100016F9C(v8, v7);
    uint64_t v6 = sub_1001C757C;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1001C757C()
{
  uint64_t v1 = *(void *)(v0 + 576);
  uint64_t v2 = *(void *)(v0 + 568);
  uint64_t v3 = *(void *)(v0 + 272);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  uint64_t v11 = v3;
  *(void *)(v0 + 272) = 0x8000000000000000LL;
  sub_100129198(v1, (uint64_t)sub_1003F68BC, 0LL, isUniquelyReferenced_nonNull_native, &v11);
  if (v2) {
    return swift_bridgeObjectRelease();
  }
  unint64_t v6 = *(void *)(v0 + 536);
  uint64_t v7 = *(void *)(v0 + 528);
  *(void *)(v0 + 272) = v11;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_100016F9C(v7, v6);
  uint64_t v8 = *(void *)(v0 + 272);
  uint64_t v10 = *(void *)(v0 + 488);
  uint64_t v9 = *(void *)(v0 + 496);
  swift_task_dealloc(*(void *)(v0 + 472));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v8, v10, v9);
}

uint64_t sub_1001C7670()
{
  unint64_t v1 = *(void *)(v0 + 536);
  uint64_t v2 = *(void *)(v0 + 528);
  sub_100016F9C(*(void *)(v0 + 544), *(void *)(v0 + 552));
  sub_100016F9C(v2, v1);
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v3 = *(void *)(v0 + 568);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10000A720(v4, (uint64_t)qword_100A2AE08);
  swift_errorRetain(v3);
  uint64_t v5 = swift_errorRetain(v3);
  unint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter(v6);
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 568);
  if (v8)
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v10 = 138543362;
    swift_errorRetain(v9);
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(void *)(v0 + 312) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v10 + 4, v10 + 12);
    *uint64_t v11 = v12;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "Failed to generate fetch attestation header: %{public}@.",  v10,  0xCu);
    uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v11, 1LL, v13);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_release();
    swift_release();

    swift_errorRelease(v9);
  }

  else
  {
    swift_release();
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    swift_release();
  }

  uint64_t v14 = *(void *)(v0 + 272);
  uint64_t v16 = *(void *)(v0 + 488);
  uint64_t v15 = *(void *)(v0 + 496);
  swift_task_dealloc(*(void *)(v0 + 472));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v14, v16, v15);
}

unint64_t sub_1001C78A8()
{
  unint64_t result = qword_1009A5548;
  if (!qword_1009A5548)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F5684, &type metadata for SecureLocationsFetchBody);
    atomic_store(result, (unint64_t *)&qword_1009A5548);
  }

  return result;
}

uint64_t *sub_1001C78EC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[6];
  uint64_t v6 = a1[7];
  uint64_t v7 = a1[12];
  swift_bridgeObjectRelease(a1[15]);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void *sub_1001C7970(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  uint64_t v6 = a1[11];
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t destroy for SecureLocationsFetchResponseBody(void *a1)
{
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t initializeWithCopy for SecureLocationsFetchResponseBody(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t *assignWithCopy for SecureLocationsFetchResponseBody(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a1[3];
  uint64_t v9 = a2[3];
  a1[3] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  uint64_t v10 = a2[4];
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  a1[4] = v10;
  return a1;
}

__n128 initializeWithTake for AnalyticsEvent.DiscreteType(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  return result;
}

uint64_t *assignWithTake for SecureLocationsFetchResponseBody(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  a1[1] = a2[1];
  swift_bridgeObjectRelease(a1[2]);
  uint64_t v5 = a1[3];
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  swift_bridgeObjectRelease(v5);
  a1[4] = a2[4];
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureLocationsFetchResponseBody(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsFetchResponseBody(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 41) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsFetchResponseBody()
{
  return &type metadata for SecureLocationsFetchResponseBody;
}

uint64_t destroy for SecureLocationsFetchBody(void *a1)
{
  return swift_bridgeObjectRelease(a1[15]);
}

uint64_t initializeWithCopy for SecureLocationsFetchBody(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v6 = a2[2];
  uint64_t v5 = a2[3];
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  *(void *)(a1 + 24) = v5;
  uint64_t v8 = a2[4];
  uint64_t v7 = a2[5];
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v7;
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  uint64_t v11 = a2[8];
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(void *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  *(void *)(a1 + 80) = a2[10];
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  uint64_t v13 = a2[12];
  uint64_t v12 = a2[13];
  *(void *)(a1 + 96) = v13;
  *(void *)(a1 + 104) = v12;
  uint64_t v14 = a2[15];
  *(void *)(a1 + 120) = v14;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  return a1;
}

uint64_t *assignWithCopy for SecureLocationsFetchBody(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[5] = a2[5];
  uint64_t v10 = a2[6];
  uint64_t v11 = a1[6];
  a1[6] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a2[7];
  uint64_t v13 = a1[7];
  a1[7] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = a2[8];
  *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
  a1[8] = v14;
  LOBYTE(v14) = *((_BYTE *)a2 + 88);
  a1[10] = a2[10];
  *((_BYTE *)a1 + 88) = v14;
  uint64_t v15 = a2[12];
  uint64_t v16 = a1[12];
  a1[12] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = a2[13];
  *((_BYTE *)a1 + 112) = *((_BYTE *)a2 + 112);
  a1[13] = v17;
  uint64_t v18 = a2[15];
  uint64_t v19 = a1[15];
  a1[15] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  return a1;
}

__n128 initializeWithTake for SecureLocationsFetchBody(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  __n128 result = (__n128)a2[4];
  __int128 v6 = a2[5];
  __int128 v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t *assignWithTake for SecureLocationsFetchBody(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a2[2];
  uint64_t v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a2[4];
  uint64_t v8 = a1[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease(v8);
  a1[5] = a2[5];
  swift_bridgeObjectRelease(a1[6]);
  uint64_t v9 = a1[7];
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  swift_bridgeObjectRelease(v9);
  a1[8] = a2[8];
  *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
  a1[10] = a2[10];
  *((_BYTE *)a1 + 88) = *((_BYTE *)a2 + 88);
  uint64_t v10 = a1[12];
  a1[12] = a2[12];
  swift_bridgeObjectRelease(v10);
  a1[13] = a2[13];
  *((_BYTE *)a1 + 112) = *((_BYTE *)a2 + 112);
  uint64_t v11 = a1[15];
  a1[15] = a2[15];
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureLocationsFetchBody(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 128)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsFetchBody(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0LL;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 128) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsFetchBody()
{
  return &type metadata for SecureLocationsFetchBody;
}

ValueMetadata *type metadata accessor for SecureLocationsFetchRequest()
{
  return &type metadata for SecureLocationsFetchRequest;
}

uint64_t destroy for SecureLocationsFetchData(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

uint64_t initializeWithCopy for SecureLocationsFetchData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for SecureLocationsFetchData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for AccessoryNonOwnerCommand(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SecureLocationsFetchData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease(*(void *)(a1 + 8));
  uint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureLocationsFetchData(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsFetchData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + swift_weakDestroy(v0 + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsFetchData()
{
  return &type metadata for SecureLocationsFetchData;
}

uint64_t sub_1001C81D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001C81E4);
}

uint64_t sub_1001C81E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001C81F4);
}

uint64_t type metadata accessor for SecureLocationsFetchEndpoint(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009A55A8, (uint64_t)&nominal type descriptor for SecureLocationsFetchEndpoint);
}

uint64_t sub_1001C820C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001C8218);
}

uint64_t sub_1001C821C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001C8228);
}

uint64_t type metadata accessor for OwnedDeviceFetchEndpoint(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009A5638, (uint64_t)&nominal type descriptor for OwnedDeviceFetchEndpoint);
}

unint64_t sub_1001C8240()
{
  unint64_t result = qword_1009A5678;
  if (!qword_1009A5678)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F5B1C, &type metadata for SecureLocationsFetchBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5678);
  }

  return result;
}

unint64_t sub_1001C8284()
{
  unint64_t result = qword_1009A5690;
  if (!qword_1009A5690)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F55CC, &type metadata for SecureLocationsFetchData);
    atomic_store(result, (unint64_t *)&qword_1009A5690);
  }

  return result;
}

unint64_t sub_1001C82C8()
{
  unint64_t result = qword_1009A5698;
  if (!qword_1009A5698)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F6E74, &type metadata for SecureLocationsClientContext);
    atomic_store(result, (unint64_t *)&qword_1009A5698);
  }

  return result;
}

uint64_t sub_1001C830C(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6863746566LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v5 = 0xE500000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6863746566LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6F43746E65696C63LL && a2 == 0xED0000747865746ELL)
  {
    swift_bridgeObjectRelease(0xED0000747865746ELL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F43746E65696C63LL, 0xED0000747865746ELL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1001C8418(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEF64616F6C796150LL)
  {
    unint64_t v5 = 0xEF64616F6C796150LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEF64616F6C796150LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6F43737574617473LL && a2 == 0xEA00000000006564LL)
  {
    unint64_t v7 = 0xEA00000000006564LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43737574617473LL, 0xEA00000000006564LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x6D4664656C696166LL && a2 == 0xEB00000000736449LL)
  {
    unint64_t v8 = 0xEB00000000736449LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D4664656C696166LL, 0xEB00000000736449LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x65566769666E6F63LL && a2 == 0xED00006E6F697372LL)
  {
    swift_bridgeObjectRelease(0xED00006E6F697372LL);
    return 3LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65566769666E6F63LL, 0xED00006E6F697372LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_1001C863C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100004AEC(&qword_1009A56A0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1001C8950();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SecureLocationsFetchResponseBody.CodingKeys,  &type metadata for SecureLocationsFetchResponseBody.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v12 = sub_100004AEC(&qword_1009A1EC8);
  char v31 = 0;
  uint64_t v13 = sub_1001C8A7C( (unint64_t *)&qword_1009A56B0,  &qword_1009A1EC8,  (void (*)(void))sub_1001C8994,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v32, v12, &v31, v5, v12, v13);
  uint64_t v14 = v32;
  LOBYTE(v32) = 1;
  swift_bridgeObjectRetain(v14);
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)(&v32, v5);
  uint64_t v17 = v16;
  uint64_t v30 = v15;
  uint64_t v18 = sub_100004AEC(&qword_1009AED50);
  char v31 = 2;
  uint64_t v19 = sub_1001C89D8( (unint64_t *)&qword_1009A56C0,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  swift_bridgeObjectRetain(v17);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v18, &v31, v5, v18, v19);
  uint64_t v20 = v32;
  LOBYTE(v32) = 3;
  uint64_t v29 = v20;
  swift_bridgeObjectRetain(v20);
  uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v32, v5);
  __int128 v22 = v8;
  char v24 = v23;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v22, v5);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  uint64_t v25 = v29;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v27 = v30;
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = v27;
  *(void *)(a2 + swift_weakDestroy(v0 + 16) = v17;
  *(void *)(a2 + 24) = v25;
  *(void *)(a2 + 32) = v21;
  *(_BYTE *)(a2 + 40) = v24 & 1;
  return result;
}

unint64_t sub_1001C8950()
{
  unint64_t result = qword_1009A56A8;
  if (!qword_1009A56A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F5ACC, &type metadata for SecureLocationsFetchResponseBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A56A8);
  }

  return result;
}

unint64_t sub_1001C8994()
{
  unint64_t result = qword_1009A56B8;
  if (!qword_1009A56B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F8138, &type metadata for SecureLocationsEncodedPayload);
    atomic_store(result, (unint64_t *)&qword_1009A56B8);
  }

  return result;
}

uint64_t sub_1001C89D8(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_100004B78(&qword_1009AED50);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1001C8A38()
{
  unint64_t result = qword_1009A56E0;
  if (!qword_1009A56E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F5A7C, &type metadata for SecureLocationsFetchData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A56E0);
  }

  return result;
}

uint64_t sub_1001C8A7C(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v8 = sub_100004B78(a2);
    a3();
    uint64_t result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1001C8AE0()
{
  unint64_t result = qword_1009A56E8;
  if (!qword_1009A56E8)
  {
    type metadata accessor for SPSecureLocationSubscriptionMode(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SPSecureLocationSubscriptionMode, v1);
    atomic_store(result, (unint64_t *)&qword_1009A56E8);
  }

  return result;
}

unint64_t sub_1001C8B28()
{
  unint64_t result = qword_1009A56F8;
  if (!qword_1009A56F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F5A54, &type metadata for SecureLocationsSubscriptionIntent);
    atomic_store(result, (unint64_t *)&qword_1009A56F8);
  }

  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsFetchData.CodingKeys()
{
  return &type metadata for SecureLocationsFetchData.CodingKeys;
}

ValueMetadata *type metadata accessor for SecureLocationsFetchResponseBody.CodingKeys()
{
  return &type metadata for SecureLocationsFetchResponseBody.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SecureLocationsFetchBody.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1001C8BDC + 4 * byte_1007F54F1[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001C8C10 + 4 * byte_1007F54EC[v4]))();
}

uint64_t sub_1001C8C10(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C8C18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001C8C20LL);
  }
  return result;
}

uint64_t sub_1001C8C2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001C8C34LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1001C8C38(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C8C40(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsFetchBody.CodingKeys()
{
  return &type metadata for SecureLocationsFetchBody.CodingKeys;
}

uint64_t _s12searchpartyd33SecureLocationsSubscriptionIntentOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1001C8CA8 + 4 * byte_1007F54FB[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1001C8CDC + 4 * byte_1007F54F6[v4]))();
}

uint64_t sub_1001C8CDC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C8CE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001C8CECLL);
  }
  return result;
}

uint64_t sub_1001C8CF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001C8D00LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1001C8D04(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C8D0C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsSubscriptionIntent()
{
  return &type metadata for SecureLocationsSubscriptionIntent;
}

unint64_t sub_1001C8D2C()
{
  unint64_t result = qword_1009A5700;
  if (!qword_1009A5700)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F5804, &type metadata for SecureLocationsSubscriptionIntent);
    atomic_store(result, (unint64_t *)&qword_1009A5700);
  }

  return result;
}

unint64_t sub_1001C8D74()
{
  unint64_t result = qword_1009A5708;
  if (!qword_1009A5708)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F58BC, &type metadata for SecureLocationsFetchBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5708);
  }

  return result;
}

unint64_t sub_1001C8DBC()
{
  unint64_t result = qword_1009A5710;
  if (!qword_1009A5710)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F5974, &type metadata for SecureLocationsFetchResponseBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5710);
  }

  return result;
}

unint64_t sub_1001C8E04()
{
  unint64_t result = qword_1009A5718;
  if (!qword_1009A5718)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F5A2C, &type metadata for SecureLocationsFetchData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5718);
  }

  return result;
}

unint64_t sub_1001C8E4C()
{
  unint64_t result = qword_1009A5720;
  if (!qword_1009A5720)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F599C, &type metadata for SecureLocationsFetchData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5720);
  }

  return result;
}

unint64_t sub_1001C8E94()
{
  unint64_t result = qword_1009A5728;
  if (!qword_1009A5728)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F59C4, &type metadata for SecureLocationsFetchData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5728);
  }

  return result;
}

unint64_t sub_1001C8EDC()
{
  unint64_t result = qword_1009A5730;
  if (!qword_1009A5730)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F58E4, &type metadata for SecureLocationsFetchResponseBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5730);
  }

  return result;
}

unint64_t sub_1001C8F24()
{
  unint64_t result = qword_1009A5738;
  if (!qword_1009A5738)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F590C, &type metadata for SecureLocationsFetchResponseBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5738);
  }

  return result;
}

unint64_t sub_1001C8F6C()
{
  unint64_t result = qword_1009A5740;
  if (!qword_1009A5740)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F582C, &type metadata for SecureLocationsFetchBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5740);
  }

  return result;
}

unint64_t sub_1001C8FB4()
{
  unint64_t result = qword_1009A5748;
  if (!qword_1009A5748)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F5854, &type metadata for SecureLocationsFetchBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5748);
  }

  return result;
}

unint64_t sub_1001C8FF8()
{
  unint64_t result = qword_1009A5750;
  if (!qword_1009A5750)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F578C, &type metadata for SecureLocationsSubscriptionIntent);
    atomic_store(result, (unint64_t *)&qword_1009A5750);
  }

  return result;
}

unint64_t sub_1001C903C(unint64_t a1, uint64_t a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v23 + ((v5 + 16LL) & ~(unint64_t)v5);
    swift_retain();
  }

  else
  {
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    sub_10001736C(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    uint64_t v9 = a3[6];
    uint64_t v10 = a1 + v9;
    uint64_t v11 = a2 + v9;
    uint64_t v12 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
    uint64_t v13 = a3[7];
    uint64_t v14 = a1 + v13;
    uint64_t v15 = a2 + v13;
    uint64_t v16 = type metadata accessor for MACAddress(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16LL))(v14, v15, v16);
    uint64_t v17 = a3[9];
    *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
    uint64_t v18 = (void *)(a1 + v17);
    uint64_t v19 = (void *)(a2 + v17);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = a3[10];
    uint64_t v22 = *(void *)(a2 + v21);
    *(void *)(a1 + v21) = v22;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v22);
  }

  return a1;
}

uint64_t sub_1001C9150(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001C91E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_10001736C(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
  uint64_t v16 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = v18[1];
  void *v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = a3[10];
  uint64_t v21 = *(void *)(a2 + v20);
  *(void *)(a1 + v20) = v21;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v21);
  return a1;
}

uint64_t sub_1001C92CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_10001736C(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  sub_100016F9C(v8, v9);
  uint64_t v10 = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24LL))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24LL))(v16, v17, v18);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  uint64_t v19 = a3[9];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  void *v20 = *v21;
  uint64_t v22 = v21[1];
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[10];
  uint64_t v24 = *(void *)(a2 + v23);
  *(void *)(a1 + v23) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001C93DC(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))(v11, v12, v13);
  uint64_t v14 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_1001C94A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016F9C(v6, v7);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40LL))(v13, v14, v15);
  uint64_t v16 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (uint64_t *)(a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  void *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001C9590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001C959C);
}

uint64_t sub_1001C959C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }

  uint64_t v10 = type metadata accessor for MACAddress(0LL);
  uint64_t v7 = *(void *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v10;
    uint64_t v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }

  unint64_t v12 = *(void *)(a1 + a3[9] + 8);
  if (v12 >= 0xFFFFFFFF) {
    LODWORD(v12) = -1;
  }
  return (v12 + 1);
}

uint64_t sub_1001C9644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001C9650);
}

uint64_t sub_1001C9650(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a4[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }

  uint64_t result = type metadata accessor for MACAddress(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a4[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }

  *(void *)(a1 + a4[9] + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for OwnedBeaconGroup(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009A57B8, (uint64_t)&nominal type descriptor for OwnedBeaconGroup);
}

uint64_t sub_1001C9708(uint64_t a1)
{
  v5[0] = &unk_1007F5BD8;
  v5[1] = &unk_1007F5BF0;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[2] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for MACAddress(319LL);
    if (v4 <= 0x3F)
    {
      v5[3] = *(void *)(result - 8) + 64LL;
      v5[4] = &unk_1007F5C08;
      void v5[5] = &unk_1007F5C20;
      v5[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_initStructMetadata(a1, 256LL, 7LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.SerialNumber()
{
  return &type metadata for OwnedBeaconGroup.SerialNumber;
}

void sub_1001C97D0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v306 = a1;
  uint64_t v298 = type metadata accessor for UUID(0LL);
  uint64_t v292 = *(void *)(v298 - 8);
  uint64_t v3 = __chkstk_darwin(v298);
  v283 = (char *)&v263 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v3);
  v285 = (char *)&v263 - v6;
  __chkstk_darwin(v5);
  v291 = (char *)&v263 - v7;
  uint64_t v8 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v8);
  v290 = (char *)&v263 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for MACAddress(0LL);
  uint64_t v301 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  v282 = (char *)&v263 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  v281 = (char *)&v263 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  v280 = (char *)&v263 - v16;
  __chkstk_darwin(v15);
  v279 = (char *)&v263 - v17;
  uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v295 = (uint64_t)&v263 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v294 = (uint64_t)&v263 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v286 = (uint64_t)&v263 - v24;
  __chkstk_darwin(v23);
  uint64_t v293 = (uint64_t)&v263 - v25;
  uint64_t v26 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
  uint64_t v299 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  v296 = (char *)&v263 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = sub_100004AEC((uint64_t *)&unk_1009A58D0);
  uint64_t v29 = __chkstk_darwin(v28);
  v305 = (uint64_t *)((char *)&v263 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v29);
  v304 = (uint64_t *)((char *)&v263 - v31);
  uint64_t v32 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v33 = __chkstk_darwin(v32);
  uint64_t v277 = (uint64_t)&v263 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v284 = (uint64_t)&v263 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v276 = (uint64_t)&v263 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v275 = (uint64_t)&v263 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  v307 = (char *)&v263 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v308 = (uint64_t)&v263 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  uint64_t v47 = (char *)&v263 - v46;
  uint64_t v48 = __chkstk_darwin(v45);
  uint64_t v50 = (char *)&v263 - v49;
  uint64_t v51 = __chkstk_darwin(v48);
  __int128 v53 = (char *)&v263 - v52;
  uint64_t v54 = __chkstk_darwin(v51);
  unint64_t v56 = (char *)&v263 - v55;
  __chkstk_darwin(v54);
  uint64_t v58 = (char *)&v263 - v57;
  sub_10001DC4C(v1, (uint64_t)&v263 - v57, type metadata accessor for OwnedBeaconGroup);
  sub_10001DC4C(v1, (uint64_t)v56, type metadata accessor for OwnedBeaconGroup);
  v288 = v53;
  sub_10001DC4C(v1, (uint64_t)v53, type metadata accessor for OwnedBeaconGroup);
  sub_10001DC4C(v1, (uint64_t)v50, type metadata accessor for OwnedBeaconGroup);
  v300 = v47;
  uint64_t v59 = sub_10001DC4C(v1, (uint64_t)v47, type metadata accessor for OwnedBeaconGroup);
  uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
  os_log_type_t v61 = static os_log_type_t.default.getter(v60);
  v289 = v60;
  LODWORD(v278) = v61;
  BOOL v62 = os_log_type_enabled(v60, v61);
  uint64_t v297 = v2;
  uint64_t v63 = v298;
  uint64_t v302 = v10;
  uint64_t v303 = v26;
  uint64_t v287 = v32;
  if (v62)
  {
    uint64_t v64 = v26;
    uint64_t v65 = swift_slowAlloc(78LL, -1LL);
    uint64_t v66 = swift_slowAlloc(128LL, -1LL);
    *(void *)&__int128 v274 = v66;
    *(_DWORD *)uint64_t v65 = 141559811;
    uint64_t v309 = 1752392040LL;
    uint64_t v310 = v66;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, &v310, v65 + 4, v65 + 12);
    *(_WORD *)(v65 + 12) = 2081;
    uint64_t v67 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter(v63, v67);
    uint64_t v309 = sub_1003F11D4(v68, v69, &v310);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, &v310, v65 + 14, v65 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v58, type metadata accessor for OwnedBeaconGroup);
    *(_WORD *)(v65 + 22) = 2160;
    uint64_t v309 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, &v310, v65 + 24, v65 + 32);
    *(_WORD *)(v65 + 32) = 2081;
    uint64_t v70 = sub_100007864( &qword_1009A6E60,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
    uint64_t v71 = dispatch thunk of CustomStringConvertible.description.getter(v302, v70);
    uint64_t v309 = sub_1003F11D4(v71, v72, &v310);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, &v310, v65 + 34, v65 + 42);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v56, type metadata accessor for OwnedBeaconGroup);
    *(_WORD *)(v65 + 42) = 2080;
    uint64_t v73 = (uint64_t)v288;
    uint64_t v74 = *(void *)&v288[*(int *)(v32 + 40)];
    unint64_t v75 = sub_1001D3324();
    uint64_t v76 = swift_bridgeObjectRetain(v74);
    uint64_t v77 = Dictionary.description.getter(v76, &type metadata for OwnedBeaconGroup.SerialNumber, v64, v75);
    unint64_t v79 = v78;
    swift_bridgeObjectRelease();
    uint64_t v309 = sub_1003F11D4(v77, v79, &v310);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, &v310, v65 + 44, v65 + 52);
    swift_bridgeObjectRelease();
    sub_100018C68(v73, type metadata accessor for OwnedBeaconGroup);
    *(_WORD *)(v65 + 52) = 1024;
    LODWORD(v74) = v50[*(int *)(v32 + 32)];
    sub_100018C68((uint64_t)v50, type metadata accessor for OwnedBeaconGroup);
    LODWORD(v309) = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, (char *)&v309 + 4, v65 + 54, v65 + 58);
    *(_WORD *)(v65 + 58) = 2160;
    uint64_t v80 = v297;
    uint64_t v309 = 1752392040LL;
    uint64_t v81 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, &v310, v65 + 60, v65 + 68);
    *(_WORD *)(v65 + 68) = 2081;
    uint64_t v82 = (uint64_t)v300;
    uint64_t v83 = MACAddress.udid.getter(v81);
    uint64_t v309 = sub_1003F11D4(v83, v84, &v310);
    uint64_t v2 = v80;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, &v310, v65 + 70, v65 + 78);
    swift_bridgeObjectRelease();
    sub_100018C68(v82, type metadata accessor for OwnedBeaconGroup);
    v85 = v289;
    _os_log_impl( (void *)&_mh_execute_header,  v289,  (os_log_type_t)v278,  "<id:%{private,mask.hash}s mac:%{private,mask.hash}s beaconMap:%s fmns:%{BOOL}d udid: %{private,mask.hash}s>",  (uint8_t *)v65,  0x4Eu);
    uint64_t v86 = v274;
    swift_arrayDestroy(v274, 4LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v86, -1LL, -1LL);
    swift_slowDealloc(v65, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v50, type metadata accessor for OwnedBeaconGroup);

    sub_100018C68((uint64_t)v58, type metadata accessor for OwnedBeaconGroup);
    sub_100018C68((uint64_t)v56, type metadata accessor for OwnedBeaconGroup);
    sub_100018C68((uint64_t)v288, type metadata accessor for OwnedBeaconGroup);
    sub_100018C68((uint64_t)v300, type metadata accessor for OwnedBeaconGroup);
  }

  uint64_t v88 = (uint64_t)v307;
  uint64_t v87 = v308;
  sub_10001DC4C(v2, v308, type metadata accessor for OwnedBeaconGroup);
  uint64_t v89 = sub_10001DC4C(v2, v88, type metadata accessor for OwnedBeaconGroup);
  v90 = (os_log_s *)Logger.logObject.getter(v89);
  os_log_type_t v91 = static os_log_type_t.default.getter(v90);
  if (os_log_type_enabled(v90, v91))
  {
    uint64_t v92 = swift_slowAlloc(32LL, -1LL);
    uint64_t v93 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v92 = 141558531;
    uint64_t v309 = 1752392040LL;
    uint64_t v310 = v93;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, &v310, v92 + 4, v92 + 12);
    *(_WORD *)(v92 + 12) = 2081;
    uint64_t v94 = v287;
    uint64_t v95 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v96 = dispatch thunk of CustomStringConvertible.description.getter(v298, v95);
    uint64_t v309 = sub_1003F11D4(v96, v97, &v310);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, &v310, v92 + 14, v92 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68(v87, type metadata accessor for OwnedBeaconGroup);
    *(_WORD *)(v92 + 22) = 2048;
    uint64_t v98 = *(void *)(*(void *)(v88 + *(int *)(v94 + 40)) + 16LL);
    sub_100018C68(v88, type metadata accessor for OwnedBeaconGroup);
    uint64_t v309 = v98;
    uint64_t v2 = v297;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, &v310, v92 + 24, v92 + 32);
    _os_log_impl( (void *)&_mh_execute_header,  v90,  v91,  "BeaconMap for group: %{private,mask.hash}s (%ld)",  (uint8_t *)v92,  0x20u);
    swift_arrayDestroy(v93, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v93, -1LL, -1LL);
    swift_slowDealloc(v92, -1LL, -1LL);

    uint64_t v99 = v94;
    uint64_t v100 = (uint64_t)v296;
    v101 = v305;
  }

  else
  {
    sub_100018C68(v88, type metadata accessor for OwnedBeaconGroup);

    sub_100018C68(v87, type metadata accessor for OwnedBeaconGroup);
    uint64_t v100 = (uint64_t)v296;
    v101 = v305;
    uint64_t v99 = v287;
  }

  uint64_t v102 = v292;
  v103 = v291;
  uint64_t v104 = *(void *)(v2 + *(int *)(v99 + 40));
  uint64_t v105 = *(void *)(v104 + 64);
  uint64_t v278 = v104 + 64;
  uint64_t v106 = 1LL << *(_BYTE *)(v104 + 32);
  uint64_t v107 = -1LL;
  if (v106 < 64) {
    uint64_t v107 = ~(-1LL << v106);
  }
  unint64_t v108 = v107 & v105;
  unint64_t v109 = (unint64_t)(v106 + 63) >> 6;
  v289 = (os_log_s *)&v310;
  uint64_t v264 = v109 - 1;
  uint64_t v110 = swift_bridgeObjectRetain(v104);
  unint64_t v111 = v108;
  uint64_t v112 = 0LL;
  v288 = (char *)v109;
  unint64_t v265 = v109 - 5;
  v300 = (char *)v110;
  uint64_t v266 = v110 + 104;
  *(void *)&__int128 v113 = 141558787LL;
  __int128 v269 = v113;
  v268 = (char *)&type metadata for Any + 8;
  *(void *)&__int128 v113 = 141559299LL;
  __int128 v273 = v113;
  *(void *)&__int128 v113 = 141559811LL;
  __int128 v267 = v113;
  *(void *)&__int128 v113 = 141558275LL;
  __int128 v274 = v113;
  v114 = v103;
  while (1)
  {
    if (v111)
    {
      uint64_t v115 = v102;
      v116 = v114;
      v307 = (char *)((v111 - 1) & v111);
      uint64_t v308 = v112;
      unint64_t v117 = __clz(__rbit64(v111)) | (v112 << 6);
      goto LABEL_14;
    }

    uint64_t v125 = v112 + 1;
    if (__OFADD__(v112, 1LL)) {
      break;
    }
    if (v125 >= (uint64_t)v288)
    {
      uint64_t v127 = v112;
LABEL_20:
      uint64_t v128 = sub_100004AEC(&qword_1009A2570);
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v128 - 8) + 56LL))( v101,  1LL,  1LL,  v128);
      v307 = 0LL;
      uint64_t v308 = v127;
      v124 = v304;
      goto LABEL_21;
    }

    unint64_t v126 = *(void *)(v278 + 8 * v125);
    if (!v126)
    {
      uint64_t v127 = v112 + 1;
      unint64_t v126 = *(void *)(v278 + 8 * (v112 + 2));
      if (v126)
      {
        uint64_t v125 = v112 + 2;
      }

      else
      {
        uint64_t v127 = v112 + 2;
        unint64_t v126 = *(void *)(v278 + 8 * (v112 + 3));
        if (v126)
        {
          uint64_t v125 = v112 + 3;
        }

        else
        {
          uint64_t v125 = v112 + 4;
          uint64_t v127 = v112 + 3;
          unint64_t v126 = *(void *)(v278 + 8 * v125);
          if (!v126)
          {
            while (v265 != v112)
            {
              unint64_t v126 = *(void *)(v266 + 8 * v112++);
              if (v126)
              {
                uint64_t v125 = v112 + 4;
                goto LABEL_18;
              }
            }

            uint64_t v127 = v264;
            goto LABEL_20;
          }
        }
      }
    }

uint64_t sub_1001CB708()
{
  uint64_t v1 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v24 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v24 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v24 - v12;
  uint64_t v14 = type metadata accessor for OwnedBeaconGroup(0LL);
  if (*(_BYTE *)(v0 + *(int *)(v14 + 32)) == 1)
  {
    swift_bridgeObjectRetain(*(void *)(v0 + *(int *)(v14 + 40)));
    uint64_t v16 = sub_1002FE4D4(v15);
    swift_bridgeObjectRelease();
    uint64_t v17 = v16[2];
    if (v17)
    {
      uint64_t v18 = (uint64_t)v16 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
      uint64_t v19 = *(void *)(v2 + 72);
      uint64_t v25 = v16;
      swift_retain();
      while (1)
      {
        sub_10001DC4C(v18, (uint64_t)v13, type metadata accessor for OwnedBeaconGroup.PairingState);
        sub_10001DC4C((uint64_t)v13, (uint64_t)v11, type metadata accessor for OwnedBeaconGroup.PairingState);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v1);
        sub_100018C68((uint64_t)v11, type metadata accessor for OwnedBeaconGroup.PairingState);
        sub_10001DC4C((uint64_t)v13, (uint64_t)v8, type metadata accessor for OwnedBeaconGroup.PairingState);
        if (!EnumCaseMultiPayload) {
          break;
        }
        swift_storeEnumTagMultiPayload(v5, v1, 2LL);
        char v21 = sub_1001D5394((uint64_t)v8, (uint64_t)v5);
        sub_100018C68((uint64_t)v5, type metadata accessor for OwnedBeaconGroup.PairingState);
        sub_100018C68((uint64_t)v8, type metadata accessor for OwnedBeaconGroup.PairingState);
        sub_100018C68((uint64_t)v13, type metadata accessor for OwnedBeaconGroup.PairingState);
        if ((v21 & 1) != 0) {
          goto LABEL_11;
        }
        v18 += v19;
        if (!--v17)
        {
          swift_release_n(v25, 2LL);
          char v22 = 1;
          return v22 & 1;
        }
      }

      sub_100018C68((uint64_t)v8, type metadata accessor for OwnedBeaconGroup.PairingState);
      sub_100018C68((uint64_t)v13, type metadata accessor for OwnedBeaconGroup.PairingState);
LABEL_11:
      swift_release_n(v25, 2LL);
      char v22 = 0;
    }

    else
    {
      swift_release(v16);
      char v22 = 1;
    }
  }

  else
  {
    char v22 = sub_1001D11F4() ^ 1;
  }

  return v22 & 1;
}

uint64_t sub_1001CB944(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = sub_100004AEC(&qword_10099E310);
  __chkstk_darwin(v5);
  uint64_t v7 = &v28[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = &v28[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v10);
  uint64_t v14 = &v28[-v13];
  uint64_t v15 = *(void *)(v2 + *(int *)(type metadata accessor for OwnedBeaconGroup(0LL) + 40));
  if (!*(void *)(v15 + 16))
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1LL, 1LL, v8);
LABEL_7:
    sub_100015794((uint64_t)v7, &qword_10099E310);
    goto LABEL_8;
  }

  sub_10001736C(a1, a2);
  uint64_t v16 = sub_10030CFC0(a1, a2);
  if ((v17 & 1) != 0)
  {
    sub_10001DC4C( *(void *)(v15 + 56) + *(void *)(v9 + 72) * v16,  (uint64_t)v7,  type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v18 = 0LL;
  }

  else
  {
    uint64_t v18 = 1LL;
  }

  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, v18, 1LL, v8);
  sub_100016F9C(a1, a2);
  sub_10002218C((uint64_t)v7, (uint64_t)v14, type metadata accessor for OwnedBeaconGroup.PairingState);
  sub_10002218C((uint64_t)v14, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup.PairingState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v8);
  if (!EnumCaseMultiPayload)
  {
    uint64_t v27 = &v12[*(int *)(sub_100004AEC((uint64_t *)&unk_1009A5910) + 48)];
    int v19 = *v27;
    int v20 = v27[1];
    sub_100015794((uint64_t)v12, (uint64_t *)&unk_1009AE480);
    return v19 | (v20 << 8);
  }

  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v23 = (int *)sub_100004AEC((uint64_t *)&unk_1009A58E0);
    uint64_t v24 = (uint64_t)&v12[v23[12]];
    sub_1000182F0(*(void *)&v12[v23[16]], *(void *)&v12[v23[16] + 8]);
    uint64_t v25 = &v12[v23[24]];
    int v19 = *v25;
    int v20 = v25[1];
    sub_100015794(v24, (uint64_t *)&unk_1009AE480);
    uint64_t v26 = type metadata accessor for UUID(0LL);
    (*(void (**)(_BYTE *, uint64_t))(*(void *)(v26 - 8) + 8LL))(v12, v26);
    return v19 | (v20 << 8);
  }

void sub_1001CBBB8(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v118 = a2;
  uint64_t v3 = (void *)type metadata accessor for MACAddress(0LL);
  unint64_t v4 = *(v3 - 1);
  uint64_t v115 = v3;
  unint64_t v116 = v4;
  __chkstk_darwin(v3);
  uint64_t v6 = (int *)&v107[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress(0LL);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = &v107[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v8);
  uint64_t v12 = &v107[-v11];
  uint64_t v13 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v13);
  uint64_t v15 = &v107[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v16 = type metadata accessor for UUID(0LL);
  uint64_t v120 = *(void *)(v16 - 8);
  uint64_t v121 = v16;
  uint64_t v17 = __chkstk_darwin(v16);
  v119 = &v107[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v19 = CKRecord.recordType.getter(v17);
  if (v19 == 0x72476E6F63616542LL && v20 == 0xEB0000000070756FLL)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, 0x72476E6F63616542LL, 0xEB0000000070756FLL, 0LL);
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
    {
      unint64_t v56 = sub_1001D60F0();
      uint64_t v30 = swift_allocError(&type metadata for OwnedBeaconGroup.BeaconGroupConversionError, v56, 0LL, 0LL);
      *uint64_t v57 = 0;
      goto LABEL_13;
    }
  }

  id v22 = [a1 recordID];
  id v23 = [v22 recordName];

  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  uint64_t v26 = v25;

  UUID.init(uuidString:)(v24, v26);
  swift_bridgeObjectRelease();
  uint64_t v28 = v120;
  uint64_t v27 = v121;
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v120 + 48))(v15, 1LL, v121) == 1)
  {
    sub_100015794((uint64_t)v15, &qword_10099D8A0);
    unint64_t v29 = sub_1001D60F0();
    uint64_t v30 = swift_allocError(&type metadata for OwnedBeaconGroup.BeaconGroupConversionError, v29, 0LL, 0LL);
    *uint64_t v31 = 3;
LABEL_13:
    swift_willThrow(v30);

    return;
  }

  uint64_t v32 = *(void (**)(char *, _BYTE *, uint64_t))(v28 + 32);
  v32(v119, v15, v27);
  id v33 = [a1 encryptedValues];
  NSString v34 = String._bridgeToObjectiveC()();
  id v114 = v33;
  id v35 = [v33 objectForKeyedSubscript:v34];

  if (!v35
    || (id v124 = v35,
        uint64_t v37 = sub_100004AEC((uint64_t *)&unk_10099D910),
        uint64_t v36 = swift_dynamicCast(&v122, &v124, v37, &type metadata for Data, 6LL),
        (v36 & 1) == 0))
  {
    uint64_t v48 = static os_log_type_t.error.getter(v36);
    uint64_t v49 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v50 = swift_allocObject(v49, 72LL, 7LL);
    *(_OWORD *)(v50 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v50 + 56) = sub_100022898(0LL, (unint64_t *)&qword_10099D920, &OBJC_CLASS___CKRecord_ptr);
    *(void *)(v50 + 64) = sub_100022738();
    *(void *)(v50 + 32) = a1;
    sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
    id v51 = a1;
    uint64_t v52 = (void *)static OS_os_log.default.getter(v51);
    os_log(_:dso:log:_:_:)( v48,  &_mh_execute_header,  v52,  "Invalid Beacon Group (missing macAddress) - %@",  46LL,  2LL,  v50);
    swift_bridgeObjectRelease();

    unint64_t v53 = sub_1001D60F0();
    uint64_t v54 = swift_allocError(&type metadata for OwnedBeaconGroup.BeaconGroupConversionError, v53, 0LL, 0LL);
    _BYTE *v55 = 2;
    swift_willThrow(v54);
    swift_unknownObjectRelease(v114);

    (*(void (**)(char *, uint64_t))(v120 + 8))(v119, v121);
    return;
  }

  uint64_t v112 = v37;
  __int128 v113 = v6;
  unint64_t v111 = v32;
  uint64_t v38 = v122;
  unint64_t v39 = v123;
  uint64_t v40 = type metadata accessor for JSONDecoder(0LL);
  swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
  uint64_t v41 = sub_10001736C(v38, v39);
  uint64_t v42 = JSONDecoder.init()(v41);
  uint64_t v43 = sub_100007864( &qword_1009A58B8,  type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress,  (uint64_t)&unk_1007F63A8);
  uint64_t v44 = v117;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v7, v38, v39, v7, v43);
  if (v44)
  {
    sub_100016F9C(v38, v39);
    swift_release(v42);
    uint64_t v45 = v44;
    uint64_t v46 = v118;
    uint64_t v47 = v38;
  }

  else
  {
    uint64_t v117 = v38;
    uint64_t v58 = v38;
    unint64_t v59 = v39;
    sub_100016F9C(v58, v39);
    swift_release(v42);
    sub_10002218C((uint64_t)v10, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress);
    uint64_t v60 = *(void *)v12;
    char v61 = v12[8];
    if ((v61 & 1) != 0 || v60 < 2)
    {
      unint64_t v110 = v39;
      uint64_t v46 = v118;
      v118[2] = v60;
      *((_BYTE *)v46 + 24) = v61;
      uint64_t v70 = (int *)&v12[*(int *)(v7 + 20)];
      uint64_t v47 = v117;
      goto LABEL_23;
    }

    uint64_t v46 = v118;
    if (qword_10099B138 != -1) {
      swift_once(&qword_10099B138, sub_10012E678);
    }
    uint64_t v62 = type metadata accessor for Logger(0LL);
    uint64_t v63 = sub_10000A720(v62, (uint64_t)qword_100A2A200);
    uint64_t v64 = (os_log_s *)Logger.logObject.getter(v63);
    os_log_type_t v65 = static os_log_type_t.default.getter(v64);
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v66 = 134217984;
      uint64_t v46 = v118;
      uint64_t v122 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v66 + 4, v66 + 12);
      _os_log_impl( (void *)&_mh_execute_header,  v64,  v65,  "Ignoring unsupported OwnedBeaconGroup version: %ld > 1",  v66,  0xCu);
      uint64_t v67 = v66;
      unint64_t v59 = v39;
      swift_slowDealloc(v67, -1LL, -1LL);
    }

    unint64_t v68 = sub_1001D60F0();
    uint64_t v45 = swift_allocError(&type metadata for OwnedBeaconGroup.BeaconGroupConversionError, v68, 0LL, 0LL);
    *unint64_t v69 = 5;
    swift_willThrow(v45);
    sub_100018C68((uint64_t)v12, type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress);
    uint64_t v47 = v117;
    unint64_t v39 = v59;
  }

  v46[2] = 0LL;
  *((_BYTE *)v46 + 24) = 1;
  sub_10001736C(v47, v39);
  uint64_t v70 = v113;
  MACAddress.init(dataRepresentation:)(v47, v39);
  unint64_t v110 = v39;
  swift_errorRelease(v45);
LABEL_23:
  uint64_t v71 = (int *)type metadata accessor for OwnedBeaconGroup(0LL);
  unint64_t v72 = v115;
  (*(void (**)(char *, int *, void *))(v116 + 32))((char *)v46 + v71[7], v70, v115);
  NSString v73 = String._bridgeToObjectiveC()();
  id v74 = v114;
  id v75 = [v114 objectForKeyedSubscript:v73];

  if (v75)
  {
    id v124 = v75;
    uint64_t v76 = swift_dynamicCast(&v122, &v124, v112, &type metadata for Data, 6LL);
    if ((v76 & 1) != 0)
    {
      __int128 v113 = v71;
      uint64_t v117 = v47;
      uint64_t v78 = v122;
      unint64_t v77 = v123;
      sub_10001736C(v122, v123);
      uint64_t v79 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
      unint64_t v80 = sub_1001D31C0();
      unint64_t v81 = sub_1001D32E0();
      unint64_t v82 = sub_1001D3324();
      uint64_t v83 = sub_100007864( &qword_1009A5868,  type metadata accessor for OwnedBeaconGroup.PairingState,  (uint64_t)&unk_1007F6420);
      uint64_t v84 = sub_100007864( &qword_1009A58A8,  type metadata accessor for OwnedBeaconGroup.PairingState,  (uint64_t)&unk_1007F63D0);
      uint64_t v85 = Dictionary<>.init(dataRepresentation:)( v78,  v77,  &type metadata for OwnedBeaconGroup.SerialNumber,  v79,  v80,  v81,  v82,  v83,  v84);
      unint64_t v109 = v77;
      NSString v86 = String._bridgeToObjectiveC()();
      id v74 = v114;
      id v87 = [v114 objectForKeyedSubscript:v86];

      unint64_t v72 = v115;
      uint64_t v71 = v113;
      if (v87)
      {
        uint64_t v122 = (uint64_t)v87;
        if ((swift_dynamicCast(&v124, &v122, v112, &type metadata for Bool, 6LL) & 1) != 0)
        {
          int v108 = v124;
          NSString v88 = String._bridgeToObjectiveC()();
          id v89 = [v74 objectForKeyedSubscript:v88];

          if (v89)
          {
            id v124 = v89;
            if ((swift_dynamicCast(&v122, &v124, v112, &type metadata for String, 6LL) & 1) != 0)
            {
              uint64_t v120 = v122;
              unint64_t v116 = v123;
              uint64_t v115 = objc_autoreleasePoolPush();
              id v90 = [objc_allocWithZone(NSKeyedArchiver) initRequiringSecureCoding:1];
              [a1 encodeSystemFieldsWithCoder:v90];
              [v90 finishEncoding];
              id v91 = [v90 encodedData];
              uint64_t v92 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v91);
              uint64_t v112 = v93;

              objc_autoreleasePoolPop(v115);
              sub_100016F9C(v117, v110);
              sub_100016F9C(v78, v109);
              swift_unknownObjectRelease(v74);
              uint64_t v95 = v118;
              uint64_t v94 = v119;
              uint64_t v96 = v112;
              *uint64_t v118 = v92;
              v95[1] = v96;
              v111((char *)v95 + v71[6], v94, v121);
              *((_BYTE *)v95 + v71[8]) = v108;
              unint64_t v97 = (uint64_t *)((char *)v95 + v71[9]);
              unint64_t v98 = v116;
              *unint64_t v97 = v120;
              v97[1] = v98;
              *(uint64_t *)((char *)v95 + v71[10]) = v85;
              return;
            }
          }
        }
      }

      swift_bridgeObjectRelease();
      uint64_t v76 = sub_100016F9C(v78, v109);
      uint64_t v47 = v117;
      uint64_t v46 = v118;
    }
  }

  uint64_t v99 = static os_log_type_t.error.getter(v76);
  uint64_t v100 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v101 = swift_allocObject(v100, 72LL, 7LL);
  *(_OWORD *)(v101 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(v101 + 56) = sub_100022898(0LL, (unint64_t *)&qword_10099D920, &OBJC_CLASS___CKRecord_ptr);
  *(void *)(v101 + 64) = sub_100022738();
  *(void *)(v101 + 32) = a1;
  sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  id v102 = a1;
  v103 = (void *)static OS_os_log.default.getter(v102);
  os_log(_:dso:log:_:_:)(v99, &_mh_execute_header, v103, "Invalid Beacon Group - %@", 25LL, 2LL, v101);
  swift_bridgeObjectRelease();

  unint64_t v104 = sub_1001D60F0();
  uint64_t v105 = swift_allocError(&type metadata for OwnedBeaconGroup.BeaconGroupConversionError, v104, 0LL, 0LL);
  *uint64_t v106 = 6;
  swift_willThrow(v105);
  swift_unknownObjectRelease(v74);

  sub_100016F9C(v47, v110);
  (*(void (**)(char *, uint64_t))(v120 + 8))(v119, v121);
  (*(void (**)(char *, void *))(v116 + 8))((char *)v46 + v71[7], v72);
}

void sub_1001CC778()
{
  uint64_t v64 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
  uint64_t v62 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v2 = (char *)&v50 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v60 = *(void *)(v3 - 8);
  uint64_t v61 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  unint64_t v59 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v58 = (uint64_t)&v50 - v7;
  __chkstk_darwin(v6);
  uint64_t v57 = (char *)&v50 - v8;
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009A58D0);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)((char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v50 - v13;
  uint64_t v67 = &_swiftEmptySetSingleton;
  uint64_t v15 = *(void *)(v0 + *(int *)(type metadata accessor for OwnedBeaconGroup(0LL) + 40));
  uint64_t v16 = *(void *)(v15 + 64);
  uint64_t v54 = v15 + 64;
  uint64_t v17 = 1LL << *(_BYTE *)(v15 + 32);
  uint64_t v18 = -1LL;
  if (v17 < 64) {
    uint64_t v18 = ~(-1LL << v17);
  }
  unint64_t v19 = v18 & v16;
  unint64_t v20 = (unint64_t)(v17 + 63) >> 6;
  unint64_t v51 = v20 - 1;
  swift_bridgeObjectRetain(v15);
  unint64_t v21 = 0LL;
  int64_t v55 = v20;
  unint64_t v56 = v12;
  uint64_t v63 = v22;
  unint64_t v52 = v20 - 5;
  uint64_t v53 = v22 + 104;
  id v23 = &qword_1009A2570;
  uint64_t v24 = type metadata accessor for OwnedBeaconGroup.PairingState;
  while (1)
  {
    if (v19)
    {
      uint64_t v65 = (v19 - 1) & v19;
      unint64_t v66 = v21;
      unint64_t v25 = __clz(__rbit64(v19)) | (v21 << 6);
      goto LABEL_8;
    }

    int64_t v32 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v32 >= v55)
    {
      unint64_t v34 = v21;
    }

    else
    {
      unint64_t v33 = *(void *)(v54 + 8 * v32);
      if (v33) {
        goto LABEL_12;
      }
      unint64_t v34 = v21 + 1;
      if ((uint64_t)(v21 + 2) < v55)
      {
        unint64_t v33 = *(void *)(v54 + 8 * (v21 + 2));
        if (v33)
        {
          int64_t v32 = v21 + 2;
          goto LABEL_12;
        }

        unint64_t v34 = v21 + 2;
        if ((uint64_t)(v21 + 3) < v55)
        {
          unint64_t v33 = *(void *)(v54 + 8 * (v21 + 3));
          if (v33)
          {
            int64_t v32 = v21 + 3;
LABEL_12:
            uint64_t v65 = (v33 - 1) & v33;
            unint64_t v66 = v32;
            unint64_t v25 = __clz(__rbit64(v33)) + (v32 << 6);
LABEL_8:
            uint64_t v26 = *(void *)(v63 + 56);
            uint64_t v27 = (uint64_t *)(*(void *)(v63 + 48) + 16 * v25);
            uint64_t v28 = *v27;
            unint64_t v29 = v27[1];
            uint64_t *v12 = *v27;
            v12[1] = v29;
            uint64_t v30 = v26 + *(void *)(v62 + 72) * v25;
            uint64_t v31 = sub_100004AEC(v23);
            sub_10001DC4C(v30, (uint64_t)v12 + *(int *)(v31 + 48), v24);
            (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))( v12,  0LL,  1LL,  v31);
            sub_10001736C(v28, v29);
            goto LABEL_15;
          }

          int64_t v32 = v21 + 4;
          unint64_t v34 = v21 + 3;
          if ((uint64_t)(v21 + 4) < v55)
          {
            unint64_t v33 = *(void *)(v54 + 8 * v32);
            if (v33) {
              goto LABEL_12;
            }
            while (v52 != v21)
            {
              unint64_t v33 = *(void *)(v53 + 8 * v21++);
              if (v33)
              {
                int64_t v32 = v21 + 4;
                goto LABEL_12;
              }
            }

            unint64_t v34 = v51;
          }
        }
      }
    }

    uint64_t v35 = sub_100004AEC(v23);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56LL))(v12, 1LL, 1LL, v35);
    uint64_t v65 = 0LL;
    unint64_t v66 = v34;
LABEL_15:
    sub_100015750((uint64_t)v12, (uint64_t)v14, (uint64_t *)&unk_1009A58D0);
    uint64_t v36 = sub_100004AEC(v23);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 48LL))(v14, 1LL, v36) == 1)
    {
      swift_release(v63);
      return;
    }

    sub_100016F9C(*(void *)v14, *((void *)v14 + 1));
    sub_10002218C((uint64_t)&v14[*(int *)(v36 + 48)], (uint64_t)v2, v24);
    if (swift_getEnumCaseMultiPayload(v2, v64) == 1)
    {
      uint64_t v37 = sub_100004AEC((uint64_t *)&unk_1009A58E0);
      uint64_t v38 = (uint64_t)&v2[*(int *)(v37 + 48)];
      sub_1000182F0(*(void *)&v2[*(int *)(v37 + 64)], *(void *)&v2[*(int *)(v37 + 64) + 8]);
      uint64_t v40 = v60;
      uint64_t v39 = v61;
      uint64_t v41 = v57;
      (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v57, v2, v61);
      sub_100015794(v38, (uint64_t *)&unk_1009AE480);
      uint64_t v42 = v59;
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v59, v41, v39);
      uint64_t v43 = v24;
      uint64_t v44 = v23;
      uint64_t v45 = v14;
      uint64_t v46 = v2;
      uint64_t v47 = v58;
      sub_1000BD768(v58, v42);
      uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
      uint64_t v49 = v47;
      uint64_t v2 = v46;
      uint64_t v14 = v45;
      id v23 = v44;
      uint64_t v24 = v43;
      v48(v49, v39);
      uint64_t v12 = v56;
      v48((uint64_t)v41, v39);
    }

    else
    {
      sub_100018C68((uint64_t)v2, v24);
    }

    unint64_t v19 = v65;
    unint64_t v21 = v66;
  }

  __break(1u);
}

uint64_t sub_1001CCC30@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_10099E310);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  unint64_t v19 = (char *)&v30 - v18;
  uint64_t v20 = *(void *)(v3 + *(int *)(type metadata accessor for OwnedBeaconGroup(0LL) + 40));
  if (!*(void *)(v20 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1LL, 1LL, v13);
LABEL_7:
    sub_100015794((uint64_t)v12, &qword_10099E310);
LABEL_8:
    uint64_t v24 = type metadata accessor for MACAddress(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56LL))( a3,  1LL,  1LL,  v24);
  }

  sub_10001736C(a1, a2);
  uint64_t v21 = sub_10030CFC0(a1, a2);
  if ((v22 & 1) != 0)
  {
    sub_10001DC4C( *(void *)(v20 + 56) + *(void *)(v14 + 72) * v21,  (uint64_t)v12,  type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v23 = 0LL;
  }

  else
  {
    uint64_t v23 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, v23, 1LL, v13);
  sub_100016F9C(a1, a2);
  sub_10002218C((uint64_t)v12, (uint64_t)v19, type metadata accessor for OwnedBeaconGroup.PairingState);
  sub_10002218C((uint64_t)v19, (uint64_t)v17, type metadata accessor for OwnedBeaconGroup.PairingState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v13);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1) {
      goto LABEL_8;
    }
    uint64_t v27 = sub_100004AEC((uint64_t *)&unk_1009A58E0);
    uint64_t v28 = (uint64_t)&v17[*(int *)(v27 + 48)];
    sub_1000182F0(*(void *)&v17[*(int *)(v27 + 64)], *(void *)&v17[*(int *)(v27 + 64) + 8]);
    sub_100015750(v28, (uint64_t)v9, (uint64_t *)&unk_1009AE480);
    uint64_t v29 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v29 - 8) + 8LL))(v17, v29);
  }

  else
  {
    sub_100015750((uint64_t)v17, (uint64_t)v9, (uint64_t *)&unk_1009AE480);
  }

  return sub_100015750((uint64_t)v9, a3, (uint64_t *)&unk_1009AE480);
}

void sub_1001CCEE8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_1001CCF20(uint64_t a1, uint64_t a2)
{
  if (__OFSUB__(20LL, BYTE6(a2)))
  {
    __break(1u);
    JUMPOUT(0x1001CCFACLL);
  }

  uint64_t v6 = sub_1004D5620(20LL - BYTE6(a2));
  unint64_t v7 = v2;
  sub_1003122B8((uint64_t)&v6);
  uint64_t v3 = v6;
  unint64_t v4 = v7;
  Data.append(_:)(v6, v7);
  sub_100016F9C(v3, v4);
  return v8;
}

unint64_t sub_1001CCFCC(uint64_t a1)
{
  unint64_t result = *(void *)(*(void *)(v1 + *(int *)(a1 + 40)) + 16LL);
  if (result >= 0x100)
  {
    char v3 = 2;
    unint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  v3,  3455LL,  0);
    __break(1u);
  }

  return result;
}

uint64_t sub_1001CD040(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1001CD078 + 4 * byte_1007F5B80[a1]))( 0xD000000000000010LL,  0x800000010084DE70LL);
}

uint64_t sub_1001CD078()
{
  return 0x6E6F6973726576LL;
}

uint64_t sub_1001CD090()
{
  return 0x696669746E656469LL;
}

uint64_t sub_1001CD0AC(uint64_t a1)
{
  return a1 + 6;
}

uint64_t sub_1001CD0C4()
{
  return 1701667182LL;
}

uint64_t sub_1001CD0D4()
{
  return 0x657264644163616DLL;
}

uint64_t sub_1001CD0F4()
{
  return 0x614D6E6F63616562LL;
}

uint64_t sub_1001CD110(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1001CD148 + 4 * byte_1007F5B87[a1]))( 0xD000000000000010LL,  0x800000010084DE70LL);
}

uint64_t sub_1001CD148()
{
  return 0x6E6F6973726576LL;
}

uint64_t sub_1001CD160()
{
  return 0x696669746E656469LL;
}

uint64_t sub_1001CD17C(uint64_t a1)
{
  return a1 + 6;
}

uint64_t sub_1001CD194()
{
  return 1701667182LL;
}

uint64_t sub_1001CD1A4()
{
  return 0x657264644163616DLL;
}

uint64_t sub_1001CD1C4()
{
  return 0x614D6E6F63616562LL;
}

Swift::Int sub_1001CD1E0()
{
  uint64_t v0 = type metadata accessor for UUID(0LL);
  uint64_t v1 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t sub_1001CD258(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

Swift::Int sub_1001CD2BC(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

void sub_1001CD334(char *a1)
{
}

void sub_1001CD340()
{
}

void sub_1001CD34C(uint64_t a1)
{
}

void sub_1001CD354(uint64_t a1)
{
}

unint64_t sub_1001CD35C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1001D5EB8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001CD388@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1001CD040(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1001CD3B0()
{
  return sub_1001CD110(*v0);
}

unint64_t sub_1001CD3B8@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1001D5EB8(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001CD3DC(uint64_t a1)
{
  unint64_t v2 = sub_1001D30B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001CD404(uint64_t a1)
{
  unint64_t v2 = sub_1001D30B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001CD42C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100004AEC(&qword_1009A5930);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100012ED8(a1, v10);
  unint64_t v12 = sub_1001D6024();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for OwnedBeaconGroup.SerialNumber.CodingKeys,  &type metadata for OwnedBeaconGroup.SerialNumber.CodingKeys,  v12,  v10,  v11);
  v16[0] = a2;
  v16[1] = a3;
  unint64_t v13 = sub_1000170A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v16, v14, v6, &type metadata for Data, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1001CD530(void *a1, int a2)
{
  uint64_t v5 = sub_100004AEC(&qword_1009A5BC8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1001D8168();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for OwnedBeaconGroup.PairingMetadata.CodingKeys,  &type metadata for OwnedBeaconGroup.PairingMetadata.CodingKeys,  v11,  v9,  v10);
  char v17 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a2 & 0x1FF, &v17, v5);
  if (!v2)
  {
    v16[0] = BYTE2(a2);
    char v15 = 1;
    unint64_t v12 = sub_1001D80E0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v16, &v15, v5, &type metadata for PairingTransportType, v12);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001CD65C(uint64_t a1)
{
  unint64_t v2 = sub_1001D6024();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001CD684(uint64_t a1)
{
  unint64_t v2 = sub_1001D6024();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001CD6AC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v5 = sub_100042F34();
  if ((DataProtocol.isNull.getter(&type metadata for Data, v5) & 1) != 0)
  {
    uint64_t v6 = 0LL;
    unint64_t v7 = 0xF000000000000000LL;
  }

  else
  {
    uint64_t v6 = Data.trimmed.getter(v3, v4);
    unint64_t v7 = v8;
  }

  uint64_t result = sub_100016F9C(v3, v4);
  *a2 = v6;
  a2[1] = v7;
  return result;
}

void *sub_1001CD734@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1001D5F00(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

uint64_t sub_1001CD75C(void *a1)
{
  return sub_1001CD42C(a1, *v1, v1[1]);
}

uint64_t sub_1001CD774()
{
  uint64_t v1 = type metadata accessor for String.Encoding(0LL);
  uint64_t v2 = __chkstk_darwin(v1);
  unint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = *v0;
  uint64_t v6 = v0[1];
  static String.Encoding.utf8.getter(v2);
  uint64_t result = String.init(data:encoding:)(v5, v6, v4);
  if (!v8) {
    return Data.hexString.getter(v5, v6);
  }
  return result;
}

unint64_t sub_1001CD7FC()
{
  unint64_t result = qword_1009A5808;
  if (!qword_1009A5808)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F5C48, &type metadata for OwnedBeaconGroup.SerialNumber);
    atomic_store(result, (unint64_t *)&qword_1009A5808);
  }

  return result;
}

uint64_t sub_1001CD840()
{
  return sub_100007864(&qword_1009A5810, type metadata accessor for OwnedBeaconGroup, (uint64_t)&unk_1007F5D60);
}

uint64_t sub_1001CD86C()
{
  if (*v0) {
    return 0x54676E6972696170LL;
  }
  else {
    return 0x644974726170LL;
  }
}

uint64_t sub_1001CD8AC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001D7804(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001CD8D0(uint64_t a1)
{
  unint64_t v2 = sub_1001D8168();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001CD8F8(uint64_t a1)
{
  unint64_t v2 = sub_1001D8168();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001CD920@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1001D7904(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = BYTE1(result) & 1;
    a2[2] = BYTE2(result);
  }

  return result;
}

uint64_t sub_1001CD958(void *a1)
{
  return sub_1001CD530(a1, *v1 | (v1[2] << 16) | (v1[1] << 8));
}

BOOL sub_1001CD988(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1001D5230(*a1 | (a1[2] << 16) | (a1[1] << 8), *a2 | (a2[2] << 16) | (a2[1] << 8));
}

uint64_t sub_1001CD9BC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v95 = a2;
  uint64_t v96 = type metadata accessor for UUID(0LL);
  uint64_t v94 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  unint64_t v4 = &v84[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = &v84[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v6);
  uint64_t v10 = &v84[-v9];
  uint64_t v11 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
  __chkstk_darwin(v11);
  unint64_t v13 = &v84[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v15 = a1[3];
  uint64_t v14 = a1[4];
  sub_100012ED8(a1, v15);
  uint64_t v16 = v97;
  dispatch thunk of Decoder.unkeyedContainer()(v99, v15, v14);
  if (!v16)
  {
    uint64_t v92 = v13;
    uint64_t v93 = (uint64_t)v10;
    id v89 = v8;
    id v90 = v4;
    unint64_t v97 = a1;
    uint64_t v17 = v96;
    uint64_t v91 = v11;
    uint64_t v18 = v100;
    uint64_t v19 = v101;
    sub_100037298((uint64_t)v99, v100);
    uint64_t v20 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v18, v19);
    uint64_t v24 = v20;
    unint64_t v25 = v21;
    if (v20 == 117 && v21 == 0xE100000000000000LL)
    {
      swift_bridgeObjectRelease();
      uint64_t v26 = v93;
LABEL_10:
      uint64_t v28 = type metadata accessor for MACAddress(0LL);
      uint64_t v29 = v100;
      uint64_t v30 = v101;
      sub_100037298((uint64_t)v99, v100);
      uint64_t v31 = sub_100007864( &qword_10099F598,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
      dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent<A>(_:)(v28, v28, v31, v29, v30);
      int64_t v32 = v97;
      uint64_t v33 = v100;
      uint64_t v34 = v101;
      sub_100037298((uint64_t)v99, v100);
      unsigned int v35 = dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent(_:)(v33, v34);
      LOBYTE(v34) = v35;
      int v36 = (v35 >> 8) & 1;
      uint64_t v37 = v100;
      uint64_t v38 = v101;
      sub_100037298((uint64_t)v99, v100);
      unint64_t v39 = sub_1001D809C();
      dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent<A>(_:)( &type metadata for PairingTransportType,  &type metadata for PairingTransportType,  v39,  v37,  v38);
      char v40 = v98[0];
      uint64_t v41 = (uint64_t)v92;
      uint64_t v42 = (_BYTE *)(v41 + *(int *)(sub_100004AEC((uint64_t *)&unk_1009A5910) + 48));
      sub_100015750(v26, v41, (uint64_t *)&unk_1009AE480);
      uint64_t v43 = 0LL;
      *uint64_t v42 = v34;
      v42[1] = v36;
      v42[2] = v40;
LABEL_11:
      uint64_t v44 = v95;
      uint64_t v45 = v91;
LABEL_12:
      swift_storeEnumTagMultiPayload(v41, v45, v43);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v99);
      sub_10002218C(v41, v44, type metadata accessor for OwnedBeaconGroup.PairingState);
      char v22 = v32;
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v22);
    }

    char v27 = _stringCompareWithSmolCheck(_:_:expecting:)(117LL, 0xE100000000000000LL, v20, v21, 0LL);
    uint64_t v26 = v93;
    if ((v27 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }

    if (v24 == 112 && v25 == 0xE100000000000000LL
      || (_stringCompareWithSmolCheck(_:_:expecting:)(112LL, 0xE100000000000000LL, v24, v25, 0LL) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v46 = v100;
      uint64_t v47 = v101;
      sub_100037298((uint64_t)v99, v100);
      uint64_t v48 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v17, v17, v48, v46, v47);
      uint64_t v49 = type metadata accessor for MACAddress(0LL);
      uint64_t v50 = v100;
      uint64_t v51 = v101;
      sub_100037298((uint64_t)v99, v100);
      uint64_t v52 = sub_100007864( &qword_10099F598,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
      dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent<A>(_:)(v49, v49, v52, v50, v51);
      uint64_t v53 = v100;
      uint64_t v54 = v101;
      sub_100037298((uint64_t)v99, v100);
      unint64_t v55 = sub_100016FE0();
      dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent<A>(_:)( &type metadata for Data,  &type metadata for Data,  v55,  v53,  v54);
      uint64_t v93 = v98[0];
      uint64_t v88 = v98[1];
      uint64_t v57 = v100;
      uint64_t v58 = v101;
      sub_100037298((uint64_t)v99, v100);
      uint64_t v59 = dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent(_:)(v57, v58);
      int64_t v32 = v97;
      uint64_t v60 = v59;
      int v87 = v61 & 1;
      uint64_t v62 = v100;
      uint64_t v63 = v101;
      sub_100037298((uint64_t)v99, v100);
      unsigned int v64 = dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent(_:)(v62, v63);
      char v65 = v64;
      int v86 = (v64 >> 8) & 1;
      uint64_t v67 = v100;
      uint64_t v66 = v101;
      sub_100037298((uint64_t)v99, v100);
      unint64_t v68 = sub_1001D809C();
      dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent<A>(_:)( &type metadata for PairingTransportType,  &type metadata for PairingTransportType,  v68,  v67,  v66);
      int v85 = LOBYTE(v98[0]);
      unint64_t v69 = (int *)sub_100004AEC((uint64_t *)&unk_1009A58E0);
      uint64_t v41 = (uint64_t)v92;
      uint64_t v70 = (uint64_t)&v92[v69[12]];
      uint64_t v71 = (uint64_t *)&v92[v69[16]];
      unint64_t v72 = &v92[v69[20]];
      NSString v73 = &v92[v69[24]];
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v94 + 32))(v92, v90, v96);
      sub_100015750((uint64_t)v89, v70, (uint64_t *)&unk_1009AE480);
      uint64_t v74 = v88;
      *uint64_t v71 = v93;
      v71[1] = v74;
      *(void *)unint64_t v72 = v60;
      v72[8] = v87;
      *NSString v73 = v65;
      v73[1] = v86;
      uint64_t v43 = 1LL;
      v73[2] = v85;
      goto LABEL_11;
    }

    if (v24 == 108 && v25 == 0xE100000000000000LL)
    {
      swift_bridgeObjectRelease();
      uint64_t v43 = 2LL;
      uint64_t v44 = v95;
      uint64_t v45 = v91;
      uint64_t v41 = (uint64_t)v92;
      int64_t v32 = v97;
      goto LABEL_12;
    }

    char v56 = _stringCompareWithSmolCheck(_:_:expecting:)(108LL, 0xE100000000000000LL, v24, v25, 0LL);
    uint64_t v44 = v95;
    uint64_t v45 = v91;
    uint64_t v41 = (uint64_t)v92;
    int64_t v32 = v97;
    if ((v56 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v43 = 2LL;
      goto LABEL_12;
    }

    if (qword_10099B138 != -1) {
      swift_once(&qword_10099B138, sub_10012E678);
    }
    uint64_t v75 = type metadata accessor for Logger(0LL);
    sub_10000A720(v75, (uint64_t)qword_100A2A200);
    swift_bridgeObjectRetain(v25);
    unint64_t v77 = (os_log_s *)Logger.logObject.getter(v76);
    os_log_type_t v78 = static os_log_type_t.error.getter(v77);
    if (os_log_type_enabled(v77, v78))
    {
      uint64_t v79 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v80 = swift_slowAlloc(32LL, -1LL);
      v98[0] = v80;
      *(_DWORD *)uint64_t v79 = 136446210;
      swift_bridgeObjectRetain(v25);
      uint64_t v102 = sub_1003F11D4(v24, v25, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v79 + 4, v79 + 12);
      swift_bridgeObjectRelease_n(v25, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "Unhandled type code: %{public}s", v79, 0xCu);
      swift_arrayDestroy(v80, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v80, -1LL, -1LL);
      swift_slowDealloc(v79, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v25, 2LL);
    }

    unint64_t v81 = sub_1001D60F0();
    uint64_t v82 = swift_allocError(&type metadata for OwnedBeaconGroup.BeaconGroupConversionError, v81, 0LL, 0LL);
    *uint64_t v83 = 6;
    swift_willThrow(v82);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v99);
    a1 = v97;
  }

  char v22 = a1;
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v22);
}

uint64_t sub_1001CE290(void *a1)
{
  uint64_t v98 = type metadata accessor for UUID(0LL);
  uint64_t v100 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v99 = (char *)&v89 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for MACAddress(0LL);
  uint64_t v96 = *(void *)(v3 - 8);
  uint64_t v97 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v94 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v89 - v6;
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v95 = (uint64_t)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v101 = (uint64_t)&v89 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v89 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v89 - v16;
  uint64_t v18 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = a1[3];
  uint64_t v21 = a1[4];
  sub_100012ED8(a1, v22);
  dispatch thunk of Encoder.unkeyedContainer()(v104, v22, v21);
  sub_10001DC4C((uint64_t)v107, (uint64_t)v20, type metadata accessor for OwnedBeaconGroup.PairingState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v20, v18);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v24 = (int *)sub_100004AEC((uint64_t *)&unk_1009A58E0);
      uint64_t v25 = (uint64_t)&v20[v24[12]];
      uint64_t v26 = (uint64_t *)&v20[v24[16]];
      uint64_t v28 = *v26;
      unint64_t v27 = v26[1];
      uint64_t v29 = &v20[v24[20]];
      uint64_t v90 = *(void *)v29;
      int v30 = v29[8];
      uint64_t v31 = &v20[v24[24]];
      unsigned int v93 = *v31;
      int v32 = v31[1];
      int v91 = v30;
      int v92 = v32;
      LODWORD(v107) = v31[2];
      uint64_t v33 = v99;
      uint64_t v34 = v100;
      unsigned int v35 = v20;
      uint64_t v36 = v98;
      (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v99, v35, v98);
      uint64_t v37 = v101;
      sub_100015750(v25, v101, (uint64_t *)&unk_1009AE480);
      uint64_t v38 = v105;
      uint64_t v39 = v106;
      sub_100037298((uint64_t)v104, v105);
      uint64_t v40 = v102;
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)(112LL, 0xE100000000000000LL, v38, v39);
      if (v40)
      {
        sub_1000182F0(v28, v27);
        sub_100015794(v37, (uint64_t *)&unk_1009AE480);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v33, v36);
      }

      else
      {
        unint64_t v50 = v27;
        uint64_t v51 = v33;
        uint64_t v52 = v105;
        uint64_t v53 = v106;
        sub_100037298((uint64_t)v104, v105);
        uint64_t v54 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v51, v36, v54, v52, v53);
        uint64_t v60 = v95;
        sub_1001D51E8(v101, v95);
        uint64_t v61 = v96;
        uint64_t v62 = v97;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v96 + 48))(v60, 1LL, v97) == 1)
        {
          sub_100015794(v60, (uint64_t *)&unk_1009AE480);
        }

        else
        {
          uint64_t v70 = v94;
          (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(v94, v60, v62);
          uint64_t v71 = v105;
          uint64_t v102 = v106;
          sub_100037298((uint64_t)v104, v105);
          uint64_t v72 = sub_100007864( &qword_1009A5890,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
          dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v70, v62, v72, v71, v102);
          (*(void (**)(char *, uint64_t))(v61 + 8))(v70, v62);
        }

        uint64_t v73 = v28;
        int v74 = (int)v107;
        uint64_t v75 = v93;
        if (v50 >> 60 != 15)
        {
          v103[0] = v73;
          v103[1] = v50;
          uint64_t v76 = v105;
          uint64_t v77 = v106;
          sub_100037298((uint64_t)v104, v105);
          unint64_t v78 = sub_1000170A4();
          dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v103, &type metadata for Data, v78, v76, v77);
        }

        char v79 = v92;
        if ((v91 & 1) == 0)
        {
          uint64_t v80 = v105;
          uint64_t v81 = v106;
          sub_100037298((uint64_t)v104, v105);
          dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v90, v80, v81);
          char v79 = v92;
        }

        if ((v79 & 1) == 0)
        {
          uint64_t v82 = v105;
          uint64_t v83 = v106;
          sub_100037298((uint64_t)v104, v105);
          dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v75, v82, v83);
        }

        uint64_t v84 = v101;
        if (v74 != 3)
        {
          LOBYTE(v103[0]) = v74;
          uint64_t v85 = v105;
          uint64_t v86 = v106;
          sub_100037298((uint64_t)v104, v105);
          unint64_t v87 = sub_1001D80E0();
          dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( v103,  &type metadata for PairingTransportType,  v87,  v85,  v86);
        }

        sub_1000182F0(v73, v50);
        sub_100015794(v84, (uint64_t *)&unk_1009AE480);
        (*(void (**)(char *, uint64_t))(v100 + 8))(v99, v36);
      }
    }

    else
    {
      uint64_t v48 = v105;
      uint64_t v49 = v106;
      sub_100037298((uint64_t)v104, v105);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)(108LL, 0xE100000000000000LL, v48, v49);
    }
  }

  else
  {
    uint64_t v41 = &v20[*(int *)(sub_100004AEC((uint64_t *)&unk_1009A5910) + 48)];
    uint64_t v42 = *v41;
    unsigned __int8 v43 = v41[1];
    int v44 = v41[2];
    sub_100015750((uint64_t)v20, (uint64_t)v17, (uint64_t *)&unk_1009AE480);
    uint64_t v45 = v105;
    uint64_t v46 = v106;
    sub_100037298((uint64_t)v104, v105);
    uint64_t v47 = v102;
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(117LL, 0xE100000000000000LL, v45, v46);
    if (v47)
    {
      sub_100015794((uint64_t)v17, (uint64_t *)&unk_1009AE480);
    }

    else
    {
      LODWORD(v102) = v44;
      uint64_t v107 = v17;
      sub_1001D51E8((uint64_t)v17, (uint64_t)v15);
      uint64_t v55 = v96;
      uint64_t v56 = v97;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v15, 1LL, v97) == 1)
      {
        sub_100015794((uint64_t)v15, (uint64_t *)&unk_1009AE480);
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v7, v15, v56);
        uint64_t v57 = v105;
        uint64_t v58 = v106;
        sub_100037298((uint64_t)v104, v105);
        uint64_t v59 = sub_100007864( &qword_1009A5890,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
        dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v7, v56, v59, v57, v58);
        (*(void (**)(char *, uint64_t))(v55 + 8))(v7, v56);
      }

      uint64_t v63 = (uint64_t)v107;
      int v64 = v102;
      if ((v43 & 1) == 0)
      {
        uint64_t v65 = v105;
        uint64_t v66 = v106;
        sub_100037298((uint64_t)v104, v105);
        dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v42, v65, v66);
      }

      if (v64 != 3)
      {
        LOBYTE(v103[0]) = v64;
        uint64_t v67 = v105;
        uint64_t v68 = v106;
        sub_100037298((uint64_t)v104, v105);
        unint64_t v69 = sub_1001D80E0();
        dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( v103,  &type metadata for PairingTransportType,  v69,  v67,  v68);
      }

      sub_100015794(v63, (uint64_t *)&unk_1009AE480);
    }
  }

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v104);
}

uint64_t sub_1001CEAD0()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v61[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = &v61[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = &v61[-v10];
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = &v61[-v13];
  __chkstk_darwin(v12);
  uint64_t v16 = &v61[-v15];
  uint64_t v17 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
  __chkstk_darwin(v17);
  uint64_t v19 = &v61[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_10001DC4C(v0, (uint64_t)v19, v20);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v19, v17);
  if (!EnumCaseMultiPayload)
  {
    uint64_t v36 = &v19[*(int *)(sub_100004AEC((uint64_t *)&unk_1009A5910) + 48)];
    char v37 = *v36;
    int v38 = v36[1];
    uint64_t v39 = v36[2];
    sub_100015750((uint64_t)v19, (uint64_t)v16, (uint64_t *)&unk_1009AE480);
    uint64_t v68 = 0LL;
    unint64_t v69 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    uint64_t v68 = 0x6465726961706E75LL;
    unint64_t v69 = 0xE900000000000028LL;
    sub_1001D51E8((uint64_t)v16, (uint64_t)v14);
    uint64_t v40 = type metadata accessor for MACAddress(0LL);
    uint64_t v41 = *(void *)(v40 - 8);
    uint64_t v42 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v41 + 48))(v14, 1LL, v40);
    if ((_DWORD)v42 == 1)
    {
      sub_100015794((uint64_t)v14, (uint64_t *)&unk_1009AE480);
      uint64_t v43 = 0LL;
      int v44 = (void *)0xE000000000000000LL;
    }

    else
    {
      uint64_t v43 = MACAddress.description.getter(v42);
      int v44 = v54;
      (*(void (**)(_BYTE *, uint64_t))(v41 + 8))(v14, v40);
    }

    v55._countAndFlagsBits = v43;
    v55._object = v44;
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    v56._countAndFlagsBits = 0x3A64497472617020LL;
    v56._object = (void *)0xE900000000000020LL;
    String.append(_:)(v56);
    if (v38) {
      char v57 = -1;
    }
    else {
      char v57 = v37;
    }
    LOBYTE(v67) = v57;
    v58._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
    String.append(_:)(v58);
    swift_bridgeObjectRelease();
    v59._countAndFlagsBits = 0x676E697269617020LL;
    v59._object = (void *)0xEE00203A65707954LL;
    String.append(_:)(v59);
    __asm { BR              X9 }
  }

  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v22 = (int *)sub_100004AEC((uint64_t *)&unk_1009A58E0);
    uint64_t v23 = (uint64_t)&v19[v22[12]];
    sub_1000182F0(*(void *)&v19[v22[16]], *(void *)&v19[v22[16] + 8]);
    uint64_t v24 = &v19[v22[20]];
    uint64_t v63 = *(void *)v24;
    int v62 = v24[8];
    uint64_t v25 = &v19[v22[24]];
    int v26 = *v25;
    int v64 = v25[1];
    int v65 = v26;
    uint64_t v66 = v25[2];
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v2 + 32))(v4, v19, v1);
    sub_100015750(v23, (uint64_t)v11, (uint64_t *)&unk_1009AE480);
    uint64_t v68 = 0LL;
    unint64_t v69 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(58LL);
    v27._countAndFlagsBits = 0x28646572696170LL;
    v27._object = (void *)0xE700000000000000LL;
    String.append(_:)(v27);
    v29._countAndFlagsBits = UUID.uuidString.getter(v28);
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._countAndFlagsBits = 8236LL;
    v30._object = (void *)0xE200000000000000LL;
    String.append(_:)(v30);
    sub_1001D51E8((uint64_t)v11, (uint64_t)v8);
    uint64_t v31 = type metadata accessor for MACAddress(0LL);
    uint64_t v32 = *(void *)(v31 - 8);
    uint64_t v33 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v32 + 48))(v8, 1LL, v31);
    if ((_DWORD)v33 == 1)
    {
      sub_100015794((uint64_t)v8, (uint64_t *)&unk_1009AE480);
      uint64_t v34 = 0LL;
      unsigned int v35 = (void *)0xE000000000000000LL;
    }

    else
    {
      uint64_t v34 = MACAddress.description.getter(v33);
      unsigned int v35 = v45;
      (*(void (**)(_BYTE *, uint64_t))(v32 + 8))(v8, v31);
    }

    v46._countAndFlagsBits = v34;
    v46._object = v35;
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    v47._object = (void *)0x80000001008589F0LL;
    v47._countAndFlagsBits = 0xD000000000000010LL;
    String.append(_:)(v47);
    uint64_t v48 = v63;
    if (v62) {
      uint64_t v48 = 0LL;
    }
    uint64_t v67 = v48;
    v49._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
    v50._countAndFlagsBits = 0x3A64497472617020LL;
    v50._object = (void *)0xE900000000000020LL;
    String.append(_:)(v50);
    char v51 = v65;
    if (v64) {
      char v51 = -1;
    }
    LOBYTE(v67) = v51;
    v52._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
    String.append(_:)(v52);
    swift_bridgeObjectRelease();
    v53._countAndFlagsBits = 0x676E697269617020LL;
    v53._object = (void *)0xEE00203A65707954LL;
    String.append(_:)(v53);
    __asm { BR              X9 }
  }

  return 0x64656B636F6CLL;
}

uint64_t sub_1001CF134(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A5BB0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1001D8124();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for OwnedBeaconGroup.VersionedGroupMACAddress.CodingKeys,  &type metadata for OwnedBeaconGroup.VersionedGroupMACAddress.CodingKeys,  v11,  v9,  v10);
  char v12 = *((_BYTE *)v3 + 8);
  uint64_t v21 = *v3;
  char v22 = v12;
  char v20 = 0;
  unint64_t v13 = sub_1001D3218();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v5, &type metadata for OwnedBeaconGroup.Version, v13);
  if (!v2)
  {
    uint64_t v14 = (uint64_t)v3 + *(int *)(type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress(0LL) + 20);
    char v19 = 1;
    uint64_t v15 = type metadata accessor for MACAddress(0LL);
    uint64_t v16 = sub_100007864( &qword_1009A5890,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v19, v5, v15, v16);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001CF2A8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v29 = type metadata accessor for MACAddress(0LL);
  uint64_t v27 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v28 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = sub_100004AEC(&qword_1009A5BA0);
  uint64_t v5 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v11 = a1[4];
  sub_100012ED8(a1, v12);
  unint64_t v13 = sub_1001D8124();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for OwnedBeaconGroup.VersionedGroupMACAddress.CodingKeys,  &type metadata for OwnedBeaconGroup.VersionedGroupMACAddress.CodingKeys,  v13,  v12,  v11);
  if (!v2)
  {
    uint64_t v24 = v8;
    uint64_t v25 = v5;
    uint64_t v14 = (uint64_t)v10;
    uint64_t v16 = v28;
    uint64_t v15 = v29;
    char v34 = 0;
    unint64_t v17 = sub_1001D30F8();
    uint64_t v18 = v30;
    KeyedDecodingContainer.decode<A>(_:forKey:)( &v31,  &type metadata for OwnedBeaconGroup.Version,  &v34,  v30,  &type metadata for OwnedBeaconGroup.Version,  v17);
    char v19 = v32;
    *(void *)uint64_t v14 = v31;
    *(_BYTE *)(v14 + 8) = v19;
    char v33 = 1;
    uint64_t v20 = sub_100007864( &qword_10099F598,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v15, &v33, v18, v15, v20);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v18);
    uint64_t v21 = v26;
    (*(void (**)(uint64_t, void *, uint64_t))(v27 + 32))(v14 + *(int *)(v24 + 20), v16, v15);
    sub_10002218C(v14, v21, type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress);
  }

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

uint64_t sub_1001CF50C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001CD9BC(a1, a2);
}

uint64_t sub_1001CF520(void *a1)
{
  return sub_1001CE290(a1);
}

uint64_t sub_1001CF538()
{
  if (*v0) {
    return 0x657264644163616DLL;
  }
  else {
    return 0x6E6F6973726576LL;
  }
}

uint64_t sub_1001CF578@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001D7A74(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001CF59C(uint64_t a1)
{
  unint64_t v2 = sub_1001D8124();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001CF5C4(uint64_t a1)
{
  unint64_t v2 = sub_1001D8124();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001CF5EC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001CF2A8(a1, a2);
}

uint64_t sub_1001CF600(void *a1)
{
  return sub_1001CF134(a1);
}

uint64_t sub_1001CF614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = *(_BYTE *)(a2 + 8);
  if (*(_BYTE *)(a1 + 8) == 1)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) == 0) {
      return 0LL;
    }
  }

  else
  {
    if (*(void *)a1 != *(void *)a2) {
      char v3 = 1;
    }
    if ((v3 & 1) != 0) {
      return 0LL;
    }
  }

  return static MACAddress.== infix(_:_:)(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20));
}

uint64_t sub_1001CF654(void *a1, uint64_t a2, int a3)
{
  int v26 = a3;
  uint64_t v23 = a2;
  uint64_t v24 = sub_100004AEC(&qword_1009A5B80);
  uint64_t v22 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_1009A5B88);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009A5B90);
  uint64_t v25 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  sub_100012ED8(a1, v13);
  unint64_t v15 = sub_1001D7FD0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for OwnedBeaconGroup.Version.CodingKeys,  &type metadata for OwnedBeaconGroup.Version.CodingKeys,  v15,  v13,  v14);
  if ((v26 & 1) != 0)
  {
    char v27 = 0;
    unint64_t v20 = sub_1001D8058();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for OwnedBeaconGroup.Version.LegacyCodingKeys,  &v27,  v10,  &type metadata for OwnedBeaconGroup.Version.LegacyCodingKeys,  v20);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  else
  {
    char v28 = 1;
    unint64_t v16 = sub_1001D8014();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for OwnedBeaconGroup.Version.VersionedCodingKeys,  &v28,  v10,  &type metadata for OwnedBeaconGroup.Version.VersionedCodingKeys,  v16);
    uint64_t v17 = v24;
    KeyedEncodingContainer.encode(_:forKey:)(v23, v18, v24);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v5, v17);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v12, v10);
}

uint64_t sub_1001CF86C()
{
  if (*v0) {
    return 0x656E6F6973726576LL;
  }
  else {
    return 0x79636167656CLL;
  }
}

uint64_t sub_1001CF8A8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001D7B70(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001CF8CC(uint64_t a1)
{
  unint64_t v2 = sub_1001D7FD0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001CF8F4(uint64_t a1)
{
  unint64_t v2 = sub_1001D7FD0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001CF91C(uint64_t a1)
{
  unint64_t v2 = sub_1001D8058();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001CF944(uint64_t a1)
{
  unint64_t v2 = sub_1001D8058();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001CF96C()
{
  return 0x6E6F6973726576LL;
}

uint64_t sub_1001CF984@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x6E6F6973726576LL && a2 == 0xE700000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xE700000000000000LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576LL, 0xE700000000000000LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1001CFA18(uint64_t a1)
{
  unint64_t v2 = sub_1001D8014();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001CFA40(uint64_t a1)
{
  unint64_t v2 = sub_1001D8014();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1001CFA68@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001D7C64(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5 & 1;
  }

  return result;
}

uint64_t sub_1001CFA98(void *a1)
{
  return sub_1001CF654(a1, *(void *)v1, *(unsigned __int8 *)(v1 + 8));
}

Swift::Int sub_1001CFAB4()
{
  Swift::UInt v1 = *(void *)v0;
  char v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)(v5, 0LL);
  Swift::UInt v3 = 0LL;
  if ((v2 & 1) == 0)
  {
    Hasher._combine(_:)(1uLL);
    Swift::UInt v3 = v1;
  }

  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_1001CFB10()
{
  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
  {
    Swift::UInt v1 = 0LL;
  }

  else
  {
    Swift::UInt v1 = *(void *)v0;
    Hasher._combine(_:)(1uLL);
  }

  Hasher._combine(_:)(v1);
}

Swift::Int sub_1001CFB54(uint64_t a1)
{
  Swift::UInt v2 = *(void *)v1;
  char v3 = *(_BYTE *)(v1 + 8);
  Hasher.init(_seed:)(v5, a1);
  if ((v3 & 1) != 0) {
    Swift::UInt v2 = 0LL;
  }
  else {
    Hasher._combine(_:)(1uLL);
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1001CFBB0()
{
  if ((*(_BYTE *)(v0 + 8) & 1) != 0) {
    return 0x79636167656C2ELL;
  }
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 41LL;
  v4._object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  return 0x6E6F69737265762ELL;
}

BOOL sub_1001CFC58(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 8) == 1) {
    return (*(_BYTE *)(a2 + 8) & 1) != 0;
  }
  if ((*(_BYTE *)(a2 + 8) & 1) != 0) {
    return 0LL;
  }
  return *(void *)a1 == *(void *)a2;
}

void sub_1001CFC94()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  Swift::String v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000A8AC(v2, qword_100A2A358);
  sub_10000A720(v0, (uint64_t)qword_100A2A358);
  char v5 = objc_autoreleasePoolPush();
  type metadata accessor for BeaconStore(0LL);
  sub_1004E6208((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011LL, 0x80000001008588E0LL, 1LL);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  objc_autoreleasePoolPop(v5);
}

uint64_t sub_1001CFD74(id *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = static os_log_type_t.debug.getter(v5);
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v10 = swift_allocObject(v9, 72LL, 7LL);
  *(_OWORD *)(v10 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  id v11 = *a1;
  id v12 = [v11 description];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  uint64_t v15 = v14;

  *(void *)(v10 + 56) = &type metadata for String;
  *(void *)(v10 + 64) = sub_1000226F4();
  *(void *)(v10 + 32) = v13;
  *(void *)(v10 + 40) = v15;
  uint64_t v16 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v17 = (void *)static OS_os_log.default.getter(v16);
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v17, "Updating beacon group: %@", 25LL, 2LL, v10);
  swift_bridgeObjectRelease();

  id v18 = [v11 encryptedValues];
  uint64_t ObjectType = swift_getObjectType(v18);
  int v20 = *(unsigned __int8 *)(v2 + 24);
  uint64_t v78 = ObjectType;
  if (v20 != 1)
  {
    uint64_t v27 = *(void *)(v2 + 16);
    if (v27 != 1)
    {
      if (qword_10099B138 != -1) {
        swift_once(&qword_10099B138, sub_10012E678);
      }
      uint64_t v40 = type metadata accessor for Logger(0LL);
      uint64_t v41 = sub_10000A720(v40, (uint64_t)qword_100A2A200);
      uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
      os_log_type_t v43 = static os_log_type_t.fault.getter(v42);
      if (os_log_type_enabled(v42, v43))
      {
        int v44 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        *(_DWORD *)int v44 = 134217984;
        uint64_t v79 = v27;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v44 + 4, v44 + 12);
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Unexpected OwnedBeaconGroup version: %ld!", v44, 0xCu);
        swift_slowDealloc(v44, -1LL, -1LL);
      }

      uint64_t ObjectType = v78;
      goto LABEL_17;
    }

    uint64_t v28 = v2 + *(int *)(type metadata accessor for OwnedBeaconGroup(0LL) + 28);
    uint64_t v29 = &v7[*(int *)(v4 + 20)];
    uint64_t v30 = type metadata accessor for MACAddress(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16LL))(v29, v28, v30);
    *(void *)uint64_t v7 = 1LL;
    v7[8] = 0;
    uint64_t v31 = sub_1001D0590();
    unint64_t v33 = v32;
    sub_100018C68((uint64_t)v7, type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress);
    CKRecordKeyValueSetting.subscript.getter( &v79,  0x657264644163616DLL,  0xEA00000000007373LL,  ObjectType,  &type metadata for Data,  &protocol witness table for Data);
    uint64_t v34 = v79;
    unint64_t v35 = v80;
    sub_10001736C(v31, v33);
    if (v35 >> 60 == 15)
    {
      sub_1000182F0(v34, v35);
      sub_1000182F0(v31, v33);
    }

    else
    {
      sub_100018BE4(v34, v35);
      _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v34, v35);
      char v46 = v45;
      sub_100016F9C(v31, v33);
      sub_1000182F0(v34, v35);
      sub_1000182F0(v34, v35);
      if ((v46 & 1) != 0)
      {
LABEL_16:
        sub_100016F9C(v31, v33);
        goto LABEL_17;
      }
    }

    uint64_t v81 = &type metadata for Data;
    uint64_t v82 = &protocol witness table for Data;
    uint64_t v79 = v31;
    unint64_t v80 = v33;
    sub_10001736C(v31, v33);
    CKRecordKeyValueSetting.subscript.setter(&v79, 0x657264644163616DLL, 0xEA00000000007373LL, ObjectType);
    goto LABEL_16;
  }

  CKRecordKeyValueSetting.subscript.getter( &v79,  0x657264644163616DLL,  0xEA00000000007373LL,  ObjectType,  &type metadata for Data,  &protocol witness table for Data);
  uint64_t v21 = v79;
  unint64_t v22 = v80;
  type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v23 = ((uint64_t (*)(void))MACAddress.dataRepresentation.getter)();
  unint64_t v25 = v24;
  if (v22 >> 60 == 15)
  {
    sub_1000182F0(v21, v22);
    uint64_t v26 = sub_1000182F0(v23, v25);
    uint64_t ObjectType = v78;
  }

  else
  {
    sub_100018BE4(v21, v22);
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v21, v22);
    char v37 = v36;
    sub_100016F9C(v23, v25);
    sub_1000182F0(v21, v22);
    uint64_t v26 = sub_1000182F0(v21, v22);
    uint64_t ObjectType = v78;
    if ((v37 & 1) != 0) {
      goto LABEL_17;
    }
  }

  uint64_t v38 = MACAddress.dataRepresentation.getter(v26);
  uint64_t v81 = &type metadata for Data;
  uint64_t v82 = &protocol witness table for Data;
  uint64_t v79 = v38;
  unint64_t v80 = v39;
  CKRecordKeyValueSetting.subscript.setter(&v79, 0x657264644163616DLL, 0xEA00000000007373LL, ObjectType);
LABEL_17:
  CKRecordKeyValueSetting.subscript.getter( &v79,  1701667182LL,  0xE400000000000000LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  uint64_t v47 = v79;
  unint64_t v48 = v80;
  Swift::String v49 = (int *)type metadata accessor for OwnedBeaconGroup(0LL);
  Swift::String v50 = (uint64_t *)(v2 + v49[9]);
  uint64_t v52 = *v50;
  unint64_t v51 = v50[1];
  if (!v48) {
    goto LABEL_22;
  }
  if (v47 != v52 || v48 != v51)
  {
    char v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v47, v48, *v50, v50[1], 0LL);
    swift_bridgeObjectRelease();
    if ((v53 & 1) != 0) {
      goto LABEL_23;
    }
LABEL_22:
    uint64_t v81 = &type metadata for String;
    uint64_t v82 = &protocol witness table for String;
    uint64_t v79 = v52;
    unint64_t v80 = v51;
    swift_bridgeObjectRetain(v51);
    CKRecordKeyValueSetting.subscript.setter(&v79, 1701667182LL, 0xE400000000000000LL, ObjectType);
    goto LABEL_23;
  }

  swift_bridgeObjectRelease();
LABEL_23:
  CKRecordKeyValueSetting.subscript.getter( &v79,  0x616E454E4D467369LL,  0xEC00000064656C62LL,  ObjectType,  &type metadata for Bool,  &protocol witness table for Bool);
  int v54 = *(unsigned __int8 *)(v2 + v49[8]);
  if (v79 == 2 || ((v54 ^ v79) & 1) != 0)
  {
    uint64_t v81 = &type metadata for Bool;
    uint64_t v82 = &protocol witness table for Bool;
    LOBYTE(v79) = v54;
    CKRecordKeyValueSetting.subscript.setter(&v79, 0x616E454E4D467369LL, 0xEC00000064656C62LL, ObjectType);
  }

  id v77 = v18;
  CKRecordKeyValueSetting.subscript.getter( &v79,  0x614D6E6F63616562LL,  0xE900000000000070LL,  ObjectType,  &type metadata for Data,  &protocol witness table for Data);
  uint64_t v56 = v79;
  unint64_t v55 = v80;
  uint64_t v57 = *(void *)(v2 + v49[10]);
  uint64_t v58 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
  unint64_t v59 = sub_1001D31C0();
  unint64_t v60 = sub_1001D32E0();
  unint64_t v61 = sub_1001D3324();
  uint64_t v62 = sub_100007864( &qword_1009A5868,  type metadata accessor for OwnedBeaconGroup.PairingState,  (uint64_t)&unk_1007F6420);
  uint64_t v63 = sub_100007864( &qword_1009A58A8,  type metadata accessor for OwnedBeaconGroup.PairingState,  (uint64_t)&unk_1007F63D0);
  uint64_t v75 = v58;
  uint64_t v76 = v57;
  uint64_t v64 = Dictionary<>.dataRepresentation.getter( v57,  &type metadata for OwnedBeaconGroup.SerialNumber,  v58,  v59,  v60,  v61,  v62,  v63);
  unint64_t v66 = v65;
  if (v55 >> 60 == 15)
  {
    sub_1000182F0(v56, v55);
    sub_1000182F0(v64, v66);
LABEL_30:
    uint64_t v70 = Dictionary<>.dataRepresentation.getter( v76,  &type metadata for OwnedBeaconGroup.SerialNumber,  v75,  v59,  v60,  v61,  v62,  v63);
    uint64_t v81 = &type metadata for Data;
    uint64_t v82 = &protocol witness table for Data;
    uint64_t v79 = v70;
    unint64_t v80 = v71;
    id v72 = v77;
    CKRecordKeyValueSetting.subscript.setter(&v79, 0x614D6E6F63616562LL, 0xE900000000000070LL, v78);
    id v69 = v72;
    return swift_unknownObjectRelease(v69);
  }

  sub_100018BE4(v56, v55);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v56, v55);
  char v68 = v67;
  sub_100016F9C(v64, v66);
  sub_1000182F0(v56, v55);
  sub_1000182F0(v56, v55);
  if ((v68 & 1) == 0) {
    goto LABEL_30;
  }
  id v69 = v77;
  return swift_unknownObjectRelease(v69);
}

uint64_t sub_1001D0590()
{
  uint64_t v1 = type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress(0LL);
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  JSONEncoder.init()();
  uint64_t v3 = sub_100007864( (unint64_t *)&unk_1009A58C0,  type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress,  (uint64_t)&unk_1007F6380);
  uint64_t v4 = dispatch thunk of JSONEncoder.encode<A>(_:)(v0, v1, v3);
  swift_release();
  return v4;
}

uint64_t sub_1001D0774(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009A5870);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1001D30B4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for OwnedBeaconGroup.CodingKeys,  &type metadata for OwnedBeaconGroup.CodingKeys,  v11,  v9,  v10);
  __int128 v31 = *v3;
  char v30 = 0;
  unint64_t v12 = sub_1000170A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
  if (!v2)
  {
    char v13 = *((_BYTE *)v3 + 24);
    *(void *)&__int128 v31 = *((void *)v3 + 2);
    BYTE8(v31) = v13;
    char v30 = 1;
    unint64_t v14 = sub_1001D3218();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for OwnedBeaconGroup.Version, v14);
    uint64_t v15 = (int *)type metadata accessor for OwnedBeaconGroup(0LL);
    uint64_t v16 = (uint64_t)v3 + v15[6];
    LOBYTE(v31) = 2;
    uint64_t v17 = type metadata accessor for UUID(0LL);
    uint64_t v18 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v31, v5, v17, v18);
    uint64_t v19 = *((unsigned __int8 *)v3 + v15[8]);
    LOBYTE(v31) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v19, &v31, v5);
    int v20 = (uint64_t *)((char *)v3 + v15[9]);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    LOBYTE(v31) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v21, v22, &v31, v5);
    uint64_t v23 = (uint64_t)v3 + v15[7];
    LOBYTE(v31) = 5;
    uint64_t v24 = type metadata accessor for MACAddress(0LL);
    uint64_t v25 = sub_100007864( &qword_1009A5890,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v23, &v31, v5, v24, v25);
    *(void *)&__int128 v31 = *(void *)((char *)v3 + v15[10]);
    char v30 = 6;
    uint64_t v26 = sub_100004AEC(&qword_1009A5850);
    unint64_t v27 = sub_1001D325C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, v26, v27);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001D0A38@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v39 = type metadata accessor for MACAddress(0LL);
  uint64_t v37 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  char v36 = (uint64_t *)((char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v38 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v6 = (uint64_t *)((char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v40 = sub_100004AEC(&qword_1009A5830);
  uint64_t v7 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = (int *)type metadata accessor for OwnedBeaconGroup(0LL);
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  uint64_t v42 = a1;
  sub_100012ED8(a1, v14);
  unint64_t v15 = sub_1001D30B4();
  uint64_t v41 = v9;
  uint64_t v16 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for OwnedBeaconGroup.CodingKeys,  &type metadata for OwnedBeaconGroup.CodingKeys,  v15,  v14,  v13);
  if (v16) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
  }
  os_log_type_t v43 = v6;
  uint64_t v34 = v7;
  uint64_t v17 = (uint64_t)v12;
  uint64_t v18 = v38;
  uint64_t v19 = v39;
  char v45 = 0;
  unint64_t v20 = sub_100016FE0();
  uint64_t v21 = v40;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, &type metadata for Data, &v45, v40, &type metadata for Data, v20);
  *(_OWORD *)uint64_t v17 = v44;
  char v45 = 1;
  unint64_t v22 = sub_1001D30F8();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v44,  &type metadata for OwnedBeaconGroup.Version,  &v45,  v21,  &type metadata for OwnedBeaconGroup.Version,  v22);
  char v23 = BYTE8(v44);
  *(void *)(v17 + swift_weakDestroy(v0 + 16) = v44;
  *(_BYTE *)(v17 + 24) = v23;
  LOBYTE(v44) = 2;
  uint64_t v24 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v25 = v43;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v43, v18, &v44, v21, v18, v24);
  (*(void (**)(uint64_t, void *, uint64_t))(v4 + 32))(v17 + v10[6], v25, v18);
  LOBYTE(v44) = 3;
  *(_BYTE *)(v17 + v10[8]) = KeyedDecodingContainer.decode(_:forKey:)(&v44, v21) & 1;
  LOBYTE(v44) = 4;
  uint64_t v26 = KeyedDecodingContainer.decode(_:forKey:)(&v44, v21);
  unint64_t v27 = (uint64_t *)(v17 + v10[9]);
  *unint64_t v27 = v26;
  v27[1] = v28;
  LOBYTE(v44) = 5;
  uint64_t v29 = sub_100007864( &qword_10099F598,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
  char v30 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v36, v19, &v44, v21, v19, v29);
  (*(void (**)(uint64_t, void *, uint64_t))(v37 + 32))(v17 + v10[7], v30, v19);
  uint64_t v31 = sub_100004AEC(&qword_1009A5850);
  char v45 = 6;
  unint64_t v32 = sub_1001D313C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, v31, &v45, v21, v31, v32);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v41, v21);
  *(void *)(v17 + v10[10]) = v44;
  sub_10001DC4C(v17, v35, type metadata accessor for OwnedBeaconGroup);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
  return sub_100018C68(v17, type metadata accessor for OwnedBeaconGroup);
}

uint64_t sub_1001D0F40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_1001D0F80@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001D0A38(a1, a2);
}

uint64_t sub_1001D0F94(void *a1)
{
  return sub_1001D0774(a1);
}

uint64_t sub_1001D0FA8()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(44LL);
  swift_bridgeObjectRelease();
  uint64_t v2 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v3, v4);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x3A63616D20LL;
  v6._object = (void *)0xE500000000000000LL;
  String.append(_:)(v6);
  uint64_t v7 = type metadata accessor for MACAddress(0LL);
  uint64_t v8 = sub_100007864( &qword_1009A6E60,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v8);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x4D6E6F6361656220LL;
  v10._object = (void *)0xEB000000003A7061LL;
  String.append(_:)(v10);
  uint64_t v11 = *(void *)(v0 + *(int *)(v2 + 40));
  uint64_t v12 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
  unint64_t v13 = sub_1001D3324();
  swift_bridgeObjectRetain(v11);
  v15._countAndFlagsBits = Dictionary.description.getter( v14,  &type metadata for OwnedBeaconGroup.SerialNumber,  v12,  v13);
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0x3A736E6D6620LL;
  v16._object = (void *)0xE600000000000000LL;
  String.append(_:)(v16);
  else {
    uint64_t v17 = 0x65736C6166LL;
  }
  else {
    unint64_t v18 = 0xE500000000000000LL;
  }
  unint64_t v19 = v18;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0x203A6469647520LL;
  v20._object = (void *)0xE700000000000000LL;
  String.append(_:)(v20);
  v22._countAndFlagsBits = MACAddress.udid.getter(v21);
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 62LL;
  v23._object = (void *)0xE100000000000000LL;
  String.append(_:)(v23);
  return 979659068LL;
}

uint64_t sub_1001D11F4()
{
  uint64_t v1 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  Swift::String v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v16 - v6;
  uint64_t v8 = type metadata accessor for OwnedBeaconGroup(0LL);
  swift_bridgeObjectRetain(*(void *)(v0 + *(int *)(v8 + 40)));
  Swift::String v10 = sub_1002FE4D4(v9);
  swift_bridgeObjectRelease();
  uint64_t v11 = v10[2];
  if (v11)
  {
    uint64_t v12 = (uint64_t)v10 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    uint64_t v13 = *(void *)(v2 + 72);
    uint64_t v17 = v10;
    swift_retain();
    do
    {
      sub_10001DC4C(v12, (uint64_t)v7, type metadata accessor for OwnedBeaconGroup.PairingState);
      sub_10001DC4C((uint64_t)v7, (uint64_t)v5, type metadata accessor for OwnedBeaconGroup.PairingState);
      if (swift_getEnumCaseMultiPayload(v5, v1))
      {
        sub_100018C68((uint64_t)v5, type metadata accessor for OwnedBeaconGroup.PairingState);
        sub_100018C68((uint64_t)v7, type metadata accessor for OwnedBeaconGroup.PairingState);
      }

      else
      {
        int v14 = v5[*(int *)(sub_100004AEC((uint64_t *)&unk_1009A5910) + 48) + 2];
        sub_100015794((uint64_t)v5, (uint64_t *)&unk_1009AE480);
        sub_100018C68((uint64_t)v7, type metadata accessor for OwnedBeaconGroup.PairingState);
        if (v14 == 2)
        {
          swift_release_n(v17, 2LL);
          return 1LL;
        }
      }

      v12 += v13;
      --v11;
    }

    while (v11);
    swift_release_n(v17, 2LL);
  }

  else
  {
    swift_release(v10);
  }

  return 0LL;
}

uint64_t sub_1001D13A8()
{
  uint64_t v1 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v1);
  uint64_t v63 = (char *)&v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
  uint64_t v59 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::String v5 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009A58D0);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (int64_t *)((char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v7);
  uint64_t v11 = (int64_t *)((char *)&v56 - v10);
  uint64_t v12 = *(void *)(v0 + *(int *)(type metadata accessor for OwnedBeaconGroup(0LL) + 40));
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v57 = v12 + 64;
  uint64_t v14 = 1LL << *(_BYTE *)(v12 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v58 = (unint64_t)(v14 + 63) >> 6;
  int64_t v56 = v58 - 1;
  uint64_t v60 = v12;
  swift_bridgeObjectRetain(v12);
  int64_t v64 = 0LL;
  uint64_t v17 = &_swiftEmptyDictionarySingleton;
  unint64_t v61 = v11;
  uint64_t v62 = v9;
  while (1)
  {
    if (v16)
    {
      uint64_t v66 = (v16 - 1) & v16;
      unint64_t v20 = __clz(__rbit64(v16)) | (v64 << 6);
LABEL_8:
      uint64_t v21 = *(void *)(v60 + 56);
      Swift::String v22 = (uint64_t *)(*(void *)(v60 + 48) + 16 * v20);
      uint64_t v23 = *v22;
      unint64_t v24 = v22[1];
      *uint64_t v9 = *v22;
      v9[1] = v24;
      uint64_t v25 = v21 + *(void *)(v59 + 72) * v20;
      uint64_t v26 = sub_100004AEC(&qword_1009A2570);
      sub_10001DC4C(v25, (uint64_t)v9 + *(int *)(v26 + 48), type metadata accessor for OwnedBeaconGroup.PairingState);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))(v9, 0LL, 1LL, v26);
      sub_10001736C(v23, v24);
      goto LABEL_27;
    }

    int64_t v27 = v64 + 1;
    if (__OFADD__(v64, 1LL)) {
      goto LABEL_44;
    }
    if (v27 < v58)
    {
      unint64_t v28 = *(void *)(v57 + 8 * v27);
      if (v28) {
        goto LABEL_12;
      }
      int64_t v29 = v64 + 2;
      ++v64;
      if (v27 + 1 < v58)
      {
        unint64_t v28 = *(void *)(v57 + 8 * v29);
        if (v28) {
          goto LABEL_15;
        }
        int64_t v64 = v27 + 1;
        if (v27 + 2 < v58)
        {
          unint64_t v28 = *(void *)(v57 + 8 * (v27 + 2));
          if (v28)
          {
            v27 += 2LL;
            goto LABEL_12;
          }

          int64_t v29 = v27 + 3;
          int64_t v64 = v27 + 2;
          if (v27 + 3 < v58) {
            break;
          }
        }
      }
    }

LABEL_45:
  __break(1u);
LABEL_46:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  swift_release();
  int64_t v56 = v103;
  int v91 = (char *)v103[2];
  if (!v91)
  {
LABEL_79:
    swift_bridgeObjectRelease();
    return v104[0];
  }

  uint64_t v57 = 0LL;
  uint64_t v89 = (char *)v103;
  uint64_t v90 = v103 + 4;
  uint64_t v98 = v9;
  int64_t v58 = (uint64_t)v96;
  while (2)
  {
    uint64_t v59 = v90[(void)v57];
    uint64_t v60 = *(void *)(v59 + 64);
    int v92 = v57 + 1;
    unsigned int v93 = v59 + 64;
    unint64_t v61 = 1LL << *(_BYTE *)(v59 + 32);
    if (v61 < 64) {
      uint64_t v62 = ~(-1LL << v61);
    }
    else {
      uint64_t v62 = -1LL;
    }
    uint64_t v63 = v62 & v60;
    uint64_t v94 = (unint64_t)(v61 + 63) >> 6;
    uint64_t v95 = v59;
    uint64_t v88 = (char *)(v94 - 1);
    int64_t v64 = swift_bridgeObjectRetain(v59);
    uint64_t v65 = 0LL;
    if (v63)
    {
LABEL_53:
      uint64_t v66 = __clz(__rbit64(v63));
      v63 &= v63 - 1;
      char v67 = v66 | (v65 << 6);
      id v69 = (uint64_t)v98;
      char v68 = (uint64_t)v99;
      id v41 = (char *)&qword_1009A6618;
      goto LABEL_54;
    }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

        __break(1u);
LABEL_46:
        uint64_t v4 = sub_1004C50C8((void *)(v13 > 1), v5, 1, v4);
LABEL_19:
        v4[2] = v5;
        unint64_t v16 = &v4[2 * v8];
        v16[4] = v10;
        v16[5] = v6;
        if (v7 > a4)
        {
          if (qword_10099B3C8 != -1) {
            swift_once(&qword_10099B3C8, sub_1003B7ABC);
          }
          uint64_t v17 = type metadata accessor for Logger(0LL);
          uint64_t v18 = sub_10000A720(v17, (uint64_t)qword_1009ABC80);
          uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
          unint64_t v20 = static os_log_type_t.default.getter(v19);
          if (os_log_type_enabled(v19, v20))
          {
            uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v37 = swift_slowAlloc(32LL, -1LL);
            uint64_t v38 = v7;
            id v41 = a4 + 1;
            uint64_t v42 = v37;
            *(_DWORD *)uint64_t v21 = 136446210;
            uint64_t v39 = 0LL;
            uint64_t v40 = 0xE000000000000000LL;
            _print_unlocked<A, B>(_:_:)( &v41,  &v39,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
            v22._countAndFlagsBits = 3026478LL;
            v22._object = (void *)0xE300000000000000LL;
            String.append(_:)(v22);
            _print_unlocked<A, B>(_:_:)( &v38,  &v39,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
            uint64_t v39 = sub_1003F11D4(v39, v40, (uint64_t *)&v42);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v21 + 4, v21 + 12);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v19, v20, "Hole created %{public}s", v21, 0xCu);
            swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v37, -1LL, -1LL);
            swift_slowDealloc(v21, -1LL, -1LL);
          }
        }

        if (!v15) {
          return v4;
        }
        uint64_t v23 = a2 + 1;
        if (a2 != -1LL)
        {
LABEL_27:
          if (v23 <= v10) {
            unint64_t v24 = v10;
          }
          else {
            unint64_t v24 = v23;
          }
          if (v24 > a4)
          {
            __break(1u);
          }

          else
          {
            uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
            if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
              goto LABEL_32;
            }
          }

          uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1004C50C8(0LL, v4[2] + 1LL, 1, v4);
          uint64_t v4 = (void *)isUniquelyReferenced_nonNull_native;
LABEL_32:
          int64_t v27 = v4[2];
          uint64_t v26 = v4[3];
          if (v27 >= v26 >> 1)
          {
            uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1004C50C8((void *)(v26 > 1), v27 + 1, 1, v4);
            uint64_t v4 = (void *)isUniquelyReferenced_nonNull_native;
          }

          v4[2] = v27 + 1;
          unint64_t v28 = &v4[2 * v27];
          v28[4] = v24;
          v28[5] = a4;
          if (v23 >= v10) {
            return v4;
          }
          int64_t v29 = v10 - 1;
          if (v10 - 1 < v23)
          {
            __break(1u);
          }

          else
          {
            if (v23 < 2) {
              return v4;
            }
            uint64_t v10 = static os_log_type_t.default.getter(isUniquelyReferenced_nonNull_native);
            if (qword_10099B3E8 == -1) {
              goto LABEL_38;
            }
          }

          swift_once(&qword_10099B3E8, sub_1003E02E8);
LABEL_38:
          uint64_t v30 = qword_100A2A8F0;
          uint64_t v31 = sub_100004AEC((uint64_t *)&unk_10099D740);
          uint64_t v32 = swift_allocObject(v31, 72LL, 7LL);
          *(_OWORD *)(v32 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
          id v41 = v29;
          uint64_t v42 = v23;
          uint64_t v39 = 0LL;
          uint64_t v40 = 0xE000000000000000LL;
          _print_unlocked<A, B>(_:_:)( &v42,  &v39,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
          v33._countAndFlagsBits = 3026478LL;
          v33._object = (void *)0xE300000000000000LL;
          String.append(_:)(v33);
          _print_unlocked<A, B>(_:_:)( &v41,  &v39,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
          uint64_t v34 = v39;
          uint64_t v35 = v40;
          *(void *)(v32 + 56) = &type metadata for String;
          *(void *)(v32 + 64) = sub_1000226F4();
          *(void *)(v32 + 32) = v34;
          *(void *)(v32 + 40) = v35;
          os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v30, "Hole created %@", 15LL, 2LL, v32);
          swift_bridgeObjectRelease();
          return v4;
        }

      uint64_t v138 = sub_100004AEC(&qword_1009B28B8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v138 - 8) + 56LL))(v129, 1LL, 1LL, v138);
      v494 = 0LL;
      goto LABEL_46;
    }

        v149 = (v41 - 1) & v41;
        v153 = v42;
        uint64_t v39 = __clz(__rbit64(v41)) + (v42 << 6);
      }

      unint64_t v44 = *(void *)(v0 + 472);
      uint64_t v45 = *(void *)(v0 + 448);
      BOOL v46 = *(_BYTE **)(v0 + 400);
      uint64_t v47 = *(void *)(v0 + 408);
      char v48 = *(_BYTE *)(*(void *)(v142 + 48) + v39);
      uint64_t v49 = *(unsigned __int8 **)(v0 + 392);
      (*(void (**)(_BYTE *, unint64_t, uint64_t))(v29 + 16))( &v46[*(int *)(v139 + 48)],  *(void *)(v142 + 56) + *(void *)(v29 + 72) * v39,  v44);
      *BOOL v46 = v48;
      sub_100015750((uint64_t)v46, (uint64_t)v49, &qword_1009A11F8);
      char v50 = *v49;
      unint64_t v51 = &v49[*(int *)(v139 + 48)];
      sub_10001581C(v45 + v146[19], v47, (uint64_t *)&unk_10099D720);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v47, 1LL, v44) == 1)
      {
        sub_100015794(*(void *)(v0 + 408), (uint64_t *)&unk_10099D720);
        __asm { BR              X8 }
      }

      uint64_t v52 = *(void *)(v0 + 488);
      (*(void (**)(uint64_t, void, void))(v29 + 32))(v52, *(void *)(v0 + 408), *(void *)(v0 + 472));
      if ((static Date.< infix(_:_:)(v52, v51) & 1) != 0) {
        __asm { BR              X8 }
      }

      (*(void (**)(void, void))(v29 + 8))(*(void *)(v0 + 488), *(void *)(v0 + 472));
      (*(void (**)(void))(v136 + 56))();
      uint64_t v7 = *(void **)(v0 + 344);
      uint64_t v38 = *(void *)(v0 + 352);
      sub_100015794(*(void *)(v0 + 392), &qword_1009A11F8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v136 + 48))(v7, 1LL, v38) == 1)
      {
        sub_100015794(*(void *)(v0 + 344), &qword_1009B4190);
      }

      else
      {
        uint64_t v7 = *(void **)(v0 + 368);
        BOOL v53 = *(void *)(v0 + 376);
        sub_10002218C(*(void *)(v0 + 344), v53, type metadata accessor for UTInfoPublishRequestBody.State);
        sub_10002218C(v53, (uint64_t)v7, type metadata accessor for UTInfoPublishRequestBody.State);
        if ((swift_isUniquelyReferenced_nonNull_native(v125) & 1) == 0) {
          uint64_t v125 = (void *)sub_1004C6948(0, v125[2] + 1LL, 1, (unint64_t)v125);
        }
        unint64_t v55 = v125[2];
        uint64_t v54 = v125[3];
        if (v55 >= v54 >> 1) {
          uint64_t v125 = (void *)sub_1004C6948(v54 > 1, v55 + 1, 1, (unint64_t)v125);
        }
        int64_t v56 = *(void *)(v0 + 368);
        v125[2] = v55 + 1;
        sub_10002218C( v56,  (uint64_t)v125 + ((*(unsigned __int8 *)(v136 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v136 + 80))
        + *(void *)(v136 + 72) * v55,
          type metadata accessor for UTInfoPublishRequestBody.State);
      }

      uint64_t v36 = v149;
      uint64_t v37 = v153;
    }
  }

  uint64_t v4 = 0LL;
  Swift::String v5 = *(void *)(v0 + 480);
  uint64_t v6 = *(void *)(v0 + 432);
  v145 = *(void *)(v0 + 440);
  uint64_t v120 = _swiftEmptyArrayStorage;
  uint64_t v7 = &unk_10099D720;
  uint64_t v138 = v2;
  uint64_t v141 = v6;
  while (v4 < *(void *)(v3 + 16))
  {
    uint64_t v8 = *(void *)(v0 + 464);
    uint64_t v9 = *(void *)(v0 + 472);
    uint64_t v10 = *(void *)(v0 + 424);
    uint64_t v148 = *(void *)(v145 + 72);
    uint64_t v152 = (*(unsigned __int8 *)(v145 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v145 + 80);
    sub_10001DC4C(*(void *)(v0 + 560) + v152 + v148 * v4, v8, type metadata accessor for WildModeAssociationRecord);
    sub_10001581C(v8 + *(int *)(v6 + 72), v10, (uint64_t *)&unk_10099D720);
    uint64_t v11 = v6;
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v12(v10, 1LL, v9) == 1)
    {
      sub_100015794(*(void *)(v0 + 424), (uint64_t *)&unk_10099D720);
    }

    else
    {
      uint64_t v14 = *(void *)(v0 + 464);
      uint64_t v13 = *(void *)(v0 + 472);
      uint64_t v15 = *(void *)(v0 + 416);
      unint64_t v16 = *(void (**)(uint64_t, void, uint64_t))(v5 + 32);
      v16(*(void *)(v0 + 504), *(void *)(v0 + 424), v13);
      sub_10001581C(v14 + *(int *)(v11 + 76), v15, (uint64_t *)&unk_10099D720);
      uint64_t v17 = v12(v15, 1LL, v13);
      uint64_t v18 = *(void *)(v0 + 504);
      if (v17 == 1)
      {
        uint64_t v19 = *(void *)(v0 + 472);
        sub_100015794(*(void *)(v0 + 416), (uint64_t *)&unk_10099D720);
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v18, v19);
        uint64_t v2 = v138;
LABEL_11:
        sub_10002218C( *(void *)(v0 + 464),  *(void *)(v0 + 456),  type metadata accessor for WildModeAssociationRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(v120) & 1) != 0)
        {
          unint64_t v24 = v120;
        }

        else
        {
          sub_1000330A4(0, v120[2] + 1LL, 1);
          unint64_t v24 = _swiftEmptyArrayStorage;
        }

        uint64_t v26 = v24[2];
        uint64_t v25 = v24[3];
        uint64_t v6 = v141;
        if (v26 >= v25 >> 1)
        {
          sub_1000330A4(v25 > 1, v26 + 1, 1);
          unint64_t v24 = _swiftEmptyArrayStorage;
        }

        int64_t v27 = *(void *)(v0 + 456);
        v24[2] = v26 + 1;
        uint64_t v120 = v24;
        sub_10002218C(v27, (uint64_t)v24 + v152 + v26 * v148, type metadata accessor for WildModeAssociationRecord);
        goto LABEL_5;
      }

      unint64_t v20 = *(void *)(v0 + 496);
      uint64_t v21 = *(void *)(v0 + 472);
      v16(v20, *(void *)(v0 + 416), v21);
      Swift::String v22 = static Date.< infix(_:_:)(v20, v18);
      uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      v23(v20, v21);
      v23(v18, v21);
      uint64_t v2 = v138;
      if ((v22 & 1) != 0) {
        goto LABEL_11;
      }
    }

    sub_100018C68(*(void *)(v0 + 464), type metadata accessor for WildModeAssociationRecord);
    uint64_t v6 = v141;
LABEL_5:
    ++v4;
    uint64_t v3 = v122;
    if (v2 == v4) {
      goto LABEL_19;
    }
  }

    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
  }

  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

      uint64_t v9 = v21;
    }

  __break(1u);
}

id sub_1001D18D4()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v68 = *(void *)(v1 - 8);
  uint64_t v69 = v1;
  __chkstk_darwin(v1);
  char v67 = (char *)&v64 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v66 = (uint64_t)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v64 - v6;
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v65 = (uint64_t)&v64 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v16 = (char *)&v64 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v64 - v17;
  uint64_t v19 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  Swift::String v22 = (void *)qword_100A2AF38;
  id v23 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v24 = [v23 isInternalBuild];

  if (v24)
  {
    NSString v25 = String._bridgeToObjectiveC()();
    unsigned __int8 v26 = [v22 BOOLForKey:v25];

    if ((v26 & 1) != 0) {
      return [objc_allocWithZone(SPPairingState) initWithStatus:2 beaconIdentifier:0 macAddress:0 pairingEpoch:0 partId:255 pairingType:-1];
    }
  }

  sub_10001DC4C(v0, (uint64_t)v21, type metadata accessor for OwnedBeaconGroup.PairingState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v21, v19);
  if (!EnumCaseMultiPayload)
  {
    char v48 = (unsigned __int8 *)&v21[*(int *)(sub_100004AEC((uint64_t *)&unk_1009A5910) + 48)];
    unsigned __int8 v49 = *v48;
    int v50 = v48[1];
    uint64_t v51 = (char)v48[2];
    sub_100015750((uint64_t)v21, (uint64_t)v18, (uint64_t *)&unk_1009AE480);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56))(v7, 1LL, 1LL, v69);
    sub_1001D51E8((uint64_t)v18, (uint64_t)v16);
    uint64_t v52 = type metadata accessor for MACAddress(0LL);
    uint64_t v53 = *(void *)(v52 - 8);
    uint64_t v54 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48))(v16, 1LL, v52);
    if ((_DWORD)v54 == 1)
    {
      sub_100015794((uint64_t)v16, (uint64_t *)&unk_1009AE480);
      uint64_t v55 = 0LL;
      unint64_t v56 = 0xF000000000000000LL;
    }

    else
    {
      uint64_t v55 = MACAddress.data.getter(v54);
      unint64_t v56 = v61;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v16, v52);
    }

    if (v50) {
      unsigned __int8 v62 = -1;
    }
    else {
      unsigned __int8 v62 = v49;
    }
    uint64_t v63 = qword_1007F69B8[v51];
    sub_100022898(0LL, &qword_1009A5988, &OBJC_CLASS___SPPairingState_ptr);
    id v57 = sub_1001D2E38(0LL, (uint64_t)v7, v55, v56, 0LL, v62, v63);
    sub_100015794((uint64_t)v18, (uint64_t *)&unk_1009AE480);
    return v57;
  }

  if (EnumCaseMultiPayload == 1)
  {
    int64_t v29 = (int *)sub_100004AEC((uint64_t *)&unk_1009A58E0);
    uint64_t v30 = (uint64_t)&v21[v29[12]];
    sub_1000182F0(*(void *)&v21[v29[16]], *(void *)&v21[v29[16] + 8]);
    uint64_t v31 = &v21[v29[20]];
    uint64_t v64 = *(void *)v31;
    char v32 = v31[8];
    unint64_t v33 = (unsigned __int8 *)&v21[v29[24]];
    unsigned __int8 v34 = *v33;
    int v35 = v33[1];
    uint64_t v36 = (char)v33[2];
    uint64_t v37 = v67;
    uint64_t v38 = v68;
    uint64_t v39 = v69;
    (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v67, v21, v69);
    uint64_t v40 = v65;
    sub_100015750(v30, v65, (uint64_t *)&unk_1009AE480);
    uint64_t v41 = v66;
    (*(void (**)(uint64_t, char *, uint64_t))(v38 + 16))(v66, v37, v39);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v41, 0LL, 1LL, v39);
    sub_1001D51E8(v40, (uint64_t)v11);
    uint64_t v42 = type metadata accessor for MACAddress(0LL);
    uint64_t v43 = *(void *)(v42 - 8);
    uint64_t v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48))(v11, 1LL, v42);
    if ((_DWORD)v44 == 1)
    {
      sub_100015794((uint64_t)v11, (uint64_t *)&unk_1009AE480);
      uint64_t v45 = 0LL;
      unint64_t v46 = 0xF000000000000000LL;
      if ((v32 & 1) == 0)
      {
LABEL_10:
        v47.super.super.Class isa = Int64._bridgeToObjectiveC()().super.super.isa;
LABEL_16:
        if (v35) {
          unsigned __int8 v59 = -1;
        }
        else {
          unsigned __int8 v59 = v34;
        }
        uint64_t v60 = qword_1007F69B8[v36];
        sub_100022898(0LL, &qword_1009A5988, &OBJC_CLASS___SPPairingState_ptr);
        id v57 = sub_1001D2E38(1LL, v66, v45, v46, v47.super.super.isa, v59, v60);
        sub_100015794(v65, (uint64_t *)&unk_1009AE480);
        (*(void (**)(char *, uint64_t))(v68 + 8))(v67, v69);
        return v57;
      }
    }

    else
    {
      uint64_t v45 = MACAddress.data.getter(v44);
      unint64_t v46 = v58;
      (*(void (**)(char *, uint64_t))(v43 + 8))(v11, v42);
      if ((v32 & 1) == 0) {
        goto LABEL_10;
      }
    }

    v47.super.super.Class isa = 0LL;
    goto LABEL_16;
  }

  return [objc_allocWithZone(SPPairingState) initWithStatus:2 beaconIdentifier:0 macAddress:0 pairingEpoch:0 partId:255 pairingType:-1];
}

uint64_t sub_1001D1EB4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v141 = (uint64_t)&v130 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v130 - v5;
  uint64_t v7 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
  uint64_t v148 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v144 = (uint64_t)&v130 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v139 = (char *)&v130 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v143 = (uint64_t)&v130 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v138 = (uint64_t)&v130 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v142 = (uint64_t)&v130 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v137 = (uint64_t)&v130 - v19;
  __chkstk_darwin(v18);
  uint64_t v151 = (uint64_t)&v130 - v20;
  uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009A58D0);
  uint64_t v22 = __chkstk_darwin(v21);
  unsigned int v24 = (uint64_t *)((char *)&v130 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v22);
  unsigned __int8 v26 = (uint64_t *)((char *)&v130 - v25);
  uint64_t v136 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v150 = *(int *)(v136 + 40);
  uint64_t v27 = *(void *)(v0 + v150);
  uint64_t v28 = *(void *)(v27 + 64);
  uint64_t v134 = v27 + 64;
  uint64_t v29 = 1LL << *(_BYTE *)(v27 + 32);
  uint64_t v30 = -1LL;
  if (v29 < 64) {
    uint64_t v30 = ~(-1LL << v29);
  }
  unint64_t v152 = v30 & v28;
  unint64_t v31 = (unint64_t)(v29 + 63) >> 6;
  unint64_t v131 = v31 - 1;
  swift_bridgeObjectRetain(v27);
  unint64_t v32 = 0LL;
  int64_t v140 = v31;
  unint64_t v132 = v31 - 5;
  uint64_t v145 = v33;
  uint64_t v133 = v33 + 104;
  uint64_t v146 = v26;
  v147 = v24;
  uint64_t v135 = v6;
  while (1)
  {
    if (v152)
    {
      unint64_t v35 = __clz(__rbit64(v152));
      v152 &= v152 - 1;
      unint64_t v149 = v32;
      unint64_t v36 = v35 | (v32 << 6);
      goto LABEL_9;
    }

    int64_t v43 = v32 + 1;
    if (__OFADD__(v32, 1LL)) {
      break;
    }
    if (v43 >= v140)
    {
      unint64_t v45 = v32;
    }

    else
    {
      unint64_t v44 = *(void *)(v134 + 8 * v43);
      if (v44) {
        goto LABEL_13;
      }
      unint64_t v45 = v32 + 1;
      if ((uint64_t)(v32 + 2) < v140)
      {
        unint64_t v44 = *(void *)(v134 + 8 * (v32 + 2));
        if (v44)
        {
          int64_t v43 = v32 + 2;
          goto LABEL_13;
        }

        unint64_t v45 = v32 + 2;
        if ((uint64_t)(v32 + 3) < v140)
        {
          unint64_t v44 = *(void *)(v134 + 8 * (v32 + 3));
          if (v44)
          {
            int64_t v43 = v32 + 3;
LABEL_13:
            unint64_t v152 = (v44 - 1) & v44;
            unint64_t v36 = __clz(__rbit64(v44)) + (v43 << 6);
            unint64_t v149 = v43;
LABEL_9:
            uint64_t v37 = *(void *)(v145 + 56);
            uint64_t v38 = (uint64_t *)(*(void *)(v145 + 48) + 16 * v36);
            uint64_t v39 = *v38;
            unint64_t v40 = v38[1];
            *unsigned int v24 = *v38;
            v24[1] = v40;
            uint64_t v41 = v37 + *(void *)(v148 + 72) * v36;
            uint64_t v42 = sub_100004AEC(&qword_1009A2570);
            sub_10001DC4C( v41,  (uint64_t)v24 + *(int *)(v42 + 48),  type metadata accessor for OwnedBeaconGroup.PairingState);
            (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56LL))( v24,  0LL,  1LL,  v42);
            sub_10001736C(v39, v40);
            goto LABEL_16;
          }

          int64_t v43 = v32 + 4;
          unint64_t v45 = v32 + 3;
          if ((uint64_t)(v32 + 4) < v140)
          {
            unint64_t v44 = *(void *)(v134 + 8 * v43);
            if (v44) {
              goto LABEL_13;
            }
            while (v132 != v32)
            {
              unint64_t v44 = *(void *)(v133 + 8 * v32++);
              if (v44)
              {
                int64_t v43 = v32 + 4;
                goto LABEL_13;
              }
            }

            unint64_t v45 = v131;
          }
        }
      }
    }

    uint64_t v46 = sub_100004AEC(&qword_1009A2570);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56LL))(v24, 1LL, 1LL, v46);
    unint64_t v152 = 0LL;
    unint64_t v149 = v45;
LABEL_16:
    sub_100015750((uint64_t)v24, (uint64_t)v26, (uint64_t *)&unk_1009A58D0);
    uint64_t v47 = sub_100004AEC(&qword_1009A2570);
    uint64_t v48 = *v26;
    unint64_t v49 = v26[1];
    uint64_t v50 = (uint64_t)v26 + *(int *)(v47 + 48);
    uint64_t v51 = v151;
    sub_10002218C(v50, v151, type metadata accessor for OwnedBeaconGroup.PairingState);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v51, v7);
    unint64_t v153 = v49;
    if (!EnumCaseMultiPayload)
    {
      uint64_t v78 = sub_100004AEC((uint64_t *)&unk_1009A5910);
      uint64_t v79 = (char *)(v151 + *(int *)(v78 + 48));
      char v80 = *v79;
      char v81 = v79[1];
      char v82 = v79[2];
      sub_100015750(v151, (uint64_t)v6, (uint64_t *)&unk_1009AE480);
      uint64_t v83 = v137;
      uint64_t v84 = (_BYTE *)(v137 + *(int *)(v78 + 48));
      sub_1001D51E8((uint64_t)v6, v137);
      *uint64_t v84 = v80;
      v84[1] = v81;
      v84[2] = v82;
      swift_storeEnumTagMultiPayload(v83, v7, 0LL);
      sub_10002218C(v83, v142, type metadata accessor for OwnedBeaconGroup.PairingState);
      sub_10001736C(v48, v49);
      uint64_t v85 = v150;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v150));
      uint64_t v154 = *(void **)(v1 + v85);
      unint64_t v87 = v154;
      *(void *)(v1 + v85) = 0x8000000000000000LL;
      unint64_t v89 = sub_10030CFC0(v48, v49);
      uint64_t v90 = v87[2];
      BOOL v91 = (v88 & 1) == 0;
      uint64_t v92 = v90 + v91;
      if (__OFADD__(v90, v91)) {
        goto LABEL_66;
      }
      char v93 = v88;
      if (v87[3] >= v92)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_100064144();
        }
        unint64_t v94 = v153;
        uint64_t v97 = v154;
        if ((v93 & 1) == 0) {
          goto LABEL_27;
        }
      }

      else
      {
        sub_10004E394(v92, isUniquelyReferenced_nonNull_native);
        unint64_t v94 = v153;
        uint64_t v95 = sub_10030CFC0(v48, v153);
        if ((v93 & 1) != (v96 & 1)) {
          goto LABEL_71;
        }
        unint64_t v89 = v95;
        uint64_t v97 = v154;
        if ((v93 & 1) == 0)
        {
LABEL_27:
          v97[(v89 >> 6) + 8] |= 1LL << v89;
          uint64_t v98 = (uint64_t *)(v97[6] + 16 * v89);
          *uint64_t v98 = v48;
          v98[1] = v94;
          sub_10002218C( v142,  v97[7] + *(void *)(v148 + 72) * v89,  type metadata accessor for OwnedBeaconGroup.PairingState);
          uint64_t v99 = v97[2];
          BOOL v100 = __OFADD__(v99, 1LL);
          uint64_t v101 = v99 + 1;
          if (v100) {
            goto LABEL_68;
          }
          v97[2] = v101;
          sub_10001736C(v48, v94);
          goto LABEL_45;
        }
      }

      sub_1001D6178(v142, v97[7] + *(void *)(v148 + 72) * v89);
LABEL_45:
      *(void *)(v1 + v150) = v97;
      swift_bridgeObjectRelease();
      sub_100016F9C(v48, v94);
      sub_100016F9C(v48, v94);
      sub_100015794((uint64_t)v6, (uint64_t *)&unk_1009AE480);
      goto LABEL_6;
    }

    if (EnumCaseMultiPayload != 1)
    {
      uint64_t v102 = sub_100004AEC((uint64_t *)&unk_1009A5910);
      uint64_t v103 = (uint64_t)v139;
      unint64_t v104 = &v139[*(int *)(v102 + 48)];
      uint64_t v105 = v1 + *(int *)(v136 + 28);
      uint64_t v106 = type metadata accessor for MACAddress(0LL);
      uint64_t v107 = *(void *)(v106 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 16))(v103, v105, v106);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v107 + 56))(v103, 0LL, 1LL, v106);
      *(_WORD *)unint64_t v104 = 256;
      v104[2] = 3;
      swift_storeEnumTagMultiPayload(v103, v7, 0LL);
      sub_10002218C(v103, v144, type metadata accessor for OwnedBeaconGroup.PairingState);
      unint64_t v108 = v153;
      sub_10001736C(v48, v153);
      uint64_t v109 = v150;
      uint64_t v110 = swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v150));
      uint64_t v154 = *(void **)(v1 + v109);
      unint64_t v111 = v154;
      *(void *)(v1 + v109) = 0x8000000000000000LL;
      unint64_t v113 = sub_10030CFC0(v48, v108);
      uint64_t v114 = v111[2];
      BOOL v115 = (v112 & 1) == 0;
      uint64_t v116 = v114 + v115;
      if (__OFADD__(v114, v115)) {
        goto LABEL_67;
      }
      char v117 = v112;
      if (v111[3] >= v116)
      {
        if ((v110 & 1) == 0) {
          sub_100064144();
        }
        unint64_t v118 = v153;
        uint64_t v121 = v154;
        if ((v117 & 1) == 0) {
          goto LABEL_33;
        }
      }

      else
      {
        sub_10004E394(v116, v110);
        unint64_t v118 = v153;
        uint64_t v119 = sub_10030CFC0(v48, v153);
        if ((v117 & 1) != (v120 & 1)) {
          goto LABEL_71;
        }
        unint64_t v113 = v119;
        uint64_t v121 = v154;
        if ((v117 & 1) == 0)
        {
LABEL_33:
          v121[(v113 >> 6) + 8] |= 1LL << v113;
          uint64_t v122 = (uint64_t *)(v121[6] + 16 * v113);
          *uint64_t v122 = v48;
          v122[1] = v118;
          sub_10002218C( v144,  v121[7] + *(void *)(v148 + 72) * v113,  type metadata accessor for OwnedBeaconGroup.PairingState);
          uint64_t v123 = v121[2];
          BOOL v100 = __OFADD__(v123, 1LL);
          uint64_t v124 = v123 + 1;
          if (v100) {
            goto LABEL_69;
          }
          v121[2] = v124;
          sub_10001736C(v48, v118);
          goto LABEL_50;
        }
      }

      sub_1001D6178(v144, v121[7] + *(void *)(v148 + 72) * v113);
LABEL_50:
      *(void *)(v1 + v150) = v121;
      swift_bridgeObjectRelease();
      sub_100016F9C(v48, v118);
      sub_100016F9C(v48, v118);
      goto LABEL_6;
    }

    uint64_t v53 = (int *)sub_100004AEC((uint64_t *)&unk_1009A58E0);
    uint64_t v54 = v151;
    uint64_t v55 = v151 + v53[12];
    sub_1000182F0(*(void *)(v151 + v53[16]), *(void *)(v151 + v53[16] + 8));
    unint64_t v56 = (_BYTE *)(v54 + v53[24]);
    LOBYTE(v53) = *v56;
    char v57 = v56[1];
    char v58 = v56[2];
    uint64_t v59 = v7;
    uint64_t v60 = v141;
    sub_100015750(v55, v141, (uint64_t *)&unk_1009AE480);
    uint64_t v61 = sub_100004AEC((uint64_t *)&unk_1009A5910);
    uint64_t v62 = v138;
    uint64_t v63 = (_BYTE *)(v138 + *(int *)(v61 + 48));
    sub_1001D51E8(v60, v138);
    *uint64_t v63 = (_BYTE)v53;
    v63[1] = v57;
    v63[2] = v58;
    uint64_t v64 = v59;
    swift_storeEnumTagMultiPayload(v62, v59, 0LL);
    sub_10002218C(v62, v143, type metadata accessor for OwnedBeaconGroup.PairingState);
    unint64_t v65 = v153;
    sub_10001736C(v48, v153);
    uint64_t v66 = v150;
    uint64_t v67 = swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v150));
    uint64_t v154 = *(void **)(v1 + v66);
    uint64_t v68 = v154;
    *(void *)(v1 + v66) = 0x8000000000000000LL;
    unint64_t v70 = sub_10030CFC0(v48, v65);
    uint64_t v71 = v68[2];
    BOOL v72 = (v69 & 1) == 0;
    uint64_t v73 = v71 + v72;
    if (__OFADD__(v71, v72)) {
      goto LABEL_65;
    }
    char v74 = v69;
    if (v68[3] >= v73)
    {
      uint64_t v6 = v135;
      if ((v67 & 1) == 0) {
        sub_100064144();
      }
      unint64_t v75 = v153;
    }

    else
    {
      sub_10004E394(v73, v67);
      unint64_t v75 = v153;
      uint64_t v76 = sub_10030CFC0(v48, v153);
      uint64_t v6 = v135;
      if ((v74 & 1) != (v77 & 1)) {
        goto LABEL_71;
      }
      unint64_t v70 = v76;
    }

    uint64_t v125 = v154;
    uint64_t v7 = v64;
    if ((v74 & 1) != 0)
    {
      sub_1001D6178(v143, v154[7] + *(void *)(v148 + 72) * v70);
    }

    else
    {
      v154[(v70 >> 6) + 8] |= 1LL << v70;
      unint64_t v126 = (uint64_t *)(v125[6] + 16 * v70);
      *unint64_t v126 = v48;
      v126[1] = v75;
      sub_10002218C( v143,  v125[7] + *(void *)(v148 + 72) * v70,  type metadata accessor for OwnedBeaconGroup.PairingState);
      uint64_t v127 = v125[2];
      BOOL v100 = __OFADD__(v127, 1LL);
      uint64_t v128 = v127 + 1;
      if (v100) {
        goto LABEL_70;
      }
      v125[2] = v128;
      sub_10001736C(v48, v75);
    }

    *(void *)(v1 + v150) = v125;
    swift_bridgeObjectRelease();
    sub_100016F9C(v48, v75);
    sub_100016F9C(v48, v75);
    sub_100015794(v141, (uint64_t *)&unk_1009AE480);
    uint64_t v34 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8LL))(v151, v34);
LABEL_6:
    unsigned __int8 v26 = v146;
    unsigned int v24 = v147;
    unint64_t v32 = v149;
  }

  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for OwnedBeaconGroup.SerialNumber);
  __break(1u);
  return result;
}

uint64_t sub_1001D2A18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v37 = (uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009A5990);
  __chkstk_darwin(v7);
  uint64_t v41 = (uint64_t)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v44 = (uint64_t)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v35 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v35 - v16;
  uint64_t v18 = _swiftEmptyArrayStorage;
  uint64_t v47 = _swiftEmptyArrayStorage;
  uint64_t v19 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain(a2);
  if (v19)
  {
    uint64_t v35 = a2;
    unint64_t v36 = v15;
    uint64_t v38 = v5;
    uint64_t v39 = v4;
    uint64_t v40 = a1;
    uint64_t v20 = *(void *)(v10 + 72);
    unint64_t v43 = (*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v21 = a2 + v43;
    uint64_t v22 = _swiftEmptyArrayStorage;
    uint64_t v42 = v10;
    do
    {
      sub_10001DC4C(v21, (uint64_t)v17, type metadata accessor for BeaconObservation);
      sub_1001D6134();
      uint64_t v46 = Set.init(minimumCapacity:)(2LL);
      sub_1000BE44C(&v45, 37LL);
      sub_1000BE44C(&v45, 38LL);
      BOOL v23 = sub_1004E55A0(v17[*(int *)(v9 + 24)], v46);
      swift_bridgeObjectRelease();
      if (v23)
      {
        uint64_t v24 = v9;
        sub_10002218C((uint64_t)v17, v44, type metadata accessor for BeaconObservation);
        if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0) {
          sub_100032AA8(0, v22[2] + 1LL, 1);
        }
        uint64_t v22 = v47;
        unint64_t v26 = v47[2];
        unint64_t v25 = v47[3];
        if (v26 >= v25 >> 1)
        {
          sub_100032AA8(v25 > 1, v26 + 1, 1);
          uint64_t v22 = v47;
        }

        v22[2] = v26 + 1;
        sub_10002218C(v44, (uint64_t)v22 + v43 + v26 * v20, type metadata accessor for BeaconObservation);
        uint64_t v9 = v24;
        uint64_t v10 = v42;
      }

      else
      {
        sub_100018C68((uint64_t)v17, type metadata accessor for BeaconObservation);
      }

      v21 += v20;
      --v19;
    }

    while (v19);
    uint64_t v18 = v47;
    uint64_t v4 = v39;
    a1 = v40;
    uint64_t v5 = v38;
    uint64_t v15 = v36;
  }

  swift_bridgeObjectRelease();
  uint64_t v27 = v41;
  sub_1000F0A44((uint64_t)v18, v41);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v27, 1LL, v9) == 1)
  {
    sub_100015794(v27, (uint64_t *)&unk_1009A5990);
LABEL_19:
    char v32 = 0;
    uint64_t v33 = 1LL;
    goto LABEL_20;
  }

  sub_10002218C(v27, (uint64_t)v15, type metadata accessor for BeaconObservation);
  if (v15[*(int *)(v9 + 24)] != 37)
  {
    sub_100018C68((uint64_t)v15, type metadata accessor for BeaconObservation);
    goto LABEL_19;
  }

  uint64_t v28 = (uint64_t)v15;
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v29 = sub_1006A0C48((uint64_t)v47);
  uint64_t v30 = swift_bridgeObjectRelease();
  Date.addingTimeInterval(_:)(v30, (double)v29);
  uint64_t v31 = v37;
  static Date.trustedNow.getter(v37);
  char v32 = static Date.> infix(_:_:)(a1, v31);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v31, v4);
  sub_100018C68(v28, type metadata accessor for BeaconObservation);
  uint64_t v33 = 0LL;
LABEL_20:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a1, v33, 1LL, v4);
  return v32 & 1;
}

id sub_1001D2E38( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, unsigned __int8 a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  Class isa = 0LL;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(a2, 1LL, v15) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a2, v15);
  }

  if (a4 >> 60 == 15)
  {
    Class v18 = 0LL;
  }

  else
  {
    Class v18 = Data._bridgeToObjectiveC()().super.isa;
    sub_1000182F0(a3, a4);
  }

  id v19 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v8)) initWithStatus:a1 beaconIdentifier:isa macAddress:v18 pairingEpoch:a5 partId:a6 pairingType:a7];

  return v19;
}

uint64_t sub_1001D2F5C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for JSONDecoder(0LL);
  uint64_t v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  JSONDecoder.init()(v8);
  uint64_t v9 = sub_100007864( &qword_1009A58B8,  type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress,  (uint64_t)&unk_1007F63A8);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v3, a1, a2, a3, v9);
  sub_100016F9C(a1, a2);
  return swift_release();
}

uint64_t sub_1001D301C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100007864( &qword_1009A5818,  type metadata accessor for OwnedBeaconGroup,  (uint64_t)&unk_1007F5E58);
  uint64_t result = sub_100007864(&qword_1009A5820, type metadata accessor for OwnedBeaconGroup, (uint64_t)&unk_1007F5E30);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

uint64_t sub_1001D3078(uint64_t a1)
{
  uint64_t result = sub_100007864(&qword_1009A5828, type metadata accessor for OwnedBeaconGroup, (uint64_t)&unk_1007F5E80);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001D30B4()
{
  unint64_t result = qword_1009A5838;
  if (!qword_1009A5838)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F6470, &type metadata for OwnedBeaconGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5838);
  }

  return result;
}

unint64_t sub_1001D30F8()
{
  unint64_t result = qword_1009A5848;
  if (!qword_1009A5848)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F6448, &type metadata for OwnedBeaconGroup.Version);
    atomic_store(result, (unint64_t *)&qword_1009A5848);
  }

  return result;
}

unint64_t sub_1001D313C()
{
  unint64_t result = qword_1009A5858;
  if (!qword_1009A5858)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A5850);
    sub_1001D31C0();
    sub_100007864(&qword_1009A5868, type metadata accessor for OwnedBeaconGroup.PairingState, (uint64_t)&unk_1007F6420);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1009A5858);
  }

  return result;
}

unint64_t sub_1001D31C0()
{
  unint64_t result = qword_1009A5860;
  if (!qword_1009A5860)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F5D00, &type metadata for OwnedBeaconGroup.SerialNumber);
    atomic_store(result, (unint64_t *)&qword_1009A5860);
  }

  return result;
}

uint64_t type metadata accessor for OwnedBeaconGroup.PairingState(uint64_t a1)
{
  return sub_10008BED8( a1,  (uint64_t *)&unk_1009A5AC0,  (uint64_t)&nominal type descriptor for OwnedBeaconGroup.PairingState);
}

unint64_t sub_1001D3218()
{
  unint64_t result = qword_1009A5880;
  if (!qword_1009A5880)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F63F8, &type metadata for OwnedBeaconGroup.Version);
    atomic_store(result, (unint64_t *)&qword_1009A5880);
  }

  return result;
}

unint64_t sub_1001D325C()
{
  unint64_t result = qword_1009A5898;
  if (!qword_1009A5898)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A5850);
    sub_1001D32E0();
    sub_100007864(&qword_1009A58A8, type metadata accessor for OwnedBeaconGroup.PairingState, (uint64_t)&unk_1007F63D0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1009A5898);
  }

  return result;
}

unint64_t sub_1001D32E0()
{
  unint64_t result = qword_1009A58A0;
  if (!qword_1009A58A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F5CD8, &type metadata for OwnedBeaconGroup.SerialNumber);
    atomic_store(result, (unint64_t *)&qword_1009A58A0);
  }

  return result;
}

unint64_t sub_1001D3324()
{
  unint64_t result = qword_1009A58B0;
  if (!qword_1009A58B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F5C98, &type metadata for OwnedBeaconGroup.SerialNumber);
    atomic_store(result, (unint64_t *)&qword_1009A58B0);
  }

  return result;
}

uint64_t type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress(uint64_t a1)
{
  return sub_10008BED8( a1,  qword_1009A5A18,  (uint64_t)&nominal type descriptor for OwnedBeaconGroup.VersionedGroupMACAddress);
}

uint64_t sub_1001D337C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v44 - v9;
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009A59B0);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v12);
  uint64_t v17 = (unsigned __int8 *)&v44 - v16;
  if (a1 == a2) {
    return 1LL;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  uint64_t v48 = a2;
  int64_t v49 = 0LL;
  uint64_t v47 = a1;
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v19 = a1 + 64;
  uint64_t v18 = v20;
  uint64_t v21 = 1LL << *(_BYTE *)(v19 - 32);
  uint64_t v22 = -1LL;
  if (v21 < 64) {
    uint64_t v22 = ~(-1LL << v21);
  }
  unint64_t v23 = v22 & v18;
  uint64_t v45 = v19;
  int64_t v46 = (unint64_t)(v21 + 63) >> 6;
  int64_t v44 = v46 - 1;
  while (1)
  {
    if (v23)
    {
      unint64_t v24 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      unint64_t v25 = v24 | (v49 << 6);
LABEL_8:
      char v26 = *(_BYTE *)(*(void *)(v47 + 48) + v25);
      unint64_t v27 = *(void *)(v47 + 56) + *(void *)(v5 + 72) * v25;
      uint64_t v28 = sub_100004AEC(&qword_1009A11F8);
      (*(void (**)(_BYTE *, unint64_t, uint64_t))(v5 + 16))(&v14[*(int *)(v28 + 48)], v27, v4);
      *uint64_t v14 = v26;
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(v14, 0LL, 1LL, v28);
      uint64_t v29 = v48;
      goto LABEL_27;
    }

    int64_t v30 = v49 + 1;
    if (__OFADD__(v49, 1LL))
    {
      __break(1u);
      goto LABEL_36;
    }

    uint64_t v29 = v48;
    if (v30 < v46)
    {
      unint64_t v31 = *(void *)(v45 + 8 * v30);
      if (v31) {
        goto LABEL_12;
      }
      int64_t v32 = v49 + 2;
      ++v49;
      if (v30 + 1 < v46)
      {
        unint64_t v31 = *(void *)(v45 + 8 * v32);
        if (v31) {
          goto LABEL_15;
        }
        int64_t v49 = v30 + 1;
        if (v30 + 2 < v46)
        {
          unint64_t v31 = *(void *)(v45 + 8 * (v30 + 2));
          if (v31)
          {
            v30 += 2LL;
            goto LABEL_12;
          }

          int64_t v32 = v30 + 3;
          int64_t v49 = v30 + 2;
          if (v30 + 3 < v46) {
            break;
          }
        }
      }
    }

uint64_t sub_1001D3770(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FeatureSupportMatrix(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v57 = v4;
  uint64_t v58 = v5;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (uint64_t *)((char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v6);
  uint64_t v10 = (uint64_t *)((char *)&v51 - v9);
  uint64_t v11 = sub_100004AEC(&qword_1009A5938);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v51 - v16;
  if (a1 == a2) {
    return 1LL;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  uint64_t v55 = a1;
  int64_t v56 = 0LL;
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v53 = a1 + 64;
  uint64_t v19 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v20 = -1LL;
  if (v19 < 64) {
    uint64_t v20 = ~(-1LL << v19);
  }
  unint64_t v21 = v20 & v18;
  int64_t v54 = (unint64_t)(v19 + 63) >> 6;
  int64_t v52 = v54 - 1;
  while (1)
  {
    if (v21)
    {
      unint64_t v22 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v23 = v22 | (v56 << 6);
LABEL_8:
      char v24 = *(_BYTE *)(*(void *)(a1 + 48) + v23);
      uint64_t v25 = *(void *)(a1 + 56) + *(void *)(v58 + 72) * v23;
      uint64_t v26 = sub_100004AEC(&qword_1009A5940);
      sub_10001DC4C(v25, (uint64_t)&v14[*(int *)(v26 + 48)], type metadata accessor for FeatureSupportMatrix);
      *uint64_t v14 = v24;
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))(v14, 0LL, 1LL, v26);
      goto LABEL_27;
    }

    int64_t v27 = v56 + 1;
    if (__OFADD__(v56, 1LL))
    {
      __break(1u);
      goto LABEL_50;
    }

    if (v27 < v54)
    {
      unint64_t v28 = *(void *)(v53 + 8 * v27);
      if (v28) {
        goto LABEL_12;
      }
      int64_t v29 = v56 + 2;
      ++v56;
      if (v27 + 1 < v54)
      {
        unint64_t v28 = *(void *)(v53 + 8 * v29);
        if (v28) {
          goto LABEL_15;
        }
        int64_t v56 = v27 + 1;
        if (v27 + 2 < v54)
        {
          unint64_t v28 = *(void *)(v53 + 8 * (v27 + 2));
          if (v28)
          {
            v27 += 2LL;
            goto LABEL_12;
          }

          int64_t v29 = v27 + 3;
          int64_t v56 = v27 + 2;
          if (v27 + 3 < v54) {
            break;
          }
        }
      }
    }

uint64_t sub_1001D3C60(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1LL;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  int64_t v4 = 0LL;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }

    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v12 >= v9) {
      return 1LL;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1LL;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1LL;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }

uint64_t sub_1001D3DFC(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1LL;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  int64_t v4 = 0LL;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }

    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v12 >= v9) {
      return 1LL;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1LL;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1LL;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }

uint64_t sub_1001D3F90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SystemVersionNumber(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v63 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  int64_t v9 = (char *)&v56 - v8;
  uint64_t v10 = sub_100004AEC(&qword_1009A5958);
  uint64_t v11 = __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v11);
  uint64_t v64 = (uint64_t *)((char *)&v56 - v15);
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v65 = 0LL;
  uint64_t v60 = a1;
  uint64_t v61 = v5;
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v17 = a1 + 64;
  uint64_t v16 = v18;
  uint64_t v19 = 1LL << *(_BYTE *)(v17 - 32);
  uint64_t v20 = -1LL;
  if (v19 < 64) {
    uint64_t v20 = ~(-1LL << v19);
  }
  unint64_t v21 = v20 & v16;
  uint64_t v58 = v17;
  int64_t v59 = (unint64_t)(v19 + 63) >> 6;
  int64_t v57 = v59 - 1;
  unint64_t v22 = (uint64_t *)&unk_1009A5960;
  uint64_t v62 = a2;
  uint64_t v67 = v4;
  while (1)
  {
    if (v21)
    {
      unint64_t v23 = __clz(__rbit64(v21));
      uint64_t v24 = (v21 - 1) & v21;
      unint64_t v25 = v23 | (v65 << 6);
LABEL_8:
      uint64_t v26 = (uint64_t *)(*(void *)(v60 + 48) + 16 * v25);
      uint64_t v28 = *v26;
      uint64_t v27 = v26[1];
      unint64_t v29 = *(void *)(v60 + 56) + *(void *)(v5 + 72) * v25;
      uint64_t v30 = sub_100004AEC(v22);
      (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(&v13[*(int *)(v30 + 48)], v29, v67);
      *(void *)unint64_t v13 = v28;
      *((void *)v13 + 1) = v27;
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v13, 0LL, 1LL, v30);
      swift_bridgeObjectRetain(v27);
      goto LABEL_27;
    }

    int64_t v31 = v65 + 1;
    if (__OFADD__(v65, 1LL))
    {
      __break(1u);
      goto LABEL_36;
    }

    if (v31 < v59)
    {
      unint64_t v32 = *(void *)(v58 + 8 * v31);
      if (v32) {
        goto LABEL_12;
      }
      int64_t v33 = v65 + 2;
      ++v65;
      if (v31 + 1 < v59)
      {
        unint64_t v32 = *(void *)(v58 + 8 * v33);
        if (v32) {
          goto LABEL_15;
        }
        int64_t v65 = v31 + 1;
        if (v31 + 2 < v59)
        {
          unint64_t v32 = *(void *)(v58 + 8 * (v31 + 2));
          if (v32)
          {
            v31 += 2LL;
            goto LABEL_12;
          }

          int64_t v33 = v31 + 3;
          int64_t v65 = v31 + 2;
          if (v31 + 3 < v59) {
            break;
          }
        }
      }
    }

uint64_t sub_1001D43D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v55 = (uint64_t)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  int64_t v9 = (char *)&v50 - v8;
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009A58D0);
  uint64_t v11 = __chkstk_darwin(v10);
  unint64_t v13 = (uint64_t *)((char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t result = __chkstk_darwin(v11);
  uint64_t v16 = (uint64_t *)((char *)&v50 - v15);
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v56 = 0LL;
  uint64_t v54 = a1;
  uint64_t v19 = *(void *)(a1 + 64);
  uint64_t v18 = a1 + 64;
  uint64_t v17 = v19;
  uint64_t v20 = 1LL << *(_BYTE *)(v18 - 32);
  uint64_t v21 = -1LL;
  if (v20 < 64) {
    uint64_t v21 = ~(-1LL << v20);
  }
  unint64_t v22 = v21 & v17;
  uint64_t v52 = v18;
  int64_t v53 = (unint64_t)(v20 + 63) >> 6;
  int64_t v51 = v53 - 1;
  unint64_t v23 = &qword_1009A2570;
  uint64_t v58 = (uint64_t *)((char *)&v50 - v15);
  while (1)
  {
    if (v22)
    {
      unint64_t v24 = __clz(__rbit64(v22));
      uint64_t v25 = (v22 - 1) & v22;
      unint64_t v26 = v24 | (v56 << 6);
LABEL_8:
      uint64_t v27 = *(void *)(v54 + 56);
      uint64_t v28 = (uint64_t *)(*(void *)(v54 + 48) + 16 * v26);
      uint64_t v29 = *v28;
      unint64_t v30 = v28[1];
      *unint64_t v13 = *v28;
      v13[1] = v30;
      uint64_t v31 = v27 + *(void *)(v5 + 72) * v26;
      uint64_t v32 = sub_100004AEC(v23);
      sub_10001DC4C(v31, (uint64_t)v13 + *(int *)(v32 + 48), type metadata accessor for OwnedBeaconGroup.PairingState);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56LL))(v13, 0LL, 1LL, v32);
      sub_10001736C(v29, v30);
      uint64_t v16 = v58;
      goto LABEL_30;
    }

    int64_t v33 = v56 + 1;
    if (__OFADD__(v56, 1LL))
    {
      __break(1u);
      goto LABEL_39;
    }

    if (v33 < v53)
    {
      unint64_t v34 = *(void *)(v52 + 8 * v33);
      if (v34) {
        goto LABEL_12;
      }
      int64_t v35 = v56 + 2;
      ++v56;
      if (v33 + 1 < v53)
      {
        unint64_t v34 = *(void *)(v52 + 8 * v35);
        if (v34) {
          goto LABEL_15;
        }
        int64_t v56 = v33 + 1;
        if (v33 + 2 < v53)
        {
          unint64_t v34 = *(void *)(v52 + 8 * (v33 + 2));
          if (v34)
          {
            v33 += 2LL;
            goto LABEL_12;
          }

          int64_t v56 = v33 + 2;
          if (v33 + 3 < v53)
          {
            unint64_t v34 = *(void *)(v52 + 8 * (v33 + 3));
            if (v34)
            {
              v33 += 3LL;
              goto LABEL_12;
            }

            int64_t v35 = v33 + 4;
            int64_t v56 = v33 + 3;
            if (v33 + 4 < v53) {
              break;
            }
          }
        }
      }
    }

uint64_t sub_1001D480C(uint64_t a1, uint64_t a2)
{
  uint64_t v67 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v67 - 8);
  uint64_t v5 = __chkstk_darwin(v67);
  int64_t v65 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  BOOL v66 = (char *)&v52 - v8;
  __chkstk_darwin(v7);
  uint64_t v62 = (char *)&v52 - v9;
  uint64_t v10 = sub_100004AEC(&qword_1009A5970);
  uint64_t v11 = __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v52 - v15;
  if (a1 == a2) {
    return 1LL;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  int64_t v60 = 0LL;
  uint64_t v17 = *(void *)(a1 + 64);
  uint64_t v56 = a2;
  uint64_t v57 = a1 + 64;
  uint64_t v18 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v19 = -1LL;
  if (v18 < 64) {
    uint64_t v19 = ~(-1LL << v18);
  }
  unint64_t v20 = v19 & v17;
  int64_t v58 = (unint64_t)(v18 + 63) >> 6;
  unint64_t v59 = (char *)&v52 - v15;
  int64_t v52 = v58 - 1;
  int64_t v53 = v13;
  uint64_t v54 = v4;
  uint64_t v55 = a1;
  if ((v19 & v17) == 0) {
    goto LABEL_8;
  }
LABEL_6:
  unint64_t v21 = __clz(__rbit64(v20));
  uint64_t v22 = (v20 - 1) & v20;
  unint64_t v23 = v21 | (v60 << 6);
LABEL_7:
  (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))( v13,  *(void *)(a1 + 48) + *(void *)(v4 + 72) * v23,  v67);
  uint64_t v24 = *(void *)(a1 + 56);
  uint64_t v25 = sub_100004AEC(&qword_1009A5978);
  uint64_t v26 = *(void *)(v24 + 8 * v23);
  *(void *)&v13[*(int *)(v25 + 48)] = v26;
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56LL))(v13, 0LL, 1LL, v25);
  swift_bridgeObjectRetain(v26);
  while (1)
  {
    sub_100015750((uint64_t)v13, (uint64_t)v16, &qword_1009A5970);
    uint64_t v31 = sub_100004AEC(&qword_1009A5978);
    uint64_t v32 = 1LL;
    unint64_t v61 = v22;
    uint64_t v33 = *(int *)(v31 + 48);
    uint64_t v34 = (uint64_t)v62;
    uint64_t v35 = v67;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v62, v16, v67);
    uint64_t v36 = *(void *)&v16[v33];
    unint64_t v37 = sub_10030D124(v34);
    char v39 = v38;
    uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v40(v34, v35);
    if ((v39 & 1) == 0
      || (uint64_t v41 = *(void *)(*(void *)(a2 + 56) + 8 * v37), v42 = *(void *)(v41 + 16), v42 != *(void *)(v36 + 16)))
    {
LABEL_44:
      swift_bridgeObjectRelease();
      return 0LL;
    }

    if (v42 && v41 != v36) {
      break;
    }
    uint64_t result = swift_bridgeObjectRelease();
LABEL_40:
    uint64_t v16 = v59;
    unint64_t v20 = v61;
    if (v61) {
      goto LABEL_6;
    }
LABEL_8:
    int64_t v27 = v60 + 1;
    if (__OFADD__(v60, 1LL)) {
      goto LABEL_49;
    }
    if (v27 < v58)
    {
      unint64_t v28 = *(void *)(v57 + 8 * v27);
      if (v28) {
        goto LABEL_11;
      }
      int64_t v29 = v60 + 2;
      ++v60;
      if (v27 + 1 < v58)
      {
        unint64_t v28 = *(void *)(v57 + 8 * v29);
        if (v28) {
          goto LABEL_14;
        }
        int64_t v60 = v27 + 1;
        if (v27 + 2 < v58)
        {
          unint64_t v28 = *(void *)(v57 + 8 * (v27 + 2));
          if (v28)
          {
            v27 += 2LL;
            goto LABEL_11;
          }

          int64_t v60 = v27 + 2;
          if (v27 + 3 < v58)
          {
            unint64_t v28 = *(void *)(v57 + 8 * (v27 + 3));
            if (v28)
            {
              v27 += 3LL;
              goto LABEL_11;
            }

            int64_t v29 = v27 + 4;
            int64_t v60 = v27 + 3;
            if (v27 + 4 < v58)
            {
              unint64_t v28 = *(void *)(v57 + 8 * v29);
              if (!v28)
              {
                while (1)
                {
                  int64_t v27 = v29 + 1;
                  if (__OFADD__(v29, 1LL)) {
                    goto LABEL_50;
                  }
                  if (v27 >= v58)
                  {
                    int64_t v60 = v52;
                    goto LABEL_28;
                  }

                  unint64_t v28 = *(void *)(v57 + 8 * v27);
                  ++v29;
                  if (v28) {
                    goto LABEL_11;
                  }
                }
              }

uint64_t sub_1001D4D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  int64_t v60 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v53 - v8;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v65 = *(void *)(v10 - 8);
  uint64_t v66 = v10;
  __chkstk_darwin(v10);
  unint64_t v61 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009A59A0);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v53 - v17;
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v58 = v15;
  uint64_t v59 = a2;
  int64_t v62 = 0LL;
  uint64_t v57 = a1;
  uint64_t v21 = *(void *)(a1 + 64);
  uint64_t v20 = a1 + 64;
  uint64_t v19 = v21;
  uint64_t v22 = 1LL << *(_BYTE *)(v20 - 32);
  uint64_t v23 = -1LL;
  if (v22 < 64) {
    uint64_t v23 = ~(-1LL << v22);
  }
  unint64_t v24 = v23 & v19;
  uint64_t v55 = v20;
  int64_t v56 = (unint64_t)(v22 + 63) >> 6;
  int64_t v54 = v56 - 1;
  while (1)
  {
    if (v24)
    {
      unint64_t v25 = __clz(__rbit64(v24));
      uint64_t v26 = (v24 - 1) & v24;
      unint64_t v27 = v25 | (v62 << 6);
LABEL_8:
      uint64_t v28 = v57;
      (*(void (**)(char *, unint64_t, uint64_t))(v65 + 16))( v15,  *(void *)(v57 + 48) + *(void *)(v65 + 72) * v27,  v66);
      unint64_t v29 = *(void *)(v28 + 56) + *(void *)(v5 + 72) * v27;
      uint64_t v30 = sub_100004AEC(&qword_1009A59A8);
      (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(&v15[*(int *)(v30 + 48)], v29, v4);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v15, 0LL, 1LL, v30);
      goto LABEL_30;
    }

    int64_t v31 = v62 + 1;
    if (__OFADD__(v62, 1LL))
    {
      __break(1u);
      goto LABEL_39;
    }

    if (v31 < v56)
    {
      unint64_t v32 = *(void *)(v55 + 8 * v31);
      if (v32) {
        goto LABEL_12;
      }
      int64_t v33 = v62 + 2;
      ++v62;
      if (v31 + 1 < v56)
      {
        unint64_t v32 = *(void *)(v55 + 8 * v33);
        if (v32) {
          goto LABEL_15;
        }
        int64_t v62 = v31 + 1;
        if (v31 + 2 < v56)
        {
          unint64_t v32 = *(void *)(v55 + 8 * (v31 + 2));
          if (v32)
          {
            v31 += 2LL;
            goto LABEL_12;
          }

          int64_t v62 = v31 + 2;
          if (v31 + 3 < v56)
          {
            unint64_t v32 = *(void *)(v55 + 8 * (v31 + 3));
            if (v32)
            {
              v31 += 3LL;
              goto LABEL_12;
            }

            int64_t v33 = v31 + 4;
            int64_t v62 = v31 + 3;
            if (v31 + 4 < v56) {
              break;
            }
          }
        }
      }
    }

uint64_t sub_1001D51E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

BOOL sub_1001D5230(int a1, int a2)
{
  if ((a1 & 0x100) != 0)
  {
    if ((a2 & 0x100) == 0) {
      return 0LL;
    }
  }

  else if ((a2 & 0x100) != 0 || a1 != a2)
  {
    return 0LL;
  }

  int v3 = a2 & 0xFF0000;
  if ((a1 & 0xFF0000) != 0x30000) {
    return v3 != 196608 && ((a2 ^ a1) & 0xFF0000) == 0;
  }
  return v3 == 196608;
}

uint64_t sub_1001D5298(uint64_t a1, uint64_t a2)
{
  if ((v4 & 1) == 0) {
    return 0LL;
  }
  char v5 = *(_BYTE *)(a2 + 24);
  if (*(_BYTE *)(a1 + 24) == 1)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0) {
      return 0LL;
    }
  }

  else
  {
    if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      char v5 = 1;
    }
    if ((v5 & 1) != 0) {
      return 0LL;
    }
  }

  uint64_t v6 = (int *)type metadata accessor for OwnedBeaconGroup(0LL);
  if ((static UUID.== infix(_:_:)(a1 + v6[6], a2 + v6[6]) & 1) != 0
    && (static MACAddress.== infix(_:_:)(a1 + v6[7], a2 + v6[7]) & 1) != 0
    && *(unsigned __int8 *)(a1 + v6[8]) == *(unsigned __int8 *)(a2 + v6[8]))
  {
    uint64_t v7 = v6[9];
    uint64_t v8 = *(void *)(a1 + v7);
    uint64_t v9 = *(void *)(a1 + v7 + 8);
    uint64_t v10 = (void *)(a2 + v7);
    uint64_t v11 = v10[1];
    BOOL v12 = v8 == *v10 && v9 == v11;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, *v10, v11, 0LL) & 1) != 0) {
      return sub_1001D43D8(*(void *)(a1 + v6[10]), *(void *)(a2 + v6[10]));
    }
  }

  return 0LL;
}

uint64_t sub_1001D5394(uint64_t a1, uint64_t a2)
{
  unint64_t v132 = (char *)a2;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  unint64_t v130 = *(void *)(v3 - 8);
  uint64_t v131 = v3;
  __chkstk_darwin(v3);
  uint64_t v124 = (char *)&v106 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v127 = type metadata accessor for MACAddress(0LL);
  uint64_t v129 = *(void *)(v127 - 8);
  __chkstk_darwin(v127);
  uint64_t v122 = (char *)&v106 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v126 = sub_100004AEC(&qword_1009A58F8);
  uint64_t v6 = __chkstk_darwin(v126);
  uint64_t v123 = (uint64_t)&v106 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v106 - v8;
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v121 = (uint64_t)&v106 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v128 = (uint64_t)&v106 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v125 = (uint64_t)&v106 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v106 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v106 - v20;
  uint64_t v22 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
  uint64_t v23 = __chkstk_darwin(v22);
  unint64_t v25 = (char *)&v106 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23);
  unint64_t v27 = (char *)&v106 - v26;
  uint64_t v28 = sub_100004AEC(&qword_1009A5900);
  uint64_t v29 = __chkstk_darwin(v28);
  int64_t v31 = (char *)&v106 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = (uint64_t)&v31[*(int *)(v29 + 48)];
  sub_10001DC4C(a1, (uint64_t)v31, type metadata accessor for OwnedBeaconGroup.PairingState);
  sub_10001DC4C((uint64_t)v132, v32, type metadata accessor for OwnedBeaconGroup.PairingState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v31, v22);
  if (!EnumCaseMultiPayload)
  {
    unint64_t v132 = v21;
    sub_10001DC4C((uint64_t)v31, (uint64_t)v27, type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v66 = *(int *)(sub_100004AEC((uint64_t *)&unk_1009A5910) + 48);
    int v67 = v27[v66];
    int v68 = v27[v66 + 1];
    int v69 = v27[v66 + 2];
    if (swift_getEnumCaseMultiPayload(v32, v22))
    {
      sub_100015794((uint64_t)v27, (uint64_t *)&unk_1009AE480);
      goto LABEL_13;
    }

    LODWORD(v131) = v68;
    LODWORD(v125) = v69;
    LODWORD(v124) = *(unsigned __int8 *)(v32 + v66);
    LODWORD(v130) = *(unsigned __int8 *)(v32 + v66 + 1);
    LODWORD(v128) = *(unsigned __int8 *)(v32 + v66 + 2);
    uint64_t v71 = v32;
    uint64_t v72 = (uint64_t)v132;
    sub_100015750(v71, (uint64_t)v132, (uint64_t *)&unk_1009AE480);
    uint64_t v73 = (uint64_t)v9;
    uint64_t v74 = (uint64_t)&v9[*(int *)(v126 + 48)];
    uint64_t v75 = v72;
    sub_100015750((uint64_t)v27, (uint64_t)v9, (uint64_t *)&unk_1009AE480);
    sub_1001D51E8(v72, v74);
    uint64_t v76 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v129 + 48);
    uint64_t v77 = v127;
    if (v76((uint64_t)v9, 1LL, v127) == 1)
    {
      sub_100015794(v75, (uint64_t *)&unk_1009AE480);
      int v78 = v76(v74, 1LL, v77);
      char v79 = v131;
      if (v78 == 1)
      {
        sub_100015794((uint64_t)v9, (uint64_t *)&unk_1009AE480);
LABEL_26:
        if ((v79 & 1) != 0)
        {
          if (!(_DWORD)v130) {
            goto LABEL_64;
          }
        }

        else
        {
          char v92 = v130;
          if (v67 != (_DWORD)v124) {
            char v92 = 1;
          }
          if ((v92 & 1) != 0) {
            goto LABEL_64;
          }
        }

        if ((_DWORD)v125 != 3)
        {
          if ((_DWORD)v128 == 3) {
            goto LABEL_64;
          }
          int v99 = v125;
          int v100 = v128;
          goto LABEL_44;
        }

        if ((_DWORD)v128 == 3) {
          goto LABEL_11;
        }
LABEL_64:
        uint64_t v80 = (uint64_t)v31;
        goto LABEL_65;
      }
    }

    else
    {
      uint64_t v81 = (uint64_t)v9;
      char v82 = v19;
      sub_1001D51E8(v81, (uint64_t)v19);
      int v83 = v76(v74, 1LL, v77);
      char v79 = v131;
      if (v83 != 1)
      {
        uint64_t v85 = v129;
        uint64_t v86 = *(void (**)(char *, uint64_t, uint64_t))(v129 + 32);
        uint64_t v126 = v73;
        unint64_t v87 = v122;
        v86(v122, v74, v77);
        uint64_t v88 = sub_100007864( &qword_1009A5908,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
        char v89 = dispatch thunk of static Equatable.== infix(_:_:)(v19, v87, v77, v88);
        uint64_t v90 = v75;
        BOOL v91 = *(void (**)(char *, uint64_t))(v85 + 8);
        v91(v87, v77);
        sub_100015794(v90, (uint64_t *)&unk_1009AE480);
        v91(v82, v77);
        sub_100015794(v126, (uint64_t *)&unk_1009AE480);
        if ((v89 & 1) == 0) {
          goto LABEL_64;
        }
        goto LABEL_26;
      }

      sub_100015794(v75, (uint64_t *)&unk_1009AE480);
      (*(void (**)(char *, uint64_t))(v129 + 8))(v19, v77);
    }

    sub_100015794(v73, &qword_1009A58F8);
    goto LABEL_64;
  }

  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v119 = v31;
    sub_10001DC4C((uint64_t)v31, (uint64_t)v25, type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v34 = (int *)sub_100004AEC((uint64_t *)&unk_1009A58E0);
    uint64_t v35 = v34[12];
    unint64_t v132 = &v25[v35];
    uint64_t v36 = v34[16];
    unint64_t v37 = *(void *)&v25[v36 + 8];
    uint64_t v120 = *(void *)&v25[v36];
    uint64_t v38 = v34[20];
    uint64_t v117 = *(void *)&v25[v38];
    int v118 = v25[v38 + 8];
    uint64_t v39 = v34[24];
    int v116 = v25[v39];
    int v40 = v25[v39 + 1];
    int v41 = v25[v39 + 2];
    if (swift_getEnumCaseMultiPayload(v32, v22) == 1)
    {
      int v110 = v40;
      int v108 = v41;
      unint64_t v115 = v37;
      uint64_t v42 = v32 + v35;
      uint64_t v43 = *(void *)(v32 + v36);
      unint64_t v44 = *(void *)(v32 + v36 + 8);
      uint64_t v109 = *(void *)(v32 + v38);
      int v45 = *(unsigned __int8 *)(v32 + v39);
      int v113 = *(unsigned __int8 *)(v32 + v38 + 8);
      int v114 = v45;
      int v46 = *(unsigned __int8 *)(v32 + v39 + 2);
      int v111 = *(unsigned __int8 *)(v32 + v39 + 1);
      int v112 = v46;
      unint64_t v48 = v130;
      uint64_t v47 = v131;
      uint64_t v49 = v124;
      (*(void (**)(char *, uint64_t, uint64_t))(v130 + 32))(v124, v32, v131);
      uint64_t v50 = v125;
      sub_100015750((uint64_t)v132, v125, (uint64_t *)&unk_1009AE480);
      uint64_t v51 = v42;
      uint64_t v52 = v128;
      sub_100015750(v51, v128, (uint64_t *)&unk_1009AE480);
      char v53 = static UUID.== infix(_:_:)(v25, v49);
      int64_t v54 = *(void (**)(char *, uint64_t))(v48 + 8);
      v54(v25, v47);
      if ((v53 & 1) == 0)
      {
        sub_1000182F0(v43, v44);
        sub_1000182F0(v120, v115);
        sub_100015794(v52, (uint64_t *)&unk_1009AE480);
        sub_100015794(v50, (uint64_t *)&unk_1009AE480);
        v54(v49, v47);
        uint64_t v80 = (uint64_t)v119;
LABEL_65:
        sub_100018C68(v80, type metadata accessor for OwnedBeaconGroup.PairingState);
        return 0LL;
      }

      uint64_t v107 = v54;
      int v55 = v114;
      unint64_t v132 = (char *)v43;
      unint64_t v130 = v44;
      uint64_t v56 = v123;
      uint64_t v57 = v123 + *(int *)(v126 + 48);
      sub_1001D51E8(v50, v123);
      sub_1001D51E8(v52, v57);
      int64_t v58 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v129 + 48);
      uint64_t v59 = v127;
      if (v58(v56, 1LL, v127) == 1)
      {
        int v60 = v58(v57, 1LL, v59);
        uint64_t v61 = v128;
        if (v60 == 1)
        {
          sub_100015794(v123, (uint64_t *)&unk_1009AE480);
          int64_t v31 = v119;
          uint64_t v62 = v120;
          unint64_t v63 = v115;
          unint64_t v64 = v130;
          uint64_t v65 = (uint64_t)v132;
          goto LABEL_36;
        }
      }

      else
      {
        uint64_t v84 = v121;
        sub_1001D51E8(v56, v121);
        if (v58(v57, 1LL, v59) != 1)
        {
          uint64_t v93 = v129;
          unint64_t v94 = v122;
          (*(void (**)(char *, uint64_t, uint64_t))(v129 + 32))(v122, v57, v59);
          uint64_t v95 = sub_100007864( &qword_1009A5908,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
          char v96 = dispatch thunk of static Equatable.== infix(_:_:)(v84, v94, v59, v95);
          uint64_t v97 = *(void (**)(char *, uint64_t))(v93 + 8);
          uint64_t v98 = v94;
          uint64_t v50 = v125;
          v97(v98, v59);
          v97((char *)v84, v59);
          sub_100015794(v56, (uint64_t *)&unk_1009AE480);
          uint64_t v61 = v128;
          int64_t v31 = v119;
          uint64_t v62 = v120;
          unint64_t v63 = v115;
          unint64_t v64 = v130;
          uint64_t v65 = (uint64_t)v132;
          if ((v96 & 1) != 0)
          {
LABEL_36:
            if (v63 >> 60 == 15)
            {
              sub_100015794(v61, (uint64_t *)&unk_1009AE480);
              sub_100015794(v50, (uint64_t *)&unk_1009AE480);
              v107(v49, v131);
              if (v64 >> 60 == 15)
              {
                sub_1000182F0(v62, v63);
                goto LABEL_47;
              }
            }

            else
            {
              if (v64 >> 60 != 15)
              {
                uint64_t v101 = v65;
                sub_100018BE4(v65, v64);
                sub_100018BE4(v62, v63);
                _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v62, v63);
                char v103 = v102;
                sub_1000182F0(v101, v64);
                sub_1000182F0(v101, v64);
                sub_1000182F0(v62, v63);
                sub_100015794(v61, (uint64_t *)&unk_1009AE480);
                sub_100015794(v50, (uint64_t *)&unk_1009AE480);
                v107(v49, v131);
                sub_1000182F0(v62, v63);
                if ((v103 & 1) == 0) {
                  goto LABEL_64;
                }
LABEL_47:
                if ((v118 & 1) != 0)
                {
                  if (!v113) {
                    goto LABEL_64;
                  }
                }

                else
                {
                  char v104 = v113;
                  if (v117 != v109) {
                    char v104 = 1;
                  }
                  if ((v104 & 1) != 0) {
                    goto LABEL_64;
                  }
                }

                if ((v110 & 1) != 0)
                {
                  int v100 = v112;
                  if (!v111) {
                    goto LABEL_64;
                  }
                }

                else
                {
                  char v105 = v111;
                  int v100 = v112;
                  if (v116 != v55) {
                    char v105 = 1;
                  }
                  if ((v105 & 1) != 0) {
                    goto LABEL_64;
                  }
                }

                if (v108 == 3)
                {
                  if (v100 != 3) {
                    goto LABEL_64;
                  }
LABEL_11:
                  sub_100018C68((uint64_t)v31, type metadata accessor for OwnedBeaconGroup.PairingState);
                  return 1LL;
                }

                if (v100 != 3)
                {
                  int v99 = v108;
LABEL_44:
                  if (v99 == v100) {
                    goto LABEL_11;
                  }
                  goto LABEL_64;
                }

                goto LABEL_64;
              }

              sub_10001736C(v62, v63);
              sub_100015794(v61, (uint64_t *)&unk_1009AE480);
              sub_100015794(v50, (uint64_t *)&unk_1009AE480);
              v107(v49, v131);
              sub_1000182F0(v62, v63);
            }

            sub_1000182F0(v62, v63);
            sub_1000182F0((uint64_t)v132, v64);
            goto LABEL_64;
          }

unint64_t sub_1001D5EB8(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100933BC8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7) {
    return 7LL;
  }
  else {
    return v3;
  }
}

void *sub_1001D5F00(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009A5920);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = sub_100012ED8(a1, v7);
  unint64_t v10 = sub_1001D6024();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for OwnedBeaconGroup.SerialNumber.CodingKeys,  &type metadata for OwnedBeaconGroup.SerialNumber.CodingKeys,  v10,  v7,  v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    unint64_t v11 = sub_100016FE0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, &type metadata for Data, v12, v3, &type metadata for Data, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v9 = v14;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  return v9;
}

unint64_t sub_1001D6024()
{
  unint64_t result = qword_1009A5928;
  if (!qword_1009A5928)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F6330, &type metadata for OwnedBeaconGroup.SerialNumber.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5928);
  }

  return result;
}

unint64_t sub_1001D6068()
{
  unint64_t result = qword_1009A5948;
  if (!qword_1009A5948)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FEEE0, &type metadata for FeatureSupportMatrixProductType);
    atomic_store(result, (unint64_t *)&qword_1009A5948);
  }

  return result;
}

unint64_t sub_1001D60AC()
{
  unint64_t result = qword_1009A5950;
  if (!qword_1009A5950)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FEEA0, &type metadata for FeatureSupportMatrixProductType);
    atomic_store(result, (unint64_t *)&qword_1009A5950);
  }

  return result;
}

unint64_t sub_1001D60F0()
{
  unint64_t result = qword_1009A5980;
  if (!qword_1009A5980)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F62F0, &type metadata for OwnedBeaconGroup.BeaconGroupConversionError);
    atomic_store(result, (unint64_t *)&qword_1009A5980);
  }

  return result;
}

unint64_t sub_1001D6134()
{
  unint64_t result = qword_1009AF920;
  if (!qword_1009AF920)
  {
    unint64_t result = swift_getWitnessTable(&unk_100800ED0, &type metadata for BeaconObservation.ObservationType);
    atomic_store(result, (unint64_t *)&qword_1009AF920);
  }

  return result;
}

uint64_t sub_1001D6178(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.BeaconGroupConversionError()
{
  return &type metadata for OwnedBeaconGroup.BeaconGroupConversionError;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.SerialNumber.CodingKeys()
{
  return &type metadata for OwnedBeaconGroup.SerialNumber.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for OwnedBeaconGroup.PairingMetadata(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for OwnedBeaconGroup.PairingMetadata(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD)
  {
    if ((a2 + 33554179) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776963;
      }
    }

    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
    }
  }

  else {
    int v4 = *((unsigned __int8 *)a1 + 2);
  }
  int v5 = v4 - 4;
  else {
    int v6 = v5;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for OwnedBeaconGroup.PairingMetadata( uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554179) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFC) {
    int v3 = 0;
  }
  if (a2 > 0xFC)
  {
    *(_WORD *)unint64_t result = a2 - 253;
    *(_BYTE *)(result + 2) = (a2 - 253) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 253) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(_BYTE *)(result + 3) = v4;
      }
    }
  }

  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(_BYTE *)(result + 2) = a2 + 3;
      return result;
    }

    *(_BYTE *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.PairingMetadata()
{
  return &type metadata for OwnedBeaconGroup.PairingMetadata;
}

uint64_t _s12searchpartyd16OwnedBeaconGroupV26BeaconGroupConversionErrorOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_1001D6364 + 4 * byte_1007F5B9B[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1001D6398 + 4 * byte_1007F5B96[v4]))();
}

uint64_t sub_1001D6398(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D63A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001D63A8LL);
  }
  return result;
}

uint64_t sub_1001D63B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001D63BCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_1001D63C0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D63C8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.CodingKeys()
{
  return &type metadata for OwnedBeaconGroup.CodingKeys;
}

void *sub_1001D63E4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v9 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v9);
  }

  else
  {
    *(void *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = type metadata accessor for MACAddress(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
  }

  return v3;
}

uint64_t sub_1001D6474(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for MACAddress(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
}

uint64_t sub_1001D64AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_1001D6510(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = (uint64_t)a2 + v5;
  uint64_t v8 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 24LL))(v6, v7, v8);
  return a1;
}

uint64_t sub_1001D6574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_1001D65D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_1001D663C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001D6648);
}

uint64_t sub_1001D6648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = type metadata accessor for MACAddress(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v4, a2, v5);
}

uint64_t sub_1001D6688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001D6694);
}

uint64_t sub_1001D6694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = type metadata accessor for MACAddress(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, a2, a2, v6);
}

uint64_t sub_1001D66D8(uint64_t a1)
{
  v4[0] = &unk_1007F5BF0;
  uint64_t result = type metadata accessor for MACAddress(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *sub_1001D674C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain();
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v13 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16LL))(a1, a2, v13);
      uint64_t v14 = (int *)sub_100004AEC((uint64_t *)&unk_1009A58E0);
      uint64_t v15 = v14[12];
      uint64_t v16 = (char *)a1 + v15;
      uint64_t v17 = (char *)a2 + v15;
      uint64_t v18 = type metadata accessor for MACAddress(0LL);
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18))
      {
        uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009AE480);
        memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
      }

      uint64_t v27 = v14[16];
      uint64_t v28 = (char *)a1 + v27;
      uint64_t v29 = (char *)a2 + v27;
      unint64_t v30 = *((void *)v29 + 1);
      if (v30 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
      }

      else
      {
        uint64_t v31 = *(void *)v29;
        sub_10001736C(*(void *)v29, *((void *)v29 + 1));
        *(void *)uint64_t v28 = v31;
        *((void *)v28 + 1) = v30;
      }

      uint64_t v32 = v14[20];
      int64_t v33 = (char *)a1 + v32;
      uint64_t v34 = (char *)a2 + v32;
      *(void *)int64_t v33 = *(void *)v34;
      v33[8] = v34[8];
      uint64_t v35 = v14[24];
      uint64_t v36 = (char *)a1 + v35;
      unint64_t v37 = (char *)a2 + v35;
      v36[2] = v37[2];
      *(_WORD *)uint64_t v36 = *(_WORD *)v37;
      uint64_t v24 = a1;
      uint64_t v25 = a3;
      uint64_t v26 = 1LL;
      goto LABEL_17;
    }

    if (!EnumCaseMultiPayload)
    {
      uint64_t v9 = type metadata accessor for MACAddress(0LL);
      uint64_t v10 = *(void *)(v9 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v10 + 48))(a2, 1LL, v9))
      {
        uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009AE480);
        memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v10 + 16))(a1, a2, v9);
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v10 + 56))(a1, 0LL, 1LL, v9);
      }

      uint64_t v21 = *(int *)(sub_100004AEC((uint64_t *)&unk_1009A5910) + 48);
      uint64_t v22 = (char *)a1 + v21;
      uint64_t v23 = (char *)a2 + v21;
      *(_WORD *)uint64_t v22 = *(_WORD *)v23;
      v22[2] = v23[2];
      uint64_t v24 = a1;
      uint64_t v25 = a3;
      uint64_t v26 = 0LL;
LABEL_17:
      swift_storeEnumTagMultiPayload(v24, v25, v26);
      return a1;
    }

    memcpy(a1, a2, *(void *)(v5 + 64));
  }

  return a1;
}

uint64_t sub_1001D69CC(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 1)
  {
    uint64_t v6 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009A58E0);
    uint64_t v8 = a1 + *(int *)(v7 + 48);
    uint64_t v9 = type metadata accessor for MACAddress(0LL);
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9);
    if (!(_DWORD)result) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    }
    uint64_t v11 = (uint64_t *)(a1 + *(int *)(v7 + 64));
    unint64_t v12 = v11[1];
    if (v12 >> 60 != 15) {
      return sub_100016F9C(*v11, v12);
    }
  }

  else if (!(_DWORD)result)
  {
    uint64_t v4 = type metadata accessor for MACAddress(0LL);
    uint64_t v5 = *(void *)(v4 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1LL, v4);
    if (!(_DWORD)result) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    }
  }

  return result;
}

char *sub_1001D6AEC(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v10 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(a1, a2, v10);
    uint64_t v11 = (int *)sub_100004AEC((uint64_t *)&unk_1009A58E0);
    uint64_t v12 = v11[12];
    uint64_t v13 = &a1[v12];
    uint64_t v14 = &a2[v12];
    uint64_t v15 = type metadata accessor for MACAddress(0LL);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
    {
      uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009AE480);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
    }

    uint64_t v24 = v11[16];
    uint64_t v25 = &a1[v24];
    uint64_t v26 = &a2[v24];
    unint64_t v27 = *((void *)v26 + 1);
    if (v27 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    }

    else
    {
      uint64_t v28 = *(void *)v26;
      sub_10001736C(*(void *)v26, *((void *)v26 + 1));
      *(void *)uint64_t v25 = v28;
      *((void *)v25 + 1) = v27;
    }

    uint64_t v29 = v11[20];
    unint64_t v30 = &a1[v29];
    uint64_t v31 = &a2[v29];
    *(void *)unint64_t v30 = *(void *)v31;
    v30[8] = v31[8];
    uint64_t v32 = v11[24];
    int64_t v33 = &a1[v32];
    uint64_t v34 = &a2[v32];
    v33[2] = v34[2];
    *(_WORD *)int64_t v33 = *(_WORD *)v34;
    uint64_t v21 = a1;
    uint64_t v22 = a3;
    uint64_t v23 = 1LL;
    goto LABEL_15;
  }

  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = type metadata accessor for MACAddress(0LL);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1LL, v7))
    {
      uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009AE480);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0LL, 1LL, v7);
    }

    uint64_t v18 = *(int *)(sub_100004AEC((uint64_t *)&unk_1009A5910) + 48);
    uint64_t v19 = &a1[v18];
    uint64_t v20 = &a2[v18];
    *(_WORD *)uint64_t v19 = *(_WORD *)v20;
    v19[2] = v20[2];
    uint64_t v21 = a1;
    uint64_t v22 = a3;
    uint64_t v23 = 0LL;
LABEL_15:
    swift_storeEnumTagMultiPayload(v21, v22, v23);
    return a1;
  }

  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  return a1;
}

char *sub_1001D6D44(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100018C68((uint64_t)a1, type metadata accessor for OwnedBeaconGroup.PairingState);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(a1, a2, v10);
      uint64_t v11 = (int *)sub_100004AEC((uint64_t *)&unk_1009A58E0);
      uint64_t v12 = v11[12];
      uint64_t v13 = &a1[v12];
      uint64_t v14 = &a2[v12];
      uint64_t v15 = type metadata accessor for MACAddress(0LL);
      uint64_t v16 = *(void *)(v15 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
      {
        uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009AE480);
        memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
      }

      uint64_t v25 = v11[16];
      uint64_t v26 = &a1[v25];
      unint64_t v27 = &a2[v25];
      unint64_t v28 = *((void *)v27 + 1);
      if (v28 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
      }

      else
      {
        uint64_t v29 = *(void *)v27;
        sub_10001736C(*(void *)v27, *((void *)v27 + 1));
        *(void *)uint64_t v26 = v29;
        *((void *)v26 + 1) = v28;
      }

      uint64_t v30 = v11[20];
      uint64_t v31 = &a1[v30];
      uint64_t v32 = &a2[v30];
      uint64_t v33 = *(void *)v32;
      v31[8] = v32[8];
      *(void *)uint64_t v31 = v33;
      uint64_t v34 = v11[24];
      uint64_t v35 = &a1[v34];
      uint64_t v36 = &a2[v34];
      LOWORD(v33) = *(_WORD *)v36;
      v35[2] = v36[2];
      *(_WORD *)uint64_t v35 = v33;
      uint64_t v22 = a1;
      uint64_t v23 = a3;
      uint64_t v24 = 1LL;
      goto LABEL_16;
    }

    if (!EnumCaseMultiPayload)
    {
      uint64_t v7 = type metadata accessor for MACAddress(0LL);
      uint64_t v8 = *(void *)(v7 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1LL, v7))
      {
        uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009AE480);
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 16))(a1, a2, v7);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0LL, 1LL, v7);
      }

      uint64_t v18 = *(int *)(sub_100004AEC((uint64_t *)&unk_1009A5910) + 48);
      uint64_t v19 = &a1[v18];
      uint64_t v20 = &a2[v18];
      char v21 = v20[2];
      *(_WORD *)uint64_t v19 = *(_WORD *)v20;
      v19[2] = v21;
      uint64_t v22 = a1;
      uint64_t v23 = a3;
      uint64_t v24 = 0LL;
LABEL_16:
      swift_storeEnumTagMultiPayload(v22, v23, v24);
      return a1;
    }

    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

char *sub_1001D6FB4(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v10 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(a1, a2, v10);
    uint64_t v11 = (int *)sub_100004AEC((uint64_t *)&unk_1009A58E0);
    uint64_t v12 = v11[12];
    uint64_t v13 = &a1[v12];
    uint64_t v14 = &a2[v12];
    uint64_t v15 = type metadata accessor for MACAddress(0LL);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
    {
      uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009AE480);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
    }

    *(_OWORD *)&a1[v11[16]] = *(_OWORD *)&a2[v11[16]];
    uint64_t v24 = v11[20];
    uint64_t v25 = &a1[v24];
    uint64_t v26 = &a2[v24];
    v25[8] = v26[8];
    *(void *)uint64_t v25 = *(void *)v26;
    uint64_t v27 = v11[24];
    unint64_t v28 = &a1[v27];
    uint64_t v29 = &a2[v27];
    *(_WORD *)unint64_t v28 = *(_WORD *)v29;
    v28[2] = v29[2];
    char v21 = a1;
    uint64_t v22 = a3;
    uint64_t v23 = 1LL;
    goto LABEL_12;
  }

  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = type metadata accessor for MACAddress(0LL);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1LL, v7))
    {
      uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009AE480);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0LL, 1LL, v7);
    }

    uint64_t v18 = *(int *)(sub_100004AEC((uint64_t *)&unk_1009A5910) + 48);
    uint64_t v19 = &a1[v18];
    uint64_t v20 = &a2[v18];
    *(_WORD *)uint64_t v19 = *(_WORD *)v20;
    v19[2] = v20[2];
    char v21 = a1;
    uint64_t v22 = a3;
    uint64_t v23 = 0LL;
LABEL_12:
    swift_storeEnumTagMultiPayload(v21, v22, v23);
    return a1;
  }

  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  return a1;
}

char *sub_1001D71DC(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100018C68((uint64_t)a1, type metadata accessor for OwnedBeaconGroup.PairingState);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(a1, a2, v10);
      uint64_t v11 = (int *)sub_100004AEC((uint64_t *)&unk_1009A58E0);
      uint64_t v12 = v11[12];
      uint64_t v13 = &a1[v12];
      uint64_t v14 = &a2[v12];
      uint64_t v15 = type metadata accessor for MACAddress(0LL);
      uint64_t v16 = *(void *)(v15 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
      {
        uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009AE480);
        memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
      }

      *(_OWORD *)&a1[v11[16]] = *(_OWORD *)&a2[v11[16]];
      uint64_t v24 = v11[20];
      uint64_t v25 = &a1[v24];
      uint64_t v26 = &a2[v24];
      v25[8] = v26[8];
      *(void *)uint64_t v25 = *(void *)v26;
      uint64_t v27 = v11[24];
      unint64_t v28 = &a1[v27];
      uint64_t v29 = &a2[v27];
      *(_WORD *)unint64_t v28 = *(_WORD *)v29;
      v28[2] = v29[2];
      char v21 = a1;
      uint64_t v22 = a3;
      uint64_t v23 = 1LL;
      goto LABEL_13;
    }

    if (!EnumCaseMultiPayload)
    {
      uint64_t v7 = type metadata accessor for MACAddress(0LL);
      uint64_t v8 = *(void *)(v7 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1LL, v7))
      {
        uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009AE480);
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0LL, 1LL, v7);
      }

      uint64_t v18 = *(int *)(sub_100004AEC((uint64_t *)&unk_1009A5910) + 48);
      uint64_t v19 = &a1[v18];
      uint64_t v20 = &a2[v18];
      *(_WORD *)uint64_t v19 = *(_WORD *)v20;
      v19[2] = v20[2];
      char v21 = a1;
      uint64_t v22 = a3;
      uint64_t v23 = 0LL;
LABEL_13:
      swift_storeEnumTagMultiPayload(v21, v22, v23);
      return a1;
    }

    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void sub_1001D741C(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(v2 - 8) + 64LL;
    swift_getTupleTypeLayout2(v9, v4, &unk_1007F5F28);
    v10[0] = v9;
    uint64_t v5 = type metadata accessor for UUID(319LL);
    if (v6 <= 0x3F)
    {
      v7[0] = *(void *)(v5 - 8) + 64LL;
      v7[1] = v4;
      _OWORD v7[2] = &unk_1007F5F40;
      void v7[3] = &unk_1007F5BF0;
      v7[4] = &unk_1007F5F28;
      swift_getTupleTypeLayout(v8, 0LL, 5LL, v7);
      v10[1] = v8;
      swift_initEnumMetadataMultiPayload(a1, 256LL, 2LL, v10);
    }
  }

void sub_1001D74F4(uint64_t a1)
{
  if (!qword_1009A5AD0)
  {
    uint64_t v2 = type metadata accessor for MACAddress(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1009A5AD0);
    }
  }

uint64_t storeEnumTagSinglePayload for OwnedBeaconGroup.Version(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0LL;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_1001D7578(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1001D7594(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }

  else
  {
    *(_BYTE *)(result + 8) = 0;
  }

  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.Version()
{
  return &type metadata for OwnedBeaconGroup.Version;
}

unint64_t sub_1001D75C8()
{
  unint64_t result = qword_1009A5B00;
  if (!qword_1009A5B00)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F5F60, &type metadata for OwnedBeaconGroup.Version);
    atomic_store(result, (unint64_t *)&qword_1009A5B00);
  }

  return result;
}

unint64_t sub_1001D7610()
{
  unint64_t result = qword_1009A5B08;
  if (!qword_1009A5B08)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F6130, &type metadata for OwnedBeaconGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5B08);
  }

  return result;
}

unint64_t sub_1001D7658()
{
  unint64_t result = qword_1009A5B10;
  if (!qword_1009A5B10)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F6260, &type metadata for OwnedBeaconGroup.SerialNumber.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5B10);
  }

  return result;
}

unint64_t sub_1001D76A0()
{
  unint64_t result = qword_1009A5B18;
  if (!qword_1009A5B18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F62C8, &type metadata for OwnedBeaconGroup.BeaconGroupConversionError);
    atomic_store(result, (unint64_t *)&qword_1009A5B18);
  }

  return result;
}

unint64_t sub_1001D76E8()
{
  unint64_t result = qword_1009A5B20;
  if (!qword_1009A5B20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F61D0, &type metadata for OwnedBeaconGroup.SerialNumber.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5B20);
  }

  return result;
}

unint64_t sub_1001D7730()
{
  unint64_t result = qword_1009A5B28;
  if (!qword_1009A5B28)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F61F8, &type metadata for OwnedBeaconGroup.SerialNumber.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5B28);
  }

  return result;
}

unint64_t sub_1001D7778()
{
  unint64_t result = qword_1009A5B30;
  if (!qword_1009A5B30)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F6068, &type metadata for OwnedBeaconGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5B30);
  }

  return result;
}

unint64_t sub_1001D77C0()
{
  unint64_t result = qword_1009A5B38;
  if (!qword_1009A5B38)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F6090, &type metadata for OwnedBeaconGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5B38);
  }

  return result;
}

uint64_t sub_1001D7804(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x644974726170LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v5 = 0xE600000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644974726170LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x54676E6972696170LL && a2 == 0xEB00000000657079LL)
  {
    swift_bridgeObjectRelease(0xEB00000000657079LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x54676E6972696170LL, 0xEB00000000657079LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1001D7904(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009A5BB8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 3];
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100012ED8(a1, v7);
  unint64_t v9 = sub_1001D8168();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for OwnedBeaconGroup.PairingMetadata.CodingKeys,  &type metadata for OwnedBeaconGroup.PairingMetadata.CodingKeys,  v9,  v7,  v8);
  if (v1) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  char v16 = 0;
  __int16 v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v16, v3);
  v15[0] = 1;
  unint64_t v11 = sub_1001D809C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for PairingTransportType,  v15,  v3,  &type metadata for PairingTransportType,  v11);
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
  int v12 = v15[1];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v10 | (v12 << 16) | v10 & 0x100u;
}

uint64_t sub_1001D7A74(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6E6F6973726576LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v5 = 0xE700000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x657264644163616DLL && a2 == 0xEA00000000007373LL)
  {
    swift_bridgeObjectRelease(0xEA00000000007373LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x657264644163616DLL, 0xEA00000000007373LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1001D7B70(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x79636167656CLL && a2 == 0xE600000000000000LL)
  {
    unint64_t v5 = 0xE600000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79636167656CLL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x656E6F6973726576LL && a2 == 0xE900000000000064LL)
  {
    swift_bridgeObjectRelease(0xE900000000000064LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656E6F6973726576LL, 0xE900000000000064LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

void *sub_1001D7C64(void *a1)
{
  uint64_t v30 = sub_100004AEC(&qword_1009A5B40);
  uint64_t v32 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v33 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = sub_100004AEC(&qword_1009A5B48);
  uint64_t v3 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  unint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_1009A5B50);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  int v12 = sub_100012ED8(a1, v10);
  unint64_t v13 = sub_1001D7FD0();
  uint64_t v14 = v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for OwnedBeaconGroup.Version.CodingKeys,  &type metadata for OwnedBeaconGroup.Version.CodingKeys,  v13,  v10,  v11);
  if (v14) {
    goto LABEL_6;
  }
  uint64_t v15 = v5;
  char v16 = v33;
  uint64_t v29 = v7;
  uint64_t v34 = a1;
  uint64_t v17 = KeyedDecodingContainer.allKeys.getter(v6);
  if (*(void *)(v17 + 16) != 1LL)
  {
    uint64_t v22 = type metadata accessor for DecodingError(0LL);
    swift_allocError(v22, &protocol witness table for DecodingError, 0LL, 0LL);
    uint64_t v24 = v23;
    sub_100004AEC(&qword_1009A5B60);
    *uint64_t v24 = &type metadata for OwnedBeaconGroup.Version;
    int v12 = v9;
    uint64_t v25 = KeyedDecodingContainer.codingPath.getter(v6);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)( v25,  0xD00000000000002BLL,  0x80000001008535B0LL,  0LL);
    uint64_t v26 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v22 - 8) + 104LL))( v24,  enum case for DecodingError.typeMismatch(_:),  v22);
    swift_willThrow(v26);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v6);
    a1 = v34;
LABEL_6:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    return v12;
  }

  if ((*(_BYTE *)(v17 + 32) & 1) != 0)
  {
    char v36 = 1;
    unint64_t v18 = sub_1001D8014();
    uint64_t v19 = v16;
    uint64_t v20 = KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for OwnedBeaconGroup.Version.VersionedCodingKeys,  &v36,  v6,  &type metadata for OwnedBeaconGroup.Version.VersionedCodingKeys,  v18);
    uint64_t v21 = v30;
    int v12 = (void *)KeyedDecodingContainer.decode(_:forKey:)(v20, v30);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v21);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v6);
  }

  else
  {
    char v35 = 0;
    unint64_t v28 = sub_1001D8058();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for OwnedBeaconGroup.Version.LegacyCodingKeys,  &v35,  v6,  &type metadata for OwnedBeaconGroup.Version.LegacyCodingKeys,  v28);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v15, v31);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v6);
    int v12 = 0LL;
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v34);
  return v12;
}

unint64_t sub_1001D7FD0()
{
  unint64_t result = qword_1009A5B58;
  if (!qword_1009A5B58)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F6964, &type metadata for OwnedBeaconGroup.Version.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5B58);
  }

  return result;
}

unint64_t sub_1001D8014()
{
  unint64_t result = qword_1009A5B68;
  if (!qword_1009A5B68)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F6914, &type metadata for OwnedBeaconGroup.Version.VersionedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5B68);
  }

  return result;
}

unint64_t sub_1001D8058()
{
  unint64_t result = qword_1009A5B70;
  if (!qword_1009A5B70)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F68C4, &type metadata for OwnedBeaconGroup.Version.LegacyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5B70);
  }

  return result;
}

unint64_t sub_1001D809C()
{
  unint64_t result = qword_1009A5B78;
  if (!qword_1009A5B78)
  {
    unint64_t result = swift_getWitnessTable(&unk_100801824, &type metadata for PairingTransportType);
    atomic_store(result, (unint64_t *)&qword_1009A5B78);
  }

  return result;
}

unint64_t sub_1001D80E0()
{
  unint64_t result = qword_1009A5B98;
  if (!qword_1009A5B98)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008017D4, &type metadata for PairingTransportType);
    atomic_store(result, (unint64_t *)&qword_1009A5B98);
  }

  return result;
}

unint64_t sub_1001D8124()
{
  unint64_t result = qword_1009A5BA8;
  if (!qword_1009A5BA8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007F6874,  &type metadata for OwnedBeaconGroup.VersionedGroupMACAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5BA8);
  }

  return result;
}

unint64_t sub_1001D8168()
{
  unint64_t result = qword_1009A5BC0;
  if (!qword_1009A5BC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F6824, &type metadata for OwnedBeaconGroup.PairingMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5BC0);
  }

  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.PairingMetadata.CodingKeys()
{
  return &type metadata for OwnedBeaconGroup.PairingMetadata.CodingKeys;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress.CodingKeys()
{
  return &type metadata for OwnedBeaconGroup.VersionedGroupMACAddress.CodingKeys;
}

uint64_t _s12searchpartyd16OwnedBeaconGroupV15PairingMetadataV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1001D821C + 4 * byte_1007F5BA5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001D8250 + 4 * byte_1007F5BA0[v4]))();
}

uint64_t sub_1001D8250(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D8258(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001D8260LL);
  }
  return result;
}

uint64_t sub_1001D826C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001D8274LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1001D8278(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D8280(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.Version.CodingKeys()
{
  return &type metadata for OwnedBeaconGroup.Version.CodingKeys;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.Version.LegacyCodingKeys()
{
  return &type metadata for OwnedBeaconGroup.Version.LegacyCodingKeys;
}

uint64_t _s12searchpartyd16OwnedBeaconGroupV12SerialNumberV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1001D82EC + 4 * byte_1007F5BAA[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1001D830C + 4 * byte_1007F5BAF[v4]))();
  }
}

_BYTE *sub_1001D82EC(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1001D830C(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1001D8314(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1001D831C(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1001D8324(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1001D832C(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.Version.VersionedCodingKeys()
{
  return &type metadata for OwnedBeaconGroup.Version.VersionedCodingKeys;
}

unint64_t sub_1001D834C()
{
  unint64_t result = qword_1009A5BD0;
  if (!qword_1009A5BD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F6584, &type metadata for OwnedBeaconGroup.Version.VersionedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5BD0);
  }

  return result;
}

unint64_t sub_1001D8394()
{
  unint64_t result = qword_1009A5BD8;
  if (!qword_1009A5BD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F668C, &type metadata for OwnedBeaconGroup.Version.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5BD8);
  }

  return result;
}

unint64_t sub_1001D83DC()
{
  unint64_t result = qword_1009A5BE0;
  if (!qword_1009A5BE0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007F6744,  &type metadata for OwnedBeaconGroup.VersionedGroupMACAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5BE0);
  }

  return result;
}

unint64_t sub_1001D8424()
{
  unint64_t result = qword_1009A5BE8;
  if (!qword_1009A5BE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F67FC, &type metadata for OwnedBeaconGroup.PairingMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5BE8);
  }

  return result;
}

unint64_t sub_1001D846C()
{
  unint64_t result = qword_1009A5BF0;
  if (!qword_1009A5BF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F676C, &type metadata for OwnedBeaconGroup.PairingMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5BF0);
  }

  return result;
}

unint64_t sub_1001D84B4()
{
  unint64_t result = qword_1009A5BF8;
  if (!qword_1009A5BF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F6794, &type metadata for OwnedBeaconGroup.PairingMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5BF8);
  }

  return result;
}

unint64_t sub_1001D84FC()
{
  unint64_t result = qword_1009A5C00;
  if (!qword_1009A5C00)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007F66B4,  &type metadata for OwnedBeaconGroup.VersionedGroupMACAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5C00);
  }

  return result;
}

unint64_t sub_1001D8544()
{
  unint64_t result = qword_1009A5C08;
  if (!qword_1009A5C08)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007F66DC,  &type metadata for OwnedBeaconGroup.VersionedGroupMACAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5C08);
  }

  return result;
}

unint64_t sub_1001D858C()
{
  unint64_t result = qword_1009A5C10;
  if (!qword_1009A5C10)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F65AC, &type metadata for OwnedBeaconGroup.Version.LegacyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5C10);
  }

  return result;
}

unint64_t sub_1001D85D4()
{
  unint64_t result = qword_1009A5C18;
  if (!qword_1009A5C18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F65D4, &type metadata for OwnedBeaconGroup.Version.LegacyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5C18);
  }

  return result;
}

unint64_t sub_1001D861C()
{
  unint64_t result = qword_1009A5C20;
  if (!qword_1009A5C20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F64F4, &type metadata for OwnedBeaconGroup.Version.VersionedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5C20);
  }

  return result;
}

unint64_t sub_1001D8664()
{
  unint64_t result = qword_1009A5C28;
  if (!qword_1009A5C28)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F651C, &type metadata for OwnedBeaconGroup.Version.VersionedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5C28);
  }

  return result;
}

unint64_t sub_1001D86AC()
{
  unint64_t result = qword_1009A5C30;
  if (!qword_1009A5C30)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F65FC, &type metadata for OwnedBeaconGroup.Version.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5C30);
  }

  return result;
}

unint64_t sub_1001D86F4()
{
  unint64_t result = qword_1009A5C38;
  if (!qword_1009A5C38)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F6624, &type metadata for OwnedBeaconGroup.Version.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5C38);
  }

  return result;
}

uint64_t sub_1001D8738(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FMNAccountType(0LL);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_1001D8774(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FMNAccountType(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t sub_1001D87A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FMNAccountType(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_1001D87EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FMNAccountType(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_1001D8830(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FMNAccountType(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_1001D8874(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FMNAccountType(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_1001D88B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001D88C4);
}

uint64_t sub_1001D88C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FMNAccountType(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t sub_1001D8900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001D890C);
}

uint64_t sub_1001D890C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FMNAccountType(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for AccessoryLostModeEndPoint(uint64_t a1)
{
  uint64_t result = qword_1009A5C98;
  if (!qword_1009A5C98) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryLostModeEndPoint);
  }
  return result;
}

uint64_t sub_1001D8988(uint64_t a1)
{
  uint64_t result = type metadata accessor for FMNAccountType(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 1LL, &v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1001D89F0(uint64_t a1)
{
  __int16 v1 = (void (*)(uint64_t *, void))URLComponents.path.modify(v13);
  v2._countAndFlagsBits = 0xD00000000000001ALL;
  v2._object = (void *)0x8000000100858A10LL;
  String.append(_:)(v2);
  v1(v13, 0LL);
  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  unint64_t v3 = (void *)qword_100A2AF38;
  id v4 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v5 = [v4 isInternalBuild];

  if (v5
    && (NSString v6 = String._bridgeToObjectiveC()(),
        id v7 = [v3 stringForKey:v6],
        v6,
        v7))
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v10 = v9;
  }

  else
  {
    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
    uint64_t v8 = sub_1006A1238(v13[0]);
    uint64_t v10 = v11;
    swift_bridgeObjectRelease();
  }

  return URLComponents.host.setter(v8, v10);
}

uint64_t sub_1001D8BBC(uint64_t a1)
{
  return sub_1001D89F0(a1);
}

uint64_t storeEnumTagSinglePayload for IdentitySigningType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF4) {
    return ((uint64_t (*)(void))((char *)&loc_1001D8C1C + 4 * byte_1007F6A35[v4]))();
  }
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1001D8C50 + 4 * byte_1007F6A30[v4]))();
}

uint64_t sub_1001D8C50(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D8C58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001D8C60LL);
  }
  return result;
}

uint64_t sub_1001D8C6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001D8C74LL);
  }
  *(_BYTE *)uint64_t result = a2 + 11;
  return result;
}

uint64_t sub_1001D8C78(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D8C80(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IdentitySigningType()
{
  return &type metadata for IdentitySigningType;
}

unint64_t sub_1001D8CA0()
{
  unint64_t result = qword_1009A5CD0;
  if (!qword_1009A5CD0)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A5CD8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009A5CD0);
  }

  return result;
}

void sub_1001D8CEC(void *a1@<X8>)
{
  *a1 = &off_100933C90;
}

unint64_t sub_1001D8D00()
{
  unint64_t result = qword_1009A5CE0;
  if (!qword_1009A5CE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F6B0C, &type metadata for IdentitySigningType);
    atomic_store(result, &qword_1009A5CE0);
  }

  return result;
}

uint64_t sub_1001D8D44(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1001D8D80 + 4 * byte_1007F6A3A[a1]))( 0xD000000000000017LL,  0x8000000100858B50LL);
}

uint64_t sub_1001D8D80()
{
  return v0 + 10;
}

uint64_t sub_1001D8DF4()
{
  return 0x746375646F72702ELL;
}

uint64_t sub_1001D8E14()
{
  return 0x676E69726961702ELL;
}

uint64_t sub_1001D8E50()
{
  return 0x6F4C72656E776F2ELL;
}

uint64_t sub_1001D8E70()
{
  return sub_1001D8D44(*v0);
}

uint64_t sub_1001D8E78(uint64_t a1, char a2)
{
  *(_BYTE *)(v2 + 192) = a2;
  *(void *)(v2 + 88) = a1;
  return swift_task_switch(sub_1001D8E94, 0LL, 0LL);
}

uint64_t sub_1001D8E94()
{
  id v1 = [(id)objc_opt_self(NSBundle) mainBundle];
  id v2 = [v1 bundleIdentifier];

  if (v2)
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    unint64_t v5 = v4;
  }

  else
  {
    unint64_t v5 = 0x80000001008507F0LL;
    uint64_t v3 = 0xD00000000000001DLL;
  }

  v0[12] = v3;
  v0[13] = v5;
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  uint64_t v6 = qword_100A2A710;
  v0[14] = qword_100A2A710;
  uint64_t v7 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc(v7);
  v0[15] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1001D8FBC;
  return unsafeBlocking<A>(_:)(v0 + 6, sub_100015814, v6, &type metadata for Configuration);
}

uint64_t sub_1001D8FBC()
{
  return swift_task_switch(sub_1001D9018, 0LL, 0LL);
}

uint64_t sub_1001D9018()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 192);
  uint64_t v2 = sub_1006A1224(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  uint64_t v3 = sub_1001D9774(v2);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v0 + 193) = sub_1000BACA0(v1, (uint64_t)v3);
  swift_bridgeObjectRelease();
  if (((1 << v1) & 0x7EF) != 0)
  {
    uint64_t v4 = v0 + 72;
    uint64_t v5 = qword_100A2A710;
    *(void *)(v0 + 128) = qword_100A2A710;
    uint64_t v6 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    uint64_t v7 = (void *)swift_task_alloc(v6);
    *(void *)(v0 + 136) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1001D914C;
  }

  else
  {
    uint64_t v4 = v0 + 56;
    uint64_t v5 = qword_100A2A710;
    *(void *)(v0 + 160) = qword_100A2A710;
    uint64_t v9 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    uint64_t v10 = (void *)swift_task_alloc(v9);
    *(void *)(v0 + 168) = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_1001D932C;
  }

  return unsafeBlocking<A>(_:)(v4, sub_100015814, v5, &type metadata for Configuration);
}

uint64_t sub_1001D914C()
{
  return swift_task_switch(sub_1001D91A8, 0LL, 0LL);
}

uint64_t sub_1001D91A8()
{
  v0[2] = sub_1006A1204(v0[9]);
  v0[3] = v1;
  swift_bridgeObjectRelease();
  uint64_t v2 = qword_100A2A710;
  v0[18] = qword_100A2A710;
  uint64_t v3 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc(v3);
  v0[19] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1001D9248;
  return unsafeBlocking<A>(_:)(v0 + 10, sub_100015814, v2, &type metadata for Configuration);
}

uint64_t sub_1001D9248()
{
  return swift_task_switch(sub_1001D92A4, 0LL, 0LL);
}

uint64_t sub_1001D92A4()
{
  uint64_t v1 = sub_1006A1210(*(void *)(v0 + 80));
  __int128 v7 = *(_OWORD *)(v0 + 16);
  char v2 = *(_BYTE *)(v0 + 193);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)uint64_t v5 = v7;
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *(void *)(v5 + 32) = v1;
  *(_WORD *)(v5 + 40) = 257;
  *(_BYTE *)(v5 + 42) = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001D932C()
{
  return swift_task_switch(sub_1001D9388, 0LL, 0LL);
}

uint64_t sub_1001D9388()
{
  v0[4] = sub_1006A11E4(v0[7]);
  v0[5] = v1;
  swift_bridgeObjectRelease();
  uint64_t v2 = qword_100A2A710;
  v0[22] = qword_100A2A710;
  uint64_t v3 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc(v3);
  v0[23] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1001D9428;
  return unsafeBlocking<A>(_:)(v0 + 8, sub_100015814, v2, &type metadata for Configuration);
}

uint64_t sub_1001D9428()
{
  return swift_task_switch(sub_1001D9484, 0LL, 0LL);
}

uint64_t sub_1001D9484()
{
  uint64_t v1 = sub_1006A11F0(*(void *)(v0 + 64));
  __int128 v7 = *(_OWORD *)(v0 + 32);
  char v2 = *(_BYTE *)(v0 + 193);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)uint64_t v5 = v7;
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *(void *)(v5 + 32) = v1;
  *(_WORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 42) = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *sub_1001D9508()
{
  unint64_t result = _swiftEmptyArrayStorage;
  unint64_t v2 = _swiftEmptyArrayStorage[2];
  unint64_t v1 = _swiftEmptyArrayStorage[3];
  unint64_t v3 = v2 + 1;
  if (v2 >= v1 >> 1)
  {
    sub_100032838(v1 > 1, v2 + 1, 1);
    unint64_t result = _swiftEmptyArrayStorage;
  }

  _swiftEmptyArrayStorage[2] = v3;
  _swiftEmptyArrayStorage[v2 + 4] = 5LL;
  unint64_t v4 = _swiftEmptyArrayStorage[3];
  unint64_t v5 = v2 + 2;
  if (v3 >= v4 >> 1)
  {
    sub_100032838(v4 > 1, v2 + 2, 1);
    unint64_t result = _swiftEmptyArrayStorage;
  }

  _swiftEmptyArrayStorage[2] = v5;
  _swiftEmptyArrayStorage[v3 + 4] = 2LL;
  unint64_t v6 = _swiftEmptyArrayStorage[3];
  unint64_t v7 = v2 + 3;
  if (v5 >= v6 >> 1)
  {
    sub_100032838(v6 > 1, v2 + 3, 1);
    unint64_t result = _swiftEmptyArrayStorage;
  }

  _swiftEmptyArrayStorage[2] = v7;
  _swiftEmptyArrayStorage[v5 + 4] = 1LL;
  uint64_t v8 = qword_1007F6B60[asc_10093255B[0]];
  unint64_t v9 = _swiftEmptyArrayStorage[3];
  unint64_t v10 = v5 + 2;
  if (v7 >= v9 >> 1)
  {
    sub_100032838(v9 > 1, v7 + 1, 1);
    unint64_t result = _swiftEmptyArrayStorage;
  }

  _swiftEmptyArrayStorage[2] = v10;
  _swiftEmptyArrayStorage[v7 + 4] = v8;
  uint64_t v11 = qword_1007F6B60[asc_10093255B[1]];
  unint64_t v12 = _swiftEmptyArrayStorage[3];
  unint64_t v13 = v7 + 2;
  if (v10 >= v12 >> 1)
  {
    sub_100032838(v12 > 1, v10 + 1, 1);
    unint64_t result = _swiftEmptyArrayStorage;
  }

  _swiftEmptyArrayStorage[2] = v13;
  _swiftEmptyArrayStorage[v10 + 4] = v11;
  uint64_t v14 = qword_1007F6B60[asc_10093255B[2]];
  unint64_t v15 = _swiftEmptyArrayStorage[3];
  unint64_t v16 = v10 + 2;
  if (v13 >= v15 >> 1)
  {
    sub_100032838(v15 > 1, v13 + 1, 1);
    unint64_t result = _swiftEmptyArrayStorage;
  }

  _swiftEmptyArrayStorage[2] = v16;
  _swiftEmptyArrayStorage[v13 + 4] = v14;
  uint64_t v17 = qword_1007F6B60[asc_10093255B[3]];
  unint64_t v18 = _swiftEmptyArrayStorage[3];
  unint64_t v19 = v13 + 2;
  if (v16 >= v18 >> 1)
  {
    sub_100032838(v18 > 1, v16 + 1, 1);
    unint64_t result = _swiftEmptyArrayStorage;
  }

  _swiftEmptyArrayStorage[2] = v19;
  _swiftEmptyArrayStorage[v16 + 4] = v17;
  return result;
}

void *sub_1001D9774(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    swift_bridgeObjectRetain(a1);
    __asm { BR              X10; loc_1001D97E8 }
  }

  return _swiftEmptyArrayStorage;
}

uint64_t storeEnumTagSinglePayload for IdentitySigningHeaderError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1001D9964 + 4 * byte_1007F6BC0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1001D9984 + 4 * byte_1007F6BC5[v4]))();
  }
}

_BYTE *sub_1001D9964(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1001D9984(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1001D998C(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1001D9994(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1001D999C(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1001D99A4(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for IdentitySigningHeaderError()
{
  return &type metadata for IdentitySigningHeaderError;
}

unint64_t sub_1001D99C4()
{
  unint64_t result = qword_1009A5CF0;
  if (!qword_1009A5CF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F6C4C, &type metadata for IdentitySigningHeaderError);
    atomic_store(result, (unint64_t *)&qword_1009A5CF0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for SecureLocationsAutoMeStatus( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1001D9A54 + 4 * byte_1007F6CD5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001D9A88 + 4 * byte_1007F6CD0[v4]))();
}

uint64_t sub_1001D9A88(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D9A90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001D9A98LL);
  }
  return result;
}

uint64_t sub_1001D9AA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001D9AACLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1001D9AB0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D9AB8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsAutoMeStatus()
{
  return &type metadata for SecureLocationsAutoMeStatus;
}

uint64_t destroy for SecureLocationsPublishClientContext(void *a1)
{
  return swift_bridgeObjectRelease(a1[9]);
}

uint64_t initializeWithCopy for SecureLocationsPublishClientContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_100032838(0, 7LL, 0) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 72) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for SecureLocationsPublishClientContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 4sub_100032838(0, 7LL, 0) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

__n128 initializeWithTake for InitialPairingInfo(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + swift_weakDestroy(v0 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for SecureLocationsPublishClientContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_100032838(0, 7LL, 0) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease(*(void *)(a1 + 64));
  uint64_t v10 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureLocationsPublishClientContext(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsPublishClientContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4sub_100032838(0, 7LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 8sub_100032838(0, 7LL, 0) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 8sub_100032838(0, 7LL, 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsPublishClientContext()
{
  return &type metadata for SecureLocationsPublishClientContext;
}

uint64_t destroy for SecureLocationsClientContext(void *a1)
{
  return swift_bridgeObjectRelease(a1[14]);
}

uint64_t initializeWithCopy for SecureLocationsClientContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_100032838(0, 7LL, 0) = v5;
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 8sub_100032838(0, 7LL, 0) = *(_BYTE *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  uint64_t v9 = *(void *)(a2 + 88);
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = v9;
  *(void *)(a1 + 96) = v8;
  uint64_t v10 = *(void *)(a2 + 112);
  *(void *)(a1 + 112) = v10;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t assignWithCopy for SecureLocationsClientContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 4sub_100032838(0, 7LL, 0) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(void *)(a1 + 56) = v12;
  LOBYTE(v12) = *(_BYTE *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_BYTE *)(a1 + 8sub_100032838(0, 7LL, 0) = v12;
  uint64_t v13 = *(void *)(a2 + 88);
  uint64_t v14 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 96) = v15;
  uint64_t v16 = *(void *)(a2 + 112);
  uint64_t v17 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  return a1;
}

__n128 initializeWithTake for SecureLocationsClientContext(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  __n128 result = (__n128)a2[4];
  __int128 v6 = a2[5];
  __int128 v7 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 8sub_100032838(0, 7LL, 0) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for SecureLocationsClientContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(*(void *)(a1 + 40));
  uint64_t v8 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 4sub_100032838(0, 7LL, 0) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v8);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_BYTE *)(a1 + 8sub_100032838(0, 7LL, 0) = *(_BYTE *)(a2 + 80);
  uint64_t v9 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  uint64_t v10 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureLocationsClientContext(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsClientContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4sub_100032838(0, 7LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 12sub_100032838(0, 7LL, 0) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 12sub_100032838(0, 7LL, 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsClientContext()
{
  return &type metadata for SecureLocationsClientContext;
}

uint64_t *sub_1001DA134@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2 = *result;
  *a2 = v2;
  return result;
}

uint64_t sub_1001DA14C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001DAB84();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001DA1A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001DAB84();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t sub_1001DA1F8()
{
  unint64_t result = qword_1009A5CF8;
  if (!qword_1009A5CF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F6E24, &type metadata for SecureLocationsAutoMeStatus);
    atomic_store(result, (unint64_t *)&qword_1009A5CF8);
  }

  return result;
}

uint64_t sub_1001DA23C(void *a1)
{
  __int128 v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A5D00);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1001DA920();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SecureLocationsClientContext.CodingKeys,  &type metadata for SecureLocationsClientContext.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  LOBYTE(v24[0]) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, v24, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    LOBYTE(v24[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, v24, v5);
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    LOBYTE(v24[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, v24, v5);
    v24[0] = v3[6];
    char v25 = 3;
    uint64_t v18 = sub_100004AEC(&qword_1009A5D10);
    unint64_t v19 = sub_1001DA964();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v24, &v25, v5, v18, v19);
    sub_1001DAA14((uint64_t)(v3 + 7), (uint64_t)v26);
    sub_1001DAA14((uint64_t)v26, (uint64_t)v24);
    char v25 = 4;
    unint64_t v20 = sub_1001DAA5C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)( v24,  &v25,  v5,  &type metadata for SecureLocationsLiveStatsPayload,  v20);
    v24[0] = v3[14];
    char v25 = 5;
    uint64_t v21 = sub_100004AEC(&qword_1009AED50);
    unint64_t v22 = sub_1001DAAA0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v24, &v25, v5, v21, v22);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001DA460()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001DA490 + 4 * byte_1007F6CDA[*v0]))( 0x6E656B6F54737061LL,  0xE800000000000000LL);
}

uint64_t sub_1001DA490()
{
  return 0x6449746E65696C63LL;
}

uint64_t sub_1001DA4A4()
{
  return 0x41747865746E6F63LL;
}

uint64_t sub_1001DA4C0()
{
  return 0x53776F6C6C616873LL;
}

uint64_t sub_1001DA4E0()
{
  return 0x746174536576696CLL;
}

unint64_t sub_1001DA4FC()
{
  return 0xD000000000000015LL;
}

uint64_t sub_1001DA518@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001DAE5C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001DA53C(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1001DA548(uint64_t a1)
{
  unint64_t v2 = sub_1001DA920();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001DA570(uint64_t a1)
{
  unint64_t v2 = sub_1001DA920();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001DA598(void *a1)
{
  return sub_1001DA23C(a1);
}

uint64_t sub_1001DA5E8(void *a1)
{
  __int128 v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A5D38);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1001DAAFC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SecureLocationsPublishClientContext.CodingKeys,  &type metadata for SecureLocationsPublishClientContext.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v32 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v32, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    char v31 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v31, v5);
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    char v30 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v30, v5);
    char v29 = *((_BYTE *)v3 + 48);
    char v28 = 3;
    unint64_t v18 = sub_1001DAB40();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v29, &v28, v5, &type metadata for SecureLocationsAutoMeStatus, v18);
    uint64_t v19 = v3[7];
    uint64_t v20 = v3[8];
    char v27 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v27, v5);
    uint64_t v26 = v3[9];
    char v25 = 5;
    uint64_t v21 = sub_100004AEC(&qword_1009AED50);
    unint64_t v22 = sub_1001DAAA0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v25, v5, v21, v22);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001DA7D8()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001DA808 + 4 * byte_1007F6CE0[*v0]))( 0x6E656B6F54737061LL,  0xE800000000000000LL);
}

uint64_t sub_1001DA808()
{
  return 0x6449746E65696C63LL;
}

uint64_t sub_1001DA81C()
{
  return 0x41747865746E6F63LL;
}

uint64_t sub_1001DA838()
{
  return 0x7453654D6F747561LL;
}

uint64_t sub_1001DA858()
{
  return 0x526873696C627570LL;
}

unint64_t sub_1001DA87C()
{
  return 0xD000000000000015LL;
}

uint64_t sub_1001DA898@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001DB108(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001DA8BC(uint64_t a1)
{
  unint64_t v2 = sub_1001DAAFC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001DA8E4(uint64_t a1)
{
  unint64_t v2 = sub_1001DAAFC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001DA90C(void *a1)
{
  return sub_1001DA5E8(a1);
}

unint64_t sub_1001DA920()
{
  unint64_t result = qword_1009A5D08;
  if (!qword_1009A5D08)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F7068, &type metadata for SecureLocationsClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5D08);
  }

  return result;
}

unint64_t sub_1001DA964()
{
  unint64_t result = qword_1009A5D18;
  if (!qword_1009A5D18)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A5D10);
    sub_1001DA9D0();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1009A5D18);
  }

  return result;
}

unint64_t sub_1001DA9D0()
{
  unint64_t result = qword_1009A5D20;
  if (!qword_1009A5D20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008162A0, &type metadata for SecureLocationsShallowIdStats);
    atomic_store(result, (unint64_t *)&qword_1009A5D20);
  }

  return result;
}

uint64_t sub_1001DAA14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A5D28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001DAA5C()
{
  unint64_t result = qword_1009A5D30;
  if (!qword_1009A5D30)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008164D8, &type metadata for SecureLocationsLiveStatsPayload);
    atomic_store(result, (unint64_t *)&qword_1009A5D30);
  }

  return result;
}

unint64_t sub_1001DAAA0()
{
  unint64_t result = qword_1009B0650;
  if (!qword_1009B0650)
  {
    uint64_t v1 = sub_100004B78(&qword_1009AED50);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009B0650);
  }

  return result;
}

unint64_t sub_1001DAAFC()
{
  unint64_t result = qword_1009A5D40;
  if (!qword_1009A5D40)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F7018, &type metadata for SecureLocationsPublishClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5D40);
  }

  return result;
}

unint64_t sub_1001DAB40()
{
  unint64_t result = qword_1009A5D48;
  if (!qword_1009A5D48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F6D5C, &type metadata for SecureLocationsAutoMeStatus);
    atomic_store(result, (unint64_t *)&qword_1009A5D48);
  }

  return result;
}

unint64_t sub_1001DAB84()
{
  unint64_t result = qword_1009A5D50;
  if (!qword_1009A5D50)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F6DAC, &type metadata for SecureLocationsAutoMeStatus);
    atomic_store(result, (unint64_t *)&qword_1009A5D50);
  }

  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsPublishClientContext.CodingKeys()
{
  return &type metadata for SecureLocationsPublishClientContext.CodingKeys;
}

uint64_t _s12searchpartyd35SecureLocationsPublishClientContextV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_1001DAC2C + 4 * byte_1007F6CEB[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1001DAC60 + 4 * byte_1007F6CE6[v4]))();
}

uint64_t sub_1001DAC60(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DAC68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001DAC70LL);
  }
  return result;
}

uint64_t sub_1001DAC7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001DAC84LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1001DAC88(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DAC90(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsClientContext.CodingKeys()
{
  return &type metadata for SecureLocationsClientContext.CodingKeys;
}

unint64_t sub_1001DACB0()
{
  unint64_t result = qword_1009A5D58;
  if (!qword_1009A5D58)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F6F38, &type metadata for SecureLocationsClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5D58);
  }

  return result;
}

unint64_t sub_1001DACF8()
{
  unint64_t result = qword_1009A5D60;
  if (!qword_1009A5D60)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F6FF0, &type metadata for SecureLocationsPublishClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5D60);
  }

  return result;
}

unint64_t sub_1001DAD40()
{
  unint64_t result = qword_1009A5D68;
  if (!qword_1009A5D68)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F6F60, &type metadata for SecureLocationsPublishClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5D68);
  }

  return result;
}

unint64_t sub_1001DAD88()
{
  unint64_t result = qword_1009A5D70;
  if (!qword_1009A5D70)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F6F88, &type metadata for SecureLocationsPublishClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5D70);
  }

  return result;
}

unint64_t sub_1001DADD0()
{
  unint64_t result = qword_1009A5D78;
  if (!qword_1009A5D78)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F6EA8, &type metadata for SecureLocationsClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5D78);
  }

  return result;
}

unint64_t sub_1001DAE18()
{
  unint64_t result = qword_1009A5D80;
  if (!qword_1009A5D80)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F6ED0, &type metadata for SecureLocationsClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A5D80);
  }

  return result;
}

uint64_t sub_1001DAE5C(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6E656B6F54737061LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v5 = 0xE800000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E656B6F54737061LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6449746E65696C63LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v7 = 0xE800000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449746E65696C63LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x41747865746E6F63LL && a2 == 0xEA00000000007070LL)
  {
    unint64_t v8 = 0xEA00000000007070LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x41747865746E6F63LL, 0xEA00000000007070LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x53776F6C6C616873LL && a2 == 0xEC00000073746174LL)
  {
    unint64_t v9 = 0xEC00000073746174LL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x53776F6C6C616873LL, 0xEC00000073746174LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_26;
  }

  if (a1 == 0x746174536576696CLL && a2 == 0xE900000000000073LL)
  {
    unint64_t v10 = 0xE900000000000073LL;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746174536576696CLL, 0xE900000000000073LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_32;
  }

  if (a1 == 0xD000000000000015LL && a2 == 0x8000000100858B70LL)
  {
    swift_bridgeObjectRelease(0x8000000100858B70LL);
    return 5LL;
  }

  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x8000000100858B70LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

uint64_t sub_1001DB108(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6E656B6F54737061LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v5 = 0xE800000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E656B6F54737061LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6449746E65696C63LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v7 = 0xE800000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449746E65696C63LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x41747865746E6F63LL && a2 == 0xEA00000000007070LL)
  {
    unint64_t v8 = 0xEA00000000007070LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x41747865746E6F63LL, 0xEA00000000007070LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x7453654D6F747561LL && a2 == 0xEC00000073757461LL)
  {
    unint64_t v9 = 0xEC00000073757461LL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7453654D6F747561LL, 0xEC00000073757461LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_26;
  }

  if (a1 == 0x526873696C627570LL && a2 == 0xED00006E6F736165LL)
  {
    unint64_t v10 = 0xED00006E6F736165LL;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x526873696C627570LL, 0xED00006E6F736165LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_32;
  }

  if (a1 == 0xD000000000000015LL && a2 == 0x8000000100858B70LL)
  {
    swift_bridgeObjectRelease(0x8000000100858B70LL);
    return 5LL;
  }

  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x8000000100858B70LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

void sub_1001DB3CC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = __CocoaSet.makeIterator()(v4);
    uint64_t v6 = sub_100022898(0LL, &qword_10099DF88, &OBJC_CLASS___FAFamilyMember_ptr);
    uint64_t v7 = sub_10020EB64( &qword_1009A6178,  &qword_10099DF88,  &OBJC_CLASS___FAFamilyMember_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)Set.Iterator.init(_cocoa:)(v48, v5, v6, v7);
    uint64_t v3 = v48[0];
    uint64_t v49 = v48[1];
    uint64_t v9 = v48[2];
    uint64_t v10 = v48[3];
    unint64_t v11 = v48[4];
  }

  else
  {
    uint64_t v12 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 56);
    uint64_t v49 = a1 + 56;
    uint64_t v9 = ~v12;
    uint64_t v14 = -v12;
    if (v14 < 64) {
      uint64_t v15 = ~(-1LL << v14);
    }
    else {
      uint64_t v15 = -1LL;
    }
    unint64_t v11 = v15 & v13;
    swift_bridgeObjectRetain(a1);
    uint64_t v10 = 0LL;
  }

  int64_t v45 = (unint64_t)(v9 + 64) >> 6;
  unint64_t v44 = _swiftEmptyArrayStorage;
  while (1)
  {
    uint64_t v16 = v10;
    if ((v3 & 0x8000000000000000LL) == 0) {
      break;
    }
    uint64_t v19 = __CocoaSet.Iterator.next()(isUniquelyReferenced_nonNull_native);
    if (!v19) {
      goto LABEL_46;
    }
    uint64_t v20 = v19;
    v46[0] = v19;
    uint64_t v21 = sub_100022898(0LL, &qword_10099DF88, &OBJC_CLASS___FAFamilyMember_ptr);
    swift_unknownObjectRetain(v20);
    swift_dynamicCast(v47, v46, (char *)&type metadata for Swift.AnyObject + 8, v21, 7LL);
    id v22 = (id)v47[0];
    swift_unknownObjectRelease(v20);
    if (!v22) {
      goto LABEL_46;
    }
LABEL_34:
    id v26 = [v22 appleID];
    if (v26)
    {
      char v27 = v26;
      uint64_t v43 = v2;
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      uint64_t v30 = v29;

      v47[0] = v28;
      v47[1] = v30;
      v46[0] = 64LL;
      v46[1] = 0xE100000000000000LL;
      unint64_t v31 = sub_1000155F8();
      swift_bridgeObjectRetain(v30);
      char v32 = StringProtocol.contains<A>(_:)(v46, &type metadata for String, &type metadata for String, v31, v31);
      NSString v33 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      if ((v32 & 1) != 0)
      {
        uint64_t v34 = (void *)IDSCopyIDForEmailAddress(v33);

        if (!v34) {
          goto LABEL_48;
        }
        char v42 = 0;
      }

      else
      {
        uint64_t v34 = (void *)IDSCopyIDForPhoneNumber(v33);

        if (!v34) {
          goto LABEL_49;
        }
        char v42 = 1;
      }

      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      uint64_t v37 = v36;

      swift_bridgeObjectRelease();
      uint64_t v38 = v44;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v44);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1004C4768(0LL, v44[2] + 1LL, 1, v44);
        uint64_t v38 = (void *)isUniquelyReferenced_nonNull_native;
      }

      unint64_t v40 = v38[2];
      unint64_t v39 = v38[3];
      if (v40 >= v39 >> 1)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1004C4768((void *)(v39 > 1), v40 + 1, 1, v38);
        uint64_t v38 = (void *)isUniquelyReferenced_nonNull_native;
      }

      v38[2] = v40 + 1;
      unint64_t v44 = v38;
      int v41 = &v38[3 * v40];
      *((_BYTE *)v41 + 32) = v42;
      v41[5] = v35;
      v41[6] = v37;
      uint64_t v2 = v43;
    }

    else
    {
    }
  }

  if (v11)
  {
    unint64_t v17 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    unint64_t v18 = v17 | (v10 << 6);
LABEL_33:
    id v22 = *(id *)(*(void *)(v3 + 48) + 8 * v18);
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_34;
  }

  int64_t v23 = v10 + 1;
  if (!__OFADD__(v10, 1LL))
  {
    if (v23 >= v45) {
      goto LABEL_46;
    }
    unint64_t v24 = *(void *)(v49 + 8 * v23);
    ++v10;
    if (!v24)
    {
      uint64_t v10 = v16 + 2;
      if (v16 + 2 >= v45) {
        goto LABEL_46;
      }
      unint64_t v24 = *(void *)(v49 + 8 * v10);
      if (!v24)
      {
        uint64_t v10 = v16 + 3;
        if (v16 + 3 >= v45) {
          goto LABEL_46;
        }
        unint64_t v24 = *(void *)(v49 + 8 * v10);
        if (!v24)
        {
          uint64_t v10 = v16 + 4;
          if (v16 + 4 >= v45) {
            goto LABEL_46;
          }
          unint64_t v24 = *(void *)(v49 + 8 * v10);
          if (!v24)
          {
            uint64_t v10 = v16 + 5;
            if (v16 + 5 >= v45) {
              goto LABEL_46;
            }
            unint64_t v24 = *(void *)(v49 + 8 * v10);
            if (!v24)
            {
              uint64_t v25 = v16 + 6;
              while (v45 != v25)
              {
                unint64_t v24 = *(void *)(v49 + 8 * v25++);
                if (v24)
                {
                  uint64_t v10 = v25 - 1;
                  goto LABEL_32;
                }
              }

void sub_1001DB830(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = __CocoaSet.makeIterator()(v4);
    uint64_t v6 = sub_100022898(0LL, &qword_10099DF88, &OBJC_CLASS___FAFamilyMember_ptr);
    uint64_t v7 = sub_10020EB64( &qword_1009A6178,  &qword_10099DF88,  &OBJC_CLASS___FAFamilyMember_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)Set.Iterator.init(_cocoa:)(v47, v5, v6, v7);
    uint64_t v3 = v47[0];
    uint64_t v48 = v47[1];
    uint64_t v9 = v47[2];
    uint64_t v10 = v47[3];
    unint64_t v11 = v47[4];
  }

  else
  {
    uint64_t v12 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 56);
    uint64_t v48 = a1 + 56;
    uint64_t v9 = ~v12;
    uint64_t v14 = -v12;
    if (v14 < 64) {
      uint64_t v15 = ~(-1LL << v14);
    }
    else {
      uint64_t v15 = -1LL;
    }
    unint64_t v11 = v15 & v13;
    swift_bridgeObjectRetain(a1);
    uint64_t v10 = 0LL;
  }

  int64_t v44 = (unint64_t)(v9 + 64) >> 6;
  uint64_t v43 = _swiftEmptyArrayStorage;
  while (1)
  {
    uint64_t v16 = v10;
    if ((v3 & 0x8000000000000000LL) == 0) {
      break;
    }
    uint64_t v19 = __CocoaSet.Iterator.next()(isUniquelyReferenced_nonNull_native);
    if (!v19) {
      goto LABEL_46;
    }
    uint64_t v20 = v19;
    v45[0] = v19;
    uint64_t v21 = sub_100022898(0LL, &qword_10099DF88, &OBJC_CLASS___FAFamilyMember_ptr);
    swift_unknownObjectRetain(v20);
    swift_dynamicCast(v46, v45, (char *)&type metadata for Swift.AnyObject + 8, v21, 7LL);
    id v22 = (id)v46[0];
    swift_unknownObjectRelease(v20);
    if (!v22) {
      goto LABEL_46;
    }
LABEL_34:
    id v26 = [v22 appleID];
    if (v26)
    {
      char v27 = v26;
      uint64_t v42 = v2;
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      uint64_t v30 = v29;

      v46[0] = v28;
      v46[1] = v30;
      v45[0] = 64LL;
      v45[1] = 0xE100000000000000LL;
      unint64_t v31 = sub_1000155F8();
      char v32 = StringProtocol.contains<A>(_:)(v45, &type metadata for String, &type metadata for String, v31, v31);
      NSString v33 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      if ((v32 & 1) != 0)
      {
        uint64_t v34 = (void *)IDSCopyIDForEmailAddress(v33);

        if (!v34) {
          goto LABEL_48;
        }
        char v35 = 0;
      }

      else
      {
        uint64_t v34 = (void *)IDSCopyIDForPhoneNumber(v33);

        if (!v34) {
          goto LABEL_49;
        }
        char v35 = 1;
      }

      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      uint64_t v38 = v37;

      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v43);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1004C4768(0LL, v43[2] + 1LL, 1, v43);
        uint64_t v43 = (void *)isUniquelyReferenced_nonNull_native;
      }

      unint64_t v40 = v43[2];
      unint64_t v39 = v43[3];
      if (v40 >= v39 >> 1)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1004C4768((void *)(v39 > 1), v40 + 1, 1, v43);
        uint64_t v43 = (void *)isUniquelyReferenced_nonNull_native;
      }

      v43[2] = v40 + 1;
      int v41 = &v43[3 * v40];
      *((_BYTE *)v41 + 32) = v35;
      v41[5] = v36;
      v41[6] = v38;
      uint64_t v2 = v42;
    }

    else
    {
    }
  }

  if (v11)
  {
    unint64_t v17 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    unint64_t v18 = v17 | (v10 << 6);
LABEL_33:
    id v22 = *(id *)(*(void *)(v3 + 48) + 8 * v18);
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_34;
  }

  int64_t v23 = v10 + 1;
  if (!__OFADD__(v10, 1LL))
  {
    if (v23 >= v44) {
      goto LABEL_46;
    }
    unint64_t v24 = *(void *)(v48 + 8 * v23);
    ++v10;
    if (!v24)
    {
      uint64_t v10 = v16 + 2;
      if (v16 + 2 >= v44) {
        goto LABEL_46;
      }
      unint64_t v24 = *(void *)(v48 + 8 * v10);
      if (!v24)
      {
        uint64_t v10 = v16 + 3;
        if (v16 + 3 >= v44) {
          goto LABEL_46;
        }
        unint64_t v24 = *(void *)(v48 + 8 * v10);
        if (!v24)
        {
          uint64_t v10 = v16 + 4;
          if (v16 + 4 >= v44) {
            goto LABEL_46;
          }
          unint64_t v24 = *(void *)(v48 + 8 * v10);
          if (!v24)
          {
            uint64_t v10 = v16 + 5;
            if (v16 + 5 >= v44) {
              goto LABEL_46;
            }
            unint64_t v24 = *(void *)(v48 + 8 * v10);
            if (!v24)
            {
              uint64_t v25 = v16 + 6;
              while (v44 != v25)
              {
                unint64_t v24 = *(void *)(v48 + 8 * v25++);
                if (v24)
                {
                  uint64_t v10 = v25 - 1;
                  goto LABEL_32;
                }
              }

void sub_1001DBC78(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009A4E58);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Destination(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v36 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v34 = (char *)&v32 - v9;
  uint64_t v10 = a1 + 56;
  uint64_t v11 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(a1 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v15 = 0LL;
  uint64_t v37 = (char *)_swiftEmptyArrayStorage;
  uint64_t v33 = a1 + 56;
  if (!v13) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v16 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v16 | (v15 << 6); ; unint64_t i = __clz(__rbit64(v23)) + (v15 << 6))
  {
    uint64_t v18 = *(void *)(a1 + 48) + 24 * i;
    uint64_t v19 = *(void *)(v18 + 8);
    uint64_t v20 = *(void *)(v18 + 16);
    __n128 v21 = swift_bridgeObjectRetain(v20);
    Destination.init(stringRepresentation:)(v19, v20, v21);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
    {
      sub_100015794((uint64_t)v4, &qword_1009A4E58);
      if (v13) {
        goto LABEL_4;
      }
    }

    else
    {
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      id v26 = v34;
      v25(v34, v4, v5);
      char v35 = v25;
      v25(v36, v26, v5);
      if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0) {
        uint64_t v37 = (char *)sub_1004C5AAC(0, *((void *)v37 + 2) + 1LL, 1, (unint64_t)v37);
      }
      unint64_t v28 = *((void *)v37 + 2);
      unint64_t v27 = *((void *)v37 + 3);
      unint64_t v29 = v28 + 1;
      uint64_t v10 = v33;
      if (v28 >= v27 >> 1)
      {
        unint64_t v32 = v28 + 1;
        unint64_t v31 = (char *)sub_1004C5AAC(v27 > 1, v28 + 1, 1, (unint64_t)v37);
        unint64_t v29 = v32;
        uint64_t v37 = v31;
      }

      uint64_t v30 = v37;
      *((void *)v37 + 2) = v29;
      v35( &v30[((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
           + *(void *)(v6 + 72) * v28],
        v36,
        v5);
      if (v13) {
        goto LABEL_4;
      }
    }

void sub_1001DBF9C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Destination(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v35 - v7;
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v40 = a1 + 56;
  uint64_t v10 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & v9;
  int64_t v41 = (unint64_t)(v10 + 63) >> 6;
  __n128 v13 = swift_bridgeObjectRetain(a1);
  int64_t v14 = 0LL;
  unint64_t v39 = _swiftEmptyArrayStorage;
  uint64_t v36 = v8;
  uint64_t v37 = a1;
  if (v12) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v17 = v14 + 1;
  if (!__OFADD__(v14, 1LL))
  {
    if (v17 < v41)
    {
      unint64_t v18 = *(void *)(v40 + 8 * v17);
      ++v14;
      if (v18) {
        goto LABEL_22;
      }
      int64_t v14 = v17 + 1;
      if (v17 + 1 >= v41) {
        goto LABEL_41;
      }
      unint64_t v18 = *(void *)(v40 + 8 * v14);
      if (v18) {
        goto LABEL_22;
      }
      int64_t v14 = v17 + 2;
      if (v17 + 2 >= v41) {
        goto LABEL_41;
      }
      unint64_t v18 = *(void *)(v40 + 8 * v14);
      if (v18) {
        goto LABEL_22;
      }
      int64_t v14 = v17 + 3;
      if (v17 + 3 >= v41) {
        goto LABEL_41;
      }
      unint64_t v18 = *(void *)(v40 + 8 * v14);
      if (v18)
      {
LABEL_22:
        unint64_t v12 = (v18 - 1) & v18;
        for (unint64_t i = __clz(__rbit64(v18)) + (v14 << 6); ; unint64_t i = v15 | (v14 << 6))
        {
          (*(void (**)(char *, unint64_t, uint64_t, __n128))(v3 + 16))( v8,  *(void *)(a1 + 48) + *(void *)(v3 + 72) * i,  v2,  v13);
          uint64_t v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 32))(v6, v8, v2);
          uint64_t v21 = Destination.destination.getter(v20);
          uint64_t v23 = v22;
          v24._countAndFlagsBits = 0x3A6F746C69616DLL;
          v24._object = (void *)0xE700000000000000LL;
          if (String.hasPrefix(_:)(v24))
          {
            int v38 = 0;
          }

          else
          {
            v25._countAndFlagsBits = 980182388LL;
            v25._object = (void *)0xE400000000000000LL;
            if (String.hasPrefix(_:)(v25))
            {
              int v30 = 1;
            }

            else
            {
              v26._countAndFlagsBits = 0x3A6E656B6F74LL;
              v26._object = (void *)0xE600000000000000LL;
              if (String.hasPrefix(_:)(v26)
                || (v27._countAndFlagsBits = 0x6B6F742D666C6573LL,
                    v27._object = (void *)0xEB000000003A6E65LL,
                    String.hasPrefix(_:)(v27)))
              {
                int v30 = 2;
              }

              else
              {
                v28._countAndFlagsBits = 0x3A656369766564LL;
                v28._object = (void *)0xE700000000000000LL;
                if (String.hasPrefix(_:)(v28))
                {
                  int v30 = 3;
                }

                else
                {
                  v29._countAndFlagsBits = 0x3A6E6F6973736573LL;
                  v29._object = (void *)0xE800000000000000LL;
                  if (!String.hasPrefix(_:)(v29))
                  {
                    swift_bridgeObjectRelease();
                    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
                    if (!v12) {
                      goto LABEL_7;
                    }
                    goto LABEL_6;
                  }

                  int v30 = 4;
                }
              }
            }

            int v38 = v30;
          }

          (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
          if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0) {
            unint64_t v39 = sub_1004C4768(0LL, v39[2] + 1LL, 1, v39);
          }
          unint64_t v32 = v39[2];
          unint64_t v31 = v39[3];
          if (v32 >= v31 >> 1) {
            unint64_t v39 = sub_1004C4768((void *)(v31 > 1), v32 + 1, 1, v39);
          }
          uint64_t v33 = v39;
          v39[2] = v32 + 1;
          uint64_t v34 = &v33[3 * v32];
          *((_BYTE *)v34 + 32) = v38;
          v34[5] = v21;
          v34[6] = v23;
          uint64_t v8 = v36;
          a1 = v37;
          if (!v12) {
            goto LABEL_7;
          }
LABEL_6:
          unint64_t v15 = __clz(__rbit64(v12));
          v12 &= v12 - 1;
        }
      }

      int64_t v19 = v17 + 4;
      if (v19 < v41)
      {
        unint64_t v18 = *(void *)(v40 + 8 * v19);
        if (v18)
        {
          int64_t v14 = v19;
          goto LABEL_22;
        }

        while (1)
        {
          int64_t v14 = v19 + 1;
          if (__OFADD__(v19, 1LL)) {
            goto LABEL_43;
          }
          if (v14 >= v41) {
            break;
          }
          unint64_t v18 = *(void *)(v40 + 8 * v14);
          ++v19;
          if (v18) {
            goto LABEL_22;
          }
        }
      }
    }

void sub_1001DC384(uint64_t a1)
{
  uint64_t v1 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v2 = -1LL;
  if (v1 < 64) {
    uint64_t v2 = ~(-1LL << v1);
  }
  unint64_t v3 = v2 & *(void *)(a1 + 56);
  int64_t v25 = (unint64_t)(v1 + 63) >> 6;
  uint64_t v27 = a1;
  swift_bridgeObjectRetain(a1);
  int64_t v4 = 0LL;
  uint64_t v5 = _swiftEmptyArrayStorage;
  if (!v3) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v6 = __clz(__rbit64(v3));
  v3 &= v3 - 1;
  for (unint64_t i = v6 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v9)) + (v4 << 6))
  {
    uint64_t v11 = (void *)(*(void *)(v27 + 48) + 40 * i);
    uint64_t v12 = v11[1];
    _OWORD v26[2] = *v11;
    v26[3] = v12;
    v26[0] = 64LL;
    v26[1] = 0xE100000000000000LL;
    unint64_t v13 = sub_1000155F8();
    swift_bridgeObjectRetain(v12);
    char v14 = StringProtocol.contains<A>(_:)(v26, &type metadata for String, &type metadata for String, v13, v13);
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if ((v14 & 1) != 0)
    {
      unint64_t v16 = (void *)IDSCopyIDForEmailAddress(v15);

      if (!v16) {
        goto LABEL_35;
      }
      char v17 = 0;
    }

    else
    {
      unint64_t v16 = (void *)IDSCopyIDForPhoneNumber(v15);

      if (!v16) {
        goto LABEL_36;
      }
      char v17 = 1;
    }

    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    uint64_t v20 = v19;

    if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0) {
      uint64_t v5 = sub_1004C4768(0LL, v5[2] + 1LL, 1, v5);
    }
    unint64_t v22 = v5[2];
    unint64_t v21 = v5[3];
    if (v22 >= v21 >> 1) {
      uint64_t v5 = sub_1004C4768((void *)(v21 > 1), v22 + 1, 1, v5);
    }
    v5[2] = v22 + 1;
    uint64_t v23 = &v5[3 * v22];
    *((_BYTE *)v23 + 32) = v17;
    v23[5] = v18;
    v23[6] = v20;
    if (v3) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v8 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_34;
    }

    if (v8 >= v25) {
      goto LABEL_32;
    }
    unint64_t v9 = *(void *)(v24 + 8 * v8);
    ++v4;
    if (!v9)
    {
      int64_t v4 = v8 + 1;
      if (v8 + 1 >= v25) {
        goto LABEL_32;
      }
      unint64_t v9 = *(void *)(v24 + 8 * v4);
      if (!v9)
      {
        int64_t v4 = v8 + 2;
        if (v8 + 2 >= v25) {
          goto LABEL_32;
        }
        unint64_t v9 = *(void *)(v24 + 8 * v4);
        if (!v9)
        {
          int64_t v4 = v8 + 3;
          if (v8 + 3 >= v25) {
            goto LABEL_32;
          }
          unint64_t v9 = *(void *)(v24 + 8 * v4);
          if (!v9) {
            break;
          }
        }
      }
    }

int64_t sub_1001DC658(uint64_t a1, uint64_t *a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = _swiftEmptyArrayStorage;
  if (!v2) {
    return (int64_t)v3;
  }
  uint64_t v4 = a1;
  sub_100032ED0(0, v2, 0);
  unint64_t v3 = _swiftEmptyArrayStorage;
  int64_t result = sub_1006F6728(v4);
  int64_t v6 = result;
  int v8 = v7;
  char v10 = v9 & 1;
  uint64_t v28 = v4;
  uint64_t v29 = v4 + 56;
  while ((v6 & 0x8000000000000000LL) == 0 && v6 < 1LL << *(_BYTE *)(v4 + 32))
  {
    if (*(_DWORD *)(v4 + 36) != v8) {
      goto LABEL_20;
    }
    uint64_t v11 = v3;
    uint64_t v12 = *(void *)(v4 + 48) + 24 * v6;
    unsigned __int8 v13 = *(_BYTE *)v12;
    uint64_t v15 = *(void *)(v12 + 8);
    uint64_t v14 = *(void *)(v12 + 16);
    uint64_t v16 = *a2;
    uint64_t v17 = *(void *)(*a2 + 16);
    swift_bridgeObjectRetain(v14);
    unsigned __int8 v32 = v13;
    char v33 = v10;
    uint64_t v31 = v15;
    if (v17)
    {
      swift_bridgeObjectRetain_n(v14, 2LL);
      unint64_t v18 = sub_10030D3A8(v13, v15, v14);
      if ((v19 & 1) != 0)
      {
        uint64_t v20 = (uint64_t *)(*(void *)(v16 + 56) + 16 * v18);
        uint64_t v22 = *v20;
        unint64_t v21 = v20[1];
        sub_10001736C(*v20, v21);
      }

      else
      {
        uint64_t v22 = 0LL;
        unint64_t v21 = 0xF000000000000000LL;
      }

      unint64_t v3 = v11;
      swift_bridgeObjectRelease_n(v14, 2LL);
    }

    else
    {
      uint64_t v22 = 0LL;
      unint64_t v21 = 0xF000000000000000LL;
      unint64_t v3 = v11;
    }

    unint64_t v24 = v3[2];
    unint64_t v23 = v3[3];
    if (v24 >= v23 >> 1) {
      sub_100032ED0(v23 > 1, v24 + 1, 1);
    }
    v3[2] = v24 + 1;
    int64_t v25 = &v3[5 * v24];
    *((_BYTE *)v25 + 32) = v32;
    v25[5] = v31;
    v25[6] = v14;
    v25[7] = v22;
    v25[8] = v21;
    uint64_t v4 = v28;
    int64_t result = sub_1001FE600(v6, v8, v33 & 1, v28);
    int64_t v6 = result;
    int v8 = v26;
    char v10 = v27 & 1;
    if (!--v2)
    {
      sub_100086B14(result, v26, v27 & 1);
      return (int64_t)v3;
    }
  }

  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

void *sub_1001DC870(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100032EFC(0, v1, 0);
    unint64_t v3 = (void *)(a1 + 184);
    do
    {
      char v4 = *((_BYTE *)v3 - 16);
      uint64_t v6 = *(v3 - 1);
      uint64_t v5 = *v3;
      unint64_t v7 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(*v3);
      if (v7 >= v8 >> 1) {
        sub_100032EFC(v8 > 1, v7 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v7 + 1;
      char v9 = &_swiftEmptyArrayStorage[3 * v7];
      *((_BYTE *)v9 + 32) = v4;
      v9[5] = v6;
      v9[6] = v5;
      v3 += 20;
      --v1;
    }

    while (v1);
  }

  return _swiftEmptyArrayStorage;
}

void sub_1001DC95C(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v7 = 0LL;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v7 << 6);
      goto LABEL_5;
    }

    int64_t v11 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v11 >= v6) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v11);
    ++v7;
    if (!v12)
    {
      int64_t v7 = v11 + 1;
      if (v11 + 1 >= v6) {
        goto LABEL_23;
      }
      unint64_t v12 = *(void *)(v2 + 8 * v7);
      if (!v12)
      {
        int64_t v7 = v11 + 2;
        if (v11 + 2 >= v6) {
          goto LABEL_23;
        }
        unint64_t v12 = *(void *)(v2 + 8 * v7);
        if (!v12)
        {
          int64_t v7 = v11 + 3;
          if (v11 + 3 >= v6) {
            goto LABEL_23;
          }
          unint64_t v12 = *(void *)(v2 + 8 * v7);
          if (!v12) {
            break;
          }
        }
      }
    }

uint64_t sub_1001DCAC8@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v32 = a3;
  uint64_t v9 = type metadata accessor for CodingUserInfoKey(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(_BYTE *)a5 = a1;
  *(void *)(a5 + 8) = a2;
  uint64_t v13 = sub_100004AEC(&qword_1009A3B40);
  uint64_t v14 = a5 + *(int *)(v13 + 40);
  UUID.init()(v13);
  uint64_t v15 = type metadata accessor for PropertyListEncoder(0LL);
  uint64_t v16 = swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  PropertyListEncoder.init()(v16);
  if (qword_10099BA20 != -1) {
    swift_once(&qword_10099BA20, sub_100792B54);
  }
  uint64_t v17 = sub_10000A720(v9, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v17, v9);
  v34[3] = &type metadata for Bool;
  LOBYTE(v34[0]) = 1;
  unint64_t v18 = (void (*)(_BYTE *, void))dispatch thunk of PropertyListEncoder.userInfo.modify(v33);
  sub_100044E08((uint64_t)v34, (uint64_t)v12);
  v18(v33, 0LL);
  uint64_t v19 = sub_100004AEC(&qword_1009AF520);
  uint64_t v20 = swift_allocObject(v19, 48LL, 7LL);
  *(_OWORD *)(v20 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(v20 + 32) = v32;
  *(void *)(v20 + 4sub_100032838(0, 7LL, 0) = a4;
  v34[0] = v20;
  swift_bridgeObjectRetain(a4);
  uint64_t v21 = sub_100004AEC(&qword_1009AED50);
  unint64_t v22 = sub_1001DAAA0();
  uint64_t v23 = v34[5];
  uint64_t v24 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v34, v21, v22);
  if (v23)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v26 = type metadata accessor for UUID(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8LL))(v14, v26);
  }

  else
  {
    uint64_t v28 = v24;
    uint64_t v29 = v25;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    int v30 = (uint64_t *)(a5 + *(int *)(v13 + 44));
    *int v30 = v28;
    v30[1] = v29;
  }

  return result;
}

uint64_t sub_1001DCD04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CodingUserInfoKey(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v31[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  *a3 = a1;
  uint64_t v10 = sub_100004AEC(&qword_1009A4978);
  uint64_t v11 = (char *)a3 + *(int *)(v10 + 40);
  UUID.init()(v10);
  uint64_t v12 = type metadata accessor for PropertyListEncoder(0LL);
  uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  PropertyListEncoder.init()(v13);
  if (qword_10099BA20 != -1) {
    swift_once(&qword_10099BA20, sub_100792B54);
  }
  uint64_t v14 = sub_10000A720(v6, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v9, v14, v6);
  void v32[3] = &type metadata for Bool;
  LOBYTE(v32[0]) = 1;
  uint64_t v15 = (void (*)(_BYTE *, void))dispatch thunk of PropertyListEncoder.userInfo.modify(v31);
  sub_100044E08((uint64_t)v32, (uint64_t)v9);
  v15(v31, 0LL);
  uint64_t v16 = sub_100004AEC(&qword_1009A6210);
  uint64_t v17 = swift_allocObject(v16, 88LL, 7LL);
  __int128 v18 = *(_OWORD *)a2;
  __int128 v19 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(_OWORD *)(v17 + 32) = v18;
  __int128 v20 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v17 + 48) = v19;
  *(_OWORD *)(v17 + 64) = v20;
  *(void *)(v17 + 8sub_100032838(0, 7LL, 0) = *(void *)(a2 + 48);
  v32[0] = v17;
  sub_10020F818((uint64_t *)a2);
  uint64_t v21 = sub_100004AEC(&qword_1009A1EC8);
  uint64_t v22 = sub_10020F8E4((unint64_t *)&qword_1009A1ED0, &qword_1009A1EC8, (void (*)(void))sub_10012AB78);
  uint64_t v23 = v32[5];
  uint64_t v24 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v32, v21, v22);
  if (v23)
  {
    swift_release();
    sub_10020F948(a2);
    swift_bridgeObjectRelease();
    uint64_t v26 = type metadata accessor for UUID(0LL);
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8LL))(v11, v26);
  }

  else
  {
    uint64_t v28 = v24;
    uint64_t v29 = v25;
    swift_release();
    sub_10020F948(a2);
    uint64_t result = swift_bridgeObjectRelease();
    int v30 = (void *)((char *)a3 + *(int *)(v10 + 44));
    *int v30 = v28;
    v30[1] = v29;
  }

  return result;
}

uint64_t sub_1001DCF58()
{
  v17[0] = 0LL;
  v17[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(65LL);
  v1._object = (void *)0x8000000100851AD0LL;
  v1._countAndFlagsBits = 0xD000000000000015LL;
  String.append(_:)(v1);
  LOBYTE(vswift_weakDestroy(v0 + 16) = *(_BYTE *)v0;
  _print_unlocked<A, B>(_:_:)( &v16,  v17,  &type metadata for InternalSessionMessageType,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v2._countAndFlagsBits = 0x6F6973726576202CLL;
  v2._object = (void *)0xEB00000000203A6ELL;
  String.append(_:)(v2);
  uint64_t v16 = *(void *)(v0 + 8);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x69746E656469202CLL;
  v4._object = (void *)0xEE00203A72656966LL;
  String.append(_:)(v4);
  uint64_t v5 = sub_100004AEC(&qword_1009A3B40);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v6, v7);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x64616F6C79617020LL;
  v9._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v9);
  uint64_t v10 = (uint64_t *)(v0 + *(int *)(v5 + 44));
  uint64_t v11 = *v10;
  unint64_t v12 = v10[1];
  sub_10001736C(*v10, v12);
  v13._countAndFlagsBits = Data.description.getter(v11, v12);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  sub_100016F9C(v11, v12);
  v14._countAndFlagsBits = 41LL;
  v14._object = (void *)0xE100000000000000LL;
  String.append(_:)(v14);
  return v17[0];
}

uint64_t sub_1001DD144()
{
  v17[0] = 0LL;
  v17[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(65LL);
  v1._object = (void *)0x8000000100851AD0LL;
  v1._countAndFlagsBits = 0xD000000000000015LL;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)( v2,  v17,  &type metadata for BeaconSharingSessionMessageType,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v3._countAndFlagsBits = 0x6F6973726576202CLL;
  v3._object = (void *)0xEB00000000203A6ELL;
  String.append(_:)(v3);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x69746E656469202CLL;
  v5._object = (void *)0xEE00203A72656966LL;
  String.append(_:)(v5);
  uint64_t v6 = sub_100004AEC(&qword_1009A4978);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v8);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x64616F6C79617020LL;
  v10._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v10);
  uint64_t v11 = (uint64_t *)(v0 + *(int *)(v6 + 44));
  uint64_t v12 = *v11;
  unint64_t v13 = v11[1];
  sub_10001736C(*v11, v13);
  v14._countAndFlagsBits = Data.description.getter(v12, v13);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  sub_100016F9C(v12, v13);
  v15._countAndFlagsBits = 41LL;
  v15._object = (void *)0xE100000000000000LL;
  String.append(_:)(v15);
  return v17[0];
}

uint64_t sub_1001DD324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v135 = a2;
  uint64_t v136 = a3;
  uint64_t v4 = type metadata accessor for ShareRecord(0LL);
  uint64_t v125 = *(void *)(v4 - 8);
  uint64_t v5 = *(void *)(v125 + 64);
  __chkstk_darwin(v4);
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v132 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v130 = (char *)&v114 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v133 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v131 = *(void *)(v133 - 8);
  __chkstk_darwin(v133);
  uint64_t v129 = (char *)&v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v128 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v127 = *(void *)(v128 - 8);
  __chkstk_darwin(v128);
  uint64_t v126 = (char *)&v114 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for UUID(0LL);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v114 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = a1;
  uint64_t v18 = a1 + *(int *)(v4 + 24);
  (*(void (**)(char *, uint64_t))(v19 + 16))(v16, v18);
  sub_1001F2DC0(1, 1LL, (uint64_t)v16, (uint64_t)&aBlock);
  uint64_t v118 = v11;
  uint64_t v123 = v13;
  uint64_t v124 = v10;
  uint64_t v122 = v4;
  uint64_t v116 = (uint64_t)&v114 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v117 = v6;
  int v115 = aBlock;
  int v114 = (char *)v140;
  uint64_t v120 = v141;
  unint64_t v121 = (unint64_t)v142;
  sub_100504C28(v18, (uint64_t)&v137);
  if (v138)
  {
    sub_100012EC0(&v137, (uint64_t)&aBlock);
    __int128 v20 = v142;
    uint64_t v21 = v143;
    sub_100012ED8(&aBlock, (uint64_t)v142);
    else {
      uint64_t v22 = &off_1009337B8;
    }
    uint64_t v119 = (void *)sub_10076832C((uint64_t)v22);
    uint64_t v23 = (void *)_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
  }

  else
  {
    sub_100015794((uint64_t)&v137, (uint64_t *)&unk_1009A9C40);
    uint64_t v23 = (void *)sub_10076832C((uint64_t)&off_1009337E0);
    uint64_t v119 = v23;
  }

  uint64_t v24 = v17;
  uint64_t v25 = v122;
  uint64_t v26 = (uint64_t)v123;
  uint64_t v27 = v118;
  uint64_t v28 = *(void *)(v134 + 344);
  __chkstk_darwin(v23);
  uint64_t v111 = v28;
  LOBYTE(v112) = 0;
  uint64_t v122 = v29;
  uint64_t v113 = v29;
  uint64_t v30 = v124;
  OS_dispatch_queue.sync<A>(execute:)(sub_1001FF244, &v110, v124);
  sub_1006C11DC(v26, 0);
  char v32 = v31;
  char v33 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8);
  uint64_t v34 = v33(v26, v30);
  uint64_t v35 = v5;
  if ((v32 & 1) != 0)
  {
    sub_1006C11DC(v24 + *(int *)(v25 + 28), 1);
    uint64_t v37 = v124;
    uint64_t v38 = (uint64_t)v123;
    if ((v36 & 1) == 0)
    {
      uint64_t v39 = swift_bridgeObjectRelease();
      uint64_t v40 = static os_log_type_t.default.getter(v39);
      if (qword_10099B700 != -1) {
        swift_once(&qword_10099B700, sub_100651100);
      }
      uint64_t v41 = qword_100A2B010;
      uint64_t v42 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v43 = swift_allocObject(v42, 72LL, 7LL);
      *(_OWORD *)(v43 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v44 = UUID.uuidString.getter(v43);
      uint64_t v46 = v45;
      *(void *)(v43 + 56) = &type metadata for String;
      *(void *)(v43 + 64) = sub_1000226F4();
      *(void *)(v43 + 32) = v44;
      *(void *)(v43 + 4sub_100032838(0, 7LL, 0) = v46;
      os_log(_:dso:log:_:_:)( v40,  &_mh_execute_header,  v41,  "Ignoring request to unshare. ShareRecord was created recently (by another device?). (shareIdentifier: %@)",  105LL,  2LL,  v43);
      swift_bridgeObjectRelease();
      sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
      uint64_t v47 = v127;
      uint64_t v48 = v126;
      uint64_t v49 = v128;
      (*(void (**)(char *, void, uint64_t))(v127 + 104))( v126,  enum case for DispatchQoS.QoSClass.default(_:),  v128);
      uint64_t v50 = (void *)static OS_dispatch_queue.global(qos:)(v48);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v49);
      uint64_t v51 = swift_allocObject(&unk_1009486D0, 32LL, 7LL);
      uint64_t v52 = v136;
      *(void *)(v51 + swift_weakDestroy(v0 + 16) = v135;
      *(void *)(v51 + 24) = v52;
      uint64_t v143 = sub_10020FF70;
      uint64_t v144 = v51;
      uint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v140 = 1107296256LL;
      uint64_t v141 = sub_1001C31E8;
      uint64_t v142 = &unk_1009486E8;
      char v53 = _Block_copy(&aBlock);
      uint64_t v54 = swift_retain();
      int v55 = v129;
      static DispatchQoS.unspecified.getter(v54);
      *(void *)&__int128 v137 = _swiftEmptyArrayStorage;
      uint64_t v56 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v57 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v58 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v59 = v130;
      uint64_t v60 = v57;
      uint64_t v61 = v117;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v137, v60, v58, v117, v56);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v55, v59, v53);
      _Block_release(v53);

      sub_100016F9C((uint64_t)v120, v121);
      goto LABEL_20;
    }
  }

  else
  {
    uint64_t v118 = 0LL;
    uint64_t v62 = static os_log_type_t.default.getter(v34);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v63 = qword_100A2B010;
    uint64_t v64 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v65 = swift_allocObject(v64, 72LL, 7LL);
    *(_OWORD *)(v65 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v66 = UUID.uuidString.getter(v65);
    uint64_t v68 = v67;
    *(void *)(v65 + 56) = &type metadata for String;
    *(void *)(v65 + 64) = sub_1000226F4();
    *(void *)(v65 + 32) = v66;
    *(void *)(v65 + 4sub_100032838(0, 7LL, 0) = v68;
    os_log(_:dso:log:_:_:)( v62,  &_mh_execute_header,  v63,  "Allowing request to unshare. ShareRecord was created by this device. (shareIdentifier: %@)",  90LL,  2LL,  v65);
    uint64_t v36 = swift_bridgeObjectRelease();
    uint64_t v37 = v124;
    uint64_t v38 = (uint64_t)v123;
  }

  uint64_t v124 = v35;
  __chkstk_darwin(v36);
  uint64_t v111 = v28;
  LOBYTE(v112) = 1;
  uint64_t v69 = v122;
  uint64_t v113 = v122;
  OS_dispatch_queue.sync<A>(execute:)(sub_10020FF50, &v110, v37);
  sub_1006C11DC(v38, 1);
  char v71 = v70;
  v33(v38, v37);
  if ((v71 & 1) != 0)
  {
    static Date.trustedNow.getter(v38);
    sub_1006C0AD4(v69, v38, 1);
    v33(v38, v37);
    uint64_t v72 = (unsigned __int8 *)(v24 + *(int *)(v25 + 36));
    uint64_t v73 = *((void *)v72 + 1);
    uint64_t v74 = (void (*)(void, void, void))*((void *)v72 + 2);
    uint64_t v75 = *(char **)(v28 + 16);
    int v76 = *v72;
    uint64_t v77 = v24;
    uint64_t v78 = v116;
    sub_10001DC4C(v77, v116, type metadata accessor for ShareRecord);
    uint64_t v79 = *(unsigned __int8 *)(v125 + 80);
    uint64_t v80 = (v79 + 24) & ~v79;
    unint64_t v81 = (v124 + v80 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v82 = swift_allocObject(&unk_1009486A8, v81 + 16, v79 | 7);
    *(void *)(v82 + swift_weakDestroy(v0 + 16) = v134;
    sub_10002218C(v78, v82 + v80, type metadata accessor for ShareRecord);
    int v83 = (void *)(v82 + v81);
    uint64_t v84 = v136;
    *int v83 = v135;
    v83[1] = v84;
    swift_retain();
    swift_retain();
    uint64_t v85 = (os_log_s *)sub_1004131A4((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v109 = v75;
    uint64_t v86 = (uint64_t)v120;
    unint64_t v87 = v121;
    sub_1001E74B8( v115,  v114,  (uint64_t)v120,  v121,  v85,  v76,  v73,  v74,  0,  v109,  0,  0,  v119,  (void (*)(uint64_t, uint64_t))&_swiftEmptySetSingleton,  0LL,  0LL,  (void (*)(void ***))sub_1001FF3A8,  (void (*)(void ***))v82);
    sub_100016F9C(v86, v87);
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  uint64_t v89 = swift_bridgeObjectRelease();
  uint64_t v90 = static os_log_type_t.default.getter(v89);
  if (qword_10099B700 != -1) {
    swift_once(&qword_10099B700, sub_100651100);
  }
  uint64_t v91 = qword_100A2B010;
  uint64_t v92 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v93 = swift_allocObject(v92, 72LL, 7LL);
  *(_OWORD *)(v93 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v94 = UUID.uuidString.getter(v93);
  uint64_t v96 = v95;
  *(void *)(v93 + 56) = &type metadata for String;
  *(void *)(v93 + 64) = sub_1000226F4();
  *(void *)(v93 + 32) = v94;
  *(void *)(v93 + 4sub_100032838(0, 7LL, 0) = v96;
  os_log(_:dso:log:_:_:)( v90,  &_mh_execute_header,  v91,  "Ignoring request to unshare. ShareRecord last unshared recently. (shareIdentifier: %@)",  86LL,  2LL,  v93);
  swift_bridgeObjectRelease();
  sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v97 = v127;
  uint64_t v98 = v126;
  uint64_t v99 = v128;
  (*(void (**)(char *, void, uint64_t))(v127 + 104))( v126,  enum case for DispatchQoS.QoSClass.default(_:),  v128);
  int v100 = (void *)static OS_dispatch_queue.global(qos:)(v98);
  (*(void (**)(char *, uint64_t))(v97 + 8))(v98, v99);
  uint64_t v101 = swift_allocObject(&unk_100948658, 32LL, 7LL);
  uint64_t v102 = v136;
  *(void *)(v101 + swift_weakDestroy(v0 + 16) = v135;
  *(void *)(v101 + 24) = v102;
  uint64_t v143 = sub_10020FF70;
  uint64_t v144 = v101;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v140 = 1107296256LL;
  uint64_t v141 = sub_1001C31E8;
  uint64_t v142 = &unk_100948670;
  char v103 = _Block_copy(&aBlock);
  uint64_t v104 = swift_retain();
  int v55 = v129;
  static DispatchQoS.unspecified.getter(v104);
  *(void *)&__int128 v137 = _swiftEmptyArrayStorage;
  uint64_t v105 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v106 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v107 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v59 = v130;
  uint64_t v108 = v106;
  uint64_t v61 = v117;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v137, v108, v107, v117, v105);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v55, v59, v103);
  sub_100016F9C((uint64_t)v120, v121);
  _Block_release(v103);

LABEL_20:
  (*(void (**)(char *, uint64_t))(v132 + 8))(v59, v61);
  (*(void (**)(char *, uint64_t))(v131 + 8))(v55, v133);
  return swift_release();
}

uint64_t sub_1001DE158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v36 = a2;
  uint64_t v5 = (char *)type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v34 = *((void *)v5 - 1);
  uint64_t v35 = v5;
  __chkstk_darwin(v5);
  char v33 = (void *)((char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  void v31[2] = *(void *)(v7 - 8);
  uint64_t v32 = v7;
  __chkstk_darwin(v7);
  v31[1] = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  __chkstk_darwin(v9);
  uint64_t v10 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for UUID(0LL);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v17 + 16))(v16, a1 + *(int *)(v10 + 20));
  sub_1001F2DC0(3, 1LL, (uint64_t)v16, (uint64_t)aBlock);
  uint64_t v18 = aBlock[2];
  unint64_t v19 = aBlock[3];
  int v20 = LOBYTE(aBlock[0]);
  uint64_t v21 = (unsigned __int8 *)(a1 + *(int *)(v10 + 28));
  uint64_t v34 = *((void *)v21 + 1);
  uint64_t v35 = (char *)aBlock[1];
  char v33 = (void *)*((void *)v21 + 2);
  LODWORD(v32) = *v21;
  sub_10001DC4C(a1, (uint64_t)v13, type metadata accessor for SharedBeaconRecord);
  uint64_t v22 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v23 = (v22 + 24) & ~v22;
  unint64_t v24 = (v12 + v23 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v25 = swift_allocObject(&unk_100948C48, v24 + 16, v22 | 7);
  *(void *)(v25 + swift_weakDestroy(v0 + 16) = v31[0];
  sub_10002218C((uint64_t)v13, v25 + v23, type metadata accessor for SharedBeaconRecord);
  uint64_t v26 = (void *)(v25 + v24);
  *uint64_t v26 = v36;
  v26[1] = a3;
  swift_retain();
  swift_retain();
  uint64_t v27 = (os_log_s *)sub_1004131A4((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v28 = (void *)sub_1006F13B0((uint64_t)&off_100933808);
  uint64_t v29 = (void (*)(uint64_t, uint64_t))sub_1006F13B0((uint64_t)_swiftEmptyArrayStorage);
  sub_1001E74B8( v20,  v35,  v18,  v19,  v27,  v32,  v34,  (void (*)(void, void, void))v33,  0,  0LL,  1,  0,  v28,  v29,  0LL,  0LL,  (void (*)(void ***))sub_10020AF38,  (void (*)(void ***))v25);
  sub_100016F9C(v18, v19);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001DE6D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t))
{
  return a9(a1, a2, a3, a4, a5, *(unsigned __int8 *)a6, a6[1], a6[2], a6[3], a7, a8);
}

uint64_t sub_1001DE71C()
{
  Swift::String v1 = v0;
  uint64_t v2 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v2);
  uint64_t v4 = &v25[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  id v5 = [objc_allocWithZone(IDSServiceDelegateProperties) init];
  [v5 setWantsCrossAccountMessaging:1];
  uint64_t v6 = (objc_class *)type metadata accessor for MessagingServiceDelegateTrampoline();
  uint64_t v7 = (char *)objc_allocWithZone(v6);
  uint64_t v8 = &v7[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate];
  *((void *)v8 + 1) = 0LL;
  uint64_t v9 = swift_unknownObjectWeakInit(v8, 0LL);
  *(void *)(v9 + 8) = &off_100972868;
  swift_unknownObjectWeakAssign(v9, v1);
  v26.receiver = v7;
  v26.super_class = v6;
  id v10 = objc_msgSendSuper2(&v26, "init");
  uint64_t v11 = (void *)v1[5];
  v1[5] = v10;

  uint64_t v12 = (void *)v1[8];
  [v12 addDelegate:v1[5] withDelegateProperties:v5 queue:v1[6]];
  id v13 = [v12 devices];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = sub_100022898(0LL, &qword_1009A6000, &OBJC_CLASS___IDSDevice_ptr);
    uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);

    __chkstk_darwin(v17);
    *(void *)&v25[-16] = v1;
    *(void *)&v25[-8] = v16;
    uint64_t v18 = sub_100004AEC(&qword_1009AE4D0);
    OS_dispatch_queue.sync<A>(execute:)(sub_10020EDE0, &v25[-32], v18);
    swift_bridgeObjectRelease();
  }

  uint64_t v19 = type metadata accessor for StateCapture(0LL);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  swift_retain();
  v1[17] = StateCapture.init(_:)(&unk_1009A61A0, v1);
  swift_release();
  uint64_t v20 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v4, 1LL, 1LL, v20);
  uint64_t v21 = swift_allocObject(&unk_100949DA0, 24LL, 7LL);
  swift_weakInit(v21 + 16, v1);
  uint64_t v22 = (void *)swift_allocObject(&unk_100949DC8, 40LL, 7LL);
  v22[2] = 0LL;
  v22[3] = 0LL;
  v22[4] = v21;
  uint64_t v23 = sub_10000BB68((uint64_t)v4, (uint64_t)&unk_1009A61B0, (uint64_t)v22);

  sub_100015794((uint64_t)v4, &qword_1009A9BF0);
  v1[16] = v23;
  return swift_release();
}

void sub_1001DE9B8( unsigned __int8 a1@<W0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void (*a5)(_BYTE *, uint64_t)@<X4>, uint64_t a6@<X5>, unsigned int (*a7)(void, void, void)@<X6>, char *a8@<X7>, uint64_t a9@<X8>, char a10, char a11, uint64_t a12, uint64_t a13, __int128 a14)
{
  v224 = a8;
  uint64_t v226 = a7;
  v231 = a5;
  uint64_t v218 = a9;
  os_log_t v227 = *v14;
  uint64_t v20 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v220 = &v210[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v21);
  uint64_t v225 = &v210[-v23];
  uint64_t v232 = type metadata accessor for UUID(0LL);
  unint64_t v229 = *(void **)(v232 - 8);
  uint64_t v24 = __chkstk_darwin(v232);
  v219 = &v210[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v26 = __chkstk_darwin(v24);
  v221 = &v210[-v27];
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v222 = &v210[-v29];
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v32 = &v210[-v31];
  uint64_t v33 = __chkstk_darwin(v30);
  uint64_t v35 = &v210[-v34];
  __chkstk_darwin(v33);
  uint64_t v37 = &v210[-v36];
  v236[0] = a1;
  uint64_t v237 = a2;
  uint64_t v238 = a3;
  unint64_t v239 = a4;
  int64_t v38 = *(void *)(a6 + 16);
  uint64_t v39 = (os_log_s *)_swiftEmptyArrayStorage;
  if (v38)
  {
    uint64_t v230 = v35;
    uint64_t v40 = v32;
    uint64_t v41 = &v210[-v36];
    os_log_t v234 = (os_log_t)_swiftEmptyArrayStorage;
    sub_100032800(0, v38, 0);
    uint64_t v39 = v234;
    uint64_t v42 = (uint64_t *)(a6 + 48);
    do
    {
      uint64_t v44 = *(v42 - 1);
      uint64_t v43 = *v42;
      os_log_t v234 = v39;
      unint64_t v46 = *((void *)v39 + 2);
      unint64_t v45 = *((void *)v39 + 3);
      swift_bridgeObjectRetain(v43);
      if (v46 >= v45 >> 1)
      {
        sub_100032800(v45 > 1, v46 + 1, 1);
        uint64_t v39 = v234;
      }

      *((void *)v39 + 2) = v46 + 1;
      uint64_t v47 = (void *)((char *)v39 + 16 * v46);
      v47[4] = v44;
      void v47[5] = v43;
      v42 += 3;
      --v38;
    }

    while (v38);
    uint64_t v37 = v41;
    uint64_t v32 = v40;
    uint64_t v35 = v230;
  }

  uint64_t v48 = sub_1006F0FB0((uint64_t)v39);
  swift_bridgeObjectRelease();
  uint64_t v49 = type metadata accessor for PropertyListEncoder(0LL);
  uint64_t v50 = swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
  PropertyListEncoder.init()(v50);
  uint64_t v51 = sub_100004AEC(&qword_1009A5F58);
  uint64_t v52 = sub_1000372EC(&qword_1009A5F60, &qword_1009A5F58, (uint64_t)&protocol conformance descriptor for Message<A>);
  unint64_t v53 = v233;
  uint64_t v54 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v236, v51, v52);
  if (v53)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return;
  }

  uint64_t v217 = v54;
  v215 = v32;
  uint64_t v216 = v37;
  uint64_t v223 = v48;
  unint64_t v233 = v55;
  uint64_t v214 = 0LL;
  swift_release();
  unint64_t v56 = 0x6567617373656DLL;
  if ((a11 & 1) != 0) {
    unint64_t v56 = 0xD000000000000017LL;
  }
  unint64_t v213 = v56;
  if ((a11 & 1) != 0) {
    unint64_t v57 = 0x80000001008591F0LL;
  }
  else {
    unint64_t v57 = 0xE700000000000000LL;
  }
  uint64_t v58 = v226;
  v224 = sub_1001FF3F8((uint64_t)v231, 0, (uint64_t)v226, (uint64_t)v224, a10 & 1, a11 & 1, a12, a13, a14);
  uint64_t v59 = v225;
  sub_10001581C((uint64_t)v58, (uint64_t)v225, &qword_10099D8A0);
  uint64_t v60 = v229;
  uint64_t v61 = (unsigned int (*)(_BYTE *, uint64_t, uint64_t))v229[6];
  uint64_t v62 = v232;
  unsigned int v63 = v61(v59, 1LL, v232);
  uint64_t v64 = &off_10099B000;
  uint64_t v226 = (unsigned int (*)(void, void, void))v61;
  if (v63 == 1)
  {
    sub_100015794((uint64_t)v59, &qword_10099D8A0);
    if (qword_10099B810 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    uint64_t v65 = type metadata accessor for Logger(0LL);
    sub_10000A720(v65, (uint64_t)qword_100A2B188);
    LODWORD(v23sub_100032838(0, 7LL, 0) = v236[0];
    uint64_t v66 = v238;
    uint64_t v225 = v237;
    unint64_t v67 = v239;
    uint64_t v68 = v222;
    ((void (*)(_BYTE *, void (*)(_BYTE *, uint64_t), uint64_t))v60[2])(v222, v231, v62);
    uint64_t v69 = v223;
    swift_bridgeObjectRetain(v223);
    sub_10001736C(v66, v67);
    swift_bridgeObjectRetain(v69);
    unint64_t v70 = v57;
    swift_bridgeObjectRetain(v57);
    uint64_t v71 = sub_10001736C(v66, v67);
    uint64_t v72 = (os_log_s *)Logger.logObject.getter(v71);
    os_log_type_t v73 = static os_log_type_t.default.getter(v72);
    int v74 = v73;
    if (os_log_type_enabled(v72, v73))
    {
      uint64_t v75 = swift_slowAlloc(52LL, -1LL);
      int v76 = (_BYTE *)swift_slowAlloc(160LL, -1LL);
      uint64_t v216 = v76;
      *(_DWORD *)uint64_t v75 = 136316162;
      LODWORD(v215) = v74;
      os_log_t v234 = v227;
      id v235 = v76;
      uint64_t v77 = sub_100004AEC(&qword_1009A5F78);
      uint64_t v78 = String.init<A>(describing:)(&v234, v77);
      os_log_t v234 = (os_log_t)sub_1003F11D4(v78, v79, (uint64_t *)&v235);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v75 + 4, v75 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v75 + 12) = 2080;
      swift_bridgeObjectRetain(v70);
      os_log_t v234 = (os_log_t)sub_1003F11D4(v213, v70, (uint64_t *)&v235);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v75 + 14, v75 + 22);
      swift_bridgeObjectRelease_n(v70, 3LL);
      *(_WORD *)(v75 + 22) = 2080;
      sub_1001FC304((char)v230, (uint64_t)v225, v66, v67);
      uint64_t v81 = v80;
      unint64_t v83 = v82;
      sub_100016F9C(v66, v67);
      os_log_t v234 = (os_log_t)sub_1003F11D4(v81, v83, (uint64_t *)&v235);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v75 + 24, v75 + 32);
      swift_bridgeObjectRelease();
      sub_100016F9C(v66, v67);
      *(_WORD *)(v75 + 32) = 2080;
      swift_bridgeObjectRetain(v69);
      uint64_t v85 = Set.description.getter(v84, &type metadata for String, &protocol witness table for String);
      unint64_t v87 = v86;
      swift_bridgeObjectRelease();
      os_log_t v234 = (os_log_t)sub_1003F11D4(v85, v87, (uint64_t *)&v235);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v75 + 34, v75 + 42);
      swift_bridgeObjectRelease_n(v69, 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v75 + 42) = 2080;
      uint64_t v88 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v89 = v222;
      uint64_t v90 = dispatch thunk of CustomStringConvertible.description.getter(v232, v88);
      os_log_t v234 = (os_log_t)sub_1003F11D4(v90, v91, (uint64_t *)&v235);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v75 + 44, v75 + 52);
      swift_bridgeObjectRelease();
      v231 = (void (*)(_BYTE *, uint64_t))v229[1];
      v231(v89, v232);
      _os_log_impl( (void *)&_mh_execute_header,  v72,  (os_log_type_t)v215,  "%s: Sending %s: %s to %s with identifier: %s",  (uint8_t *)v75,  0x34u);
      uint64_t v92 = v216;
      swift_arrayDestroy(v216, 5LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v92, -1LL, -1LL);
      swift_slowDealloc(v75, -1LL, -1LL);
    }

    else
    {
      sub_100016F9C(v66, v67);
      swift_bridgeObjectRelease_n(v70, 2LL);
      sub_100016F9C(v66, v67);
      swift_bridgeObjectRelease_n(v69, 2LL);
      v231 = (void (*)(_BYTE *, uint64_t))v60[1];
      v231(v68, v62);
    }

    uint64_t v64 = &off_10099B000;
  }

  else
  {
    uint64_t v222 = (_BYTE *)v57;
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v60[4])(v216, v59, v62);
    if (qword_10099B810 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    uint64_t v93 = type metadata accessor for Logger(0LL);
    sub_10000A720(v93, (uint64_t)qword_100A2B188);
    LODWORD(v225) = v236[0];
    uint64_t v94 = v238;
    uint64_t v212 = v237;
    unint64_t v95 = v239;
    uint64_t v96 = (void (*)(_BYTE *, void (*)(_BYTE *, uint64_t), uint64_t))v60[2];
    v96(v35, (void (*)(_BYTE *, uint64_t))v216, v62);
    v96(v215, v231, v62);
    sub_10001736C(v94, v95);
    uint64_t v230 = v35;
    uint64_t v97 = v223;
    swift_bridgeObjectRetain(v223);
    sub_10001736C(v94, v95);
    swift_bridgeObjectRetain(v97);
    unint64_t v98 = (unint64_t)v222;
    swift_bridgeObjectRetain(v222);
    int v100 = v60;
    uint64_t v101 = (os_log_s *)Logger.logObject.getter(v99);
    os_log_type_t v102 = static os_log_type_t.default.getter(v101);
    int v103 = v102;
    if (os_log_type_enabled(v101, v102))
    {
      uint64_t v104 = swift_slowAlloc(62LL, -1LL);
      uint64_t v105 = (void (*)(_BYTE *, uint64_t))swift_slowAlloc(192LL, -1LL);
      v231 = v105;
      *(_DWORD *)uint64_t v104 = 136316418;
      int v211 = v103;
      os_log_t v234 = v227;
      id v235 = v105;
      uint64_t v106 = sub_100004AEC(&qword_1009A5F78);
      uint64_t v107 = String.init<A>(describing:)(&v234, v106);
      os_log_t v234 = (os_log_t)sub_1003F11D4(v107, v108, (uint64_t *)&v235);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v104 + 4, v104 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v104 + 12) = 2080;
      swift_bridgeObjectRetain(v98);
      os_log_t v234 = (os_log_t)sub_1003F11D4(v213, v98, (uint64_t *)&v235);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v104 + 14, v104 + 22);
      swift_bridgeObjectRelease_n(v98, 3LL);
      *(_WORD *)(v104 + 22) = 2080;
      sub_1001FC304((char)v225, (uint64_t)v212, v94, v95);
      uint64_t v110 = v109;
      unint64_t v112 = v111;
      sub_100016F9C(v94, v95);
      os_log_t v234 = (os_log_t)sub_1003F11D4(v110, v112, (uint64_t *)&v235);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v104 + 24, v104 + 32);
      swift_bridgeObjectRelease();
      sub_100016F9C(v94, v95);
      *(_WORD *)(v104 + 32) = 2080;
      uint64_t v113 = v223;
      swift_bridgeObjectRetain(v223);
      uint64_t v115 = Set.description.getter(v114, &type metadata for String, &protocol witness table for String);
      unint64_t v117 = v116;
      swift_bridgeObjectRelease();
      os_log_t v234 = (os_log_t)sub_1003F11D4(v115, v117, (uint64_t *)&v235);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v104 + 34, v104 + 42);
      swift_bridgeObjectRelease_n(v113, 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v104 + 42) = 2080;
      uint64_t v118 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v119 = v230;
      uint64_t v120 = v232;
      uint64_t v121 = dispatch thunk of CustomStringConvertible.description.getter(v232, v118);
      os_log_t v234 = (os_log_t)sub_1003F11D4(v121, v122, (uint64_t *)&v235);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v104 + 44, v104 + 52);
      swift_bridgeObjectRelease();
      uint64_t v123 = (void (*)(_BYTE *, uint64_t))v229[1];
      v123(v119, v120);
      *(_WORD *)(v104 + 52) = 2080;
      uint64_t v124 = v215;
      uint64_t v125 = dispatch thunk of CustomStringConvertible.description.getter(v120, v118);
      os_log_t v234 = (os_log_t)sub_1003F11D4(v125, v126, (uint64_t *)&v235);
      uint64_t v64 = &off_10099B000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v104 + 54, v104 + 62);
      swift_bridgeObjectRelease();
      v123(v124, v120);
      _os_log_impl( (void *)&_mh_execute_header,  v101,  (os_log_type_t)v211,  "%s: Sending %s: %s to %s\nin response to %s with identifier: %s",  (uint8_t *)v104,  0x3Eu);
      uint64_t v127 = (void (*)(void, void))v231;
      swift_arrayDestroy(v231, 6LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v127, -1LL, -1LL);
      swift_slowDealloc(v104, -1LL, -1LL);

      v231 = v123;
      v123(v216, v120);
    }

    else
    {
      sub_100016F9C(v94, v95);

      uint64_t v128 = (void (*)(_BYTE *, uint64_t))v100[1];
      v128(v215, v62);
      v128(v230, v62);
      swift_bridgeObjectRelease_n(v223, 2LL);
      sub_100016F9C(v94, v95);
      swift_bridgeObjectRelease_n(v98, 2LL);
      v231 = v128;
      v128(v216, v62);
    }
  }

  uint64_t v129 = v224;
  if (v64[258] != (_UNKNOWN *)-1LL) {
    swift_once(&qword_10099B810, sub_10069374C);
  }
  uint64_t v130 = type metadata accessor for Logger(0LL);
  uint64_t v131 = sub_10000A720(v130, (uint64_t)qword_100A2B188);
  uint64_t v132 = swift_bridgeObjectRetain_n(v129, 2LL);
  uint64_t v230 = (_BYTE *)v131;
  uint64_t v133 = (os_log_s *)Logger.logObject.getter(v132);
  os_log_type_t v134 = static os_log_type_t.default.getter(v133);
  if (os_log_type_enabled(v133, v134))
  {
    uint64_t v135 = swift_slowAlloc(22LL, -1LL);
    uint64_t v136 = (_BYTE *)swift_slowAlloc(64LL, -1LL);
    uint64_t v225 = v136;
    *(_DWORD *)uint64_t v135 = 136315394;
    os_log_t v234 = v227;
    id v235 = v136;
    uint64_t v137 = sub_100004AEC(&qword_1009A5F78);
    uint64_t v138 = String.init<A>(describing:)(&v234, v137);
    os_log_t v234 = (os_log_t)sub_1003F11D4(v138, v139, (uint64_t *)&v235);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v135 + 4, v135 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v135 + 12) = 2080;
    swift_bridgeObjectRetain(v129);
    uint64_t v140 = Dictionary.description.getter( v129,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    unint64_t v142 = v141;
    swift_bridgeObjectRelease();
    os_log_t v234 = (os_log_t)sub_1003F11D4(v140, v142, (uint64_t *)&v235);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v135 + 14, v135 + 22);
    uint64_t v143 = (uint64_t)v129;
    swift_bridgeObjectRelease_n(v129, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v133, v134, "%s: IDSSendMessageOptions: %s", (uint8_t *)v135, 0x16u);
    uint64_t v144 = v225;
    swift_arrayDestroy(v225, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v144, -1LL, -1LL);
    swift_slowDealloc(v135, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v129, 2LL);
    uint64_t v143 = (uint64_t)v129;
  }

  uint64_t v145 = v228;
  uint64_t v146 = type metadata accessor for AnalyticsEvent(0LL);
  v147 = (char *)swift_allocObject(v146, *(unsigned int *)(v146 + 48), *(unsigned __int16 *)(v146 + 52));
  swift_defaultActor_initialize(v147);
  unint64_t v148 = sub_10041271C((uint64_t)_swiftEmptyArrayStorage);
  *((void *)v147 + 14) = v148;
  UUID.init()(v148);
  unint64_t v149 = &v147[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v150 = type metadata accessor for DispatchTime(0LL);
  uint64_t v151 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v150 - 8) + 56LL);
  v151(v149, 1LL, 1LL, v150);
  v151(&v147[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1LL, 1LL, v150);
  *((void *)v147 + 15) = 0xD000000000000026LL;
  *((void *)v147 + swift_weakDestroy(v0 + 16) = 0x80000001008591A0LL;
  type metadata accessor for Transaction(0LL);
  unsigned __int8 v152 = v236[0];
  uint64_t v154 = v237;
  uint64_t v153 = v238;
  unint64_t v155 = v239;
  uint64_t v156 = swift_allocObject(&unk_100948A40, 56LL, 7LL);
  *(void *)(v156 + swift_weakDestroy(v0 + 16) = v147;
  *(_BYTE *)(v156 + 24) = v152;
  *(void *)(v156 + 32) = v154;
  *(void *)(v156 + 4sub_100032838(0, 7LL, 0) = v153;
  *(void *)(v156 + 48) = v155;
  sub_10001736C(v153, v155);
  swift_retain();
  static Transaction.asyncTask(name:block:)("MessagingServiceAnalyticsEvent", 30LL, 2LL, &unk_1009A5FC0, v156);
  swift_release();
  uint64_t v157 = *(void **)(v145 + 64);
  uint64_t v158 = v217;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1001FBE34(v223);
  swift_bridgeObjectRelease();
  Class v160 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10028B660(v143);
  swift_bridgeObjectRelease();
  Class v161 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  os_log_t v234 = 0LL;
  id v235 = 0LL;
  LODWORD(v153) = [v157 sendData:isa toDestinations:v160 priority:300 options:v161 identifier:&v234 error:&v235];

  os_log_t v162 = v234;
  id v163 = v235;
  os_log_type_t v164 = v162;
  if (!(_DWORD)v153)
  {
    _convertNSErrorToError(_:)(v163);

    swift_willThrow(v179);
    swift_release();
    uint64_t v177 = v158;
    unint64_t v178 = v233;
    goto LABEL_37;
  }

  v165 = *(os_unfair_lock_s **)(v228 + 120);
  uint64_t v166 = (uint64_t)&v165[4];
  uint64_t v167 = v165 + 16;
  os_unfair_lock_lock(v165 + 16);
  unint64_t v168 = v233;
  uint64_t v169 = v214;
  sub_1001FE8B8(v166, (uint64_t)v236, v158, v233);
  if (v169)
  {
    os_unfair_lock_unlock(v167);
    __break(1u);
  }

  else
  {
    os_unfair_lock_unlock(v167);
    if (v164)
    {
      uint64_t v214 = 0LL;
      uint64_t v170 = static String._unconditionallyBridgeFromObjectiveC(_:)(v162);
      uint64_t v171 = (uint64_t)v220;
      UUID.init(uuidString:)(v170, v172);
      swift_bridgeObjectRelease();
      uint64_t v173 = v232;
      if (v226(v171, 1LL, v232) != 1)
      {
        uint64_t v183 = v229;
        uint64_t v184 = (_BYTE *)v229[4];
        unint64_t v185 = v221;
        ((void (*)(_BYTE *, uint64_t, uint64_t))v184)(v221, v171, v173);
        LODWORD(v228) = v236[0];
        uint64_t v186 = v238;
        uint64_t v226 = (unsigned int (*)(void, void, void))v237;
        unint64_t v187 = v239;
        uint64_t v188 = (void (*)(_BYTE *, _BYTE *, uint64_t))v183[2];
        unint64_t v189 = v219;
        v188(v219, v185, v173);
        sub_10001736C(v186, v187);
        uint64_t v190 = sub_10001736C(v186, v187);
        v191 = (os_log_s *)Logger.logObject.getter(v190);
        os_log_type_t v192 = static os_log_type_t.default.getter(v191);
        int v193 = v192;
        if (os_log_type_enabled(v191, v192))
        {
          uint64_t v194 = swift_slowAlloc(32LL, -1LL);
          uint64_t v230 = v184;
          uint64_t v195 = v194;
          uint64_t v196 = (void *)swift_slowAlloc(96LL, -1LL);
          unint64_t v229 = v196;
          *(_DWORD *)uint64_t v195 = 136315650;
          LODWORD(v225) = v193;
          os_log_t v234 = v227;
          id v235 = v196;
          uint64_t v197 = sub_100004AEC(&qword_1009A5F78);
          os_log_t v227 = v191;
          uint64_t v198 = String.init<A>(describing:)(&v234, v197);
          os_log_t v234 = (os_log_t)sub_1003F11D4(v198, v199, (uint64_t *)&v235);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v195 + 4, v195 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v195 + 12) = 2080;
          sub_1001FC304(v228, (uint64_t)v226, v186, v187);
          uint64_t v201 = v200;
          unint64_t v203 = v202;
          sub_100016F9C(v186, v187);
          uint64_t v204 = v201;
          uint64_t v173 = v232;
          os_log_t v234 = (os_log_t)sub_1003F11D4(v204, v203, (uint64_t *)&v235);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v195 + 14, v195 + 22);
          swift_bridgeObjectRelease();
          sub_100016F9C(v186, v187);
          *(_WORD *)(v195 + 22) = 2080;
          uint64_t v205 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v206 = v219;
          uint64_t v207 = dispatch thunk of CustomStringConvertible.description.getter(v173, v205);
          os_log_t v234 = (os_log_t)sub_1003F11D4(v207, v208, (uint64_t *)&v235);
          uint64_t v184 = v230;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v195 + 24, v195 + 32);
          swift_bridgeObjectRelease();
          v231(v206, v173);
          v191 = v227;
          _os_log_impl( (void *)&_mh_execute_header,  v227,  (os_log_type_t)v225,  "%s: Sent message %s with identifier: %s",  (uint8_t *)v195,  0x20u);
          uint64_t v209 = v229;
          swift_arrayDestroy(v229, 3LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v209, -1LL, -1LL);
          swift_slowDealloc(v195, -1LL, -1LL);
          sub_100016F9C(v217, v233);
          swift_release();
        }

        else
        {
          sub_100016F9C(v186, v187);
          swift_release();
          sub_100016F9C(v186, v187);
          v231(v189, v173);
          sub_100016F9C(v217, v233);
        }

        ((void (*)(uint64_t, _BYTE *, uint64_t))v184)(v218, v221, v173);
        goto LABEL_38;
      }

      sub_100015794(v171, &qword_10099D8A0);
      unint64_t v174 = sub_100044AD4();
      uint64_t v175 = swift_allocError(&type metadata for MessagingError, v174, 0LL, 0LL);
      *uint64_t v176 = 0LL;
      swift_willThrow(v175);
      swift_release();
      uint64_t v177 = v217;
      unint64_t v178 = v168;
LABEL_37:
      sub_100016F9C(v177, v178);
LABEL_38:

      return;
    }

    unint64_t v180 = sub_100044AD4();
    uint64_t v181 = swift_allocError(&type metadata for MessagingError, v180, 0LL, 0LL);
    *uint64_t v182 = 0LL;
    swift_willThrow(v181);
    swift_release();
    sub_100016F9C(v217, v168);
  }

uint64_t sub_1001DFE98()
{
  id v1 = [*(id *)(v0 + 56) destination];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    id v5 = v4;
  }

  else
  {
    id v5 = (void *)0x80000001008569D0LL;
    uint64_t v3 = 0xD000000000000011LL;
  }

  uint64_t v6 = sub_100004AEC(&qword_1009A61D8);
  uint64_t v7 = sub_1000372EC(&qword_1009A61E0, &qword_1009A61D8, (uint64_t)&unk_1007EFC60);
  v8._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v6, v7);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 32LL;
  v9._object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  v10._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v6, v7);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 8250LL;
  v11._object = (void *)0xE200000000000000LL;
  String.append(_:)(v11);
  v12._countAndFlagsBits = v3;
  v12._object = v5;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 62LL;
  v13._object = (void *)0xE100000000000000LL;
  String.append(_:)(v13);
  return 60LL;
}

void sub_1001DFFF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, SEL *a6)
{
  uint64_t v31 = a5;
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v30 = type metadata accessor for BeaconSharingSessionContext(0LL);
  uint64_t v10 = __chkstk_darwin(v30);
  Swift::String v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v27 - v13;
  if (qword_10099B810 != -1) {
    swift_once(&qword_10099B810, sub_10069374C);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  sub_10000A720(v15, (uint64_t)qword_100A2B188);
  sub_10001DC4C(a2, (uint64_t)v14, type metadata accessor for BeaconSharingSessionContext);
  uint64_t v16 = swift_retain();
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc(22LL, -1LL);
    uint64_t v27 = swift_slowAlloc(64LL, -1LL);
    uint64_t v36 = v27;
    *(_DWORD *)uint64_t v19 = 136446466;
    uint64_t v28 = a6;
    uint64_t v20 = sub_1001DFE98();
    uint64_t v34 = sub_1003F11D4(v20, v21, &v36);
    uint64_t v29 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v19 + 4, v19 + 12);
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    sub_10001DC4C((uint64_t)v14, (uint64_t)v12, type metadata accessor for BeaconSharingSessionContext);
    uint64_t v22 = String.init<A>(describing:)(v12, v30);
    uint64_t v34 = sub_1003F11D4(v22, v23, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease();
    a6 = v28;
    sub_100018C68((uint64_t)v14, type metadata accessor for BeaconSharingSessionContext);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, v31, (uint8_t *)v19, 0x16u);
    uint64_t v24 = v27;
    swift_arrayDestroy(v27, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  else
  {
    swift_release();
    sub_100018C68((uint64_t)v14, type metadata accessor for BeaconSharingSessionContext);
  }

  uint64_t v25 = *(void **)(a1 + 56);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v25, *a6, isa);
}

uint64_t sub_1001E02B4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v45 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t result = __chkstk_darwin(v8);
  Swift::String v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (v2[32])
  {
    uint64_t v40 = v2[32];
    uint64_t v41 = v12;
    uint64_t v42 = v10;
    uint64_t v43 = result;
    uint64_t v44 = v7;
    uint64_t v13 = qword_10099B810;
    uint64_t v39 = v2[33];
    swift_retain();
    if (v13 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    sub_10000A720(v14, (uint64_t)qword_100A2B188);
    uint64_t v15 = swift_retain_n(a1, 2LL);
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc(22LL, -1LL);
      int64_t v38 = (void *)swift_slowAlloc(64LL, -1LL);
      unint64_t v46 = v38;
      uint64_t aBlock = v4;
      *(_DWORD *)uint64_t v18 = 136315394;
      uint64_t v19 = sub_100004AEC(&qword_1009A5F78);
      uint64_t v20 = String.init<A>(describing:)(&aBlock, v19);
      uint64_t aBlock = sub_1003F11D4(v20, v21, (uint64_t *)&v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v48, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 12) = 2082;
      uint64_t v22 = sub_1001DFE98();
      uint64_t v23 = v5;
      unint64_t v25 = v24;
      swift_release();
      uint64_t aBlock = sub_1003F11D4(v22, v25, (uint64_t *)&v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v48, v18 + 14, v18 + 22);
      swift_release();
      uint64_t v5 = v23;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s: invalidated %{public}s", (uint8_t *)v18, 0x16u);
      uint64_t v26 = v38;
      swift_arrayDestroy(v38, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    else
    {

      swift_release_n(a1, 2LL);
    }

    uint64_t v27 = (void *)swift_allocObject(&unk_10094A250, 40LL, 7LL);
    uint64_t v28 = v39;
    uint64_t v29 = v40;
    v27[2] = v40;
    v27[3] = v28;
    void v27[4] = a1;
    v48[3] = sub_1000D4F98;
    v48[4] = v27;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    v48[0] = 1107296256LL;
    v48[1] = sub_1001C31E8;
    v48[2] = &unk_10094A268;
    uint64_t v30 = _Block_copy(&aBlock);
    sub_1000372DC(v29, v28);
    uint64_t v31 = swift_retain();
    uint64_t v32 = v41;
    static DispatchQoS.unspecified.getter(v31);
    unint64_t v46 = _swiftEmptyArrayStorage;
    uint64_t v33 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v34 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v35 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v36 = v44;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v34, v35, v5, v33);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v32, v36, v30);
    _Block_release(v30);
    sub_10002214C(v29, v28);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v36, v5);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v32, v43);
    return swift_release();
  }

  return result;
}

uint64_t sub_1001E06B4(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A4978);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v47 - v9;
  uint64_t v11 = *(void *)(v1 + qword_1009A3A08);
  if (v11)
  {
    uint64_t v12 = type metadata accessor for PropertyListEncoder(0LL);
    swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v13 = swift_retain();
    uint64_t v1 = PropertyListEncoder.init()(v13);
    uint64_t v14 = sub_1000372EC( &qword_1009A6208,  &qword_1009A4978,  (uint64_t)&protocol conformance descriptor for SessionMessage<A>);
    uint64_t v15 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a1, v5, v14);
    if (v2)
    {
      swift_release();
      swift_release();
    }

    else
    {
      uint64_t v20 = v15;
      unint64_t v53 = v16;
      swift_release();
      if (qword_10099B810 != -1) {
        swift_once(&qword_10099B810, sub_10069374C);
      }
      uint64_t v21 = type metadata accessor for Logger(0LL);
      sub_10000A720(v21, (uint64_t)qword_100A2B188);
      sub_10001581C(a1, (uint64_t)v10, &qword_1009A4978);
      uint64_t v22 = swift_retain_n(v3, 4LL);
      uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
      os_log_type_t v24 = static os_log_type_t.info.getter(v23);
      int v25 = v24;
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v26 = swift_slowAlloc(32LL, -1LL);
        int v50 = v25;
        uint64_t v27 = v26;
        uint64_t v51 = swift_slowAlloc(96LL, -1LL);
        uint64_t v56 = v51;
        *(_DWORD *)uint64_t v27 = 136446722;
        uint64_t v52 = v20;
        os_log_t v49 = v23;
        uint64_t v28 = sub_1001DFE98();
        uint64_t v54 = sub_1003F11D4(v28, v29, &v56);
        uint64_t v48 = &v55;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v27 + 4, v27 + 12);
        swift_release_n(v3, 2LL);
        swift_bridgeObjectRelease();
        *(_WORD *)(v27 + 12) = 2082;
        sub_10001581C((uint64_t)v10, (uint64_t)v8, &qword_1009A4978);
        sub_100015794((uint64_t)v10, &qword_1009A4978);
        uint64_t v30 = sub_1001DD144();
        unint64_t v32 = v31;
        sub_100015794((uint64_t)v8, &qword_1009A4978);
        uint64_t v54 = sub_1003F11D4(v30, v32, &v56);
        uint64_t v33 = v48;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v48, v27 + 14, v27 + 22);
        swift_bridgeObjectRelease();
        *(_WORD *)(v27 + 22) = 2082;
        swift_release();
        uint64_t v34 = type metadata accessor for UUID(0LL);
        uint64_t v35 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v36 = v34;
        uint64_t v20 = v52;
        uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter(v36, v35);
        uint64_t v54 = sub_1003F11D4(v37, v38, &v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v33, v27 + 24, v27 + 32);
        swift_release();
        swift_bridgeObjectRelease();
        os_log_t v39 = v49;
        _os_log_impl( (void *)&_mh_execute_header,  v49,  (os_log_type_t)v50,  "%{public}s: Sending: %{public}s over session: %{public}s",  (uint8_t *)v27,  0x20u);
        uint64_t v40 = v51;
        swift_arrayDestroy(v51, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v40, -1LL, -1LL);
        swift_slowDealloc(v27, -1LL, -1LL);
      }

      else
      {
        swift_release();
        sub_100015794((uint64_t)v10, &qword_1009A4978);

        swift_release_n(v3, 3LL);
      }

      uint64_t v41 = swift_allocObject(&unk_10094A200, 24LL, 7LL);
      swift_weakInit(v41 + 16, v11);
      uint64_t v42 = (void *)swift_allocObject(&unk_10094A228, 40LL, 7LL);
      v42[2] = v41;
      v42[3] = v20;
      unint64_t v43 = v53;
      v42[4] = v53;
      uint64_t v44 = sub_100004AEC(&qword_1009A3B78);
      swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
      sub_10001736C(v20, v43);
      uint64_t v56 = Future.init(_:)(sub_100177D80, v42);
      uint64_t v45 = sub_1000372EC(qword_1009A3B80, &qword_1009A3B78, (uint64_t)&protocol conformance descriptor for Future<A, B>);
      uint64_t v1 = Publisher.eraseToAnyPublisher()(v44, v45);
      swift_release();
      sub_100016F9C(v20, v43);
      swift_release();
    }
  }

  else
  {
    unint64_t v17 = sub_100044AD4();
    uint64_t v18 = swift_allocError(&type metadata for MessagingError, v17, 0LL, 0LL);
    void *v19 = 4LL;
    swift_willThrow(v18);
  }

  return v1;
}

uint64_t sub_1001E0BAC(uint64_t a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009A3B40);
  __chkstk_darwin(v3);
  uint64_t v5 = &v43[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = sub_100004AEC(&qword_1009A3B60);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v43[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = *(void *)(v1 + qword_1009A3A08);
  if (v10)
  {
    uint64_t v47 = v1;
    uint64_t v11 = type metadata accessor for PropertyListEncoder(0LL);
    swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v12 = swift_retain();
    PropertyListEncoder.init()(v12);
    uint64_t v13 = sub_1000372EC( &qword_1009A3B70,  &qword_1009A3B40,  (uint64_t)&protocol conformance descriptor for SessionMessage<A>);
    uint64_t v14 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a1, v3, v13);
    unint64_t v16 = v15;
    swift_release();
    unint64_t v45 = v16;
    uint64_t v46 = v10;
    if (qword_10099B810 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    sub_10000A720(v20, (uint64_t)qword_100A2B188);
    sub_10001581C(a1, (uint64_t)v5, &qword_1009A3B40);
    uint64_t v21 = v47;
    uint64_t v22 = swift_retain_n(v47, 4LL);
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.info.getter(v23);
    int v25 = v24;
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v26 = swift_slowAlloc(32LL, -1LL);
      uint64_t v27 = swift_slowAlloc(96LL, -1LL);
      uint64_t v50 = v27;
      *(_DWORD *)uint64_t v26 = 136446722;
      int v44 = v25;
      uint64_t v28 = sub_1001DFE98();
      uint64_t v48 = sub_1003F11D4(v28, v29, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v26 + 4, v26 + 12);
      swift_release_n(v21, 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2082;
      uint64_t v30 = sub_1001DCF58();
      uint64_t v48 = sub_1003F11D4(v30, v31, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease();
      sub_100015794((uint64_t)v5, &qword_1009A3B40);
      *(_WORD *)(v26 + 22) = 2082;
      swift_release();
      uint64_t v32 = type metadata accessor for UUID(0LL);
      uint64_t v33 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter(v32, v33);
      uint64_t v48 = sub_1003F11D4(v34, v35, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v26 + 24, v26 + 32);
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v23,  (os_log_type_t)v44,  "%{public}s: Sending (Internal): %{public}s over session: %{public}s",  (uint8_t *)v26,  0x20u);
      swift_arrayDestroy(v27, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    else
    {
      swift_release_n(v21, 3LL);
      sub_100015794((uint64_t)v5, &qword_1009A3B40);

      swift_release();
    }

    uint64_t v36 = v14;
    unint64_t v37 = v45;
    uint64_t v38 = swift_allocObject(&unk_10094A200, 24LL, 7LL);
    swift_weakInit(v38 + 16, v46);
    os_log_t v39 = (void *)swift_allocObject(&unk_10094A2C8, 40LL, 7LL);
    v39[2] = v38;
    v39[3] = v36;
    v39[4] = v37;
    uint64_t v40 = sub_100004AEC(&qword_1009A3B78);
    swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
    sub_10001736C(v36, v37);
    uint64_t v50 = Future.init(_:)(sub_10020FF64, v39);
    uint64_t v41 = sub_1000372EC(qword_1009A3B80, &qword_1009A3B78, (uint64_t)&protocol conformance descriptor for Future<A, B>);
    uint64_t v19 = Publisher.eraseToAnyPublisher()(v40, v41);
    swift_release();
    sub_100016F9C(v36, v37);
    swift_release();
  }

  else
  {
    uint64_t v50 = 4LL;
    unint64_t v17 = sub_100044AD4();
    Fail.init(error:)(&v50, (char *)&type metadata for () + 8, &type metadata for MessagingError, v17);
    uint64_t v18 = sub_1000372EC(&qword_1009A3B68, &qword_1009A3B60, (uint64_t)&protocol conformance descriptor for Fail<A, B>);
    uint64_t v19 = Publisher.eraseToAnyPublisher()(v6, v18);
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  }

  return v19;
}

uint64_t sub_1001E1124()
{
  uint64_t v1 = type metadata accessor for DispatchTime(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v19 - v6;
  uint64_t v8 = sub_100004AEC(&qword_1009A3B40);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_100177C20,  v0,  *(void *)(v0 + 40),  (char *)&type metadata for () + 8,  &type metadata for Bool);
  if ((v20 & 1) == 0)
  {
    uint64_t v12 = dispatch_group_create();
    sub_1001DCAC8(2, 1LL, 0LL, 0xE000000000000000LL, (uint64_t)v10);
    dispatch_group_enter(v12);
    uint64_t v20 = sub_1001E0BAC((uint64_t)v10);
    uint64_t v13 = swift_allocObject(&unk_10094A2A0, 32LL, 7LL);
    *(void *)(v13 + swift_weakDestroy(v0 + 16) = v12;
    *(void *)(v13 + 24) = v0;
    uint64_t v14 = v12;
    swift_retain();
    uint64_t v15 = sub_100004AEC(&qword_1009A3B50);
    uint64_t v16 = sub_1000372EC( &qword_1009A3B58,  &qword_1009A3B50,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher.oneshot(_:)(sub_10020F8A0, v13, v15, v16);
    swift_release();
    uint64_t v17 = swift_release();
    static DispatchTime.now()(v17);
    + infix(_:_:)(v5, *(double *)(v0 + 24));
    uint64_t v18 = *(void (**)(char *, uint64_t))(v2 + 8);
    v18(v5, v1);
    OS_dispatch_group.wait(timeout:)(v7);

    v18(v7, v1);
    return sub_100015794((uint64_t)v10, &qword_1009A3B40);
  }

  return result;
}

void sub_1001E153C(unint64_t a1, char a2, dispatch_group_t group, uint64_t a4)
{
  if ((a2 & 1) != 0)
  {
    sub_1000A4D58(a1);
    if (qword_10099B810 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    sub_10000A720(v7, (uint64_t)qword_100A2B188);
    sub_100177C70(a1, 1);
    swift_retain();
    sub_100177C70(a1, 1);
    uint64_t v8 = swift_retain();
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc(22LL, -1LL);
      uint64_t v12 = swift_slowAlloc(64LL, -1LL);
      uint64_t v19 = v12;
      *(_DWORD *)uint64_t v11 = 136446466;
      uint64_t v13 = sub_1001DFE98();
      uint64_t v18 = sub_1003F11D4(v13, v14, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v11 + 4, v11 + 12);
      swift_release_n(a4, 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 12) = 2082;
      uint64_t v18 = a1;
      unint64_t v15 = sub_100044AD4();
      uint64_t v16 = Error.localizedDescription.getter(&type metadata for MessagingError, v15);
      uint64_t v18 = sub_1003F11D4(v16, v17, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v11 + 14, v11 + 22);
      swift_bridgeObjectRelease();
      sub_100177C7C(a1, 1);
      sub_100177C7C(a1, 1);
      _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "%{public}s: Error sending .shuttingDown: %{public}s",  (uint8_t *)v11,  0x16u);
      swift_arrayDestroy(v12, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);

      sub_100177C7C(a1, 1);
    }

    else
    {
      sub_100177C7C(a1, 1);
      swift_release_n(a4, 2LL);
      sub_100177C7C(a1, 1);
      sub_100177C7C(a1, 1);
    }
  }

  dispatch_group_leave(group);
}

void sub_1001E17AC(uint64_t a1, uint64_t a2)
{
  uint64_t v98 = a2;
  uint64_t v96 = a1;
  uint64_t v102 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v2 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)&v85 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v101 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v100 = *(void *)(v101 - 8);
  __chkstk_darwin(v101);
  uint64_t v99 = (char *)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v94 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v93 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  uint64_t v92 = (char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for ShareRecord(0LL);
  uint64_t v107 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009A6218);
  uint64_t v11 = __chkstk_darwin(v10);
  unint64_t v108 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  unint64_t v111 = (char *)&v85 - v13;
  uint64_t v14 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v109 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  unint64_t v17 = (char *)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v85 - v18;
  uint64_t v97 = type metadata accessor for DateInterval(0LL);
  uint64_t v95 = *(void *)(v97 - 8);
  uint64_t v20 = __chkstk_darwin(v97);
  uint64_t v115 = (uint64_t)&v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v116 = (uint64_t)&v85 - v23;
  __chkstk_darwin(v22);
  uint64_t v117 = (uint64_t)&v85 - v24;
  uint64_t v25 = type metadata accessor for Date(0LL);
  uint64_t v103 = *(void *)(v25 - 8);
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v85 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = __chkstk_darwin(v26);
  unint64_t v31 = (char *)&v85 - v30;
  uint64_t v32 = (void *)static os_log_type_t.default.getter(v29);
  if (qword_10099B700 != -1) {
LABEL_47:
  }
    swift_once(&qword_10099B700, sub_100651100);
  uint64_t v104 = v25;
  os_log(_:dso:log:_:_:)( v32,  &_mh_execute_header,  qword_100A2B010,  "Distribute keys",  15LL,  2LL,  _swiftEmptyArrayStorage,  v85);
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  uint64_t v25 = 0LL;
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v33 = aBlock[0];
  static Date.trustedNow.getter((uint64_t)v31);
  uint64_t v34 = sub_1006A0D08(v33);
  if ((unsigned __int128)(v34 * (__int128)60LL) >> 64 != (60 * v34) >> 63)
  {
    __break(1u);
    goto LABEL_49;
  }

  uint64_t v113 = v19;
  uint64_t v106 = v14;
  double v35 = (double)(60 * v34);
  uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v103 + 16);
  uint64_t v37 = v104;
  v36(v28, v31, v104);
  DateInterval.init(start:duration:)(v28, v35);
  uint64_t v34 = sub_1006A0D30(v33);
  if ((unsigned __int128)(v34 * (__int128)60LL) >> 64 != (60 * v34) >> 63)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v90 = v4;
  uint64_t v91 = v2;
  double v38 = (double)(60 * v34);
  v36(v28, v31, v37);
  DateInterval.init(start:duration:)(v28, v38);
  uint64_t v39 = sub_1006A0D1C(v33);
  uint64_t v34 = swift_bridgeObjectRelease();
  if ((unsigned __int128)(v39 * (__int128)60LL) >> 64 == (60 * v39) >> 63)
  {
    uint64_t v89 = v31;
    v36(v28, v31, v37);
    DateInterval.init(start:duration:)(v28, (double)(60 * v39));
    uint64_t v40 = *(void *)(v114 + 128);
    uint64_t v41 = sub_100506C30();
    unint64_t v42 = sub_100413734((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v43 = *((void *)v41 + 2);
    if (v43)
    {
      uint64_t v44 = *(unsigned __int8 *)(v109 + 80);
      uint64_t v112 = v40;
      uint64_t v28 = &v41[(v44 + 32) & ~v44];
      unint64_t v110 = *(void *)(v109 + 72);
      uint64_t v105 = (uint64_t)v41;
      swift_bridgeObjectRetain(v41);
      uint64_t v45 = (uint64_t)v113;
      do
      {
        sub_10001DC4C((uint64_t)v28, v45, type metadata accessor for OwnedBeaconRecord);
        uint64_t v46 = sub_1005777D8();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v42);
        aBlock[0] = v42;
        uint64_t v48 = (uint64_t)v46;
        uint64_t v45 = (uint64_t)v113;
        sub_10005D95C(v48, (uint64_t)v113, isUniquelyReferenced_nonNull_native);
        unint64_t v42 = aBlock[0];
        swift_bridgeObjectRelease();
        sub_100018C68(v45, type metadata accessor for OwnedBeaconRecord);
        v28 += v110;
        --v43;
      }

      while (v43);
      swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRelease();
    uint64_t v49 = swift_allocObject(&unk_100948F18, 24LL, 7LL);
    uint64_t v50 = 0LL;
    uint64_t v88 = v49;
    *(void *)(v49 + swift_weakDestroy(v0 + 16) = 0LL;
    uint64_t v32 = (void *)(v49 + 16);
    unint64_t v110 = v42;
    uint64_t v52 = *(void *)(v42 + 64);
    uint64_t v14 = v42 + 64;
    uint64_t v51 = v52;
    uint64_t v53 = 1LL << *(_BYTE *)(v14 - 32);
    uint64_t v54 = -1LL;
    if (v53 < 64) {
      uint64_t v54 = ~(-1LL << v53);
    }
    unint64_t v55 = v54 & v51;
    unint64_t v56 = (unint64_t)(v53 + 63) >> 6;
    uint64_t v85 = v56 - 1;
    uint64_t v106 = v56;
    unint64_t v86 = v56 - 5;
    uint64_t v105 = v14;
    uint64_t v87 = v14 + 40;
    uint64_t v19 = (char *)&qword_1009A6220;
    uint64_t v4 = type metadata accessor for ShareRecord;
    unint64_t v31 = v108;
    uint64_t v2 = (uint64_t)v111;
    while (!v55)
    {
      uint64_t v62 = v50 + 1;
      if (__OFADD__(v50, 1LL))
      {
        __break(1u);
        goto LABEL_47;
      }

      if (v62 >= v106)
      {
        uint64_t v113 = (char *)v50;
      }

      else
      {
        unint64_t v63 = *(void *)(v105 + 8 * v62);
        if (v63) {
          goto LABEL_22;
        }
        if (v50 + 2 >= v106)
        {
          uint64_t v113 = (char *)(v50 + 1);
        }

        else
        {
          unint64_t v63 = *(void *)(v105 + 8 * (v50 + 2));
          if (v63)
          {
            uint64_t v62 = v50 + 2;
            goto LABEL_22;
          }

          if (v50 + 3 >= v106)
          {
            uint64_t v113 = (char *)(v50 + 2);
          }

          else
          {
            unint64_t v63 = *(void *)(v105 + 8 * (v50 + 3));
            if (v63)
            {
              uint64_t v62 = v50 + 3;
LABEL_22:
              uint64_t v112 = (v63 - 1) & v63;
              uint64_t v113 = (char *)v62;
              unint64_t v57 = __clz(__rbit64(v63)) + (v62 << 6);
LABEL_18:
              unint64_t v58 = v110;
              sub_10001DC4C( *(void *)(v110 + 48) + *(void *)(v109 + 72) * v57,  (uint64_t)v31,  type metadata accessor for OwnedBeaconRecord);
              uint64_t v59 = *(void *)(v58 + 56);
              uint64_t v19 = (char *)&qword_1009A6220;
              uint64_t v60 = sub_100004AEC(&qword_1009A6220);
              uint64_t v61 = *(void *)(v59 + 8 * v57);
              *(void *)&v31[*(int *)(v60 + 48)] = v61;
              (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56LL))( v31,  0LL,  1LL,  v60);
              swift_bridgeObjectRetain(v61);
              goto LABEL_25;
            }

            uint64_t v62 = v50 + 4;
            if (v50 + 4 >= v106)
            {
              uint64_t v113 = (char *)(v50 + 3);
            }

            else
            {
              unint64_t v63 = *(void *)(v105 + 8 * v62);
              if (v63) {
                goto LABEL_22;
              }
              while (v86 != v50)
              {
                unint64_t v63 = *(void *)(v87 + 8 * v50++);
                if (v63)
                {
                  uint64_t v62 = v50 + 4;
                  goto LABEL_22;
                }
              }

              uint64_t v113 = (char *)v85;
            }
          }
        }
      }

      uint64_t v64 = sub_100004AEC(&qword_1009A6220);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56LL))(v31, 1LL, 1LL, v64);
      uint64_t v112 = 0LL;
LABEL_25:
      sub_100015750((uint64_t)v31, v2, &qword_1009A6218);
      uint64_t v65 = sub_100004AEC(&qword_1009A6220);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 48LL))(v2, 1LL, v65) == 1)
      {
        swift_release();
        sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
        uint64_t v69 = v93;
        unint64_t v70 = v92;
        uint64_t v71 = v94;
        (*(void (**)(char *, void, uint64_t))(v93 + 104))( v92,  enum case for DispatchQoS.QoSClass.default(_:),  v94);
        uint64_t v72 = (void *)static OS_dispatch_queue.global(qos:)(v70);
        (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v71);
        os_log_type_t v73 = (void *)swift_allocObject(&unk_10094A2F0, 40LL, 7LL);
        uint64_t v74 = v98;
        v73[2] = v96;
        v73[3] = v74;
        v73[4] = v88;
        void aBlock[4] = sub_10020F9D4;
        void aBlock[5] = v73;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256LL;
        aBlock[2] = sub_1001C31E8;
        aBlock[3] = &unk_10094A308;
        uint64_t v75 = _Block_copy(aBlock);
        swift_retain();
        uint64_t v76 = swift_retain();
        uint64_t v77 = v99;
        static DispatchQoS.unspecified.getter(v76);
        uint64_t v118 = _swiftEmptyArrayStorage;
        uint64_t v78 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v79 = sub_100004AEC((uint64_t *)&unk_1009AB860);
        uint64_t v80 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
        uint64_t v81 = v90;
        uint64_t v82 = v102;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v118, v79, v80, v102, v78);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v77, v81, v75);
        _Block_release(v75);

        (*(void (**)(uint64_t (*)(uint64_t), uint64_t))(v91 + 8))(v81, v82);
        (*(void (**)(char *, uint64_t))(v100 + 8))(v77, v101);
        (*(void (**)(char *, uint64_t))(v103 + 8))(v89, v104);
        unint64_t v83 = *(void (**)(uint64_t, uint64_t))(v95 + 8);
        uint64_t v84 = v97;
        v83(v115, v97);
        v83(v116, v84);
        v83(v117, v84);
        swift_release();
        swift_release();
        return;
      }

      uint64_t v28 = *(char **)(v2 + *(int *)(v65 + 48));
      uint64_t v14 = (uint64_t)type metadata accessor for OwnedBeaconRecord;
      sub_10002218C(v2, (uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
      uint64_t v66 = *((void *)v28 + 2);
      if (v66)
      {
        uint64_t v67 = (uint64_t)&v28[(*(unsigned __int8 *)(v107 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80)];
        uint64_t v14 = *(void *)(v107 + 72);
        do
        {
          sub_10001DC4C(v67, (uint64_t)v9, type metadata accessor for ShareRecord);
          uint64_t v68 = objc_autoreleasePoolPush();
          sub_1001F5BFC((uint64_t)v9, v114, v117, (uint64_t)v17, v116, v115, v32);
          objc_autoreleasePoolPop(v68);
          sub_100018C68((uint64_t)v9, type metadata accessor for ShareRecord);
          v67 += v14;
          --v66;
        }

        while (v66);
        swift_bridgeObjectRelease();
        sub_100018C68((uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
        unint64_t v31 = v108;
        uint64_t v2 = (uint64_t)v111;
        uint64_t v19 = (char *)&qword_1009A6220;
      }

      else
      {
        sub_100018C68((uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
        swift_bridgeObjectRelease();
        uint64_t v2 = (uint64_t)v111;
      }

      unint64_t v55 = v112;
      uint64_t v50 = (uint64_t)v113;
    }

    uint64_t v112 = (v55 - 1) & v55;
    uint64_t v113 = (char *)v50;
    unint64_t v57 = __clz(__rbit64(v55)) | (v50 << 6);
    goto LABEL_18;
  }

void *sub_1001E2370()
{
  uint64_t v0 = (uint64_t)sub_1001FBA74();
  uint64_t v1 = v0;
  if (!((unint64_t)v0 >> 62))
  {
    uint64_t v2 = *(void *)((v0 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v2) {
      goto LABEL_3;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }

  if (v0 >= 0) {
    v0 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v0);
  if (!v2) {
    goto LABEL_15;
  }
LABEL_3:
  uint64_t result = (void *)sub_100032CC4(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000LL) == 0)
  {
    uint64_t v4 = 0LL;
    do
    {
      if ((v1 & 0xC000000000000001LL) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v1);
      }
      else {
        id v5 = *(id *)(v1 + 8 * v4 + 32);
      }
      sub_1005EE064(v5, (uint64_t)v16);
      unint64_t v7 = _swiftEmptyArrayStorage[2];
      unint64_t v6 = _swiftEmptyArrayStorage[3];
      if (v7 >= v6 >> 1) {
        sub_100032CC4(v6 > 1, v7 + 1, 1);
      }
      ++v4;
      _swiftEmptyArrayStorage[2] = v7 + 1;
      uint64_t v8 = &_swiftEmptyArrayStorage[20 * v7];
      __int128 v9 = v16[1];
      v8[2] = v16[0];
      v8[3] = v9;
      __int128 v10 = v16[2];
      __int128 v11 = v16[3];
      __int128 v12 = v16[5];
      v8[6] = v16[4];
      v8[7] = v12;
      v8[4] = v10;
      v8[5] = v11;
      __int128 v13 = v16[6];
      __int128 v14 = v16[7];
      __int128 v15 = v16[9];
      v8[10] = v16[8];
      v8[11] = v15;
      v8[8] = v13;
      v8[9] = v14;
    }

    while (v2 != v4);
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }

  __break(1u);
  return result;
}

uint64_t sub_1001E24DC(uint64_t a1)
{
  uint64_t v26 = *v1;
  uint64_t v3 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v25 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v27 = (char *)&v25 - v10;
  __int128 v11 = *(void (**)(void))(v7 + 16);
  v11();
  uint64_t v12 = swift_allocObject(&unk_100949710, 24LL, 7LL);
  swift_weakInit(v12 + 16, v1);
  sub_10001DC4C(a1, (uint64_t)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL), type metadata accessor for OwnedBeaconRecord);
  uint64_t v13 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v14 = (v13 + 24) & ~v13;
  uint64_t v15 = swift_allocObject(&unk_100949738, v14 + v5, v13 | 7);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = v12;
  sub_10002218C( (uint64_t)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v15 + v14,  type metadata accessor for OwnedBeaconRecord);
  uint64_t v16 = v25;
  ((void (*)(char *, char *, uint64_t))v11)(v25, v27, v6);
  uint64_t v17 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = (v17 + 16) & ~v17;
  unint64_t v19 = (v8 + v18 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v20 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = swift_allocObject(&unk_100949760, v20 + 8, v17 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v21 + v18, v16, v6);
  uint64_t v22 = (uint64_t (**)())(v21 + v19);
  *uint64_t v22 = sub_10020D370;
  v22[1] = (uint64_t (*)())v15;
  *(void *)(v21 + v2sub_100032838(0, 7LL, 0) = v26;
  swift_retain();
  swift_retain();
  uint64_t v23 = sub_100004AEC(&qword_1009AE4D0);
  unsafeFromAsyncTask<A>(_:)(&unk_1009A60E0, v21, v23);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v27, v6);
  return swift_release();
}

uint64_t sub_1001E2718(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  v11[2] = a6;
  v11[3] = a3;
  char v12 = a4;
  uint64_t v13 = a5;
  return static Transaction.named<A>(_:with:)("BeaconSharingManager.messageSent", 32LL, 2LL, sub_10020F62C, v11);
}

uint64_t sub_1001E279C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = static os_log_type_t.info.getter(a1);
  if (qword_10099B700 != -1) {
    swift_once(&qword_10099B700, sub_100651100);
  }
  uint64_t v9 = qword_100A2B010;
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v11 = swift_allocObject(v10, 112LL, 7LL);
  *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter(v12, v13);
  uint64_t v16 = v15;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v17 = sub_1000226F4();
  *(void *)(v11 + 32) = v14;
  *(void *)(v11 + 4sub_100032838(0, 7LL, 0) = v16;
  *(void *)(v11 + 96) = &type metadata for String;
  *(void *)(v11 + 104) = v17;
  *(void *)(v11 + 64) = v17;
  *(void *)(v11 + 72) = a5;
  *(void *)(v11 + 8sub_100032838(0, 7LL, 0) = a6;
  *(void *)&double v18 = swift_bridgeObjectRetain(a6).n128_u64[0];
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "Message %@ delivered successfully from %@.", 42LL, 2LL, v11, v18);
  return swift_bridgeObjectRelease();
}

void sub_1001E28C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if ((*(_BYTE *)(a12 + 72) & 1) == 0)
  {
    sub_10020F144(a12 + 56, (uint64_t)v15);
    sub_1006AC994(a6, a7, a8, a9, a10, a11);
    sub_10020F180((uint64_t)v15);
  }

uint64_t sub_1001E296C(uint64_t a1)
{
  uint64_t v2 = static os_log_type_t.default.getter(a1);
  if (qword_10099B700 != -1) {
    swift_once(&qword_10099B700, sub_100651100);
  }
  uint64_t v3 = qword_100A2B010;
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  unint64_t v6 = sub_10020F100();
  swift_bridgeObjectRetain(a1);
  uint64_t v8 = Set.description.getter(v7, &type metadata for MessagingAccount, v6);
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_1000226F4();
  *(void *)(v5 + 32) = v8;
  *(void *)(v5 + 4sub_100032838(0, 7LL, 0) = v10;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "Message accounts changed %@.", 28LL, 2LL, v5);
  uint64_t v11 = swift_bridgeObjectRelease();
  return PassthroughSubject.send(_:)(v11);
}

uint64_t sub_1001E2A84(uint64_t a1)
{
  uint64_t v2 = static os_log_type_t.default.getter(a1);
  if (qword_10099B700 != -1) {
    swift_once(&qword_10099B700, sub_100651100);
  }
  uint64_t v3 = qword_100A2B010;
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  swift_bridgeObjectRetain(a1);
  uint64_t v7 = Array.description.getter(v6, &type metadata for MessagingDevice);
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_1000226F4();
  *(void *)(v5 + 32) = v7;
  *(void *)(v5 + 4sub_100032838(0, 7LL, 0) = v9;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "Messaging devices changed %@.", 29LL, 2LL, v5);
  swift_bridgeObjectRelease();
  uint64_t v11 = a1;
  return CurrentValueSubject.send(_:)(&v11);
}

void sub_1001E2BA0( uint64_t a1, int a2, void (*a3)(char *, uint64_t, uint64_t), unint64_t a4, uint64_t a5)
{
  uint64_t v182 = a3;
  LODWORD(v177) = a2;
  uint64_t v171 = sub_100004AEC((uint64_t *)&unk_1009B5370);
  __chkstk_darwin(v171);
  uint64_t v173 = (char *)&v162 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v169 = (uint64_t)&v162 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v174 = (uint64_t)&v162 - v13;
  __chkstk_darwin(v12);
  uint64_t v175 = (uint64_t *)((char *)&v162 - v14);
  uint64_t v185 = type metadata accessor for UUID(0LL);
  uint64_t v180 = *(void *)(v185 - 8);
  uint64_t v15 = __chkstk_darwin(v185);
  v165 = (char *)&v162 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v183 = (char *)&v162 - v18;
  __chkstk_darwin(v17);
  unint64_t v20 = (char *)&v162 - v19;
  uint64_t v21 = type metadata accessor for BeaconSharingSessionContext(0LL);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v167 = (char *)&v162 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v166 = (uint64_t)&v162 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v170 = (uint64_t)&v162 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v172 = (char *)&v162 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v176 = (uint64_t)&v162 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v34 = (char *)&v162 - v33;
  __chkstk_darwin(v32);
  uint64_t v36 = (char *)&v162 - v35;
  if (qword_10099B178 != -1) {
    swift_once(&qword_10099B178, sub_100189C64);
  }
  uint64_t v37 = type metadata accessor for Logger(0LL);
  uint64_t v38 = sub_10000A720(v37, (uint64_t)qword_100A2A290);
  sub_10001DC4C(a1, (uint64_t)v36, type metadata accessor for BeaconSharingSessionContext);
  swift_bridgeObjectRetain_n(a4, 2LL);
  uint64_t v39 = swift_retain_n(a5, 2LL);
  uint64_t v184 = v38;
  uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
  os_log_type_t v41 = static os_log_type_t.default.getter(v40);
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = swift_slowAlloc(32LL, -1LL);
    unint64_t v178 = v20;
    uint64_t v43 = v42;
    uint64_t v164 = swift_slowAlloc(96LL, -1LL);
    v187[0] = v164;
    *(_DWORD *)uint64_t v43 = 136315650;
    uint64_t v181 = a1;
    uint64_t v179 = v21;
    uint64_t v44 = sub_1001BE7D0();
    uint64_t v186 = sub_1003F11D4(v44, v45, v187);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187, v43 + 4, v43 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v36, type metadata accessor for BeaconSharingSessionContext);
    *(_WORD *)(v43 + 12) = 2080;
    swift_bridgeObjectRetain(a4);
    uint64_t v186 = sub_1003F11D4((uint64_t)v182, a4, v187);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187, v43 + 14, v43 + 22);
    swift_bridgeObjectRelease_n(a4, 3LL);
    *(_WORD *)(v43 + 22) = 2080;
    swift_retain();
    uint64_t v46 = sub_1001DFE98();
    unint64_t v48 = v47;
    swift_release();
    uint64_t v186 = sub_1003F11D4(v46, v48, v187);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187, v43 + 24, v43 + 32);
    swift_release_n(a5, 2LL);
    uint64_t v21 = v179;
    a1 = v181;
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v40,  v41,  "sessionInvitationReceived: context: %s from: %s session: %s",  (uint8_t *)v43,  0x20u);
    uint64_t v49 = v164;
    swift_arrayDestroy(v164, 3LL, (char *)&type metadata for Any + 8);
    uint64_t v50 = v185;
    swift_slowDealloc(v49, -1LL, -1LL);
    uint64_t v51 = v43;
    unint64_t v20 = v178;
    swift_slowDealloc(v51, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v36, type metadata accessor for BeaconSharingSessionContext);

    swift_release_n(a5, 2LL);
    swift_bridgeObjectRelease_n(a4, 2LL);
    uint64_t v50 = v185;
  }

  sub_10001DC4C(a1, (uint64_t)v34, type metadata accessor for BeaconSharingSessionContext);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v34, v21);
  uint64_t v53 = v183;
  if (!(_DWORD)EnumCaseMultiPayload)
  {
    uint64_t v62 = (os_log_s *)Logger.logObject.getter(EnumCaseMultiPayload);
    os_log_type_t v63 = static os_log_type_t.error.getter(v62);
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v64 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Unexpected .incoming context!", v64, 2u);
      swift_slowDealloc(v64, -1LL, -1LL);
    }

    uint64_t v65 = (uint64_t)v34;
    goto LABEL_14;
  }

  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v54 = v176;
    uint64_t v55 = sub_10001DC4C(a1, v176, type metadata accessor for BeaconSharingSessionContext);
    unint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
    os_log_type_t v57 = static os_log_type_t.default.getter(v56);
    if (os_log_type_enabled(v56, v57))
    {
      unint64_t v58 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v59 = swift_slowAlloc(32LL, -1LL);
      v187[0] = v59;
      *(_DWORD *)unint64_t v58 = 136315138;
      uint64_t v60 = sub_1001BE7D0();
      uint64_t v186 = sub_1003F11D4(v60, v61, v187);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187, v58 + 4, v58 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68(v54, type metadata accessor for BeaconSharingSessionContext);
      _os_log_impl( (void *)&_mh_execute_header,  v56,  v57,  "Ignoring incoming %s invitation because this is not an iOS device",  v58,  0xCu);
      swift_arrayDestroy(v59, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1LL, -1LL);
      swift_slowDealloc(v58, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(v54, type metadata accessor for BeaconSharingSessionContext);
    }

    return;
  }

  uint64_t v179 = v21;
  uint64_t v181 = a1;
  uint64_t v66 = v180;
  uint64_t v67 = *(void (**)(char *, char *, uint64_t))(v180 + 32);
  v67(v20, v34, v50);
  char v68 = sub_100201900((int)v177, (uint64_t)v182, a4);
  uint64_t v163 = a5;
  if ((v68 & 1) != 0)
  {
    uint64_t v177 = (void (*)(char *, uint64_t, uint64_t))v67;
    uint64_t v69 = *(uint64_t (**)(char *, char *, uint64_t))(v66 + 16);
    uint64_t v70 = v69(v53, v20, v50);
    uint64_t v71 = (os_log_s *)Logger.logObject.getter(v70);
    os_log_type_t v72 = static os_log_type_t.debug.getter(v71);
    BOOL v73 = os_log_type_enabled(v71, v72);
    unint64_t v178 = v20;
    if (v73)
    {
      uint64_t v74 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v75 = v50;
      uint64_t v76 = swift_slowAlloc(32LL, -1LL);
      v187[0] = v76;
      *(_DWORD *)uint64_t v74 = 136315138;
      uint64_t v77 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v78 = dispatch thunk of CustomStringConvertible.description.getter(v75, v77);
      uint64_t v186 = sub_1003F11D4(v78, v79, v187);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187, v74 + 4, v74 + 12);
      swift_bridgeObjectRelease();
      uint64_t v183 = *(char **)(v180 + 8);
      ((void (*)(char *, uint64_t))v183)(v53, v75);
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "Incoming .selfBeaconingDevice invitation for %s", v74, 0xCu);
      swift_arrayDestroy(v76, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v80 = v76;
      uint64_t v50 = v75;
      unint64_t v20 = v178;
      swift_slowDealloc(v80, -1LL, -1LL);
      swift_slowDealloc(v74, -1LL, -1LL);
    }

    else
    {
      uint64_t v183 = *(char **)(v66 + 8);
      ((void (*)(char *, uint64_t))v183)(v53, v50);
    }

    uint64_t v97 = v172;
    uint64_t v96 = (uint64_t)v173;
    uint64_t v99 = v174;
    uint64_t v98 = v175;
    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
    uint64_t v100 = v187[0];
    uint64_t KeyPath = swift_getKeyPath(&unk_1007F72D8);
    sub_1006A1FC0(KeyPath, v100, v98);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v182 = (void (*)(char *, uint64_t, uint64_t))v69;
    v69((char *)v99, v20, v50);
    uint64_t v102 = (uint64_t)v98;
    uint64_t v103 = v180;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v180 + 56))(v99, 0LL, 1LL, v50);
    uint64_t v104 = v96 + *(int *)(v171 + 48);
    sub_10001581C(v102, v96, &qword_10099D8A0);
    sub_10001581C(v99, v104, &qword_10099D8A0);
    uint64_t v105 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v103 + 48);
    if (v105(v96, 1LL, v50) == 1)
    {
      sub_100015794(v99, &qword_10099D8A0);
      sub_100015794(v102, &qword_10099D8A0);
      int v106 = v105(v104, 1LL, v50);
      uint64_t v107 = v183;
      uint64_t v108 = (uint64_t)v97;
      if (v106 == 1)
      {
        sub_100015794(v96, &qword_10099D8A0);
        uint64_t v109 = v181;
LABEL_37:
        uint64_t v183 = v107;
        uint64_t v135 = v166;
        uint64_t v136 = sub_10001DC4C(v109, v166, type metadata accessor for BeaconSharingSessionContext);
        uint64_t v137 = (os_log_s *)Logger.logObject.getter(v136);
        os_log_type_t v138 = static os_log_type_t.info.getter(v137);
        if (os_log_type_enabled(v137, v138))
        {
          unint64_t v139 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v140 = swift_slowAlloc(32LL, -1LL);
          v187[0] = v140;
          *(_DWORD *)unint64_t v139 = 136315138;
          uint64_t v141 = sub_1001BE7D0();
          uint64_t v186 = sub_1003F11D4(v141, v142, v187);
          uint64_t v109 = v181;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187, v139 + 4, v139 + 12);
          swift_bridgeObjectRelease();
          sub_100018C68(v135, type metadata accessor for BeaconSharingSessionContext);
          _os_log_impl( (void *)&_mh_execute_header,  v137,  v138,  "Accepting incoming %s invitation because it is this device",  v139,  0xCu);
          swift_arrayDestroy(v140, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v140, -1LL, -1LL);
          swift_slowDealloc(v139, -1LL, -1LL);
        }

        else
        {
          sub_100018C68(v135, type metadata accessor for BeaconSharingSessionContext);
        }

        uint64_t v149 = v168;
        uint64_t v150 = type metadata accessor for PropertyListEncoder(0LL);
        uint64_t v151 = swift_allocObject(v150, *(unsigned int *)(v150 + 48), *(unsigned __int16 *)(v150 + 52));
        PropertyListEncoder.init()(v151);
        uint64_t v152 = sub_100007864( &qword_1009A4FB0,  type metadata accessor for BeaconSharingSessionContext,  (uint64_t)&unk_1007F4ED0);
        uint64_t v153 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v109, v179, v152);
        uint64_t v154 = v185;
        uint64_t v155 = v153;
        unint64_t v157 = v156;
        uint64_t v158 = swift_release();
        uint64_t v159 = v163;
        __chkstk_darwin(v158);
        *(&v162 - 4) = v159;
        *(&v162 - 3) = v109;
        *(&v162 - 2) = v155;
        *(&v162 - 1) = v157;
        OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_10020EEA8,  &v162 - 6,  v160,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
        sub_100016F9C(v155, v157);
        Class v161 = v167;
        ((void (*)(char *, uint64_t))v183)(v178, v154);
        v182(v161, v159 + qword_100A2A278, v154);
        swift_storeEnumTagMultiPayload(v161, v179, 0LL);
        if (!*(void *)(v149 + 352))
        {
          __break(1u);
          return;
        }

        v187[0] = v159;
        swift_retain();
        dispatch thunk of AsynchronousCache.insert(key:value:)(v161, v187);
        swift_release();
        uint64_t v65 = (uint64_t)v161;
LABEL_14:
        sub_100018C68(v65, type metadata accessor for BeaconSharingSessionContext);
        return;
      }
    }

    else
    {
      uint64_t v113 = v169;
      sub_10001581C(v96, v169, &qword_10099D8A0);
      uint64_t v108 = (uint64_t)v97;
      if (v105(v104, 1LL, v50) != 1)
      {
        uint64_t v132 = v165;
        v177(v165, v104, v50);
        uint64_t v133 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        char v134 = dispatch thunk of static Equatable.== infix(_:_:)(v113, v132, v50, v133);
        uint64_t v107 = v183;
        ((void (*)(char *, uint64_t))v183)(v132, v50);
        sub_100015794(v174, &qword_10099D8A0);
        sub_100015794((uint64_t)v175, &qword_10099D8A0);
        ((void (*)(uint64_t, uint64_t))v107)(v113, v50);
        sub_100015794(v96, &qword_10099D8A0);
        uint64_t v109 = v181;
        if ((v134 & 1) != 0) {
          goto LABEL_37;
        }
        goto LABEL_32;
      }

      sub_100015794(v174, &qword_10099D8A0);
      sub_100015794((uint64_t)v175, &qword_10099D8A0);
      uint64_t v107 = v183;
      ((void (*)(uint64_t, uint64_t))v183)(v113, v50);
    }

    sub_100015794(v96, (uint64_t *)&unk_1009B5370);
    uint64_t v109 = v181;
LABEL_32:
    uint64_t v114 = sub_10001DC4C(v109, v108, type metadata accessor for BeaconSharingSessionContext);
    uint64_t v115 = (os_log_s *)Logger.logObject.getter(v114);
    os_log_type_t v116 = static os_log_type_t.info.getter(v115);
    if (os_log_type_enabled(v115, v116))
    {
      uint64_t v117 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v118 = swift_slowAlloc(32LL, -1LL);
      v187[0] = v118;
      *(_DWORD *)uint64_t v117 = 136315138;
      uint64_t v119 = sub_1001BE7D0();
      uint64_t v186 = sub_1003F11D4(v119, v120, v187);
      uint64_t v109 = v181;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187, v117 + 4, v117 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68(v108, type metadata accessor for BeaconSharingSessionContext);
      _os_log_impl( (void *)&_mh_execute_header,  v115,  v116,  "Accepting incoming %s invitation because it is not this device",  v117,  0xCu);
      swift_arrayDestroy(v118, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v118, -1LL, -1LL);
      swift_slowDealloc(v117, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(v108, type metadata accessor for BeaconSharingSessionContext);
    }

    uint64_t v127 = type metadata accessor for PropertyListEncoder(0LL);
    uint64_t v128 = swift_allocObject(v127, *(unsigned int *)(v127 + 48), *(unsigned __int16 *)(v127 + 52));
    PropertyListEncoder.init()(v128);
    uint64_t v129 = sub_100007864( &qword_1009A4FB0,  type metadata accessor for BeaconSharingSessionContext,  (uint64_t)&unk_1007F4ED0);
    uint64_t v130 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v109, v179, v129);
    uint64_t v131 = v185;
    uint64_t v143 = v130;
    unint64_t v145 = v144;
    uint64_t v146 = swift_release();
    __chkstk_darwin(v146);
    *(&v162 - 4) = v147;
    *(&v162 - 3) = v109;
    *(&v162 - 2) = v143;
    *(&v162 - 1) = v145;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_10020FE2C,  &v162 - 6,  v148,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
    sub_100016F9C(v143, v145);
    ((void (*)(char *, uint64_t))v107)(v178, v131);
    return;
  }

  uint64_t v81 = v181;
  uint64_t v82 = v170;
  sub_10001DC4C(v181, v170, type metadata accessor for BeaconSharingSessionContext);
  uint64_t v83 = swift_bridgeObjectRetain_n(a4, 2LL);
  uint64_t v84 = (void *)a4;
  uint64_t v85 = (os_log_s *)Logger.logObject.getter(v83);
  os_log_type_t v86 = static os_log_type_t.error.getter(v85);
  if (os_log_type_enabled(v85, v86))
  {
    uint64_t v87 = swift_slowAlloc(22LL, -1LL);
    unint64_t v178 = v20;
    uint64_t v88 = v50;
    uint64_t v89 = v87;
    uint64_t v90 = swift_slowAlloc(64LL, -1LL);
    v187[0] = v90;
    *(_DWORD *)uint64_t v89 = 136315394;
    uint64_t v91 = sub_1001BE7D0();
    uint64_t v186 = sub_1003F11D4(v91, v92, v187);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187, v89 + 4, v89 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68(v82, type metadata accessor for BeaconSharingSessionContext);
    *(_WORD *)(v89 + 12) = 2080;
    sub_10057EEA4(v177, (uint64_t)v182, v84);
    uint64_t v186 = sub_1003F11D4(v93, v94, v187);
    uint64_t v81 = v181;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187, v89 + 14, v89 + 22);
    swift_bridgeObjectRelease_n(v84, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v85,  v86,  "Declining incoming %s invitation because not from a family member: %s",  (uint8_t *)v89,  0x16u);
    swift_arrayDestroy(v90, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v90, -1LL, -1LL);
    uint64_t v95 = v89;
    uint64_t v50 = v88;
    unint64_t v20 = v178;
    swift_slowDealloc(v95, -1LL, -1LL);
  }

  else
  {
    sub_100018C68(v82, type metadata accessor for BeaconSharingSessionContext);

    swift_bridgeObjectRelease_n(v84, 2LL);
  }

  uint64_t v110 = type metadata accessor for PropertyListEncoder(0LL);
  uint64_t v111 = swift_allocObject(v110, *(unsigned int *)(v110 + 48), *(unsigned __int16 *)(v110 + 52));
  PropertyListEncoder.init()(v111);
  uint64_t v112 = sub_100007864( &qword_1009A4FB0,  type metadata accessor for BeaconSharingSessionContext,  (uint64_t)&unk_1007F4ED0);
  uint64_t v121 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v81, v179, v112);
  unint64_t v123 = v122;
  uint64_t v124 = swift_release();
  uint64_t v125 = v163;
  __chkstk_darwin(v124);
  *(&v162 - 4) = v125;
  *(&v162 - 3) = v81;
  *(&v162 - 2) = v121;
  *(&v162 - 1) = v123;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_10020EE78,  &v162 - 6,  v126,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
  sub_100016F9C(v121, v123);
  (*(void (**)(char *, uint64_t))(v180 + 8))(v20, v50);
}

void sub_1001E3E58(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B178 != -1) {
    swift_once(&qword_10099B178, sub_100189C64);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  sub_10000A720(v10, (uint64_t)qword_100A2A290);
  uint64_t v11 = swift_retain_n(a1, 2LL);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter(v12);
  BOOL v14 = os_log_type_enabled(v12, v13);
  uint64_t v37 = v7;
  uint64_t v38 = v6;
  uint64_t v36 = v9;
  if (v14)
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v16;
    uint64_t v34 = v5;
    *(_DWORD *)uint64_t v15 = 136446210;
    swift_retain();
    uint64_t v17 = sub_1001DFE98();
    uint64_t v35 = v3;
    uint64_t v18 = v2;
    unint64_t v20 = v19;
    swift_release();
    uint64_t v40 = (void *)sub_1003F11D4(v17, v20, aBlock);
    uint64_t v5 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, aBlock, v15 + 4, v15 + 12);
    swift_release_n(a1, 2LL);
    uint64_t v2 = v18;
    uint64_t v3 = v35;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Session invalidated: %{public}s", v15, 0xCu);
    swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {

    swift_release_n(a1, 2LL);
  }

  uint64_t v21 = v39;
  if (*(void *)(v39 + 352))
  {
    aBlock[0] = a1;
    uint64_t v22 = sub_1000372EC(&qword_1009A61D0, &qword_1009A61D8, (uint64_t)&unk_1007EFBF8);
    swift_retain();
    AsynchronousCache<>.removeCachedValue(_:)(aBlock, v22);
    swift_release();
    uint64_t v23 = *(void **)(v21 + 232);
    uint64_t v24 = swift_allocObject(&unk_100949710, 24LL, 7LL);
    swift_weakInit(v24 + 16, v21);
    uint64_t v25 = swift_allocObject(&unk_100949DF0, 32LL, 7LL);
    *(void *)(v25 + swift_weakDestroy(v0 + 16) = v24;
    *(void *)(v25 + 24) = a1;
    void aBlock[4] = (uint64_t)sub_10020EE70;
    void aBlock[5] = v25;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1001C31E8;
    aBlock[3] = (uint64_t)&unk_100949E08;
    uint64_t v26 = _Block_copy(aBlock);
    swift_retain();
    id v27 = v23;
    uint64_t v28 = swift_retain();
    uint64_t v29 = v36;
    static DispatchQoS.unspecified.getter(v28);
    uint64_t v40 = _swiftEmptyArrayStorage;
    uint64_t v30 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v31 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v32 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v31, v32, v2, v30);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v29, v5, v26);
    _Block_release(v26);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v29, v38);
    swift_release();
    swift_release();
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1001E4274()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = *(void **)(v1 + 48);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) != 0)
  {
    uint64_t v12 = *(void *)(v1 + 40);
    if (v12)
    {
      uint64_t v13 = *(void *)(v12 + 40);
      swift_retain();
      OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_10020E2A0,  v12,  v13,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
    }

    else
    {
      static DispatchQoS.background.getter(result);
      uint64_t v14 = swift_allocObject(&unk_100949710, 24LL, 7LL);
      swift_weakInit(v14 + 16, v1);
      uint64_t v15 = swift_allocObject(&unk_100949710, 24LL, 7LL);
      swift_weakInit(v15 + 16, v1);
      uint64_t v16 = type metadata accessor for XPCActivity();
      swift_allocObject(v16, 112LL, 7LL);
      uint64_t v17 = sub_10045AD78( 0xD000000000000034LL,  (void *)0x8000000100859CE0LL,  (uint64_t)v4,  (uint64_t)sub_10020E290,  v14,  (uint64_t)sub_10020E298,  v15);
      swift_release();
      swift_release();
      *(void *)(v1 + 4sub_100032838(0, 7LL, 0) = v17;
    }

    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1001E4468(uint64_t a1)
{
  uint64_t v2 = static os_log_type_t.default.getter(a1);
  if (qword_10099B700 != -1) {
    swift_once(&qword_10099B700, sub_100651100);
  }
  uint64_t result = os_log(_:dso:log:_:_:)( v2,  &_mh_execute_header,  qword_100A2B010,  "Clearing any registered XPC activities",  38LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    *(void *)(a1 + 4sub_100032838(0, 7LL, 0) = 0LL;
    uint64_t v5 = *(dispatch_queue_s **)(v4 + 16);
    uint64_t v6 = swift_allocObject(&unk_1009496C0, 32LL, 7LL);
    *(void *)(v6 + swift_weakDestroy(v0 + 16) = sub_10020D094;
    *(void *)(v6 + 24) = v4;
    v8[4] = sub_100095030;
    v8[5] = v6;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 1107296256LL;
    v8[2] = sub_100025BD4;
    v8[3] = &unk_1009496D8;
    uint64_t v7 = _Block_copy(v8);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v5, v7);
    _Block_release(v7);
    LOBYTE(v5) = swift_isEscapingClosureAtFileLocation(v6, "", 90LL, 53LL, 20LL, 1LL);
    swift_release_n(v4, 2LL);
    uint64_t result = swift_release();
  }

  return result;
}

uint64_t sub_1001E45E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v68 = a1;
  sub_100015750(a1, (uint64_t)v74, &qword_1009AECF0);
  uint64_t v66 = v74[0];
  uint64_t v67 = v74[1];
  uint64_t v65 = v74[2];
  uint64_t v63 = v74[3];
  uint64_t v64 = v74[4];
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v69 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_1009A6108);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for ShareRecord(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  unint64_t v20 = (char *)&v60 - v19;
  a2 += 16LL;
  swift_beginAccess(a2, v73, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (!result)
  {
    uint64_t v28 = 0LL;
    uint64_t v29 = 0LL;
    uint64_t v30 = 0LL;
    uint64_t v31 = 0LL;
    uint64_t v32 = 2LL;
LABEL_18:
    *a3 = v32;
    a3[1] = v28;
    a3[2] = v29;
    a3[3] = v30;
    a3[4] = v31;
    return result;
  }

  uint64_t v70 = v7;
  uint64_t v60 = v18;
  uint64_t v71 = result;
  os_log_type_t v72 = v20;
  swift_retain();
  uint64_t v22 = sub_100506C30();
  *(void *)uint64_t v75 = _swiftEmptyDictionarySingleton;
  uint64_t v23 = *((void *)v22 + 2);
  if (v23)
  {
    uint64_t v62 = v9;
    uint64_t v61 = v8;
    uint64_t v24 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
    uint64_t v25 = (uint64_t)&v22[(*(unsigned __int8 *)(v24 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80)];
    uint64_t v26 = *(void *)(v24 + 72);
    swift_bridgeObjectRetain(v22);
    do
    {
      sub_1005089B8(v75, v25);
      v25 += v26;
      --v23;
    }

    while (v23);
    swift_release();
    swift_bridgeObjectRelease_n(v22, 2LL);
    id v27 = *(void **)v75;
    uint64_t v8 = v61;
    uint64_t v9 = v62;
  }

  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    id v27 = _swiftEmptyDictionarySingleton;
  }

  swift_bridgeObjectRetain(v27);
  sub_1001DC95C(v33);
  uint64_t v35 = v34;
  swift_bridgeObjectRelease();
  *(void *)uint64_t v75 = v35;
  swift_bridgeObjectRetain(v35);
  sub_1001FA798(v75);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(*(void *)v75 + 16LL))
  {
    sub_10001DC4C( *(void *)v75 + ((*(unsigned __int8 *)(v15 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80)),  (uint64_t)v13,  type metadata accessor for ShareRecord);
    uint64_t v36 = 0LL;
  }

  else
  {
    uint64_t v36 = 1LL;
  }

  uint64_t v37 = (uint64_t)v72;
  uint64_t v38 = (uint64_t)v70;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, v36, 1LL, v14);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14) == 1)
  {
    uint64_t v39 = &qword_1009A6108;
    uint64_t v40 = (uint64_t)v13;
LABEL_15:
    uint64_t v41 = sub_100015794(v40, v39);
    uint64_t v42 = static os_log_type_t.default.getter(v41);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v32 = 2LL;
    os_log(_:dso:log:_:_:)( v42,  &_mh_execute_header,  qword_100A2B010,  "No expiring shares",  18LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t result = swift_release();
    uint64_t v28 = 0LL;
    uint64_t v29 = 0LL;
    uint64_t v30 = 0LL;
    uint64_t v31 = 0LL;
    goto LABEL_18;
  }

  sub_10002218C((uint64_t)v13, v37, type metadata accessor for ShareRecord);
  sub_10001581C(v37 + *(int *)(v14 + 32), v38, (uint64_t *)&unk_10099D720);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v38, 1LL, v8) == 1)
  {
    sub_100018C68(v37, type metadata accessor for ShareRecord);
    uint64_t v39 = (uint64_t *)&unk_10099D720;
    uint64_t v40 = v38;
    goto LABEL_15;
  }

  uint64_t v43 = v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v69, v38, v8);
  uint64_t v44 = sub_100015750(v68, (uint64_t)v75, &qword_1009AECF0);
  if (v75[0] != 2LL)
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v43, v8);
    uint64_t result = sub_100018C68(v37, type metadata accessor for ShareRecord);
    uint64_t v28 = v67;
    uint64_t v32 = v66;
    uint64_t v29 = v65;
    uint64_t v31 = v64;
    uint64_t v30 = v63;
    goto LABEL_18;
  }

  uint64_t v62 = v9;
  LODWORD(v7sub_100032838(0, 7LL, 0) = static os_log_type_t.default.getter(v44);
  if (qword_10099B700 != -1) {
    swift_once(&qword_10099B700, sub_100651100);
  }
  uint64_t v45 = qword_100A2B010;
  uint64_t v46 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v47 = swift_allocObject(v46, 112LL, 7LL);
  *(_OWORD *)(v47 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v48 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v49 = v8;
  uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter(v8, v48);
  uint64_t v52 = v51;
  *(void *)(v47 + 56) = &type metadata for String;
  unint64_t v53 = sub_1000226F4();
  *(void *)(v47 + 64) = v53;
  *(void *)(v47 + 32) = v50;
  *(void *)(v47 + 4sub_100032838(0, 7LL, 0) = v52;
  uint64_t v54 = (uint64_t)v72;
  uint64_t v55 = (uint64_t)v60;
  sub_10001DC4C((uint64_t)v72, (uint64_t)v60, type metadata accessor for ShareRecord);
  uint64_t v56 = String.init<A>(describing:)(v55, v14);
  *(void *)(v47 + 96) = &type metadata for String;
  *(void *)(v47 + 104) = v53;
  *(void *)(v47 + 72) = v56;
  *(void *)(v47 + 8sub_100032838(0, 7LL, 0) = v57;
  os_log(_:dso:log:_:_:)(v70, &_mh_execute_header, v45, "Next share expires at %@: %@", 28LL, 2LL, v47);
  uint64_t v58 = swift_bridgeObjectRelease();
  double v59 = Date.timeIntervalSinceNow.getter(v58);
  swift_release();
  if ((~*(void *)&v59 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }

  if (v59 <= -9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  if (v59 < 9.22337204e18)
  {
    uint64_t v28 = (uint64_t)v59;
    (*(void (**)(char *, uint64_t))(v62 + 8))(v69, v49);
    uint64_t result = sub_100018C68(v54, type metadata accessor for ShareRecord);
    uint64_t v31 = 707LL;
    uint64_t v29 = 60LL;
    uint64_t v32 = 1LL;
    uint64_t v30 = 1LL;
    goto LABEL_18;
  }

uint64_t sub_1001E4CB8(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5 = a4 + 16;
  swift_beginAccess(a4 + 16, v12, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v5);
  if (result)
  {
    uint64_t v7 = result;
    Transaction.capture()();
    if (a3 == 3)
    {
      sub_100458824();
    }

    else if (a3 == 2)
    {
      uint64_t v8 = *(dispatch_queue_s **)(v7 + 48);
      uint64_t v9 = swift_allocObject(&unk_100949B70, 32LL, 7LL);
      *(void *)(v9 + swift_weakDestroy(v0 + 16) = sub_10020E2B8;
      *(void *)(v9 + 24) = v7;
      void aBlock[4] = sub_100154688;
      void aBlock[5] = v9;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_100025BD4;
      aBlock[3] = &unk_100949B88;
      uint64_t v10 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v8, v10);
      _Block_release(v10);
      LOBYTE(v8) = swift_isEscapingClosureAtFileLocation(v9, "", 113LL, 641LL, 30LL, 1LL);
      swift_release();
      uint64_t result = swift_release();
      if ((v8 & 1) != 0)
      {
        __break(1u);
        return result;
      }

      sub_100458840();
    }

    return swift_release();
  }

  return result;
}

uint64_t sub_1001E4E28(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v2);
  uint64_t v65 = (uint64_t)v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for ShareRecord(0LL);
  uint64_t v61 = *(void *)(v4 - 8);
  uint64_t v5 = *(void *)(v61 + 64);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v57 = (uint64_t)v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v64 = (uint64_t)v50 - v7;
  uint64_t v66 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v66 - 8);
  uint64_t v9 = __chkstk_darwin(v66);
  uint64_t v11 = (char *)v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v62 = (uint64_t)v50 - v12;
  uint64_t v59 = a1;
  uint64_t v13 = sub_100506C30();
  v67[0] = _swiftEmptyDictionarySingleton;
  uint64_t v14 = *((void *)v13 + 2);
  uint64_t v63 = v11;
  if (v14)
  {
    uint64_t v60 = v4;
    uint64_t v15 = v8;
    uint64_t v16 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
    uint64_t v17 = (uint64_t)&v13[(*(unsigned __int8 *)(v16 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)];
    uint64_t v18 = *(void *)(v16 + 72);
    swift_bridgeObjectRetain(v13);
    do
    {
      sub_1005089B8(v67, v17);
      v17 += v18;
      --v14;
    }

    while (v14);
    swift_bridgeObjectRelease_n(v13, 2LL);
    uint64_t v19 = (void *)v67[0];
    uint64_t v8 = v15;
    uint64_t v4 = v60;
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = _swiftEmptyDictionarySingleton;
  }

  swift_bridgeObjectRetain(v19);
  sub_1001DC95C(v20);
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  v67[0] = v22;
  swift_bridgeObjectRetain(v22);
  sub_1001FA798(v67);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = v67[0];
  static Date.trustedNow.getter(v62);
  dispatch_group_t v58 = dispatch_group_create();
  uint64_t v24 = static os_log_type_t.default.getter(v58);
  if (qword_10099B700 != -1) {
    swift_once(&qword_10099B700, sub_100651100);
  }
  os_log(_:dso:log:_:_:)( v24,  &_mh_execute_header,  qword_100A2B010,  "Processing expired shares",  25LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v25 = *(void *)(v23 + 16);
  uint64_t v26 = v64;
  if (v25)
  {
    uint64_t v27 = *(unsigned __int8 *)(v61 + 80);
    v50[1] = v23;
    uint64_t v28 = v23 + ((v27 + 32) & ~v27);
    uint64_t v29 = *(void *)(v61 + 72);
    uint64_t v54 = v27 | 7;
    uint64_t v55 = (v27 + 16) & ~v27;
    uint64_t v30 = v5 + v55;
    uint64_t v31 = v29;
    unint64_t v53 = (v30 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v52 = v53 + 8;
    __int128 v51 = xmmword_1007E67D0;
    uint64_t v56 = v29;
    do
    {
      sub_10001DC4C(v28, v26, type metadata accessor for ShareRecord);
      uint64_t v32 = v65;
      sub_10001581C(v26 + *(int *)(v4 + 32), v65, (uint64_t *)&unk_10099D720);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v32, 1LL, v66) == 1)
      {
        sub_100018C68(v26, type metadata accessor for ShareRecord);
        sub_100015794(v65, (uint64_t *)&unk_10099D720);
      }

      else
      {
        uint64_t v33 = v63;
        uint64_t v34 = v66;
        (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v63, v65, v66);
        uint64_t v35 = sub_100007864( &qword_1009A1280,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
        uint64_t v36 = dispatch thunk of static Comparable.< infix(_:_:)(v62, v33, v34, v35);
        if ((v36 & 1) != 0)
        {
          (*(void (**)(char *, uint64_t))(v8 + 8))(v33, v66);
        }

        else
        {
          LODWORD(v6sub_100032838(0, 7LL, 0) = static os_log_type_t.default.getter(v36);
          uint64_t v61 = qword_100A2B010;
          uint64_t v37 = sub_100004AEC((uint64_t *)&unk_10099D740);
          uint64_t v38 = swift_allocObject(v37, 72LL, 7LL);
          *(_OWORD *)(v38 + swift_weakDestroy(v0 + 16) = v51;
          uint64_t v39 = v57;
          sub_10001DC4C(v26, v57, type metadata accessor for ShareRecord);
          uint64_t v40 = v4;
          uint64_t v41 = v8;
          uint64_t v42 = String.init<A>(describing:)(v39, v4);
          uint64_t v44 = v43;
          *(void *)(v38 + 56) = &type metadata for String;
          *(void *)(v38 + 64) = sub_1000226F4();
          *(void *)(v38 + 32) = v42;
          *(void *)(v38 + 4sub_100032838(0, 7LL, 0) = v44;
          uint64_t v8 = v41;
          uint64_t v4 = v40;
          os_log(_:dso:log:_:_:)(v60, &_mh_execute_header, v61, "Expired share: %@", 17LL, 2LL, v38);
          swift_bridgeObjectRelease();
          dispatch_group_t v45 = v58;
          dispatch_group_enter(v58);
          sub_10001DC4C(v64, v39, type metadata accessor for ShareRecord);
          uint64_t v46 = swift_allocObject(&unk_100949BC0, v52, v54);
          sub_10002218C(v39, v46 + v55, type metadata accessor for ShareRecord);
          *(void *)(v46 + v53) = v45;
          uint64_t v47 = v45;
          uint64_t v31 = v56;
          sub_1001DD324(v64, (uint64_t)sub_10020E408, v46);
          uint64_t v26 = v64;
          swift_release();
          (*(void (**)(char *, uint64_t))(v41 + 8))(v63, v66);
        }

        sub_100018C68(v26, type metadata accessor for ShareRecord);
      }

      v28 += v31;
      --v25;
    }

    while (v25);
  }

  swift_release();
  dispatch_group_t v48 = v58;
  OS_dispatch_group.wait()();
  sub_1001E4274();

  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v62, v66);
}

void sub_1001E53BC(uint64_t a1, uint64_t a2, dispatch_group_s *a3)
{
  uint64_t v6 = type metadata accessor for ShareRecord(0LL);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    uint64_t v10 = swift_errorRetain(a1);
    uint64_t v11 = static os_log_type_t.error.getter(v10);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v12 = qword_100A2B010;
    uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v14 = swift_allocObject(v13, 112LL, 7LL);
    *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    sub_10001DC4C(a2, (uint64_t)v9, type metadata accessor for ShareRecord);
    uint64_t v15 = String.init<A>(describing:)(v9, v6);
    uint64_t v17 = v16;
    *(void *)(v14 + 56) = &type metadata for String;
    unint64_t v18 = sub_1000226F4();
    *(void *)(v14 + 64) = v18;
    *(void *)(v14 + 32) = v15;
    *(void *)(v14 + 4sub_100032838(0, 7LL, 0) = v17;
    uint64_t v30 = a1;
    swift_errorRetain(a1);
    uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v20 = String.init<A>(describing:)(&v30, v19);
    *(void *)(v14 + 96) = &type metadata for String;
    *(void *)(v14 + 104) = v18;
    *(void *)(v14 + 72) = v20;
    *(void *)(v14 + 8sub_100032838(0, 7LL, 0) = v21;
    os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "Error expiring share %@: %@", 27LL, 2LL, v14);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
  }

  else
  {
    uint64_t v22 = static os_log_type_t.default.getter(v7);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v23 = qword_100A2B010;
    uint64_t v24 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v25 = swift_allocObject(v24, 72LL, 7LL);
    *(_OWORD *)(v25 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    sub_10001DC4C(a2, (uint64_t)v9, type metadata accessor for ShareRecord);
    uint64_t v26 = String.init<A>(describing:)(v9, v6);
    uint64_t v28 = v27;
    *(void *)(v25 + 56) = &type metadata for String;
    *(void *)(v25 + 64) = sub_1000226F4();
    *(void *)(v25 + 32) = v26;
    *(void *)(v25 + 4sub_100032838(0, 7LL, 0) = v28;
    os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v23, "Successfully expired share: %@", 30LL, 2LL, v25);
    swift_bridgeObjectRelease();
  }

  dispatch_group_leave(a3);
}

uint64_t sub_1001E5630()
{
  uint64_t v1 = v0;
  uint64_t v39 = type metadata accessor for StableIdentifier(0LL);
  uint64_t v2 = __chkstk_darwin(v39);
  uint64_t v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v45 = (uint64_t)&v36 - v6;
  __chkstk_darwin(v5);
  uint64_t v41 = (char *)&v36 - v7;
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v43 = *(void *)(v8 - 8);
  uint64_t v44 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v46 = (uint64_t)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v36 - v11;
  uint64_t result = (uint64_t)sub_100506C30();
  uint64_t v14 = result;
  uint64_t v15 = _swiftEmptyArrayStorage;
  dispatch_group_t v48 = _swiftEmptyArrayStorage;
  uint64_t v42 = *(void *)(result + 16);
  if (!v42)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    swift_retain();
    uint64_t v35 = sub_1001FEE68((uint64_t)v15, v1);
    swift_release();
    swift_release();
    return (uint64_t)v35;
  }

  unint64_t v16 = 0LL;
  uint64_t v40 = v4;
  uint64_t v37 = v0;
  uint64_t v38 = v4 + 8;
  uint64_t v17 = _swiftEmptyArrayStorage;
  uint64_t v18 = v39;
  uint64_t v19 = (uint64_t)v41;
  while (v16 < *(void *)(v14 + 16))
  {
    uint64_t v20 = v14;
    unint64_t v21 = (*(unsigned __int8 *)(v43 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
    uint64_t v47 = *(void *)(v43 + 72);
    sub_10001DC4C(v14 + v21 + v47 * v16, (uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
    uint64_t v22 = (uint64_t)&v12[*(int *)(v44 + 24)];
    sub_10001DC4C(v22, v19, type metadata accessor for StableIdentifier);
    uint64_t v23 = v18;
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v19, v18);
    sub_100018C68(v19, type metadata accessor for StableIdentifier);
    uint64_t v25 = v22;
    uint64_t v26 = v45;
    sub_10001DC4C(v25, v45, type metadata accessor for StableIdentifier);
    uint64_t v27 = v26;
    if (EnumCaseMultiPayload == 1)
    {
      sub_100018C68(v26, type metadata accessor for StableIdentifier);
      uint64_t v14 = v20;
      uint64_t v28 = v47;
      goto LABEL_13;
    }

    uint64_t v29 = (uint64_t)v40;
    sub_10001DC4C(v27, (uint64_t)v40, type metadata accessor for StableIdentifier);
    int v30 = swift_getEnumCaseMultiPayload(v29, v23);
    if (v30 == 2)
    {
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v31 = v45;
      uint64_t v14 = v20;
LABEL_12:
      uint64_t v28 = v47;
      swift_bridgeObjectRelease();
      uint64_t v32 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, uint64_t))(*(void *)(v32 - 8) + 8LL))(v40, v32);
      sub_100018C68(v31, type metadata accessor for StableIdentifier);
      uint64_t v17 = v48;
LABEL_13:
      sub_10002218C((uint64_t)v12, v46, type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0) {
        sub_1000328A4(0, v17[2] + 1LL, 1);
      }
      uint64_t v17 = v48;
      unint64_t v34 = v48[2];
      unint64_t v33 = v48[3];
      if (v34 >= v33 >> 1)
      {
        sub_1000328A4(v33 > 1, v34 + 1, 1);
        uint64_t v17 = v48;
      }

      void v17[2] = v34 + 1;
      uint64_t result = sub_10002218C(v46, (uint64_t)v17 + v21 + v34 * v28, type metadata accessor for OwnedBeaconRecord);
      uint64_t v18 = v39;
      goto LABEL_4;
    }

    uint64_t v18 = v23;
    uint64_t v14 = v20;
    if (v30 == 3)
    {
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v31 = v45;
      goto LABEL_12;
    }

    sub_100018C68((uint64_t)v40, type metadata accessor for StableIdentifier);
    sub_100018C68(v45, type metadata accessor for StableIdentifier);
    uint64_t result = sub_100018C68((uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
LABEL_4:
    if (v42 == ++v16)
    {
      uint64_t v15 = v48;
      uint64_t v1 = v37;
      goto LABEL_19;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1001E5A68(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v2);
  uint64_t v38 = &v35[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v4 = type metadata accessor for ShareInstruction(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = &v35[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = dispatch_group_create();
  uint64_t v11 = swift_allocObject(&unk_100948A68, 17LL, 7LL);
  *(_BYTE *)(v11 + swift_weakDestroy(v0 + 16) = 0;
  uint64_t v39 = (_BYTE *)(v11 + 16);
  uint64_t v12 = a1 + *(int *)(v4 + 24);
  uint64_t v13 = type metadata accessor for OwnedBeaconRecord(0LL);
  sub_10001DC4C(v12 + *(int *)(v13 + 24), (uint64_t)v9, type metadata accessor for StableIdentifier);
  BOOL v36 = swift_getEnumCaseMultiPayload(v9, v7) != 0;
  sub_100018C68((uint64_t)v9, type metadata accessor for StableIdentifier);
  dispatch_group_enter(v10);
  uint64_t v14 = *(void *)(v37 + 24);
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009B1370);
  uint64_t v16 = swift_allocObject(v15, 56LL, 7LL);
  *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v17 = a1 + *(int *)(v4 + 28);
  uint64_t v18 = *(void *)(v17 + 8);
  uint64_t v19 = *(void *)(v17 + 16);
  *(_BYTE *)(v16 + 32) = *(_BYTE *)v17;
  *(void *)(v16 + 4sub_100032838(0, 7LL, 0) = v18;
  *(void *)(v16 + 48) = v19;
  sub_10001DC4C(a1, (uint64_t)&v35[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)], type metadata accessor for ShareInstruction);
  uint64_t v20 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v21 = (v20 + 32) & ~v20;
  uint64_t v22 = swift_allocObject(&unk_100949C38, v21 + v6, v20 | 7);
  *(void *)(v22 + swift_weakDestroy(v0 + 16) = v10;
  *(void *)(v22 + 24) = v11;
  sub_10002218C( (uint64_t)&v35[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)],  v22 + v21,  type metadata accessor for ShareInstruction);
  uint64_t v23 = swift_allocObject(&unk_100949C60, 33LL, 7LL);
  *(void *)(v23 + swift_weakDestroy(v0 + 16) = sub_10020E970;
  *(void *)(v23 + 24) = v22;
  *(_BYTE *)(v23 + 32) = v36;
  uint64_t v24 = type metadata accessor for TaskPriority(0LL);
  uint64_t v25 = (uint64_t)v38;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56LL))(v38, 1LL, 1LL, v24);
  uint64_t v26 = (void *)swift_allocObject(&unk_100949C88, 64LL, 7LL);
  _OWORD v26[2] = 0LL;
  v26[3] = 0LL;
  void v26[4] = sub_10020E9E4;
  v26[5] = v23;
  v26[6] = v14;
  v26[7] = v16;
  swift_bridgeObjectRetain(v19);
  uint64_t v27 = v10;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain(v16);
  sub_1003EDB00(v25, (uint64_t)&unk_1009A6158, (uint64_t)v26);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  OS_dispatch_group.wait()();
  uint64_t v28 = v39;
  swift_beginAccess(v39, v42, 0LL, 0LL);
  if (*v28 == 1)
  {
    swift_release();

    return 0LL;
  }

  else
  {
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v31 = v30;
    uint64_t v40 = 8LL;
    unint64_t v32 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v33 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    _BridgedStoredNSError.init(_:userInfo:)(&v41, &v40, v32, v31, v33);

    uint64_t v29 = v41;
    swift_release();
  }

  return v29;
}

void sub_1001E5E1C(uint64_t a1, char a2, dispatch_group_s *a3, uint64_t a4, uint64_t a5)
{
  if ((a2 & 1) != 0) {
    goto LABEL_7;
  }
  uint64_t v9 = type metadata accessor for ShareInstruction(0LL);
  if (!*(void *)(a1 + 16)) {
    goto LABEL_7;
  }
  uint64_t v10 = a5 + *(int *)(v9 + 28);
  uint64_t v12 = *(void *)(v10 + 8);
  uint64_t v11 = *(void *)(v10 + 16);
  unsigned __int8 v13 = *(_BYTE *)v10;
  swift_bridgeObjectRetain(v11);
  unint64_t v14 = sub_10030D3A8(v13, v12, v11);
  if ((v15 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }

  char v16 = *(_BYTE *)(*(void *)(a1 + 56) + v14);
  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0)
  {
LABEL_7:
    char v17 = 0;
    goto LABEL_8;
  }

  char v17 = 1;
LABEL_8:
  swift_beginAccess(a4 + 16, v18, 1LL, 0LL);
  *(_BYTE *)(a4 + swift_weakDestroy(v0 + 16) = v17;
  dispatch_group_leave(a3);
}

uint64_t sub_1001E5EE4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v5 = v57;
  uint64_t v6 = sub_1001E5A68(a1);
  if (!v6)
  {
    uint64_t v8 = type metadata accessor for ShareInstruction(0LL);
    uint64_t v55 = a1 + *(int *)(v8 + 24);
    uint64_t v9 = sub_1005777D8();
    uint64_t v10 = __chkstk_darwin(v9);
    *(&v55 - 2) = a1;
    swift_bridgeObjectRetain(v10);
    uint64_t v11 = *(void *)(sub_100023D48((uint64_t (*)(char *))sub_10020E63C, &v55 - 4, (uint64_t)v9) + 16);
    swift_bridgeObjectRelease();
    if (v11)
    {
      swift_bridgeObjectRelease();
      uint64_t v12 = swift_bridgeObjectRelease();
      uint64_t v13 = static os_log_type_t.default.getter(v12);
      if (qword_10099B700 != -1) {
        swift_once(&qword_10099B700, sub_100651100);
      }
      uint64_t v14 = qword_100A2B010;
      uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v16 = swift_allocObject(v15, 112LL, 7LL);
      *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
      sub_10001DC4C(v55, (uint64_t)v4, type metadata accessor for OwnedBeaconRecord);
      uint64_t v17 = String.init<A>(describing:)(v4, v2);
      uint64_t v19 = v18;
      *(void *)(v16 + 56) = &type metadata for String;
      unint64_t v20 = sub_1000226F4();
      *(void *)(v16 + 64) = v20;
      *(void *)(v16 + 32) = v17;
      *(void *)(v16 + 4sub_100032838(0, 7LL, 0) = v19;
      uint64_t v21 = a1 + *(int *)(v8 + 28);
      uint64_t v23 = *(void *)(v21 + 8);
      uint64_t v22 = *(void *)(v21 + 16);
      *(void *)(v16 + 96) = &type metadata for String;
      *(void *)(v16 + 104) = v20;
      *(void *)(v16 + 72) = v23;
      *(void *)(v16 + 8sub_100032838(0, 7LL, 0) = v22;
      *(void *)&double v24 = swift_bridgeObjectRetain(v22).n128_u64[0];
      os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "Already sharing %@ with %@", 26LL, 2LL, v16, v24);
      swift_bridgeObjectRelease();
      type metadata accessor for SPOwnerSessionError(0LL);
      uint64_t v26 = v25;
      uint64_t v27 = 1LL;
    }

    else
    {
      uint64_t v28 = v9[2];
      swift_bridgeObjectRelease();
      uint64_t v29 = sub_1006A131C(v5);
      if (v28 >= v29)
      {
        uint64_t v33 = v29;
        uint64_t v34 = swift_bridgeObjectRelease();
        uint64_t v35 = static os_log_type_t.error.getter(v34);
        if (qword_10099B700 != -1) {
          swift_once(&qword_10099B700, sub_100651100);
        }
        uint64_t v36 = qword_100A2B010;
        uint64_t v37 = sub_100004AEC((uint64_t *)&unk_10099D740);
        uint64_t v38 = swift_allocObject(v37, 152LL, 7LL);
        *(_OWORD *)(v38 + swift_weakDestroy(v0 + 16) = xmmword_1007E4050;
        sub_10001DC4C(v55, (uint64_t)v4, type metadata accessor for OwnedBeaconRecord);
        uint64_t v39 = String.init<A>(describing:)(v4, v2);
        uint64_t v41 = v40;
        *(void *)(v38 + 56) = &type metadata for String;
        unint64_t v42 = sub_1000226F4();
        *(void *)(v38 + 32) = v39;
        *(void *)(v38 + 4sub_100032838(0, 7LL, 0) = v41;
        *(void *)(v38 + 96) = &type metadata for Int;
        *(void *)(v38 + 104) = &protocol witness table for Int;
        *(void *)(v38 + 64) = v42;
        *(void *)(v38 + 72) = v28;
        *(void *)(v38 + 136) = &type metadata for Int;
        *(void *)(v38 + 144) = &protocol witness table for Int;
        *(void *)(v38 + 112) = v33;
        os_log(_:dso:log:_:_:)( v35,  &_mh_execute_header,  v36,  "Unable to share beacon %@ (%i / %i) [per beacon]",  48LL,  2LL,  v38);
        swift_bridgeObjectRelease();
        type metadata accessor for SPOwnerSessionError(0LL);
        uint64_t v26 = v43;
        uint64_t v27 = 9LL;
      }

      else
      {
        uint64_t v30 = sub_1006A1330(v5);
        swift_bridgeObjectRelease();
        uint64_t v31 = sub_1001E5630();
        uint64_t v32 = *(void *)(v31 + 16);
        if (v32 < v30)
        {
          swift_bridgeObjectRelease();
          return 0LL;
        }

        uint64_t v44 = static os_log_type_t.error.getter(v31);
        if (qword_10099B700 != -1) {
          swift_once(&qword_10099B700, sub_100651100);
        }
        uint64_t v45 = qword_100A2B010;
        uint64_t v46 = sub_100004AEC((uint64_t *)&unk_10099D740);
        uint64_t v47 = swift_allocObject(v46, 152LL, 7LL);
        *(_OWORD *)(v47 + swift_weakDestroy(v0 + 16) = xmmword_1007E4050;
        sub_10001DC4C(v55, (uint64_t)v4, type metadata accessor for OwnedBeaconRecord);
        uint64_t v48 = String.init<A>(describing:)(v4, v2);
        uint64_t v50 = v49;
        *(void *)(v47 + 56) = &type metadata for String;
        *(void *)(v47 + 64) = sub_1000226F4();
        *(void *)(v47 + 32) = v48;
        *(void *)(v47 + 4sub_100032838(0, 7LL, 0) = v50;
        swift_bridgeObjectRelease();
        *(void *)(v47 + 96) = &type metadata for Int;
        *(void *)(v47 + 104) = &protocol witness table for Int;
        *(void *)(v47 + 72) = v32;
        *(void *)(v47 + 136) = &type metadata for Int;
        *(void *)(v47 + 144) = &protocol witness table for Int;
        *(void *)(v47 + 112) = v30;
        os_log(_:dso:log:_:_:)( v44,  &_mh_execute_header,  v45,  "Unable to share beacon %@ (%i / %i)  [global]",  45LL,  2LL,  v47);
        swift_bridgeObjectRelease();
        type metadata accessor for SPOwnerSessionError(0LL);
        uint64_t v26 = v51;
        uint64_t v27 = 10LL;
      }
    }

    uint64_t v56 = v27;
    unint64_t v52 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v53 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    _BridgedStoredNSError.init(_:userInfo:)(&v57, &v56, v52, v26, v53);
    return v57;
  }

  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  return v7;
}

BOOL sub_1001E6430(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShareRecord(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = (unsigned __int8 *)(a1 + *(int *)(v5 + 36));
  int v9 = *v8;
  uint64_t v10 = *((void *)v8 + 1);
  uint64_t v11 = *((void *)v8 + 2);
  uint64_t v12 = (unsigned __int8 *)(a2 + *(int *)(type metadata accessor for ShareInstruction(0LL) + 28));
  if (v9 == *v12)
  {
    uint64_t v13 = *((void *)v12 + 1);
    uint64_t v14 = *((void *)v12 + 2);
    if (v10 == v13 && v11 == v14)
    {
      sub_10001DC4C(a1, (uint64_t)v7, type metadata accessor for ShareRecord);
    }

    else
    {
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v13, v14, 0LL);
      sub_10001DC4C(a1, (uint64_t)v7, type metadata accessor for ShareRecord);
      BOOL v17 = 0LL;
      if ((v16 & 1) == 0) {
        goto LABEL_14;
      }
    }

    uint64_t v18 = &v7[*(int *)(v4 + 40)];
    uint64_t v20 = *(void *)v18;
    unint64_t v19 = *((void *)v18 + 1);
    uint64_t v21 = v20 & 0xFFFFFFFFFFFFLL;
    if ((v19 & 0x2000000000000000LL) != 0) {
      uint64_t v22 = HIBYTE(v19) & 0xF;
    }
    else {
      uint64_t v22 = v21;
    }
    BOOL v17 = v22 != 0;
  }

  else
  {
    sub_10001DC4C(a1, (uint64_t)v7, type metadata accessor for ShareRecord);
    BOOL v17 = 0LL;
  }

uint64_t sub_1001E6584(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  int v7 = a1;
  uint64_t v8 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v8);
  uint64_t v10 = &v21[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  if (v7 == 2) {
    return 1LL;
  }
  uint64_t v12 = dispatch_group_create();
  uint64_t v13 = swift_allocObject(&unk_100948A68, 17LL, 7LL);
  *(_BYTE *)(v13 + swift_weakDestroy(v0 + 16) = 0;
  dispatch_group_enter(v12);
  uint64_t v14 = *(void *)(v3 + 24);
  uint64_t v15 = swift_allocObject(&unk_100948A90, 32LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = v13;
  *(void *)(v15 + 24) = v12;
  uint64_t v16 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v10, 1LL, 1LL, v16);
  uint64_t v17 = swift_allocObject(&unk_100948AB8, 80LL, 7LL);
  *(void *)(v17 + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)(v17 + 24) = 0LL;
  *(void *)(v17 + 32) = sub_1002000EC;
  *(void *)(v17 + 4sub_100032838(0, 7LL, 0) = v15;
  *(void *)(v17 + 48) = v14;
  *(_BYTE *)(v17 + 56) = a1;
  *(void *)(v17 + 64) = a2;
  *(void *)(v17 + 72) = a3;
  swift_retain();
  uint64_t v18 = v12;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain(a3);
  sub_1003EDB00((uint64_t)v10, (uint64_t)&unk_1009A5FE8, v17);
  swift_release();
  swift_release();
  OS_dispatch_group.wait()();

  swift_beginAccess(v13 + 16, v21, 0LL, 0LL);
  uint64_t v11 = *(unsigned __int8 *)(v13 + 16);
  swift_release();
  return v11;
}

void sub_1001E6744(char a1, uint64_t a2, dispatch_group_s *a3)
{
  *(_BYTE *)(a2 + swift_weakDestroy(v0 + 16) = a1;
  dispatch_group_leave(a3);
}

uint64_t sub_1001E6798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v27 = a1;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v33 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v31 = *(void *)(v6 - 8);
  uint64_t v32 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_1009A6100);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v12 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))( v15,  enum case for DispatchQoS.QoSClass.default(_:),  v12);
  uint64_t v28 = static OS_dispatch_queue.global(qos:)(v15);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  sub_10001581C(v27, (uint64_t)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), &qword_1009A6100);
  uint64_t v16 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v18 = swift_allocObject(&unk_100949BE8, v17 + v11, v16 | 7);
  uint64_t v19 = v30;
  *(void *)(v18 + swift_weakDestroy(v0 + 16) = v29;
  *(void *)(v18 + 24) = v19;
  sub_100015750((uint64_t)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v18 + v17, &qword_1009A6100);
  void aBlock[4] = sub_10020E5F8;
  void aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100949C00;
  uint64_t v20 = _Block_copy(aBlock);
  uint64_t v21 = swift_retain();
  static DispatchQoS.unspecified.getter(v21);
  uint64_t v34 = _swiftEmptyArrayStorage;
  uint64_t v22 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v23 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v24 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v23, v24, v3, v22);
  uint64_t v25 = (void *)v28;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v5, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v33 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v32);
  return swift_release();
}

uint64_t sub_1001E6A88@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_1005777D8();
  v11[2] = a1;
  uint64_t v5 = sub_100023D48((uint64_t (*)(char *))sub_10020E458, v11, (uint64_t)v4);
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = type metadata accessor for ShareRecord(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  if (v6)
  {
    sub_10001DC4C( v5 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)),  a2,  type metadata accessor for ShareRecord);
    uint64_t v9 = 0LL;
  }

  else
  {
    uint64_t v9 = 1LL;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, v9, 1LL, v7);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001E6B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = a2;
  uint64_t v41 = type metadata accessor for StableIdentifier(0LL);
  uint64_t v3 = __chkstk_darwin(v41);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unsigned int v34 = static os_log_type_t.default.getter(v3);
  if (qword_10099B700 != -1) {
    swift_once(&qword_10099B700, sub_100651100);
  }
  uint64_t v33 = qword_100A2B010;
  uint64_t v30 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v6 = swift_allocObject(v30, 112LL, 7LL);
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v7 = a1 + *(int *)(type metadata accessor for ShareInstruction(0LL) + 24);
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v9 = UUID.uuidString.getter(v8);
  uint64_t v11 = v10;
  *(void *)(v6 + 56) = &type metadata for String;
  unint64_t v12 = sub_1000226F4();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 32) = v9;
  *(void *)(v6 + 4sub_100032838(0, 7LL, 0) = v11;
  uint64_t v13 = a1;
  unint64_t v14 = v12;
  uint64_t v15 = UUID.uuidString.getter(v12);
  *(void *)(v6 + 96) = &type metadata for String;
  *(void *)(v6 + 104) = v14;
  *(void *)(v6 + 72) = v15;
  *(void *)(v6 + 8sub_100032838(0, 7LL, 0) = v16;
  os_log(_:dso:log:_:_:)( v34,  &_mh_execute_header,  v33,  "2) Sending Family Share for beacon: %@, shareIdentifier: %@",  59LL,  2LL,  v6);
  swift_bridgeObjectRelease();
  sub_10001DC4C(v7 + *(int *)(v8 + 24), (uint64_t)v5, type metadata accessor for StableIdentifier);
  LODWORD(v9) = swift_getEnumCaseMultiPayload(v5, v41);
  uint64_t result = sub_100018C68((uint64_t)v5, type metadata accessor for StableIdentifier);
  if (!(_DWORD)v9) {
    goto LABEL_7;
  }
  uint64_t v13 = v31;
  do
  {
    uint64_t v18 = static os_log_type_t.default.getter(result);
    uint64_t v19 = qword_100A2B010;
    uint64_t v20 = swift_allocObject(v30, 72LL, 7LL);
    *(_OWORD *)(v20 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t aBlock = (void **)sub_10020DEAC;
    uint64_t v36 = v13;
    swift_retain();
    uint64_t v21 = sub_100004AEC(&qword_1009A6110);
    uint64_t v22 = String.init<A>(describing:)(&aBlock, v21);
    *(void *)(v20 + 56) = &type metadata for String;
    *(void *)(v20 + 64) = v14;
    *(void *)(v20 + 32) = v22;
    *(void *)(v20 + 4sub_100032838(0, 7LL, 0) = v23;
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "Share record %@", 15LL, 2LL, v20);
    swift_bridgeObjectRelease();
    uint64_t v24 = *(dispatch_queue_s **)(v13 + 48);
    uint64_t v25 = swift_allocObject(&unk_100949878, 32LL, 7LL);
    *(void *)(v25 + swift_weakDestroy(v0 + 16) = sub_10020DEB0;
    *(void *)(v25 + 24) = v13;
    uint64_t v39 = sub_100154688;
    uint64_t v40 = v25;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v36 = 1107296256LL;
    uint64_t v37 = sub_100025BD4;
    uint64_t v38 = &unk_100949890;
    uint64_t v26 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v24, v26);
    _Block_release(v26);
    LOBYTE(v24) = swift_isEscapingClosureAtFileLocation(v25, "", 113LL, 842LL, 34LL, 1LL);
    swift_release();
    uint64_t result = swift_release();
    __break(1u);
LABEL_7:
    uint64_t v27 = v13;
    uint64_t v13 = v31;
    uint64_t v28 = v32;
    uint64_t result = (uint64_t)sub_1001F1954(v27);
  }

  while (!v28);
  return result;
}

uint64_t sub_1001E6E98(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  uint64_t v48 = a3;
  uint64_t v49 = a5;
  uint64_t v8 = type metadata accessor for ShareRecord(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v45 - v12;
  uint64_t v14 = sub_100004AEC(&qword_1009A6100);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (void *)((char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v15);
  uint64_t v19 = (uint64_t *)((char *)&v45 - v18);
  sub_10001581C(a1, (uint64_t)&v45 - v18, &qword_1009A6100);
  if (swift_getEnumCaseMultiPayload(v19, v14) == 1)
  {
    uint64_t v20 = *v19;
    uint64_t v51 = v20;
    swift_errorRetain(v20);
    uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    type metadata accessor for CKError(0LL);
    uint64_t v23 = v22;
    uint64_t v24 = swift_dynamicCast(&v50, &v51, v21, v22, 6LL);
    if ((v24 & 1) != 0)
    {
      uint64_t v25 = v50;
      uint64_t v26 = sub_100007864( &qword_10099C270,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1007E3760);
      uint64_t v27 = _BridgedStoredNSError.code.getter(&v51, v23, v26);
      if (v51 == 14)
      {
        uint64_t v28 = static os_log_type_t.default.getter(v27);
        if (qword_10099B700 != -1) {
          swift_once(&qword_10099B700, sub_100651100);
        }
        os_log(_:dso:log:_:_:)( v28,  &_mh_execute_header,  qword_100A2B010,  "record already modified in CloudKit -- assuming another device is handing the share",  83LL,  2LL,  _swiftEmptyArrayStorage);
        void *v17 = v20;
        swift_storeEnumTagMultiPayload(v17, v14, 1LL);
        swift_errorRetain(v20);
        a4(v17);

LABEL_14:
        swift_errorRelease(v20);
        return sub_100015794((uint64_t)v17, &qword_1009A6100);
      }
    }

    uint64_t v37 = a4;
    uint64_t v38 = static os_log_type_t.error.getter(v24);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v39 = qword_100A2B010;
    uint64_t v40 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v41 = swift_allocObject(v40, 72LL, 7LL);
    *(_OWORD *)(v41 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v51 = v20;
    swift_errorRetain(v20);
    uint64_t v42 = String.init<A>(describing:)(&v51, v21);
    uint64_t v44 = v43;
    *(void *)(v41 + 56) = &type metadata for String;
    *(void *)(v41 + 64) = sub_1000226F4();
    *(void *)(v41 + 32) = v42;
    *(void *)(v41 + 4sub_100032838(0, 7LL, 0) = v44;
    os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, v39, "Failed to save record %@", 24LL, 2LL, v41);
    swift_bridgeObjectRelease();
    void *v17 = v20;
    swift_storeEnumTagMultiPayload(v17, v14, 1LL);
    swift_errorRetain(v20);
    v37(v17);
    goto LABEL_14;
  }

  uint64_t v47 = a4;
  uint64_t v29 = sub_10002218C((uint64_t)v19, (uint64_t)v13, type metadata accessor for ShareRecord);
  uint64_t v30 = static os_log_type_t.default.getter(v29);
  if (qword_10099B700 != -1) {
    swift_once(&qword_10099B700, sub_100651100);
  }
  uint64_t v31 = qword_100A2B010;
  uint64_t v46 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v32 = swift_allocObject(v46, 72LL, 7LL);
  __int128 v45 = xmmword_1007E67D0;
  *(_OWORD *)(v32 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  sub_10001DC4C((uint64_t)v13, (uint64_t)v11, type metadata accessor for ShareRecord);
  uint64_t v33 = String.init<A>(describing:)(v11, v8);
  uint64_t v35 = v34;
  *(void *)(v32 + 56) = &type metadata for String;
  *(void *)(v32 + 64) = sub_1000226F4();
  *(void *)(v32 + 32) = v33;
  *(void *)(v32 + 4sub_100032838(0, 7LL, 0) = v35;
  os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "Successfully saved %@", 21LL, 2LL, v32);
  swift_bridgeObjectRelease();
  sub_1004E696C(1u);
  sub_1001E6B4C(v48, a2);
  sub_10001DC4C((uint64_t)v13, (uint64_t)v17, type metadata accessor for ShareRecord);
  swift_storeEnumTagMultiPayload(v17, v14, 0LL);
  v47(v17);
  sub_100015794((uint64_t)v17, &qword_1009A6100);
  return sub_100018C68((uint64_t)v13, type metadata accessor for ShareRecord);
}

uint64_t sub_1001E74B8( int a1, char *a2, uint64_t a3, unint64_t a4, os_log_s *a5, int a6, uint64_t a7, void (*a8)(void, void, void), char a9, char *a10, char a11, unsigned __int8 a12, void *a13, void (*a14)(uint64_t, uint64_t), uint64_t a15, uint64_t a16, void (*a17)(void ***), void (*a18)(void ***))
{
  uint64_t v166 = a8;
  uint64_t v165 = a7;
  LODWORD(v164) = a6;
  uint64_t v147 = a5;
  unint64_t v154 = a4;
  uint64_t v153 = a3;
  uint64_t v152 = a2;
  LODWORD(v151) = a1;
  uint64_t v170 = a18;
  uint64_t v169 = a17;
  uint64_t v150 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v149 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  uint64_t v148 = (char *)&v134 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v168 = (char *)sub_100004AEC(&qword_1009A24D8);
  __chkstk_darwin(v168);
  uint64_t v20 = (void ***)((char *)&v134 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v144 = type metadata accessor for DispatchTime(0LL);
  uint64_t v142 = *(void *)(v144 - 8);
  uint64_t v21 = __chkstk_darwin(v144);
  uint64_t v141 = (char *)&v134 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v143 = (char *)&v134 - v23;
  uint64_t v158 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v156 = *(void *)(v158 - 8);
  __chkstk_darwin(v158);
  unint64_t v157 = (char *)&v134 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v161 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v155 = *(void *)(v161 - 8);
  __chkstk_darwin(v161);
  uint64_t v160 = (char *)&v134 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v27 = __chkstk_darwin(v26);
  uint64_t v146 = (char *)&v134 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v27);
  uint64_t v30 = (NSURL *)((char *)&v134 - v29);
  uint64_t v163 = type metadata accessor for UUID(0LL);
  uint64_t v162 = *(void *)(v163 - 8);
  uint64_t v31 = *(void *)(v162 + 64);
  uint64_t v32 = __chkstk_darwin(v163);
  uint64_t v140 = (char *)&v134 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = __chkstk_darwin(v32);
  uint64_t v35 = (void (*)(_BYTE *, uint64_t))((char *)&v134 - v34);
  uint64_t v36 = __chkstk_darwin(v33);
  uint64_t v145 = (uint64_t)&v134 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v40 = (char *)&v134 - v39;
  __chkstk_darwin(v38);
  uint64_t v159 = (char *)&v134 - v41;
  uint64_t v42 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v46 = (char *)&v134 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = __chkstk_darwin(v44);
  uint64_t v49 = (char *)&v134 - v48;
  static SystemInfo.lockState.getter(v47);
  (*(void (**)(char *, void, uint64_t))(v43 + 104))( v46,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v42);
  uint64_t v50 = sub_100007864( (unint64_t *)&qword_1009A2650,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  char v51 = dispatch thunk of static Equatable.== infix(_:_:)(v49, v46, v42, v50);
  unint64_t v52 = *(void (**)(char *, uint64_t))(v43 + 8);
  v52(v46, v42);
  uint64_t v53 = ((uint64_t (*)(char *, uint64_t))v52)(v49, v42);
  if ((v51 & 1) != 0)
  {
    uint64_t v54 = static os_log_type_t.error.getter(v53);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    os_log(_:dso:log:_:_:)( v54,  &_mh_execute_header,  qword_100A2B010,  "Attempt to send message before first unlock!",  44LL,  2LL,  _swiftEmptyArrayStorage);
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v56 = v55;
    uint64_t v179 = 5LL;
    unint64_t v57 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v58 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    unint64_t v59 = v57;
    uint64_t v60 = v56;
LABEL_11:
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v179, v59, v60, v58);
    void *v20 = aBlock;
    swift_storeEnumTagMultiPayload(v20, v168, 1LL);
    v169(v20);
    return sub_100015794((uint64_t)v20, &qword_1009A24D8);
  }

  char v61 = v164;
  uint64_t v62 = v165;
  uint64_t v63 = v166;
  uint64_t v64 = v167;
  uint64_t v65 = sub_1001E6584(v164, v165, (uint64_t)v166);
  if ((v65 & 1) == 0)
  {
    uint64_t v73 = static os_log_type_t.error.getter(v65);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v74 = qword_100A2B010;
    uint64_t v75 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v76 = swift_allocObject(v75, 72LL, 7LL);
    *(_OWORD *)(v76 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v76 + 56) = &type metadata for String;
    *(void *)(v76 + 64) = sub_1000226F4();
    *(void *)(v76 + 32) = v62;
    *(void *)(v76 + 4sub_100032838(0, 7LL, 0) = v63;
    *(void *)&double v77 = swift_bridgeObjectRetain(v63).n128_u64[0];
    os_log(_:dso:log:_:_:)( v73,  &_mh_execute_header,  v74,  "Not sending since %@ has no IDS registered devices",  50LL,  2LL,  v76,  v77);
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v79 = v78;
    uint64_t v179 = 12LL;
    unint64_t v80 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v58 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    unint64_t v59 = v80;
    uint64_t v60 = v79;
    goto LABEL_11;
  }

  uint64_t v66 = v64;
  char v67 = v61;
  uint64_t v135 = a15;
  uint64_t v136 = a14;
  uint64_t v137 = a13;
  int v138 = a12;
  uint64_t v168 = a10;
  char v68 = a11 & 1;
  uint64_t v139 = *(void *)(v66 + 24);
  uint64_t v69 = sub_100004AEC((uint64_t *)&unk_1009B1370);
  if ((a9 & 1) != 0)
  {
    uint64_t inited = swift_initStackObject(v69, v171);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(_BYTE *)(inited + 32) = v67;
    *(void *)(inited + 4sub_100032838(0, 7LL, 0) = v62;
    *(void *)(inited + 48) = v63;
    uint64_t v71 = v162;
    uint64_t v72 = v163;
    (*(void (**)(NSURL *, uint64_t, uint64_t, uint64_t))(v162 + 56))(v30, 1LL, 1LL, v163);
    swift_bridgeObjectRetain(v63);
    *((void *)&v132 + 1) = a16;
    *(void *)&__int128 v132 = v135;
    sub_1001E86B0(v151, v152, v153, v154, v147, inited, v30, v168, (uint64_t)v40, v68, v138 & 1, v137, v136, v132);
    swift_bridgeObjectRelease();
    sub_100015794((uint64_t)v30, &qword_10099D8A0);
    uint64_t v168 = *(char **)(v71 + 32);
    ((void (*)(char *, char *, uint64_t))v168)(v159, v40, v72);
    uint64_t v87 = v72;
  }

  else
  {
    uint64_t v82 = swift_initStackObject(v69, v178);
    *(_OWORD *)(v82 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(_BYTE *)(v82 + 32) = v61;
    *(void *)(v82 + 4sub_100032838(0, 7LL, 0) = v62;
    *(void *)(v82 + 48) = v63;
    uint64_t v83 = v162;
    uint64_t v84 = v146;
    uint64_t v87 = v163;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v162 + 56))(v146, 1LL, 1LL, v163);
    swift_bridgeObjectRetain(v63);
    UUID.init()(v85);
    *((void *)&v133 + 1) = a16;
    *(void *)&__int128 v133 = v135;
    uint64_t v86 = v145;
    sub_1001DE9B8( v151,  v152,  v153,  v154,  v35,  v82,  (unsigned int (*)(void, void, void))v84,  v168,  v145,  v68,  v138 & 1,  (uint64_t)v137,  (uint64_t)v136,  v133);
    swift_bridgeObjectRelease();
    (*(void (**)(void, uint64_t))(v83 + 8))(v35, v87);
    sub_100015794((uint64_t)v84, &qword_10099D8A0);
    uint64_t v168 = *(char **)(v83 + 32);
    ((void (*)(char *, uint64_t, uint64_t))v168)(v159, v86, v87);
  }

  uint64_t v88 = sub_100004AEC(&qword_1009A23E8);
  swift_allocObject(v88, *(unsigned int *)(v88 + 48), *(unsigned __int16 *)(v88 + 52));
  uint64_t v89 = Future.init()();
  uint64_t v90 = static os_log_type_t.default.getter(v89);
  if (qword_10099B700 != -1) {
    swift_once(&qword_10099B700, sub_100651100);
  }
  uint64_t v91 = qword_100A2B010;
  uint64_t v92 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v93 = swift_allocObject(v92, 72LL, 7LL);
  *(_OWORD *)(v93 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  unint64_t v94 = v159;
  uint64_t v95 = UUID.uuidString.getter(v93);
  uint64_t v97 = v96;
  *(void *)(v93 + 56) = &type metadata for String;
  *(void *)(v93 + 64) = sub_1000226F4();
  *(void *)(v93 + 32) = v95;
  *(void *)(v93 + 4sub_100032838(0, 7LL, 0) = v97;
  os_log(_:dso:log:_:_:)(v90, &_mh_execute_header, v91, "Setting %@ to pending", 21LL, 2LL, v93);
  swift_bridgeObjectRelease();
  uint64_t v98 = v167;
  unint64_t v154 = *(void *)(v167 + 152);
  uint64_t v99 = v162;
  uint64_t v166 = *(void (**)(void, void, void))(v162 + 16);
  uint64_t v100 = v140;
  v166(v140, v94, v87);
  uint64_t v101 = *(unsigned __int8 *)(v99 + 80);
  uint64_t v152 = (char *)(((v101 + 24) & ~v101) + v31);
  uint64_t v102 = (v101 + 24) & ~v101;
  uint64_t v165 = v102;
  uint64_t v164 = v101 | 7;
  unint64_t v103 = (unint64_t)(v152 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v104 = swift_allocObject(&unk_100948770, v103 + 8, v101 | 7);
  *(void *)(v104 + swift_weakDestroy(v0 + 16) = v98;
  uint64_t v105 = v168;
  ((void (*)(uint64_t, char *, uint64_t))v168)(v104 + v102, v100, v87);
  *(void *)(v104 + v103) = v89;
  uint64_t v176 = sub_1001FF3CC;
  uint64_t v177 = v104;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v173 = 1107296256LL;
  uint64_t v174 = sub_1001C31E8;
  uint64_t v175 = &unk_100948788;
  int v106 = _Block_copy(&aBlock);
  uint64_t v168 = v105;
  uint64_t v107 = v106;
  swift_retain();
  uint64_t v108 = swift_retain();
  uint64_t v109 = v160;
  static DispatchQoS.unspecified.getter(v108);
  uint64_t v179 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v110 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v151 = v110;
  uint64_t v111 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v149 = v111;
  uint64_t v150 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v153 = v89;
  uint64_t v112 = v157;
  uint64_t v113 = v111;
  uint64_t v114 = v158;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v179, v113, v150, v158, v110);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v109, v112, v107);
  _Block_release(v107);
  uint64_t v156 = *(void *)(v156 + 8);
  ((void (*)(char *, uint64_t))v156)(v112, v114);
  uint64_t v155 = *(void *)(v155 + 8);
  ((void (*)(char *, uint64_t))v155)(v109, v161);
  swift_release();
  uint64_t v115 = v159;
  uint64_t v116 = v163;
  v166(v100, v159, v163);
  uint64_t v117 = swift_allocObject(&unk_1009487C0, v103 + 16, v164);
  *(void *)(v117 + swift_weakDestroy(v0 + 16) = v98;
  ((void (*)(uint64_t, char *, uint64_t))v105)(v117 + v165, v100, v116);
  uint64_t v118 = (void (**)(void ***))(v117 + v103);
  uint64_t v119 = v169;
  unint64_t v120 = v170;
  *uint64_t v118 = v169;
  v118[1] = v120;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_1001FF3D4, v117);
  swift_release();
  swift_release();
  uint64_t v121 = swift_allocObject(&unk_1009487E8, 32LL, 7LL);
  *(void *)(v121 + swift_weakDestroy(v0 + 16) = v119;
  *(void *)(v121 + 24) = v120;
  swift_retain();
  Future.addFailure(block:)(sub_1001FF3D8, v121);
  swift_release();
  uint64_t v122 = swift_release();
  unint64_t v123 = v141;
  static DispatchTime.now()(v122);
  uint64_t v124 = v143;
  + infix(_:_:)(v123, *(double *)(v98 + 184));
  uint64_t v125 = *(void (**)(char *, uint64_t))(v142 + 8);
  uint64_t v126 = v144;
  v125(v123, v144);
  uint64_t v127 = v163;
  v166(v100, v115, v163);
  uint64_t v128 = swift_allocObject(&unk_100948810, v152, v164);
  *(void *)(v128 + swift_weakDestroy(v0 + 16) = v98;
  ((void (*)(uint64_t, char *, uint64_t))v168)(v128 + v165, v100, v127);
  uint64_t v176 = sub_1001FF3E4;
  uint64_t v177 = v128;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v173 = 1107296256LL;
  uint64_t v174 = sub_1001C31E8;
  uint64_t v175 = &unk_100948828;
  uint64_t v129 = _Block_copy(&aBlock);
  uint64_t v130 = swift_retain();
  uint64_t v131 = v160;
  static DispatchQoS.unspecified.getter(v130);
  uint64_t v179 = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v179, v149, v150, v114, v151);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v124, v131, v112, v129);
  _Block_release(v129);
  swift_release();
  ((void (*)(char *, uint64_t))v156)(v112, v114);
  ((void (*)(char *, uint64_t))v155)(v131, v161);
  v125(v124, v126);
  (*(void (**)(char *, uint64_t))(v162 + 8))(v115, v127);
  return swift_release();
}

void sub_1001E86B0( unsigned __int8 a1@<W0>, char *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, os_log_s *a5@<X4>, uint64_t a6@<X5>, NSURL *a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>, char a10, unsigned __int8 a11, void *a12, void (*a13)(uint64_t, uint64_t), __int128 a14)
{
  unint64_t v261 = a4;
  unint64_t v254 = (void *)a6;
  uint64_t v255 = a8;
  v258 = a7;
  os_log_t v251 = a5;
  uint64_t v247 = a9;
  uint64_t v253 = *v14;
  uint64_t v18 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v19 = __chkstk_darwin(v18);
  unint64_t v249 = (char *)&v234 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  v250 = (char *)&v234 - v21;
  uint64_t v259 = type metadata accessor for URL(0LL);
  os_log_t v257 = *(void (**)(char *, uint64_t))(v259 - 8);
  uint64_t v22 = __chkstk_darwin(v259);
  v256 = (char *)&v234 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  v260 = (char *)&v234 - v24;
  uint64_t v25 = type metadata accessor for UUID(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v246 = (char *)&v234 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v248 = (char *)&v234 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v234 - v32;
  uint64_t v34 = __chkstk_darwin(v31);
  uint64_t v36 = (char *)&v234 - v35;
  uint64_t v37 = __chkstk_darwin(v34);
  uint64_t v39 = (char *)&v234 - v38;
  uint64_t v40 = __chkstk_darwin(v37);
  v264[0] = a1;
  unint64_t v265 = a2;
  uint64_t v266 = a3;
  uint64_t v42 = (char *)&v234 - v41;
  unint64_t v267 = v261;
  UUID.init()(v40);
  uint64_t v43 = type metadata accessor for PropertyListEncoder(0LL);
  uint64_t v44 = swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
  PropertyListEncoder.init()(v44);
  uint64_t v45 = sub_100004AEC(&qword_1009A5F58);
  uint64_t v46 = sub_1000372EC(&qword_1009A5F60, &qword_1009A5F58, (uint64_t)&protocol conformance descriptor for Message<A>);
  uint64_t v47 = v262;
  uint64_t v48 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v264, v45, v46);
  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v42, v25);
    swift_release();
    return;
  }

  v241 = v39;
  os_log_t v234 = v33;
  id v235 = v36;
  uint64_t v243 = v26;
  uint64_t v245 = v48;
  unint64_t v261 = v49;
  __int128 v236 = a14;
  unint64_t v239 = a13;
  uint64_t v238 = a12;
  unsigned __int8 v50 = a11;
  int v237 = a10 & 1;
  swift_release();
  uint64_t v51 = (uint64_t)v254;
  int64_t v52 = v254[2];
  uint64_t v53 = _swiftEmptyArrayStorage;
  uint64_t v244 = v25;
  uint64_t v262 = 0LL;
  LODWORD(v24sub_100032838(0, 7LL, 0) = a11;
  if (v52)
  {
    v268 = _swiftEmptyArrayStorage;
    sub_100032800(0, v52, 0);
    uint64_t v53 = v268;
    uint64_t v54 = (uint64_t *)(v51 + 48);
    uint64_t v55 = v258;
    do
    {
      uint64_t v56 = *(v54 - 1);
      uint64_t v57 = *v54;
      v268 = v53;
      unint64_t v59 = v53[2];
      unint64_t v58 = v53[3];
      swift_bridgeObjectRetain(v57);
      if (v59 >= v58 >> 1)
      {
        sub_100032800(v58 > 1, v59 + 1, 1);
        uint64_t v53 = v268;
      }

      v53[2] = v59 + 1;
      uint64_t v60 = &v53[2 * v59];
      v60[4] = v56;
      v60[5] = v57;
      v54 += 3;
      --v52;
    }

    while (v52);
    uint64_t v61 = v244;
    unsigned __int8 v50 = v240;
  }

  else
  {
    uint64_t v61 = v25;
    uint64_t v55 = v258;
  }

  v242 = v42;
  unint64_t v254 = (void *)sub_1006F0FB0((uint64_t)v53);
  swift_bridgeObjectRelease();
  uint64_t v255 = sub_1001FF3F8((uint64_t)v42, 0, (uint64_t)v55, (uint64_t)v255, v237, v50 & 1, (uint64_t)v238, (uint64_t)v239, v236);
  uint64_t v62 = NSTemporaryDirectory();
  uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
  uint64_t v65 = v64;

  uint64_t v66 = v256;
  URL.init(fileURLWithPath:isDirectory:)(v63, v65, 1LL);
  uint64_t v67 = swift_bridgeObjectRelease();
  uint64_t v68 = (uint64_t)v241;
  uint64_t v69 = UUID.init()(v67);
  uint64_t v70 = UUID.uuidString.getter(v69);
  uint64_t v72 = v71;
  uint64_t v73 = v243;
  uint64_t v74 = *(void (**)(uint64_t, uint64_t))(v243 + 8);
  v74(v68, v61);
  uint64_t v75 = v260;
  URL.appendingPathComponent(_:)(v70, v72);
  swift_bridgeObjectRelease();
  uint64_t v76 = (void (*)(char *, uint64_t))*((void *)v257 + 1);
  uint64_t v77 = v259;
  v76(v66, v259);
  uint64_t v78 = v245;
  unint64_t v79 = v261;
  uint64_t v80 = v262;
  Data.write(to:options:)(v75, 0LL, v245, v261);
  uint64_t v262 = v80;
  if (v80)
  {
    sub_100016F9C(v78, v79);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v76(v75, v77);
    v74((uint64_t)v242, v61);
    return;
  }

  os_log_t v257 = v76;
  else {
    unint64_t v81 = 0x6567617373656DLL;
  }
  unint64_t v82 = 0x80000001008591F0LL;
  v256 = (char *)v82;
  uint64_t v83 = v250;
  sub_10001581C((uint64_t)v258, (uint64_t)v250, &qword_10099D8A0);
  uint64_t v84 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v73 + 48);
  unsigned int v85 = v84(v83, 1LL, v61);
  unint64_t v239 = v74;
  uint64_t v240 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v84;
  v241 = (char *)v81;
  if (v85 == 1)
  {
    sub_100015794((uint64_t)v83, &qword_10099D8A0);
    if (qword_10099B810 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    uint64_t v86 = type metadata accessor for Logger(0LL);
    sub_10000A720(v86, (uint64_t)qword_100A2B188);
    int v87 = v264[0];
    uint64_t v89 = v265;
    uint64_t v88 = v266;
    unint64_t v90 = v267;
    uint64_t v91 = (uint64_t)v254;
    swift_bridgeObjectRetain(v254);
    sub_10001736C(v88, v90);
    swift_bridgeObjectRetain(v91);
    unint64_t v92 = (unint64_t)v256;
    swift_bridgeObjectRetain(v256);
    uint64_t v93 = sub_10001736C(v88, v90);
    unint64_t v94 = (os_log_s *)Logger.logObject.getter(v93);
    os_log_type_t v95 = static os_log_type_t.default.getter(v94);
    int v96 = v95;
    if (os_log_type_enabled(v94, v95))
    {
      uint64_t v97 = swift_slowAlloc(42LL, -1LL);
      LODWORD(v258) = v96;
      uint64_t v98 = v97;
      v250 = (char *)swift_slowAlloc(128LL, -1LL);
      id v263 = v250;
      *(_DWORD *)uint64_t v98 = 136315906;
      uint64_t v238 = v89;
      v268 = v253;
      uint64_t v99 = sub_100004AEC(&qword_1009A5F78);
      uint64_t v100 = String.init<A>(describing:)(&v268, v99);
      int v237 = v87;
      v268 = (void *)sub_1003F11D4(v100, v101, (uint64_t *)&v263);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, &v269, v98 + 4, v98 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v98 + 12) = 2080;
      swift_bridgeObjectRetain(v92);
      v268 = (void *)sub_1003F11D4((uint64_t)v241, v92, (uint64_t *)&v263);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, &v269, v98 + 14, v98 + 22);
      swift_bridgeObjectRelease_n(v92, 3LL);
      *(_WORD *)(v98 + 22) = 2080;
      sub_1001FC304(v237, (uint64_t)v238, v88, v90);
      uint64_t v103 = v102;
      unint64_t v105 = v104;
      sub_100016F9C(v88, v90);
      v268 = (void *)sub_1003F11D4(v103, v105, (uint64_t *)&v263);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, &v269, v98 + 24, v98 + 32);
      swift_bridgeObjectRelease();
      sub_100016F9C(v88, v90);
      *(_WORD *)(v98 + 32) = 2080;
      swift_bridgeObjectRetain(v91);
      uint64_t v107 = Set.description.getter(v106, &type metadata for String, &protocol witness table for String);
      unint64_t v109 = v108;
      swift_bridgeObjectRelease();
      v268 = (void *)sub_1003F11D4(v107, v109, (uint64_t *)&v263);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, &v269, v98 + 34, v98 + 42);
      swift_bridgeObjectRelease_n(v91, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v94,  (os_log_type_t)v258,  "%s: Sending %s (resource): %s to %s",  (uint8_t *)v98,  0x2Au);
      uint64_t v110 = v250;
      swift_arrayDestroy(v250, 4LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v110, -1LL, -1LL);
      swift_slowDealloc(v98, -1LL, -1LL);
    }

    else
    {
      sub_100016F9C(v88, v90);
      swift_bridgeObjectRelease_n(v92, 2LL);
      sub_100016F9C(v88, v90);

      swift_bridgeObjectRelease_n(v91, 2LL);
    }
  }

  else
  {
    uint64_t v111 = v235;
    (*(void (**)(char *, void *, uint64_t))(v73 + 32))(v235, v83, v61);
    uint64_t v112 = v61;
    uint64_t v113 = v73;
    if (qword_10099B810 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    uint64_t v114 = type metadata accessor for Logger(0LL);
    sub_10000A720(v114, (uint64_t)qword_100A2B188);
    LODWORD(v258) = v264[0];
    uint64_t v115 = v266;
    v250 = v265;
    unint64_t v116 = v267;
    uint64_t v117 = *(void (**)(char *, char *, uint64_t))(v113 + 16);
    uint64_t v118 = v234;
    v117(v234, v111, v112);
    sub_10001736C(v115, v116);
    uint64_t v119 = (uint64_t)v254;
    swift_bridgeObjectRetain(v254);
    sub_10001736C(v115, v116);
    swift_bridgeObjectRetain(v119);
    unint64_t v120 = (unint64_t)v256;
    swift_bridgeObjectRetain(v256);
    uint64_t v122 = (void *)Logger.logObject.getter(v121);
    os_log_type_t v123 = static os_log_type_t.default.getter(v122);
    int v124 = v123;
    if (os_log_type_enabled((os_log_t)v122, v123))
    {
      uint64_t v125 = swift_slowAlloc(52LL, -1LL);
      uint64_t v238 = (void *)swift_slowAlloc(160LL, -1LL);
      id v263 = v238;
      *(_DWORD *)uint64_t v125 = 136316162;
      int v237 = v124;
      v268 = v253;
      uint64_t v126 = sub_100004AEC(&qword_1009A5F78);
      *((void *)&v236 + 1) = v122;
      uint64_t v127 = String.init<A>(describing:)(&v268, v126);
      v268 = (void *)sub_1003F11D4(v127, v128, (uint64_t *)&v263);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, &v269, v125 + 4, v125 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v125 + 12) = 2080;
      swift_bridgeObjectRetain(v120);
      v268 = (void *)sub_1003F11D4((uint64_t)v241, v120, (uint64_t *)&v263);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, &v269, v125 + 14, v125 + 22);
      swift_bridgeObjectRelease_n(v120, 3LL);
      *(_WORD *)(v125 + 22) = 2080;
      sub_1001FC304((char)v258, (uint64_t)v250, v115, v116);
      uint64_t v130 = v129;
      unint64_t v132 = v131;
      sub_100016F9C(v115, v116);
      v268 = (void *)sub_1003F11D4(v130, v132, (uint64_t *)&v263);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, &v269, v125 + 24, v125 + 32);
      swift_bridgeObjectRelease();
      sub_100016F9C(v115, v116);
      *(_WORD *)(v125 + 32) = 2080;
      swift_bridgeObjectRetain(v119);
      uint64_t v134 = Set.description.getter(v133, &type metadata for String, &protocol witness table for String);
      unint64_t v136 = v135;
      swift_bridgeObjectRelease();
      v268 = (void *)sub_1003F11D4(v134, v136, (uint64_t *)&v263);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, &v269, v125 + 34, v125 + 42);
      swift_bridgeObjectRelease_n(v119, 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v125 + 42) = 2080;
      uint64_t v137 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      int v138 = v234;
      uint64_t v139 = v244;
      uint64_t v140 = dispatch thunk of CustomStringConvertible.description.getter(v244, v137);
      v268 = (void *)sub_1003F11D4(v140, v141, (uint64_t *)&v263);
      uint64_t v142 = (void (*)(char *, uint64_t))v239;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, &v269, v125 + 44, v125 + 52);
      swift_bridgeObjectRelease();
      v142(v138, v139);
      uint64_t v143 = (void *)*((void *)&v236 + 1);
      _os_log_impl( (void *)&_mh_execute_header,  *((os_log_t *)&v236 + 1),  (os_log_type_t)v237,  "%s: Sending %s (resource): %s to %s in response to %s",  (uint8_t *)v125,  0x34u);
      uint64_t v144 = v238;
      swift_arrayDestroy(v238, 5LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v144, -1LL, -1LL);
      swift_slowDealloc(v125, -1LL, -1LL);

      v142(v235, v139);
    }

    else
    {
      sub_100016F9C(v115, v116);

      uint64_t v145 = v118;
      uint64_t v146 = v244;
      uint64_t v147 = (void (*)(char *, uint64_t))v239;
      v239((uint64_t)v145, v244);
      swift_bridgeObjectRelease_n(v119, 2LL);
      sub_100016F9C(v115, v116);
      swift_bridgeObjectRelease_n(v120, 2LL);
      v147(v235, v146);
    }
  }

  uint64_t v148 = v255;
  if (qword_10099B810 != -1) {
    swift_once(&qword_10099B810, sub_10069374C);
  }
  uint64_t v149 = type metadata accessor for Logger(0LL);
  uint64_t v150 = sub_10000A720(v149, (uint64_t)qword_100A2B188);
  uint64_t v151 = swift_bridgeObjectRetain_n(v148, 2LL);
  uint64_t v152 = (os_log_s *)Logger.logObject.getter(v151);
  os_log_type_t v153 = static os_log_type_t.default.getter(v152);
  BOOL v154 = os_log_type_enabled(v152, v153);
  uint64_t v155 = v253;
  v256 = (char *)v150;
  if (v154)
  {
    uint64_t v156 = swift_slowAlloc(22LL, -1LL);
    v258 = (NSURL *)swift_slowAlloc(64LL, -1LL);
    id v263 = v258;
    *(_DWORD *)uint64_t v156 = 136315394;
    v268 = v155;
    uint64_t v157 = sub_100004AEC(&qword_1009A5F78);
    uint64_t v158 = String.init<A>(describing:)(&v268, v157);
    v268 = (void *)sub_1003F11D4(v158, v159, (uint64_t *)&v263);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, &v269, v156 + 4, v156 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v156 + 12) = 2080;
    swift_bridgeObjectRetain(v148);
    uint64_t v160 = Dictionary.description.getter( v148,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    unint64_t v162 = v161;
    swift_bridgeObjectRelease();
    v268 = (void *)sub_1003F11D4(v160, v162, (uint64_t *)&v263);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, &v269, v156 + 14, v156 + 22);
    swift_bridgeObjectRelease_n(v148, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v152, v153, "%s: IDSSendMessageOptions: %s", (uint8_t *)v156, 0x16u);
    uint64_t v163 = v258;
    swift_arrayDestroy(v258, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v163, -1LL, -1LL);
    swift_slowDealloc(v156, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v148, 2LL);
  }

  os_log_t v165 = v251;
  uint64_t v164 = v252;
  uint64_t v166 = type metadata accessor for AnalyticsEvent(0LL);
  uint64_t v167 = (NSURL *)swift_allocObject(v166, *(unsigned int *)(v166 + 48), *(unsigned __int16 *)(v166 + 52));
  swift_defaultActor_initialize(v167);
  unint64_t v168 = sub_10041271C((uint64_t)_swiftEmptyArrayStorage);
  v167[2]._reserved = (void *)v168;
  UUID.init()(v168);
  uint64_t v169 = (char *)v167 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  uint64_t v170 = type metadata accessor for DispatchTime(0LL);
  uint64_t v171 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v170 - 8) + 56LL);
  v171(v169, 1LL, 1LL, v170);
  v171((char *)v167 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime, 1LL, 1LL, v170);
  v167[3].super.Class isa = (Class)0xD000000000000026LL;
  v167[3]._urlString = (NSString *)0x80000001008591A0LL;
  type metadata accessor for Transaction(0LL);
  unsigned __int8 v172 = v264[0];
  uint64_t v174 = v265;
  uint64_t v173 = v266;
  unint64_t v175 = v267;
  uint64_t v176 = swift_allocObject(&unk_100948860, 56LL, 7LL);
  *(void *)(v176 + swift_weakDestroy(v0 + 16) = v167;
  *(_BYTE *)(v176 + 24) = v172;
  *(void *)(v176 + 32) = v174;
  *(void *)(v176 + 4sub_100032838(0, 7LL, 0) = v173;
  *(void *)(v176 + 48) = v175;
  sub_10001736C(v173, v175);
  swift_retain();
  static Transaction.asyncTask(name:block:)("MessagingServiceAnalyticsEvent", 30LL, 2LL, &unk_1009A5F70, v176);
  swift_release();
  v258 = (NSURL *)v164[8];
  URL._bridgeToObjectiveC()(v258);
  unint64_t v178 = v177;
  sub_10028C0A4((uint64_t)v165);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_1001FBE34((uint64_t)v254);
  swift_bridgeObjectRelease();
  Class v180 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10028B660((uint64_t)v255);
  swift_bridgeObjectRelease();
  Class v181 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v268 = 0LL;
  id v263 = 0LL;
  LODWORD(v175) = -[NSURL sendResourceAtURL:metadata:toDestinations:priority:options:identifier:error:]( v258,  "sendResourceAtURL:metadata:toDestinations:priority:options:identifier:error:",  v178,  isa,  v180,  300LL,  v181,  &v268,  &v263);

  id v182 = v268;
  id v183 = v263;
  id v184 = v182;
  if (!(_DWORD)v175)
  {
    _convertNSErrorToError(_:)(v183);

    swift_willThrow(v206);
    sub_100016F9C(v245, v261);
    swift_release();
    v257(v260, v259);
    v239((uint64_t)v242, v244);
LABEL_42:

    return;
  }

  v258 = v167;
  uint64_t v185 = (os_unfair_lock_s *)v252[15];
  uint64_t v186 = (uint64_t)&v185[4];
  unint64_t v187 = v185 + 16;
  os_unfair_lock_lock(v185 + 16);
  uint64_t v188 = v262;
  sub_1001FEB5C(v186, (uint64_t)v264, v245, v261);
  uint64_t v189 = v244;
  uint64_t v262 = v188;
  if (v188)
  {
    os_unfair_lock_unlock(v187);
    __break(1u);
  }

  else
  {
    os_unfair_lock_unlock(v187);
    id v190 = [(id)objc_opt_self(NSFileManager) defaultManager];
    v191 = v260;
    URL._bridgeToObjectiveC()(v192);
    uint64_t v194 = v193;
    v268 = 0LL;
    unsigned __int8 v195 = [v190 removeItemAtURL:v193 error:&v268];

    id v196 = v268;
    uint64_t v197 = (void (*)(char *, uint64_t))v239;
    if ((v195 & 1) == 0)
    {
      uint64_t v207 = v268;
      _convertNSErrorToError(_:)(v196);

LABEL_41:
      swift_willThrow(v204);
      sub_100016F9C(v245, v261);
      swift_release();
      v257(v191, v259);
      v197(v242, v189);
      goto LABEL_42;
    }

    if (v184)
    {
      uint64_t v198 = static String._unconditionallyBridgeFromObjectiveC(_:)(v182);
      uint64_t v200 = v199;
      id v201 = v196;
      uint64_t v202 = (uint64_t)v249;
      UUID.init(uuidString:)(v198, v200);
      swift_bridgeObjectRelease();
      if (v240(v202, 1LL, v189) != 1)
      {
        uint64_t v210 = v243;
        int v211 = v248;
        uint64_t v255 = *(char **)(v243 + 32);
        ((void (*)(char *, uint64_t, uint64_t))v255)(v248, v202, v189);
        char v212 = v264[0];
        uint64_t v213 = v266;
        unint64_t v254 = v265;
        unint64_t v214 = v267;
        v215 = v246;
        (*(void (**)(char *, char *, uint64_t))(v210 + 16))(v246, v211, v189);
        sub_10001736C(v213, v214);
        uint64_t v216 = sub_10001736C(v213, v214);
        uint64_t v217 = (os_log_s *)Logger.logObject.getter(v216);
        os_log_type_t v218 = static os_log_type_t.default.getter(v217);
        int v219 = v218;
        if (os_log_type_enabled(v217, v218))
        {
          uint64_t v220 = swift_slowAlloc(32LL, -1LL);
          LODWORD(v256) = v219;
          uint64_t v221 = v220;
          v252 = (void *)swift_slowAlloc(96LL, -1LL);
          v268 = v252;
          *(_DWORD *)uint64_t v221 = 136315650;
          os_log_t v251 = v217;
          uint64_t v222 = sub_1001FC2D0((uint64_t)v253);
          id v263 = (id)sub_1003F11D4(v222, v223, (uint64_t *)&v268);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, v264, v221 + 4, v221 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v221 + 12) = 2080;
          sub_1001FC304(v212, (uint64_t)v254, v213, v214);
          uint64_t v225 = v224;
          unint64_t v227 = v226;
          sub_100016F9C(v213, v214);
          id v263 = (id)sub_1003F11D4(v225, v227, (uint64_t *)&v268);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, v264, v221 + 14, v221 + 22);
          swift_bridgeObjectRelease();
          sub_100016F9C(v213, v214);
          *(_WORD *)(v221 + 22) = 2080;
          uint64_t v228 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v229 = dispatch thunk of CustomStringConvertible.description.getter(v244, v228);
          id v263 = (id)sub_1003F11D4(v229, v230, (uint64_t *)&v268);
          uint64_t v189 = v244;
          int v211 = v248;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, v264, v221 + 24, v221 + 32);
          swift_bridgeObjectRelease();
          v231 = (void (*)(char *, uint64_t))v239;
          v239((uint64_t)v215, v189);
          os_log_t v232 = v251;
          _os_log_impl( (void *)&_mh_execute_header,  v251,  (os_log_type_t)v256,  "%s: Sent message (resource) %s with identifier: %s",  (uint8_t *)v221,  0x20u);
          unint64_t v233 = v252;
          swift_arrayDestroy(v252, 3LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v233, -1LL, -1LL);
          swift_slowDealloc(v221, -1LL, -1LL);
          sub_100016F9C(v245, v261);
          swift_release();
        }

        else
        {
          sub_100016F9C(v213, v214);
          sub_100016F9C(v245, v261);

          v231 = (void (*)(char *, uint64_t))v239;
          v239((uint64_t)v215, v189);
          sub_100016F9C(v213, v214);
          swift_release();
        }

        v257(v260, v259);
        v231(v242, v189);
        ((void (*)(uint64_t, char *, uint64_t))v255)(v247, v211, v189);
        goto LABEL_42;
      }

      sub_100015794(v202, &qword_10099D8A0);
      unint64_t v203 = sub_100044AD4();
      uint64_t v204 = swift_allocError(&type metadata for MessagingError, v203, 0LL, 0LL);
      *uint64_t v205 = 0LL;
      goto LABEL_41;
    }

    unint64_t v208 = sub_100044AD4();
    swift_allocError(&type metadata for MessagingError, v208, 0LL, 0LL);
    *uint64_t v209 = 0LL;
    swift_willThrow(v196);
    sub_100016F9C(v245, v261);
    swift_release();
    v257(v191, v259);
    v197(v242, v189);
  }

uint64_t sub_1001E9E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  swift_beginAccess(a1 + 176, v13, 33LL, 0LL);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + 176));
  uint64_t v12 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = 0x8000000000000000LL;
  sub_10005D4FC(a3, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
  *(void *)(a1 + 176) = v12;
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  return swift_endAccess(v13);
}

uint64_t sub_1001E9EF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v30 = a4;
  uint64_t v31 = a5;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v35 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v33 = *(void *)(v10 - 8);
  uint64_t v34 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = *(void *)(a2 + 152);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a3, v13);
  uint64_t v17 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v18 = (v17 + 24) & ~v17;
  unint64_t v19 = (v15 + v18 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v20 = swift_allocObject(&unk_100948900, v19 + 16, v17 | 7);
  *(void *)(v20 + swift_weakDestroy(v0 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v20 + v18, v16, v13);
  uint64_t v21 = (void *)(v20 + v19);
  uint64_t v22 = v31;
  *uint64_t v21 = v30;
  v21[1] = v22;
  void aBlock[4] = sub_1001FFE68;
  void aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100948918;
  uint64_t v23 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v24 = swift_retain();
  static DispatchQoS.unspecified.getter(v24);
  uint64_t v36 = _swiftEmptyArrayStorage;
  uint64_t v25 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v26 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v27 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v26, v27, v7, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v9, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v34);
  return swift_release();
}

uint64_t sub_1001EA180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v67 = a3;
  uint64_t v68 = a4;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v72 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v70 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v73 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v71 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v69 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess(a1 + 176, &aBlock, 32LL, 0LL);
  uint64_t v17 = *(void *)(a1 + 176);
  if (!*(void *)(v17 + 16)) {
    return swift_endAccess(&aBlock);
  }
  unint64_t v18 = sub_10030D124(a2);
  if ((v19 & 1) == 0) {
    return swift_endAccess(&aBlock);
  }
  unint64_t v20 = *(void *)(*(void *)(v17 + 56) + 8 * v18);
  uint64_t v21 = swift_endAccess(&aBlock);
  if (v20 >> 62)
  {
    if (v20 >> 62 == 1)
    {
      uint64_t v22 = v20 & 0x3FFFFFFFFFFFFFFFLL;
      swift_errorRetain(v20 & 0x3FFFFFFFFFFFFFFFLL);
      uint64_t v23 = swift_errorRetain(v20 & 0x3FFFFFFFFFFFFFFFLL);
      uint64_t v24 = static os_log_type_t.error.getter(v23);
      uint64_t v66 = (void *)v20;
      if (qword_10099B700 != -1) {
        swift_once(&qword_10099B700, sub_100651100);
      }
      uint64_t v25 = qword_100A2B010;
      uint64_t v26 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v27 = swift_allocObject(v26, 72LL, 7LL);
      *(_OWORD *)(v27 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      unint64_t aBlock = v20 & 0x3FFFFFFFFFFFFFFFLL;
      swift_errorRetain(v20 & 0x3FFFFFFFFFFFFFFFLL);
      uint64_t v28 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v29 = String.init<A>(describing:)(&aBlock, v28);
      uint64_t v31 = v30;
      *(void *)(v27 + 56) = &type metadata for String;
      *(void *)(v27 + 64) = sub_1000226F4();
      *(void *)(v27 + 32) = v29;
      *(void *)(v27 + 4sub_100032838(0, 7LL, 0) = v31;
      os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "Message send error: %@", 22LL, 2LL, v27);
      swift_bridgeObjectRelease();
      sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
      (*(void (**)(char *, void, uint64_t))(v14 + 104))( v16,  enum case for DispatchQoS.QoSClass.default(_:),  v13);
      uint64_t v32 = (void *)static OS_dispatch_queue.global(qos:)(v16);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      uint64_t v33 = (void *)swift_allocObject(&unk_100948950, 40LL, 7LL);
      uint64_t v34 = v68;
      v33[2] = v67;
      v33[3] = v34;
      v33[4] = v22;
      unint64_t v79 = sub_1001FFEBC;
      uint64_t v80 = v33;
      unint64_t aBlock = (unint64_t)_NSConcreteStackBlock;
      uint64_t v76 = 1107296256LL;
      uint64_t v77 = sub_1001C31E8;
      uint64_t v78 = &unk_100948968;
      uint64_t v35 = _Block_copy(&aBlock);
      unint64_t v36 = (unint64_t)v66;
      sub_10006A368((unint64_t)v66);
      uint64_t v37 = swift_retain();
      uint64_t v38 = v69;
      static DispatchQoS.unspecified.getter(v37);
      uint64_t v74 = _swiftEmptyArrayStorage;
      uint64_t v39 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v40 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v41 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v42 = v72;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v74, v40, v41, v72, v39);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v38, v11, v35);
      _Block_release(v35);

      sub_10006A388(v36);
      sub_10006A388(v36);
    }

    else
    {
      uint64_t v54 = static os_log_type_t.default.getter(v21);
      if (qword_10099B700 != -1) {
        swift_once(&qword_10099B700, sub_100651100);
      }
      os_log(_:dso:log:_:_:)( v54,  &_mh_execute_header,  qword_100A2B010,  "Message sent successfully",  25LL,  2LL,  _swiftEmptyArrayStorage);
      sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
      (*(void (**)(char *, void, uint64_t))(v14 + 104))( v16,  enum case for DispatchQoS.QoSClass.default(_:),  v13);
      uint64_t v66 = (void *)static OS_dispatch_queue.global(qos:)(v16);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))( (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a2,  v6);
      uint64_t v55 = *(unsigned __int8 *)(v7 + 80);
      uint64_t v56 = (v55 + 32) & ~v55;
      uint64_t v57 = swift_allocObject(&unk_1009489A0, v56 + v8, v55 | 7);
      uint64_t v58 = v68;
      *(void *)(v57 + swift_weakDestroy(v0 + 16) = v67;
      *(void *)(v57 + 24) = v58;
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v57 + v56, v9, v6);
      unint64_t v79 = sub_1001FFF54;
      uint64_t v80 = (void *)v57;
      unint64_t aBlock = (unint64_t)_NSConcreteStackBlock;
      uint64_t v76 = 1107296256LL;
      uint64_t v77 = sub_1001C31E8;
      uint64_t v78 = &unk_1009489B8;
      unint64_t v59 = _Block_copy(&aBlock);
      uint64_t v60 = swift_retain();
      uint64_t v38 = v69;
      static DispatchQoS.unspecified.getter(v60);
      uint64_t v74 = _swiftEmptyArrayStorage;
      uint64_t v61 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v62 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v63 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v42 = v72;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v74, v62, v63, v72, v61);
      uint64_t v64 = v66;
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v38, v11, v59);
      _Block_release(v59);
    }
  }

  else
  {
    uint64_t v44 = swift_retain();
    uint64_t v45 = static os_log_type_t.error.getter(v44);
    uint64_t v66 = (void *)v20;
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    os_log(_:dso:log:_:_:)( v45,  &_mh_execute_header,  qword_100A2B010,  "Unexpected state: pending",  25LL,  2LL,  _swiftEmptyArrayStorage);
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    (*(void (**)(char *, void, uint64_t))(v14 + 104))( v16,  enum case for DispatchQoS.QoSClass.default(_:),  v13);
    uint64_t v46 = (void *)static OS_dispatch_queue.global(qos:)(v16);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    uint64_t v47 = swift_allocObject(&unk_1009489F0, 32LL, 7LL);
    uint64_t v48 = v68;
    *(void *)(v47 + swift_weakDestroy(v0 + 16) = v67;
    *(void *)(v47 + 24) = v48;
    unint64_t v79 = sub_1001FFF68;
    uint64_t v80 = (void *)v47;
    unint64_t aBlock = (unint64_t)_NSConcreteStackBlock;
    uint64_t v76 = 1107296256LL;
    uint64_t v77 = sub_1001C31E8;
    uint64_t v78 = &unk_100948A08;
    unint64_t v49 = _Block_copy(&aBlock);
    uint64_t v50 = swift_retain();
    uint64_t v38 = v69;
    static DispatchQoS.unspecified.getter(v50);
    uint64_t v74 = _swiftEmptyArrayStorage;
    uint64_t v51 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v52 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v53 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v42 = v72;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v74, v52, v53, v72, v51);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v38, v11, v49);
    _Block_release(v49);

    sub_10006A388((unint64_t)v66);
  }

  (*(void (**)(char *, uint64_t))(v70 + 8))(v11, v42);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v38, v73);
  return swift_release();
}

uint64_t sub_1001EA994(void (*a1)(uint64_t *))
{
  uint64_t v2 = type metadata accessor for URLError.Code(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URLError(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = sub_100004AEC(&qword_1009A24D8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)((char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  static URLError.Code.timedOut.getter(v10);
  unint64_t v13 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v14 = sub_100007864( &qword_1009A5FB0,  (uint64_t (*)(uint64_t))&type metadata accessor for URLError,  (uint64_t)&protocol conformance descriptor for URLError);
  uint64_t v15 = _BridgedStoredNSError.init(_:userInfo:)(v8, v4, v13, v5, v14);
  uint64_t v16 = URLError._nsError.getter(v15);
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t *v12 = v16;
  swift_storeEnumTagMultiPayload(v12, v9, 1LL);
  a1(v12);
  return sub_100015794((uint64_t)v12, &qword_1009A24D8);
}

uint64_t sub_1001EAB1C(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100004AEC(&qword_1009A24D8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL))(v7, a3, v8);
  swift_storeEnumTagMultiPayload(v7, v5, 0LL);
  a1(v7);
  return sub_100015794((uint64_t)v7, &qword_1009A24D8);
}

uint64_t sub_1001EABD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = a2;
  uint64_t v34 = a3;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v38 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  __chkstk_darwin(v4);
  uint64_t v37 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v35 = *(void *)(v6 - 8);
  uint64_t v36 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = static os_log_type_t.error.getter(v11);
  if (qword_10099B700 != -1) {
    swift_once(&qword_10099B700, sub_100651100);
  }
  uint64_t v15 = qword_100A2B010;
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  aBlock[0] = a1;
  swift_errorRetain(a1);
  uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  uint64_t v19 = String.init<A>(describing:)(aBlock, v18);
  uint64_t v21 = v20;
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_1000226F4();
  *(void *)(v17 + 32) = v19;
  *(void *)(v17 + 4sub_100032838(0, 7LL, 0) = v21;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "Message send future error: %@", 29LL, 2LL, v17);
  swift_bridgeObjectRelease();
  sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v9);
  uint64_t v22 = (void *)static OS_dispatch_queue.global(qos:)(v13);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  uint64_t v23 = (void *)swift_allocObject(&unk_1009488B0, 40LL, 7LL);
  uint64_t v24 = v34;
  void v23[2] = v33;
  v23[3] = v24;
  v23[4] = a1;
  void aBlock[4] = sub_10020FF40;
  void aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_1009488C8;
  uint64_t v25 = _Block_copy(aBlock);
  swift_errorRetain(a1);
  uint64_t v26 = swift_retain();
  static DispatchQoS.unspecified.getter(v26);
  uint64_t v40 = _swiftEmptyArrayStorage;
  uint64_t v27 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v28 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v29 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v30 = v37;
  uint64_t v31 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v28, v29, v39, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v30, v25);
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v38 + 8))(v30, v31);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v36);
  return swift_release();
}

uint64_t sub_1001EAF40(void (*a1)(void *), uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = sub_100004AEC(a4);
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t *)((char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  *uint64_t v9 = a3;
  swift_storeEnumTagMultiPayload(v9, v10, 1LL);
  swift_errorRetain(a3);
  a1(v9);
  return sub_100015794((uint64_t)v9, a4);
}

uint64_t sub_1001EAFE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v33 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1 + 176;
  swift_beginAccess(a1 + 176, aBlock, 32LL, 0LL);
  uint64_t v15 = *(void *)(a1 + 176);
  if (!*(void *)(v15 + 16)) {
    return swift_endAccess(aBlock);
  }
  unint64_t v16 = sub_10030D124(a2);
  if ((v17 & 1) == 0) {
    return swift_endAccess(aBlock);
  }
  unint64_t v18 = *(void *)(*(void *)(v15 + 56) + 8 * v16);
  uint64_t result = swift_endAccess(aBlock);
  if (!(v18 >> 62))
  {
    uint64_t v20 = swift_retain_n(v18, 2LL);
    uint64_t v21 = static os_log_type_t.error.getter(v20);
    unint64_t v31 = v18;
    uint64_t v22 = v21;
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    os_log(_:dso:log:_:_:)( v22,  &_mh_execute_header,  qword_100A2B010,  "*** timed out waiting for IDS send ***",  38LL,  2LL,  _swiftEmptyArrayStorage,  v31);
    swift_beginAccess(v14, aBlock, 33LL, 0LL);
    unint64_t v23 = sub_1000484F0(a2);
    swift_endAccess(aBlock);
    sub_1001FFE3C(v23);
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    (*(void (**)(char *, void, uint64_t))(v11 + 104))( v13,  enum case for DispatchQoS.QoSClass.default(_:),  v10);
    uint64_t v24 = (void *)static OS_dispatch_queue.global(qos:)(v13);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    unint64_t v25 = v31;
    void aBlock[4] = sub_1001FFE50;
    void aBlock[5] = v31;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    aBlock[3] = &unk_100948878;
    uint64_t v26 = _Block_copy(aBlock);
    uint64_t v27 = swift_retain();
    static DispatchQoS.unspecified.getter(v27);
    uint64_t v34 = _swiftEmptyArrayStorage;
    uint64_t v28 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v29 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v30 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v29, v30, v4, v28);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v6, v26);
    _Block_release(v26);

    sub_10006A388(v25);
    sub_10006A388(v25);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v4);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v32);
    return swift_release();
  }

  return result;
}

void sub_1001EB354()
{
  uint64_t v0 = type metadata accessor for URLError.Code(0LL);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for URLError(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (uint64_t *)((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  static URLError.Code.timedOut.getter(v5);
  unint64_t v8 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v9 = sub_100007864( &qword_1009A5FB0,  (uint64_t (*)(uint64_t))&type metadata accessor for URLError,  (uint64_t)&protocol conformance descriptor for URLError);
  uint64_t v10 = _BridgedStoredNSError.init(_:userInfo:)(v7, v2, v8, v3, v9);
  uint64_t v11 = (void *)URLError._nsError.getter(v10);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v7, v3);
  Future.finish(error:)(v11);
}

void sub_1001EB478( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, dispatch_group_s *a6)
{
  dispatch_group_t v45 = a6;
  uint64_t v43 = a3;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v41 - v14;
  uint64_t v16 = sub_100004AEC(&qword_1009A24D8);
  __chkstk_darwin(v16);
  unint64_t v18 = (uint64_t *)((char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v44 = a1;
  sub_10001581C(a1, (uint64_t)v18, &qword_1009A24D8);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18, v16);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v20 = *v18;
    os_log_type_t v21 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v22 = (os_log_s *)qword_100A2B010;
    os_log_type_t v23 = v21;
    if (os_log_type_enabled((os_log_t)qword_100A2B010, v21))
    {
      swift_bridgeObjectRetain(a4);
      swift_errorRetain(v20);
      swift_bridgeObjectRetain(a4);
      swift_errorRetain(v20);
      uint64_t v24 = swift_slowAlloc(22LL, -1LL);
      uint64_t v25 = swift_slowAlloc(64LL, -1LL);
      v49[0] = v25;
      *(_DWORD *)uint64_t v24 = 136315394;
      swift_bridgeObjectRetain(a4);
      uint64_t v48 = sub_1003F11D4(v43, a4, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v24 + 4, v24 + 12);
      swift_bridgeObjectRelease_n(a4, 3LL);
      *(_WORD *)(v24 + 12) = 2080;
      swift_getErrorValue(v20, v47, v46);
      uint64_t v26 = Error.localizedDescription.getter(v46[1], v46[2]);
      uint64_t v48 = sub_1003F11D4(v26, v27, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v24 + 14, v24 + 22);
      swift_bridgeObjectRelease();
      swift_errorRelease(v20);
      swift_errorRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to send message to %s: (%s)", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy(v25, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1LL, -1LL);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    uint64_t v28 = swift_errorRelease(v20);
  }

  else
  {
    uint64_t v29 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v10 + 32))(v15, v18, v9);
    os_log_type_t v30 = static os_log_type_t.info.getter(v29);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    unint64_t v31 = (os_log_s *)qword_100A2B010;
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
    os_log_type_t v32 = v30;
    if (os_log_type_enabled(v31, v30))
    {
      swift_bridgeObjectRetain_n(a4, 2LL);
      uint64_t v33 = swift_slowAlloc(22LL, -1LL);
      uint64_t v42 = swift_slowAlloc(64LL, -1LL);
      v49[0] = v42;
      *(_DWORD *)uint64_t v33 = 136315394;
      swift_bridgeObjectRetain(a4);
      uint64_t v48 = sub_1003F11D4(v43, a4, v49);
      uint64_t v43 = a5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v33 + 4, v33 + 12);
      swift_bridgeObjectRelease_n(a4, 3LL);
      *(_WORD *)(v33 + 12) = 2080;
      uint64_t v34 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter(v9, v34);
      uint64_t v48 = sub_1003F11D4(v35, v36, v49);
      a5 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v33 + 14, v33 + 22);
      swift_bridgeObjectRelease();
      uint64_t v37 = *(void (**)(char *, uint64_t))(v10 + 8);
      v37(v13, v9);
      _os_log_impl( (void *)&_mh_execute_header,  v31,  v32,  "Successfully sent message to %s: (%s)",  (uint8_t *)v33,  0x16u);
      uint64_t v38 = v42;
      swift_arrayDestroy(v42, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1LL, -1LL);
      swift_slowDealloc(v33, -1LL, -1LL);
      uint64_t v28 = ((uint64_t (*)(char *, uint64_t))v37)(v15, v9);
    }

    else
    {
      uint64_t v39 = *(void (**)(char *, uint64_t))(v10 + 8);
      v39(v13, v9);
      uint64_t v28 = ((uint64_t (*)(char *, uint64_t))v39)(v15, v9);
    }
  }

  __chkstk_darwin(v28);
  *(&v41 - 2) = v44;
  uint64_t v40 = sub_100004AEC(&qword_1009A5FF8);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10020B1D4, &v41 - 4, a5, v40, (char *)&type metadata for () + 8);
  dispatch_group_leave(v45);
}

uint64_t sub_1001EB9AC(unint64_t *a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A24D8);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001581C(a2, (uint64_t)v7, &qword_1009A24D8);
  unint64_t v8 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    unint64_t v8 = sub_1004C5AFC(0, *(void *)(v8 + 16) + 1LL, 1, v8);
  }
  unint64_t v10 = *(void *)(v8 + 16);
  unint64_t v9 = *(void *)(v8 + 24);
  if (v10 >= v9 >> 1) {
    unint64_t v8 = sub_1004C5AFC(v9 > 1, v10 + 1, 1, v8);
  }
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = v10 + 1;
  uint64_t result = sub_100015750( (uint64_t)v7,  v8 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
           + *(void *)(v5 + 72) * v10,
             &qword_1009A24D8);
  *a1 = v8;
  return result;
}

uint64_t sub_1001EBACC()
{
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  sub_100004AEC(&qword_1009A60F8);
  sub_1006A1B88(v4);
  double v1 = v0;
  uint64_t v2 = swift_bridgeObjectRelease();
  uint64_t result = AsyncKeyedThrottle.__allocating_init(throttleInterval:)(v2, v1);
  qword_1009A5D88 = result;
  return result;
}

uint64_t sub_1001EBB84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  void v4[2] = a1;
  void v4[3] = a2;
  return swift_task_switch(sub_1001EBBA0, 0LL, 0LL);
}

uint64_t sub_1001EBBA0()
{
  if (qword_10099B1C0 != -1) {
    swift_once(&qword_10099B1C0, sub_1001EBACC);
  }
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = swift_allocObject(&unk_100949788, 32LL, 7LL);
  v0[6] = v3;
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v0[7] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1001EBC84;
  return ((uint64_t (*)(void, void *, uint64_t, void (__swiftcall *)(), void))v7)( v0[3],  &unk_1009A60F0,  v3,  DeviceInformationProviderFactory.init(),  0LL);
}

uint64_t sub_1001EBC84()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 56LL);
  *(void *)(*(void *)v1 + 64LL) = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
  {
    swift_errorRelease(v0);
    uint64_t v3 = sub_10020FF68;
  }

  else
  {
    uint64_t v3 = sub_1001EBCF8;
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1001EBCF8()
{
  **(_BYTE **)(v0 + swift_weakDestroy(v0 + 16) = *(void *)(v0 + 64) != 0LL;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001EBD14(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_task_switch(sub_1001EBD2C, 0LL, 0LL);
}

uint64_t sub_1001EBD2C()
{
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1LL);
}

uint64_t sub_1001EBD64(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v6);
    _OWORD v7[2] = v5;
    void v7[3] = a2;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.reevaluateFamilySharing",  53LL,  2LL,  sub_10020D550,  v7);
    return swift_release();
  }

  return result;
}

uint64_t sub_1001EBE24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v28 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  v25[1] = *(void *)(a2 + 168);
  sub_10001DC4C(a3, (uint64_t)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL), v15);
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v18 = swift_allocObject(&unk_1009497B0, v17 + v14, v16 | 7);
  *(void *)(v18 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v18 + 24) = a2;
  sub_10002218C( (uint64_t)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v18 + v17,  type metadata accessor for OwnedBeaconRecord);
  void aBlock[4] = sub_10020D810;
  void aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_1009497C8;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v20 = swift_retain();
  static DispatchQoS.unspecified.getter(v20);
  os_log_type_t v30 = _swiftEmptyArrayStorage;
  uint64_t v21 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v22 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v23 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v22, v23, v6, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v8, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v27);
  return swift_release();
}

_BYTE *sub_1001EC098(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t a1))
{
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v4);
  Transaction.capture()();
  return sub_1001EC234(a3);
}

_BYTE *sub_1001EC234(uint64_t (*a1)(uint64_t a1))
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (uint64_t *)((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = *(void **)(v3 + 168);
  *unint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  uint64_t v11 = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    swift_once(&qword_10099B728, sub_1006512E8);
    goto LABEL_4;
  }

  uint64_t result = sub_1001EC42C(a1);
  if (v2) {
    return result;
  }
  unint64_t v8 = result;
  uint64_t v11 = v13;
  uint64_t v6 = v14;
  unsigned int v23 = static os_log_type_t.default.getter(result);
  if (qword_10099B728 != -1) {
    goto LABEL_7;
  }
LABEL_4:
  uint64_t v22 = qword_100A2B038;
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
  *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v17 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v18 = UUID.uuidString.getter(v17);
  uint64_t v20 = v19;
  *(void *)(v16 + 56) = &type metadata for String;
  *(void *)(v16 + 64) = sub_1000226F4();
  *(void *)(v16 + 32) = v18;
  *(void *)(v16 + 4sub_100032838(0, 7LL, 0) = v20;
  os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v22, "reevaluateFamilySharing for %@", 30LL, 2LL, v16);
  swift_bridgeObjectRelease();
  sub_1001ED818((uint64_t)a1, v11);
  sub_1001EDE28((uint64_t)a1, (uint64_t)v8, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (_BYTE *)swift_bridgeObjectRelease();
}

_BYTE *sub_1001EC42C(uint64_t (*a1)(uint64_t a1))
{
  uint64_t v2 = v1;
  uint64_t v162 = type metadata accessor for CorrelationIdentifierMap(0LL);
  uint64_t v160 = *(void *)(v162 - 8);
  __chkstk_darwin(v162);
  unint64_t v161 = &v156[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = type metadata accessor for ShareRecord(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  os_log_t v165 = &v156[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v167 = &v156[-v10];
  __chkstk_darwin(v9);
  uint64_t v12 = &v156[-v11];
  uint64_t v13 = sub_100004AEC(&qword_1009A6108);
  uint64_t v14 = __chkstk_darwin(v13);
  unint64_t v168 = (unint64_t)&v156[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v14);
  uint64_t v169 = (uint64_t (*)(uint64_t))&v156[-v16];
  uint64_t v17 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = &v156[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  v173[0] = 0x7365547265646E75LL;
  v173[1] = 0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v174, v173, sub_10000A71C, 0LL, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if (v174 == 1)
  {
    sub_1004138CC((uint64_t)_swiftEmptyArrayStorage);
    return &_swiftEmptySetSingleton;
  }

  uint64_t v21 = *(void **)(v1 + 168);
  void *v20 = v21;
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  id v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)(v20);
  (*(void (**)(void *, uint64_t))(v18 + 8))(v20, v17);
  if ((v21 & 1) == 0)
  {
    __break(1u);
LABEL_51:
    v173[0] = v23;
    sub_1003CC2A4(v2);
    swift_bridgeObjectRelease();
    int v96 = (void *)v173[0];
    goto LABEL_52;
  }

  unint64_t v159 = (char *)a1 + *(int *)(type metadata accessor for OwnedBeaconRecord(0LL) + 20);
  uint64_t v24 = sub_1005777D8();
  uint64_t v25 = v24;
  uint64_t v26 = v24[2];
  *(void *)&__int128 v172 = v5;
  uint64_t v166 = v26;
  if (v26)
  {
    uint64_t v27 = (uint64_t)v24 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v164 = *(_BYTE **)(v6 + 72);
    swift_bridgeObjectRetain(v24);
    uint64_t v28 = _swiftEmptyArrayStorage;
    uint64_t v29 = v26;
    do
    {
      os_log_type_t v30 = v165;
      sub_10001DC4C(v27, (uint64_t)v165, type metadata accessor for ShareRecord);
      unint64_t v31 = &v30[*(int *)(v5 + 36)];
      LODWORD(v171) = *v31;
      uint64_t v32 = *((void *)v31 + 2);
      unint64_t v170 = *((void *)v31 + 1);
      swift_bridgeObjectRetain(v32);
      sub_100018C68((uint64_t)v30, type metadata accessor for ShareRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0) {
        uint64_t v28 = sub_1004C4768(0LL, v28[2] + 1LL, 1, v28);
      }
      unint64_t v34 = v28[2];
      unint64_t v33 = v28[3];
      if (v34 >= v33 >> 1) {
        uint64_t v28 = sub_1004C4768((void *)(v33 > 1), v34 + 1, 1, v28);
      }
      v28[2] = v34 + 1;
      uint64_t v35 = &v28[3 * v34];
      *((_BYTE *)v35 + 32) = v171;
      v35[5] = v170;
      v35[6] = v32;
      v27 += (uint64_t)v164;
      --v29;
      uint64_t v5 = v172;
    }

    while (v29);
    swift_bridgeObjectRelease();
    uint64_t v26 = v166;
  }

  else
  {
    uint64_t v28 = _swiftEmptyArrayStorage;
  }

  uint64_t v171 = sub_1006F1294((uint64_t)v28);
  swift_bridgeObjectRelease();
  unint64_t v170 = sub_10020EA54();
  uint64_t v36 = Set.init(minimumCapacity:)(0LL);
  unint64_t v37 = 0LL;
  uint64_t v174 = v36;
  a1 = type metadata accessor for ShareRecord;
  uint64_t v38 = v168;
  if (v26) {
    goto LABEL_16;
  }
LABEL_22:
  while (2)
  {
    uint64_t v45 = 1LL;
    unint64_t v37 = v26;
LABEL_24:
    uint64_t v46 = v169;
    (*(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v6 + 56))(v169, v45, 1LL, v5);
    sub_100015750((uint64_t)v46, v38, &qword_1009A6108);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v38, 1LL, v5) == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v55 = v174;
      uint64_t v56 = v163;
      sub_10020A32C();
      uint64_t v6 = v56;
      if (!v56)
      {
        a1 = (uint64_t (*)(uint64_t))v57;
        int64_t v58 = *(void *)(v57 + 16);
        unint64_t v59 = _swiftEmptyArrayStorage;
        *(void *)&__int128 v172 = v55;
        if (v58)
        {
          uint64_t v163 = 0LL;
          v173[0] = _swiftEmptyArrayStorage;
          sub_100032EFC(0, v58, 0);
          unint64_t v59 = (void *)v173[0];
          uint64_t v169 = a1;
          uint64_t v60 = (unint64_t *)((char *)a1 + 64);
          do
          {
            char v61 = *((_BYTE *)v60 - 32);
            uint64_t v63 = *(v60 - 3);
            uint64_t v62 = *(v60 - 2);
            uint64_t v64 = *(v60 - 1);
            unint64_t v65 = *v60;
            swift_bridgeObjectRetain(v62);
            sub_100018BE4(v64, v65);
            sub_1000182F0(v64, v65);
            v173[0] = v59;
            unint64_t v67 = v59[2];
            unint64_t v66 = v59[3];
            if (v67 >= v66 >> 1)
            {
              sub_100032EFC(v66 > 1, v67 + 1, 1);
              unint64_t v59 = (void *)v173[0];
            }

            v59[2] = v67 + 1;
            uint64_t v68 = &v59[3 * v67];
            *((_BYTE *)v68 + 32) = v61;
            v60 += 5;
            v68[5] = v63;
            v68[6] = v62;
            --v58;
          }

          while (v58);
          uint64_t v6 = v163;
          a1 = v169;
          uint64_t v55 = v172;
        }

        uint64_t v26 = sub_1006F1294((uint64_t)v59);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain(v55);
        uint64_t v69 = v171;
        swift_bridgeObjectRetain(v171);
        uint64_t v71 = sub_10045D314(v70, v55);
        swift_bridgeObjectRetain(v26);
        uint64_t v73 = sub_10045D314(v72, v71);
        uint64_t v74 = (void *)swift_allocObject(&unk_100949CB0, 40LL, 7LL);
        v74[2] = v73;
        v74[3] = v55;
        v74[4] = v69;
        swift_bridgeObjectRetain(v55);
        __n128 v75 = swift_bridgeObjectRetain(v69);
        uint64_t v12 = v161;
        uint64_t v5 = v162;
        unsafeFromAsyncTask<A>(_:)(&unk_1009A6170, v74, v162, v75);
        if (!v6)
        {
          swift_release();
          sub_1001DBC78(v26);
          uint64_t v77 = sub_1006F16F8(v76);
          swift_bridgeObjectRelease();
          uint64_t v36 = CorrelationIdentifierMap.map(destinations:)(v77);
          goto LABEL_41;
        }

        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      swift_bridgeObjectRelease();
LABEL_38:
      swift_bridgeObjectRelease();
      return v12;
    }

    uint64_t v47 = v38;
    uint64_t v48 = v167;
    sub_10002218C(v47, (uint64_t)v167, type metadata accessor for ShareRecord);
    unint64_t v49 = &v48[*(int *)(v5 + 36)];
    uint64_t v50 = *((void *)v49 + 1);
    uint64_t v51 = *((void *)v49 + 2);
    unsigned __int8 v52 = *v49;
    swift_bridgeObjectRetain(v51);
    sub_100018C68((uint64_t)v48, type metadata accessor for ShareRecord);
    uint64_t v53 = v50;
    uint64_t v26 = v166;
    uint64_t v54 = v51;
    uint64_t v5 = v172;
    sub_1000BDB08((uint64_t)v173, v52, v53, v54);
    uint64_t v38 = v168;
    uint64_t v36 = swift_bridgeObjectRelease();
    if (v37 == v26) {
      continue;
    }
    break;
  }

uint64_t sub_1001ED584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  void v4[2] = a1;
  void v4[3] = a2;
  return swift_task_switch(sub_1001ED5A0, 0LL, 0LL);
}

uint64_t sub_1001ED5A0()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v4 = swift_allocObject(&unk_100949CD8, 32LL, 7LL);
  v0[6] = v4;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v1;
  *(void *)(v4 + 24) = v2;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v2);
  sub_1001DBC78(v3);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  uint64_t v7 = swift_allocObject(&unk_100949D00, 32LL, 7LL);
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = sub_10020EB54;
  *(void *)(v7 + 24) = v4;
  uint64_t v8 = async function pointer to CorrelationIdentifierMap.init(serviceName:destinations:disambiguate:)[1];
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc(v8);
  v0[7] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1001ED6B0;
  return CorrelationIdentifierMap.init(serviceName:destinations:disambiguate:)( v0[2],  0xD00000000000001BLL,  0x8000000100851AB0LL,  v6,  sub_10020EB5C,  v7);
}

uint64_t sub_1001ED6B0()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 56LL);
  *(void *)(*(void *)v1 + 64LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1001ED748;
  }
  else {
    uint64_t v3 = sub_1001ED714;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1001ED714()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001ED748()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001ED77C( unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a6;
  uint64_t v11 = a4;
  if ((sub_1004E57AC(a4, a5, a6, a7) & 1) == 0)
  {
    char v14 = sub_1004E57AC(v11, a5, v9, a8);
    if ((v14 & 1) != 0) {
      uint64_t v11 = v11;
    }
    else {
      uint64_t v11 = a1;
    }
    if ((v14 & 1) == 0) {
      uint64_t v9 = a3;
    }
  }

  swift_bridgeObjectRetain(v9);
  return v11;
}

void sub_1001ED818(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v44 = a1;
  uint64_t v5 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = *(void **)(v3 + 168);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  char v11 = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if ((v11 & 1) == 0) {
    goto LABEL_28;
  }
  uint64_t v12 = *(void *)(a2 + 56);
  uint64_t v39 = a2 + 56;
  uint64_t v13 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v40 = (unint64_t)(v13 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  int64_t v16 = 0LL;
  __int128 v42 = xmmword_1007E4750;
  unint64_t v41 = (char *)&type metadata for () + 8;
  uint64_t v43 = a2;
  if (!v15) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v45 = (v15 - 1) & v15;
  int64_t v46 = v16;
  for (unint64_t i = __clz(__rbit64(v15)) | (v16 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v19 << 6))
  {
    uint64_t v22 = *(void *)(a2 + 48) + 24 * i;
    uint64_t v23 = *(void *)(v22 + 8);
    uint64_t v24 = *(void *)(v22 + 16);
    unsigned __int8 v25 = *(_BYTE *)v22;
    type metadata accessor for OwnedBeaconRecord(0LL);
    swift_bridgeObjectRetain(v24);
    uint64_t v26 = sub_1005777D8();
    swift_bridgeObjectRetain(v24);
    uint64_t v47 = sub_1001FF034((uint64_t)v26, v25, v23, v24);
    swift_bridgeObjectRelease();
    uint64_t v27 = swift_bridgeObjectRelease();
    uint64_t v28 = static os_log_type_t.default.getter(v27);
    uint64_t v29 = v3;
    if (qword_10099B728 != -1) {
      swift_once(&qword_10099B728, sub_1006512E8);
    }
    uint64_t v30 = qword_100A2B038;
    uint64_t v31 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v32 = swift_allocObject(v31, 112LL, 7LL);
    *(_OWORD *)(v32 + swift_weakDestroy(v0 + 16) = v42;
    uint64_t v33 = UUID.uuidString.getter(v32);
    uint64_t v35 = v34;
    *(void *)(v32 + 56) = &type metadata for String;
    unint64_t v36 = sub_1000226F4();
    *(void *)(v32 + 32) = v33;
    *(void *)(v32 + 4sub_100032838(0, 7LL, 0) = v35;
    *(void *)(v32 + 96) = &type metadata for String;
    *(void *)(v32 + 104) = v36;
    *(void *)(v32 + 64) = v36;
    *(void *)(v32 + 72) = v23;
    *(void *)(v32 + 8sub_100032838(0, 7LL, 0) = v24;
    os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v30, "Unshare %@ to %@", 16LL, 2LL, v32);
    swift_bridgeObjectRelease();
    uint64_t v37 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v37);
    *(&v38 - 2) = (uint64_t)v47;
    *(&v38 - 1) = v29;
    static Transaction.named<A>(_:with:)("BeaconSharingManager.family_unshare", 35LL, 2LL, sub_10020EA34, &v38 - 4);
    swift_bridgeObjectRelease();
    a2 = v43;
    uint64_t v3 = v29;
    unint64_t v15 = v45;
    int64_t v16 = v46;
    if (v45) {
      goto LABEL_5;
    }
LABEL_6:
    BOOL v18 = __OFADD__(v16, 1LL);
    int64_t v19 = v16 + 1;
    if (v18)
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v19 >= v40) {
      goto LABEL_25;
    }
    unint64_t v20 = *(void *)(v39 + 8 * v19);
    if (!v20) {
      break;
    }
LABEL_16:
    uint64_t v45 = (v20 - 1) & v20;
    int64_t v46 = v19;
  }

  int64_t v21 = v19 + 1;
  if (v19 + 1 >= v40) {
    goto LABEL_25;
  }
  unint64_t v20 = *(void *)(v39 + 8 * v21);
  if (v20) {
    goto LABEL_15;
  }
  int64_t v21 = v19 + 2;
  if (v19 + 2 >= v40) {
    goto LABEL_25;
  }
  unint64_t v20 = *(void *)(v39 + 8 * v21);
  if (v20) {
    goto LABEL_15;
  }
  int64_t v21 = v19 + 3;
  if (v19 + 3 >= v40)
  {
LABEL_25:
    swift_release();
    return;
  }

  unint64_t v20 = *(void *)(v39 + 8 * v21);
  if (v20)
  {
LABEL_15:
    int64_t v19 = v21;
    goto LABEL_16;
  }

  while (1)
  {
    int64_t v19 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v19 >= v40) {
      goto LABEL_25;
    }
    unint64_t v20 = *(void *)(v39 + 8 * v19);
    ++v21;
    if (v20) {
      goto LABEL_16;
    }
  }

uint64_t sub_1001EDBE0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(type metadata accessor for ShareRecord(0LL) - 8);
    uint64_t v6 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v7 = *(void *)(v5 + 72);
    swift_bridgeObjectRetain(a2);
    do
    {
      swift_retain();
      sub_1001DD324(v6, (uint64_t)sub_10020EA4C, v4);
      swift_release();
      v6 += v7;
      --v2;
    }

    while (v2);
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_1001EDC90(uint64_t a1)
{
  if (a1)
  {
    uint64_t v3 = swift_errorRetain(a1);
    uint64_t v4 = static os_log_type_t.error.getter(v3);
    if (qword_10099B728 != -1) {
      swift_once(&qword_10099B728, sub_1006512E8);
    }
    uint64_t v5 = qword_100A2B038;
    uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
    *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v14 = a1;
    swift_errorRetain(a1);
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v9 = String.init<A>(describing:)(&v14, v8);
    uint64_t v11 = v10;
    *(void *)(v7 + 56) = &type metadata for String;
    *(void *)(v7 + 64) = sub_1000226F4();
    *(void *)(v7 + 32) = v9;
    *(void *)(v7 + 4sub_100032838(0, 7LL, 0) = v11;
    os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Error unsharing: %@", 19LL, 2LL, v7);
    swift_bridgeObjectRelease();
    return swift_errorRelease(a1);
  }

  else
  {
    uint64_t v13 = static os_log_type_t.default.getter(v2);
    if (qword_10099B728 != -1) {
      swift_once(&qword_10099B728, sub_1006512E8);
    }
    return os_log(_:dso:log:_:_:)( v13,  &_mh_execute_header,  qword_100A2B038,  "Unshare successful",  18LL,  2LL,  _swiftEmptyArrayStorage);
  }

uint64_t sub_1001EDE28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v78 = a3;
  uint64_t v79 = a2;
  uint64_t v80 = a1;
  uint64_t v75 = type metadata accessor for ShareInstruction(0LL);
  __chkstk_darwin(v75);
  uint64_t v74 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v85 = *(void *)(v5 - 8);
  uint64_t v86 = v5;
  __chkstk_darwin(v5);
  uint64_t v73 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v76 = v3;
  uint64_t v11 = *(void **)(v3 + 168);
  *uint64_t v10 = v11;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_39;
  }

  id v13 = [objc_allocWithZone(ACAccountStore) init];
  id v14 = objc_msgSend(v13, "aa_primaryAppleAccount");

  if (!v14)
  {
    uint64_t v7 = static os_log_type_t.error.getter(v15);
    if (qword_10099B720 == -1) {
      return os_log(_:dso:log:_:_:)( v7,  &_mh_execute_header,  qword_100A2B030,  "Could not obtain aa_primaryAppleAccount!",  40LL,  2LL,  _swiftEmptyArrayStorage);
    }
LABEL_39:
    swift_once(&qword_10099B720, sub_10065128C);
    return os_log(_:dso:log:_:_:)( v7,  &_mh_execute_header,  qword_100A2B030,  "Could not obtain aa_primaryAppleAccount!",  40LL,  2LL,  _swiftEmptyArrayStorage);
  }

  id v66 = v14;
  id v16 = objc_msgSend(v14, "aa_altDSID");
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    unint64_t v77 = v18;
  }

  else
  {
    uint64_t v72 = 0LL;
    unint64_t v77 = 0xE000000000000000LL;
  }

  uint64_t v20 = v78;
  uint64_t v21 = *(void *)(v79 + 56);
  uint64_t v67 = v79 + 56;
  uint64_t v22 = 1LL << *(_BYTE *)(v79 + 32);
  uint64_t v23 = -1LL;
  if (v22 < 64) {
    uint64_t v23 = ~(-1LL << v22);
  }
  unint64_t v24 = v23 & v21;
  int64_t v69 = (unint64_t)(v22 + 63) >> 6;
  swift_bridgeObjectRetain(v79);
  int64_t v25 = 0LL;
  uint64_t v26 = 0LL;
  __int128 v68 = xmmword_1007E67D0;
  uint64_t v71 = (char *)&type metadata for () + 8;
  while (1)
  {
    if (v24)
    {
      unint64_t v38 = __clz(__rbit64(v24));
      uint64_t v39 = (v24 - 1) & v24;
      unint64_t v40 = v38 | (v25 << 6);
      goto LABEL_24;
    }

    if (__OFADD__(v25++, 1LL))
    {
      __break(1u);
      goto LABEL_37;
    }

    if (v25 >= v69) {
      goto LABEL_35;
    }
    unint64_t v42 = *(void *)(v67 + 8 * v25);
    if (!v42) {
      break;
    }
LABEL_23:
    uint64_t v39 = (v42 - 1) & v42;
    unint64_t v40 = __clz(__rbit64(v42)) + (v25 << 6);
LABEL_24:
    uint64_t v44 = (unsigned __int8 *)(*(void *)(v79 + 48) + 24 * v40);
    int v45 = *v44;
    uint64_t v47 = *((void *)v44 + 1);
    uint64_t v46 = *((void *)v44 + 2);
    uint64_t v48 = *(void *)(v20 + 16);
    swift_bridgeObjectRetain(v46);
    int64_t v83 = v25;
    uint64_t v84 = v26;
    unint64_t v82 = v39;
    int v81 = v45;
    if (v48)
    {
      swift_bridgeObjectRetain(v46);
      unint64_t v50 = sub_10030D3A8(v45, v47, v46);
      if ((v51 & 1) != 0)
      {
        unsigned __int8 v52 = (uint64_t *)(*(void *)(v20 + 56) + 16 * v50);
        uint64_t v53 = *v52;
        unint64_t v54 = v52[1];
        sub_10001736C(*v52, v54);
        swift_bridgeObjectRelease();
        uint64_t v55 = type metadata accessor for OwnedBeaconRecord(0LL);
        v87[5] = UUID.data.getter(v55);
        v87[6] = v56;
        uint64_t v70 = v56;
        v87[3] = &type metadata for Data;
        v87[4] = &protocol witness table for Data;
        v87[0] = v53;
        v87[1] = v54;
        uint64_t v57 = (char *)&loc_1001EE440
            + *((int *)qword_1001EE828 + (sub_100012ED8(v87, (uint64_t)&type metadata for Data)[1] >> 62));
        __asm { BR              X9 }
      }

      uint64_t v49 = swift_bridgeObjectRelease();
    }

    uint64_t v58 = static os_log_type_t.error.getter(v49);
    if (qword_10099B728 != -1) {
      swift_once(&qword_10099B728, sub_1006512E8);
    }
    uint64_t v59 = qword_100A2B038;
    uint64_t v60 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v61 = swift_allocObject(v60, 72LL, 7LL);
    *(_OWORD *)(v61 + swift_weakDestroy(v0 + 16) = v68;
    *(void *)(v61 + 56) = &type metadata for String;
    *(void *)(v61 + 64) = sub_1000226F4();
    *(void *)(v61 + 32) = v47;
    *(void *)(v61 + 4sub_100032838(0, 7LL, 0) = v46;
    *(void *)&double v62 = swift_bridgeObjectRetain(v46).n128_u64[0];
    os_log(_:dso:log:_:_:)( v58,  &_mh_execute_header,  v59,  "Unable to obtain stable shareIdentifier for %@",  46LL,  2LL,  v61,  v62);
    uint64_t v63 = swift_bridgeObjectRelease();
    uint64_t v64 = v73;
    UUID.init()(v63);
    uint64_t v27 = v46;
    uint64_t v28 = v47;
    uint64_t v29 = (int *)v75;
    uint64_t v30 = (uint64_t)v74;
    uint64_t v31 = v80;
    sub_10001DC4C(v80, (uint64_t)&v74[*(int *)(v75 + 24)], type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(uint64_t, char *, uint64_t))(v85 + 16))(v30 + v29[8], v64, v86);
    uint64_t v32 = v30 + v29[9];
    uint64_t v33 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56LL))(v32, 1LL, 1LL, v33);
    *(_BYTE *)uint64_t v30 = 1;
    unint64_t v34 = v77;
    *(void *)(v30 + 8) = v72;
    *(void *)(v30 + swift_weakDestroy(v0 + 16) = v34;
    uint64_t v35 = v30 + v29[7];
    char v36 = v81;
    *(_BYTE *)uint64_t v35 = v81;
    *(void *)(v35 + 8) = v28;
    *(void *)(v35 + swift_weakDestroy(v0 + 16) = v27;
    uint64_t v37 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v37);
    *(&v65 - 6) = v76;
    *(&v65 - 5) = v30;
    *(&v65 - 4) = v31;
    *((_BYTE *)&v65 - 24) = v36;
    *(&v65 - 2) = v28;
    *(&v65 - 1) = v27;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v34);
    uint64_t v26 = v84;
    static Transaction.named<A>(_:with:)("BeaconManagerService.family_share", 33LL, 2LL, sub_10020D824, &v65 - 8);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v85 + 8))(v64, v86);
    sub_100018C68(v30, type metadata accessor for ShareInstruction);
    uint64_t v20 = v78;
    unint64_t v24 = v82;
    int64_t v25 = v83;
  }

  int64_t v43 = v25 + 1;
  if (v25 + 1 >= v69) {
    goto LABEL_35;
  }
  unint64_t v42 = *(void *)(v67 + 8 * v43);
  if (v42) {
    goto LABEL_22;
  }
  int64_t v43 = v25 + 2;
  if (v25 + 2 >= v69) {
    goto LABEL_35;
  }
  unint64_t v42 = *(void *)(v67 + 8 * v43);
  if (v42)
  {
LABEL_22:
    int64_t v25 = v43;
    goto LABEL_23;
  }

  int64_t v43 = v25 + 3;
  if (v25 + 3 < v69)
  {
    unint64_t v42 = *(void *)(v67 + 8 * v43);
    if (!v42)
    {
      while (1)
      {
        int64_t v25 = v43 + 1;
        if (__OFADD__(v43, 1LL)) {
          break;
        }
        if (v25 >= v69) {
          goto LABEL_35;
        }
        unint64_t v42 = *(void *)(v67 + 8 * v25);
        ++v43;
        if (v42) {
          goto LABEL_23;
        }
      }

uint64_t sub_1001EE838( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v67 = a6;
  uint64_t v66 = a4;
  uint64_t v61 = a2;
  uint64_t v62 = a3;
  uint64_t v56 = sub_100004AEC(&qword_1009A6100);
  __chkstk_darwin(v56);
  uint64_t v57 = (uint64_t *)((char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v60 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v11 = *(void *)(v60 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v60);
  id v14 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v55 - v16;
  __chkstk_darwin(v15);
  int64_t v19 = (char *)&v55 - v18;
  sub_10001DC4C(v66, (uint64_t)&v55 - v18, type metadata accessor for OwnedBeaconRecord);
  uint64_t v64 = v17;
  sub_10001DC4C((uint64_t)v19, (uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
  uint64_t v20 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v21 = (v20 + 24) & ~v20;
  unint64_t v22 = (v12 + v21 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v23 = swift_allocObject(&unk_100949800, v22 + 24, v20 | 7);
  *(void *)(v23 + swift_weakDestroy(v0 + 16) = a1;
  sub_10002218C((uint64_t)v19, v23 + v21, type metadata accessor for OwnedBeaconRecord);
  uint64_t v63 = v23;
  unint64_t v24 = v23 + v22;
  unsigned int v58 = a5;
  *(_BYTE *)unint64_t v24 = a5;
  *(void *)(v24 + 8) = v67;
  *(void *)(v24 + swift_weakDestroy(v0 + 16) = a7;
  uint64_t v65 = a1;
  swift_retain_n(a1, 2LL);
  uint64_t v66 = a7;
  swift_bridgeObjectRetain_n(a7, 2LL);
  unsigned int v59 = static os_log_type_t.default.getter(v25);
  if (qword_10099B700 != -1) {
    swift_once(&qword_10099B700, sub_100651100);
  }
  uint64_t v26 = qword_100A2B010;
  uint64_t v27 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v28 = swift_allocObject(v27, 112LL, 7LL);
  __int128 v55 = xmmword_1007E4750;
  *(_OWORD *)(v28 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v29 = type metadata accessor for ShareInstruction(0LL);
  uint64_t v30 = v62;
  sub_10001DC4C(v62 + *(int *)(v29 + 24), (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
  uint64_t v31 = String.init<A>(describing:)(v14, v60);
  uint64_t v33 = v32;
  *(void *)(v28 + 56) = &type metadata for String;
  unint64_t v34 = sub_1000226F4();
  *(void *)(v28 + 64) = v34;
  *(void *)(v28 + 32) = v31;
  *(void *)(v28 + 4sub_100032838(0, 7LL, 0) = v33;
  uint64_t v35 = v30 + *(int *)(v29 + 28);
  uint64_t v37 = *(void *)(v35 + 8);
  uint64_t v36 = *(void *)(v35 + 16);
  *(void *)(v28 + 96) = &type metadata for String;
  *(void *)(v28 + 104) = v34;
  *(void *)(v28 + 72) = v37;
  *(void *)(v28 + 8sub_100032838(0, 7LL, 0) = v36;
  *(void *)&double v38 = swift_bridgeObjectRetain(v36).n128_u64[0];
  os_log(_:dso:log:_:_:)(v59, &_mh_execute_header, v26, "Share beacon: %@ to %@", 22LL, 2LL, v28, v38);
  swift_bridgeObjectRelease();
  uint64_t v39 = v61;
  uint64_t v40 = sub_1001E5EE4(v30);
  if (v40)
  {
    uint64_t v41 = v40;
    uint64_t v42 = static os_log_type_t.error.getter(v40);
    uint64_t v43 = qword_100A2B010;
    uint64_t v44 = swift_allocObject(v27, 112LL, 7LL);
    *(_OWORD *)(v44 + swift_weakDestroy(v0 + 16) = v55;
    *(void *)(v44 + 56) = &type metadata for String;
    *(void *)(v44 + 64) = v34;
    *(void *)(v44 + 32) = v37;
    *(void *)(v44 + 4sub_100032838(0, 7LL, 0) = v36;
    uint64_t v68 = v41;
    swift_bridgeObjectRetain(v36);
    swift_errorRetain(v41);
    uint64_t v45 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v46 = String.init<A>(describing:)(&v68, v45);
    *(void *)(v44 + 96) = &type metadata for String;
    *(void *)(v44 + 104) = v34;
    *(void *)(v44 + 72) = v46;
    *(void *)(v44 + 8sub_100032838(0, 7LL, 0) = v47;
    os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, v43, "Cannot share to [%@]: %@", 24LL, 2LL, v44);
    swift_bridgeObjectRelease();
    uint64_t v48 = v56;
    uint64_t v49 = (uint64_t)v57;
    *uint64_t v57 = v41;
    swift_storeEnumTagMultiPayload(v49, v48, 1LL);
    swift_errorRetain(v41);
    uint64_t v50 = (uint64_t)v64;
    sub_1001EEC78(v49, v65, (uint64_t)v64, v58, v67, v66);
    swift_errorRelease(v41);
    sub_100015794(v49, &qword_1009A6100);
    swift_release();
  }

  else
  {
    uint64_t v51 = v39;
    uint64_t v52 = v30;
    uint64_t v53 = v63;
    swift_retain();
    sub_100203454(v52, v51, (uint64_t)sub_10020DB00, v53);
    swift_release();
    swift_release();
    uint64_t v50 = (uint64_t)v64;
  }

  swift_release();
  sub_100018C68(v50, type metadata accessor for OwnedBeaconRecord);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001EEC78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = sub_100004AEC(&qword_1009A6100);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Transaction.capture()();
  sub_10001581C(a1, (uint64_t)v11, &qword_1009A6100);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v9);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v13 = *v11;
    uint64_t v14 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_10099B728 != -1) {
      swift_once(&qword_10099B728, sub_1006512E8);
    }
    uint64_t v15 = qword_100A2B038;
    uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v17 = swift_allocObject(v16, 152LL, 7LL);
    *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E4050;
    uint64_t v18 = type metadata accessor for OwnedBeaconRecord(0LL);
    uint64_t v19 = UUID.uuidString.getter(v18);
    uint64_t v21 = v20;
    *(void *)(v17 + 56) = &type metadata for String;
    unint64_t v22 = sub_1000226F4();
    *(void *)(v17 + 32) = v19;
    *(void *)(v17 + 4sub_100032838(0, 7LL, 0) = v21;
    *(void *)(v17 + 96) = &type metadata for String;
    *(void *)(v17 + 104) = v22;
    *(void *)(v17 + 64) = v22;
    *(void *)(v17 + 72) = a5;
    *(void *)(v17 + 8sub_100032838(0, 7LL, 0) = a6;
    uint64_t v38 = v13;
    swift_bridgeObjectRetain(a6);
    swift_errorRetain(v13);
    uint64_t v23 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v24 = String.init<A>(describing:)(&v38, v23);
    *(void *)(v17 + 136) = &type metadata for String;
    *(void *)(v17 + 144) = v22;
    *(void *)(v17 + 112) = v24;
    *(void *)(v17 + 12sub_100032838(0, 7LL, 0) = v25;
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "Failed to share %@ shared to %@: %@", 35LL, 2LL, v17);
    swift_bridgeObjectRelease();
    return swift_errorRelease(v13);
  }

  else
  {
    uint64_t v27 = static os_log_type_t.default.getter(EnumCaseMultiPayload);
    if (qword_10099B728 != -1) {
      swift_once(&qword_10099B728, sub_1006512E8);
    }
    uint64_t v28 = qword_100A2B038;
    uint64_t v29 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v30 = swift_allocObject(v29, 112LL, 7LL);
    *(_OWORD *)(v30 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    uint64_t v31 = type metadata accessor for OwnedBeaconRecord(0LL);
    uint64_t v32 = UUID.uuidString.getter(v31);
    uint64_t v34 = v33;
    *(void *)(v30 + 56) = &type metadata for String;
    unint64_t v35 = sub_1000226F4();
    *(void *)(v30 + 32) = v32;
    *(void *)(v30 + 4sub_100032838(0, 7LL, 0) = v34;
    *(void *)(v30 + 96) = &type metadata for String;
    *(void *)(v30 + 104) = v35;
    *(void *)(v30 + 64) = v35;
    *(void *)(v30 + 72) = a5;
    *(void *)(v30 + 8sub_100032838(0, 7LL, 0) = a6;
    *(void *)&double v36 = swift_bridgeObjectRetain(a6).n128_u64[0];
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v28, "Successfully shared %@ with %@", 30LL, 2LL, v30, v36);
    swift_bridgeObjectRelease();
    return sub_100015794((uint64_t)v11, &qword_1009A6100);
  }

uint64_t sub_1001EEF2C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v32 = a5;
  int v31 = a4;
  uint64_t v35 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v38 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v34 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v36 = *(void *)(v9 - 8);
  uint64_t v37 = v9;
  __chkstk_darwin(v9);
  uint64_t v30 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = *(void *)(a2 + 152);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, v11);
  uint64_t v15 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = (v15 + 32) & ~v15;
  uint64_t v17 = v16 + v13;
  unint64_t v18 = (v16 + v13) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v19 = swift_allocObject(&unk_10094A0C0, v18 + 16, v15 | 7);
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v19 + 24) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v19 + v16, v14, v11);
  *(_BYTE *)(v19 + v17) = v31;
  uint64_t v20 = v32;
  *(void *)(v18 + v19 + 8) = v32;
  void aBlock[4] = sub_10020F6E4;
  void aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10094A0D8;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  uint64_t v22 = swift_errorRetain(v20);
  uint64_t v23 = v30;
  static DispatchQoS.unspecified.getter(v22);
  uint64_t v40 = _swiftEmptyArrayStorage;
  uint64_t v24 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v25 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v26 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v28 = v34;
  uint64_t v27 = v35;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v25, v26, v35, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v23, v28, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v28, v27);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v23, v37);
  return swift_release();
}

unint64_t sub_1001EF1E0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void **a5)
{
  uint64_t v117 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v115 = *(void *)(v117 - 8);
  __chkstk_darwin(v117);
  Swift::Int v113 = (char *)&v106 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v118 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v116 = *(void *)(v118 - 8);
  __chkstk_darwin(v118);
  uint64_t v114 = (char *)&v106 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v111 = *(void *)(v11 - 8);
  uint64_t v112 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v106 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v106 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Transaction.capture()();
  unint64_t v18 = (void *)(a2 + 176);
  swift_beginAccess(a2 + 176, &aBlock, 32LL, 0LL);
  uint64_t v19 = *(void *)(a2 + 176);
  if (*(void *)(v19 + 16))
  {
    unint64_t v20 = sub_10030D124(a3);
    if ((v21 & 1) != 0)
    {
      unint64_t v22 = *(void *)(*(void *)(v19 + 56) + 8 * v20);
      uint64_t v23 = swift_endAccess(&aBlock);
      if (v22 >> 62)
      {
        if (v22 >> 62 == 1)
        {
          uint64_t v24 = swift_errorRetain(v22 & 0x3FFFFFFFFFFFFFFFLL);
          uint64_t v25 = static os_log_type_t.error.getter(v24);
          if (qword_10099B700 != -1) {
            swift_once(&qword_10099B700, sub_100651100);
          }
          os_log(_:dso:log:_:_:)( v25,  &_mh_execute_header,  qword_100A2B010,  "ERROR: Unexpected state: error",  30LL,  2LL,  _swiftEmptyArrayStorage);
          return sub_10006A388(v22);
        }

        else
        {
          uint64_t v57 = static os_log_type_t.error.getter(v23);
          if (qword_10099B700 != -1) {
            swift_once(&qword_10099B700, sub_100651100);
          }
          return os_log(_:dso:log:_:_:)( v57,  &_mh_execute_header,  qword_100A2B010,  "ERROR: Already in sent state!",  29LL,  2LL,  _swiftEmptyArrayStorage);
        }
      }

      unint64_t v110 = v22;
      if ((a4 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3, v14);
        swift_beginAccess(a2 + 176, &aBlock, 33LL, 0LL);
        swift_retain_n(v22, 2LL);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v18);
        v126[0] = *v18;
        *unint64_t v18 = 0x8000000000000000LL;
        sub_10005D4FC(0x8000000000000000LL, (uint64_t)v17, isUniquelyReferenced_nonNull_native);
        *unint64_t v18 = v126[0];
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
        uint64_t v36 = swift_endAccess(&aBlock);
        uint64_t v37 = static os_log_type_t.default.getter(v36);
        if (qword_10099B700 != -1) {
          swift_once(&qword_10099B700, sub_100651100);
        }
        uint64_t v38 = qword_100A2B010;
        uint64_t v39 = sub_100004AEC((uint64_t *)&unk_10099D740);
        uint64_t v40 = swift_allocObject(v39, 72LL, 7LL);
        *(_OWORD *)(v40 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
        uint64_t v41 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter(v14, v41);
        uint64_t v44 = v43;
        *(void *)(v40 + 56) = &type metadata for String;
        *(void *)(v40 + 64) = sub_1000226F4();
        *(void *)(v40 + 32) = v42;
        *(void *)(v40 + 4sub_100032838(0, 7LL, 0) = v44;
        os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, v38, "Message %@ sent successfully.", 29LL, 2LL, v40);
        swift_bridgeObjectRelease();
        sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
        uint64_t v45 = v111;
        uint64_t v46 = v112;
        (*(void (**)(char *, void, uint64_t))(v111 + 104))( v13,  enum case for DispatchQoS.QoSClass.default(_:),  v112);
        uint64_t v47 = (void *)static OS_dispatch_queue.global(qos:)(v13);
        (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v46);
        unint64_t v48 = v110;
        int v123 = sub_10020F7A8;
        uint64_t v124 = v110;
        unint64_t aBlock = _NSConcreteStackBlock;
        uint64_t v120 = 1107296256LL;
        BOOL v121 = sub_1001C31E8;
        uint64_t v122 = &unk_10094A178;
        uint64_t v49 = _Block_copy(&aBlock);
        uint64_t v50 = swift_retain();
        uint64_t v51 = v114;
        static DispatchQoS.unspecified.getter(v50);
        v126[0] = _swiftEmptyArrayStorage;
        uint64_t v52 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v53 = sub_100004AEC((uint64_t *)&unk_1009AB860);
        uint64_t v54 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
        __int128 v55 = v113;
        uint64_t v56 = v117;
        dispatch thunk of SetAlgebra.init<A>(_:)(v126, v53, v54, v117, v52);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v51, v55, v49);
        _Block_release(v49);

        sub_10006A388(v48);
      }

      else
      {
        if (!a5)
        {
          uint64_t v79 = swift_retain_n(v22, 2LL);
          uint64_t v80 = static os_log_type_t.error.getter(v79);
          if (qword_10099B700 != -1) {
            swift_once(&qword_10099B700, sub_100651100);
          }
          uint64_t v109 = qword_100A2B010;
          uint64_t v81 = sub_100004AEC((uint64_t *)&unk_10099D740);
          uint64_t v82 = swift_allocObject(v81, 72LL, 7LL);
          *(_OWORD *)(v82 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
          uint64_t v83 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v84 = dispatch thunk of CustomStringConvertible.description.getter(v14, v83);
          uint64_t v86 = v85;
          *(void *)(v82 + 56) = &type metadata for String;
          *(void *)(v82 + 64) = sub_1000226F4();
          *(void *)(v82 + 32) = v84;
          *(void *)(v82 + 4sub_100032838(0, 7LL, 0) = v86;
          os_log(_:dso:log:_:_:)( v80,  &_mh_execute_header,  v109,  "Unsuccessful didSendCallback without an error for identifier: %@",  64LL,  2LL,  v82);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3, v14);
          type metadata accessor for SPOwnerSessionError(0LL);
          uint64_t v88 = v87;
          unint64_t aBlock = 0LL;
          unint64_t v89 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
          uint64_t v90 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
          _BridgedStoredNSError.init(_:userInfo:)(v126, &aBlock, v89, v88, v90);
          uint64_t v91 = v126[0] | 0x4000000000000000LL;
          swift_beginAccess(v18, &aBlock, 33LL, 0LL);
          char v92 = swift_isUniquelyReferenced_nonNull_native(*v18);
          uint64_t v125 = *v18;
          *unint64_t v18 = 0x8000000000000000LL;
          sub_10005D4FC(v91, (uint64_t)v17, v92);
          *unint64_t v18 = v125;
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
          swift_endAccess(&aBlock);
          sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
          uint64_t v93 = v111;
          uint64_t v94 = v112;
          (*(void (**)(char *, void, uint64_t))(v111 + 104))( v13,  enum case for DispatchQoS.QoSClass.default(_:),  v112);
          uint64_t v95 = (void *)static OS_dispatch_queue.global(qos:)(v13);
          (*(void (**)(char *, uint64_t))(v93 + 8))(v13, v94);
          unint64_t v96 = v110;
          int v123 = sub_10020F72C;
          uint64_t v124 = v110;
          unint64_t aBlock = _NSConcreteStackBlock;
          uint64_t v120 = 1107296256LL;
          BOOL v121 = sub_1001C31E8;
          uint64_t v122 = &unk_10094A100;
          uint64_t v97 = _Block_copy(&aBlock);
          uint64_t v98 = swift_retain();
          uint64_t v99 = v114;
          static DispatchQoS.unspecified.getter(v98);
          v126[0] = _swiftEmptyArrayStorage;
          uint64_t v100 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          uint64_t v101 = sub_100004AEC((uint64_t *)&unk_1009AB860);
          uint64_t v102 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
          unint64_t v103 = v113;
          uint64_t v104 = v101;
          uint64_t v105 = v117;
          dispatch thunk of SetAlgebra.init<A>(_:)(v126, v104, v102, v117, v100);
          OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v99, v103, v97);
          _Block_release(v97);

          sub_10006A388(v96);
          sub_10006A388(v96);
          (*(void (**)(char *, uint64_t))(v115 + 8))(v103, v105);
          (*(void (**)(char *, uint64_t))(v116 + 8))(v99, v118);
          return swift_release();
        }

        sub_10006A368(v22);
        sub_10006A368(v22);
        uint64_t v58 = swift_errorRetain(a5);
        LODWORD(v109) = static os_log_type_t.error.getter(v58);
        if (qword_10099B700 != -1) {
          swift_once(&qword_10099B700, sub_100651100);
        }
        uint64_t v108 = qword_100A2B010;
        uint64_t v59 = sub_100004AEC((uint64_t *)&unk_10099D740);
        uint64_t v60 = swift_allocObject(v59, 112LL, 7LL);
        *(_OWORD *)(v60 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
        uint64_t v61 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v107 = dispatch thunk of CustomStringConvertible.description.getter(v14, v61);
        uint64_t v63 = v62;
        *(void *)(v60 + 56) = &type metadata for String;
        unint64_t v64 = sub_1000226F4();
        *(void *)(v60 + 64) = v64;
        *(void *)(v60 + 32) = v107;
        *(void *)(v60 + 4sub_100032838(0, 7LL, 0) = v63;
        unint64_t aBlock = a5;
        swift_errorRetain(a5);
        uint64_t v65 = sub_100004AEC((uint64_t *)&unk_1009A5470);
        uint64_t v66 = String.init<A>(describing:)(&aBlock, v65);
        *(void *)(v60 + 96) = &type metadata for String;
        *(void *)(v60 + 104) = v64;
        *(void *)(v60 + 72) = v66;
        *(void *)(v60 + 8sub_100032838(0, 7LL, 0) = v67;
        os_log(_:dso:log:_:_:)( v109,  &_mh_execute_header,  v108,  "Message %@ failed to send: %@",  29LL,  2LL,  v60);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3, v14);
        swift_beginAccess(v18, &aBlock, 33LL, 0LL);
        swift_errorRetain(a5);
        char v68 = swift_isUniquelyReferenced_nonNull_native(*v18);
        v126[0] = *v18;
        *unint64_t v18 = 0x8000000000000000LL;
        sub_10005D4FC((unint64_t)a5 | 0x4000000000000000LL, (uint64_t)v17, v68);
        *unint64_t v18 = v126[0];
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
        swift_endAccess(&aBlock);
        sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
        int64_t v69 = a5;
        uint64_t v70 = v111;
        uint64_t v71 = v112;
        (*(void (**)(char *, void, uint64_t))(v111 + 104))( v13,  enum case for DispatchQoS.QoSClass.default(_:),  v112);
        uint64_t v72 = (void *)static OS_dispatch_queue.global(qos:)(v13);
        (*(void (**)(char *, uint64_t))(v70 + 8))(v13, v71);
        uint64_t v73 = swift_allocObject(&unk_10094A138, 32LL, 7LL);
        unint64_t v48 = v110;
        *(void *)(v73 + swift_weakDestroy(v0 + 16) = v110;
        *(void *)(v73 + 24) = v69;
        int v123 = sub_10020F784;
        uint64_t v124 = v73;
        unint64_t aBlock = _NSConcreteStackBlock;
        uint64_t v120 = 1107296256LL;
        BOOL v121 = sub_1001C31E8;
        uint64_t v122 = &unk_10094A150;
        uint64_t v74 = _Block_copy(&aBlock);
        sub_10006A368(v48);
        uint64_t v75 = swift_errorRetain(v69);
        uint64_t v51 = v114;
        static DispatchQoS.unspecified.getter(v75);
        v126[0] = _swiftEmptyArrayStorage;
        uint64_t v76 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v77 = sub_100004AEC((uint64_t *)&unk_1009AB860);
        uint64_t v78 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
        __int128 v55 = v113;
        uint64_t v56 = v117;
        dispatch thunk of SetAlgebra.init<A>(_:)(v126, v77, v78, v117, v76);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v51, v55, v74);
        _Block_release(v74);

        sub_10006A388(v48);
        swift_errorRelease(v69);
      }

      sub_10006A388(v48);
      (*(void (**)(char *, uint64_t))(v115 + 8))(v55, v56);
      (*(void (**)(char *, uint64_t))(v116 + 8))(v51, v118);
      return swift_release();
    }
  }

  uint64_t v27 = swift_endAccess(&aBlock);
  uint64_t v28 = static os_log_type_t.debug.getter(v27);
  if (qword_10099B700 != -1) {
    swift_once(&qword_10099B700, sub_100651100);
  }
  uint64_t v29 = qword_100A2B010;
  uint64_t v30 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v31 = swift_allocObject(v30, 72LL, 7LL);
  *(_OWORD *)(v31 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v32 = UUID.uuidString.getter(v31);
  uint64_t v34 = v33;
  *(void *)(v31 + 56) = &type metadata for String;
  *(void *)(v31 + 64) = sub_1000226F4();
  *(void *)(v31 + 32) = v32;
  *(void *)(v31 + 4sub_100032838(0, 7LL, 0) = v34;
  os_log(_:dso:log:_:_:)( v28,  &_mh_execute_header,  v29,  "messagesSent callback for unknown identifier %@",  47LL,  2LL,  v31);
  return swift_bridgeObjectRelease();
}

void sub_1001EFEB8()
{
  uint64_t v1 = v0;
  uint64_t v5 = 0LL;
  unint64_t v2 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v3 = sub_100007864( (unint64_t *)&qword_10099C2E0,  (uint64_t (*)(uint64_t))type metadata accessor for CommandError,  (uint64_t)&unk_1007E3980);
  _BridgedStoredNSError.init(_:userInfo:)(&v6, &v5, v2, v1, v3);
  uint64_t v4 = v6;
  Future.finish(error:)(v6);
}

void sub_1001EFF50(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, dispatch_group_s *a6)
{
  if ((a3 & 1) != 0)
  {
    uint64_t v11 = a5 + 16;
    v14[0] = a1;
    swift_errorRetain(a1);
    uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    swift_willThrowTypedImpl(v14, v12, &protocol self-conformance witness table for Error);
    swift_beginAccess(v11, v14, 1LL, 0LL);
    uint64_t v13 = *(void *)(a5 + 16);
    *(void *)(a5 + swift_weakDestroy(v0 + 16) = a1;
    swift_errorRelease(v13);
  }

  else
  {
    swift_beginAccess(a4 + 16, v14, 1LL, 0LL);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = a1;
    *(void *)(a4 + 24) = a2;
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRelease();
  }

  dispatch_group_leave(a6);
}

void sub_1001F0020(uint64_t a1, char a2, uint64_t a3, uint64_t a4, dispatch_group_s *a5)
{
  if ((a2 & 1) != 0)
  {
    uint64_t v9 = a4 + 16;
    v12[0] = a1;
    swift_errorRetain(a1);
    uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    swift_willThrowTypedImpl(v12, v10, &protocol self-conformance witness table for Error);
    swift_beginAccess(v9, v12, 1LL, 0LL);
    uint64_t v11 = *(void *)(a4 + 16);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = a1;
    swift_errorRelease(v11);
  }

  else
  {
    swift_beginAccess(a3 + 16, v12, 1LL, 0LL);
    *(void *)(a3 + swift_weakDestroy(v0 + 16) = a1;
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRelease();
  }

  dispatch_group_leave(a5);
}

uint64_t sub_1001F00E4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v22 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v6 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void **)(v1 + 232);
  uint64_t v10 = swift_allocObject(&unk_100949710, 24LL, 7LL);
  swift_weakInit(v10 + 16, v1);
  uint64_t v11 = swift_allocObject(&unk_10094A1B0, 80LL, 7LL);
  __int128 v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)a1;
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v10;
  *(_OWORD *)(v11 + 4sub_100032838(0, 7LL, 0) = v12;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a1 + 32);
  *(void *)(v11 + 72) = *(void *)(a1 + 48);
  void aBlock[4] = sub_10020F80C;
  void aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10094A1C8;
  uint64_t v13 = _Block_copy(aBlock);
  id v14 = v9;
  swift_retain();
  uint64_t v15 = sub_10020F818((uint64_t *)a1);
  static DispatchQoS.unspecified.getter(v15);
  uint64_t v23 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v18 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v3, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v5, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v21);
  swift_release();
  return swift_release();
}

uint64_t sub_1001F0338(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v28, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    if (qword_10099B178 != -1) {
LABEL_33:
    }
      swift_once(&qword_10099B178, sub_100189C64);
    uint64_t v6 = type metadata accessor for Logger(0LL);
    sub_10000A720(v6, (uint64_t)qword_100A2A290);
    uint64_t v7 = swift_retain();
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v10 = 134217984;
      swift_beginAccess(v5 + 224, &v25, 0LL, 0LL);
      uint64_t v26 = *(void *)(*(void *)(v5 + 224) + 16LL);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v10 + 4, v10 + 12);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "sendLiveLocation sending to %ld", v10, 0xCu);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    else
    {

      swift_release();
    }

    swift_beginAccess(v5 + 224, &v26, 0LL, 0LL);
    uint64_t v11 = *(void *)(v5 + 224);
    uint64_t v12 = v11 + 64;
    uint64_t v13 = 1LL << *(_BYTE *)(v11 + 32);
    uint64_t v14 = -1LL;
    if (v13 < 64) {
      uint64_t v14 = ~(-1LL << v13);
    }
    unint64_t v15 = v14 & *(void *)(v11 + 64);
    int64_t v16 = (unint64_t)(v13 + 63) >> 6;
    swift_bridgeObjectRetain(*(void *)(v5 + 224));
    int64_t v17 = 0LL;
    while (1)
    {
      if (v15)
      {
        unint64_t v18 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v19 = v18 | (v17 << 6);
      }

      else
      {
        if (__OFADD__(v17++, 1LL))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          goto LABEL_33;
        }

        if (v17 >= v16) {
          goto LABEL_29;
        }
        unint64_t v23 = *(void *)(v12 + 8 * v17);
        if (!v23)
        {
          int64_t v24 = v17 + 1;
          if (v17 + 1 >= v16) {
            goto LABEL_29;
          }
          unint64_t v23 = *(void *)(v12 + 8 * v24);
          if (!v23)
          {
            int64_t v24 = v17 + 2;
            if (v17 + 2 >= v16) {
              goto LABEL_29;
            }
            unint64_t v23 = *(void *)(v12 + 8 * v24);
            if (!v23)
            {
              int64_t v24 = v17 + 3;
              if (v17 + 3 >= v16) {
                goto LABEL_29;
              }
              unint64_t v23 = *(void *)(v12 + 8 * v24);
              if (!v23)
              {
                int64_t v24 = v17 + 4;
                if (v17 + 4 >= v16)
                {
LABEL_29:
                  swift_release();
                  return swift_release();
                }

                unint64_t v23 = *(void *)(v12 + 8 * v24);
                if (!v23)
                {
                  while (1)
                  {
                    int64_t v17 = v24 + 1;
                    if (__OFADD__(v24, 1LL)) {
                      goto LABEL_32;
                    }
                    if (v17 >= v16) {
                      goto LABEL_29;
                    }
                    unint64_t v23 = *(void *)(v12 + 8 * v17);
                    ++v24;
                    if (v23) {
                      goto LABEL_24;
                    }
                  }
                }
              }
            }
          }

          int64_t v17 = v24;
        }

uint64_t sub_1001F0624(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100004AEC(&qword_1009A4978);
  __chkstk_darwin(v7);
  os_log_type_t v9 = (uint64_t *)((char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10020F818(a1);
  sub_1001DCD04(1LL, (uint64_t)a1, v9);
  if (v3)
  {
    if (qword_10099B178 != -1) {
      swift_once(&qword_10099B178, sub_100189C64);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    sub_10000A720(v10, (uint64_t)qword_100A2A290);
    swift_errorRetain(v3);
    swift_retain();
    swift_errorRetain(v3);
    uint64_t v11 = swift_retain();
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc(22LL, -1LL);
      uint64_t v36 = 0LL;
      uint64_t v15 = v14;
      uint64_t v34 = swift_slowAlloc(64LL, -1LL);
      uint64_t v39 = v34;
      *(_DWORD *)uint64_t v15 = 136446466;
      uint64_t v37 = v3;
      swift_errorRetain(v3);
      uint64_t v16 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v17 = String.init<A>(describing:)(&v37, v16);
      uint64_t v35 = v10;
      uint64_t v37 = sub_1003F11D4(v17, v18, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v15 + 4, v15 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      *(_WORD *)(v15 + 12) = 2080;
      swift_retain();
      uint64_t v19 = sub_1001DFE98();
      unint64_t v21 = v20;
      swift_release();
      uint64_t v37 = sub_1003F11D4(v19, v21, &v39);
      uint64_t v10 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v15 + 14, v15 + 22);
      swift_release_n(a3, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "sendMessage error: %{public}s to session %s",  (uint8_t *)v15,  0x16u);
      uint64_t v22 = v34;
      swift_arrayDestroy(v34, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v3);
      swift_errorRelease(v3);

      swift_release_n(a3, 2LL);
    }

    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v23 = sub_10000A720(v10, (uint64_t)qword_100A2AE08);
    int64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "ending messagingsession due to error", v26, 2u);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    sub_1001E1124();
    [*(id *)(a3 + 56) endSession];
    sub_1001E02B4(a3);
    if (qword_10099B850 != -1) {
      swift_once(&qword_10099B850, sub_1006BAC84);
    }
    uint64_t v39 = v3;
    swift_errorRetain(v3);
    swift_retain();
    uint64_t v27 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v28 = String.init<A>(describing:)(&v39, v27);
    sub_1006BB05C(1, v28, v29);
    swift_release();
    swift_bridgeObjectRelease();
    return swift_errorRelease(v3);
  }

  else
  {
    uint64_t v39 = sub_1001E06B4((uint64_t)v9);
    uint64_t v30 = sub_100004AEC(&qword_1009A3B50);
    uint64_t v31 = sub_1000372EC( &qword_1009A3B58,  &qword_1009A3B50,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    uint64_t v32 = Publisher.sink(receiveCompletion:receiveValue:)( sub_1001F0B0C,  0LL,  DeviceInformationProviderFactory.init(),  0LL,  v30,  v31);
    swift_release();
    sub_100015794((uint64_t)v9, &qword_1009A4978);
    *(void *)(a2 + 248) = v32;
    return swift_release();
  }

void sub_1001F0B0C()
{
  if (qword_10099B178 != -1) {
    swift_once(&qword_10099B178, sub_100189C64);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2A290);
  oslog = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v2 = static os_log_type_t.debug.getter(oslog);
  if (os_log_type_enabled(oslog, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "sendLocation complete", v3, 2u);
    swift_slowDealloc(v3, -1LL, -1LL);
  }
}

uint64_t sub_1001F0BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    sub_1001F0C34(a2);
    return swift_release();
  }

  return result;
}

void sub_1001F0C34(uint64_t a1)
{
  uint64_t v56 = a1;
  uint64_t v2 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = *(void **)(v1 + 232);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v8 = (uint64_t *)(v1 + 224);
  swift_beginAccess(v1 + 224, v62, 0LL, 0LL);
  uint64_t v9 = *(void *)(v1 + 224);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v53 = v1;
  uint64_t v54 = v9 + 64;
  uint64_t v11 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v55 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v57 = v9;
  __n128 v14 = swift_bridgeObjectRetain(v9);
  int64_t v15 = 0LL;
  v14.n128_u64[0] = 136315138LL;
  __n128 v52 = v14;
  uint64_t v51 = (char *)&type metadata for Any + 8;
  if (v13) {
    goto LABEL_36;
  }
LABEL_8:
  int64_t v16 = v15 + 1;
  if (!__OFADD__(v15, 1LL))
  {
    if (v16 < v55)
    {
      unint64_t v17 = *(void *)(v54 + 8 * v16);
      int64_t v18 = v15 + 1;
      if (v17) {
        goto LABEL_21;
      }
      int64_t v18 = v15 + 2;
      if (v15 + 2 >= v55) {
        goto LABEL_47;
      }
      unint64_t v17 = *(void *)(v54 + 8 * v18);
      if (v17) {
        goto LABEL_21;
      }
      int64_t v18 = v15 + 3;
      if (v15 + 3 >= v55) {
        goto LABEL_47;
      }
      unint64_t v17 = *(void *)(v54 + 8 * v18);
      if (v17)
      {
LABEL_21:
        unint64_t v13 = (v17 - 1) & v17;
        int64_t v58 = v18;
        for (unint64_t i = __clz(__rbit64(v17)) + (v18 << 6); ; unint64_t i = v36 | (v15 << 6))
        {
          unint64_t v21 = (uint64_t *)(*(void *)(v57 + 48) + 16 * i);
          uint64_t v22 = *v21;
          uint64_t v23 = v21[1];
          int64_t v24 = *(void **)(*(void *)(*(void *)(v57 + 56) + 8 * i) + 56LL);
          swift_bridgeObjectRetain(v23);
          swift_retain();
          id v25 = [v24 sessionID];
          if (v25)
          {
            uint64_t v26 = v25;
            uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
            uint64_t v29 = v28;
          }

          else
          {
            uint64_t v27 = 0LL;
            uint64_t v29 = 0LL;
          }

          uint64_t v30 = v8;
          id v31 = [*(id *)(v56 + 56) sessionID];
          if (v31)
          {
            uint64_t v32 = v31;
            uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
            uint64_t v35 = v34;

            if (v29)
            {
              if (!v35) {
                goto LABEL_34;
              }
              if (v27 == v33 && v29 == v35)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }

              else
              {
                char v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v29, v33, v35, 0LL);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v37 & 1) == 0)
                {
                  swift_bridgeObjectRelease();
                  swift_release();
LABEL_35:
                  uint64_t v8 = v30;
                  int64_t v15 = v58;
                  if (!v13) {
                    goto LABEL_8;
                  }
                  goto LABEL_36;
                }
              }
            }

            else if (v35)
            {
LABEL_34:
              swift_bridgeObjectRelease();
              swift_release();
              swift_bridgeObjectRelease();
              goto LABEL_35;
            }
          }

          else if (v29)
          {
            goto LABEL_34;
          }

          if (qword_10099B178 != -1) {
            swift_once(&qword_10099B178, sub_100189C64);
          }
          uint64_t v38 = type metadata accessor for Logger(0LL);
          sub_10000A720(v38, (uint64_t)qword_100A2A290);
          uint64_t v39 = swift_bridgeObjectRetain_n(v23, 2LL);
          uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
          os_log_type_t v41 = static os_log_type_t.default.getter(v40);
          uint64_t v8 = v30;
          if (os_log_type_enabled(v40, v41))
          {
            uint64_t v42 = swift_slowAlloc(12LL, -1LL);
            uint64_t v43 = swift_slowAlloc(32LL, -1LL);
            v60[0] = v43;
            *(_DWORD *)uint64_t v42 = v52.n128_u32[0];
            swift_bridgeObjectRetain(v23);
            *(void *)(v42 + 4) = sub_1003F11D4(v22, v23, v60);
            swift_bridgeObjectRelease_n(v23, 3LL);
            _os_log_impl((void *)&_mh_execute_header, v40, v41, "Removing live session for %s", (uint8_t *)v42, 0xCu);
            swift_arrayDestroy(v43, 1LL, v51);
            swift_slowDealloc(v43, -1LL, -1LL);
            swift_slowDealloc(v42, -1LL, -1LL);
          }

          else
          {

            swift_bridgeObjectRelease_n(v23, 2LL);
          }

          swift_beginAccess(v30, v60, 33LL, 0LL);
          uint64_t v44 = *v30;
          swift_bridgeObjectRetain(v23);
          swift_bridgeObjectRetain(v44);
          unint64_t v45 = sub_10030CF14(v22, v23);
          char v47 = v46;
          swift_bridgeObjectRelease();
          if ((v47 & 1) != 0)
          {
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v30);
            uint64_t v49 = *v30;
            uint64_t v59 = *v30;
            *uint64_t v30 = 0x8000000000000000LL;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_100064938();
              uint64_t v49 = v59;
            }

            swift_bridgeObjectRelease();
            sub_100059C80(v45, v49);
            *uint64_t v30 = v49;
            swift_bridgeObjectRelease();
          }

          swift_endAccess(v60);
          swift_release();
          swift_bridgeObjectRelease();
          v60[0] = v22;
          v60[1] = v23;
          char v61 = 2;
          swift_retain();
          PassthroughSubject.send(_:)(v60);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          int64_t v15 = v58;
          if (!v13) {
            goto LABEL_8;
          }
LABEL_36:
          unint64_t v36 = __clz(__rbit64(v13));
          v13 &= v13 - 1;
          int64_t v58 = v15;
        }
      }

      uint64_t v19 = v15 + 4;
      if (v15 + 4 < v55)
      {
        unint64_t v17 = *(void *)(v54 + 8 * v19);
        if (v17)
        {
          int64_t v18 = v15 + 4;
          goto LABEL_21;
        }

        while (1)
        {
          int64_t v18 = v19 + 1;
          if (__OFADD__(v19, 1LL)) {
            goto LABEL_49;
          }
          if (v18 >= v55) {
            break;
          }
          unint64_t v17 = *(void *)(v54 + 8 * v18);
          ++v19;
          if (v17) {
            goto LABEL_21;
          }
        }
      }
    }

void sub_1001F11EC(uint64_t a1, uint64_t a2, uint64_t a3, dispatch_group_s *a4)
{
  if (!*(void *)(a1 + 16)) {
    goto LABEL_5;
  }
  swift_bridgeObjectRetain(a3);
  unint64_t v8 = sub_10030D438(v7);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    BOOL v11 = 0;
    goto LABEL_6;
  }

  uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8 * v8);
  swift_bridgeObjectRelease();
  BOOL v11 = v10 > 0;
LABEL_6:
  swift_beginAccess(a2 + 16, v12, 1LL, 0LL);
  *(_BYTE *)(a2 + swift_weakDestroy(v0 + 16) = v11;
  dispatch_group_leave(a4);
}

uint64_t sub_1001F1284(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v11);
  unint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = swift_allocObject(&unk_1009490A8, 24LL, 7LL);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = &_swiftEmptyDictionarySingleton;
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009B1370);
  uint64_t v16 = swift_allocObject(v15, 56LL, 7LL);
  *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(_BYTE *)(v16 + 32) = a1;
  *(void *)(v16 + 4sub_100032838(0, 7LL, 0) = a2;
  *(void *)(v16 + 48) = a3;
  uint64_t v17 = swift_allocObject(&unk_1009490D0, 64LL, 7LL);
  *(_BYTE *)(v17 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v17 + 24) = a2;
  *(void *)(v17 + 32) = a3;
  *(void *)(v17 + 4sub_100032838(0, 7LL, 0) = a4;
  *(void *)(v17 + 48) = a5;
  *(void *)(v17 + 56) = v14;
  uint64_t v18 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v13, 1LL, 1LL, v18);
  uint64_t v19 = (void *)swift_allocObject(&unk_1009490F8, 64LL, 7LL);
  v19[2] = 0LL;
  v19[3] = 0LL;
  v19[4] = sub_10020B418;
  v19[5] = v17;
  v19[6] = v5;
  _OWORD v19[7] = v16;
  swift_bridgeObjectRetain_n(a3, 2LL);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain(v16);
  sub_1003EDB00((uint64_t)v13, (uint64_t)&unk_1009A6048, (uint64_t)v19);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t sub_1001F1444()
{
  sub_100015794(v0 + 56, &qword_1009A6190);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 88));
  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10002214C(*(void *)(v0 + 288), *(void *)(v0 + 296));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1001F1578()
{
  return swift_deallocClassInstance(v0, 392LL, 7LL);
}

uint64_t type metadata accessor for BeaconSharingManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd20BeaconSharingManager);
}

unint64_t *initializeBufferWithCopyOfBuffer for BeaconSharingManager.MessageState( unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_10006A368(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for BeaconSharingManager.MessageState(unint64_t *a1)
{
  return sub_10006A388(*a1);
}

unint64_t *assignWithCopy for BeaconSharingManager.MessageState( unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_10006A368(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  sub_10006A388(v4);
  return a1;
}

unint64_t *assignWithTake for BeaconSharingManager.MessageState( unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  sub_10006A388(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for BeaconSharingManager.MessageState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for BeaconSharingManager.MessageState( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)uint64_t result = a2 - 126;
    if (a3 >= 0x7E) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7E) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007LL;
    }
  }

  return result;
}

uint64_t sub_1001F1704(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  else {
    return (*a1 >> 3) + 2;
  }
}

void *sub_1001F1720(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_1001F1730(unint64_t *result, uint64_t a2)
{
  if (a2 < 2)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8LL;
    unint64_t v3 = a2 << 62;
  }

  else
  {
    uint64_t v2 = 8LL * (a2 - 2);
    unint64_t v3 = 0x8000000000000000LL;
  }

  *uint64_t result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for BeaconSharingManager.MessageState()
{
  return &type metadata for BeaconSharingManager.MessageState;
}

uint64_t sub_1001F176C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for BeaconObservation(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C(a1, (uint64_t)v5, type metadata accessor for BeaconObservation);
  uint64_t result = sub_1001F31E4( 13,  1LL,  (uint64_t)v5,  &qword_10099D318,  type metadata accessor for BeaconObservation,  &qword_1009B1500,  (uint64_t (*)(void))sub_10020B1EC,  (uint64_t)&v19);
  if (!v1)
  {
    uint64_t v7 = v21;
    uint64_t v18 = v20;
    unint64_t v8 = v22;
    int v9 = v19;
    uint64_t v10 = sub_1001E2370();
    uint64_t v11 = sub_1001DC870((uint64_t)v10);
    swift_bridgeObjectRelease();
    unint64_t v19 = 0LL;
    unint64_t v20 = (char *)0xE000000000000000LL;
    _StringGuts.grow(_:)(25LL);
    uint64_t v12 = swift_bridgeObjectRelease();
    unint64_t v19 = 0xD000000000000017LL;
    unint64_t v20 = (char *)0x8000000100859310LL;
    v13._countAndFlagsBits = UUID.uuidString.getter(v12);
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    uint64_t v14 = v19;
    uint64_t v15 = (uint64_t)v20;
    uint64_t v16 = (void (*)(uint64_t, uint64_t))sub_1006F13B0((uint64_t)_swiftEmptyArrayStorage);
    sub_100209C44(v9, v18, v7, v8, (uint64_t)v11, 0LL, 1, 0, &_swiftEmptySetSingleton, v16, v14, v15, sub_1001F9E90);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_100016F9C(v7, v8);
  }

  return result;
}

id sub_1001F1954(uint64_t a1)
{
  uint64_t v193 = a1;
  uint64_t v1 = type metadata accessor for CryptoKeys(0LL);
  uint64_t v174 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v192 = (uint64_t)&v172 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v175 = type metadata accessor for LegacyShareEnvelope(0LL);
  uint64_t v3 = __chkstk_darwin(v175);
  uint64_t v176 = (uint64_t)&v172 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v177 = (uint64_t)&v172 - v5;
  uint64_t v200 = type metadata accessor for TimeBasedKey(0LL);
  uint64_t v179 = *(void *)(v200 - 8);
  uint64_t v6 = __chkstk_darwin(v200);
  uint64_t v191 = (uint64_t)&v172 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v190 = (uint64_t)&v172 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v172 - v11;
  __chkstk_darwin(v10);
  uint64_t v199 = (uint64_t)&v172 - v13;
  uint64_t v209 = type metadata accessor for FamilyCryptoKeysV1(0LL);
  uint64_t v198 = *(void *)(v209 - 8);
  uint64_t v14 = __chkstk_darwin(v209);
  uint64_t v16 = (char *)&v172 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  unint64_t v203 = (unint64_t)&v172 - v17;
  uint64_t v180 = type metadata accessor for FamilyShareEnvelopeV1(0LL);
  uint64_t v18 = __chkstk_darwin(v180);
  uint64_t v181 = (uint64_t)&v172 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v182 = (uint64_t)&v172 - v20;
  uint64_t v187 = type metadata accessor for UUID(0LL);
  uint64_t v186 = *(void *)(v187 - 8);
  __chkstk_darwin(v187);
  id v196 = (char *)&v172 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v183 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v183);
  uint64_t v185 = (uint64_t)&v172 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for SharedBeaconRecord(0LL);
  __chkstk_darwin(v23);
  id v25 = (_OWORD *)((char *)&v172 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v26 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v172 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = type metadata accessor for Date(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = __chkstk_darwin(v29);
  id v184 = (char *)&v172 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v31);
  p_name = (char **)((char *)&v172 - v33);
  uint64_t v35 = type metadata accessor for DateInterval(0LL);
  uint64_t v201 = *(void *)(v35 - 8);
  uint64_t v202 = v35;
  __chkstk_darwin(v35);
  uint64_t v195 = (uint64_t)&v172 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id result = [(id)objc_opt_self(ACAccountStore) defaultStore];
  if (!result)
  {
    __break(1u);
    goto LABEL_55;
  }

  uint64_t v38 = result;
  id v39 = objc_msgSend(result, "aa_primaryAppleAccount");

  id v194 = v39;
  if (!v39)
  {
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v44 = v43;
    uint64_t v204 = 7LL;
    unint64_t v45 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v46 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    char v47 = _BridgedStoredNSError.init(_:userInfo:)(v206, &v204, v45, v44, v46);
    return (id)swift_willThrow(v47);
  }

  uint64_t v188 = v25;
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  uint64_t v40 = v197;
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v173 = v40;
  uint64_t v41 = sub_1006A0CCC(v206[0]);
  swift_bridgeObjectRelease();
  static Date.trustedNow.getter((uint64_t)p_name);
  uint64_t v42 = v193;
  if ((unsigned __int128)(v41 * (__int128)60LL) >> 64 != (60 * v41) >> 63)
  {
    __break(1u);
LABEL_53:
    swift_once(&qword_10099B700, sub_100651100);
LABEL_29:
    uint64_t v87 = qword_100A2B010;
    uint64_t v88 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v89 = swift_allocObject(v88, 72LL, 7LL);
    *(_OWORD *)(v89 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    id v90 = v194;
    id result = objc_msgSend(v194, p_name[451]);
    uint64_t v91 = v195;
    if (result)
    {
      char v92 = result;
      uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
      uint64_t v95 = v94;

      *(void *)(v89 + 56) = &type metadata for String;
      *(void *)(v89 + 64) = sub_1000226F4();
      *(void *)(v89 + 32) = v93;
      *(void *)(v89 + 4sub_100032838(0, 7LL, 0) = v95;
      os_log(_:dso:log:_:_:)( v29,  &_mh_execute_header,  v87,  "Could not create MessagingDestination from: %@",  46LL,  2LL,  v89);
      swift_bridgeObjectRelease();
      type metadata accessor for SPOwnerSessionError(0LL);
      uint64_t v97 = v96;
      uint64_t v204 = 7LL;
      unint64_t v98 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v99 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
      uint64_t v100 = _BridgedStoredNSError.init(_:userInfo:)(v206, &v204, v98, v97, v99);
      swift_willThrow(v100);

      return (id)(*(uint64_t (**)(uint64_t, uint64_t))(v201 + 8))(v91, v202);
    }

    goto LABEL_56;
  }

  DateInterval.init(start:duration:)(p_name, (double)(60 * v41));
  unint64_t v178 = (int *)type metadata accessor for ShareInstruction(0LL);
  sub_10001581C(v42 + v178[9], (uint64_t)v28, (uint64_t *)&unk_10099D720);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1LL, v29) == 1)
  {
    sub_100015794((uint64_t)v28, (uint64_t *)&unk_10099D720);
  }

  else
  {
    unint64_t v48 = v184;
    uint64_t v49 = (*(uint64_t (**)(char *, char *, uint64_t))(v30 + 32))(v184, v28, v29);
    DateInterval.end.getter(v49);
    char v50 = static Date.< infix(_:_:)(v48, p_name);
    uint64_t v51 = *(void (**)(char **, uint64_t))(v30 + 8);
    v51(p_name, v29);
    if ((v50 & 1) != 0)
    {
      (*(void (**)(char **, char *, uint64_t))(v30 + 16))(p_name, v48, v29);
      DateInterval.end.setter(p_name);
    }

    v51((char **)v48, v29);
    uint64_t v42 = v193;
  }

  p_name = &stru_100995FF8.name;
  id result = [v194 username];
  if (!result)
  {
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
    return result;
  }

  __n128 v52 = result;
  uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  uint64_t v55 = v54;

  _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(v53, v55);
  if (!v58)
  {
    uint64_t v29 = static os_log_type_t.error.getter(v56);
    if (qword_10099B700 == -1) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }

  int v59 = v56;
  uint64_t v60 = v57;
  uint64_t v61 = v58;
  uint64_t v62 = v178;
  uint64_t v63 = v42 + v178[6];
  uint64_t v64 = v185;
  sub_10001DC4C(v63, v185, type metadata accessor for OwnedBeaconRecord);
  uint64_t v65 = v42 + v62[8];
  uint64_t v66 = (uint64_t)v196;
  (*(void (**)(char *, uint64_t, uint64_t))(v186 + 16))(v196, v65, v187);
  uint64_t v67 = v188;
  sub_10076306C(v59, v60, v61, 0LL, 0xE000000000000000LL, v64, v66, 1LL, v188);
  uint64_t v68 = v195;
  uint64_t v69 = sub_1001FEC7C(v63, v195, 0, 0, 0, *(void *)(v189 + 128));
  uint64_t v72 = v69;
  uint64_t v73 = v70;
  if (!v71)
  {
    uint64_t v101 = v69;
    uint64_t v102 = v70;
    uint64_t v103 = static os_log_type_t.error.getter(v69);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v104 = qword_100A2B010;
    uint64_t v105 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v106 = swift_allocObject(v105, 72LL, 7LL);
    *(_OWORD *)(v106 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v107 = UUID.uuidString.getter(v106);
    uint64_t v109 = v108;
    *(void *)(v106 + 56) = &type metadata for String;
    *(void *)(v106 + 64) = sub_1000226F4();
    *(void *)(v106 + 32) = v107;
    *(void *)(v106 + 4sub_100032838(0, 7LL, 0) = v109;
    os_log(_:dso:log:_:_:)( v103,  &_mh_execute_header,  v104,  "Could not share because not all keys are available for %@",  57LL,  2LL,  v106);
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v111 = v110;
    uint64_t v204 = 14LL;
    unint64_t v112 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v113 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    uint64_t v114 = _BridgedStoredNSError.init(_:userInfo:)(v206, &v204, v112, v111, v113);
    swift_willThrow(v114);

    sub_100117B2C(v101, v102, 0);
    goto LABEL_37;
  }

  if (v71 != 1)
  {
    uint64_t v115 = static os_log_type_t.error.getter(v69);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v116 = qword_100A2B010;
    uint64_t v117 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v118 = swift_allocObject(v117, 72LL, 7LL);
    *(_OWORD *)(v118 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v119 = UUID.uuidString.getter(v118);
    uint64_t v121 = v120;
    *(void *)(v118 + 56) = &type metadata for String;
    *(void *)(v118 + 64) = sub_1000226F4();
    *(void *)(v118 + 32) = v119;
    *(void *)(v118 + 4sub_100032838(0, 7LL, 0) = v121;
    os_log(_:dso:log:_:_:)( v115,  &_mh_execute_header,  v116,  "Could not share because keys are not available for %@",  53LL,  2LL,  v118);
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v123 = v122;
    uint64_t v204 = 14LL;
    unint64_t v124 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v125 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    BOOL v126 = _BridgedStoredNSError.init(_:userInfo:)(v206, &v204, v124, v123, v125);
    swift_willThrow(v126);

LABEL_37:
    uint64_t v127 = v188;
LABEL_40:
    sub_100018C68((uint64_t)v127, type metadata accessor for SharedBeaconRecord);
    return (id)(*(uint64_t (**)(uint64_t, uint64_t))(v201 + 8))(v68, v202);
  }

  int64_t v74 = *(void *)(v69 + 16);
  uint64_t v75 = _swiftEmptyArrayStorage;
  uint64_t v186 = v70;
  uint64_t v187 = v69;
  uint64_t v185 = v74;
  if (v74)
  {
    v206[0] = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v69);
    sub_100032E78(0, v74, 0);
    uint64_t v76 = v72 + ((*(unsigned __int8 *)(v179 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v179 + 80));
    uint64_t v197 = *(void *)(v179 + 72);
    id v196 = v16 + 8;
    int64_t v77 = v74;
    do
    {
      uint64_t v78 = v199;
      sub_10001DC4C(v76, v199, type metadata accessor for TimeBasedKey);
      sub_10001DC4C(v78, (uint64_t)v12, type metadata accessor for TimeBasedKey);
      *(void *)uint64_t v16 = *(void *)v12;
      uint64_t v79 = v200;
      (*(void (**)(char *, char *, uint64_t))(v201 + 16))( &v16[*(int *)(v209 + 20)],  &v12[*(int *)(v200 + 20)],  v202);
      uint64_t v80 = &v12[*(int *)(v79 + 24)];
      unint64_t v81 = *((void *)v80 + 5);
      if (v81 >> 60 == 15)
      {
        uint64_t v82 = *((void *)v80 + 2);
        unint64_t v83 = *((void *)v80 + 3);
        sub_10001736C(v82, v83);
        sub_100018C68((uint64_t)v12, type metadata accessor for TimeBasedKey);
      }

      else
      {
        uint64_t v82 = *((void *)v80 + 4);
        sub_10001736C(v82, *((void *)v80 + 5));
        sub_100018C68((uint64_t)v12, type metadata accessor for TimeBasedKey);
        unint64_t v83 = v81 | 0x2000000000000000LL;
      }

      uint64_t v84 = *(int *)(v209 + 24);
      *(void *)&v16[v84] = v82;
      *(void *)&v196[v84] = v83;
      sub_10002218C((uint64_t)v16, v203, type metadata accessor for FamilyCryptoKeysV1);
      sub_100018C68(v78, type metadata accessor for TimeBasedKey);
      uint64_t v75 = (void *)v206[0];
      if ((swift_isUniquelyReferenced_nonNull_native(v206[0]) & 1) == 0)
      {
        sub_100032E78(0, v75[2] + 1LL, 1);
        uint64_t v75 = (void *)v206[0];
      }

      unint64_t v86 = v75[2];
      unint64_t v85 = v75[3];
      if (v86 >= v85 >> 1)
      {
        sub_100032E78(v85 > 1, v86 + 1, 1);
        uint64_t v75 = (void *)v206[0];
      }

      v75[2] = v86 + 1;
      sub_10002218C( v203,  (uint64_t)v75 + ((*(unsigned __int8 *)(v198 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v198 + 80))
      + *(void *)(v198 + 72) * v86,
        type metadata accessor for FamilyCryptoKeysV1);
      v76 += v197;
      --v77;
    }

    while (v77);
    sub_100117B2C(v187, v73, 1);
    uint64_t v68 = v195;
    uint64_t v67 = v188;
  }

  uint64_t v128 = v182;
  sub_10001DC4C((uint64_t)v67, v182, type metadata accessor for SharedBeaconRecord);
  *(void *)(v128 + *(int *)(v180 + 20)) = v75;
  uint64_t v129 = v181;
  sub_10001DC4C(v128, v181, type metadata accessor for FamilyShareEnvelopeV1);
  uint64_t v130 = v173;
  sub_1001F31E4( 0,  2LL,  v129,  &qword_1009A6138,  type metadata accessor for FamilyShareEnvelopeV1,  &qword_1009A6140,  (uint64_t (*)(void))sub_10020E214,  (uint64_t)v206);
  if (v130)
  {

    sub_100117B2C(v187, v186, 1);
    sub_100018C68(v128, type metadata accessor for FamilyShareEnvelopeV1);
    uint64_t v127 = v67;
    goto LABEL_40;
  }

  char v131 = v206[0];
  uint64_t v132 = v206[1];
  uint64_t v133 = v207;
  unint64_t v134 = v208;
  uint64_t v135 = sub_100004AEC(&qword_1009B9A10);
  uint64_t inited = swift_initStackObject(v135, v205);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(inited + 32) = 0x44495344746C41LL;
  *(void *)(inited + 4sub_100032838(0, 7LL, 0) = 0xE700000000000000LL;
  uint64_t v137 = v193;
  uint64_t v138 = *(void *)(v193 + 16);
  *(void *)(inited + 48) = *(void *)(v193 + 8);
  *(void *)(inited + 56) = v138;
  swift_bridgeObjectRetain(v138);
  unint64_t v139 = sub_100412D14(inited);
  uint64_t v140 = type metadata accessor for Transaction(0LL);
  __chkstk_darwin(v140);
  *(&v172 - 8) = v189;
  *((_BYTE *)&v172 - 56) = v131;
  *(&v172 - 6) = v132;
  *(&v172 - 5) = v133;
  uint64_t v200 = v133;
  unint64_t v203 = v134;
  *(&v172 - 4) = v134;
  *(&v172 - 3) = v139;
  *(&v172 - 2) = v137;
  uint64_t v198 = v141;
  static Transaction.named<A>(_:with:)( "BeaconManagerService.sendFamilyShareMessage",  43LL,  2LL,  sub_10020DEC4,  &v172 - 10);
  swift_bridgeObjectRelease();
  uint64_t v142 = v137 + v178[7];
  uint64_t v209 = *(void *)(v142 + 8);
  uint64_t v199 = *(void *)(v142 + 16);
  LOBYTE(v137) = *(_BYTE *)v142;
  uint64_t v143 = dispatch_group_create();
  uint64_t v144 = sub_1006F13B0((uint64_t)&off_100933D10);
  uint64_t v145 = swift_allocObject(&unk_100948A68, 17LL, 7LL);
  *(_BYTE *)(v145 + swift_weakDestroy(v0 + 16) = 0;
  dispatch_group_enter(v143);
  uint64_t v146 = (void *)swift_allocObject(&unk_1009498C8, 40LL, 7LL);
  v146[2] = v145;
  v146[3] = v144;
  v146[4] = v143;
  swift_retain();
  uint64_t v147 = v143;
  sub_1001F1284(v137, v209, v199, (uint64_t)sub_10020FCDC, (uint64_t)v146);
  swift_release();
  OS_dispatch_group.wait()();

  swift_beginAccess(v145 + 16, &v204, 0LL, 0LL);
  LODWORD(v147) = *(unsigned __int8 *)(v145 + 16);
  swift_release();
  if ((_DWORD)v147 == 1)
  {
    uint64_t v148 = v187;
    uint64_t v149 = v185;
    if (v185)
    {
      v206[0] = (uint64_t)_swiftEmptyArrayStorage;
      sub_100032E4C(0, v185, 0);
      uint64_t v150 = v148 + ((*(unsigned __int8 *)(v179 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v179 + 80));
      uint64_t v209 = *(void *)(v179 + 72);
      uint64_t v151 = (void *)v206[0];
      uint64_t v152 = v174;
      uint64_t v153 = v192;
      do
      {
        uint64_t v154 = v149;
        uint64_t v155 = v190;
        sub_10001DC4C(v150, v190, type metadata accessor for TimeBasedKey);
        uint64_t v156 = v191;
        sub_10001DC4C(v155, v191, type metadata accessor for TimeBasedKey);
        sub_10030B078(v156, v153);
        sub_100018C68(v155, type metadata accessor for TimeBasedKey);
        if ((swift_isUniquelyReferenced_nonNull_native(v151) & 1) == 0)
        {
          sub_100032E4C(0, v151[2] + 1LL, 1);
          uint64_t v151 = (void *)v206[0];
        }

        unint64_t v158 = v151[2];
        unint64_t v157 = v151[3];
        if (v158 >= v157 >> 1)
        {
          sub_100032E4C(v157 > 1, v158 + 1, 1);
          uint64_t v151 = (void *)v206[0];
        }

        v151[2] = v158 + 1;
        uint64_t v159 = (uint64_t)v151
        uint64_t v153 = v192;
        sub_10002218C(v192, v159, type metadata accessor for CryptoKeys);
        v150 += v209;
        uint64_t v149 = v154 - 1;
      }

      while (v154 != 1);
      sub_100117B2C(v187, v186, 1);
    }

    else
    {
      sub_100117B2C(v187, v186, 1);
      uint64_t v151 = _swiftEmptyArrayStorage;
    }

    uint64_t v160 = v195;
    id v161 = v194;
    uint64_t v162 = v188;
    uint64_t v163 = v177;
    sub_10001DC4C((uint64_t)v188, v177, type metadata accessor for SharedBeaconRecord);
    *(void *)(v163 + *(int *)(v175 + 20)) = v151;
    uint64_t v164 = v176;
    sub_10001DC4C(v163, v176, type metadata accessor for LegacyShareEnvelope);
    uint64_t v165 = sub_1001F31E4( 0,  1LL,  v164,  &qword_1009A6118,  type metadata accessor for LegacyShareEnvelope,  &qword_1009A6120,  (uint64_t (*)(void))sub_10020DF58,  (uint64_t)v206);
    uint64_t v166 = v200;
    uint64_t v209 = (uint64_t)&v172;
    uint64_t v167 = v207;
    unint64_t v168 = v208;
    __chkstk_darwin(v165);
    *(&v172 - 6) = v189;
    *((_BYTE *)&v172 - 4sub_100032838(0, 7LL, 0) = v169;
    *(&v172 - 4) = v170;
    *(&v172 - 3) = v167;
    uint64_t v171 = v193;
    *(&v172 - 2) = v168;
    *(&v172 - 1) = v171;
    static Transaction.named<A>(_:with:)( "BeaconManagerService.sendFamilyShareMessage",  43LL,  2LL,  sub_10020DEF8,  &v172 - 8);

    sub_100016F9C(v166, v203);
    sub_100018C68(v163, type metadata accessor for LegacyShareEnvelope);
    sub_100018C68(v182, type metadata accessor for FamilyShareEnvelopeV1);
    sub_100018C68((uint64_t)v162, type metadata accessor for SharedBeaconRecord);
    (*(void (**)(uint64_t, uint64_t))(v201 + 8))(v160, v202);
    return (id)sub_100016F9C(v167, v168);
  }

  else
  {

    sub_100016F9C(v200, v203);
    sub_100117B2C(v187, v186, 1);
    sub_100018C68(v182, type metadata accessor for FamilyShareEnvelopeV1);
    sub_100018C68((uint64_t)v188, type metadata accessor for SharedBeaconRecord);
    return (id)(*(uint64_t (**)(uint64_t, uint64_t))(v201 + 8))(v195, v202);
  }

uint64_t sub_1001F2DC0@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v29[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = type metadata accessor for PropertyListEncoder(0LL);
  uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  PropertyListEncoder.init()(v13);
  if (qword_10099BA20 != -1) {
    swift_once(&qword_10099BA20, sub_100792B54);
  }
  uint64_t v14 = sub_10000A720(v8, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v11, v14, v8);
  v30[3] = &type metadata for Bool;
  LOBYTE(v30[0]) = 1;
  uint64_t v15 = (void (*)(_BYTE *, void))dispatch thunk of PropertyListEncoder.userInfo.modify(v29);
  sub_100044E08((uint64_t)v30, (uint64_t)v11);
  v15(v29, 0LL);
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
  uint64_t v17 = type metadata accessor for UUID(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v20 = (v19 + 32) & ~v19;
  uint64_t v21 = swift_allocObject(v16, v20 + *(void *)(v18 + 72), v19 | 7);
  *(_OWORD *)(v21 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v21 + v20, a3, v17);
  v30[0] = v21;
  uint64_t v22 = sub_100004AEC((uint64_t *)&unk_1009B81E0);
  unint64_t v23 = sub_10020AEAC();
  uint64_t v24 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v30, v22, v23);
  if (v4)
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a3, v17);
    return swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v27 = v24;
    uint64_t v28 = v25;
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a3, v17);
    uint64_t result = swift_bridgeObjectRelease();
    *(_BYTE *)a4 = a1;
    *(void *)(a4 + 8) = v31;
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = v27;
    *(void *)(a4 + 24) = v28;
  }

  return result;
}

uint64_t sub_1001F2FF4@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v24[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = type metadata accessor for PropertyListEncoder(0LL);
  uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  PropertyListEncoder.init()(v13);
  if (qword_10099BA20 != -1) {
    swift_once(&qword_10099BA20, sub_100792B54);
  }
  uint64_t v14 = sub_10000A720(v8, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v11, v14, v8);
  v25[3] = &type metadata for Bool;
  LOBYTE(v25[0]) = 1;
  uint64_t v15 = (void (*)(_BYTE *, void))dispatch thunk of PropertyListEncoder.userInfo.modify(v24);
  sub_100044E08((uint64_t)v25, (uint64_t)v11);
  v15(v24, 0LL);
  uint64_t v16 = sub_100004AEC(&qword_1009A60C8);
  uint64_t v17 = swift_allocObject(v16, 40LL, 7LL);
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(v17 + 32) = a3;
  v25[0] = v17;
  swift_bridgeObjectRetain(a3);
  uint64_t v18 = sub_100004AEC(&qword_1009A0E38);
  uint64_t v19 = sub_10020F8E4(&qword_1009A60D0, &qword_1009A0E38, (void (*)(void))sub_10020B1EC);
  uint64_t v20 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v25, v18, v19);
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  if (!v4)
  {
    *(_BYTE *)a4 = a1;
    *(void *)(a4 + 8) = v26;
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = v20;
    *(void *)(a4 + 24) = v22;
  }

  return result;
}

uint64_t sub_1001F31E4@<X0>( int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t (*a5)(void)@<X4>, uint64_t *a6@<X5>, uint64_t (*a7)(void)@<X6>, uint64_t a8@<X8>)
{
  uint64_t v35 = a6;
  uint64_t v36 = a7;
  uint64_t v34 = a2;
  HIDWORD(v33) = a1;
  uint64_t v12 = type metadata accessor for CodingUserInfoKey(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for PropertyListEncoder(0LL);
  uint64_t v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  PropertyListEncoder.init()(v17);
  if (qword_10099BA20 != -1) {
    swift_once(&qword_10099BA20, sub_100792B54);
  }
  uint64_t v18 = sub_10000A720(v12, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v18, v12);
  v38[3] = &type metadata for Bool;
  LOBYTE(v38[0]) = 1;
  uint64_t v19 = (void (*)(_BYTE *, void))dispatch thunk of PropertyListEncoder.userInfo.modify(v37);
  sub_100044E08((uint64_t)v38, (uint64_t)v15);
  v19(v37, 0LL);
  uint64_t v20 = sub_100004AEC(a4);
  uint64_t v21 = *(void *)(a5(0LL) - 8);
  uint64_t v22 = *(void *)(v21 + 72);
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = (v23 + 32) & ~v23;
  uint64_t v25 = swift_allocObject(v20, v24 + v22, v23 | 7);
  *(_OWORD *)(v25 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  sub_10001DC4C(a3, v25 + v24, a5);
  v38[0] = v25;
  uint64_t v26 = sub_100004AEC(v35);
  uint64_t v27 = v36();
  uint64_t v28 = v38[5];
  uint64_t v29 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v38, v26, v27);
  uint64_t v31 = v30;
  swift_release();
  sub_100018C68(a3, a5);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v28)
  {
    *(_BYTE *)a8 = BYTE4(v33);
    *(void *)(a8 + 8) = v34;
    *(void *)(a8 + swift_weakDestroy(v0 + 16) = v29;
    *(void *)(a8 + 24) = v31;
  }

  return result;
}

uint64_t sub_1001F3404( uint64_t a1, uint64_t a2, int a3, char *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = v13;
  uint64_t v15 = (unsigned __int8 *)(a8 + *(int *)(type metadata accessor for ShareInstruction(0LL) + 28));
  uint64_t v17 = *((void *)v15 + 1);
  uint64_t v16 = (void (*)(void, void, void))*((void *)v15 + 2);
  int v18 = *v15;
  uint64_t v19 = (void *)sub_10076832C((uint64_t)&off_100933D38);
  swift_retain();
  sub_1002052DC( a3,  a4,  a5,  a6,  v14,  v18,  v17,  v16,  1,  0LL,  1,  0,  v19,  (void (*)(uint64_t, uint64_t))&_swiftEmptySetSingleton,  0LL,  0LL,  a2,  a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1001F34FC(uint64_t a1, uint64_t a2, int a3, char *a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v10 = (unsigned __int8 *)(a7 + *(int *)(type metadata accessor for ShareInstruction(0LL) + 28));
  uint64_t v11 = *((void *)v10 + 1);
  uint64_t v12 = (void (*)(void, void, void))*((void *)v10 + 2);
  int v13 = *v10;
  uint64_t v14 = (void (*)(uint64_t, uint64_t))sub_10076832C((uint64_t)&off_100933D60);
  swift_retain();
  uint64_t v15 = (os_log_s *)sub_1004131A4((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v16 = (void *)sub_1006F13B0((uint64_t)&off_100933D88);
  sub_1002064D8(a3, a4, a5, a6, v15, v13, v11, v12, 0, 0LL, 1, 0, v16, v14, 0LL, 0LL, a2, a1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001F3608(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t v7 = sub_100004AEC(&qword_1009A24D8);
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t *)((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Transaction.capture()();
  sub_10001581C(a1, (uint64_t)v9, &qword_1009A24D8);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v7);
  if ((_DWORD)EnumCaseMultiPayload != 1) {
    return sub_100015794((uint64_t)v9, &qword_1009A24D8);
  }
  uint64_t v11 = *v9;
  uint64_t v12 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
  if (qword_10099B700 != -1) {
    swift_once(&qword_10099B700, sub_100651100);
  }
  uint64_t v13 = qword_100A2B010;
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
  *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v22 = v11;
  swift_errorRetain(v11);
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  uint64_t v17 = String.init<A>(describing:)(&v22, v16);
  uint64_t v19 = v18;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_1000226F4();
  *(void *)(v15 + 32) = v17;
  *(void *)(v15 + 4sub_100032838(0, 7LL, 0) = v19;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, a3, a4, 2LL, v15);
  swift_bridgeObjectRelease();
  return swift_errorRelease(v11);
}

uint64_t sub_1001F37A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v36 = a2;
  uint64_t v5 = (char *)type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v34 = *((void *)v5 - 1);
  uint64_t v35 = v5;
  __chkstk_darwin(v5);
  uint64_t v33 = (void *)((char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  void v31[2] = *(void *)(v7 - 8);
  uint64_t v32 = v7;
  __chkstk_darwin(v7);
  v31[1] = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  __chkstk_darwin(v9);
  uint64_t v10 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for UUID(0LL);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v17 + 16))(v16, a1 + *(int *)(v10 + 20));
  sub_1001F2DC0(2, 1LL, (uint64_t)v16, (uint64_t)aBlock);
  uint64_t v18 = aBlock[2];
  unint64_t v19 = aBlock[3];
  int v20 = LOBYTE(aBlock[0]);
  uint64_t v21 = (unsigned __int8 *)(a1 + *(int *)(v10 + 28));
  uint64_t v34 = *((void *)v21 + 1);
  uint64_t v35 = (char *)aBlock[1];
  uint64_t v33 = (void *)*((void *)v21 + 2);
  LODWORD(v32) = *v21;
  sub_10001DC4C(a1, (uint64_t)v13, type metadata accessor for SharedBeaconRecord);
  uint64_t v22 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v23 = (v22 + 24) & ~v22;
  unint64_t v24 = (v12 + v23 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v25 = swift_allocObject(&unk_100949F80, v24 + 16, v22 | 7);
  *(void *)(v25 + swift_weakDestroy(v0 + 16) = v31[0];
  sub_10002218C((uint64_t)v13, v25 + v23, type metadata accessor for SharedBeaconRecord);
  uint64_t v26 = (void *)(v25 + v24);
  *uint64_t v26 = v36;
  v26[1] = a3;
  swift_retain();
  swift_retain();
  uint64_t v27 = (os_log_s *)sub_1004131A4((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v28 = (void *)sub_1006F13B0((uint64_t)&off_100933DB0);
  uint64_t v29 = (void (*)(uint64_t, uint64_t))sub_1006F13B0((uint64_t)_swiftEmptyArrayStorage);
  sub_1001E74B8( v20,  v35,  v18,  v19,  v27,  v32,  v34,  (void (*)(void, void, void))v33,  0,  0LL,  1,  0,  v28,  v29,  0LL,  0LL,  (void (*)(void ***))sub_10020F37C,  (void (*)(void ***))v25);
  sub_100016F9C(v18, v19);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001F3D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v37 = a4;
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v35 = *(void *)(v7 - 8);
  uint64_t v36 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v33 = *(void *)(v10 - 8);
  uint64_t v34 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100004AEC(&qword_1009A24D8);
  __chkstk_darwin(v17);
  unint64_t v19 = (uint64_t *)((char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v19, &qword_1009A24D8);
  if (swift_getEnumCaseMultiPayload(v19, v17) == 1)
  {
    uint64_t v20 = *v19;
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    (*(void (**)(char *, void, uint64_t))(v14 + 104))( v16,  enum case for DispatchQoS.QoSClass.default(_:),  v13);
    uint64_t v21 = (void *)static OS_dispatch_queue.global(qos:)(v16);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    uint64_t v22 = (void *)swift_allocObject(&unk_100949FA8, 40LL, 7LL);
    v22[2] = v37;
    v22[3] = a5;
    v22[4] = v20;
    void aBlock[4] = sub_10020FF44;
    void aBlock[5] = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    aBlock[3] = &unk_100949FC0;
    uint64_t v23 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v24 = swift_errorRetain(v20);
    static DispatchQoS.unspecified.getter(v24);
    uint64_t v38 = _swiftEmptyArrayStorage;
    uint64_t v25 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v26 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v27 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v28 = v36;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v26, v27, v36, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v9, v23);
    _Block_release(v23);

    swift_errorRelease(v20);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v28);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v34);
    return swift_release();
  }

  else
  {
    uint64_t v30 = swift_allocObject(&unk_100949FF8, 32LL, 7LL);
    *(void *)(v30 + swift_weakDestroy(v0 + 16) = v37;
    *(void *)(v30 + 24) = a5;
    swift_retain();
    sub_1002B3554( v32,  0,  (void (*)(uint64_t))sub_1001F409C,  0LL,  (void (*)(uint64_t))sub_10020F404,  (void (*)(uint64_t))v30);
    swift_release();
    return sub_100015794((uint64_t)v19, &qword_1009A24D8);
  }

uint64_t sub_1001F409C(uint64_t a1)
{
  uint64_t result = type metadata accessor for SharedBeaconRecord(0LL);
  *(_BYTE *)(a1 + *(int *)(result + 52)) = 1;
  return result;
}

uint64_t sub_1001F40CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v58 = a2;
  uint64_t v59 = a3;
  uint64_t v57 = a1;
  uint64_t v65 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v63 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v62 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v61 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v60 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v56 = *(void *)(v9 - 8);
  uint64_t v10 = *(void *)(v56 + 64);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v55 - v13;
  uint64_t v15 = sub_100004AEC(&qword_1009A0E30);
  __chkstk_darwin(v15);
  uint64_t v17 = (uint64_t *)((char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(v57, (uint64_t)v17, &qword_1009A0E30);
  if (swift_getEnumCaseMultiPayload(v17, v15) == 1)
  {
    uint64_t v18 = *v17;
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchQoS.QoSClass.default(_:), v5);
    unint64_t v19 = (void *)static OS_dispatch_queue.global(qos:)(v8);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v20 = (void *)swift_allocObject(&unk_10094A020, 40LL, 7LL);
    uint64_t v21 = v59;
    void v20[2] = v58;
    v20[3] = v21;
    v20[4] = v18;
    char v71 = sub_10020F418;
    uint64_t v72 = v20;
    unint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v68 = 1107296256LL;
    uint64_t v69 = sub_1001C31E8;
    uint64_t v70 = &unk_10094A038;
    uint64_t v22 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v23 = swift_errorRetain(v18);
    uint64_t v24 = v60;
    static DispatchQoS.unspecified.getter(v23);
    uint64_t v66 = _swiftEmptyArrayStorage;
    uint64_t v25 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v26 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v27 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v28 = v62;
    uint64_t v29 = v26;
    uint64_t v30 = v65;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v66, v29, v27, v65, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v24, v28, v22);
    _Block_release(v22);

    swift_errorRelease(v18);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v28, v30);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v24, v64);
  }

  else
  {
    uint64_t v57 = v5;
    uint64_t v31 = sub_10002218C((uint64_t)v17, (uint64_t)v14, type metadata accessor for SharedBeaconRecord);
    uint64_t v32 = static os_log_type_t.default.getter(v31);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v33 = qword_100A2B010;
    uint64_t v34 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v35 = swift_allocObject(v34, 72LL, 7LL);
    *(_OWORD *)(v35 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    sub_10001DC4C((uint64_t)v14, (uint64_t)v12, type metadata accessor for SharedBeaconRecord);
    uint64_t v36 = String.init<A>(describing:)(v12, v9);
    uint64_t v38 = v37;
    *(void *)(v35 + 56) = &type metadata for String;
    *(void *)(v35 + 64) = sub_1000226F4();
    *(void *)(v35 + 32) = v36;
    *(void *)(v35 + 4sub_100032838(0, 7LL, 0) = v38;
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Successfully accepted share: %@", 31LL, 2LL, v35);
    swift_bridgeObjectRelease();
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v39 = v57;
    (*(void (**)(char *, void, uint64_t))(v6 + 104))( v8,  enum case for DispatchQoS.QoSClass.default(_:),  v57);
    uint64_t v40 = (void *)static OS_dispatch_queue.global(qos:)(v8);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v39);
    sub_10001DC4C((uint64_t)v14, (uint64_t)v12, type metadata accessor for SharedBeaconRecord);
    uint64_t v41 = *(unsigned __int8 *)(v56 + 80);
    uint64_t v42 = (v41 + 32) & ~v41;
    uint64_t v43 = swift_allocObject(&unk_10094A070, v42 + v10, v41 | 7);
    uint64_t v44 = v59;
    *(void *)(v43 + swift_weakDestroy(v0 + 16) = v58;
    *(void *)(v43 + 24) = v44;
    sub_10002218C((uint64_t)v12, v43 + v42, type metadata accessor for SharedBeaconRecord);
    char v71 = sub_10020F5D4;
    uint64_t v72 = (void *)v43;
    unint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v68 = 1107296256LL;
    uint64_t v69 = sub_1001C31E8;
    uint64_t v70 = &unk_10094A088;
    unint64_t v45 = _Block_copy(&aBlock);
    uint64_t v46 = swift_retain();
    char v47 = v60;
    static DispatchQoS.unspecified.getter(v46);
    uint64_t v66 = _swiftEmptyArrayStorage;
    uint64_t v48 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v49 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v50 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v51 = v62;
    uint64_t v52 = v49;
    uint64_t v53 = v65;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v66, v52, v50, v65, v48);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v47, v51, v45);
    _Block_release(v45);

    (*(void (**)(char *, uint64_t))(v63 + 8))(v51, v53);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v47, v64);
    sub_100018C68((uint64_t)v14, type metadata accessor for SharedBeaconRecord);
  }

  return swift_release();
}

uint64_t sub_1001F4708(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100004AEC(&qword_1009A0E30);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C(a3, (uint64_t)v7, type metadata accessor for SharedBeaconRecord);
  swift_storeEnumTagMultiPayload(v7, v5, 0LL);
  a1(v7);
  return sub_100015794((uint64_t)v7, &qword_1009A0E30);
}

uint64_t sub_1001F47B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v50 = a4;
  uint64_t v51 = a5;
  v42[1] = a2;
  uint64_t v43 = a3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v48 = *(void *)(v6 - 8);
  uint64_t v49 = v6;
  __chkstk_darwin(v6);
  char v47 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v45 = *(void *)(v8 - 8);
  uint64_t v46 = v8;
  __chkstk_darwin(v8);
  uint64_t v44 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100004AEC(&qword_1009A24D8);
  __chkstk_darwin(v18);
  uint64_t v20 = (void *)((char *)v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v20, &qword_1009A24D8);
  if (swift_getEnumCaseMultiPayload(v20, v18) == 1)
  {
    uint64_t v21 = *v20;
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    (*(void (**)(char *, void, uint64_t))(v11 + 104))( v13,  enum case for DispatchQoS.QoSClass.default(_:),  v10);
    uint64_t v22 = (void *)static OS_dispatch_queue.global(qos:)(v13);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v23 = (void *)swift_allocObject(&unk_100948C70, 40LL, 7LL);
    uint64_t v24 = v51;
    void v23[2] = v50;
    v23[3] = v24;
    v23[4] = v21;
    void aBlock[4] = sub_1001FA824;
    void aBlock[5] = v23;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    aBlock[3] = &unk_100948C88;
    uint64_t v25 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v26 = swift_errorRetain(v21);
    uint64_t v27 = v44;
    static DispatchQoS.unspecified.getter(v26);
    uint64_t v52 = _swiftEmptyArrayStorage;
    uint64_t v28 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v29 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v30 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v31 = v47;
    uint64_t v32 = v29;
    uint64_t v33 = v49;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v32, v30, v49, v28);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v27, v31, v25);
    _Block_release(v25);

    swift_errorRelease(v21);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v31, v33);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v27, v46);
    return swift_release();
  }

  else
  {
    uint64_t v35 = v43;
    sub_10001DC4C( v43,  (uint64_t)v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL),  type metadata accessor for SharedBeaconRecord);
    uint64_t v36 = *(unsigned __int8 *)(v15 + 80);
    uint64_t v37 = (v36 + 16) & ~v36;
    unint64_t v38 = (v16 + v37 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v39 = swift_allocObject(&unk_100948CC0, v38 + 16, v36 | 7);
    sub_10002218C((uint64_t)v17, v39 + v37, type metadata accessor for SharedBeaconRecord);
    uint64_t v40 = (void *)(v39 + v38);
    uint64_t v41 = v51;
    *uint64_t v40 = v50;
    v40[1] = v41;
    swift_retain();
    sub_1005DABA8(v35, (uint64_t)sub_10020B108, v39);
    swift_release();
    return sub_100015794((uint64_t)v20, &qword_1009A24D8);
  }

uint64_t sub_1001F4B9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v51 = a3;
  uint64_t v52 = a4;
  uint64_t v50 = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v54 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v53 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v55 = v8;
  if (a1)
  {
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    (*(void (**)(char *, void, uint64_t))(v12 + 104))( v14,  enum case for DispatchQoS.QoSClass.default(_:),  v11);
    uint64_t v19 = (void *)static OS_dispatch_queue.global(qos:)(v14);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t v20 = swift_allocObject(&unk_100948D38, 32LL, 7LL);
    uint64_t v21 = v52;
    *(void *)(v20 + swift_weakDestroy(v0 + 16) = v51;
    *(void *)(v20 + 24) = v21;
    uint64_t v61 = sub_10020B15C;
    uint64_t v62 = v20;
    unint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v58 = 1107296256LL;
    uint64_t v59 = sub_1001C31E8;
    uint64_t v60 = &unk_100948D50;
    uint64_t v22 = _Block_copy(&aBlock);
    uint64_t v23 = swift_retain();
    static DispatchQoS.unspecified.getter(v23);
    uint64_t v56 = _swiftEmptyArrayStorage;
    uint64_t v24 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v25 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v26 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v56, v25, v26, v5, v24);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v7, v22);
    _Block_release(v22);

    (*(void (**)(char *, uint64_t))(v54 + 8))(v7, v5);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v10, v55);
  }

  else
  {
    uint64_t v27 = v50;
    uint64_t v48 = v7;
    uint64_t v49 = v5;
    uint64_t v28 = static os_log_type_t.default.getter(v16);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v29 = qword_100A2B010;
    uint64_t v30 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v31 = swift_allocObject(v30, 72LL, 7LL);
    *(_OWORD *)(v31 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    sub_10001DC4C(v27, (uint64_t)v18, type metadata accessor for SharedBeaconRecord);
    uint64_t v32 = String.init<A>(describing:)(v18, v15);
    uint64_t v34 = v33;
    *(void *)(v31 + 56) = &type metadata for String;
    *(void *)(v31 + 64) = sub_1000226F4();
    *(void *)(v31 + 32) = v32;
    *(void *)(v31 + 4sub_100032838(0, 7LL, 0) = v34;
    os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "Successfully declined share %@", 30LL, 2LL, v31);
    swift_bridgeObjectRelease();
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    (*(void (**)(char *, void, uint64_t))(v12 + 104))( v14,  enum case for DispatchQoS.QoSClass.default(_:),  v11);
    uint64_t v35 = (void *)static OS_dispatch_queue.global(qos:)(v14);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t v36 = swift_allocObject(&unk_100948CE8, 32LL, 7LL);
    uint64_t v37 = v52;
    *(void *)(v36 + swift_weakDestroy(v0 + 16) = v51;
    *(void *)(v36 + 24) = v37;
    uint64_t v61 = sub_10020FF70;
    uint64_t v62 = v36;
    unint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v58 = 1107296256LL;
    uint64_t v59 = sub_1001C31E8;
    uint64_t v60 = &unk_100948D00;
    unint64_t v38 = _Block_copy(&aBlock);
    uint64_t v39 = swift_retain();
    uint64_t v40 = v10;
    static DispatchQoS.unspecified.getter(v39);
    uint64_t v56 = _swiftEmptyArrayStorage;
    uint64_t v41 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v42 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v43 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v45 = v48;
    uint64_t v44 = v49;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v56, v42, v43, v49, v41);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v40, v45, v38);
    _Block_release(v38);

    (*(void (**)(char *, uint64_t))(v54 + 8))(v45, v44);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v40, v55);
  }

  return swift_release();
}

uint64_t sub_1001F50CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v63 = a4;
  uint64_t v64 = a5;
  uint64_t v55 = a3;
  uint64_t v53 = a2;
  uint64_t v62 = a1;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v60 = *(void *)(v5 - 8);
  uint64_t v61 = v5;
  __chkstk_darwin(v5);
  uint64_t v59 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v57 = *(void *)(v7 - 8);
  uint64_t v58 = v7;
  __chkstk_darwin(v7);
  uint64_t v56 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = type metadata accessor for ShareRecord(0LL);
  uint64_t v13 = *(void *)(v54 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = __chkstk_darwin(v54);
  uint64_t v16 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v53 - v17;
  uint64_t v19 = sub_100004AEC(&qword_1009A24D8);
  __chkstk_darwin(v19);
  uint64_t v21 = (uint64_t *)((char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(v62, (uint64_t)v21, &qword_1009A24D8);
  if (swift_getEnumCaseMultiPayload(v21, v19) == 1)
  {
    uint64_t v22 = *v21;
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    (*(void (**)(char *, void, uint64_t))(v10 + 104))( v12,  enum case for DispatchQoS.QoSClass.default(_:),  v9);
    uint64_t v23 = (void *)static OS_dispatch_queue.global(qos:)(v12);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v24 = (void *)swift_allocObject(&unk_100948AE0, 40LL, 7LL);
    uint64_t v25 = v64;
    v24[2] = v63;
    v24[3] = v25;
    v24[4] = v22;
    void aBlock[4] = sub_1001FA824;
    void aBlock[5] = v24;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    aBlock[3] = &unk_100948AF8;
    uint64_t v26 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v27 = swift_errorRetain(v22);
    uint64_t v28 = v56;
    static DispatchQoS.unspecified.getter(v27);
    uint64_t v65 = _swiftEmptyArrayStorage;
    uint64_t v29 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v30 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v31 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v32 = v59;
    uint64_t v33 = v30;
    uint64_t v34 = v61;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v65, v33, v31, v61, v29);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v28, v32, v26);
    _Block_release(v26);

    swift_errorRelease(v22);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v32, v34);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v28, v58);
    return swift_release();
  }

  else
  {
    uint64_t v36 = v53;
    uint64_t v62 = *(void *)(v53 + 128);
    uint64_t v37 = v55;
    sub_10001DC4C(v55, (uint64_t)v18, type metadata accessor for ShareRecord);
    uint64_t v38 = *(unsigned __int8 *)(v13 + 80);
    uint64_t v39 = (v38 + 16) & ~v38;
    unint64_t v40 = (v14 + v39 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v41 = (v40 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v42 = swift_allocObject(&unk_100948B30, v41 + 16, v38 | 7);
    sub_10002218C((uint64_t)v18, v42 + v39, type metadata accessor for ShareRecord);
    *(void *)(v42 + v4sub_100032838(0, 7LL, 0) = v36;
    uint64_t v43 = (void *)(v42 + v41);
    uint64_t v44 = v64;
    *uint64_t v43 = v63;
    v43[1] = v44;
    swift_retain();
    uint64_t v45 = swift_retain();
    uint64_t v46 = static os_log_type_t.default.getter(v45);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v47 = qword_100A2B018;
    uint64_t v48 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v49 = swift_allocObject(v48, 72LL, 7LL);
    *(_OWORD *)(v49 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    sub_10001DC4C(v37, (uint64_t)v16, type metadata accessor for ShareRecord);
    uint64_t v50 = String.init<A>(describing:)(v16, v54);
    uint64_t v52 = v51;
    *(void *)(v49 + 56) = &type metadata for String;
    *(void *)(v49 + 64) = sub_1000226F4();
    *(void *)(v49 + 32) = v50;
    *(void *)(v49 + 4sub_100032838(0, 7LL, 0) = v52;
    os_log(_:dso:log:_:_:)(v46, &_mh_execute_header, v47, "Attempting to remove: %@", 24LL, 2LL, v49);
    swift_bridgeObjectRelease();
    swift_retain();
    sub_100555AE4(v37, v62, (uint64_t)sub_100200358, v42);
    swift_release_n(v42, 2LL);
    return sub_100015794((uint64_t)v21, &qword_1009A24D8);
  }

uint64_t sub_1001F55D4(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v60 = a4;
  uint64_t v61 = a5;
  uint64_t v59 = a2;
  uint64_t v64 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v63 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v62 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for ShareRecord(0LL);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a1 & 1) != 0)
  {
    uint64_t v55 = v12;
    uint64_t v56 = v11;
    uint64_t v19 = v59;
    uint64_t v57 = v6;
    uint64_t v58 = v8;
    uint64_t v20 = static os_log_type_t.default.getter(v16);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v21 = qword_100A2B010;
    uint64_t v22 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v23 = swift_allocObject(v22, 72LL, 7LL);
    *(_OWORD *)(v23 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    sub_10001DC4C(v19, (uint64_t)v18, type metadata accessor for ShareRecord);
    uint64_t v24 = String.init<A>(describing:)(v18, v15);
    uint64_t v26 = v25;
    *(void *)(v23 + 56) = &type metadata for String;
    *(void *)(v23 + 64) = sub_1000226F4();
    *(void *)(v23 + 32) = v24;
    *(void *)(v23 + 4sub_100032838(0, 7LL, 0) = v26;
    os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Successfully unshared %@", 24LL, 2LL, v23);
    swift_bridgeObjectRelease();
    uint64_t v27 = v19 + *(int *)(v15 + 20);
    sub_1006C0F20(v27, 0);
    sub_1006C0F20(v27, 5);
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v29 = v55;
    uint64_t v28 = v56;
    (*(void (**)(char *, void, uint64_t))(v55 + 104))( v14,  enum case for DispatchQoS.QoSClass.default(_:),  v56);
    uint64_t v30 = (void *)static OS_dispatch_queue.global(qos:)(v14);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v28);
    uint64_t v31 = swift_allocObject(&unk_100948BA8, 32LL, 7LL);
    uint64_t v32 = v61;
    *(void *)(v31 + swift_weakDestroy(v0 + 16) = v60;
    *(void *)(v31 + 24) = v32;
    uint64_t v70 = sub_10020FF70;
    uint64_t v71 = v31;
    unint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v67 = 1107296256LL;
    uint64_t v68 = sub_1001C31E8;
    uint64_t v69 = &unk_100948BC0;
    uint64_t v33 = _Block_copy(&aBlock);
    uint64_t v34 = swift_retain();
    static DispatchQoS.unspecified.getter(v34);
    uint64_t v65 = _swiftEmptyArrayStorage;
    uint64_t v35 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v36 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v37 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v39 = v63;
    uint64_t v38 = v64;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v65, v36, v37, v64, v35);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v39, v33);
    _Block_release(v33);

    (*(void (**)(char *, uint64_t))(v57 + 8))(v39, v38);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v10, v58);
  }

  else
  {
    uint64_t v40 = v6;
    sub_1006C0F20(v59 + *(int *)(v15 + 20), 1);
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    (*(void (**)(char *, void, uint64_t))(v12 + 104))( v14,  enum case for DispatchQoS.QoSClass.default(_:),  v11);
    unint64_t v41 = (void *)static OS_dispatch_queue.global(qos:)(v14);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t v42 = swift_allocObject(&unk_100948B58, 32LL, 7LL);
    uint64_t v43 = v61;
    *(void *)(v42 + swift_weakDestroy(v0 + 16) = v60;
    *(void *)(v42 + 24) = v43;
    uint64_t v70 = sub_10020AE90;
    uint64_t v71 = v42;
    unint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v67 = 1107296256LL;
    uint64_t v68 = sub_1001C31E8;
    uint64_t v69 = &unk_100948B70;
    uint64_t v44 = v8;
    uint64_t v45 = _Block_copy(&aBlock);
    uint64_t v46 = swift_retain();
    static DispatchQoS.unspecified.getter(v46);
    uint64_t v65 = _swiftEmptyArrayStorage;
    uint64_t v47 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v48 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v49 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v50 = v63;
    uint64_t v51 = v48;
    uint64_t v52 = v64;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v65, v51, v49, v64, v47);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v50, v45);
    _Block_release(v45);

    (*(void (**)(char *, uint64_t))(v40 + 8))(v50, v52);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v10, v44);
  }

  return swift_release();
}

void sub_1001F5B54(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v5;
  uint64_t v10 = a3;
  unint64_t v7 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v8 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
  _BridgedStoredNSError.init(_:userInfo:)(&v11, &v10, v7, v6, v8);
  uint64_t v9 = v11;
  a1(v11);
}

uint64_t sub_1001F5BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v80 = a7;
  uint64_t v88 = a4;
  uint64_t v89 = a5;
  uint64_t v83 = a3;
  uint64_t v9 = (int *)type metadata accessor for ShareRecord(0LL);
  __chkstk_darwin(v9);
  uint64_t v78 = (uint64_t)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v11);
  uint64_t v82 = (uint64_t (*)(char *, uint64_t))((char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = type metadata accessor for DateInterval(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v81 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for Date(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v79 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v74 - v20;
  uint64_t v22 = (unsigned __int8 *)(a1 + v9[9]);
  int v87 = *v22;
  uint64_t v23 = *((void *)v22 + 1);
  uint64_t v85 = *((void *)v22 + 2);
  uint64_t v86 = v23;
  uint64_t v90 = a2;
  uint64_t v24 = *(void *)(a2 + 344);
  uint64_t v25 = v9[5];
  uint64_t v84 = a1;
  uint64_t v95 = v24;
  char v96 = 5;
  uint64_t v93 = a1 + v25;
  uint64_t v97 = a1 + v25;
  uint64_t v26 = v92;
  OS_dispatch_queue.sync<A>(execute:)(sub_10020FF50, v94, v16);
  uint64_t v91 = v24;
  uint64_t v92 = v26;
  uint64_t v27 = v16;
  sub_1006C11DC((uint64_t)v21, 5);
  LOBYTE(a2) = v28;
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t))(v17 + 8);
  uint64_t v30 = v29(v21, v27);
  if ((a2 & 1) != 0)
  {
    uint64_t v77 = v14;
    uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    uint64_t v32 = (uint64_t)v81;
    uint64_t v33 = v83;
    uint64_t v83 = v13;
    v31(v81, v33, v13);
    uint64_t v34 = v84;
    uint64_t v35 = v82;
    sub_10001581C(v84 + v9[8], (uint64_t)v82, (uint64_t *)&unk_10099D720);
    if ((*(unsigned int (**)(uint64_t (*)(char *, uint64_t), uint64_t, uint64_t))(v17 + 48))( v35,  1LL,  v27) == 1)
    {
      sub_100015794((uint64_t)v35, (uint64_t *)&unk_10099D720);
    }

    else
    {
      uint64_t v44 = v79;
      uint64_t v45 = (*(uint64_t (**)(char *, uint64_t (*)(char *, uint64_t), uint64_t))(v17 + 32))( v79,  v35,  v27);
      DateInterval.end.getter(v45);
      char v46 = static Date.< infix(_:_:)(v44, v21);
      v29(v21, v27);
      if ((v46 & 1) != 0)
      {
        uint64_t v82 = v29;
        (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v21, v44, v27);
        uint64_t v47 = v32;
        uint64_t v48 = DateInterval.end.setter(v21);
        unsigned int v75 = static os_log_type_t.default.getter(v48);
        uint64_t v76 = v27;
        if (qword_10099B700 != -1) {
          swift_once(&qword_10099B700, sub_100651100);
        }
        uint64_t v74 = qword_100A2B010;
        uint64_t v49 = sub_100004AEC((uint64_t *)&unk_10099D740);
        uint64_t v50 = swift_allocObject(v49, 112LL, 7LL);
        *(_OWORD *)(v50 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
        uint64_t v51 = v34;
        uint64_t v52 = v78;
        sub_10001DC4C(v51, v78, type metadata accessor for ShareRecord);
        uint64_t v53 = String.init<A>(describing:)(v52, v9);
        uint64_t v55 = v54;
        *(void *)(v50 + 56) = &type metadata for String;
        unint64_t v56 = sub_1000226F4();
        *(void *)(v50 + 64) = v56;
        *(void *)(v50 + 32) = v53;
        *(void *)(v50 + 4sub_100032838(0, 7LL, 0) = v55;
        uint64_t v57 = sub_100007864( &qword_1009A0DE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval,  (uint64_t)&protocol conformance descriptor for DateInterval);
        uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter(v83, v57);
        *(void *)(v50 + 96) = &type metadata for String;
        *(void *)(v50 + 104) = v56;
        *(void *)(v50 + 72) = v58;
        *(void *)(v50 + 8sub_100032838(0, 7LL, 0) = v59;
        os_log(_:dso:log:_:_:)( v75,  &_mh_execute_header,  v74,  "Using truncated interval in distributeKeys for expiring share %@: %@",  68LL,  2LL,  v50);
        swift_bridgeObjectRelease();
        uint64_t v27 = v76;
        uint64_t v29 = v82;
        v82(v44, v76);
        uint64_t v32 = v47;
      }

      else
      {
        v29(v44, v27);
      }
    }

    static Date.trustedNow.getter((uint64_t)v21);
    sub_1006C0AD4(v93, (uint64_t)v21, 5);
    v29(v21, v27);
    uint64_t v60 = v92;
    uint64_t v62 = sub_1001F6264(v88, v32, v89, v61, v87, v86, v85);
    uint64_t v63 = v77;
    if (v60)
    {
      uint64_t v64 = v32;
      uint64_t v65 = static os_log_type_t.error.getter(v62);
      uint64_t v66 = v83;
      if (qword_10099B700 != -1) {
        swift_once(&qword_10099B700, sub_100651100);
      }
      uint64_t v67 = qword_100A2B010;
      uint64_t v68 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v69 = swift_allocObject(v68, 72LL, 7LL);
      *(_OWORD *)(v69 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v98 = v60;
      swift_errorRetain(v60);
      uint64_t v70 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v71 = String.init<A>(describing:)(&v98, v70);
      uint64_t v73 = v72;
      *(void *)(v69 + 56) = &type metadata for String;
      *(void *)(v69 + 64) = sub_1000226F4();
      *(void *)(v69 + 32) = v71;
      *(void *)(v69 + 4sub_100032838(0, 7LL, 0) = v73;
      os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, v67, "Failed in distributeKeys: %@", 28LL, 2LL, v69);
      swift_bridgeObjectRelease();
      sub_1006C0F20(v93, 5);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 8))(v64, v66);
      if (*v80) {
        return swift_errorRelease(v60);
      }
      else {
        *uint64_t v80 = v60;
      }
    }

    else
    {
      return (*(uint64_t (**)(uint64_t, uint64_t))(v77 + 8))(v32, v83);
    }
  }

  else
  {
    uint64_t v36 = static os_log_type_t.default.getter(v30);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v37 = qword_100A2B010;
    uint64_t v38 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v39 = swift_allocObject(v38, 72LL, 7LL);
    *(_OWORD *)(v39 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v40 = UUID.uuidString.getter(v39);
    uint64_t v42 = v41;
    *(void *)(v39 + 56) = &type metadata for String;
    *(void *)(v39 + 64) = sub_1000226F4();
    *(void *)(v39 + 32) = v40;
    *(void *)(v39 + 4sub_100032838(0, 7LL, 0) = v42;
    os_log(_:dso:log:_:_:)( v36,  &_mh_execute_header,  v37,  "Skipping key update processing (requested too early): %@",  56LL,  2LL,  v39);
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_1001F6264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v149 = a3;
  uint64_t v8 = v7;
  uint64_t v153 = (char *)a6;
  int v151 = a5;
  uint64_t v12 = type metadata accessor for TimeBasedKey(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (uint64_t *)((char *)&v139 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v14);
  uint64_t v18 = (uint64_t *)((char *)&v139 - v17);
  uint64_t v19 = *(void *)(v8 + 128);
  uint64_t v20 = sub_1001FEC7C(a1, a2, 0, 0, 0, v19);
  uint64_t v23 = v20;
  if (!v22)
  {
    uint64_t v37 = v21;
    uint64_t v38 = static os_log_type_t.error.getter(v20);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v39 = qword_100A2B010;
    uint64_t v40 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v41 = swift_allocObject(v40, 72LL, 7LL);
    *(_OWORD *)(v41 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v42 = type metadata accessor for OwnedBeaconRecord(0LL);
    uint64_t v43 = UUID.uuidString.getter(v42);
    uint64_t v45 = v44;
    *(void *)(v41 + 56) = &type metadata for String;
    *(void *)(v41 + 64) = sub_1000226F4();
    *(void *)(v41 + 32) = v43;
    *(void *)(v41 + 4sub_100032838(0, 7LL, 0) = v45;
    swift_bridgeObjectRelease();
    unint64_t v46 = sub_10020B268();
    uint64_t v47 = swift_allocError(&type metadata for BeaconSharingManager.BeaconSharingKeyError, v46, 0LL, 0LL);
    swift_willThrow(v47);
    uint64_t v48 = v23;
    goto LABEL_12;
  }

  if (v22 != 1)
  {
    uint64_t v52 = static os_log_type_t.error.getter(v20);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v53 = qword_100A2B010;
    uint64_t v54 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v55 = swift_allocObject(v54, 72LL, 7LL);
    *(_OWORD *)(v55 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v56 = type metadata accessor for OwnedBeaconRecord(0LL);
    uint64_t v57 = UUID.uuidString.getter(v56);
    uint64_t v59 = v58;
    *(void *)(v55 + 56) = &type metadata for String;
    *(void *)(v55 + 64) = sub_1000226F4();
    *(void *)(v55 + 32) = v57;
    *(void *)(v55 + 4sub_100032838(0, 7LL, 0) = v59;
    goto LABEL_17;
  }

  uint64_t v147 = v21;
  uint64_t v148 = (void (*)(void, void, void))a7;
  uint64_t v24 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v25 = a1 + *(int *)(v24 + 24);
  uint64_t v145 = v24;
  uint64_t v146 = v25;
  if ((sub_1006DDC00() & 1) == 0)
  {
    char v28 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  char v28 = (void *)sub_1001FEC7C(a1, a2, 1, 0, 0, v19);
  if (!v27)
  {
    uint64_t v37 = v26;
    uint64_t v129 = sub_100117B2C(v23, v147, 1);
    uint64_t v130 = static os_log_type_t.error.getter(v129);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v131 = qword_100A2B010;
    uint64_t v132 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v133 = swift_allocObject(v132, 72LL, 7LL);
    *(_OWORD *)(v133 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v134 = UUID.uuidString.getter(v133);
    uint64_t v136 = v135;
    *(void *)(v133 + 56) = &type metadata for String;
    *(void *)(v133 + 64) = sub_1000226F4();
    *(void *)(v133 + 32) = v134;
    *(void *)(v133 + 4sub_100032838(0, 7LL, 0) = v136;
    swift_bridgeObjectRelease();
    unint64_t v137 = sub_10020B268();
    uint64_t v138 = swift_allocError(&type metadata for BeaconSharingManager.BeaconSharingKeyError, v137, 0LL, 0LL);
    swift_willThrow(v138);
    uint64_t v48 = (uint64_t)v28;
LABEL_12:
    uint64_t v49 = v37;
    char v50 = 0;
    return sub_100117B2C(v48, v49, v50);
  }

  if (v27 != 1)
  {
    uint64_t v29 = sub_100117B2C(v23, v147, 1);
    uint64_t v30 = static os_log_type_t.error.getter(v29);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v31 = qword_100A2B010;
    uint64_t v32 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v33 = swift_allocObject(v32, 72LL, 7LL);
    *(_OWORD *)(v33 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v34 = UUID.uuidString.getter(v33);
    uint64_t v36 = v35;
    *(void *)(v33 + 56) = &type metadata for String;
    *(void *)(v33 + 64) = sub_1000226F4();
    *(void *)(v33 + 32) = v34;
    *(void *)(v33 + 4sub_100032838(0, 7LL, 0) = v36;
LABEL_17:
    swift_bridgeObjectRelease();
    unint64_t v60 = sub_10020B268();
    uint64_t v61 = swift_allocError(&type metadata for BeaconSharingManager.BeaconSharingKeyError, v60, 0LL, 0LL);
    return swift_willThrow(v61);
  }

uint64_t sub_1001F6E18(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  swift_errorRetain(v5);
  a1(v5);
  return swift_errorRelease(v5);
}

uint64_t sub_1001F6E7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v41 - v14;
  uint64_t v16 = type metadata accessor for DateInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16LL))(a3, a1, v16);
  uint64_t v17 = type metadata accessor for ShareRecord(0LL);
  uint64_t v18 = a2 + *(int *)(v17 + 28);
  DateInterval.start.getter(v17);
  LOBYTE(a1) = static Date.> infix(_:_:)(v18, v15);
  uint64_t v44 = *(void (**)(char *, uint64_t))(v10 + 8);
  v44(v15, v9);
  if ((a1 & 1) != 0)
  {
    uint64_t v43 = v13;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v15, v18, v9);
    uint64_t v19 = DateInterval.start.setter(v15);
    unsigned int v42 = static os_log_type_t.default.getter(v19);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v41 = qword_100A2B010;
    uint64_t v20 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v21 = swift_allocObject(v20, 72LL, 7LL);
    *(_OWORD *)(v21 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    DateInterval.start.getter(v21);
    uint64_t v22 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v9, v22);
    uint64_t v25 = v24;
    v44(v15, v9);
    *(void *)(v21 + 56) = &type metadata for String;
    *(void *)(v21 + 64) = sub_1000226F4();
    *(void *)(v21 + 32) = v23;
    *(void *)(v21 + 4sub_100032838(0, 7LL, 0) = v25;
    os_log(_:dso:log:_:_:)( v42,  &_mh_execute_header,  v41,  "Clipping start of keyRequest interval to shareDate %@",  53LL,  2LL,  v21);
    swift_bridgeObjectRelease();
    uint64_t v13 = v43;
  }

  sub_10001581C(a2 + *(int *)(v17 + 32), (uint64_t)v8, (uint64_t *)&unk_10099D720);
  uint64_t v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v13, v8, v9);
  DateInterval.end.getter(v27);
  char v28 = static Date.< infix(_:_:)(v13, v15);
  uint64_t v29 = v44;
  v44(v15, v9);
  if ((v28 & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v15, v13, v9);
    uint64_t v30 = DateInterval.end.setter(v15);
    uint64_t v31 = static os_log_type_t.default.getter(v30);
    uint64_t v32 = v13;
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v33 = qword_100A2B010;
    uint64_t v34 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v35 = swift_allocObject(v34, 72LL, 7LL);
    *(_OWORD *)(v35 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    DateInterval.end.getter(v35);
    uint64_t v36 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter(v9, v36);
    uint64_t v39 = v38;
    v29(v15, v9);
    *(void *)(v35 + 56) = &type metadata for String;
    *(void *)(v35 + 64) = sub_1000226F4();
    *(void *)(v35 + 32) = v37;
    *(void *)(v35 + 4sub_100032838(0, 7LL, 0) = v39;
    os_log(_:dso:log:_:_:)( v31,  &_mh_execute_header,  v33,  "Clipping end of keyRequest interval to expiration %@",  52LL,  2LL,  v35);
    swift_bridgeObjectRelease();
    uint64_t v40 = v32;
  }

  else
  {
    uint64_t v40 = v13;
  }

  return ((uint64_t (*)(char *, uint64_t))v29)(v40, v9);
}

uint64_t sub_1001F7298(uint64_t a1, uint64_t a2)
{
  uint64_t v122 = a2;
  uint64_t v111 = type metadata accessor for DateInterval(0LL);
  uint64_t v108 = *(void *)(v111 - 8);
  uint64_t v3 = __chkstk_darwin(v111);
  uint64_t v107 = (char *)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v110 = (uint64_t)&v101 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v114 = (char *)&v101 - v8;
  __chkstk_darwin(v7);
  uint64_t v115 = (char *)&v101 - v9;
  uint64_t v10 = type metadata accessor for Calendar.Component(0LL);
  uint64_t v119 = *(char **)(v10 - 8);
  uint64_t v120 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v125 = (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for Calendar(0LL);
  uint64_t v118 = *((void *)v125 - 1);
  __chkstk_darwin(v125);
  uint64_t v14 = (char *)&v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v116 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v101 - v18;
  uint64_t v124 = type metadata accessor for Date(0LL);
  BOOL v126 = *(void **)(v124 - 8);
  uint64_t v20 = __chkstk_darwin(v124);
  uint64_t v105 = (char *)&v101 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __chkstk_darwin(v20);
  unint64_t v112 = (char *)&v101 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v117 = (char *)&v101 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v121 = (char *)&v101 - v27;
  __chkstk_darwin(v26);
  uint64_t v29 = (char *)&v101 - v28;
  uint64_t v30 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v33 = (char *)&v101 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  LODWORD(v123) = static os_log_type_t.default.getter(v31);
  if (qword_10099B700 != -1) {
    swift_once(&qword_10099B700, sub_100651100);
  }
  uint64_t v34 = qword_100A2B010;
  uint64_t v113 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v35 = swift_allocObject(v113, 112LL, 7LL);
  *(_OWORD *)(v35 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v109 = a1;
  sub_10001DC4C(a1, (uint64_t)v33, type metadata accessor for OwnedBeaconRecord);
  uint64_t v104 = v30;
  uint64_t v36 = String.init<A>(describing:)(v33, v30);
  uint64_t v38 = v37;
  *(void *)(v35 + 56) = &type metadata for String;
  unint64_t v39 = sub_1000226F4();
  *(void *)(v35 + 64) = v39;
  *(void *)(v35 + 32) = v36;
  *(void *)(v35 + 4sub_100032838(0, 7LL, 0) = v38;
  uint64_t v40 = (unsigned __int8 *)(v122 + *(int *)(type metadata accessor for ShareRecord(0LL) + 36));
  uint64_t v42 = *((void *)v40 + 1);
  uint64_t v41 = *((void *)v40 + 2);
  uint64_t v103 = v40;
  *(void *)(v35 + 96) = &type metadata for String;
  *(void *)(v35 + 104) = v39;
  unint64_t v106 = v39;
  *(void *)(v35 + 72) = v42;
  *(void *)(v35 + 8sub_100032838(0, 7LL, 0) = v41;
  *(void *)&double v43 = swift_bridgeObjectRetain(v41).n128_u64[0];
  os_log(_:dso:log:_:_:)( v123,  &_mh_execute_header,  v34,  "Redistribute keys for %@ to %@",  30LL,  2LL,  v35,  v43);
  swift_bridgeObjectRelease();
  uint64_t v44 = static Date.trustedNow.getter((uint64_t)v29);
  static Calendar.current.getter(v44);
  uint64_t v45 = v119;
  uint64_t v46 = v120;
  uint64_t v47 = (void (*)(char *, void, uint64_t))*((void *)v119 + 13);
  v47(v12, enum case for Calendar.Component.day(_:), v120);
  unint64_t v123 = v29;
  Calendar.date(byAdding:value:to:wrappingComponents:)(v12, -7LL, v29, 0LL);
  uint64_t v48 = (void (*)(char *, uint64_t))*((void *)v45 + 1);
  v48(v12, v46);
  uint64_t v49 = *(void (**)(char *, uint64_t (*)(uint64_t, uint64_t)))(v118 + 8);
  v49(v14, v125);
  char v50 = v126;
  uint64_t v51 = (unsigned int (*)(char *, uint64_t, uint64_t))v126[6];
  uint64_t v52 = v124;
  if (v51(v19, 1LL, v124) == 1)
  {
    uint64_t v53 = sub_100015794((uint64_t)v19, (uint64_t *)&unk_10099D720);
    uint64_t v54 = static os_log_type_t.error.getter(v53);
    os_log(_:dso:log:_:_:)( v54,  &_mh_execute_header,  qword_100A2B010,  "Could not calculate 7 days ago!",  31LL,  2LL,  _swiftEmptyArrayStorage);
    return ((uint64_t (*)(char *, uint64_t))v50[1])(v123, v52);
  }

  uint64_t v118 = v50[4];
  uint64_t v119 = v14;
  ((void (*)(char *, char *, uint64_t))v118)(v121, v19, v52);
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v102 = 0LL;
  uint64_t v56 = v127;
  uint64_t v57 = sub_1006A0D08(v127);
  uint64_t v58 = v119;
  static Calendar.current.getter(v57);
  uint64_t v59 = v12;
  v47(v12, enum case for Calendar.Component.minute(_:), v46);
  uint64_t v60 = (uint64_t)v116;
  uint64_t v61 = v123;
  Calendar.date(byAdding:value:to:wrappingComponents:)(v59, v57, v123, 0LL);
  v48(v59, v46);
  v49(v58, v125);
  uint64_t v62 = v124;
  if (v51((char *)v60, 1LL, v124) == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v63 = sub_100015794(v60, (uint64_t *)&unk_10099D720);
    uint64_t v64 = static os_log_type_t.error.getter(v63);
    os_log(_:dso:log:_:_:)( v64,  &_mh_execute_header,  qword_100A2B010,  "Could not calculate maxLimit!",  29LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v65 = (void (*)(char *, uint64_t))v126[1];
    v65(v121, v62);
    return ((uint64_t (*)(char *, uint64_t))v65)(v123, v62);
  }

  ((void (*)(char *, uint64_t, uint64_t))v118)(v117, v60, v62);
  uint64_t v66 = sub_1006A0D44(v56);
  unint64_t v67 = (uint64_t (*)(char *, char *, uint64_t))v126[2];
  uint64_t v68 = v112;
  uint64_t result = v67(v112, v61, v62);
  if ((unsigned __int128)(v66 * (__int128)60LL) >> 64 != (60 * v66) >> 63)
  {
    __break(1u);
    goto LABEL_15;
  }

  DateInterval.init(start:duration:)(v68, (double)(60 * v66));
  uint64_t v69 = sub_1006A0D58(v56);
  swift_bridgeObjectRelease();
  uint64_t result = v67(v68, v61, v62);
  if ((unsigned __int128)(v69 * (__int128)60LL) >> 64 != (60 * v69) >> 63)
  {
LABEL_15:
    __break(1u);
    return result;
  }

  uint64_t v70 = v62;
  DateInterval.init(start:duration:)(v68, (double)(60 * v69));
  v67(v68, v121, v62);
  uint64_t v71 = v105;
  v67(v105, v117, v70);
  uint64_t v72 = (uint64_t)v107;
  DateInterval.init(start:end:)(v68, v71);
  uint64_t v73 = v110;
  sub_1001F6E7C(v72, v122, v110);
  uint64_t v74 = v111;
  uint64_t v125 = *(uint64_t (**)(uint64_t, uint64_t))(v108 + 8);
  uint64_t v75 = v125(v72, v111);
  LODWORD(v12sub_100032838(0, 7LL, 0) = static os_log_type_t.default.getter(v75);
  uint64_t v122 = qword_100A2B010;
  uint64_t v76 = swift_allocObject(v113, 152LL, 7LL);
  *(_OWORD *)(v76 + swift_weakDestroy(v0 + 16) = xmmword_1007E4050;
  uint64_t v77 = v109;
  uint64_t v78 = UUID.uuidString.getter(v76);
  unint64_t v79 = v106;
  *(void *)(v76 + 56) = &type metadata for String;
  *(void *)(v76 + 64) = v79;
  *(void *)(v76 + 32) = v78;
  *(void *)(v76 + 4sub_100032838(0, 7LL, 0) = v80;
  uint64_t v81 = sub_100007864( &qword_1009A0DE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval,  (uint64_t)&protocol conformance descriptor for DateInterval);
  uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter(v74, v81);
  *(void *)(v76 + 96) = &type metadata for String;
  *(void *)(v76 + 104) = v79;
  *(void *)(v76 + 72) = v82;
  *(void *)(v76 + 8sub_100032838(0, 7LL, 0) = v83;
  unint64_t v84 = v103;
  uint64_t v85 = *((void *)v103 + 1);
  uint64_t v86 = *((void *)v103 + 2);
  *(void *)(v76 + 136) = &type metadata for String;
  *(void *)(v76 + 144) = v79;
  *(void *)(v76 + 112) = v85;
  *(void *)(v76 + 12sub_100032838(0, 7LL, 0) = v86;
  *(void *)&double v87 = swift_bridgeObjectRetain(v86).n128_u64[0];
  os_log(_:dso:log:_:_:)( v120,  &_mh_execute_header,  v122,  "Redistibute for %@: %@ to %@",  28LL,  2LL,  v76,  v87);
  uint64_t v88 = (uint64_t)v115;
  swift_bridgeObjectRelease();
  int v89 = *v84;
  uint64_t v90 = v102;
  uint64_t v92 = sub_1001F6264(v77, v73, v88, v91, v89, v85, v86);
  if (v90)
  {
    uint64_t v93 = static os_log_type_t.error.getter(v92);
    uint64_t v94 = qword_100A2B010;
    uint64_t v95 = swift_allocObject(v113, 72LL, 7LL);
    *(_OWORD *)(v95 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v127 = v90;
    swift_errorRetain(v90);
    uint64_t v96 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v97 = String.init<A>(describing:)(&v127, v96);
    *(void *)(v95 + 56) = &type metadata for String;
    *(void *)(v95 + 64) = v79;
    *(void *)(v95 + 32) = v97;
    *(void *)(v95 + 4sub_100032838(0, 7LL, 0) = v98;
    os_log(_:dso:log:_:_:)(v93, &_mh_execute_header, v94, "Error from sendKeys: %@", 23LL, 2LL, v95);
    swift_bridgeObjectRelease();
    swift_errorRelease(v90);
  }

  unint64_t v99 = (void (*)(char *, uint64_t))v125;
  v125(v73, v74);
  v99(v114, v74);
  v99((char *)v88, v74);
  uint64_t v100 = (void (*)(char *, uint64_t))v126[1];
  v100(v117, v70);
  v100(v121, v70);
  return ((uint64_t (*)(char *, uint64_t))v100)(v123, v70);
}

uint64_t sub_1001F7BD4( uint64_t a1, int a2, uint64_t a3, int a4, char *a5, void (*a6)(void, void, void))
{
  uint64_t v7 = v6;
  uint64_t v85 = a6;
  unint64_t v84 = a5;
  int v83 = a4;
  int v82 = a2;
  uint64_t v10 = type metadata accessor for CodingUserInfoKey(0LL);
  uint64_t v91 = *(void *)(v10 - 8);
  uint64_t v92 = v10;
  __chkstk_darwin(v10);
  uint64_t v90 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for LegacySelfBeaconingKeyEnvelope(0LL);
  uint64_t v88 = *(void *)(v12 - 8);
  uint64_t v89 = v12;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v87 = (uint64_t)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v73 - v15;
  uint64_t v17 = type metadata accessor for Date(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  dispatch_group_t v21 = dispatch_group_create();
  uint64_t v22 = type metadata accessor for CryptoKeys(0LL);
  uint64_t v95 = Array.chunked(into:)(96LL, a1, v22);
  uint64_t v23 = swift_allocObject(&unk_100948F18, 24LL, 7LL);
  uint64_t v93 = (void (*)(char *, uint64_t, uint64_t))v23;
  *(void *)(v23 + swift_weakDestroy(v0 + 16) = 0LL;
  uint64_t v24 = v23 + 16;
  uint64_t v25 = *(void *)(a1 + 16);
  uint64_t v74 = (uint64_t *)v24;
  if (v25)
  {
    uint64_t v26 = DateInterval.end.getter(v24);
    uint64_t v27 = Date.timeIntervalSinceNow.getter(v26);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    uint64_t v80 = v27;
  }

  else
  {
    uint64_t v80 = 0x4105180000000000LL;
  }

  uint64_t v81 = *(void *)(v95 + 16);
  uint64_t v94 = v21;
  if (v81)
  {
    uint64_t v28 = a3 + *(int *)(type metadata accessor for OwnedBeaconRecord(0LL) + 20);
    uint64_t v29 = 0LL;
    uint64_t v79 = type metadata accessor for UUID(0LL);
    uint64_t v78 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v79 - 8) + 16LL);
    __int128 v77 = xmmword_1007E67D0;
    __int128 v75 = xmmword_1007E4050;
    uint64_t v76 = v16;
    uint64_t v97 = v28;
    while (1)
    {
      uint64_t v98 = v29;
      uint64_t v30 = *(void *)(v95 + 8 * v29 + 32);
      v78(v16, v28, v79);
      *(void *)&v16[*(int *)(v89 + 20)] = v30;
      uint64_t v31 = v87;
      sub_10001DC4C((uint64_t)v16, v87, type metadata accessor for LegacySelfBeaconingKeyEnvelope);
      uint64_t v32 = type metadata accessor for PropertyListEncoder(0LL);
      swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
      uint64_t v33 = swift_bridgeObjectRetain_n(v30, 2LL);
      PropertyListEncoder.init()(v33);
      if (qword_10099BA20 != -1) {
        swift_once(&qword_10099BA20, sub_100792B54);
      }
      uint64_t v34 = v92;
      uint64_t v35 = sub_10000A720(v92, (uint64_t)static CodingUserInfoKey.messagingCoder);
      uint64_t v36 = (uint64_t)v90;
      (*(void (**)(char *, uint64_t, uint64_t))(v91 + 16))(v90, v35, v34);
      v100[3] = &type metadata for Bool;
      LOBYTE(v100[0]) = 1;
      uint64_t v37 = (void (*)(_BYTE *, void))dispatch thunk of PropertyListEncoder.userInfo.modify(v99);
      sub_100044E08((uint64_t)v100, v36);
      v37(v99, 0LL);
      uint64_t v38 = sub_100004AEC(&qword_1009A6020);
      uint64_t v39 = *(unsigned __int8 *)(v88 + 80);
      uint64_t v40 = (v39 + 32) & ~v39;
      uint64_t v41 = swift_allocObject(v38, v40 + *(void *)(v88 + 72), v39 | 7);
      *(_OWORD *)(v41 + swift_weakDestroy(v0 + 16) = v77;
      sub_10001DC4C(v31, v41 + v40, type metadata accessor for LegacySelfBeaconingKeyEnvelope);
      v100[0] = v41;
      uint64_t v42 = sub_100004AEC(&qword_1009A6028);
      unint64_t v43 = sub_10020B304();
      uint64_t v44 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v100, v42, v43);
      unint64_t v46 = v45;
      swift_release();
      sub_100018C68(v31, type metadata accessor for LegacySelfBeaconingKeyEnvelope);
      if (v7) {
        break;
      }
      uint64_t v96 = 0LL;
      swift_bridgeObjectRelease();
      uint64_t v47 = sub_10001736C(v44, v46);
      uint64_t v48 = static os_log_type_t.default.getter(v47);
      if (qword_10099B700 != -1) {
        swift_once(&qword_10099B700, sub_100651100);
      }
      ++v98;
      uint64_t v49 = qword_100A2B010;
      uint64_t v50 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v51 = swift_allocObject(v50, 152LL, 7LL);
      *(_OWORD *)(v51 + swift_weakDestroy(v0 + 16) = v75;
      uint64_t v52 = *(void *)(v30 + 16);
      uint64_t v53 = swift_bridgeObjectRelease();
      *(void *)(v51 + 56) = &type metadata for Int;
      *(void *)(v51 + 64) = &protocol witness table for Int;
      *(void *)(v51 + 32) = v52;
      uint64_t v54 = UUID.uuidString.getter(v53);
      uint64_t v56 = v55;
      *(void *)(v51 + 96) = &type metadata for String;
      unint64_t v57 = sub_1000226F4();
      *(void *)(v51 + 72) = v54;
      *(void *)(v51 + 8sub_100032838(0, 7LL, 0) = v56;
      *(void *)(v51 + 136) = &type metadata for String;
      *(void *)(v51 + 144) = v57;
      uint64_t v58 = v84;
      *(void *)(v51 + 104) = v57;
      *(void *)(v51 + 112) = v58;
      uint64_t v59 = v85;
      *(void *)(v51 + 12sub_100032838(0, 7LL, 0) = v85;
      *(void *)&double v60 = swift_bridgeObjectRetain(v59).n128_u64[0];
      os_log(_:dso:log:_:_:)( v48,  &_mh_execute_header,  v49,  "Distributing chunk of %ld keys for beacon: %@ to destination: %@",  64LL,  2LL,  v51,  v60);
      swift_bridgeObjectRelease();
      uint64_t v61 = v94;
      dispatch_group_enter(v94);
      uint64_t v62 = (void (*)(uint64_t, uint64_t))sub_10076832C((uint64_t)&off_100933A80);
      uint64_t v63 = v61;
      uint64_t v64 = v93;
      swift_retain();
      uint64_t v65 = (os_log_s *)sub_1004131A4((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v66 = (void *)sub_1006F13B0((uint64_t)&off_100933AA8);
      sub_1002003B8( v82,  (char *)1,  v44,  v46,  v65,  v83,  v58,  v59,  0,  (char *)v80,  0,  0,  v66,  v62,  0LL,  0LL,  v86,  v63,  v64);
      sub_100016F9C(v44, v46);
      swift_bridgeObjectRelease();
      swift_release();

      uint64_t v28 = v97;
      uint64_t v29 = v98;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100016F9C(v44, v46);
      uint64_t v16 = v76;
      sub_100018C68((uint64_t)v76, type metadata accessor for LegacySelfBeaconingKeyEnvelope);
      uint64_t v7 = v96;
      if (v81 == v29) {
        goto LABEL_12;
      }
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v72 = swift_bridgeObjectRelease();
    swift_willThrow(v72);

    sub_100018C68((uint64_t)v16, type metadata accessor for LegacySelfBeaconingKeyEnvelope);
  }

  else
  {
LABEL_12:
    swift_bridgeObjectRelease();
    unint64_t v67 = v94;
    OS_dispatch_group.wait()();
    uint64_t v68 = v74;
    swift_beginAccess(v74, v100, 0LL, 0LL);
    uint64_t v69 = *v68;
    if (v69)
    {
      uint64_t v70 = swift_errorRetain(v69);
      swift_willThrow(v70);

      return swift_release();
    }
  }

  return swift_release();
}

uint64_t sub_1001F82E8( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, void (*a6)(void, void, void))
{
  uint64_t v140 = a6;
  uint64_t v139 = a5;
  int v138 = a4;
  uint64_t v153 = a3;
  uint64_t v144 = a2;
  uint64_t v166 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v135 = *(void *)(v166 - 8);
  __chkstk_darwin(v166);
  uint64_t v136 = v6;
  uint64_t v137 = (uint64_t)&v133 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v161 = type metadata accessor for FamilyCryptoKeysV1(0LL);
  uint64_t v156 = *(void *)(v161 - 8);
  uint64_t v7 = __chkstk_darwin(v161);
  uint64_t v9 = (char **)((char *)&v133 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v7);
  uint64_t v160 = (uint64_t)&v133 - v10;
  uint64_t v141 = type metadata accessor for SelfBeaconingKeyEnvelope(0LL);
  uint64_t v11 = __chkstk_darwin(v141);
  uint64_t v142 = (char *)&v133 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v143 = (char *)&v133 - v13;
  uint64_t v14 = type metadata accessor for TimeBasedKey(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char **)((char *)&v133 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v159 = (char **)((char *)&v133 - v20);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v163 = (char **)((char *)&v133 - v22);
  __chkstk_darwin(v21);
  uint64_t v165 = (char *)&v133 - v23;
  uint64_t v164 = type metadata accessor for FamilyCryptoKeysV2(0LL);
  uint64_t v24 = *(void *)(v164 - 8);
  uint64_t v25 = __chkstk_darwin(v164);
  uint64_t v157 = (uint64_t)&v133 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v162 = (char **)((char *)&v133 - v28);
  __chkstk_darwin(v27);
  uint64_t v133 = (char *)&v133 - v29;
  uint64_t v30 = type metadata accessor for UUID(0LL);
  uint64_t v154 = *(void *)(v30 - 8);
  uint64_t v155 = v30;
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v150 = (char *)&v133 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v31);
  int v151 = (char *)&v133 - v33;
  uint64_t MyAccessoryFamilyKeyEnvelope = type metadata accessor for FindMyAccessoryFamilyKeyEnvelope(0LL);
  uint64_t v34 = __chkstk_darwin(MyAccessoryFamilyKeyEnvelope);
  uint64_t v146 = (uint64_t)&v133 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v34);
  uint64_t v147 = (char *)&v133 - v36;
  uint64_t v37 = type metadata accessor for Date(0LL);
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v41 = (char *)&v133 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v43 = *(void *)(v42 + 16);
  uint64_t v149 = v15;
  uint64_t v148 = v42;
  if (v43)
  {
    int64_t v44 = v43;
    uint64_t v45 = v39;
    uint64_t v46 = DateInterval.end.getter(v39);
    uint64_t v47 = Date.timeIntervalSinceNow.getter(v46);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v41, v45);
    uint64_t v134 = v47;
  }

  else
  {
    int64_t v44 = 0LL;
    uint64_t v134 = 0x4105180000000000LL;
  }

  uint64_t v48 = v166;
  uint64_t v49 = v153;
  char v50 = sub_1006DDC00();
  uint64_t v51 = v49 + *(int *)(v48 + 20);
  uint64_t v52 = *(void (**)(char *, uint64_t, uint64_t))(v154 + 16);
  uint64_t v166 = v14;
  if ((v50 & 1) != 0)
  {
    uint64_t v53 = v14;
    v52(v151, v51, v155);
    uint64_t v54 = _swiftEmptyArrayStorage;
    uint64_t v158 = v24;
    if (v44)
    {
      v167[0] = _swiftEmptyArrayStorage;
      uint64_t v161 = v44;
      sub_100032F18(0, v44, 0);
      uint64_t v55 = v148 + ((*(unsigned __int8 *)(v149 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80));
      uint64_t v160 = *(void *)(v149 + 72);
      uint64_t v56 = (uint64_t)v133;
      unint64_t v57 = v165;
      do
      {
        sub_10001DC4C(v55, (uint64_t)v57, type metadata accessor for TimeBasedKey);
        uint64_t v58 = v163;
        sub_10001DC4C((uint64_t)v57, (uint64_t)v163, type metadata accessor for TimeBasedKey);
        uint64_t v59 = (uint64_t)v162;
        void *v162 = *v58;
        uint64_t v60 = v53;
        uint64_t v61 = (char *)v58 + *(int *)(v53 + 20);
        uint64_t v62 = v164;
        uint64_t v63 = v59 + *(int *)(v164 + 20);
        uint64_t v64 = type metadata accessor for DateInterval(0LL);
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v64 - 8) + 16LL))(v63, v61, v64);
        uint64_t v65 = (char *)v58 + *(int *)(v60 + 24);
        uint64_t v66 = *((void *)v65 + 2);
        unint64_t v67 = *((void *)v65 + 3);
        sub_10001736C(v66, v67);
        sub_100018C68((uint64_t)v58, type metadata accessor for TimeBasedKey);
        uint64_t v68 = (uint64_t *)(v59 + *(int *)(v62 + 24));
        uint64_t *v68 = v66;
        v68[1] = v67;
        sub_10002218C(v59, v56, type metadata accessor for FamilyCryptoKeysV2);
        sub_100018C68((uint64_t)v57, type metadata accessor for TimeBasedKey);
        uint64_t v54 = (void *)v167[0];
        if ((swift_isUniquelyReferenced_nonNull_native(v167[0]) & 1) == 0)
        {
          sub_100032F18(0, v54[2] + 1LL, 1);
          uint64_t v54 = (void *)v167[0];
        }

        unint64_t v70 = v54[2];
        unint64_t v69 = v54[3];
        uint64_t v71 = v158;
        if (v70 >= v69 >> 1)
        {
          sub_100032F18(v69 > 1, v70 + 1, 1);
          uint64_t v54 = (void *)v167[0];
        }

        v54[2] = v70 + 1;
        sub_10002218C( v56,  (uint64_t)v54 + ((*(unsigned __int8 *)(v71 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))
        + *(void *)(v71 + 72) * v70,
          type metadata accessor for FamilyCryptoKeysV2);
        v55 += v160;
        --v161;
        uint64_t v53 = v166;
      }

      while (v161);
    }

    uint64_t v88 = v53;
    uint64_t v89 = v144;
    int64_t v90 = *(void *)(v144 + 16);
    uint64_t v91 = _swiftEmptyArrayStorage;
    if (v90)
    {
      uint64_t v159 = v54;
      v167[0] = _swiftEmptyArrayStorage;
      sub_100032F18(0, v90, 0);
      uint64_t v92 = v89 + ((*(unsigned __int8 *)(v149 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80));
      uint64_t v160 = *(void *)(v149 + 72);
      uint64_t v93 = v157;
      uint64_t v94 = v88;
      uint64_t v95 = v165;
      do
      {
        uint64_t v161 = v90;
        sub_10001DC4C(v92, (uint64_t)v95, type metadata accessor for TimeBasedKey);
        uint64_t v96 = v163;
        sub_10001DC4C((uint64_t)v95, (uint64_t)v163, type metadata accessor for TimeBasedKey);
        uint64_t v97 = (uint64_t)v162;
        void *v162 = *v96;
        uint64_t v98 = v94;
        unint64_t v99 = (char *)v96 + *(int *)(v94 + 20);
        uint64_t v100 = v164;
        uint64_t v101 = v97 + *(int *)(v164 + 20);
        uint64_t v102 = type metadata accessor for DateInterval(0LL);
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v102 - 8) + 16LL))(v101, v99, v102);
        uint64_t v103 = (char *)v96 + *(int *)(v98 + 24);
        uint64_t v104 = *((void *)v103 + 2);
        unint64_t v105 = *((void *)v103 + 3);
        sub_10001736C(v104, v105);
        sub_100018C68((uint64_t)v96, type metadata accessor for TimeBasedKey);
        unint64_t v106 = (uint64_t *)(v97 + *(int *)(v100 + 24));
        *unint64_t v106 = v104;
        v106[1] = v105;
        sub_10002218C(v97, v93, type metadata accessor for FamilyCryptoKeysV2);
        sub_100018C68((uint64_t)v95, type metadata accessor for TimeBasedKey);
        uint64_t v91 = (void *)v167[0];
        if ((swift_isUniquelyReferenced_nonNull_native(v167[0]) & 1) == 0)
        {
          sub_100032F18(0, v91[2] + 1LL, 1);
          uint64_t v91 = (void *)v167[0];
        }

        unint64_t v108 = v91[2];
        unint64_t v107 = v91[3];
        uint64_t v109 = v158;
        uint64_t v110 = v161;
        if (v108 >= v107 >> 1)
        {
          sub_100032F18(v107 > 1, v108 + 1, 1);
          uint64_t v91 = (void *)v167[0];
        }

        v91[2] = v108 + 1;
        uint64_t v93 = v157;
        sub_10002218C( v157,  (uint64_t)v91 + ((*(unsigned __int8 *)(v109 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80))
        + *(void *)(v109 + 72) * v108,
          type metadata accessor for FamilyCryptoKeysV2);
        v92 += v160;
        int64_t v90 = v110 - 1;
        uint64_t v94 = v166;
      }

      while (v90);
      uint64_t v54 = v159;
    }

    uint64_t v111 = (uint64_t)v147;
    (*(void (**)(char *, char *, uint64_t))(v154 + 32))(v147, v151, v155);
    uint64_t v113 = MyAccessoryFamilyKeyEnvelope;
    *(void *)(v111 + *(int *)(MyAccessoryFamilyKeyEnvelope + 20)) = v54;
    *(void *)(v111 + *(int *)(v113 + swift_release(*(void *)(v0 + 24)) = v91;
    uint64_t v114 = type metadata accessor for FindMyAccessoryFamilyKeyEnvelope;
    uint64_t v112 = v146;
    sub_10001DC4C(v111, v146, type metadata accessor for FindMyAccessoryFamilyKeyEnvelope);
    uint64_t v115 = (uint64_t *)&unk_1009A6050;
    uint64_t v116 = &qword_1009A6058;
    uint64_t v117 = sub_10020B79C;
    uint64_t v118 = 3LL;
  }

  else
  {
    v52(v150, v51, v155);
    uint64_t v72 = _swiftEmptyArrayStorage;
    if (v44)
    {
      v167[0] = _swiftEmptyArrayStorage;
      sub_100032E78(0, v44, 0);
      uint64_t v73 = v148 + ((*(unsigned __int8 *)(v149 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80));
      uint64_t v74 = *(char **)(v149 + 72);
      uint64_t v164 = (uint64_t)(v9 + 1);
      uint64_t v165 = v74;
      do
      {
        uint64_t v75 = (uint64_t)v159;
        sub_10001DC4C(v73, (uint64_t)v159, type metadata accessor for TimeBasedKey);
        sub_10001DC4C(v75, (uint64_t)v18, type metadata accessor for TimeBasedKey);
        *uint64_t v9 = *v18;
        uint64_t v76 = v166;
        __int128 v77 = (char *)v18 + *(int *)(v166 + 20);
        uint64_t v78 = (char *)v9 + *(int *)(v161 + 20);
        uint64_t v79 = type metadata accessor for DateInterval(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v79 - 8) + 16LL))(v78, v77, v79);
        uint64_t v80 = (void *)((char *)v18 + *(int *)(v76 + 24));
        unint64_t v81 = v80[5];
        if (v81 >> 60 == 15)
        {
          uint64_t v82 = v80[2];
          unint64_t v83 = v80[3];
          sub_10001736C(v82, v83);
          sub_100018C68((uint64_t)v18, type metadata accessor for TimeBasedKey);
        }

        else
        {
          uint64_t v82 = v80[4];
          sub_10001736C(v82, v80[5]);
          sub_100018C68((uint64_t)v18, type metadata accessor for TimeBasedKey);
          unint64_t v83 = v81 | 0x2000000000000000LL;
        }

        uint64_t v84 = v160;
        uint64_t v85 = *(int *)(v161 + 24);
        *(void *)((char *)v9 + v85) = v82;
        *(void *)(v164 + v85) = v83;
        sub_10002218C((uint64_t)v9, v84, type metadata accessor for FamilyCryptoKeysV1);
        sub_100018C68((uint64_t)v159, type metadata accessor for TimeBasedKey);
        uint64_t v72 = (void *)v167[0];
        if ((swift_isUniquelyReferenced_nonNull_native(v167[0]) & 1) == 0)
        {
          sub_100032E78(0, v72[2] + 1LL, 1);
          uint64_t v72 = (void *)v167[0];
        }

        unint64_t v87 = v72[2];
        unint64_t v86 = v72[3];
        if (v87 >= v86 >> 1)
        {
          sub_100032E78(v86 > 1, v87 + 1, 1);
          uint64_t v72 = (void *)v167[0];
        }

        v72[2] = v87 + 1;
        sub_10002218C( v160,  (uint64_t)v72 + ((*(unsigned __int8 *)(v156 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v156 + 80))
        + *(void *)(v156 + 72) * v87,
          type metadata accessor for FamilyCryptoKeysV1);
        v73 += (uint64_t)v165;
        --v44;
      }

      while (v44);
      uint64_t v111 = (uint64_t)v143;
      uint64_t v112 = (uint64_t)v142;
    }

    else
    {
      uint64_t v112 = (uint64_t)v142;
      uint64_t v111 = (uint64_t)v143;
    }

    (*(void (**)(uint64_t, char *, uint64_t))(v154 + 32))(v111, v150, v155);
    *(void *)(v111 + *(int *)(v141 + 20)) = v72;
    uint64_t v114 = type metadata accessor for SelfBeaconingKeyEnvelope;
    sub_10001DC4C(v111, v112, type metadata accessor for SelfBeaconingKeyEnvelope);
    uint64_t v115 = (uint64_t *)&unk_1009A6070;
    uint64_t v116 = &qword_1009A6078;
    uint64_t v117 = sub_10020B818;
    uint64_t v118 = 2LL;
  }

  uint64_t v119 = v152;
  sub_1001F31E4(5, v118, v112, v115, v114, v116, (uint64_t (*)(void))v117, (uint64_t)v167);
  uint64_t result = sub_100018C68(v111, v114);
  if (!v119)
  {
    LODWORD(v166) = LOBYTE(v167[0]);
    uint64_t v121 = v167[2];
    uint64_t v165 = (char *)v167[1];
    unint64_t v122 = v167[3];
    unint64_t v123 = (void *)sub_10076832C((uint64_t)&off_100933A58);
    uint64_t v124 = v137;
    sub_10001DC4C(v153, v137, type metadata accessor for OwnedBeaconRecord);
    uint64_t v125 = *(unsigned __int8 *)(v135 + 80);
    uint64_t v126 = (v125 + 16) & ~v125;
    unint64_t v127 = (v136 + v126 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    double v128 = (void (*)(void ***))swift_allocObject(&unk_100949120, v127 + 24, v125 | 7);
    sub_10002218C(v124, (uint64_t)v128 + v126, type metadata accessor for OwnedBeaconRecord);
    uint64_t v129 = (char *)v128 + v127;
    LODWORD(v124) = v138;
    *uint64_t v129 = v138;
    uint64_t v130 = v139;
    uint64_t v131 = v140;
    *((void *)v129 + 1) = v139;
    *((void *)v129 + 2) = v131;
    swift_bridgeObjectRetain(v131);
    uint64_t v132 = (os_log_s *)sub_1004131A4((uint64_t)_swiftEmptyArrayStorage);
    sub_1001E74B8( v166,  v165,  v121,  v122,  v132,  v124,  v130,  v131,  1,  (char *)v134,  0,  0,  v123,  (void (*)(uint64_t, uint64_t))&_swiftEmptySetSingleton,  0LL,  0LL,  (void (*)(void ***))sub_10020B744,  v128);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return sub_100016F9C(v121, v122);
  }

  return result;
}

uint64_t sub_1001F8F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v37[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = sub_100004AEC(&qword_1009A24D8);
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)&v37[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_10001581C(a1, (uint64_t)v14, &qword_1009A24D8);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v14, v12);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v16 = *v14;
    uint64_t v17 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v18 = qword_100A2B010;
    uint64_t v19 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v20 = swift_allocObject(v19, 112LL, 7LL);
    *(_OWORD *)(v20 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    *(void *)(v20 + 56) = &type metadata for String;
    unint64_t v21 = sub_1000226F4();
    *(void *)(v20 + 64) = v21;
    *(void *)(v20 + 32) = a4;
    *(void *)(v20 + 4sub_100032838(0, 7LL, 0) = a5;
    uint64_t v39 = v16;
    swift_bridgeObjectRetain(a5);
    swift_errorRetain(v16);
    uint64_t v22 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v23 = String.init<A>(describing:)(&v39, v22);
    *(void *)(v20 + 96) = &type metadata for String;
    *(void *)(v20 + 104) = v21;
    *(void *)(v20 + 72) = v23;
    *(void *)(v20 + 8sub_100032838(0, 7LL, 0) = v24;
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "Failed to distribute keys: %@, error: %@", 40LL, 2LL, v20);
    swift_bridgeObjectRelease();
    return swift_errorRelease(v16);
  }

  else
  {
    uint64_t v26 = (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t))(v9 + 32))(v11, v14, v8);
    unsigned int v38 = static os_log_type_t.default.getter(v26);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v27 = qword_100A2B010;
    uint64_t v28 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v29 = swift_allocObject(v28, 112LL, 7LL);
    *(_OWORD *)(v29 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    uint64_t v30 = UUID.uuidString.getter(v29);
    uint64_t v32 = v31;
    *(void *)(v29 + 56) = &type metadata for String;
    unint64_t v33 = sub_1000226F4();
    *(void *)(v29 + 64) = v33;
    *(void *)(v29 + 32) = v30;
    *(void *)(v29 + 4sub_100032838(0, 7LL, 0) = v32;
    uint64_t v34 = type metadata accessor for OwnedBeaconRecord(0LL);
    uint64_t v35 = UUID.uuidString.getter(v34);
    *(void *)(v29 + 96) = &type metadata for String;
    *(void *)(v29 + 104) = v33;
    *(void *)(v29 + 72) = v35;
    *(void *)(v29 + 8sub_100032838(0, 7LL, 0) = v36;
    os_log(_:dso:log:_:_:)( v38,  &_mh_execute_header,  v27,  "Successfully distributed keys: %@ for beacon: %@",  48LL,  2LL,  v29);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  }

void sub_1001F9250(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v44 = a3;
  uint64_t v45 = a2;
  *(void *)&__int128 v49 = type metadata accessor for DateInterval(0LL);
  uint64_t v58 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  char v50 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for TimeBasedKey(0LL);
  uint64_t v10 = a1 + *(int *)(v9 + 20);
  DateInterval.end.getter(v9);
  char v11 = DateInterval.contains(_:)(v8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v12 = a1 + *(int *)(v9 + 24);
  uint64_t v14 = *(void *)v12;
  unint64_t v13 = *(void *)(v12 + 8);
  uint64_t v15 = *(void *)v12;
  unint64_t v16 = v13;
  if (v13 >> 60 == 15)
  {
    uint64_t v17 = type metadata accessor for __DataStorage(0LL);
    swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
    unint64_t v16 = __DataStorage.init(length:)(32LL) | 0x4000000000000000LL;
    uint64_t v15 = 0x2000000000LL;
  }

  uint64_t v47 = v15;
  if ((v11 & 1) != 0)
  {
    unint64_t v18 = *(void *)(v12 + 40);
    uint64_t v46 = *(void *)(v12 + 32);
    sub_100018BE4(v46, v18);
  }

  else
  {
    uint64_t v46 = 0LL;
    unint64_t v18 = 0xF000000000000000LL;
  }

  uint64_t v19 = v49;
  (*(void (**)(char *, uint64_t, void))(v58 + 16))(v50, v10, v49);
  uint64_t v20 = *(void *)(v12 + 16);
  uint64_t v21 = *(void *)(v12 + 40);
  uint64_t v53 = v14;
  unint64_t v54 = v13;
  uint64_t v55 = v20;
  __int128 v49 = *(_OWORD *)(v12 + 24);
  __int128 v56 = v49;
  uint64_t v57 = v21;
  sub_100018BE4(v14, v13);
  unint64_t v22 = v49;
  sub_10001736C(v20, v49);
  uint64_t v23 = sub_1004DA048();
  unint64_t v25 = v24;
  uint64_t v26 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  uint64_t v27 = __DataStorage.init(length:)(32LL);
  uint64_t v51 = 0x2000000000LL;
  uint64_t v52 = v27;
  sub_1003124A0((int *)&v51, 0);
  int v28 = HIDWORD(v51) - v51;
  if (__OFSUB__(HIDWORD(v51), (_DWORD)v51))
  {
    __break(1u);
  }

  else
  {
    *(void *)&__int128 v49 = v23;
    if (v28 == 32)
    {
      unint64_t v29 = v51 | ((unint64_t)HIDWORD(v51) << 32);
      unint64_t v48 = v16;
      uint64_t v30 = v52 | 0x4000000000000000LL;
      uint64_t v31 = v44;
      (*(void (**)(uint64_t, char *, uint64_t))(v58 + 32))(v44, v50, v19);
      uint64_t v32 = (int *)type metadata accessor for CryptoKeys(0LL);
      unint64_t v33 = (void *)(v31 + v32[5]);
      *unint64_t v33 = v46;
      v33[1] = v18;
      uint64_t v34 = (uint64_t *)(v31 + v32[6]);
      uint64_t *v34 = v20;
      v34[1] = v22;
      uint64_t v35 = (void *)(v31 + v32[7]);
      *uint64_t v35 = v49;
      v35[1] = v25;
      uint64_t v36 = (unint64_t *)(v31 + v32[8]);
      *uint64_t v36 = v29;
      v36[1] = v30;
      uint64_t v37 = (void *)(v31 + v32[9]);
      unint64_t v38 = v48;
      *uint64_t v37 = v47;
      v37[1] = v38;
    }

    else
    {
      uint64_t v39 = v28;
      unint64_t v40 = sub_100117AD0();
      uint64_t v41 = swift_allocError(&type metadata for KeyRepresentableError, v40, 0LL, 0LL);
      *(void *)uint64_t v42 = 32LL;
      *(void *)(v42 + 8) = v39;
      *(_BYTE *)(v42 + swift_weakDestroy(v0 + 16) = 0;
      swift_willThrow(v41);
      swift_release();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v50, v19);
      sub_1000182F0(v46, v18);
      sub_100016F9C(v20, v22);
      sub_100016F9C(v47, v16);
      sub_100016F9C(v49, v25);
      uint64_t *v45 = v41;
    }
  }

void sub_1001F95A8(uint64_t a1, dispatch_group_s *a2, uint64_t a3, const char *a4, uint64_t a5)
{
  uint64_t v26 = a5;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v27[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = sub_100004AEC(&qword_1009A24D8);
  __chkstk_darwin(v13);
  uint64_t v15 = (uint64_t *)&v27[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_10001581C(a1, (uint64_t)v15, &qword_1009A24D8);
  if (swift_getEnumCaseMultiPayload(v15, v13) == 1)
  {
    uint64_t v16 = *v15;
    swift_beginAccess(a3 + 16, v27, 1LL, 0LL);
    uint64_t v17 = *(void *)(a3 + 16);
    *(void *)(a3 + swift_weakDestroy(v0 + 16) = v16;
    swift_errorRelease(v17);
  }

  else
  {
    uint64_t v18 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v10 + 32))(v12, v15, v9);
    uint64_t v19 = static os_log_type_t.default.getter(v18);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v20 = qword_100A2B010;
    uint64_t v21 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v22 = swift_allocObject(v21, 72LL, 7LL);
    *(_OWORD *)(v22 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v23 = UUID.uuidString.getter(v22);
    uint64_t v25 = v24;
    *(void *)(v22 + 56) = &type metadata for String;
    *(void *)(v22 + 64) = sub_1000226F4();
    *(void *)(v22 + 32) = v23;
    *(void *)(v22 + 4sub_100032838(0, 7LL, 0) = v25;
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, a4, v26, 2LL, v22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  dispatch_group_leave(a2);
}

void sub_1001F979C( uint64_t a1, uint64_t a2, uint64_t a3, int a4, char *a5, void *a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11)
{
  uint64_t v45 = a8;
  uint64_t v43 = a6;
  unint64_t v44 = a7;
  uint64_t v42 = a5;
  int v41 = a4;
  updated = (int *)type metadata accessor for SecureLocationsKeyUpdateEnvelope(0LL);
  uint64_t v15 = __chkstk_darwin(updated);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v37 - v18;
  dispatch_group_t v51 = dispatch_group_create();
  uint64_t v20 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16LL))(v19, a1, v20);
  uint64_t v21 = (uint64_t *)&v19[updated[5]];
  uint64_t v39 = a2;
  *uint64_t v21 = a2;
  v21[1] = a3;
  uint64_t v22 = v45;
  *(void *)&v19[updated[6]] = v44;
  uint64_t v23 = (uint64_t *)&v19[updated[7]];
  *uint64_t v23 = v22;
  v23[1] = a9;
  uint64_t v24 = (uint64_t *)&v19[updated[8]];
  *uint64_t v24 = a10;
  v24[1] = a11;
  sub_10001DC4C((uint64_t)v19, (uint64_t)v17, type metadata accessor for SecureLocationsKeyUpdateEnvelope);
  uint64_t v25 = a3;
  swift_bridgeObjectRetain(a3);
  sub_10001736C(v22, a9);
  sub_10001736C(a10, a11);
  uint64_t v26 = v46;
  sub_1001F31E4( 7,  1LL,  (uint64_t)v17,  &qword_1009A60A8,  type metadata accessor for SecureLocationsKeyUpdateEnvelope,  &qword_1009A60B0,  (uint64_t (*)(void))sub_10020CFC4,  (uint64_t)v47);
  if (v26)
  {
    sub_100018C68((uint64_t)v19, type metadata accessor for SecureLocationsKeyUpdateEnvelope);
  }

  else
  {
    uint64_t v46 = v48;
    uint64_t v38 = v49;
    unint64_t v44 = v50;
    LODWORD(v45) = v47[0];
    sub_10001736C(v49, v50);
    dispatch_group_t v27 = v51;
    dispatch_group_enter(v51);
    int v28 = (void *)sub_10076832C((uint64_t)&off_100933E00);
    uint64_t v29 = v25;
    uint64_t v37 = v25;
    swift_bridgeObjectRetain(v25);
    uint64_t v30 = v43;
    swift_bridgeObjectRetain(v43);
    uint64_t v31 = v27;
    uint64_t v32 = (os_log_s *)sub_1004131A4((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v33 = (void *)sub_1006F13B0((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v36 = v29;
    uint64_t v34 = v38;
    unint64_t v35 = v44;
    sub_100208978( v45,  v46,  v38,  v44,  v32,  v41,  (uint64_t)v42,  (uint64_t)v30,  0,  0LL,  1,  0,  v28,  v33,  0LL,  0LL,  v40,  v39,  v36,  v41,  v42,  v30,  (uint64_t)v31);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100016F9C(v34, v35);
    OS_dispatch_group.wait()();
    sub_100016F9C(v34, v35);

    sub_100018C68((uint64_t)v19, type metadata accessor for SecureLocationsKeyUpdateEnvelope);
  }

void sub_1001F9A9C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, dispatch_group_s *a7)
{
  uint64_t v42 = a3;
  dispatch_group_t v43 = a7;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_1009A24D8);
  __chkstk_darwin(v15);
  uint64_t v17 = (uint64_t *)((char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v17, &qword_1009A24D8);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v15);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v19 = *v17;
    uint64_t v20 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v21 = qword_100A2B010;
    uint64_t v22 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v23 = swift_allocObject(v22, 72LL, 7LL);
    *(_OWORD *)(v23 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    swift_getErrorValue(v19, v51, v50);
    uint64_t v24 = Error.localizedDescription.getter(v50[1], v50[2]);
    uint64_t v26 = v25;
    *(void *)(v23 + 56) = &type metadata for String;
    *(void *)(v23 + 64) = sub_1000226F4();
    *(void *)(v23 + 32) = v24;
    *(void *)(v23 + 4sub_100032838(0, 7LL, 0) = v26;
    os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Failed to send secureLocationsKeyUpdate: %@", 43LL, 2LL, v23);
    swift_bridgeObjectRelease();
    if (qword_10099B850 != -1) {
      swift_once(&qword_10099B850, sub_1006BAC84);
    }
    swift_getErrorValue(v19, v49, v48);
    uint64_t v27 = v48[1];
    uint64_t v28 = v48[2];
    swift_retain();
    uint64_t v29 = Error.localizedDescription.getter(v27, v28);
    sub_1006BDED0(4u, v29, v30);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v46 = 0LL;
    uint64_t v47 = 0xE000000000000000LL;
    swift_retain();
    _StringGuts.grow(_:)(23LL);
    swift_bridgeObjectRelease();
    uint64_t v46 = 0xD000000000000012LL;
    uint64_t v47 = 0x8000000100859800LL;
    swift_bridgeObjectRetain(a6);
    v31._countAndFlagsBits = a5;
    v31._object = a6;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits = 32LL;
    v32._object = (void *)0xE100000000000000LL;
    String.append(_:)(v32);
    swift_getErrorValue(v19, v45, v44);
    v33._countAndFlagsBits = Error.localizedDescription.getter(v44[1], v44[2]);
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    sub_1006BCFDC(a2, v42, v46, v47);
    swift_release();
    swift_bridgeObjectRelease();
    swift_errorRelease(v19);
  }

  else
  {
    uint64_t v34 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v12 + 32))(v14, v17, v11);
    uint64_t v35 = static os_log_type_t.default.getter(v34);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v36 = qword_100A2B010;
    uint64_t v37 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v38 = swift_allocObject(v37, 72LL, 7LL);
    *(_OWORD *)(v38 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v39 = UUID.uuidString.getter(v38);
    uint64_t v41 = v40;
    *(void *)(v38 + 56) = &type metadata for String;
    *(void *)(v38 + 64) = sub_1000226F4();
    *(void *)(v38 + 32) = v39;
    *(void *)(v38 + 4sub_100032838(0, 7LL, 0) = v41;
    os_log(_:dso:log:_:_:)( v35,  &_mh_execute_header,  v36,  "Successfully sent secureLocationsKeyUpdate: %@",  46LL,  2LL,  v38,  v42,  v43);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }

  dispatch_group_leave(v43);
}

void sub_1001F9E90(uint64_t a1)
{
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2AAA0);
  swift_bridgeObjectRetain_n(a1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v13 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_bridgeObjectRetain(a1);
    uint64_t v8 = sub_100004AEC(&qword_1009A24D8);
    uint64_t v9 = Array.description.getter(a1, v8);
    unint64_t v11 = v10;
    swift_bridgeObjectRelease();
    uint64_t v12 = sub_1003F11D4(v9, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Successfully forwarded separation state observation: %s",  v6,  0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a1, 2LL);
  }

void sub_1001FA060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = sub_100004AEC(&qword_1009A24D8);
  __chkstk_darwin(v9);
  unint64_t v11 = (uint64_t *)((char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v11, &qword_1009A24D8);
  if (swift_getEnumCaseMultiPayload(v11, v9) == 1)
  {
    uint64_t v12 = *v11;
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_10000A720(v13, (uint64_t)qword_100A2AAA0);
    swift_bridgeObjectRetain(a5);
    swift_errorRetain(v12);
    swift_bridgeObjectRetain(a5);
    uint64_t v14 = swift_errorRetain(v12);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.default.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc(22LL, -1LL);
      uint64_t v18 = swift_slowAlloc(64LL, -1LL);
      uint64_t v30 = v18;
      *(_DWORD *)uint64_t v17 = 136315394;
      swift_bridgeObjectRetain(a5);
      uint64_t v29 = sub_1003F11D4(a4, a5, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease_n(a5, 3LL);
      *(_WORD *)(v17 + 12) = 2080;
      uint64_t v29 = v12;
      swift_errorRetain(v12);
      uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v20 = String.init<A>(describing:)(&v29, v19);
      uint64_t v29 = sub_1003F11D4(v20, v21, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v17 + 14, v17 + 22);
      swift_bridgeObjectRelease();
      swift_errorRelease(v12);
      swift_errorRelease(v12);
      _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "Failed to send observations to %s due to error: %s",  (uint8_t *)v17,  0x16u);
      swift_arrayDestroy(v18, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1LL, -1LL);
      swift_slowDealloc(v17, -1LL, -1LL);

      swift_errorRelease(v12);
    }

    else
    {
      swift_errorRelease(v12);
      swift_bridgeObjectRelease_n(a5, 2LL);
      swift_errorRelease(v12);
      swift_errorRelease(v12);
    }
  }

  else
  {
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    sub_10000A720(v22, (uint64_t)qword_100A2AAA0);
    swift_bridgeObjectRetain_n(a2, 2LL);
    swift_bridgeObjectRetain_n(a5, 2LL);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc(22LL, -1LL);
      uint64_t v27 = swift_slowAlloc(32LL, -1LL);
      uint64_t v30 = v27;
      *(_DWORD *)uint64_t v26 = 134218242;
      uint64_t v28 = *(void *)(a2 + 16);
      swift_bridgeObjectRelease();
      uint64_t v29 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2080;
      swift_bridgeObjectRetain(a5);
      uint64_t v29 = sub_1003F11D4(a4, a5, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease_n(a5, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "Successfuly sent %ld observations to %s",  (uint8_t *)v26,  0x16u);
      swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a5, 2LL);
      swift_bridgeObjectRelease_n(a2, 2LL);
    }

    sub_100015794((uint64_t)v11, &qword_1009A24D8);
  }

void sub_1001FA4CC(char *a1)
{
}

void sub_1001FA4D8()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v2, 0LL);
  __asm { BR              X9 }

Swift::Int sub_1001FA520()
{
  return Hasher._finalize()();
}

void sub_1001FA590()
{
  __asm { BR              X10 }

uint64_t sub_1001FA5C8(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE400000000000000LL);
}

void sub_1001FA624(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }

Swift::Int sub_1001FA668()
{
  return Hasher._finalize()();
}

unint64_t sub_1001FA6D8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10020FC94(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001FA704()
{
  return ((uint64_t (*)(void))((char *)sub_1001FA730 + 4 * byte_1007F710F[*v0]))();
}

void sub_1001FA730(void *a1@<X8>)
{
  *a1 = 1684107369LL;
  a1[1] = 0xE400000000000000LL;
}

void sub_1001FA744(void *a1@<X8>)
{
  *a1 = 1685024873LL;
  a1[1] = 0xE400000000000000LL;
}

void sub_1001FA75C(void *a1@<X8>)
{
  *a1 = 0x6863746177LL;
  a1[1] = 0xE500000000000000LL;
}

void sub_1001FA774(void *a1@<X8>)
{
  *a1 = 6513005LL;
  a1[1] = 0xE300000000000000LL;
}

void sub_1001FA788(void *a1@<X8>)
{
  *a1 = &off_100933EC0;
}

Swift::Int sub_1001FA798(void *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for ShareRecord(0LL) - 8);
  uint64_t v3 = (void *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v3 = (void *)sub_1003D4A3C(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_1001FC76C(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_1001FA818()
{
  return sub_10020F99C((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1001FA828(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_100032838(0, 7LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001FA838(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

BOOL sub_1001FA840(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    uint64_t v4 = *(void *)(a1 + 64);
    id v5 = v2;
    uint64_t v6 = sub_1004E7878(a2);
    sub_10016B79C(v4, v6);

    swift_bridgeObjectRelease();
  }

  return v2 == 0LL;
}

uint64_t sub_1001FA8B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[16] = a2;
  v3[17] = a3;
  v3[15] = a1;
  uint64_t v4 = type metadata accessor for StateCaptureDateType(0LL);
  v3[18] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[19] = v5;
  v3[20] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for StateCaptureHintAPI(0LL);
  v3[21] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[22] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[23] = swift_task_alloc(v8);
  _BYTE v3[24] = swift_task_alloc(v8);
  return swift_task_switch(sub_1001FA980, 0LL, 0LL);
}

uint64_t sub_1001FA980()
{
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 176);
  StateCaptureHint.api.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v2, enum case for StateCaptureHintAPI.request(_:), v3);
  uint64_t v5 = sub_100007864( &qword_1009A61C8,  (uint64_t (*)(uint64_t))&type metadata accessor for StateCaptureHintAPI,  (uint64_t)&protocol conformance descriptor for StateCaptureHintAPI);
  dispatch thunk of RawRepresentable.rawValue.getter((void *)(v0 + 200), v3, v5);
  dispatch thunk of RawRepresentable.rawValue.getter((void *)(v0 + 204), v3, v5);
  int v7 = *(_DWORD *)(v0 + 200);
  int v6 = *(_DWORD *)(v0 + 204);
  unint64_t v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v8(v2, v3);
  v8(v1, v3);
  if (v7 == v6)
  {
    uint64_t v9 = *(os_unfair_lock_s **)(*(void *)(v0 + 136) + 120LL);
    uint64_t v10 = v9 + 4;
    unint64_t v11 = v9 + 16;
    os_unfair_lock_lock(v9 + 16);
    sub_100693CD4(v10, v36);
    os_unfair_lock_unlock(v11);
    __int128 v20 = v36[1];
    *(_OWORD *)(v0 + swift_weakDestroy(v0 + 16) = v36[0];
    *(_OWORD *)(v0 + 32) = v20;
    *(_OWORD *)(v0 + 48) = v36[2];
    unint64_t v21 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
    uint64_t v22 = (void *)sub_100693CE8();
    *(_OWORD *)(v0 + 64) = *(_OWORD *)(v0 + 16);
    sub_10020EE38(v0 + 64);
    *(void *)(v0 + 104) = *(void *)(v0 + 32);
    sub_1001B19C0((void *)(v0 + 104));
    *(void *)(v0 + 8sub_100032838(0, 7LL, 0) = *(void *)(v0 + 40);
    sub_1001B19C0((void *)(v0 + 80));
    *(void *)(v0 + 88) = *(void *)(v0 + 48);
    sub_1001B19C0((void *)(v0 + 88));
    *(void *)(v0 + 96) = *(void *)(v0 + 56);
    sub_1001B19C0((void *)(v0 + 96));
    *(void *)(v0 + 112) = 0LL;
    id v23 = [v21 dataWithPropertyList:v22 format:200 options:0 error:v0 + 112];

    id v24 = *(id *)(v0 + 112);
    if (!v23)
    {
      Swift::String v31 = v24;
      uint64_t v33 = *(void *)(v0 + 184);
      uint64_t v32 = *(void *)(v0 + 192);
      uint64_t v34 = *(void *)(v0 + 160);
      _convertNSErrorToError(_:)(v24);

      swift_willThrow(v35);
      swift_task_dealloc(v32);
      swift_task_dealloc(v33);
      swift_task_dealloc(v34);
      uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
      return v18();
    }

    uint64_t v26 = *(void *)(v0 + 152);
    uint64_t v25 = *(void *)(v0 + 160);
    uint64_t v27 = *(void *)(v0 + 144);
    uint64_t v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v23);
    uint64_t v30 = v29;

    (*(void (**)(uint64_t, void, uint64_t))(v26 + 104))( v25,  enum case for StateCaptureDateType.serialized(_:),  v27);
    StateCaptureStateData.init(type:title:data:)(v25, 0x6E6967617373654DLL, 0xEE00737461745367LL, v28, v30);
    uint64_t v12 = 0LL;
  }

  else
  {
    uint64_t v12 = 1LL;
  }

  uint64_t v14 = *(void *)(v0 + 184);
  uint64_t v13 = *(void *)(v0 + 192);
  uint64_t v15 = *(void *)(v0 + 160);
  uint64_t v16 = *(void *)(v0 + 120);
  uint64_t v17 = type metadata accessor for StateCaptureStateData(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v16, v12, 1LL, v17);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t sub_1001FAD00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[28] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock.Instant(0LL);
  v4[29] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[30] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[31] = swift_task_alloc(v7);
  v4[32] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for ContinuousClock(0LL);
  v4[33] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[34] = v9;
  v4[35] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1001FAD98, 0LL, 0LL);
}

uint64_t sub_1001FAD98()
{
  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    uint64_t v1 = *(void *)(v0 + 248);
    uint64_t v2 = *(void *)(v0 + 256);
    swift_task_dealloc(*(void *)(v0 + 280));
    swift_task_dealloc(v2);
    swift_task_dealloc(v1);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    swift_beginAccess(*(void *)(v0 + 224) + 16LL, v0 + 112, 0LL, 0LL);
    uint64_t v4 = *(void *)(v0 + 264);
    uint64_t v6 = *(void *)(v0 + 240);
    uint64_t v5 = *(void *)(v0 + 248);
    uint64_t v7 = *(void *)(v0 + 232);
    ContinuousClock.init()(v8);
    *(_OWORD *)(v0 + 176) = xmmword_1007F70D0;
    *(void *)(v0 + 144) = 0LL;
    *(void *)(v0 + 136) = 0LL;
    *(_BYTE *)(v0 + 152) = 1;
    uint64_t v9 = sub_100007864( &qword_1009A61B8,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock,  (uint64_t)&protocol conformance descriptor for ContinuousClock);
    dispatch thunk of Clock.now.getter(v4, v9);
    uint64_t v10 = sub_100007864( &qword_1009AE520,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant,  (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
    dispatch thunk of InstantProtocol.advanced(by:)(v0 + 176, v7, v10);
    unint64_t v11 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    *(void *)(v0 + 288) = v11;
    v11(v5, v7);
    uint64_t v12 = (void *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
    *(void *)(v0 + 296) = v12;
    void *v12 = v0;
    v12[1] = sub_1001FAF28;
    return dispatch thunk of Clock.sleep(until:tolerance:)(*(void *)(v0 + 256), v0 + 136, *(void *)(v0 + 264), v9);
  }

uint64_t sub_1001FAF28()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 296);
  *(void *)(*v1 + 304) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    (*(void (**)(void, void))(v2 + 288))(*(void *)(v2 + 256), *(void *)(v2 + 232));
    uint64_t v4 = sub_1001FB450;
  }

  else
  {
    uint64_t v5 = *(void *)(v2 + 280);
    uint64_t v6 = *(void *)(v2 + 264);
    uint64_t v7 = *(void *)(v2 + 272);
    (*(void (**)(void, void))(v2 + 288))(*(void *)(v2 + 256), *(void *)(v2 + 232));
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
    uint64_t v4 = sub_1001FAFC8;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

void sub_1001FAFC8()
{
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t Strong = swift_weakLoadStrong(*(void *)(v0 + 224) + 16LL);
  if (Strong)
  {
    uint64_t v3 = *(void *)(Strong + 120);
    swift_retain();
    swift_release();
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 64));
    sub_100693CD4((void *)(v3 + 16), (void *)(v0 + 64));
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 64));
    if (v1) {
      return;
    }
    __int128 v4 = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 32) = v4;
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 96);
    swift_release();
    if (qword_10099B818 != -1) {
      swift_once(&qword_10099B818, sub_100693760);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    sub_10000A720(v5, (uint64_t)qword_100A2B1A0);
    *(_OWORD *)(v0 + 16sub_100032838(0, 7LL, 0) = *(_OWORD *)(v0 + 16);
    uint64_t v6 = *(void *)(v0 + 32);
    *(_OWORD *)(v0 + 192) = *(_OWORD *)(v0 + 40);
    uint64_t v7 = *(void *)(v0 + 56);
    *(void *)(v0 + 208) = v6;
    *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = v7;
    sub_10020EE10(v0 + 160);
    sub_1001B1998((void *)(v0 + 208));
    sub_1001B1998((void *)(v0 + 192));
    sub_1001B1998((void *)(v0 + 200));
    uint64_t v8 = sub_1001B1998((void *)(v0 + 216));
    uint64_t v9 = (void *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.default.getter(v9);
    if (!os_log_type_enabled((os_log_t)v9, v10))
    {
      sub_10020EE38(v0 + 160);
      sub_1001B19C0((void *)(v0 + 208));
      sub_1001B19C0((void *)(v0 + 192));
      sub_1001B19C0((void *)(v0 + 200));
      sub_1001B19C0((void *)(v0 + 216));
      sub_10020EE38(v0 + 160);
      sub_1001B19C0((void *)(v0 + 208));
      sub_1001B19C0((void *)(v0 + 192));
      sub_1001B19C0((void *)(v0 + 200));
      sub_1001B19C0((void *)(v0 + 216));

      uint64_t v15 = static Task<>.isCancelled.getter();
      if ((v15 & 1) != 0) {
        goto LABEL_8;
      }
      goto LABEL_10;
    }

    uint64_t v11 = swift_slowAlloc(12LL, -1LL);
    uint64_t v27 = swift_slowAlloc(32LL, -1LL);
    uint64_t v28 = v27;
    *(_DWORD *)uint64_t v11 = 136315138;
    sub_10020EE10(v0 + 160);
    sub_1001B1998((void *)(v0 + 208));
    sub_1001B1998((void *)(v0 + 192));
    sub_1001B1998((void *)(v0 + 200));
    sub_1001B1998((void *)(v0 + 216));
    log = (os_log_s *)v9;
    unint64_t v12 = sub_1006990C4();
    unint64_t v14 = v13;
    sub_10020EE38(v0 + 160);
    sub_1001B19C0((void *)(v0 + 208));
    sub_1001B19C0((void *)(v0 + 192));
    sub_1001B19C0((void *)(v0 + 200));
    sub_1001B19C0((void *)(v0 + 216));
    *(void *)(v11 + 4) = sub_1003F11D4(v12, v14, &v28);
    swift_bridgeObjectRelease();
    sub_10020EE38(v0 + 160);
    sub_1001B19C0((void *)(v0 + 208));
    sub_1001B19C0((void *)(v0 + 192));
    sub_1001B19C0((void *)(v0 + 200));
    sub_1001B19C0((void *)(v0 + 216));
    sub_10020EE38(v0 + 160);
    sub_1001B19C0((void *)(v0 + 208));
    sub_1001B19C0((void *)(v0 + 192));
    sub_1001B19C0((void *)(v0 + 200));
    sub_1001B19C0((void *)(v0 + 216));
    _os_log_impl((void *)&_mh_execute_header, log, v10, "%s", (uint8_t *)v11, 0xCu);
    swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  uint64_t v15 = static Task<>.isCancelled.getter();
  if ((v15 & 1) != 0)
  {
LABEL_8:
    uint64_t v16 = *(void *)(v0 + 248);
    uint64_t v17 = *(void *)(v0 + 256);
    swift_task_dealloc(*(void *)(v0 + 280));
    swift_task_dealloc(v17);
    swift_task_dealloc(v16);
    (*(void (**)(void))(v0 + 8))();
    return;
  }

uint64_t sub_1001FB450()
{
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 264);
  swift_errorRelease(*(void *)(v0 + 304));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t Strong = swift_weakLoadStrong(*(void *)(v0 + 224) + 16LL);
  if (Strong)
  {
    uint64_t v5 = *(void *)(Strong + 120);
    swift_retain();
    swift_release();
    os_unfair_lock_lock((os_unfair_lock_t)(v5 + 64));
    sub_100693CD4((void *)(v5 + 16), (void *)(v0 + 64));
    os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 64));
    __int128 v6 = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 32) = v6;
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 96);
    swift_release();
    if (qword_10099B818 != -1) {
      swift_once(&qword_10099B818, sub_100693760);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    sub_10000A720(v7, (uint64_t)qword_100A2B1A0);
    *(_OWORD *)(v0 + 16sub_100032838(0, 7LL, 0) = *(_OWORD *)(v0 + 16);
    uint64_t v8 = *(void *)(v0 + 32);
    *(_OWORD *)(v0 + 192) = *(_OWORD *)(v0 + 40);
    uint64_t v9 = *(void *)(v0 + 56);
    *(void *)(v0 + 208) = v8;
    *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = v9;
    sub_10020EE10(v0 + 160);
    sub_1001B1998((void *)(v0 + 208));
    sub_1001B1998((void *)(v0 + 192));
    sub_1001B1998((void *)(v0 + 200));
    os_log_type_t v10 = sub_1001B1998((void *)(v0 + 216));
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc(12LL, -1LL);
      uint64_t v30 = swift_slowAlloc(32LL, -1LL);
      uint64_t v31 = v30;
      *(_DWORD *)uint64_t v13 = 136315138;
      sub_10020EE10(v0 + 160);
      sub_1001B1998((void *)(v0 + 208));
      sub_1001B1998((void *)(v0 + 192));
      sub_1001B1998((void *)(v0 + 200));
      sub_1001B1998((void *)(v0 + 216));
      log = v11;
      unint64_t v14 = sub_1006990C4();
      unint64_t v16 = v15;
      sub_10020EE38(v0 + 160);
      sub_1001B19C0((void *)(v0 + 208));
      sub_1001B19C0((void *)(v0 + 192));
      sub_1001B19C0((void *)(v0 + 200));
      sub_1001B19C0((void *)(v0 + 216));
      *(void *)(v13 + 4) = sub_1003F11D4(v14, v16, &v31);
      swift_bridgeObjectRelease();
      sub_10020EE38(v0 + 160);
      sub_1001B19C0((void *)(v0 + 208));
      sub_1001B19C0((void *)(v0 + 192));
      sub_1001B19C0((void *)(v0 + 200));
      sub_1001B19C0((void *)(v0 + 216));
      sub_10020EE38(v0 + 160);
      sub_1001B19C0((void *)(v0 + 208));
      sub_1001B19C0((void *)(v0 + 192));
      sub_1001B19C0((void *)(v0 + 200));
      sub_1001B19C0((void *)(v0 + 216));
      _os_log_impl((void *)&_mh_execute_header, log, v12, "%s", (uint8_t *)v13, 0xCu);
      swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    else
    {
      sub_10020EE38(v0 + 160);
      sub_1001B19C0((void *)(v0 + 208));
      sub_1001B19C0((void *)(v0 + 192));
      sub_1001B19C0((void *)(v0 + 200));
      sub_1001B19C0((void *)(v0 + 216));
      sub_10020EE38(v0 + 160);
      sub_1001B19C0((void *)(v0 + 208));
      sub_1001B19C0((void *)(v0 + 192));
      sub_1001B19C0((void *)(v0 + 200));
      sub_1001B19C0((void *)(v0 + 216));
    }
  }

  uint64_t v17 = static Task<>.isCancelled.getter();
  if ((v17 & 1) != 0)
  {
    uint64_t v19 = *(void *)(v0 + 248);
    uint64_t v18 = *(void *)(v0 + 256);
    swift_task_dealloc(*(void *)(v0 + 280));
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v21 = *(void *)(v0 + 264);
    uint64_t v23 = *(void *)(v0 + 240);
    uint64_t v22 = *(void *)(v0 + 248);
    uint64_t v24 = *(void *)(v0 + 232);
    ContinuousClock.init()(v17);
    *(_OWORD *)(v0 + 176) = xmmword_1007F70D0;
    *(void *)(v0 + 136) = 0LL;
    *(void *)(v0 + 144) = 0LL;
    *(_BYTE *)(v0 + 152) = 1;
    uint64_t v25 = sub_100007864( &qword_1009A61B8,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock,  (uint64_t)&protocol conformance descriptor for ContinuousClock);
    dispatch thunk of Clock.now.getter(v21, v25);
    uint64_t v26 = sub_100007864( &qword_1009AE520,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant,  (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
    dispatch thunk of InstantProtocol.advanced(by:)(v0 + 176, v24, v26);
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    *(void *)(v0 + 288) = v27;
    v27(v22, v24);
    uint64_t v28 = (void *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
    *(void *)(v0 + 296) = v28;
    *uint64_t v28 = v0;
    v28[1] = sub_1001FAF28;
    return dispatch thunk of Clock.sleep(until:tolerance:)(*(void *)(v0 + 256), v0 + 136, *(void *)(v0 + 264), v25);
  }

uint64_t sub_1001FB8F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  void v7[5] = a7;
  _OWORD v7[2] = a4;
  void v7[3] = a5;
  return swift_task_switch(sub_1001FB90C, 0LL, 0LL);
}

uint64_t sub_1001FB90C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1009BFBE4);
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001FB960;
  return sub_10078BD98(*(void *)(v0 + 40));
}

uint64_t sub_1001FB960(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 48);
  *(void *)(*v2 + 56) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    __int128 v6 = sub_1001FBA18;
  }

  else
  {
    *(void *)(v4 + 64) = a1;
    __int128 v6 = sub_1001FB9D4;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1001FB9D4()
{
  uint64_t v1 = *(void *)(v0 + 64);
  (*(void (**)(uint64_t, void))(v0 + 16))(v1, 0LL);
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001FBA18()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v0 + 16);
  swift_errorRetain(v1);
  v2(v1, 1LL);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *sub_1001FBA74()
{
  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  v5[0] = 0x7365547265646E75LL;
  v5[1] = 0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v6, v5, sub_10000A71C, 0LL, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0) {
    return _swiftEmptyArrayStorage;
  }
  Swift::Int result = [*(id *)(v0 + 64) devices];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = sub_100022898(0LL, &qword_1009A6000, &OBJC_CLASS___IDSDevice_ptr);
    uint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

    return (void *)v1;
  }

  __break(1u);
  return result;
}

uint64_t sub_1001FBB74( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(v8 + 4sub_100032838(0, 7LL, 0) = a8;
  *(void *)(v8 + 48) = v10;
  *(_BYTE *)(v8 + 64) = a7;
  *(void *)(v8 + 24) = a5;
  *(void *)(v8 + 32) = a6;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = a4;
  return swift_task_switch(sub_1001FBBA0, 0LL, 0LL);
}

uint64_t sub_1001FBBA0()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1009BFBDC);
  *(void *)(v0 + 56) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001FBBF8;
  return sub_10078B158(*(_BYTE *)(v0 + 64), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_1001FBBF8(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 56LL);
  *(_BYTE *)(*(void *)v1 + 65LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001FBC54, 0LL, 0LL);
}

uint64_t sub_1001FBC54()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001FBC88(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 248) = a3;
  *(void *)(v4 + 256) = a4;
  *(void *)(v4 + 24sub_100032838(0, 7LL, 0) = a2;
  *(_BYTE *)(v4 + 264) = a1;
  return swift_task_switch(sub_1001FBCA8, 0LL, 0LL);
}

void sub_1001FBCA8()
{
  uint64_t v1 = *(char *)(v0 + 264);
  uint64_t v2 = sub_100004AEC(&qword_10099CA50);
  uint64_t inited = swift_initStackObject(v2, v0 + 16);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E4050;
  *(void *)(inited + 32) = 0x546567617373656DLL;
  *(void *)(inited + 4sub_100032838(0, 7LL, 0) = 0xEB00000000657079LL;
  *(void *)(inited + 72) = &type metadata for Int32;
  *(void *)(inited + 8sub_100032838(0, 7LL, 0) = sub_1001FFDF8();
  uint64_t v4 = *(void *)(v0 + 256);
  uint64_t v5 = *(void *)(v0 + 240);
  *(_DWORD *)(inited + 48) = dword_1007F74FC[v1];
  *(_WORD *)(inited + 88) = 2;
  strcpy((char *)(inited + 96), "messageVersion");
  *(_BYTE *)(inited + 111) = -18;
  *(void *)(inited + 136) = &type metadata for Int;
  *(void *)(inited + 144) = sub_10001570C();
  *(void *)(inited + 112) = v5;
  *(_WORD *)(inited + 152) = 2;
  *(void *)(inited + 16sub_100032838(0, 7LL, 0) = 0x536567617373656DLL;
  *(void *)(inited + 168) = 0xEB00000000657A69LL;
  __asm { BR              X11 }

uint64_t sub_1001FBDBC(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(v3 + 262);
  *(void *)(v2 + 20sub_100032838(0, 7LL, 0) = v1;
  *(void *)(v2 + 208) = a1;
  *(void *)(v2 + 176) = v4;
  *(_WORD *)(v2 + 2swift_weakDestroy(v0 + 16) = 2;
  unint64_t v5 = sub_10041285C(v2);
  return (*(uint64_t (**)(unint64_t))(v3 + 8))(v5);
}

uint64_t sub_1001FBE34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100004AEC(&qword_1009A5F80);
    uint64_t v3 = (void *)static _SetStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptySetSingleton;
  }

  uint64_t v4 = a1 + 56;
  uint64_t v5 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v5 < 64) {
    uint64_t v6 = ~(-1LL << -(char)v5);
  }
  else {
    uint64_t v6 = -1LL;
  }
  unint64_t v7 = v6 & *(void *)(a1 + 56);
  int64_t v8 = (unint64_t)(63 - v5) >> 6;
  uint64_t v9 = (char *)(v3 + 7);
  swift_bridgeObjectRetain(a1);
  uint64_t result = swift_retain();
  int64_t v11 = 0LL;
  while (1)
  {
    if (v7)
    {
      unint64_t v14 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_28;
    }

    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v16 >= v8) {
      goto LABEL_37;
    }
    unint64_t v17 = *(void *)(v4 + 8 * v16);
    int64_t v18 = v11 + 1;
    if (!v17)
    {
      int64_t v18 = v11 + 2;
      if (v11 + 2 >= v8) {
        goto LABEL_37;
      }
      unint64_t v17 = *(void *)(v4 + 8 * v18);
      if (!v17)
      {
        int64_t v18 = v11 + 3;
        if (v11 + 3 >= v8) {
          goto LABEL_37;
        }
        unint64_t v17 = *(void *)(v4 + 8 * v18);
        if (!v17)
        {
          int64_t v18 = v11 + 4;
          if (v11 + 4 >= v8) {
            goto LABEL_37;
          }
          unint64_t v17 = *(void *)(v4 + 8 * v18);
          if (!v17) {
            break;
          }
        }
      }
    }

uint64_t sub_1001FC124(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 248) = a3;
  *(void *)(v4 + 256) = a4;
  *(void *)(v4 + 24sub_100032838(0, 7LL, 0) = a2;
  *(_BYTE *)(v4 + 264) = a1;
  return swift_task_switch(sub_1001FC144, 0LL, 0LL);
}

void sub_1001FC144()
{
  uint64_t v1 = *(char *)(v0 + 264);
  uint64_t v2 = sub_100004AEC(&qword_10099CA50);
  uint64_t inited = swift_initStackObject(v2, v0 + 16);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E4050;
  *(void *)(inited + 32) = 0x546567617373656DLL;
  *(void *)(inited + 4sub_100032838(0, 7LL, 0) = 0xEB00000000657079LL;
  *(void *)(inited + 72) = &type metadata for Int32;
  *(void *)(inited + 8sub_100032838(0, 7LL, 0) = sub_1001FFDF8();
  uint64_t v4 = *(void *)(v0 + 256);
  uint64_t v5 = *(void *)(v0 + 240);
  *(_DWORD *)(inited + 48) = dword_1007F74FC[v1];
  *(_WORD *)(inited + 88) = 2;
  strcpy((char *)(inited + 96), "messageVersion");
  *(_BYTE *)(inited + 111) = -18;
  *(void *)(inited + 136) = &type metadata for Int;
  *(void *)(inited + 144) = sub_10001570C();
  *(void *)(inited + 112) = v5;
  *(_WORD *)(inited + 152) = 2;
  *(void *)(inited + 16sub_100032838(0, 7LL, 0) = 0x536567617373656DLL;
  *(void *)(inited + 168) = 0xEB00000000657A69LL;
  __asm { BR              X11 }

uint64_t sub_1001FC258(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(v3 + 262);
  *(void *)(v2 + 20sub_100032838(0, 7LL, 0) = v1;
  *(void *)(v2 + 208) = a1;
  *(void *)(v2 + 176) = v4;
  *(_WORD *)(v2 + 2swift_weakDestroy(v0 + 16) = 2;
  unint64_t v5 = sub_10041285C(v2);
  return (*(uint64_t (**)(unint64_t))(v3 + 8))(v5);
}

uint64_t sub_1001FC2D0(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = sub_100004AEC(&qword_1009A5F78);
  return String.init<A>(describing:)(&v3, v1);
}

void sub_1001FC304(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v13[0] = 0LL;
  v13[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(41LL);
  v7._countAndFlagsBits = 0x286567617373654DLL;
  v7._object = (void *)0xEE00203A65707974LL;
  String.append(_:)(v7);
  LOBYTE(v12) = a1;
  _print_unlocked<A, B>(_:_:)( &v12,  v13,  &type metadata for BeaconSharingMessageType,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v8._countAndFlagsBits = 0x6F6973726576202CLL;
  v8._object = (void *)0xEB00000000203A6ELL;
  String.append(_:)(v8);
  uint64_t v12 = a2;
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  v11._countAndFlagsBits = 0x3A7365747962202CLL;
  v11._object = (void *)0xE900000000000020LL;
  String.append(_:)(v11);
  __asm { BR              X11 }

uint64_t sub_1001FC42C()
{
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 41LL;
  v2._object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  return v4;
}

uint64_t sub_1001FC4C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant(0LL);
  *(void *)(v6 + 64) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v6 + 72) = v13;
  unint64_t v14 = (*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v6 + 8sub_100032838(0, 7LL, 0) = swift_task_alloc(v14);
  *(void *)(v6 + 88) = swift_task_alloc(v14);
  *(void *)(v6 + 4sub_100032838(0, 7LL, 0) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch(sub_1001FC56C, 0LL, 0LL);
}

uint64_t sub_1001FC56C()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock(0LL);
  uint64_t v5 = sub_100007864( &qword_1009A61B8,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock,  (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v4, v5);
  uint64_t v6 = sub_100007864( &qword_1009AE520,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant,  (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 5, v2, v6);
  Swift::String v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v7;
  v7(v1, v2);
  Swift::String v8 = (void *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[13] = v8;
  *Swift::String v8 = v0;
  v8[1] = sub_1001FC684;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[11], v0 + 2, v4, v5);
}

uint64_t sub_1001FC684()
{
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v2 = *(void *)(*v1 + 104);
  uint64_t v4 = *(void *)(*v1 + 88);
  uint64_t v5 = *(void *)(*v1 + 64);
  uint64_t v6 = *v1;
  *(void *)(v6 + 112) = v0;
  swift_task_dealloc(v2);
  v3(v4, v5);
  if (v0) {
    return swift_task_switch(sub_1001FC730, 0LL, 0LL);
  }
  uint64_t v8 = *(void *)(v6 + 80);
  swift_task_dealloc(*(void *)(v6 + 88));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1001FC730()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Int sub_1001FC76C(uint64_t *a1)
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v186 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v186 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  Swift::String v11 = (char *)&v186 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  unint64_t v14 = (char *)&v186 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  unint64_t v17 = (char *)&v186 - v16;
  __chkstk_darwin(v15);
  int64_t v19 = (char *)&v186 - v18;
  uint64_t v20 = type metadata accessor for Date(0LL);
  uint64_t v212 = *(void *)(v20 - 8);
  uint64_t v21 = __chkstk_darwin(v20);
  unint64_t v208 = (char *)&v186 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v225 = (char *)&v186 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v193 = (char *)&v186 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v201 = (char *)&v186 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v189 = (char *)&v186 - v30;
  __chkstk_darwin(v29);
  uint64_t v206 = (char *)&v186 - v31;
  uint64_t v216 = type metadata accessor for ShareRecord(0LL);
  uint64_t v205 = *(void *)(v216 - 8);
  uint64_t v32 = __chkstk_darwin(v216);
  uint64_t v200 = (uint64_t)&v186 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v217 = (uint64_t)&v186 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v213 = (uint64_t)&v186 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v221 = (uint64_t)&v186 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  id v196 = (char *)&v186 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v203 = (uint64_t)&v186 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v191 = (uint64_t)&v186 - v45;
  __chkstk_darwin(v44);
  uint64_t v192 = (uint64_t)&v186 - v46;
  uint64_t v224 = a1;
  Swift::Int v47 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v47);
  if (result >= v47)
  {
    if ((v47 & 0x8000000000000000LL) == 0)
    {
      if (v47) {
        return sub_1001FD8D8(0LL, v47, 1LL, v224);
      }
      return result;
    }

LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
LABEL_167:
    __break(1u);
LABEL_168:
    __break(1u);
LABEL_169:
    __break(1u);
LABEL_170:
    __break(1u);
LABEL_171:
    __break(1u);
LABEL_172:
    __break(1u);
LABEL_173:
    Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
    __break(1u);
    return result;
  }

  if (v47 >= 0) {
    uint64_t v49 = v47;
  }
  else {
    uint64_t v49 = v47 + 1;
  }
  if (v47 < -1) {
    goto LABEL_173;
  }
  uint64_t v210 = v5;
  id v194 = v11;
  uint64_t v198 = v14;
  uint64_t v187 = v17;
  Swift::Int v188 = result;
  if (v47 < 2)
  {
    unint64_t v54 = v206;
    unint64_t v204 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v205 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v205 + 80));
    uint64_t v51 = v216;
    if (v47 != 1)
    {
      unint64_t v59 = _swiftEmptyArrayStorage[2];
      uint64_t v57 = (char *)_swiftEmptyArrayStorage;
      uint64_t v177 = _swiftEmptyArrayStorage;
      if (v59 < 2)
      {
LABEL_142:
        swift_bridgeObjectRelease();
        v177[2] = 0LL;
        return swift_bridgeObjectRelease();
      }

      goto LABEL_129;
    }

    uint64_t v55 = 1LL;
    uint64_t v186 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v50 = v49 >> 1;
    uint64_t v51 = v216;
    uint64_t v52 = static Array._allocateBufferUninitialized(minimumCapacity:)(v49 >> 1, v216);
    *(void *)(v52 + swift_weakDestroy(v0 + 16) = v50;
    uint64_t v53 = *(unsigned __int8 *)(v205 + 80);
    uint64_t v186 = (void *)v52;
    unint64_t v204 = v52 + ((v53 + 32) & ~v53);
    unint64_t v54 = v206;
    uint64_t v55 = v47;
  }

  uint64_t v56 = 0LL;
  uint64_t v57 = (char *)_swiftEmptyArrayStorage;
  uint64_t v190 = v19;
  uint64_t v209 = v20;
  uint64_t v58 = v225;
  unint64_t v214 = v8;
  while (1)
  {
    uint64_t v60 = v56 + 1;
    uint64_t v199 = v57;
    uint64_t v202 = v56;
    uint64_t v222 = v55;
    if (v56 + 1 >= v55)
    {
      uint64_t v73 = v56++;
      uint64_t v72 = v212;
    }

    else
    {
      uint64_t v61 = v19;
      uint64_t v62 = *v224;
      uint64_t v63 = *(void *)(v205 + 72);
      uint64_t v218 = v60;
      uint64_t v64 = v192;
      sub_10001DC4C(v62 + v63 * v60, v192, type metadata accessor for ShareRecord);
      uint64_t v195 = v62;
      uint64_t v223 = v63;
      uint64_t v65 = v62 + v63 * v202;
      uint64_t v66 = (uint64_t)v61;
      uint64_t v67 = v191;
      sub_10001DC4C(v65, v191, type metadata accessor for ShareRecord);
      sub_10001581C(v64 + *(int *)(v51 + 32), v66, (uint64_t *)&unk_10099D720);
      uint64_t v68 = v51;
      uint64_t v69 = v212;
      unint64_t v70 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v212 + 48);
      unsigned int v71 = v70(v66, 1LL, v20);
      int v219 = v70;
      if (v71 == 1)
      {
        sub_100015794(v66, (uint64_t *)&unk_10099D720);
        LODWORD(v22sub_100032838(0, 7LL, 0) = 0;
        uint64_t v72 = v69;
      }

      else
      {
        uint64_t v74 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 32);
        v74(v54, v66, v20);
        uint64_t v75 = v54;
        uint64_t v76 = (uint64_t)v187;
        sub_10001581C(v67 + *(int *)(v68 + 32), (uint64_t)v187, (uint64_t *)&unk_10099D720);
        if (v70(v76, 1LL, v20) == 1)
        {
          (*(void (**)(char *, uint64_t))(v69 + 8))(v75, v20);
          sub_100015794(v76, (uint64_t *)&unk_10099D720);
          LODWORD(v22sub_100032838(0, 7LL, 0) = 0;
        }

        else
        {
          __int128 v77 = v189;
          v74(v189, v76, v20);
          LODWORD(v22sub_100032838(0, 7LL, 0) = static Date.< infix(_:_:)(v75, v77);
          uint64_t v78 = *(void (**)(char *, uint64_t))(v69 + 8);
          v78(v77, v20);
          v78(v75, v20);
        }

        uint64_t v72 = v69;
        unint64_t v54 = v75;
      }

      sub_100018C68(v67, type metadata accessor for ShareRecord);
      sub_100018C68(v192, type metadata accessor for ShareRecord);
      uint64_t v73 = v202;
      uint64_t v56 = v202 + 2;
      uint64_t v55 = v222;
      uint64_t v51 = v216;
      if (v202 + 2 >= v222)
      {
        uint64_t v58 = v225;
      }

      else
      {
        v218 *= v223;
        uint64_t v79 = v195;
        uint64_t v211 = v223 * v56;
        uint64_t v80 = (uint64_t)v196;
        while (1)
        {
          uint64_t v81 = v203;
          sub_10001DC4C(v79 + v211, v203, type metadata accessor for ShareRecord);
          sub_10001DC4C(v79 + v218, v80, type metadata accessor for ShareRecord);
          uint64_t v82 = v81 + *(int *)(v51 + 32);
          uint64_t v83 = v51;
          uint64_t v84 = (uint64_t)v198;
          sub_10001581C(v82, (uint64_t)v198, (uint64_t *)&unk_10099D720);
          uint64_t v85 = v219;
          if (v219(v84, 1LL, v20) == 1)
          {
            sub_100015794(v84, (uint64_t *)&unk_10099D720);
            int v86 = 0;
          }

          else
          {
            uint64_t v215 = v56;
            uint64_t v87 = v80;
            uint64_t v88 = v212;
            uint64_t v89 = v201;
            uint64_t v197 = *(void (**)(char *, uint64_t, uint64_t))(v212 + 32);
            v197(v201, v84, v20);
            uint64_t v90 = (uint64_t)v194;
            sub_10001581C(v87 + *(int *)(v83 + 32), (uint64_t)v194, (uint64_t *)&unk_10099D720);
            if (v85(v90, 1LL, v20) == 1)
            {
              (*(void (**)(char *, uint64_t))(v88 + 8))(v89, v20);
              sub_100015794(v90, (uint64_t *)&unk_10099D720);
              int v86 = 0;
            }

            else
            {
              uint64_t v91 = v193;
              v197(v193, v90, v20);
              int v86 = static Date.< infix(_:_:)(v201, v91);
              uint64_t v92 = *(void (**)(char *, uint64_t))(v88 + 8);
              uint64_t v93 = v91;
              uint64_t v94 = v201;
              v92(v93, v20);
              v92(v94, v20);
            }

            uint64_t v80 = (uint64_t)v196;
            uint64_t v56 = v215;
          }

          sub_100018C68(v80, type metadata accessor for ShareRecord);
          sub_100018C68(v203, type metadata accessor for ShareRecord);
          uint64_t v51 = v216;
          ++v56;
          v79 += v223;
          uint64_t v55 = v222;
          unint64_t v54 = v206;
          if (v222 == v56)
          {
            uint64_t v56 = v222;
            uint64_t v72 = v212;
            uint64_t v58 = v225;
            uint64_t v73 = v202;
            goto LABEL_37;
          }
        }

        uint64_t v72 = v212;
        uint64_t v58 = v225;
        unint64_t v54 = v206;
        uint64_t v73 = v202;
        uint64_t v55 = v222;
      }

  swift_release();
  uint64_t v127 = v111[2];
  if (v127)
  {
    double v128 = v111[4];
    uint64_t v129 = *((_BYTE *)v111 + 40);
    uint64_t v130 = v127 - 1;
    if (v130)
    {
      BOOL v131 = v111 + 7;
      do
      {
        uint64_t v132 = *((void *)v131 - 1);
        char v133 = v128 >= v132;
        uint64_t v135 = *v131;
        v131 += 16;
        uint64_t v134 = v135;
        if (v128 <= v132) {
          double v128 = v132;
        }
        if (!v133) {
          uint64_t v129 = v134;
        }
        --v130;
      }

      while (v130);
    }

    swift_release();
    v195._countAndFlagsBits = 0LL;
    v195._object = (void *)0xE000000000000000LL;
    _StringGuts.grow(_:)(28LL);
    v136._object = (void *)0x800000010086AE10LL;
    v136._countAndFlagsBits = 0xD000000000000015LL;
    String.append(_:)(v136);
    uint64_t v193 = v100;
    id v194 = v101;
    uint64_t v137 = sub_100004AEC(&qword_1009B6F50);
    _print_unlocked<A, B>(_:_:)( &v193,  &v195,  v137,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    v138._countAndFlagsBits = 45LL;
    v138._object = (void *)0xE100000000000000LL;
    String.append(_:)(v138);
    uint64_t v193 = v128;
    id v194 = v129;
    _print_unlocked<A, B>(_:_:)( &v193,  &v195,  v137,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    v139._countAndFlagsBits = 8236LL;
    v139._object = (void *)0xE200000000000000LL;
    String.append(_:)(v139);
    String.append(_:)(v195);
    swift_bridgeObjectRelease();
    goto LABEL_175;
  }

LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
      goto LABEL_165;
    }
  }

  while (2)
  {
    unint64_t v110 = v59 - 1;
    if (v59 >= 4)
    {
      uint64_t v115 = &v108[16 * v59];
      uint64_t v116 = *((void *)v115 - 8);
      uint64_t v117 = *((void *)v115 - 7);
      BOOL v121 = __OFSUB__(v117, v116);
      uint64_t v118 = v117 - v116;
      if (v121) {
        goto LABEL_148;
      }
      uint64_t v120 = *((void *)v115 - 6);
      uint64_t v119 = *((void *)v115 - 5);
      BOOL v121 = __OFSUB__(v119, v120);
      uint64_t v113 = v119 - v120;
      char v114 = v121;
      if (v121) {
        goto LABEL_149;
      }
      unint64_t v122 = v59 - 2;
      unint64_t v123 = &v108[16 * v59 - 32];
      uint64_t v125 = *(void *)v123;
      uint64_t v124 = *((void *)v123 + 1);
      BOOL v121 = __OFSUB__(v124, v125);
      uint64_t v126 = v124 - v125;
      if (v121) {
        goto LABEL_151;
      }
      BOOL v121 = __OFADD__(v113, v126);
      uint64_t v127 = v113 + v126;
      if (v121) {
        goto LABEL_154;
      }
      if (v127 >= v118)
      {
        uint64_t v145 = &v108[16 * v110];
        uint64_t v147 = *(void *)v145;
        uint64_t v146 = *((void *)v145 + 1);
        BOOL v121 = __OFSUB__(v146, v147);
        uint64_t v148 = v146 - v147;
        if (v121) {
          goto LABEL_158;
        }
        BOOL v138 = v113 < v148;
      }

      else
      {
LABEL_82:
        if ((v114 & 1) != 0) {
          goto LABEL_150;
        }
        unint64_t v122 = v59 - 2;
        double v128 = &v108[16 * v59 - 32];
        uint64_t v130 = *(void *)v128;
        uint64_t v129 = *((void *)v128 + 1);
        BOOL v131 = __OFSUB__(v129, v130);
        uint64_t v132 = v129 - v130;
        char v133 = v131;
        if (v131) {
          goto LABEL_153;
        }
        uint64_t v134 = &v108[16 * v110];
        uint64_t v136 = *(void *)v134;
        uint64_t v135 = *((void *)v134 + 1);
        BOOL v121 = __OFSUB__(v135, v136);
        uint64_t v137 = v135 - v136;
        if (v121) {
          goto LABEL_156;
        }
        if (__OFADD__(v132, v137)) {
          goto LABEL_157;
        }
        if (v132 + v137 < v113) {
          goto LABEL_94;
        }
        BOOL v138 = v113 < v137;
      }

      if (v138) {
        unint64_t v110 = v122;
      }
    }

    else
    {
      if (v59 == 3)
      {
        uint64_t v112 = *((void *)v57 + 4);
        uint64_t v111 = *((void *)v57 + 5);
        BOOL v121 = __OFSUB__(v111, v112);
        uint64_t v113 = v111 - v112;
        char v114 = v121;
        goto LABEL_82;
      }

      uint64_t v139 = *((void *)v57 + 4);
      uint64_t v140 = *((void *)v57 + 5);
      BOOL v121 = __OFSUB__(v140, v139);
      uint64_t v132 = v140 - v139;
      char v133 = v121;
LABEL_94:
      if ((v133 & 1) != 0) {
        goto LABEL_152;
      }
      uint64_t v141 = &v108[16 * v110];
      uint64_t v143 = *(void *)v141;
      uint64_t v142 = *((void *)v141 + 1);
      BOOL v121 = __OFSUB__(v142, v143);
      uint64_t v144 = v142 - v143;
      if (v121) {
        goto LABEL_155;
      }
      if (v144 < v132) {
        goto LABEL_15;
      }
    }

    unint64_t v149 = v110 - 1;
    if (v110 - 1 >= v59)
    {
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
      goto LABEL_159;
    }

    if (!*v224) {
      goto LABEL_170;
    }
    uint64_t v150 = v56;
    int v151 = v57;
    uint64_t v152 = &v108[16 * v149];
    uint64_t v153 = *(void *)v152;
    uint64_t v154 = v108;
    unint64_t v155 = v110;
    uint64_t v156 = &v108[16 * v110];
    uint64_t v157 = *((void *)v156 + 1);
    uint64_t v158 = v207;
    sub_1001FDD04( *v224 + *(void *)(v205 + 72) * *(void *)v152,  *v224 + *(void *)(v205 + 72) * *(void *)v156,  *v224 + *(void *)(v205 + 72) * v157,  v204);
    if (!v158)
    {
      if (v157 < v153) {
        goto LABEL_145;
      }
      if (v155 > *((void *)v151 + 2)) {
        goto LABEL_146;
      }
      *(void *)uint64_t v152 = v153;
      *(void *)&v154[16 * v149 + 8] = v157;
      unint64_t v159 = *((void *)v151 + 2);
      if (v155 >= v159) {
        goto LABEL_147;
      }
      uint64_t v207 = 0LL;
      unint64_t v59 = v159 - 1;
      memmove(v156, v156 + 16, 16 * (v159 - 1 - v155));
      unint64_t v108 = v154;
      uint64_t v57 = v151;
      *((void *)v151 + 2) = v159 - 1;
      uint64_t v58 = v225;
      unint64_t v54 = v206;
      uint64_t v51 = v216;
      uint64_t v56 = v150;
      uint64_t v8 = v214;
      if (v159 <= 2) {
        goto LABEL_15;
      }
      continue;
    }

    break;
  }

  uint64_t v177 = v186;
LABEL_127:
  swift_bridgeObjectRelease();
  v177[2] = 0LL;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001FD8D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v58 = a4;
  uint64_t v47 = a1;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v51 = (uint64_t)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v45 - v9;
  uint64_t v60 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v60 - 8);
  uint64_t v12 = __chkstk_darwin(v60);
  uint64_t v49 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  unint64_t v59 = (char *)&v45 - v14;
  uint64_t v15 = type metadata accessor for ShareRecord(0LL);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v54 = (uint64_t)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v45 - v19;
  uint64_t result = __chkstk_darwin(v18);
  uint64_t v61 = (uint64_t)&v45 - v23;
  uint64_t v53 = a3;
  uint64_t v46 = a2;
  if (a3 != a2)
  {
    uint64_t v24 = result;
    uint64_t v25 = *(void *)(v22 + 72);
    uint64_t v63 = v25 * (v53 - 1);
    uint64_t v52 = v25;
    uint64_t v62 = v25 * v53;
    uint64_t v50 = v10;
    unint64_t v48 = v20;
    while (2)
    {
      uint64_t v27 = 0LL;
      uint64_t v28 = v47;
      while (1)
      {
        uint64_t v29 = *v58;
        uint64_t v30 = v61;
        uint64_t v57 = v62 + v27;
        sub_10001DC4C(v62 + v27 + v29, v61, type metadata accessor for ShareRecord);
        uint64_t v56 = v63 + v27;
        sub_10001DC4C(v63 + v27 + v29, (uint64_t)v20, type metadata accessor for ShareRecord);
        sub_10001581C(v30 + *(int *)(v24 + 32), (uint64_t)v10, (uint64_t *)&unk_10099D720);
        uint64_t v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
        if (v31(v10, 1LL, v60) == 1) {
          break;
        }
        uint64_t v55 = v28;
        uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
        uint64_t v33 = v60;
        v32(v59, v10, v60);
        uint64_t v34 = v51;
        sub_10001581C((uint64_t)&v20[*(int *)(v24 + 32)], v51, (uint64_t *)&unk_10099D720);
        if (v31((char *)v34, 1LL, v33) == 1)
        {
          (*(void (**)(char *, uint64_t))(v11 + 8))(v59, v33);
          uint64_t v26 = v34;
          uint64_t v10 = v50;
          goto LABEL_5;
        }

        uint64_t v35 = v24;
        uint64_t v36 = v59;
        uint64_t v37 = v49;
        v32(v49, (char *)v34, v33);
        char v38 = static Date.< infix(_:_:)(v36, v37);
        uint64_t v39 = *(void (**)(char *, uint64_t))(v11 + 8);
        uint64_t v40 = v36;
        uint64_t v24 = v35;
        uint64_t v20 = v48;
        v39(v37, v33);
        v39(v40, v33);
        sub_100018C68((uint64_t)v20, type metadata accessor for ShareRecord);
        uint64_t result = sub_100018C68(v61, type metadata accessor for ShareRecord);
        uint64_t v10 = v50;
        uint64_t v41 = v55;
        if ((v38 & 1) == 0) {
          goto LABEL_6;
        }
        uint64_t v42 = *v58;
        if (!*v58)
        {
          __break(1u);
          return result;
        }

        uint64_t v43 = v42 + v62 + v27;
        uint64_t v44 = v42 + v63 + v27;
        sub_10002218C(v43, v54, type metadata accessor for ShareRecord);
        swift_arrayInitWithTakeFrontToBack(v43, v44, 1LL, v24);
        uint64_t result = sub_10002218C(v54, v44, type metadata accessor for ShareRecord);
        v27 -= v52;
        uint64_t v28 = v41 + 1;
        if (v53 == v28) {
          goto LABEL_6;
        }
      }

      uint64_t v26 = (uint64_t)v10;
LABEL_5:
      sub_100015794(v26, (uint64_t *)&unk_10099D720);
      sub_100018C68((uint64_t)v20, type metadata accessor for ShareRecord);
      uint64_t result = sub_100018C68(v61, type metadata accessor for ShareRecord);
LABEL_6:
      v63 += v52;
      v62 += v52;
      if (++v53 == v46) {
        return result;
      }
      continue;
    }
  }

  return result;
}

uint64_t sub_1001FDD04(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v106 = a2;
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v91 = &v87[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v97 = &v87[-v11];
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v90 = &v87[-v13];
  __chkstk_darwin(v12);
  uint64_t v98 = &v87[-v14];
  uint64_t v102 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void *)(v102 - 8);
  uint64_t v16 = __chkstk_darwin(v102);
  uint64_t v89 = &v87[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = &v87[-v19];
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v88 = &v87[-v22];
  __chkstk_darwin(v21);
  uint64_t v95 = &v87[-v23];
  uint64_t v24 = type metadata accessor for ShareRecord(0LL);
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v92 = &v87[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v101 = &v87[-v28];
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v96 = &v87[-v30];
  __chkstk_darwin(v29);
  uint64_t v99 = (uint64_t)&v87[-v31];
  uint64_t v94 = *(void *)(v32 + 72);
  if (!v94)
  {
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }

  unint64_t v93 = a1;
  if (v106 - a1 == 0x8000000000000000LL && v94 == -1) {
    goto LABEL_73;
  }
  int64_t v33 = a3 - v106;
  if (a3 - v106 == 0x8000000000000000LL && v94 == -1) {
    goto LABEL_74;
  }
  uint64_t v34 = (uint64_t)(v106 - a1) / v94;
  uint64_t v109 = (_BYTE *)v93;
  unint64_t v108 = (_BYTE *)a4;
  uint64_t v35 = v33 / v94;
  uint64_t v100 = v15;
  uint64_t v103 = v24;
  unint64_t v105 = (_BYTE *)a4;
  if (v34 >= v33 / v94)
  {
    if ((v35 & 0x8000000000000000LL) == 0)
    {
      uint64_t v38 = v35 * v94;
      uint64_t v39 = (uint64_t)v97;
      uint64_t v96 = v20;
      uint64_t v40 = (uint64_t)v92;
      if (a4 < v106 || v106 + v38 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, v106, v35, v24);
      }

      else if (a4 != v106)
      {
        swift_arrayInitWithTakeBackToFront(a4, v106);
      }

      unint64_t v59 = a4 + v38;
      unint64_t v107 = a4 + v38;
      uint64_t v109 = (_BYTE *)v106;
      unint64_t v60 = v93;
      if (v38 >= 1 && v93 < v106)
      {
        uint64_t v99 = -v94;
        do
        {
          unint64_t v104 = a3;
          uint64_t v62 = v24;
          uint64_t v63 = v99;
          uint64_t v64 = v101;
          sub_10001DC4C(v59 + v99, (uint64_t)v101, type metadata accessor for ShareRecord);
          unint64_t v65 = v106 + v63;
          sub_10001DC4C(v106 + v63, v40, type metadata accessor for ShareRecord);
          sub_10001581C((uint64_t)&v64[*(int *)(v24 + 32)], v39, (uint64_t *)&unk_10099D720);
          uint64_t v66 = v100;
          uint64_t v67 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v100 + 48);
          uint64_t v68 = v102;
          if (v67((_BYTE *)v39, 1LL, v102) == 1)
          {
            sub_100015794(v39, (uint64_t *)&unk_10099D720);
            char v69 = 0;
          }

          else
          {
            unint64_t v70 = v96;
            uint64_t v98 = *(_BYTE **)(v66 + 32);
            ((void (*)(_BYTE *, uint64_t, uint64_t))v98)(v96, v39, v68);
            uint64_t v71 = v40 + *(int *)(v62 + 32);
            uint64_t v72 = v91;
            sub_10001581C(v71, (uint64_t)v91, (uint64_t *)&unk_10099D720);
            if (v67(v72, 1LL, v68) == 1)
            {
              (*(void (**)(_BYTE *, uint64_t))(v66 + 8))(v70, v68);
              sub_100015794((uint64_t)v72, (uint64_t *)&unk_10099D720);
              char v69 = 0;
            }

            else
            {
              uint64_t v73 = v89;
              ((void (*)(_BYTE *, _BYTE *, uint64_t))v98)(v89, v72, v68);
              char v69 = static Date.< infix(_:_:)(v70, v73);
              uint64_t v74 = *(void (**)(_BYTE *, uint64_t))(v66 + 8);
              v74(v73, v68);
              v74(v70, v68);
            }

            uint64_t v40 = (uint64_t)v92;
            unint64_t v60 = v93;
          }

          unint64_t v75 = v104;
          uint64_t v76 = v99;
          unint64_t v77 = v104 + v99;
          sub_100018C68(v40, type metadata accessor for ShareRecord);
          sub_100018C68((uint64_t)v101, type metadata accessor for ShareRecord);
          unint64_t v78 = (unint64_t)v105;
          if ((v69 & 1) != 0)
          {
            if (v75 < v106 || v77 >= v106)
            {
              unint64_t v83 = v75 + v76;
              uint64_t v24 = v103;
              swift_arrayInitWithTakeFrontToBack(v83, v65, 1LL, v103);
            }

            else
            {
              BOOL v79 = v75 == v106;
              uint64_t v24 = v103;
              if (!v79) {
                swift_arrayInitWithTakeBackToFront(v77, v65);
              }
            }

            v109 += v76;
          }

          else
          {
            unint64_t v80 = v107;
            unint64_t v81 = v107 + v76;
            v107 += v76;
            if (v75 < v80 || v77 >= v80)
            {
              unint64_t v84 = v75 + v76;
              uint64_t v24 = v103;
              swift_arrayInitWithTakeFrontToBack(v84, v81, 1LL, v103);
              unint64_t v65 = v106;
            }

            else if (v75 == v80)
            {
              unint64_t v65 = v106;
              uint64_t v24 = v103;
            }

            else
            {
              unint64_t v82 = v75 + v76;
              uint64_t v24 = v103;
              swift_arrayInitWithTakeBackToFront(v82, v81);
              unint64_t v65 = v106;
            }
          }

          unint64_t v59 = v107;
          BOOL v85 = v107 > v78;
          uint64_t v39 = (uint64_t)v97;
          if (!v85) {
            break;
          }
          unint64_t v106 = v65;
          a3 = v77;
        }

        while (v65 > v60);
      }

int64_t sub_1001FE600(int64_t result, int a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1LL << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }

  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }

  unint64_t v8 = v7 & (-2LL << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0LL;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }

  return result;
}

uint64_t sub_1001FE6E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  *(_BYTE *)(v2 + swift_weakDestroy(v0 + 16) = *(_BYTE *)a2;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a2 + 8);
  *(void *)(v2 + 4sub_100032838(0, 7LL, 0) = v3;
  *(void *)(v2 + 48) = a1;
  return swift_task_switch(sub_1001FE710, 0LL, 0LL);
}

uint64_t sub_1001FE710()
{
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 56) = v1;
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v0 + 16;
  uint64_t v2 = (void *)swift_task_alloc(dword_1009BDCB4);
  *(void *)(v0 + 64) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1001FE780;
  return sub_100712484((uint64_t)&unk_1009A5FD0, v1);
}

uint64_t sub_1001FE780()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 64));
  uint64_t v3 = *(void *)(v2 + 56);
  if (v0)
  {
    swift_errorRelease(v0);
    swift_task_dealloc(v3);
    unint64_t v4 = sub_10020FF48;
  }

  else
  {
    swift_task_dealloc(v3);
    unint64_t v4 = sub_1001FE7FC;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1001FE7FC()
{
  uint64_t v1 = type metadata accessor for AnalyticsPublisher();
  v0[9] = swift_allocObject(v1, 112LL, 15LL);
  swift_defaultActor_initialize();
  uint64_t v2 = (uint64_t **)swift_task_alloc(dword_1009BDE0C);
  v0[10] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = (uint64_t *)sub_1001FE868;
  return sub_100713F88(v0[6]);
}

uint64_t sub_1001FE868()
{
  uint64_t v1 = *(void *)(*v0 + 72);
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 80));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

void sub_1001FE8B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X12 }

uint64_t sub_1001FE8F8(uint64_t a1, Swift::UInt a2, uint64_t a3, uint64_t a4)
{
  return sub_100695710(dword_1007F74FC[v4], a2, BYTE6(a4));
}

uint64_t sub_1001FE958(char *a1)
{
  char v2 = *a1;
  __int128 v6 = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *((void *)a1 + 3);
  uint64_t v4 = swift_task_alloc(dword_1009A5FDC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_10020FCE0;
  *(void *)(v4 + 256) = v3;
  *(_OWORD *)(v4 + 24sub_100032838(0, 7LL, 0) = v6;
  *(_BYTE *)(v4 + 264) = v2;
  return swift_task_switch(sub_1001FBCA8, 0LL, 0LL);
}

uint64_t sub_1001FE9D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  *(_BYTE *)(v2 + swift_weakDestroy(v0 + 16) = *(_BYTE *)a2;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a2 + 8);
  *(void *)(v2 + 4sub_100032838(0, 7LL, 0) = v3;
  *(void *)(v2 + 48) = a1;
  return swift_task_switch(sub_1001FEA04, 0LL, 0LL);
}

uint64_t sub_1001FEA04()
{
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 56) = v1;
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v0 + 16;
  uint64_t v2 = (void *)swift_task_alloc(dword_1009BDCB4);
  *(void *)(v0 + 64) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1001FEA74;
  return sub_100712484((uint64_t)&unk_1009A5F90, v1);
}

uint64_t sub_1001FEA74()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 64));
  uint64_t v3 = *(void *)(v2 + 56);
  if (v0)
  {
    swift_errorRelease(v0);
    swift_task_dealloc(v3);
    uint64_t v4 = sub_10020FF4C;
  }

  else
  {
    swift_task_dealloc(v3);
    uint64_t v4 = sub_1001FEAF0;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1001FEAF0()
{
  uint64_t v1 = type metadata accessor for AnalyticsPublisher();
  v0[9] = swift_allocObject(v1, 112LL, 15LL);
  swift_defaultActor_initialize();
  uint64_t v2 = (uint64_t **)swift_task_alloc(dword_1009BDE0C);
  v0[10] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = (uint64_t *)sub_10020FF3C;
  return sub_100713F88(v0[6]);
}

void sub_1001FEB5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X12 }

uint64_t sub_1001FEB9C(uint64_t a1, Swift::UInt a2, uint64_t a3, uint64_t a4)
{
  return sub_1006959A4(dword_1007F74FC[v4], a2, BYTE6(a4));
}

uint64_t sub_1001FEBFC(char *a1)
{
  char v2 = *a1;
  __int128 v6 = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *((void *)a1 + 3);
  uint64_t v4 = swift_task_alloc(dword_1009A5F9C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_10020FCE0;
  *(void *)(v4 + 256) = v3;
  *(_OWORD *)(v4 + 24sub_100032838(0, 7LL, 0) = v6;
  *(_BYTE *)(v4 + 264) = v2;
  return swift_task_switch(sub_1001FC144, 0LL, 0LL);
}

uint64_t sub_1001FEC7C(uint64_t a1, uint64_t a2, char a3, char a4, int a5, uint64_t a6)
{
  HIDWORD(v26) = a5;
  uint64_t v11 = type metadata accessor for DateInterval(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v28[3] = type metadata accessor for OwnedBeaconRecord(0LL);
  v28[4] = sub_100007864( (unint64_t *)&qword_10099D000,  type metadata accessor for OwnedBeaconRecord,  (uint64_t)&unk_10080B120);
  uint64_t v15 = sub_10000A7C8(v28);
  sub_10001DC4C(a1, (uint64_t)v15, type metadata accessor for OwnedBeaconRecord);
  uint64_t v16 = *(void *)(a6 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  uint64_t v17 = type metadata accessor for BeaconKeyManager(0LL);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10014F014, a6, v16, (char *)&type metadata for () + 8, v17);
  uint64_t v18 = v27;
  sub_100013044((uint64_t)v28, (uint64_t)&v27);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  uint64_t v19 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v20 = (v19 + 64) & ~v19;
  uint64_t v21 = v20 + v13;
  uint64_t v22 = swift_allocObject(&unk_100949148, v21 + 3, v19 | 7);
  *(void *)(v22 + swift_weakDestroy(v0 + 16) = v18;
  sub_100012EC0(&v27, v22 + 24);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v22 + v20, v14, v11);
  uint64_t v23 = (_BYTE *)(v22 + v21);
  *uint64_t v23 = a3;
  v23[1] = a4;
  void v23[2] = BYTE4(v26);
  swift_retain();
  unsafeFromAsyncTask<A>(_:)(&unk_1009A6090, v22, &_s9KeyResultON);
  swift_release();
  swift_release();
  uint64_t v24 = v27;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v24;
}

void *sub_1001FEE68(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = a2;
  uint64_t v23 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v4 = __chkstk_darwin(v23);
  __int128 v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  unint64_t v9 = (char *)&v21 - v8;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint64_t v12 = *(unsigned __int8 *)(v7 + 80);
    uint64_t v13 = *(void *)(v7 + 72);
    uint64_t v21 = v2;
    uint64_t v22 = (v12 + 32) & ~v12;
    uint64_t v14 = a1 + v22;
    uint64_t v15 = _swiftEmptyArrayStorage;
    do
    {
      sub_10001DC4C(v14, (uint64_t)v9, type metadata accessor for OwnedBeaconRecord);
      uint64_t v16 = sub_1005777D8()[2];
      swift_bridgeObjectRelease();
      if (v16)
      {
        uint64_t v17 = (uint64_t)v6;
        sub_10002218C((uint64_t)v9, (uint64_t)v6, type metadata accessor for OwnedBeaconRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0) {
          sub_1000328A4(0, v15[2] + 1LL, 1);
        }
        uint64_t v15 = v25;
        unint64_t v19 = v25[2];
        unint64_t v18 = v25[3];
        if (v19 >= v18 >> 1)
        {
          sub_1000328A4(v18 > 1, v19 + 1, 1);
          uint64_t v15 = v25;
        }

        _BYTE v15[2] = v19 + 1;
        uint64_t v20 = (uint64_t)v15 + v22 + v19 * v13;
        __int128 v6 = (char *)v17;
        sub_10002218C(v17, v20, type metadata accessor for OwnedBeaconRecord);
      }

      else
      {
        sub_100018C68((uint64_t)v9, type metadata accessor for OwnedBeaconRecord);
      }

      v14 += v13;
      --v11;
    }

    while (v11);
    return v25;
  }

  return result;
}

void *sub_1001FF034(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for ShareRecord(0LL);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v33 = (uint64_t)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v29 - v13;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v34 = _swiftEmptyArrayStorage;
  uint64_t v16 = *(void *)(a1 + 16);
  if (v16)
  {
    v29[1] = v4;
    int v17 = a2;
    uint64_t v18 = *(void *)(v12 + 72);
    unint64_t v30 = (*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    uint64_t v19 = a1 + v30;
    uint64_t v20 = _swiftEmptyArrayStorage;
    uint64_t v32 = v9;
    int v31 = v17;
    do
    {
      sub_10001DC4C(v19, (uint64_t)v14, type metadata accessor for ShareRecord);
      uint64_t v21 = &v14[*(int *)(v9 + 36)];
      if (*v21 == v17
        && ((uint64_t v22 = *((void *)v21 + 1), v23 = *((void *)v21 + 2), v22 == a3) ? (v24 = v23 == a4) : (v24 = 0),
            v24 || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, a3, a4, 0LL) & 1) != 0))
      {
        uint64_t v25 = a3;
        uint64_t v26 = a4;
        sub_10002218C((uint64_t)v14, v33, type metadata accessor for ShareRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0) {
          sub_100032E20(0, v20[2] + 1LL, 1);
        }
        uint64_t v20 = v34;
        unint64_t v28 = v34[2];
        unint64_t v27 = v34[3];
        if (v28 >= v27 >> 1)
        {
          sub_100032E20(v27 > 1, v28 + 1, 1);
          uint64_t v20 = v34;
        }

        void v20[2] = v28 + 1;
        sub_10002218C(v33, (uint64_t)v20 + v30 + v28 * v18, type metadata accessor for ShareRecord);
        a4 = v26;
        a3 = v25;
        uint64_t v9 = v32;
        int v17 = v31;
      }

      else
      {
        sub_100018C68((uint64_t)v14, type metadata accessor for ShareRecord);
      }

      v19 += v18;
      --v16;
    }

    while (v16);
    return v34;
  }

  return result;
}

uint64_t sub_1001FF244@<X0>(uint64_t a1@<X8>)
{
  return sub_1006C0900(*(_BYTE *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_1001FF264()
{
  uint64_t v1 = (int *)type metadata accessor for ShareRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  uint64_t v9 = v0 + v4 + v1[7];
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  uint64_t v13 = v0 + v4 + v1[8];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | 7);
}

uint64_t sub_1001FF3A8(uint64_t a1)
{
  return sub_10020F390( a1,  type metadata accessor for ShareRecord,  (uint64_t (*)(uint64_t, void, unint64_t, void, void))sub_1001F50CC);
}

uint64_t sub_1001FF3BC()
{
  return sub_10020F99C((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1001FF3D8(uint64_t a1)
{
  return sub_1001EABD8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001FF3E4()
{
  return sub_10020E1D0((uint64_t (*)(void))&type metadata accessor for UUID, sub_1001EAFE4);
}

char *sub_1001FF3F8( uint64_t a1, char a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  uint64_t v64 = a8;
  LODWORD(v63) = a6;
  LODWORD(v62) = a5;
  uint64_t v60 = a4;
  uint64_t v61 = a3;
  uint64_t v11 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  unint64_t v59 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009C0FA0);
  uint64_t inited = swift_initStackObject(v17, v69);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionWantsClientAcknowledgementKey);
  *(void *)(inited + 4sub_100032838(0, 7LL, 0) = v19;
  *(void *)(inited + 72) = &type metadata for Bool;
  *(_BYTE *)(inited + 48) = 1;
  unint64_t v20 = sub_100412CF8(inited);
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionUUIDKey);
  uint64_t v23 = v22;
  uint64_t v24 = UUID.data.getter(v21);
  uint64_t v68 = &type metadata for Data;
  *(void *)&__int128 v67 = v24;
  *((void *)&v67 + 1) = v25;
  sub_10006A358(&v67, v66);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v20);
  unint64_t v65 = v20;
  sub_10005CAD4(v66, v21, v23, isUniquelyReferenced_nonNull_native);
  unint64_t v27 = (char *)v65;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionExpectsPeerResponseKey);
    uint64_t v30 = v29;
    uint64_t v68 = &type metadata for Bool;
    LOBYTE(v67) = 1;
    sub_10006A358(&v67, v66);
    char v31 = swift_isUniquelyReferenced_nonNull_native(v27);
    unint64_t v65 = (unint64_t)v27;
    sub_10005CAD4(v66, v28, v30, v31);
    unint64_t v27 = (char *)v65;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  sub_10001581C(v61, (uint64_t)v13, &qword_10099D8A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14) == 1)
  {
    sub_100015794((uint64_t)v13, &qword_10099D8A0);
  }

  else
  {
    uint64_t v32 = v59;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v59, v13, v14);
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionPeerResponseIdentifierKey);
    uint64_t v35 = v34;
    uint64_t v36 = UUID.uuidString.getter(v33);
    uint64_t v68 = &type metadata for String;
    *(void *)&__int128 v67 = v36;
    *((void *)&v67 + 1) = v37;
    sub_10006A358(&v67, v66);
    char v38 = swift_isUniquelyReferenced_nonNull_native(v27);
    unint64_t v65 = (unint64_t)v27;
    sub_10005CAD4(v66, v33, v35, v38);
    unint64_t v27 = (char *)v65;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v32, v14);
  }

  if ((v62 & 1) == 0)
  {
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionTimeoutKey);
    uint64_t v41 = v40;
    uint64_t v68 = &type metadata for Double;
    *(void *)&__int128 v67 = v60;
    sub_10006A358(&v67, v66);
    char v42 = swift_isUniquelyReferenced_nonNull_native(v27);
    unint64_t v65 = (unint64_t)v27;
    sub_10005CAD4(v66, v39, v41, v42);
    unint64_t v27 = (char *)v65;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if ((v63 & 1) != 0)
  {
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionFireAndForgetKey);
    uint64_t v45 = v44;
    uint64_t v68 = &type metadata for Bool;
    LOBYTE(v67) = 1;
    sub_10006A358(&v67, v66);
    char v46 = swift_isUniquelyReferenced_nonNull_native(v27);
    unint64_t v65 = (unint64_t)v27;
    sub_10005CAD4(v66, v43, v45, v46);
    unint64_t v27 = (char *)v65;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (*((void *)&a9 + 1))
  {
    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionQueueOneIdentifierKey);
    uint64_t v49 = v48;
    uint64_t v68 = &type metadata for String;
    __int128 v67 = a9;
    sub_10006A358(&v67, v66);
    swift_bridgeObjectRetain(*((void *)&a9 + 1));
    char v50 = swift_isUniquelyReferenced_nonNull_native(v27);
    unint64_t v65 = (unint64_t)v27;
    sub_10005CAD4(v66, v47, v49, v50);
    unint64_t v27 = (char *)v65;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  uint64_t v51 = v64;
  int64_t v52 = *(void *)(a7 + 16);
  if (v52)
  {
    unint64_t v59 = v27;
    *(void *)&__int128 v67 = _swiftEmptyArrayStorage;
    sub_100032800(0, v52, 0);
    uint64_t v53 = sub_1006F6728(a7);
    uint64_t v63 = a7 + 56;
    uint64_t v62 = IDSRegistrationPropertySupportsBeaconSharingV2;
    uint64_t v61 = IDSRegistrationPropertySupportsSecureLocationsV1;
    uint64_t v60 = IDSRegistrationPropertySupportsIncomingFindMyV1;
    if (v53 < 0 || v53 >= 1LL << *(_BYTE *)(a7 + 32))
    {
      __break(1u);
    }

    else if (((*(void *)(v63 + (((unint64_t)v53 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v53) & 1) != 0)
    {
      if (*(_DWORD *)(a7 + 36) == v54) {
        __asm { BR              X9 }
      }

      goto LABEL_27;
    }

    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  int64_t v55 = *(void *)(v64 + 16);
  if (v55)
  {
    unint64_t v59 = v27;
    *(void *)&__int128 v67 = _swiftEmptyArrayStorage;
    sub_100032800(0, v55, 0);
    uint64_t v56 = sub_1006F6728(v51);
    uint64_t v63 = IDSRegistrationPropertySupportsBeaconSharingV2;
    uint64_t v62 = IDSRegistrationPropertySupportsSecureLocationsV1;
    uint64_t v61 = IDSRegistrationPropertySupportsIncomingFindMyV1;
    if ((v56 & 0x8000000000000000LL) == 0 && v56 < 1LL << *(_BYTE *)(v51 + 32))
    {
      if (((*(void *)(v51 + 56 + (((unint64_t)v56 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v56) & 1) != 0)
      {
        if (*(_DWORD *)(v51 + 36) == v57) {
          __asm { BR              X9 }
        }

uint64_t sub_1001FFD38()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc(dword_1009A5F6C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100015D58;
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1009A5F68 + dword_1009A5F68))(v2, v0 + 24);
}

uint64_t sub_1001FFDA0()
{
  uint64_t v2 = *(char **)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc(dword_1009A5F8C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10020FCE0;
  return ((uint64_t (*)(char *))((char *)&dword_1009A5F88 + dword_1009A5F88))(v2);
}

unint64_t sub_1001FFDF8()
{
  unint64_t result = qword_1009A5FA0;
  if (!qword_1009A5FA0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int32, &type metadata for Int32);
    atomic_store(result, (unint64_t *)&qword_1009A5FA0);
  }

  return result;
}

unint64_t sub_1001FFE3C(unint64_t result)
{
  if ((~result & 0xF000000000000007LL) != 0) {
    return sub_10006A388(result);
  }
  return result;
}

void sub_1001FFE50()
{
}

uint64_t sub_1001FFE58()
{
  return sub_10020F99C((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1001FFE68()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (uint64_t *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  return sub_1001EA180(*(void *)(v0 + 16), v0 + v2, *v3, v3[1]);
}

uint64_t sub_1001FFEB0()
{
  return sub_10020F99C((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1001FFEBC()
{
  return sub_1001EAF40( *(void (**)(void *))(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  &qword_1009A24D8);
}

uint64_t sub_1001FFEE0()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001FFF54()
{
  return sub_10020F5E8( (uint64_t (*)(void))&type metadata accessor for UUID,  (uint64_t (*)(void, void, uint64_t))sub_1001EAB1C);
}

uint64_t sub_1001FFF68()
{
  return sub_1001EA994(*(void (**)(uint64_t *))(v0 + 16));
}

uint64_t sub_1001FFF74()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1001FFFA0()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc(dword_1009A5FBC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100015D58;
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1009A5FB8 + dword_1009A5FB8))(v2, v0 + 24);
}

uint64_t sub_100200008()
{
  uint64_t v2 = *(char **)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc(dword_1009A5FCC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100200060;
  return ((uint64_t (*)(char *))((char *)&dword_1009A5FC8 + dword_1009A5FC8))(v2);
}

uint64_t sub_100200060(uint64_t a1)
{
  uint64_t v4 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_1002000B0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1002000C0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1002000EC(char a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(dispatch_group_s **)(v1 + 24);
  swift_beginAccess(v4 + 16, v5, 1LL, 0LL);
  *(_BYTE *)(v4 + swift_weakDestroy(v0 + 16) = a1;
  dispatch_group_leave(v3);
}

uint64_t sub_10020013C()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_100200178()
{
  uint64_t v2 = *(void *)(v0 + 48);
  char v3 = *(_BYTE *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v6 = swift_task_alloc(dword_1009A5FE4);
  __int128 v7 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v6;
  *(void *)uint64_t v6 = v1;
  *(void *)(v6 + 8) = sub_100015D58;
  *(void *)(v6 + 4sub_100032838(0, 7LL, 0) = v4;
  *(void *)(v6 + 48) = v5;
  *(_BYTE *)(v6 + 64) = v3;
  *(void *)(v6 + 32) = v2;
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = v7;
  return swift_task_switch(sub_1001FBBA0, 0LL, 0LL);
}

uint64_t sub_100200200()
{
  return sub_10020F99C((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10020020C()
{
  uint64_t v1 = (int *)type metadata accessor for ShareRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  uint64_t v9 = v0 + v4 + v1[7];
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  uint64_t v13 = v0 + v4 + v1[8];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | 7);
}

uint64_t sub_100200358(char a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for ShareRecord(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_1001F55D4( a1,  v1 + v4,  *(void *)(v1 + v5),  *(void *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_1002003B8( int a1, char *a2, uint64_t a3, unint64_t a4, os_log_s *a5, int a6, char *a7, void (*a8)(void, void, void), char a9, char *a10, char a11, char a12, void *a13, void (*a14)(uint64_t, uint64_t), uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void (*a19)(char *, uint64_t, uint64_t))
{
  uint64_t v167 = a8;
  uint64_t v166 = a7;
  LODWORD(v165) = a6;
  uint64_t v147 = a5;
  unint64_t v155 = a4;
  uint64_t v154 = a3;
  uint64_t v153 = a2;
  LODWORD(v152) = a1;
  uint64_t v150 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v149 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  uint64_t v148 = (char *)&v134 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v142 = type metadata accessor for DispatchTime(0LL);
  uint64_t v140 = *(void *)(v142 - 8);
  uint64_t v20 = __chkstk_darwin(v142);
  uint64_t v139 = (char *)&v134 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  uint64_t v141 = (char *)&v134 - v22;
  uint64_t v159 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v157 = *(void *)(v159 - 8);
  __chkstk_darwin(v159);
  uint64_t v158 = (char *)&v134 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v163 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v156 = *(void *)(v163 - 8);
  __chkstk_darwin(v163);
  uint64_t v162 = (char *)&v134 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v146 = (char *)&v134 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26);
  uint64_t v145 = (NSURL *)((char *)&v134 - v28);
  uint64_t v161 = type metadata accessor for UUID(0LL);
  uint64_t v160 = *(void *)(v161 - 8);
  uint64_t v29 = *(void *)(v160 + 64);
  uint64_t v30 = __chkstk_darwin(v161);
  int v151 = (char *)&v134 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v33 = (void (*)(_BYTE *, uint64_t))((char *)&v134 - v32);
  uint64_t v34 = __chkstk_darwin(v31);
  uint64_t v144 = (uint64_t)&v134 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v143 = (uint64_t)&v134 - v37;
  __chkstk_darwin(v36);
  uint64_t v164 = (char *)&v134 - v38;
  unint64_t v168 = (void *)sub_100004AEC(&qword_1009A24D8);
  __chkstk_darwin(v168);
  uint64_t v40 = (void ***)((char *)&v134 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v41 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v45 = (char *)&v134 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v43);
  uint64_t v47 = (char *)&v134 - v46;
  uint64_t v48 = swift_allocObject(&unk_100948F40, 32LL, 7LL);
  *(void *)(v48 + swift_weakDestroy(v0 + 16) = a18;
  *(void *)(v48 + 24) = a19;
  uint64_t v170 = v48;
  uint64_t v49 = a18;
  uint64_t v169 = a19;
  uint64_t v50 = swift_retain();
  static SystemInfo.lockState.getter(v50);
  (*(void (**)(char *, void, uint64_t))(v42 + 104))( v45,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v41);
  uint64_t v51 = sub_100007864( (unint64_t *)&qword_1009A2650,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  char v52 = dispatch thunk of static Equatable.== infix(_:_:)(v47, v45, v41, v51);
  uint64_t v53 = *(void (**)(char *, uint64_t))(v42 + 8);
  v53(v45, v41);
  uint64_t v54 = ((uint64_t (*)(char *, uint64_t))v53)(v47, v41);
  if ((v52 & 1) != 0)
  {
    uint64_t v55 = static os_log_type_t.error.getter(v54);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    os_log(_:dso:log:_:_:)( v55,  &_mh_execute_header,  qword_100A2B010,  "Attempt to send message before first unlock!",  44LL,  2LL,  _swiftEmptyArrayStorage);
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v57 = v56;
    uint64_t v179 = 5LL;
    unint64_t v58 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v59 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v179, v58, v57, v59);
    *uint64_t v40 = aBlock;
    swift_storeEnumTagMultiPayload(v40, v168, 1LL);
    uint64_t v60 = (uint64_t)v40;
    uint64_t v61 = v49;
LABEL_11:
    sub_1001F95A8(v60, v61, (uint64_t)v169, "Successfully distributed keys: %@", 33LL);
    sub_100015794((uint64_t)v40, &qword_1009A24D8);
    return swift_release();
  }

  char v62 = v165;
  uint64_t v63 = v166;
  uint64_t v64 = v167;
  uint64_t v65 = sub_1001E6584(v165, (uint64_t)v166, (uint64_t)v167);
  if ((v65 & 1) == 0)
  {
    uint64_t v72 = static os_log_type_t.error.getter(v65);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v73 = qword_100A2B010;
    uint64_t v74 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v75 = swift_allocObject(v74, 72LL, 7LL);
    *(_OWORD *)(v75 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v75 + 56) = &type metadata for String;
    *(void *)(v75 + 64) = sub_1000226F4();
    *(void *)(v75 + 32) = v63;
    *(void *)(v75 + 4sub_100032838(0, 7LL, 0) = v64;
    *(void *)&double v76 = swift_bridgeObjectRetain(v64).n128_u64[0];
    os_log(_:dso:log:_:_:)( v72,  &_mh_execute_header,  v73,  "Not sending since %@ has no IDS registered devices",  50LL,  2LL,  v75,  v76);
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v78 = v77;
    uint64_t v179 = 12LL;
    unint64_t v79 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v80 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v179, v79, v78, v80);
    *uint64_t v40 = aBlock;
    swift_storeEnumTagMultiPayload(v40, v168, 1LL);
    uint64_t v60 = (uint64_t)v40;
    uint64_t v61 = v49;
    goto LABEL_11;
  }

  uint64_t v136 = a15;
  BOOL v138 = a14;
  unint64_t v168 = a13;
  int v137 = a11 & 1;
  uint64_t v169 = *(void (**)(char *, uint64_t, uint64_t))(a17 + 24);
  uint64_t v66 = sub_100004AEC((uint64_t *)&unk_1009B1370);
  if ((a9 & 1) != 0)
  {
    uint64_t v135 = a17;
    uint64_t inited = swift_initStackObject(v66, v171);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(_BYTE *)(inited + 32) = v62;
    *(void *)(inited + 4sub_100032838(0, 7LL, 0) = v63;
    *(void *)(inited + 48) = v64;
    uint64_t v68 = v160;
    char v69 = v145;
    uint64_t v70 = v161;
    (*(void (**)(NSURL *, uint64_t, uint64_t, uint64_t))(v160 + 56))(v145, 1LL, 1LL, v161);
    swift_bridgeObjectRetain(v64);
    *((void *)&v132 + 1) = a16;
    *(void *)&__int128 v132 = v136;
    uint64_t v71 = v143;
    sub_1001E86B0(v152, v153, v154, v155, v147, inited, v69, a10, v143, v137, a12 & 1, v168, v138, v132);
    swift_bridgeObjectRelease();
    sub_100015794((uint64_t)v69, &qword_10099D8A0);
    uint64_t v169 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 32);
    v169(v164, v71, v70);
    uint64_t v87 = v70;
    uint64_t v88 = v68;
  }

  else
  {
    uint64_t v81 = swift_initStackObject(v66, v178);
    *(_OWORD *)(v81 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(_BYTE *)(v81 + 32) = v62;
    *(void *)(v81 + 4sub_100032838(0, 7LL, 0) = v63;
    *(void *)(v81 + 48) = v64;
    uint64_t v82 = v160;
    unint64_t v83 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v160 + 56);
    unint64_t v84 = (unsigned int (*)(void, void, void))v146;
    uint64_t v166 = a10;
    uint64_t v87 = v161;
    v83(v146, 1LL, 1LL, v161);
    swift_bridgeObjectRetain(v64);
    UUID.init()(v85);
    *((void *)&v133 + 1) = a16;
    *(void *)&__int128 v133 = v136;
    uint64_t v86 = v144;
    sub_1001DE9B8(v152, v153, v154, v155, v33, v81, v84, v166, v144, v137, a12 & 1, (uint64_t)v168, (uint64_t)v138, v133);
    uint64_t v135 = a17;
    swift_bridgeObjectRelease();
    (*(void (**)(void, uint64_t))(v82 + 8))(v33, v87);
    sub_100015794((uint64_t)v84, &qword_10099D8A0);
    uint64_t v169 = *(void (**)(char *, uint64_t, uint64_t))(v82 + 32);
    v169(v164, v86, v87);
    uint64_t v88 = v82;
  }

  uint64_t v89 = sub_100004AEC(&qword_1009A23E8);
  swift_allocObject(v89, *(unsigned int *)(v89 + 48), *(unsigned __int16 *)(v89 + 52));
  uint64_t v90 = Future.init()();
  uint64_t v91 = static os_log_type_t.default.getter(v90);
  if (qword_10099B700 != -1) {
    swift_once(&qword_10099B700, sub_100651100);
  }
  uint64_t v92 = qword_100A2B010;
  uint64_t v93 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v94 = swift_allocObject(v93, 72LL, 7LL);
  *(_OWORD *)(v94 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v95 = v164;
  uint64_t v96 = UUID.uuidString.getter(v94);
  uint64_t v98 = v97;
  *(void *)(v94 + 56) = &type metadata for String;
  *(void *)(v94 + 64) = sub_1000226F4();
  *(void *)(v94 + 32) = v96;
  *(void *)(v94 + 4sub_100032838(0, 7LL, 0) = v98;
  os_log(_:dso:log:_:_:)(v91, &_mh_execute_header, v92, "Setting %@ to pending", 21LL, 2LL, v94);
  swift_bridgeObjectRelease();
  uint64_t v99 = v135;
  unint64_t v168 = *(void **)(v135 + 152);
  uint64_t v167 = *(void (**)(void, void, void))(v88 + 16);
  uint64_t v100 = v151;
  uint64_t v101 = v87;
  v167(v151, v95, v87);
  uint64_t v102 = *(unsigned __int8 *)(v88 + 80);
  uint64_t v154 = ((v102 + 24) & ~v102) + v29;
  uint64_t v103 = (v102 + 24) & ~v102;
  uint64_t v165 = v103;
  uint64_t v166 = (char *)(v102 | 7);
  unint64_t v104 = (v154 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v105 = swift_allocObject(&unk_100948FB8, v104 + 8, v102 | 7);
  *(void *)(v105 + swift_weakDestroy(v0 + 16) = v99;
  v169((char *)(v105 + v103), (uint64_t)v100, v87);
  *(void *)(v105 + v104) = v90;
  uint64_t v176 = sub_1001FF3CC;
  uint64_t v177 = v105;
  unint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v173 = 1107296256LL;
  uint64_t v174 = sub_1001C31E8;
  uint64_t v175 = &unk_100948FD0;
  unint64_t v106 = _Block_copy(&aBlock);
  swift_retain();
  uint64_t v107 = swift_retain();
  unint64_t v108 = v162;
  static DispatchQoS.unspecified.getter(v107);
  uint64_t v179 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v109 = (char *)sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v153 = v109;
  uint64_t v110 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v150 = v110;
  uint64_t v152 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v111 = v101;
  unint64_t v155 = v90;
  uint64_t v112 = v158;
  uint64_t v113 = v159;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v179, v110, v152, v159, v109);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v108, v112, v106);
  _Block_release(v106);
  uint64_t v157 = *(void *)(v157 + 8);
  ((void (*)(char *, uint64_t))v157)(v112, v113);
  uint64_t v156 = *(void *)(v156 + 8);
  ((void (*)(char *, uint64_t))v156)(v108, v163);
  swift_release();
  char v114 = v151;
  uint64_t v115 = v164;
  v167(v151, v164, v111);
  uint64_t v116 = swift_allocObject(&unk_100949008, v104 + 16, v166);
  *(void *)(v116 + swift_weakDestroy(v0 + 16) = v99;
  v169((char *)(v116 + v165), (uint64_t)v114, v111);
  uint64_t v117 = (void (**)(uint64_t))(v116 + v104);
  uint64_t v118 = (void (*)(uint64_t))v170;
  *uint64_t v117 = sub_10020B384;
  v117[1] = v118;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_1001FF3D4, v116);
  swift_release();
  swift_release();
  uint64_t v119 = swift_allocObject(&unk_100949030, 32LL, 7LL);
  *(void *)(v119 + swift_weakDestroy(v0 + 16) = sub_10020B384;
  *(void *)(v119 + 24) = v118;
  swift_retain();
  Future.addFailure(block:)(sub_10020FF6C, v119);
  swift_release();
  uint64_t v120 = swift_release();
  BOOL v121 = v139;
  static DispatchTime.now()(v120);
  unint64_t v122 = v141;
  + infix(_:_:)(v121, *(double *)(v99 + 184));
  unint64_t v123 = *(void (**)(char *, uint64_t))(v140 + 8);
  uint64_t v124 = v142;
  v123(v121, v142);
  uint64_t v125 = v115;
  uint64_t v126 = v161;
  v167(v114, v125, v161);
  uint64_t v127 = swift_allocObject(&unk_100949058, v154, v166);
  *(void *)(v127 + swift_weakDestroy(v0 + 16) = v99;
  v169((char *)(v127 + v165), (uint64_t)v114, v126);
  uint64_t v176 = sub_1001FF3E4;
  uint64_t v177 = v127;
  unint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v173 = 1107296256LL;
  uint64_t v174 = sub_1001C31E8;
  uint64_t v175 = &unk_100949070;
  double v128 = _Block_copy(&aBlock);
  uint64_t v129 = swift_retain();
  uint64_t v130 = v162;
  static DispatchQoS.unspecified.getter(v129);
  uint64_t v179 = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v179, v150, v152, v113, v153);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v122, v130, v112, v128);
  _Block_release(v128);
  swift_release();
  ((void (*)(char *, uint64_t))v157)(v112, v113);
  ((void (*)(char *, uint64_t))v156)(v130, v163);
  v123(v122, v124);
  (*(void (**)(char *, uint64_t))(v160 + 8))(v164, v126);
  swift_release();
  return swift_release();
}

uint64_t sub_10020165C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v3 = v2[18];
  uint64_t v4 = v2[19];
  v2[18] = sub_10020EBB8;
  v2[19] = v1;
  swift_retain();
  sub_10002214C(v3, v4);
  uint64_t v5 = v2[20];
  uint64_t v6 = v2[21];
  v2[20] = sub_10020EBC0;
  v2[21] = v1;
  swift_retain();
  sub_10002214C(v5, v6);
  uint64_t v7 = swift_allocObject(&unk_100949D28, 32LL, 7LL);
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = sub_10020EBC8;
  *(void *)(v7 + 24) = v1;
  uint64_t v8 = v2[22];
  uint64_t v9 = v2[23];
  v2[22] = sub_10020EBF4;
  v2[23] = v7;
  swift_retain();
  sub_10002214C(v8, v9);
  uint64_t v10 = v2[24];
  uint64_t v11 = v2[25];
  v2[24] = sub_10020EC38;
  v2[25] = v1;
  swift_retain();
  sub_10002214C(v10, v11);
  uint64_t v12 = v2[26];
  uint64_t v13 = v2[27];
  v2[26] = sub_10020EC40;
  v2[27] = v1;
  swift_retain();
  sub_10002214C(v12, v13);
  uint64_t v14 = v2[30];
  uint64_t v15 = v2[31];
  v2[30] = sub_10020EC48;
  v2[31] = v1;
  swift_retain();
  sub_10002214C(v14, v15);
  uint64_t v16 = v2[32];
  uint64_t v17 = v2[33];
  v2[32] = sub_10020EC4C;
  v2[33] = v1;
  swift_retain();
  sub_10002214C(v16, v17);
  swift_weakInit(&aBlock, 0LL);
  swift_weakInit(v23, 0LL);
  swift_weakAssign(&aBlock, v1);
  swift_weakAssign(v23, 0LL);
  sub_10020EC50((uint64_t)&aBlock, (uint64_t)v24);
  v24[16] = 0;
  swift_beginAccess(v1 + 56, &aBlock, 33LL, 0LL);
  sub_10020EC8C((uint64_t)v24, v1 + 56);
  swift_endAccess(&aBlock);
  sub_1001DE71C();
  uint64_t v18 = *(dispatch_queue_s **)(v1 + 48);
  uint64_t v19 = swift_allocObject(&unk_100949D50, 32LL, 7LL);
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = sub_10020FF74;
  *(void *)(v19 + 24) = v1;
  v23[3] = sub_100154688;
  v23[4] = v19;
  unint64_t aBlock = _NSConcreteStackBlock;
  v23[0] = 1107296256LL;
  v23[1] = sub_100025BD4;
  void v23[2] = &unk_100949D68;
  uint64_t v20 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v18, v20);
  _Block_release(v20);
  LOBYTE(v18) = swift_isEscapingClosureAtFileLocation(v19, "", 113LL, 293LL, 30LL, 1LL);
  swift_release();
  uint64_t result = swift_release();
  return result;
}

uint64_t sub_100201900(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v68 = a2;
  LODWORD(v67) = a1;
  uint64_t v4 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = dispatch_group_create();
  uint64_t v8 = swift_allocObject(&unk_100949E40, 32LL, 7LL);
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = 0LL;
  uint64_t v66 = v8 + 16;
  *(void *)(v8 + 24) = 0LL;
  uint64_t v9 = swift_allocObject(&unk_100948F18, 24LL, 7LL);
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = 0LL;
  uint64_t v10 = (void *)(v9 + 16);
  dispatch_group_enter(v7);
  uint64_t v11 = (void *)swift_allocObject(&unk_100949E68, 40LL, 7LL);
  v11[2] = v8;
  v11[3] = v9;
  void v11[4] = v7;
  uint64_t v12 = type metadata accessor for TaskPriority(0LL);
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL);
  v13(v6, 1LL, 1LL, v12);
  uint64_t v14 = swift_allocObject(&unk_100949E90, 72LL, 7LL);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)(v14 + 24) = 0LL;
  *(void *)(v14 + 32) = sub_10020EF04;
  *(void *)(v14 + 4sub_100032838(0, 7LL, 0) = v11;
  *(_BYTE *)(v14 + 48) = (_BYTE)v67;
  *(void *)(v14 + 56) = v68;
  *(void *)(v14 + 64) = a3;
  swift_retain();
  uint64_t v68 = v9;
  uint64_t v15 = (uint64_t)v6;
  swift_retain();
  uint64_t v16 = v7;
  swift_retain();
  swift_bridgeObjectRetain(a3);
  sub_1003EDB00(v15, (uint64_t)&unk_1009A61E8, v14);
  swift_release();
  swift_release();
  OS_dispatch_group.wait()();
  swift_beginAccess(v10, v74, 0LL, 0LL);
  uint64_t v17 = *v10;
  if (!*v10)
  {
    char v62 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v13;
    uint64_t v63 = v12;
    swift_beginAccess(v66, v73, 0LL, 0LL);
    uint64_t v26 = *(void *)(v8 + 24);
    if (v26)
    {
      uint64_t v59 = v15;
      uint64_t v64 = v8;
      uint64_t v60 = *(void *)(v8 + 16);
      uint64_t v65 = v26;
      swift_bridgeObjectRetain(v26);
      uint64_t v27 = dispatch_group_create();
      uint64_t v28 = swift_allocObject(&unk_100949EB8, 24LL, 7LL);
      *(void *)(v28 + swift_weakDestroy(v0 + 16) = 0LL;
      uint64_t v29 = swift_allocObject(&unk_100948F18, 24LL, 7LL);
      *(void *)(v29 + swift_weakDestroy(v0 + 16) = 0LL;
      uint64_t v30 = (uint64_t *)(v29 + 16);
      dispatch_group_enter(v27);
      uint64_t v31 = (void *)swift_allocObject(&unk_100949EE0, 40LL, 7LL);
      void v31[2] = v28;
      void v31[3] = v29;
      v31[4] = v27;
      uint64_t v32 = qword_10099B088;
      swift_retain_n(v28, 2LL);
      swift_retain_n(v29, 2LL);
      __int128 v67 = v27;
      if (v32 != -1) {
        swift_once(&qword_10099B088, sub_1000432EC);
      }
      uint64_t v33 = qword_10099DF60;
      uint64_t v34 = sub_100004AEC(&qword_1009A61F0);
      uint64_t v35 = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10020F038, 0LL, v33, (char *)&type metadata for () + 8, v34);
      uint64_t v36 = v71;
      uint64_t v66 = v28;
      uint64_t v61 = (uint64_t *)(v28 + 16);
      if (v71)
      {
        uint64_t v37 = static os_log_type_t.debug.getter(v35);
        if (qword_10099B728 != -1) {
          swift_once(&qword_10099B728, sub_1006512E8);
        }
        os_log(_:dso:log:_:_:)( v37,  &_mh_execute_header,  qword_100A2B038,  "Using cached family correlationIdentifiers",  42LL,  2LL,  _swiftEmptyArrayStorage);
        swift_beginAccess(v28 + 16, &v71, 1LL, 0LL);
        *(void *)(v28 + swift_weakDestroy(v0 + 16) = v36;
        swift_bridgeObjectRetain(v36);
        swift_bridgeObjectRelease();
        uint64_t v38 = v67;
        dispatch_group_leave(v67);

        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v39 = qword_10099DF60;
        uint64_t v40 = sub_100004AEC(&qword_1009A6188);
        OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10020EBA4, 0LL, v39, (char *)&type metadata for () + 8, v40);
        uint64_t v41 = v71;
        if ((v72 & 1) != 0)
        {
          uint64_t v42 = sub_100004AEC((uint64_t *)&unk_1009A5470);
          swift_willThrowTypedImpl(&v71, v42, &protocol self-conformance witness table for Error);
          uint64_t v71 = v41;
          swift_errorRetain(v41);
          swift_errorRetain(v41);
          swift_willThrowTypedImpl(&v71, v42, &protocol self-conformance witness table for Error);
          swift_beginAccess(v30, &v71, 1LL, 0LL);
          uint64_t v43 = *(void *)(v29 + 16);
          *(void *)(v29 + swift_weakDestroy(v0 + 16) = v41;
          swift_errorRelease(v43);
          uint64_t v38 = v67;
          dispatch_group_leave(v67);
          sub_100044A2C(v41, 1);
          sub_100044A2C(v41, 1);
        }

        else
        {
          sub_1001DB3CC(v71);
          uint64_t v45 = v44;
          sub_100044A2C(v41, 0);
          uint64_t v46 = sub_1006F1294(v45);
          swift_bridgeObjectRelease();
          uint64_t v47 = v59;
          v62(v59, 1LL, 1LL, v63);
          uint64_t v48 = (void *)swift_allocObject(&unk_100949F08, 56LL, 7LL);
          v48[2] = 0LL;
          void v48[3] = 0LL;
          v48[4] = v46;
          void v48[5] = sub_10020F028;
          v48[6] = v31;
          swift_retain();
          sub_1003EDB00(v47, (uint64_t)&unk_1009A61F8, (uint64_t)v48);
          uint64_t v38 = v67;

          swift_release();
        }

        swift_release();
        swift_release();
        swift_release();
      }

      OS_dispatch_group.wait()();
      swift_beginAccess(v30, v70, 0LL, 0LL);
      uint64_t v49 = *v30;
      if (*v30)
      {
        uint64_t v63 = v29;
        swift_errorRetain(v49);
        uint64_t v50 = swift_bridgeObjectRelease();
        uint64_t v51 = static os_log_type_t.error.getter(v50);
        if (qword_10099B700 != -1) {
          swift_once(&qword_10099B700, sub_100651100);
        }
        uint64_t v52 = qword_100A2B010;
        uint64_t v53 = sub_100004AEC((uint64_t *)&unk_10099D740);
        uint64_t v54 = swift_allocObject(v53, 72LL, 7LL);
        *(_OWORD *)(v54 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
        uint64_t v55 = _convertErrorToNSError(_:)(v49);
        *(void *)(v54 + 56) = sub_100022898(0LL, (unint64_t *)&qword_10099DFA0, &OBJC_CLASS___NSError_ptr);
        *(void *)(v54 + 64) = sub_10020EB64( (unint64_t *)&qword_1009AC180,  (unint64_t *)&qword_10099DFA0,  &OBJC_CLASS___NSError_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
        *(void *)(v54 + 32) = v55;
        os_log(_:dso:log:_:_:)( v51,  &_mh_execute_header,  v52,  "Error getting membersCorrelationIdentifiers: %@.",  48LL,  2LL,  v54);

        swift_errorRelease(v49);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        goto LABEL_5;
      }

      uint64_t v56 = v61;
      swift_beginAccess(v61, v69, 0LL, 0LL);
      uint64_t v57 = *v56;
      if (*v56)
      {
        swift_bridgeObjectRetain(*v56);
        char v24 = sub_1004E4ABC(v60, v65, v57);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v24 & 1;
      }

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();

      swift_release();
    }

    else
    {

      swift_release();
    }

    swift_release();
    goto LABEL_6;
  }

  uint64_t v18 = swift_errorRetain(*v10);
  uint64_t v19 = static os_log_type_t.error.getter(v18);
  if (qword_10099B700 != -1) {
    swift_once(&qword_10099B700, sub_100651100);
  }
  uint64_t v20 = qword_100A2B010;
  uint64_t v21 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v22 = swift_allocObject(v21, 72LL, 7LL);
  *(_OWORD *)(v22 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v23 = _convertErrorToNSError(_:)(v17);
  *(void *)(v22 + 56) = sub_100022898(0LL, (unint64_t *)&qword_10099DFA0, &OBJC_CLASS___NSError_ptr);
  *(void *)(v22 + 64) = sub_10020EB64( (unint64_t *)&qword_1009AC180,  (unint64_t *)&qword_10099DFA0,  &OBJC_CLASS___NSError_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
  *(void *)(v22 + 32) = v23;
  os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Error getting correlationIdentifier: %@.", 40LL, 2LL, v22);

  swift_errorRelease(v17);
  swift_release();
  swift_release();
LABEL_5:
  swift_bridgeObjectRelease();
LABEL_6:
  char v24 = 0;
  return v24 & 1;
}

uint64_t sub_1002021E4( int a1, char *a2, uint64_t a3, unint64_t a4, os_log_s *a5, int a6, uint64_t a7, uint64_t a8, char a9, char *a10, char a11, char a12, void *a13, void (*a14)(uint64_t, uint64_t), __int128 a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, void *a19, char *a20)
{
  uint64_t v166 = a8;
  uint64_t v165 = a7;
  LODWORD(v164) = a6;
  uint64_t v146 = a5;
  unint64_t v154 = a4;
  uint64_t v153 = a3;
  uint64_t v152 = a2;
  LODWORD(v151) = a1;
  uint64_t v149 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v148 = *(void *)(v149 - 8);
  __chkstk_darwin(v149);
  uint64_t v147 = (char *)&v135 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v150 = type metadata accessor for DispatchTime(0LL);
  uint64_t v139 = *(void *)(v150 - 8);
  uint64_t v21 = __chkstk_darwin(v150);
  BOOL v138 = (char *)&v135 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v140 = (char *)&v135 - v23;
  uint64_t v158 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v156 = *(void *)(v158 - 8);
  __chkstk_darwin(v158);
  uint64_t v157 = (char *)&v135 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v161 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v155 = *(void *)(v161 - 8);
  __chkstk_darwin(v161);
  uint64_t v160 = (char *)&v135 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v27 = __chkstk_darwin(v26);
  uint64_t v145 = (char *)&v135 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v27);
  uint64_t v144 = (NSURL *)((char *)&v135 - v29);
  uint64_t v159 = type metadata accessor for UUID(0LL);
  uint64_t v163 = *(void *)(v159 - 8);
  uint64_t v30 = *(void *)(v163 + 64);
  uint64_t v31 = __chkstk_darwin(v159);
  int v137 = (char *)&v135 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = __chkstk_darwin(v31);
  uint64_t v143 = (char *)&v135 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v142 = (uint64_t)&v135 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v141 = (uint64_t)&v135 - v37;
  __chkstk_darwin(v36);
  uint64_t v162 = (char *)&v135 - v38;
  uint64_t v167 = sub_100004AEC(&qword_1009A24D8);
  __chkstk_darwin(v167);
  uint64_t v40 = (void ***)((char *)&v135 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v41 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v45 = (char *)&v135 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v43);
  uint64_t v47 = (char *)&v135 - v46;
  uint64_t v48 = swift_allocObject(&unk_100949558, 48LL, 7LL);
  *(void *)(v48 + swift_weakDestroy(v0 + 16) = a17;
  LODWORD(v168) = a18;
  *(_BYTE *)(v48 + 24) = a18;
  uint64_t v169 = a19;
  *(void *)(v48 + 32) = a19;
  *(void *)(v48 + 4sub_100032838(0, 7LL, 0) = a20;
  uint64_t v171 = v48;
  swift_bridgeObjectRetain(a17);
  uint64_t v170 = a20;
  swift_bridgeObjectRetain(a20);
  static SystemInfo.lockState.getter(v49);
  (*(void (**)(char *, void, uint64_t))(v42 + 104))( v45,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v41);
  uint64_t v50 = sub_100007864( (unint64_t *)&qword_1009A2650,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  char v51 = dispatch thunk of static Equatable.== infix(_:_:)(v47, v45, v41, v50);
  uint64_t v52 = *(void (**)(char *, uint64_t))(v42 + 8);
  v52(v45, v41);
  uint64_t v53 = ((uint64_t (*)(char *, uint64_t))v52)(v47, v41);
  if ((v51 & 1) != 0)
  {
    uint64_t v54 = static os_log_type_t.error.getter(v53);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    os_log(_:dso:log:_:_:)( v54,  &_mh_execute_header,  qword_100A2B010,  "Attempt to send message before first unlock!",  44LL,  2LL,  _swiftEmptyArrayStorage);
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v56 = v55;
    uint64_t v180 = 5LL;
    unint64_t v57 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v58 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    unint64_t v59 = v57;
    uint64_t v60 = v56;
LABEL_11:
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v180, v59, v60, v58);
    *uint64_t v40 = aBlock;
    swift_storeEnumTagMultiPayload(v40, v167, 1LL);
    sub_1001FA060((uint64_t)v40, a17, v168, (uint64_t)v169, (unint64_t)v170);
    sub_100015794((uint64_t)v40, &qword_1009A24D8);
    return swift_release();
  }

  char v61 = v164;
  uint64_t v62 = v165;
  uint64_t v63 = v166;
  uint64_t v64 = sub_1001E6584(v164, v165, v166);
  if ((v64 & 1) == 0)
  {
    uint64_t v72 = static os_log_type_t.error.getter(v64);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v73 = qword_100A2B010;
    uint64_t v74 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v75 = swift_allocObject(v74, 72LL, 7LL);
    *(_OWORD *)(v75 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v75 + 56) = &type metadata for String;
    *(void *)(v75 + 64) = sub_1000226F4();
    *(void *)(v75 + 32) = v62;
    *(void *)(v75 + 4sub_100032838(0, 7LL, 0) = v63;
    *(void *)&double v76 = swift_bridgeObjectRetain(v63).n128_u64[0];
    os_log(_:dso:log:_:_:)( v72,  &_mh_execute_header,  v73,  "Not sending since %@ has no IDS registered devices",  50LL,  2LL,  v75,  v76);
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v78 = v77;
    uint64_t v180 = 12LL;
    unint64_t v79 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v58 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    unint64_t v59 = v79;
    uint64_t v60 = v78;
    goto LABEL_11;
  }

  unint64_t v168 = a14;
  uint64_t v169 = a13;
  uint64_t v170 = a10;
  LODWORD(v167) = a11 & 1;
  uint64_t v136 = a16;
  uint64_t v65 = sub_100004AEC((uint64_t *)&unk_1009B1370);
  if ((a9 & 1) != 0)
  {
    uint64_t inited = swift_initStackObject(v65, v172);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(_BYTE *)(inited + 32) = v61;
    *(void *)(inited + 4sub_100032838(0, 7LL, 0) = v62;
    *(void *)(inited + 48) = v63;
    uint64_t v67 = v163;
    uint64_t v68 = v144;
    uint64_t v69 = v63;
    uint64_t v70 = v159;
    (*(void (**)(NSURL *, uint64_t, uint64_t, uint64_t))(v163 + 56))(v144, 1LL, 1LL, v159);
    swift_bridgeObjectRetain(v69);
    uint64_t v71 = v141;
    sub_1001E86B0( v151,  v152,  v153,  v154,  v146,  inited,  v68,  v170,  v141,  v167,  a12 & 1,  v169,  v168,  a15);
    swift_bridgeObjectRelease();
    sub_100015794((uint64_t)v68, &qword_10099D8A0);
    uint64_t v170 = *(char **)(v67 + 32);
    ((void (*)(char *, uint64_t, uint64_t))v170)(v162, v71, v70);
  }

  else
  {
    uint64_t v80 = swift_initStackObject(v65, v179);
    *(_OWORD *)(v80 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(_BYTE *)(v80 + 32) = v61;
    *(void *)(v80 + 4sub_100032838(0, 7LL, 0) = v62;
    *(void *)(v80 + 48) = v63;
    uint64_t v81 = v163;
    uint64_t v82 = v145;
    uint64_t v83 = v159;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v163 + 56))(v145, 1LL, 1LL, v159);
    swift_bridgeObjectRetain(v63);
    unint64_t v84 = (void (*)(_BYTE *, uint64_t))v143;
    UUID.init()(v85);
    uint64_t v86 = v142;
    sub_1001DE9B8( v151,  v152,  v153,  v154,  v84,  v80,  (unsigned int (*)(void, void, void))v82,  v170,  v142,  v167,  a12 & 1,  (uint64_t)v169,  (uint64_t)v168,  a15);
    swift_bridgeObjectRelease();
    (*(void (**)(void, uint64_t))(v81 + 8))(v84, v83);
    sub_100015794((uint64_t)v82, &qword_10099D8A0);
    uint64_t v170 = *(char **)(v81 + 32);
    ((void (*)(char *, uint64_t, uint64_t))v170)(v162, v86, v83);
    uint64_t v70 = v83;
  }

  uint64_t v87 = sub_100004AEC(&qword_1009A23E8);
  swift_allocObject(v87, *(unsigned int *)(v87 + 48), *(unsigned __int16 *)(v87 + 52));
  uint64_t v89 = Future.init()(v88);
  uint64_t v90 = static os_log_type_t.default.getter(v89);
  if (qword_10099B700 != -1) {
    swift_once(&qword_10099B700, sub_100651100);
  }
  uint64_t v91 = qword_100A2B010;
  uint64_t v92 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v93 = swift_allocObject(v92, 72LL, 7LL);
  *(_OWORD *)(v93 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v94 = v162;
  uint64_t v95 = UUID.uuidString.getter(v93);
  uint64_t v97 = v96;
  *(void *)(v93 + 56) = &type metadata for String;
  *(void *)(v93 + 64) = sub_1000226F4();
  *(void *)(v93 + 32) = v95;
  *(void *)(v93 + 4sub_100032838(0, 7LL, 0) = v97;
  os_log(_:dso:log:_:_:)(v90, &_mh_execute_header, v91, "Setting %@ to pending", 21LL, 2LL, v93);
  swift_bridgeObjectRelease();
  uint64_t v98 = v136;
  uint64_t v166 = *(void *)(v136 + 152);
  uint64_t v99 = v163;
  uint64_t v169 = *(void **)(v163 + 16);
  uint64_t v100 = v137;
  ((void (*)(char *, char *, uint64_t))v169)(v137, v94, v70);
  uint64_t v101 = *(unsigned __int8 *)(v99 + 80);
  uint64_t v164 = ((v101 + 24) & ~v101) + v30;
  uint64_t v102 = (v101 + 24) & ~v101;
  uint64_t v167 = v102;
  unint64_t v168 = (void (*)(uint64_t, uint64_t))(v101 | 7);
  unint64_t v103 = (v164 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v104 = swift_allocObject(&unk_1009495D0, v103 + 8, v101 | 7);
  *(void *)(v104 + swift_weakDestroy(v0 + 16) = v98;
  ((void (*)(uint64_t, char *, uint64_t))v170)(v104 + v102, v100, v70);
  *(void *)(v104 + v103) = v89;
  uint64_t v177 = sub_1001FF3CC;
  uint64_t v178 = v104;
  unint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v174 = 1107296256LL;
  uint64_t v175 = sub_1001C31E8;
  uint64_t v176 = &unk_1009495E8;
  uint64_t v105 = _Block_copy(&aBlock);
  uint64_t v165 = v89;
  unint64_t v106 = v105;
  swift_retain();
  uint64_t v107 = swift_retain();
  unint64_t v108 = v160;
  static DispatchQoS.unspecified.getter(v107);
  uint64_t v180 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v109 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  unint64_t v154 = v109;
  uint64_t v110 = (char *)sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v152 = v110;
  uint64_t v153 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v111 = v157;
  uint64_t v112 = v110;
  uint64_t v113 = v158;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v180, v112, v153, v158, v109);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v108, v111, v106);
  _Block_release(v106);
  uint64_t v156 = *(void *)(v156 + 8);
  ((void (*)(char *, uint64_t))v156)(v111, v113);
  uint64_t v155 = *(void *)(v155 + 8);
  ((void (*)(char *, uint64_t))v155)(v108, v161);
  swift_release();
  ((void (*)(char *, char *, uint64_t))v169)(v100, v162, v70);
  uint64_t v114 = swift_allocObject(&unk_100949620, v103 + 16, v168);
  *(void *)(v114 + swift_weakDestroy(v0 + 16) = v98;
  uint64_t v115 = v70;
  uint64_t v116 = v170;
  ((void (*)(uint64_t, char *, uint64_t))v170)(v114 + v167, v100, v115);
  uint64_t v117 = (void (**)(uint64_t))(v114 + v103);
  uint64_t v118 = (void (*)(uint64_t))v171;
  *uint64_t v117 = sub_10020D06C;
  v117[1] = v118;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_1001FF3D4, v114);
  swift_release();
  swift_release();
  uint64_t v119 = swift_allocObject(&unk_100949648, 32LL, 7LL);
  *(void *)(v119 + swift_weakDestroy(v0 + 16) = sub_10020D06C;
  *(void *)(v119 + 24) = v118;
  swift_retain();
  Future.addFailure(block:)(sub_10020FF6C, v119);
  swift_release();
  uint64_t v120 = swift_release();
  BOOL v121 = v138;
  static DispatchTime.now()(v120);
  unint64_t v122 = v140;
  + infix(_:_:)(v121, *(double *)(v98 + 184));
  int v151 = *(void (**)(char *, uint64_t))(v139 + 8);
  unint64_t v123 = v116;
  v151(v121, v150);
  uint64_t v124 = v100;
  uint64_t v125 = v100;
  uint64_t v126 = v162;
  uint64_t v127 = v159;
  ((void (*)(char *, char *, uint64_t))v169)(v125, v162, v159);
  uint64_t v128 = swift_allocObject(&unk_100949670, v164, v168);
  *(void *)(v128 + swift_weakDestroy(v0 + 16) = v98;
  uint64_t v129 = v124;
  uint64_t v130 = v127;
  ((void (*)(uint64_t, char *, uint64_t))v123)(v128 + v167, v129, v127);
  uint64_t v177 = sub_1001FF3E4;
  uint64_t v178 = v128;
  unint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v174 = 1107296256LL;
  uint64_t v175 = sub_1001C31E8;
  uint64_t v176 = &unk_100949688;
  BOOL v131 = _Block_copy(&aBlock);
  uint64_t v132 = swift_retain();
  __int128 v133 = v160;
  static DispatchQoS.unspecified.getter(v132);
  uint64_t v180 = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v180, v152, v153, v113, v154);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v122, v133, v111, v131);
  _Block_release(v131);
  swift_release();
  ((void (*)(char *, uint64_t))v156)(v111, v113);
  ((void (*)(char *, uint64_t))v155)(v133, v161);
  v151(v122, v150);
  (*(void (**)(char *, uint64_t))(v163 + 8))(v126, v130);
  swift_release();
  return swift_release();
}

uint64_t sub_100203454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v142 = a2;
  uint64_t v134 = sub_100004AEC(&qword_1009A6100);
  __chkstk_darwin(v134);
  uint64_t v137 = (uint64_t)&v122 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for ShareInstruction(0LL);
  uint64_t v123 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v125 = (uint64_t)&v122 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v124 = v10;
  __chkstk_darwin(v9);
  uint64_t v122 = (uint64_t)&v122 - v11;
  uint64_t v133 = type metadata accessor for Date(0LL);
  uint64_t v131 = *(void *)(v133 - 8);
  __chkstk_darwin(v133);
  uint64_t v132 = (char *)&v122 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_1009A6108);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v122 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v143 = type metadata accessor for ShareRecord(0LL);
  *(void *)&__int128 v141 = *(void *)(v143 - 8);
  uint64_t v16 = __chkstk_darwin(v143);
  uint64_t v128 = (char *)&v122 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v127 = (uint64_t)&v122 - v19;
  __chkstk_darwin(v18);
  uint64_t v129 = (char *)&v122 - v20;
  uint64_t v21 = swift_allocObject(&unk_100949828, 32LL, 7LL);
  uint64_t v135 = a3;
  uint64_t v136 = a4;
  *(void *)(v21 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(v21 + 24) = a4;
  uint64_t v139 = v21;
  uint64_t v22 = swift_retain();
  LODWORD(v14sub_100032838(0, 7LL, 0) = static os_log_type_t.default.getter(v22);
  if (qword_10099B700 != -1) {
    swift_once(&qword_10099B700, sub_100651100);
  }
  uint64_t v23 = qword_100A2B010;
  uint64_t v144 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v24 = swift_allocObject(v144, 112LL, 7LL);
  __int128 v126 = xmmword_1007E4750;
  *(_OWORD *)(v24 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v25 = a1 + *(int *)(v8 + 24);
  uint64_t v26 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v27 = v25 + *(int *)(v26 + 20);
  uint64_t v28 = UUID.uuidString.getter(v26);
  uint64_t v30 = v29;
  *(void *)(v24 + 56) = &type metadata for String;
  unint64_t v31 = sub_1000226F4();
  *(void *)(v24 + 64) = v31;
  *(void *)(v24 + 32) = v28;
  *(void *)(v24 + 4sub_100032838(0, 7LL, 0) = v30;
  uint64_t v32 = *(int *)(v8 + 32);
  uint64_t v130 = v8;
  uint64_t v138 = a1;
  uint64_t v33 = a1 + v32;
  uint64_t v34 = v27;
  uint64_t v35 = UUID.uuidString.getter(v31);
  *(void *)(v24 + 96) = &type metadata for String;
  *(void *)(v24 + 104) = v31;
  unint64_t v145 = v31;
  *(void *)(v24 + 72) = v35;
  *(void *)(v24 + 8sub_100032838(0, 7LL, 0) = v36;
  os_log(_:dso:log:_:_:)( v140,  &_mh_execute_header,  v23,  "1) Send Family Share for beacon: %@, shareIdentifier: %@",  56LL,  2LL,  v24);
  swift_bridgeObjectRelease();
  uint64_t v37 = v142;
  sub_1001E6A88(v33, (uint64_t)v15);
  uint64_t v38 = (int *)v143;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v141 + 48))(v15, 1LL, v143) != 1)
  {
    uint64_t v140 = v33;
    uint64_t v52 = v129;
    uint64_t v79 = sub_10002218C((uint64_t)v15, (uint64_t)v129, type metadata accessor for ShareRecord);
    uint64_t v80 = static os_log_type_t.default.getter(v79);
    uint64_t v81 = qword_100A2B010;
    uint64_t v82 = v144;
    uint64_t v83 = swift_allocObject(v144, 72LL, 7LL);
    __int128 v141 = xmmword_1007E67D0;
    *(_OWORD *)(v83 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v84 = v127;
    sub_10001DC4C((uint64_t)v52, v127, type metadata accessor for ShareRecord);
    uint64_t v85 = String.init<A>(describing:)(v84, v38);
    unint64_t v86 = v145;
    *(void *)(v83 + 56) = &type metadata for String;
    *(void *)(v83 + 64) = v86;
    *(void *)(v83 + 32) = v85;
    *(void *)(v83 + 4sub_100032838(0, 7LL, 0) = v87;
    os_log(_:dso:log:_:_:)(v80, &_mh_execute_header, v81, "Considering existing ShareRecord %@", 35LL, 2LL, v83);
    uint64_t v88 = swift_bridgeObjectRelease();
    uint64_t v89 = (uint64_t *)&v52[v38[10]];
    uint64_t v91 = *v89;
    unint64_t v90 = v89[1];
    uint64_t v92 = HIBYTE(v90) & 0xF;
    if ((v90 & 0x2000000000000000LL) == 0) {
      uint64_t v92 = v91 & 0xFFFFFFFFFFFFLL;
    }
    if (v92)
    {
      uint64_t v93 = static os_log_type_t.default.getter(v88);
      uint64_t v94 = qword_100A2B010;
      uint64_t v95 = swift_allocObject(v82, 72LL, 7LL);
      *(_OWORD *)(v95 + swift_weakDestroy(v0 + 16) = v141;
      unint64_t v96 = v145;
      *(void *)(v95 + 56) = &type metadata for String;
      *(void *)(v95 + 64) = v96;
      *(void *)(v95 + 32) = v91;
      *(void *)(v95 + 4sub_100032838(0, 7LL, 0) = v90;
      *(void *)&double v97 = swift_bridgeObjectRetain(v90).n128_u64[0];
      os_log(_:dso:log:_:_:)( v93,  &_mh_execute_header,  v94,  "Ignoring request to share. ShareRecord already accepted (correlationIdentifier: %@)",  83LL,  2LL,  v95,  v97);
LABEL_17:
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }

    uint64_t v105 = *(void *)(v37 + 344);
    sub_1006C11DC((uint64_t)&v52[v38[7]], 0);
    char v107 = v106;
    uint64_t v108 = v138;
    uint64_t v109 = v122;
    uint64_t v110 = sub_10001DC4C(v138, v122, type metadata accessor for ShareInstruction);
    if ((v107 & 1) != 0)
    {
      __chkstk_darwin(v110);
      *(&v122 - 4) = v105;
      *((_BYTE *)&v122 - 24) = 0;
      *(&v122 - 2) = v111;
      uint64_t v112 = (uint64_t)v132;
      uint64_t v113 = v133;
      OS_dispatch_queue.sync<A>(execute:)(sub_10020FF50, &v122 - 6, v133);
      sub_1006C11DC(v112, 0);
      char v115 = v114;
      uint64_t v116 = *(void (**)(uint64_t, uint64_t))(v131 + 8);
      v116(v112, v113);
      uint64_t v117 = sub_100018C68(v109, type metadata accessor for ShareInstruction);
      unint64_t v118 = v145;
      if ((v115 & 1) != 0)
      {
        static Date.trustedNow.getter(v112);
        uint64_t v119 = v140;
        sub_1006C0AD4(v140, v112, 0);
        v116(v112, v113);
        sub_1006C0F20(v119, 1);
        sub_1001E6B4C(v108, v37);
LABEL_18:
        uint64_t v120 = v137;
        sub_10001DC4C((uint64_t)v52, v137, type metadata accessor for ShareRecord);
        swift_storeEnumTagMultiPayload(v120, v134, 0LL);
        sub_1001E6798(v120, v135, v136);
        sub_100015794(v120, &qword_1009A6100);
        goto LABEL_19;
      }
    }

    else
    {
      uint64_t v117 = sub_100018C68(v109, type metadata accessor for ShareInstruction);
      unint64_t v118 = v145;
    }

    uint64_t v98 = static os_log_type_t.default.getter(v117);
    uint64_t v99 = qword_100A2B010;
    uint64_t v100 = swift_allocObject(v144, 72LL, 7LL);
    *(_OWORD *)(v100 + swift_weakDestroy(v0 + 16) = v141;
    uint64_t v101 = UUID.uuidString.getter(v100);
    *(void *)(v100 + 56) = &type metadata for String;
    *(void *)(v100 + 64) = v118;
LABEL_16:
    *(void *)(v100 + 32) = v101;
    *(void *)(v100 + 4sub_100032838(0, 7LL, 0) = v102;
    os_log(_:dso:log:_:_:)( v98,  &_mh_execute_header,  v99,  "Ignoring request to share. ShareRecord last attempted recently. (shareIdentifier: %@)",  85LL,  2LL,  v100,  v103);
    goto LABEL_17;
  }

  uint64_t v39 = sub_100015794((uint64_t)v15, &qword_1009A6108);
  uint64_t v40 = static os_log_type_t.default.getter(v39);
  uint64_t v41 = qword_100A2B010;
  uint64_t v42 = swift_allocObject(v144, 112LL, 7LL);
  *(_OWORD *)(v42 + swift_weakDestroy(v0 + 16) = v126;
  uint64_t v43 = UUID.uuidString.getter(v42);
  unint64_t v44 = v145;
  *(void *)(v42 + 56) = &type metadata for String;
  *(void *)(v42 + 64) = v44;
  *(void *)(v42 + 32) = v43;
  *(void *)(v42 + 4sub_100032838(0, 7LL, 0) = v45;
  uint64_t v46 = UUID.uuidString.getter(v43);
  *(void *)(v42 + 96) = &type metadata for String;
  *(void *)(v42 + 104) = v44;
  *(void *)(v42 + 72) = v46;
  *(void *)(v42 + 8sub_100032838(0, 7LL, 0) = v47;
  os_log(_:dso:log:_:_:)( v40,  &_mh_execute_header,  v41,  "Did not find existing ShareRecord for beacon: %@, shareIdentifier: %@",  69LL,  2LL,  v42);
  swift_bridgeObjectRelease();
  uint64_t v48 = *(void *)(v37 + 128);
  uint64_t v49 = *(void *)(v48 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  uint64_t v50 = type metadata accessor for BeaconKeyManager(0LL);
  *(void *)&__int128 v141 = v48;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10014F014, v48, v49, (char *)&type metadata for () + 8, v50);
  uint64_t v51 = sub_1007A50A4(v34);
  swift_release();
  uint64_t v52 = v128;
  uint64_t v53 = &v128[v38[5]];
  uint64_t v54 = type metadata accessor for UUID(0LL);
  uint64_t v55 = v37;
  uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v54 - 8) + 16LL);
  v56(v53, v33, v54);
  v56(&v52[v38[6]], v34, v54);
  uint64_t v57 = v55;
  static Date.trustedNow.getter((uint64_t)&v52[v38[7]]);
  uint64_t v58 = v130;
  uint64_t v59 = v138;
  sub_10001581C(v138 + *(int *)(v130 + 36), (uint64_t)&v52[v38[8]], (uint64_t *)&unk_10099D720);
  uint64_t v60 = v59 + *(int *)(v58 + 28);
  char v61 = *(_BYTE *)v60;
  *(_OWORD *)uint64_t v52 = xmmword_1007E4480;
  uint64_t v62 = &v52[v38[9]];
  char *v62 = v61;
  uint64_t v63 = *(void *)(v60 + 16);
  *((void *)v62 + 1) = *(void *)(v60 + 8);
  *((void *)v62 + 2) = v63;
  uint64_t v64 = &v52[v38[10]];
  *(void *)uint64_t v64 = 0LL;
  *((void *)v64 + 1) = 0xE000000000000000LL;
  *(void *)&v52[v38[11]] = v51;
  v52[v38[12]] = 1;
  uint64_t v65 = *(void *)(v55 + 344);
  uint64_t v66 = __chkstk_darwin(v63);
  *(&v122 - 4) = v65;
  *((_BYTE *)&v122 - 24) = 0;
  *(&v122 - 2) = v33;
  swift_bridgeObjectRetain(v66);
  uint64_t v67 = (uint64_t)v132;
  uint64_t v68 = v133;
  OS_dispatch_queue.sync<A>(execute:)(sub_10020FF50, &v122 - 6, v133);
  sub_1006C11DC(v67, 0);
  LOBYTE(v59) = v69;
  uint64_t v70 = *(uint64_t (**)(uint64_t, uint64_t))(v131 + 8);
  uint64_t v71 = v70(v67, v68);
  if ((v59 & 1) == 0)
  {
    uint64_t v98 = static os_log_type_t.default.getter(v71);
    uint64_t v99 = qword_100A2B010;
    uint64_t v100 = swift_allocObject(v144, 72LL, 7LL);
    *(_OWORD *)(v100 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v101 = UUID.uuidString.getter(v100);
    unint64_t v104 = v145;
    *(void *)(v100 + 56) = &type metadata for String;
    *(void *)(v100 + 64) = v104;
    goto LABEL_16;
  }

  static Date.trustedNow.getter(v67);
  sub_1006C0AD4(v33, v67, 0);
  v70(v67, v68);
  sub_1006C0F20(v33, 1);
  uint64_t v72 = v125;
  sub_10001DC4C(v138, v125, type metadata accessor for ShareInstruction);
  uint64_t v73 = *(unsigned __int8 *)(v123 + 80);
  uint64_t v74 = (v73 + 24) & ~v73;
  unint64_t v75 = (v124 + v74 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v76 = swift_allocObject(&unk_100949850, v75 + 16, v73 | 7);
  *(void *)(v76 + swift_weakDestroy(v0 + 16) = v57;
  sub_10002218C(v72, v76 + v74, type metadata accessor for ShareInstruction);
  uint64_t v77 = (uint64_t (**)(uint64_t))(v76 + v75);
  uint64_t v78 = (uint64_t (*)(uint64_t))v139;
  *uint64_t v77 = sub_10020DB5C;
  v77[1] = v78;
  swift_retain();
  swift_retain();
  sub_1004FC74C((uint64_t)v52, 0, (void (*)(char *))sub_10020DE98, v76);
  swift_release();
LABEL_19:
  sub_100018C68((uint64_t)v52, type metadata accessor for ShareRecord);
  return swift_release();
}

uint64_t sub_100203FD8( int a1, char *a2, uint64_t a3, unint64_t a4, os_log_s *a5, int a6, void (*a7)(void, void), uint64_t a8, char a9, char *a10, char a11, char a12, void *a13, void (*a14)(uint64_t, uint64_t), uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, void (*a19)(uint64_t, uint64_t), void *a20, uint64_t a21, char *a22)
{
  uint64_t v176 = a8;
  uint64_t v175 = a7;
  LODWORD(v174) = a6;
  uint64_t v157 = a5;
  unint64_t v164 = a4;
  uint64_t v163 = a3;
  uint64_t v162 = a2;
  LODWORD(v161) = a1;
  uint64_t v181 = a22;
  uint64_t v160 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v159 = *(void *)(v160 - 8);
  __chkstk_darwin(v160);
  uint64_t v158 = (char *)&v146 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v151 = type metadata accessor for DispatchTime(0LL);
  uint64_t v149 = *(void *)(v151 - 8);
  uint64_t v23 = __chkstk_darwin(v151);
  uint64_t v148 = (char *)&v146 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23);
  uint64_t v150 = (char *)&v146 - v25;
  uint64_t v168 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v166 = *(void *)(v168 - 8);
  __chkstk_darwin(v168);
  uint64_t v167 = (char *)&v146 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v170 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v165 = *(void *)(v170 - 8);
  __chkstk_darwin(v170);
  uint64_t v169 = (char *)&v146 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v29 = __chkstk_darwin(v28);
  uint64_t v156 = (char *)&v146 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v29);
  uint64_t v155 = (NSURL *)((char *)&v146 - v31);
  uint64_t v173 = type metadata accessor for UUID(0LL);
  uint64_t v172 = *(void *)(v173 - 8);
  uint64_t v32 = *(void *)(v172 + 64);
  uint64_t v33 = __chkstk_darwin(v173);
  uint64_t v147 = (char *)&v146 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = __chkstk_darwin(v33);
  unint64_t v154 = (char *)&v146 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v153 = (uint64_t)&v146 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v152 = (uint64_t)&v146 - v39;
  __chkstk_darwin(v38);
  uint64_t v171 = (char *)&v146 - v40;
  uint64_t v177 = sub_100004AEC(&qword_1009A24D8);
  __chkstk_darwin(v177);
  uint64_t v42 = (void ***)((char *)&v146 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v43 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = __chkstk_darwin(v43);
  uint64_t v47 = (char *)&v146 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v45);
  uint64_t v49 = (char *)&v146 - v48;
  uint64_t v50 = swift_allocObject(&unk_100948D88, 56LL, 7LL);
  LODWORD(v178) = a18;
  *(_BYTE *)(v50 + swift_weakDestroy(v0 + 16) = a18;
  uint64_t v179 = a19;
  *(void *)(v50 + 24) = a19;
  *(void *)(v50 + 32) = a20;
  uint64_t v182 = v50;
  uint64_t v51 = v181;
  *(void *)(v50 + 4sub_100032838(0, 7LL, 0) = a21;
  *(void *)(v50 + 48) = v51;
  uint64_t v180 = a20;
  swift_bridgeObjectRetain(a20);
  swift_retain();
  uint64_t v52 = v51;
  static SystemInfo.lockState.getter(v52);
  (*(void (**)(char *, void, uint64_t))(v44 + 104))( v47,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v43);
  uint64_t v53 = sub_100007864( (unint64_t *)&qword_1009A2650,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  LOBYTE(v51) = dispatch thunk of static Equatable.== infix(_:_:)(v49, v47, v43, v53);
  uint64_t v54 = *(void (**)(char *, uint64_t))(v44 + 8);
  v54(v47, v43);
  uint64_t v55 = ((uint64_t (*)(char *, uint64_t))v54)(v49, v43);
  if ((v51 & 1) != 0)
  {
    uint64_t v56 = static os_log_type_t.error.getter(v55);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    os_log(_:dso:log:_:_:)( v56,  &_mh_execute_header,  qword_100A2B010,  "Attempt to send message before first unlock!",  44LL,  2LL,  _swiftEmptyArrayStorage);
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v58 = v57;
    uint64_t v191 = 5LL;
    unint64_t v59 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v60 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v191, v59, v58, v60);
    *uint64_t v42 = aBlock;
    swift_storeEnumTagMultiPayload(v42, v177, 1LL);
    uint64_t v61 = (uint64_t)v42;
    uint64_t v62 = v178;
    uint64_t v63 = v179;
    unint64_t v64 = (unint64_t)v180;
    uint64_t v65 = a21;
    uint64_t v66 = (dispatch_group_s *)v52;
LABEL_11:
    sub_1001EB478(v61, v62, (uint64_t)v63, v64, v65, v66);
    sub_100015794((uint64_t)v42, &qword_1009A24D8);
    return swift_release();
  }

  uint64_t v67 = (dispatch_group_s *)v52;
  char v68 = (char)v174;
  char v69 = v175;
  uint64_t v70 = v176;
  uint64_t v71 = sub_1001E6584(v174, (uint64_t)v175, v176);
  if ((v71 & 1) == 0)
  {
    uint64_t v81 = static os_log_type_t.error.getter(v71);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v82 = qword_100A2B010;
    uint64_t v83 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v84 = swift_allocObject(v83, 72LL, 7LL);
    *(_OWORD *)(v84 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v84 + 56) = &type metadata for String;
    *(void *)(v84 + 64) = sub_1000226F4();
    *(void *)(v84 + 32) = v69;
    *(void *)(v84 + 4sub_100032838(0, 7LL, 0) = v70;
    *(void *)&double v85 = swift_bridgeObjectRetain(v70).n128_u64[0];
    os_log(_:dso:log:_:_:)( v81,  &_mh_execute_header,  v82,  "Not sending since %@ has no IDS registered devices",  50LL,  2LL,  v84,  v85);
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v87 = v86;
    uint64_t v191 = 12LL;
    unint64_t v88 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v89 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v191, v88, v87, v89);
    *uint64_t v42 = aBlock;
    swift_storeEnumTagMultiPayload(v42, v177, 1LL);
    uint64_t v61 = (uint64_t)v42;
    uint64_t v62 = v178;
    uint64_t v63 = v179;
    unint64_t v64 = (unint64_t)v180;
    uint64_t v65 = a21;
    uint64_t v66 = v67;
    goto LABEL_11;
  }

  char v72 = v68;
  uint64_t v178 = a15;
  uint64_t v179 = a14;
  uint64_t v180 = a13;
  uint64_t v181 = a10;
  uint64_t v73 = *(void *)(a17 + 24);
  uint64_t v74 = sub_100004AEC((uint64_t *)&unk_1009B1370);
  if ((a9 & 1) != 0)
  {
    uint64_t v146 = a17;
    uint64_t inited = swift_initStackObject(v74, v183);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(_BYTE *)(inited + 32) = v72;
    *(void *)(inited + 4sub_100032838(0, 7LL, 0) = v69;
    *(void *)(inited + 48) = v70;
    uint64_t v76 = v172;
    uint64_t v77 = v155;
    uint64_t v78 = v70;
    uint64_t v79 = v173;
    (*(void (**)(NSURL *, uint64_t, uint64_t, uint64_t))(v172 + 56))(v155, 1LL, 1LL, v173);
    swift_bridgeObjectRetain(v78);
    *((void *)&v144 + 1) = a16;
    *(void *)&__int128 v144 = v178;
    uint64_t v80 = v152;
    sub_1001E86B0( v161,  v162,  v163,  v164,  v157,  inited,  v77,  v181,  v152,  a11 & 1,  a12 & 1,  v180,  v179,  v144);
    swift_bridgeObjectRelease();
    sub_100015794((uint64_t)v77, &qword_10099D8A0);
    uint64_t v181 = *(char **)(v76 + 32);
    ((void (*)(char *, uint64_t, uint64_t))v181)(v171, v80, v79);
    uint64_t v97 = v79;
  }

  else
  {
    uint64_t v90 = swift_initStackObject(v74, v190);
    *(_OWORD *)(v90 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(_BYTE *)(v90 + 32) = v72;
    *(void *)(v90 + 4sub_100032838(0, 7LL, 0) = v69;
    *(void *)(v90 + 48) = v70;
    uint64_t v91 = v172;
    uint64_t v92 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v172 + 56);
    uint64_t v93 = (unsigned int (*)(void, void, void))v156;
    uint64_t v177 = v73;
    uint64_t v97 = v173;
    v92(v156, 1LL, 1LL, v173);
    swift_bridgeObjectRetain(v70);
    uint64_t v94 = (void (*)(_BYTE *, uint64_t))v154;
    UUID.init()(v95);
    *((void *)&v145 + 1) = a16;
    *(void *)&__int128 v145 = v178;
    uint64_t v96 = v153;
    sub_1001DE9B8( v161,  v162,  v163,  v164,  v94,  v90,  v93,  v181,  v153,  a11 & 1,  a12 & 1,  (uint64_t)v180,  (uint64_t)v179,  v145);
    uint64_t v146 = a17;
    swift_bridgeObjectRelease();
    (*(void (**)(void, uint64_t))(v91 + 8))(v94, v97);
    sub_100015794((uint64_t)v93, &qword_10099D8A0);
    uint64_t v181 = *(char **)(v91 + 32);
    ((void (*)(char *, uint64_t, uint64_t))v181)(v171, v96, v97);
  }

  uint64_t v98 = sub_100004AEC(&qword_1009A23E8);
  swift_allocObject(v98, *(unsigned int *)(v98 + 48), *(unsigned __int16 *)(v98 + 52));
  uint64_t v100 = Future.init()(v99);
  uint64_t v101 = static os_log_type_t.default.getter(v100);
  if (qword_10099B700 != -1) {
    swift_once(&qword_10099B700, sub_100651100);
  }
  uint64_t v102 = qword_100A2B010;
  uint64_t v103 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v104 = swift_allocObject(v103, 72LL, 7LL);
  *(_OWORD *)(v104 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v105 = v171;
  uint64_t v106 = UUID.uuidString.getter(v104);
  uint64_t v108 = v107;
  *(void *)(v104 + 56) = &type metadata for String;
  *(void *)(v104 + 64) = sub_1000226F4();
  *(void *)(v104 + 32) = v106;
  *(void *)(v104 + 4sub_100032838(0, 7LL, 0) = v108;
  os_log(_:dso:log:_:_:)(v101, &_mh_execute_header, v102, "Setting %@ to pending", 21LL, 2LL, v104);
  swift_bridgeObjectRelease();
  uint64_t v109 = v146;
  uint64_t v178 = *(void *)(v146 + 152);
  uint64_t v110 = v172;
  uint64_t v161 = *(void (**)(char *, char *, uint64_t))(v172 + 16);
  uint64_t v111 = v147;
  v161(v147, v105, v97);
  uint64_t v112 = *(unsigned __int8 *)(v110 + 80);
  uint64_t v176 = ((v112 + 24) & ~v112) + v32;
  uint64_t v113 = (void (*)(uint64_t, uint64_t))((v112 + 24) & ~v112);
  uint64_t v179 = v113;
  uint64_t v180 = (void *)(v112 | 7);
  unint64_t v114 = (v176 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v115 = swift_allocObject(&unk_100948E00, v114 + 8, v112 | 7);
  *(void *)(v115 + swift_weakDestroy(v0 + 16) = v109;
  uint64_t v116 = (char *)v113 + v115;
  uint64_t v117 = v181;
  ((void (*)(char *, char *, uint64_t))v181)(v116, v111, v97);
  uint64_t v181 = v117;
  *(void *)(v115 + v114) = v100;
  Swift::Int v188 = sub_1001FF3CC;
  uint64_t v189 = v115;
  unint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v185 = 1107296256LL;
  uint64_t v186 = sub_1001C31E8;
  uint64_t v187 = &unk_100948E18;
  unint64_t v118 = _Block_copy(&aBlock);
  uint64_t v177 = v100;
  uint64_t v119 = v118;
  swift_retain();
  uint64_t v120 = swift_retain();
  BOOL v121 = v169;
  static DispatchQoS.unspecified.getter(v120);
  uint64_t v191 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v122 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v163 = v122;
  uint64_t v123 = (char *)sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v162 = v123;
  unint64_t v164 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v124 = v167;
  uint64_t v125 = v123;
  uint64_t v126 = v168;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v191, v125, v164, v168, v122);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v121, v124, v119);
  _Block_release(v119);
  uint64_t v175 = *(void (**)(void, void))(v166 + 8);
  v175(v124, v126);
  uint64_t v174 = *(void (**)(char *, uint64_t))(v165 + 8);
  v174(v121, v170);
  swift_release();
  uint64_t v127 = v173;
  uint64_t v128 = v161;
  v161(v111, v171, v173);
  uint64_t v129 = swift_allocObject(&unk_100948E50, v114 + 16, v180);
  *(void *)(v129 + swift_weakDestroy(v0 + 16) = v109;
  ((void (*)(char *, char *, uint64_t))v117)((char *)v179 + v129, v111, v127);
  uint64_t v130 = (void (**)(uint64_t))(v129 + v114);
  uint64_t v131 = (void (*)(uint64_t))v182;
  char *v130 = sub_10020B1AC;
  v130[1] = v131;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_1001FF3D4, v129);
  swift_release();
  swift_release();
  uint64_t v132 = swift_allocObject(&unk_100948E78, 32LL, 7LL);
  *(void *)(v132 + swift_weakDestroy(v0 + 16) = sub_10020B1AC;
  *(void *)(v132 + 24) = v131;
  swift_retain();
  Future.addFailure(block:)(sub_10020FF6C, v132);
  swift_release();
  uint64_t v133 = swift_release();
  uint64_t v134 = v148;
  static DispatchTime.now()(v133);
  uint64_t v135 = v150;
  + infix(_:_:)(v134, *(double *)(v109 + 184));
  uint64_t v166 = *(void *)(v149 + 8);
  uint64_t v136 = v151;
  ((void (*)(char *, uint64_t))v166)(v134, v151);
  uint64_t v137 = v171;
  uint64_t v138 = v173;
  v128(v111, v171, v173);
  uint64_t v139 = swift_allocObject(&unk_100948EA0, v176, v180);
  *(void *)(v139 + swift_weakDestroy(v0 + 16) = v109;
  ((void (*)(char *, char *, uint64_t))v181)((char *)v179 + v139, v111, v138);
  Swift::Int v188 = sub_1001FF3E4;
  uint64_t v189 = v139;
  unint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v185 = 1107296256LL;
  uint64_t v186 = sub_1001C31E8;
  uint64_t v187 = &unk_100948EB8;
  uint64_t v140 = _Block_copy(&aBlock);
  uint64_t v141 = swift_retain();
  uint64_t v142 = v169;
  static DispatchQoS.unspecified.getter(v141);
  uint64_t v191 = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v191, v162, v164, v126, v163);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v135, v142, v124, v140);
  _Block_release(v140);
  swift_release();
  v175(v124, v126);
  v174(v142, v170);
  ((void (*)(char *, uint64_t))v166)(v135, v136);
  (*(void (**)(char *, uint64_t))(v172 + 8))(v137, v138);
  swift_release();
  return swift_release();
}

uint64_t sub_1002052DC( int a1, char *a2, uint64_t a3, unint64_t a4, os_log_s *a5, int a6, uint64_t a7, void (*a8)(void, void, void), char a9, char *a10, char a11, unsigned __int8 a12, void *a13, void (*a14)(uint64_t, uint64_t), uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v169 = a8;
  uint64_t v168 = a7;
  LODWORD(v167) = a6;
  uint64_t v149 = a5;
  unint64_t v157 = a4;
  uint64_t v156 = a3;
  uint64_t v155 = a2;
  LODWORD(v154) = a1;
  uint64_t v152 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v151 = *(void *)(v152 - 8);
  __chkstk_darwin(v152);
  uint64_t v150 = (char *)&v135 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v145 = type metadata accessor for DispatchTime(0LL);
  uint64_t v143 = *(void *)(v145 - 8);
  uint64_t v19 = __chkstk_darwin(v145);
  uint64_t v142 = (char *)&v135 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  __int128 v144 = (char *)&v135 - v21;
  uint64_t v160 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v159 = *(void *)(v160 - 8);
  __chkstk_darwin(v160);
  uint64_t v163 = (char *)&v135 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v164 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v158 = *(void *)(v164 - 8);
  __chkstk_darwin(v164);
  uint64_t v162 = (char *)&v135 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v148 = (char *)&v135 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25);
  uint64_t v147 = (NSURL *)((char *)&v135 - v27);
  uint64_t v161 = type metadata accessor for UUID(0LL);
  uint64_t v166 = *(void *)(v161 - 8);
  uint64_t v28 = *(void *)(v166 + 64);
  uint64_t v29 = __chkstk_darwin(v161);
  uint64_t v153 = (char *)&v135 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v32 = (void (*)(_BYTE *, uint64_t))((char *)&v135 - v31);
  uint64_t v33 = __chkstk_darwin(v30);
  uint64_t v146 = (uint64_t)&v135 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v37 = (char *)&v135 - v36;
  __chkstk_darwin(v35);
  uint64_t v165 = (char *)&v135 - v38;
  uint64_t v170 = (char *)sub_100004AEC(&qword_1009A24D8);
  __chkstk_darwin(v170);
  uint64_t v40 = (void ***)((char *)&v135 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v41 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v45 = (char *)&v135 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v43);
  uint64_t v47 = (char *)&v135 - v46;
  uint64_t v171 = a18;
  uint64_t v48 = swift_retain();
  static SystemInfo.lockState.getter(v48);
  (*(void (**)(char *, void, uint64_t))(v42 + 104))( v45,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v41);
  uint64_t v49 = sub_100007864( (unint64_t *)&qword_1009A2650,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  char v50 = dispatch thunk of static Equatable.== infix(_:_:)(v47, v45, v41, v49);
  uint64_t v51 = *(void (**)(char *, uint64_t))(v42 + 8);
  v51(v45, v41);
  uint64_t v52 = ((uint64_t (*)(char *, uint64_t))v51)(v47, v41);
  if ((v50 & 1) != 0)
  {
    uint64_t v53 = static os_log_type_t.error.getter(v52);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    os_log(_:dso:log:_:_:)( v53,  &_mh_execute_header,  qword_100A2B010,  "Attempt to send message before first unlock!",  44LL,  2LL,  _swiftEmptyArrayStorage);
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v55 = v54;
    uint64_t v180 = 5LL;
    unint64_t v56 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v57 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    unint64_t v58 = v56;
    uint64_t v59 = v55;
LABEL_11:
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v180, v58, v59, v57);
    *uint64_t v40 = aBlock;
    swift_storeEnumTagMultiPayload(v40, v170, 1LL);
    sub_1001F3608((uint64_t)v40, v171, "Error sending shareBeacon message: %@", 37LL);
    sub_100015794((uint64_t)v40, &qword_1009A24D8);
    return swift_release();
  }

  char v60 = v167;
  uint64_t v61 = v168;
  uint64_t v62 = v169;
  uint64_t v63 = sub_1001E6584(v167, v168, (uint64_t)v169);
  if ((v63 & 1) == 0)
  {
    uint64_t v71 = static os_log_type_t.error.getter(v63);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v72 = qword_100A2B010;
    uint64_t v73 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v74 = swift_allocObject(v73, 72LL, 7LL);
    *(_OWORD *)(v74 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v74 + 56) = &type metadata for String;
    *(void *)(v74 + 64) = sub_1000226F4();
    *(void *)(v74 + 32) = v61;
    *(void *)(v74 + 4sub_100032838(0, 7LL, 0) = v62;
    *(void *)&double v75 = swift_bridgeObjectRetain(v62).n128_u64[0];
    os_log(_:dso:log:_:_:)( v71,  &_mh_execute_header,  v72,  "Not sending since %@ has no IDS registered devices",  50LL,  2LL,  v74,  v75);
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v77 = v76;
    uint64_t v180 = 12LL;
    unint64_t v78 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v57 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    unint64_t v58 = v78;
    uint64_t v59 = v77;
    goto LABEL_11;
  }

  uint64_t v137 = a15;
  uint64_t v138 = a14;
  uint64_t v139 = a13;
  int v140 = a12;
  uint64_t v170 = a10;
  char v64 = a11 & 1;
  uint64_t v136 = a17;
  uint64_t v141 = *(void *)(a17 + 24);
  uint64_t v65 = sub_100004AEC((uint64_t *)&unk_1009B1370);
  if ((a9 & 1) != 0)
  {
    uint64_t inited = swift_initStackObject(v65, v172);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(_BYTE *)(inited + 32) = v60;
    *(void *)(inited + 4sub_100032838(0, 7LL, 0) = v61;
    *(void *)(inited + 48) = v62;
    uint64_t v67 = v62;
    uint64_t v68 = v166;
    char v69 = v147;
    uint64_t v70 = v161;
    (*(void (**)(NSURL *, uint64_t, uint64_t, uint64_t))(v166 + 56))(v147, 1LL, 1LL, v161);
    swift_bridgeObjectRetain(v67);
    *((void *)&v133 + 1) = a16;
    *(void *)&__int128 v133 = v137;
    sub_1001E86B0(v154, v155, v156, v157, v149, inited, v69, v170, (uint64_t)v37, v64, v140 & 1, v139, v138, v133);
    swift_bridgeObjectRelease();
    sub_100015794((uint64_t)v69, &qword_10099D8A0);
    double v85 = *(void (**)(char *, char *, uint64_t))(v68 + 32);
    v85(v165, v37, v70);
  }

  else
  {
    uint64_t v79 = swift_initStackObject(v65, v179);
    *(_OWORD *)(v79 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(_BYTE *)(v79 + 32) = v60;
    *(void *)(v79 + 4sub_100032838(0, 7LL, 0) = v61;
    *(void *)(v79 + 48) = v62;
    uint64_t v80 = v62;
    uint64_t v81 = v166;
    uint64_t v82 = v148;
    uint64_t v70 = v161;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v166 + 56))(v148, 1LL, 1LL, v161);
    swift_bridgeObjectRetain(v80);
    UUID.init()(v83);
    *((void *)&v134 + 1) = a16;
    *(void *)&__int128 v134 = v137;
    uint64_t v84 = v146;
    sub_1001DE9B8( v154,  v155,  v156,  v157,  v32,  v79,  (unsigned int (*)(void, void, void))v82,  v170,  v146,  v64,  v140 & 1,  (uint64_t)v139,  (uint64_t)v138,  v134);
    swift_bridgeObjectRelease();
    (*(void (**)(void, uint64_t))(v81 + 8))(v32, v70);
    sub_100015794((uint64_t)v82, &qword_10099D8A0);
    double v85 = *(void (**)(char *, char *, uint64_t))(v81 + 32);
    v85(v165, (char *)v84, v70);
  }

  uint64_t v86 = v70;
  uint64_t v87 = sub_100004AEC(&qword_1009A23E8);
  swift_allocObject(v87, *(unsigned int *)(v87 + 48), *(unsigned __int16 *)(v87 + 52));
  uint64_t v89 = Future.init()(v88);
  uint64_t v90 = static os_log_type_t.default.getter(v89);
  if (qword_10099B700 != -1) {
    swift_once(&qword_10099B700, sub_100651100);
  }
  uint64_t v91 = qword_100A2B010;
  uint64_t v92 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v93 = swift_allocObject(v92, 72LL, 7LL);
  *(_OWORD *)(v93 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v94 = v165;
  uint64_t v95 = UUID.uuidString.getter(v93);
  uint64_t v97 = v96;
  *(void *)(v93 + 56) = &type metadata for String;
  *(void *)(v93 + 64) = sub_1000226F4();
  *(void *)(v93 + 32) = v95;
  *(void *)(v93 + 4sub_100032838(0, 7LL, 0) = v97;
  os_log(_:dso:log:_:_:)(v90, &_mh_execute_header, v91, "Setting %@ to pending", 21LL, 2LL, v93);
  swift_bridgeObjectRelease();
  uint64_t v98 = v136;
  uint64_t v170 = *(char **)(v136 + 152);
  uint64_t v99 = v166;
  uint64_t v169 = *(void (**)(void, void, void))(v166 + 16);
  uint64_t v100 = v153;
  v169(v153, v94, v86);
  uint64_t v101 = *(unsigned __int8 *)(v99 + 80);
  uint64_t v156 = ((v101 + 24) & ~v101) + v28;
  uint64_t v102 = (v101 + 24) & ~v101;
  uint64_t v167 = v102;
  uint64_t v168 = v101 | 7;
  unint64_t v103 = (v156 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v104 = swift_allocObject(&unk_100949A80, v103 + 8, v101 | 7);
  *(void *)(v104 + swift_weakDestroy(v0 + 16) = v98;
  v85((char *)(v104 + v102), v100, v86);
  *(void *)(v104 + v103) = v89;
  unint64_t v105 = v103;
  uint64_t v177 = sub_1001FF3CC;
  uint64_t v178 = v104;
  unint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v174 = 1107296256LL;
  uint64_t v175 = sub_1001C31E8;
  uint64_t v176 = &unk_100949A98;
  uint64_t v106 = _Block_copy(&aBlock);
  swift_retain();
  uint64_t v107 = swift_retain();
  unint64_t v157 = v89;
  uint64_t v108 = v162;
  static DispatchQoS.unspecified.getter(v107);
  uint64_t v180 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v109 = (char *)sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v155 = v109;
  uint64_t v110 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v152 = v110;
  uint64_t v154 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v111 = v163;
  uint64_t v112 = v110;
  uint64_t v113 = v160;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v180, v112, v154, v160, v109);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v108, v111, v106);
  _Block_release(v106);
  uint64_t v159 = *(void *)(v159 + 8);
  ((void (*)(char *, uint64_t))v159)(v111, v113);
  uint64_t v158 = *(void *)(v158 + 8);
  ((void (*)(char *, uint64_t))v158)(v108, v164);
  swift_release();
  unint64_t v114 = v153;
  uint64_t v115 = v165;
  v169(v153, v165, v86);
  uint64_t v116 = swift_allocObject(&unk_100949AD0, v105 + 16, v168);
  *(void *)(v116 + swift_weakDestroy(v0 + 16) = v98;
  v85((char *)(v116 + v167), v114, v86);
  uint64_t v117 = (uint64_t (**)(uint64_t))(v116 + v105);
  uint64_t v118 = v171;
  *uint64_t v117 = sub_10020DFD4;
  v117[1] = (uint64_t (*)(uint64_t))v118;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_1001FF3D4, v116);
  swift_release();
  swift_release();
  uint64_t v119 = swift_allocObject(&unk_100949AF8, 32LL, 7LL);
  *(void *)(v119 + swift_weakDestroy(v0 + 16) = sub_10020DFD4;
  *(void *)(v119 + 24) = v118;
  swift_retain();
  Future.addFailure(block:)(sub_10020FF6C, v119);
  swift_release();
  uint64_t v120 = swift_release();
  BOOL v121 = v142;
  static DispatchTime.now()(v120);
  uint64_t v122 = v144;
  + infix(_:_:)(v121, *(double *)(v98 + 184));
  uint64_t v123 = *(void (**)(char *, uint64_t))(v143 + 8);
  uint64_t v124 = v145;
  v123(v121, v145);
  uint64_t v125 = v115;
  uint64_t v126 = v161;
  v169(v114, v125, v161);
  uint64_t v127 = swift_allocObject(&unk_100949B20, v156, v168);
  *(void *)(v127 + swift_weakDestroy(v0 + 16) = v98;
  v85((char *)(v127 + v167), v114, v126);
  uint64_t v177 = sub_1001FF3E4;
  uint64_t v178 = v127;
  unint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v174 = 1107296256LL;
  uint64_t v175 = sub_1001C31E8;
  uint64_t v176 = &unk_100949B38;
  uint64_t v128 = _Block_copy(&aBlock);
  uint64_t v129 = swift_retain();
  uint64_t v130 = v162;
  static DispatchQoS.unspecified.getter(v129);
  uint64_t v180 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v131 = v163;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v180, v152, v154, v113, v155);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v122, v130, v131, v128);
  _Block_release(v128);
  swift_release();
  ((void (*)(char *, uint64_t))v159)(v131, v113);
  ((void (*)(char *, uint64_t))v158)(v130, v164);
  v123(v122, v124);
  (*(void (**)(char *, uint64_t))(v166 + 8))(v165, v126);
  swift_release();
  return swift_release();
}

uint64_t sub_1002064D8( int a1, char *a2, uint64_t a3, unint64_t a4, os_log_s *a5, int a6, uint64_t a7, void (*a8)(void, void, void), char a9, char *a10, char a11, unsigned __int8 a12, void *a13, void (*a14)(uint64_t, uint64_t), uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v169 = a8;
  uint64_t v168 = a7;
  LODWORD(v167) = a6;
  uint64_t v149 = a5;
  unint64_t v157 = a4;
  uint64_t v156 = a3;
  uint64_t v155 = a2;
  LODWORD(v154) = a1;
  uint64_t v152 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v151 = *(void *)(v152 - 8);
  __chkstk_darwin(v152);
  uint64_t v150 = (char *)&v135 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v145 = type metadata accessor for DispatchTime(0LL);
  uint64_t v143 = *(void *)(v145 - 8);
  uint64_t v19 = __chkstk_darwin(v145);
  uint64_t v142 = (char *)&v135 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  __int128 v144 = (char *)&v135 - v21;
  uint64_t v160 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v159 = *(void *)(v160 - 8);
  __chkstk_darwin(v160);
  uint64_t v163 = (char *)&v135 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v164 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v158 = *(void *)(v164 - 8);
  __chkstk_darwin(v164);
  uint64_t v162 = (char *)&v135 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v148 = (char *)&v135 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25);
  uint64_t v147 = (NSURL *)((char *)&v135 - v27);
  uint64_t v161 = type metadata accessor for UUID(0LL);
  uint64_t v166 = *(void *)(v161 - 8);
  uint64_t v28 = *(void *)(v166 + 64);
  uint64_t v29 = __chkstk_darwin(v161);
  uint64_t v153 = (char *)&v135 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v32 = (void (*)(_BYTE *, uint64_t))((char *)&v135 - v31);
  uint64_t v33 = __chkstk_darwin(v30);
  uint64_t v146 = (uint64_t)&v135 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v37 = (char *)&v135 - v36;
  __chkstk_darwin(v35);
  uint64_t v165 = (char *)&v135 - v38;
  uint64_t v170 = (char *)sub_100004AEC(&qword_1009A24D8);
  __chkstk_darwin(v170);
  uint64_t v40 = (void ***)((char *)&v135 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v41 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v45 = (char *)&v135 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v43);
  uint64_t v47 = (char *)&v135 - v46;
  uint64_t v171 = a18;
  uint64_t v48 = swift_retain();
  static SystemInfo.lockState.getter(v48);
  (*(void (**)(char *, void, uint64_t))(v42 + 104))( v45,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v41);
  uint64_t v49 = sub_100007864( (unint64_t *)&qword_1009A2650,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  char v50 = dispatch thunk of static Equatable.== infix(_:_:)(v47, v45, v41, v49);
  uint64_t v51 = *(void (**)(char *, uint64_t))(v42 + 8);
  v51(v45, v41);
  uint64_t v52 = ((uint64_t (*)(char *, uint64_t))v51)(v47, v41);
  if ((v50 & 1) != 0)
  {
    uint64_t v53 = static os_log_type_t.error.getter(v52);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    os_log(_:dso:log:_:_:)( v53,  &_mh_execute_header,  qword_100A2B010,  "Attempt to send message before first unlock!",  44LL,  2LL,  _swiftEmptyArrayStorage);
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v55 = v54;
    uint64_t v180 = 5LL;
    unint64_t v56 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v57 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    unint64_t v58 = v56;
    uint64_t v59 = v55;
LABEL_11:
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v180, v58, v59, v57);
    *uint64_t v40 = aBlock;
    swift_storeEnumTagMultiPayload(v40, v170, 1LL);
    sub_1001F3608((uint64_t)v40, v171, "Error sending legacy shareBeacon message: %@", 44LL);
    sub_100015794((uint64_t)v40, &qword_1009A24D8);
    return swift_release();
  }

  char v60 = v167;
  uint64_t v61 = v168;
  uint64_t v62 = v169;
  uint64_t v63 = sub_1001E6584(v167, v168, (uint64_t)v169);
  if ((v63 & 1) == 0)
  {
    uint64_t v71 = static os_log_type_t.error.getter(v63);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v72 = qword_100A2B010;
    uint64_t v73 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v74 = swift_allocObject(v73, 72LL, 7LL);
    *(_OWORD *)(v74 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v74 + 56) = &type metadata for String;
    *(void *)(v74 + 64) = sub_1000226F4();
    *(void *)(v74 + 32) = v61;
    *(void *)(v74 + 4sub_100032838(0, 7LL, 0) = v62;
    *(void *)&double v75 = swift_bridgeObjectRetain(v62).n128_u64[0];
    os_log(_:dso:log:_:_:)( v71,  &_mh_execute_header,  v72,  "Not sending since %@ has no IDS registered devices",  50LL,  2LL,  v74,  v75);
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v77 = v76;
    uint64_t v180 = 12LL;
    unint64_t v78 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v57 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    unint64_t v58 = v78;
    uint64_t v59 = v77;
    goto LABEL_11;
  }

  uint64_t v137 = a15;
  uint64_t v138 = a14;
  uint64_t v139 = a13;
  int v140 = a12;
  uint64_t v170 = a10;
  char v64 = a11 & 1;
  uint64_t v136 = a17;
  uint64_t v141 = *(void *)(a17 + 24);
  uint64_t v65 = sub_100004AEC((uint64_t *)&unk_1009B1370);
  if ((a9 & 1) != 0)
  {
    uint64_t inited = swift_initStackObject(v65, v172);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(_BYTE *)(inited + 32) = v60;
    *(void *)(inited + 4sub_100032838(0, 7LL, 0) = v61;
    *(void *)(inited + 48) = v62;
    uint64_t v67 = v62;
    uint64_t v68 = v166;
    char v69 = v147;
    uint64_t v70 = v161;
    (*(void (**)(NSURL *, uint64_t, uint64_t, uint64_t))(v166 + 56))(v147, 1LL, 1LL, v161);
    swift_bridgeObjectRetain(v67);
    *((void *)&v133 + 1) = a16;
    *(void *)&__int128 v133 = v137;
    sub_1001E86B0(v154, v155, v156, v157, v149, inited, v69, v170, (uint64_t)v37, v64, v140 & 1, v139, v138, v133);
    swift_bridgeObjectRelease();
    sub_100015794((uint64_t)v69, &qword_10099D8A0);
    double v85 = *(void (**)(char *, char *, uint64_t))(v68 + 32);
    v85(v165, v37, v70);
  }

  else
  {
    uint64_t v79 = swift_initStackObject(v65, v179);
    *(_OWORD *)(v79 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(_BYTE *)(v79 + 32) = v60;
    *(void *)(v79 + 4sub_100032838(0, 7LL, 0) = v61;
    *(void *)(v79 + 48) = v62;
    uint64_t v80 = v62;
    uint64_t v81 = v166;
    uint64_t v82 = v148;
    uint64_t v70 = v161;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v166 + 56))(v148, 1LL, 1LL, v161);
    swift_bridgeObjectRetain(v80);
    UUID.init()(v83);
    *((void *)&v134 + 1) = a16;
    *(void *)&__int128 v134 = v137;
    uint64_t v84 = v146;
    sub_1001DE9B8( v154,  v155,  v156,  v157,  v32,  v79,  (unsigned int (*)(void, void, void))v82,  v170,  v146,  v64,  v140 & 1,  (uint64_t)v139,  (uint64_t)v138,  v134);
    swift_bridgeObjectRelease();
    (*(void (**)(void, uint64_t))(v81 + 8))(v32, v70);
    sub_100015794((uint64_t)v82, &qword_10099D8A0);
    double v85 = *(void (**)(char *, char *, uint64_t))(v81 + 32);
    v85(v165, (char *)v84, v70);
  }

  uint64_t v86 = v70;
  uint64_t v87 = sub_100004AEC(&qword_1009A23E8);
  swift_allocObject(v87, *(unsigned int *)(v87 + 48), *(unsigned __int16 *)(v87 + 52));
  uint64_t v89 = Future.init()(v88);
  uint64_t v90 = static os_log_type_t.default.getter(v89);
  if (qword_10099B700 != -1) {
    swift_once(&qword_10099B700, sub_100651100);
  }
  uint64_t v91 = qword_100A2B010;
  uint64_t v92 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v93 = swift_allocObject(v92, 72LL, 7LL);
  *(_OWORD *)(v93 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v94 = v165;
  uint64_t v95 = UUID.uuidString.getter(v93);
  uint64_t v97 = v96;
  *(void *)(v93 + 56) = &type metadata for String;
  *(void *)(v93 + 64) = sub_1000226F4();
  *(void *)(v93 + 32) = v95;
  *(void *)(v93 + 4sub_100032838(0, 7LL, 0) = v97;
  os_log(_:dso:log:_:_:)(v90, &_mh_execute_header, v91, "Setting %@ to pending", 21LL, 2LL, v93);
  swift_bridgeObjectRelease();
  uint64_t v98 = v136;
  uint64_t v170 = *(char **)(v136 + 152);
  uint64_t v99 = v166;
  uint64_t v169 = *(void (**)(void, void, void))(v166 + 16);
  uint64_t v100 = v153;
  v169(v153, v94, v86);
  uint64_t v101 = *(unsigned __int8 *)(v99 + 80);
  uint64_t v156 = ((v101 + 24) & ~v101) + v28;
  uint64_t v102 = (v101 + 24) & ~v101;
  uint64_t v167 = v102;
  uint64_t v168 = v101 | 7;
  unint64_t v103 = (v156 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v104 = swift_allocObject(&unk_100949940, v103 + 8, v101 | 7);
  *(void *)(v104 + swift_weakDestroy(v0 + 16) = v98;
  v85((char *)(v104 + v102), v100, v86);
  *(void *)(v104 + v103) = v89;
  unint64_t v105 = v103;
  uint64_t v177 = sub_1001FF3CC;
  uint64_t v178 = v104;
  unint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v174 = 1107296256LL;
  uint64_t v175 = sub_1001C31E8;
  uint64_t v176 = &unk_100949958;
  uint64_t v106 = _Block_copy(&aBlock);
  swift_retain();
  uint64_t v107 = swift_retain();
  unint64_t v157 = v89;
  uint64_t v108 = v162;
  static DispatchQoS.unspecified.getter(v107);
  uint64_t v180 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v109 = (char *)sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v155 = v109;
  uint64_t v110 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v152 = v110;
  uint64_t v154 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v111 = v163;
  uint64_t v112 = v110;
  uint64_t v113 = v160;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v180, v112, v154, v160, v109);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v108, v111, v106);
  _Block_release(v106);
  uint64_t v159 = *(void *)(v159 + 8);
  ((void (*)(char *, uint64_t))v159)(v111, v113);
  uint64_t v158 = *(void *)(v158 + 8);
  ((void (*)(char *, uint64_t))v158)(v108, v164);
  swift_release();
  unint64_t v114 = v153;
  uint64_t v115 = v165;
  v169(v153, v165, v86);
  uint64_t v116 = swift_allocObject(&unk_100949990, v105 + 16, v168);
  *(void *)(v116 + swift_weakDestroy(v0 + 16) = v98;
  v85((char *)(v116 + v167), v114, v86);
  uint64_t v117 = (uint64_t (**)(uint64_t))(v116 + v105);
  uint64_t v118 = v171;
  *uint64_t v117 = sub_10020DF1C;
  v117[1] = (uint64_t (*)(uint64_t))v118;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_1001FF3D4, v116);
  swift_release();
  swift_release();
  uint64_t v119 = swift_allocObject(&unk_1009499B8, 32LL, 7LL);
  *(void *)(v119 + swift_weakDestroy(v0 + 16) = sub_10020DF1C;
  *(void *)(v119 + 24) = v118;
  swift_retain();
  Future.addFailure(block:)(sub_10020FF6C, v119);
  swift_release();
  uint64_t v120 = swift_release();
  BOOL v121 = v142;
  static DispatchTime.now()(v120);
  uint64_t v122 = v144;
  + infix(_:_:)(v121, *(double *)(v98 + 184));
  uint64_t v123 = *(void (**)(char *, uint64_t))(v143 + 8);
  uint64_t v124 = v145;
  v123(v121, v145);
  uint64_t v125 = v115;
  uint64_t v126 = v161;
  v169(v114, v125, v161);
  uint64_t v127 = swift_allocObject(&unk_1009499E0, v156, v168);
  *(void *)(v127 + swift_weakDestroy(v0 + 16) = v98;
  v85((char *)(v127 + v167), v114, v126);
  uint64_t v177 = sub_1001FF3E4;
  uint64_t v178 = v127;
  unint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v174 = 1107296256LL;
  uint64_t v175 = sub_1001C31E8;
  uint64_t v176 = &unk_1009499F8;
  uint64_t v128 = _Block_copy(&aBlock);
  uint64_t v129 = swift_retain();
  uint64_t v130 = v162;
  static DispatchQoS.unspecified.getter(v129);
  uint64_t v180 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v131 = v163;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v180, v152, v154, v113, v155);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v122, v130, v131, v128);
  _Block_release(v128);
  swift_release();
  ((void (*)(char *, uint64_t))v159)(v131, v113);
  ((void (*)(char *, uint64_t))v158)(v130, v164);
  v123(v122, v124);
  (*(void (**)(char *, uint64_t))(v166 + 8))(v165, v126);
  swift_release();
  return swift_release();
}

uint64_t sub_1002076D4( int a1, char *a2, uint64_t a3, unint64_t a4, os_log_s *a5, int a6, char *a7, void (*a8)(void, void, void), char a9, char *a10, char a11, char a12, void *a13, void (*a14)(uint64_t, uint64_t), uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void (*a19)(char *, uint64_t, uint64_t))
{
  uint64_t v168 = a8;
  uint64_t v167 = a7;
  LODWORD(v166) = a6;
  uint64_t v148 = a5;
  unint64_t v156 = a4;
  uint64_t v155 = a3;
  uint64_t v154 = a2;
  LODWORD(v153) = a1;
  uint64_t v151 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v150 = *(void *)(v151 - 8);
  __chkstk_darwin(v151);
  uint64_t v149 = (char *)&v135 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v143 = type metadata accessor for DispatchTime(0LL);
  uint64_t v141 = *(void *)(v143 - 8);
  uint64_t v20 = __chkstk_darwin(v143);
  int v140 = (char *)&v135 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  uint64_t v142 = (char *)&v135 - v22;
  uint64_t v160 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v158 = *(void *)(v160 - 8);
  __chkstk_darwin(v160);
  uint64_t v159 = (char *)&v135 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v164 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v157 = *(void *)(v164 - 8);
  __chkstk_darwin(v164);
  uint64_t v163 = (char *)&v135 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v147 = (char *)&v135 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26);
  uint64_t v146 = (NSURL *)((char *)&v135 - v28);
  uint64_t v162 = type metadata accessor for UUID(0LL);
  uint64_t v161 = *(void *)(v162 - 8);
  uint64_t v29 = *(void *)(v161 + 64);
  uint64_t v30 = __chkstk_darwin(v162);
  uint64_t v152 = (char *)&v135 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v33 = (void (*)(_BYTE *, uint64_t))((char *)&v135 - v32);
  uint64_t v34 = __chkstk_darwin(v31);
  uint64_t v145 = (uint64_t)&v135 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v144 = (uint64_t)&v135 - v37;
  __chkstk_darwin(v36);
  uint64_t v165 = (char *)&v135 - v38;
  uint64_t v169 = (void *)sub_100004AEC(&qword_1009A24D8);
  __chkstk_darwin(v169);
  uint64_t v40 = (void ***)((char *)&v135 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v41 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v45 = (char *)&v135 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v43);
  uint64_t v47 = (char *)&v135 - v46;
  uint64_t v48 = swift_allocObject(&unk_100949288, 32LL, 7LL);
  *(void *)(v48 + swift_weakDestroy(v0 + 16) = a18;
  *(void *)(v48 + 24) = a19;
  uint64_t v171 = v48;
  uint64_t v49 = a18;
  uint64_t v170 = a19;
  uint64_t v50 = swift_retain();
  static SystemInfo.lockState.getter(v50);
  (*(void (**)(char *, void, uint64_t))(v42 + 104))( v45,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v41);
  uint64_t v51 = sub_100007864( (unint64_t *)&qword_1009A2650,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  char v52 = dispatch thunk of static Equatable.== infix(_:_:)(v47, v45, v41, v51);
  uint64_t v53 = *(void (**)(char *, uint64_t))(v42 + 8);
  v53(v45, v41);
  uint64_t v54 = ((uint64_t (*)(char *, uint64_t))v53)(v47, v41);
  if ((v52 & 1) != 0)
  {
    uint64_t v55 = static os_log_type_t.error.getter(v54);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    os_log(_:dso:log:_:_:)( v55,  &_mh_execute_header,  qword_100A2B010,  "Attempt to send message before first unlock!",  44LL,  2LL,  _swiftEmptyArrayStorage);
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v57 = v56;
    uint64_t v180 = 5LL;
    unint64_t v58 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v59 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v180, v58, v57, v59);
    *uint64_t v40 = aBlock;
    swift_storeEnumTagMultiPayload(v40, v169, 1LL);
    uint64_t v60 = (uint64_t)v40;
    uint64_t v61 = v49;
LABEL_11:
    sub_1001F95A8(v60, v61, (uint64_t)v170, "Successfully sent updateSharedBeacon: %@", 40LL);
    sub_100015794((uint64_t)v40, &qword_1009A24D8);
    return swift_release();
  }

  char v62 = v166;
  uint64_t v63 = v167;
  char v64 = v168;
  uint64_t v65 = sub_1001E6584(v166, (uint64_t)v167, (uint64_t)v168);
  if ((v65 & 1) == 0)
  {
    uint64_t v72 = static os_log_type_t.error.getter(v65);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v73 = qword_100A2B010;
    uint64_t v74 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v75 = swift_allocObject(v74, 72LL, 7LL);
    *(_OWORD *)(v75 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v75 + 56) = &type metadata for String;
    *(void *)(v75 + 64) = sub_1000226F4();
    *(void *)(v75 + 32) = v63;
    *(void *)(v75 + 4sub_100032838(0, 7LL, 0) = v64;
    *(void *)&double v76 = swift_bridgeObjectRetain(v64).n128_u64[0];
    os_log(_:dso:log:_:_:)( v72,  &_mh_execute_header,  v73,  "Not sending since %@ has no IDS registered devices",  50LL,  2LL,  v75,  v76);
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v78 = v77;
    uint64_t v180 = 12LL;
    unint64_t v79 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v80 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v180, v79, v78, v80);
    *uint64_t v40 = aBlock;
    swift_storeEnumTagMultiPayload(v40, v169, 1LL);
    uint64_t v60 = (uint64_t)v40;
    uint64_t v61 = v49;
    goto LABEL_11;
  }

  uint64_t v137 = a15;
  uint64_t v139 = a14;
  uint64_t v169 = a13;
  int v138 = a11 & 1;
  uint64_t v170 = *(void (**)(char *, uint64_t, uint64_t))(a17 + 24);
  uint64_t v66 = sub_100004AEC((uint64_t *)&unk_1009B1370);
  if ((a9 & 1) != 0)
  {
    uint64_t v136 = a17;
    uint64_t inited = swift_initStackObject(v66, v172);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(_BYTE *)(inited + 32) = v62;
    *(void *)(inited + 4sub_100032838(0, 7LL, 0) = v63;
    *(void *)(inited + 48) = v64;
    uint64_t v68 = v161;
    char v69 = v146;
    uint64_t v70 = v162;
    (*(void (**)(NSURL *, uint64_t, uint64_t, uint64_t))(v161 + 56))(v146, 1LL, 1LL, v162);
    swift_bridgeObjectRetain(v64);
    *((void *)&v133 + 1) = a16;
    *(void *)&__int128 v133 = v137;
    uint64_t v71 = v144;
    sub_1001E86B0(v153, v154, v155, v156, v148, inited, v69, a10, v144, v138, a12 & 1, v169, v139, v133);
    swift_bridgeObjectRelease();
    sub_100015794((uint64_t)v69, &qword_10099D8A0);
    uint64_t v170 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 32);
    v170(v165, v71, v70);
    uint64_t v87 = v70;
    uint64_t v88 = v68;
  }

  else
  {
    uint64_t v81 = swift_initStackObject(v66, v179);
    *(_OWORD *)(v81 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(_BYTE *)(v81 + 32) = v62;
    *(void *)(v81 + 4sub_100032838(0, 7LL, 0) = v63;
    *(void *)(v81 + 48) = v64;
    uint64_t v82 = v161;
    uint64_t v83 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v161 + 56);
    uint64_t v84 = (unsigned int (*)(void, void, void))v147;
    uint64_t v167 = a10;
    uint64_t v87 = v162;
    v83(v147, 1LL, 1LL, v162);
    swift_bridgeObjectRetain(v64);
    UUID.init()(v85);
    *((void *)&v134 + 1) = a16;
    *(void *)&__int128 v134 = v137;
    uint64_t v86 = v145;
    sub_1001DE9B8(v153, v154, v155, v156, v33, v81, v84, v167, v145, v138, a12 & 1, (uint64_t)v169, (uint64_t)v139, v134);
    uint64_t v136 = a17;
    swift_bridgeObjectRelease();
    (*(void (**)(void, uint64_t))(v82 + 8))(v33, v87);
    sub_100015794((uint64_t)v84, &qword_10099D8A0);
    uint64_t v170 = *(void (**)(char *, uint64_t, uint64_t))(v82 + 32);
    v170(v165, v86, v87);
    uint64_t v88 = v82;
  }

  uint64_t v89 = sub_100004AEC(&qword_1009A23E8);
  swift_allocObject(v89, *(unsigned int *)(v89 + 48), *(unsigned __int16 *)(v89 + 52));
  uint64_t v91 = Future.init()(v90);
  uint64_t v92 = static os_log_type_t.default.getter(v91);
  if (qword_10099B700 != -1) {
    swift_once(&qword_10099B700, sub_100651100);
  }
  uint64_t v93 = qword_100A2B010;
  uint64_t v94 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v95 = swift_allocObject(v94, 72LL, 7LL);
  *(_OWORD *)(v95 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v96 = v165;
  uint64_t v97 = UUID.uuidString.getter(v95);
  uint64_t v99 = v98;
  *(void *)(v95 + 56) = &type metadata for String;
  *(void *)(v95 + 64) = sub_1000226F4();
  *(void *)(v95 + 32) = v97;
  *(void *)(v95 + 4sub_100032838(0, 7LL, 0) = v99;
  os_log(_:dso:log:_:_:)(v92, &_mh_execute_header, v93, "Setting %@ to pending", 21LL, 2LL, v95);
  swift_bridgeObjectRelease();
  uint64_t v100 = v136;
  uint64_t v169 = *(void **)(v136 + 152);
  uint64_t v168 = *(void (**)(void, void, void))(v88 + 16);
  uint64_t v101 = v152;
  uint64_t v102 = v87;
  v168(v152, v96, v87);
  uint64_t v103 = *(unsigned __int8 *)(v88 + 80);
  uint64_t v155 = ((v103 + 24) & ~v103) + v29;
  uint64_t v104 = (v103 + 24) & ~v103;
  uint64_t v166 = v104;
  uint64_t v167 = (char *)(v103 | 7);
  unint64_t v105 = (v155 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v106 = swift_allocObject(&unk_100949300, v105 + 8, v103 | 7);
  *(void *)(v106 + swift_weakDestroy(v0 + 16) = v100;
  v170((char *)(v106 + v104), (uint64_t)v101, v87);
  *(void *)(v106 + v105) = v91;
  uint64_t v177 = sub_1001FF3CC;
  uint64_t v178 = v106;
  unint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v174 = 1107296256LL;
  uint64_t v175 = sub_1001C31E8;
  uint64_t v176 = &unk_100949318;
  uint64_t v107 = _Block_copy(&aBlock);
  swift_retain();
  uint64_t v108 = swift_retain();
  uint64_t v109 = v163;
  static DispatchQoS.unspecified.getter(v108);
  uint64_t v180 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v110 = (char *)sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v154 = v110;
  uint64_t v111 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v151 = v111;
  uint64_t v153 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v112 = v102;
  unint64_t v156 = v91;
  uint64_t v113 = v159;
  uint64_t v114 = v160;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v180, v111, v153, v160, v110);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v109, v113, v107);
  _Block_release(v107);
  uint64_t v158 = *(void *)(v158 + 8);
  ((void (*)(char *, uint64_t))v158)(v113, v114);
  uint64_t v157 = *(void *)(v157 + 8);
  ((void (*)(char *, uint64_t))v157)(v109, v164);
  swift_release();
  uint64_t v115 = v152;
  uint64_t v116 = v165;
  v168(v152, v165, v112);
  uint64_t v117 = swift_allocObject(&unk_100949350, v105 + 16, v167);
  *(void *)(v117 + swift_weakDestroy(v0 + 16) = v100;
  v170((char *)(v117 + v166), (uint64_t)v115, v112);
  uint64_t v118 = (void (**)(uint64_t))(v117 + v105);
  uint64_t v119 = (void (*)(uint64_t))v171;
  *uint64_t v118 = sub_10020CEAC;
  v118[1] = v119;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_1001FF3D4, v117);
  swift_release();
  swift_release();
  uint64_t v120 = swift_allocObject(&unk_100949378, 32LL, 7LL);
  *(void *)(v120 + swift_weakDestroy(v0 + 16) = sub_10020CEAC;
  *(void *)(v120 + 24) = v119;
  swift_retain();
  Future.addFailure(block:)(sub_10020FF6C, v120);
  swift_release();
  uint64_t v121 = swift_release();
  uint64_t v122 = v140;
  static DispatchTime.now()(v121);
  uint64_t v123 = v142;
  + infix(_:_:)(v122, *(double *)(v100 + 184));
  uint64_t v124 = *(void (**)(char *, uint64_t))(v141 + 8);
  uint64_t v125 = v143;
  v124(v122, v143);
  uint64_t v126 = v116;
  uint64_t v127 = v162;
  v168(v115, v126, v162);
  uint64_t v128 = swift_allocObject(&unk_1009493A0, v155, v167);
  *(void *)(v128 + swift_weakDestroy(v0 + 16) = v100;
  v170((char *)(v128 + v166), (uint64_t)v115, v127);
  uint64_t v177 = sub_1001FF3E4;
  uint64_t v178 = v128;
  unint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v174 = 1107296256LL;
  uint64_t v175 = sub_1001C31E8;
  uint64_t v176 = &unk_1009493B8;
  uint64_t v129 = _Block_copy(&aBlock);
  uint64_t v130 = swift_retain();
  uint64_t v131 = v163;
  static DispatchQoS.unspecified.getter(v130);
  uint64_t v180 = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v180, v151, v153, v114, v154);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v123, v131, v113, v129);
  _Block_release(v129);
  swift_release();
  ((void (*)(char *, uint64_t))v158)(v113, v114);
  ((void (*)(char *, uint64_t))v157)(v131, v164);
  v124(v123, v125);
  (*(void (**)(char *, uint64_t))(v161 + 8))(v165, v127);
  swift_release();
  return swift_release();
}

uint64_t sub_100208978( int a1, char *a2, uint64_t a3, unint64_t a4, os_log_s *a5, int a6, uint64_t a7, uint64_t a8, char a9, char *a10, char a11, char a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unsigned __int8 a20, char *a21, void *a22, uint64_t a23)
{
  uint64_t v163 = a8;
  uint64_t v162 = a7;
  LODWORD(v161) = a6;
  uint64_t v144 = a5;
  unint64_t v151 = a4;
  uint64_t v150 = a3;
  uint64_t v149 = a2;
  int v148 = a1;
  uint64_t v170 = a21;
  uint64_t v168 = a23;
  uint64_t v147 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v146 = *(void *)(v147 - 8);
  __chkstk_darwin(v147);
  uint64_t v145 = (char *)&v134 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v138 = type metadata accessor for DispatchTime(0LL);
  uint64_t v136 = *(void *)(v138 - 8);
  uint64_t v24 = __chkstk_darwin(v138);
  uint64_t v135 = (char *)&v134 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  uint64_t v137 = (char *)&v134 - v26;
  uint64_t v155 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v153 = *(void *)(v155 - 8);
  __chkstk_darwin(v155);
  uint64_t v154 = (char *)&v134 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v158 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v152 = *(void *)(v158 - 8);
  __chkstk_darwin(v158);
  uint64_t v157 = (char *)&v134 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v143 = (char *)&v134 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v30);
  uint64_t v142 = (NSURL *)((char *)&v134 - v32);
  uint64_t v160 = type metadata accessor for UUID(0LL);
  uint64_t v156 = *(void *)(v160 - 8);
  uint64_t v33 = *(void *)(v156 + 64);
  uint64_t v34 = __chkstk_darwin(v160);
  __int128 v134 = (char *)&v134 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = __chkstk_darwin(v34);
  uint64_t v141 = (char *)&v134 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v140 = (uint64_t)&v134 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v139 = (uint64_t)&v134 - v40;
  __chkstk_darwin(v39);
  uint64_t v159 = (char *)&v134 - v41;
  uint64_t v164 = sub_100004AEC(&qword_1009A24D8);
  __chkstk_darwin(v164);
  uint64_t v43 = (void ***)((char *)&v134 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v44 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v45 = *(void *)(v44 - 8);
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v48 = (char *)&v134 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v46);
  uint64_t v50 = (char *)&v134 - v49;
  uint64_t v51 = swift_allocObject(&unk_1009493F0, 64LL, 7LL);
  uint64_t v165 = a18;
  *(void *)(v51 + swift_weakDestroy(v0 + 16) = a18;
  *(void *)(v51 + 24) = a19;
  LODWORD(v166) = a20;
  *(_BYTE *)(v51 + 32) = a20;
  *(void *)(v51 + 4sub_100032838(0, 7LL, 0) = v170;
  *(void *)(v51 + 48) = a22;
  uint64_t v169 = v51;
  char v52 = (void *)v168;
  *(void *)(v51 + 56) = v168;
  swift_bridgeObjectRetain(a19);
  uint64_t v167 = a22;
  swift_bridgeObjectRetain(a22);
  uint64_t v53 = v52;
  static SystemInfo.lockState.getter(v53);
  (*(void (**)(char *, void, uint64_t))(v45 + 104))( v48,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v44);
  uint64_t v54 = sub_100007864( (unint64_t *)&qword_1009A2650,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  LOBYTE(v52) = dispatch thunk of static Equatable.== infix(_:_:)(v50, v48, v44, v54);
  uint64_t v55 = *(void (**)(char *, uint64_t))(v45 + 8);
  v55(v48, v44);
  uint64_t v56 = ((uint64_t (*)(char *, uint64_t))v55)(v50, v44);
  if ((v52 & 1) != 0)
  {
    uint64_t v57 = static os_log_type_t.error.getter(v56);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    os_log(_:dso:log:_:_:)( v57,  &_mh_execute_header,  qword_100A2B010,  "Attempt to send message before first unlock!",  44LL,  2LL,  _swiftEmptyArrayStorage);
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v59 = v58;
    uint64_t v179 = 5LL;
    unint64_t v60 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v61 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    unint64_t v62 = v60;
    uint64_t v63 = v59;
LABEL_11:
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v179, v62, v63, v61);
    *uint64_t v43 = aBlock;
    swift_storeEnumTagMultiPayload(v43, v164, 1LL);
    sub_1001F9A9C((uint64_t)v43, v165, a19, v166, (uint64_t)v170, v167, v53);
    sub_100015794((uint64_t)v43, &qword_1009A24D8);
    return swift_release();
  }

  char v64 = (char)v161;
  uint64_t v65 = v162;
  uint64_t v66 = v163;
  uint64_t v67 = sub_1001E6584(v161, v162, v163);
  if ((v67 & 1) == 0)
  {
    uint64_t v75 = static os_log_type_t.error.getter(v67);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v76 = qword_100A2B010;
    uint64_t v77 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v78 = swift_allocObject(v77, 72LL, 7LL);
    *(_OWORD *)(v78 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v78 + 56) = &type metadata for String;
    *(void *)(v78 + 64) = sub_1000226F4();
    *(void *)(v78 + 32) = v65;
    *(void *)(v78 + 4sub_100032838(0, 7LL, 0) = v66;
    *(void *)&double v79 = swift_bridgeObjectRetain(v66).n128_u64[0];
    os_log(_:dso:log:_:_:)( v75,  &_mh_execute_header,  v76,  "Not sending since %@ has no IDS registered devices",  50LL,  2LL,  v78,  v79);
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v81 = v80;
    uint64_t v179 = 12LL;
    unint64_t v82 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v61 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    unint64_t v62 = v82;
    uint64_t v63 = v81;
    goto LABEL_11;
  }

  char v68 = v64;
  uint64_t v165 = a15;
  uint64_t v167 = a14;
  uint64_t v170 = a10;
  LODWORD(v166) = a11 & 1;
  uint64_t v164 = a17;
  uint64_t v168 = *(void *)(a17 + 24);
  uint64_t v69 = sub_100004AEC((uint64_t *)&unk_1009B1370);
  if ((a9 & 1) != 0)
  {
    uint64_t inited = swift_initStackObject(v69, v171);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(_BYTE *)(inited + 32) = v68;
    *(void *)(inited + 4sub_100032838(0, 7LL, 0) = v65;
    *(void *)(inited + 48) = v66;
    uint64_t v71 = v156;
    uint64_t v72 = v142;
    uint64_t v73 = v160;
    (*(void (**)(NSURL *, uint64_t, uint64_t, uint64_t))(v156 + 56))(v142, 1LL, 1LL, v160);
    swift_bridgeObjectRetain(v66);
    *((void *)&v132 + 1) = a16;
    *(void *)&__int128 v132 = v165;
    uint64_t v74 = v139;
    sub_1001E86B0( v148,  v149,  v150,  v151,  v144,  inited,  v72,  v170,  v139,  v166,  a12 & 1,  a13,  (void (*)(uint64_t, uint64_t))v167,  v132);
    swift_bridgeObjectRelease();
    sub_100015794((uint64_t)v72, &qword_10099D8A0);
    uint64_t v170 = *(char **)(v71 + 32);
    ((void (*)(char *, uint64_t, uint64_t))v170)(v159, v74, v73);
    uint64_t v90 = v73;
    uint64_t v91 = v71;
  }

  else
  {
    uint64_t v83 = swift_initStackObject(v69, v178);
    *(_OWORD *)(v83 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(_BYTE *)(v83 + 32) = v68;
    *(void *)(v83 + 4sub_100032838(0, 7LL, 0) = v65;
    *(void *)(v83 + 48) = v66;
    uint64_t v84 = v66;
    uint64_t v91 = v156;
    uint64_t v85 = v143;
    uint64_t v86 = v160;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v156 + 56))(v143, 1LL, 1LL, v160);
    swift_bridgeObjectRetain(v84);
    uint64_t v87 = (void (*)(_BYTE *, uint64_t))v141;
    UUID.init()(v88);
    *((void *)&v133 + 1) = a16;
    *(void *)&__int128 v133 = v165;
    uint64_t v89 = v140;
    sub_1001DE9B8( v148,  v149,  v150,  v151,  v87,  v83,  (unsigned int (*)(void, void, void))v85,  v170,  v140,  v166,  a12 & 1,  (uint64_t)a13,  (uint64_t)v167,  v133);
    swift_bridgeObjectRelease();
    (*(void (**)(void, uint64_t))(v91 + 8))(v87, v86);
    sub_100015794((uint64_t)v85, &qword_10099D8A0);
    uint64_t v170 = *(char **)(v91 + 32);
    ((void (*)(char *, uint64_t, uint64_t))v170)(v159, v89, v86);
    uint64_t v90 = v86;
  }

  uint64_t v92 = sub_100004AEC(&qword_1009A23E8);
  swift_allocObject(v92, *(unsigned int *)(v92 + 48), *(unsigned __int16 *)(v92 + 52));
  uint64_t v168 = Future.init()();
  uint64_t v93 = static os_log_type_t.default.getter(v168);
  if (qword_10099B700 != -1) {
    swift_once(&qword_10099B700, sub_100651100);
  }
  uint64_t v94 = qword_100A2B010;
  uint64_t v95 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v96 = swift_allocObject(v95, 72LL, 7LL);
  *(_OWORD *)(v96 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v97 = v159;
  uint64_t v98 = UUID.uuidString.getter(v96);
  uint64_t v100 = v99;
  *(void *)(v96 + 56) = &type metadata for String;
  *(void *)(v96 + 64) = sub_1000226F4();
  *(void *)(v96 + 32) = v98;
  *(void *)(v96 + 4sub_100032838(0, 7LL, 0) = v100;
  os_log(_:dso:log:_:_:)(v93, &_mh_execute_header, v94, "Setting %@ to pending", 21LL, 2LL, v96);
  swift_bridgeObjectRelease();
  uint64_t v101 = v164;
  uint64_t v163 = *(void *)(v164 + 152);
  uint64_t v167 = *(void **)(v91 + 16);
  uint64_t v102 = v91;
  uint64_t v103 = v134;
  ((void (*)(char *, char *, uint64_t))v167)(v134, v97, v90);
  uint64_t v104 = *(unsigned __int8 *)(v102 + 80);
  uint64_t v162 = ((v104 + 24) & ~v104) + v33;
  uint64_t v105 = (v104 + 24) & ~v104;
  uint64_t v166 = v105;
  uint64_t v165 = v104 | 7;
  unint64_t v106 = (v162 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v107 = swift_allocObject(&unk_100949468, v106 + 8, v104 | 7);
  *(void *)(v107 + swift_weakDestroy(v0 + 16) = v101;
  ((void (*)(uint64_t, char *, uint64_t))v170)(v107 + v105, v103, v90);
  *(void *)(v107 + v106) = v168;
  uint64_t v176 = sub_1001FF3CC;
  uint64_t v177 = v107;
  unint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v173 = 1107296256LL;
  uint64_t v174 = sub_1001C31E8;
  uint64_t v175 = &unk_100949480;
  uint64_t v108 = _Block_copy(&aBlock);
  swift_retain();
  uint64_t v109 = swift_retain();
  uint64_t v110 = v157;
  static DispatchQoS.unspecified.getter(v109);
  uint64_t v179 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v111 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v150 = v111;
  uint64_t v112 = (char *)sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v149 = v112;
  unint64_t v151 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v113 = v154;
  uint64_t v114 = v112;
  uint64_t v115 = v155;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v179, v114, v151, v155, v111);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v110, v113, v108);
  _Block_release(v108);
  uint64_t v161 = *(void (**)(char *, uint64_t))(v153 + 8);
  v161(v113, v115);
  uint64_t v153 = *(void *)(v152 + 8);
  ((void (*)(char *, uint64_t))v153)(v110, v158);
  swift_release();
  uint64_t v116 = v160;
  ((void (*)(char *, char *, uint64_t))v167)(v103, v159, v160);
  uint64_t v117 = swift_allocObject(&unk_1009494B8, v106 + 16, v165);
  *(void *)(v117 + swift_weakDestroy(v0 + 16) = v101;
  ((void (*)(uint64_t, char *, uint64_t))v170)(v117 + v166, v103, v116);
  uint64_t v118 = (void (**)(uint64_t))(v117 + v106);
  uint64_t v119 = (void (*)(uint64_t))v169;
  *uint64_t v118 = sub_10020CF98;
  v118[1] = v119;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_1001FF3D4, v117);
  swift_release();
  swift_release();
  uint64_t v120 = swift_allocObject(&unk_1009494E0, 32LL, 7LL);
  *(void *)(v120 + swift_weakDestroy(v0 + 16) = sub_10020CF98;
  *(void *)(v120 + 24) = v119;
  swift_retain();
  Future.addFailure(block:)(sub_10020FF6C, v120);
  swift_release();
  uint64_t v121 = swift_release();
  uint64_t v122 = v135;
  static DispatchTime.now()(v121);
  uint64_t v123 = v137;
  + infix(_:_:)(v122, *(double *)(v101 + 184));
  uint64_t v152 = *(void *)(v136 + 8);
  uint64_t v124 = v138;
  ((void (*)(char *, uint64_t))v152)(v122, v138);
  uint64_t v125 = v159;
  uint64_t v126 = v160;
  ((void (*)(char *, char *, uint64_t))v167)(v103, v159, v160);
  uint64_t v127 = swift_allocObject(&unk_100949508, v162, v165);
  *(void *)(v127 + swift_weakDestroy(v0 + 16) = v101;
  ((void (*)(uint64_t, char *, uint64_t))v170)(v127 + v166, v103, v126);
  uint64_t v176 = sub_1001FF3E4;
  uint64_t v177 = v127;
  unint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v173 = 1107296256LL;
  uint64_t v174 = sub_1001C31E8;
  uint64_t v175 = &unk_100949520;
  uint64_t v128 = _Block_copy(&aBlock);
  uint64_t v129 = swift_retain();
  uint64_t v130 = v157;
  static DispatchQoS.unspecified.getter(v129);
  uint64_t v179 = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v179, v149, v151, v115, v150);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v123, v130, v113, v128);
  _Block_release(v128);
  swift_release();
  v161(v113, v115);
  ((void (*)(char *, uint64_t))v153)(v130, v158);
  ((void (*)(char *, uint64_t))v152)(v123, v124);
  (*(void (**)(char *, uint64_t))(v156 + 8))(v125, v126);
  swift_release();
  return swift_release();
}

uint64_t sub_100209C44( int a1, char *a2, uint64_t a3, unint64_t a4, uint64_t a5, char *a6, char a7, char a8, void *a9, void (*a10)(uint64_t, uint64_t), uint64_t a11, uint64_t a12, void (*a13)(uint64_t))
{
  uint64_t v15 = a13;
  uint64_t v16 = dispatch_group_create();
  uint64_t v17 = sub_100004AEC(&qword_1009A5FF0);
  uint64_t v18 = swift_allocObject(v17, 28LL, 7LL);
  *(_DWORD *)(v18 + 24) = 0;
  *(void *)(v18 + swift_weakDestroy(v0 + 16) = _swiftEmptyArrayStorage;
  uint64_t v19 = *(void *)(a5 + 16);
  if (v19)
  {
    char v29 = a7 & 1;
    swift_bridgeObjectRetain(a5);
    uint64_t v20 = (void *)(a5 + 48);
    char v28 = a8 & 1;
    do
    {
      uint64_t v21 = (void (*)(uint64_t, uint64_t))*(v20 - 1);
      uint64_t v22 = (void *)*v20;
      int v23 = *((unsigned __int8 *)v20 - 16);
      swift_bridgeObjectRetain(*v20);
      dispatch_group_enter(v16);
      swift_bridgeObjectRetain(v22);
      swift_retain();
      uint64_t v24 = v16;
      sub_100203FD8( a1,  a2,  a3,  a4,  (os_log_s *)_swiftEmptyDictionarySingleton,  v23,  v21,  (uint64_t)v22,  0,  a6,  v29,  v28,  a9,  a10,  a11,  a12,  v30,  v23,  v21,  v22,  v18,  v24);

      swift_release();
      swift_bridgeObjectRelease_n(v22, 2LL);
      v20 += 3;
      --v19;
    }

    while (v19);
    swift_bridgeObjectRelease();
    uint64_t v15 = a13;
  }

  OS_dispatch_group.wait()();
  if (v15)
  {
    uint64_t v25 = sub_100004AEC(&qword_1009A5FF8);
    OSAllocatedUnfairLock<A>.stateSnapshot.getter(&v36, v18, v25);
    v15(v36);
    swift_bridgeObjectRelease();

    return swift_release();
  }

  else
  {

    return swift_release();
  }

uint64_t sub_100209E58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v5 = (uint64_t *)(a2 + *(int *)(v4 + 32));
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  if ((v7 & 0x2000000000000000LL) != 0) {
    uint64_t v8 = HIBYTE(v7) & 0xF;
  }
  else {
    uint64_t v8 = v6 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v9 = type metadata accessor for MessagingMessageContext(0LL);
  if (v8)
  {
    uint64_t v10 = (void *)(a1 + *(int *)(v9 + 48));
    uint64_t v11 = v10[1];
    if (v6 != *v10 || v7 != v11) {
      return _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, *v10, v11, 0LL);
    }
    return 1LL;
  }

  uint64_t v14 = a1 + *(int *)(v9 + 24);
  uint64_t v16 = *(void *)(v14 + 8);
  uint64_t v15 = *(void *)(v14 + 16);
  NSString v17 = String._bridgeToObjectiveC()();
  id v18 = [v17 _stripPotentialTokenURIWithToken:0];

  if (v18)
  {
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    uint64_t v22 = v21;

    uint64_t v23 = a2 + *(int *)(v4 + 28);
    uint64_t v24 = *(void *)(v23 + 8);
    uint64_t v25 = *(void *)(v23 + 16);
    if (v24 != v20 || v25 != v22)
    {
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v20, v22, 0LL);
      swift_bridgeObjectRelease();
      return v27 & 1;
    }

    swift_bridgeObjectRelease();
    return 1LL;
  }

  uint64_t v28 = static os_log_type_t.error.getter(v19);
  if (qword_10099B700 != -1) {
    swift_once(&qword_10099B700, sub_100651100);
  }
  uint64_t v29 = qword_100A2B010;
  uint64_t v30 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v31 = swift_allocObject(v30, 72LL, 7LL);
  *(_OWORD *)(v31 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(v31 + 56) = &type metadata for String;
  *(void *)(v31 + 64) = sub_1000226F4();
  *(void *)(v31 + 32) = v16;
  *(void *)(v31 + 4sub_100032838(0, 7LL, 0) = v15;
  *(void *)&double v32 = swift_bridgeObjectRetain(v15).n128_u64[0];
  os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "No fromID for %@", 16LL, 2LL, v31, v32);
  swift_bridgeObjectRelease();
  return 0LL;
}

uint64_t sub_10020A048()
{
  if (qword_10099B088 != -1) {
    swift_once(&qword_10099B088, sub_1000432EC);
  }
  uint64_t v0 = qword_10099DF60;
  uint64_t v1 = sub_100004AEC(&qword_1009A6188);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10020EBA4, 0LL, v0, (char *)&type metadata for () + 8, v1);
  uint64_t v2 = (uint64_t)v27;
  char v3 = v28;
  id v4 = objc_allocWithZone(&OBJC_CLASS___NSError);
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v4 initWithDomain:v5 code:0 userInfo:0];

  if ((v28 & 1) != 0)
  {
    uint64_t v7 = swift_errorRetain(v27);
    uint64_t v8 = static os_log_type_t.error.getter(v7);
    if (qword_10099B728 != -1) {
      swift_once(&qword_10099B728, sub_1006512E8);
    }
    uint64_t v9 = qword_100A2B038;
    uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v11 = swift_allocObject(v10, 72LL, 7LL);
    *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    id v27 = (id)v2;
    swift_errorRetain(v2);
    uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v13 = String.init<A>(describing:)(&v27, v12);
    uint64_t v15 = v14;
    *(void *)(v11 + 56) = &type metadata for String;
    *(void *)(v11 + 64) = sub_1000226F4();
    *(void *)(v11 + 32) = v13;
    *(void *)(v11 + 4sub_100032838(0, 7LL, 0) = v15;
    os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "FamilyCircle error: %@", 22LL, 2LL, v11, v27);
  }

  else
  {
    id v16 = v6;
    uint64_t v17 = static os_log_type_t.error.getter(v16);
    if (qword_10099B728 != -1) {
      swift_once(&qword_10099B728, sub_1006512E8);
    }
    uint64_t v18 = qword_100A2B038;
    uint64_t v19 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v20 = swift_allocObject(v19, 72LL, 7LL);
    *(_OWORD *)(v20 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    id v27 = v16;
    v16;
    uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v22 = String.init<A>(describing:)(&v27, v21);
    uint64_t v24 = v23;
    *(void *)(v20 + 56) = &type metadata for String;
    *(void *)(v20 + 64) = sub_1000226F4();
    *(void *)(v20 + 32) = v22;
    *(void *)(v20 + 4sub_100032838(0, 7LL, 0) = v24;
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "FMFFollowers error: %@", 22LL, 2LL, v20, v27);
  }

  uint64_t v25 = swift_bridgeObjectRelease();
  swift_willThrow(v25);

  return sub_100044A2C(v2, v3);
}

void sub_10020A32C()
{
  uint64_t v1 = sub_10020A048();
  if (v0) {
    return;
  }
  uint64_t v3 = v2;
  uint64_t v116 = v1;
  id v4 = [(id)objc_opt_self(ACAccountStore) defaultStore];
  if (!v4) {
    goto LABEL_65;
  }
  NSString v5 = v4;
  id v6 = objc_msgSend(v4, "aa_primaryAppleAccount");

  if (!v6)
  {
    swift_bridgeObjectRelease();
    uint64_t v23 = swift_bridgeObjectRelease();
    uint64_t v24 = static os_log_type_t.error.getter(v23);
    if (qword_10099B728 != -1) {
      swift_once(&qword_10099B728, sub_1006512E8);
    }
    os_log(_:dso:log:_:_:)( v24,  &_mh_execute_header,  qword_100A2B038,  "Could not obtain aa_primaryAppleAccount!",  40LL,  2LL,  _swiftEmptyArrayStorage);
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v26 = v25;
    v117[0] = 15LL;
    unint64_t v27 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v28 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    uint64_t v29 = _BridgedStoredNSError.init(_:userInfo:)(v118, v117, v27, v26, v28);
    swift_willThrow(v29);
    return;
  }

  id v7 = [v6 username];
  if (!v7) {
    goto LABEL_66;
  }
  uint64_t v8 = v7;
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v11 = v10;

  _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(v9, v11);
  if (!v14)
  {
    swift_bridgeObjectRelease();
    uint64_t v30 = swift_bridgeObjectRelease();
    uint64_t v31 = static os_log_type_t.error.getter(v30);
    if (qword_10099B728 != -1) {
      swift_once(&qword_10099B728, sub_1006512E8);
    }
    os_log(_:dso:log:_:_:)( v31,  &_mh_execute_header,  qword_100A2B038,  "Could not obtain local account MessageDestination!",  50LL,  2LL,  _swiftEmptyArrayStorage);
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v33 = v32;
    v117[0] = 15LL;
    unint64_t v34 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v35 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    uint64_t v36 = _BridgedStoredNSError.init(_:userInfo:)(v118, v117, v34, v33, v35);
    swift_willThrow(v36);

    return;
  }

  char v15 = v12;
  uint64_t v16 = v13;
  uint64_t v17 = v14;
  uint64_t v110 = v6;
  sub_1001DB830(v116);
  uint64_t v19 = (unint64_t *)sub_1006F1294(v18);
  swift_bridgeObjectRelease();
  uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009B1370);
  uint64_t inited = swift_initStackObject(v20, v119);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(_BYTE *)(inited + 32) = v15;
  *(void *)(inited + 4sub_100032838(0, 7LL, 0) = v16;
  *(void *)(inited + 48) = v17;
  uint64_t v22 = sub_1006F1294(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1LL, &type metadata for MessagingDestination);
  if (*(void *)(v22 + 16) <= v19[2] >> 3)
  {
    v118[0] = v19;
    sub_1003CC0F8(v22);
  }

  else
  {
    uint64_t v19 = sub_1003CDA5C(v22, v19);
  }

  swift_bridgeObjectRelease();
  sub_1001DC384(v3);
  uint64_t v38 = v37;
  swift_bridgeObjectRelease();
  uint64_t v39 = sub_1006F1294(v38);
  uint64_t v40 = swift_bridgeObjectRelease();
  LODWORD(v115) = static os_log_type_t.default.getter(v40);
  if (qword_10099B728 != -1) {
LABEL_62:
  }
    swift_once(&qword_10099B728, sub_1006512E8);
  uint64_t v41 = qword_100A2B038;
  uint64_t v42 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v43 = swift_allocObject(v42, 72LL, 7LL);
  *(_OWORD *)(v43 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  unint64_t v44 = sub_10020EA54();
  swift_bridgeObjectRetain(v19);
  uint64_t v46 = Set.description.getter(v45, &type metadata for MessagingDestination, v44);
  uint64_t v48 = v47;
  swift_bridgeObjectRelease();
  *(void *)(v43 + 56) = &type metadata for String;
  unint64_t v49 = sub_1000226F4();
  *(void *)(v43 + 64) = v49;
  *(void *)(v43 + 32) = v46;
  *(void *)(v43 + 4sub_100032838(0, 7LL, 0) = v48;
  os_log(_:dso:log:_:_:)(v115, &_mh_execute_header, v41, "familyAppleIDs: %@", 18LL, 2LL, v43);
  uint64_t v50 = swift_bridgeObjectRelease();
  uint64_t v51 = static os_log_type_t.default.getter(v50);
  uint64_t v52 = qword_100A2B038;
  uint64_t v112 = v42;
  uint64_t v53 = swift_allocObject(v42, 72LL, 7LL);
  *(_OWORD *)(v53 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  swift_bridgeObjectRetain(v39);
  uint64_t v55 = Set.description.getter(v54, &type metadata for MessagingDestination, v44);
  uint64_t v57 = v56;
  swift_bridgeObjectRelease();
  *(void *)(v53 + 56) = &type metadata for String;
  *(void *)(v53 + 64) = v49;
  *(void *)(v53 + 32) = v55;
  *(void *)(v53 + 4sub_100032838(0, 7LL, 0) = v57;
  os_log(_:dso:log:_:_:)(v51, &_mh_execute_header, v52, "followerDestinations: %@", 24LL, 2LL, v53);
  swift_bridgeObjectRelease();
  uint64_t v121 = _swiftEmptyDictionarySingleton;
  uint64_t v115 = sub_1007BA840(v39, (uint64_t)v19);
  uint64_t v58 = (void *)swift_bridgeObjectRelease();
  uint64_t v59 = v116;
  if ((v116 & 0xC000000000000001LL) != 0)
  {
    if (v116 < 0) {
      uint64_t v60 = v116;
    }
    else {
      uint64_t v60 = v116 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v39 = __CocoaSet.makeIterator()(v60);
    uint64_t v19 = &qword_10099DF88;
    uint64_t v61 = sub_100022898(0LL, &qword_10099DF88, &OBJC_CLASS___FAFamilyMember_ptr);
    uint64_t v62 = sub_10020EB64( &qword_1009A6178,  &qword_10099DF88,  &OBJC_CLASS___FAFamilyMember_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
    uint64_t v58 = Set.Iterator.init(_cocoa:)(v120, v39, v61, v62);
    uint64_t v59 = v120[0];
    uint64_t v113 = v120[1];
    uint64_t v63 = v120[2];
    uint64_t v64 = v120[3];
    unint64_t v65 = v120[4];
  }

  else
  {
    uint64_t v64 = 0LL;
    uint64_t v66 = -1LL << *(_BYTE *)(v116 + 32);
    uint64_t v113 = v116 + 56;
    uint64_t v63 = ~v66;
    uint64_t v67 = -v66;
    if (v67 < 64) {
      uint64_t v68 = ~(-1LL << v67);
    }
    else {
      uint64_t v68 = -1LL;
    }
    unint64_t v65 = v68 & *(void *)(v116 + 56);
  }

  int64_t v111 = (unint64_t)(v63 + 64) >> 6;
  uint64_t v69 = &qword_100A2B000;
  while (1)
  {
    while (1)
    {
      if (v59 < 0)
      {
        uint64_t v76 = __CocoaSet.Iterator.next()(v58);
        if (!v76) {
          goto LABEL_60;
        }
        uint64_t v77 = v76;
        v117[0] = v76;
        uint64_t v78 = sub_100022898(0LL, &qword_10099DF88, &OBJC_CLASS___FAFamilyMember_ptr);
        swift_unknownObjectRetain(v77);
        swift_dynamicCast(v118, v117, (char *)&type metadata for Swift.AnyObject + 8, v78, 7LL);
        id v79 = (id)v118[0];
        swift_unknownObjectRelease(v77);
        uint64_t v75 = v64;
        uint64_t v73 = v65;
        if (!v79) {
          goto LABEL_60;
        }
      }

      else
      {
        if (v65)
        {
          uint64_t v73 = (v65 - 1) & v65;
          unint64_t v74 = __clz(__rbit64(v65)) | (v64 << 6);
          uint64_t v75 = v64;
        }

        else
        {
          int64_t v80 = v64 + 1;
          if (__OFADD__(v64, 1LL))
          {
            __break(1u);
            goto LABEL_62;
          }

          if (v80 >= v111) {
            goto LABEL_60;
          }
          unint64_t v81 = *(void *)(v113 + 8 * v80);
          uint64_t v75 = v64 + 1;
          if (!v81)
          {
            uint64_t v75 = v64 + 2;
            if (v64 + 2 >= v111) {
              goto LABEL_60;
            }
            unint64_t v81 = *(void *)(v113 + 8 * v75);
            if (!v81)
            {
              uint64_t v75 = v64 + 3;
              if (v64 + 3 >= v111) {
                goto LABEL_60;
              }
              unint64_t v81 = *(void *)(v113 + 8 * v75);
              if (!v81)
              {
                uint64_t v75 = v64 + 4;
                if (v64 + 4 >= v111) {
                  goto LABEL_60;
                }
                unint64_t v81 = *(void *)(v113 + 8 * v75);
                if (!v81)
                {
                  uint64_t v82 = v64 + 5;
                  while (v111 != v82)
                  {
                    unint64_t v81 = *(void *)(v113 + 8 * v82++);
                    if (v81)
                    {
                      uint64_t v75 = v82 - 1;
                      goto LABEL_46;
                    }
                  }

uint64_t sub_10020AE6C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10020AE90()
{
}

unint64_t sub_10020AEAC()
{
  unint64_t result = qword_1009B8210;
  if (!qword_1009B8210)
  {
    uint64_t v1 = sub_100004B78((uint64_t *)&unk_1009B81E0);
    sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009B8210);
  }

  return result;
}

uint64_t sub_10020AF28()
{
  return sub_10020F99C((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10020AF38(uint64_t a1)
{
  return sub_10020F390( a1,  type metadata accessor for SharedBeaconRecord,  (uint64_t (*)(uint64_t, void, unint64_t, void, void))sub_1001F47B8);
}

uint64_t sub_10020AF4C()
{
  return sub_10020F99C((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10020AF58()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v0 + v4 + v1[18];
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  uint64_t v12 = v0 + v4 + v1[19];
  uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1LL, v7)) {
    v9(v12, v7);
  }
  uint64_t v14 = v0 + v4 + v1[20];
  uint64_t v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v14, 1LL, v15))
  {
    uint64_t v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1LL, v7)) {
      v9(v16, v7);
    }
  }

  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | 7);
}

uint64_t sub_10020B108(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SharedBeaconRecord(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (uint64_t *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  return sub_1001F4B9C(a1, v1 + v4, *v5, v5[1]);
}

void sub_10020B15C()
{
}

uint64_t sub_10020B178()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_10020B1AC(uint64_t a1)
{
}

uint64_t sub_10020B1BC()
{
  return sub_10020F99C((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10020B1D4(unint64_t *a1)
{
  return sub_1001EB9AC(a1, *(void *)(v1 + 16));
}

unint64_t sub_10020B1EC()
{
  unint64_t result = qword_1009A6008;
  if (!qword_1009A6008)
  {
    uint64_t v1 = sub_100004B78(&qword_1009B1500);
    sub_100007864(&qword_1009A6010, type metadata accessor for BeaconObservation, (uint64_t)&unk_100800FA0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009A6008);
  }

  return result;
}

unint64_t sub_10020B268()
{
  unint64_t result = qword_1009A6018;
  if (!qword_1009A6018)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F74B8, &type metadata for BeaconSharingManager.BeaconSharingKeyError);
    atomic_store(result, (unint64_t *)&qword_1009A6018);
  }

  return result;
}

uint64_t sub_10020B2AC()
{
  return sub_10020EFE8((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_10020B2B8(uint64_t a1)
{
}

void sub_10020B2C4(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t sub_10020B2E0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

unint64_t sub_10020B304()
{
  unint64_t result = qword_1009A6030;
  if (!qword_1009A6030)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A6028);
    sub_100007864(&qword_1009A6038, type metadata accessor for LegacySelfBeaconingKeyEnvelope, (uint64_t)&unk_1007E9968);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009A6030);
  }

  return result;
}

void sub_10020B384(uint64_t a1)
{
}

uint64_t sub_10020B3A8()
{
  return sub_10020F99C((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10020B3C0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10020B3E4()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_10020B418(uint64_t a1, char a2)
{
  return sub_1006949D8( a1,  a2 & 1,  *(_BYTE *)(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  *(void (**)(__n128))(v2 + 40),  *(void *)(v2 + 48),  *(void *)(v2 + 56));
}

uint64_t sub_10020B434()
{
  uint64_t v2 = swift_task_alloc(dword_1009A6044);
  __int128 v3 = *(_OWORD *)(v0 + 32);
  __int128 v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100015D58;
  *(_OWORD *)(v2 + swift_weakDestroy(v0 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  return swift_task_switch(sub_1001FB90C, 0LL, 0LL);
}

uint64_t sub_10020B494()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 24, v3 | 7);
}

uint64_t sub_10020B744(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (unsigned __int8 *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  return sub_1001F8F78(a1, v1 + v4, *v5, *((void *)v5 + 1), *((void *)v5 + 2));
}

unint64_t sub_10020B79C()
{
  unint64_t result = qword_1009A6060;
  if (!qword_1009A6060)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A6058);
    sub_100007864( &qword_1009A6068,  type metadata accessor for FindMyAccessoryFamilyKeyEnvelope,  (uint64_t)&unk_10080F1CC);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009A6060);
  }

  return result;
}

unint64_t sub_10020B818()
{
  unint64_t result = qword_1009A6080;
  if (!qword_1009A6080)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A6078);
    sub_100007864(&qword_1009A6088, type metadata accessor for SelfBeaconingKeyEnvelope, (uint64_t)&unk_1007E9940);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009A6080);
  }

  return result;
}

uint64_t sub_10020B894()
{
  uint64_t v1 = type metadata accessor for DateInterval(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = v3 | 7;
  uint64_t v6 = *(void *)(v2 + 64) + v4 + 3;
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10020B914(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for DateInterval(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 64LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = v1 + 24;
  uint64_t v8 = v1 + v5;
  uint64_t v9 = (unsigned __int8 *)(v1 + *(void *)(v4 + 64) + v5);
  uint64_t v10 = v9[1];
  uint64_t v11 = v9[2];
  uint64_t v12 = *v9;
  uint64_t v13 = (void *)swift_task_alloc(dword_1009B2894);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = sub_1000159BC;
  return sub_100520DE8(a1, v6, v7, v8, v12, v10, v11);
}

void sub_10020B9D0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), void **a5)
{
  uint64_t v205 = a3;
  *(void *)&__int128 v228 = a2;
  uint64_t v195 = a1;
  uint64_t v214 = type metadata accessor for Date(0LL);
  uint64_t v213 = *(void *)(v214 - 8);
  __chkstk_darwin(v214);
  uint64_t v212 = (char *)&v183 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v211 = type metadata accessor for UUID(0LL);
  uint64_t v227 = *(void *)(v211 - 8);
  __chkstk_darwin(v211);
  uint64_t v210 = (char *)&v183 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v224 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v224);
  uint64_t v209 = (uint64_t)&v183 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v207 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v10 = __chkstk_darwin(v207);
  uint64_t v208 = (uint64_t)&v183 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (__int128 *)((char *)&v183 - v12);
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  Swift::Int v188 = (char *)&v183 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v194 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v187 = (char *)&v183 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v193 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v192 = *(void *)(v193 - 8);
  __chkstk_darwin(v193);
  uint64_t v189 = (char *)&v183 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for ShareRecord(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v216 = (uint64_t)&v183 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = swift_allocObject(&unk_100949170, 32LL, 7LL);
  uint64_t v225 = a4;
  *(void *)(v23 + swift_weakDestroy(v0 + 16) = a4;
  *(void *)(v23 + 24) = a5;
  uint64_t v24 = swift_allocObject(&unk_100948F18, 24LL, 7LL);
  uint64_t v217 = (void (*)(char *, uint64_t, uint64_t))v24;
  *(void *)(v24 + swift_weakDestroy(v0 + 16) = 0LL;
  uint64_t v186 = (uint64_t *)(v24 + 16);
  uint64_t v25 = (void *)objc_opt_self(&OBJC_CLASS___ACAccountStore);
  unint64_t v226 = a5;
  swift_retain();
  id v26 = [v25 defaultStore];
  if (!v26)
  {
    swift_release();
    __break(1u);
LABEL_31:
    swift_release();
    __break(1u);
    goto LABEL_32;
  }

  unint64_t v27 = v26;
  id v28 = objc_msgSend(v26, "aa_primaryAppleAccount");

  if (!v28)
  {
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v92 = v91;
    uint64_t v230 = 7LL;
    unint64_t v93 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v94 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v230, v93, v92, v94);
    uint64_t v95 = aBlock;
    uint64_t v96 = swift_errorRetain(aBlock);
    uint64_t v97 = static os_log_type_t.error.getter(v96);
    if (qword_10099B6F8 != -1) {
      swift_once(&qword_10099B6F8, sub_100651098);
    }
    uint64_t v98 = qword_100A2B008;
    uint64_t v99 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v100 = swift_allocObject(v99, 72LL, 7LL);
    *(_OWORD *)(v100 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v230 = (uint64_t)v95;
    swift_errorRetain(v95);
    uint64_t v101 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v102 = String.init<A>(describing:)(&v230, v101);
    uint64_t v104 = v103;
    *(void *)(v100 + 56) = &type metadata for String;
    *(void *)(v100 + 64) = sub_1000226F4();
    *(void *)(v100 + 32) = v102;
    *(void *)(v100 + 4sub_100032838(0, 7LL, 0) = v104;
    os_log(_:dso:log:_:_:)(v97, &_mh_execute_header, v98, "Error from updateSharedBeaconRecord: %@", 39LL, 2LL, v100);

    uint64_t v105 = swift_bridgeObjectRelease();
    v225(v105);
    swift_release();
    swift_release();

    return;
  }

  uint64_t v204 = v15;
  uint64_t v185 = v14;
  uint64_t v190 = v23;
  id v191 = v28;
  id v29 = [v28 username];
  if (!v29) {
    goto LABEL_31;
  }
  uint64_t v30 = v29;
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  uint64_t v33 = v32;

  _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(v31, v33);
  uint64_t v203 = v34;
  uint64_t v202 = v35;
  uint64_t v36 = v228;
  uint64_t v215 = v37;
  if (!v37)
  {
    uint64_t v106 = static os_log_type_t.error.getter(v34);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v107 = qword_100A2B010;
    uint64_t v108 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v109 = swift_allocObject(v108, 72LL, 7LL);
    __int128 v228 = xmmword_1007E67D0;
    *(_OWORD *)(v109 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    id v110 = [v191 username];
    if (v110)
    {
      int64_t v111 = v110;
      uint64_t v112 = static String._unconditionallyBridgeFromObjectiveC(_:)(v110);
      uint64_t v114 = v113;

      *(void *)(v109 + 56) = &type metadata for String;
      unint64_t v115 = sub_1000226F4();
      *(void *)(v109 + 64) = v115;
      *(void *)(v109 + 32) = v112;
      *(void *)(v109 + 4sub_100032838(0, 7LL, 0) = v114;
      os_log(_:dso:log:_:_:)( v106,  &_mh_execute_header,  v107,  "Could not create MessagingDestination from: %@",  46LL,  2LL,  v109);
      swift_bridgeObjectRelease();
      type metadata accessor for SPOwnerSessionError(0LL);
      uint64_t v117 = v116;
      uint64_t v230 = 7LL;
      unint64_t v118 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v119 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
      _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v230, v118, v117, v119);
      uint64_t v120 = aBlock;
      uint64_t v121 = swift_errorRetain(aBlock);
      uint64_t v122 = static os_log_type_t.error.getter(v121);
      if (qword_10099B6F8 != -1) {
        swift_once(&qword_10099B6F8, sub_100651098);
      }
      uint64_t v123 = qword_100A2B008;
      uint64_t v124 = swift_allocObject(v108, 72LL, 7LL);
      *(_OWORD *)(v124 + swift_weakDestroy(v0 + 16) = v228;
      uint64_t v230 = (uint64_t)v120;
      swift_errorRetain(v120);
      uint64_t v125 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v126 = String.init<A>(describing:)(&v230, v125);
      *(void *)(v124 + 56) = &type metadata for String;
      *(void *)(v124 + 64) = v115;
      *(void *)(v124 + 32) = v126;
      *(void *)(v124 + 4sub_100032838(0, 7LL, 0) = v127;
      os_log(_:dso:log:_:_:)( v122,  &_mh_execute_header,  v123,  "Error from updateSharedBeaconRecord: %@",  39LL,  2LL,  v124);

      uint64_t v128 = swift_bridgeObjectRelease();
      v225(v128);
      swift_release();
      swift_release();

      return;
    }

uint64_t sub_10020CE64(uint64_t a1)
{
  return sub_1004B2CF4(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_10020CE6C()
{
  return sub_10020F99C((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10020CE78()
{
  return (*(uint64_t (**)(void))(v0 + 16))(0LL);
}

uint64_t sub_10020CE9C()
{
  return sub_10020F99C((void (*)(void))&_swift_errorRelease);
}

void sub_10020CEAC(uint64_t a1)
{
}

uint64_t sub_10020CED0()
{
  return sub_10020F99C((void (*)(void))&_swift_errorRelease);
}

unint64_t sub_10020CEE8()
{
  unint64_t result = qword_1009A60A0;
  if (!qword_1009A60A0)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A6098);
    sub_100007864( (unint64_t *)&unk_1009BEF30,  type metadata accessor for SharedBeaconRecord,  (uint64_t)&unk_10081ACBC);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009A60A0);
  }

  return result;
}

uint64_t sub_10020CF64()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

void sub_10020CF98(uint64_t a1)
{
}

uint64_t sub_10020CFAC()
{
  return sub_10020F99C((void (*)(void))&_swift_errorRelease);
}

unint64_t sub_10020CFC4()
{
  unint64_t result = qword_1009A60B8;
  if (!qword_1009A60B8)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A60B0);
    sub_100007864( &qword_1009A60C0,  type metadata accessor for SecureLocationsKeyUpdateEnvelope,  (uint64_t)&unk_10080D520);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009A60B8);
  }

  return result;
}

uint64_t sub_10020D040()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_10020D06C(uint64_t a1)
{
}

uint64_t sub_10020D07C()
{
  return sub_10020F99C((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10020D094()
{
  return sub_100458460(v0);
}

uint64_t sub_10020D09C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10020D0AC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10020D0D0()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10020D370()
{
  return sub_10020E1D0(type metadata accessor for OwnedBeaconRecord, sub_1001EBD64);
}

uint64_t sub_10020D384()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6 + 8));
  return swift_deallocObject(v0, ((v6 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8, v5);
}

uint64_t sub_10020D404(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL;
  uint64_t v7 = v1 + v5;
  uint64_t v8 = swift_task_alloc(dword_1009A60DC);
  __int128 v9 = *(_OWORD *)(v1 + v6);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v8;
  *(void *)uint64_t v8 = v2;
  *(void *)(v8 + 8) = sub_100015D58;
  *(_OWORD *)(v8 + 32) = v9;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v8 + 24) = v7;
  return swift_task_switch(sub_1001EBBA0, 0LL, 0LL);
}

uint64_t sub_10020D4A0()
{
  uint64_t v2 = swift_task_alloc(dword_1009A60EC);
  __int128 v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_10020D500;
  *(_OWORD *)(v2 + swift_weakDestroy(v0 + 16) = v3;
  return swift_task_switch(sub_1001EBD2C, 0LL, 0LL);
}

uint64_t sub_10020D500(uint64_t a1)
{
  uint64_t v4 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_10020D550(uint64_t a1)
{
  return sub_1001EBE24(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10020D568()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10020D810()
{
  return sub_10020F5E8( type metadata accessor for OwnedBeaconRecord,  (uint64_t (*)(void, void, uint64_t))sub_1001EC098);
}

uint64_t sub_10020D824(uint64_t a1)
{
  return sub_1001EE838( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(unsigned __int8 *)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56));
}

uint64_t sub_10020D848()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 24, v3 | 7);
}

uint64_t sub_10020DB00(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (unsigned __int8 *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  return sub_1001EEC78(a1, *(void *)(v1 + 16), v1 + v4, *v5, *((void *)v5 + 1), *((void *)v5 + 2));
}

uint64_t sub_10020DB5C(uint64_t a1)
{
  return sub_1001E6798(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10020DB64()
{
  uint64_t v1 = (int *)type metadata accessor for ShareInstruction(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v26 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v24 = *(void *)(v2 + 64);
  swift_release();
  uint64_t v25 = (v26 + 24) & ~v26;
  uint64_t v23 = v0;
  uint64_t v3 = v0 + v25;
  swift_bridgeObjectRelease();
  uint64_t v4 = v0 + v25 + v1[6];
  sub_100016F9C(*(void *)v4, *(void *)(v4 + 8));
  uint64_t v5 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v6 = v4 + v5[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  uint64_t v10 = v4 + v5[6];
  uint64_t v11 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v10, v11))
  {
    case 0u:
    case 4u:
      goto LABEL_5;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 2u:
      v9(v10, v7);
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v9(v10, v7);
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v12 = v4 + v5[7];
  uint64_t v13 = v4 + v5[8];
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v16(v13, v14);
  sub_100016F9C(*(void *)(v4 + v5[9]), *(void *)(v4 + v5[9] + 8));
  unint64_t v17 = (uint64_t *)(v4 + v5[10]);
  unint64_t v18 = v17[1];
  if (v18 >> 60 != 15) {
    sub_100016F9C(*v17, v18);
  }
  unint64_t v19 = (uint64_t *)(v4 + v5[11]);
  unint64_t v20 = v19[1];
  if (v20 >> 60 != 15) {
    sub_100016F9C(*v19, v20);
  }
  sub_100016F9C(*(void *)(v4 + v5[12]), *(void *)(v4 + v5[12] + 8));
  sub_100016F9C(*(void *)(v4 + v5[13]), *(void *)(v4 + v5[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9(v3 + v1[8], v7);
  uint64_t v21 = v3 + v1[9];
  swift_release();
  return swift_deallocObject(v23, ((v24 + v25 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16, v26 | 7);
}

uint64_t sub_10020DE98(uint64_t a1)
{
  return sub_10020F390( a1,  type metadata accessor for ShareInstruction,  (uint64_t (*)(uint64_t, void, unint64_t, void, void))sub_1001E6E98);
}

uint64_t sub_10020DEB4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10020DEC4(uint64_t a1)
{
  return sub_1001F3404( a1,  *(void *)(v1 + 16),  *(unsigned __int8 *)(v1 + 24),  *(char **)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56),  *(void *)(v1 + 64));
}

uint64_t sub_10020DEEC()
{
  return sub_10020EFE8((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10020DEF8(uint64_t a1)
{
  return sub_1001F34FC( a1,  *(void *)(v1 + 16),  *(unsigned __int8 *)(v1 + 24),  *(char **)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56));
}

uint64_t sub_10020DF1C(uint64_t a1)
{
  return sub_1001F3608(a1, v1, "Error sending legacy shareBeacon message: %@", 44LL);
}

uint64_t sub_10020DF40()
{
  return sub_10020F99C((void (*)(void))&_swift_errorRelease);
}

unint64_t sub_10020DF58()
{
  unint64_t result = qword_1009A6128;
  if (!qword_1009A6128)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A6120);
    sub_100007864(&qword_1009A6130, type metadata accessor for LegacyShareEnvelope, (uint64_t)&unk_100819FEC);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009A6128);
  }

  return result;
}

uint64_t sub_10020DFD4(uint64_t a1)
{
  return sub_1001F3608(a1, v1, "Error sending shareBeacon message: %@", 37LL);
}

uint64_t sub_10020DFF8()
{
  return sub_10020F99C((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10020E008()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10020E098()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1001E9E00( *(void *)(v0 + 16),  v0 + v2,  *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10020E0E0()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10020E174(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (uint64_t *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  return sub_1001E9EF8(a1, *(void *)(v1 + 16), v1 + v4, *v5, v5[1]);
}

uint64_t sub_10020E1D0(uint64_t (*a1)(void), uint64_t (*a2)(void, uint64_t))
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(a1(0LL) - 8) + 80LL);
  return a2(*(void *)(v2 + 16), v2 + ((v3 + 24) & ~v3));
}

unint64_t sub_10020E214()
{
  unint64_t result = qword_1009A6148;
  if (!qword_1009A6148)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A6140);
    sub_100007864(&qword_1009A6150, type metadata accessor for FamilyShareEnvelopeV1, (uint64_t)&unk_100819FC4);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009A6148);
  }

  return result;
}

uint64_t sub_10020E290@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1001E45E4(a1, v2, a2);
}

uint64_t sub_10020E298(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1001E4CB8(a1, a2, a3, v3);
}

uint64_t sub_10020E2A0()
{
  return sub_10045859C(v0);
}

uint64_t sub_10020E2B8()
{
  return sub_1001E4E28(v0);
}

uint64_t sub_10020E2C0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10020E2D0()
{
  uint64_t v1 = (int *)type metadata accessor for ShareRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  uint64_t v9 = v0 + v4 + v1[7];
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  uint64_t v13 = v0 + v4 + v1[8];
  unint64_t v14 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject(v0, v14 + 8, v3 | 7);
}

void sub_10020E408(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for ShareRecord(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_1001E53BC(a1, v1 + v4, *(dispatch_group_s **)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10020E458(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = type metadata accessor for ShareRecord(0LL);
  return static UUID.== infix(_:_:)(a1 + *(int *)(v4 + 20), v3) & 1;
}

uint64_t sub_10020E4A4()
{
  uint64_t v1 = sub_100004AEC(&qword_1009A6100);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  uint64_t v6 = (uint64_t *)(v0 + v4);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v1) == 1)
  {
    swift_errorRelease(*v6);
  }

  else
  {
    sub_100016F9C(*v6, v6[1]);
    uint64_t v7 = (int *)type metadata accessor for ShareRecord(0LL);
    uint64_t v8 = (char *)v6 + v7[5];
    uint64_t v9 = type metadata accessor for UUID(0LL);
    uint64_t v10 = *(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8LL);
    v10(v8, v9);
    v10((char *)v6 + v7[6], v9);
    uint64_t v11 = (char *)v6 + v7[7];
    uint64_t v12 = type metadata accessor for Date(0LL);
    uint64_t v13 = *(void *)(v12 - 8);
    unint64_t v14 = *(void (**)(char *, uint64_t))(v13 + 8);
    v14(v11, v12);
    uint64_t v15 = (char *)v6 + v7[8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10020E5F8()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(sub_100004AEC(&qword_1009A6100) - 8) + 80LL);
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(v0 + ((v1 + 32) & ~v1));
}

BOOL sub_10020E63C(uint64_t a1)
{
  return sub_1001E6430(a1, *(void *)(v1 + 16));
}

uint64_t sub_10020E658()
{
  uint64_t v1 = (int *)type metadata accessor for ShareInstruction(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v26 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v24 = *(void *)(v2 + 64);

  swift_release();
  uint64_t v25 = (v26 + 32) & ~v26;
  uint64_t v23 = v0;
  uint64_t v3 = v0 + v25;
  swift_bridgeObjectRelease();
  uint64_t v4 = v0 + v25 + v1[6];
  sub_100016F9C(*(void *)v4, *(void *)(v4 + 8));
  uint64_t v5 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v6 = v4 + v5[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  uint64_t v10 = v4 + v5[6];
  uint64_t v11 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v10, v11))
  {
    case 0u:
    case 4u:
      goto LABEL_5;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 2u:
      v9(v10, v7);
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v9(v10, v7);
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v12 = v4 + v5[7];
  uint64_t v13 = v4 + v5[8];
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v16(v13, v14);
  sub_100016F9C(*(void *)(v4 + v5[9]), *(void *)(v4 + v5[9] + 8));
  unint64_t v17 = (uint64_t *)(v4 + v5[10]);
  unint64_t v18 = v17[1];
  if (v18 >> 60 != 15) {
    sub_100016F9C(*v17, v18);
  }
  unint64_t v19 = (uint64_t *)(v4 + v5[11]);
  unint64_t v20 = v19[1];
  if (v20 >> 60 != 15) {
    sub_100016F9C(*v19, v20);
  }
  sub_100016F9C(*(void *)(v4 + v5[12]), *(void *)(v4 + v5[12] + 8));
  sub_100016F9C(*(void *)(v4 + v5[13]), *(void *)(v4 + v5[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9(v3 + v1[8], v7);
  uint64_t v21 = v3 + v1[9];
  return swift_deallocObject(v23, v25 + v24, v26 | 7);
}

void sub_10020E970(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(type metadata accessor for ShareInstruction(0LL) - 8) + 80LL);
  sub_1001E5E1C(a1, v4, *(dispatch_group_s **)(v2 + 16), *(void *)(v2 + 24), v2 + ((v5 + 32) & ~v5));
}

uint64_t sub_10020E9C0()
{
  return swift_deallocObject(v0, 33LL, 7LL);
}

uint64_t sub_10020E9E4(uint64_t a1, char a2)
{
  return sub_100695118( a1,  a2 & 1,  *(void (**)(uint64_t, uint64_t))(v2 + 16),  *(void *)(v2 + 24),  *(_BYTE *)(v2 + 32));
}

uint64_t sub_10020E9F8()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_10020EA34(uint64_t a1)
{
  return sub_1001EDBE0(a1, *(void *)(v1 + 16));
}

uint64_t sub_10020EA4C(uint64_t a1)
{
  return sub_1001EDC90(a1);
}

unint64_t sub_10020EA54()
{
  unint64_t result = qword_1009A6160;
  if (!qword_1009A6160)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for MessagingDestination,  &type metadata for MessagingDestination);
    atomic_store(result, &qword_1009A6160);
  }

  return result;
}

uint64_t sub_10020EA98()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10020EACC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = swift_task_alloc(dword_1009A616C);
  __int128 v6 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = sub_100015D58;
  *(void *)(v5 + 4sub_100032838(0, 7LL, 0) = v4;
  *(_OWORD *)(v5 + 24) = v6;
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a1;
  return swift_task_switch(sub_1001ED5A0, 0LL, 0LL);
}

uint64_t sub_10020EB44()
{
  return sub_10020F748( (void (*)(void))&_swift_bridgeObjectRelease,  (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10020EB54(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1001ED77C(a1, a2, a3, a4, a5, a6, *(void *)(v6 + 16), *(void *)(v6 + 24));
}

uint64_t sub_10020EB5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  return sub_1001BCF54( a1,  a2,  *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 16),  a3);
}

uint64_t sub_10020EB64(unint64_t *a1, unint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_100022898(255LL, a2, a3);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10020EBA4@<X0>(uint64_t a1@<X8>)
{
  return sub_10004342C(a1);
}

uint64_t sub_10020EBB8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  return sub_1001E2718(a1, a2, a3, a4, a5, v5);
}

uint64_t sub_10020EBC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1001E279C(a1, a2, a3, a4, a5, a6);
}

__n128 sub_10020EBC8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return result;
}

uint64_t sub_10020EBF4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t))(v8 + 16))( a1,  a2,  a3,  a4,  a5,  *(unsigned __int8 *)a6,  a6[1],  a6[2],  a6[3],  a7,  a8);
}

uint64_t sub_10020EC38(uint64_t a1)
{
  return sub_1001E296C(a1);
}

uint64_t sub_10020EC40(uint64_t a1)
{
  return sub_1001E2A84(a1);
}

uint64_t sub_10020EC50(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10020EC8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A6190);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10020ECD4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10020ECE4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc(dword_1009A619C);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_1000159BC;
  return sub_1001FA8B8(a1, a2, v2);
}

uint64_t sub_10020ED48()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10020ED74(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1009A61AC);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100015D58;
  return sub_1001FAD00(a1, v4, v5, v6);
}

BOOL sub_10020EDE0@<W0>(_BYTE *a1@<X8>)
{
  BOOL result = sub_1001FA840(*(void *)(v1 + 16), *(void *)(v1 + 24));
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_10020EE10(uint64_t a1)
{
  return a1;
}

uint64_t sub_10020EE38(uint64_t a1)
{
  return a1;
}

uint64_t sub_10020EE60()
{
  return sub_10020F748((void (*)(void))&_swift_release, (void (*)(void))&_swift_release);
}

uint64_t sub_10020EE70()
{
  return sub_1001F0BD8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_10020EE78()
{
}

void sub_10020EEA8()
{
}

uint64_t sub_10020EED4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10020EEF8()
{
  return sub_10020EFE8((void (*)(void))&_swift_release);
}

void sub_10020EF04(uint64_t a1, uint64_t a2, char a3)
{
}

uint64_t sub_10020EF14()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_10020EF48(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 56);
  uint64_t v9 = *(void *)(v1 + 64);
  char v10 = *(_BYTE *)(v1 + 48);
  uint64_t v11 = (void *)swift_task_alloc(dword_10099DFBC);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_100015D58;
  return sub_100044848(a1, v4, v5, v6, v7, v10, v8, v9);
}

uint64_t sub_10020EFDC()
{
  return sub_10020EFE8((void (*)(void))&_swift_release);
}

uint64_t sub_10020EFE8(void (*a1)(void))
{
  return swift_deallocObject(v1, 40LL, 7LL);
}

void sub_10020F028(uint64_t a1, char a2)
{
}

uint64_t sub_10020F038@<X0>(void *a1@<X8>)
{
  return sub_10004383C(a1);
}

uint64_t sub_10020F04C()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10020F080(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc(dword_10099DF94);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100015D58;
  return sub_10004385C(a1, v4, v5, v6, v7, v8);
}

unint64_t sub_10020F100()
{
  unint64_t result = qword_1009A6200;
  if (!qword_1009A6200)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F7ACC, &type metadata for MessagingAccount);
    atomic_store(result, (unint64_t *)&qword_1009A6200);
  }

  return result;
}

uint64_t sub_10020F144(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10020F180(uint64_t a1)
{
  return a1;
}

uint64_t sub_10020F1B4()
{
  return sub_10020F99C((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10020F1C4()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v0 + v4 + v1[18];
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  uint64_t v12 = v0 + v4 + v1[19];
  uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1LL, v7)) {
    v9(v12, v7);
  }
  uint64_t v14 = v0 + v4 + v1[20];
  uint64_t v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v14, 1LL, v15))
  {
    uint64_t v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1LL, v7)) {
      v9(v16, v7);
    }
  }

  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | 7);
}

uint64_t sub_10020F37C(uint64_t a1)
{
  return sub_10020F390( a1,  type metadata accessor for SharedBeaconRecord,  (uint64_t (*)(uint64_t, void, unint64_t, void, void))sub_1001F3D28);
}

uint64_t sub_10020F390( uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, void, unint64_t, void, void))
{
  uint64_t v5 = *(void *)(a2(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (void *)(v3 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  return a3(a1, *(void *)(v3 + 16), v3 + v6, *v7, v7[1]);
}

uint64_t sub_10020F3F8()
{
  return sub_10020F99C((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10020F404(uint64_t a1)
{
  return sub_1001F40CC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10020F40C()
{
  return sub_10020F99C((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10020F418()
{
  return sub_1001EAF40( *(void (**)(void *))(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  &qword_1009A0E30);
}

uint64_t sub_10020F43C()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v0 + v4 + v1[18];
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  uint64_t v12 = v0 + v4 + v1[19];
  uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1LL, v7)) {
    v9(v12, v7);
  }
  uint64_t v14 = v0 + v4 + v1[20];
  uint64_t v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v14, 1LL, v15))
  {
    uint64_t v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1LL, v7)) {
      v9(v16, v7);
    }
  }

  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10020F5D4()
{
  return sub_10020F5E8( type metadata accessor for SharedBeaconRecord,  (uint64_t (*)(void, void, uint64_t))sub_1001F4708);
}

uint64_t sub_10020F5E8(uint64_t (*a1)(void), uint64_t (*a2)(void, void, uint64_t))
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(a1(0LL) - 8) + 80LL);
  return a2(*(void *)(v2 + 16), *(void *)(v2 + 24), v2 + ((v3 + 32) & ~v3));
}

uint64_t sub_10020F62C(uint64_t a1)
{
  return sub_1001EEF2C( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(unsigned __int8 *)(v1 + 32),  *(void *)(v1 + 40));
}

uint64_t sub_10020F64C()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8LL) + v0;
  unint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8LL) + 16;
  swift_release(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_errorRelease(*(void *)(v7 + 8));
  return swift_deallocObject(v0, v8, v6);
}

unint64_t sub_10020F6E4()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1001EF1E0( *(void *)(v0 + 16),  *(void *)(v0 + 24),  v0 + v2,  *(_BYTE *)(v0 + v2 + *(void *)(v1 + 64)),  *(void ***)(((v2 + *(void *)(v1 + 64)) & 0xFFFFFFFFFFFFF8LL) + v0 + 8));
}

void sub_10020F72C()
{
}

uint64_t sub_10020F734()
{
  return sub_10020F748((void (*)(void))&_swift_release, (void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10020F748(void (*a1)(void), void (*a2)(void))
{
  return swift_deallocObject(v2, 32LL, 7LL);
}

uint64_t sub_10020F784()
{
  return Future.finish(error:)(*(void *)(v0 + 24));
}

uint64_t sub_10020F7A8()
{
  char v1 = 1;
  return Future.finish(result:)(&v1);
}

uint64_t sub_10020F7D0()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_10020F80C()
{
  return sub_1001F0338(*(void *)(v0 + 16), (uint64_t *)(v0 + 24));
}

uint64_t *sub_10020F818(uint64_t *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = a1[6];
  sub_10001736C(*a1, a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t sub_10020F864()
{
  return sub_10020F99C((void (*)(void))&_swift_release);
}

uint64_t sub_10020F874()
{
  swift_release(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10020F8A0(uint64_t a1)
{
}

uint64_t sub_10020F8B8()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10020F8E4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_100004B78(a2);
    a3();
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10020F948(uint64_t a1)
{
  return a1;
}

uint64_t sub_10020F990()
{
  return sub_10020F99C((void (*)(void))&_swift_release);
}

uint64_t sub_10020F99C(void (*a1)(void))
{
  return swift_deallocObject(v1, 40LL, 7LL);
}

uint64_t sub_10020F9D4()
{
  return sub_1001F6E18(*(void (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t storeEnumTagSinglePayload for BeaconSharingManager.ItemConnectionSupportedDeviceType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10020FA2C + 4 * byte_1007F7137[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10020FA60 + 4 * byte_1007F7132[v4]))();
}

uint64_t sub_10020FA60(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10020FA68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10020FA70LL);
  }
  return result;
}

uint64_t sub_10020FA7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10020FA84LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10020FA88(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10020FA90(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconSharingManager.ItemConnectionSupportedDeviceType()
{
  return &type metadata for BeaconSharingManager.ItemConnectionSupportedDeviceType;
}

uint64_t storeEnumTagSinglePayload for BeaconSharingManager.BeaconSharingKeyError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10020FAEC + 4 * byte_1007F713C[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10020FB0C + 4 * byte_1007F7141[v4]))();
  }
}

_BYTE *sub_10020FAEC(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_10020FB0C(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10020FB14(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10020FB1C(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10020FB24(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10020FB2C(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BeaconSharingManager.BeaconSharingKeyError()
{
  return &type metadata for BeaconSharingManager.BeaconSharingKeyError;
}

unint64_t sub_10020FB4C()
{
  unint64_t result = qword_1009A6228;
  if (!qword_1009A6228)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F7388, &type metadata for BeaconSharingManager.BeaconSharingKeyError);
    atomic_store(result, (unint64_t *)&qword_1009A6228);
  }

  return result;
}

uint64_t sub_10020FB90()
{
  return sub_1000372EC(&qword_1009A6230, &qword_1009A6238, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_10020FBC0()
{
  unint64_t result = qword_1009A6240;
  if (!qword_1009A6240)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007F7460,  &type metadata for BeaconSharingManager.ItemConnectionSupportedDeviceType);
    atomic_store(result, (unint64_t *)&qword_1009A6240);
  }

  return result;
}

unint64_t sub_10020FC08()
{
  unint64_t result = qword_1009A6248;
  if (!qword_1009A6248)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007F73B0,  &type metadata for BeaconSharingManager.ItemConnectionSupportedDeviceType);
    atomic_store(result, (unint64_t *)&qword_1009A6248);
  }

  return result;
}

unint64_t sub_10020FC50()
{
  unint64_t result = qword_1009A6250;
  if (!qword_1009A6250)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007F73E8,  &type metadata for BeaconSharingManager.ItemConnectionSupportedDeviceType);
    atomic_store(result, (unint64_t *)&qword_1009A6250);
  }

  return result;
}

unint64_t sub_10020FC94(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100933E28, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5) {
    return 5LL;
  }
  else {
    return v3;
  }
}

void sub_10020FE2C()
{
}

uint64_t sub_10020FF50@<X0>(uint64_t a1@<X8>)
{
  return sub_1001FF244(a1);
}

uint64_t sub_10020FF78()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2A370);
  sub_10000A720(v0, (uint64_t)qword_100A2A370);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x746C694669737372LL,  0xEA00000000007265LL);
}

uint64_t sub_10020FFF0()
{
  uint64_t result = static Duration.seconds(_:)(0.5);
  qword_100A2A388 = result;
  unk_100A2A390 = v1;
  return result;
}

uint64_t sub_100210014(char *a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = swift_defaultActor_initialize(v4);
  *(void *)(v4 + 112) = &off_100933EE8;
  *(void *)(v4 + 12sub_100032838(0, 7LL, 0) = &off_100933F18;
  uint64_t v13 = ContinuousClock.init()(v12);
  *(void *)(v4 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_rssiBuffer) = _swiftEmptyDictionarySingleton;
  *(void *)(v4 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_lastProximityLevel) = 2LL;
  static ContinuousClock.Instant.now.getter(v13);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v14(v4 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_beacon, (uint64_t)a1, v8);
  if ((a3 & 1) != 0) {
    uint64_t v15 = 0LL;
  }
  else {
    uint64_t v15 = a2;
  }
  uint64_t v32 = v15 - 4;
  if (__OFSUB__(v15, 4LL))
  {
    __break(1u);
  }

  else if (qword_10099B1C8 == -1)
  {
    goto LABEL_6;
  }

  swift_once(&qword_10099B1C8, sub_10020FF78);
LABEL_6:
  uint64_t v16 = type metadata accessor for Logger(0LL);
  sub_10000A720(v16, (uint64_t)qword_100A2A370);
  uint64_t v17 = ((uint64_t (*)(char *, char *, uint64_t))v14)(v11, a1, v8);
  unint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc(42LL, -1LL);
    uint64_t v30 = swift_slowAlloc(32LL, -1LL);
    uint64_t v33 = v15;
    uint64_t v34 = v30;
    *(_DWORD *)uint64_t v20 = 134218755;
    uint64_t v31 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2160;
    uint64_t v33 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v20 + 14, v20 + 22);
    *(_WORD *)(v20 + 22) = 2081;
    uint64_t v21 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter(v8, v21);
    uint64_t v33 = sub_1003F11D4(v22, v23, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v20 + 24, v20 + 32);
    swift_bridgeObjectRelease();
    uint64_t v24 = *(void (**)(char *, uint64_t))(v9 + 8);
    v24(v11, v8);
    *(_WORD *)(v20 + 32) = 2048;
    uint64_t v25 = v32;
    uint64_t v33 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v20 + 34, v20 + 42);
    _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "Received TX Power: %ld for beacon %{private,mask.hash}s. Calibrated: %ld.",  (uint8_t *)v20,  0x2Au);
    uint64_t v26 = v30;
    swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);

    v24(v31, v8);
  }

  else
  {

    unint64_t v27 = *(void (**)(char *, uint64_t))(v9 + 8);
    v27(v11, v8);
    v27(a1, v8);
    uint64_t v25 = v32;
  }

  *(void *)(v4 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_txPower) = v25;
  return v4;
}

uint64_t sub_100210358(uint64_t a1)
{
  v2[27] = a1;
  v2[28] = v1;
  uint64_t v3 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0LL);
  v2[29] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[30] = v4;
  v2[31] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for ContinuousClock.Instant(0LL);
  v2[32] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[33] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[34] = swift_task_alloc(v7);
  v2[35] = swift_task_alloc(v7);
  return swift_task_switch(sub_1002103F0, v1, 0LL);
}

uint64_t sub_1002103F0()
{
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = (id *)(v0 + 216);
  uint64_t v4 = (char *)[*(id *)(v0 + 216) rssi];
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_txPower);
  unint64_t v6 = (unint64_t)&v4[-v5];
  if (__OFSUB__(v4, v5))
  {
    __break(1u);
    goto LABEL_38;
  }

  uint64_t v117 = (uint64_t *)(v0 + 144);
  uint64_t v1 = (void *)(v0 + 152);
  uint64_t v122 = (void *)(v0 + 160);
  uint64_t v125 = (unint64_t *)(v0 + 192);
  uint64_t v120 = (void *)(v0 + 200);
  unint64_t v7 = (void *)(*(void *)(v0 + 224) + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_rssiBuffer);
  swift_beginAccess(v7, v0 + 16, 0LL, 0LL);
  uint64_t v9 = &off_10099B000;
  if (!*(void *)(*v7 + 16LL))
  {
    unint64_t v118 = (char *)v6;
    uint64_t v10 = *(void *)(v0 + 280);
    uint64_t v11 = *(void *)(v0 + 256);
    uint64_t v12 = *(void *)(v0 + 264);
    uint64_t v13 = *(void *)(v0 + 224);
    ContinuousClock.now.getter(v8);
    uint64_t v14 = v13 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_lastMeasurementTime;
    __n128 v15 = swift_beginAccess(v13 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_lastMeasurementTime, v0 + 40, 33LL, 0LL);
    uint64_t v16 = v10;
    uint64_t v9 = &off_10099B000;
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v12 + 40))(v14, v16, v11, v15);
    swift_endAccess(v0 + 40);
    if (qword_10099B1C8 != -1) {
      swift_once(&qword_10099B1C8, sub_10020FF78);
    }
    uint64_t v17 = *(void *)(v0 + 224);
    uint64_t v18 = type metadata accessor for Logger(0LL);
    sub_10000A720(v18, (uint64_t)qword_100A2A370);
    uint64_t v19 = swift_retain_n(v17, 2LL);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.debug.getter(v20);
    BOOL v22 = os_log_type_enabled(v20, v21);
    uint64_t v23 = *(void *)(v0 + 224);
    if (v22)
    {
      uint64_t v24 = swift_slowAlloc(22LL, -1LL);
      uint64_t v116 = swift_slowAlloc(32LL, -1LL);
      uint64_t v128 = v116;
      *(_DWORD *)uint64_t v24 = 141558275;
      *uint64_t v120 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v120, v0 + 208, v24 + 4, v24 + 12);
      *(_WORD *)(v24 + 12) = 2081;
      uint64_t v25 = type metadata accessor for UUID(0LL);
      uint64_t v26 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v27 = v25;
      uint64_t v1 = (void *)(v0 + 152);
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter(v27, v26);
      *(void *)(v0 + 208) = sub_1003F11D4(v28, v29, &v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v24 + 14, v24 + 22);
      swift_bridgeObjectRelease();
      swift_release_n(v23, 2LL);
      _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "BTRSSIFilter is initialized for beacon: %{private,mask.hash}s",  (uint8_t *)v24,  0x16u);
      swift_arrayDestroy(v116, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v116, -1LL, -1LL);
      uint64_t v30 = v24;
      uint64_t v9 = &off_10099B000;
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    else
    {
      swift_release_n(*(void *)(v0 + 224), 2LL);
    }

    unint64_t v6 = (unint64_t)v118;
  }

  uint64_t v31 = v9[57];
  if ((v6 & 0x8000000000000000LL) == 0)
  {
    if (v31 == (void *)-1LL)
    {
LABEL_11:
      uint64_t v32 = *(void *)(v0 + 224);
      uint64_t v33 = type metadata accessor for Logger(0LL);
      sub_10000A720(v33, (uint64_t)qword_100A2A370);
      uint64_t v34 = swift_retain_n(v32, 2LL);
      uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
      os_log_type_t v36 = static os_log_type_t.error.getter(v35);
      BOOL v37 = os_log_type_enabled(v35, v36);
      uint64_t v38 = *(void *)(v0 + 224);
      if (v37)
      {
        uint64_t v39 = swift_slowAlloc(32LL, -1LL);
        uint64_t v40 = swift_slowAlloc(32LL, -1LL);
        uint64_t v128 = v40;
        *(_DWORD *)uint64_t v39 = 134218499;
        *uint64_t v125 = v6;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v125, v120, v39 + 4, v39 + 12);
        *(_WORD *)(v39 + 12) = 2160;
        *uint64_t v1 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1, v122, v39 + 14, v39 + 22);
        *(_WORD *)(v39 + 22) = 2081;
        uint64_t v41 = type metadata accessor for UUID(0LL);
        uint64_t v42 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter(v41, v42);
        *(void *)(v0 + 136) = sub_1003F11D4(v43, v44, &v128);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v117, v39 + 24, v39 + 32);
        swift_bridgeObjectRelease();
        swift_release_n(v38, 2LL);
        _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "Ignoring invalid RSSI value: %ld from beacon %{private,mask.hash}s",  (uint8_t *)v39,  0x20u);
        swift_arrayDestroy(v40, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v40, -1LL, -1LL);
        swift_slowDealloc(v39, -1LL, -1LL);
      }

      else
      {
        swift_release_n(*(void *)(v0 + 224), 2LL);
      }

      goto LABEL_36;
    }

uint64_t sub_100211000(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 296LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 224LL);
  *(void *)(*(void *)v1 + 304LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100211060, v3, 0LL);
}

uint64_t sub_100211060()
{
  uint64_t v1 = *(void *)(v0 + 304);
  (*(void (**)(void, void))(v0 + 288))(*(void *)(v0 + 272), *(void *)(v0 + 256));
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v3 = *(void *)(v0 + 248);
  swift_task_dealloc(*(void *)(v0 + 280));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_1002110C4()
{
  *(void *)(v1 + 48) = v0;
  return swift_task_switch(sub_1002110DC, v0, 0LL);
}

void sub_1002110DC()
{
  uint64_t v1 = (void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 48) + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_rssiBuffer;
  __n128 v3 = swift_beginAccess(v2, v0 + 16, 1LL, 0LL);
  uint64_t v4 = *(void *)v2;
  if (*(void *)(*(void *)v2 + 16LL) && (uint64_t v5 = sub_10030D384(37LL, v3), (v6 & 1) != 0))
  {
    uint64_t v7 = *(void *)(*(void *)(v4 + 56) + 8 * v5);
    sub_100008FA8();
    __n128 v8 = swift_bridgeObjectRetain(v7);
    double v9 = Array<A>.mean.getter(v8);
    swift_bridgeObjectRelease();
  }

  else
  {
    double v9 = -128.0;
  }

  uint64_t v10 = *(void *)v2;
  if (*(void *)(*(void *)v2 + 16LL) && (uint64_t v11 = sub_10030D384(38LL, v3), (v12 & 1) != 0))
  {
    uint64_t v13 = *(void *)(*(void *)(v10 + 56) + 8 * v11);
    sub_100008FA8();
    __n128 v14 = swift_bridgeObjectRetain(v13);
    double v15 = Array<A>.mean.getter(v14);
    swift_bridgeObjectRelease();
  }

  else
  {
    double v15 = -128.0;
  }

  uint64_t v16 = *(void *)v2;
  if (!*(void *)(*(void *)v2 + 16LL) || (uint64_t v17 = sub_10030D384(39LL, v3), (v18 & 1) == 0))
  {
    double v21 = -128.0;
    if (v9 <= v15)
    {
      double v22 = v15;
      if (v15 > -128.0) {
        goto LABEL_21;
      }
    }

    else
    {
      double v22 = v9;
      if (v9 > -128.0) {
        goto LABEL_21;
      }
    }

LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }

  unint64_t v60 = *(void *)(v73 + 104);
  uint64_t v61 = *(void *)(v73 + 112);
  swift_task_dealloc(*(void *)(v73 + 136));
  swift_task_dealloc(v61);
  swift_task_dealloc(v60);
  return (*(uint64_t (**)(void))(v73 + 8))();
}

          __n128 v8 = 1;
          LOBYTE(v7) = v9;
          goto LABEL_38;
        }

    sub_100015794((uint64_t)v85, &qword_1009A89C8);
    return 0LL;
  }

  sub_10001581C((uint64_t)v85, (uint64_t)v27, (uint64_t *)&unk_1009A34D0);
  if (v87(v86, 1LL, v88) == 1)
  {
    sub_100015794((uint64_t)v30, (uint64_t *)&unk_1009A34D0);
    sub_100015794((uint64_t)v35, (uint64_t *)&unk_1009A34D0);
    (*(void (**)(_BYTE *, uint64_t))(v232 + 8))(v27, v88);
    goto LABEL_54;
  }

  uint64_t v89 = v232;
  uint64_t v90 = v227;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v232 + 32))(v227, v86, v88);
  uint64_t v91 = sub_100007864( &qword_1009A89D0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v213 = dispatch thunk of static Equatable.== infix(_:_:)(v27, v90, v88, v91);
  uint64_t v92 = (uint64_t)v85;
  unint64_t v93 = v41;
  uint64_t v94 = *(void (**)(_BYTE *, uint64_t))(v89 + 8);
  v94(v90, v88);
  sub_100015794((uint64_t)v30, (uint64_t *)&unk_1009A34D0);
  sub_100015794((uint64_t)v35, (uint64_t *)&unk_1009A34D0);
  v94(v27, v88);
  uint64_t v41 = v93;
  sub_100015794(v92, (uint64_t *)&unk_1009A34D0);
  if ((v213 & 1) == 0) {
    return 0LL;
  }
LABEL_56:
  uint64_t v96 = v214;
  uint64_t v95 = v215;
  unint64_t v97 = v223;
  sub_10001581C(v214 + v215[17], v223, (uint64_t *)&unk_1009A34D0);
  unint64_t v98 = v222;
  sub_10001581C(v41 + v95[17], v222, (uint64_t *)&unk_1009A34D0);
  uint64_t v99 = v228;
  uint64_t v100 = (uint64_t)&v228[*(int *)(v231 + 48)];
  sub_10001581C(v97, (uint64_t)v228, (uint64_t *)&unk_1009A34D0);
  sub_10001581C(v98, v100, (uint64_t *)&unk_1009A34D0);
  if (v87((uint64_t)v99, 1LL, v88) == 1)
  {
    sub_100015794(v98, (uint64_t *)&unk_1009A34D0);
    sub_100015794(v97, (uint64_t *)&unk_1009A34D0);
    if (v87(v100, 1LL, v88) == 1)
    {
      sub_100015794((uint64_t)v99, (uint64_t *)&unk_1009A34D0);
      goto LABEL_63;
    }

LABEL_59:
  __break(1u);
}

    sub_1003CB654(&v52, &v51, (uint64_t *)&v50);
    return 1LL;
  }

      if (++v161 == v160)
      {
        swift_bridgeObjectRelease();
        uint64_t v158 = v218;
        goto LABEL_72;
      }
    }

    __break(1u);
LABEL_88:
    swift_once(&qword_10099B628, sub_1005E2E30);
  }

  swift_bridgeObjectRelease();
  unint64_t v35 = (void *)v220;
LABEL_72:
  uint64_t v174 = (uint64_t *)&v29[v211[9]];
  uint64_t v175 = v174[1];
  if (!v175)
  {
    sub_100018C68(v158, type metadata accessor for AccessoryInfoResponseContent.Assets);
    uint64_t v157 = (uint64_t)v35;
LABEL_76:
    sub_100018C68(v157, type metadata accessor for AccessoryInfoResponseContent.Configuration);
    uint64_t v190 = (uint64_t)v29;
    goto LABEL_85;
  }

  uint64_t v177 = v174[4];
  uint64_t v178 = v174[5];
  uint64_t v179 = (char *)v174[2];
  uint64_t v180 = v174[3];
  v225[0] = *v174;
  uint64_t v176 = v225[0];
  v225[1] = v175;
  v225[2] = (uint64_t)v179;
  v225[3] = v180;
  v225[4] = v177;
  v225[5] = v178;
  swift_bridgeObjectRetain_n(v175, 2LL);
  swift_bridgeObjectRetain_n(v180, 2LL);
  swift_bridgeObjectRetain_n(v178, 2LL);
  int v219 = v179;
  uint64_t v181 = sub_1002549B8(v176, v175, (uint64_t)v179, v180, v177, v178);
  uint64_t v182 = (os_log_s *)Logger.logObject.getter(v181);
  uint64_t v183 = static os_log_type_t.info.getter(v182);
  uint64_t v184 = os_log_type_enabled(v182, v183);
  uint64_t v221 = v177;
  if (v184)
  {
    uint64_t v185 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v217 = (char *)swift_slowAlloc(32LL, -1LL);
    unint64_t v223 = v217;
    *(_DWORD *)uint64_t v185 = 136315138;
    uint64_t v216 = v185 + 4;
    swift_bridgeObjectRetain(v175);
    swift_bridgeObjectRetain(v180);
    swift_bridgeObjectRetain(v178);
    uint64_t v186 = sub_1002F40C4();
    Swift::Int v188 = v187;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v222 = sub_1003F11D4(v186, v188, (uint64_t *)&v223);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, &v223, v216, v185 + 12);
    swift_bridgeObjectRelease_n(v178, 2LL);
    swift_bridgeObjectRelease_n(v180, 2LL);
    swift_bridgeObjectRelease_n(v175, 2LL);
    uint64_t v25 = v213;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v182, v183, "Received public keys from server: %s", v185, 0xCu);
    uint64_t v189 = v217;
    swift_arrayDestroy(v217, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v189, -1LL, -1LL);
    swift_slowDealloc(v185, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v178, 2LL);
    swift_bridgeObjectRelease_n(v180, 2LL);
    swift_bridgeObjectRelease_n(v175, 2LL);
  }

  id v191 = Data.init(base64Encoded:options:)(v176, v175, 0LL);
  uint64_t v193 = 0LL;
  if (v192 >> 60 != 15)
  {
    uint64_t v194 = v191;
    uint64_t v195 = v192;
    uint64_t v193 = Data._bridgeToObjectiveC()().super.isa;
    sub_1000182F0(v194, v195);
  }

  -[os_log_s setEncryptionKeyE1:](v25, "setEncryptionKeyE1:", v193);

  id v196 = Data.init(base64Encoded:options:)(v219, v180, 0LL);
  uint64_t v198 = 0LL;
  __int128 v199 = v218;
  if (v197 >> 60 != 15)
  {
    uint64_t v200 = v196;
    uint64_t v201 = v197;
    uint64_t v198 = Data._bridgeToObjectiveC()().super.isa;
    sub_1000182F0(v200, v201);
  }

  -[os_log_s setEncryptionKeyE2:](v25, "setEncryptionKeyE2:", v198);

  uint64_t v202 = Data.init(base64Encoded:options:)(v221, v178, 0LL);
  uint64_t v204 = v203;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v205 = 0LL;
  if (v204 >> 60 != 15)
  {
    uint64_t v205 = Data._bridgeToObjectiveC()().super.isa;
    sub_1000182F0(v202, v204);
  }

  -[os_log_s setVerificationKeyS2:](v25, "setVerificationKeyS2:", v205);

  sub_100018C68(v199, type metadata accessor for AccessoryInfoResponseContent.Assets);
  sub_100018C68(v220, type metadata accessor for AccessoryInfoResponseContent.Configuration);
  uint64_t v190 = (uint64_t)v212;
LABEL_85:
  sub_100018C68(v190, type metadata accessor for AccessoryInfoResponseContent);
  return v25;
}

  __break(1u);
LABEL_60:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

      swift_release(v107);
      uint64_t v11 = v193;
      uint64_t v82 = v195;
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v108 = _swiftEmptyArrayStorage;
      uint64_t v110 = (uint64_t)v209;
    }

    objc_autoreleasePoolPop(v201);
    unint64_t v118 = v108[2];
    if (v118)
    {
      unint64_t v119 = (uint64_t)v108
           + ((*(unsigned __int8 *)(v67 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80));
      sub_10001DC4C(v119, v211, type metadata accessor for BeaconObservation);
      swift_bridgeObjectRetain(v108);
      if (v118 != 1)
      {
        uint64_t v151 = 1LL;
        while (v151 < v108[2])
        {
          sub_10001DC4C(v119 + *(void *)(v67 + 72) * v151, v110, type metadata accessor for BeaconObservation);
          uint64_t v152 = v211;
          if ((static Date.< infix(_:_:)(v211 + *(int *)(v212 + 20), v110 + *(int *)(v212 + 20)) & 1) != 0)
          {
            sub_100018C68(v152, type metadata accessor for BeaconObservation);
            sub_10002218C(v110, v152, type metadata accessor for BeaconObservation);
          }

          else
          {
            sub_100018C68(v110, type metadata accessor for BeaconObservation);
          }

          if (v118 == ++v151) {
            goto LABEL_62;
          }
        }

        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
        goto LABEL_113;
      }

    sub_1003CB954(&v50, &v49, (uint64_t *)&v48);
    return 1LL;
  }

uint64_t sub_1002118E4()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for Date(0LL);
  v1[3] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  v1[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[7] = v5;
  v1[8] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  char v6 = (void *)swift_task_alloc(dword_1009A62C4);
  void v1[9] = v6;
  *char v6 = v1;
  v6[1] = sub_100211994;
  v6[6] = v0;
  return swift_task_switch(sub_1002110DC, v0, 0LL);
}

uint64_t sub_100211994(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4 = *v3;
  uint64_t v5 = *(void *)(*v3 + 72);
  uint64_t v6 = *(void *)(*v3 + 16);
  *(_BYTE *)(v4 + 96) = a2;
  *(void *)(v4 + 8sub_100032838(0, 7LL, 0) = a1;
  *(void *)(v4 + 88) = a3;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_1002119F8, v6, 0LL);
}

uint64_t sub_1002119F8()
{
  char v1 = *(_BYTE *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v7 = *(void *)(v0 + 48);
  uint64_t v14 = *(void *)(v0 + 32);
  uint64_t v15 = *(void *)(v0 + 24);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))( v4,  *(void *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_beacon,  v7);
  static Date.now.getter(v8);
  if ((v1 & 1) != 0) {
    uint64_t v3 = 3LL;
  }
  id v9 = objc_allocWithZone(&OBJC_CLASS___SPBTRSSIResult);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  Class v11 = Date._bridgeToObjectiveC()().super.isa;
  id v12 = [v9 initWithBeaconIdentifier:isa timestamp:v11 bucket:v3 rssi:v2];

  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v6, v15);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v7);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(id))(v0 + 8))(v12);
}

uint64_t sub_100211B18()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_beacon;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_clock;
  uint64_t v4 = type metadata accessor for ContinuousClock(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_rssiBuffer));
  uint64_t v5 = v0 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_lastMeasurementTime;
  uint64_t v6 = type metadata accessor for ContinuousClock.Instant(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100211BD4()
{
  return type metadata accessor for BTRSSIFilter(0LL);
}

uint64_t type metadata accessor for BTRSSIFilter(uint64_t a1)
{
  uint64_t result = qword_1009A62A8;
  if (!qword_1009A62A8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BTRSSIFilter);
  }
  return result;
}

uint64_t sub_100211C18(uint64_t a1)
{
  v6[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t v6[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v6[3] = *(void *)(result - 8) + 64LL;
    v6[4] = (char *)&value witness table for Builtin.Int64 + 64;
    uint64_t result = type metadata accessor for ContinuousClock(319LL);
    if (v4 <= 0x3F)
    {
      void v6[5] = *(void *)(result - 8) + 64LL;
      v6[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[7] = (char *)&value witness table for Builtin.Int64 + 64;
      uint64_t result = type metadata accessor for ContinuousClock.Instant(319LL);
      if (v5 <= 0x3F)
      {
        v6[8] = *(void *)(result - 8) + 64LL;
        return swift_updateClassMetadata2(a1, 256LL, 9LL, v6, a1 + 80);
      }
    }
  }

  return result;
}

uint64_t sub_100211CF0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  id v49 = a1;
  uint64_t v50 = a2;
  v45[17] = a4;
  uint64_t v7 = sub_100004AEC(&qword_10099FB48);
  __chkstk_darwin(v7);
  BOOL v48 = (char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for BeaconPayloadFile.MetaData(0LL);
  v45[14] = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  v45[12] = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099FA70);
  uint64_t v12 = __chkstk_darwin(v11);
  v45[16] = (char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  v45[13] = (char *)v45 - v14;
  uint64_t v46 = type metadata accessor for CachedHistoricalLocation(0LL);
  v45[15] = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v51 = (char *)v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for BeaconPayloadv1(0LL);
  __chkstk_darwin(v16);
  uint64_t v52 = (void *)((char *)v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v18);
  __n128 v20 = (char *)v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for Date(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  os_log_type_t v47 = (char *)v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)v45 - v25;
  sub_10016DFB4((uint64_t)v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21) == 1)
  {
    sub_100015794((uint64_t)v20, (uint64_t *)&unk_10099D720);
    unint64_t v27 = sub_1002124B0();
    uint64_t v28 = swift_allocError(&type metadata for BeaconPayloadFile.BeaconPayloadFileError, v27, 0LL, 0LL);
    *BOOL v29 = 0;
    return swift_willThrow(v28);
  }

  else
  {
    uint64_t v31 = v20;
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    v32(v26, v31, v21);
    uint64_t v33 = Data.init(contentsOf:options:)(v4 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_fileURL, 0LL);
    if (!v5)
    {
      v45[9] = v16;
      v45[10] = v22;
      v45[11] = v26;
      v45[7] = v32;
      _BYTE v45[8] = v9;
      unint64_t v35 = v34;
      uint64_t v36 = v33;
      id v37 = v49;
      sub_10001736C(v36, v35);
      sub_10001736C(v50, a3);
      uint64_t v38 = v52;
      BeaconPayloadv1.init(using:data:advertisement:)((uint64_t)v37, v36, v35);
      v45[5] = v36;
      v45[6] = v35;
      uint64_t v39 = *v38;
      unint64_t v40 = v38[1];
      id v49 = (id)(v40 >> 62);
      uint64_t v41 = sub_10001736C(v39, v40);
      uint64_t v42 = static MACAddress.length.getter(v41);
      sub_100178C64(v42, v39, v40);
      v45[4] = v53;
      void v45[3] = v54;
      sub_10001736C(v39, v40);
      uint64_t v43 = sub_10001736C(v39, v40);
      uint64_t v44 = static MACAddress.length.getter(v43);
      uint64_t v50 = v39;
      sub_100178C64(v44, v39, v40);
      __asm { BR              X10 }
    }

    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v26, v21);
  }

uint64_t sub_100212128()
{
  return ((uint64_t (*)(void, void))((char *)&loc_1002121D4
                                                 + *((int *)qword_1002124A0 + *(void *)(v2 - 152))))( BYTE6(v0),  0LL);
}

void sub_1002121E4(uint64_t a1)
{
  if (BYTE6(v6) >= a1)
  {
    uint64_t v9 = Data._Representation.subscript.getter();
    *(void *)(v8 - 152) = v10;
    *(void *)(v8 - 144) = v9;
    sub_100016F9C(v2, v6);
    uint64_t v11 = v1[9];
    *(_DWORD *)(v8 - 304) = *(unsigned __int8 *)(v5 + v1[10]);
    uint64_t v12 = *(void *)(v5 + v1[7]);
    uint64_t v13 = *(void *)(v5 + v1[8]);
    uint64_t v14 = *(void *)(v5 + v11);
    uint64_t v15 = v5 + v1[5];
    uint64_t v16 = *(char **)(v8 - 136);
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v17(&v16[*(int *)(*(void *)(v8 - 176) + 28LL)], v15, v4);
    *(void *)uint64_t v16 = v12;
    *((void *)v16 + 1) = v13;
    *((void *)v16 + 2) = v14;
    v17(*(char **)(v8 - 168), v7, v4);
    uint64_t v18 = *(void **)(v8 - 216);
    sub_10016DC28(v18);
    uint64_t v19 = *(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v8 - 208) + 48LL);
    uint64_t v20 = *(void *)(v8 - 256);
    if (v19(v18, 1LL, v20))
    {
      sub_100015794((uint64_t)v18, (uint64_t *)&unk_10099FA70);
      char v21 = 0;
    }

    else
    {
      uint64_t v22 = *(void *)(v8 - 224);
      sub_10001DC4C((uint64_t)v18, v22, type metadata accessor for BeaconPayloadFile.MetaData);
      sub_100015794((uint64_t)v18, (uint64_t *)&unk_10099FA70);
      char v21 = *(_BYTE *)(v22 + *(int *)(v20 + 28));
      sub_100018C68(v22, type metadata accessor for BeaconPayloadFile.MetaData);
    }

    uint64_t v23 = *(void *)(v8 - 160);
    sub_10001DC4C(*(void *)(v8 - 136), v23, type metadata accessor for CachedHistoricalLocation);
    (*(void (**)(uint64_t, void, uint64_t, void))(*(void *)(v8 - 200) + 56LL))( v23,  0LL,  1LL,  *(void *)(v8 - 176));
    uint64_t v24 = *(void **)(v8 - 192);
    sub_10016DC28(v24);
    sub_100016F9C(*(void *)(v8 - 280), *(void *)(v8 - 272));
    if (v19(v24, 1LL, v20))
    {
      sub_100015794((uint64_t)v24, (uint64_t *)&unk_10099FA70);
      char v25 = 0;
    }

    else
    {
      uint64_t v26 = *(void *)(v8 - 224);
      sub_10001DC4C((uint64_t)v24, v26, type metadata accessor for BeaconPayloadFile.MetaData);
      sub_100015794((uint64_t)v24, (uint64_t *)&unk_10099FA70);
      char v27 = *(_BYTE *)(v26 + *(int *)(v20 + 48));
      sub_100018C68(v26, type metadata accessor for BeaconPayloadFile.MetaData);
      char v25 = v27 & 1;
    }

    uint64_t v28 = (int *)type metadata accessor for BeaconPayload(0LL);
    BOOL v29 = *(void **)(v8 - 184);
    v29[3] = v28;
    v29[4] = &off_100969D60;
    uint64_t v30 = sub_10000A7C8(v29);
    uint64_t v31 = *(void *)(v8 - 296);
    *uint64_t v30 = *(void *)(v8 - 288);
    v30[1] = v31;
    uint64_t v32 = *(void *)(v8 - 152);
    v30[2] = *(void *)(v8 - 144);
    v30[3] = v32;
    *((_BYTE *)v30 + 32) = *(_DWORD *)(v8 - 304);
    *(_OWORD *)(v30 + 5) = xmmword_1007E4480;
    v30[7] = 0LL;
    (*(void (**)(char *, void, uint64_t))(v8 - 264))((char *)v30 + v28[9], *(void *)(v8 - 168), v4);
    *((_BYTE *)v30 + v28[10]) = v21;
    sub_1002124F4(*(void *)(v8 - 160), (uint64_t)v30 + v28[11]);
    *((_BYTE *)v30 + v28[12]) = v25;
    sub_100018C68(*(void *)(v8 - 136), type metadata accessor for CachedHistoricalLocation);
    sub_100018C68(*(void *)(v8 - 128), type metadata accessor for BeaconPayloadv1);
    JUMPOUT(0x100211FB4LL);
  }

  __break(1u);
  JUMPOUT(0x10021248CLL);
}

unint64_t sub_1002124B0()
{
  unint64_t result = qword_1009A63E8;
  if (!qword_1009A63E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EF75C, &type metadata for BeaconPayloadFile.BeaconPayloadFileError);
    atomic_store(result, (unint64_t *)&qword_1009A63E8);
  }

  return result;
}

uint64_t sub_1002124F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099FB48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t *AirPodsSendPairingStatusCommandPayload.expectedLength.unsafeMutableAddressor()
{
  return &static AirPodsSendPairingStatusCommandPayload.expectedLength;
}

uint64_t static AirPodsSendPairingStatusCommandPayload.expectedLength.getter()
{
  return static AirPodsSendPairingStatusCommandPayload.expectedLength;
}

uint64_t static AirPodsSendPairingStatusCommandPayload.expectedLength.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess(&static AirPodsSendPairingStatusCommandPayload.expectedLength, v3, 1LL, 0LL);
  static AirPodsSendPairingStatusCommandPayload.expectedLength = a1;
  return result;
}

uint64_t (*static AirPodsSendPairingStatusCommandPayload.expectedLength.modify( uint64_t a1))(void)
{
  return j__swift_endAccess;
}

double AirPodsSendPairingStatusCommandPayload.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }

  return result;
}

uint64_t AirPodsSendPairingStatusCommandPayload.encode(to:)(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100012ED8(a1, v3);
  dispatch thunk of BinaryEncoding.container()(v14, v3, v4);
  __int128 v13 = *v1;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  sub_100037298((uint64_t)v14, v15);
  unint64_t v7 = sub_100042440();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v13, &type metadata for Data, v7, v5, v6);
  if (!v2)
  {
    __int128 v13 = v1[1];
    uint64_t v8 = v15;
    uint64_t v9 = v16;
    sub_100037298((uint64_t)v14, v15);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v13, &type metadata for Data, v7, v8, v9);
    __int128 v13 = v1[2];
    uint64_t v10 = v15;
    uint64_t v11 = v16;
    sub_100037298((uint64_t)v14, v15);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v13, &type metadata for Data, v7, v10, v11);
  }

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v14);
}

uint64_t sub_100212780(void *a1)
{
  return AirPodsSendPairingStatusCommandPayload.encode(to:)(a1);
}

uint64_t sub_100212794(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_1002127A0 + dword_1002128AC[a2 >> 62]))();
}

uint64_t sub_1002127B0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (BYTE6(a2) != 60LL)
  {
    __break(1u);
    JUMPOUT(0x1002128A4LL);
  }

  return ((uint64_t (*)(void))((char *)&loc_1002127EC + dword_1002128BC[a4 >> 62]))();
}

uint64_t sub_1002128DC@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100012ED8(a1, v5);
  dispatch thunk of BinaryDecoding.container()(v20, v5, v6);
  uint64_t v7 = v21;
  uint64_t v8 = v22;
  sub_100037298((uint64_t)v20, v21);
  uint64_t v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)(60LL, v7, v8);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v20);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    uint64_t v11 = v9;
    unint64_t v12 = v10;
    uint64_t v13 = v21;
    uint64_t v14 = v22;
    sub_100037298((uint64_t)v20, v21);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(4LL, v13, v14);
    uint64_t v26 = v15;
    uint64_t v17 = v21;
    uint64_t v16 = v22;
    sub_100037298((uint64_t)v20, v21);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(100LL, v17, v16);
    sub_100212794(v11, v12);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v20);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    __int128 v19 = v24;
    *a2 = v23;
    a2[1] = v19;
    a2[2] = v25;
  }

  return result;
}

unint64_t sub_100212A58(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100212A84();
  unint64_t result = sub_100212AC8();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_100212A84()
{
  unint64_t result = qword_1009A63F8;
  if (!qword_1009A63F8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AirPodsSendPairingStatusCommandPayload,  &type metadata for AirPodsSendPairingStatusCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009A63F8);
  }

  return result;
}

unint64_t sub_100212AC8()
{
  unint64_t result = qword_1009A6400;
  if (!qword_1009A6400)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AirPodsSendPairingStatusCommandPayload,  &type metadata for AirPodsSendPairingStatusCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009A6400);
  }

  return result;
}

uint64_t destroy for AirPodsSendPairingStatusCommandPayload(uint64_t a1)
{
  return sub_100016F9C(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t *initializeWithCopy for AirPodsSendPairingStatusCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10001736C(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_10001736C(v6, v7);
  a1[2] = v6;
  a1[3] = v7;
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  sub_10001736C(v9, v8);
  a1[4] = v9;
  a1[5] = v8;
  return a1;
}

uint64_t *assignWithCopy for AirPodsSendPairingStatusCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10001736C(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100016F9C(v6, v7);
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_10001736C(v8, v9);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_100016F9C(v10, v11);
  uint64_t v13 = a2[4];
  unint64_t v12 = a2[5];
  sub_10001736C(v13, v12);
  uint64_t v14 = a1[4];
  unint64_t v15 = a1[5];
  a1[4] = v13;
  a1[5] = v12;
  sub_100016F9C(v14, v15);
  return a1;
}

uint64_t *assignWithTake for AirPodsSendPairingStatusCommandPayload(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100016F9C(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_100016F9C(v6, v7);
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_100016F9C(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyGenerationBeaconInfo.Keys(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for KeyGenerationBeaconInfo.Keys( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 4sub_100032838(0, 7LL, 0) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 48) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0LL;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AirPodsSendPairingStatusCommandPayload()
{
  return &type metadata for AirPodsSendPairingStatusCommandPayload;
}

ValueMetadata *type metadata accessor for AccessoryMultistatusResponsePayload()
{
  return &type metadata for AccessoryMultistatusResponsePayload;
}

uint64_t sub_100212D50(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  sub_100012ED8(a1, v1);
  dispatch thunk of BinaryEncoding.container()(v12, v1, v2);
  unint64_t v3 = sub_100041584();
  uint64_t v4 = FixedWidthInteger.data.getter(&type metadata for UInt8, v3);
  unint64_t v6 = v5;
  v11[0] = v4;
  v11[1] = v5;
  uint64_t v7 = v13;
  uint64_t v8 = v14;
  sub_100037298((uint64_t)v12, v13);
  unint64_t v9 = sub_100042440();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(v11, &type metadata for Data, v9, v7, v8);
  sub_100016F9C(v4, v6);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v12);
}

uint64_t sub_100212E24@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100212ED4(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100212E4C(void *a1)
{
  return sub_100212D50(a1);
}

unint64_t sub_100212E64(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100212E90();
  unint64_t result = sub_1000F5110();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_100212E90()
{
  unint64_t result = qword_1009A6408;
  if (!qword_1009A6408)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F7674, &type metadata for AccessoryMultistatusResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009A6408);
  }

  return result;
}

uint64_t sub_100212ED4(void *a1)
{
  uint64_t v3 = type metadata accessor for Endianness(0LL);
  __chkstk_darwin(v3);
  unint64_t v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100012ED8(a1, v6);
  dispatch thunk of BinaryDecoding.container()(&v20[8], v6, v7);
  uint64_t v8 = v21;
  uint64_t v9 = v22;
  uint64_t v10 = sub_100037298((uint64_t)&v20[8], v21);
  uint64_t v11 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1LL, v8, v9);
  if (!v1)
  {
    uint64_t v13 = v11;
    unint64_t v14 = v12;
    uint64_t v15 = sub_10001736C(v11, v12);
    static Endianness.current.getter(v15);
    sub_100041584();
    FixedWidthInteger.init(data:ofEndianness:)(&v20[6], v13, v14, v5);
    if (v20[7] != 1)
    {
      uint64_t v10 = v20[6];
      sub_100016F9C(v13, v14);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v20[8]);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
      return v10;
    }

    uint64_t v10 = type metadata accessor for BinaryDecodingError(0LL);
    unint64_t v16 = sub_1001C1808();
    swift_allocError(v10, v16, 0LL, 0LL);
    uint64_t v18 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v10 - 8) + 104LL))( v17,  enum case for BinaryDecodingError.decodingError(_:),  v10);
    swift_willThrow(v18);
    sub_100016F9C(v13, v14);
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v20[8]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v10;
}

uint64_t *AirPodsSWSendPairingStatusCommandPayload.expectedLength.unsafeMutableAddressor()
{
  return &static AirPodsSWSendPairingStatusCommandPayload.expectedLength;
}

uint64_t static AirPodsSWSendPairingStatusCommandPayload.expectedLength.getter()
{
  return static AirPodsSWSendPairingStatusCommandPayload.expectedLength;
}

uint64_t static AirPodsSWSendPairingStatusCommandPayload.expectedLength.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess(&static AirPodsSWSendPairingStatusCommandPayload.expectedLength, v3, 1LL, 0LL);
  static AirPodsSWSendPairingStatusCommandPayload.expectedLength = a1;
  return result;
}

uint64_t (*static AirPodsSWSendPairingStatusCommandPayload.expectedLength.modify( uint64_t a1))(void)
{
  return j__swift_endAccess;
}

double AirPodsSWSendPairingStatusCommandPayload.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    __int128 v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }

  return result;
}

uint64_t AirPodsSWSendPairingStatusCommandPayload.encode(to:)(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100012ED8(a1, v3);
  dispatch thunk of BinaryEncoding.container()(v16, v3, v4);
  __int128 v15 = *v1;
  uint64_t v5 = v17;
  uint64_t v6 = v18;
  sub_100037298((uint64_t)v16, v17);
  unint64_t v7 = sub_100042440();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v15, &type metadata for Data, v7, v5, v6);
  if (!v2)
  {
    __int128 v15 = v1[1];
    uint64_t v8 = v17;
    uint64_t v9 = v18;
    sub_100037298((uint64_t)v16, v17);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v15, &type metadata for Data, v7, v8, v9);
    __int128 v15 = v1[2];
    uint64_t v10 = v17;
    uint64_t v11 = v18;
    sub_100037298((uint64_t)v16, v17);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v15, &type metadata for Data, v7, v10, v11);
    __int128 v15 = v1[3];
    uint64_t v12 = v17;
    uint64_t v13 = v18;
    sub_100037298((uint64_t)v16, v17);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v15, &type metadata for Data, v7, v12, v13);
  }

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v16);
}

uint64_t sub_1002132FC(void *a1)
{
  return AirPodsSWSendPairingStatusCommandPayload.encode(to:)(a1);
}

uint64_t sub_100213310(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_10021331C + dword_1002133D4[a2 >> 62]))();
}

uint64_t sub_10021332C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (BYTE6(a2) != 85LL)
  {
    __break(1u);
    JUMPOUT(0x1002133D0LL);
  }

  return ((uint64_t (*)(void))((char *)&loc_100213368 + dword_1002133E4[a4 >> 62]))();
}

uint64_t sub_1002133F4@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100012ED8(a1, v5);
  dispatch thunk of BinaryDecoding.container()(v27, v5, v6);
  uint64_t v7 = v28;
  uint64_t v8 = v29;
  sub_100037298((uint64_t)v27, v28);
  uint64_t v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)(85LL, v7, v8);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    uint64_t v11 = v9;
    unint64_t v12 = v10;
    uint64_t v13 = v28;
    uint64_t v14 = v29;
    sub_100037298((uint64_t)v27, v28);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(4LL, v13, v14);
    uint64_t v34 = v15;
    uint64_t v17 = v28;
    uint64_t v16 = v29;
    sub_100037298((uint64_t)v27, v28);
    uint64_t v25 = dispatch thunk of BinaryDecodingContaining.decode(length:)(100LL, v17, v16);
    unint64_t v26 = v18;
    uint64_t v19 = v28;
    uint64_t v20 = v29;
    sub_100037298((uint64_t)v27, v28);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(1LL, v19, v20);
    sub_10001736C(v25, v26);
    sub_100042F34();
    uint64_t v21 = DataProtocol.intValue.getter(&type metadata for Data);
    sub_100178C64(v21, v25, v26);
    sub_100016F9C(v25, v26);
    sub_100213310(v11, v12);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    __int128 v23 = v31;
    *a2 = v30;
    a2[1] = v23;
    __int128 v24 = v33;
    a2[2] = v32;
    a2[3] = v24;
  }

  return result;
}

unint64_t sub_1002135F8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100213624();
  unint64_t result = sub_100213668();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_100213624()
{
  unint64_t result = qword_1009A6418;
  if (!qword_1009A6418)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AirPodsSWSendPairingStatusCommandPayload,  &type metadata for AirPodsSWSendPairingStatusCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009A6418);
  }

  return result;
}

unint64_t sub_100213668()
{
  unint64_t result = qword_1009A6420;
  if (!qword_1009A6420)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AirPodsSWSendPairingStatusCommandPayload,  &type metadata for AirPodsSWSendPairingStatusCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009A6420);
  }

  return result;
}

uint64_t destroy for AirPodsLESendPairingStatusCommandPayload(uint64_t a1)
{
  return sub_100016F9C(*(void *)(a1 + 48), *(void *)(a1 + 56));
}

uint64_t *initializeWithCopy for AirPodsLESendPairingStatusCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10001736C(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_10001736C(v6, v7);
  a1[2] = v6;
  a1[3] = v7;
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  sub_10001736C(v8, v9);
  a1[4] = v8;
  a1[5] = v9;
  uint64_t v11 = a2[6];
  unint64_t v10 = a2[7];
  sub_10001736C(v11, v10);
  a1[6] = v11;
  a1[7] = v10;
  return a1;
}

uint64_t *assignWithCopy for AirPodsLESendPairingStatusCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10001736C(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100016F9C(v6, v7);
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_10001736C(v8, v9);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_100016F9C(v10, v11);
  uint64_t v12 = a2[4];
  unint64_t v13 = a2[5];
  sub_10001736C(v12, v13);
  uint64_t v14 = a1[4];
  unint64_t v15 = a1[5];
  a1[4] = v12;
  a1[5] = v13;
  sub_100016F9C(v14, v15);
  uint64_t v17 = a2[6];
  unint64_t v16 = a2[7];
  sub_10001736C(v17, v16);
  uint64_t v18 = a1[6];
  unint64_t v19 = a1[7];
  a1[6] = v17;
  a1[7] = v16;
  sub_100016F9C(v18, v19);
  return a1;
}

__n128 initializeWithTake for AirPodsLESendPairingStatusCommandPayload(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  return result;
}

uint64_t *assignWithTake for AirPodsLESendPairingStatusCommandPayload(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100016F9C(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_100016F9C(v6, v7);
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_100016F9C(v8, v9);
  uint64_t v10 = a1[6];
  unint64_t v11 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  sub_100016F9C(v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsLESendPairingStatusCommandPayload(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AirPodsLESendPairingStatusCommandPayload( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 4sub_100032838(0, 7LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 64) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 64) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0LL;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AirPodsSWSendPairingStatusCommandPayload()
{
  return &type metadata for AirPodsSWSendPairingStatusCommandPayload;
}

void sub_100213940()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v5 = dispatch_group_create();
  if (qword_10099B858 != -1) {
    swift_once(&qword_10099B858, sub_1006BF8AC);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_10000A720(v6, (uint64_t)qword_100A2B248);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Initial launch processing...", v10, 2u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  unint64_t v11 = (uint64_t *)(v1 + 16);
  swift_beginAccess(v1 + 16, v40, 0LL, 0LL);
  uint64_t v12 = *(void *)(v1 + 16);
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    __int128 v33 = v4;
    uint64_t v14 = v12 + 32;
    swift_bridgeObjectRetain(v12);
    do
    {
      sub_100013044(v14, (uint64_t)v37);
      sub_100013044((uint64_t)v37, (uint64_t)v36);
      uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009B14A0);
      uint64_t v18 = sub_100004AEC(&qword_1009B1540);
      if (swift_dynamicCast(&v35, v36, v17, v18, 6LL))
      {
        swift_unknownObjectRelease(v35);
      }

      else
      {
        uint64_t v15 = v38;
        uint64_t v16 = v39;
        sub_100012ED8(v37, v38);
        (*(void (**)(uint64_t, uint64_t))(v16 + 32))(v15, v16);
      }

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v37);
      v14 += 40LL;
      --v13;
    }

    while (v13);
    swift_bridgeObjectRelease();
    uint64_t v19 = *v11;
    uint64_t v20 = *(void *)(*v11 + 16);
    if (v20)
    {
      uint64_t v21 = v19 + 32;
      swift_bridgeObjectRetain(v19);
      uint64_t v22 = _swiftEmptyArrayStorage;
      do
      {
        sub_100013044(v21, (uint64_t)v37);
        sub_100013044((uint64_t)v37, (uint64_t)v36);
        uint64_t v23 = sub_100004AEC((uint64_t *)&unk_1009B14A0);
        uint64_t v24 = sub_100004AEC(&qword_1009B1540);
        if ((swift_dynamicCast(&v35, v36, v23, v24, 6LL) & 1) == 0) {
          __int128 v35 = 0uLL;
        }
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v37);
        if ((void)v35)
        {
          __int128 v34 = v35;
          if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0) {
            uint64_t v22 = sub_1004C5AD4(0LL, v22[2] + 1LL, 1, v22);
          }
          unint64_t v26 = v22[2];
          unint64_t v25 = v22[3];
          __int128 v27 = v34;
          if (v26 >= v25 >> 1)
          {
            uint64_t v28 = sub_1004C5AD4((void *)(v25 > 1), v26 + 1, 1, v22);
            __int128 v27 = v34;
            uint64_t v22 = v28;
          }

          v22[2] = v26 + 1;
          *(_OWORD *)&v22[2 * v26 + 4] = v27;
        }

        v21 += 40LL;
        --v20;
      }

      while (v20);
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v22 = _swiftEmptyArrayStorage;
    }

    uint64_t v4 = v33;
  }

  else
  {
    uint64_t v22 = _swiftEmptyArrayStorage;
  }

  dispatch_group_enter(v5);
  uint64_t v29 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL))(v4, 1LL, 1LL, v29);
  __int128 v30 = (void *)swift_allocObject(&unk_10094A9A0, 48LL, 7LL);
  v30[2] = 0LL;
  v30[3] = 0LL;
  void v30[4] = v22;
  v30[5] = v5;
  __int128 v31 = v5;
  sub_1003EDB00((uint64_t)v4, (uint64_t)&unk_1009A65D0, (uint64_t)v30);
  swift_release();
  OS_dispatch_group.wait()();
}

void sub_100213CF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v6);
  uint64_t v99 = (uint64_t)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for SystemVersionNumber(0LL);
  uint64_t v98 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  unint64_t v97 = (char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v96 = (char *)&v91 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v91 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v91 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v91 - v20;
  uint64_t v95 = v22;
  __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v91 - v23;
  dispatch_group_t v94 = dispatch_group_create();
  uint64_t v25 = a1;
  uint64_t v100 = a2;
  if ((static SystemVersionNumber.< infix(_:_:)(a1, a2) & 1) != 0)
  {
    if (qword_10099B858 != -1) {
      swift_once(&qword_10099B858, sub_1006BF8AC);
    }
    uint64_t v26 = type metadata accessor for Logger(0LL);
    sub_10000A720(v26, (uint64_t)qword_100A2B248);
    uint64_t v27 = v98;
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v98 + 16);
    v28(v24, v25, v8);
    unint64_t v93 = v28;
    uint64_t v29 = ((uint64_t (*)(char *, uint64_t, uint64_t))v28)(v21, v100, v8);
    __int128 v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.default.getter(v30);
    int v32 = v31;
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v33 = swift_slowAlloc(22LL, -1LL);
      uint64_t v34 = swift_slowAlloc(64LL, -1LL);
      *(void *)&__int128 v101 = v34;
      v105[0] = v34;
      *(_DWORD *)uint64_t v33 = 136315394;
      LODWORD(v92) = v32;
      os_log_t v91 = v30;
      uint64_t v35 = SystemVersionNumber.rawValue.getter(v34);
      uint64_t v103 = sub_1003F11D4(v35, v36, v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v33 + 4, v33 + 12);
      swift_bridgeObjectRelease();
      uint64_t v37 = v8;
      uint64_t v38 = *(uint64_t (**)(char *, uint64_t))(v27 + 8);
      uint64_t v39 = v38(v24, v37);
      *(_WORD *)(v33 + 12) = 2080;
      uint64_t v40 = SystemVersionNumber.rawValue.getter(v39);
      uint64_t v103 = sub_1003F11D4(v40, v41, v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v33 + 14, v33 + 22);
      swift_bridgeObjectRelease();
      v38(v21, v37);
      uint64_t v8 = v37;
      os_log_t v42 = v91;
      _os_log_impl( (void *)&_mh_execute_header,  v91,  (os_log_type_t)v92,  "Migrating from %s to %s",  (uint8_t *)v33,  0x16u);
      uint64_t v43 = v101;
      swift_arrayDestroy(v101, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1LL, -1LL);
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    else
    {
      uint64_t v58 = *(void (**)(char *, uint64_t))(v27 + 8);
      v58(v24, v8);
      v58(v21, v8);
    }
  }

  else
  {
    if (qword_10099B858 != -1) {
      swift_once(&qword_10099B858, sub_1006BF8AC);
    }
    uint64_t v44 = type metadata accessor for Logger(0LL);
    sub_10000A720(v44, (uint64_t)qword_100A2B248);
    uint64_t v45 = v98;
    uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t))(v98 + 16);
    v46(v18, v25, v8);
    unint64_t v93 = v46;
    uint64_t v47 = ((uint64_t (*)(char *, uint64_t, uint64_t))v46)(v15, v100, v8);
    BOOL v48 = (os_log_s *)Logger.logObject.getter(v47);
    os_log_type_t v49 = static os_log_type_t.default.getter(v48);
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = swift_slowAlloc(22LL, -1LL);
      os_log_t v91 = (os_log_t)swift_slowAlloc(64LL, -1LL);
      v105[0] = (uint64_t)v91;
      *(_DWORD *)uint64_t v50 = 136315394;
      uint64_t v92 = v8;
      uint64_t v51 = ((uint64_t (*)(void))SystemVersionNumber.rawValue.getter)();
      uint64_t v103 = sub_1003F11D4(v51, v52, v105);
      *(void *)&__int128 v101 = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v50 + 4, v50 + 12);
      swift_bridgeObjectRelease();
      uint64_t v53 = *(uint64_t (**)(char *, uint64_t))(v45 + 8);
      uint64_t v54 = v53(v18, v92);
      *(_WORD *)(v50 + 12) = 2080;
      uint64_t v55 = SystemVersionNumber.rawValue.getter(v54);
      uint64_t v103 = sub_1003F11D4(v55, v56, v105);
      uint64_t v3 = v101;
      uint64_t v8 = v92;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v50 + 14, v50 + 22);
      swift_bridgeObjectRelease();
      v53(v15, v8);
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Back-migration from %s to %s", (uint8_t *)v50, 0x16u);
      os_log_t v57 = v91;
      swift_arrayDestroy(v91, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1LL, -1LL);
      swift_slowDealloc(v50, -1LL, -1LL);
    }

    else
    {
      uint64_t v59 = *(void (**)(char *, uint64_t))(v45 + 8);
      v59(v18, v8);
      v59(v15, v8);
    }
  }

  unint64_t v60 = (void *)(v3 + 16);
  swift_beginAccess(v3 + 16, v108, 0LL, 0LL);
  uint64_t v61 = *(void *)(v3 + 16);
  uint64_t v62 = *(void *)(v61 + 16);
  if (v62)
  {
    uint64_t v92 = v8;
    uint64_t v63 = v61 + 32;
    swift_bridgeObjectRetain(v61);
    do
    {
      sub_100013044(v63, (uint64_t)v105);
      sub_100013044((uint64_t)v105, (uint64_t)&v103);
      uint64_t v66 = sub_100004AEC((uint64_t *)&unk_1009B14A0);
      uint64_t v67 = sub_100004AEC(&qword_1009B1540);
      if (swift_dynamicCast(&v102, &v103, v66, v67, 6LL))
      {
        swift_unknownObjectRelease(v102);
      }

      else
      {
        uint64_t v64 = v106;
        uint64_t v65 = v107;
        sub_100012ED8(v105, v106);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 40))(v25, v100, v64, v65);
      }

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v105);
      v63 += 40LL;
      --v62;
    }

    while (v62);
    swift_bridgeObjectRelease();
    uint64_t v68 = *(void *)(*v60 + 16LL);
    if (v68)
    {
      uint64_t v69 = *v60 + 32LL;
      swift_bridgeObjectRetain(*v60);
      unint64_t v70 = _swiftEmptyArrayStorage;
      do
      {
        sub_100013044(v69, (uint64_t)v105);
        sub_100013044((uint64_t)v105, (uint64_t)&v103);
        uint64_t v71 = sub_100004AEC((uint64_t *)&unk_1009B14A0);
        uint64_t v72 = sub_100004AEC(&qword_1009B1540);
        if ((swift_dynamicCast(&v102, &v103, v71, v72, 6LL) & 1) == 0) {
          __int128 v102 = 0uLL;
        }
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v105);
        if ((void)v102)
        {
          __int128 v101 = v102;
          if ((swift_isUniquelyReferenced_nonNull_native(v70) & 1) == 0) {
            unint64_t v70 = sub_1004C5AD4(0LL, v70[2] + 1LL, 1, v70);
          }
          unint64_t v74 = v70[2];
          unint64_t v73 = v70[3];
          __int128 v75 = v101;
          if (v74 >= v73 >> 1)
          {
            uint64_t v76 = sub_1004C5AD4((void *)(v73 > 1), v74 + 1, 1, v70);
            __int128 v75 = v101;
            unint64_t v70 = v76;
          }

          void v70[2] = v74 + 1;
          *(_OWORD *)&v70[2 * v74 + 4] = v75;
        }

        v69 += 40LL;
        --v68;
      }

      while (v68);
      swift_bridgeObjectRelease();
    }

    else
    {
      unint64_t v70 = _swiftEmptyArrayStorage;
    }

    uint64_t v8 = v92;
  }

  else
  {
    unint64_t v70 = _swiftEmptyArrayStorage;
  }

  dispatch_group_t v77 = v94;
  dispatch_group_enter(v94);
  uint64_t v78 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56LL))(v99, 1LL, 1LL, v78);
  uint64_t v79 = v96;
  uint64_t v80 = v93;
  v93(v96, v25, v8);
  uint64_t v81 = v97;
  v80(v97, v100, v8);
  uint64_t v82 = v98;
  uint64_t v83 = *(unsigned __int8 *)(v98 + 80);
  uint64_t v84 = v8;
  uint64_t v85 = (v83 + 40) & ~v83;
  uint64_t v86 = (v95 + v83 + v85) & ~v83;
  unint64_t v87 = (v95 + v86 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  __n128 v88 = (char *)swift_allocObject(&unk_10094A950, v87 + 8, v83 | 7);
  *((void *)v88 + 2) = 0LL;
  *((void *)v88 + 3) = 0LL;
  *((void *)v88 + 4) = v70;
  uint64_t v89 = *(void (**)(char *, char *, uint64_t))(v82 + 32);
  v89(&v88[v85], v79, v84);
  v89(&v88[v86], v81, v84);
  *(void *)&v88[v87] = v77;
  uint64_t v90 = v77;
  sub_1003EDB00(v99, (uint64_t)&unk_1009A65C0, (uint64_t)v88);
  swift_release();
  OS_dispatch_group.wait()();
}

void sub_1002145C4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v5 = dispatch_group_create();
  if (qword_10099B858 != -1) {
    swift_once(&qword_10099B858, sub_1006BF8AC);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_10000A720(v6, (uint64_t)qword_100A2B248);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "First launch since reboot...", v10, 2u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  uint64_t v11 = (uint64_t *)(v1 + 16);
  swift_beginAccess(v1 + 16, v40, 0LL, 0LL);
  uint64_t v12 = *(void *)(v1 + 16);
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    uint64_t v33 = v4;
    uint64_t v14 = v12 + 32;
    swift_bridgeObjectRetain(v12);
    do
    {
      sub_100013044(v14, (uint64_t)v37);
      sub_100013044((uint64_t)v37, (uint64_t)v36);
      uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009B14A0);
      uint64_t v18 = sub_100004AEC(&qword_1009B1540);
      if (swift_dynamicCast(&v35, v36, v17, v18, 6LL))
      {
        swift_unknownObjectRelease(v35);
      }

      else
      {
        uint64_t v15 = v38;
        uint64_t v16 = v39;
        sub_100012ED8(v37, v38);
        (*(void (**)(uint64_t, uint64_t))(v16 + 48))(v15, v16);
      }

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v37);
      v14 += 40LL;
      --v13;
    }

    while (v13);
    swift_bridgeObjectRelease();
    uint64_t v19 = *v11;
    uint64_t v20 = *(void *)(*v11 + 16);
    if (v20)
    {
      uint64_t v21 = v19 + 32;
      swift_bridgeObjectRetain(v19);
      uint64_t v22 = _swiftEmptyArrayStorage;
      do
      {
        sub_100013044(v21, (uint64_t)v37);
        sub_100013044((uint64_t)v37, (uint64_t)v36);
        uint64_t v23 = sub_100004AEC((uint64_t *)&unk_1009B14A0);
        uint64_t v24 = sub_100004AEC(&qword_1009B1540);
        if ((swift_dynamicCast(&v35, v36, v23, v24, 6LL) & 1) == 0) {
          __int128 v35 = 0uLL;
        }
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v37);
        if ((void)v35)
        {
          __int128 v34 = v35;
          if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0) {
            uint64_t v22 = sub_1004C5AD4(0LL, v22[2] + 1LL, 1, v22);
          }
          unint64_t v26 = v22[2];
          unint64_t v25 = v22[3];
          __int128 v27 = v34;
          if (v26 >= v25 >> 1)
          {
            uint64_t v28 = sub_1004C5AD4((void *)(v25 > 1), v26 + 1, 1, v22);
            __int128 v27 = v34;
            uint64_t v22 = v28;
          }

          v22[2] = v26 + 1;
          *(_OWORD *)&v22[2 * v26 + 4] = v27;
        }

        v21 += 40LL;
        --v20;
      }

      while (v20);
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v22 = _swiftEmptyArrayStorage;
    }

    uint64_t v4 = v33;
  }

  else
  {
    uint64_t v22 = _swiftEmptyArrayStorage;
  }

  dispatch_group_enter(v5);
  uint64_t v29 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL))(v4, 1LL, 1LL, v29);
  __int128 v30 = (void *)swift_allocObject(&unk_10094A978, 48LL, 7LL);
  v30[2] = 0LL;
  v30[3] = 0LL;
  void v30[4] = v22;
  v30[5] = v5;
  os_log_type_t v31 = v5;
  sub_1003EDB00((uint64_t)v4, (uint64_t)&unk_1009A65C8, (uint64_t)v30);
  swift_release();
  OS_dispatch_group.wait()();
}

uint64_t sub_10021497C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2A3A0);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2A3A0);
  if (qword_10099B858 != -1) {
    swift_once(&qword_10099B858, sub_1006BF8AC);
  }
  uint64_t v2 = sub_10000A720(v0, (uint64_t)qword_100A2B248);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_100214A0C()
{
  uint64_t result = sub_100214A2C();
  qword_100A2A3B8 = result;
  qword_100A2A3C0 = v1;
  return result;
}

uint64_t sub_100214A2C()
{
  id v0 = [(id)objc_opt_self(NSProcessInfo) processInfo];
  id v1 = [v0 environment];

  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v1,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  if (*(void *)(v2 + 16) && (uint64_t v3 = sub_10030CF14(0xD000000000000010LL, 0x800000010085A810LL), (v4 & 1) != 0))
  {
    unint64_t v5 = (uint64_t *)(*(void *)(v2 + 56) + 16 * v3);
    uint64_t v6 = *v5;
    swift_bridgeObjectRetain(v5[1]);
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  swift_bridgeObjectRelease();
  return v6;
}

void *sub_100214B08()
{
  id v1 = v0;
  uint64_t v18 = *v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v2);
  char v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v1[2] = _swiftEmptyArrayStorage;
  sub_100004AB0();
  uint64_t v12 = (*(uint64_t (**)(char *, void, uint64_t))(v9 + 104))( v11,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v8);
  static DispatchQoS.unspecified.getter(v12);
  uint64_t v19 = _swiftEmptyArrayStorage;
  uint64_t v13 = sub_100007864( (unint64_t *)&qword_10099BAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009A0CD0);
  uint64_t v15 = sub_100090114((unint64_t *)&qword_10099BAB0, (uint64_t *)&unk_1009A0CD0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v14, v15, v2, v13);
  v1[3] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000024LL,  0x800000010085A830LL,  v7,  v4,  v11,  0LL);
  v1[4] = 0LL;
  uint64_t v16 = type metadata accessor for SelfLocatingBeaconPayloadCacheSubscriber(0LL);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  v1[5] = sub_1003B6CB8();
  v1[6] = _swiftEmptyArrayStorage;
  *((_BYTE *)v1 + 56) = 0;
  v1[8] = 0LL;
  sub_1006BF820();
  return v1;
}

uint64_t sub_100214D2C()
{
  return static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.startup", 37LL, 2LL, sub_1002183BC);
}

uint64_t sub_100214D9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v21 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v20[1] = *(void *)(a2 + 24);
  uint64_t v13 = (void *)swift_allocObject(&unk_10094A838, 40LL, 7LL);
  void v13[2] = a2;
  v13[3] = a1;
  uint64_t v13[4] = a3;
  void aBlock[4] = sub_100218400;
  void aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10094A850;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v15 = swift_retain();
  static DispatchQoS.unspecified.getter(v15);
  uint64_t v23 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v18 = sub_100090114((unint64_t *)&qword_10099FAC0, (uint64_t *)&unk_1009AB860);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v6, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t sub_100214FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_1009A6598);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v65 - v13;
  sub_1002176C4();
  Transaction.capture()();
  if (qword_10099B1E0 != -1) {
    swift_once(&qword_10099B1E0, sub_100214A0C);
  }
  unint64_t v15 = qword_100A2A3C0;
  if (qword_100A2A3C0)
  {
    uint64_t v16 = qword_100A2A3B8;
    uint64_t v17 = qword_10099B1D8;
    swift_bridgeObjectRetain(qword_100A2A3C0);
    if (v17 != -1) {
      swift_once(&qword_10099B1D8, sub_10021497C);
    }
    uint64_t v68 = a3;
    uint64_t v69 = a2;
    uint64_t v18 = type metadata accessor for Logger(0LL);
    uint64_t v19 = sub_10000A720(v18, (uint64_t)qword_100A2A3A0);
    swift_bridgeObjectRetain(v15);
    *(void *)&__int128 v74 = v19;
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.default.getter(v21);
    BOOL v23 = os_log_type_enabled(v21, v22);
    uint64_t v70 = a1;
    uint64_t v67 = v8;
    if (v23)
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v25 = v16;
      uint64_t v26 = swift_slowAlloc(32LL, -1LL);
      v80[0] = v26;
      *(_DWORD *)uint64_t v24 = 136446210;
      swift_bridgeObjectRetain(v15);
      uint64_t v76 = sub_1003F11D4(v25, v15, v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v24 + 4, v24 + 12);
      swift_bridgeObjectRelease_n(v15, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Launching searchpartyd (%{public}s)", v24, 0xCu);
      swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1LL, -1LL);
      __int128 v27 = v24;
      a1 = v70;
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v15, 2LL);
    }

    uint64_t v28 = type metadata accessor for SystemVersionNumber(0LL);
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL);
    v29(v14, 1LL, 1LL, v28);
    v29(v12, 1LL, 1LL, v28);
    sub_100215708((uint64_t)v14, (uint64_t)v12);
    sub_100015794((uint64_t)v12, &qword_1009A6598);
    sub_100015794((uint64_t)v14, &qword_1009A6598);
    swift_beginAccess(a1 + 16, v83, 0LL, 0LL);
    uint64_t v30 = *(void *)(a1 + 16);
    uint64_t v31 = *(void *)(v30 + 16);
    if (v31)
    {
      uint64_t v66 = (void *)(a1 + 16);
      uint64_t v32 = v30 + 32;
      v65[1] = v30;
      __n128 v33 = swift_bridgeObjectRetain(v30);
      __int128 v34 = (uint64_t *)&unk_1009B14A0;
      v33.n128_u64[0] = 136446210LL;
      __n128 v72 = v33;
      uint64_t v71 = (char *)&type metadata for Any + 8;
      do
      {
        sub_100013044(v32, (uint64_t)v80);
        sub_100013044((uint64_t)v80, (uint64_t)&v76);
        uint64_t v35 = sub_100004AEC(v34);
        uint64_t v36 = sub_100004AEC(&qword_1009B1540);
        if (swift_dynamicCast(&v75, &v76, v35, v36, 6LL))
        {
          swift_unknownObjectRelease(v75);
        }

        else
        {
          uint64_t v37 = sub_100013044((uint64_t)v80, (uint64_t)&v76);
          uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
          os_log_type_t v39 = static os_log_type_t.default.getter(v38);
          if (os_log_type_enabled(v38, v39))
          {
            uint64_t v40 = swift_slowAlloc(12LL, -1LL);
            uint64_t v73 = swift_slowAlloc(32LL, -1LL);
            *(void *)&__int128 v75 = v73;
            *(_DWORD *)uint64_t v40 = v72.n128_u32[0];
            unint64_t v41 = v34;
            uint64_t v42 = v78;
            uint64_t v43 = v79;
            sub_100012ED8(&v76, v78);
            uint64_t v44 = v42;
            __int128 v34 = v41;
            uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v44, v43);
            *(void *)(v40 + 4) = sub_1003F11D4(v45, v46, (uint64_t *)&v75);
            swift_bridgeObjectRelease();
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v76);
            _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "Starting legacy service: %{public}s",  (uint8_t *)v40,  0xCu);
            uint64_t v47 = v73;
            swift_arrayDestroy(v73, 1LL, v71);
            swift_slowDealloc(v47, -1LL, -1LL);
            swift_slowDealloc(v40, -1LL, -1LL);
          }

          else
          {
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v76);
          }

          uint64_t v48 = v81;
          uint64_t v49 = v82;
          sub_100012ED8(v80, v81);
          (*(void (**)(uint64_t, uint64_t))(v49 + 24))(v48, v49);
        }

        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v80);
        v32 += 40LL;
        --v31;
      }

      while (v31);
      swift_bridgeObjectRelease();
      uint64_t v50 = *(void *)(*v66 + 16LL);
      uint64_t v51 = v69;
      uint64_t v52 = v68;
      if (v50)
      {
        uint64_t v53 = *v66 + 32LL;
        swift_bridgeObjectRetain(*v66);
        uint64_t v54 = _swiftEmptyArrayStorage;
        do
        {
          sub_100013044(v53, (uint64_t)v80);
          sub_100013044((uint64_t)v80, (uint64_t)&v76);
          uint64_t v55 = sub_100004AEC((uint64_t *)&unk_1009B14A0);
          uint64_t v56 = sub_100004AEC(&qword_1009B1540);
          if ((swift_dynamicCast(&v75, &v76, v55, v56, 6LL) & 1) == 0) {
            __int128 v75 = 0uLL;
          }
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v80);
          if ((void)v75)
          {
            __int128 v74 = v75;
            if ((swift_isUniquelyReferenced_nonNull_native(v54) & 1) == 0) {
              uint64_t v54 = sub_1004C5AD4(0LL, v54[2] + 1LL, 1, v54);
            }
            unint64_t v58 = v54[2];
            unint64_t v57 = v54[3];
            __int128 v59 = v74;
            if (v58 >= v57 >> 1)
            {
              unint64_t v60 = sub_1004C5AD4((void *)(v57 > 1), v58 + 1, 1, v54);
              __int128 v59 = v74;
              uint64_t v54 = v60;
            }

            v54[2] = v58 + 1;
            *(_OWORD *)&v54[2 * v58 + 4] = v59;
          }

          v53 += 40LL;
          --v50;
        }

        while (v50);
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v54 = _swiftEmptyArrayStorage;
      }

      a1 = v70;
    }

    else
    {
      uint64_t v54 = _swiftEmptyArrayStorage;
      uint64_t v51 = v69;
      uint64_t v52 = v68;
    }

    uint64_t v61 = type metadata accessor for TaskPriority(0LL);
    uint64_t v62 = (uint64_t)v67;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56LL))(v67, 1LL, 1LL, v61);
    uint64_t v63 = (void *)swift_allocObject(&unk_10094A888, 64LL, 7LL);
    v63[2] = 0LL;
    v63[3] = 0LL;
    v63[4] = v51;
    v63[5] = v54;
    v63[6] = a1;
    v63[7] = v52;
    swift_retain();
    swift_retain();
    sub_1003EDB00(v62, (uint64_t)&unk_1009A65A8, (uint64_t)v63);
    return swift_release();
  }

  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x800000010085A760LL,  "searchpartyd/SearchPartyDaemon.swift",  36LL,  2LL,  68LL,  0);
    __break(1u);
  }

  return result;
}

uint64_t sub_100215708(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v106 = v4;
  uint64_t v107 = v5;
  uint64_t v6 = __chkstk_darwin(v4);
  __int128 v101 = (char *)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v108 = (char *)&v99 - v9;
  __chkstk_darwin(v8);
  uint64_t v105 = (char *)&v99 - v10;
  uint64_t v11 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v104 = (uint64_t)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v109 = (char *)&v99 - v14;
  uint64_t v15 = type metadata accessor for SystemVersionNumber(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v100 = (char *)&v99 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v112 = (char *)&v99 - v19;
  uint64_t v20 = sub_100004AEC(&qword_1009A6598);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v99 = (char *)&v99 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v102 = (uint64_t)&v99 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v111 = (uint64_t)&v99 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v99 - v28;
  uint64_t v30 = __chkstk_darwin(v27);
  uint64_t v32 = (char *)&v99 - v31;
  __chkstk_darwin(v30);
  __int128 v34 = (char *)&v99 - v33;
  id v103 = (id)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
  id v110 = [v103 standardUserDefaults];
  uint64_t v113 = v16;
  uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  uint64_t v36 = a1;
  LODWORD(a1) = v35(a1, 1LL, v15);
  sub_10001581C(a2, (uint64_t)v34, &qword_1009A6598);
  if ((_DWORD)a1 == 1)
  {
    uint64_t v37 = v15;
    int v38 = v35((uint64_t)v34, 1LL, v15);
    uint64_t v39 = sub_100015794((uint64_t)v34, &qword_1009A6598);
    if (v38 == 1)
    {
      id v40 = (id)MobileGestalt_get_current_device(v39);
      if (v40)
      {
        unint64_t v41 = v40;
        id v42 = (id)MobileGestalt_copy_buildVersion_obj();

        if (v42)
        {
          uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
          unint64_t v45 = v44;
        }

        else
        {
          uint64_t v43 = 0LL;
          unint64_t v45 = 0xE000000000000000LL;
        }

        SystemVersionNumber.init(string:)(v43, v45);
        if (v35((uint64_t)v29, 1LL, v15) == 1)
        {

          return sub_100015794((uint64_t)v29, &qword_1009A6598);
        }

        uint64_t v91 = v113;
        uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v113 + 32);
        v47(v112, v29, v37);
        uint64_t v92 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 56);
        uint64_t v50 = v111;
        v92(v111, 1LL, 1LL, v37);
        NSString v93 = String._bridgeToObjectiveC()();
        id v94 = [v110 stringForKey:v93];

        if (v94)
        {
          uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
          uint64_t v97 = v96;

          uint64_t v98 = (uint64_t)v99;
          SystemVersionNumber.init(string:)(v95, v97);
          sub_100015794(v50, &qword_1009A6598);
          sub_1002185CC(v98, v50);
        }

        char v49 = 0;
        goto LABEL_9;
      }

      __break(1u);
LABEL_40:
      sub_100015794((uint64_t)v32, &qword_1009A6598);
      uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000016LL,  0x800000010085A7F0LL,  "searchpartyd/Daemon.swift",  25LL,  2LL,  39LL,  0);
      __break(1u);
      return result;
    }
  }

  else
  {
    uint64_t v37 = v15;
    sub_100015794((uint64_t)v34, &qword_1009A6598);
  }

  sub_10001581C(a2, (uint64_t)v32, &qword_1009A6598);
  uint64_t v46 = v113;
  uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v113 + 32);
  v47(v112, v32, v37);
  uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56);
  char v49 = 1;
  uint64_t v50 = v111;
  v48(v111, 1LL, 1LL, v37);
  sub_100015794(v50, &qword_1009A6598);
  sub_10001581C(v36, v50, &qword_1009A6598);
LABEL_9:
  uint64_t v52 = (uint64_t)v105;
  uint64_t v51 = v106;
  uint64_t v53 = (uint64_t)v109;
  uint64_t v54 = v102;
  sub_10001581C(v50, v102, &qword_1009A6598);
  if (v35(v54, 1LL, v37) == 1)
  {
    sub_100015794(v54, &qword_1009A6598);
    sub_100213940();
    uint64_t v56 = (uint64_t)v112;
  }

  else
  {
    uint64_t v57 = (uint64_t)v100;
    v47(v100, (char *)v54, v37);
    uint64_t v58 = sub_100007864( &qword_1009A5968,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemVersionNumber,  (uint64_t)&protocol conformance descriptor for SystemVersionNumber);
    uint64_t v56 = (uint64_t)v112;
    if ((dispatch thunk of static Equatable.== infix(_:_:)(v57, v112, v37, v58) & 1) == 0) {
      sub_100213CF8(v57, v56);
    }
    uint64_t v55 = (*(uint64_t (**)(uint64_t, uint64_t))(v113 + 8))(v57, v37);
  }

  if ((v49 & 1) == 0)
  {
    SystemVersionNumber.description.getter(v55);
    NSString v59 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v60 = String._bridgeToObjectiveC()();
    [v110 setValue:v59 forKey:v60];
  }

  sub_10062689C(v52);
  id v61 = [v103 standardUserDefaults];
  NSString v62 = String._bridgeToObjectiveC()();
  id v63 = [v61 stringForKey:v62];

  if (v63)
  {
    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
    uint64_t v66 = v65;

    UUID.init(uuidString:)(v64, v66);
    swift_bridgeObjectRelease();
    uint64_t v67 = v107;
  }

  else
  {
    uint64_t v67 = v107;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v107 + 56))(v53, 1LL, 1LL, v51);
  }

  uint64_t v68 = v108;
  (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v108, v52, v51);
  uint64_t v69 = v104;
  sub_10001581C(v53, v104, &qword_10099D8A0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v69, 1LL, v51) == 1)
  {
    swift_retain();
    sub_100015794(v69, &qword_10099D8A0);
    if (qword_10099B858 != -1) {
      swift_once(&qword_10099B858, sub_1006BF8AC);
    }
    uint64_t v70 = type metadata accessor for Logger(0LL);
    uint64_t v71 = sub_10000A720(v70, (uint64_t)qword_100A2B248);
    __n128 v72 = (os_log_s *)Logger.logObject.getter(v71);
    os_log_type_t v73 = static os_log_type_t.default.getter(v72);
    if (os_log_type_enabled(v72, v73))
    {
      __int128 v74 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)__int128 v74 = 0;
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "No lastLaunchBootSessionUUID on record", v74, 2u);
      __int128 v75 = v74;
      uint64_t v68 = v108;
      swift_slowDealloc(v75, -1LL, -1LL);
    }

    sub_100218148();
    swift_release();

    uint64_t v76 = *(void (**)(char *, uint64_t))(v67 + 8);
    v76(v68, v51);
    v76((char *)v52, v51);
    sub_100015794(v53, &qword_10099D8A0);
    sub_100015794(v111, &qword_1009A6598);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v113 + 8))(v56, v37);
  }

  else
  {
    uint64_t v78 = v56;
    uint64_t v79 = v101;
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(v101, v69, v51);
    uint64_t v80 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    swift_retain();
    if ((dispatch thunk of static Equatable.== infix(_:_:)(v79, v52, v51, v80) & 1) != 0)
    {
      swift_release();
      uint64_t v81 = *(void (**)(char *, uint64_t))(v67 + 8);
      v81(v68, v51);
      if (qword_10099B858 != -1) {
        swift_once(&qword_10099B858, sub_1006BF8AC);
      }
      uint64_t v82 = type metadata accessor for Logger(0LL);
      uint64_t v83 = sub_10000A720(v82, (uint64_t)qword_100A2B248);
      uint64_t v84 = (os_log_s *)Logger.logObject.getter(v83);
      os_log_type_t v85 = static os_log_type_t.default.getter(v84);
      BOOL v86 = os_log_type_enabled(v84, v85);
      unint64_t v87 = v101;
      if (v86)
      {
        __n128 v88 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)__n128 v88 = 0;
        _os_log_impl((void *)&_mh_execute_header, v84, v85, "This is *NOT* the first run since reboot", v88, 2u);
        swift_slowDealloc(v88, -1LL, -1LL);
      }

      uint64_t v89 = v87;
    }

    else
    {
      sub_100218148();

      uint64_t v81 = *(void (**)(char *, uint64_t))(v67 + 8);
      v81(v79, v51);
      swift_release();
      uint64_t v89 = v68;
    }

    v81(v89, v51);
    uint64_t v90 = (uint64_t)v109;
    v81((char *)v52, v51);
    sub_100015794(v90, &qword_10099D8A0);
    sub_100015794(v111, &qword_1009A6598);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v113 + 8))(v78, v37);
  }

uint64_t sub_10021616C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[16] = a6;
  v7[17] = a7;
  v7[14] = a4;
  v7[15] = a5;
  uint64_t v8 = sub_100004AEC(&qword_1009A9BF0);
  v7[18] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  v7[19] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v7[20] = v10;
  v7[21] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  v7[22] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v7[23] = v12;
  _BYTE v7[24] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10021621C, 0LL, 0LL);
}

uint64_t sub_10021621C()
{
  uint64_t v1 = v0[15];
  Transaction.capture()();
  uint64_t v2 = *(void *)(v1 + 16);
  v0[25] = v2;
  if (v2)
  {
    uint64_t v3 = v0[15];
    v0[27] = 0LL;
    uint64_t v4 = *(void *)(v3 + 32);
    v0[28] = v4;
    uint64_t v5 = *(void *)(v3 + 40);
    uint64_t v6 = qword_10099B1D8;
    swift_unknownObjectRetain(v4);
    swift_bridgeObjectRetain(v3);
    if (v6 != -1) {
      swift_once(&qword_10099B1D8, sub_10021497C);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    sub_10000A720(v7, (uint64_t)qword_100A2A3A0);
    uint64_t v8 = swift_unknownObjectRetain_n(v4, 2LL);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.default.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc(12LL, -1LL);
      uint64_t v12 = swift_slowAlloc(32LL, -1LL);
      uint64_t v40 = v12;
      *(_DWORD *)uint64_t v11 = 136446210;
      uint64_t ObjectType = swift_getObjectType(v4);
      v0[13] = v4;
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 16) + 8LL))(ObjectType);
      *(void *)(v11 + 4) = sub_1003F11D4(v14, v15, &v40);
      swift_unknownObjectRelease_n(v4, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Starting service: %{public}s", (uint8_t *)v11, 0xCu);
      swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    else
    {

      swift_unknownObjectRelease_n(v4, 2LL);
    }

    uint64_t v19 = v0[17];
    uint64_t v18 = v0[18];
    uint64_t v20 = type metadata accessor for TaskPriority(0LL);
    uint64_t v21 = *(void *)(v20 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(v18, 1LL, 1LL, v20);
    uint64_t v22 = (void *)swift_allocObject(&unk_10094A8B0, 56LL, 7LL);
    v22[2] = 0LL;
    uint64_t v23 = v22 + 2;
    v22[3] = 0LL;
    v22[4] = v4;
    v22[5] = v5;
    v22[6] = v19;
    LODWORD(v19) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v18, 1LL, v20);
    uint64_t v24 = swift_unknownObjectRetain(v4);
    uint64_t v25 = v0[18];
    if ((_DWORD)v19 == 1)
    {
      sub_100015794(v0[18], &qword_1009A9BF0);
      uint64_t v26 = 0LL;
      uint64_t v27 = 0LL;
      uint64_t v28 = 7168LL;
    }

    else
    {
      unsigned __int8 v29 = TaskPriority.rawValue.getter(v24);
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v25, v20);
      uint64_t v28 = v29 | 0x1C00LL;
      uint64_t v30 = *v23;
      if (*v23)
      {
        uint64_t v31 = v22[3];
        uint64_t v32 = swift_getObjectType(*v23);
        swift_unknownObjectRetain(v30);
        uint64_t v26 = dispatch thunk of Actor.unownedExecutor.getter(v32, v31);
        uint64_t v27 = v33;
        swift_unknownObjectRelease(v30);
      }

      else
      {
        uint64_t v26 = 0LL;
        uint64_t v27 = 0LL;
      }
    }

    uint64_t v34 = swift_allocObject(&unk_10094A8D8, 32LL, 7LL);
    *(void *)(v34 + swift_weakDestroy(v0 + 16) = &unk_1009A65B8;
    *(void *)(v34 + 24) = v22;
    if (v27 | v26)
    {
      uint64_t v35 = v0 + 8;
      v0[8] = 0LL;
      v0[9] = 0LL;
      v0[10] = v26;
      v0[11] = v27;
    }

    else
    {
      uint64_t v35 = 0LL;
    }

    v0[29] = swift_task_create(v28, v35, (char *)&type metadata for () + 8, &unk_1009AB890, v34);
    uint64_t v36 = swift_getObjectType(v4);
    uint64_t v37 = *(int **)(v5 + 24);
    uint64_t v39 = (uint64_t (*)(uint64_t, uint64_t))((char *)v37 + *v37);
    int v38 = (void *)swift_task_alloc(v37[1]);
    v0[30] = v38;
    *int v38 = v0;
    v38[1] = sub_100216820;
    return v39(v36, v5);
  }

  else
  {
    type metadata accessor for DarwinNotificationManager(0LL);
    static DarwinNotificationManager.shared.getter();
    dispatch thunk of DarwinNotificationManager.setUp()();
    swift_release();
    uint64_t v16 = (void *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
    v0[26] = v16;
    *uint64_t v16 = v0;
    v16[1] = sub_100216618;
    return unsafeBlocking<A>(_:)(v16, sub_100216F44, 0LL, (char *)&type metadata for () + 8);
  }

uint64_t sub_100216618()
{
  return swift_task_switch(sub_10021666C, 0LL, 0LL);
}

uint64_t sub_10021666C()
{
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v12 = *(void *)(v0 + 184);
  uint64_t v13 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v11 = *(void *)(v0 + 160);
  uint64_t v14 = *(void *)(v0 + 144);
  uint64_t v4 = swift_allocObject(&unk_10094A900, 32LL, 7LL);
  *(_OWORD *)(v4 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(v0 + 128);
  *(void *)(v0 + 48) = sub_1002185C4;
  *(void *)(v0 + 56) = v4;
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = _NSConcreteStackBlock;
  *(void *)(v0 + 24) = 1107296256LL;
  *(void *)(v0 + 32) = sub_1001C31E8;
  *(void *)(v0 + 4sub_100032838(0, 7LL, 0) = &unk_10094A918;
  uint64_t v5 = _Block_copy((const void *)(v0 + 16));
  uint64_t v6 = swift_retain();
  static DispatchQoS.unspecified.getter(v6);
  *(void *)(v0 + 96) = _swiftEmptyArrayStorage;
  uint64_t v7 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v9 = sub_100090114((unint64_t *)&qword_10099FAC0, (uint64_t *)&unk_1009AB860);
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 96, v8, v9, v3, v7);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v1, v2, v5);
  _Block_release(v5);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v1, v13);
  swift_release();
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100216820()
{
  return swift_task_switch(sub_100216874, 0LL, 0LL);
}

uint64_t sub_100216874()
{
  uint64_t v1 = v0[28];
  uint64_t v2 = v0[25];
  uint64_t v3 = v0[27] + 1LL;
  Task.cancel()();
  swift_unknownObjectRelease(v1);
  swift_release();
  if (v3 == v2)
  {
    swift_bridgeObjectRelease();
    type metadata accessor for DarwinNotificationManager(0LL);
    static DarwinNotificationManager.shared.getter();
    dispatch thunk of DarwinNotificationManager.setUp()();
    swift_release();
    uint64_t v4 = (void *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
    v0[26] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100216618;
    return unsafeBlocking<A>(_:)(v4, sub_100216F44, 0LL, (char *)&type metadata for () + 8);
  }

  else
  {
    uint64_t v6 = v0[27] + 1LL;
    v0[27] = v6;
    uint64_t v7 = v0[15] + 16 * v6;
    uint64_t v8 = *(void *)(v7 + 32);
    v0[28] = v8;
    uint64_t v9 = *(void *)(v7 + 40);
    uint64_t v10 = qword_10099B1D8;
    swift_unknownObjectRetain(v8);
    if (v10 != -1) {
      swift_once(&qword_10099B1D8, sub_10021497C);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    sub_10000A720(v11, (uint64_t)qword_100A2A3A0);
    uint64_t v12 = swift_unknownObjectRetain_n(v8, 2LL);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.default.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc(12LL, -1LL);
      uint64_t v16 = swift_slowAlloc(32LL, -1LL);
      uint64_t v42 = v16;
      *(_DWORD *)uint64_t v15 = 136446210;
      uint64_t ObjectType = swift_getObjectType(v8);
      v0[13] = v8;
      uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)(v9 + 16) + 8LL))(ObjectType);
      *(void *)(v15 + 4) = sub_1003F11D4(v18, v19, &v42);
      swift_unknownObjectRelease_n(v8, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Starting service: %{public}s", (uint8_t *)v15, 0xCu);
      swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1LL, -1LL);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    else
    {

      swift_unknownObjectRelease_n(v8, 2LL);
    }

    uint64_t v21 = v0[17];
    uint64_t v20 = v0[18];
    uint64_t v22 = type metadata accessor for TaskPriority(0LL);
    uint64_t v23 = *(void *)(v22 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v20, 1LL, 1LL, v22);
    uint64_t v24 = (void *)swift_allocObject(&unk_10094A8B0, 56LL, 7LL);
    v24[2] = 0LL;
    uint64_t v25 = v24 + 2;
    v24[3] = 0LL;
    v24[4] = v8;
    void v24[5] = v9;
    void v24[6] = v21;
    LODWORD(v21) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v20, 1LL, v22);
    uint64_t v26 = swift_unknownObjectRetain(v8);
    uint64_t v27 = v0[18];
    if ((_DWORD)v21 == 1)
    {
      sub_100015794(v0[18], &qword_1009A9BF0);
      uint64_t v28 = 0LL;
      uint64_t v29 = 0LL;
      uint64_t v30 = 7168LL;
    }

    else
    {
      unsigned __int8 v31 = TaskPriority.rawValue.getter(v26);
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v27, v22);
      uint64_t v30 = v31 | 0x1C00LL;
      uint64_t v32 = *v25;
      if (*v25)
      {
        uint64_t v33 = v24[3];
        uint64_t v34 = swift_getObjectType(*v25);
        swift_unknownObjectRetain(v32);
        uint64_t v28 = dispatch thunk of Actor.unownedExecutor.getter(v34, v33);
        uint64_t v29 = v35;
        swift_unknownObjectRelease(v32);
      }

      else
      {
        uint64_t v28 = 0LL;
        uint64_t v29 = 0LL;
      }
    }

    uint64_t v36 = swift_allocObject(&unk_10094A8D8, 32LL, 7LL);
    *(void *)(v36 + swift_weakDestroy(v0 + 16) = &unk_1009A65B8;
    *(void *)(v36 + 24) = v24;
    if (v29 | v28)
    {
      uint64_t v37 = v0 + 8;
      v0[8] = 0LL;
      v0[9] = 0LL;
      v0[10] = v28;
      v0[11] = v29;
    }

    else
    {
      uint64_t v37 = 0LL;
    }

    v0[29] = swift_task_create(v30, v37, (char *)&type metadata for () + 8, &unk_1009AB890, v36);
    uint64_t v38 = swift_getObjectType(v8);
    uint64_t v39 = *(int **)(v9 + 24);
    unint64_t v41 = (uint64_t (*)(uint64_t, uint64_t))((char *)v39 + *v39);
    uint64_t v40 = (void *)swift_task_alloc(v39[1]);
    v0[30] = v40;
    *uint64_t v40 = v0;
    v40[1] = sub_100216820;
    return v41(v38, v9);
  }

uint64_t sub_100216CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[4] = a4;
  void v5[5] = a5;
  uint64_t v6 = (void *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
  v5[6] = v6;
  *uint64_t v6 = v5;
  v6[1] = sub_100216D00;
  return static Task<>.sleep(nanoseconds:)(10000000000LL);
}

uint64_t sub_100216D00()
{
  if (v0)
  {
    swift_errorRelease(v0);
    uint64_t v2 = sub_1002188B8;
  }

  else
  {
    uint64_t v2 = sub_100216D6C;
  }

  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_100216D6C()
{
  if ((static Task<>.isCancelled.getter() & 1) == 0)
  {
    if (qword_10099B1D8 != -1) {
      swift_once(&qword_10099B1D8, sub_10021497C);
    }
    uint64_t v1 = *(void *)(v0 + 32);
    uint64_t v2 = type metadata accessor for Logger(0LL);
    sub_10000A720(v2, (uint64_t)qword_100A2A3A0);
    uint64_t v3 = swift_unknownObjectRetain_n(v1, 2LL);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v7 = *(void *)(v0 + 32);
      uint64_t v6 = *(void *)(v0 + 40);
      uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v9 = swift_slowAlloc(32LL, -1LL);
      uint64_t v14 = v9;
      *(_DWORD *)uint64_t v8 = 136446210;
      uint64_t ObjectType = swift_getObjectType(v7);
      *(void *)(v0 + swift_weakDestroy(v0 + 16) = v7;
      uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)(v6 + 16) + 8LL))(ObjectType);
      *(void *)(v0 + 24) = sub_1003F11D4(v11, v12, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease_n(v7, 2LL);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Slow service startup: %{public}s!", v8, 0xCu);
      swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1LL, -1LL);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    else
    {
      swift_unknownObjectRelease_n(*(void *)(v0 + 32), 2LL);
    }
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100216F44()
{
  if (qword_10099BA48 != -1) {
    swift_once(&qword_10099BA48, sub_1007C7B1C);
  }
  return sub_1007C7D38();
}

void sub_100216F90(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009B1040);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  os_log_type_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(_BYTE *)(a1 + 56) = 1;
  if (qword_10099B1D8 != -1) {
    swift_once(&qword_10099B1D8, sub_10021497C);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_10000A720(v6, (uint64_t)qword_100A2A3A0);
  uint64_t v8 = swift_retain();
  v24[1] = v7;
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v11 = 134217984;
    swift_beginAccess(a1 + 48, v25, 0LL, 0LL);
    uint64_t v26 = *(void *)(*(void *)(a1 + 48) + 16LL);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v11 + 4, v11 + 12);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "All services started; notifying %ld continuations.", v11, 0xCu);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {

    swift_release();
  }

  unint64_t v12 = (void *)(a1 + 48);
  swift_beginAccess(a1 + 48, &v26, 1LL, 0LL);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    uint64_t v15 = v13 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v16 = *(void *)(v3 + 72);
    uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16);
    __n128 v18 = swift_bridgeObjectRetain(v13);
    do
    {
      uint64_t v19 = v17(v5, v15, v2, v18);
      CheckedContinuation.resume(returning:)(v19, v2);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v15 += v16;
      --v14;
    }

    while (v14);
    swift_bridgeObjectRelease();
  }

  void *v12 = _swiftEmptyArrayStorage;
  uint64_t v20 = swift_bridgeObjectRelease();
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "All services started; all continuations removed after notify.",
      v23,
      2u);
    swift_slowDealloc(v23, -1LL, -1LL);
  }
}

uint64_t sub_100217240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v25[0] = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v28 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v26 = *(void *)(v8 - 8);
  uint64_t v27 = v8;
  __chkstk_darwin(v8);
  os_log_type_t v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_1009B1040);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v25[1] = *(void *)(a2 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  uint64_t v15 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = (v15 + 24) & ~v15;
  unint64_t v17 = (v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v18 = swift_allocObject(&unk_10094A7E8, v17 + 8, v15 | 7);
  *(void *)(v18 + swift_weakDestroy(v0 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v18 + v16, v14, v11);
  *(void *)(v18 + v17) = v25[0];
  void aBlock[4] = sub_1002180E8;
  uint64_t v31 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10094A800;
  uint64_t v19 = _Block_copy(aBlock);
  uint64_t v20 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v20);
  uint64_t v29 = _swiftEmptyArrayStorage;
  uint64_t v21 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v22 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v23 = sub_100090114((unint64_t *)&qword_10099FAC0, (uint64_t *)&unk_1009AB860);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v22, v23, v5, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v7, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v27);
  return swift_release(v31);
}

uint64_t sub_1002174B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009B1040);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  if ((*(_BYTE *)(a1 + 56) & 1) != 0) {
    return CheckedContinuation.resume(returning:)(v6, v4);
  }
  if (qword_10099B1D8 != -1) {
    swift_once(&qword_10099B1D8, sub_10021497C);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = sub_10000A720(v10, (uint64_t)qword_100A2A3A0);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Startup in progress; appending continuation.", v14, 2u);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  uint64_t v15 = (unint64_t *)(a1 + 48);
  swift_beginAccess(a1 + 48, v21, 33LL, 0LL);
  unint64_t v16 = *(void *)(a1 + 48);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
  *(void *)(a1 + 48) = v16;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v16 = sub_1004C5B30(0, *(void *)(v16 + 16) + 1LL, 1, v16);
    *uint64_t v15 = v16;
  }

  unint64_t v19 = *(void *)(v16 + 16);
  unint64_t v18 = *(void *)(v16 + 24);
  if (v19 >= v18 >> 1)
  {
    unint64_t v16 = sub_1004C5B30(v18 > 1, v19 + 1, 1, v16);
    *uint64_t v15 = v16;
  }

  *(void *)(v16 + swift_weakDestroy(v0 + 16) = v19 + 1;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v5 + 32))( v16 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
  + *(void *)(v5 + 72) * v19,
    v8,
    v4);
  return swift_endAccess(v21);
}

uint64_t sub_1002176C4()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)type metadata accessor for DispatchPredicate(0LL);
  uint64_t v3 = *(v2 - 1);
  __chkstk_darwin(v2);
  uint64_t v5 = (void *)((char *)v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = *(void **)(v1 + 24);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, void *))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(void *, void *))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    uint64_t v8 = type metadata accessor for FMIPStateManager();
    swift_allocObject(v8, 56LL, 7LL);
    uint64_t v2 = sub_1001BF354();
    if (qword_10099B318 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_10099B318, sub_100352F58);
LABEL_3:
  sub_100025270((uint64_t)v2, 0LL, 0LL);
  uint64_t v9 = type metadata accessor for FinderStateManager(0LL);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  uint64_t v10 = swift_retain();
  uint64_t v11 = sub_1000B8DF4(v10);
  uint64_t v12 = type metadata accessor for Cryptor();
  swift_initStackObject(v12, v70);
  v63[1] = sub_1006C3E28(0x74536E6F63616542LL, 0xEE0079654B65726FLL, 0x74536E6F63616542LL, 0xEB0000000065726FLL);
  uint64_t v13 = type metadata accessor for FinderStateObserver(0LL);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v14 = swift_retain();
  v63[2] = v11;
  uint64_t v15 = sub_1003A98E8(v14);
  unint64_t v16 = (void *)(v1 + 16);
  swift_beginAccess(v1 + 16, &v64, 33LL, 0LL);
  unint64_t v17 = *(void **)(v1 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v17;
  v63[3] = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v17 = sub_1004C5B1C(0LL, v17[2] + 1LL, 1, v17);
    *unint64_t v16 = v17;
  }

  unint64_t v20 = v17[2];
  unint64_t v19 = v17[3];
  if (v20 >= v19 >> 1)
  {
    unint64_t v17 = sub_1004C5B1C((void *)(v19 > 1), v20 + 1, 1, v17);
    *unint64_t v16 = v17;
  }

  uint64_t v68 = (ValueMetadata *)v13;
  uint64_t v69 = &off_1009559B8;
  *(void *)&__int128 v67 = v15;
  void v17[2] = v20 + 1;
  sub_100012EC0(&v67, (uint64_t)&v17[5 * v20 + 4]);
  swift_endAccess(&v64);
  uint64_t v68 = &type metadata for FindMyNetworkPublishDateProviderFactory;
  uint64_t v69 = &off_10093A8D0;
  uint64_t MyNetworkPublisherService = type metadata accessor for FindMyNetworkPublisherService();
  uint64_t v22 = (void *)swift_allocObject(MyNetworkPublisherService, 184LL, 15LL);
  uint64_t v23 = sub_100037298((uint64_t)&v67, (uint64_t)&type metadata for FindMyNetworkPublishDateProviderFactory);
  __chkstk_darwin(v23);
  initializeWithCopy = (void (*)(void))v24->initializeWithCopy;
  initializeWithCopy();
  uint64_t v26 = sub_1002182B0(v22);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v67);
  swift_beginAccess(v16, &v64, 33LL, 0LL);
  uint64_t v27 = (void *)*v16;
  char v28 = swift_isUniquelyReferenced_nonNull_native(*v16);
  *unint64_t v16 = v27;
  if ((v28 & 1) == 0)
  {
    uint64_t v27 = sub_1004C5B1C(0LL, v27[2] + 1LL, 1, v27);
    *unint64_t v16 = v27;
  }

  unint64_t v30 = v27[2];
  unint64_t v29 = v27[3];
  if (v30 >= v29 >> 1)
  {
    uint64_t v27 = sub_1004C5B1C((void *)(v29 > 1), v30 + 1, 1, v27);
    *unint64_t v16 = v27;
  }

  uint64_t v68 = (ValueMetadata *)MyNetworkPublisherService;
  uint64_t v69 = &off_1009583B8;
  *(void *)&__int128 v67 = v26;
  v27[2] = v30 + 1;
  sub_100012EC0(&v67, (uint64_t)&v27[5 * v30 + 4]);
  swift_endAccess(&v64);
  uint64_t v31 = type metadata accessor for ObservationPruneSchedulerService();
  uint64_t v32 = (void *)swift_allocObject(v31, 136LL, 15LL);
  swift_defaultActor_initialize(v32);
  v32[14] = 0xD000000000000020LL;
  v32[15] = 0x800000010085A680LL;
  v32[16] = 0LL;
  swift_beginAccess(v16, &v64, 33LL, 0LL);
  uint64_t v33 = (void *)*v16;
  char v34 = swift_isUniquelyReferenced_nonNull_native(*v16);
  *unint64_t v16 = v33;
  if ((v34 & 1) == 0)
  {
    uint64_t v33 = sub_1004C5B1C(0LL, v33[2] + 1LL, 1, v33);
    *unint64_t v16 = v33;
  }

  unint64_t v36 = v33[2];
  unint64_t v35 = v33[3];
  if (v36 >= v35 >> 1)
  {
    uint64_t v33 = sub_1004C5B1C((void *)(v35 > 1), v36 + 1, 1, v33);
    *unint64_t v16 = v33;
  }

  uint64_t v68 = (ValueMetadata *)v31;
  uint64_t v69 = &off_10094F288;
  *(void *)&__int128 v67 = v32;
  v33[2] = v36 + 1;
  sub_100012EC0(&v67, (uint64_t)&v33[5 * v36 + 4]);
  swift_endAccess(&v64);
  uint64_t v68 = &type metadata for FindMyNetworkPublishDateProviderFactory;
  uint64_t v69 = &off_10093A8D0;
  uint64_t MyNetworkPublishActivityService = type metadata accessor for FindMyNetworkPublishActivityService();
  uint64_t v38 = swift_allocObject(MyNetworkPublishActivityService, 177LL, 15LL);
  uint64_t v39 = sub_100037298((uint64_t)&v67, (uint64_t)&type metadata for FindMyNetworkPublishDateProviderFactory);
  __chkstk_darwin(v39);
  initializeWithCopy();
  uint64_t v65 = &type metadata for FindMyNetworkPublishDateProviderFactory;
  uint64_t v66 = &off_10093A8D0;
  swift_defaultActor_initialize(v38);
  *(void *)(v38 + 112) = 0xD000000000000023LL;
  *(void *)(v38 + 12sub_100032838(0, 7LL, 0) = 0x800000010085A6B0LL;
  *(void *)(v38 + 168) = _swiftEmptyDictionarySingleton;
  *(_BYTE *)(v38 + 176) = 1;
  sub_100012EC0(&v64, v38 + 128);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v67);
  swift_beginAccess(v16, &v64, 33LL, 0LL);
  uint64_t v40 = (void *)*v16;
  char v41 = swift_isUniquelyReferenced_nonNull_native(*v16);
  *unint64_t v16 = v40;
  if ((v41 & 1) == 0)
  {
    uint64_t v40 = sub_1004C5B1C(0LL, v40[2] + 1LL, 1, v40);
    *unint64_t v16 = v40;
  }

  unint64_t v43 = v40[2];
  unint64_t v42 = v40[3];
  if (v43 >= v42 >> 1)
  {
    uint64_t v40 = sub_1004C5B1C((void *)(v42 > 1), v43 + 1, 1, v40);
    *unint64_t v16 = v40;
  }

  uint64_t v68 = (ValueMetadata *)MyNetworkPublishActivityService;
  uint64_t v69 = &off_1009381C8;
  *(void *)&__int128 v67 = v38;
  v40[2] = v43 + 1;
  sub_100012EC0(&v67, (uint64_t)&v40[5 * v43 + 4]);
  swift_endAccess(&v64);
  uint64_t v44 = type metadata accessor for AdvertisementCacheService(0LL);
  swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
  unint64_t v45 = sub_1000990B8();
  swift_beginAccess(v16, &v64, 33LL, 0LL);
  uint64_t v46 = (void *)*v16;
  char v47 = swift_isUniquelyReferenced_nonNull_native(*v16);
  *unint64_t v16 = v46;
  if ((v47 & 1) == 0)
  {
    uint64_t v46 = sub_1004C5B1C(0LL, v46[2] + 1LL, 1, v46);
    *unint64_t v16 = v46;
  }

  unint64_t v49 = v46[2];
  unint64_t v48 = v46[3];
  if (v49 >= v48 >> 1)
  {
    uint64_t v46 = sub_1004C5B1C((void *)(v48 > 1), v49 + 1, 1, v46);
    *unint64_t v16 = v46;
  }

  uint64_t v68 = (ValueMetadata *)v44;
  uint64_t v69 = &off_10093B9F8;
  *(void *)&__int128 v67 = v45;
  void v46[2] = v49 + 1;
  sub_100012EC0(&v67, (uint64_t)&v46[5 * v49 + 4]);
  swift_endAccess(&v64);
  uint64_t v50 = type metadata accessor for SchedulerService(0LL);
  swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
  uint64_t v51 = sub_1003AE774();
  swift_beginAccess(v16, &v64, 33LL, 0LL);
  uint64_t v52 = (void *)*v16;
  char v53 = swift_isUniquelyReferenced_nonNull_native(*v16);
  *unint64_t v16 = v52;
  if ((v53 & 1) == 0)
  {
    uint64_t v52 = sub_1004C5B1C(0LL, v52[2] + 1LL, 1, v52);
    *unint64_t v16 = v52;
  }

  unint64_t v55 = v52[2];
  unint64_t v54 = v52[3];
  if (v55 >= v54 >> 1)
  {
    uint64_t v52 = sub_1004C5B1C((void *)(v54 > 1), v55 + 1, 1, v52);
    *unint64_t v16 = v52;
  }

  uint64_t v68 = (ValueMetadata *)v50;
  uint64_t v69 = &off_100955C28;
  *(void *)&__int128 v67 = v51;
  v52[2] = v55 + 1;
  sub_100012EC0(&v67, (uint64_t)&v52[5 * v55 + 4]);
  swift_endAccess(&v64);
  uint64_t v56 = type metadata accessor for FileAttributionService();
  uint64_t v57 = swift_allocObject(v56, 128LL, 15LL);
  swift_defaultActor_initialize(v57);
  *(void *)(v57 + 112) = 0xD000000000000016LL;
  *(void *)(v57 + 12sub_100032838(0, 7LL, 0) = 0x800000010085A6E0LL;
  swift_beginAccess(v16, &v64, 33LL, 0LL);
  uint64_t v58 = (void *)*v16;
  char v59 = swift_isUniquelyReferenced_nonNull_native(*v16);
  *unint64_t v16 = v58;
  if ((v59 & 1) == 0)
  {
    uint64_t v58 = sub_1004C5B1C(0LL, v58[2] + 1LL, 1, v58);
    *unint64_t v16 = v58;
  }

  unint64_t v61 = v58[2];
  unint64_t v60 = v58[3];
  if (v61 >= v60 >> 1)
  {
    uint64_t v58 = sub_1004C5B1C((void *)(v60 > 1), v61 + 1, 1, v58);
    *unint64_t v16 = v58;
  }

  uint64_t v68 = (ValueMetadata *)v56;
  uint64_t v69 = &off_10096C678;
  *(void *)&__int128 v67 = v57;
  v58[2] = v61 + 1;
  sub_100012EC0(&v67, (uint64_t)&v58[5 * v61 + 4]);
  swift_endAccess(&v64);
  swift_release();
  swift_release();
  swift_release();
  *unint64_t v16 = _swiftEmptyArrayStorage;
  return swift_bridgeObjectRelease();
}

uint64_t sub_100217FF8()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_release(*(void *)(v0 + 64));
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

uint64_t type metadata accessor for SearchPartyDaemon()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd17SearchPartyDaemon);
}

uint64_t sub_100218064()
{
  uint64_t v1 = sub_100004AEC(&qword_1009B1040);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1002180E8()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(sub_100004AEC(&qword_1009B1040) - 8) + 80LL);
  return sub_1002174B8(*(void *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_100218130(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_100032838(0, 7LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100218140(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_100218148()
{
  if (qword_10099B858 != -1) {
    swift_once(&qword_10099B858, sub_1006BF8AC);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2B248);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "This is the first run since reboot", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  id v5 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  UUID.uuidString.getter(v5);
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v7 = String._bridgeToObjectiveC()();
  [v5 setObject:v6 forKey:v7];

  sub_1002145C4();
}

void *sub_1002182B0(void *a1)
{
  uint64_t v9 = &type metadata for FindMyNetworkPublishDateProviderFactory;
  uint64_t v10 = &off_10093A8D0;
  swift_defaultActor_initialize(a1);
  a1[14] = 0xD00000000000001DLL;
  a1[15] = 0x80000001008509B0LL;
  uint64_t v2 = type metadata accessor for DeviceIdentityUtility(0LL);
  uint64_t v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  swift_defaultActor_initialize(v3);
  uint64_t v4 = v3 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
  uint64_t v5 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0LL;
  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v3 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 4;
  a1[16] = v3;
  uint64_t v6 = sub_100004AEC(&qword_1009A6590);
  a1[17] = AsyncKeyedThrottle.__allocating_init(throttleInterval:)(v6, 10.0);
  sub_100012EC0(&v8, (uint64_t)(a1 + 18));
  return a1;
}

uint64_t sub_1002183BC(uint64_t a1)
{
  return sub_100214D9C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1002183D4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100218400()
{
  return sub_100214FA0(v0[2], v0[3], v0[4]);
}

uint64_t sub_10021840C()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100218448(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc(dword_1009A65A4);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_100015D58;
  return sub_10021616C(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1002184D4()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100218500()
{
  uint64_t v2 = swift_task_alloc(dword_1009A65B4);
  __int128 v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100015D58;
  *(_OWORD *)(v2 + 32) = v3;
  uint64_t v4 = (uint64_t *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
  *(void *)(v2 + 48) = v4;
  *uint64_t v4 = v2;
  v4[1] = (uint64_t)sub_100216D00;
  return static Task<>.sleep(nanoseconds:)(10000000000LL);
}

uint64_t sub_10021857C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1002185A0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1002185C4()
{
}

uint64_t sub_1002185CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A6598);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100218614()
{
  uint64_t v1 = type metadata accessor for SystemVersionNumber(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  unint64_t v8 = (v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);

  return swift_deallocObject(v0, v8 + 8, v6);
}

uint64_t sub_1002186C4(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for SystemVersionNumber(0LL) - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 40) & ~v5;
  uint64_t v7 = *(void *)(v4 + 64);
  uint64_t v8 = (v7 + v5 + v6) & ~v5;
  uint64_t v9 = v1[2];
  uint64_t v10 = v1[3];
  uint64_t v11 = v1[4];
  uint64_t v12 = (uint64_t)v1 + v6;
  uint64_t v13 = (uint64_t)v1 + v8;
  uint64_t v14 = *(void *)((char *)v1 + ((v7 + v8 + 7) & 0xFFFFFFFFFFFFF8LL));
  uint64_t v15 = (void *)swift_task_alloc(dword_1009A514C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v15;
  *uint64_t v15 = v2;
  v15[1] = sub_100015D58;
  return sub_1001C1070(a1, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_100218790(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_1009A5154);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000159BC;
  return sub_1001C129C(a1, v4, v5, v7, v6);
}

uint64_t sub_10021880C()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100218840(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_1009A515C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100015D58;
  return sub_1001C0EA0(a1, v4, v5, v7, v6);
}

void sub_1002188CC(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a1;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(a3 + 56);
  uint64_t v23 = a3 + 56;
  uint64_t v13 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v24 = (unint64_t)(v13 + 63) >> 6;
  __n128 v16 = swift_bridgeObjectRetain(a3);
  int64_t v17 = 0LL;
  if (!v15) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v18 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v6 + 16))( v11,  *(void *)(a3 + 48) + *(void *)(v6 + 72) * i,  v5,  v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v11, 0LL, 1LL, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    v25(v8);
    if (v3)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      goto LABEL_28;
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    if (v15) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v17++, 1LL)) {
      break;
    }
    if (v17 >= v24) {
      goto LABEL_27;
    }
    unint64_t v21 = *(void *)(v23 + 8 * v17);
    if (!v21)
    {
      int64_t v22 = v17 + 1;
      if (v17 + 1 >= v24) {
        goto LABEL_27;
      }
      unint64_t v21 = *(void *)(v23 + 8 * v22);
      if (v21) {
        goto LABEL_16;
      }
      int64_t v22 = v17 + 2;
      if (v17 + 2 >= v24) {
        goto LABEL_27;
      }
      unint64_t v21 = *(void *)(v23 + 8 * v22);
      if (v21) {
        goto LABEL_16;
      }
      int64_t v22 = v17 + 3;
      if (v17 + 3 >= v24) {
        goto LABEL_27;
      }
      unint64_t v21 = *(void *)(v23 + 8 * v22);
      if (v21)
      {
LABEL_16:
        int64_t v17 = v22;
        goto LABEL_17;
      }

      int64_t v22 = v17 + 4;
      if (v17 + 4 < v24)
      {
        unint64_t v21 = *(void *)(v23 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            int64_t v17 = v22 + 1;
            if (__OFADD__(v22, 1LL)) {
              goto LABEL_30;
            }
            if (v17 >= v24) {
              goto LABEL_27;
            }
            unint64_t v21 = *(void *)(v23 + 8 * v17);
            ++v22;
            if (v21) {
              goto LABEL_17;
            }
          }
        }

        goto LABEL_16;
      }

void sub_100218B90(void (*a1)(char *, __n128), uint64_t a2, uint64_t a3)
{
  char v28 = a1;
  uint64_t v27 = sub_100004AEC(&qword_1009A6610);
  uint64_t v5 = __chkstk_darwin(v27);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v24 - v8;
  uint64_t v10 = *(void *)(a3 + 64);
  uint64_t v25 = a3 + 64;
  uint64_t v11 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v26 = (unint64_t)(v11 + 63) >> 6;
  swift_bridgeObjectRetain(a3);
  int64_t v14 = 0LL;
  while (v13)
  {
    unint64_t v15 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    unint64_t v16 = v15 | (v14 << 6);
LABEL_5:
    uint64_t v17 = *(void *)(a3 + 48);
    uint64_t v18 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v18 - 8) + 16LL))( v9,  v17 + *(void *)(*(void *)(v18 - 8) + 72LL) * v16,  v18);
    uint64_t v19 = *(void *)(*(void *)(a3 + 56) + 8 * v16);
    *(void *)&v9[*(int *)(v27 + 48)] = v19;
    sub_100015750((uint64_t)v9, (uint64_t)v7, &qword_1009A6610);
    __n128 v20 = swift_bridgeObjectRetain(v19);
    v28(v7, v20);
    sub_100015794((uint64_t)v7, &qword_1009A6610);
    if (v3) {
      goto LABEL_24;
    }
  }

  if (__OFADD__(v14++, 1LL))
  {
    __break(1u);
    goto LABEL_26;
  }

  if (v14 >= v26) {
    goto LABEL_24;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v14);
  if (v22)
  {
LABEL_19:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v16 = __clz(__rbit64(v22)) + (v14 << 6);
    goto LABEL_5;
  }

  int64_t v23 = v14 + 1;
  if (v14 + 1 >= v26) {
    goto LABEL_24;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22) {
    goto LABEL_18;
  }
  int64_t v23 = v14 + 2;
  if (v14 + 2 >= v26) {
    goto LABEL_24;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22) {
    goto LABEL_18;
  }
  int64_t v23 = v14 + 3;
  if (v14 + 3 >= v26) {
    goto LABEL_24;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22) {
    goto LABEL_18;
  }
  int64_t v23 = v14 + 4;
  if (v14 + 4 >= v26)
  {
LABEL_24:
    swift_release();
    return;
  }

  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
LABEL_18:
    int64_t v14 = v23;
    goto LABEL_19;
  }

  while (1)
  {
    int64_t v14 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v14 >= v26) {
      goto LABEL_24;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v14);
    ++v23;
    if (v22) {
      goto LABEL_19;
    }
  }

uint64_t sub_100218E00(uint64_t a1)
{
  uint64_t v33 = type metadata accessor for RawSearchResult(0LL);
  uint64_t v2 = *(void *)(v33 - 8);
  uint64_t v3 = __chkstk_darwin(v33);
  uint64_t v30 = (uint64_t)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v27 - v6;
  uint64_t result = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v27 - v9;
  int64_t v11 = 0LL;
  uint64_t v12 = a1;
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v31 = a1 + 56;
  uint64_t v14 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = _swiftEmptyArrayStorage;
  char v34 = _swiftEmptyArrayStorage;
  unint64_t v17 = v15 & v13;
  int64_t v32 = (unint64_t)(v14 + 63) >> 6;
  if ((v15 & v13) == 0) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v18 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (unint64_t i = v18 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v11 << 6))
  {
    uint64_t v20 = *(void *)(v2 + 72);
    sub_10001DC4C(*(void *)(v12 + 48) + v20 * i, (uint64_t)v7, type metadata accessor for RawSearchResult);
    sub_10002218C((uint64_t)v7, (uint64_t)v10, type metadata accessor for RawSearchResult);
    if (v10[*(int *)(v33 + 36)] == 15)
    {
      sub_10002218C((uint64_t)v10, v30, type metadata accessor for RawSearchResult);
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0) {
        sub_100032FC8(0, v16[2] + 1LL, 1);
      }
      unint64_t v16 = v34;
      unint64_t v25 = v34[2];
      unint64_t v24 = v34[3];
      unint64_t v26 = v25 + 1;
      if (v25 >= v24 >> 1)
      {
        unint64_t v28 = v34[2];
        unint64_t v29 = v25 + 1;
        sub_100032FC8(v24 > 1, v25 + 1, 1);
        unint64_t v25 = v28;
        unint64_t v26 = v29;
        unint64_t v16 = v34;
      }

      _BYTE v16[2] = v26;
      uint64_t result = sub_10002218C( v30,  (uint64_t)v16 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))
               + v25 * v20,
                 type metadata accessor for RawSearchResult);
      if (v17) {
        goto LABEL_4;
      }
    }

    else
    {
      uint64_t result = sub_100018C68((uint64_t)v10, type metadata accessor for RawSearchResult);
      if (v17) {
        goto LABEL_4;
      }
    }

uint64_t sub_1002190F8@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v32 = a1;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v33 = *(void *)(v7 - 8);
  uint64_t v34 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AB0();
  uint64_t v20 = (*(uint64_t (**)(char *, void, uint64_t))(v17 + 104))( v19,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v16);
  static DispatchQoS.unspecified.getter(v20);
  uint64_t v37 = _swiftEmptyArrayStorage;
  uint64_t v21 = sub_100007864( (unint64_t *)&qword_10099BAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v22 = sub_100004AEC((uint64_t *)&unk_1009A0CD0);
  unint64_t v23 = sub_100004B2C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v22, v23, v10, v21);
  *((void *)a5 + 2) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002DLL,  0x800000010085A930LL,  v15,  v12,  v19,  0LL);
  unint64_t v24 = (int *)type metadata accessor for LocationFetcher(0LL);
  uint64_t v25 = v24[10];
  uint64_t v26 = type metadata accessor for DeviceIdentityUtility(0LL);
  uint64_t v27 = swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  swift_defaultActor_initialize();
  uint64_t v28 = v27 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
  uint64_t v29 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL))(v28, 1LL, 1LL, v29);
  *(void *)(v27 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0LL;
  *(void *)(v27 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v27 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 0;
  *(void *)&a5[v25] = v27;
  *(void *)a5 = v32;
  sub_100013044((uint64_t)a2, (uint64_t)(a5 + 24));
  sub_100219450(a2, (uint64_t)v9);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
  uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v33 + 32))(&a5[v24[8]], v9, v34);
  uint64_t v31 = v36;
  *((void *)a5 + 1) = v35;
  *(void *)&a5[v24[9]] = v31;
  return result;
}

uint64_t sub_1002193C0(uint64_t a1)
{
  return sub_100189D34(a1, qword_100A2A3C8, 0xD000000000000013LL, 0x800000010085A9A0LL);
}

uint64_t sub_1002193E4(uint64_t a1)
{
  return sub_100189D34(a1, qword_100A2A3E0, 0xD000000000000012LL, 0x800000010085A910LL);
}

uint64_t sub_100219408(uint64_t a1)
{
  return sub_100189D34(a1, qword_100A2A3F8, 0xD00000000000001DLL, 0x800000010085A980LL);
}

uint64_t sub_10021942C(uint64_t a1)
{
  return sub_100189D34(a1, qword_100A2A410, 0xD00000000000001CLL, 0x800000010085A960LL);
}

uint64_t sub_100219450@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100012ED8(a1, v4);
  LOBYTE(v4) = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100012ED8(a1, v6);
  char v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 40))(v6, v7);
  if ((v4 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      if (qword_10099B200 != -1) {
        swift_once(&qword_10099B200, sub_10021942C);
      }
      uint64_t v9 = type metadata accessor for Logger(0LL);
      uint64_t v10 = v9;
      uint64_t v11 = qword_100A2A410;
    }

    else
    {
      if (qword_10099B1F0 != -1) {
        swift_once(&qword_10099B1F0, sub_1002193E4);
      }
      uint64_t v9 = type metadata accessor for Logger(0LL);
      uint64_t v10 = v9;
      uint64_t v11 = qword_100A2A3E0;
    }
  }

  else if ((v8 & 1) != 0)
  {
    if (qword_10099B1F8 != -1) {
      swift_once(&qword_10099B1F8, sub_100219408);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    uint64_t v10 = v9;
    uint64_t v11 = qword_100A2A3F8;
  }

  else
  {
    if (qword_10099B1E8 != -1) {
      swift_once(&qword_10099B1E8, sub_1002193C0);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    uint64_t v10 = v9;
    uint64_t v11 = qword_100A2A3C8;
  }

  uint64_t v12 = sub_10000A720(v9, (uint64_t)v11);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(a2, v12, v10);
}

uint64_t sub_1002195E8( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v179 = a8;
  uint64_t v189 = a7;
  uint64_t v192 = a6;
  LODWORD(v19sub_100032838(0, 7LL, 0) = a3;
  uint64_t v188 = type metadata accessor for LocationFetcher(0LL);
  __chkstk_darwin(v188);
  uint64_t v14 = (char *)&v173 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v191 = type metadata accessor for UUID(0LL);
  uint64_t v15 = *(void *)(v191 - 8);
  uint64_t v16 = __chkstk_darwin(v191);
  uint64_t v175 = (char *)&v173 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v174 = (char *)&v173 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v181 = (char *)&v173 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v186 = (char *)&v173 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v182 = (char *)&v173 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v173 - v27;
  uint64_t v29 = __chkstk_darwin(v26);
  uint64_t v183 = (char *)&v173 - v30;
  __chkstk_darwin(v29);
  uint64_t v180 = (char *)&v173 - v31;
  uint64_t v32 = type metadata accessor for Logger(0LL);
  uint64_t v193 = *(void *)(v32 - 8);
  uint64_t v194 = v32;
  uint64_t v33 = __chkstk_darwin(v32);
  uint64_t v176 = (char *)&v173 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v37 = (char *)&v173 - v36;
  __chkstk_darwin(v35);
  uint64_t v184 = (char *)&v173 - v38;
  uint64_t v39 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v39);
  char v41 = (char *)&v173 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = type metadata accessor for Date(0LL);
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v196 = v42;
  uint64_t v197 = v43;
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v185 = (char *)&v173 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v178 = (uint64_t)&v173 - v47;
  uint64_t v48 = __chkstk_darwin(v46);
  uint64_t v187 = (char *)&v173 - v49;
  __chkstk_darwin(v48);
  uint64_t v195 = (char *)&v173 - v50;
  uint64_t v51 = (char *)(a4 + 16);
  uint64_t v52 = (uint64_t *)(a5 + 16);
  swift_beginAccess(a4 + 16, &v202, 32LL, 0LL);
  uint64_t v53 = *(void *)(a4 + 16);
  if (*(void *)(v53 + 16) && (unint64_t v54 = sub_10030D124(a1), (v55 & 1) != 0))
  {
    uint64_t v56 = *(void **)(*(void *)(v53 + 56) + 8 * v54);
    swift_endAccess(&v202);
    uint64_t v204 = v56;
    swift_bridgeObjectRetain(v56);
  }

  else
  {
    swift_endAccess(&v202);
    uint64_t v56 = &_swiftEmptySetSingleton;
    uint64_t v204 = &_swiftEmptySetSingleton;
  }

  uint64_t v177 = v56[2];
  swift_bridgeObjectRetain(a2);
  sub_100673DE4(v57);
  swift_beginAccess(v52, &v202, 32LL, 0LL);
  uint64_t v58 = *v52;
  if (*(void *)(*v52 + 16))
  {
    unint64_t v59 = sub_10030D124(a1);
    uint64_t v61 = v196;
    uint64_t v60 = v197;
    if ((v62 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v197 + 16))( v41,  *(void *)(v58 + 56) + *(void *)(v197 + 72) * v59,  v196);
      uint64_t v63 = 0LL;
    }

    else
    {
      uint64_t v63 = 1LL;
    }
  }

  else
  {
    uint64_t v63 = 1LL;
    uint64_t v61 = v196;
    uint64_t v60 = v197;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v60 + 56))(v41, v63, 1LL, v61);
  swift_endAccess(&v202);
  uint64_t v64 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v60 + 48))(v41, 1LL, v61);
  uint64_t v65 = v195;
  if ((_DWORD)v64 == 1)
  {
    static Date.distantPast.getter(v64);
    sub_100015794((uint64_t)v41, (uint64_t *)&unk_10099D720);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v195, v41, v61);
  }

  uint64_t v66 = (uint64_t)v204;
  if (!v204[2] && (v190 & 1) != 0)
  {
    uint64_t v67 = v193;
    uint64_t v68 = v15;
    uint64_t v69 = v184;
    uint64_t v70 = v194;
    (*(void (**)(char *, uint64_t, uint64_t))(v193 + 16))(v184, v192 + *(int *)(v188 + 32), v194);
    uint64_t v192 = v68;
    uint64_t v71 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 16);
    __n128 v72 = v180;
    uint64_t v73 = v191;
    v71(v180, a1, v191);
    (*(void (**)(char *, char *, uint64_t))(v197 + 16))(v187, v65, v61);
    uint64_t v74 = (uint64_t)v183;
    v71(v183, a1, v73);
    uint64_t v75 = v189;
    uint64_t v76 = swift_retain_n(v189, 2LL);
    uint64_t v77 = (os_log_s *)Logger.logObject.getter(v76);
    int v78 = static os_log_type_t.default.getter(v77);
    if (os_log_type_enabled(v77, (os_log_type_t)v78))
    {
      LODWORD(v188) = v78;
      os_log_t v190 = v77;
      uint64_t v79 = swift_slowAlloc(42LL, -1LL);
      uint64_t v186 = (char *)swift_slowAlloc(32LL, -1LL);
      v201[0] = (uint64_t)v186;
      *(_DWORD *)uint64_t v79 = 141558787;
      uint64_t v202 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203, v79 + 4, v79 + 12);
      *(_WORD *)(v79 + 12) = 2081;
      uint64_t v80 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v81 = dispatch thunk of CustomStringConvertible.description.getter(v73, v80);
      uint64_t v202 = sub_1003F11D4(v81, v82, v201);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203, v79 + 14, v79 + 22);
      swift_bridgeObjectRelease();
      uint64_t v83 = *(void (**)(char *, uint64_t))(v192 + 8);
      v83(v72, v73);
      *(_WORD *)(v79 + 22) = 2048;
      uint64_t v84 = v178;
      static Date.trustedNow.getter(v178);
      os_log_type_t v85 = v187;
      double v86 = Date.timeIntervalSince(_:)(v84);
      unint64_t v87 = *(void (**)(uint64_t, uint64_t))(v197 + 8);
      v87(v84, v196);
      uint64_t v202 = fabs(v86);
      uint64_t v88 = v196;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203, v79 + 24, v79 + 32);
      v87((uint64_t)v85, v88);
      *(_WORD *)(v79 + 32) = 2048;
      swift_beginAccess(v75 + 16, &v202, 32LL, 0LL);
      uint64_t v89 = *(void *)(v75 + 16);
      if (*(void *)(v89 + 16))
      {
        uint64_t v90 = (uint64_t)v183;
        unint64_t v91 = sub_10030D124((uint64_t)v183);
        uint64_t v92 = v184;
        if ((v93 & 1) != 0) {
          uint64_t v94 = *(void *)(*(void *)(v89 + 56) + 8 * v91);
        }
        else {
          uint64_t v94 = 0LL;
        }
      }

      else
      {
        uint64_t v94 = 0LL;
        uint64_t v92 = v184;
        uint64_t v90 = (uint64_t)v183;
      }

      swift_endAccess(&v202);
      swift_release();
      v83((char *)v90, v191);
      uint64_t v202 = v94;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203, v79 + 34, v79 + 42);
      swift_release();
      os_log_t v169 = v190;
      _os_log_impl( (void *)&_mh_execute_header,  v190,  (os_log_type_t)v188,  "No location found for beacon %{private,mask.hash}s after %f seconds, %ld round trip(s).",  (uint8_t *)v79,  0x2Au);
      uint64_t v170 = v186;
      swift_arrayDestroy(v186, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v170, -1LL, -1LL);
      swift_slowDealloc(v79, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v193 + 8))(v92, v194);
      v87((uint64_t)v195, v88);
    }

    else
    {
      swift_release();
      uint64_t v99 = *(void (**)(uint64_t, uint64_t))(v192 + 8);
      v99(v74, v73);
      swift_release();

      uint64_t v100 = *(void (**)(char *, uint64_t))(v197 + 8);
      v100(v187, v61);
      v99((uint64_t)v72, v73);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v69, v70);
      v100(v195, v61);
    }

    return swift_bridgeObjectRelease();
  }

  uint64_t v184 = v51;
  uint64_t v187 = v37;
  uint64_t v95 = (uint64_t *)(v179 + 16);
  sub_10001DC4C(v192, (uint64_t)v14, type metadata accessor for LocationFetcher);
  uint64_t v96 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v97 = v191;
  v96(v28, a1, v191);
  if ((v190 & 1) != 0)
  {
    uint64_t v98 = *(void (**)(char *, uint64_t))(v15 + 8);
    v98(v28, v97);
    sub_100018C68((uint64_t)v14, type metadata accessor for LocationFetcher);
  }

  else
  {
    swift_beginAccess(v95, &v202, 0LL, 0LL);
    uint64_t v101 = *v95;
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v101);
    char v102 = sub_10021A81C(v66, (uint64_t)v28, v101);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v98 = *(void (**)(char *, uint64_t))(v15 + 8);
    v98(v28, v97);
    sub_100018C68((uint64_t)v14, type metadata accessor for LocationFetcher);
    if ((v102 & 1) == 0)
    {
      uint64_t v151 = (uint64_t)v174;
      v96(v174, a1, v97);
      uint64_t v152 = (uint64_t)v204;
      uint64_t v153 = v184;
      swift_beginAccess(v184, v201, 33LL, 0LL);
      swift_bridgeObjectRetain(v152);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)v153);
      uint64_t v198 = *(void *)v153;
      *(void *)uint64_t v153 = 0x8000000000000000LL;
      sub_10005DD30(v152, v151, isUniquelyReferenced_nonNull_native);
      *(void *)uint64_t v153 = v198;
      swift_bridgeObjectRelease();
      v98((char *)v151, v97);
      swift_endAccess(v201);
      uint64_t v155 = v193;
      uint64_t v156 = v176;
      uint64_t v157 = v194;
      (*(void (**)(char *, uint64_t, uint64_t))(v193 + 16))(v176, v192 + *(int *)(v188 + 32), v194);
      uint64_t v158 = v175;
      uint64_t v159 = ((uint64_t (*)(char *, uint64_t, uint64_t))v96)(v175, a1, v97);
      uint64_t v160 = (os_log_s *)Logger.logObject.getter(v159);
      uint64_t v161 = v98;
      os_log_type_t v162 = static os_log_type_t.default.getter(v160);
      if (os_log_type_enabled(v160, v162))
      {
        uint64_t v163 = v158;
        uint64_t v164 = swift_slowAlloc(32LL, -1LL);
        uint64_t v165 = swift_slowAlloc(32LL, -1LL);
        uint64_t v198 = v165;
        *(_DWORD *)uint64_t v164 = 134218499;
        swift_beginAccess(&v204, v201, 0LL, 0LL);
        uint64_t v200 = v204[2] - v177;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, v201, v164 + 4, v164 + 12);
        *(_WORD *)(v164 + 12) = 2160;
        uint64_t v200 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, v201, v164 + 14, v164 + 22);
        *(_WORD *)(v164 + 22) = 2081;
        uint64_t v166 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v167 = dispatch thunk of CustomStringConvertible.description.getter(v97, v166);
        uint64_t v200 = sub_1003F11D4(v167, v168, &v198);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, v201, v164 + 24, v164 + 32);
        swift_bridgeObjectRelease();
        v161(v163, v97);
        _os_log_impl( (void *)&_mh_execute_header,  v160,  v162,  "Appended %ld location results for beacon %{private,mask.hash}s.",  (uint8_t *)v164,  0x20u);
        swift_arrayDestroy(v165, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v165, -1LL, -1LL);
        swift_slowDealloc(v164, -1LL, -1LL);

        (*(void (**)(char *, uint64_t))(v193 + 8))(v176, v194);
      }

      else
      {

        v161(v158, v97);
        (*(void (**)(char *, uint64_t))(v155 + 8))(v156, v157);
      }

      (*(void (**)(char *, uint64_t))(v197 + 8))(v195, v196);
      return swift_bridgeObjectRelease();
    }
  }

  v96(v182, a1, v97);
  swift_beginAccess(v95, v201, 33LL, 0LL);
  unint64_t v103 = *v95;
  char v104 = swift_isUniquelyReferenced_nonNull_native(*v95);
  *uint64_t v95 = v103;
  uint64_t v105 = v186;
  os_log_t v190 = (os_log_t)v98;
  if ((v104 & 1) == 0)
  {
    unint64_t v103 = sub_1004C44BC(0, *(void *)(v103 + 16) + 1LL, 1, v103);
    *uint64_t v95 = v103;
  }

  uint64_t v106 = (void *)(a9 + 16);
  unint64_t v108 = *(void *)(v103 + 16);
  unint64_t v107 = *(void *)(v103 + 24);
  if (v108 >= v107 >> 1)
  {
    unint64_t v103 = sub_1004C44BC(v107 > 1, v108 + 1, 1, v103);
    *uint64_t v95 = v103;
  }

  *(void *)(v103 + swift_weakDestroy(v0 + 16) = v108 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))( v103 + ((*(unsigned __int8 *)(v15 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))
  + *(void *)(v15 + 72) * v108,
    v182,
    v97);
  swift_endAccess(v201);
  uint64_t v109 = sub_100004AEC(&qword_1009A65F8);
  uint64_t v110 = sub_100004AEC(&qword_1009A6600);
  uint64_t v111 = *(void *)(v110 - 8);
  uint64_t v112 = *(void *)(v111 + 72);
  uint64_t v113 = *(unsigned __int8 *)(v111 + 80);
  uint64_t v114 = (v113 + 32) & ~v113;
  uint64_t v115 = swift_allocObject(v109, v114 + v112, v113 | 7);
  *(_OWORD *)(v115 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v116 = v115 + v114;
  uint64_t v117 = *(int *)(v110 + 48);
  v96((char *)v116, a1, v97);
  unint64_t v118 = v204;
  *(void *)(v116 + v117) = v204;
  swift_bridgeObjectRetain(v118);
  unint64_t v119 = sub_100413A0C(v115);
  uint64_t v120 = v192;
  uint64_t v121 = sub_10021C93C(v119);
  swift_bridgeObjectRelease();
  swift_beginAccess(v106, v201, 33LL, 0LL);
  char v122 = swift_isUniquelyReferenced_nonNull_native(*v106);
  uint64_t v198 = *v106;
  *uint64_t v106 = 0x8000000000000000LL;
  sub_10023EC14(v121, (uint64_t)sub_10023EB74, 0LL, v122, (uint64_t)&v198);
  *uint64_t v106 = v198;
  swift_bridgeObjectRelease();
  swift_endAccess(v201);
  swift_beginAccess(v184, v201, 33LL, 0LL);
  sub_1000485C8(a1);
  swift_endAccess(v201);
  swift_bridgeObjectRelease();
  uint64_t v124 = v193;
  uint64_t v123 = v194;
  uint64_t v125 = v187;
  (*(void (**)(char *, uint64_t, uint64_t))(v193 + 16))(v187, v120 + *(int *)(v188 + 32), v194);
  v96(v105, a1, v97);
  uint64_t v126 = v196;
  uint64_t v127 = v195;
  (*(void (**)(char *, char *, uint64_t))(v197 + 16))(v185, v195, v196);
  uint64_t v128 = (uint64_t)v181;
  v96(v181, a1, v97);
  uint64_t v129 = swift_retain_n(v189, 2LL);
  uint64_t v130 = (void *)Logger.logObject.getter(v129);
  int v131 = static os_log_type_t.default.getter(v130);
  if (os_log_type_enabled((os_log_t)v130, (os_log_type_t)v131))
  {
    LODWORD(v192) = v131;
    uint64_t v188 = (uint64_t)v130;
    uint64_t v132 = swift_slowAlloc(52LL, -1LL);
    uint64_t v133 = swift_slowAlloc(32LL, -1LL);
    uint64_t v200 = v133;
    *(_DWORD *)uint64_t v132 = 134219011;
    swift_beginAccess(&v204, v201, 0LL, 0LL);
    uint64_t v198 = v204[2] - v177;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v198, v199, v132 + 4, v132 + 12);
    *(_WORD *)(v132 + 12) = 2160;
    uint64_t v198 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v198, v199, v132 + 14, v132 + 22);
    *(_WORD *)(v132 + 22) = 2081;
    uint64_t v134 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v135 = v186;
    uint64_t v136 = dispatch thunk of CustomStringConvertible.description.getter(v97, v134);
    uint64_t v198 = sub_1003F11D4(v136, v137, &v200);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v198, v199, v132 + 24, v132 + 32);
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v190)(v135, v97);
    *(_WORD *)(v132 + 32) = 2048;
    uint64_t v138 = v178;
    static Date.trustedNow.getter(v178);
    uint64_t v139 = v185;
    double v140 = Date.timeIntervalSince(_:)(v185);
    uint64_t v141 = *(void (**)(uint64_t, uint64_t))(v197 + 8);
    v141(v138, v126);
    uint64_t v198 = fabs(v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v198, v199, v132 + 34, v132 + 42);
    v141((uint64_t)v139, v126);
    *(_WORD *)(v132 + 42) = 2048;
    uint64_t v142 = v189;
    swift_beginAccess(v189 + 16, &v198, 32LL, 0LL);
    uint64_t v143 = *(void *)(v142 + 16);
    if (*(void *)(v143 + 16))
    {
      uint64_t v144 = (uint64_t)v181;
      unint64_t v145 = sub_10030D124((uint64_t)v181);
      uint64_t v146 = (os_log_s *)v188;
      if ((v147 & 1) != 0) {
        uint64_t v148 = *(void *)(*(void *)(v143 + 56) + 8 * v145);
      }
      else {
        uint64_t v148 = 0LL;
      }
      os_log_t v171 = v190;
    }

    else
    {
      uint64_t v148 = 0LL;
      uint64_t v144 = (uint64_t)v181;
      os_log_t v171 = v190;
      uint64_t v146 = (os_log_s *)v188;
    }

    swift_endAccess(&v198);
    swift_release();
    ((void (*)(uint64_t, uint64_t))v171)(v144, v191);
    uint64_t v198 = v148;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v198, v199, v132 + 44, v132 + 52);
    swift_release();
    _os_log_impl( (void *)&_mh_execute_header,  v146,  (os_log_type_t)v192,  "Terminated fetch with %ld results and cleared beacon %{private,mask.hash}s after %f seconds, %ld round trip(s).",  (uint8_t *)v132,  0x34u);
    swift_arrayDestroy(v133, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v133, -1LL, -1LL);
    swift_slowDealloc(v132, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v193 + 8))(v187, v194);
    v141((uint64_t)v195, v196);
  }

  else
  {
    swift_release();
    os_log_t v149 = v190;
    ((void (*)(uint64_t, uint64_t))v190)(v128, v97);
    swift_release();

    uint64_t v150 = *(void (**)(char *, uint64_t))(v197 + 8);
    v150(v185, v126);
    ((void (*)(char *, uint64_t))v149)(v186, v97);
    (*(void (**)(char *, uint64_t))(v124 + 8))(v125, v123);
    v150(v127, v126);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10021A81C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v278 = a3;
  uint64_t v299 = a2;
  uint64_t v301 = type metadata accessor for Logger(0LL);
  v296 = *(void **)(v301 - 8);
  uint64_t v6 = __chkstk_darwin(v301);
  v291 = (uint64_t *)((char *)&v268 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = __chkstk_darwin(v6);
  v290 = (char *)&v268 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  v289 = (char *)&v268 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v268 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v276 = (char *)&v268 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v286 = (char *)&v268 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v287 = (char *)&v268 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v275 = (char *)&v268 - v22;
  __chkstk_darwin(v21);
  *(void *)&__int128 v279 = (char *)&v268 - v23;
  uint64_t v24 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v24);
  v282 = (char *)&v268 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v300 = type metadata accessor for UUID(0LL);
  uint64_t v297 = *(void **)(v300 - 8);
  uint64_t v26 = __chkstk_darwin(v300);
  v288 = (char *)&v268 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v30 = (uint64_t (*)(uint64_t))((char *)&v268 - v29);
  uint64_t v31 = __chkstk_darwin(v28);
  v285 = (char *)&v268 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  int v271 = (char *)&v268 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  __int128 v274 = (char *)&v268 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  v281 = (char *)&v268 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v292 = (char *)&v268 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  __int128 v273 = (char *)&v268 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v284 = (uint64_t)&v268 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  uint64_t v277 = (char *)&v268 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  v280 = (char *)&v268 - v48;
  __chkstk_darwin(v47);
  uint64_t v295 = (os_log_s *)((char *)&v268 - v49);
  uint64_t v293 = type metadata accessor for LocationFetcher(0LL);
  uint64_t v50 = __chkstk_darwin(v293);
  uint64_t v283 = (uint64_t)&v268 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v50);
  uint64_t v294 = (void (*)(uint64_t *, os_log_s *, uint64_t))((char *)&v268 - v52);
  uint64_t v53 = type metadata accessor for RawSearchResult(0LL);
  uint64_t v54 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v56 = (char *)&v268 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B318 != -1) {
    goto LABEL_80;
  }
LABEL_2:
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  v272.n128_u64[0] = 0LL;
  uint64_t v298 = sub_1006A0F24(v309);
  swift_bridgeObjectRelease();
  uint64_t v57 = v4 + 3;
  uint64_t v58 = (uint64_t)v4;
  uint64_t v60 = v4[6];
  uint64_t v59 = v4[7];
  sub_100012ED8(v57, v60);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v59 + 40))(v60, v59) & 1) != 0)
  {
    uint64_t v61 = v296;
    char v62 = (void (*)(uint64_t *, os_log_s *, uint64_t))v296[2];
    uint64_t v63 = v290;
    uint64_t v295 = (os_log_s *)(v58 + *(int *)(v293 + 32));
    uint64_t v64 = v301;
    uint64_t v294 = v62;
    ((void (*)(char *))v62)(v290);
    uint64_t v65 = v297;
    uint64_t v66 = v300;
    uint64_t v293 = v297[2];
    uint64_t v67 = ((uint64_t (*)(uint64_t (*)(uint64_t), uint64_t, uint64_t))v293)(v30, v299, v300);
    uint64_t v68 = (os_log_s *)Logger.logObject.getter(v67);
    os_log_type_t v69 = static os_log_type_t.default.getter(v68);
    if (os_log_type_enabled(v68, v69))
    {
      uint64_t v70 = swift_slowAlloc(22LL, -1LL);
      uint64_t v71 = swift_slowAlloc(32LL, -1LL);
      uint64_t v309 = v71;
      *(_DWORD *)uint64_t v70 = 141558275;
      *(void *)&__int128 v306 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v306, (char *)&v306 + 8, v70 + 4, v70 + 12);
      *(_WORD *)(v70 + 12) = 2081;
      uint64_t v72 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v73 = dispatch thunk of CustomStringConvertible.description.getter(v300, v72);
      *(void *)&__int128 v306 = sub_1003F11D4(v73, v74, &v309);
      uint64_t v64 = v301;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v306, (char *)&v306 + 8, v70 + 14, v70 + 22);
      swift_bridgeObjectRelease();
      uint64_t v297 = (void *)v65[1];
      ((void (*)(uint64_t (*)(uint64_t), uint64_t))v297)(v30, v300);
      _os_log_impl( (void *)&_mh_execute_header,  v68,  v69,  "Exhaustive termination policy in effect for %{private,mask.hash}s.",  (uint8_t *)v70,  0x16u);
      swift_arrayDestroy(v71, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v75 = v71;
      uint64_t v66 = v300;
      swift_slowDealloc(v75, -1LL, -1LL);
      swift_slowDealloc(v70, -1LL, -1LL);

      uint64_t v76 = (void *)v296[1];
      uint64_t v77 = v290;
    }

    else
    {
      uint64_t v297 = (void *)v65[1];
      ((void (*)(uint64_t (*)(uint64_t), uint64_t))v297)(v30, v66);

      uint64_t v76 = (void *)v61[1];
      uint64_t v77 = v63;
    }

    v296 = v76;
    ((void (*)(char *, uint64_t))v76)(v77, v64);
    uint64_t v99 = v288;
    uint64_t v100 = *(void *)(a1 + 16);
    uint64_t v101 = v298;
    char v102 = v100 >= v298;
    uint64_t v103 = (uint64_t)v291;
    v294(v291, v295, v64);
    uint64_t v104 = ((uint64_t (*)(char *, uint64_t, uint64_t))v293)(v99, v299, v66);
    uint64_t v105 = (os_log_s *)Logger.logObject.getter(v104);
    os_log_type_t v106 = static os_log_type_t.default.getter(v105);
    if (os_log_type_enabled(v105, v106))
    {
      BOOL v107 = v100 >= v101;
      uint64_t v108 = swift_slowAlloc(28LL, -1LL);
      uint64_t v109 = swift_slowAlloc(32LL, -1LL);
      uint64_t v309 = v109;
      *(_DWORD *)uint64_t v108 = 67109635;
      LODWORD(v306) = v107;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v306, (char *)&v306 + 4, v108 + 4, v108 + 8);
      *(_WORD *)(v108 + 8) = 2160;
      *(void *)&__int128 v306 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v306, (char *)&v306 + 8, v108 + 10, v108 + 18);
      *(_WORD *)(v108 + 18) = 2081;
      uint64_t v110 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v111 = dispatch thunk of CustomStringConvertible.description.getter(v66, v110);
      *(void *)&__int128 v306 = sub_1003F11D4(v111, v112, &v309);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v306, (char *)&v306 + 8, v108 + 20, v108 + 28);
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v297)(v99, v66);
      _os_log_impl( (void *)&_mh_execute_header,  v105,  v106,  "Found enough results: %{BOOL}d to terminate beacon: %{private,mask.hash}s.",  (uint8_t *)v108,  0x1Cu);
      swift_arrayDestroy(v109, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v109, -1LL, -1LL);
      swift_slowDealloc(v108, -1LL, -1LL);

      uint64_t v113 = (uint64_t)v291;
      uint64_t v114 = v301;
    }

    else
    {
      ((void (*)(char *, uint64_t))v297)(v99, v66);

      uint64_t v113 = v103;
      uint64_t v114 = v64;
    }

    ((void (*)(uint64_t, uint64_t))v296)(v113, v114);
    return v102 & 1;
  }

  v291 = (uint64_t *)v58;
  v270.n128_u64[0] = (unint64_t)v14;
  uint64_t v78 = sub_1006F6728(a1);
  uint64_t v14 = v79;
  char v81 = v80;
  swift_bridgeObjectRetain(a1);
  if ((v81 & 1) != 0) {
    goto LABEL_82;
  }
  uint64_t v4 = (void *)(a1 + 56);
  uint64_t v30 = type metadata accessor for RawSearchResult;
  while (1)
  {
    unsigned int v84 = *(_DWORD *)(a1 + 36);
    if (v84 != (_DWORD)v14)
    {
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      swift_once(&qword_10099B318, sub_100352F58);
      goto LABEL_2;
    }

    uint64_t v85 = 1LL << *(_BYTE *)(a1 + 32);
    if (v78 == v85) {
      goto LABEL_17;
    }
    if (v78 < 0 || v78 >= v85) {
      goto LABEL_78;
    }
    uint64_t v86 = a1;
    sub_10001DC4C( *(void *)(a1 + 48) + *(void *)(v54 + 72) * v78,  (uint64_t)v56,  type metadata accessor for RawSearchResult);
    int v87 = v56[*(int *)(v53 + 36)];
    if (v87 != 12) {
      break;
    }
    sub_100018C68((uint64_t)v56, type metadata accessor for RawSearchResult);
LABEL_8:
    a1 = v86;
    uint64_t v78 = sub_1001FE5FC(v78, v14, 0LL, v86);
    uint64_t v14 = v82;
    if ((v83 & 1) != 0) {
      goto LABEL_82;
    }
  }

  sub_100018C68((uint64_t)v56, type metadata accessor for RawSearchResult);
  if (v87 == 13) {
    goto LABEL_8;
  }
  a1 = v86;
  unsigned int v84 = *(_DWORD *)(v86 + 36);
  uint64_t v85 = 1LL << *(_BYTE *)(v86 + 32);
LABEL_17:
  uint64_t v88 = (os_log_s *)sub_10023FAF8(v78, (uint64_t)v14, 0, v85, v84, 0, a1, (uint64_t (*)(char *))sub_100229A84);
  swift_bridgeObjectRelease();
  uint64_t v89 = *(void *)(a1 + 16);
  uint64_t v90 = v89 - (void)v88;
  uint64_t v92 = v299;
  uint64_t v91 = v300;
  char v93 = v297;
  if (__OFSUB__(v89, v88))
  {
    __break(1u);
LABEL_82:
    __break(1u);
  }

  sub_10001DC4C((uint64_t)v291, (uint64_t)v294, type metadata accessor for LocationFetcher);
  uint64_t v94 = (void (*)(os_log_s *, uint64_t, uint64_t))v93[2];
  v94(v295, v92, v91);
  sub_100504C28(v92, (uint64_t)&v306);
  if (!v307)
  {
    sub_100015794((uint64_t)&v306, (uint64_t *)&unk_1009A9C40);
LABEL_34:
    int v131 = v296;
    uint64_t v132 = v289;
    ((void (*)(char *, uint64_t, uint64_t))v296[2])(v289, (uint64_t)v291 + *(int *)(v293 + 32), v301);
    uint64_t v133 = v285;
    uint64_t v134 = ((uint64_t (*)(char *, uint64_t, uint64_t))v94)(v285, v92, v91);
    uint64_t v135 = (os_log_s *)Logger.logObject.getter(v134);
    os_log_type_t v136 = static os_log_type_t.default.getter(v135);
    if (os_log_type_enabled(v135, v136))
    {
      uint64_t v137 = swift_slowAlloc(22LL, -1LL);
      v282 = (char *)v90;
      uint64_t v138 = v137;
      uint64_t v139 = swift_slowAlloc(32LL, -1LL);
      uint64_t v309 = v139;
      *(_DWORD *)uint64_t v138 = 141558275;
      *(void *)&__int128 v306 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v306, (char *)&v306 + 8, v138 + 4, v138 + 12);
      *(_WORD *)(v138 + 12) = 2081;
      uint64_t v140 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v141 = dispatch thunk of CustomStringConvertible.description.getter(v300, v140);
      *(void *)&__int128 v306 = sub_1003F11D4(v141, v142, &v309);
      uint64_t v91 = v300;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v306, (char *)&v306 + 8, v138 + 14, v138 + 22);
      swift_bridgeObjectRelease();
      uint64_t v143 = (void (*)(char *, uint64_t))v297[1];
      v143(v133, v91);
      _os_log_impl( (void *)&_mh_execute_header,  v135,  v136,  "Single-beacon termination policy in effect for %{private,mask.hash}s.",  (uint8_t *)v138,  0x16u);
      swift_arrayDestroy(v139, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v139, -1LL, -1LL);
      uint64_t v144 = v138;
      uint64_t v90 = (uint64_t)v282;
      swift_slowDealloc(v144, -1LL, -1LL);

      ((void (*)(char *, uint64_t))v131[1])(v289, v301);
    }

    else
    {
      uint64_t v143 = (void (*)(char *, uint64_t))v297[1];
      v143(v133, v91);

      ((void (*)(char *, uint64_t))v131[1])(v132, v301);
    }

    unint64_t v145 = v294;
    uint64_t v146 = v295;
    char v102 = sub_100229ABC(v88, v90, (uint64_t)_swiftEmptyArrayStorage, v298, v294, v295);
    v143((char *)v146, v91);
    sub_100018C68((uint64_t)v145, type metadata accessor for LocationFetcher);
    return v102 & 1;
  }

  v290 = (char *)v94;
  sub_100012EC0(&v306, (uint64_t)&v309);
  uint64_t v95 = v310;
  uint64_t v96 = v311;
  sub_100012ED8(&v309, v310);
  uint64_t v97 = v95;
  uint64_t v98 = (uint64_t)v282;
  (*(void (**)(uint64_t, uint64_t))(v96 + 192))(v97, v96);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v93[6])(v98, 1LL, v91) == 1)
  {
    sub_100015794(v98, &qword_10099D8A0);
    goto LABEL_33;
  }

  uint64_t v115 = (uint64_t)v280;
  ((void (*)(char *, uint64_t, uint64_t))v93[4])(v280, v98, v91);
  sub_100513108(v115, (uint64_t)&v304);
  if (!v305)
  {
    ((void (*)(uint64_t, uint64_t))v93[1])(v115, v91);
    sub_100015794((uint64_t)&v304, (uint64_t *)&unk_1009AA790);
LABEL_33:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v309);
    uint64_t v94 = (void (*)(os_log_s *, uint64_t, uint64_t))v290;
    goto LABEL_34;
  }

  sub_100012EC0(&v304, (uint64_t)&v306);
  uint64_t v116 = v307;
  uint64_t v117 = v308;
  sub_100012ED8(&v306, v307);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(v117 + 24))(v116, v117) < 2u)
  {
    ((void (*)(uint64_t, uint64_t))v93[1])(v115, v91);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v306);
    goto LABEL_33;
  }

  unint64_t v118 = (char *)v296[2];
  v288 = (char *)v291 + *(int *)(v293 + 32);
  v289 = v118;
  ((void (*)(void))v118)(v279);
  unint64_t v119 = v277;
  uint64_t v120 = (void (*)(uint64_t, uint64_t, uint64_t))v290;
  uint64_t v121 = ((uint64_t (*)(char *, uint64_t, uint64_t))v290)(v277, v92, v91);
  char v122 = (os_log_s *)Logger.logObject.getter(v121);
  os_log_type_t v123 = static os_log_type_t.default.getter(v122);
  LODWORD(v285) = v123;
  BOOL v124 = os_log_type_enabled(v122, v123);
  v268 = v88;
  if (v124)
  {
    uint64_t v125 = swift_slowAlloc(22LL, -1LL);
    uint64_t v126 = swift_slowAlloc(32LL, -1LL);
    *(void *)&__int128 v304 = v126;
    *(_DWORD *)uint64_t v125 = 141558275;
    uint64_t v302 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, v303, v125 + 4, v125 + 12);
    *(_WORD *)(v125 + 12) = 2081;
    uint64_t v127 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v128 = dispatch thunk of CustomStringConvertible.description.getter(v300, v127);
    uint64_t v302 = sub_1003F11D4(v128, v129, (uint64_t *)&v304);
    uint64_t v92 = v299;
    uint64_t v91 = v300;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, v303, v125 + 14, v125 + 22);
    swift_bridgeObjectRelease();
    uint64_t v293 = v93[1];
    ((void (*)(char *, uint64_t))v293)(v119, v91);
    _os_log_impl( (void *)&_mh_execute_header,  v122,  (os_log_type_t)v285,  "Multipart termination policy for %{private,mask.hash}s.",  (uint8_t *)v125,  0x16u);
    swift_arrayDestroy(v126, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v126, -1LL, -1LL);
    uint64_t v130 = v125;
    uint64_t v120 = (void (*)(uint64_t, uint64_t, uint64_t))v290;
    swift_slowDealloc(v130, -1LL, -1LL);
  }

  else
  {
    uint64_t v293 = v93[1];
    ((void (*)(char *, uint64_t))v293)(v119, v91);
  }

  v296 = (void *)v296[1];
  ((void (*)(void, uint64_t))v296)(v279, v301);
  uint64_t v148 = v291;
  sub_10001DC4C((uint64_t)v291, v283, type metadata accessor for LocationFetcher);
  v120(v284, v92, v91);
  os_log_t v149 = v120;
  uint64_t v150 = v307;
  uint64_t v151 = v308;
  sub_100012ED8(&v306, v307);
  uint64_t v152 = (*(uint64_t (**)(uint64_t, uint64_t))(v151 + 16))(v150, v151);
  uint64_t v153 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
  uint64_t v154 = *((unsigned __int8 *)v93 + 80);
  uint64_t v155 = (v154 + 32) & ~v154;
  uint64_t v156 = swift_allocObject(v153, v155 + v93[9], v154 | 7);
  __int128 v279 = xmmword_1007E67D0;
  *(_OWORD *)(v156 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  v149(v156 + v155, v92, v91);
  *(void *)&__int128 v304 = v278;
  swift_bridgeObjectRetain(v278);
  sub_100184B50(v156);
  uint64_t v157 = sub_1003CE474(v304, v152);
  swift_bridgeObjectRelease();
  if (!v157[2])
  {
    swift_release();
    uint64_t v182 = (void (*)(char *, uint64_t))v293;
    ((void (*)(uint64_t, uint64_t))v293)(v284, v91);
    sub_100018C68(v283, type metadata accessor for LocationFetcher);
    unint64_t v183 = v270.n128_u64[0];
    ((void (*)(unint64_t, char *, uint64_t))v289)(v270.n128_u64[0], v288, v301);
    uint64_t v184 = v271;
    uint64_t v185 = ((uint64_t (*)(char *, uint64_t, uint64_t))v149)(v271, v92, v91);
    uint64_t v186 = (os_log_s *)Logger.logObject.getter(v185);
    os_log_type_t v187 = static os_log_type_t.default.getter(v186);
    if (os_log_type_enabled(v186, v187))
    {
      uint64_t v188 = v90;
      uint64_t v189 = swift_slowAlloc(22LL, -1LL);
      os_log_t v190 = v184;
      uint64_t v191 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v304 = v191;
      *(_DWORD *)uint64_t v189 = 141558275;
      uint64_t v302 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, v303, v189 + 4, v189 + 12);
      *(_WORD *)(v189 + 12) = 2081;
      uint64_t v192 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v193 = dispatch thunk of CustomStringConvertible.description.getter(v300, v192);
      uint64_t v302 = sub_1003F11D4(v193, v194, (uint64_t *)&v304);
      uint64_t v91 = v300;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, v303, v189 + 14, v189 + 22);
      swift_bridgeObjectRelease();
      v182(v190, v91);
      _os_log_impl( (void *)&_mh_execute_header,  v186,  v187,  "Multipart termination policy found all remaining peers for %{private,mask.hash}s - applying single-beacon policy.",  (uint8_t *)v189,  0x16u);
      swift_arrayDestroy(v191, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v191, -1LL, -1LL);
      uint64_t v195 = v189;
      uint64_t v90 = v188;
      swift_slowDealloc(v195, -1LL, -1LL);

      unint64_t v196 = v270.n128_u64[0];
    }

    else
    {
      v182(v184, v91);

      unint64_t v196 = v183;
    }

    ((void (*)(unint64_t, uint64_t))v296)(v196, v301);
    uint64_t v264 = v280;
    unint64_t v265 = v294;
    uint64_t v266 = v295;
    char v102 = sub_100229ABC(v268, v90, (uint64_t)_swiftEmptyArrayStorage, v298, v294, v295);
    v182(v264, v91);
    v182((char *)v266, v91);
    sub_100018C68((uint64_t)v265, type metadata accessor for LocationFetcher);
    goto LABEL_76;
  }

  uint64_t v158 = v284;
  uint64_t v159 = v283;
  v282 = (char *)v90;
  uint64_t v160 = sub_10022A7B0((uint64_t)&v309, *v148);
  swift_retain();
  unint64_t v161 = v272.n128_u64[0];
  os_log_type_t v162 = (char *)sub_10024051C((uint64_t)v160, (uint64_t)v157);
  if (v161)
  {
    swift_release();
    swift_errorRelease(v161);
    unint64_t v267 = (void (*)(os_log_s *, uint64_t))v293;
    ((void (*)(uint64_t, uint64_t))v293)(v158, v91);
    sub_100018C68(v159, type metadata accessor for LocationFetcher);
    v267(v295, v91);
    uint64_t result = sub_100018C68((uint64_t)v294, type metadata accessor for LocationFetcher);
    __break(1u);
  }

  else
  {
    uint64_t v163 = v162;
    swift_bridgeObjectRelease();
    swift_release_n(v157, 2LL);
    uint64_t v164 = v275;
    ((void (*)(char *, char *, uint64_t))v289)(v275, v288, v301);
    uint64_t v165 = v273;
    ((void (*)(char *, uint64_t, uint64_t))v290)(v273, v92, v91);
    uint64_t v166 = swift_bridgeObjectRetain_n(v163, 2LL);
    uint64_t v167 = (os_log_s *)Logger.logObject.getter(v166);
    os_log_type_t v168 = static os_log_type_t.default.getter(v167);
    BOOL v169 = os_log_type_enabled(v167, v168);
    v285 = v163;
    if (v169)
    {
      uint64_t v170 = swift_slowAlloc(32LL, -1LL);
      os_log_t v171 = v165;
      uint64_t v172 = swift_slowAlloc(64LL, -1LL);
      *(void *)&__int128 v304 = v172;
      *(_DWORD *)uint64_t v170 = 141558531;
      uint64_t v302 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, v303, v170 + 4, v170 + 12);
      *(_WORD *)(v170 + 12) = 2081;
      uint64_t v173 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v174 = dispatch thunk of CustomStringConvertible.description.getter(v91, v173);
      uint64_t v302 = sub_1003F11D4(v174, v175, (uint64_t *)&v304);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, v303, v170 + 14, v170 + 22);
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v293)(v171, v91);
      *(_WORD *)(v170 + 22) = 2082;
      swift_bridgeObjectRetain(v285);
      uint64_t v176 = Array.description.getter(v285, &type metadata for UInt8);
      unint64_t v178 = v177;
      swift_bridgeObjectRelease();
      uint64_t v179 = v176;
      uint64_t v163 = v285;
      uint64_t v302 = sub_1003F11D4(v179, v178, (uint64_t *)&v304);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, v303, v170 + 24, v170 + 32);
      swift_bridgeObjectRelease_n(v163, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v167,  v168,  "Counting multipart results for %{private,mask.hash}s, multipart: %{public}s.",  (uint8_t *)v170,  0x20u);
      swift_arrayDestroy(v172, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v172, -1LL, -1LL);
      swift_slowDealloc(v170, -1LL, -1LL);

      ((void (*)(char *, uint64_t))v296)(v275, v301);
    }

    else
    {
      ((void (*)(char *, uint64_t))v293)(v165, v91);

      swift_bridgeObjectRelease_n(v163, 2LL);
      ((void (*)(char *, uint64_t))v296)(v164, v301);
    }

    uint64_t v180 = v298;
    uint64_t v181 = v282;
    v291 = (uint64_t *)*((void *)v163 + 2);
    if (v291)
    {
      uint64_t v277 = v303;
      uint64_t v275 = (char *)&v302 + 1;
      __int128 v273 = (char *)&v302 + 4;
      __n128 v197 = swift_bridgeObjectRetain(v163);
      uint64_t v198 = 0LL;
      uint64_t v297 = &_swiftEmptyDictionarySingleton;
      v197.n128_u64[0] = 141558787LL;
      __n128 v272 = v197;
      int v271 = (char *)&type metadata for Any + 8;
      v197.n128_u64[0] = 141558275LL;
      __n128 v270 = v197;
      __int128 v199 = v287;
      uint64_t v200 = v292;
      uint64_t v269 = a1;
      do
      {
        unint64_t v201 = *((char *)v198 + (void)v163 + 32);
        if (v201 >= 3)
        {
          ((void (*)(char *, char *, uint64_t))v289)(v199, v288, v301);
          uint64_t v230 = ((uint64_t (*)(char *, uint64_t, uint64_t))v290)(v200, v299, v91);
          v231 = (os_log_s *)Logger.logObject.getter(v230);
          os_log_type_t v232 = static os_log_type_t.error.getter(v231);
          if (os_log_type_enabled(v231, v232))
          {
            uint64_t v233 = swift_slowAlloc(22LL, -1LL);
            uint64_t v234 = swift_slowAlloc(32LL, -1LL);
            *(void *)&__int128 v304 = v234;
            *(_DWORD *)uint64_t v233 = v270.n128_u32[0];
            *(void *)(v233 + 4) = 1752392040LL;
            *(_WORD *)(v233 + 12) = 2081;
            uint64_t v235 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            uint64_t v236 = dispatch thunk of CustomStringConvertible.description.getter(v91, v235);
            *(void *)(v233 + 14) = sub_1003F11D4(v236, v237, (uint64_t *)&v304);
            swift_bridgeObjectRelease();
            ((void (*)(char *, uint64_t))v293)(v292, v91);
            _os_log_impl( (void *)&_mh_execute_header,  v231,  v232,  "Could not determine multipart configuration for %{private,mask.hash}s - partId out of bounds.",  (uint8_t *)v233,  0x16u);
            swift_arrayDestroy(v234, 1LL, (char *)&type metadata for Any + 8);
            uint64_t v180 = v298;
            swift_slowDealloc(v234, -1LL, -1LL);
            uint64_t v238 = v233;
            uint64_t v200 = v292;
            __int128 v199 = v287;
            swift_slowDealloc(v238, -1LL, -1LL);
          }

          else
          {
            ((void (*)(char *, uint64_t))v293)(v200, v91);
          }

          ((void (*)(char *, uint64_t))v296)(v199, v301);
        }

        else
        {
          unsigned __int8 v202 = *((_BYTE *)v198 + (void)v163 + 32);
          int v203 = dword_1007F79B8[v201] | dword_1007F79AC[v201];
          uint64_t v204 = v91;
          uint64_t v205 = v301;
          uint64_t v206 = v283;
          uint64_t v207 = v284;
          sub_10022A190(v203, 0, a1, v283, v284);
          uint64_t v209 = v208;
          sub_10022A190(v203, 1, a1, v206, v207);
          uint64_t v211 = v210;
          uint64_t v212 = sub_100004AEC(&qword_10099D328);
          uint64_t v213 = swift_allocObject(v212, 33LL, 7LL);
          *(_OWORD *)(v213 + swift_weakDestroy(v0 + 16) = v279;
          *(_BYTE *)(v213 + 32) = v202;
          LOBYTE(v211) = sub_100229ABC(v209, v211, v213, v180, v294, v295);
          swift_bridgeObjectRelease();
          uint64_t v214 = v297;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v297);
          *(void *)&__int128 v304 = v214;
          int v216 = v211 & 1;
          uint64_t v217 = v286;
          sub_10005DC00(v216, v202, isUniquelyReferenced_nonNull_native);
          uint64_t v297 = (void *)v304;
          swift_bridgeObjectRelease();
          ((void (*)(char *, char *, uint64_t))v289)(v217, v288, v205);
          uint64_t v218 = v281;
          uint64_t v219 = ((uint64_t (*)(char *, uint64_t, uint64_t))v290)(v281, v299, v204);
          int v220 = (os_log_s *)Logger.logObject.getter(v219);
          os_log_type_t v221 = static os_log_type_t.default.getter(v220);
          if (os_log_type_enabled(v220, v221))
          {
            uint64_t v222 = swift_slowAlloc(31LL, -1LL);
            LODWORD(v278) = v216;
            unint64_t v223 = v218;
            uint64_t v224 = v222;
            uint64_t v225 = swift_slowAlloc(32LL, -1LL);
            *(void *)&__int128 v304 = v225;
            *(_DWORD *)uint64_t v224 = v272.n128_u32[0];
            uint64_t v302 = 1752392040LL;
            unint64_t v226 = v277;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, v277, v224 + 4, v224 + 12);
            *(_WORD *)(v224 + 12) = 2081;
            uint64_t v227 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            uint64_t v228 = dispatch thunk of CustomStringConvertible.description.getter(v300, v227);
            uint64_t v302 = sub_1003F11D4(v228, v229, (uint64_t *)&v304);
            uint64_t v91 = v300;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, v226, v224 + 14, v224 + 22);
            swift_bridgeObjectRelease();
            ((void (*)(char *, uint64_t))v293)(v223, v91);
            *(_WORD *)(v224 + 22) = 256;
            LOBYTE(v302) = v202;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, v275, v224 + 24, v224 + 25);
            *(_WORD *)(v224 + 25) = 1024;
            LODWORD(v302) = v278;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, v273, v224 + 27, v224 + 31);
            _os_log_impl( (void *)&_mh_execute_header,  v220,  v221,  "Multipart termination for %{private,mask.hash}s part %hhu foundEnoughConnectedPositions: %{BOOL}d.",  (uint8_t *)v224,  0x1Fu);
            swift_arrayDestroy(v225, 1LL, v271);
            swift_slowDealloc(v225, -1LL, -1LL);
            swift_slowDealloc(v224, -1LL, -1LL);

            ((void (*)(char *, uint64_t))v296)(v286, v301);
            uint64_t v180 = v298;
            a1 = v269;
            __int128 v199 = v287;
            uint64_t v200 = v292;
          }

          else
          {
            ((void (*)(char *, uint64_t))v293)(v218, v204);

            ((void (*)(char *, uint64_t))v296)(v217, v205);
            uint64_t v180 = v298;
            a1 = v269;
            __int128 v199 = v287;
            uint64_t v200 = v292;
            uint64_t v91 = v204;
          }

          uint64_t v163 = v285;
        }

        uint64_t v198 = (uint64_t *)((char *)v198 + 1);
      }

      while (v291 != v198);
      swift_bridgeObjectRelease();
      uint64_t v181 = v282;
    }

    else
    {
      uint64_t v297 = &_swiftEmptyDictionarySingleton;
    }

    unint64_t v239 = (void (*)(os_log_s *, uint64_t))v293;
    ((void (*)(uint64_t, uint64_t))v293)(v284, v91);
    sub_100018C68(v283, type metadata accessor for LocationFetcher);
    uint64_t v240 = (uint64_t)v181;
    v241 = v294;
    v242 = v295;
    LODWORD(v30sub_100032838(0, 7LL, 0) = sub_100229ABC(v268, v240, (uint64_t)_swiftEmptyArrayStorage, v180, v294, v295);
    v239(v242, v91);
    sub_100018C68((uint64_t)v241, type metadata accessor for LocationFetcher);
    uint64_t v243 = *((void *)v163 + 2);
    uint64_t v244 = v274;
    if (v243)
    {
      uint64_t v245 = (unsigned __int8 *)(v163 + 32);
      uint64_t v246 = v297[2];
      uint64_t v247 = v276;
      uint64_t v248 = v299;
      while (v246)
      {
        unint64_t v249 = sub_10030D190(*v245);
        if ((v250 & 1) == 0 || *(_BYTE *)(v297[7] + v249) != 1) {
          break;
        }
        ++v245;
        if (!--v243)
        {
          int v251 = 1;
          goto LABEL_70;
        }
      }

      int v251 = 0;
    }

    else
    {
      int v251 = 1;
      uint64_t v247 = v276;
      uint64_t v248 = v299;
    }

LABEL_70:
    swift_bridgeObjectRelease();
    ((void (*)(char *, char *, uint64_t))v289)(v247, v288, v301);
    uint64_t v252 = ((uint64_t (*)(char *, uint64_t, uint64_t))v290)(v244, v248, v91);
    uint64_t v253 = (os_log_s *)Logger.logObject.getter(v252);
    os_log_type_t v254 = static os_log_type_t.default.getter(v253);
    if (os_log_type_enabled(v253, v254))
    {
      uint64_t v255 = swift_slowAlloc(34LL, -1LL);
      uint64_t v256 = v91;
      uint64_t v257 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v304 = v257;
      *(_DWORD *)uint64_t v255 = 141558787;
      uint64_t v302 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, v303, v255 + 4, v255 + 12);
      *(_WORD *)(v255 + 12) = 2081;
      uint64_t v258 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v259 = dispatch thunk of CustomStringConvertible.description.getter(v256, v258);
      uint64_t v302 = sub_1003F11D4(v259, v260, (uint64_t *)&v304);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, v303, v255 + 14, v255 + 22);
      swift_bridgeObjectRelease();
      unint64_t v261 = (void (*)(char *, uint64_t))v293;
      ((void (*)(char *, uint64_t))v293)(v244, v256);
      *(_WORD *)(v255 + 22) = 1024;
      char v262 = v300;
      LODWORD(v302) = v300 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, (char *)&v302 + 4, v255 + 24, v255 + 28);
      *(_WORD *)(v255 + 28) = 1024;
      LODWORD(v302) = v251;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, (char *)&v302 + 4, v255 + 30, v255 + 34);
      _os_log_impl( (void *)&_mh_execute_header,  v253,  v254,  "Multipart termination result for %{private,mask.hash}s, singleBeacon: %{BOOL}d, multipartResult: %{BOOL}d",  (uint8_t *)v255,  0x22u);
      swift_arrayDestroy(v257, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v257, -1LL, -1LL);
      swift_slowDealloc(v255, -1LL, -1LL);

      ((void (*)(char *, uint64_t))v296)(v276, v301);
      v261(v280, v256);
    }

    else
    {

      id v263 = (void (*)(char *, uint64_t))v293;
      ((void (*)(char *, uint64_t))v293)(v244, v91);
      ((void (*)(char *, uint64_t))v296)(v247, v301);
      v263(v280, v91);
      char v262 = v300;
    }

    swift_bridgeObjectRelease();
    char v102 = v262 & v251;
LABEL_76:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v306);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v309);
    return v102 & 1;
  }

  return result;
}

        if ((v55 & 1) != 0) {
          goto LABEL_126;
        }
        uint64_t v63 = &v30[16 * v32];
        uint64_t v65 = *(void *)v63;
        uint64_t v64 = *((void *)v63 + 1);
        uint64_t v43 = __OFSUB__(v64, v65);
        uint64_t v66 = v64 - v65;
        if (v43) {
          goto LABEL_129;
        }
        if (v66 < v54) {
          goto LABEL_15;
        }
LABEL_78:
        uint64_t v71 = v32 - 1;
        if (v32 - 1 >= v11)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }

        if (!v10) {
          goto LABEL_145;
        }
        uint64_t v72 = &v30[16 * v71];
        uint64_t v73 = *(void *)v72;
        unint64_t v74 = &v30[16 * v32];
        uint64_t v75 = *((void *)v74 + 1);
        sub_10032E3CC( (double *)(v10 + 88LL * *(void *)v72),  (double *)(v10 + 88LL * *(void *)v74),  v10 + 88 * v75,  v125);
        if (v1) {
          goto LABEL_95;
        }
        if (v75 < v73) {
          goto LABEL_119;
        }
        if (v32 > *((void *)v126 + 2)) {
          goto LABEL_120;
        }
        *(void *)uint64_t v72 = v73;
        *(void *)&v30[16 * v71 + 8] = v75;
        uint64_t v76 = *((void *)v126 + 2);
        if (v32 >= v76) {
          goto LABEL_121;
        }
        uint64_t v27 = v126;
        uint64_t v11 = v76 - 1;
        memmove(&v30[16 * v32], v74 + 16, 16 * (v76 - 1 - v32));
        *((void *)v126 + 2) = v76 - 1;
        if (v76 <= 2) {
          goto LABEL_15;
        }
      }
    }

    uint64_t v11 = 1LL;
LABEL_15:
    uint64_t v3 = v120;
    if (v9 >= v120)
    {
      uint64_t v8 = v118;
      uint64_t v108 = v126;
      uint64_t v2 = v117;
      goto LABEL_105;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
  }
  uint64_t v37 = v2[2];
  uint64_t v36 = v2[3];
  if (v37 >= v36 >> 1) {
    uint64_t v2 = sub_1004C4120((void *)(v36 > 1), v37 + 1, 1, v2);
  }
  v2[2] = v37 + 1;
  uint64_t v38 = &v2[2 * v37];
  v38[4] = 0xD000000000000015LL;
  v38[5] = 0x8000000100870A10LL;
  if ((a1 & 0x1000) != 0)
  {
LABEL_75:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
    }
    uint64_t v40 = v2[2];
    uint64_t v39 = v2[3];
    if (v40 >= v39 >> 1) {
      uint64_t v2 = sub_1004C4120((void *)(v39 > 1), v40 + 1, 1, v2);
    }
    v2[2] = v40 + 1;
    uint64_t v41 = &v2[2 * v40];
    v41[4] = 0xD000000000000019LL;
    v41[5] = 0x80000001008709F0LL;
  }

  objc_autoreleasePoolPop(v128);
  __break(1u);
}

uint64_t sub_10021C93C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v101 = *(void *)(v2 - 8);
  uint64_t v102 = v2;
  __chkstk_darwin(v2);
  uint64_t v97 = (char *)&v85 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for LocationFetcher(0LL);
  __chkstk_darwin(v4);
  uint64_t v96 = (char *)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_1009A6608);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v99 = (char *)&v85 - v10;
  uint64_t v95 = sub_100004AEC(&qword_1009A6610);
  uint64_t v11 = __chkstk_darwin(v95);
  uint64_t v85 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v91 = (char *)&v85 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v89 = (char *)&v85 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v88 = (char *)&v85 - v18;
  __chkstk_darwin(v17);
  int v87 = (char *)&v85 - v19;
  v104[0] = &_swiftEmptyDictionarySingleton;
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v92 = (char *)(a1 + 64);
  uint64_t v21 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v22 = -1LL;
  if (v21 < 64) {
    uint64_t v22 = ~(-1LL << v21);
  }
  unint64_t v23 = v22 & v20;
  int64_t v86 = (unint64_t)(v21 + 63) >> 6;
  uint64_t v90 = (void *)a1;
  swift_bridgeObjectRetain(a1);
  int64_t v24 = 0LL;
  uint64_t v26 = v87;
  uint64_t v25 = (uint64_t)v88;
  while (1)
  {
    if (v23)
    {
      uint64_t v93 = (v23 - 1) & v23;
      int64_t v94 = v24;
      unint64_t v27 = __clz(__rbit64(v23)) | (v24 << 6);
      uint64_t v28 = v90;
      goto LABEL_5;
    }

    BOOL v39 = __OFADD__(v24, 1LL);
    int64_t v40 = v24 + 1;
    uint64_t v41 = v85;
    if (v39) {
      goto LABEL_82;
    }
    uint64_t v28 = v90;
    if (v40 >= v86) {
      break;
    }
    unint64_t v42 = *(void *)&v92[8 * v40];
    if (!v42)
    {
      int64_t v43 = v40 + 1;
      if (v40 + 1 >= v86) {
        break;
      }
      unint64_t v42 = *(void *)&v92[8 * v43];
      if (!v42)
      {
        int64_t v43 = v40 + 2;
        if (v40 + 2 >= v86) {
          break;
        }
        unint64_t v42 = *(void *)&v92[8 * v43];
        if (!v42)
        {
          int64_t v43 = v40 + 3;
          if (v40 + 3 >= v86) {
            break;
          }
          unint64_t v42 = *(void *)&v92[8 * v43];
          if (!v42)
          {
            while (1)
            {
              int64_t v40 = v43 + 1;
              if (__OFADD__(v43, 1LL)) {
                goto LABEL_84;
              }
              if (v40 >= v86) {
                goto LABEL_22;
              }
              unint64_t v42 = *(void *)&v92[8 * v40];
              ++v43;
              if (v42) {
                goto LABEL_17;
              }
            }
          }
        }
      }

      int64_t v40 = v43;
    }

LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
  swift_bridgeObjectRelease();
  sub_100015794((uint64_t)v41, &qword_1009A6610);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

      v240[(v233 >> 6) + 8] |= 1LL << v233;
      v180(v240[6] + *(void *)(v331 + 72) * v233, v300, v167);
      sub_10002218C(v294, v240[7] + v233 * v192, type metadata accessor for SafeLocation);
      unint64_t v260 = v240[2];
      uint64_t v225 = __OFADD__(v260, 1LL);
      unint64_t v261 = v260 + 1;
      if (v225) {
        goto LABEL_110;
      }
      v240[2] = v261;
      uint64_t v240 = v338;
      goto LABEL_87;
    }

    if (v163 == 1) {
      break;
    }
    uint64_t v57 = v299;
    sub_10002218C(v161, v299, type metadata accessor for SafeLocation);
    uint64_t v58 = *(void *)(v57 + v23[13]);
    swift_beginAccess(v50, v337, 1LL, 0LL);
    *(void *)&v50[v23[13]] = v58;
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRelease();
    uint64_t v59 = v57 + v23[5];
    uint64_t v60 = v331;
    uint64_t v61 = *(void (**)(char *, uint64_t, uint64_t))(v331 + 16);
    uint64_t v62 = (uint64_t)v330;
    unint64_t v63 = v332;
    v61(v330, v59, v332);
    __n128 v64 = v292;
    sub_10001DC4C(v57, v292, type metadata accessor for SafeLocation);
    int64_t v65 = v308;
    unint64_t v66 = swift_isUniquelyReferenced_nonNull_native(v308);
    v338 = (void *)v65;
    unint64_t v67 = v63;
    sub_10005F14C(v64, v62, v66);
    uint64_t v308 = (unint64_t)v338;
    swift_bridgeObjectRelease();
    uint64_t v68 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
    v68(v62, v63);
    v61((char *)v62, (uint64_t)&v327[v333[5]], v63);
    sub_10001DC4C((uint64_t)v327, v64, type metadata accessor for SafeLocation);
    uint64_t v69 = (uint64_t)v343;
    uint64_t v70 = swift_isUniquelyReferenced_nonNull_native(v343);
    v338 = (void *)v69;
    sub_10005F14C(v64, v62, v70);
    v343 = v338;
    swift_bridgeObjectRelease();
    v68(v62, v67);
    v61((char *)v62, (uint64_t)&v327[v333[5]], v67);
    sub_10001DC4C(v57, v64, type metadata accessor for SafeLocation);
    uint64_t v71 = v342;
    uint64_t v72 = swift_isUniquelyReferenced_nonNull_native(v342);
    v338 = (void *)v71;
    uint64_t v73 = v64;
    uint64_t v50 = v327;
    sub_10005F14C(v73, v62, v72);
    v342 = (unint64_t)v338;
    swift_bridgeObjectRelease();
    v68(v62, v67);
    unint64_t v23 = v333;
    int64_t v74 = v57;
    uint64_t v45 = v328;
    sub_100018C68(v74, type metadata accessor for SafeLocation);
    uint64_t v56 = v312;
    int64_t v24 = v314;
LABEL_4:
    unint64_t v52 = v311;
LABEL_5:
    unint64_t v75 = v310 + 1;
    sub_100015794(v56, (uint64_t *)&unk_1009AF740);
    sub_100015794(v319, (uint64_t *)&unk_1009AF740);
    sub_100018C68((uint64_t)v50, type metadata accessor for SafeLocation);
    uint64_t v55 = v75;
    a2 = v309;
    if (v75 == v304)
    {
      swift_bridgeObjectRelease();
      unint64_t v51 = (unint64_t)v343;
      goto LABEL_89;
    }
  }

  uint64_t v164 = swift_beginAccess(v50, v339, 0LL, 0LL);
  uint64_t v165 = &v50[v23[5]];
  uint64_t v166 = *(void (**)(uint64_t, char *, uint64_t, __n128))(v331 + 16);
  uint64_t v167 = v302;
  v166(v302, v165, v332, v164);
  sub_10001DC4C((uint64_t)v50, v296, type metadata accessor for SafeLocation);
  os_log_type_t v168 = (uint64_t)v343;
  BOOL v169 = swift_isUniquelyReferenced_nonNull_native(v343);
  v338 = (void *)v168;
  v343 = (void *)0x8000000000000000LL;
  os_log_t v171 = sub_10030D124(v167);
  uint64_t v172 = *(void *)(v168 + 16);
  uint64_t v173 = (v170 & 1) == 0;
  uint64_t v174 = v172 + v173;
  if (!__OFADD__(v172, v173))
  {
    uint64_t v167 = v170;
    if (*(void *)(v168 + 24) >= v174)
    {
      if ((v169 & 1) != 0)
      {
        unint64_t v177 = v338;
        if ((v170 & 1) == 0) {
          goto LABEL_81;
        }
      }

      else
      {
        sub_100067948();
        unint64_t v177 = v338;
        if ((v167 & 1) == 0) {
          goto LABEL_81;
        }
      }
    }

    else
    {
      sub_10005556C(v174, v169);
      unint64_t v175 = sub_10030D124(v302);
      if ((v167 & 1) != (v176 & 1)) {
        goto LABEL_111;
      }
      os_log_t v171 = v175;
      unint64_t v177 = v338;
      if ((v167 & 1) == 0)
      {
LABEL_81:
        v177[(v171 >> 6) + 8] |= 1LL << v171;
        ((void (*)(unint64_t, uint64_t, uint64_t))v166)( v177[6] + *(void *)(v331 + 72) * v171,  v302,  v332);
        sub_10002218C(v296, v177[7] + v171 * v79, type metadata accessor for SafeLocation);
        uint64_t v258 = v177[2];
        uint64_t v225 = __OFADD__(v258, 1LL);
        uint64_t v259 = v258 + 1;
        if (v225) {
          goto LABEL_109;
        }
        v177[2] = v259;
        unint64_t v177 = v338;
        goto LABEL_83;
      }
    }

    sub_10060FD14(v296, v177[7] + v171 * v79);
LABEL_83:
    v343 = v177;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v331 + 8))(v302, v332);
    uint64_t v56 = v312;
    unint64_t v23 = v333;
    int64_t v24 = v314;
    unint64_t v52 = v311;
    goto LABEL_5;
  }

  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v332);
  __break(1u);
LABEL_112:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v167);
  __break(1u);
  return result;
}

uint64_t sub_10021D204( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, void (*a9)(char *, uint64_t, uint64_t), uint64_t a10)
{
  uint64_t v110 = a8;
  os_log_type_t v123 = a7;
  uint64_t v106 = a2;
  uint64_t v108 = type metadata accessor for Logger(0LL);
  uint64_t v16 = *(void *)(v108 - 8);
  uint64_t v17 = __chkstk_darwin(v108);
  uint64_t v19 = (char *)&v102 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  BOOL v107 = (char *)&v102 - v20;
  uint64_t v21 = type metadata accessor for UUID(0LL);
  uint64_t v118 = *(void *)(v21 - 8);
  uint64_t v119 = v21;
  __chkstk_darwin(v21);
  uint64_t v117 = (char *)&v102 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0LL);
  uint64_t v24 = *(void *)(RequestBeacon - 8);
  __chkstk_darwin(RequestBeacon);
  uint64_t v120 = (char *)&v102 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v124[2] = a3;
  v124[3] = a4;
  uint64_t v109 = a4;
  v124[4] = a5;
  v124[5] = a6;
  swift_bridgeObjectRetain(a1);
  uint64_t v26 = sub_100023D6C((uint64_t (*)(char *))sub_100246540, v124, a1);
  uint64_t v27 = v26;
  uint64_t v116 = *(void *)(v26 + 16);
  if (!v116) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v105 = 0LL;
  uint64_t v104 = a10;
  uint64_t v103 = a9;
  unint64_t v115 = v26 + ((*(unsigned __int8 *)(v24 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  swift_bridgeObjectRetain(v26);
  unint64_t v28 = 0LL;
  uint64_t v113 = v19;
  uint64_t v114 = v16;
  uint64_t v112 = v27;
  uint64_t v29 = (uint64_t)v120;
  uint64_t v111 = v24;
  while (1)
  {
    if (v28 >= *(void *)(v27 + 16)) {
      goto LABEL_55;
    }
    uint64_t v40 = *(void *)(v24 + 72);
    unint64_t v122 = v28;
    sub_10001DC4C(v115 + v40 * v28, v29, type metadata accessor for FetchRequestBeacon);
    uint64_t v41 = sub_1005FA9D8();
    uint64_t v43 = v42;
    uint64_t v44 = *v123;
    if (*(void *)(*v123 + 16) && (unint64_t v45 = sub_10030D124(v29), (v46 & 1) != 0))
    {
      int64_t v47 = *(void **)(*(void *)(v44 + 56) + 8 * v45);
      swift_bridgeObjectRetain(v47);
    }

    else
    {
      int64_t v47 = (void *)sub_1004121B4((uint64_t)_swiftEmptyArrayStorage);
    }

    v126[0] = (uint64_t)v41;
    sub_1001840C0(v43);
    uint64_t v48 = *(void *)(v126[0] + 16);
    uint64_t v121 = v126[0];
    if (v48) {
      break;
    }
LABEL_3:
    unint64_t v30 = v122 + 1;
    swift_bridgeObjectRelease();
    uint64_t v32 = (uint64_t)v117;
    uint64_t v31 = v118;
    uint64_t v33 = v119;
    uint64_t v34 = (uint64_t)v120;
    (*(void (**)(char *, char *, uint64_t))(v118 + 16))(v117, v120, v119);
    swift_bridgeObjectRetain(v47);
    uint64_t v35 = v123;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v123);
    v126[0] = *v35;
    *uint64_t v35 = 0x8000000000000000LL;
    sub_10005DD3C((uint64_t)v47, v32, isUniquelyReferenced_nonNull_native);
    *uint64_t v35 = v126[0];
    swift_bridgeObjectRelease();
    uint64_t v29 = v34;
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v33);
    sub_100018C68(v34, type metadata accessor for FetchRequestBeacon);
    swift_bridgeObjectRelease();
    unint64_t v28 = v30;
    BOOL v37 = v30 == v116;
    unint64_t v39 = (unint64_t)v113;
    uint64_t v38 = v114;
    uint64_t v27 = v112;
    uint64_t v24 = v111;
    if (v37)
    {
      swift_bridgeObjectRelease();
      uint64_t v77 = v110;
      uint64_t v78 = v109;
      if (!v110)
      {
        swift_bridgeObjectRelease();
        uint64_t v91 = type metadata accessor for LocationFetcher(0LL);
        uint64_t v92 = v107;
        uint64_t v93 = v108;
        uint64_t v94 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 16))(v107, v78 + *(int *)(v91 + 32), v108);
        uint64_t v95 = (os_log_s *)Logger.logObject.getter(v94);
        os_log_type_t v96 = static os_log_type_t.error.getter(v95);
        if (os_log_type_enabled(v95, v96))
        {
          uint64_t v97 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v97 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v95,  v96,  "Fatal: Error fetching - while policy specified from ACSN and no server interaction controller provided.",  v97,  2u);
          uint64_t v98 = v97;
          uint64_t v93 = v108;
          swift_slowDealloc(v98, -1LL, -1LL);
        }

        return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v92, v93);
      }

      swift_retain();
      uint64_t v50 = v105;
      uint64_t v79 = sub_10021E288(v27, v78 + 24, v77);
      if (v50)
      {
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v80 = type metadata accessor for LocationFetcher(0LL);
        uint64_t v10 = v108;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v38 + 16))(v39, v78 + *(int *)(v80 + 32), v108);
        swift_errorRetain(v50);
        uint64_t v81 = swift_errorRetain(v50);
        uint64_t v68 = Logger.logObject.getter(v81);
        os_log_type_t v82 = static os_log_type_t.error.getter(v68);
        if (os_log_type_enabled((os_log_t)v68, v82))
        {
          int64_t v83 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v84 = swift_slowAlloc(32LL, -1LL);
          uint64_t v125 = v50;
          v126[0] = v84;
          *(_DWORD *)int64_t v83 = 136446210;
          swift_errorRetain(v50);
          uint64_t v85 = sub_100004AEC((uint64_t *)&unk_1009A5470);
          uint64_t v86 = String.init<A>(describing:)(&v125, v85);
          uint64_t v125 = sub_1003F11D4(v86, v87, v126);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, v126, v83 + 4, v83 + 12);
          swift_bridgeObjectRelease();
          swift_errorRelease(v50);
          swift_errorRelease(v50);
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v68, v82, "Error fetching: %{public}s.", v83, 0xCu);
          swift_arrayDestroy(v84, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v84, -1LL, -1LL);
          swift_slowDealloc(v83, -1LL, -1LL);

          swift_errorRelease(v50);
          unint64_t v88 = (unint64_t)v113;
          uint64_t v89 = *(uint64_t (**)(unint64_t, uint64_t))(v114 + 8);
        }

        else
        {
LABEL_49:
          swift_errorRelease(v50);
          swift_errorRelease(v50);
          swift_errorRelease(v50);

          uint64_t v89 = *(uint64_t (**)(unint64_t, uint64_t))(v38 + 8);
          unint64_t v88 = v39;
        }

        return v89(v88, v10);
      }

      uint64_t v99 = v79;
      swift_bridgeObjectRelease();
      uint64_t v100 = v104;
      swift_retain();
      uint64_t v101 = v106;
      swift_bridgeObjectRetain(v106);
      sub_10023FDC0(v99, v103, v100, v101);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }

  int64_t v49 = (uint64_t *)(v126[0] + 40);
  while (1)
  {
    uint64_t v38 = *(v49 - 1);
    uint64_t v50 = *v49;
    uint64_t v51 = v47[2];
    swift_bridgeObjectRetain(*v49);
    if (v51)
    {
      uint64_t v52 = sub_10030CF14(v38, v50);
      if ((v53 & 1) != 0)
      {
        uint64_t v54 = *(void *)(v47[7] + 8 * v52);
        uint64_t v55 = v54 + 1;
        if (__OFADD__(v54, 1LL)) {
          goto LABEL_52;
        }
        uint64_t v56 = swift_isUniquelyReferenced_nonNull_native(v47);
        v126[0] = (uint64_t)v47;
        unint64_t v58 = sub_10030CF14(v38, v50);
        uint64_t v59 = v47[2];
        BOOL v60 = (v57 & 1) == 0;
        uint64_t v61 = v59 + v60;
        if (__OFADD__(v59, v60)) {
          goto LABEL_53;
        }
        uint64_t v10 = v57;
        if (v47[3] >= v61)
        {
          if ((v56 & 1) != 0)
          {
            int64_t v47 = (void *)v126[0];
            if ((v57 & 1) != 0) {
              goto LABEL_34;
            }
          }

          else
          {
            sub_100061B10();
            int64_t v47 = (void *)v126[0];
            if ((v10 & 1) != 0) {
              goto LABEL_34;
            }
          }
        }

        else
        {
          sub_100049DAC(v61, v56);
          uint64_t v62 = sub_10030CF14(v38, v50);
          if ((v10 & 1) != (v63 & 1)) {
            goto LABEL_56;
          }
          unint64_t v58 = v62;
          int64_t v47 = (void *)v126[0];
          if ((v10 & 1) != 0)
          {
LABEL_34:
            *(void *)(v47[7] + 8 * v58) = v55;
            goto LABEL_12;
          }
        }

        v47[(v58 >> 6) + 8] |= 1LL << v58;
        __n128 v64 = (uint64_t *)(v47[6] + 16 * v58);
        *__n128 v64 = v38;
        v64[1] = v50;
        *(void *)(v47[7] + 8 * v58) = v55;
        uint64_t v65 = v47[2];
        BOOL v66 = __OFADD__(v65, 1LL);
        uint64_t v67 = v65 + 1;
        if (v66) {
          goto LABEL_54;
        }
        goto LABEL_31;
      }
    }

    uint64_t v68 = swift_isUniquelyReferenced_nonNull_native(v47);
    v126[0] = (uint64_t)v47;
    unint64_t v39 = sub_10030CF14(v38, v50);
    uint64_t v70 = v47[2];
    BOOL v71 = (v69 & 1) == 0;
    uint64_t v72 = v70 + v71;
    if (__OFADD__(v70, v71))
    {
      __break(1u);
      goto LABEL_49;
    }

    uint64_t v10 = v69;
    if (v47[3] < v72) {
      break;
    }
    if ((v68 & 1) != 0)
    {
      int64_t v47 = (void *)v126[0];
      if ((v69 & 1) == 0) {
        goto LABEL_30;
      }
    }

    else
    {
      sub_100061B10();
      int64_t v47 = (void *)v126[0];
      if ((v10 & 1) == 0) {
        goto LABEL_30;
      }
    }

uint64_t sub_10021DAC0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v81 = a5;
  uint64_t v79 = a4;
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v77 = (uint64_t)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v80 = (char *)&v74 - v11;
  uint64_t v82 = type metadata accessor for UUID(0LL);
  uint64_t v78 = *(void *)(v82 - 8);
  uint64_t v12 = __chkstk_darwin(v82);
  uint64_t v76 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v83 = (uint64_t)&v74 - v14;
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0LL);
  uint64_t v16 = __chkstk_darwin(RequestBeacon);
  uint64_t v18 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v74 - v19;
  uint64_t v86 = type metadata accessor for Logger(0LL);
  uint64_t v21 = *(void *)(v86 - 8);
  uint64_t v22 = __chkstk_darwin(v86);
  uint64_t v24 = (char *)&v74 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v74 - v25;
  swift_beginAccess(a2, v90, 0LL, 0LL);
  uint64_t v27 = *a2;
  uint64_t v88 = a1;
  swift_bridgeObjectRetain(v27);
  BOOL v28 = sub_1004E98E4((uint64_t (*)(char *))sub_100246EF4, (BOOL)v87, v27);
  swift_bridgeObjectRelease();
  uint64_t v29 = a3 + *(int *)(type metadata accessor for LocationFetcher(0LL) + 32);
  uint64_t v85 = v21;
  unint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  BOOL v84 = v28;
  if (v28)
  {
    v30(v24, v29, v86);
    uint64_t v31 = sub_10001DC4C(a1, (uint64_t)v18, type metadata accessor for FetchRequestBeacon);
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v33 = static os_log_type_t.default.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = swift_slowAlloc(22LL, -1LL);
      uint64_t v35 = swift_slowAlloc(32LL, -1LL);
      v89[0] = v35;
      *(_DWORD *)uint64_t v34 = 141558275;
      uint64_t v91 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v34 + 4, v34 + 12);
      *(_WORD *)(v34 + 12) = 2081;
      uint64_t v36 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter(v82, v36);
      uint64_t v91 = sub_1003F11D4(v37, v38, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v34 + 14, v34 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v18, type metadata accessor for FetchRequestBeacon);
      _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "Skipping completed beacon %{private,mask.hash}s which has enough locations.",  (uint8_t *)v34,  0x16u);
      swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1LL, -1LL);
      swift_slowDealloc(v34, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v18, type metadata accessor for FetchRequestBeacon);
    }

    (*(void (**)(char *, uint64_t))(v85 + 8))(v24, v86);
    return !v84;
  }

  v30(v26, v29, v86);
  uint64_t v39 = sub_10001DC4C(a1, (uint64_t)v20, type metadata accessor for FetchRequestBeacon);
  uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
  os_log_type_t v41 = static os_log_type_t.default.getter(v40);
  uint64_t v42 = a1;
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v43 = swift_slowAlloc(22LL, -1LL);
    uint64_t v44 = swift_slowAlloc(32LL, -1LL);
    v89[0] = v44;
    *(_DWORD *)uint64_t v43 = 141558275;
    uint64_t v91 = 1752392040LL;
    uint64_t v75 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v43 + 4, v43 + 12);
    *(_WORD *)(v43 + 12) = 2081;
    uint64_t v74 = v43 + 14;
    uint64_t v45 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v46 = v82;
    uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter(v82, v45);
    uint64_t v91 = sub_1003F11D4(v47, v48, v89);
    uint64_t v42 = v75;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v74, v43 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v20, type metadata accessor for FetchRequestBeacon);
    _os_log_impl( (void *)&_mh_execute_header,  v40,  v41,  "Can continue fetching beacon %{private,mask.hash}s.",  (uint8_t *)v43,  0x16u);
    swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1LL, -1LL);
    swift_slowDealloc(v43, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v85 + 8))(v26, v86);
  }

  else
  {
    sub_100018C68((uint64_t)v20, type metadata accessor for FetchRequestBeacon);

    (*(void (**)(char *, uint64_t))(v85 + 8))(v26, v86);
    uint64_t v46 = v82;
  }

  int64_t v49 = v79;
  uint64_t v50 = (uint64_t)v80;
  uint64_t v51 = v78;
  uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 16);
  v52(v83, v42, v46);
  swift_beginAccess(v49, v89, 32LL, 0LL);
  uint64_t v53 = *v49;
  uint64_t v54 = v46;
  if (*(void *)(*v49 + 16))
  {
    unint64_t v55 = sub_10030D124(v42);
    uint64_t v56 = v81;
    if ((v57 & 1) != 0) {
      uint64_t v58 = *(void *)(*(void *)(v53 + 56) + 8 * v55);
    }
    else {
      uint64_t v58 = 0LL;
    }
  }

  else
  {
    uint64_t v58 = 0LL;
    uint64_t v56 = v81;
  }

  uint64_t result = swift_endAccess(v89);
  if (!__OFADD__(v58, 1LL))
  {
    swift_beginAccess(v49, v89, 33LL, 0LL);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v49);
    uint64_t v91 = *v49;
    *int64_t v49 = 0x8000000000000000LL;
    uint64_t v61 = v83;
    sub_10005DD48(v58 + 1, v83, isUniquelyReferenced_nonNull_native);
    *int64_t v49 = v91;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v61, v54);
    swift_endAccess(v89);
    swift_beginAccess(v56, v89, 32LL, 0LL);
    uint64_t v62 = *v56;
    if (*(void *)(*v56 + 16) && (unint64_t v63 = sub_10030D124(v42), (v64 & 1) != 0))
    {
      unint64_t v65 = v63;
      uint64_t v66 = *(void *)(v62 + 56);
      uint64_t v67 = type metadata accessor for Date(0LL);
      uint64_t v68 = *(void *)(v67 - 8);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v68 + 16))( v50,  v66 + *(void *)(v68 + 72) * v65,  v67);
      uint64_t v69 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v68 + 56);
      uint64_t v56 = v81;
      v69(v50, 0LL, 1LL, v67);
    }

    else
    {
      uint64_t v67 = type metadata accessor for Date(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56LL))(v50, 1LL, 1LL, v67);
    }

    swift_endAccess(v89);
    type metadata accessor for Date(0LL);
    uint64_t v70 = *(void *)(v67 - 8);
    int v71 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v70 + 48))(v50, 1LL, v67);
    sub_100015794(v50, (uint64_t *)&unk_10099D720);
    if (v71 == 1)
    {
      uint64_t v72 = (uint64_t)v76;
      v52((uint64_t)v76, v42, v54);
      uint64_t v73 = v77;
      static Date.trustedNow.getter(v77);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v70 + 56))(v73, 0LL, 1LL, v67);
      swift_beginAccess(v56, v89, 33LL, 0LL);
      sub_100045390(v73, v72);
      swift_endAccess(v89);
    }

    return !v84;
  }

  __break(1u);
  return result;
}

uint64_t sub_10021E288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = type metadata accessor for LocationFetcher(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a3;
  uint64_t v13 = v5;
  uint64_t v14 = sub_100222C20(v12, a1);
  if (!v4)
  {
    uint64_t v15 = v14;
    uint64_t v37 = 0LL;
    uint64_t v16 = dispatch_group_create();
    dispatch_group_enter(v16);
    uint64_t v17 = swift_allocObject(&unk_10094ABF0, 24LL, 7LL);
    uint64_t v40 = a1;
    uint64_t v18 = v17;
    *(void *)(v17 + swift_weakDestroy(v0 + 16) = 0LL;
    os_log_type_t v41 = (uint64_t *)(v17 + 16);
    uint64_t v42 = v15;
    sub_10001DC4C(v5, (uint64_t)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL), type metadata accessor for LocationFetcher);
    uint64_t v19 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v20 = (v19 + 16) & ~v19;
    uint64_t v38 = v10 + 7;
    uint64_t v39 = v19 | 7;
    unint64_t v21 = (v10 + 7 + v20) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v23 = swift_allocObject(&unk_10094AC18, v22 + 8, v19 | 7);
    sub_10002218C((uint64_t)v11, v23 + v20, type metadata accessor for LocationFetcher);
    *(void *)(v23 + v21) = v18;
    *(void *)(v23 + v22) = v16;
    uint64_t v45 = v18;
    swift_retain();
    uint64_t v24 = v16;
    Future.addFailure(block:)(sub_10024666C, v23);
    swift_release();
    swift_release();
    uint64_t v25 = swift_allocObject(&unk_10094AAD8, 24LL, 7LL);
    *(void *)(v25 + swift_weakDestroy(v0 + 16) = &_swiftEmptyDictionarySingleton;
    uint64_t v36 = v25 + 16;
    sub_10001DC4C(v5, (uint64_t)v11, type metadata accessor for LocationFetcher);
    uint64_t v26 = (v19 + 24) & ~v19;
    unint64_t v27 = (v38 + v26) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v28 = (v27 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v29 = swift_allocObject(&unk_10094AC40, v28 + 8, v39);
    *(void *)(v29 + swift_weakDestroy(v0 + 16) = v25;
    sub_10002218C((uint64_t)v11, v29 + v26, type metadata accessor for LocationFetcher);
    uint64_t v30 = v40;
    *(void *)(v29 + v27) = v40;
    *(void *)(v29 + v28) = v24;
    uint64_t v31 = v24;
    swift_retain();
    swift_bridgeObjectRetain(v30);
    Future.addSuccess(block:)(sub_1002467B8, v29);
    swift_release();
    swift_release();
    OS_dispatch_group.wait()();
    uint64_t v32 = v41;
    swift_beginAccess(v41, v44, 0LL, 0LL);
    uint64_t v13 = *v32;
    if (*v32)
    {
      uint64_t v33 = swift_errorRetain(*v32);
      swift_willThrow(v33);
      swift_release();
    }

    else
    {
      swift_release();

      swift_beginAccess(v36, v43, 0LL, 0LL);
      uint64_t v13 = *(void *)(v25 + 16);
      swift_bridgeObjectRetain(v13);
    }

    swift_release();
    swift_release();
  }

  return v13;
}

uint64_t sub_10021E578(void *a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for LocationFetcher(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (void **)((char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = v3 + 3;
  uint64_t v12 = v3[6];
  uint64_t v13 = v3[7];
  sub_100012ED8(v3 + 3, v12);
  unint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 56))(v12, v13);
  uint64_t v59 = a1;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(a1);
  sub_100242414(&v59, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v56 = v59;
  uint64_t v59 = 0LL;
  char v57 = &_swiftEmptyDictionarySingleton;
  v58[0] = &_swiftEmptyDictionarySingleton;
  uint64_t v15 = v4[6];
  uint64_t v16 = v4[7];
  sub_100012ED8(v11, v15);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 32))(v15, v16);
  uint64_t v18 = v17;
  uint64_t v19 = *(void *)(v17 + 16);
  if (!v19)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    sub_10001DC4C((uint64_t)v4, (uint64_t)v10, type metadata accessor for LocationFetcher);
    goto LABEL_24;
  }

  unint64_t v55 = v11;
  swift_bridgeObjectRetain(v17);
  uint64_t v20 = 0LL;
  while (1)
  {
    int v21 = *(unsigned __int8 *)(v18 + v20 + 32);
    uint64_t v22 = 0x7261646E6F636553LL;
    unint64_t v23 = 0xE900000000000079LL;
    if (v21 != 1) {
      break;
    }
LABEL_6:
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, 0x7972616D697250LL, 0xE700000000000000LL, 0LL);
    swift_bridgeObjectRelease();
    if ((v24 & 1) != 0) {
      goto LABEL_13;
    }
    if (v19 == ++v20)
    {
      swift_bridgeObjectRelease_n(v18, 2LL);
      uint64_t v11 = v55;
      goto LABEL_10;
    }
  }

  if (v21 == 2)
  {
    uint64_t v22 = 0x6F4C657275636553LL;
    unint64_t v23 = 0xEF736E6F69746163LL;
    goto LABEL_6;
  }

  swift_bridgeObjectRelease();
LABEL_13:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001DC4C((uint64_t)v4, (uint64_t)v10, type metadata accessor for LocationFetcher);
  uint64_t v25 = v10[6];
  uint64_t v26 = v10[7];
  sub_100012ED8(v10 + 3, v25);
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 32))(v25, v26);
  uint64_t v28 = v27;
  uint64_t v29 = *(void *)(v27 + 16);
  if (!v29)
  {
    swift_bridgeObjectRelease();
LABEL_23:
    uint64_t v11 = v55;
LABEL_24:
    sub_100018C68((uint64_t)v10, type metadata accessor for LocationFetcher);
    goto LABEL_25;
  }

  swift_bridgeObjectRetain(v27);
  uint64_t v30 = 0LL;
  while (!*(_BYTE *)(v28 + v30 + 32))
  {
    unint64_t v32 = 0xE700000000000000LL;
    uint64_t v31 = 0x7972616D697250LL;
LABEL_19:
    char v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, 0x7261646E6F636553LL, 0xE900000000000079LL, 0LL);
    swift_bridgeObjectRelease();
    if ((v33 & 1) != 0) {
      goto LABEL_37;
    }
    if (v29 == ++v30)
    {
      swift_bridgeObjectRelease_n(v28, 2LL);
      goto LABEL_23;
    }
  }

  if (*(_BYTE *)(v28 + v30 + 32) == 2)
  {
    uint64_t v31 = 0x6F4C657275636553LL;
    unint64_t v32 = 0xEF736E6F69746163LL;
    goto LABEL_19;
  }

  swift_bridgeObjectRelease();
LABEL_37:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100018C68((uint64_t)v10, type metadata accessor for LocationFetcher);
  uint64_t v11 = v55;
  uint64_t v47 = v56[2];
  if (!v47)
  {
LABEL_25:
    uint64_t v34 = v4[6];
    uint64_t v35 = v4[7];
    sub_100012ED8(v11, v34);
    uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 16))(v34, v35);
    uint64_t v37 = v4[6];
    uint64_t v38 = v4[7];
    sub_100012ED8(v11, v37);
    uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 32))(v37, v38);
    if (*(void *)(v39 + 16)) {
      int v40 = *(unsigned __int8 *)(v39 + 32);
    }
    else {
      int v40 = 0;
    }
    swift_bridgeObjectRelease();
    int v41 = 0;
LABEL_29:
    uint64_t v42 = v56[2];
    if (v42)
    {
      uint64_t v43 = (os_log_s *)(v56 + 4);
      swift_retain();
      do
      {
        uint64_t v44 = objc_autoreleasePoolPush();
        sub_10022675C(v4, v43, v36, v40, &v59, v58, v41, (uint64_t *)&v57, a2, a3);
        objc_autoreleasePoolPop(v44);
        uint64_t v43 = (os_log_s *)((char *)v43 + 40);
        --v42;
      }

      while (v42);
      swift_release_n(v56, 2LL);
      uint64_t v45 = v57;
    }

    else
    {
      swift_release();
      uint64_t v45 = &_swiftEmptyDictionarySingleton;
    }

    swift_bridgeObjectRetain(v45);
    sub_100229700(&v59, v58, v36, (uint64_t)v45, a2, a3, 1);
    swift_bridgeObjectRelease_n(v45, 2LL);
    return swift_bridgeObjectRelease();
  }

  unint64_t v48 = v56 + 4;
  swift_retain();
  while (1)
  {
    uint64_t v49 = v48[3];
    uint64_t v50 = v48[4];
    sub_100012ED8(v48, v49);
    v48 += 5;
    if (!--v47)
    {
      swift_release();
      goto LABEL_25;
    }
  }

  swift_release();
  uint64_t v51 = sub_1007C1E34();
  if (v51 < 0)
  {
    __break(1u);
    goto LABEL_47;
  }

  uint64_t v52 = v51 + 1;
  if (__OFADD__(v51, 1LL))
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }

  uint64_t v53 = v4[6];
  uint64_t v54 = v4[7];
  sub_100012ED8(v11, v53);
  uint64_t v51 = sub_1003E2048(v53, v54);
  uint64_t v36 = v51 * v52;
  if ((unsigned __int128)(v51 * (__int128)v52) >> 64 == (v51 * v52) >> 63)
  {
    int v40 = 0;
    int v41 = 1;
    goto LABEL_29;
  }

uint64_t sub_10021EAD0(os_log_s *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v131 = a4;
  uint64_t v125 = a3;
  uint64_t v128 = a2;
  os_log_t v146 = a1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  os_log_type_t v123 = (char *)&v121 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v145 = type metadata accessor for Logger(0LL);
  uint64_t v136 = *(void *)(v145 - 8);
  __chkstk_darwin(v145);
  uint64_t v134 = (char *)&v121 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v8);
  BOOL v124 = (char *)&v121 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009A6610);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v126 = (char *)&v121 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v122 = (char *)&v121 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v133 = (uint64_t)&v121 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v143 = (uint64_t)&v121 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v130 = (char *)&v121 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v141 = (uint64_t)&v121 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v142 = (uint64_t)&v121 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v121 - v26;
  uint64_t v28 = __chkstk_darwin(v25);
  uint64_t v139 = (uint64_t)&v121 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v138 = (uint64_t)&v121 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v34 = (char *)&v121 - v33;
  __chkstk_darwin(v32);
  uint64_t v36 = (char *)&v121 - v35;
  uint64_t v37 = type metadata accessor for Date(0LL);
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v121 = (uint64_t)&v121 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v140 = (char *)&v121 - v42;
  __chkstk_darwin(v41);
  uint64_t v148 = (char *)&v121 - v43;
  uint64_t v135 = v10;
  uint64_t v44 = *(int *)(v10 + 48);
  uint64_t v45 = v5;
  uint64_t v46 = *(void (**)(void, void, void))(v5 + 16);
  os_log_t v47 = v146;
  uint64_t v144 = v4;
  uint64_t v48 = v4;
  uint64_t v49 = v46;
  v46(v36, v146, v48);
  uint64_t v50 = *(void *)((char *)v47 + v44);
  uint64_t v127 = v44;
  *(void *)&v36[v44] = v50;
  uint64_t v51 = v128;
  swift_beginAccess(v128, &v150, 32LL, 0LL);
  uint64_t v52 = *v51;
  uint64_t v53 = *(void *)(*v51 + 16);
  uint64_t v132 = (void (*)(uint64_t, os_log_t, uint64_t))v49;
  uint64_t v129 = (uint64_t)v27;
  if (v53 && (unint64_t v54 = sub_10030D124((uint64_t)v36), (v55 & 1) != 0))
  {
    uint64_t v56 = (uint64_t)v124;
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))( v124,  *(void *)(v52 + 56) + *(void *)(v38 + 72) * v54,  v37);
    uint64_t v57 = 0LL;
    uint64_t v58 = v136;
    uint64_t v59 = v45;
    uint64_t v60 = v38;
  }

  else
  {
    uint64_t v57 = 1LL;
    uint64_t v58 = v136;
    uint64_t v59 = v45;
    uint64_t v60 = v38;
    uint64_t v56 = (uint64_t)v124;
  }

  uint64_t v61 = v135;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56))(v56, v57, 1LL, v37);
  swift_endAccess(&v150);
  uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v56, 1LL, v37);
  uint64_t v147 = v37;
  uint64_t v137 = v60;
  if ((_DWORD)v62 == 1)
  {
    static Date.distantPast.getter(v62);
    sub_100015794(v56, (uint64_t *)&unk_10099D720);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v148, v56, v37);
  }

  uint64_t v63 = v125;
  uint64_t v64 = v144;
  uint64_t v128 = *(uint64_t **)(v59 + 8);
  ((void (*)(char *, uint64_t))v128)(v36, v144);
  uint64_t v65 = v63 + *(int *)(type metadata accessor for LocationFetcher(0LL) + 32);
  uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t))(v58 + 16);
  uint64_t v125 = v59;
  uint64_t v67 = v134;
  v66(v134, v65, v145);
  uint64_t v68 = v61;
  uint64_t v69 = *(int *)(v61 + 48);
  os_log_t v70 = v146;
  int v71 = v132;
  v132((uint64_t)v34, v146, v64);
  uint64_t v72 = *(void *)((char *)v70 + v127);
  *(void *)&v34[v69] = v72;
  sub_10001581C((uint64_t)v34, v138, &qword_1009A6610);
  sub_100015750((uint64_t)v34, v139, &qword_1009A6610);
  uint64_t v73 = *(int *)(v68 + 48);
  uint64_t v74 = v129;
  v71(v129, v70, v64);
  *(void *)(v74 + v73) = v72;
  sub_10001581C(v74, v142, &qword_1009A6610);
  uint64_t v75 = v74;
  uint64_t v76 = v64;
  sub_100015750(v75, v141, &qword_1009A6610);
  (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v140, v148, v147);
  uint64_t v77 = *(int *)(v68 + 48);
  uint64_t v78 = (uint64_t)v130;
  uint64_t v79 = (void (*)(char *, uint64_t, uint64_t))v71;
  v71((uint64_t)v130, v70, v76);
  *(void *)(v78 + v77) = v72;
  uint64_t v80 = v143;
  sub_10001581C(v78, v143, &qword_1009A6610);
  uint64_t v81 = v133;
  sub_100015750(v78, v133, &qword_1009A6610);
  swift_bridgeObjectRetain_n(v72, 3LL);
  uint64_t v82 = v131;
  uint64_t v83 = swift_retain_n(v131, 2LL);
  BOOL v84 = (os_log_s *)Logger.logObject.getter(v83);
  int v85 = static os_log_type_t.error.getter(v84);
  BOOL v86 = os_log_type_enabled(v84, (os_log_type_t)v85);
  unint64_t v87 = v148;
  if (v86)
  {
    LODWORD(v13sub_100032838(0, 7LL, 0) = v85;
    os_log_t v146 = v84;
    uint64_t v88 = swift_slowAlloc(52LL, -1LL);
    uint64_t v129 = swift_slowAlloc(32LL, -1LL);
    uint64_t v149 = v129;
    *(_DWORD *)uint64_t v88 = 134219011;
    uint64_t v89 = *(int *)(v135 + 48);
    uint64_t v90 = v122;
    uint64_t v91 = v138;
    uint64_t v92 = v144;
    v79(v122, v138, v144);
    uint64_t v93 = v79;
    uint64_t v94 = *(void *)(v91 + v89);
    *(void *)&v90[v89] = v94;
    uint64_t v95 = *(void *)(v94 + 16);
    os_log_type_t v96 = v128;
    ((void (*)(char *, uint64_t))v128)(v90, v92);
    sub_100015794(v91, &qword_1009A6610);
    uint64_t v150 = v95;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151, v88 + 4, v88 + 12);
    sub_100015794(v139, &qword_1009A6610);
    *(_WORD *)(v88 + 12) = 2160;
    uint64_t v150 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151, v88 + 14, v88 + 22);
    *(_WORD *)(v88 + 22) = 2081;
    uint64_t v139 = v88 + 24;
    uint64_t v97 = v142;
    v93(v90, v142, v92);
    uint64_t v98 = v123;
    (*(void (**)(char *, char *, uint64_t))(v125 + 32))(v123, v90, v92);
    uint64_t v99 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v100 = dispatch thunk of CustomStringConvertible.description.getter(v92, v99);
    unint64_t v102 = v101;
    ((void (*)(char *, uint64_t))v96)(v98, v92);
    uint64_t v150 = sub_1003F11D4(v100, v102, &v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151, v139, v88 + 32);
    swift_bridgeObjectRelease();
    sub_100015794(v141, &qword_1009A6610);
    sub_100015794(v97, &qword_1009A6610);
    *(_WORD *)(v88 + 32) = 2048;
    uint64_t v103 = v121;
    static Date.trustedNow.getter(v121);
    uint64_t v104 = v140;
    double v105 = Date.timeIntervalSince(_:)(v103);
    uint64_t v106 = *(void (**)(uint64_t, uint64_t))(v137 + 8);
    uint64_t v107 = v147;
    v106(v103, v147);
    uint64_t v150 = fabs(v105);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151, v88 + 34, v88 + 42);
    v106((uint64_t)v104, v107);
    *(_WORD *)(v88 + 42) = 2048;
    uint64_t v108 = v143;
    uint64_t v109 = *(int *)(v135 + 48);
    uint64_t v110 = (uint64_t)v126;
    v132((uint64_t)v126, (os_log_t)v143, v92);
    *(void *)(v110 + v109) = *(void *)(v108 + v109);
    swift_beginAccess(v82 + 16, &v150, 32LL, 0LL);
    uint64_t v111 = *(void *)(v82 + 16);
    if (*(void *)(v111 + 16))
    {
      unint64_t v112 = sub_10030D124(v110);
      uint64_t v113 = v128;
      if ((v114 & 1) != 0) {
        uint64_t v115 = *(void *)(*(void *)(v111 + 56) + 8 * v112);
      }
      else {
        uint64_t v115 = 0LL;
      }
    }

    else
    {
      uint64_t v115 = 0LL;
      uint64_t v113 = v128;
    }

    swift_endAccess(&v150);
    ((void (*)(char *, uint64_t))v113)(v126, v144);
    swift_release();
    sub_100015794(v143, &qword_1009A6610);
    uint64_t v150 = v115;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151, v88 + 44, v88 + 52);
    swift_release();
    sub_100015794(v133, &qword_1009A6610);
    os_log_t v119 = v146;
    _os_log_impl( (void *)&_mh_execute_header,  v146,  (os_log_type_t)v130,  "Unterminated fetch with %ld results for beacon %{private,mask.hash}s after %f seconds, %ld round trip(s).",  (uint8_t *)v88,  0x34u);
    uint64_t v120 = v129;
    swift_arrayDestroy(v129, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v120, -1LL, -1LL);
    swift_slowDealloc(v88, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v136 + 8))(v134, v145);
    return ((uint64_t (*)(char *, uint64_t))v106)(v148, v147);
  }

  else
  {
    swift_release();
    sub_100015794(v80, &qword_1009A6610);
    sub_100015794(v138, &qword_1009A6610);
    swift_release();

    sub_100015794(v81, &qword_1009A6610);
    uint64_t v116 = *(void (**)(char *, uint64_t))(v137 + 8);
    uint64_t v117 = v147;
    v116(v140, v147);
    sub_100015794(v141, &qword_1009A6610);
    sub_100015794(v142, &qword_1009A6610);
    sub_100015794(v139, &qword_1009A6610);
    (*(void (**)(char *, uint64_t))(v136 + 8))(v67, v145);
    return ((uint64_t (*)(char *, uint64_t))v116)(v87, v117);
  }

uint64_t sub_10021F578(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = *(void *)(a2 + 8);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL))(v11, a1, v13);
  uint64_t v14 = &v11[*(int *)(v8 + 20)];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL))(v14, a3, v15);
  v11[*(int *)(v8 + 24)] = a4;
  uint64_t v16 = sub_100004AEC(&qword_10099D318);
  uint64_t v17 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v18 = (v17 + 32) & ~v17;
  uint64_t v19 = swift_allocObject(v16, v18 + *(void *)(v9 + 72), v17 | 7);
  *(_OWORD *)(v19 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  sub_10001DC4C((uint64_t)v11, v19 + v18, type metadata accessor for BeaconObservation);
  type metadata accessor for Transaction(0LL);
  uint64_t v22 = v12;
  uint64_t v23 = v19;
  uint64_t v24 = 0LL;
  uint64_t v25 = 0LL;
  static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.BeaconObservationStore.save",  57LL,  2LL,  sub_1000DF788);
  swift_bridgeObjectRelease();
  return sub_100018C68((uint64_t)v11, type metadata accessor for BeaconObservation);
}

unint64_t sub_10021F708(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v104 = a3;
  uint64_t v105 = 0xEC0000006E6F6974LL;
  uint64_t v100 = 0x61636F4C6E736361LL;
  uint64_t v10 = sub_100004AEC(&qword_1009A48E0);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v99 = (uint64_t)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v102 = (uint64_t)&v94 - v13;
  uint64_t v111 = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v103 = *(void *)(v111 - 8);
  uint64_t v14 = __chkstk_darwin(v111);
  uint64_t v109 = (uint64_t)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v106 = (char *)&v94 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v98 = (uint64_t)&v94 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v94 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v94 - v24;
  __chkstk_darwin(v23);
  uint64_t v101 = (uint64_t)&v94 - v26;
  uint64_t v27 = a1[6];
  uint64_t v28 = a1[7];
  sub_100012ED8(a1 + 3, v27);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v28 + 64))(v27, v28) & 1) != 0)
  {
    uint64_t v95 = a5;
    uint64_t v96 = a4;
    uint64_t v97 = v5;
    uint64_t v29 = _swiftEmptyArrayStorage;
    v110[0] = _swiftEmptyArrayStorage;
    uint64_t v30 = *(void *)(a2 + 16);
    swift_bridgeObjectRetain(a2);
    uint64_t v94 = a2;
    if (v30)
    {
      uint64_t v31 = *(void *)(v103 + 72);
      unint64_t v108 = (*(unsigned __int8 *)(v103 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80);
      uint64_t v32 = a2 + v108;
      uint64_t v33 = _swiftEmptyArrayStorage;
      uint64_t v34 = type metadata accessor for BeaconEstimatedLocation;
      uint64_t v35 = v30;
      uint64_t v36 = (int *)v111;
      uint64_t v107 = v30;
      do
      {
        sub_10001DC4C(v32, (uint64_t)v25, v34);
        if (v25[v36[11]] == 15)
        {
          uint64_t v37 = v34;
          uint64_t v38 = v22;
          uint64_t v39 = v37;
          sub_10002218C((uint64_t)v25, (uint64_t)v22, v37);
          if ((swift_isUniquelyReferenced_nonNull_native(v33) & 1) == 0) {
            sub_100032D0C(0, v33[2] + 1LL, 1);
          }
          uint64_t v33 = (void *)v110[0];
          unint64_t v41 = *(void *)(v110[0] + 16LL);
          unint64_t v40 = *(void *)(v110[0] + 24LL);
          if (v41 >= v40 >> 1)
          {
            sub_100032D0C(v40 > 1, v41 + 1, 1);
            uint64_t v33 = (void *)v110[0];
          }

          v33[2] = v41 + 1;
          uint64_t v42 = (uint64_t)v33 + v108 + v41 * v31;
          uint64_t v22 = v38;
          uint64_t v43 = (uint64_t)v38;
          uint64_t v34 = v39;
          sub_10002218C(v43, v42, v39);
          uint64_t v36 = (int *)v111;
          uint64_t v30 = v107;
        }

        else
        {
          sub_100018C68((uint64_t)v25, v34);
        }

        v32 += v31;
        --v35;
      }

      while (v35);
      uint64_t v44 = (void *)v110[0];
      a2 = v94;
      uint64_t v29 = _swiftEmptyArrayStorage;
    }

    else
    {
      uint64_t v44 = _swiftEmptyArrayStorage;
      uint64_t v36 = (int *)v111;
    }

    swift_bridgeObjectRelease();
    uint64_t v45 = v102;
    sub_1000F0BF0((uint64_t)v44, v102);
    swift_release();
    uint64_t v46 = *(unsigned int (**)(uint64_t, uint64_t, int *))(v103 + 48);
    if (v46(v45, 1LL, v36) == 1)
    {
      sub_100015794(v45, &qword_1009A48E0);
    }

    else
    {
      sub_10002218C(v45, v101, type metadata accessor for BeaconEstimatedLocation);
      v110[0] = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(a2);
      if (v30)
      {
        unint64_t v47 = (*(unsigned __int8 *)(v103 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80);
        uint64_t v48 = *(void *)(v103 + 72);
        uint64_t v49 = a2 + v47;
        uint64_t v50 = _swiftEmptyArrayStorage;
        uint64_t v51 = (uint64_t)v106;
        do
        {
          sub_10001DC4C(v49, v51, type metadata accessor for BeaconEstimatedLocation);
          if (*(_BYTE *)(v51 + v36[11]) == 7)
          {
            sub_10002218C(v51, v109, type metadata accessor for BeaconEstimatedLocation);
            if ((swift_isUniquelyReferenced_nonNull_native(v50) & 1) == 0) {
              sub_100032D0C(0, v50[2] + 1LL, 1);
            }
            uint64_t v50 = (void *)v110[0];
            unint64_t v53 = *(void *)(v110[0] + 16LL);
            unint64_t v52 = *(void *)(v110[0] + 24LL);
            if (v53 >= v52 >> 1)
            {
              sub_100032D0C(v52 > 1, v53 + 1, 1);
              uint64_t v50 = (void *)v110[0];
            }

            void v50[2] = v53 + 1;
            sub_10002218C(v109, (uint64_t)v50 + v47 + v53 * v48, type metadata accessor for BeaconEstimatedLocation);
            uint64_t v36 = (int *)v111;
            uint64_t v51 = (uint64_t)v106;
          }

          else
          {
            sub_100018C68(v51, type metadata accessor for BeaconEstimatedLocation);
          }

          v49 += v48;
          --v30;
        }

        while (v30);
        uint64_t v29 = (void *)v110[0];
      }

      swift_bridgeObjectRelease();
      uint64_t v54 = v99;
      sub_1000F0BF0((uint64_t)v29, v99);
      swift_release();
      if (v46(v54, 1LL, v36) == 1)
      {
        sub_100018C68(v101, type metadata accessor for BeaconEstimatedLocation);
        sub_100015794(v54, &qword_1009A48E0);
      }

      else
      {
        uint64_t v55 = v98;
        sub_10002218C(v54, v98, type metadata accessor for BeaconEstimatedLocation);
        uint64_t v56 = v101;
        char v57 = static Date.> infix(_:_:)(v101 + v36[10], v55 + v36[10]);
        if ((v57 & 1) != 0) {
          uint64_t v58 = 0xD000000000000013LL;
        }
        else {
          uint64_t v58 = 0x61636F4C6E736361LL;
        }
        uint64_t v59 = v36[9];
        double v60 = *(double *)(v56 + v59);
        double v61 = *(double *)(v55 + v59);
        if ((v57 & 1) != 0) {
          uint64_t v62 = 0x800000010085A9C0LL;
        }
        else {
          uint64_t v62 = 0xEC0000006E6F6974LL;
        }
        if (v61 >= v60) {
          uint64_t v63 = 0x61636F4C6E736361LL;
        }
        else {
          uint64_t v63 = 0xD000000000000013LL;
        }
        if (v61 >= v60) {
          uint64_t v64 = 0xEC0000006E6F6974LL;
        }
        else {
          uint64_t v64 = 0x800000010085A9C0LL;
        }
        id v65 = [objc_allocWithZone(CLLocation) initWithLatitude:*(double *)(v56 + v36[7]) longitude:*(double *)(v56 + v36[8])];
        uint64_t v66 = v36;
        uint64_t v67 = v65;
        id v68 = [objc_allocWithZone(CLLocation) initWithLatitude:*(double *)(v55 + v66[7]) longitude:*(double *)(v55 + v66[8])];
        [v67 distanceFromLocation:v68];
        sub_10071EBE4(v58, v62, v63, v64, v69, vabdd_f64(v60, v61));
        swift_bridgeObjectRelease();

        sub_100018C68(v55, type metadata accessor for BeaconEstimatedLocation);
        sub_100018C68(v56, type metadata accessor for BeaconEstimatedLocation);
        uint64_t v100 = v58;
        uint64_t v105 = v62;
      }
    }

    a4 = v96;
    a5 = v95;
  }

  uint64_t v70 = *v104;
  if (!*(void *)(*v104 + 16)) {
    return swift_bridgeObjectRelease();
  }
  unint64_t result = sub_10030D124(a4);
  if ((v72 & 1) == 0) {
    return swift_bridgeObjectRelease();
  }
  int64_t v73 = 0LL;
  uint64_t v74 = 0LL;
  uint64_t v75 = *(void *)(*(void *)(v70 + 56) + 8 * result);
  uint64_t v76 = 1LL << *(_BYTE *)(v75 + 32);
  uint64_t v77 = -1LL;
  if (v76 < 64) {
    uint64_t v77 = ~(-1LL << v76);
  }
  uint64_t v78 = v75 + 64;
  unint64_t v79 = v77 & *(void *)(v75 + 64);
  int64_t v80 = (unint64_t)(v76 + 63) >> 6;
  while (1)
  {
    if (v79)
    {
      unint64_t v81 = __clz(__rbit64(v79));
      v79 &= v79 - 1;
      unint64_t v82 = v81 | (v73 << 6);
      goto LABEL_49;
    }

    int64_t v85 = v73 + 1;
    if (__OFADD__(v73, 1LL)) {
      goto LABEL_77;
    }
    if (v85 >= v80) {
      break;
    }
    unint64_t v86 = *(void *)(v78 + 8 * v85);
    ++v73;
    if (!v86)
    {
      int64_t v73 = v85 + 1;
      if (v85 + 1 >= v80) {
        break;
      }
      unint64_t v86 = *(void *)(v78 + 8 * v73);
      if (!v86)
      {
        int64_t v73 = v85 + 2;
        if (v85 + 2 >= v80) {
          break;
        }
        unint64_t v86 = *(void *)(v78 + 8 * v73);
        if (!v86)
        {
          int64_t v73 = v85 + 3;
          if (v85 + 3 >= v80) {
            break;
          }
          unint64_t v86 = *(void *)(v78 + 8 * v73);
          if (!v86)
          {
            int64_t v73 = v85 + 4;
            if (v85 + 4 >= v80) {
              break;
            }
            unint64_t v86 = *(void *)(v78 + 8 * v73);
            if (!v86)
            {
              int64_t v87 = v85 + 5;
              if (v87 >= v80) {
                break;
              }
              unint64_t v86 = *(void *)(v78 + 8 * v87);
              if (!v86)
              {
                while (1)
                {
                  int64_t v73 = v87 + 1;
                  if (__OFADD__(v87, 1LL)) {
                    goto LABEL_78;
                  }
                  if (v73 >= v80) {
                    goto LABEL_69;
                  }
                  unint64_t v86 = *(void *)(v78 + 8 * v73);
                  ++v87;
                  if (v86) {
                    goto LABEL_68;
                  }
                }
              }

              int64_t v73 = v87;
            }
          }
        }
      }
    }

LABEL_69:
  double v88 = (double)*(uint64_t *)(v75 + 16) / (double)v74;
  if (v88 > 1.001)
  {
    swift_beginAccess(a5, v110, 32LL, 0LL);
    uint64_t v89 = *a5;
    if (*(void *)(*a5 + 16) && (unint64_t v90 = sub_10030D124(a4), (v91 & 1) != 0)) {
      uint64_t v92 = *(void *)(*(void *)(v89 + 56) + 8 * v90);
    }
    else {
      uint64_t v92 = 0LL;
    }
    uint64_t v93 = v100;
    swift_endAccess(v110);
    sub_10071ED4C(v93, v105, v92, v74, v88);
  }

  return swift_bridgeObjectRelease();
}

      sub_100018C68(v117, v115);
      v114 += v221;
      if (!--v112) {
        goto LABEL_82;
      }
    }

    sub_100015794(*(void *)(v0 + 240), (uint64_t *)&unk_1009A34D0);
LABEL_76:
    uint64_t v141 = *(void *)(v0 + 184);
    uint64_t v142 = *(void *)(v0 + 144);
    uint64_t v143 = *(void *)(v0 + 136);
    sub_10001DC4C(v141, *(void *)(v0 + 152), v115);
    sub_10001DC4C(v141, v142, v115);
    uint64_t v144 = sub_10001DC4C(v141, v143, v115);
    uint64_t v145 = (os_log_s *)Logger.logObject.getter(v144);
    os_log_t v146 = static os_log_type_t.default.getter(v145);
    uint64_t v147 = os_log_type_enabled(v145, v146);
    uint64_t v149 = *(void *)(v0 + 144);
    uint64_t v148 = *(void *)(v0 + 152);
    uint64_t v150 = *(void *)(v0 + 136);
    if (v147)
    {
      __int128 v199 = v145;
      uint64_t v151 = v115;
      uint64_t v152 = swift_slowAlloc(24LL, -1LL);
      int v203 = swift_slowAlloc(32LL, -1LL);
      v223[0] = v203;
      *(_DWORD *)uint64_t v152 = 136315650;
      uint64_t v153 = URL.path.getter(v203);
      *(void *)(v152 + 4) = sub_1003F11D4(v153, v154, v223);
      swift_bridgeObjectRelease();
      sub_100018C68(v148, v151);
      *(_WORD *)(v152 + 12) = 1024;
      uint64_t v155 = *(_DWORD *)(v188 + *(int *)(v192 + 20));
      sub_100018C68(v149, v151);
      *(_DWORD *)(v152 + 14) = v155;
      *(_WORD *)(v152 + 18) = 1024;
      uint64_t v156 = *(_DWORD *)(v186 + *(int *)(v192 + 20));
      sub_100018C68(v150, v151);
      *(_DWORD *)(v152 + 2sub_100032838(0, 7LL, 0) = v156;
      _os_log_impl((void *)&_mh_execute_header, v199, v146, "TOSS: %s [%u...%u]", (uint8_t *)v152, 0x18u);
      swift_arrayDestroy(v203, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v203, -1LL, -1LL);
      uint64_t v157 = v152;
      uint64_t v115 = v151;
      swift_slowDealloc(v157, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(*(void *)(v0 + 136), v115);
      sub_100018C68(v149, v115);
      sub_100018C68(v148, v115);
    }

    URL._bridgeToObjectiveC()(v158);
    uint64_t v160 = v159;
    *(void *)(v0 + 56) = 0LL;
    unint64_t v161 = [v215 removeItemAtURL:v159 error:v0 + 56];

    os_log_type_t v162 = *(void **)(v0 + 56);
    uint64_t v163 = *(void *)(v0 + 184);
    if (v161)
    {
      uint64_t v116 = v162;
    }

    else
    {
      uint64_t v164 = v162;
      uint64_t v165 = _convertNSErrorToError(_:)(v162);

      swift_willThrow(v166);
      swift_errorRelease(v165);
    }

    uint64_t v117 = v163;
    goto LABEL_69;
  }

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

    v59(&v69, &v68, &v67);
    return 1LL;
  }

uint64_t sub_10021FF4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[60] = a3;
  v4[61] = a4;
  v4[58] = a1;
  v4[59] = a2;
  uint64_t v5 = *(void *)(type metadata accessor for LocationFetcher(0LL) - 8);
  v4[62] = v5;
  uint64_t v6 = *(void *)(v5 + 64);
  v4[63] = v6;
  v4[64] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  v4[65] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[66] = v8;
  v4[67] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for BeaconIdentifier(0LL);
  v4[68] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[69] = v10;
  v4[70] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100220000, 0LL, 0LL);
}

uint64_t sub_100220000()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 320, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 96, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 120))
  {
    sub_100012EC0((__int128 *)(v0 + 96), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C878 + dword_10099C878);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C87C);
    *(void *)(v0 + 568) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1002200EC;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1002200EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 568LL);
  *(void *)(*(void *)v1 + 57sub_1001F5B54(*(void (**)(void *))(v0 + 16), *(void *)(v0 + 24), 6LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100220148, 0LL, 0LL);
}

uint64_t sub_100220148()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (!*(void *)(v0 + 576))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B1F0 != -1) {
      swift_once(&qword_10099B1F0, sub_1002193E4);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = sub_10000A720(v10, (uint64_t)qword_100A2A3E0);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "beaconsFromDisk could not get the ObservationStoreService.",  v14,  2u);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    uint64_t v15 = *(void (**)(void *))(v0 + 464);

    v15(&_swiftEmptyDictionarySingleton);
    goto LABEL_12;
  }

  uint64_t v2 = *(void *)(v0 + 480);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v0 + 584) = v3;
  if (!v3)
  {
    swift_release();
    uint64_t v16 = *(void (**)(__n128))(v0 + 464);
    __n128 v17 = swift_bridgeObjectRetain(&_swiftEmptyDictionarySingleton);
    v16(v17);
    swift_bridgeObjectRelease_n(&_swiftEmptyDictionarySingleton, 2LL);
LABEL_12:
    uint64_t v18 = *(void *)(v0 + 536);
    uint64_t v19 = *(void *)(v0 + 512);
    swift_task_dealloc(*(void *)(v0 + 560));
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v4 = *(void *)(v0 + 480);
  *(void *)(v0 + 608) = 0LL;
  *(void *)(v0 + 60sub_100032838(0, 7LL, 0) = &_swiftEmptyDictionarySingleton;
  *(void *)(v0 + 592) = 0LL;
  uint64_t v5 = v4 + 32;
  swift_bridgeObjectRetain(v4);
  sub_100013044(v5, v0 + 136);
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  uint64_t v6 = qword_100A2A710;
  *(void *)(v0 + 6swift_weakDestroy(v0 + 16) = qword_100A2A710;
  uint64_t v7 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc(v7);
  *(void *)(v0 + 624) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100220370;
  return unsafeBlocking<A>(_:)(v0 + 392, sub_100015814, v6, &type metadata for Configuration);
}

uint64_t sub_100220370()
{
  return swift_task_switch(sub_1002203D0, 0LL, 0LL);
}

uint64_t sub_1002203D0()
{
  uint64_t v1 = v0[49];
  uint64_t KeyPath = swift_getKeyPath(&unk_1007F7888);
  v0[79] = sub_1006A1DC4(KeyPath, v1);
  if ((v3 & 1) != 0)
  {
    _StringGuts.grow(_:)(40LL);
    v0[43] = 0LL;
    v0[44] = 0xE000000000000000LL;
    v12._object = (void *)0x800000010085A890LL;
    v12._countAndFlagsBits = 0xD000000000000026LL;
    String.append(_:)(v12);
    v0[46] = KeyPath;
    uint64_t v13 = sub_100004AEC(&qword_1009A65E0);
    _print_unlocked<A, B>(_:_:)( v0 + 46,  v0 + 43,  v13,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v0[43],  v0[44],  "searchpartyd/Configuration.swift",  32LL,  2LL,  24LL,  0);
  }

  else
  {
    uint64_t v4 = v0[70];
    uint64_t v5 = v0[67];
    uint64_t v6 = v0[66];
    uint64_t v7 = v0[65];
    swift_release();
    swift_bridgeObjectRelease();
    uid_t v8 = getuid();
    sub_1005E2270(v8);
    uint64_t v9 = v0[20];
    uint64_t v10 = v0[21];
    sub_100012ED8(v0 + 17, v9);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8LL) + 32LL))(v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v4, v5, v7);
    return swift_task_switch(sub_100220588, v0[72], 0LL);
  }

uint64_t sub_100220588()
{
  uint64_t v1 = v0[72];
  uint64_t v2 = v0[70];
  uint64_t v3 = v0[69];
  uint64_t v4 = sub_100004AEC(&qword_10099D350);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v4, v6 + *(void *)(v3 + 72), v5 | 7);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v8 = v7 + v6;
  sub_10001DC4C(v2, v8, type metadata accessor for BeaconIdentifier);
  uint64_t v9 = *(void *)(v1 + 128);
  if (v9)
  {
    uint64_t v10 = v0[79];
    uint64_t v11 = v0[74];
    swift_retain();
    uint64_t v12 = sub_1000774BC(v7, v10, 0, v9);
    v0[80] = v11;
    if (!v11)
    {
      uint64_t v23 = v0[70];
      uint64_t v24 = v0[68];
      v0[81] = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()(v12);
      swift_release();
      swift_release();
      swift_setDeallocating(v7);
      swift_arrayDestroy(v8, *(void *)(v7 + 16), v24);
      swift_deallocClassInstance(v7, 32LL, 7LL);
      sub_100018C68(v23, type metadata accessor for BeaconIdentifier);
      uint64_t v22 = sub_1002207F8;
      return swift_task_switch(v22, 0LL, 0LL);
    }

    uint64_t v13 = v11;
    swift_release();
  }

  else
  {
    if (qword_10099B888 != -1) {
      swift_once(&qword_10099B888, sub_1006D6C7C);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    uint64_t v15 = sub_10000A720(v14, (uint64_t)qword_1009BCAF8);
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.fault.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "No observation store on this platform!", v18, 2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    unint64_t v19 = sub_10023B3D4();
    uint64_t v13 = swift_allocError(&type metadata for ObservationStoreService.ObservationStoreServiceError, v19, 0LL, 0LL);
    swift_willThrow(v13);
  }

  v0[82] = v13;
  uint64_t v20 = v0[70];
  uint64_t v21 = v0[68];
  swift_setDeallocating(v7);
  swift_arrayDestroy(v8, *(void *)(v7 + 16), v21);
  swift_deallocClassInstance(v7, 32LL, 7LL);
  sub_100018C68(v20, type metadata accessor for BeaconIdentifier);
  uint64_t v22 = sub_100220E10;
  return swift_task_switch(v22, 0LL, 0LL);
}

uint64_t sub_1002207F8()
{
  uint64_t v1 = v0 + 136;
  uint64_t v52 = v0 + 440;
  if (qword_10099B1F0 != -1) {
    swift_once(&qword_10099B1F0, sub_1002193E4);
  }
  uint64_t v51 = (void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 648);
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_10000A720(v3, (uint64_t)qword_100A2A3E0);
  sub_100013044(v0 + 136, v0 + 216);
  uint64_t v4 = swift_bridgeObjectRetain_n(v2, 2LL);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.info.getter(v5);
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void *)(v0 + 648);
  if (v7)
  {
    os_log_type_t type = v6;
    uint64_t v9 = *(void *)(v0 + 536);
    uint64_t v46 = *(void *)(v0 + 528);
    uint64_t v45 = *(void *)(v0 + 520);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v47 = swift_slowAlloc(32LL, -1LL);
    v53[0] = v47;
    *(_DWORD *)uint64_t v10 = 141558531;
    *(void *)(v0 + 44sub_100032838(0, 7LL, 0) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v52, v0 + 448, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2081;
    uint64_t v12 = *(void *)(v0 + 240);
    uint64_t v11 = *(void *)(v0 + 248);
    sub_100012ED8((void *)(v0 + 216), v12);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v11 + 8) + 8LL) + 32LL))(v12);
    uint64_t v13 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter(v45, v13);
    unint64_t v16 = v15;
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v9, v45);
    *(void *)(v0 + 448) = sub_1003F11D4(v14, v16, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 448, v0 + 456, v10 + 14, v10 + 22);
    uint64_t v1 = v0 + 136;
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 216));
    *(_WORD *)(v10 + 22) = 2048;
    uint64_t v17 = *(void *)(v8 + 16);
    swift_release();
    *(void *)(v0 + 456) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 456, v0 + 464, v10 + 24, v10 + 32);
    swift_release();
    _os_log_impl( (void *)&_mh_execute_header,  v5,  type,  "Disk fetch for beacon %{private,mask.hash}s found %ld observations.",  (uint8_t *)v10,  0x20u);
    swift_arrayDestroy(v47, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
    swift_release();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 216));
    swift_release();
  }

  uint64_t v18 = *(void *)(v0 + 648);
  uint64_t v19 = swift_task_alloc(32LL);
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v20 = sub_100631B5C((void (*)(void, __n128))sub_10023B418, v19, v18);
  swift_bridgeObjectRelease();
  swift_task_dealloc(v19);
  sub_100013044(v1, (uint64_t)v51);
  uint64_t v21 = swift_bridgeObjectRetain_n(v20, 2LL);
  uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.info.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = *(void *)(v0 + 536);
    uint64_t v48 = *(void *)(v0 + 528);
    uint64_t v25 = *(void *)(v0 + 520);
    uint64_t v26 = swift_slowAlloc(32LL, -1LL);
    uint64_t v50 = swift_slowAlloc(32LL, -1LL);
    v53[0] = v50;
    *(_DWORD *)uint64_t v26 = 141558531;
    *(void *)(v0 + 4swift_weakDestroy(v0 + 16) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 416, v0 + 424, v26 + 4, v26 + 12);
    *(_WORD *)(v26 + 12) = 2081;
    uint64_t v27 = *(void *)(v0 + 200);
    uint64_t v28 = *(void *)(v0 + 208);
    sub_100012ED8(v51, v27);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v28 + 8) + 8LL) + 32LL))(v27);
    uint64_t v29 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter(v25, v29);
    unint64_t v32 = v31;
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v24, v25);
    *(void *)(v0 + 424) = sub_1003F11D4(v30, v32, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 424, v0 + 432, v26 + 14, v26 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v51);
    *(_WORD *)(v26 + 22) = 2048;
    uint64_t v33 = v20[2];
    swift_bridgeObjectRelease();
    *(void *)(v0 + 432) = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 432, v52, v26 + 24, v26 + 32);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "Disk fetch for beacon %{private,mask.hash}s found %ld locations.",  (uint8_t *)v26,  0x20u);
    swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1LL, -1LL);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v51);
    swift_bridgeObjectRelease();
  }

  uint64_t v35 = *(void *)(v0 + 504);
  uint64_t v34 = *(void *)(v0 + 512);
  uint64_t v36 = *(void *)(v0 + 496);
  sub_10001DC4C(*(void *)(v0 + 488), v34, type metadata accessor for LocationFetcher);
  sub_100013044(v0 + 136, v0 + 56);
  uint64_t v37 = *(unsigned __int8 *)(v36 + 80);
  uint64_t v38 = (v37 + 16) & ~v37;
  unint64_t v39 = (v35 + v38 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v40 = (v39 + 47) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v41 = swift_allocObject(&unk_10094A9E8, v40 + 8, v37 | 7);
  *(void *)(v0 + 664) = v41;
  sub_10002218C(v34, v41 + v38, type metadata accessor for LocationFetcher);
  sub_100012EC0((__int128 *)(v0 + 56), v41 + v39);
  *(void *)(v41 + v4sub_100032838(0, 7LL, 0) = v20;
  uint64_t v42 = (void *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
  *(void *)(v0 + 672) = v42;
  uint64_t v43 = sub_100004AEC(&qword_1009A65F0);
  *uint64_t v42 = v0;
  v42[1] = sub_10022126C;
  return unsafeBlocking<A>(_:)(v0 + 400, sub_10023B518, v41, v43);
}

uint64_t sub_100220E10()
{
  uint64_t v1 = (void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 656);
  uint64_t v3 = *(void *)(v0 + 600);
  if (qword_10099B1F0 != -1) {
    swift_once(&qword_10099B1F0, sub_1002193E4);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10000A720(v4, (uint64_t)qword_100A2A3E0);
  sub_100013044(v0 + 136, v0 + 256);
  swift_errorRetain(v2);
  uint64_t v5 = swift_errorRetain(v2);
  os_log_type_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = *(void *)(v0 + 536);
    os_log_type_t type = v7;
    uint64_t v31 = *(void *)(v0 + 528);
    uint64_t v34 = v3;
    uint64_t v9 = *(void *)(v0 + 520);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v32 = swift_slowAlloc(64LL, -1LL);
    uint64_t v35 = v32;
    *(_DWORD *)uint64_t v10 = 141558531;
    *(void *)(v0 + 408) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 408, v0 + 416, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2081;
    uint64_t v12 = *(void *)(v0 + 280);
    uint64_t v11 = *(void *)(v0 + 288);
    sub_100012ED8((void *)(v0 + 256), v12);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v11 + 8) + 8LL) + 32LL))(v12);
    uint64_t v13 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter(v9, v13);
    unint64_t v16 = v15;
    uint64_t v17 = v9;
    uint64_t v3 = v34;
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v8, v17);
    *(void *)(v0 + 384) = sub_1003F11D4(v14, v16, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 384, v0 + 392, v10 + 14, v10 + 22);
    uint64_t v1 = (void *)(v0 + 136);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 256));
    *(_WORD *)(v10 + 22) = 2080;
    swift_getErrorValue(v2, v0 + 360, v0 + 296);
    uint64_t v18 = Error.localizedDescription.getter(*(void *)(v0 + 304), *(void *)(v0 + 312));
    *(void *)(v0 + 376) = sub_1003F11D4(v18, v19, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 376, v0 + 384, v10 + 24, v10 + 32);
    swift_bridgeObjectRelease();
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  type,  "Could not fetch beacon %{private,mask.hash}s, %s.",  (uint8_t *)v10,  0x20u);
    swift_arrayDestroy(v32, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);

    swift_errorRelease(v2);
  }

  else
  {
    swift_errorRelease(v2);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 256));
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }

  uint64_t v20 = *(void *)(v0 + 584);
  uint64_t v21 = *(void *)(v0 + 608) + 1LL;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if (v21 == v20)
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v22 = *(void (**)(__n128))(v0 + 464);
    __n128 v23 = swift_bridgeObjectRetain(v3);
    v22(v23);
    swift_bridgeObjectRelease_n(v3, 2LL);
    uint64_t v24 = *(void *)(v0 + 536);
    uint64_t v25 = *(void *)(v0 + 512);
    swift_task_dealloc(*(void *)(v0 + 560));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v27 = *(void *)(v0 + 608) + 1LL;
    *(void *)(v0 + 608) = v27;
    *(void *)(v0 + 60sub_100032838(0, 7LL, 0) = v3;
    *(void *)(v0 + 592) = 0LL;
    sub_100013044(*(void *)(v0 + 480) + 40 * v27 + 32, (uint64_t)v1);
    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    uint64_t v28 = qword_100A2A710;
    *(void *)(v0 + 6swift_weakDestroy(v0 + 16) = qword_100A2A710;
    uint64_t v29 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    uint64_t v30 = (void *)swift_task_alloc(v29);
    *(void *)(v0 + 624) = v30;
    *uint64_t v30 = v0;
    v30[1] = sub_100220370;
    return unsafeBlocking<A>(_:)(v0 + 392, sub_100015814, v28, &type metadata for Configuration);
  }

uint64_t sub_10022126C()
{
  return swift_task_switch(sub_1002212CC, 0LL, 0LL);
}

uint64_t sub_1002212CC()
{
  v0[85] = v0[50];
  uint64_t v1 = (void *)swift_task_alloc(dword_1009BCE0C);
  v0[86] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100221324;
  return sub_1006D570C(v0[81]);
}

uint64_t sub_100221324()
{
  uint64_t v2 = (*v1)[86];
  uint64_t v3 = *v1;
  v3[87] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    swift_release();
    return swift_task_switch(sub_1002215A4, 0LL, 0LL);
  }

  else
  {
    uint64_t v5 = (uint64_t **)swift_task_alloc(dword_1009BCE04);
    v3[88] = (uint64_t)v5;
    *uint64_t v5 = v3;
    v5[1] = (uint64_t *)sub_1002213C0;
    return sub_1006D5860(v3[81]);
  }

uint64_t sub_1002213C0()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 704LL);
  *(void *)(*(void *)v1 + 712LL) = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0) {
    uint64_t v3 = sub_100221A00;
  }
  else {
    uint64_t v3 = sub_10022142C;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10022142C()
{
  uint64_t v1 = *(void *)(v0 + 712);
  uint64_t v2 = *(void *)(v0 + 680);
  uint64_t v3 = *(void *)(v0 + 584);
  uint64_t v4 = *(void *)(v0 + 608) + 1LL;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 136));
  if (v4 == v3)
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v5 = *(void (**)(__n128))(v0 + 464);
    __n128 v6 = swift_bridgeObjectRetain(v2);
    v5(v6);
    swift_bridgeObjectRelease_n(v2, 2LL);
    uint64_t v7 = *(void *)(v0 + 536);
    uint64_t v8 = *(void *)(v0 + 512);
    swift_task_dealloc(*(void *)(v0 + 560));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 608) + 1LL;
    *(void *)(v0 + 608) = v10;
    *(void *)(v0 + 60sub_100032838(0, 7LL, 0) = v2;
    *(void *)(v0 + 592) = v1;
    sub_100013044(*(void *)(v0 + 480) + 40 * v10 + 32, v0 + 136);
    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    uint64_t v11 = qword_100A2A710;
    *(void *)(v0 + 6swift_weakDestroy(v0 + 16) = qword_100A2A710;
    uint64_t v12 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    uint64_t v13 = (void *)swift_task_alloc(v12);
    *(void *)(v0 + 624) = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_100220370;
    return unsafeBlocking<A>(_:)(v0 + 392, sub_100015814, v11, &type metadata for Configuration);
  }

uint64_t sub_1002215A4()
{
  uint64_t v1 = (void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 696);
  uint64_t v3 = *(void *)(v0 + 680);
  if (qword_10099B1F0 != -1) {
    swift_once(&qword_10099B1F0, sub_1002193E4);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10000A720(v4, (uint64_t)qword_100A2A3E0);
  sub_100013044(v0 + 136, v0 + 256);
  swift_errorRetain(v2);
  uint64_t v5 = swift_errorRetain(v2);
  __n128 v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = *(void *)(v0 + 536);
    os_log_type_t type = v7;
    uint64_t v31 = *(void *)(v0 + 528);
    uint64_t v34 = v3;
    uint64_t v9 = *(void *)(v0 + 520);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v32 = swift_slowAlloc(64LL, -1LL);
    uint64_t v35 = v32;
    *(_DWORD *)uint64_t v10 = 141558531;
    *(void *)(v0 + 408) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 408, v0 + 416, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2081;
    uint64_t v12 = *(void *)(v0 + 280);
    uint64_t v11 = *(void *)(v0 + 288);
    sub_100012ED8((void *)(v0 + 256), v12);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v11 + 8) + 8LL) + 32LL))(v12);
    uint64_t v13 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter(v9, v13);
    unint64_t v16 = v15;
    uint64_t v17 = v9;
    uint64_t v3 = v34;
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v8, v17);
    *(void *)(v0 + 384) = sub_1003F11D4(v14, v16, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 384, v0 + 392, v10 + 14, v10 + 22);
    uint64_t v1 = (void *)(v0 + 136);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 256));
    *(_WORD *)(v10 + 22) = 2080;
    swift_getErrorValue(v2, v0 + 360, v0 + 296);
    uint64_t v18 = Error.localizedDescription.getter(*(void *)(v0 + 304), *(void *)(v0 + 312));
    *(void *)(v0 + 376) = sub_1003F11D4(v18, v19, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 376, v0 + 384, v10 + 24, v10 + 32);
    swift_bridgeObjectRelease();
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  type,  "Could not fetch beacon %{private,mask.hash}s, %s.",  (uint8_t *)v10,  0x20u);
    swift_arrayDestroy(v32, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);

    swift_errorRelease(v2);
  }

  else
  {
    swift_errorRelease(v2);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 256));
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }

  uint64_t v20 = *(void *)(v0 + 584);
  uint64_t v21 = *(void *)(v0 + 608) + 1LL;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if (v21 == v20)
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v22 = *(void (**)(__n128))(v0 + 464);
    __n128 v23 = swift_bridgeObjectRetain(v3);
    v22(v23);
    swift_bridgeObjectRelease_n(v3, 2LL);
    uint64_t v24 = *(void *)(v0 + 536);
    uint64_t v25 = *(void *)(v0 + 512);
    swift_task_dealloc(*(void *)(v0 + 560));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v27 = *(void *)(v0 + 608) + 1LL;
    *(void *)(v0 + 608) = v27;
    *(void *)(v0 + 60sub_100032838(0, 7LL, 0) = v3;
    *(void *)(v0 + 592) = 0LL;
    sub_100013044(*(void *)(v0 + 480) + 40 * v27 + 32, (uint64_t)v1);
    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    uint64_t v28 = qword_100A2A710;
    *(void *)(v0 + 6swift_weakDestroy(v0 + 16) = qword_100A2A710;
    uint64_t v29 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    uint64_t v30 = (void *)swift_task_alloc(v29);
    *(void *)(v0 + 624) = v30;
    *uint64_t v30 = v0;
    v30[1] = sub_100220370;
    return unsafeBlocking<A>(_:)(v0 + 392, sub_100015814, v28, &type metadata for Configuration);
  }

uint64_t sub_100221A00()
{
  uint64_t v1 = (void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 712);
  uint64_t v3 = *(void *)(v0 + 680);
  if (qword_10099B1F0 != -1) {
    swift_once(&qword_10099B1F0, sub_1002193E4);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10000A720(v4, (uint64_t)qword_100A2A3E0);
  sub_100013044(v0 + 136, v0 + 256);
  swift_errorRetain(v2);
  uint64_t v5 = swift_errorRetain(v2);
  __n128 v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = *(void *)(v0 + 536);
    os_log_type_t type = v7;
    uint64_t v31 = *(void *)(v0 + 528);
    uint64_t v34 = v3;
    uint64_t v9 = *(void *)(v0 + 520);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v32 = swift_slowAlloc(64LL, -1LL);
    uint64_t v35 = v32;
    *(_DWORD *)uint64_t v10 = 141558531;
    *(void *)(v0 + 408) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 408, v0 + 416, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2081;
    uint64_t v12 = *(void *)(v0 + 280);
    uint64_t v11 = *(void *)(v0 + 288);
    sub_100012ED8((void *)(v0 + 256), v12);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v11 + 8) + 8LL) + 32LL))(v12);
    uint64_t v13 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter(v9, v13);
    unint64_t v16 = v15;
    uint64_t v17 = v9;
    uint64_t v3 = v34;
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v8, v17);
    *(void *)(v0 + 384) = sub_1003F11D4(v14, v16, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 384, v0 + 392, v10 + 14, v10 + 22);
    uint64_t v1 = (void *)(v0 + 136);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 256));
    *(_WORD *)(v10 + 22) = 2080;
    swift_getErrorValue(v2, v0 + 360, v0 + 296);
    uint64_t v18 = Error.localizedDescription.getter(*(void *)(v0 + 304), *(void *)(v0 + 312));
    *(void *)(v0 + 376) = sub_1003F11D4(v18, v19, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 376, v0 + 384, v10 + 24, v10 + 32);
    swift_bridgeObjectRelease();
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  type,  "Could not fetch beacon %{private,mask.hash}s, %s.",  (uint8_t *)v10,  0x20u);
    swift_arrayDestroy(v32, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);

    swift_errorRelease(v2);
  }

  else
  {
    swift_errorRelease(v2);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 256));
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }

  uint64_t v20 = *(void *)(v0 + 584);
  uint64_t v21 = *(void *)(v0 + 608) + 1LL;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if (v21 == v20)
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v22 = *(void (**)(__n128))(v0 + 464);
    __n128 v23 = swift_bridgeObjectRetain(v3);
    v22(v23);
    swift_bridgeObjectRelease_n(v3, 2LL);
    uint64_t v24 = *(void *)(v0 + 536);
    uint64_t v25 = *(void *)(v0 + 512);
    swift_task_dealloc(*(void *)(v0 + 560));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v27 = *(void *)(v0 + 608) + 1LL;
    *(void *)(v0 + 608) = v27;
    *(void *)(v0 + 60sub_100032838(0, 7LL, 0) = v3;
    *(void *)(v0 + 592) = 0LL;
    sub_100013044(*(void *)(v0 + 480) + 40 * v27 + 32, (uint64_t)v1);
    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    uint64_t v28 = qword_100A2A710;
    *(void *)(v0 + 6swift_weakDestroy(v0 + 16) = qword_100A2A710;
    uint64_t v29 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    uint64_t v30 = (void *)swift_task_alloc(v29);
    *(void *)(v0 + 624) = v30;
    *uint64_t v30 = v0;
    v30[1] = sub_100220370;
    return unsafeBlocking<A>(_:)(v0 + 392, sub_100015814, v28, &type metadata for Configuration);
  }

uint64_t sub_100221E5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v92 = a2;
  uint64_t v103 = a3;
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v4);
  uint64_t v100 = (char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v98 = type metadata accessor for Date(0LL);
  uint64_t v96 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v99 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009AC230);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v97 = (uint64_t)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v95 = (char *)&v83 - v10;
  uint64_t v94 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
  uint64_t v90 = *(void *)(v94 - 8);
  uint64_t v11 = __chkstk_darwin(v94);
  uint64_t v85 = (uint64_t)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v84 = (uint64_t)&v83 - v13;
  uint64_t v14 = sub_100004AEC(&qword_1009AA730);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v93 = (char *)&v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  unint64_t v19 = (char *)&v83 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v83 - v20;
  uint64_t v88 = type metadata accessor for UUID(0LL);
  uint64_t v87 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  unint64_t v86 = (char *)&v83 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for ObservedAdvertisement(0LL);
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v101 = (uint64_t)&v83 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  uint64_t v91 = (uint64_t)&v83 - v26;
  uint64_t v27 = sub_100004AEC(&qword_10099E770);
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v83 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = type metadata accessor for ObservedAdvertisement.Location(0LL);
  uint64_t v31 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v33 = (double *)((char *)&v83 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v102 = (double *)v23;
  sub_10001581C(a1 + *(int *)(v23 + 48), (uint64_t)v29, &qword_10099E770);
  uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
  uint64_t v89 = v30;
  if (v34(v29, 1LL, v30) == 1)
  {
    sub_100015794((uint64_t)v29, &qword_10099E770);
    uint64_t v35 = type metadata accessor for RawSearchResult(0LL);
    return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56LL))( v103,  1LL,  1LL,  v35);
  }

  sub_10002218C((uint64_t)v29, (uint64_t)v33, type metadata accessor for ObservedAdvertisement.Location);
  uint64_t v37 = a1;
  if (*(unsigned __int8 *)(a1 + 9) - 1 < 2)
  {
    uint64_t v38 = a1 + *((int *)v102 + 13);
    if ((*(_BYTE *)(a1 + 31) & 0x20) != 0)
    {
      sub_10001581C(v38, (uint64_t)v21, &qword_1009AA730);
      unint64_t v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v90 + 48);
      uint64_t v40 = v94;
      int v52 = v39(v21, 1LL, v94);
      uint64_t v42 = v95;
      if (v52 == 1)
      {
        sub_100015794((uint64_t)v21, &qword_1009AA730);
        __int128 v109 = 0u;
        __int128 v110 = 0u;
        unint64_t v111 = 0LL;
      }

      else
      {
        uint64_t v58 = *(void *)&v21[*(int *)(v40 + 24)];
        sub_100018C68((uint64_t)v21, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        *((void *)&v110 + 1) = &type metadata for PrimaryIndex;
        unint64_t v111 = sub_1000868E4();
        *(void *)&__int128 v109 = v58;
      }

      int v43 = 5;
      goto LABEL_19;
    }

    sub_10001581C(v38, (uint64_t)v19, &qword_1009AA730);
    unint64_t v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v90 + 48);
    uint64_t v40 = v94;
    int v41 = v39(v19, 1LL, v94);
    uint64_t v42 = v95;
    if (v41 == 1)
    {
      sub_100015794((uint64_t)v19, &qword_1009AA730);
      __int128 v109 = 0u;
      __int128 v110 = 0u;
      unint64_t v111 = 0LL;
      int v43 = 6;
LABEL_19:
      uint64_t v55 = (uint64_t)v93;
      goto LABEL_20;
    }

    uint64_t v53 = (uint64_t)v19;
    uint64_t v54 = v84;
    sub_10002218C(v53, v84, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    uint64_t v55 = (uint64_t)v93;
    if (*(_BYTE *)(v54 + *(int *)(v40 + 20)))
    {
      if (*(_BYTE *)(v54 + *(int *)(v40 + 20)) == 1)
      {
        unint64_t v56 = 0xE900000000000079LL;
        uint64_t v57 = 0x7261646E6F636553LL;
      }

      else
      {
        unint64_t v56 = 0xEF736E6F69746163LL;
        uint64_t v57 = 0x6F4C657275636553LL;
      }

      char v80 = _stringCompareWithSmolCheck(_:_:expecting:)(v57, v56, 0x7972616D697250LL, 0xE700000000000000LL, 0LL);
      swift_bridgeObjectRelease();
      if ((v80 & 1) == 0)
      {
        uint64_t v82 = *(void *)(v54 + *(int *)(v40 + 24));
        uint64_t v107 = &type metadata for SecondaryIndex;
        unint64_t v108 = sub_1000868A0();
        *(void *)&__int128 v106 = v82;
        sub_100018C68(v54, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        sub_100015750((uint64_t)&v106, (uint64_t)&v109, &qword_1009A6660);
        int v43 = 12;
LABEL_20:
        sub_10001581C((uint64_t)&v109, (uint64_t)&v104, &qword_1009A6660);
        LODWORD(v101) = v43;
        if (v105)
        {
          sub_100012EC0(&v104, (uint64_t)&v106);
          sub_10001581C(v37 + *((int *)v102 + 13), v55, &qword_1009AA730);
          if (v39((char *)v55, 1LL, v40) != 1)
          {
            uint64_t v62 = v85;
            sub_10002218C(v55, v85, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
            (*(void (**)(char *, uint64_t, uint64_t))(v87 + 32))(v42, v62, v88);
            uint64_t v63 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
            sub_100012EC0(&v106, (uint64_t)&v42[*(int *)(v63 + 20)]);
            (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56LL))(v42, 0LL, 1LL, v63);
            goto LABEL_26;
          }

          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v106);
          uint64_t v59 = &qword_1009AA730;
          double v60 = (__int128 *)v55;
        }

        else
        {
          uint64_t v59 = &qword_1009A6660;
          double v60 = &v104;
        }

        sub_100015794((uint64_t)v60, v59);
        uint64_t v61 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56LL))(v42, 1LL, 1LL, v61);
LABEL_26:
        uint64_t v64 = (uint64_t)v42;
        uint64_t v65 = v96;
        uint64_t v66 = *(void (**)(char *, char *, uint64_t))(v96 + 16);
        int v67 = *(unsigned __int8 *)(v37 + 32);
        uint64_t v68 = (uint64_t)v99;
        uint64_t v69 = v98;
        v66(v99, (char *)v33 + *(int *)(v89 + 28), v98);
        double v70 = *v33;
        double v71 = v33[1];
        double v72 = v33[2];
        uint64_t v73 = v37 + *((int *)v102 + 11);
        uint64_t v74 = (uint64_t)v100;
        v66(v100, (char *)v73, v69);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v65 + 56))(v74, 0LL, 1LL, v69);
        uint64_t v75 = v97;
        sub_10001581C(v64, v97, &qword_1009AC230);
        uint64_t v76 = v103;
        sub_1005B9084(v67, v68, v101, v74, v75, 256, v103, v70, v71, v72);
        sub_100015794(v64, &qword_1009AC230);
        sub_100015794((uint64_t)&v109, &qword_1009A6660);
        sub_100018C68((uint64_t)v33, type metadata accessor for ObservedAdvertisement.Location);
        uint64_t v77 = type metadata accessor for RawSearchResult(0LL);
        return (*(uint64_t (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56LL))( v76,  0LL,  1LL,  v77);
      }
    }

    else
    {
      swift_bridgeObjectRelease();
    }

    uint64_t v81 = *(void *)(v54 + *(int *)(v40 + 24));
    uint64_t v107 = &type metadata for PrimaryWildIndex;
    unint64_t v108 = sub_100086928();
    *(void *)&__int128 v106 = v81;
    sub_100018C68(v54, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    sub_100015750((uint64_t)&v106, (uint64_t)&v109, &qword_1009A6660);
    int v43 = 6;
    goto LABEL_20;
  }

  if (qword_10099B1F0 != -1) {
    swift_once(&qword_10099B1F0, sub_1002193E4);
  }
  uint64_t v44 = type metadata accessor for Logger(0LL);
  sub_10000A720(v44, (uint64_t)qword_100A2A3E0);
  uint64_t v45 = v91;
  sub_10001DC4C(a1, v91, type metadata accessor for ObservedAdvertisement);
  sub_100013044(v92, (uint64_t)&v106);
  uint64_t v46 = v101;
  uint64_t v47 = sub_10001DC4C(a1, v101, type metadata accessor for ObservedAdvertisement);
  uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
  int v49 = static os_log_type_t.error.getter(v48);
  if (os_log_type_enabled(v48, (os_log_type_t)v49))
  {
    LODWORD(v10sub_100032838(0, 7LL, 0) = v49;
    uint64_t v50 = (_DWORD *)swift_slowAlloc(42LL, -1LL);
    uint64_t v99 = (char *)swift_slowAlloc(96LL, -1LL);
    *(void *)&__int128 v104 = v99;
    _DWORD *v50 = 136446979;
    uint64_t v51 = *(unsigned __int8 *)(v45 + 9);
    uint64_t v102 = v33;
    __asm { BR              X10 }
  }

  sub_100018C68(v46, type metadata accessor for ObservedAdvertisement);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v106);
  sub_100018C68(v45, type metadata accessor for ObservedAdvertisement);
  sub_100018C68((uint64_t)v33, type metadata accessor for ObservedAdvertisement.Location);
  uint64_t v78 = v103;
  uint64_t v79 = type metadata accessor for RawSearchResult(0LL);
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 56LL))( v78,  1LL,  1LL,  v79);
}

uint64_t sub_100222B10@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_100004AEC(&qword_1009A65F8);
  uint64_t v7 = sub_100004AEC(&qword_1009A6600);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v10 + 32) & ~v10;
  uint64_t v12 = swift_allocObject(v6, v11 + v9, v10 | 7);
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v13 = *(int *)(v7 + 48);
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  sub_100012ED8(a1, v14);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v15 + 8) + 8LL) + 32LL))(v14);
  swift_bridgeObjectRetain(a2);
  uint64_t v17 = sub_1006F183C(v16);
  swift_bridgeObjectRelease();
  *(void *)(v12 + v11 + v13) = v17;
  unint64_t v18 = sub_100413A0C(v12);
  uint64_t v19 = sub_10021C93C(v18);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v19;
  return result;
}

uint64_t sub_100222C20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v70 = a1;
  uint64_t v6 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v6);
  uint64_t v69 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for LocationFetcher(0LL);
  uint64_t v67 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v68 = v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (uint8_t **)((char *)&v60 - v12);
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v71 = *(void *)(v14 - 8);
  uint64_t v72 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100004AEC(&qword_1009A66D0);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  uint64_t v18 = Future.init()();
  if (!*(void *)(a2 + 16))
  {
    unint64_t v24 = sub_100246328();
    uint64_t v25 = swift_allocError(&type metadata for LocationFetcher.LocationFetcherError, v24, 0LL, 0LL);
    *uint64_t v26 = 1;
    Future.finish(error:)(v25);
    swift_errorRelease(v25);
    return v18;
  }

  uint64_t v64 = v11;
  uint64_t v75 = a2;
  swift_bridgeObjectRetain(a2);
  sub_10023B268( &v75,  type metadata accessor for FetchRequestBeacon,  (uint64_t (*)(uint64_t))sub_1003D4A64,  sub_10023B574);
  if (!v3)
  {
    uint64_t v65 = v18;
    uint64_t v66 = a2;
    uint64_t v19 = v75;
    uint64_t v20 = *(void *)(v75 + 16);
    if (v20)
    {
      uint64_t v21 = *(void *)(type metadata accessor for FetchRequestBeacon(0LL) - 8);
      uint64_t v22 = v19 + ((*(unsigned __int8 *)(v21 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
      uint64_t v23 = *(void *)(v21 + 72);
      swift_retain();
      do
      {
        sub_100236BB0(v22, (uint64_t)v4);
        v22 += v23;
        --v20;
      }

      while (v20);
      swift_release_n(v19, 2LL);
    }

    else
    {
      swift_release();
    }

    uint64_t v28 = v71;
    uint64_t v27 = v72;
    uint64_t v29 = v16;
    (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v16, &v4[*(int *)(v8 + 32)], v72);
    uint64_t v30 = sub_10001DC4C((uint64_t)v4, (uint64_t)v13, type metadata accessor for LocationFetcher);
    uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.default.getter(v31);
    int v33 = v32;
    if (os_log_type_enabled(v31, v32))
    {
      int v63 = v33;
      uint64_t v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v35 = swift_slowAlloc(32LL, -1LL);
      uint64_t v62 = v35;
      *(_DWORD *)uint64_t v34 = 136446210;
      uint64_t v36 = v34 + 12;
      uint64_t v75 = v35;
      double v60 = v34 + 4;
      uint64_t v61 = v34;
      uint64_t v37 = v13[6];
      uint64_t v38 = v13[7];
      sub_100012ED8(v13 + 3, v37);
      char v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 48))(v37, v38);
      uint64_t v42 = sub_1005FBCF4(v39, v40, v41);
      unint64_t v44 = v43;
      swift_bridgeObjectRelease();
      uint64_t v73 = sub_1003F11D4(v42, v44, &v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v60, v36);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v13, type metadata accessor for LocationFetcher);
      uint64_t v45 = v61;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  (os_log_type_t)v63,  "Location fetch request for context: %{public}s.",  v61,  0xCu);
      uint64_t v46 = v62;
      swift_arrayDestroy(v62, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1LL, -1LL);
      swift_slowDealloc(v45, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v71 + 8))(v29, v72);
    }

    else
    {
      sub_100018C68((uint64_t)v13, type metadata accessor for LocationFetcher);

      (*(void (**)(char *, uint64_t))(v28 + 8))(v16, v27);
    }

    uint64_t v47 = *((void *)v4 + 6);
    uint64_t v48 = *((void *)v4 + 7);
    sub_100012ED8((void *)v4 + 3, v47);
    LODWORD(v72) = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 64))(v47, v48);
    uint64_t v49 = type metadata accessor for TaskPriority(0LL);
    uint64_t v50 = (uint64_t)v69;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56LL))(v69, 1LL, 1LL, v49);
    uint64_t v51 = (uint64_t)v64;
    sub_10001DC4C((uint64_t)v4, (uint64_t)v64, type metadata accessor for LocationFetcher);
    uint64_t v52 = *(unsigned __int8 *)(v67 + 80);
    uint64_t v53 = (v52 + 40) & ~v52;
    uint64_t v54 = v53 + v68;
    unint64_t v55 = (v53 + v68) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v56 = (v55 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v57 = (void *)swift_allocObject(&unk_10094ACB8, v56 + 8, v52 | 7);
    v57[2] = 0LL;
    v57[3] = 0LL;
    uint64_t v58 = v66;
    v57[4] = v66;
    sub_10002218C(v51, (uint64_t)v57 + v53, type metadata accessor for LocationFetcher);
    *((_BYTE *)v57 + v54) = v72 & 1;
    *(void *)((char *)v57 + v55 + 8) = v70;
    uint64_t v18 = v65;
    *(void *)((char *)v57 + v56) = v65;
    swift_bridgeObjectRetain(v58);
    swift_retain();
    swift_retain();
    sub_1003EDB00(v50, (uint64_t)&unk_1009A66E0, (uint64_t)v57);
    swift_release();
    return v18;
  }

  uint64_t result = swift_release();
  __break(1u);
  return result;
}

void sub_100223138(uint64_t a1, uint64_t a2, uint64_t a3, dispatch_group_s *a4)
{
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for LocationFetcher(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2 + *(int *)(v12 + 32), v8);
  swift_errorRetain(a1);
  uint64_t v13 = swift_errorRetain(a1);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.error.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v27 = a4;
    uint64_t v16 = swift_slowAlloc(12LL, -1LL);
    uint64_t v26 = a3;
    uint64_t v17 = (uint8_t *)v16;
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    uint64_t v28 = a1;
    v29[0] = v18;
    *(_DWORD *)uint64_t v17 = 136446210;
    uint64_t v25 = v17 + 4;
    swift_errorRetain(a1);
    uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v20 = String.init<A>(describing:)(&v28, v19);
    uint64_t v28 = sub_1003F11D4(v20, v21, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v25, v17 + 12);
    a4 = v27;
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Fetch error: %{public}s.", v17, 0xCu);
    swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    uint64_t v22 = v17;
    a3 = v26;
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_beginAccess(a3 + 16, v29, 1LL, 0LL);
  uint64_t v23 = *(void *)(a3 + 16);
  *(void *)(a3 + swift_weakDestroy(v0 + 16) = a1;
  swift_errorRelease(v23);
  swift_errorRetain(a1);
  dispatch_group_leave(a4);
}

void sub_100223374(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, dispatch_group_s *a5)
{
  uint64_t v7 = a2 + 16;
  uint64_t v8 = sub_100223428(*a1, a4);
  swift_beginAccess(v7, v11, 33LL, 0LL);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(a2 + 16));
  uint64_t v10 = *(void *)(a2 + 16);
  *(void *)(a2 + swift_weakDestroy(v0 + 16) = 0x8000000000000000LL;
  sub_10023EF58((uint64_t)v8, (uint64_t)sub_10023EB88, 0LL, isUniquelyReferenced_nonNull_native, &v10);
  *(void *)(a2 + swift_weakDestroy(v0 + 16) = v10;
  swift_bridgeObjectRelease();
  swift_endAccess(v11);
  dispatch_group_leave(a5);
}

char *sub_100223428(uint64_t a1, uint64_t a2)
{
  uint64_t v107 = a1;
  uint64_t v3 = type metadata accessor for LocationFetcher(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v98 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v117 = type metadata accessor for FetchResponse.SearchResult(0LL);
  uint64_t v106 = *(void *)(v117 - 8);
  uint64_t v6 = __chkstk_darwin(v117);
  uint64_t v112 = (uint64_t)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v105 = (os_log_s *)((char *)&v98 - v9);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v98 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v101 = (uint64_t *)((char *)&v98 - v14);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v98 - v16;
  __chkstk_darwin(v15);
  __int128 v109 = (char *)&v98 - v18;
  uint64_t v19 = type metadata accessor for UUID(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v115 = (uint64_t *)((char *)&v98 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0LL);
  uint64_t v23 = *(void *)(RequestBeacon - 8);
  __chkstk_darwin(RequestBeacon);
  uint64_t v113 = (char *)&v98 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v108 = type metadata accessor for Logger(0LL);
  uint64_t v100 = *(void *)(v108 - 8);
  uint64_t v25 = __chkstk_darwin(v108);
  uint64_t v102 = (char *)&v98 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25);
  uint64_t v103 = v5;
  __int128 v104 = (char *)&v98 - v27;
  uint64_t v28 = *(void *)(a2 + 16);
  __int128 v110 = v12;
  char v114 = (os_log_s *)a2;
  if (v28)
  {
    uint64_t v98 = v3;
    uint64_t v99 = v17;
    uint64_t v29 = a2 + ((*(unsigned __int8 *)(v23 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
    unint64_t v111 = *(void (**)(char *, uint64_t))(v23 + 72);
    swift_bridgeObjectRetain(a2);
    uint64_t v30 = &_swiftEmptyDictionarySingleton;
    uint64_t v31 = (uint64_t (*)(void, void, void))v115;
    os_log_type_t v32 = v113;
    while (1)
    {
      sub_10001DC4C(v29, (uint64_t)v32, type metadata accessor for FetchRequestBeacon);
      uint64_t v34 = v20;
      uint64_t v35 = *(uint64_t (**)(unint64_t, uint64_t *, uint64_t))(v20 + 16);
      uint64_t v20 = v19;
      v35((unint64_t)v31, (uint64_t *)v32, v19);
      swift_bridgeObjectRetain(v30);
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v36);
      os_log_t v119 = v30;
      unint64_t v39 = sub_10030D124((uint64_t)v31);
      uint64_t v40 = v30[2];
      BOOL v41 = (v38 & 1) == 0;
      uint64_t v42 = (void *)(v40 + v41);
      if (__OFADD__(v40, v41)) {
        break;
      }
      char v43 = v38;
      if (v30[3] >= (uint64_t)v42)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_100064E28();
        }
      }

      else
      {
        sub_10004FDF0((uint64_t)v42, isUniquelyReferenced_nonNull_native);
        unint64_t v44 = sub_10030D124((uint64_t)v115);
        if ((v43 & 1) != (v45 & 1)) {
          goto LABEL_58;
        }
        unint64_t v39 = v44;
      }

      uint64_t v19 = v20;
      uint64_t v46 = v119;
      uint64_t v20 = v34;
      if ((v43 & 1) != 0)
      {
        uint64_t v33 = v119[7];
        swift_bridgeObjectRelease();
        *(void *)(v33 + 8 * v39) = &_swiftEmptySetSingleton;
        uint64_t v31 = (uint64_t (*)(void, void, void))v115;
      }

      else
      {
        v119[(v39 >> 6) + 8] |= 1LL << v39;
        uint64_t v31 = (uint64_t (*)(void, void, void))v115;
        uint64_t v42 = (void *)v35(v46[6] + *(void *)(v34 + 72) * v39, v115, v19);
        *(void *)(v46[7] + 8 * v39) = &_swiftEmptySetSingleton;
        uint64_t v47 = v46[2];
        BOOL v48 = __OFADD__(v47, 1LL);
        uint64_t v49 = v47 + 1;
        if (v48) {
          goto LABEL_57;
        }
        void v46[2] = v49;
      }

      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t (*)(void, void, void), uint64_t))(v34 + 8))(v31, v19);
      os_log_type_t v32 = v113;
      sub_100018C68((uint64_t)v113, type metadata accessor for FetchRequestBeacon);
      swift_bridgeObjectRelease();
      v29 += (uint64_t)v111;
      uint64_t v30 = v46;
      if (!--v28)
      {
        swift_bridgeObjectRelease();
        uint64_t v12 = v110;
        uint64_t v5 = v103;
        uint64_t v17 = v99;
        uint64_t v3 = v98;
        goto LABEL_16;
      }
    }

    __break(1u);
LABEL_57:
    __break(1u);
    objc_autoreleasePoolPop(v42);
    __break(1u);
LABEL_58:
    uint64_t result = (char *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
    __break(1u);
  }

  else
  {
    uint64_t v46 = &_swiftEmptyDictionarySingleton;
LABEL_16:
    os_log_t v119 = v46;
    uint64_t v50 = *(int *)(v3 + 32);
    uint64_t v51 = v100;
    uint64_t v52 = *(uint64_t **)(v100 + 16);
    uint64_t v53 = v104;
    uint64_t v113 = &v116[v50];
    uint64_t v54 = ((uint64_t (*)(char *))v52)(v104);
    unint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
    os_log_type_t v56 = static os_log_type_t.default.getter(v55);
    BOOL v57 = os_log_type_enabled(v55, v56);
    uint64_t v58 = (uint64_t)v109;
    if (v57)
    {
      uint64_t v59 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Owned locations processing", v59, 2u);
      double v60 = v59;
      uint64_t v53 = v104;
      swift_slowDealloc(v60, -1LL, -1LL);
    }

    unint64_t v111 = *(void (**)(char *, uint64_t))(v51 + 8);
    v111(v53, v108);
    uint64_t v61 = (char *)_swiftEmptyArrayStorage;
    uint64_t v118 = (char *)_swiftEmptyArrayStorage;
    uint64_t v62 = *(void *)(v107 + 16);
    swift_bridgeObjectRetain(v107);
    uint64_t v115 = v52;
    if (v62)
    {
      unint64_t v64 = (*(unsigned __int8 *)(v106 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80);
      uint64_t v65 = *(void *)(v106 + 72);
      uint64_t v66 = v63 + v64;
      uint64_t v67 = v62;
      do
      {
        sub_10001DC4C(v66, v58, type metadata accessor for FetchResponse.SearchResult);
        if (*(_BYTE *)(v58 + *(int *)(v117 + 28)) == 15)
        {
          sub_10002218C(v58, (uint64_t)v17, type metadata accessor for FetchResponse.SearchResult);
          if ((swift_isUniquelyReferenced_nonNull_native(v61) & 1) == 0) {
            sub_100032F9C(0, *((void *)v61 + 2) + 1LL, 1);
          }
          uint64_t v61 = v118;
          unint64_t v69 = *((void *)v118 + 2);
          unint64_t v68 = *((void *)v118 + 3);
          if (v69 >= v68 >> 1)
          {
            sub_100032F9C(v68 > 1, v69 + 1, 1);
            uint64_t v61 = v118;
          }

          *((void *)v61 + 2) = v69 + 1;
          sub_10002218C( (uint64_t)v17,  (uint64_t)&v61[v64 + v69 * v65],  type metadata accessor for FetchResponse.SearchResult);
          uint64_t v58 = (uint64_t)v109;
        }

        else
        {
          sub_100018C68(v58, type metadata accessor for FetchResponse.SearchResult);
        }

        v66 += v65;
        --v67;
      }

      while (v67);
      uint64_t v61 = v118;
      uint64_t v12 = v110;
      uint64_t v5 = v103;
    }

    swift_bridgeObjectRelease();
    uint64_t v70 = *((void *)v61 + 2);
    uint64_t v71 = v101;
    if (v70)
    {
      uint64_t v72 = *(unsigned __int8 *)(v106 + 80);
      __int128 v109 = v61;
      uint64_t v73 = (uint64_t)&v61[(v72 + 32) & ~v72];
      uint64_t v74 = *(void *)(v106 + 72);
      do
      {
        sub_10001DC4C((uint64_t)v116, (uint64_t)v5, type metadata accessor for LocationFetcher);
        sub_10001DC4C(v73, (uint64_t)v71, type metadata accessor for FetchResponse.SearchResult);
        uint64_t v75 = objc_autoreleasePoolPush();
        sub_10022AC68((uint64_t)v5, v71, (uint64_t)v114, (uint64_t *)&v119);
        objc_autoreleasePoolPop(v75);
        sub_100018C68((uint64_t)v5, type metadata accessor for LocationFetcher);
        sub_100018C68((uint64_t)v71, type metadata accessor for FetchResponse.SearchResult);
        v73 += v74;
        --v70;
      }

      while (v70);
      swift_release();
      uint64_t v12 = v110;
    }

    else
    {
      swift_release();
    }

    uint64_t v76 = v102;
    uint64_t v77 = ((uint64_t (*)(char *, char *, uint64_t))v115)(v102, v113, v108);
    uint64_t v78 = (os_log_s *)Logger.logObject.getter(v77);
    os_log_type_t v79 = static os_log_type_t.default.getter(v78);
    BOOL v80 = os_log_type_enabled(v78, v79);
    uint64_t v81 = v105;
    if (v80)
    {
      uint64_t v82 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v82 = 0;
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "Unowned locations processing", v82, 2u);
      swift_slowDealloc(v82, -1LL, -1LL);
    }

    v111(v76, v108);
    uint64_t v83 = (char *)_swiftEmptyArrayStorage;
    uint64_t v118 = (char *)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v107);
    if (v62)
    {
      unint64_t v85 = (*(unsigned __int8 *)(v106 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80);
      uint64_t v86 = *(void *)(v106 + 72);
      uint64_t v87 = v84 + v85;
      uint64_t v88 = v114;
      do
      {
        sub_10001DC4C(v87, (uint64_t)v12, type metadata accessor for FetchResponse.SearchResult);
        if (v12[*(int *)(v117 + 28)] == 15)
        {
          sub_100018C68((uint64_t)v12, type metadata accessor for FetchResponse.SearchResult);
        }

        else
        {
          sub_10002218C((uint64_t)v12, v112, type metadata accessor for FetchResponse.SearchResult);
          if ((swift_isUniquelyReferenced_nonNull_native(v83) & 1) == 0) {
            sub_100032F9C(0, *((void *)v83 + 2) + 1LL, 1);
          }
          uint64_t v83 = v118;
          unint64_t v90 = *((void *)v118 + 2);
          unint64_t v89 = *((void *)v118 + 3);
          if (v90 >= v89 >> 1)
          {
            sub_100032F9C(v89 > 1, v90 + 1, 1);
            uint64_t v83 = v118;
          }

          *((void *)v83 + 2) = v90 + 1;
          sub_10002218C(v112, (uint64_t)&v83[v85 + v90 * v86], type metadata accessor for FetchResponse.SearchResult);
          uint64_t v12 = v110;
        }

        v87 += v86;
        --v62;
      }

      while (v62);
      uint64_t v83 = v118;
      uint64_t v81 = v105;
    }

    else
    {
      uint64_t v88 = v114;
    }

    swift_bridgeObjectRelease();
    uint64_t v91 = v119;
    uint64_t v118 = (char *)v119;
    uint64_t v92 = *((void *)v83 + 2);
    if (v92)
    {
      uint64_t v93 = v83;
      uint64_t v94 = (uint64_t)&v83[(*(unsigned __int8 *)(v106 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80)];
      uint64_t v95 = *(void *)(v106 + 72);
      swift_bridgeObjectRetain_n(v119, 2LL);
      swift_retain();
      do
      {
        sub_10001DC4C(v94, (uint64_t)v81, type metadata accessor for FetchResponse.SearchResult);
        if (*((_BYTE *)v81 + *(int *)(v117 + 28)) != 15)
        {
          uint64_t v96 = objc_autoreleasePoolPush();
          sub_10022D370(v81, v88, v116, (uint64_t *)&v118);
          objc_autoreleasePoolPop(v96);
        }

        sub_100018C68((uint64_t)v81, type metadata accessor for FetchResponse.SearchResult);
        v94 += v95;
        --v92;
      }

      while (v92);
      swift_bridgeObjectRelease_n(v91, 2LL);
      swift_release_n(v93, 2LL);
      return v118;
    }

    else
    {
      swift_release();
    }

    return (char *)v91;
  }

  return result;
}

void sub_100223DBC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v178 = a2;
  uint64_t v182 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v182 - 8);
  uint64_t v6 = __chkstk_darwin(v182);
  uint64_t v152 = (char *)&v145 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v172 = (char *)&v145 - v9;
  __chkstk_darwin(v8);
  os_log_t v171 = (char *)&v145 - v10;
  uint64_t v11 = sub_100004AEC(&qword_1009A6678);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v145 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v151 = (uint64_t)&v145 - v16;
  __chkstk_darwin(v15);
  uint64_t v177 = (uint64_t)&v145 - v17;
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0LL);
  uint64_t v19 = *(void *)(RequestBeacon - 8);
  uint64_t v20 = __chkstk_darwin(RequestBeacon);
  uint64_t v146 = (uint64_t)&v145 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v145 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v145 - v26;
  uint64_t v28 = __chkstk_darwin(v25);
  uint64_t v158 = (uint64_t)&v145 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v157 = (uint64_t)&v145 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v156 = (uint64_t)&v145 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v170 = (uint64_t)&v145 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v169 = (uint64_t)&v145 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v180 = (uint64_t)&v145 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v175 = (uint64_t)&v145 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v165 = (uint64_t)&v145 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v164 = (uint64_t)&v145 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  BOOL v48 = (char *)&v145 - v47;
  uint64_t v49 = __chkstk_darwin(v46);
  uint64_t v51 = (char *)&v145 - v50;
  __chkstk_darwin(v49);
  uint64_t v166 = (uint64_t)&v145 - v52;
  uint64_t v53 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56);
  uint64_t v173 = a3;
  uint64_t v181 = v54;
  uint64_t v176 = v53;
  ((void (*)(uint64_t, uint64_t, uint64_t))v53)(a3, 1LL, 1LL);
  uint64_t v55 = *(void *)(a1 + 16);
  uint64_t v183 = v5;
  uint64_t v148 = v27;
  uint64_t v179 = v19;
  if (v55)
  {
    uint64_t v149 = v48;
    uint64_t v150 = v24;
    uint64_t v56 = a1 + ((*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    os_log_type_t v162 = &v188;
    uint64_t v174 = *(void *)(v19 + 72);
    uint64_t v147 = a1;
    __n128 v57 = swift_bridgeObjectRetain(a1);
    uint64_t v58 = type metadata accessor for FetchRequestBeacon;
    v57.n128_u64[0] = 141558531LL;
    __n128 v155 = v57;
    uint64_t v154 = (char *)&type metadata for Any + 8;
    v57.n128_u64[0] = 141559299LL;
    __n128 v153 = v57;
    uint64_t v59 = v171;
    double v60 = v172;
    os_log_type_t v168 = v51;
    uint64_t v61 = v166;
    uint64_t v62 = v173;
    uint64_t v163 = v14;
    while (1)
    {
      uint64_t v184 = v56;
      sub_10001DC4C(v56, v61, v58);
      uint64_t v63 = v177;
      sub_10001581C(v62, v177, &qword_1009A6678);
      uint64_t v64 = v181;
      int v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v179 + 48))(v63, 1LL, v181);
      uint64_t v185 = v55;
      if (v65 == 1)
      {
        sub_100015794(v62, &qword_1009A6678);
        sub_100015794(v63, &qword_1009A6678);
        sub_10001DC4C(v61, v62, v58);
        v176(v62, 0LL, 1LL, v64);
        uint64_t v66 = type metadata accessor for LocationFetcher(0LL);
        uint64_t v68 = v182;
        uint64_t v67 = v183;
        (*(void (**)(char *, uint64_t, uint64_t))(v183 + 16))(v59, v178 + *(int *)(v66 + 32), v182);
        uint64_t v69 = v164;
        sub_10001DC4C(v61, v164, v58);
        uint64_t v70 = v165;
        uint64_t v71 = sub_10001DC4C(v61, v165, v58);
        uint64_t v72 = (os_log_s *)Logger.logObject.getter(v71);
        int v167 = static os_log_type_t.default.getter(v72);
        if (os_log_type_enabled(v72, (os_log_type_t)v167))
        {
          os_log_t v161 = v72;
          uint64_t v73 = swift_slowAlloc(32LL, -1LL);
          uint64_t v160 = swift_slowAlloc(64LL, -1LL);
          uint64_t v189 = v160;
          *(_DWORD *)uint64_t v73 = v155.n128_u32[0];
          uint64_t v187 = 1752392040LL;
          uint64_t v74 = v162;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v162, v73 + 4, v73 + 12);
          *(_WORD *)(v73 + 12) = 2081;
          uint64_t v75 = type metadata accessor for UUID(0LL);
          uint64_t v76 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v77 = dispatch thunk of CustomStringConvertible.description.getter(v75, v76);
          uint64_t v187 = sub_1003F11D4(v77, v78, &v189);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v74, v73 + 14, v73 + 22);
          swift_bridgeObjectRelease();
          sub_100018C68(v69, v58);
          *(_WORD *)(v73 + 22) = 2082;
          uint64_t v79 = v158;
          sub_10001DC4C(v70, v158, v58);
          BOOL v80 = objc_autoreleasePoolPush();
          uint64_t v81 = v186;
          sub_1005FC998(v79, (unint64_t *)&v187);
          if (v81) {
            goto LABEL_26;
          }
          objc_autoreleasePoolPop(v80);
          uint64_t v82 = v187;
          unint64_t v83 = v188;
          sub_100018C68(v79, v58);
          uint64_t v187 = sub_1003F11D4(v82, v83, &v189);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v74, v73 + 24, v73 + 32);
          swift_bridgeObjectRelease();
          sub_100018C68(v70, v58);
          os_log_t v84 = v161;
          _os_log_impl( (void *)&_mh_execute_header,  v161,  (os_log_type_t)v167,  "Initial fetch instruction %{private,mask.hash}s, %{public}s.",  (uint8_t *)v73,  0x20u);
          uint64_t v85 = v160;
          swift_arrayDestroy(v160, 2LL, v154);
          swift_slowDealloc(v85, -1LL, -1LL);
          swift_slowDealloc(v73, -1LL, -1LL);

          uint64_t v59 = v171;
          (*(void (**)(char *, uint64_t))(v183 + 8))(v171, v182);
          uint64_t v61 = v166;
          sub_100018C68(v166, v58);
          uint64_t v186 = 0LL;
          double v60 = v172;
          uint64_t v62 = v173;
        }

        else
        {

          sub_100018C68(v70, v58);
          sub_100018C68(v69, v58);
          (*(void (**)(char *, uint64_t))(v67 + 8))(v59, v68);
          sub_100018C68(v61, v58);
          double v60 = v172;
          uint64_t v62 = v173;
        }
      }

      else
      {
        uint64_t v86 = (uint64_t)v168;
        sub_10002218C(v63, (uint64_t)v168, v58);
        uint64_t v87 = (uint64_t)v163;
        uint64_t v88 = v186;
        sub_1005FAC40(v61, (uint64_t)v163);
        uint64_t v186 = v88;
        if (v88)
        {
          sub_100018C68(v86, type metadata accessor for FetchRequestBeacon);
          sub_100018C68(v61, type metadata accessor for FetchRequestBeacon);
          swift_bridgeObjectRelease();
          sub_100015794(v62, &qword_1009A6678);
          return;
        }

        unint64_t v89 = v58;
        uint64_t v90 = v61;
        sub_100015794(v62, &qword_1009A6678);
        v176(v87, 0LL, 1LL, v181);
        sub_100015750(v87, v62, &qword_1009A6678);
        uint64_t v91 = type metadata accessor for LocationFetcher(0LL);
        uint64_t v92 = v60;
        (*(void (**)(char *, uint64_t, uint64_t))(v183 + 16))(v60, v178 + *(int *)(v91 + 32), v182);
        uint64_t v93 = v86;
        sub_10001DC4C(v86, v175, v89);
        sub_10001DC4C(v86, v180, v89);
        uint64_t v94 = v169;
        sub_10001DC4C(v90, v169, v89);
        uint64_t v95 = v170;
        uint64_t v96 = sub_10001DC4C(v90, v170, v89);
        uint64_t v97 = (os_log_s *)Logger.logObject.getter(v96);
        int v167 = static os_log_type_t.default.getter(v97);
        if (os_log_type_enabled(v97, (os_log_type_t)v167))
        {
          os_log_t v161 = v97;
          uint64_t v98 = swift_slowAlloc(62LL, -1LL);
          uint64_t v160 = swift_slowAlloc(128LL, -1LL);
          uint64_t v189 = v160;
          *(_DWORD *)uint64_t v98 = v153.n128_u32[0];
          uint64_t v187 = 1752392040LL;
          uint64_t v99 = v162;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v162, v98 + 4, v98 + 12);
          *(_WORD *)(v98 + 12) = 2081;
          uint64_t v100 = type metadata accessor for UUID(0LL);
          uint64_t v101 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v102 = v175;
          uint64_t v159 = v100;
          uint64_t v103 = dispatch thunk of CustomStringConvertible.description.getter(v100, v101);
          uint64_t v187 = sub_1003F11D4(v103, v104, &v189);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v99, v98 + 14, v98 + 22);
          swift_bridgeObjectRelease();
          sub_100018C68(v102, v89);
          *(_WORD *)(v98 + 22) = 2082;
          uint64_t v105 = v156;
          sub_10001DC4C(v180, v156, v89);
          BOOL v80 = objc_autoreleasePoolPush();
          uint64_t v106 = v186;
          sub_1005FC998(v105, (unint64_t *)&v187);
          if (v106) {
            goto LABEL_26;
          }
          objc_autoreleasePoolPop(v80);
          uint64_t v108 = v187;
          unint64_t v107 = v188;
          sub_100018C68(v105, v89);
          uint64_t v187 = sub_1003F11D4(v108, v107, &v189);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v99, v98 + 24, v98 + 32);
          swift_bridgeObjectRelease();
          sub_100018C68(v180, v89);
          *(_WORD *)(v98 + 32) = 2160;
          uint64_t v187 = 1752392040LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v99, v98 + 34, v98 + 42);
          *(_WORD *)(v98 + 42) = 2081;
          uint64_t v109 = v169;
          uint64_t v110 = dispatch thunk of CustomStringConvertible.description.getter(v159, v101);
          uint64_t v187 = sub_1003F11D4(v110, v111, &v189);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v99, v98 + 44, v98 + 52);
          swift_bridgeObjectRelease();
          sub_100018C68(v109, v89);
          *(_WORD *)(v98 + 52) = 2082;
          uint64_t v112 = v170;
          uint64_t v113 = v157;
          sub_10001DC4C(v170, v157, v89);
          char v114 = objc_autoreleasePoolPush();
          sub_1005FC998(v113, (unint64_t *)&v187);
          uint64_t v115 = v99;
          uint64_t v116 = v166;
          uint64_t v186 = 0LL;
          objc_autoreleasePoolPop(v114);
          uint64_t v117 = v187;
          unint64_t v118 = v188;
          sub_100018C68(v113, v89);
          uint64_t v187 = sub_1003F11D4(v117, v118, &v189);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v115, v98 + 54, v98 + 62);
          swift_bridgeObjectRelease();
          sub_100018C68(v112, v89);
          os_log_t v119 = v161;
          _os_log_impl( (void *)&_mh_execute_header,  v161,  (os_log_type_t)v167,  "Combining fetch instruction %{private,mask.hash}s %{public}s with %{private,mask.hash}s %{public}s.",  (uint8_t *)v98,  0x3Eu);
          uint64_t v120 = v160;
          swift_arrayDestroy(v160, 4LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v120, -1LL, -1LL);
          swift_slowDealloc(v98, -1LL, -1LL);

          double v60 = v172;
          (*(void (**)(char *, uint64_t))(v183 + 8))(v172, v182);
          sub_100018C68((uint64_t)v168, v89);
          sub_100018C68(v116, v89);
          uint64_t v62 = v173;
          uint64_t v59 = v171;
          uint64_t v61 = v116;
          uint64_t v58 = v89;
        }

        else
        {

          sub_100018C68(v95, v89);
          sub_100018C68(v94, v89);
          sub_100018C68(v180, v89);
          sub_100018C68(v175, v89);
          (*(void (**)(char *, uint64_t))(v183 + 8))(v92, v182);
          sub_100018C68(v93, v89);
          sub_100018C68(v90, v89);
          uint64_t v59 = v171;
          uint64_t v61 = v90;
          uint64_t v58 = v89;
          double v60 = v92;
        }
      }

      uint64_t v56 = v184 + v174;
      uint64_t v55 = v185 - 1;
      if (v185 == 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v121 = v152;
        uint64_t v122 = (uint64_t)v150;
        BOOL v48 = v149;
        goto LABEL_17;
      }
    }
  }

  uint64_t v62 = v173;
  uint64_t v121 = v152;
  uint64_t v122 = (uint64_t)v24;
LABEL_17:
  uint64_t v123 = v151;
  sub_10001581C(v62, v151, &qword_1009A6678);
  int v124 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v179 + 48))(v123, 1LL, v181);
  uint64_t v125 = v183;
  if (v124 == 1)
  {
    sub_100015794(v123, &qword_1009A6678);
    return;
  }

  uint64_t v126 = v123;
  uint64_t v127 = (uint64_t)v148;
  sub_10002218C(v126, (uint64_t)v48, type metadata accessor for FetchRequestBeacon);
  uint64_t v128 = type metadata accessor for LocationFetcher(0LL);
  uint64_t v129 = v182;
  (*(void (**)(char *, uint64_t, uint64_t))(v125 + 16))(v121, v178 + *(int *)(v128 + 32), v182);
  sub_10001DC4C((uint64_t)v48, v127, type metadata accessor for FetchRequestBeacon);
  uint64_t v130 = sub_10001DC4C((uint64_t)v48, v122, type metadata accessor for FetchRequestBeacon);
  uint64_t v131 = (os_log_s *)Logger.logObject.getter(v130);
  uint64_t v132 = v48;
  os_log_type_t v133 = static os_log_type_t.default.getter(v131);
  if (os_log_type_enabled(v131, v133))
  {
    uint64_t v149 = v132;
    uint64_t v134 = swift_slowAlloc(32LL, -1LL);
    uint64_t v185 = swift_slowAlloc(64LL, -1LL);
    uint64_t v189 = v185;
    *(_DWORD *)uint64_t v134 = 141558531;
    uint64_t v187 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, &v188, v134 + 4, v134 + 12);
    *(_WORD *)(v134 + 12) = 2081;
    uint64_t v135 = type metadata accessor for UUID(0LL);
    uint64_t v136 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v137 = dispatch thunk of CustomStringConvertible.description.getter(v135, v136);
    uint64_t v187 = sub_1003F11D4(v137, v138, &v189);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, &v188, v134 + 14, v134 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68(v127, type metadata accessor for FetchRequestBeacon);
    *(_WORD *)(v134 + 22) = 2082;
    uint64_t v150 = (char *)v122;
    uint64_t v139 = v146;
    sub_10001DC4C(v122, v146, type metadata accessor for FetchRequestBeacon);
    BOOL v80 = objc_autoreleasePoolPush();
    uint64_t v140 = v186;
    sub_1005FC998(v139, (unint64_t *)&v187);
    uint64_t v186 = v140;
    if (v140)
    {
LABEL_26:
      objc_autoreleasePoolPop(v80);
      __break(1u);
      return;
    }

    objc_autoreleasePoolPop(v80);
    uint64_t v141 = v187;
    unint64_t v142 = v188;
    sub_100018C68(v139, type metadata accessor for FetchRequestBeacon);
    uint64_t v187 = sub_1003F11D4(v141, v142, &v189);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, &v188, v134 + 24, v134 + 32);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v150, type metadata accessor for FetchRequestBeacon);
    _os_log_impl( (void *)&_mh_execute_header,  v131,  v133,  "Combined fetch instruction result %{private,mask.hash}s %{public}s.",  (uint8_t *)v134,  0x20u);
    uint64_t v143 = v185;
    swift_arrayDestroy(v185, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v143, -1LL, -1LL);
    swift_slowDealloc(v134, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v183 + 8))(v152, v182);
    uint64_t v144 = (uint64_t)v149;
  }

  else
  {

    sub_100018C68(v122, type metadata accessor for FetchRequestBeacon);
    sub_100018C68(v127, type metadata accessor for FetchRequestBeacon);
    (*(void (**)(char *, uint64_t))(v125 + 8))(v121, v129);
    uint64_t v144 = (uint64_t)v132;
  }

  sub_100018C68(v144, type metadata accessor for FetchRequestBeacon);
}

void sub_100224E3C( char *a1@<X0>, os_log_s *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v243 = a5;
  uint64_t v246 = a2;
  uint64_t v235 = a4;
  int v231 = a3;
  uint64_t v238 = a6;
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0LL);
  uint64_t v237 = *(void *)(RequestBeacon - 8);
  uint64_t v7 = __chkstk_darwin(RequestBeacon);
  uint64_t v222 = (uint64_t)&v207 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v228 = (uint64_t)&v207 - v10;
  __chkstk_darwin(v9);
  uint64_t v230 = (uint64_t)&v207 - v11;
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v12);
  uint64_t v219 = (char *)&v207 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v223 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v218 = *(void *)(v223 - 8);
  uint64_t v14 = __chkstk_darwin(v223);
  os_log_type_t v221 = (char *)&v207 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v216 = (uint64_t)&v207 - v17;
  __chkstk_darwin(v16);
  uint64_t v217 = (uint64_t)&v207 - v18;
  uint64_t v19 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v19);
  uint64_t v227 = (uint64_t *)((char *)&v207 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v236 = type metadata accessor for UUID(0LL);
  uint64_t v233 = *(void *)(v236 - 8);
  uint64_t v21 = __chkstk_darwin(v236);
  int v220 = (char *)&v207 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v234 = (char *)&v207 - v23;
  uint64_t v24 = type metadata accessor for Logger(0LL);
  unint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v207 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = __chkstk_darwin(v26);
  unint64_t v229 = (char *)&v207 - v30;
  __chkstk_darwin(v29);
  unint64_t v241 = (unint64_t)&v207 - v31;
  uint64_t v32 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v33 = __chkstk_darwin(v32);
  uint64_t v35 = (char *)&v207 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v33);
  uint64_t v37 = (char *)&v207 - v36;
  uint64_t v38 = type metadata accessor for Date(0LL);
  uint64_t v240 = *(void *)(v38 - 8);
  uint64_t v39 = __chkstk_darwin(v38);
  unint64_t v226 = (char *)&v207 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v225 = (char *)&v207 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v224 = (char *)&v207 - v44;
  __chkstk_darwin(v43);
  os_log_type_t v232 = (char *)&v207 - v45;
  uint64_t v46 = type metadata accessor for DateInterval(0LL);
  uint64_t v47 = *(os_log_s **)(v46 - 8);
  uint64_t v48 = __chkstk_darwin(v46);
  uint64_t v49 = __chkstk_darwin(v48);
  uint64_t v248 = a1;
  unint64_t v52 = *((void *)a1 + 2);
  if (!v52)
  {
    uint64_t v55 = type metadata accessor for LocationFetcher(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v28, v247 + *(int *)(v55 + 32), v24);
    uint64_t v56 = sub_100013044((uint64_t)v246, (uint64_t)&v250);
    __n128 v57 = (os_log_s *)Logger.logObject.getter(v56);
    int v58 = static os_log_type_t.default.getter(v57);
    if (os_log_type_enabled(v57, (os_log_type_t)v58))
    {
      LODWORD(v247) = v58;
      uint64_t v248 = v28;
      unint64_t v244 = v25;
      uint64_t v245 = v24;
      uint64_t v59 = swift_slowAlloc(32LL, -1LL);
      uint64_t v246 = (os_log_s *)swift_slowAlloc(64LL, -1LL);
      *(void *)&v249[0] = v246;
      *(_DWORD *)uint64_t v59 = 141558531;
      uint64_t v263 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264, v59 + 4, v59 + 12);
      *(_WORD *)(v59 + 12) = 2081;
      uint64_t v60 = *((void *)&v251 + 1);
      uint64_t v61 = v252;
      sub_100012ED8(&v250, *((uint64_t *)&v251 + 1));
      uint64_t v62 = v234;
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v61 + 8) + 8LL) + 32LL))(v60);
      uint64_t v63 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v64 = v236;
      uint64_t v65 = dispatch thunk of CustomStringConvertible.description.getter(v236, v63);
      unint64_t v67 = v66;
      (*(void (**)(char *, uint64_t))(v233 + 8))(v62, v64);
      uint64_t v263 = sub_1003F11D4(v65, v67, (uint64_t *)v249);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264, v59 + 14, v59 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v250);
      *(_WORD *)(v59 + 22) = 2082;
      if ((_BYTE)v231)
      {
        if (v231 == 1)
        {
          unint64_t v68 = 0xEA00000000007972LL;
          uint64_t v69 = 0x61646E6F6365732ELL;
        }

        else
        {
          unint64_t v68 = 0x80000001008533C0LL;
          uint64_t v69 = 0xD000000000000010LL;
        }
      }

      else
      {
        unint64_t v68 = 0xE800000000000000LL;
        uint64_t v69 = 0x7972616D6972702ELL;
      }

      unint64_t v120 = v244;
      uint64_t v121 = v246;
      uint64_t v263 = sub_1003F11D4(v69, v68, (uint64_t *)v249);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264, v59 + 24, v59 + 32);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v57,  (os_log_type_t)v247,  "No keys to fetch for beacon %{private,mask.hash}s, sequence: %{public}s.",  (uint8_t *)v59,  0x20u);
      swift_arrayDestroy(v121, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v121, -1LL, -1LL);
      swift_slowDealloc(v59, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v120 + 8))(v248, v245);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v250);

      (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v24);
    }

    goto LABEL_31;
  }

  unint64_t v244 = v25;
  uint64_t v245 = v24;
  unint64_t v53 = v52;
  if ((*(_BYTE *)(v243 + 8) & 1) == 0)
  {
    unint64_t v53 = *(void *)v243;
    if (*(uint64_t *)v243 <= 0)
    {
LABEL_31:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v237 + 56))(v238, 1LL, 1LL, RequestBeacon);
      return;
    }
  }

  if (__OFSUB__(v53, v235))
  {
    __break(1u);
    goto LABEL_63;
  }

  unint64_t v25 = (v53 - v235) & ~((uint64_t)(v53 - v235) >> 63);
  if (v53 < v25)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }

  if (v52 < v25)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }

  if (v52 < v53)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }

  uint64_t v214 = (char *)&v207 - v50;
  uint64_t v215 = v51;
  uint64_t v235 = v49;
  uint64_t v54 = type metadata accessor for TimeBasedKey(0LL);
  if (v25 != v53)
  {
    if (v25 < v53)
    {
      uint64_t v70 = *(void *)(v54 - 8);
      uint64_t v71 = *(unsigned __int8 *)(v70 + 80);
      uint64_t v72 = v248;
      uint64_t v73 = *(void *)(v70 + 72);
      uint64_t v212 = &v248[(v71 + 32) & ~v71];
      unint64_t v213 = v25;
      uint64_t v209 = v73;
      uint64_t v210 = v54;
      uint64_t v74 = (uint64_t)&v212[v73 * v25 + *(int *)(v54 + 20)];
      uint64_t v75 = v215;
      uint64_t v76 = v235;
      uint64_t v211 = (void (*)(uint64_t, uint64_t, uint64_t))*((void *)v47 + 2);
      v211(v215, v74, v235);
      swift_bridgeObjectRetain(v72);
      DateInterval.start.getter(v77);
      unint64_t v78 = (void (*)(uint64_t, uint64_t))*((void *)v47 + 1);
      v78(v75, v76);
      uint64_t v79 = v240;
      unint64_t v25 = *(void *)(v240 + 56);
      ((void (*)(char *, void, uint64_t, uint64_t))v25)(v37, 0LL, 1LL, v38);
      uint64_t v47 = *(os_log_s **)(v79 + 48);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v47)(v37, 1LL, v38) == 1)
      {
        uint64_t v35 = v37;
        goto LABEL_21;
      }

      uint64_t v207 = (void (*)(char *, void, uint64_t, uint64_t))v25;
      uint64_t v208 = v78;
      BOOL v80 = *(void (**)(char *, char *, uint64_t))(v79 + 32);
      v80(v232, v37, v38);
      if (v53 - 1 >= v213)
      {
        uint64_t v81 = v215;
        uint64_t v82 = v235;
        uint64_t v83 = ((uint64_t (*)(uint64_t, char *, uint64_t))v211)( v215,  &v212[v209 * (v53 - 1) + *(int *)(v210 + 20)],  v235);
        DateInterval.end.getter(v83);
        v208(v81, v82);
        v207(v35, 0LL, 1LL, v38);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v47)(v35, 1LL, v38) == 1)
        {
          (*(void (**)(char *, uint64_t))(v240 + 8))(v232, v38);
          goto LABEL_21;
        }

        uint64_t v105 = (2 * v53) | 1;
        uint64_t v106 = v80;
        unint64_t v107 = v224;
        v106(v224, v35, v38);
        uint64_t v108 = v240;
        uint64_t v109 = *(void (**)(char *, char *, uint64_t))(v240 + 16);
        uint64_t v110 = v225;
        unint64_t v111 = v232;
        v109(v225, v232, v38);
        uint64_t v112 = v226;
        v109(v226, v107, v38);
        DateInterval.init(start:end:)(v110, v112);
        uint64_t v113 = *(void (**)(char *, uint64_t))(v108 + 8);
        v113(v107, v38);
        v113(v111, v38);
        uint64_t v47 = v246;
        uint64_t v114 = *((void *)v246 + 3);
        uint64_t v115 = *((void *)v246 + 4);
        sub_100012ED8(v246, v114);
        uint64_t v116 = (uint64_t)v227;
        (*(void (**)(uint64_t, uint64_t))(v115 + 192))(v114, v115);
        uint64_t v117 = v233;
        uint64_t v118 = v236;
        int v119 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v233 + 48))(v116, 1LL, v236);
        unint64_t v241 = v105;
        if (v119 == 1)
        {
          sub_100015794(v116, &qword_10099D8A0);
          LODWORD(v24sub_100032838(0, 7LL, 0) = 0;
          unint64_t v53 = v247;
        }

        else
        {
          uint64_t v122 = (uint64_t)v220;
          (*(void (**)(char *, uint64_t, uint64_t))(v117 + 32))(v220, v116, v118);
          unint64_t v53 = v247;
          sub_100513108(v122, (uint64_t)&v250);
          uint64_t v123 = *((void *)&v251 + 1);
          if (*((void *)&v251 + 1))
          {
            uint64_t v124 = v118;
            uint64_t v125 = v252;
            sub_100012ED8(&v250, *((uint64_t *)&v251 + 1));
            LODWORD(v24sub_100032838(0, 7LL, 0) = (*(uint64_t (**)(uint64_t, uint64_t))(v125 + 24))(v123, v125);
            (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v122, v124);
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v250);
          }

          else
          {
            (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v122, v118);
            sub_100015794((uint64_t)&v250, (uint64_t *)&unk_1009AA790);
            LODWORD(v24sub_100032838(0, 7LL, 0) = 0;
          }
        }

        uint64_t v126 = *(void *)(v53 + 48);
        uint64_t v127 = *(void *)(v53 + 56);
        sub_100012ED8((void *)(v53 + 24), v126);
        LODWORD(v232) = (*(uint64_t (**)(uint64_t, uint64_t))(v127 + 40))(v126, v127);
        uint64_t v128 = *(void *)(v53 + 48);
        uint64_t v129 = *(void *)(v53 + 56);
        sub_100012ED8((void *)(v53 + 24), v128);
        unint64_t v25 = v242;
        if (qword_10099B5E8 == -1)
        {
LABEL_37:
          uint64_t v130 = qword_100A2AE20;
          swift_retain();
          unint64_t v131 = v25;
          OS_dispatch_queue.sync<A>(execute:)(sub_10024636C, v130, &type metadata for SecureLocationsConfig);
          swift_release();
          __int128 v260 = v249[10];
          __int128 v261 = v249[11];
          __int128 v262 = v249[12];
          __int128 v256 = v249[6];
          __int128 v257 = v249[7];
          __int128 v258 = v249[8];
          __int128 v259 = v249[9];
          __int128 v252 = v249[2];
          __int128 v253 = v249[3];
          __int128 v254 = v249[4];
          __int128 v255 = v249[5];
          __int128 v250 = v249[0];
          __int128 v251 = v249[1];
          sub_100246384(&v250);
          uint64_t v132 = (uint64_t)v221;
          if (BYTE8(v257) == 1)
          {
            sub_100013044((uint64_t)v47, (uint64_t)v249);
            uint64_t v133 = sub_100004AEC(&qword_1009B0530);
            uint64_t v134 = (uint64_t)v219;
            char v135 = swift_dynamicCast(v219, v249, v133, v223, 6LL);
            uint64_t v136 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v218 + 56);
            if ((v135 & 1) != 0)
            {
              v136(v134, 0LL, 1LL, v223);
              uint64_t v137 = v217;
              sub_10002218C(v134, v217, type metadata accessor for OwnedBeaconRecord);
              uint64_t v138 = *(void *)v53;
              uint64_t v139 = *(void *)(*(void *)v53 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
              uint64_t v140 = type metadata accessor for BeaconKeyManager(0LL);
              uint64_t v141 = v137;
              uint64_t v142 = v223;
              OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_10014F014,  v138,  v139,  (char *)&type metadata for () + 8,  v140);
              uint64_t v143 = sub_10079D660(v141 + *(int *)(v142 + 20));
              if (!v131)
              {
                uint64_t v157 = v143;
                swift_release();
                uint64_t v158 = v245;
                if (qword_10099BA30 != -1) {
                  swift_once(&qword_10099BA30, sub_100795FD8);
                }
                uint64_t v242 = 0LL;
                sub_10000A720(v158, (uint64_t)qword_100A2B7D8);
                uint64_t v159 = v216;
                uint64_t v160 = sub_10001DC4C(v141, v216, type metadata accessor for OwnedBeaconRecord);
                uint64_t v161 = v141;
                os_log_type_t v162 = (os_log_s *)Logger.logObject.getter(v160);
                os_log_type_t v163 = static os_log_type_t.default.getter(v162);
                int v164 = v163;
                if (os_log_type_enabled(v162, v163))
                {
                  uint64_t v165 = swift_slowAlloc(22LL, -1LL);
                  uint64_t v166 = swift_slowAlloc(32LL, -1LL);
                  LODWORD(v227) = v164;
                  uint64_t v167 = v166;
                  *(void *)&v249[0] = v166;
                  *(_DWORD *)uint64_t v165 = 141558275;
                  uint64_t v263 = 1752392040LL;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264, v165 + 4, v165 + 12);
                  *(_WORD *)(v165 + 12) = 2081;
                  uint64_t v168 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
                  uint64_t v169 = dispatch thunk of CustomStringConvertible.description.getter(v236, v168);
                  uint64_t v263 = sub_1003F11D4(v169, v170, (uint64_t *)v249);
                  uint64_t v47 = v246;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264, v165 + 14, v165 + 22);
                  swift_bridgeObjectRelease();
                  sub_100018C68(v159, type metadata accessor for OwnedBeaconRecord);
                  _os_log_impl( (void *)&_mh_execute_header,  v162,  (os_log_type_t)v227,  "Successfully fetched ownedDeviceKeys for %{private,mask.hash}s.",  (uint8_t *)v165,  0x16u);
                  swift_arrayDestroy(v167, 1LL, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v167, -1LL, -1LL);
                  uint64_t v156 = (uint64_t)v234;
                  swift_slowDealloc(v165, -1LL, -1LL);

                  sub_100018C68(v217, type metadata accessor for OwnedBeaconRecord);
                  goto LABEL_53;
                }

                sub_100018C68(v159, type metadata accessor for OwnedBeaconRecord);
                sub_100018C68(v161, type metadata accessor for OwnedBeaconRecord);
LABEL_52:
                uint64_t v156 = (uint64_t)v234;
LABEL_53:
                uint64_t v172 = *((void *)v47 + 3);
                uint64_t v171 = *((void *)v47 + 4);
                sub_100012ED8(v47, v172);
                (*(void (**)(uint64_t))(*(void *)(*(void *)(v171 + 8) + 8LL) + 32LL))(v172);
                uint64_t v174 = v214;
                uint64_t v173 = v215;
                uint64_t v175 = v235;
                v211(v215, (uint64_t)v214, v235);
                else {
                  int v176 = 0;
                }
                unsigned int v177 = v176 & 0xFFFFFF00 | v240;
                uint64_t v178 = (uint64_t)v248;
                swift_bridgeObjectRetain(v248);
                uint64_t v179 = v230;
                sub_1005FAEF0(v156, v173, v178, (uint64_t)v212, v213, v241, v231, v177, v230, 1LL, v157);
                uint64_t v180 = type metadata accessor for LocationFetcher(0LL);
                unint64_t v181 = v244;
                uint64_t v182 = v245;
                uint64_t v183 = (uint64_t)v47;
                uint64_t v184 = v229;
                (*(void (**)(char *, uint64_t, uint64_t))(v244 + 16))(v229, v247 + *(int *)(v180 + 32), v245);
                sub_100013044(v183, (uint64_t)&v250);
                uint64_t v185 = v228;
                uint64_t v186 = sub_10001DC4C(v179, v228, type metadata accessor for FetchRequestBeacon);
                uint64_t v187 = (os_log_s *)Logger.logObject.getter(v186);
                LODWORD(v247) = static os_log_type_t.default.getter(v187);
                if (os_log_type_enabled(v187, (os_log_type_t)v247))
                {
                  uint64_t v246 = v187;
                  uint64_t v188 = swift_slowAlloc(32LL, -1LL);
                  unint64_t v241 = swift_slowAlloc(64LL, -1LL);
                  uint64_t v263 = v241;
                  *(_DWORD *)uint64_t v188 = 141558531;
                  *(void *)&v249[0] = 1752392040LL;
                  uint64_t v189 = v236;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(v249, (char *)v249 + 8, v188 + 4, v188 + 12);
                  *(_WORD *)(v188 + 12) = 2081;
                  os_log_t v190 = v234;
                  uint64_t v191 = *((void *)&v251 + 1);
                  uint64_t v192 = v252;
                  sub_100012ED8(&v250, *((uint64_t *)&v251 + 1));
                  (*(void (**)(uint64_t))(*(void *)(*(void *)(v192 + 8) + 8LL) + 32LL))(v191);
                  uint64_t v193 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
                  uint64_t v194 = dispatch thunk of CustomStringConvertible.description.getter(v189, v193);
                  unint64_t v196 = v195;
                  (*(void (**)(char *, uint64_t))(v233 + 8))(v190, v189);
                  *(void *)&v249[0] = sub_1003F11D4(v194, v196, &v263);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(v249, (char *)v249 + 8, v188 + 14, v188 + 22);
                  swift_bridgeObjectRelease();
                  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v250);
                  *(_WORD *)(v188 + 22) = 2082;
                  uint64_t v197 = v222;
                  sub_10001DC4C(v185, v222, type metadata accessor for FetchRequestBeacon);
                  uint64_t v198 = objc_autoreleasePoolPush();
                  uint64_t v199 = v242;
                  sub_1005FC998(v197, (unint64_t *)v249);
                  uint64_t v242 = v199;
                  if (v199)
                  {
                    objc_autoreleasePoolPop(v198);
                    __break(1u);
                    return;
                  }

                  objc_autoreleasePoolPop(v198);
                  __int128 v200 = v249[0];
                  sub_100018C68(v197, type metadata accessor for FetchRequestBeacon);
                  *(void *)&v249[0] = sub_1003F11D4(v200, *((unint64_t *)&v200 + 1), &v263);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(v249, (char *)v249 + 8, v188 + 24, v188 + 32);
                  swift_bridgeObjectRelease();
                  sub_100018C68(v185, type metadata accessor for FetchRequestBeacon);
                  unint64_t v201 = v246;
                  _os_log_impl( (void *)&_mh_execute_header,  v246,  (os_log_type_t)v247,  "Created fetch instruction for beacon %{private,mask.hash}s: %{public}s.",  (uint8_t *)v188,  0x20u);
                  unint64_t v202 = v241;
                  swift_arrayDestroy(v241, 2LL, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v202, -1LL, -1LL);
                  swift_slowDealloc(v188, -1LL, -1LL);
                  swift_bridgeObjectRelease();

                  (*(void (**)(char *, uint64_t))(v244 + 8))(v229, v245);
                  int v203 = v214;
                  uint64_t v204 = v235;
                }

                else
                {

                  sub_100018C68(v185, type metadata accessor for FetchRequestBeacon);
                  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v250);
                  swift_bridgeObjectRelease();
                  (*(void (**)(char *, uint64_t))(v181 + 8))(v184, v182);
                  int v203 = v174;
                  uint64_t v204 = v175;
                }

                v208((uint64_t)v203, v204);
                uint64_t v205 = v243;
                *(void *)uint64_t v243 = v213;
                *(_BYTE *)(v205 + 8) = 0;
                uint64_t v206 = v238;
                sub_10002218C(v230, v238, type metadata accessor for FetchRequestBeacon);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v237 + 56))(v206, 0LL, 1LL, RequestBeacon);
                return;
              }

              swift_release();
              uint64_t v144 = v245;
              if (qword_10099BA30 != -1) {
                swift_once(&qword_10099BA30, sub_100795FD8);
              }
              sub_10000A720(v144, (uint64_t)qword_100A2B7D8);
              sub_10001DC4C(v141, v132, type metadata accessor for OwnedBeaconRecord);
              swift_errorRetain(v131);
              uint64_t v145 = swift_errorRetain(v131);
              uint64_t v146 = (os_log_s *)Logger.logObject.getter(v145);
              os_log_type_t v147 = static os_log_type_t.error.getter(v146);
              if (os_log_type_enabled(v146, v147))
              {
                uint64_t v148 = swift_slowAlloc(32LL, -1LL);
                uint64_t v227 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
                uint64_t v242 = swift_slowAlloc(32LL, -1LL);
                *(void *)&v249[0] = v242;
                *(_DWORD *)uint64_t v148 = 141558531;
                uint64_t v263 = 1752392040LL;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264, v148 + 4, v148 + 12);
                *(_WORD *)(v148 + 12) = 2081;
                uint64_t v149 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
                uint64_t v150 = dispatch thunk of CustomStringConvertible.description.getter(v236, v149);
                uint64_t v263 = sub_1003F11D4(v150, v151, (uint64_t *)v249);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264, v148 + 14, v148 + 22);
                swift_bridgeObjectRelease();
                sub_100018C68(v132, type metadata accessor for OwnedBeaconRecord);
                *(_WORD *)(v148 + 22) = 2112;
                swift_errorRetain(v131);
                uint64_t v152 = _swift_stdlib_bridgeErrorToNSError(v131);
                uint64_t v263 = v152;
                uint64_t v47 = v246;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264, v148 + 24, v148 + 32);
                __n128 v153 = v227;
                uint64_t *v227 = v152;
                swift_errorRelease(v131);
                swift_errorRelease(v131);
                _os_log_impl( (void *)&_mh_execute_header,  v146,  v147,  "Failed to get ownedDeviceKeys for %{private,mask.hash}s error %@.",  (uint8_t *)v148,  0x20u);
                uint64_t v154 = sub_100004AEC((uint64_t *)&unk_10099FB20);
                swift_arrayDestroy(v153, 1LL, v154);
                swift_slowDealloc(v153, -1LL, -1LL);
                uint64_t v155 = v242;
                swift_arrayDestroy(v242, 1LL, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v155, -1LL, -1LL);
                swift_slowDealloc(v148, -1LL, -1LL);

                uint64_t v156 = (uint64_t)v234;
                swift_errorRelease(v131);
                sub_100018C68(v217, type metadata accessor for OwnedBeaconRecord);
                uint64_t v242 = 0LL;
                uint64_t v157 = _swiftEmptyArrayStorage;
                goto LABEL_53;
              }

              swift_errorRelease(v131);
              swift_errorRelease(v131);
              sub_100018C68(v132, type metadata accessor for OwnedBeaconRecord);
              swift_errorRelease(v131);
              sub_100018C68(v141, type metadata accessor for OwnedBeaconRecord);
              uint64_t v242 = 0LL;
            }

            else
            {
              uint64_t v242 = v25;
              v136(v134, 1LL, 1LL, v223);
              sub_100015794(v134, (uint64_t *)&unk_1009A9C30);
            }
          }

          else
          {
            uint64_t v242 = v25;
          }

LABEL_67:
      __break(1u);
      goto LABEL_68;
    }

  swift_release(a6);
  swift_bridgeObjectRetain(v173);
  sub_100570F00(v112);
  swift_bridgeObjectRelease();
  uint64_t v113 = 0LL;
  a3 = v176 + 64;
  uint64_t v114 = 1LL << *(_BYTE *)(v176 + 32);
  uint64_t v115 = -1LL;
  if (v114 < 64) {
    uint64_t v115 = ~(-1LL << v114);
  }
  uint64_t v40 = v115 & *(void *)(v176 + 64);
  uint64_t v116 = (unint64_t)(v114 + 63) >> 6;
  if (v40) {
    goto LABEL_72;
  }
LABEL_73:
  uint64_t v43 = __OFADD__(v113++, 1LL);
  if (v43) {
    goto LABEL_119;
  }
  if (v113 >= v116) {
    goto LABEL_96;
  }
  int v119 = *(void *)(a3 + 8 * v113);
  if (v119)
  {
LABEL_83:
    uint64_t v40 = (v119 - 1) & v119;
    for (unint64_t i = __clz(__rbit64(v119)) + (v113 << 6); ; unint64_t i = v117 | (v113 << 6))
    {
      uint64_t v121 = *(void *)(v176 + 56) + 16 * i;
      uint64_t v122 = *(void **)v121;
      if ((*(_BYTE *)(v121 + 8) & 1) != 0)
      {
        uint64_t v184 = *(void **)v121;
        swift_errorRetain(v122);
        uint64_t v125 = sub_100004AEC((uint64_t *)&unk_1009A5470);
        swift_willThrowTypedImpl(&v184, v125, &protocol self-conformance witness table for Error);
        swift_bridgeObjectRelease();
        swift_release(v176);
        swift_bridgeObjectRelease();
        int v176 = (uint64_t)v122;
        goto LABEL_104;
      }

      type metadata accessor for BeaconStore(0LL);
      uint64_t v123 = v122;
      a4 = v179;
      sub_1005272FC((uint64_t)v123);
      uint64_t v179 = a4;
      if (a4)
      {
        sub_10006A574(v122, 0);
        sub_10006A574(v122, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release(v176);
        goto LABEL_103;
      }

      if (*((void *)&v182 + 1))
      {
        sub_100012EC0(&v181, (uint64_t)&v184);
        uint64_t v124 = v185;
        uint64_t v20 = v186;
        sub_100012ED8(&v184, v185);
        a4 = v179;
        sub_10002143C(*(void *)(v174 + 136), v124);
        uint64_t v179 = a4;
        if (a4)
        {
          sub_10006A574(v122, 0);
          sub_10006A574(v122, 0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release(v176);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v184);
LABEL_103:
          int v176 = v179;
LABEL_104:
          a4 = v170;
          a3 = v160;
          uint64_t v20 = v158;
          a8 = v167;
LABEL_105:
          sub_1005708C4(a8);
          uint64_t v132 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
          uint64_t v133 = String._bridgeToObjectiveC()();
          [v132 removeObjectForKey:v133];

          if (v35[165] == (_UNKNOWN *)-1LL)
          {
LABEL_106:
            uint64_t v134 = type metadata accessor for Logger(0LL);
            sub_10000A720(v134, (uint64_t)qword_100A2AC98);
            sub_10001DC4C(v175, v20, type metadata accessor for CloudKitChangeSet);
            variable initialization expression of CurrentLocationMonitor._currentAuthorizationStatus();
            char v135 = variable initialization expression of CurrentLocationMonitor._currentAuthorizationStatus();
            uint64_t v136 = (os_log_s *)Logger.logObject.getter(v135);
            uint64_t v137 = static os_log_type_t.default.getter(v136);
            if (os_log_type_enabled(v136, v137))
            {
              uint64_t v138 = swift_slowAlloc(28LL, -1LL);
              uint64_t v139 = swift_slowAlloc(32LL, -1LL);
              uint64_t v184 = (void *)v139;
              *(_DWORD *)uint64_t v138 = 136446722;
              uint64_t v140 = sub_100611D78();
              *(void *)&unint64_t v181 = sub_1003F11D4(v140, v141, (uint64_t *)&v184);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, (char *)&v181 + 8, v138 + 4, v138 + 12);
              swift_bridgeObjectRelease();
              sub_100018C68(v20, type metadata accessor for CloudKitChangeSet);
              *(_WORD *)(v138 + 12) = 1040;
              LODWORD(v181) = 0;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, (char *)&v181 + 4, v138 + 14, v138 + 18);
              *(_WORD *)(v138 + 18) = 2048;
              *(double *)&unint64_t v181 = v11;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, (char *)&v181 + 8, v138 + 20, v138 + 28);
              _os_log_impl( (void *)&_mh_execute_header,  v136,  v137,  "Done applying %{public}s duration: %.*fms [Failure]",  (uint8_t *)v138,  0x1Cu);
              swift_arrayDestroy(v139, 1LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v139, -1LL, -1LL);
              uint64_t v142 = v138;
              a4 = v170;
              swift_slowDealloc(v142, -1LL, -1LL);
            }

            else
            {
              sub_100018C68(v20, type metadata accessor for CloudKitChangeSet);
            }

            uint64_t v143 = v171;
            uint64_t v144 = v176;
            swift_errorRetain(v176);
            v143(v144, 1LL);
            swift_errorRelease(v144);
            swift_errorRelease(v144);
            return sub_1005278E4( v175,  (uint64_t (*)(void))a3,  a4,  "Calling wakeChangeSetQueue() after completing %{public}s");
          }

    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0) {
      uint64_t v11 = sub_1003CB1DC(0LL, *((void *)v11 + 2) + 1LL, 1, v11);
    }
    uint64_t v47 = *((void *)v11 + 2);
    uint64_t v46 = *((void *)v11 + 3);
    uint64_t v12 = v47 + 1;
    if (v47 >= v46 >> 1) {
      uint64_t v11 = sub_1003CB1DC((char *)(v46 > 1), v47 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    uint64_t v48 = v11 + 32;
    uint64_t v49 = &v11[16 * v47 + 32];
    *(void *)uint64_t v49 = v13;
    *((void *)v49 + 1) = v9;
    if (v47)
    {
      uint64_t v113 = v9;
      while (1)
      {
        uint64_t v50 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v55 = &v48[16 * v12];
          uint64_t v56 = *((void *)v55 - 8);
          __n128 v57 = *((void *)v55 - 7);
          uint64_t v61 = __OFSUB__(v57, v56);
          int v58 = v57 - v56;
          if (v61) {
            goto LABEL_135;
          }
          uint64_t v60 = *((void *)v55 - 6);
          uint64_t v59 = *((void *)v55 - 5);
          uint64_t v61 = __OFSUB__(v59, v60);
          unint64_t v53 = v59 - v60;
          uint64_t v54 = v61;
          if (v61) {
            goto LABEL_136;
          }
          uint64_t v62 = v12 - 2;
          uint64_t v63 = &v48[16 * v12 - 32];
          uint64_t v65 = *(void *)v63;
          uint64_t v64 = *((void *)v63 + 1);
          uint64_t v61 = __OFSUB__(v64, v65);
          unint64_t v66 = v64 - v65;
          if (v61) {
            goto LABEL_138;
          }
          uint64_t v61 = __OFADD__(v53, v66);
          unint64_t v67 = v53 + v66;
          if (v61) {
            goto LABEL_141;
          }
          if (v67 >= v58)
          {
            uint64_t v85 = &v48[16 * v50];
            unint64_t v87 = *(void *)v85;
            uint64_t v86 = *((void *)v85 + 1);
            uint64_t v61 = __OFSUB__(v86, v87);
            unint64_t v88 = v86 - v87;
            if (v61) {
              goto LABEL_145;
            }
            unint64_t v78 = v53 < v88;
            goto LABEL_105;
          }
        }

        else
        {
          if (v12 != 3)
          {
            uint64_t v79 = *((void *)v11 + 4);
            BOOL v80 = *((void *)v11 + 5);
            uint64_t v61 = __OFSUB__(v80, v79);
            uint64_t v72 = v80 - v79;
            uint64_t v73 = v61;
            goto LABEL_99;
          }

          unint64_t v52 = *((void *)v11 + 4);
          uint64_t v51 = *((void *)v11 + 5);
          uint64_t v61 = __OFSUB__(v51, v52);
          unint64_t v53 = v51 - v52;
          uint64_t v54 = v61;
        }

        if ((v54 & 1) != 0) {
          goto LABEL_137;
        }
        uint64_t v62 = v12 - 2;
        unint64_t v68 = &v48[16 * v12 - 32];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        uint64_t v71 = __OFSUB__(v69, v70);
        uint64_t v72 = v69 - v70;
        uint64_t v73 = v71;
        if (v71) {
          goto LABEL_140;
        }
        uint64_t v74 = &v48[16 * v50];
        uint64_t v76 = *(void *)v74;
        uint64_t v75 = *((void *)v74 + 1);
        uint64_t v61 = __OFSUB__(v75, v76);
        uint64_t v77 = v75 - v76;
        if (v61) {
          goto LABEL_143;
        }
        if (__OFADD__(v72, v77)) {
          goto LABEL_144;
        }
        if (v72 + v77 >= v53)
        {
          unint64_t v78 = v53 < v77;
LABEL_105:
          if (v78) {
            uint64_t v50 = v62;
          }
          goto LABEL_107;
        }

      objc_autoreleasePoolPop(a4);
      __break(1u);
LABEL_68:
      objc_autoreleasePoolPop(v28);
      __break(1u);
      goto LABEL_69;
    }

uint64_t sub_100226614(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0LL;
  }
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(a2 + 32));
  uint64_t v7 = v6;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v5 == v8 && v7 == v9)
  {
    uint64_t v13 = 0LL;
LABEL_17:
    swift_bridgeObjectRelease_n(v7, 2LL);
    return v13;
  }

  uint64_t v11 = v9;
  char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0LL);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v11);
  uint64_t v13 = 0LL;
  if ((v12 & 1) == 0)
  {
    uint64_t v14 = v2 - 1;
    while (1)
    {
      if (v14 == v13) {
        return 0LL;
      }
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(a2 + 40 + 8 * v13));
      uint64_t v7 = v16;
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
      if (v15 == v17 && v7 == v18) {
        break;
      }
      uint64_t v20 = v18;
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v7, v17, v18, 0LL);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v20);
      ++v13;
      if ((v21 & 1) != 0) {
        return v13;
      }
    }

    ++v13;
    goto LABEL_17;
  }

  return v13;
}

void sub_10022675C( uint64_t *a1, os_log_s *a2, uint64_t a3, int a4, void *a5, void *a6, int a7, uint64_t *a8, void (*a9)(uint64_t, uint64_t), uint64_t a10)
{
  uint64_t v11 = v10;
  uint64_t v123 = a8;
  int v112 = a7;
  unint64_t v120 = a5;
  uint64_t v121 = a6;
  uint64_t v16 = type metadata accessor for UUID(0LL);
  uint64_t v117 = *(void *)(v16 - 8);
  uint64_t v118 = v16;
  __chkstk_darwin(v16);
  uint64_t v116 = (char *)&v103 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for Logger(0LL);
  uint64_t v19 = *(void (***)(os_log_s *, char *, uint64_t))(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  unint64_t v111 = (os_log_s *)((char *)&v103 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v110 = (char *)&v103 - v23;
  __chkstk_darwin(v22);
  os_log_t v109 = (os_log_t)((char *)&v103 - v24);
  uint64_t v25 = type metadata accessor for DateInterval(0LL);
  uint64_t v114 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v103 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100227128((uint64_t)a2, a1 + 3, (uint64_t)v27);
  uint64_t v119 = a3;
  uint64_t v115 = v25;
  uint64_t v122 = a1;
  uint64_t v113 = v27;
  if (a3 < 1)
  {
    uint64_t v57 = type metadata accessor for LocationFetcher(0LL);
    v19[2](v111, (char *)a1 + *(int *)(v57 + 32), v18);
    uint64_t v58 = sub_100013044((uint64_t)a2, (uint64_t)&v125);
    uint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
    os_log_type_t v60 = static os_log_type_t.default.getter(v59);
    int v61 = v60;
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v62 = swift_slowAlloc(22LL, -1LL);
      LODWORD(v107) = v61;
      uint64_t v63 = v62;
      os_log_t v109 = (os_log_t)swift_slowAlloc(32LL, -1LL);
      os_log_t v129 = v109;
      *(_DWORD *)uint64_t v63 = 141558275;
      uint64_t v110 = (char *)v19;
      uint64_t v64 = (uint8_t *)v63;
      uint64_t v124 = 1752392040LL;
      uint64_t v106 = &v125;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, &v125, v63 + 4, v63 + 12);
      *(_WORD *)(v63 + 12) = 2081;
      os_log_t v105 = (os_log_t)(v63 + 14);
      uint64_t v66 = v127;
      uint64_t v65 = v128;
      sub_100012ED8(&v125, v127);
      unint64_t v67 = v116;
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v65 + 8) + 8LL) + 32LL))(v66);
      uint64_t v68 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v108 = v18;
      uint64_t v69 = v118;
      uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter(v118, v68);
      unint64_t v72 = v71;
      (*(void (**)(char *, uint64_t))(v117 + 8))(v67, v69);
      uint64_t v124 = sub_1003F11D4(v70, v72, (uint64_t *)&v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, v106, v105, v64 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v125);
      os_log_t v73 = v109;
      swift_arrayDestroy(v109, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v73, -1LL, -1LL);
      swift_slowDealloc(v64, -1LL, -1LL);

      uint64_t v56 = (uint64_t)v111;
      uint64_t v55 = (void (*)(os_log_s *, char *, uint64_t))*((void *)v110 + 1);
      goto LABEL_8;
    }

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v125);

    uint64_t v55 = v19[1];
    uint64_t v56 = (uint64_t)v111;
LABEL_13:
    uint64_t v74 = v18;
    goto LABEL_14;
  }

  uint64_t v28 = *a1;
  uint64_t v29 = *((void *)a2 + 3);
  unint64_t v111 = (os_log_s *)*((void *)a2 + 4);
  uint64_t v30 = sub_100012ED8(a2, v29);
  uint64_t v33 = (char *)sub_10054CE6C((uint64_t)v30, (uint64_t)v27, a4, 1, 0, v28, v29, (uint64_t)v111);
  if (!v32)
  {
    unint64_t v111 = (os_log_s *)v31;
    uint64_t v75 = type metadata accessor for LocationFetcher(0LL);
    uint64_t v76 = (void (**)(os_log_t, uint64_t))v19;
    uint64_t v77 = v19[2];
    os_log_t v78 = v109;
    v77(v109, (char *)v122 + *(int *)(v75 + 32), v18);
    sub_100013044((uint64_t)a2, (uint64_t)&v125);
    swift_bridgeObjectRetain(v33);
    BOOL v80 = (os_log_s *)Logger.logObject.getter(v79);
    os_log_type_t v81 = static os_log_type_t.default.getter(v80);
    int v82 = v81;
    if (os_log_type_enabled(v80, v81))
    {
      uint64_t v83 = swift_slowAlloc(22LL, -1LL);
      LODWORD(v106) = v82;
      uint64_t v84 = v83;
      os_log_t v107 = (os_log_t)swift_slowAlloc(32LL, -1LL);
      os_log_t v129 = v107;
      *(_DWORD *)uint64_t v84 = 141558275;
      uint64_t v124 = 1752392040LL;
      unint64_t v104 = &v125;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, &v125, v84 + 4, v84 + 12);
      *(_WORD *)(v84 + 12) = 2081;
      uint64_t v103 = v84 + 14;
      os_log_t v105 = v80;
      uint64_t v85 = v128;
      uint64_t v110 = (char *)v76;
      uint64_t v86 = v127;
      sub_100012ED8(&v125, v127);
      unint64_t v87 = *(void (**)(uint64_t))(*(void *)(*(void *)(v85 + 8) + 8LL) + 32LL);
      uint64_t v108 = v18;
      unint64_t v88 = v116;
      v87(v86);
      uint64_t v89 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v90 = v118;
      uint64_t v91 = dispatch thunk of CustomStringConvertible.description.getter(v118, v89);
      unint64_t v93 = v92;
      (*(void (**)(char *, uint64_t))(v117 + 8))(v88, v90);
      uint64_t v124 = sub_1003F11D4(v91, v93, (uint64_t *)&v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, v104, v103, v84 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v125);
      os_log_t v94 = v105;
      os_log_t v95 = v107;
      swift_arrayDestroy(v107, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v95, -1LL, -1LL);
      swift_slowDealloc(v84, -1LL, -1LL);

      sub_100117B2C((uint64_t)v33, (uint64_t)v111, 0);
      (*((void (**)(os_log_t, uint64_t))v110 + 1))(v109, v108);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v125);

      sub_100117B2C((uint64_t)v33, (uint64_t)v111, 0);
      v76[1](v78, v18);
    }

    goto LABEL_15;
  }

  if (v32 != 1)
  {
    uint64_t v34 = type metadata accessor for LocationFetcher(0LL);
    uint64_t v35 = v19;
    uint64_t v36 = v19[2];
    uint64_t v37 = v110;
    v36((os_log_s *)v110, (char *)v122 + *(int *)(v34 + 32), v18);
    uint64_t v38 = sub_100013044((uint64_t)a2, (uint64_t)&v125);
    uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v40 = static os_log_type_t.default.getter(v39);
    int v41 = v40;
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v42 = swift_slowAlloc(22LL, -1LL);
      LODWORD(v109) = v41;
      uint64_t v43 = v42;
      unint64_t v111 = (os_log_s *)swift_slowAlloc(32LL, -1LL);
      os_log_t v129 = v111;
      *(_DWORD *)uint64_t v43 = 141558275;
      uint64_t v124 = 1752392040LL;
      uint64_t v106 = &v125;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, &v125, v43 + 4, v43 + 12);
      *(_WORD *)(v43 + 12) = 2081;
      os_log_t v105 = (os_log_t)(v43 + 14);
      os_log_t v107 = v39;
      uint64_t v45 = v127;
      uint64_t v44 = v128;
      sub_100012ED8(&v125, v127);
      uint64_t v46 = *(void (**)(uint64_t))(*(void *)(*(void *)(v44 + 8) + 8LL) + 32LL);
      uint64_t v108 = v18;
      uint64_t v47 = v116;
      v46(v45);
      uint64_t v48 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v49 = v118;
      uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter(v118, v48);
      unint64_t v52 = v51;
      (*(void (**)(char *, uint64_t))(v117 + 8))(v47, v49);
      uint64_t v124 = sub_1003F11D4(v50, v52, (uint64_t *)&v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, v106, v105, v43 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v125);
      os_log_t v53 = v107;
      uint64_t v54 = (uint64_t)v111;
      swift_arrayDestroy(v111, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1LL, -1LL);
      swift_slowDealloc(v43, -1LL, -1LL);

      uint64_t v55 = v35[1];
      uint64_t v56 = (uint64_t)v110;
LABEL_8:
      uint64_t v74 = v108;
LABEL_14:
      ((void (*)(uint64_t, uint64_t))v55)(v56, v74);
      uint64_t v33 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_15;
    }

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v125);

    uint64_t v55 = v35[1];
    uint64_t v56 = (uint64_t)v37;
    goto LABEL_13;
  }

uint64_t sub_100227128@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v264 = a2;
  v282 = (void *)a1;
  uint64_t v271 = a3;
  uint64_t v275 = type metadata accessor for DateInterval(0LL);
  uint64_t v274 = *(void *)(v275 - 8);
  __chkstk_darwin(v275);
  __n128 v272 = (char *)&v254 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v284 = type metadata accessor for UUID(0LL);
  uint64_t v277 = *(void *)(v284 - 8);
  uint64_t v4 = __chkstk_darwin(v284);
  v268 = (char *)&v254 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v278 = (char *)&v254 - v6;
  uint64_t v289 = type metadata accessor for Logger(0LL);
  uint64_t v287 = *(void *)(v289 - 8);
  uint64_t v7 = __chkstk_darwin(v289);
  uint64_t v276 = (char *)&v254 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v254 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  __int128 v258 = (char *)&v254 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  __int128 v257 = (char *)&v254 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  __int128 v260 = (char *)&v254 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  __int128 v261 = (char *)&v254 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v254 - v21;
  __chkstk_darwin(v20);
  uint64_t v263 = (char *)&v254 - v23;
  uint64_t v290 = type metadata accessor for LocationFetcher(0LL);
  uint64_t v24 = *(void *)(v290 - 8);
  uint64_t v25 = *(void *)(v24 + 64);
  __chkstk_darwin(v290);
  uint64_t v26 = (char *)&v254 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v28 = __chkstk_darwin(v27);
  unint64_t v267 = (char *)&v254 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v266 = (uint64_t (*)(uint64_t, char *, uint64_t))((char *)&v254 - v31);
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v286 = (uint64_t)&v254 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v259 = (uint64_t)&v254 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v38 = (char *)&v254 - v37;
  __chkstk_darwin(v36);
  uint64_t v285 = (uint64_t)&v254 - v39;
  uint64_t v279 = type metadata accessor for Date(0LL);
  uint64_t v288 = *(void *)(v279 - 8);
  uint64_t v40 = __chkstk_darwin(v279);
  __n128 v270 = (char *)&v254 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v269 = (char *)&v254 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  v281 = (char *)&v254 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  v280 = (char *)&v254 - v47;
  uint64_t v48 = __chkstk_darwin(v46);
  __int128 v256 = (char *)&v254 - v49;
  __chkstk_darwin(v48);
  uint64_t v283 = (uint64_t)&v254 - v50;
  static Date.trustedNow.getter((uint64_t)&v254 - v50);
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  __int128 v273 = (void (*)(void, void))v11;
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v265 = 0LL;
  char v51 = sub_1006A141C(v297);
  swift_bridgeObjectRelease();
  if ((v51 & 1) != 0)
  {
    uint64_t v52 = v291;
    sub_10001DC4C( v291,  (uint64_t)&v254 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL),  type metadata accessor for LocationFetcher);
    uint64_t v53 = (uint64_t)v282;
    sub_100013044((uint64_t)v282, (uint64_t)&v297);
    uint64_t v54 = *(unsigned __int8 *)(v24 + 80);
    uint64_t v55 = (v54 + 16) & ~v54;
    unint64_t v56 = (v25 + v55 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v57 = swift_allocObject(&unk_10094ABC8, v56 + 40, v54 | 7);
    uint64_t v58 = (uint64_t)v26;
    uint64_t v59 = (void *)v53;
    sub_10002218C(v58, v57 + v55, type metadata accessor for LocationFetcher);
    sub_100012EC0(&v297, v57 + v56);
    uint64_t v60 = v285;
    unsafeFromAsyncTask<A>(_:)(&unk_1009A6698, v57, v27);
    swift_release();
    uint64_t v61 = v52 + *(int *)(v290 + 32);
    uint64_t v62 = v287;
    uint64_t v63 = v263;
    uint64_t v64 = v289;
    __int128 v262 = *(void (**)(char *, uint64_t, uint64_t))(v287 + 16);
    v262(v263, v61, v289);
    sub_10001581C(v60, (uint64_t)v38, (uint64_t *)&unk_10099D720);
    uint64_t v65 = sub_100013044(v53, (uint64_t)&v297);
    uint64_t v66 = (os_log_s *)Logger.logObject.getter(v65);
    os_log_type_t v67 = static os_log_type_t.default.getter(v66);
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = swift_slowAlloc(32LL, -1LL);
      uint64_t v255 = swift_slowAlloc(64LL, -1LL);
      uint64_t v293 = v255;
      *(_DWORD *)uint64_t v68 = 136446723;
      uint64_t v69 = v259;
      sub_10001581C((uint64_t)v38, v259, (uint64_t *)&unk_10099D720);
      uint64_t v70 = String.init<A>(describing:)(v69, v27);
      uint64_t v296 = sub_1003F11D4(v70, v71, &v293);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297, v68 + 4, v68 + 12);
      swift_bridgeObjectRelease();
      uint64_t v62 = v287;
      sub_100015794((uint64_t)v38, (uint64_t *)&unk_10099D720);
      *(_WORD *)(v68 + 12) = 2160;
      uint64_t v296 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297, v68 + 14, v68 + 22);
      *(_WORD *)(v68 + 22) = 2081;
      uint64_t v254 = v68 + 24;
      os_log_t v73 = v298;
      unint64_t v72 = v299;
      sub_100012ED8(&v297, (uint64_t)v298);
      uint64_t v74 = v278;
      (*(void (**)(ValueMetadata *))(*((void *)v72[1] + 1) + 32LL))(v73);
      uint64_t v75 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v76 = v284;
      uint64_t v77 = dispatch thunk of CustomStringConvertible.description.getter(v284, v75);
      unint64_t v79 = v78;
      (*(void (**)(char *, uint64_t))(v277 + 8))(v74, v76);
      uint64_t v296 = sub_1003F11D4(v77, v79, &v293);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297, v254, v68 + 32);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v297);
      _os_log_impl( (void *)&_mh_execute_header,  v66,  v67,  "Using last known good key: %{public}s, for beacon %{private,mask.hash}s.",  (uint8_t *)v68,  0x20u);
      uint64_t v80 = v255;
      swift_arrayDestroy(v255, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v80, -1LL, -1LL);
      uint64_t v81 = v68;
      uint64_t v59 = v282;
      swift_slowDealloc(v81, -1LL, -1LL);

      int v82 = *(char **)(v62 + 8);
      uint64_t v83 = v263;
    }

    else
    {
      sub_100015794((uint64_t)v38, (uint64_t *)&unk_10099D720);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v297);

      int v82 = *(char **)(v62 + 8);
      uint64_t v83 = v63;
    }

    uint64_t v263 = v82;
    ((void (*)(char *, uint64_t))v82)(v83, v64);
    uint64_t v85 = v279;
    uint64_t v84 = v288;
    uint64_t v87 = v64;
  }

  else
  {
    uint64_t v84 = v288;
    uint64_t v85 = v279;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v288 + 56))(v285, 1LL, 1LL, v279);
    uint64_t v86 = v291 + *(int *)(v290 + 32);
    uint64_t v62 = v287;
    uint64_t v87 = v289;
    __int128 v262 = *(void (**)(char *, uint64_t, uint64_t))(v287 + 16);
    v262(v22, v86, v289);
    uint64_t v59 = v282;
    uint64_t v88 = sub_100013044((uint64_t)v282, (uint64_t)&v297);
    uint64_t v89 = (os_log_s *)Logger.logObject.getter(v88);
    os_log_type_t v90 = static os_log_type_t.default.getter(v89);
    if (os_log_type_enabled(v89, v90))
    {
      uint64_t v91 = swift_slowAlloc(22LL, -1LL);
      uint64_t v92 = swift_slowAlloc(32LL, -1LL);
      uint64_t v293 = v92;
      *(_DWORD *)uint64_t v91 = 141558275;
      uint64_t v296 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297, v91 + 4, v91 + 12);
      *(_WORD *)(v91 + 12) = 2081;
      uint64_t v263 = (char *)(v91 + 14);
      os_log_t v94 = v298;
      unint64_t v93 = v299;
      sub_100012ED8(&v297, (uint64_t)v298);
      os_log_t v95 = v278;
      (*(void (**)(ValueMetadata *))(*((void *)v93[1] + 1) + 32LL))(v94);
      uint64_t v96 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v97 = v284;
      uint64_t v98 = dispatch thunk of CustomStringConvertible.description.getter(v284, v96);
      unint64_t v100 = v99;
      uint64_t v101 = v97;
      uint64_t v84 = v288;
      (*(void (**)(char *, uint64_t))(v277 + 8))(v95, v101);
      uint64_t v296 = sub_1003F11D4(v98, v100, &v293);
      uint64_t v59 = v282;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297, v263, v91 + 22);
      uint64_t v87 = v289;
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v297);
      swift_arrayDestroy(v92, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v102 = v92;
      uint64_t v62 = v287;
      swift_slowDealloc(v102, -1LL, -1LL);
      uint64_t v103 = v91;
      uint64_t v85 = v279;
      swift_slowDealloc(v103, -1LL, -1LL);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v297);
    }

    uint64_t v263 = *(char **)(v62 + 8);
    ((void (*)(char *, uint64_t))v263)(v22, v87);
  }

  uint64_t v104 = v264[3];
  uint64_t v105 = v264[4];
  sub_100012ED8(v264, v104);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v105 + 40))(v104, v105) & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v84 + 56))(v286, 1LL, 1LL, v85);
    os_log_t v109 = v260;
    v262(v260, v291 + *(int *)(v290 + 32), v87);
    uint64_t v132 = sub_100013044((uint64_t)v59, (uint64_t)&v297);
    unint64_t v111 = (os_log_s *)Logger.logObject.getter(v132);
    os_log_type_t v133 = static os_log_type_t.default.getter(v111);
    if (os_log_type_enabled(v111, v133))
    {
      uint64_t v134 = swift_slowAlloc(22LL, -1LL);
      uint64_t v135 = swift_slowAlloc(32LL, -1LL);
      uint64_t v293 = v135;
      *(_DWORD *)uint64_t v134 = 141558275;
      uint64_t v296 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297, v134 + 4, v134 + 12);
      *(_WORD *)(v134 + 12) = 2081;
      uint64_t v137 = v298;
      uint64_t v136 = v299;
      sub_100012ED8(&v297, (uint64_t)v298);
      uint64_t v138 = v278;
      (*(void (**)(ValueMetadata *))(*((void *)v136[1] + 1) + 32LL))(v137);
      uint64_t v139 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v140 = v284;
      uint64_t v141 = dispatch thunk of CustomStringConvertible.description.getter(v284, v139);
      unint64_t v143 = v142;
      (*(void (**)(char *, uint64_t))(v277 + 8))(v138, v140);
      uint64_t v296 = sub_1003F11D4(v141, v143, &v293);
      uint64_t v59 = v282;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297, v134 + 14, v134 + 22);
      uint64_t v87 = v289;
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v297);
      swift_arrayDestroy(v135, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v144 = v135;
      uint64_t v62 = v287;
      swift_slowDealloc(v144, -1LL, -1LL);
      swift_slowDealloc(v134, -1LL, -1LL);

      unint64_t v131 = v260;
      goto LABEL_20;
    }

    uint64_t v145 = (uint64_t *)&v297;
LABEL_19:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v145);

    unint64_t v131 = v109;
    goto LABEL_20;
  }

  uint64_t v106 = v59[3];
  uint64_t v107 = v59[4];
  sub_100012ED8(v59, v106);
  uint64_t v108 = v259;
  (*(void (**)(uint64_t, uint64_t))(v107 + 184))(v106, v107);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v84 + 56))(v108, 0LL, 1LL, v85);
  sub_100015750(v108, v286, (uint64_t *)&unk_10099D720);
  os_log_t v109 = v261;
  v262(v261, v291 + *(int *)(v290 + 32), v87);
  sub_100013044((uint64_t)v59, (uint64_t)&v297);
  uint64_t v110 = sub_100013044((uint64_t)v59, (uint64_t)&v293);
  unint64_t v111 = (os_log_s *)Logger.logObject.getter(v110);
  os_log_type_t v112 = static os_log_type_t.default.getter(v111);
  if (!os_log_type_enabled(v111, v112))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v297);
    uint64_t v145 = &v293;
    goto LABEL_19;
  }

  uint64_t v113 = v85;
  uint64_t v114 = swift_slowAlloc(32LL, -1LL);
  uint64_t v264 = (void *)swift_slowAlloc(64LL, -1LL);
  uint64_t v296 = (uint64_t)v264;
  *(_DWORD *)uint64_t v114 = 136446723;
  uint64_t v115 = v298;
  uint64_t v116 = v299;
  sub_100012ED8(&v297, (uint64_t)v298);
  uint64_t v117 = v256;
  ((void (*)(ValueMetadata *, _UNKNOWN **))v116[23])(v115, v116);
  uint64_t v118 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v119 = dispatch thunk of CustomStringConvertible.description.getter(v113, v118);
  unint64_t v121 = v120;
  (*(void (**)(char *, uint64_t))(v84 + 8))(v117, v113);
  uint64_t v292 = sub_1003F11D4(v119, v121, &v296);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v292, &v293, v114 + 4, v114 + 12);
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v297);
  *(_WORD *)(v114 + 12) = 2160;
  uint64_t v292 = 1752392040LL;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v292, &v293, v114 + 14, v114 + 22);
  *(_WORD *)(v114 + 22) = 2081;
  uint64_t v123 = v294;
  uint64_t v122 = v295;
  sub_100012ED8(&v293, v294);
  uint64_t v124 = v278;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v122 + 8) + 8LL) + 32LL))(v123);
  uint64_t v125 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v126 = v284;
  uint64_t v127 = dispatch thunk of CustomStringConvertible.description.getter(v284, v125);
  unint64_t v129 = v128;
  (*(void (**)(char *, uint64_t))(v277 + 8))(v124, v126);
  uint64_t v292 = sub_1003F11D4(v127, v129, &v296);
  uint64_t v59 = v282;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v292, &v293, v114 + 24, v114 + 32);
  uint64_t v87 = v289;
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v293);
  _os_log_impl( (void *)&_mh_execute_header,  v111,  v112,  "Using policy fetch limit of baseDate/Pairing: %{public}s for beacon %{private,mask.hash}s.",  (uint8_t *)v114,  0x20u);
  uint64_t v130 = v264;
  swift_arrayDestroy(v264, 2LL, (char *)&type metadata for Any + 8);
  uint64_t v62 = v287;
  swift_slowDealloc(v130, -1LL, -1LL);
  swift_slowDealloc(v114, -1LL, -1LL);

  unint64_t v131 = v261;
LABEL_20:
  ((void (*)(char *, uint64_t))v263)(v131, v87);
  uint64_t v146 = v273;
  uint64_t v147 = (uint64_t)v268;
  uint64_t v148 = (uint64_t)v267;
  uint64_t v149 = v266;
  sub_10001581C(v286, (uint64_t)v266, (uint64_t *)&unk_10099D720);
  sub_10001581C(v285, v148, (uint64_t *)&unk_10099D720);
  uint64_t v150 = *(void *)(v291 + *(int *)(v290 + 36));
  uint64_t v152 = v59[3];
  uint64_t v151 = v59[4];
  sub_100012ED8(v59, v152);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v151 + 8) + 8LL) + 32LL))(v152);
  if (*(void *)(v150 + 16) && (unint64_t v153 = sub_10030D124(v147), (v154 & 1) != 0))
  {
    uint64_t v155 = *(void **)(*(void *)(v150 + 56) + 8 * v153);
    id v156 = v155;
  }

  else
  {
    uint64_t v155 = 0LL;
  }

  uint64_t v277 = *(void *)(v277 + 8);
  ((void (*)(uint64_t, uint64_t))v277)(v147, v284);
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v298 = &type metadata for Configuration;
  uint64_t v299 = &off_10093C838;
  sub_1003DBB9C(v59, v283, v149, v148, v155, &v297, v280);

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v297);
  sub_100015794(v148, (uint64_t *)&unk_10099D720);
  sub_100015794((uint64_t)v149, (uint64_t *)&unk_10099D720);
  if (qword_10099BA48 != -1) {
    swift_once(&qword_10099BA48, sub_1007C7B1C);
  }
  uint64_t v157 = swift_retain();
  AnyCurrentValuePublisher.value.getter(&v297, v157);
  swift_release();
  LODWORD(v267) = v297;
  if ((v297 & 1) == 0)
  {
    uint64_t v180 = v291 + *(int *)(v290 + 32);
    v268 = *(char **)(v62 + 16);
    ((void (*)(void (*)(void, void), uint64_t, uint64_t))v268)(v146, v180, v87);
    uint64_t v181 = sub_100013044((uint64_t)v59, (uint64_t)&v297);
    uint64_t v182 = (os_log_s *)Logger.logObject.getter(v181);
    os_log_type_t v183 = static os_log_type_t.default.getter(v182);
    if (os_log_type_enabled(v182, v183))
    {
      uint64_t v184 = swift_slowAlloc(22LL, -1LL);
      uint64_t v185 = swift_slowAlloc(32LL, -1LL);
      uint64_t v293 = v185;
      *(_DWORD *)uint64_t v184 = 141558275;
      uint64_t v296 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297, v184 + 4, v184 + 12);
      *(_WORD *)(v184 + 12) = 2081;
      uint64_t v187 = v298;
      uint64_t v186 = v299;
      sub_100012ED8(&v297, (uint64_t)v298);
      uint64_t v188 = v278;
      (*(void (**)(ValueMetadata *))(*((void *)v186[1] + 1) + 32LL))(v187);
      uint64_t v189 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v190 = v284;
      uint64_t v191 = dispatch thunk of CustomStringConvertible.description.getter(v284, v189);
      unint64_t v193 = v192;
      ((void (*)(char *, uint64_t))v277)(v188, v190);
      uint64_t v296 = sub_1003F11D4(v191, v193, &v293);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297, v184 + 14, v184 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v297);
      _os_log_impl( (void *)&_mh_execute_header,  v182,  v183,  "Manual time is enabled. Adding 24h to current time for end date for beacon %{private,mask.hash}s.",  (uint8_t *)v184,  0x16u);
      swift_arrayDestroy(v185, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v185, -1LL, -1LL);
      swift_slowDealloc(v184, -1LL, -1LL);

      uint64_t v194 = *(void (**)(void, void))(v287 + 8);
      unint64_t v195 = v273;
      uint64_t v196 = v289;
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v297);

      uint64_t v194 = *(void (**)(void, void))(v62 + 8);
      unint64_t v195 = v146;
      uint64_t v196 = v87;
    }

    __int128 v273 = v194;
    uint64_t v214 = ((uint64_t (*)(void, uint64_t))v194)(v195, v196);
    uint64_t v215 = v276;
    uint64_t v216 = v275;
    uint64_t v217 = v274;
    uint64_t v218 = v272;
    uint64_t v219 = v279;
    uint64_t v220 = v288;
    double v221 = 86400.0;
    goto LABEL_38;
  }

  uint64_t v158 = v59[3];
  uint64_t v159 = v59[4];
  sub_100012ED8(v59, v158);
  char v160 = (*(uint64_t (**)(uint64_t, uint64_t))(v159 + 112))(v158, v159);
  uint64_t v161 = v291 + *(int *)(v290 + 32);
  os_log_type_t v162 = *(char **)(v62 + 16);
  v268 = v162;
  if ((v160 & 1) != 0)
  {
    os_log_type_t v163 = v257;
    ((void (*)(char *, uint64_t, uint64_t))v162)(v257, v161, v87);
    uint64_t v164 = sub_100013044((uint64_t)v59, (uint64_t)&v297);
    uint64_t v165 = (os_log_s *)Logger.logObject.getter(v164);
    os_log_type_t v166 = static os_log_type_t.default.getter(v165);
    if (os_log_type_enabled(v165, v166))
    {
      uint64_t v167 = swift_slowAlloc(22LL, -1LL);
      uint64_t v168 = swift_slowAlloc(32LL, -1LL);
      uint64_t v293 = v168;
      *(_DWORD *)uint64_t v167 = 141558275;
      uint64_t v296 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297, v167 + 4, v167 + 12);
      *(_WORD *)(v167 + 12) = 2081;
      __int128 v273 = (void (*)(void, void))(v167 + 14);
      unint64_t v170 = v298;
      uint64_t v169 = v299;
      sub_100012ED8(&v297, (uint64_t)v298);
      uint64_t v171 = v278;
      (*(void (**)(ValueMetadata *))(*((void *)v169[1] + 1) + 32LL))(v170);
      uint64_t v172 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v173 = v284;
      uint64_t v174 = dispatch thunk of CustomStringConvertible.description.getter(v284, v172);
      unint64_t v176 = v175;
      ((void (*)(char *, uint64_t))v277)(v171, v173);
      uint64_t v296 = sub_1003F11D4(v174, v176, &v293);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297, v273, v167 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v297);
      _os_log_impl( (void *)&_mh_execute_header,  v165,  v166,  "Manual time is disabled. Adding 4h to current time for end date for beacon %{private,mask.hash}s.",  (uint8_t *)v167,  0x16u);
      swift_arrayDestroy(v168, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v168, -1LL, -1LL);
      swift_slowDealloc(v167, -1LL, -1LL);

      unsigned int v177 = *(void (**)(void, void))(v287 + 8);
      uint64_t v178 = v163;
      uint64_t v179 = v289;
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v297);

      unsigned int v177 = *(void (**)(void, void))(v62 + 8);
      uint64_t v178 = v163;
      uint64_t v179 = v87;
    }

    __int128 v273 = v177;
    uint64_t v214 = ((uint64_t (*)(char *, uint64_t))v177)(v178, v179);
    uint64_t v215 = v276;
    uint64_t v216 = v275;
    uint64_t v217 = v274;
    uint64_t v218 = v272;
    uint64_t v219 = v279;
    uint64_t v220 = v288;
    double v221 = 14400.0;
LABEL_38:
    Date.addingTimeInterval(_:)(v214, v221);
    uint64_t v222 = v281;
    goto LABEL_41;
  }

  uint64_t v197 = v258;
  ((void (*)(char *, uint64_t, uint64_t))v162)(v258, v161, v87);
  uint64_t v198 = sub_100013044((uint64_t)v59, (uint64_t)&v297);
  uint64_t v199 = (os_log_s *)Logger.logObject.getter(v198);
  os_log_type_t v200 = static os_log_type_t.default.getter(v199);
  if (os_log_type_enabled(v199, v200))
  {
    uint64_t v201 = swift_slowAlloc(22LL, -1LL);
    uint64_t v202 = swift_slowAlloc(32LL, -1LL);
    uint64_t v293 = v202;
    *(_DWORD *)uint64_t v201 = 141558275;
    uint64_t v296 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297, v201 + 4, v201 + 12);
    *(_WORD *)(v201 + 12) = 2081;
    __int128 v273 = (void (*)(void, void))(v201 + 14);
    uint64_t v204 = v298;
    int v203 = v299;
    sub_100012ED8(&v297, (uint64_t)v298);
    uint64_t v205 = v278;
    (*(void (**)(ValueMetadata *))(*((void *)v203[1] + 1) + 32LL))(v204);
    uint64_t v206 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v207 = v284;
    uint64_t v208 = dispatch thunk of CustomStringConvertible.description.getter(v284, v206);
    unint64_t v210 = v209;
    ((void (*)(char *, uint64_t))v277)(v205, v207);
    uint64_t v296 = sub_1003F11D4(v208, v210, &v293);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297, v273, v201 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v297);
    _os_log_impl( (void *)&_mh_execute_header,  v199,  v200,  "Manual time is disabled. Using current time as end date for beacon %{private,mask.hash}s.",  (uint8_t *)v201,  0x16u);
    swift_arrayDestroy(v202, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v202, -1LL, -1LL);
    swift_slowDealloc(v201, -1LL, -1LL);

    uint64_t v211 = *(void (**)(void, void))(v287 + 8);
    uint64_t v212 = v197;
    uint64_t v213 = v289;
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v297);

    uint64_t v211 = *(void (**)(void, void))(v62 + 8);
    uint64_t v212 = v197;
    uint64_t v213 = v87;
  }

  __int128 v273 = v211;
  v211(v212, v213);
  uint64_t v215 = v276;
  uint64_t v216 = v275;
  uint64_t v217 = v274;
  uint64_t v218 = v272;
  uint64_t v220 = v288;
  uint64_t v222 = v281;
  uint64_t v219 = v279;
  (*(void (**)(char *, uint64_t, uint64_t))(v288 + 16))(v281, v283, v279);
LABEL_41:
  uint64_t v223 = *(void (**)(char *, char *, uint64_t))(v220 + 16);
  uint64_t v224 = v269;
  uint64_t v225 = v280;
  v223(v269, v280, v219);
  uint64_t v226 = sub_100007864( &qword_1009A1280,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  if ((dispatch thunk of static Comparable.>= infix(_:_:)(v225, v222, v219, v226) & 1) != 0) {
    uint64_t v227 = v225;
  }
  else {
    uint64_t v227 = v222;
  }
  uint64_t v228 = v270;
  v223(v270, v227, v219);
  uint64_t v229 = v271;
  DateInterval.init(start:end:)(v224, v228);
  uint64_t v230 = v289;
  ((void (*)(char *, uint64_t, uint64_t))v268)(v215, v291 + *(int *)(v290 + 32), v289);
  sub_100013044((uint64_t)v282, (uint64_t)&v297);
  uint64_t v231 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v217 + 16))(v218, v229, v216);
  os_log_type_t v232 = (os_log_s *)Logger.logObject.getter(v231);
  os_log_type_t v233 = static os_log_type_t.default.getter(v232);
  int v234 = v233;
  if (os_log_type_enabled(v232, v233))
  {
    uint64_t v235 = swift_slowAlloc(38LL, -1LL);
    uint64_t v291 = swift_slowAlloc(64LL, -1LL);
    uint64_t v293 = v291;
    *(_DWORD *)uint64_t v235 = 141558787;
    uint64_t v296 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297, v235 + 4, v235 + 12);
    *(_WORD *)(v235 + 12) = 2081;
    uint64_t v236 = v218;
    LODWORD(v29sub_100032838(0, 7LL, 0) = v234;
    uint64_t v238 = v298;
    uint64_t v237 = v299;
    sub_100012ED8(&v297, (uint64_t)v298);
    unint64_t v239 = v278;
    (*(void (**)(ValueMetadata *))(*((void *)v237[1] + 1) + 32LL))(v238);
    uint64_t v240 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v241 = v284;
    uint64_t v242 = dispatch thunk of CustomStringConvertible.description.getter(v284, v240);
    unint64_t v244 = v243;
    ((void (*)(char *, uint64_t))v277)(v239, v241);
    uint64_t v296 = sub_1003F11D4(v242, v244, &v293);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297, v235 + 14, v235 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v297);
    *(_WORD *)(v235 + 22) = 1024;
    LODWORD(v296) = (_DWORD)v267;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, (char *)&v296 + 4, v235 + 24, v235 + 28);
    *(_WORD *)(v235 + 28) = 2082;
    uint64_t v245 = sub_100007864( &qword_1009A0DE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval,  (uint64_t)&protocol conformance descriptor for DateInterval);
    uint64_t v246 = v236;
    uint64_t v247 = v275;
    uint64_t v248 = dispatch thunk of CustomStringConvertible.description.getter(v275, v245);
    uint64_t v296 = sub_1003F11D4(v248, v249, &v293);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297, v235 + 30, v235 + 38);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v274 + 8))(v246, v247);
    _os_log_impl( (void *)&_mh_execute_header,  v232,  (os_log_type_t)v290,  "Fetch interval computed for beacon %{private,mask.hash}s, automaticTime: %{BOOL}d, dateInterval: %{public}s.",  (uint8_t *)v235,  0x26u);
    uint64_t v250 = v291;
    swift_arrayDestroy(v291, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v250, -1LL, -1LL);
    swift_slowDealloc(v235, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v287 + 8))(v276, v289);
    __int128 v251 = *(void (**)(char *, uint64_t))(v288 + 8);
    v251(v281, v219);
    __int128 v252 = v280;
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v217 + 8))(v218, v216);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v297);
    v273(v215, v230);
    __int128 v251 = *(void (**)(char *, uint64_t))(v288 + 8);
    v251(v281, v219);
    __int128 v252 = v225;
  }

  v251(v252, v219);
  sub_100015794(v286, (uint64_t *)&unk_10099D720);
  sub_100015794(v285, (uint64_t *)&unk_10099D720);
  return ((uint64_t (*)(uint64_t, uint64_t))v251)(v283, v219);
}

uint64_t sub_100228E50( uint64_t a1, char *a2, os_log_s *a3, int a4, uint64_t a5, void *a6, uint64_t a7, void *a8, char a9, uint64_t *a10, void (*a11)(uint64_t, uint64_t), uint64_t a12, _BYTE *a13)
{
  LODWORD(v69) = a4;
  uint64_t v20 = type metadata accessor for UUID(0LL);
  uint64_t v67 = *(void *)(v20 - 8);
  uint64_t v68 = v20;
  __chkstk_darwin(v20);
  uint64_t v66 = (char *)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0LL);
  uint64_t v23 = *(void *)(RequestBeacon - 8);
  uint64_t v71 = RequestBeacon;
  uint64_t v72 = v23;
  __chkstk_darwin(RequestBeacon);
  uint64_t v62 = (uint64_t)&v60 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = sub_100004AEC(&qword_1009A6678);
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v63 = (uint64_t)&v60 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v61 = (uint64_t *)((char *)&v60 - v29);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v60 - v31;
  uint64_t result = __chkstk_darwin(v30);
  uint64_t v35 = (uint64_t *)((char *)&v60 - v34);
  os_log_t v73 = a6;
  uint64_t v36 = a5 - *a6;
  if (__OFSUB__(a5, *a6))
  {
    __break(1u);
  }

  else
  {
    uint64_t v37 = a5;
    uint64_t v38 = v70;
    sub_100224E3C(a2, a3, v69, v36, a7, (uint64_t)&v60 - v34);
    if (v38)
    {
      swift_errorRelease(v38);
      uint64_t v39 = v71;
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v72 + 56))(v35, 1LL, 1LL, v71);
      uint64_t v64 = 0LL;
    }

    else
    {
      uint64_t v64 = 0LL;
      uint64_t v39 = v71;
    }

    uint64_t v69 = a1;
    uint64_t v70 = a8;
    sub_1002292B8(v35, v73, a8);
    uint64_t v41 = *((void *)a3 + 3);
    uint64_t v40 = *((void *)a3 + 4);
    sub_100012ED8(a3, v41);
    char v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 112))(v41, v40);
    uint64_t v65 = a7;
    if ((v42 & 1) == 0 || (a9 & 1) == 0)
    {
      uint64_t v63 = v37;
      goto LABEL_15;
    }

    sub_10001581C((uint64_t)v35, (uint64_t)v32, &qword_1009A6678);
    uint64_t v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48);
    if (v43(v32, 1LL, v39) == 1)
    {
      uint64_t v63 = v37;
      sub_100015794((uint64_t)v32, &qword_1009A6678);
LABEL_15:
      uint64_t v55 = *((void *)a3 + 3);
      uint64_t v54 = *((void *)a3 + 4);
      sub_100012ED8(a3, v55);
      uint64_t v56 = (uint64_t)v66;
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v54 + 8) + 8LL) + 32LL))(v55);
      char v57 = (*(void *)v65 == 0LL) & ~*(_BYTE *)(v65 + 8);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a10);
      uint64_t v74 = *a10;
      *a10 = 0x8000000000000000LL;
      sub_10005DE98(v57, v56, isUniquelyReferenced_nonNull_native);
      *a10 = v74;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v56, v68);
      uint64_t v59 = *a10;
      swift_bridgeObjectRetain(*a10);
      sub_100229700(v73, v70, v63, v59, a11, a12, 0);
      swift_bridgeObjectRelease();
      LOBYTE(v59) = (*(unsigned int (**)(void *, uint64_t, uint64_t))(v72 + 48))(v35, 1LL, v71) != 1;
      uint64_t result = sub_100015794((uint64_t)v35, &qword_1009A6678);
      *a13 = v59;
      return result;
    }

    uint64_t v44 = v62;
    sub_10002218C((uint64_t)v32, v62, type metadata accessor for FetchRequestBeacon);
    uint64_t v45 = v61;
    sub_100229584(a3, (uint64_t)v61);
    uint64_t v46 = v63;
    sub_10001581C((uint64_t)v45, v63, &qword_1009A6678);
    unsigned int v47 = v43((char *)v46, 1LL, v39);
    uint64_t v48 = v70;
    if (v47 == 1)
    {
      uint64_t result = sub_100015794(v46, &qword_1009A6678);
      uint64_t v49 = 0LL;
    }

    else
    {
      uint64_t v50 = v46;
      uint64_t v51 = *(void *)(v46 + *(int *)(v39 + 28));
      swift_bridgeObjectRetain(v51);
      sub_100018C68(v50, type metadata accessor for FetchRequestBeacon);
      uint64_t v49 = *(void *)(v51 + 16);
      uint64_t result = swift_bridgeObjectRelease();
    }

    BOOL v52 = __OFADD__(v37, v49);
    uint64_t v53 = v37 + v49;
    if (!v52)
    {
      uint64_t v63 = v53;
      sub_1002292B8(v45, v73, v48);
      sub_100015794((uint64_t)v45, &qword_1009A6678);
      sub_100018C68(v44, type metadata accessor for FetchRequestBeacon);
      goto LABEL_15;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1002292B8(void *a1, void *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v32 = *(void *)(v6 - 8);
  uint64_t v33 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_1009A6678);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0LL);
  uint64_t v13 = *(void *)(RequestBeacon - 8);
  uint64_t v14 = __chkstk_darwin(RequestBeacon);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v31 - v17;
  sub_10001581C((uint64_t)a1, (uint64_t)v11, &qword_1009A6678);
  sub_10002218C((uint64_t)v11, (uint64_t)v18, type metadata accessor for FetchRequestBeacon);
  uint64_t v20 = *(void *)(*(void *)&v18[*(int *)(RequestBeacon + 28)] + 16LL);
  BOOL v21 = __OFADD__(*a2, v20);
  uint64_t v22 = *a2 + v20;
  if (v21)
  {
    __break(1u);
  }

  else
  {
    *a2 = v22;
    uint64_t v23 = *a3;
    if (*(void *)(*a3 + 16LL) && (unint64_t v24 = sub_10030D124((uint64_t)v18), (v25 & 1) != 0))
    {
      a1 = *(void **)(*(void *)(v23 + 56) + 8 * v24);
      swift_bridgeObjectRetain(a1);
    }

    else
    {
      a1 = _swiftEmptyArrayStorage;
    }

    sub_10001DC4C((uint64_t)v18, (uint64_t)v16, type metadata accessor for FetchRequestBeacon);
    if ((swift_isUniquelyReferenced_nonNull_native(a1) & 1) != 0) {
      goto LABEL_9;
    }
  }

  a1 = (void *)sub_1004C5714(0, a1[2] + 1LL, 1, (unint64_t)a1);
LABEL_9:
  unint64_t v27 = a1[2];
  unint64_t v26 = a1[3];
  if (v27 >= v26 >> 1) {
    a1 = (void *)sub_1004C5714(v26 > 1, v27 + 1, 1, (unint64_t)a1);
  }
  a1[2] = v27 + 1;
  sub_10002218C( (uint64_t)v16,  (uint64_t)a1 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))
  + *(void *)(v13 + 72) * v27,
    type metadata accessor for FetchRequestBeacon);
  uint64_t v29 = v32;
  uint64_t v28 = v33;
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v8, v18, v33);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a3);
  uint64_t v34 = *a3;
  *a3 = 0x8000000000000000LL;
  sub_10005DFEC((uint64_t)a1, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  *a3 = v34;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v28);
  return sub_100018C68((uint64_t)v18, type metadata accessor for FetchRequestBeacon);
}

uint64_t sub_100229584@<X0>(os_log_s *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v5 = sub_1005FE730(0);
  if ((v6 & 1) != 0)
  {
    uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RequestBeacon - 8) + 56LL))( a2,  1LL,  1LL,  RequestBeacon);
  }

  else
  {
    __chkstk_darwin(v5);
    id v12[2] = v2;
    void v12[3] = a1;
    uint64_t v9 = sub_100631DC8((void (*)(void))sub_100246310, (uint64_t)v12, v7, v8);
    uint64_t v13 = 0LL;
    char v14 = 1;
    sub_100224E3C((char *)v9, a1, 1, *(void *)(v9 + 16), (uint64_t)&v13, a2);
    return swift_bridgeObjectRelease();
  }

uint64_t sub_100229700( void *a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6, char a7)
{
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t result = __chkstk_darwin(v15);
  if (__OFSUB__(a3, *a1))
  {
    __break(1u);
  }

  else if (a3 - *a1 < 1 || (a7 & 1) != 0)
  {
    v19[1] = a6;
    uint64_t v20 = a5;
    uint64_t v17 = __chkstk_darwin(*a2);
    v19[-2] = v7;
    sub_1002400DC(v17, (void (*)(char *, uint64_t, __n128))sub_1002462F8);
    if (*(void *)(v18 + 16))
    {
      v20(v18, a4);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      *a2 = &_swiftEmptyDictionarySingleton;
      *a1 = 0LL;
    }

    else
    {
      return swift_bridgeObjectRelease();
    }
  }

  return result;
}

uint64_t sub_1002299E8@<X0>(uint64_t *a1@<X0>, void *a2@<X2>, uint64_t a3@<X8>)
{
  if (v3)
  {
    swift_errorRelease(v3);
    uint64_t v5 = type metadata accessor for TimeBasedKey(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))( a3,  1LL,  1LL,  v5);
  }

  else
  {
    uint64_t v7 = type metadata accessor for TimeBasedKey(0LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(a3, 0LL, 1LL, v7);
  }

BOOL sub_100229A84(uint64_t a1)
{
  return (*(_BYTE *)(a1 + *(int *)(type metadata accessor for RawSearchResult(0LL) + 36)) & 0xFE) != 12;
}

uint64_t sub_100229ABC(os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, os_log_s *a6)
{
  unint64_t v79 = a6;
  uint64_t v81 = a3;
  uint64_t v80 = type metadata accessor for UUID(0LL);
  uint64_t v82 = *(void *)(v80 - 8);
  uint64_t v10 = __chkstk_darwin(v80);
  uint64_t v76 = &v72[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v10);
  uint64_t v75 = &v72[-v12];
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (os_log_s *)&v72[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v15);
  uint64_t v19 = (os_log_s *)&v72[-v18];
  uint64_t v20 = a5[6];
  uint64_t v21 = a5[7];
  sub_100012ED8(a5 + 3, v20);
  uint64_t result = sub_1003E2048(v20, v21);
  uint64_t v23 = a4 * result;
  if ((unsigned __int128)(a4 * (__int128)result) >> 64 == (a4 * result) >> 63)
  {
    uint64_t v74 = a1;
    BOOL v25 = (uint64_t)a1 >= a4 || v23 <= a2;
    unint64_t v26 = (char *)a5 + *(int *)(type metadata accessor for LocationFetcher(0LL) + 32);
    uint64_t v78 = v14;
    unint64_t v27 = *(void (**)(os_log_s *, char *, uint64_t))(v14 + 16);
    BOOL v77 = v25;
    if (v25)
    {
      uint64_t v28 = a2;
      uint64_t v29 = (_BYTE *)v13;
      v27(v19, v26, v13);
      uint64_t v30 = v75;
      uint64_t v31 = v80;
      (*(void (**)(_BYTE *, os_log_s *, uint64_t))(v82 + 16))(v75, v79, v80);
      uint64_t v32 = v81;
      uint64_t v33 = swift_bridgeObjectRetain_n(v81, 2LL);
      uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
      os_log_type_t v35 = static os_log_type_t.default.getter(v34);
      int v36 = v35;
      unint64_t v79 = v34;
      if (os_log_type_enabled(v34, v35))
      {
        int v73 = v36;
        uint64_t v76 = v29;
        BOOL v37 = (uint64_t)v74 >= a4;
        uint64_t v38 = swift_slowAlloc(44LL, -1LL);
        uint64_t v74 = v19;
        uint64_t v39 = v38;
        uint64_t v40 = swift_slowAlloc(64LL, -1LL);
        uint64_t v84 = v40;
        *(_DWORD *)uint64_t v39 = 67110147;
        LODWORD(v83) = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, (char *)&v83 + 4, v39 + 4, v39 + 8);
        *(_WORD *)(v39 + 8) = 1024;
        LODWORD(v83) = v23 <= v28;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, (char *)&v83 + 4, v39 + 10, v39 + 14);
        *(_WORD *)(v39 + 14) = 2160;
        uint64_t v83 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v39 + 16, v39 + 24);
        *(_WORD *)(v39 + 24) = 2081;
        uint64_t v41 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter(v31, v41);
        uint64_t v83 = sub_1003F11D4(v42, v43, &v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v39 + 26, v39 + 34);
        swift_bridgeObjectRelease();
        (*(void (**)(_BYTE *, uint64_t))(v82 + 8))(v30, v31);
        *(_WORD *)(v39 + 34) = 2082;
        swift_bridgeObjectRetain(v32);
        uint64_t v45 = Array.description.getter(v44, &type metadata for UInt8);
        uint64_t v46 = v32;
        unint64_t v48 = v47;
        swift_bridgeObjectRelease();
        uint64_t v83 = sub_1003F11D4(v45, v48, &v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v39 + 36, v39 + 44);
        swift_bridgeObjectRelease_n(v46, 2LL);
        swift_bridgeObjectRelease();
        uint64_t v49 = v79;
        _os_log_impl( (void *)&_mh_execute_header,  v79,  (os_log_type_t)v73,  "Found enough primary results: %{BOOL}d, or enough secondary results: %{BOOL}d to terminate beacon: %{private,m ask.hash}s, parts: %{public}s.",  (uint8_t *)v39,  0x2Cu);
        swift_arrayDestroy(v40, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v40, -1LL, -1LL);
        swift_slowDealloc(v39, -1LL, -1LL);

        (*(void (**)(os_log_s *, _BYTE *))(v78 + 8))(v74, v76);
      }

      else
      {
        (*(void (**)(_BYTE *, uint64_t))(v82 + 8))(v30, v31);

        swift_bridgeObjectRelease_n(v32, 2LL);
        (*(void (**)(os_log_s *, _BYTE *))(v78 + 8))(v19, v29);
      }
    }

    else
    {
      uint64_t v50 = v17;
      uint64_t v51 = v13;
      v27(v17, v26, v13);
      uint64_t v52 = v82;
      uint64_t v53 = v76;
      uint64_t v54 = v80;
      (*(void (**)(_BYTE *, os_log_s *, uint64_t))(v82 + 16))(v76, v79, v80);
      uint64_t v55 = v81;
      uint64_t v56 = swift_bridgeObjectRetain_n(v81, 2LL);
      char v57 = (os_log_s *)Logger.logObject.getter(v56);
      os_log_type_t v58 = static os_log_type_t.default.getter(v57);
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = swift_slowAlloc(44LL, -1LL);
        uint64_t v60 = swift_slowAlloc(64LL, -1LL);
        unint64_t v79 = v50;
        uint64_t v75 = (_BYTE *)v60;
        uint64_t v84 = v60;
        *(_DWORD *)uint64_t v59 = 67110147;
        LODWORD(v83) = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, (char *)&v83 + 4, v59 + 4, v59 + 8);
        *(_WORD *)(v59 + 8) = 1024;
        LODWORD(v83) = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, (char *)&v83 + 4, v59 + 10, v59 + 14);
        *(_WORD *)(v59 + 14) = 2160;
        uint64_t v83 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v59 + 16, v59 + 24);
        *(_WORD *)(v59 + 24) = 2081;
        uint64_t v61 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter(v54, v61);
        uint64_t v83 = sub_1003F11D4(v62, v63, &v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v59 + 26, v59 + 34);
        swift_bridgeObjectRelease();
        (*(void (**)(_BYTE *, uint64_t))(v82 + 8))(v53, v54);
        *(_WORD *)(v59 + 34) = 2082;
        swift_bridgeObjectRetain(v55);
        uint64_t v65 = Array.description.getter(v64, &type metadata for UInt8);
        uint64_t v66 = v55;
        unint64_t v68 = v67;
        swift_bridgeObjectRelease();
        uint64_t v83 = sub_1003F11D4(v65, v68, &v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v59 + 36, v59 + 44);
        swift_bridgeObjectRelease_n(v66, 2LL);
        swift_bridgeObjectRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v57,  v58,  "Not enough primary results: %{BOOL}d, or enough secondary results: %{BOOL}d to terminate beacon: %{private,mas k.hash}s, parts: %{public}s.",  (uint8_t *)v59,  0x2Cu);
        uint64_t v69 = v75;
        swift_arrayDestroy(v75, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v69, -1LL, -1LL);
        swift_slowDealloc(v59, -1LL, -1LL);

        uint64_t v70 = v79;
        uint64_t v71 = *(void (**)(os_log_s *, uint64_t))(v78 + 8);
      }

      else
      {
        (*(void (**)(_BYTE *, uint64_t))(v52 + 8))(v53, v54);

        swift_bridgeObjectRelease_n(v55, 2LL);
        uint64_t v71 = *(void (**)(os_log_s *, uint64_t))(v78 + 8);
        uint64_t v70 = v50;
      }

      v71(v70, v51);
    }

    return v77;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_10022A190(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v48 = a4;
  uint64_t v49 = a5;
  uint64_t v51 = type metadata accessor for UUID(0LL);
  uint64_t v54 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v50 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = type metadata accessor for Logger(0LL);
  uint64_t v55 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v52 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for RawSearchResult(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = (_BYTE *)swift_allocObject(&unk_10094AD58, 21LL, 7LL);
  v14[16] = a2;
  v14[17] = a1;
  v14[18] = BYTE1(a1) & 1;
  v14[19] = BYTE2(a1) & 1;
  int v56 = a1;
  unint64_t v47 = v14;
  v14[20] = HIBYTE(a1) & 1;
  uint64_t v15 = sub_1006F6728(a3);
  uint64_t v17 = v16;
  char v19 = v18;
  swift_bridgeObjectRetain(a3);
  if ((v19 & 1) != 0)
  {
LABEL_30:
    __break(1u);
    return;
  }

  LODWORD(v58) = v56 & 0x1010100;
  if ((v56 & 0x10000) != 0) {
    int v20 = 0x10000;
  }
  else {
    int v20 = 0x1000000;
  }
  if ((v56 & 0x100) != 0) {
    int v21 = 256;
  }
  else {
    int v21 = v20;
  }
  LODWORD(v57) = v21;
  while (1)
  {
    if (*(_DWORD *)(a3 + 36) != (_DWORD)v17)
    {
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }

    uint64_t v24 = 1LL << *(_BYTE *)(a3 + 32);
    if (v15 == v24) {
      goto LABEL_24;
    }
    if (v15 < 0 || v15 >= v24) {
      goto LABEL_28;
    }
    sub_10001DC4C( *(void *)(a3 + 48) + *(void *)(v11 + 72) * v15,  (uint64_t)v13,  type metadata accessor for RawSearchResult);
    int v25 = v13[*(int *)(v10 + 36)];
    if (v25 == 12)
    {
      if ((a2 & 1) == 0) {
        goto LABEL_9;
      }
    }

    else if ((((v25 != 13) ^ a2) & 1) == 0)
    {
LABEL_9:
      sub_100018C68((uint64_t)v13, type metadata accessor for RawSearchResult);
      goto LABEL_10;
    }

    int v26 = sub_100041014(*v13 & 0xB);
    int v27 = v26;
    if (!(_DWORD)v58) {
      break;
    }
    int v28 = v26 & v57;
    sub_100018C68((uint64_t)v13, type metadata accessor for RawSearchResult);
    if (v28) {
      goto LABEL_24;
    }
LABEL_10:
    uint64_t v15 = sub_1001FE5FC(v15, v17, 0LL, a3);
    uint64_t v17 = v22;
    if ((v23 & 1) != 0) {
      goto LABEL_30;
    }
  }

  sub_100018C68((uint64_t)v13, type metadata accessor for RawSearchResult);
  if ((v27 & 0x1010100) != 0) {
    goto LABEL_10;
  }
LABEL_24:
  uint64_t v29 = sub_10023FAF8( v15,  v17,  0,  1LL << *(_BYTE *)(a3 + 32),  *(unsigned int *)(a3 + 36),  0,  a3,  (uint64_t (*)(char *))sub_100246F20);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v30 = type metadata accessor for LocationFetcher(0LL);
  uint64_t v31 = v55;
  uint64_t v32 = v52;
  uint64_t v33 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v52, v48 + *(int *)(v30 + 32), v53);
  uint64_t v34 = v54;
  os_log_type_t v35 = v50;
  uint64_t v36 = v51;
  uint64_t v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 16))(v50, v49, v51);
  uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
  os_log_type_t v39 = static os_log_type_t.default.getter(v38);
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = swift_slowAlloc(42LL, -1LL);
    uint64_t v57 = swift_slowAlloc(64LL, -1LL);
    uint64_t v59 = v29;
    uint64_t v60 = v57;
    *(_DWORD *)uint64_t v40 = 134218755;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v40 + 4, v40 + 12);
    *(_WORD *)(v40 + 12) = 2160;
    uint64_t v59 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v40 + 14, v40 + 22);
    *(_WORD *)(v40 + 22) = 2081;
    uint64_t v58 = v29;
    uint64_t v41 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter(v36, v41);
    uint64_t v59 = sub_1003F11D4(v42, v43, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v40 + 24, v40 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v35, v36);
    *(_WORD *)(v40 + 32) = 2082;
    uint64_t v44 = sub_1000409B4(v56 & 0x10101FF);
    uint64_t v59 = sub_1003F11D4(v44, v45, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v40 + 34, v40 + 42);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "Found %ld results for %{private,mask.hash}s, multipart: %{public}s.",  (uint8_t *)v40,  0x2Au);
    uint64_t v46 = v57;
    swift_arrayDestroy(v57, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1LL, -1LL);
    swift_slowDealloc(v40, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v55 + 8))(v32, v33);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v36);

    (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v33);
  }

BOOL sub_10022A6EC(_BYTE *a1, char a2, int a3)
{
  int v6 = a1[*(int *)(type metadata accessor for RawSearchResult(0LL) + 36)];
  if (v6 == 12)
  {
    if ((a2 & 1) == 0) {
      return 0LL;
    }
  }

  else if ((v6 != 13) == (a2 & 1))
  {
    return 0LL;
  }

  int v8 = sub_100041014(*a1 & 0xB);
  if ((a3 & 0x10000) != 0) {
    int v9 = 0x10000;
  }
  else {
    int v9 = 0x1000000;
  }
  int v10 = v8 & v9;
  if ((a3 & 0x100) != 0) {
    int v10 = v8 & 0x100;
  }
  if (v10) {
    BOOL v7 = (a3 & 0x1010100) != 0;
  }
  else {
    BOOL v7 = 0LL;
  }
  if (!(a3 & 0x1010100 | v8 & 0x100)) {
    return (v8 & 0x1010000) == 0;
  }
  return v7;
}

void *sub_10022A7B0(uint64_t a1, uint64_t a2)
{
  uint64_t v44 = a2;
  uint64_t v3 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  unint64_t v43 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v8);
  int v10 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  uint64_t v17 = __chkstk_darwin(v14);
  v42[0] = (uint64_t)v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  char v19 = (char *)v42 - v18;
  sub_100013044(a1, (uint64_t)v48);
  uint64_t v20 = sub_100004AEC(&qword_1009B0530);
  int v21 = swift_dynamicCast(v13, v48, v20, v14, 6LL);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  if (!v21)
  {
    v22(v13, 1LL, 1LL, v14);
    sub_100015794((uint64_t)v13, (uint64_t *)&unk_1009A9C30);
    return _swiftEmptyArrayStorage;
  }

  v22(v13, 0LL, 1LL, v14);
  sub_10002218C((uint64_t)v13, (uint64_t)v19, type metadata accessor for OwnedBeaconRecord);
  sub_10001DC4C((uint64_t)&v19[*(int *)(v14 + 24)], (uint64_t)v10, type metadata accessor for StableIdentifier);
  if (swift_getEnumCaseMultiPayload(v10, v8) != 3)
  {
    sub_100018C68((uint64_t)v10, type metadata accessor for StableIdentifier);
    goto LABEL_7;
  }

  uint64_t v23 = sub_100004AEC((uint64_t *)&unk_1009AF840);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v24 = v10[*(int *)(v23 + 96)];
  int v25 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v26 = v45;
  v25(v10, v45);
  sub_10001581C((uint64_t)&v19[*(int *)(v14 + 28)], (uint64_t)v5, &qword_10099D8A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v5, 1LL, v26) == 1)
  {
    sub_100015794((uint64_t)v5, &qword_10099D8A0);
LABEL_7:
    sub_100018C68((uint64_t)v19, type metadata accessor for OwnedBeaconRecord);
    return _swiftEmptyArrayStorage;
  }

  uint64_t v29 = (uint64_t)v43;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v43, v5, v26);
  sub_100513108(v29, (uint64_t)&v46);
  if (!v47)
  {
    v25((char *)v29, v26);
    sub_100015794((uint64_t)&v46, (uint64_t *)&unk_1009AA790);
    goto LABEL_7;
  }

  sub_100012EC0(&v46, (uint64_t)v48);
  else {
    uint64_t v30 = off_10094AEC8[v24];
  }
  uint64_t v31 = v49;
  uint64_t v32 = v50;
  sub_100012ED8(v48, v49);
  uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v32 + 16);
  __n128 v34 = swift_bridgeObjectRetain(v30);
  uint64_t v35 = v33(v31, v32, v34);
  uint64_t v36 = v42[0];
  sub_10001DC4C((uint64_t)v19, v42[0], type metadata accessor for OwnedBeaconRecord);
  uint64_t v37 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v38 = (v37 + 16) & ~v37;
  uint64_t v39 = swift_allocObject(&unk_10094AD80, v38 + v16, v37 | 7);
  uint64_t v40 = sub_10002218C(v36, v39 + v38, type metadata accessor for OwnedBeaconRecord);
  __chkstk_darwin(v40);
  v42[-4] = v44;
  v42[-3] = (uint64_t)v30;
  v42[-2] = v42[1];
  v42[-1] = (uint64_t)v19;
  uint64_t v41 = sub_100189220( (uint64_t)_swiftEmptyArrayStorage,  (void (*)(uint64_t *, char *))sub_10024723C,  (uint64_t)&v42[-6],  v35,  (uint64_t (*)(char *))sub_100247200,  v39);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  int v27 = sub_1004E7DC0(v41);
  swift_bridgeObjectRelease();
  v25((char *)v29, v45);
  sub_100018C68((uint64_t)v19, type metadata accessor for OwnedBeaconRecord);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v48);
  return v27;
}

uint64_t sub_10022AC68(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v50 = a4;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v52 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v51 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009A66C0);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (uint64_t)&v48 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (uint64_t)&v48 - v17;
  char v19 = sub_10022B08C((uint64_t)&v48 - v17, a2, a3);
  if (v4)
  {
    uint64_t v20 = type metadata accessor for LocationFetcher(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v51, a1 + *(int *)(v20 + 32), v8);
    swift_errorRetain(v4);
    uint64_t v21 = swift_errorRetain(v4);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc(12LL, -1LL);
      uint64_t v50 = (uint64_t *)v8;
      int v25 = (uint8_t *)v24;
      uint64_t v26 = (void *)swift_slowAlloc(32LL, -1LL);
      uint64_t v55 = v26;
      *(_DWORD *)int v25 = 136446210;
      uint64_t v53 = v4;
      swift_errorRetain(v4);
      uint64_t v27 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v28 = String.init<A>(describing:)(&v53, v27);
      uint64_t v53 = sub_1003F11D4(v28, v29, (uint64_t *)&v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v4);
      swift_errorRelease(v4);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Error getting owned device keys %{public}s.", v25, 0xCu);
      swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v25, -1LL, -1LL);

      swift_errorRelease(v4);
      return (*(uint64_t (**)(char *, uint64_t *))(v52 + 8))(v51, v50);
    }

    else
    {
      swift_errorRelease(v4);
      swift_errorRelease(v4);
      swift_errorRelease(v4);

      return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v51, v8);
    }
  }

  else
  {
    uint64_t v31 = v19;
    uint64_t v32 = (char *)*(int *)(v10 + 48);
    *(void *)&v32[v18] = v19;
    uint64_t v33 = type metadata accessor for UUID(0LL);
    uint64_t v34 = *(void *)(v33 - 8);
    uint64_t v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16);
    v49(v16, v18, v33);
    uint64_t v51 = v32;
    *(void *)&v32[v16] = v31;
    uint64_t v36 = *v50;
    if (*(void *)(*v50 + 16) && (unint64_t v37 = sub_10030D124(v16), (v38 & 1) != 0))
    {
      uint64_t v55 = *(void **)(*(void *)(v36 + 56) + 8 * v37);
      __n128 v35 = swift_bridgeObjectRetain(v55);
    }

    else
    {
      uint64_t v55 = &_swiftEmptySetSingleton;
    }

    uint64_t v52 = *(void *)(v34 + 8);
    ((void (*)(uint64_t, uint64_t, __n128))v52)(v16, v33, v35);
    uint64_t v39 = *(int *)(v10 + 48);
    uint64_t v40 = (void (*)(char *, uint64_t, uint64_t))v49;
    v49((uint64_t)v13, v18, v33);
    uint64_t v41 = v51;
    uint64_t v42 = *(void *)&v51[v18];
    *(void *)&v13[v39] = v42;
    swift_bridgeObjectRetain(v42);
    sub_100688054(v43);
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v52)(v13, v33);
    uint64_t v44 = *(int *)(v10 + 48);
    v40(v13, v18, v33);
    *(void *)&v13[v44] = *(void *)&v41[v18];
    uint64_t v45 = (uint64_t)v55;
    __int128 v46 = v50;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v50);
    uint64_t v53 = *v46;
    *__int128 v46 = 0x8000000000000000LL;
    sub_10005DD30(v45, (uint64_t)v13, isUniquelyReferenced_nonNull_native);
    *__int128 v46 = v53;
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v52)(v13, v33);
    return sub_100015794(v18, &qword_1009A66C0);
  }

__SecKey *sub_10022B08C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v348 = a3;
  uint64_t v317 = a1;
  uint64_t v6 = type metadata accessor for FetchResponse.SearchResult(0LL);
  __chkstk_darwin(v6);
  uint64_t v344 = (uint64_t)&v292 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009AC230);
  __chkstk_darwin(v8);
  v331 = (char *)&v292 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v323 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v323);
  uint64_t v330 = (uint64_t)&v292 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v337 = type metadata accessor for Date(0LL);
  uint64_t v329 = *(void *)(v337 - 8);
  __chkstk_darwin(v337);
  v328 = (char *)&v292 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v322 = type metadata accessor for RawSearchResult(0LL);
  uint64_t v327 = *(void *)(v322 - 8);
  uint64_t v12 = __chkstk_darwin(v322);
  uint64_t v345 = (uint64_t)&v292 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v326 = (uint64_t)&v292 - v15;
  __chkstk_darwin(v14);
  v347 = (char *)&v292 - v16;
  uint64_t v336 = type metadata accessor for BeaconPayloadv1(0LL);
  uint64_t v17 = __chkstk_darwin(v336);
  v334 = (uint64_t *)((char *)&v292 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v343 = (uint64_t)&v292 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v342 = (uint64_t)&v292 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v341 = (uint64_t)&v292 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v340 = (uint64_t)&v292 - v26;
  __chkstk_darwin(v25);
  v346 = (os_log_s *)((char *)&v292 - v27);
  uint64_t v28 = type metadata accessor for Logger(0LL);
  uint64_t v324 = *(void *)(v28 - 8);
  uint64_t v29 = __chkstk_darwin(v28);
  uint64_t v31 = (char *)&v292 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = __chkstk_darwin(v29);
  v339 = (__SecKey *)((char *)&v292 - v33);
  __chkstk_darwin(v32);
  SecKeyRef v318 = (SecKeyRef)((char *)&v292 - v34);
  uint64_t v35 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v35);
  unint64_t v321 = (unint64_t)&v292 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v333 = type metadata accessor for OwnedBeaconRecord(0LL);
  v320 = *(os_log_s **)(v333 - 8);
  uint64_t v37 = __chkstk_darwin(v333);
  uint64_t v332 = (uint64_t)&v292 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v325 = (uint64_t)&v292 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  v319 = (unint64_t *)((char *)&v292 - v42);
  __chkstk_darwin(v41);
  uint64_t v44 = (char *)&v292 - v43;
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0LL);
  uint64_t v46 = *(void *)(RequestBeacon - 8);
  __chkstk_darwin(RequestBeacon);
  uint64_t v48 = (char *)&v292 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v49 = sub_100004AEC(&qword_1009A66C8);
  uint64_t v50 = __chkstk_darwin(v49);
  uint64_t v51 = __chkstk_darwin(v50);
  uint64_t v52 = __chkstk_darwin(v51);
  uint64_t v53 = __chkstk_darwin(v52);
  uint64_t v55 = (os_log_s *)((char *)&v292 - v54);
  uint64_t v56 = __chkstk_darwin(v53);
  uint64_t v57 = __chkstk_darwin(v56);
  uint64_t v58 = __chkstk_darwin(v57);
  uint64_t v59 = __chkstk_darwin(v58);
  uint64_t v60 = __chkstk_darwin(v59);
  uint64_t v61 = __chkstk_darwin(v60);
  uint64_t v62 = __chkstk_darwin(v61);
  uint64_t v335 = v6;
  if (*((_BYTE *)a2 + *(int *)(v6 + 28)) != 15)
  {
    unint64_t v84 = sub_100246328();
    uint64_t v85 = swift_allocError(&type metadata for LocationFetcher.LocationFetcherError, v84, 0LL, 0LL);
    *uint64_t v86 = 3;
    swift_willThrow(v85);
    return v4;
  }

  os_log_t v312 = v68;
  __int128 v306 = v67;
  os_log_t v307 = v66;
  uint64_t v311 = v65;
  uint64_t v309 = v64;
  uint64_t v315 = v63;
  uint64_t v303 = v55;
  uint64_t v313 = v62;
  uint64_t v302 = v72;
  uint64_t v308 = (char *)v71;
  uint64_t v304 = v70;
  v316 = (char *)&v292 - v69;
  v314 = v44;
  uint64_t v305 = v31;
  uint64_t v73 = *a2;
  unint64_t v74 = a2[1];
  sub_10001736C(*a2, v74);
  sub_1001782BC(v73, v74);
  if (!v4)
  {
    uint64_t v300 = a2;
    uint64_t v301 = v28;
    uint64_t v75 = v357;
    uint64_t v4 = (__SecKey *)v358[0];
    uint64_t v76 = *(void *)(v348 + 16);
    if (!v76)
    {
LABEL_21:
      unint64_t v155 = sub_100246328();
      uint64_t v156 = swift_allocError(&type metadata for LocationFetcher.LocationFetcherError, v155, 0LL, 0LL);
      *uint64_t v157 = 0;
      swift_willThrow(v156);
      sub_100016F9C(v75, (unint64_t)v4);
      return v4;
    }

    uint64_t v349 = v357;
    v350 = (__SecKey *)v358[0];
    uint64_t v310 = 0LL;
    uint64_t v77 = v348 + ((*(unsigned __int8 *)(v46 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80));
    uint64_t v78 = *(void *)(v46 + 72);
    swift_bridgeObjectRetain(v348);
    uint64_t v80 = v349;
    unint64_t v79 = (unint64_t)v350;
    while (1)
    {
      sub_10001DC4C(v77, (uint64_t)v48, type metadata accessor for FetchRequestBeacon);
      uint64_t v81 = *(void *)&v48[*(int *)(RequestBeacon + 36)];
      if (*(void *)(v81 + 16))
      {
        swift_bridgeObjectRetain(*(void *)&v48[*(int *)(RequestBeacon + 36)]);
        sub_10001736C(v80, v79);
        uint64_t v82 = sub_10030D62C(v80, v79);
        if ((v83 & 1) != 0)
        {
          uint64_t v87 = (uint64_t)v316;
          __int128 v297 = (uint64_t *)&v316[*(int *)(v313 + 48)];
          uint64_t v298 = (uint64_t *)&v316[*(int *)(v313 + 64)];
          uint64_t v88 = (uint64_t *)(*(void *)(v81 + 56) + 32 * v82);
          uint64_t v89 = *v88;
          unint64_t v90 = v88[1];
          uint64_t v91 = v88[2];
          unint64_t v92 = v88[3];
          sub_10001736C(*v88, v90);
          sub_10001736C(v91, v92);
          swift_bridgeObjectRelease();
          sub_100016F9C(v80, v79);
          swift_bridgeObjectRelease();
          uint64_t v93 = type metadata accessor for UUID(0LL);
          uint64_t v94 = *(void *)(v93 - 8);
          os_log_t v95 = v312;
          uint64_t v299 = *(void (**)(os_log_t, char *, uint64_t))(v94 + 16);
          v299(v312, v48, v93);
          sub_100018C68((uint64_t)v48, type metadata accessor for FetchRequestBeacon);
          sub_10001736C(v89, v90);
          sub_10001736C(v91, v92);
          sub_100016F9C(v91, v92);
          sub_100016F9C(v89, v90);
          uint64_t v296 = v94;
          uint64_t v96 = *(void (**)(uint64_t, os_log_t, uint64_t))(v94 + 32);
          uint64_t v348 = v93;
          v96(v87, v95, v93);
          uint64_t v97 = v297;
          *__int128 v297 = v89;
          v97[1] = v90;
          uint64_t v98 = v298;
          *uint64_t v298 = v91;
          v98[1] = v92;
          sub_100504C28(v87, (uint64_t)&v357);
          if (v358[2])
          {
            uint64_t v99 = sub_100004AEC(&qword_1009B0530);
            uint64_t v100 = v321;
            uint64_t v101 = v333;
            int v102 = swift_dynamicCast(v321, &v357, v99, v333, 6LL);
            uint64_t v103 = (uint64_t)v320;
            (*((void (**)(uint64_t, void, uint64_t, uint64_t))v320 + 7))(v100, v102 ^ 1u, 1LL, v101);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48))(v100, 1LL, v101) != 1)
            {
              uint64_t v104 = (uint64_t)v314;
              sub_10002218C(v100, (uint64_t)v314, type metadata accessor for OwnedBeaconRecord);
              if (qword_10099BA30 != -1) {
                swift_once(&qword_10099BA30, sub_100795FD8);
              }
              uint64_t v105 = v301;
              uint64_t v106 = sub_10000A720(v301, (uint64_t)qword_100A2B7D8);
              uint64_t v107 = (uint64_t)v318;
              uint64_t v295 = *(void (**)(SecKeyRef, uint64_t, uint64_t))(v324 + 16);
              v295(v318, v106, v105);
              sub_10001DC4C(v104, (uint64_t)v319, type metadata accessor for OwnedBeaconRecord);
              uint64_t v108 = (uint64_t)v306;
              os_log_t v109 = (uint64_t *)((char *)v306 + *(int *)(v313 + 48));
              uint64_t v110 = (uint64_t *)((char *)v306 + *(int *)(v313 + 64));
              unint64_t v111 = v299;
              v299((os_log_t)v306, v316, v348);
              uint64_t v112 = *v297;
              unint64_t v113 = v297[1];
              *os_log_t v109 = *v297;
              v109[1] = v113;
              uint64_t v114 = *v298;
              unint64_t v115 = v298[1];
              *uint64_t v110 = *v298;
              v110[1] = v115;
              sub_10001581C(v108, (uint64_t)v311, &qword_1009A66C8);
              uint64_t v116 = v309;
              sub_100015750(v108, v309, &qword_1009A66C8);
              sub_10001736C(v112, v113);
              uint64_t v117 = sub_10001736C(v114, v115);
              uint64_t v118 = (os_log_s *)Logger.logObject.getter(v117);
              int v119 = static os_log_type_t.default.getter(v118);
              if (os_log_type_enabled(v118, (os_log_type_t)v119))
              {
                LODWORD(v321) = v119;
                os_log_t v312 = v118;
                uint64_t v120 = swift_slowAlloc(42LL, -1LL);
                v320 = (os_log_s *)swift_slowAlloc(64LL, -1LL);
                v354 = v320;
                *(_DWORD *)uint64_t v120 = 141558787;
                uint64_t v357 = 1752392040LL;
                uint64_t v121 = v348;
                uint64_t v122 = v111;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, v120 + 4, v120 + 12);
                *(_WORD *)(v120 + 12) = 2081;
                uint64_t v123 = (uint64_t)v319;
                uint64_t v124 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
                uint64_t v125 = dispatch thunk of CustomStringConvertible.description.getter(v121, v124);
                uint64_t v357 = sub_1003F11D4(v125, v126, (uint64_t *)&v354);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, v120 + 14, v120 + 22);
                swift_bridgeObjectRelease();
                sub_100018C68(v123, type metadata accessor for OwnedBeaconRecord);
                *(_WORD *)(v120 + 22) = 2160;
                uint64_t v357 = 1752392040LL;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, v120 + 24, v120 + 32);
                *(_WORD *)(v120 + 32) = 2081;
                uint64_t v127 = *(int *)(v313 + 48);
                os_log_t v128 = v307;
                unint64_t v129 = (uint64_t **)((char *)v307 + v127);
                uint64_t v130 = *(int *)(v313 + 64);
                unint64_t v131 = v311;
                uint64_t v132 = (uint64_t **)&v311[v127];
                v122(v307, v311, v121);
                os_log_type_t v133 = *v132;
                uint64_t v134 = (uint64_t)v132[1];
                *unint64_t v129 = v133;
                v129[1] = (uint64_t *)v134;
                *(_OWORD *)((char *)v128 + v13sub_100032838(0, 7LL, 0) = *(_OWORD *)&v131[v130];
                sub_10001736C((uint64_t)v133, v134);
                sub_10001736C((uint64_t)v133, v134);
                uint64_t v135 = (os_log_s *)v310;
                uint64_t v136 = sub_1004DFCF0((uint64_t)v133, v134);
                uint64_t v138 = v135;
                if (v135) {
                  goto LABEL_46;
                }
                uint64_t v139 = v136;
                uint64_t v140 = v137;
                uint64_t v141 = (void (*)(uint64_t, uint64_t, uint64_t))v122;
                sub_100016F9C((uint64_t)v133, v134);
                sub_1001782E4(v139, v140);
                uint64_t v310 = 0LL;
                sub_100016F9C((uint64_t)v133, v134);
                uint64_t v142 = v357;
                uint64_t v143 = v358[0];
                uint64_t v144 = sub_10001736C(v357, v358[0]);
                uint64_t v145 = static MACAddress.length.getter(v144);
                sub_100178C64(v145, v142, v143);
                sub_100016F9C(v142, v143);
                uint64_t v146 = v357;
                unint64_t v147 = v358[0];
                uint64_t v148 = Data.hexString.getter(v357, v358[0]);
                unint64_t v150 = v149;
                sub_100016F9C(v146, v147);
                (*(void (**)(os_log_t, uint64_t))(v296 + 8))(v307, v348);
                uint64_t v357 = sub_1003F11D4(v148, v150, (uint64_t *)&v354);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, v120 + 34, v120 + 42);
                swift_bridgeObjectRelease();
                sub_100015794(v309, &qword_1009A66C8);
                sub_100015794((uint64_t)v311, &qword_1009A66C8);
                os_log_t v151 = v312;
                _os_log_impl( (void *)&_mh_execute_header,  v312,  (os_log_type_t)v321,  "Using decryption key for beacon %{private,mask.hash}s,\nadvertisementAddress: %{private,mask.hash}s.",  (uint8_t *)v120,  0x2Au);
                uint64_t v152 = (uint64_t)v320;
                swift_arrayDestroy(v320, 2LL, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v152, -1LL, -1LL);
                swift_slowDealloc(v120, -1LL, -1LL);

                uint64_t v153 = v301;
                uint64_t v311 = *(char **)(v324 + 8);
                ((void (*)(SecKeyRef, uint64_t))v311)(v318, v301);
                uint64_t v154 = v310;
              }

              else
              {
                sub_100018C68((uint64_t)v319, type metadata accessor for OwnedBeaconRecord);
                sub_100015794(v116, &qword_1009A66C8);
                sub_100015794((uint64_t)v311, &qword_1009A66C8);

                uint64_t v153 = v301;
                uint64_t v311 = *(char **)(v324 + 8);
                ((void (*)(uint64_t, uint64_t))v311)(v107, v301);
                uint64_t v154 = v310;
                uint64_t v141 = (void (*)(uint64_t, uint64_t, uint64_t))v111;
              }

              uint64_t v159 = v300[2];
              char v160 = *(os_log_s **)(v159 + 16);
              uint64_t v161 = (uint64_t)v314;
              if (v160)
              {
                __int128 v306 = v358;
                __n128 v162 = swift_bridgeObjectRetain(v159);
                uint64_t v292 = v163;
                uint64_t v164 = (unint64_t *)(v163 + 40);
                uint64_t v4 = (__SecKey *)_swiftEmptyArrayStorage;
                v162.n128_u64[0] = 141560323LL;
                __n128 v294 = v162;
                uint64_t v293 = (char *)&type metadata for Any + 8;
                while (1)
                {
                  uint64_t v138 = (os_log_s *)*(v164 - 1);
                  unint64_t v165 = *v164;
                  v319 = v164;
                  uint64_t v166 = *v298;
                  unint64_t v167 = v298[1];
                  sub_10001736C((uint64_t)v138, v165);
                  SecKeyRef v168 = sub_100178F8C(v166, v167);
                  uint64_t v310 = v154;
                  if (v154) {
                    break;
                  }
                  SecKeyRef v318 = v168;
                  os_log_t v312 = v160;
                  uint64_t v169 = (uint64_t *)(v315 + *(int *)(v313 + 48));
                  unint64_t v170 = (uint64_t *)(v315 + *(int *)(v313 + 64));
                  ((void (*)(uint64_t))v299)(v315);
                  uint64_t v171 = *v297;
                  uint64_t v134 = v297[1];
                  *uint64_t v169 = *v297;
                  v169[1] = v134;
                  *unint64_t v170 = v166;
                  v170[1] = v167;
                  sub_10001736C(v171, v134);
                  v320 = v138;
                  unint64_t v321 = v165;
                  sub_10001736C((uint64_t)v138, v165);
                  sub_10001736C(v171, v134);
                  uint64_t v172 = (os_log_s *)v310;
                  uint64_t v173 = sub_1004DFCF0(v171, v134);
                  if (v172)
                  {
                    sub_100016F9C(v171, v134);
                    uint64_t v357 = 0LL;
                    v358[0] = 0xE000000000000000LL;
                    os_log_type_t v133 = &v357;
                    _StringGuts.grow(_:)(35LL);
                    v287._object = (void *)0x8000000100854640LL;
                    v287._countAndFlagsBits = 0xD000000000000021LL;
                    String.append(_:)(v287);
                    v354 = v172;
                    uint64_t v288 = sub_100004AEC((uint64_t *)&unk_1009A5470);
                    for (unint64_t i = &v354; ; unint64_t i = (os_log_s **)&v351)
                    {
                      _print_unlocked<A, B>(_:_:)( i,  &v357,  v288,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
                      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v357,  v358[0],  "searchpartyd/KeyRepresentable.swift",  35LL,  2LL,  256LL,  0);
                      __break(1u);
LABEL_46:
                      uint64_t v310 = (uint64_t)v138;
                      sub_100015794(v309, &qword_1009A66C8);
                      sub_100016F9C((uint64_t)v133, v134);
                      uint64_t v357 = 0LL;
                      v358[0] = 0xE000000000000000LL;
                      os_log_type_t v133 = &v357;
                      _StringGuts.grow(_:)(35LL);
                      v290._object = (void *)0x8000000100854640LL;
                      v290._countAndFlagsBits = 0xD000000000000021LL;
                      String.append(_:)(v290);
                      v351 = (_BYTE *)v310;
LABEL_48:
                      uint64_t v288 = sub_100004AEC((uint64_t *)&unk_1009A5470);
                    }
                  }

                  uint64_t v175 = v173;
                  uint64_t v176 = v174;
                  sub_100016F9C(v171, v134);
                  sub_1001782E4(v175, v176);
                  unsigned int v177 = (int *)v336;
                  sub_100016F9C(v171, v134);
                  uint64_t v178 = (uint64_t)v346;
                  BeaconPayloadv1.init(using:data:advertisement:)((uint64_t)v318, (uint64_t)v320, v321);
                  uint64_t v179 = v337;
                  uint64_t v310 = 0LL;
                  SecKeyRef v318 = v4;
                  (*(void (**)(uint64_t, uint64_t))(v296 + 8))(v315, v348);
                  int v180 = *(unsigned __int8 *)(v178 + v177[10]);
                  uint64_t v181 = (uint64_t)v328;
                  (*(void (**)(char *, uint64_t, uint64_t))(v329 + 16))(v328, v178 + v177[5], v179);
                  double v182 = *(double *)(v178 + v177[7]);
                  double v183 = *(double *)(v178 + v177[8]);
                  double v184 = *(double *)(v178 + v177[9]);
                  uint64_t v185 = (uint64_t)v300;
                  uint64_t v186 = v330;
                  sub_10001581C((uint64_t)v300 + *(int *)(v335 + 24), v330, (uint64_t *)&unk_10099D720);
                  uint64_t v187 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
                  uint64_t v188 = (uint64_t)v331;
                  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v187 - 8) + 56LL))( v331,  1LL,  1LL,  v187);
                  uint64_t v189 = v347;
                  sub_1005B9084(v180, v181, 15, v186, v188, 256, v347, v182, v183, v184);
                  uint64_t v190 = type metadata accessor for LocationFetcher(0LL);
                  v295(v339, v338 + *(int *)(v190 + 32), v301);
                  uint64_t v161 = (uint64_t)v314;
                  uint64_t v191 = v325;
                  sub_10001DC4C((uint64_t)v314, v325, type metadata accessor for OwnedBeaconRecord);
                  sub_10001DC4C(v178, v340, type metadata accessor for BeaconPayloadv1);
                  sub_10001DC4C(v185, v344, type metadata accessor for FetchResponse.SearchResult);
                  uint64_t v192 = (uint64_t)v189;
                  uint64_t v193 = v326;
                  sub_10001DC4C(v192, v326, type metadata accessor for RawSearchResult);
                  sub_10001DC4C(v178, v341, type metadata accessor for BeaconPayloadv1);
                  sub_10001DC4C(v178, v342, type metadata accessor for BeaconPayloadv1);
                  sub_10001DC4C(v178, v343, type metadata accessor for BeaconPayloadv1);
                  uint64_t v194 = v334;
                  uint64_t v195 = sub_10001DC4C(v178, (uint64_t)v334, type metadata accessor for BeaconPayloadv1);
                  uint64_t v196 = (os_log_s *)Logger.logObject.getter(v195);
                  os_log_type_t v197 = static os_log_type_t.default.getter(v196);
                  int v198 = v197;
                  if (os_log_type_enabled(v196, v197))
                  {
                    uint64_t v199 = swift_slowAlloc(102LL, -1LL);
                    uint64_t v311 = (char *)swift_slowAlloc(160LL, -1LL);
                    v354 = (os_log_s *)v311;
                    *(_DWORD *)uint64_t v199 = v294.n128_u32[0];
                    uint64_t v357 = 1752392040LL;
                    LODWORD(v309) = v198;
                    os_log_type_t v200 = v306;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v306, v199 + 4, v199 + 12);
                    *(_WORD *)(v199 + 12) = 2081;
                    os_log_t v307 = v196;
                    uint64_t v201 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
                    uint64_t v202 = dispatch thunk of CustomStringConvertible.description.getter(v348, v201);
                    uint64_t v357 = sub_1003F11D4(v202, v203, (uint64_t *)&v354);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v200, v199 + 14, v199 + 22);
                    swift_bridgeObjectRelease();
                    sub_100018C68(v191, type metadata accessor for OwnedBeaconRecord);
                    *(_WORD *)(v199 + 22) = 2082;
                    uint64_t v204 = (int *)v336;
                    uint64_t v205 = v340;
                    uint64_t v206 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
                    uint64_t v207 = dispatch thunk of CustomStringConvertible.description.getter(v337, v206);
                    uint64_t v357 = sub_1003F11D4(v207, v208, (uint64_t *)&v354);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v200, v199 + 24, v199 + 32);
                    swift_bridgeObjectRelease();
                    sub_100018C68(v205, type metadata accessor for BeaconPayloadv1);
                    *(_WORD *)(v199 + 32) = 2082;
                    uint64_t v209 = v344;
                    uint64_t v210 = Optional.debugDescription.getter(v323);
                    uint64_t v357 = sub_1003F11D4(v210, v211, (uint64_t *)&v354);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v200, v199 + 34, v199 + 42);
                    swift_bridgeObjectRelease();
                    sub_100018C68(v209, type metadata accessor for FetchResponse.SearchResult);
                    *(_WORD *)(v199 + 42) = 2082;
                    uint64_t v212 = sub_100167394(*(_BYTE *)(v193 + *(int *)(v322 + 36)));
                    uint64_t v357 = sub_1003F11D4(v212, v213, (uint64_t *)&v354);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v200, v199 + 44, v199 + 52);
                    swift_bridgeObjectRelease();
                    sub_100018C68(v193, type metadata accessor for RawSearchResult);
                    *(_WORD *)(v199 + 52) = 2049;
                    uint64_t v214 = v341;
                    uint64_t v357 = *(void *)(v341 + v204[7]);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v200, v199 + 54, v199 + 62);
                    sub_100018C68(v214, type metadata accessor for BeaconPayloadv1);
                    *(_WORD *)(v199 + 62) = 2049;
                    uint64_t v215 = v342;
                    uint64_t v357 = *(void *)(v342 + v204[8]);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v200, v199 + 64, v199 + 72);
                    sub_100018C68(v215, type metadata accessor for BeaconPayloadv1);
                    *(_WORD *)(v199 + 72) = 2050;
                    uint64_t v216 = v343;
                    uint64_t v357 = *(void *)(v343 + v204[9]);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v200, v199 + 74, v199 + 82);
                    sub_100018C68(v216, type metadata accessor for BeaconPayloadv1);
                    *(_WORD *)(v199 + 82) = 2160;
                    uint64_t v357 = 1752392040LL;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v200, v199 + 84, v199 + 92);
                    *(_WORD *)(v199 + 92) = 2081;
                    uint64_t v217 = v334;
                    uint64_t v218 = *v334;
                    unint64_t v219 = v334[1];
                    uint64_t v220 = sub_10001736C(*v334, v219);
                    uint64_t v221 = static MACAddress.length.getter(v220);
                    sub_100178C64(v221, v218, v219);
                    uint64_t v222 = v357;
                    unint64_t v223 = v358[0];
                    uint64_t v224 = Data.hexString.getter(v357, v358[0]);
                    unint64_t v226 = v225;
                    sub_100016F9C(v222, v223);
                    uint64_t v357 = sub_1003F11D4(v224, v226, (uint64_t *)&v354);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v200, v199 + 94, v199 + 102);
                    swift_bridgeObjectRelease();
                    sub_100018C68((uint64_t)v217, type metadata accessor for BeaconPayloadv1);
                    os_log_t v227 = v307;
                    _os_log_impl( (void *)&_mh_execute_header,  v307,  (os_log_type_t)v309,  "Packet decrypted for beacon %{private,mask.hash}s,\n locationTimestamp: %{public}s,\n scanDate: %{public}s,\n source: %{public}s,\n latitude: %{private}f,\n longitude: %{private}f,\n horizontalAccuracy: %{public}f,\n advertisementAddress: %{private,mask.hash}s.",  (uint8_t *)v199,  0x66u);
                    uint64_t v228 = (void (*)(void, void))v311;
                    swift_arrayDestroy(v311, 5LL, v293);
                    swift_slowDealloc(v228, -1LL, -1LL);
                    uint64_t v229 = v199;
                    uint64_t v161 = (uint64_t)v314;
                    swift_slowDealloc(v229, -1LL, -1LL);

                    uint64_t v153 = v301;
                    uint64_t v311 = *(char **)(v324 + 8);
                  }

                  else
                  {
                    sub_100018C68(v191, type metadata accessor for OwnedBeaconRecord);
                    sub_100018C68(v340, type metadata accessor for BeaconPayloadv1);
                    sub_100018C68(v344, type metadata accessor for FetchResponse.SearchResult);
                    sub_100018C68(v193, type metadata accessor for RawSearchResult);
                    sub_100018C68(v341, type metadata accessor for BeaconPayloadv1);
                    sub_100018C68(v342, type metadata accessor for BeaconPayloadv1);
                    sub_100018C68(v343, type metadata accessor for BeaconPayloadv1);
                    sub_100018C68((uint64_t)v194, type metadata accessor for BeaconPayloadv1);

                    uint64_t v153 = v301;
                  }

                  ((void (*)(__SecKey *, uint64_t))v311)(v339, v301);
                  uint64_t v141 = (void (*)(uint64_t, uint64_t, uint64_t))v299;
                  sub_10001DC4C((uint64_t)v347, v345, type metadata accessor for RawSearchResult);
                  uint64_t v4 = v318;
                  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v318);
                  os_log_t v231 = v312;
                  uint64_t v232 = (uint64_t)v319;
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                    uint64_t v4 = (__SecKey *)sub_1004C5B50(0, *((void *)v4 + 2) + 1LL, 1, (unint64_t)v4);
                  }
                  unint64_t v234 = *((void *)v4 + 2);
                  unint64_t v233 = *((void *)v4 + 3);
                  if (v234 >= v233 >> 1) {
                    uint64_t v4 = (__SecKey *)sub_1004C5B50(v233 > 1, v234 + 1, 1, (unint64_t)v4);
                  }
                  uint64_t v164 = (unint64_t *)(v232 + 24);
                  *((void *)v4 + 2) = v234 + 1;
                  sub_10002218C( v345,  (uint64_t)v4 + ((*(unsigned __int8 *)(v327 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v327 + 80))
                  + *(void *)(v327 + 72) * v234,
                    type metadata accessor for RawSearchResult);
                  sub_100016F9C((uint64_t)v320, v321);
                  sub_100018C68((uint64_t)v347, type metadata accessor for RawSearchResult);
                  sub_100018C68((uint64_t)v346, type metadata accessor for BeaconPayloadv1);
                  char v160 = (os_log_t)((char *)v231 - 1);
                  uint64_t v154 = v310;
                  if (!v160)
                  {
                    swift_bridgeObjectRelease();
                    goto LABEL_43;
                  }
                }

                sub_100016F9C((uint64_t)v138, v165);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v347 = 0LL;
                uint64_t v235 = (uint64_t)v314;
                uint64_t v236 = v332;
                uint64_t v357 = 0LL;
                v358[0] = 0xE000000000000000LL;
                _StringGuts.grow(_:)(49LL);
                swift_bridgeObjectRelease();
                uint64_t v357 = 0xD000000000000020LL;
                v358[0] = 0x800000010085AA20LL;
                uint64_t v4 = (__SecKey *)v310;
                swift_getErrorValue(v310, v356, v355);
                v354 = (os_log_s *)Error.code.getter(v355[1], v355[2]);
                v237._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
                String.append(_:)(v237);
                swift_bridgeObjectRelease();
                v238._countAndFlagsBits = 0x6F44726F72726520LL;
                v238._object = (void *)0xED00003A6E69616DLL;
                String.append(_:)(v238);
                swift_getErrorValue(v4, v353, v352);
                v239._countAndFlagsBits = Error.domain.getter(v352[1], v352[2]);
                String.append(_:)(v239);
                swift_bridgeObjectRelease();
                sub_10071EEA8(v357, v358[0]);
                swift_bridgeObjectRelease();
                uint64_t v240 = type metadata accessor for LocationFetcher(0LL);
                uint64_t v241 = v305;
                v295((SecKeyRef)v305, v338 + *(int *)(v240 + 32), v153);
                sub_10001DC4C(v235, v236, type metadata accessor for OwnedBeaconRecord);
                uint64_t v242 = (uint64_t)v303;
                unint64_t v243 = (uint64_t *)((char *)v303 + *(int *)(v313 + 48));
                unint64_t v244 = (uint64_t *)((char *)v303 + *(int *)(v313 + 64));
                uint64_t v245 = v348;
                v299(v303, v316, v348);
                uint64_t v246 = *v297;
                unint64_t v247 = v297[1];
                *unint64_t v243 = *v297;
                v243[1] = v247;
                uint64_t v248 = *v298;
                unint64_t v249 = v298[1];
                *unint64_t v244 = *v298;
                v244[1] = v249;
                sub_10001581C(v242, (uint64_t)v308, &qword_1009A66C8);
                uint64_t v250 = v242;
                uint64_t v251 = v245;
                uint64_t v252 = v304;
                sub_100015750(v250, v304, &qword_1009A66C8);
                swift_errorRetain(v4);
                swift_errorRetain(v4);
                sub_10001736C(v246, v247);
                uint64_t v253 = sub_10001736C(v248, v249);
                uint64_t v138 = (os_log_s *)Logger.logObject.getter(v253);
                int v254 = static os_log_type_t.error.getter(v138);
                if (os_log_type_enabled(v138, (os_log_type_t)v254))
                {
                  LODWORD(v345) = v254;
                  uint64_t v255 = swift_slowAlloc(52LL, -1LL);
                  v346 = (os_log_s *)swift_slowAlloc(96LL, -1LL);
                  v354 = v346;
                  *(_DWORD *)uint64_t v255 = 141559043;
                  uint64_t v357 = 1752392040LL;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, v255 + 4, v255 + 12);
                  *(_WORD *)(v255 + 12) = 2081;
                  uint64_t v256 = v332;
                  uint64_t v257 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
                  uint64_t v258 = dispatch thunk of CustomStringConvertible.description.getter(v251, v257);
                  uint64_t v357 = sub_1003F11D4(v258, v259, (uint64_t *)&v354);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, v255 + 14, v255 + 22);
                  swift_bridgeObjectRelease();
                  sub_100018C68(v256, type metadata accessor for OwnedBeaconRecord);
                  *(_WORD *)(v255 + 22) = 2160;
                  uint64_t v357 = 1752392040LL;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, v255 + 24, v255 + 32);
                  *(_WORD *)(v255 + 32) = 2081;
                  uint64_t v260 = *(int *)(v313 + 48);
                  __int128 v261 = v302;
                  __int128 v262 = (uint64_t *)((char *)v302 + v260);
                  uint64_t v263 = v251;
                  uint64_t v264 = *(int *)(v313 + 64);
                  uint64_t v134 = (uint64_t)v308;
                  uint64_t v265 = (uint64_t *)&v308[v260];
                  v299(v302, v308, v263);
                  uint64_t v266 = *v265;
                  unint64_t v267 = v265[1];
                  *__int128 v262 = v266;
                  v262[1] = v267;
                  *(_OWORD *)((char *)v261 + v264) = *(_OWORD *)(v134 + v264);
                  sub_10001736C(v266, v267);
                  sub_10001736C(v266, v267);
                  v268 = v347;
                  uint64_t v269 = sub_1004DFCF0(v266, v267);
                  if (v268)
                  {
                    swift_errorRelease(v310);
                    sub_100015794(v304, &qword_1009A66C8);
                    sub_100016F9C(v266, v267);
                    uint64_t v357 = 0LL;
                    v358[0] = 0xE000000000000000LL;
                    os_log_type_t v133 = &v357;
                    _StringGuts.grow(_:)(35LL);
                    v291._object = (void *)0x8000000100854640LL;
                    v291._countAndFlagsBits = 0xD000000000000021LL;
                    String.append(_:)(v291);
                    v351 = v268;
                    goto LABEL_48;
                  }

                  uint64_t v271 = v269;
                  uint64_t v272 = v270;
                  sub_100016F9C(v266, v267);
                  sub_1001782E4(v271, v272);
                  sub_100016F9C(v266, v267);
                  uint64_t v273 = v357;
                  uint64_t v274 = v358[0];
                  uint64_t v275 = sub_10001736C(v357, v358[0]);
                  uint64_t v276 = static MACAddress.length.getter(v275);
                  sub_100178C64(v276, v273, v274);
                  sub_100016F9C(v273, v274);
                  uint64_t v277 = v357;
                  unint64_t v278 = v358[0];
                  uint64_t v279 = Data.hexString.getter(v357, v358[0]);
                  unint64_t v281 = v280;
                  sub_100016F9C(v277, v278);
                  (*(void (**)(os_log_s *, uint64_t))(v296 + 8))(v302, v263);
                  uint64_t v357 = sub_1003F11D4(v279, v281, (uint64_t *)&v354);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, v255 + 34, v255 + 42);
                  swift_bridgeObjectRelease();
                  sub_100015794(v304, &qword_1009A66C8);
                  sub_100015794((uint64_t)v308, &qword_1009A66C8);
                  *(_WORD *)(v255 + 42) = 2082;
                  uint64_t v282 = v310;
                  uint64_t v357 = v310;
                  swift_errorRetain(v310);
                  uint64_t v283 = sub_100004AEC((uint64_t *)&unk_1009A5470);
                  uint64_t v284 = String.init<A>(describing:)(&v357, v283);
                  uint64_t v357 = sub_1003F11D4(v284, v285, (uint64_t *)&v354);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, v255 + 44, v255 + 52);
                  swift_bridgeObjectRelease();
                  swift_errorRelease(v282);
                  swift_errorRelease(v282);
                  _os_log_impl( (void *)&_mh_execute_header,  v138,  (os_log_type_t)v345,  "Error decrypting location for beacon: %{private,mask.hash}s,\n advertisementAddress: %{private,mask.hash}s,\n %{public}s.",  (uint8_t *)v255,  0x34u);
                  uint64_t v4 = v346;
                  swift_arrayDestroy(v346, 3LL, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v4, -1LL, -1LL);
                  swift_slowDealloc(v255, -1LL, -1LL);

                  uint64_t v286 = ((uint64_t (*)(char *, uint64_t))v311)(v305, v301);
                }

                else
                {
                  sub_100018C68(v332, type metadata accessor for OwnedBeaconRecord);
                  sub_100015794(v252, &qword_1009A66C8);
                  sub_100015794((uint64_t)v308, &qword_1009A66C8);
                  swift_errorRelease(v4);
                  swift_errorRelease(v4);

                  uint64_t v286 = ((uint64_t (*)(char *, uint64_t))v311)(v241, v301);
                }

                swift_willThrow(v286);
                sub_100016F9C(v349, (unint64_t)v350);
                sub_100018C68((uint64_t)v314, type metadata accessor for OwnedBeaconRecord);
                sub_100015794((uint64_t)v316, &qword_1009A66C8);
              }

              else
              {
                uint64_t v4 = (__SecKey *)_swiftEmptyArrayStorage;
LABEL_43:
                sub_100016F9C(v349, (unint64_t)v350);
                v141(v317, v161 + *(int *)(v333 + 20), v348);
                sub_100018C68(v161, type metadata accessor for OwnedBeaconRecord);
                sub_100015794((uint64_t)v316, &qword_1009A66C8);
              }

              return v4;
            }
          }

          else
          {
            sub_100015794((uint64_t)&v357, (uint64_t *)&unk_1009A9C40);
            uint64_t v100 = v321;
            (*((void (**)(unint64_t, uint64_t, uint64_t, uint64_t))v320 + 7))(v321, 1LL, 1LL, v333);
          }

          sub_100015794(v100, (uint64_t *)&unk_1009A9C30);
          sub_100015794((uint64_t)v316, &qword_1009A66C8);
LABEL_20:
          uint64_t v75 = v349;
          uint64_t v4 = v350;
          goto LABEL_21;
        }

        swift_bridgeObjectRelease();
        sub_100016F9C(v80, v79);
      }

      sub_100018C68((uint64_t)v48, type metadata accessor for FetchRequestBeacon);
      v77 += v78;
      if (!--v76)
      {
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }
  }

  return v4;
}

uint64_t sub_10022D370(os_log_s *a1, os_log_s *a2, char *a3, uint64_t *a4)
{
  uint64_t v272 = a4;
  __int128 v306 = a3;
  uint64_t v304 = a2;
  uint64_t v295 = type metadata accessor for Date(0LL);
  uint64_t v302 = *(void *)(v295 - 8);
  __chkstk_darwin(v295);
  uint64_t v269 = v6;
  __n128 v294 = (char *)&v261 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v305 = type metadata accessor for LocationFetcher(0LL);
  uint64_t v288 = *(void *)(v305 - 8);
  __chkstk_darwin(v305);
  uint64_t v268 = v7;
  uint64_t v300 = (uint64_t)&v261 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v8);
  uint64_t v293 = (char *)&v261 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009AC230);
  __chkstk_darwin(v10);
  Swift::String v291 = (char *)&v261 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v297 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  uint64_t v296 = *(void *)(v297 - 8);
  uint64_t v12 = __chkstk_darwin(v297);
  uint64_t v286 = (uint64_t)&v261 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v287 = v13;
  __chkstk_darwin(v12);
  uint64_t v290 = (uint64_t)&v261 - v14;
  uint64_t v299 = type metadata accessor for RawSearchResult(0LL);
  uint64_t v267 = *(void *)(v299 - 8);
  uint64_t v15 = __chkstk_darwin(v299);
  uint64_t v292 = (uint64_t)&v261 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v285 = v16;
  __chkstk_darwin(v15);
  uint64_t v298 = (uint64_t)&v261 - v17;
  uint64_t v303 = type metadata accessor for UUID(0LL);
  uint64_t v301 = *(void *)(v303 - 8);
  uint64_t v18 = __chkstk_darwin(v303);
  uint64_t v270 = (char *)&v261 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v275 = (char *)&v261 - v21;
  __chkstk_darwin(v20);
  uint64_t v289 = (char *)&v261 - v22;
  uint64_t v309 = type metadata accessor for Logger(0LL);
  uint64_t v308 = *(void *)(v309 - 8);
  uint64_t v23 = __chkstk_darwin(v309);
  uint64_t v274 = (char *)&v261 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v23);
  os_log_t v307 = (char *)&v261 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v284 = (char *)&v261 - v28;
  __chkstk_darwin(v27);
  unint64_t v281 = (char *)&v261 - v29;
  uint64_t v30 = sub_100004AEC((uint64_t *)&unk_10099FB50);
  __chkstk_darwin(v30);
  unint64_t v278 = (unint64_t *)((char *)&v261 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v282 = type metadata accessor for TimeBasedKey(0LL);
  uint64_t v277 = *(char **)(v282 - 8);
  uint64_t v32 = __chkstk_darwin(v282);
  v273.n128_u64[0] = (unint64_t)&v261 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v271 = (uint64_t)&v261 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v280 = (uint64_t)&v261 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v279 = (uint64_t)&v261 - v39;
  __chkstk_darwin(v38);
  uint64_t v283 = (uint64_t *)((char *)&v261 - v40);
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0LL);
  uint64_t v42 = *(void *)(RequestBeacon - 8);
  __chkstk_darwin(RequestBeacon);
  uint64_t v44 = (char *)&v261 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = sub_100004AEC(&qword_1009A66A8);
  uint64_t v46 = __chkstk_darwin(v45);
  uint64_t v48 = (os_log_s *)((char *)&v261 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v46);
  uint64_t v50 = (char *)&v261 - v49;
  uint64_t v276 = a1;
  uint64_t v51 = *(void *)a1;
  unint64_t v52 = *((void *)a1 + 1);
  sub_10001736C(v51, v52);
  sub_1001782BC(v51, v52);
  if (v4)
  {
    uint64_t v53 = v4;
LABEL_3:
    uint64_t v54 = v308;
    uint64_t v55 = v307;
    uint64_t v56 = v309;
    (*(void (**)(char *, char *, uint64_t))(v308 + 16))(v307, &v306[*(int *)(v305 + 32)], v309);
    swift_errorRetain(v53);
    uint64_t v57 = swift_errorRetain(v53);
    uint64_t v58 = (os_log_s *)Logger.logObject.getter(v57);
    os_log_type_t v59 = static os_log_type_t.error.getter(v58);
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v61 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v324 = v61;
      *(_DWORD *)uint64_t v60 = 136446210;
      *(void *)&__int128 v321 = v53;
      swift_errorRetain(v53);
      uint64_t v62 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v63 = String.init<A>(describing:)(&v321, v62);
      *(void *)&__int128 v321 = sub_1003F11D4(v63, v64, (uint64_t *)&v324);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v321, (char *)&v321 + 8, v60 + 4, v60 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v53);
      swift_errorRelease(v53);
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Error getting keys %{public}s.", v60, 0xCu);
      swift_arrayDestroy(v61, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1LL, -1LL);
      swift_slowDealloc(v60, -1LL, -1LL);

      swift_errorRelease(v53);
      return (*(uint64_t (**)(char *, uint64_t))(v308 + 8))(v307, v309);
    }

    else
    {
      swift_errorRelease(v53);
      swift_errorRelease(v53);
      swift_errorRelease(v53);

      return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v55, v56);
    }
  }

  uint64_t v263 = v45;
  os_log_t v264 = v48;
  uint64_t v265 = v50;
  unint64_t v66 = *((void *)&v324 + 1);
  uint64_t v67 = *((void *)v304 + 2);
  if (!v67) {
    return sub_100016F9C(v324, *((unint64_t *)&v324 + 1));
  }
  uint64_t v310 = v324;
  uint64_t v266 = 0LL;
  unint64_t v68 = (char *)v304 + ((*(unsigned __int8 *)(v42 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
  uint64_t v69 = *(void *)(v42 + 72);
  swift_bridgeObjectRetain(v304);
  uint64_t v70 = v310;
  while (1)
  {
    sub_10001DC4C((uint64_t)v68, (uint64_t)v44, type metadata accessor for FetchRequestBeacon);
    uint64_t v71 = *(void *)&v44[*(int *)(RequestBeacon + 28)];
    if (*(void *)(v71 + 16)) {
      break;
    }
LABEL_7:
    sub_100018C68((uint64_t)v44, type metadata accessor for FetchRequestBeacon);
    v68 += v69;
    if (!--v67)
    {
      swift_bridgeObjectRelease();
      return sub_100016F9C(v310, v66);
    }
  }

  swift_bridgeObjectRetain(*(void *)&v44[*(int *)(RequestBeacon + 28)]);
  sub_10001736C(v70, v66);
  uint64_t v72 = sub_10030D62C(v70, v66);
  if ((v73 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_100016F9C(v70, v66);
    goto LABEL_7;
  }

  uint64_t v262 = *(int *)(v263 + 48);
  unint64_t v74 = (os_log_s *)*(int *)(v263 + 64);
  uint64_t v75 = *(void *)(v71 + 56) + 16 * v72;
  unint64_t v76 = *(void *)v75;
  uint64_t v77 = *(unsigned __int8 *)(v75 + 8);
  swift_bridgeObjectRelease();
  sub_100016F9C(v70, v66);
  swift_bridgeObjectRelease();
  uint64_t v78 = v301;
  os_log_t v79 = v264;
  uint64_t v80 = v303;
  (*(void (**)(os_log_t, char *, uint64_t))(v301 + 16))(v264, v44, v303);
  sub_100018C68((uint64_t)v44, type metadata accessor for FetchRequestBeacon);
  uint64_t v81 = (uint64_t)v265;
  (*(void (**)(char *, os_log_t, uint64_t))(v78 + 32))(v265, v79, v80);
  *(void *)(v81 + v262) = v76;
  uint64_t v304 = v74;
  *((_BYTE *)v74 + v81) = v77;
  sub_100504C28(v81, (uint64_t)&v324);
  if (*((void *)&v325 + 1))
  {
    sub_100012EC0(&v324, (uint64_t)&v318);
    uint64_t v82 = v266;
    char v83 = sub_1004EA3B4(&v318, v76, v76, v77, 0);
    uint64_t v84 = v82;
    if (v82)
    {
      sub_100015794(v81, &qword_1009A66A8);
      sub_100016F9C(v310, v66);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v318);
      uint64_t v53 = v82;
      goto LABEL_3;
    }

    if (v83[2])
    {
      uint64_t v85 = v277;
      uint64_t v86 = (void (*)(void, void, void))v278;
      sub_10001DC4C( (uint64_t)v83 + ((v277[80] + 32LL) & ~(unint64_t)v277[80]),  (uint64_t)v278,  type metadata accessor for TimeBasedKey);
      uint64_t v87 = 0LL;
      uint64_t v88 = v308;
      uint64_t v89 = v282;
      unint64_t v90 = v281;
    }

    else
    {
      uint64_t v87 = 1LL;
      uint64_t v88 = v308;
      uint64_t v89 = v282;
      unint64_t v90 = v281;
      uint64_t v86 = (void (*)(void, void, void))v278;
      uint64_t v85 = v277;
    }

    (*((void (**)(void (*)(void, void, void), uint64_t, uint64_t, uint64_t))v85 + 7))( v86,  v87,  1LL,  v89);
    swift_bridgeObjectRelease();
    if ((*((unsigned int (**)(void, uint64_t, uint64_t))v85 + 6))(v86, 1LL, v89) == 1)
    {
      sub_100015794(v81, &qword_1009A66A8);
      sub_100016F9C(v310, v66);
      uint64_t v91 = (uint64_t *)&unk_10099FB50;
      uint64_t v92 = (uint64_t)v86;
      goto LABEL_56;
    }

    uint64_t v93 = v283;
    sub_10002218C((uint64_t)v86, (uint64_t)v283, type metadata accessor for TimeBasedKey);
    uint64_t v94 = *(unint64_t **)(v88 + 16);
    uint64_t v277 = &v306[*(int *)(v305 + 32)];
    uint64_t v95 = v309;
    unint64_t v278 = v94;
    ((void (*)(char *))v94)(v90);
    sub_100013044((uint64_t)&v318, (uint64_t)&v321);
    sub_10001DC4C((uint64_t)v93, v279, type metadata accessor for TimeBasedKey);
    uint64_t v96 = sub_10001DC4C((uint64_t)v93, v280, type metadata accessor for TimeBasedKey);
    uint64_t v97 = (os_log_s *)Logger.logObject.getter(v96);
    os_log_type_t v98 = static os_log_type_t.default.getter(v97);
    int v99 = v98;
    BOOL v100 = os_log_type_enabled(v97, v98);
    unint64_t v261 = v66;
    if (v100)
    {
      uint64_t v101 = swift_slowAlloc(52LL, -1LL);
      os_log_t v307 = (char *)swift_slowAlloc(96LL, -1LL);
      os_log_t v312 = v307;
      *(_DWORD *)uint64_t v101 = 141559043;
      *(void *)&__int128 v324 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v324, (char *)&v324 + 8, v101 + 4, v101 + 12);
      uint64_t v266 = 0LL;
      *(_WORD *)(v101 + 12) = 2081;
      LODWORD(v305) = v99;
      uint64_t v103 = *((void *)&v322 + 1);
      uint64_t v102 = v323;
      sub_100012ED8(&v321, *((uint64_t *)&v322 + 1));
      uint64_t v104 = v289;
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v102 + 8) + 8LL) + 32LL))(v103);
      uint64_t v105 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      os_log_t v264 = v97;
      uint64_t v106 = v279;
      uint64_t v107 = v303;
      uint64_t v108 = dispatch thunk of CustomStringConvertible.description.getter(v303, v105);
      unint64_t v110 = v109;
      (*(void (**)(char *, uint64_t))(v301 + 8))(v104, v107);
      *(void *)&__int128 v324 = sub_1003F11D4(v108, v110, (uint64_t *)&v312);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v324, (char *)&v324 + 8, v101 + 14, v101 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v321);
      *(_WORD *)(v101 + 22) = 2160;
      *(void *)&__int128 v324 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v324, (char *)&v324 + 8, v101 + 24, v101 + 32);
      *(_WORD *)(v101 + 32) = 2081;
      unint64_t v111 = (__int128 *)(v106 + *(int *)(v282 + 24));
      __int128 v112 = v111[1];
      __int128 v324 = *v111;
      __int128 v325 = v112;
      __int128 v326 = v111[2];
      uint64_t v113 = sub_1004DA048();
      unint64_t v115 = v114;
      uint64_t v116 = sub_10001736C(v113, v114);
      uint64_t v117 = static MACAddress.length.getter(v116);
      sub_100178C64(v117, v113, v115);
      sub_100016F9C(v113, v115);
      uint64_t v118 = v314;
      unint64_t v119 = v315;
      uint64_t v120 = Data.hexString.getter(v314, v315);
      unint64_t v122 = v121;
      sub_100016F9C(v118, v119);
      uint64_t v314 = sub_1003F11D4(v120, v122, (uint64_t *)&v312);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v314, &v315, v101 + 34, v101 + 42);
      swift_bridgeObjectRelease();
      sub_100018C68(v106, type metadata accessor for TimeBasedKey);
      *(_WORD *)(v101 + 42) = 2082;
      uint64_t v314 = 0LL;
      unint64_t v315 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(41LL);
      swift_bridgeObjectRelease();
      uint64_t v314 = 0xD000000000000015LL;
      unint64_t v315 = 0x800000010085A9E0LL;
      uint64_t v123 = v280;
      uint64_t v327 = *(void *)v280;
      v124._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
      String.append(_:)(v124);
      swift_bridgeObjectRelease();
      v125._object = (void *)0x800000010085AA00LL;
      v125._countAndFlagsBits = 0xD000000000000010LL;
      String.append(_:)(v125);
      uint64_t v126 = type metadata accessor for DateInterval(0LL);
      uint64_t v127 = sub_100007864( &qword_1009A0DE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval,  (uint64_t)&protocol conformance descriptor for DateInterval);
      v128._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v126, v127);
      String.append(_:)(v128);
      swift_bridgeObjectRelease();
      uint64_t v314 = sub_1003F11D4(v314, v315, (uint64_t *)&v312);
      uint64_t v84 = v266;
      unint64_t v66 = v261;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v314, &v315, v101 + 44, v101 + 52);
      swift_bridgeObjectRelease();
      uint64_t v129 = v123;
      uint64_t v81 = (uint64_t)v265;
      sub_100018C68(v129, type metadata accessor for TimeBasedKey);
      os_log_t v130 = v264;
      _os_log_impl( (void *)&_mh_execute_header,  v264,  (os_log_type_t)v305,  "Using decryption key for beacon %{private,mask.hash}s,\n advertisementAddress: %{private,mask.hash}s,\n %{public}s.",  (uint8_t *)v101,  0x34u);
      unint64_t v131 = v307;
      swift_arrayDestroy(v307, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v131, -1LL, -1LL);
      uint64_t v132 = v101;
      uint64_t v133 = v308;
      swift_slowDealloc(v132, -1LL, -1LL);

      uint64_t v134 = *(char **)(v133 + 8);
      uint64_t v135 = v281;
      uint64_t v136 = v309;
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v321);
      sub_100018C68(v279, type metadata accessor for TimeBasedKey);
      sub_100018C68(v280, type metadata accessor for TimeBasedKey);

      uint64_t v134 = *(char **)(v88 + 8);
      uint64_t v135 = v90;
      uint64_t v136 = v95;
    }

    unint64_t v281 = v134;
    ((void (*)(char *, uint64_t))v134)(v135, v136);
    uint64_t v137 = (uint64_t)v291;
    uint64_t v138 = v319;
    uint64_t v139 = v320;
    int v140 = *((unsigned __int8 *)v304 + v81);
    sub_100012ED8(&v318, v319);
    uint64_t v141 = (uint64_t)v275;
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v139 + 8) + 8LL) + 32LL))(v138);
    sub_10022F360(v283, v140, v276, v141);
    if (v84)
    {
      uint64_t v143 = v303;
      __int128 v306 = *(char **)(v301 + 8);
      ((void (*)(uint64_t, uint64_t))v306)(v141, v303);
      uint64_t v144 = v274;
      uint64_t v145 = v309;
      ((void (*)(char *, char *, uint64_t))v278)(v274, v277, v309);
      sub_100013044((uint64_t)&v318, (uint64_t)&v314);
      uint64_t v146 = v283;
      uint64_t v147 = v271;
      sub_10001DC4C((uint64_t)v283, v271, type metadata accessor for TimeBasedKey);
      uint64_t v148 = (uint64_t)v146;
      uint64_t v149 = v273.n128_u64[0];
      sub_10001DC4C(v148, v273.n128_i64[0], type metadata accessor for TimeBasedKey);
      swift_errorRetain(v84);
      uint64_t v150 = swift_errorRetain(v84);
      os_log_t v151 = (os_log_s *)Logger.logObject.getter(v150);
      os_log_type_t v152 = static os_log_type_t.error.getter(v151);
      LODWORD(v307) = v152;
      if (os_log_type_enabled(v151, v152))
      {
        uint64_t v153 = swift_slowAlloc(62LL, -1LL);
        uint64_t v305 = swift_slowAlloc(128LL, -1LL);
        uint64_t v327 = v305;
        *(_DWORD *)uint64_t v153 = 141559299;
        *(void *)&__int128 v321 = 1752392040LL;
        uint64_t v304 = v151;
        uint64_t v154 = v147;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v321, (char *)&v321 + 8, v153 + 4, v153 + 12);
        *(_WORD *)(v153 + 12) = 2081;
        uint64_t v266 = v84;
        uint64_t v156 = v316;
        uint64_t v155 = v317;
        sub_100012ED8(&v314, v316);
        uint64_t v157 = v289;
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v155 + 8) + 8LL) + 32LL))(v156);
        uint64_t v158 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v159 = dispatch thunk of CustomStringConvertible.description.getter(v143, v158);
        unint64_t v161 = v160;
        ((void (*)(char *, uint64_t))v306)(v157, v143);
        *(void *)&__int128 v321 = sub_1003F11D4(v159, v161, &v327);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v321, (char *)&v321 + 8, v153 + 14, v153 + 22);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v314);
        *(_WORD *)(v153 + 22) = 2160;
        *(void *)&__int128 v321 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v321, (char *)&v321 + 8, v153 + 24, v153 + 32);
        *(_WORD *)(v153 + 32) = 2081;
        __n128 v162 = (__int128 *)(v147 + *(int *)(v282 + 24));
        __int128 v163 = v162[1];
        __int128 v321 = *v162;
        __int128 v322 = v163;
        __int128 v323 = v162[2];
        uint64_t v164 = sub_1004DA048();
        unint64_t v166 = v165;
        uint64_t v167 = sub_10001736C(v164, v165);
        uint64_t v168 = static MACAddress.length.getter(v167);
        sub_100178C64(v168, v164, v166);
        sub_100016F9C(v164, v166);
        uint64_t v169 = (uint64_t)v312;
        unint64_t v170 = v313;
        uint64_t v171 = Data.hexString.getter(v312, v313);
        unint64_t v173 = v172;
        sub_100016F9C(v169, v170);
        os_log_t v312 = (char *)sub_1003F11D4(v171, v173, &v327);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v312, &v313, v153 + 34, v153 + 42);
        swift_bridgeObjectRelease();
        sub_100018C68(v154, type metadata accessor for TimeBasedKey);
        *(_WORD *)(v153 + 42) = 2082;
        os_log_t v312 = 0LL;
        unint64_t v313 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(41LL);
        swift_bridgeObjectRelease();
        os_log_t v312 = (char *)0xD000000000000015LL;
        unint64_t v313 = 0x800000010085A9E0LL;
        uint64_t v174 = v273.n128_u64[0];
        v311[4] = *(void *)v273.n128_u64[0];
        v175._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
        String.append(_:)(v175);
        swift_bridgeObjectRelease();
        v176._object = (void *)0x800000010085AA00LL;
        v176._countAndFlagsBits = 0xD000000000000010LL;
        String.append(_:)(v176);
        uint64_t v177 = type metadata accessor for DateInterval(0LL);
        uint64_t v178 = sub_100007864( &qword_1009A0DE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval,  (uint64_t)&protocol conformance descriptor for DateInterval);
        v179._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v177, v178);
        String.append(_:)(v179);
        swift_bridgeObjectRelease();
        os_log_t v312 = (char *)sub_1003F11D4((uint64_t)v312, v313, &v327);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v312, &v313, v153 + 44, v153 + 52);
        swift_bridgeObjectRelease();
        sub_100018C68(v174, type metadata accessor for TimeBasedKey);
        *(_WORD *)(v153 + 52) = 2082;
        uint64_t v180 = v266;
        os_log_t v312 = (char *)v266;
        swift_errorRetain(v266);
        uint64_t v181 = sub_100004AEC((uint64_t *)&unk_1009A5470);
        uint64_t v182 = String.init<A>(describing:)(&v312, v181);
        os_log_t v312 = (char *)sub_1003F11D4(v182, v183, &v327);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v312, &v313, v153 + 54, v153 + 62);
        swift_bridgeObjectRelease();
        swift_errorRelease(v180);
        swift_errorRelease(v180);
        os_log_t v184 = v304;
        _os_log_impl( (void *)&_mh_execute_header,  v304,  (os_log_type_t)v307,  "Error decrypting location for beacon: %{private,mask.hash}s,\n advertisementAddress: %{private,mask.hash}s,\n %{public}s,\n %{public}s.",  (uint8_t *)v153,  0x3Eu);
        uint64_t v185 = v305;
        swift_arrayDestroy(v305, 4LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v185, -1LL, -1LL);
        swift_slowDealloc(v153, -1LL, -1LL);
        sub_100016F9C(v310, v261);

        swift_errorRelease(v180);
        (*(void (**)(char *, uint64_t))(v308 + 8))(v274, v309);
      }

      else
      {
        sub_100016F9C(v310, v66);

        swift_errorRelease(v84);
        swift_errorRelease(v84);
        sub_100018C68(v149, type metadata accessor for TimeBasedKey);
        sub_100018C68(v147, type metadata accessor for TimeBasedKey);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v314);
        swift_errorRelease(v84);
        ((void (*)(char *, uint64_t))v281)(v144, v145);
      }

      sub_100018C68((uint64_t)v283, type metadata accessor for TimeBasedKey);
      sub_100015794((uint64_t)v265, &qword_1009A66A8);
    }

    else
    {
      uint64_t v186 = v142;
      uint64_t v274 = *(char **)(v301 + 8);
      ((void (*)(uint64_t, uint64_t))v274)(v141, v303);
      uint64_t v187 = *(void *)(v186 + 16);
      if (v187)
      {
        uint64_t v188 = *(unsigned __int8 *)(v267 + 80);
        uint64_t v280 = ~v188;
        uint64_t v189 = v186 + ((v188 + 32) & ~v188);
        uint64_t v279 = v268 + 7;
        uint64_t v282 = v188;
        uint64_t v276 = (os_log_s *)(v269 + v188);
        uint64_t v305 = *(void *)(v267 + 72);
        uint64_t v269 = v186;
        __n128 v190 = swift_bridgeObjectRetain(v186);
        uint64_t v191 = v189;
        v190.n128_u64[0] = 141558275LL;
        __n128 v273 = v190;
        uint64_t v271 = (uint64_t)&type metadata for Any + 8;
        uint64_t v275 = (char *)&type metadata for () + 8;
        uint64_t v192 = v300;
        uint64_t v193 = v290;
        uint64_t v194 = v299;
        uint64_t v195 = v298;
        uint64_t v266 = 0LL;
        do
        {
          uint64_t v308 = v187;
          os_log_t v307 = (char *)v191;
          sub_10001DC4C(v191, v195, type metadata accessor for RawSearchResult);
          sub_10001581C(v195 + *(int *)(v194 + 44), v137, &qword_1009AC230);
          uint64_t v198 = v296;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v296 + 48))(v137, 1LL, v297) == 1)
          {
            sub_100015794(v137, &qword_1009AC230);
            uint64_t v199 = v309;
            os_log_type_t v200 = v284;
            ((void (*)(char *, char *, uint64_t))v278)(v284, v277, v309);
            uint64_t v201 = sub_100013044((uint64_t)&v318, (uint64_t)&v321);
            uint64_t v202 = (os_log_s *)Logger.logObject.getter(v201);
            os_log_type_t v203 = static os_log_type_t.info.getter(v202);
            if (os_log_type_enabled(v202, v203))
            {
              uint64_t v204 = swift_slowAlloc(22LL, -1LL);
              uint64_t v205 = swift_slowAlloc(32LL, -1LL);
              uint64_t v314 = v205;
              *(_DWORD *)uint64_t v204 = v273.n128_u32[0];
              *(void *)(v204 + 4) = 1752392040LL;
              *(_WORD *)(v204 + 12) = 2081;
              uint64_t v207 = *((void *)&v322 + 1);
              uint64_t v206 = v323;
              sub_100012ED8(&v321, *((uint64_t *)&v322 + 1));
              (*(void (**)(uint64_t))(*(void *)(*(void *)(v206 + 8) + 8LL) + 32LL))(v207);
              uint64_t v208 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
              uint64_t v209 = v303;
              uint64_t v210 = dispatch thunk of CustomStringConvertible.description.getter(v303, v208);
              unint64_t v212 = v211;
              ((void (*)(char *, uint64_t))v274)(v289, v209);
              *(void *)(v204 + 14) = sub_1003F11D4(v210, v212, &v314);
              swift_bridgeObjectRelease();
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v321);
              _os_log_impl( (void *)&_mh_execute_header,  v202,  v203,  "No index information for: %{private,mask.hash}s.",  (uint8_t *)v204,  0x16u);
              swift_arrayDestroy(v205, 1LL, v271);
              uint64_t v213 = v205;
              uint64_t v137 = (uint64_t)v291;
              swift_slowDealloc(v213, -1LL, -1LL);
              uint64_t v214 = v204;
              uint64_t v193 = v290;
              uint64_t v192 = v300;
              swift_slowDealloc(v214, -1LL, -1LL);

              uint64_t v196 = v200;
              uint64_t v197 = v309;
            }

            else
            {

              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v321);
              uint64_t v196 = v200;
              uint64_t v197 = v199;
            }

            ((void (*)(char *, uint64_t))v281)(v196, v197);
            uint64_t v195 = v298;
            sub_100018C68(v298, type metadata accessor for RawSearchResult);
            unint64_t v66 = v261;
            uint64_t v194 = v299;
          }

          else
          {
            sub_10002218C(v137, v193, type metadata accessor for BeaconKeyManager.IndexInformation);
            uint64_t v215 = v195 + *(int *)(v194 + 20);
            uint64_t v301 = type metadata accessor for TaskPriority(0LL);
            uint64_t v304 = *(os_log_s **)(v301 - 8);
            (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v304 + 7))(v293, 1LL, 1LL, v301);
            sub_10001DC4C((uint64_t)v306, v192, type metadata accessor for LocationFetcher);
            sub_100013044((uint64_t)&v318, (uint64_t)&v321);
            uint64_t v216 = v193;
            uint64_t v217 = v286;
            sub_10001DC4C(v216, v286, type metadata accessor for BeaconKeyManager.IndexInformation);
            (*(void (**)(char *, uint64_t, uint64_t))(v302 + 16))(v294, v215, v295);
            sub_10001DC4C(v195, v292, type metadata accessor for RawSearchResult);
            uint64_t v218 = *(unsigned __int8 *)(v288 + 80);
            uint64_t v219 = (v218 + 32) & ~v218;
            unint64_t v220 = (v279 + v219) & 0xFFFFFFFFFFFFFFF8LL;
            uint64_t v221 = *(unsigned __int8 *)(v198 + 80);
            uint64_t v222 = (v221 + v220 + 40) & ~v221;
            uint64_t v223 = *(unsigned __int8 *)(v302 + 80);
            uint64_t v224 = (v287 + v223 + v222) & ~v223;
            unint64_t v225 = ((unint64_t)v276 + v224) & v280;
            uint64_t v226 = swift_allocObject(&unk_10094AC68, v225 + v285, v282 | v218 | v221 | v223 | 7);
            *(void *)(v226 + swift_weakDestroy(v0 + 16) = 0LL;
            *(void *)(v226 + 24) = 0LL;
            sub_10002218C(v300, v226 + v219, type metadata accessor for LocationFetcher);
            sub_100012EC0(&v321, v226 + v220);
            sub_10002218C(v217, v226 + v222, type metadata accessor for BeaconKeyManager.IndexInformation);
            uint64_t v227 = (uint64_t)v293;
            (*(void (**)(uint64_t, char *, uint64_t))(v302 + 32))(v226 + v224, v294, v295);
            uint64_t v228 = v226 + v225;
            uint64_t v229 = v304;
            uint64_t v230 = v301;
            sub_10002218C(v292, v228, type metadata accessor for RawSearchResult);
            uint64_t v231 = (*((uint64_t (**)(uint64_t, uint64_t, uint64_t))v229 + 6))(v227, 1LL, v230);
            if ((_DWORD)v231 == 1)
            {
              sub_100015794(v227, &qword_1009A9BF0);
              uint64_t v232 = 0LL;
            }

            else
            {
              unsigned __int8 v233 = TaskPriority.rawValue.getter(v231);
              (*((void (**)(uint64_t, uint64_t))v229 + 1))(v227, v230);
              uint64_t v232 = v233;
            }

            uint64_t v137 = (uint64_t)v291;
            uint64_t v234 = *(void *)(v226 + 16);
            if (v234)
            {
              uint64_t v235 = *(void *)(v226 + 24);
              uint64_t ObjectType = swift_getObjectType(v234);
              swift_unknownObjectRetain(v234);
              uint64_t v237 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v235);
              uint64_t v239 = v238;
              swift_unknownObjectRelease(v234);
            }

            else
            {
              uint64_t v237 = 0LL;
              uint64_t v239 = 0LL;
            }

            uint64_t v240 = swift_allocObject(&unk_10094AC90, 32LL, 7LL);
            *(void *)(v240 + swift_weakDestroy(v0 + 16) = &unk_1009A66B8;
            *(void *)(v240 + 24) = v226;
            if (v239 | v237)
            {
              v311[1] = 0LL;
              v311[0] = 0LL;
              uint64_t v241 = v311;
              v311[2] = v237;
              v311[3] = v239;
            }

            else
            {
              uint64_t v241 = 0LL;
            }

            unint64_t v66 = v261;
            uint64_t v194 = v299;
            uint64_t v195 = v298;
            swift_task_create(v232 | 0x1C00, v241, v275, &unk_1009AB890, v240);
            swift_release();
            uint64_t v193 = v290;
            sub_100018C68(v290, type metadata accessor for BeaconKeyManager.IndexInformation);
            sub_100018C68(v195, type metadata accessor for RawSearchResult);
            uint64_t v192 = v300;
          }

          uint64_t v191 = (uint64_t)&v307[v305];
          uint64_t v187 = v308 - 1;
        }

        while (v308 != 1);
        uint64_t v186 = v269;
        swift_bridgeObjectRelease();
      }

      uint64_t v242 = v319;
      uint64_t v243 = v320;
      sub_100012ED8(&v318, v319);
      uint64_t v244 = (uint64_t)v270;
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v243 + 8) + 8LL) + 32LL))(v242);
      uint64_t v246 = *v272;
      if (*(void *)(*v272 + 16))
      {
        uint64_t v247 = v186;
        unint64_t v248 = sub_10030D124(v244);
        unint64_t v249 = v283;
        if ((v250 & 1) != 0)
        {
          uint64_t v251 = *(void **)(*(void *)(v246 + 56) + 8 * v248);
          __n128 v245 = swift_bridgeObjectRetain(v251);
        }

        else
        {
          uint64_t v251 = &_swiftEmptySetSingleton;
        }
      }

      else
      {
        uint64_t v247 = v186;
        uint64_t v251 = &_swiftEmptySetSingleton;
        unint64_t v249 = v283;
      }

      uint64_t v252 = v244;
      uint64_t v253 = v303;
      int v254 = v274;
      ((void (*)(uint64_t, uint64_t, __n128))v274)(v252, v303, v245);
      *(void *)&__int128 v321 = v251;
      sub_100688054(v247);
      swift_bridgeObjectRelease();
      uint64_t v255 = v319;
      uint64_t v256 = v320;
      sub_100012ED8(&v318, v319);
      uint64_t v257 = (uint64_t)v289;
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v256 + 8) + 8LL) + 32LL))(v255);
      uint64_t v258 = v321;
      unint64_t v259 = v272;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v272);
      uint64_t v314 = *v259;
      *unint64_t v259 = 0x8000000000000000LL;
      sub_10005DD30(v258, v257, isUniquelyReferenced_nonNull_native);
      *unint64_t v259 = v314;
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))v254)(v257, v253);
      sub_100016F9C(v310, v66);
      sub_100018C68((uint64_t)v249, type metadata accessor for TimeBasedKey);
      uint64_t v91 = &qword_1009A66A8;
      uint64_t v92 = (uint64_t)v265;
LABEL_56:
      sub_100015794(v92, v91);
    }

    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v318);
  }

  else
  {
    sub_100015794(v81, &qword_1009A66A8);
    sub_100016F9C(v70, v66);
    return sub_100015794((uint64_t)&v324, (uint64_t *)&unk_1009A9C40);
  }

void sub_10022F360(uint64_t *a1, int a2, os_log_s *a3, uint64_t a4)
{
  uint64_t v28 = _swiftEmptyArrayStorage;
  uint64_t v6 = (char *)a1 + *(int *)(type metadata accessor for TimeBasedKey(0LL) + 24);
  unint64_t v7 = *((void *)v6 + 5);
  if (v7 >> 60 == 15)
  {
    unint64_t v8 = sub_100246328();
    uint64_t v9 = swift_allocError(&type metadata for LocationFetcher.LocationFetcherError, v8, 0LL, 0LL);
    *uint64_t v10 = 0;
    swift_willThrow(v9);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v11 = *((void *)v6 + 4);
    sub_10001736C(v11, *((void *)v6 + 5));
    SecKeyRef v12 = sub_100178F8C(v11, v7);
    if (v4)
    {
      sub_1000182F0(v11, v7);
    }

    else
    {
      SecKeyRef v13 = v12;
      uint64_t v14 = *((void *)a3 + 2);
      uint64_t v15 = *(void *)(v14 + 16);
      if (v15)
      {
        uint64_t v22 = v11;
        unint64_t v23 = v7;
        swift_bridgeObjectRetain(v14);
        uint64_t v17 = (unsigned int *)(v16 + 48);
        do
        {
          uint64_t v19 = (void *)*((void *)v17 - 2);
          unint64_t v18 = *((void *)v17 - 1);
          unint64_t v20 = *v17 | ((unint64_t)*((unsigned __int8 *)v17 + 4) << 32);
          sub_10001736C((uint64_t)v19, v18);
          uint64_t v21 = objc_autoreleasePoolPush();
          sub_100238FA0(v13, v19, v18, v20, a1, v26, a4, a2, a3, &v28);
          v17 += 6;
          objc_autoreleasePoolPop(v21);
          sub_100016F9C((uint64_t)v19, v18);
          --v15;
        }

        while (v15);

        swift_bridgeObjectRelease();
        sub_1000182F0(v22, v23);
      }

      else
      {

        sub_1000182F0(v11, v7);
      }
    }
  }

uint64_t sub_10022F534( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[25] = a7;
  v8[26] = a8;
  v8[23] = a5;
  _BYTE v8[24] = a6;
  v8[22] = a4;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  v8[27] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[28] = v10;
  v8[29] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  v8[30] = v11;
  unint64_t v12 = (*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[31] = swift_task_alloc(v12);
  _BYTE v8[32] = swift_task_alloc(v12);
  uint64_t v13 = type metadata accessor for Logger(0LL);
  v8[33] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v8[34] = v14;
  unint64_t v15 = (*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[35] = swift_task_alloc(v15);
  v8[36] = swift_task_alloc(v15);
  return swift_task_switch(sub_10022F608, 0LL, 0LL);
}

uint64_t sub_10022F608()
{
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 264);
  uint64_t v4 = *(void *)(v0 + 272);
  uint64_t v5 = *(void *)(v0 + 256);
  uint64_t v7 = *(void *)(v0 + 184);
  uint64_t v6 = *(void *)(v0 + 192);
  uint64_t v8 = *(int *)(type metadata accessor for LocationFetcher(0LL) + 32);
  *(_DWORD *)(v0 + 328) = v8;
  uint64_t v9 = v1 + v8;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 296) = v10;
  v10(v2, v9, v3);
  sub_100013044(v7, v0 + 16);
  uint64_t v11 = sub_10001DC4C(v6, v5, type metadata accessor for BeaconKeyManager.IndexInformation);
  unint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.info.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v45 = *(void *)(v0 + 272);
    uint64_t v46 = *(void *)(v0 + 264);
    uint64_t v47 = *(void *)(v0 + 288);
    uint64_t v14 = *(void *)(v0 + 232);
    uint64_t v40 = *(void *)(v0 + 256);
    uint64_t v41 = *(void *)(v0 + 240);
    uint64_t v15 = *(void *)(v0 + 216);
    uint64_t v39 = *(void *)(v0 + 224);
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    uint64_t v44 = swift_slowAlloc(64LL, -1LL);
    uint64_t v48 = v44;
    *(_DWORD *)uint64_t v16 = 141558531;
    *(void *)(v0 + 144) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v16 + 4, v16 + 12);
    *(_WORD *)(v16 + 12) = 2081;
    os_log_t log = v12;
    os_log_type_t type = v13;
    uint64_t v18 = *(void *)(v0 + 40);
    uint64_t v17 = *(void *)(v0 + 48);
    sub_100012ED8((void *)(v0 + 16), v18);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v17 + 8) + 8LL) + 32LL))(v18);
    uint64_t v19 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v15, v19);
    unint64_t v22 = v21;
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v14, v15);
    *(void *)(v0 + 152) = sub_1003F11D4(v20, v22, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
    *(_WORD *)(v16 + 22) = 2082;
    *(void *)(v0 + 96) = 0LL;
    *(void *)(v0 + 104) = 0xE000000000000000LL;
    v23._countAndFlagsBits = 123LL;
    v23._object = (void *)0xE100000000000000LL;
    String.append(_:)(v23);
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v15, v19);
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = 47LL;
    v25._object = (void *)0xE100000000000000LL;
    String.append(_:)(v25);
    uint64_t v26 = v40 + *(int *)(v41 + 20);
    uint64_t v27 = sub_100004AEC(&qword_1009A06D8);
    _print_unlocked<A, B>(_:_:)( v26,  v0 + 96,  v27,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    v28._countAndFlagsBits = 125LL;
    v28._object = (void *)0xE100000000000000LL;
    String.append(_:)(v28);
    *(void *)(v0 + 168) = sub_1003F11D4(*(void *)(v0 + 96), *(void *)(v0 + 104), &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v16 + 24, v16 + 32);
    swift_bridgeObjectRelease();
    sub_100018C68(v40, type metadata accessor for BeaconKeyManager.IndexInformation);
    _os_log_impl( (void *)&_mh_execute_header,  log,  type,  "Updating metadata for: %{private,mask.hash}s,indexInformation: %{public}s.",  (uint8_t *)v16,  0x20u);
    swift_arrayDestroy(v44, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);

    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
    v29(v47, v46);
  }

  else
  {
    uint64_t v30 = *(void *)(v0 + 288);
    uint64_t v31 = *(void *)(v0 + 264);
    uint64_t v32 = *(void *)(v0 + 272);
    uint64_t v33 = *(void *)(v0 + 256);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
    sub_100018C68(v33, type metadata accessor for BeaconKeyManager.IndexInformation);

    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    v29(v30, v31);
  }

  *(void *)(v0 + 304) = v29;
  uint64_t v34 = *(void *)(v0 + 208);
  uint64_t v35 = (unsigned __int8 *)(v34 + *(int *)(type metadata accessor for RawSearchResult(0LL) + 52));
  LOWORD(v34) = *v35;
  __int16 v36 = v35[1];
  uint64_t v37 = (void *)swift_task_alloc(dword_1009BC854);
  *(void *)(v0 + 312) = v37;
  *uint64_t v37 = v0;
  v37[1] = sub_10022FA00;
  return sub_1006C6308( *(void *)(v0 + 192),  *(void *)(v0 + 200),  (unsigned __int16)v34 | (unsigned __int16)(v36 << 8),  *(void *)(v0 + 184));
}

uint64_t sub_10022FA00()
{
  uint64_t v2 = *(void *)(*v1 + 312);
  uint64_t v3 = *v1;
  *(void *)(v3 + 32sub_100032838(0, 7LL, 0) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_10022FAA8, 0LL, 0LL);
  }
  uint64_t v5 = *(void *)(v3 + 280);
  uint64_t v7 = *(void *)(v3 + 248);
  uint64_t v6 = *(void *)(v3 + 256);
  uint64_t v8 = *(void *)(v3 + 232);
  swift_task_dealloc(*(void *)(v3 + 288));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10022FAA8()
{
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 192);
  (*(void (**)(void, void, void))(v0 + 296))( *(void *)(v0 + 280),  *(void *)(v0 + 176) + *(int *)(v0 + 328),  *(void *)(v0 + 264));
  sub_100013044(v3, v0 + 56);
  uint64_t v4 = sub_10001DC4C(v2, v1, type metadata accessor for BeaconKeyManager.IndexInformation);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v36 = *(void *)(v0 + 320);
    uint64_t v37 = *(void *)(v0 + 272);
    uint64_t v38 = *(void *)(v0 + 264);
    uint64_t v39 = *(void *)(v0 + 280);
    uint64_t v7 = *(void *)(v0 + 232);
    uint64_t v32 = *(void *)(v0 + 248);
    uint64_t v33 = *(void *)(v0 + 240);
    uint64_t v8 = *(void *)(v0 + 216);
    uint64_t v31 = *(void *)(v0 + 224);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v35 = swift_slowAlloc(64LL, -1LL);
    uint64_t v40 = v35;
    *(_DWORD *)uint64_t v9 = 141558531;
    *(void *)(v0 + 16sub_100032838(0, 7LL, 0) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    os_log_type_t type = v6;
    uint64_t v11 = *(void *)(v0 + 80);
    uint64_t v10 = *(void *)(v0 + 88);
    sub_100012ED8((void *)(v0 + 56), v11);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8LL) + 32LL))(v11);
    uint64_t v12 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter(v8, v12);
    unint64_t v15 = v14;
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v7, v8);
    *(void *)(v0 + 128) = sub_1003F11D4(v13, v15, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
    *(_WORD *)(v9 + 22) = 2082;
    *(void *)(v0 + 112) = 0LL;
    *(void *)(v0 + 12sub_100032838(0, 7LL, 0) = 0xE000000000000000LL;
    v16._countAndFlagsBits = 123LL;
    v16._object = (void *)0xE100000000000000LL;
    String.append(_:)(v16);
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v8, v12);
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 47LL;
    v18._object = (void *)0xE100000000000000LL;
    String.append(_:)(v18);
    uint64_t v19 = v32 + *(int *)(v33 + 20);
    uint64_t v20 = sub_100004AEC(&qword_1009A06D8);
    _print_unlocked<A, B>(_:_:)( v19,  v0 + 112,  v20,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    v21._countAndFlagsBits = 125LL;
    v21._object = (void *)0xE100000000000000LL;
    String.append(_:)(v21);
    *(void *)(v0 + 136) = sub_1003F11D4(*(void *)(v0 + 112), *(void *)(v0 + 120), &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v9 + 24, v9 + 32);
    swift_bridgeObjectRelease();
    sub_100018C68(v32, type metadata accessor for BeaconKeyManager.IndexInformation);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  type,  "Failed to update metadata for: %{private,mask.hash}s,indexInformation: %{public}s.",  (uint8_t *)v9,  0x20u);
    swift_arrayDestroy(v35, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_errorRelease(v36);

    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v39, v38);
  }

  else
  {
    unint64_t v22 = *(void (**)(uint64_t, uint64_t))(v0 + 304);
    uint64_t v23 = *(void *)(v0 + 280);
    uint64_t v24 = *(void *)(v0 + 264);
    uint64_t v25 = *(void *)(v0 + 248);
    swift_errorRelease(*(void *)(v0 + 320));
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
    sub_100018C68(v25, type metadata accessor for BeaconKeyManager.IndexInformation);

    v22(v23, v24);
  }

  uint64_t v26 = *(void *)(v0 + 280);
  uint64_t v28 = *(void *)(v0 + 248);
  uint64_t v27 = *(void *)(v0 + 256);
  uint64_t v29 = *(void *)(v0 + 232);
  swift_task_dealloc(*(void *)(v0 + 288));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022FE7C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v71 = a2;
  uint64_t v5 = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v66 = *(void *)(v5 - 8);
  uint64_t v67 = v5;
  __chkstk_darwin(v5);
  uint64_t v68 = (uint64_t)v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009A6610);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  char v73 = (char *)v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  unint64_t v15 = (char *)v59 - v14;
  uint64_t v16 = *(int *)(v7 + 48);
  Swift::String v17 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v17(v9, a1, v10);
  uint64_t v18 = *(void *)(a1 + v16);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v15, v9, v10);
  uint64_t v19 = *(int *)(v7 + 48);
  uint64_t v70 = (void (*)(uint64_t, uint64_t, uint64_t))v17;
  v17(v9, a1, v10);
  *(void *)&v9[v19] = v18;
  swift_bridgeObjectRetain(v18);
  uint64_t v20 = v72;
  uint64_t v22 = sub_100218E00(v21);
  uint64_t v61 = v11;
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
  uint64_t v72 = v10;
  uint64_t v69 = v23;
  v23(v9, v10);
  uint64_t v60 = v15;
  uint64_t v24 = sub_100230304((uint64_t)v15, v22);
  swift_bridgeObjectRelease();
  uint64_t v25 = *((void *)v24 + 2);
  if (!v25)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return v69(v60, v72);
  }

  v59[1] = v24;
  v59[2] = v20;
  uint64_t v26 = *(unsigned __int8 *)(v66 + 80);
  uint64_t v27 = (v26 + 32) & ~v26;
  uint64_t v28 = (uint64_t)&v24[v27];
  uint64_t v29 = *(void *)(v66 + 72);
  uint64_t v66 = v27;
  uint64_t v62 = v29;
  uint64_t v64 = v26 | 7;
  uint64_t v65 = v29 + v27;
  uint64_t v30 = type metadata accessor for BeaconEstimatedLocation;
  __int128 v63 = xmmword_1007E67D0;
  uint64_t v31 = v68;
  uint64_t v71 = a3;
  while (1)
  {
    sub_10001DC4C(v28, v31, v30);
    uint64_t v33 = v31 + *(int *)(v67 + 24);
    uint64_t v34 = *a3;
    if (*(void *)(*a3 + 16LL))
    {
      unint64_t v35 = sub_10030D124(v31 + *(int *)(v67 + 24));
      uint64_t v36 = _swiftEmptyArrayStorage;
      if ((v37 & 1) != 0)
      {
        uint64_t v36 = *(void **)(*(void *)(v34 + 56) + 8 * v35);
        swift_bridgeObjectRetain(v36);
      }
    }

    else
    {
      uint64_t v36 = _swiftEmptyArrayStorage;
    }

    uint64_t v38 = (uint64_t)v73;
    v70((uint64_t)v73, v33, v72);
    uint64_t v39 = sub_100004AEC(&qword_1009B10F0);
    uint64_t v40 = swift_allocObject(v39, v65, v64);
    *(_OWORD *)(v40 + swift_weakDestroy(v0 + 16) = v63;
    uint64_t v41 = v30;
    sub_10001DC4C(v31, v40 + v66, v30);
    unint64_t v74 = v36;
    sub_100184B64(v40);
    uint64_t v42 = v74;
    uint64_t v43 = v71;
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v71);
    unint64_t v74 = (void *)*v43;
    uint64_t v45 = v74;
    *uint64_t v43 = 0x8000000000000000LL;
    unint64_t v47 = sub_10030D124(v38);
    uint64_t v48 = v45[2];
    BOOL v49 = (v46 & 1) == 0;
    uint64_t v50 = v48 + v49;
    if (__OFADD__(v48, v49))
    {
      __break(1u);
LABEL_22:
      __break(1u);
    }

    char v51 = v46;
    if (v45[3] < v50) {
      break;
    }
    a3 = v71;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v54 = v74;
      if ((v46 & 1) != 0) {
        goto LABEL_3;
      }
    }

    else
    {
      sub_100063A54();
      uint64_t v54 = v74;
      if ((v51 & 1) != 0)
      {
LABEL_3:
        uint64_t v32 = v54[7];
        swift_bridgeObjectRelease();
        *(void *)(v32 + 8 * v47) = v42;
        goto LABEL_4;
      }
    }

char *sub_100230304(uint64_t a1, uint64_t a2)
{
  uint64_t v423 = a1;
  uint64_t v3 = sub_100004AEC(&qword_1009A6620);
  __chkstk_darwin(v3);
  uint64_t v381 = (uint64_t)v374 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for LocationFetcher(0LL);
  uint64_t v407 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v406 = v6;
  uint64_t v405 = (uint64_t)v374 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v8 = __chkstk_darwin(v7);
  v412 = (char *)v374 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  v420 = (char *)v374 - v10;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(uint64_t (***)(char *, uint64_t, uint64_t))(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  v439 = (char *)v374 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  v399 = (char *)v374 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  *(void *)&__int128 v393 = (char *)v374 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v409 = (char *)v374 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v416 = (char *)v374 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  v431 = (char *)v374 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v417 = (char *)v374 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  v421 = (dispatch_group_s *)((char *)v374 - v28);
  uint64_t v29 = __chkstk_darwin(v27);
  v419 = (char *)v374 - v30;
  uint64_t v404 = v31;
  __chkstk_darwin(v29);
  os_log_t v391 = (os_log_t)((char *)v374 - v32);
  uint64_t v33 = type metadata accessor for Logger(0LL);
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = __chkstk_darwin(v33);
  v436 = (char *)v374 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v410 = (uint64_t)v374 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v395 = (uint64_t)v374 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  v388 = (char *)v374 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  v427 = (char *)v374 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  v418 = (uint64_t (*)(uint64_t))((char *)v374 - v46);
  __chkstk_darwin(v45);
  v392 = (void *)((char *)v374 - v47);
  uint64_t v48 = sub_100004AEC(&qword_1009A48E0);
  __chkstk_darwin(v48);
  v397 = (void (*)(void, void))((char *)v374 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v411 = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v429 = *(void *)(v411 - 8);
  uint64_t v50 = __chkstk_darwin(v411);
  uint64_t v403 = (uint64_t)v374 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v52 = __chkstk_darwin(v50);
  uint64_t v408 = (uint64_t)v374 - v53;
  uint64_t v54 = __chkstk_darwin(v52);
  uint64_t v415 = (uint64_t)v374 - v55;
  uint64_t v56 = __chkstk_darwin(v54);
  v414 = (char *)v374 - v57;
  uint64_t v58 = __chkstk_darwin(v56);
  uint64_t v426 = (uint64_t)v374 - v59;
  uint64_t v60 = __chkstk_darwin(v58);
  uint64_t v425 = (uint64_t)v374 - v61;
  uint64_t v62 = __chkstk_darwin(v60);
  uint64_t v402 = (uint64_t)v374 - v63;
  uint64_t v64 = __chkstk_darwin(v62);
  v435 = (__int128 *)((char *)v374 - v65);
  uint64_t v66 = __chkstk_darwin(v64);
  uint64_t v396 = (uint64_t)v374 - v67;
  uint64_t v68 = __chkstk_darwin(v66);
  uint64_t v428 = (uint64_t)v374 - v69;
  uint64_t v70 = __chkstk_darwin(v68);
  v424 = (char *)v374 - v71;
  uint64_t v394 = v72;
  __chkstk_darwin(v70);
  v398 = (char *)v374 - v73;
  uint64_t v434 = type metadata accessor for Date(0LL);
  uint64_t v74 = *(void *)(v434 - 8);
  uint64_t v75 = __chkstk_darwin(v434);
  v438 = (char *)v374 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v75);
  v432 = (char *)v374 - v77;
  uint64_t v78 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v79 = __chkstk_darwin(v78);
  uint64_t v81 = (char *)v374 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v79);
  v413 = (char *)v374 - v82;
  uint64_t v433 = type metadata accessor for RawSearchResult(0LL);
  uint64_t v83 = __chkstk_darwin(v433);
  v384 = (char *)v374 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v85 = __chkstk_darwin(v83);
  uint64_t v380 = (uint64_t)v374 - v86;
  uint64_t v87 = __chkstk_darwin(v85);
  uint64_t v88 = __chkstk_darwin(v87);
  uint64_t v90 = (uint64_t)v374 - v89;
  __chkstk_darwin(v88);
  uint64_t v94 = (char *)v374 - v91;
  uint64_t v389 = *(void *)(a2 + 16);
  if (!v389)
  {
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v436, &v430[*(int *)(v5 + 32)], v33);
    uint64_t v104 = v12[2](v439, v423, v11);
    uint64_t v105 = (os_log_s *)Logger.logObject.getter(v104);
    os_log_type_t v106 = static os_log_type_t.default.getter(v105);
    if (os_log_type_enabled(v105, v106))
    {
      uint64_t v107 = swift_slowAlloc(22LL, -1LL);
      uint64_t v401 = v34;
      uint64_t v108 = v107;
      uint64_t v109 = swift_slowAlloc(32LL, -1LL);
      uint64_t v422 = v33;
      uint64_t v110 = v109;
      uint64_t v450 = v109;
      *(_DWORD *)uint64_t v108 = 141558275;
      *(void *)&__int128 v447 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v447, (char *)&v447 + 8, v108 + 4, v108 + 12);
      *(_WORD *)(v108 + 12) = 2081;
      uint64_t v111 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      __int128 v112 = v439;
      uint64_t v113 = dispatch thunk of CustomStringConvertible.description.getter(v11, v111);
      *(void *)&__int128 v447 = sub_1003F11D4(v113, v114, &v450);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v447, (char *)&v447 + 8, v108 + 14, v108 + 22);
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v12[1])(v112, v11);
      _os_log_impl( (void *)&_mh_execute_header,  v105,  v106,  "Did not find a location for beacon %{private,mask.hash}s.",  (uint8_t *)v108,  0x16u);
      swift_arrayDestroy(v110, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v110, -1LL, -1LL);
      swift_slowDealloc(v108, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v401 + 8))(v436, v422);
    }

    else
    {
      ((void (*)(char *, uint64_t))v12[1])(v439, v11);

      (*(void (**)(char *, uint64_t))(v34 + 8))(v436, v33);
    }

    return (char *)_swiftEmptyArrayStorage;
  }

  v400 = (void (*)(uint64_t, char *, uint64_t))v5;
  uint64_t v378 = v92;
  v436 = (char *)v12;
  uint64_t v437 = v11;
  uint64_t v401 = v34;
  uint64_t v383 = v93;
  unint64_t v95 = (*(unsigned __int8 *)(v93 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80);
  uint64_t v382 = a2 + v95;
  sub_10001DC4C(a2 + v95, (uint64_t)v374 - v91, type metadata accessor for RawSearchResult);
  uint64_t v96 = v430;
  sub_100504C28(v423, (uint64_t)&v447);
  v390 = v94;
  if (!v448)
  {
    sub_100015794((uint64_t)&v447, (uint64_t *)&unk_1009A9C40);
    uint64_t v115 = v401;
    uint64_t v116 = v410;
    (*(void (**)(uint64_t, char *, uint64_t))(v401 + 16))(v410, &v96[*((int *)v400 + 8)], v33);
    uint64_t v117 = v436;
    uint64_t v118 = v399;
    uint64_t v119 = v437;
    uint64_t v120 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v436 + 2))(v399, v423, v437);
    unint64_t v121 = (os_log_s *)Logger.logObject.getter(v120);
    os_log_type_t v122 = static os_log_type_t.error.getter(v121);
    if (os_log_type_enabled(v121, v122))
    {
      uint64_t v123 = v118;
      uint64_t v124 = swift_slowAlloc(22LL, -1LL);
      uint64_t v125 = swift_slowAlloc(32LL, -1LL);
      uint64_t v422 = v33;
      uint64_t v126 = v125;
      uint64_t v450 = v125;
      *(_DWORD *)uint64_t v124 = 141558275;
      *(void *)&__int128 v447 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v447, (char *)&v447 + 8, v124 + 4, v124 + 12);
      *(_WORD *)(v124 + 12) = 2081;
      uint64_t v127 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v128 = dispatch thunk of CustomStringConvertible.description.getter(v119, v127);
      *(void *)&__int128 v447 = sub_1003F11D4(v128, v129, &v450);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v447, (char *)&v447 + 8, v124 + 14, v124 + 22);
      swift_bridgeObjectRelease();
      (*((void (**)(char *, uint64_t))v117 + 1))(v123, v119);
      _os_log_impl( (void *)&_mh_execute_header,  v121,  v122,  "saveLocation could not find beacon record for %{private,mask.hash}s.",  (uint8_t *)v124,  0x16u);
      swift_arrayDestroy(v126, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v126, -1LL, -1LL);
      swift_slowDealloc(v124, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v401 + 8))(v410, v422);
    }

    else
    {
      (*((void (**)(char *, uint64_t))v117 + 1))(v118, v119);

      (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v116, v33);
    }

    sub_100018C68((uint64_t)v390, type metadata accessor for RawSearchResult);
    return (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v97 = a2;
  sub_100012EC0(&v447, (uint64_t)&v450);
  unsigned int v98 = *v94;
  int v99 = (v98 >> 4) & 3;
  uint64_t v422 = v33;
  uint64_t v100 = v433;
  int v377 = v99;
  unsigned int v376 = v98;
  unint64_t v375 = v95;
  if (!v99) {
    goto LABEL_13;
  }
  if ((v99 - 2) >= 2)
  {
    if (v99 == 1)
    {
      uint64_t v130 = v451;
      uint64_t v131 = v452;
      sub_100012ED8(&v450, v451);
      int v103 = (*(uint64_t (**)(uint64_t, uint64_t))(v131 + 96))(v130, v131);
      goto LABEL_14;
    }

uint64_t sub_1002331F8(void *a1, uint64_t a2)
{
  uint64_t v91 = a1;
  uint64_t v87 = sub_100004AEC(&qword_1009A6648);
  uint64_t v76 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  uint64_t v86 = (uint64_t)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for RawSearchResult(0LL);
  uint64_t v88 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  *(void *)&__int128 v79 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v75 - v7;
  uint64_t v9 = sub_100004AEC(&qword_1009A6610);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void **)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(int *)(v9 + 48);
  uint64_t v17 = (void (*)(char *, uint64_t, uint64_t))v13[2];
  v17(v11, a2, v12);
  uint64_t v18 = *(void *)(a2 + v16);
  uint64_t v19 = (void (*)(unint64_t, uint64_t, uint64_t))v13[4];
  uint64_t v89 = v15;
  uint64_t v83 = v19;
  v19((unint64_t)v15, (uint64_t)v11, v12);
  uint64_t v20 = *(int *)(v9 + 48);
  uint64_t v85 = (void (*)(uint64_t, char *, uint64_t))v17;
  v17(v11, a2, v12);
  *(void *)&v11[v20] = v18;
  swift_bridgeObjectRetain(v18);
  uint64_t v21 = v90;
  uint64_t v23 = sub_10023E7EC(v22);
  uint64_t v84 = v13;
  uint64_t v24 = (void (*)(char *, uint64_t))v13[1];
  uint64_t v90 = v12;
  v24(v11, v12);
  swift_bridgeObjectRetain(v23);
  uint64_t v26 = sub_1002FEA20(v25);
  swift_release();
  uint64_t v92 = v26;
  sub_10023B268( (uint64_t *)&v92,  type metadata accessor for RawSearchResult,  (uint64_t (*)(uint64_t))sub_1003D4A8C,  sub_10023C948);
  if (!v21)
  {
    uint64_t v77 = 0LL;
    uint64_t v78 = (uint64_t (*)(char *, uint64_t))v24;
    swift_release();
    uint64_t v27 = (uint64_t)v92;
    uint64_t v28 = v92[2];
    uint64_t v29 = &unk_1007E6000;
    if (v28)
    {
      uint64_t v30 = v88;
      uint64_t v31 = *(unsigned __int8 *)(v88 + 80);
      uint64_t v32 = (v31 + 32) & ~v31;
      uint64_t v33 = (uint64_t)v92 + v32;
      int v34 = sub_100041014(*((_BYTE *)v92 + v32) & 0xB);
      uint64_t v35 = *(void *)(v30 + 72);
      uint64_t v88 = v32;
      uint64_t v36 = v35;
      uint64_t v82 = v35 + v32;
      uint64_t v81 = v31 | 7;
      uint64_t v75 = v27;
      swift_retain();
      uint64_t v37 = _swiftEmptyArrayStorage;
      __int128 v80 = xmmword_1007E67D0;
      do
      {
        sub_10001DC4C(v33, (uint64_t)v8, type metadata accessor for RawSearchResult);
        int v38 = *v8 & 0xB;
        if (v34 == sub_100041014(v38) && (uint64_t v39 = v37[2]) != 0)
        {
          unint64_t v40 = v37[v39 + 3];
          sub_10001DC4C((uint64_t)v8, v79, type metadata accessor for RawSearchResult);
          swift_bridgeObjectRetain(v40);
          if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0) {
            unint64_t v40 = sub_1004C5B50(0, *(void *)(v40 + 16) + 1LL, 1, v40);
          }
          unint64_t v43 = *(void *)(v40 + 16);
          unint64_t v42 = *(void *)(v40 + 24);
          if (v43 >= v42 >> 1) {
            unint64_t v40 = sub_1004C5B50(v42 > 1, v43 + 1, 1, v40);
          }
          *(void *)(v40 + swift_weakDestroy(v0 + 16) = v43 + 1;
          sub_10002218C(v79, v40 + v88 + v43 * v36, type metadata accessor for RawSearchResult);
          if (!v37[2]) {
            goto LABEL_38;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) != 0)
          {
            uint64_t v44 = v37[2];
            if (!v44) {
              goto LABEL_39;
            }
          }

          else
          {
            uint64_t v37 = sub_1005996C4(v37);
            uint64_t v44 = v37[2];
            if (!v44) {
              goto LABEL_39;
            }
          }

          v37[2] = v44 - 1;
          swift_bridgeObjectRelease();
          unint64_t v46 = v37[2];
          unint64_t v45 = v37[3];
          if (v46 >= v45 >> 1) {
            uint64_t v37 = sub_1004C5C98((void *)(v45 > 1), v46 + 1, 1, v37);
          }
          v37[2] = v46 + 1;
          v37[v46 + 4] = v40;
        }

        else
        {
          uint64_t v47 = sub_100004AEC(&qword_10099D4E8);
          uint64_t v48 = swift_allocObject(v47, v82, v81);
          *(_OWORD *)(v48 + swift_weakDestroy(v0 + 16) = v80;
          sub_10001DC4C((uint64_t)v8, v48 + v88, type metadata accessor for RawSearchResult);
          if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0) {
            uint64_t v37 = sub_1004C5C98(0LL, v37[2] + 1LL, 1, v37);
          }
          unint64_t v50 = v37[2];
          unint64_t v49 = v37[3];
          if (v50 >= v49 >> 1) {
            uint64_t v37 = sub_1004C5C98((void *)(v49 > 1), v50 + 1, 1, v37);
          }
          v37[2] = v50 + 1;
          v37[v50 + 4] = v48;
          int v34 = sub_100041014(v38);
        }

        sub_100018C68((uint64_t)v8, type metadata accessor for RawSearchResult);
        v33 += v36;
        --v28;
      }

      while (v28);
      swift_release_n(v75, 2LL);
      uint64_t v29 = (_OWORD *)&unk_1007E6000;
      uint64_t v51 = v37[2];
      if (!v51) {
        goto LABEL_35;
      }
    }

    else
    {
      sub_100041014(0);
      swift_release();
      uint64_t v37 = _swiftEmptyArrayStorage;
      uint64_t v51 = _swiftEmptyArrayStorage[2];
      if (!v51)
      {
LABEL_35:
        swift_bridgeObjectRelease();
        return v78(v89, v90);
      }
    }

    uint64_t v52 = v37 + 4;
    uint64_t v88 = sub_100004AEC(&qword_1009A6650);
    uint64_t v53 = *(unsigned __int8 *)(v76 + 80);
    uint64_t v81 = ((v53 + 32) & ~v53) + *(void *)(v76 + 72);
    uint64_t v82 = (v53 + 32) & ~v53;
    *(void *)&__int128 v80 = v53 | 7;
    __int128 v79 = v29[125];
    uint64_t v54 = v90;
    while (1)
    {
      uint64_t v55 = *v52;
      uint64_t v56 = sub_100004AEC(&qword_1009A6658);
      uint64_t v57 = swift_allocObject(v56, v81, v80);
      *(_OWORD *)(v57 + swift_weakDestroy(v0 + 16) = v79;
      uint64_t v58 = v57 + v82;
      uint64_t v59 = v87;
      uint64_t v60 = *(int *)(v87 + 48);
      v85(v57 + v82, v89, v54);
      *(void *)(v58 + v6sub_100032838(0, 7LL, 0) = v55;
      uint64_t v61 = (void *)static _DictionaryStorage.allocate(capacity:)(1LL);
      uint64_t v62 = *(int *)(v59 + 48);
      uint64_t v63 = v58;
      uint64_t v64 = v86;
      sub_10001581C(v63, v86, &qword_1009A6648);
      swift_bridgeObjectRetain(v55);
      swift_retain();
      unint64_t v65 = sub_10030D124(v64);
      if ((v66 & 1) != 0) {
        break;
      }
      unint64_t v67 = v65;
      v61[(v65 >> 6) + 8] |= 1LL << v65;
      v83(v61[6] + v84[9] * v65, v64, v54);
      *(void *)(v61[7] + 8 * v67) = *(void *)(v64 + v62);
      uint64_t v68 = v61[2];
      BOOL v69 = __OFADD__(v68, 1LL);
      uint64_t v70 = v68 + 1;
      if (v69) {
        goto LABEL_37;
      }
      v61[2] = v70;
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v71 = (void *)*v91;
      if ((swift_isUniquelyReferenced_nonNull_native(*v91) & 1) == 0) {
        uint64_t v71 = sub_1004C5C84(0LL, v71[2] + 1LL, 1, v71);
      }
      unint64_t v73 = v71[2];
      unint64_t v72 = v71[3];
      if (v73 >= v72 >> 1) {
        uint64_t v71 = sub_1004C5C84((void *)(v72 > 1), v73 + 1, 1, v71);
      }
      v71[2] = v73 + 1;
      v71[v73 + 4] = v61;
      *uint64_t v91 = v71;
      ++v52;
      if (!--v51) {
        goto LABEL_35;
      }
    }

    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
  }

  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_100233900(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v53 = type metadata accessor for UUID(0LL);
  uint64_t v55 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v56 = (uint64_t)v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v51 = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v8 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v52 = (uint64_t)v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_bridgeObjectRetain(a3);
  uint64_t v10 = sub_100230304(a2, a3);
  swift_bridgeObjectRelease();
  uint64_t v11 = *((void *)v10 + 2);
  if (!v11) {
    return swift_bridgeObjectRelease();
  }
  v45[1] = v10;
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = (v12 + 32) & ~v12;
  uint64_t v14 = (uint64_t)&v10[v13];
  uint64_t v15 = *(void *)(v8 + 72);
  uint64_t v50 = v13;
  uint64_t v46 = v15;
  uint64_t v48 = v12 | 7;
  uint64_t v49 = v15 + v13;
  __int128 v47 = xmmword_1007E67D0;
  uint64_t v17 = v52;
  uint64_t v16 = v53;
  uint64_t v54 = a4;
  while (1)
  {
    sub_10001DC4C(v14, v17, type metadata accessor for BeaconEstimatedLocation);
    uint64_t v19 = v17 + *(int *)(v51 + 24);
    uint64_t v20 = *a4;
    if (*(void *)(*a4 + 16LL))
    {
      unint64_t v21 = sub_10030D124(v17 + *(int *)(v51 + 24));
      uint64_t v22 = _swiftEmptyArrayStorage;
      if ((v23 & 1) != 0)
      {
        uint64_t v22 = *(void **)(*(void *)(v20 + 56) + 8 * v21);
        swift_bridgeObjectRetain(v22);
      }
    }

    else
    {
      uint64_t v22 = _swiftEmptyArrayStorage;
    }

    uint64_t v24 = v56;
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16);
    v25(v56, v19, v16);
    uint64_t v26 = sub_100004AEC(&qword_1009B10F0);
    uint64_t v27 = swift_allocObject(v26, v49, v48);
    *(_OWORD *)(v27 + swift_weakDestroy(v0 + 16) = v47;
    sub_10001DC4C(v17, v27 + v50, type metadata accessor for BeaconEstimatedLocation);
    uint64_t v57 = v22;
    sub_100184B64(v27);
    uint64_t v28 = v57;
    uint64_t v29 = v54;
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v54);
    uint64_t v57 = (void *)*v29;
    uint64_t v31 = v57;
    *uint64_t v29 = 0x8000000000000000LL;
    unint64_t v33 = sub_10030D124(v24);
    uint64_t v34 = v31[2];
    BOOL v35 = (v32 & 1) == 0;
    uint64_t v36 = v34 + v35;
    if (__OFADD__(v34, v35))
    {
      __break(1u);
LABEL_20:
      __break(1u);
    }

    char v37 = v32;
    if (v31[3] < v36) {
      break;
    }
    a4 = v54;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      sub_100063A54();
    }
LABEL_15:
    uint64_t v16 = v53;
    unint64_t v40 = v57;
    if ((v37 & 1) != 0)
    {
      uint64_t v18 = v57[7];
      swift_bridgeObjectRelease();
      *(void *)(v18 + 8 * v33) = v28;
    }

    else
    {
      v57[(v33 >> 6) + 8] |= 1LL << v33;
      v25(v40[6] + *(void *)(v55 + 72) * v33, v56, v16);
      *(void *)(v40[7] + 8 * v33) = v28;
      uint64_t v41 = v40[2];
      BOOL v42 = __OFADD__(v41, 1LL);
      uint64_t v43 = v41 + 1;
      if (v42) {
        goto LABEL_20;
      }
      v40[2] = v43;
    }

    *a4 = v40;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v56, v16);
    uint64_t v17 = v52;
    sub_100018C68(v52, type metadata accessor for BeaconEstimatedLocation);
    v14 += v46;
    if (!--v11) {
      return swift_bridgeObjectRelease();
    }
  }

  sub_10004D508(v36, isUniquelyReferenced_nonNull_native);
  unint64_t v38 = sub_10030D124(v56);
  a4 = v54;
  if ((v37 & 1) == (v39 & 1))
  {
    unint64_t v33 = v38;
    goto LABEL_15;
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v53);
  __break(1u);
  return result;
}

uint64_t sub_100233CC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v25 - v8;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void **)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v25 - v15;
  uint64_t v17 = type metadata accessor for BeaconEstimatedLocation(0LL);
  sub_10001581C(a2 + *(int *)(v17 + 48), (uint64_t)v9, (uint64_t *)&unk_10099D720);
  uint64_t v18 = (unsigned int (*)(char *, uint64_t, uint64_t))v11[6];
  if (v18(v9, 1LL, v10) == 1)
  {
    uint64_t v19 = (uint64_t)v9;
  }

  else
  {
    uint64_t v20 = (void (*)(char *, char *, uint64_t))v11[4];
    v20(v16, v9, v10);
    uint64_t v21 = type metadata accessor for RawSearchResult(0LL);
    sub_10001581C(a1 + *(int *)(v21 + 40), (uint64_t)v7, (uint64_t *)&unk_10099D720);
    if (v18(v7, 1LL, v10) != 1)
    {
      v20(v14, v7, v10);
      char v22 = static Date.> infix(_:_:)(v14, v16);
      char v23 = (void (*)(char *, uint64_t))v11[1];
      v23(v14, v10);
      v23(v16, v10);
      return v22 & 1;
    }

    ((void (*)(char *, uint64_t))v11[1])(v16, v10);
    uint64_t v19 = (uint64_t)v7;
  }

  sub_100015794(v19, (uint64_t *)&unk_10099D720);
  char v22 = 1;
  return v22 & 1;
}

uint64_t sub_100233EB4(char *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v40 = a1;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v35 - v10;
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = a2 + *(int *)(type metadata accessor for LocationFetcher(0LL) + 32);
  uint64_t v42 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v16, v12);
  uint64_t v39 = v6;
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v17(v11, a3, v5);
  uint64_t v41 = v9;
  uint64_t v18 = ((uint64_t (*)(char *, char *, uint64_t))v17)(v9, v40, v5);
  unint64_t v40 = v15;
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.default.getter(v19);
  int v21 = v20;
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v22 = swift_slowAlloc(42LL, -1LL);
    uint64_t v38 = v12;
    uint64_t v23 = v22;
    uint64_t v37 = swift_slowAlloc(64LL, -1LL);
    uint64_t v45 = v37;
    *(_DWORD *)uint64_t v23 = 141558787;
    uint64_t v43 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v23 + 4, v23 + 12);
    *(_WORD *)(v23 + 12) = 2081;
    int v36 = v21;
    uint64_t v24 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    os_log_t v35 = v19;
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter(v5, v24);
    uint64_t v43 = sub_1003F11D4(v25, v26, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v23 + 14, v23 + 22);
    swift_bridgeObjectRelease();
    uint64_t v27 = *(void (**)(char *, uint64_t))(v39 + 8);
    v27(v11, v5);
    *(_WORD *)(v23 + 22) = 2160;
    uint64_t v43 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v23 + 24, v23 + 32);
    *(_WORD *)(v23 + 32) = 2081;
    uint64_t v28 = v41;
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter(v5, v24);
    uint64_t v43 = sub_1003F11D4(v29, v30, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v23 + 34, v23 + 42);
    swift_bridgeObjectRelease();
    v27(v28, v5);
    os_log_t v31 = v35;
    _os_log_impl( (void *)&_mh_execute_header,  v35,  (os_log_type_t)v36,  "Beacon %{private,mask.hash}s reported connected to multipart peer: %{private,mask.hash}s.",  (uint8_t *)v23,  0x2Au);
    uint64_t v32 = v37;
    swift_arrayDestroy(v37, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);

    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v40, v38);
  }

  else
  {
    uint64_t v34 = *(void (**)(char *, uint64_t))(v39 + 8);
    v34(v11, v5);
    v34(v41, v5);

    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v40, v12);
  }

uint64_t sub_100234214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v49 = type metadata accessor for Date(0LL);
  uint64_t v48 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  __int128 v47 = &v42[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v42[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = &v42[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v15 = a2 + *(int *)(type metadata accessor for LocationFetcher(0LL) + 32);
  uint64_t v50 = v12;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v14, v15, v11);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, a3, v7);
  sub_100013044(a1, (uint64_t)v61);
  sub_100013044(a1, (uint64_t)v58);
  sub_100013044(a1, (uint64_t)v55);
  uint64_t v16 = sub_100013044(a1, (uint64_t)v52);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.info.getter(v17);
  int v19 = v18;
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v20 = swift_slowAlloc(62LL, -1LL);
    uint64_t v46 = v11;
    uint64_t v21 = v20;
    uint64_t v45 = swift_slowAlloc(64LL, -1LL);
    uint64_t v64 = v45;
    *(_DWORD *)uint64_t v21 = 141559299;
    uint64_t v51 = 1752392040LL;
    os_log_t v44 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v21 + 4, v21 + 12);
    *(_WORD *)(v21 + 12) = 2081;
    uint64_t v22 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    int v43 = v19;
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v7, v22);
    uint64_t v51 = sub_1003F11D4(v23, v24, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v21 + 14, v21 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
    *(_WORD *)(v21 + 22) = 2049;
    uint64_t v25 = v62;
    uint64_t v26 = v63;
    sub_100012ED8(v61, v62);
    uint64_t v51 = (*(double (**)(uint64_t, uint64_t))(v26 + 16))(v25, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v21 + 24, v21 + 32);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v61);
    *(_WORD *)(v21 + 32) = 2049;
    uint64_t v27 = v59;
    uint64_t v28 = v60;
    sub_100012ED8(v58, v59);
    uint64_t v51 = (*(double (**)(uint64_t, uint64_t))(v28 + 24))(v27, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v21 + 34, v21 + 42);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v58);
    *(_WORD *)(v21 + 42) = 2048;
    uint64_t v29 = v56;
    uint64_t v30 = v57;
    sub_100012ED8(v55, v56);
    uint64_t v51 = (*(double (**)(uint64_t, uint64_t))(v30 + 32))(v29, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v21 + 44, v21 + 52);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v55);
    *(_WORD *)(v21 + 52) = 2082;
    uint64_t v31 = v53;
    uint64_t v32 = v54;
    sub_100012ED8(v52, v53);
    unint64_t v33 = v47;
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v32);
    uint64_t v34 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v35 = v49;
    uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter(v49, v34);
    unint64_t v38 = v37;
    (*(void (**)(_BYTE *, uint64_t))(v48 + 8))(v33, v35);
    uint64_t v51 = sub_1003F11D4(v36, v38, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v21 + 54, v21 + 62);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v52);
    os_log_t v39 = v44;
    _os_log_impl( (void *)&_mh_execute_header,  v44,  (os_log_type_t)v43,  "△ Source Beacon: %{private,mask.hash}s, Location: lat: %{private}f, lon: %{private}f, accuracy: %f, timestamp: %{public}s.",  (uint8_t *)v21,  0x3Eu);
    uint64_t v40 = v45;
    swift_arrayDestroy(v45, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);

    return (*(uint64_t (**)(_BYTE *, uint64_t))(v50 + 8))(v14, v46);
  }

  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v61);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v58);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v55);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v52);

    return (*(uint64_t (**)(_BYTE *, uint64_t))(v50 + 8))(v14, v11);
  }

void sub_100234734(uint64_t a1, dispatch_group_s *a2, uint64_t a3, os_log_s *a4, uint64_t a5, int a6)
{
  int v143 = a6;
  os_log_t v147 = a4;
  uint64_t v148 = a5;
  uint64_t v152 = a3;
  uint64_t v153 = a1;
  uint64_t v146 = a2;
  uint64_t v149 = type metadata accessor for UUID(0LL);
  uint64_t v154 = *(void *)(v149 - 8);
  uint64_t v6 = __chkstk_darwin(v149);
  unint64_t v140 = (char *)&v138 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v141 = (char *)&v138 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v144 = (uint64_t *)((char *)&v138 - v11);
  __chkstk_darwin(v10);
  os_log_t v151 = (char *)&v138 - v12;
  uint64_t v142 = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v13 = __chkstk_darwin(v142);
  uint64_t v139 = (uint64_t)&v138 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v138 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v138 - v19;
  __chkstk_darwin(v18);
  unint64_t v150 = (char *)&v138 - v21;
  uint64_t v22 = type metadata accessor for Logger(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v138 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)&v138 - v28;
  uint64_t v30 = __chkstk_darwin(v27);
  uint64_t v32 = (char *)&v138 - v31;
  __chkstk_darwin(v30);
  os_log_t v145 = (os_log_t)((char *)&v138 - v33);
  uint64_t v34 = sub_100004AEC(&qword_1009A6628);
  __chkstk_darwin(v34);
  uint64_t v36 = (uint64_t *)((char *)&v138 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(v153, (uint64_t)v36, &qword_1009A6628);
  if (swift_getEnumCaseMultiPayload(v36, v34) == 1)
  {
    uint64_t v37 = v152;
    uint64_t v38 = (uint64_t)v20;
    os_log_t v151 = v17;
    uint64_t v39 = (uint64_t)v144;
    uint64_t v138 = v29;
    v156[0] = *v36;
    uint64_t v40 = (os_log_s *)v156[0];
    swift_errorRetain(v156[0]);
    uint64_t v41 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    if ((swift_dynamicCast(&v155, v156, v41, &type metadata for BeaconStore.BeaconStoreError, 6LL) & 1) != 0)
    {
      int v42 = v155;
      uint64_t v43 = v37 + *(int *)(type metadata accessor for LocationFetcher(0LL) + 32);
      uint64_t v44 = v23;
      uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
      if (v42 == 8)
      {
        uint64_t v46 = v138;
        v45(v138, v43, v22);
        uint64_t v47 = (uint64_t)v151;
        sub_10001DC4C((uint64_t)v147, (uint64_t)v151, type metadata accessor for BeaconEstimatedLocation);
        uint64_t v48 = v154;
        uint64_t v49 = v141;
        uint64_t v50 = v149;
        uint64_t v51 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v154 + 16))(v141, v148, v149);
        uint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
        os_log_type_t v53 = static os_log_type_t.default.getter(v52);
        int v54 = v53;
        if (os_log_type_enabled(v52, v53))
        {
          uint64_t v55 = swift_slowAlloc(52LL, -1LL);
          os_log_t v147 = v40;
          uint64_t v56 = v49;
          uint64_t v57 = v55;
          uint64_t v58 = swift_slowAlloc(96LL, -1LL);
          unint64_t v150 = (char *)v58;
          *(_DWORD *)uint64_t v57 = 141559043;
          uint64_t v155 = 1752392040LL;
          v156[0] = v58;
          uint64_t v152 = v22;
          LODWORD(v148) = v54;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v57 + 4, v57 + 12);
          *(_WORD *)(v57 + 12) = 2081;
          uint64_t v153 = v44;
          uint64_t v59 = v47;
          uint64_t v60 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter(v50, v60);
          uint64_t v155 = sub_1003F11D4(v61, v62, v156);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v57 + 14, v57 + 22);
          swift_bridgeObjectRelease();
          sub_100018C68(v59, type metadata accessor for BeaconEstimatedLocation);
          *(_WORD *)(v57 + 22) = 2160;
          uint64_t v155 = 1752392040LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v57 + 24, v57 + 32);
          *(_WORD *)(v57 + 32) = 2081;
          uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter(v50, v60);
          uint64_t v155 = sub_1003F11D4(v63, v64, v156);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v57 + 34, v57 + 42);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v48 + 8))(v56, v50);
          *(_WORD *)(v57 + 42) = 2080;
          uint64_t v65 = sub_100167394(v143);
          uint64_t v155 = sub_1003F11D4(v65, v66, v156);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v57 + 44, v57 + 52);
          swift_bridgeObjectRelease();
          _os_log_impl( (void *)&_mh_execute_header,  v52,  (os_log_type_t)v148,  "Skipped saving outdated LocationID: %{private,mask.hash}s for Beacon: %{private,mask.hash}s with source: %s.",  (uint8_t *)v57,  0x34u);
          uint64_t v67 = (uint64_t)v150;
          swift_arrayDestroy(v150, 3LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v67, -1LL, -1LL);
          swift_slowDealloc(v57, -1LL, -1LL);

          swift_errorRelease(v147);
          (*(void (**)(char *, uint64_t))(v153 + 8))(v138, v152);
        }

        else
        {
          swift_errorRelease(v40);
          sub_100018C68(v47, type metadata accessor for BeaconEstimatedLocation);
          (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);

          (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v22);
        }

        goto LABEL_19;
      }

      uint64_t v153 = v23;
      uint64_t v91 = v22;
      v45(v26, v43, v22);
      uint64_t v114 = v139;
      sub_10001DC4C((uint64_t)v147, v139, type metadata accessor for BeaconEstimatedLocation);
      uint64_t v115 = v154;
      uint64_t v116 = v140;
      uint64_t v117 = v149;
      (*(void (**)(char *, uint64_t, uint64_t))(v154 + 16))(v140, v148, v149);
      swift_errorRetain(v40);
      uint64_t v118 = swift_errorRetain(v40);
      uint64_t v119 = (os_log_s *)Logger.logObject.getter(v118);
      os_log_type_t v120 = static os_log_type_t.error.getter(v119);
      int v121 = v120;
      if (os_log_type_enabled(v119, v120))
      {
        uint64_t v122 = swift_slowAlloc(62LL, -1LL);
        unint64_t v150 = v26;
        os_log_t v147 = v119;
        uint64_t v123 = v122;
        uint64_t v124 = swift_slowAlloc(128LL, -1LL);
        uint64_t v148 = v124;
        *(_DWORD *)uint64_t v123 = 141559299;
        uint64_t v155 = 1752392040LL;
        v156[0] = v124;
        os_log_t v151 = (char *)v41;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v123 + 4, v123 + 12);
        *(_WORD *)(v123 + 12) = 2081;
        uint64_t v152 = v91;
        LODWORD(v145) = v121;
        uint64_t v125 = v114;
        uint64_t v126 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v127 = dispatch thunk of CustomStringConvertible.description.getter(v117, v126);
        uint64_t v155 = sub_1003F11D4(v127, v128, v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v123 + 14, v123 + 22);
        swift_bridgeObjectRelease();
        sub_100018C68(v125, type metadata accessor for BeaconEstimatedLocation);
        *(_WORD *)(v123 + 22) = 2160;
        uint64_t v155 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v123 + 24, v123 + 32);
        *(_WORD *)(v123 + 32) = 2081;
        uint64_t v129 = dispatch thunk of CustomStringConvertible.description.getter(v117, v126);
        uint64_t v155 = sub_1003F11D4(v129, v130, v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v123 + 34, v123 + 42);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v115 + 8))(v116, v117);
        *(_WORD *)(v123 + 42) = 2082;
        uint64_t v155 = (uint64_t)v40;
        swift_errorRetain(v40);
        uint64_t v131 = String.init<A>(describing:)(&v155, v151);
        uint64_t v155 = sub_1003F11D4(v131, v132, v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v123 + 44, v123 + 52);
        swift_bridgeObjectRelease();
        swift_errorRelease(v40);
        swift_errorRelease(v40);
        *(_WORD *)(v123 + 52) = 2080;
        uint64_t v133 = sub_100167394(v143);
        uint64_t v155 = sub_1003F11D4(v133, v134, v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v123 + 54, v123 + 62);
        swift_bridgeObjectRelease();
        os_log_t v135 = v147;
        _os_log_impl( (void *)&_mh_execute_header,  v147,  (os_log_type_t)v145,  "Failed to save LocationID: %{private,mask.hash}s for Beacon: %{private,mask.hash}s: %{public}s with source: %s.",  (uint8_t *)v123,  0x3Eu);
        uint64_t v136 = v148;
        swift_arrayDestroy(v148, 4LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v136, -1LL, -1LL);
        swift_slowDealloc(v123, -1LL, -1LL);

        goto LABEL_14;
      }

      swift_errorRelease(v40);
      sub_100018C68(v114, type metadata accessor for BeaconEstimatedLocation);
      (*(void (**)(char *, uint64_t))(v115 + 8))(v116, v117);
      swift_errorRelease(v40);
      swift_errorRelease(v40);

      uint64_t v137 = *(void (**)(char *, uint64_t))(v153 + 8);
    }

    else
    {
      os_log_t v151 = (char *)v41;
      uint64_t v89 = v37 + *(int *)(type metadata accessor for LocationFetcher(0LL) + 32);
      uint64_t v26 = v32;
      uint64_t v90 = v32;
      uint64_t v91 = v22;
      (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v90, v89, v22);
      sub_10001DC4C((uint64_t)v147, v38, type metadata accessor for BeaconEstimatedLocation);
      uint64_t v92 = v154;
      uint64_t v93 = v39;
      uint64_t v94 = v149;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v154 + 16))(v39, v148, v149);
      swift_errorRetain(v40);
      uint64_t v95 = swift_errorRetain(v40);
      uint64_t v96 = (os_log_s *)Logger.logObject.getter(v95);
      os_log_type_t v97 = static os_log_type_t.error.getter(v96);
      int v98 = v97;
      if (os_log_type_enabled(v96, v97))
      {
        uint64_t v99 = swift_slowAlloc(62LL, -1LL);
        LODWORD(v147) = v98;
        uint64_t v100 = v99;
        uint64_t v101 = swift_slowAlloc(128LL, -1LL);
        uint64_t v148 = v101;
        *(_DWORD *)uint64_t v100 = 141559299;
        uint64_t v155 = 1752392040LL;
        v156[0] = v101;
        uint64_t v153 = v23;
        unint64_t v150 = v26;
        os_log_t v145 = v96;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v100 + 4, v100 + 12);
        uint64_t v152 = v91;
        *(_WORD *)(v100 + 12) = 2081;
        uint64_t v102 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v103 = dispatch thunk of CustomStringConvertible.description.getter(v94, v102);
        uint64_t v155 = sub_1003F11D4(v103, v104, v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v100 + 14, v100 + 22);
        swift_bridgeObjectRelease();
        sub_100018C68(v38, type metadata accessor for BeaconEstimatedLocation);
        *(_WORD *)(v100 + 22) = 2160;
        uint64_t v155 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v100 + 24, v100 + 32);
        *(_WORD *)(v100 + 32) = 2081;
        uint64_t v105 = dispatch thunk of CustomStringConvertible.description.getter(v94, v102);
        uint64_t v155 = sub_1003F11D4(v105, v106, v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v100 + 34, v100 + 42);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v93, v94);
        *(_WORD *)(v100 + 42) = 2082;
        uint64_t v155 = (uint64_t)v40;
        swift_errorRetain(v40);
        uint64_t v107 = String.init<A>(describing:)(&v155, v151);
        uint64_t v155 = sub_1003F11D4(v107, v108, v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v100 + 44, v100 + 52);
        swift_bridgeObjectRelease();
        swift_errorRelease(v40);
        swift_errorRelease(v40);
        *(_WORD *)(v100 + 52) = 2080;
        uint64_t v109 = sub_100167394(v143);
        uint64_t v155 = sub_1003F11D4(v109, v110, v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v100 + 54, v100 + 62);
        swift_bridgeObjectRelease();
        os_log_t v111 = v145;
        _os_log_impl( (void *)&_mh_execute_header,  v145,  (os_log_type_t)v147,  "Failed to save LocationID: %{private,mask.hash}s for Beacon: %{private,mask.hash}s: %{public}s with source: %s.",  (uint8_t *)v100,  0x3Eu);
        uint64_t v112 = v148;
        swift_arrayDestroy(v148, 4LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v112, -1LL, -1LL);
        swift_slowDealloc(v100, -1LL, -1LL);

LABEL_14:
        swift_errorRelease(v40);
        (*(void (**)(char *, uint64_t))(v153 + 8))(v150, v152);
LABEL_19:
        uint64_t v113 = v146;
        goto LABEL_20;
      }

      swift_errorRelease(v40);
      sub_100018C68(v38, type metadata accessor for BeaconEstimatedLocation);
      (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v93, v94);
      swift_errorRelease(v40);
      swift_errorRelease(v40);

      uint64_t v137 = *(void (**)(char *, uint64_t))(v23 + 8);
    }

    v137(v26, v91);
    goto LABEL_19;
  }

  uint64_t v144 = v36;
  uint64_t v68 = type metadata accessor for LocationFetcher(0LL);
  os_log_t v69 = v145;
  (*(void (**)(os_log_t, uint64_t, uint64_t))(v23 + 16))(v145, v152 + *(int *)(v68 + 32), v22);
  sub_10001DC4C((uint64_t)v147, (uint64_t)v150, type metadata accessor for BeaconEstimatedLocation);
  uint64_t v70 = v154;
  uint64_t v71 = v149;
  uint64_t v72 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v154 + 16))(v151, v148, v149);
  unint64_t v73 = (os_log_s *)Logger.logObject.getter(v72);
  os_log_type_t v74 = static os_log_type_t.default.getter(v73);
  int v75 = v74;
  if (os_log_type_enabled(v73, v74))
  {
    uint64_t v76 = swift_slowAlloc(52LL, -1LL);
    uint64_t v77 = swift_slowAlloc(96LL, -1LL);
    uint64_t v148 = v77;
    *(_DWORD *)uint64_t v76 = 141559043;
    uint64_t v155 = 1752392040LL;
    v156[0] = v77;
    uint64_t v153 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v76 + 4, v76 + 12);
    *(_WORD *)(v76 + 12) = 2081;
    uint64_t v152 = v22;
    uint64_t v78 = v71;
    uint64_t v79 = (uint64_t)v150;
    LODWORD(v147) = v75;
    uint64_t v80 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v81 = dispatch thunk of CustomStringConvertible.description.getter(v78, v80);
    uint64_t v155 = sub_1003F11D4(v81, v82, v156);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v76 + 14, v76 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68(v79, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v76 + 22) = 2160;
    uint64_t v155 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v76 + 24, v76 + 32);
    *(_WORD *)(v76 + 32) = 2081;
    uint64_t v83 = (uint64_t)v151;
    uint64_t v84 = dispatch thunk of CustomStringConvertible.description.getter(v78, v80);
    uint64_t v155 = sub_1003F11D4(v84, v85, v156);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v76 + 34, v76 + 42);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v83, v78);
    *(_WORD *)(v76 + 42) = 2080;
    uint64_t v86 = sub_100167394(v143);
    uint64_t v155 = sub_1003F11D4(v86, v87, v156);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v76 + 44, v76 + 52);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v73,  (os_log_type_t)v147,  "Saved LocationID: %{private,mask.hash}s for Beacon: %{private,mask.hash}s with source: %s.",  (uint8_t *)v76,  0x34u);
    uint64_t v88 = v148;
    swift_arrayDestroy(v148, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v88, -1LL, -1LL);
    swift_slowDealloc(v76, -1LL, -1LL);

    (*(void (**)(os_log_t, uint64_t))(v153 + 8))(v69, v152);
  }

  else
  {
    sub_100018C68((uint64_t)v150, type metadata accessor for BeaconEstimatedLocation);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v151, v71);

    (*(void (**)(os_log_t, uint64_t))(v23 + 8))(v69, v22);
  }

  uint64_t v113 = v146;
  sub_100015794((uint64_t)v144, &qword_1009A6628);
LABEL_20:
  dispatch_group_leave(v113);
}

uint64_t sub_100235690(uint64_t a1, uint64_t a2)
{
  uint64_t v159 = a2;
  uint64_t v150 = a1;
  uint64_t v161 = type metadata accessor for LocationFetcher(0LL);
  uint64_t v146 = *(void *)(v161 - 8);
  __chkstk_darwin(v161);
  uint64_t v147 = v3;
  uint64_t v149 = (uint64_t)v130 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v163 = type metadata accessor for UUID(0LL);
  uint64_t v157 = *(void *)(v163 - 8);
  uint64_t v4 = __chkstk_darwin(v163);
  unint64_t v156 = (char *)v130 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v148 = v5;
  __chkstk_darwin(v4);
  os_log_t v135 = (char *)v130 - v6;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v130 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v138 = (char *)v130 - v13;
  __chkstk_darwin(v12);
  unint64_t v141 = (char *)v130 - v14;
  uint64_t v139 = type metadata accessor for BeaconStatus(0LL);
  __chkstk_darwin(v139);
  unint64_t v140 = (char *)v130 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v152 = type metadata accessor for RawSearchResult(0LL);
  uint64_t v144 = *(void *)(v152 - 8);
  uint64_t v16 = __chkstk_darwin(v152);
  uint64_t v154 = (uint64_t)v130 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v145 = v17;
  __chkstk_darwin(v16);
  uint64_t v137 = (char *)v130 - v18;
  uint64_t v19 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v19);
  uint64_t v136 = (uint64_t)v130 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v164 = type metadata accessor for Date(0LL);
  uint64_t v155 = *(void *)(v164 - 8);
  uint64_t v21 = __chkstk_darwin(v164);
  uint64_t v153 = (char *)v130 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v143 = v22;
  __chkstk_darwin(v21);
  uint64_t v160 = (char *)v130 - v23;
  uint64_t v24 = sub_100004AEC(&qword_1009AC230);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)v130 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v134 = (uint64_t)v130 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v158 = (uint64_t)v130 - v32;
  uint64_t v142 = v33;
  __chkstk_darwin(v31);
  uint64_t v162 = (uint64_t)v130 - v34;
  uint64_t v36 = *((void *)v2 + 6);
  uint64_t v35 = *((void *)v2 + 7);
  sub_100012ED8((void *)v2 + 3, v36);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v35 + 24))(v36, v35) & 1) != 0)
  {
    uint64_t v37 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 16))(v11, &v2[*(int *)(v161 + 32)], v7);
    uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.info.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "Not storing beacon status that's already from disk.",  v40,  2u);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }

  else
  {
    os_log_t v151 = (uint64_t *)v2;
    uint64_t v132 = v8;
    uint64_t v133 = v7;
    uint64_t v42 = v152;
    uint64_t v43 = (char *)v159;
    sub_10001581C(v159 + *(int *)(v152 + 44), (uint64_t)v26, &qword_1009AC230);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1LL, v27) == 1)
    {
      sub_100015794((uint64_t)v26, &qword_1009AC230);
      uint64_t v44 = v132;
      uint64_t v45 = v138;
      uint64_t v46 = v133;
      uint64_t v47 = (*(uint64_t (**)(char *, char *, uint64_t))(v132 + 16))( v138,  (char *)v151 + *(int *)(v161 + 32),  v133);
      uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
      os_log_type_t v49 = static os_log_type_t.info.getter(v48);
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v50 = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "Not storing beacon status that's not reconciled.", v50, 2u);
        swift_slowDealloc(v50, -1LL, -1LL);
      }

      return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v45, v46);
    }

    else
    {
      uint64_t v51 = (char *)v27;
      uint64_t v131 = v28;
      uint64_t v52 = v162;
      sub_10002218C((uint64_t)v26, v162, type metadata accessor for BeaconKeyManager.IndexInformation);
      uint64_t v53 = v136;
      sub_10001581C((uint64_t)&v43[*(int *)(v42 + 40)], v136, (uint64_t *)&unk_10099D720);
      int v54 = v137;
      sub_10001DC4C((uint64_t)v43, (uint64_t)v137, type metadata accessor for RawSearchResult);
      uint64_t v55 = v155;
      uint64_t v56 = v164;
      int v57 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v155 + 48))(v53, 1LL, v164);
      uint64_t v58 = v151;
      if (v57 == 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v160, &v54[*(int *)(v42 + 20)], v56);
        sub_100018C68((uint64_t)v54, type metadata accessor for RawSearchResult);
        sub_100015794(v53, (uint64_t *)&unk_10099D720);
      }

      else
      {
        sub_100018C68((uint64_t)v54, type metadata accessor for RawSearchResult);
        (*(void (**)(char *, uint64_t, uint64_t))(v55 + 32))(v160, v53, v56);
      }

      uint64_t v136 = *v58;
      char v59 = *v43;
      uint64_t v60 = (void *)(v52 + *((int *)v51 + 5));
      uint64_t v61 = v60[3];
      uint64_t v62 = v60[4];
      sub_100012ED8(v60, v61);
      LOBYTE(v62) = sub_1005F5498(v61, v62);
      uint64_t v138 = v51;
      uint64_t v64 = v60[3];
      uint64_t v63 = v60[4];
      sub_100012ED8(v60, v64);
      dispatch thunk of RawRepresentable.rawValue.getter(v171, v64, *(void *)(v63 + 56));
      uint64_t v65 = *(void *)&v171[0];
      uint64_t v152 = *(void *)(v157 + 16);
      uint64_t v66 = (uint64_t)v140;
      uint64_t v67 = v150;
      uint64_t v68 = v163;
      ((void (*)(char *, uint64_t, uint64_t))v152)(v140, v150, v163);
      os_log_t v69 = (int *)v139;
      *(_BYTE *)(v66 + *(int *)(v139 + 20)) = v59;
      uint64_t v70 = v66 + v69[6];
      uint64_t v71 = *(char **)(v55 + 16);
      uint64_t v72 = v160;
      uint64_t v137 = v71;
      ((void (*)(uint64_t, char *, uint64_t))v71)(v70, v160, v164);
      unint64_t v73 = (void *)(v66 + v69[7]);
      *unint64_t v73 = v62;
      v73[1] = v65;
      *(_BYTE *)(v66 + v69[8]) = 1;
      *(void *)(v66 + v69[9]) = 0LL;
      uint64_t v74 = type metadata accessor for Transaction(0LL);
      __chkstk_darwin(v74);
      v130[-6] = v136;
      v130[-5] = v66;
      uint64_t v75 = v67;
      v130[-4] = v70;
      v130[-3] = v66;
      LOBYTE(v130[-2]) = 3;
      BYTE1(v130[-2]) = v59;
      uint64_t v76 = (char *)&type metadata for () + 8;
      static Transaction.named<A>(_:with:)( "searchpartyd.beaconstore.updateType18Status",  43LL,  2LL,  sub_100245E00,  &v130[-8]);
      uint64_t v77 = v151;
      sub_100018C68(v66, type metadata accessor for BeaconStatus);
      uint64_t v78 = *v77;
      uint64_t v79 = *(void *)(*v77 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
      uint64_t v136 = type metadata accessor for BeaconKeyManager(0LL);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10014F014, v78, v79, (char *)&type metadata for () + 8, v136);
      v130[1] = 0LL;
      uint64_t v80 = (void (*)(char *, uint64_t, uint64_t))v152;
      uint64_t v81 = v158;
      ((void (*)(uint64_t, uint64_t, uint64_t))v152)(v158, v75, v68);
      sub_100013044((uint64_t)v60, v81 + *((int *)v138 + 5));
      sub_10079C86C(v81, 0, &v167);
      sub_100018C68(v81, type metadata accessor for BeaconKeyManager.IndexInformation);
      swift_release();
      sub_100015750((uint64_t)&v167, (uint64_t)&v168, &qword_1009A6630);
      if (*((void *)&v169 + 1) >> 60 == 15LL)
      {
        unint64_t v140 = 0LL;
        uint64_t v139 = 0x3000000000000000LL;
        uint64_t v82 = v157;
        uint64_t v83 = v159;
        uint64_t v84 = v163;
      }

      else
      {
        uint64_t v85 = v157;
        v130[0] = (char *)&type metadata for () + 8;
        v171[0] = v168;
        v171[1] = v169;
        v171[2] = v170;
        uint64_t v86 = sub_1004DA048();
        sub_100178C64(6LL, v86, v87);
        unint64_t v140 = (char *)v166[0];
        uint64_t v139 = v166[1] | 0x2000000000000000LL;
        uint64_t v88 = (char *)v77 + *(int *)(v161 + 32);
        uint64_t v89 = v132;
        uint64_t v90 = v133;
        (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v141, v88, v133);
        uint64_t v91 = v135;
        v80(v135, v75, v163);
        uint64_t v92 = v134;
        uint64_t v93 = sub_10001DC4C(v162, v134, type metadata accessor for BeaconKeyManager.IndexInformation);
        uint64_t v94 = (os_log_s *)Logger.logObject.getter(v93);
        os_log_type_t v95 = static os_log_type_t.info.getter(v94);
        int v96 = v95;
        if (os_log_type_enabled(v94, v95))
        {
          uint64_t v97 = swift_slowAlloc(32LL, -1LL);
          uint64_t v98 = swift_slowAlloc(64LL, -1LL);
          v166[0] = v98;
          *(_DWORD *)uint64_t v97 = 141558531;
          uint64_t v165 = 1752392040LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v97 + 4, v97 + 12);
          *(_WORD *)(v97 + 12) = 2081;
          uint64_t v99 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          LODWORD(v161) = v96;
          uint64_t v100 = v163;
          uint64_t v101 = dispatch thunk of CustomStringConvertible.description.getter(v163, v99);
          uint64_t v165 = sub_1003F11D4(v101, v102, v166);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v97 + 14, v97 + 22);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v85 + 8))(v91, v100);
          *(_WORD *)(v97 + 22) = 2082;
          uint64_t v103 = (void *)(v92 + *((int *)v138 + 5));
          uint64_t v105 = v103[3];
          uint64_t v104 = v103[4];
          sub_100012ED8(v103, v105);
          uint64_t v106 = v105;
          uint64_t v84 = v163;
          uint64_t v107 = dispatch thunk of CustomStringConvertible.description.getter(v106, *(void *)(v104 + 16));
          uint64_t v165 = sub_1003F11D4(v107, v108, v166);
          uint64_t v72 = v160;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v97 + 24, v97 + 32);
          uint64_t v82 = v85;
          swift_bridgeObjectRelease();
          sub_100018C68(v92, type metadata accessor for BeaconKeyManager.IndexInformation);
          _os_log_impl( (void *)&_mh_execute_header,  v94,  (os_log_type_t)v161,  "Found advertisement key beacon for %{private,mask.hash}s,index %{public}s.",  (uint8_t *)v97,  0x20u);
          swift_arrayDestroy(v98, 2LL, (char *)&type metadata for Any + 8);
          uint64_t v109 = v98;
          uint64_t v75 = v150;
          swift_slowDealloc(v109, -1LL, -1LL);
          swift_slowDealloc(v97, -1LL, -1LL);
          sub_100246250((uint64_t)&v167);

          (*(void (**)(char *, uint64_t))(v132 + 8))(v141, v133);
        }

        else
        {
          unint64_t v110 = v91;
          uint64_t v84 = v163;
          (*(void (**)(char *, uint64_t))(v85 + 8))(v110, v163);
          sub_100018C68(v92, type metadata accessor for BeaconKeyManager.IndexInformation);
          sub_100246250((uint64_t)&v167);

          (*(void (**)(char *, uint64_t))(v89 + 8))(v141, v90);
          uint64_t v82 = v85;
        }

        uint64_t v77 = v151;
        uint64_t v83 = v159;
        uint64_t v76 = (char *)v130[0];
      }

      OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_10014F014,  *v77,  *(void *)(*v77 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock),  v76,  v136);
      uint64_t v161 = v166[0];
      uint64_t v159 = type metadata accessor for Transaction(0LL);
      uint64_t v111 = v149;
      sub_10001DC4C((uint64_t)v77, v149, type metadata accessor for LocationFetcher);
      sub_10001DC4C(v83, v154, type metadata accessor for RawSearchResult);
      ((void (*)(char *, char *, uint64_t))v137)(v153, v72, v164);
      ((void (*)(char *, uint64_t, uint64_t))v152)(v156, v75, v84);
      sub_10001DC4C(v162, v158, type metadata accessor for BeaconKeyManager.IndexInformation);
      uint64_t v112 = *(unsigned __int8 *)(v146 + 80);
      uint64_t v113 = (v112 + 16) & ~v112;
      unint64_t v114 = (v147 + v113 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v115 = *(unsigned __int8 *)(v144 + 80);
      uint64_t v116 = (v115 + v114 + 16) & ~v115;
      uint64_t v117 = v155;
      uint64_t v118 = *(unsigned __int8 *)(v155 + 80);
      uint64_t v119 = (v145 + v118 + v116) & ~v118;
      uint64_t v120 = *(unsigned __int8 *)(v82 + 80);
      uint64_t v121 = (v143 + v120 + v119) & ~v120;
      uint64_t v122 = *(unsigned __int8 *)(v131 + 80);
      uint64_t v123 = v82;
      uint64_t v124 = (v148 + v122 + v121) & ~v122;
      uint64_t v125 = swift_allocObject(&unk_10094AA38, v124 + v142, v112 | v115 | v118 | v120 | v122 | 7);
      sub_10002218C(v111, v125 + v113, type metadata accessor for LocationFetcher);
      uint64_t v126 = (void *)(v125 + v114);
      uint64_t v127 = (uint64_t)v140;
      uint64_t v128 = v139;
      *uint64_t v126 = v140;
      v126[1] = v128;
      sub_10002218C(v154, v125 + v116, type metadata accessor for RawSearchResult);
      uint64_t v129 = v164;
      (*(void (**)(uint64_t, char *, uint64_t))(v117 + 32))(v125 + v119, v153, v164);
      (*(void (**)(uint64_t, char *, uint64_t))(v123 + 32))(v125 + v121, v156, v163);
      sub_10002218C(v158, v125 + v124, type metadata accessor for BeaconKeyManager.IndexInformation);
      sub_100246228(v127, v128);
      static Transaction.asyncTask(name:block:)("UpdateObservationFromACSN", 25LL, 2LL, &unk_1009A6640, v125);
      swift_release();
      swift_release();
      sub_10024623C(v127, v128);
      (*(void (**)(char *, uint64_t))(v117 + 8))(v160, v129);
      return sub_100018C68(v162, type metadata accessor for BeaconKeyManager.IndexInformation);
    }
  }

uint64_t sub_100236634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[16] = a2;
  v3[17] = a3;
  v3[15] = a1;
  uint64_t v4 = type metadata accessor for Date(0LL);
  v3[18] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[19] = v5;
  v3[20] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  v3[21] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[22] = v7;
  v3[23] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009AE460);
  _BYTE v3[24] = v8;
  v3[25] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Logger(0LL);
  v3[26] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[27] = v10;
  v3[28] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100236710, 0LL, 0LL);
}

uint64_t sub_100236710()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C878 + dword_10099C878);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C87C);
    *(void *)(v0 + 232) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1002367FC;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1002367FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 232LL);
  *(void *)(*(void *)v1 + 24swift_beginAccess(&static AirPodsSWSendPairingStatusCommandPayload.expectedLength, v1, 0LL, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100236858, 0LL, 0LL);
}

uint64_t sub_100236858()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 240))
  {
    uint64_t v2 = *(void **)(v0 + 136);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = v2[3];
    uint64_t v4 = v2[4];
    sub_100012ED8(v2, v3);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v4 + 8) + 8LL) + 32LL))(v3);
    uint64_t v5 = v2[3];
    uint64_t v6 = v2[4];
    sub_100012ED8(v2, v5);
    (*(void (**)(uint64_t, uint64_t))(v6 + 184))(v5, v6);
    uint64_t v7 = v2[3];
    uint64_t v8 = v2[4];
    sub_100012ED8(v2, v7);
    char v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 112))(v7, v8);
    uint64_t v10 = (void *)swift_task_alloc(dword_1009BCE34);
    *(void *)(v0 + 248) = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_100236A74;
    return sub_1006D4FEC(*(void *)(v0 + 200), *(void *)(v0 + 184), *(void *)(v0 + 160), v9 & 1);
  }

  else
  {
    uint64_t v13 = *(void *)(v0 + 216);
    uint64_t v12 = *(void *)(v0 + 224);
    uint64_t v14 = *(void *)(v0 + 208);
    uint64_t v15 = *(void *)(v0 + 128);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v16 = type metadata accessor for LocationFetcher(0LL);
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v15 + *(int *)(v16 + 32), v14);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "No ObservationStoreService available!", v20, 2u);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    uint64_t v22 = *(void *)(v0 + 216);
    uint64_t v21 = *(void *)(v0 + 224);
    uint64_t v23 = *(void *)(v0 + 208);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    uint64_t v24 = *(void *)(v0 + 224);
    uint64_t v25 = *(void *)(v0 + 200);
    uint64_t v26 = *(void *)(v0 + 184);
    uint64_t v27 = *(void *)(v0 + 160);
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 152) + 56LL))( *(void *)(v0 + 120),  1LL,  1LL,  *(void *)(v0 + 144));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100236A74()
{
  uint64_t v2 = *(void *)(*(void *)v0 + 176LL);
  uint64_t v1 = *(void *)(*(void *)v0 + 184LL);
  uint64_t v4 = *(void *)(*(void *)v0 + 160LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 168LL);
  uint64_t v5 = *(void *)(*(void *)v0 + 144LL);
  uint64_t v6 = *(void *)(*(void *)v0 + 152LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 248LL));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_100236B04, 0LL, 0LL);
}

uint64_t sub_100236B04()
{
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v5 = *(void *)(v0 + 120);
  swift_release(*(void *)(v0 + 240));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v5, v1 + *(int *)(v2 + 36), v3);
  uint64_t v6 = *(void *)(v0 + 224);
  uint64_t v7 = *(void *)(v0 + 200);
  uint64_t v8 = *(void *)(v0 + 184);
  uint64_t v9 = *(void *)(v0 + 160);
  (*(void (**)(void, void, uint64_t, void))(*(void *)(v0 + 152) + 56LL))( *(void *)(v0 + 120),  0LL,  1LL,  *(void *)(v0 + 144));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100236BB0(uint64_t a1, uint64_t a2)
{
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0LL);
  uint64_t v6 = __chkstk_darwin(RequestBeacon);
  uint64_t v37 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v32 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v32 - v11;
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for LocationFetcher(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a2 + *(int *)(v17 + 32), v13);
  sub_10001DC4C(a1, (uint64_t)v12, type metadata accessor for FetchRequestBeacon);
  uint64_t v18 = sub_10001DC4C(a1, (uint64_t)v10, type metadata accessor for FetchRequestBeacon);
  os_log_type_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  int v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, (os_log_type_t)v20))
  {
    int v34 = v20;
    uint64_t v35 = v14;
    uint64_t v36 = v13;
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    uint64_t v33 = swift_slowAlloc(64LL, -1LL);
    uint64_t v40 = v33;
    *(_DWORD *)uint64_t v21 = 141558531;
    uint64_t v38 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v21 + 4, v21 + 12);
    *(_WORD *)(v21 + 12) = 2081;
    uint64_t v32 = v2;
    uint64_t v22 = type metadata accessor for UUID(0LL);
    uint64_t v23 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v22, v23);
    uint64_t v38 = sub_1003F11D4(v24, v25, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v21 + 14, v21 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v12, type metadata accessor for FetchRequestBeacon);
    *(_WORD *)(v21 + 22) = 2082;
    uint64_t v26 = v37;
    sub_10001DC4C((uint64_t)v10, v37, type metadata accessor for FetchRequestBeacon);
    uint64_t v27 = objc_autoreleasePoolPush();
    uint64_t v28 = v32;
    sub_1005FC998(v26, (unint64_t *)&v38);
    objc_autoreleasePoolPop(v27);
    if (v28)
    {
      __break(1u);
    }

    else
    {
      uint64_t v29 = v38;
      unint64_t v30 = v39;
      sub_100018C68(v37, type metadata accessor for FetchRequestBeacon);
      uint64_t v38 = sub_1003F11D4(v29, v30, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v21 + 24, v21 + 32);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v10, type metadata accessor for FetchRequestBeacon);
      _os_log_impl( (void *)&_mh_execute_header,  v19,  (os_log_type_t)v34,  "Fetching beacon %{private,mask.hash}s, %{public}s.",  (uint8_t *)v21,  0x20u);
      uint64_t v31 = v33;
      swift_arrayDestroy(v33, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v35 + 8))(v16, v36);
    }
  }

  else
  {
    sub_100018C68((uint64_t)v12, type metadata accessor for FetchRequestBeacon);
    sub_100018C68((uint64_t)v10, type metadata accessor for FetchRequestBeacon);

    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }

uint64_t sub_100236F5C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 176) = a7;
  *(void *)(v8 + 184) = a8;
  *(_BYTE *)(v8 + 1swift_weakDestroy(v0 + 16) = a6;
  *(void *)(v8 + 16sub_100032838(0, 7LL, 0) = a4;
  *(void *)(v8 + 168) = a5;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  *(void *)(v8 + 192) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 20sub_100032838(0, 7LL, 0) = v10;
  *(void *)(v8 + 208) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for JSONDecoder.DateDecodingStrategy(0LL);
  *(void *)(v8 + 2swift_weakDestroy(v0 + 16) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v8 + 224) = v12;
  *(void *)(v8 + 232) = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0LL);
  *(void *)(v8 + 24sub_100032838(0, 7LL, 0) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v8 + 248) = v14;
  *(void *)(v8 + 256) = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100237014, 0LL, 0LL);
}

uint64_t sub_100237014()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void **)(v0 + 168);
  uint64_t v3 = v2[6];
  uint64_t v4 = v2[7];
  sub_100012ED8(v2 + 3, v3);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v4 + 48);
  __n128 v6 = swift_bridgeObjectRetain(v1);
  uint64_t v7 = v5(v3, v4, v6);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = type metadata accessor for LocationFetcher(0LL);
  *(void *)(v0 + 264) = v12;
  uint64_t v13 = *(void *)((char *)v2 + *(int *)(v12 + 40));
  uint64_t v14 = unk_1009B6F5C;
  uint64_t v17 = (char *)&dword_1009B6F58 + dword_1009B6F58;
  swift_retain();
  uint64_t v15 = (void *)swift_task_alloc(v14);
  *(void *)(v0 + 272) = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_1002370FC;
  return ((uint64_t (*)(void, uint64_t, uint64_t, uint64_t, void, uint64_t))v17)( *(void *)(v0 + 160),  v7,  v9,  v11,  *(unsigned __int8 *)(v0 + 116),  v13);
}

uint64_t sub_1002370FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)v4;
  uint64_t v6 = *(void *)(*(void *)v4 + 272LL);
  v5[35] = a1;
  v5[36] = a2;
  v5[37] = a3;
  v5[38] = v3;
  swift_task_dealloc(v6);
  if (v3) {
    uint64_t v7 = sub_100237270;
  }
  else {
    uint64_t v7 = sub_10023716C;
  }
  return swift_task_switch(v7, 0LL, 0LL);
}

uint64_t sub_10023716C()
{
  uint64_t v1 = v0[36];
  unint64_t v2 = v0[37];
  uint64_t v3 = v0[35];
  v0[5] = &type metadata for FetchRequest;
  v0[6] = sub_100246DB0();
  v0[2] = v3;
  v0[3] = v1;
  v0[4] = v2;
  swift_bridgeObjectRetain(v3);
  sub_10001736C(v1, v2);
  uint64_t v4 = (void *)swift_task_alloc(dword_1009A4BF4);
  v0[39] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100237204;
  return sub_1001B5210(v0[32], (uint64_t)(v0 + 2));
}

uint64_t sub_100237204()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 312);
  *(void *)(*v1 + 32sub_100032838(0, 7LL, 0) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_100237C48;
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v2 + 16));
    uint64_t v4 = sub_100237484;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_100237270()
{
  uint64_t v1 = v0[38];
  v0[46] = v1;
  (*(void (**)(void, void, void))(v0[25] + 16LL))(v0[26], v0[21] + *(int *)(v0[33] + 32LL), v0[24]);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v5 = 138543362;
    swift_errorRetain(v1);
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    v0[15] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v0 + 16, v5 + 4, v5 + 12);
    *uint64_t v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fetch error: %{public}@.", v5, 0xCu);
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v6, 1LL, v8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v10 = v0[25];
  uint64_t v9 = v0[26];
  uint64_t v12 = v0[23];
  uint64_t v11 = v0[24];

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  uint64_t v13 = swift_allocObject(&unk_10094ACE0, 32LL, 7LL);
  v0[47] = v13;
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = v12;
  *(void *)(v13 + 24) = v1;
  swift_retain();
  swift_errorRetain(v1);
  uint64_t v14 = (void *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
  v0[48] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_100237A10;
  return unsafeBlocking<A>(_:)((char *)v0 + 114, sub_100246D80, v13, &type metadata for Bool);
}

uint64_t sub_100237484()
{
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 216);
  int v4 = *(unsigned __int8 *)(v0 + 116);
  uint64_t v5 = type metadata accessor for JSONDecoder(0LL);
  uint64_t v6 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  *(void *)(v0 + 328) = JSONDecoder.init()(v6);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))( v1,  enum case for JSONDecoder.DateDecodingStrategy.millisecondsSince1970(_:),  v3);
  uint64_t v7 = dispatch thunk of JSONDecoder.dateDecodingStrategy.setter(v1);
  uint64_t v8 = *(void *)(v0 + 320);
  if (v4 == 1)
  {
    uint64_t v9 = FMNServerInteractionController.FMNResponseFields.data.getter(v7);
    unint64_t v11 = v10;
    unint64_t v12 = sub_100246E54();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)( &type metadata for OwnedDeviceFetchResponse,  v9,  v11,  &type metadata for OwnedDeviceFetchResponse,  v12);
    if (!v8)
    {
      uint64_t v13 = v0 + 115;
      uint64_t v14 = *(void *)(v0 + 184);
      sub_100016F9C(v9, v11);
      uint64_t v15 = *(void *)(v0 + 136);
      uint64_t v16 = swift_allocObject(&unk_10094AD30, 32LL, 7LL);
      *(void *)(v0 + 336) = v16;
      *(void *)(v16 + swift_weakDestroy(v0 + 16) = v14;
      *(void *)(v16 + 24) = v15;
      uint64_t v17 = async function pointer to unsafeBlocking<A>(_:)[1];
      swift_retain();
      uint64_t v18 = (void *)swift_task_alloc(v17);
      *(void *)(v0 + 344) = v18;
      *uint64_t v18 = v0;
      v18[1] = sub_1002378C4;
      os_log_type_t v19 = sub_100246EEC;
LABEL_10:
      uint64_t v37 = v13;
      uint64_t v38 = v16;
      return unsafeBlocking<A>(_:)(v37, v19, v38, &type metadata for Bool);
    }
  }

  else
  {
    uint64_t v9 = FMNServerInteractionController.FMNResponseFields.data.getter(v7);
    unint64_t v11 = v20;
    unint64_t v21 = sub_100246DF4();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)( &type metadata for FetchResponse,  v9,  v11,  &type metadata for FetchResponse,  v21);
    if (!v8)
    {
      uint64_t v13 = v0 + 113;
      uint64_t v39 = *(void *)(v0 + 184);
      sub_100016F9C(v9, v11);
      uint64_t v40 = *(void *)(v0 + 104);
      char v41 = *(_BYTE *)(v0 + 112);
      uint64_t v16 = swift_allocObject(&unk_10094AD08, 33LL, 7LL);
      *(void *)(v0 + 352) = v16;
      *(void *)(v16 + swift_weakDestroy(v0 + 16) = v39;
      *(void *)(v16 + 24) = v40;
      *(_BYTE *)(v16 + 32) = v41;
      uint64_t v42 = async function pointer to unsafeBlocking<A>(_:)[1];
      swift_retain();
      uint64_t v43 = (void *)swift_task_alloc(v42);
      *(void *)(v0 + 36sub_100032838(0, 7LL, 0) = v43;
      *uint64_t v43 = v0;
      v43[1] = sub_1002379B4;
      os_log_type_t v19 = sub_100246E48;
      goto LABEL_10;
    }
  }

  uint64_t v23 = *(void *)(v0 + 288);
  unint64_t v22 = *(void *)(v0 + 296);
  (*(void (**)(void, void))(*(void *)(v0 + 248) + 8LL))(*(void *)(v0 + 256), *(void *)(v0 + 240));
  swift_bridgeObjectRelease();
  sub_100016F9C(v23, v22);
  sub_100016F9C(v9, v11);
  swift_release();
  *(void *)(v0 + 368) = v8;
  (*(void (**)(void, void, void))(*(void *)(v0 + 200) + 16LL))( *(void *)(v0 + 208),  *(void *)(v0 + 168) + *(int *)(*(void *)(v0 + 264) + 32LL),  *(void *)(v0 + 192));
  swift_errorRetain(v8);
  uint64_t v24 = swift_errorRetain(v8);
  unint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v28 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v27 = 138543362;
    swift_errorRetain(v8);
    uint64_t v29 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(void *)(v0 + 12sub_100032838(0, 7LL, 0) = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v27 + 4, v27 + 12);
    *uint64_t v28 = v29;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Fetch error: %{public}@.", v27, 0xCu);
    uint64_t v30 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v28, 1LL, v30);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v8);
    swift_errorRelease(v8);
  }

  uint64_t v32 = *(void *)(v0 + 200);
  uint64_t v31 = *(void *)(v0 + 208);
  uint64_t v34 = *(void *)(v0 + 184);
  uint64_t v33 = *(void *)(v0 + 192);

  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
  uint64_t v35 = swift_allocObject(&unk_10094ACE0, 32LL, 7LL);
  *(void *)(v0 + 376) = v35;
  *(void *)(v35 + swift_weakDestroy(v0 + 16) = v34;
  *(void *)(v35 + 24) = v8;
  swift_retain();
  swift_errorRetain(v8);
  uint64_t v36 = (void *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
  *(void *)(v0 + 384) = v36;
  *uint64_t v36 = v0;
  v36[1] = sub_100237A10;
  os_log_type_t v19 = sub_100246D80;
  uint64_t v37 = v0 + 114;
  uint64_t v38 = v35;
  return unsafeBlocking<A>(_:)(v37, v19, v38, &type metadata for Bool);
}

uint64_t sub_1002378C4()
{
  return swift_task_switch(sub_100237920, 0LL, 0LL);
}

uint64_t sub_100237920()
{
  uint64_t v1 = *(void *)(v0 + 288);
  unint64_t v2 = *(void *)(v0 + 296);
  uint64_t v4 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v5 = *(void *)(v0 + 240);
  swift_release();
  swift_bridgeObjectRelease();
  sub_100016F9C(v1, v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v0 + 232);
  uint64_t v7 = *(void *)(v0 + 208);
  swift_task_dealloc(*(void *)(v0 + 256));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002379B4()
{
  return swift_task_switch(sub_100237920, 0LL, 0LL);
}

uint64_t sub_100237A10()
{
  return swift_task_switch(sub_100237A6C, 0LL, 0LL);
}

uint64_t sub_100237A6C()
{
  if ((*(_BYTE *)(v0 + 116) & 1) != 0)
  {
    uint64_t v1 = *(void *)(v0 + 368);
    unint64_t v2 = *(void **)(v0 + 168);
    uint64_t v3 = v2[6];
    uint64_t v4 = v2[7];
    sub_100012ED8(v2 + 3, v3);
    char v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 48))(v3, v4);
    uint64_t v8 = sub_1005FBCF4(v5, v6, v7);
    uint64_t v10 = v9;
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(40LL);
    swift_bridgeObjectRelease();
    swift_getErrorValue(v1, v0 + 144, v0 + 56);
    *(void *)(v0 + 128) = Error.code.getter(*(void *)(v0 + 64), *(void *)(v0 + 72));
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = 0x6F44726F72726520LL;
    v12._object = (void *)0xED00003A6E69616DLL;
    String.append(_:)(v12);
    swift_getErrorValue(v1, v0 + 152, v0 + 80);
    v13._countAndFlagsBits = Error.domain.getter(*(void *)(v0 + 88), *(void *)(v0 + 96));
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    sub_10071EFE0(v8, v10, 0xD000000000000017LL, 0x800000010085AA50LL);
    swift_errorRelease(v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 368));
  }

  uint64_t v14 = *(void *)(v0 + 232);
  uint64_t v15 = *(void *)(v0 + 208);
  swift_task_dealloc(*(void *)(v0 + 256));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100237C48()
{
  uint64_t v2 = v0[36];
  unint64_t v1 = v0[37];
  swift_bridgeObjectRelease();
  sub_100016F9C(v2, v1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  uint64_t v3 = v0[40];
  v0[46] = v3;
  (*(void (**)(void, void, void))(v0[25] + 16LL))(v0[26], v0[21] + *(int *)(v0[33] + 32LL), v0[24]);
  swift_errorRetain(v3);
  uint64_t v4 = swift_errorRetain(v3);
  char v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v7 = 138543362;
    swift_errorRetain(v3);
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError(v3);
    v0[15] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v0 + 16, v7 + 4, v7 + 12);
    *uint64_t v8 = v9;
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Fetch error: %{public}@.", v7, 0xCu);
    uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v8, 1LL, v10);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v3);
    swift_errorRelease(v3);
  }

  uint64_t v12 = v0[25];
  uint64_t v11 = v0[26];
  uint64_t v14 = v0[23];
  uint64_t v13 = v0[24];

  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  uint64_t v15 = swift_allocObject(&unk_10094ACE0, 32LL, 7LL);
  v0[47] = v15;
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = v14;
  *(void *)(v15 + 24) = v3;
  swift_retain();
  swift_errorRetain(v3);
  uint64_t v16 = (void *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
  v0[48] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_100237A10;
  return unsafeBlocking<A>(_:)((char *)v0 + 114, sub_100246D80, v15, &type metadata for Bool);
}

uint64_t sub_100237E80@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t v6 = a1;
  swift_bridgeObjectRetain(a1);
  char v4 = Future.finish(result:)(&v6);
  uint64_t result = swift_bridgeObjectRelease(a1);
  *a2 = v4 & 1;
  return result;
}

uint64_t sub_100237EDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[28] = a6;
  v7[29] = a7;
  v7[26] = a4;
  v7[27] = a5;
  _BYTE v7[24] = a2;
  v7[25] = a3;
  v7[23] = a1;
  uint64_t v8 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  v7[30] = v8;
  unint64_t v9 = (*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[31] = swift_task_alloc(v9);
  v7[32] = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  v7[33] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v7[34] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[35] = swift_task_alloc(v12);
  v7[36] = swift_task_alloc(v12);
  unint64_t v13 = (*(void *)(*(void *)(type metadata accessor for RawSearchResult(0LL) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[37] = swift_task_alloc(v13);
  v7[38] = swift_task_alloc(v13);
  uint64_t v14 = sub_100004AEC(&qword_1009AA730);
  v7[39] = swift_task_alloc((*(void *)(*(void *)(v14 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_10099E770);
  v7[40] = swift_task_alloc((*(void *)(*(void *)(v15 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for Date(0LL);
  v7[41] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v7[42] = v17;
  v7[43] = swift_task_alloc((*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for ObservedAdvertisement(0LL);
  v7[44] = v18;
  v7[45] = swift_task_alloc((*(void *)(*(void *)(v18 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for Logger(0LL);
  v7[46] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v7[47] = v20;
  unint64_t v21 = (*(void *)(v20 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[48] = swift_task_alloc(v21);
  v7[49] = swift_task_alloc(v21);
  v7[50] = swift_task_alloc(v21);
  return swift_task_switch(sub_100238094, 0LL, 0LL);
}

uint64_t sub_100238094()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C878 + dword_10099C878);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C87C);
    *(void *)(v0 + 408) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100238180;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100238180(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 408LL);
  *(void *)(*(void *)v1 + 41sub_1001F5B54(*(void (**)(void *))(v0 + 16), *(void *)(v0 + 24), 6LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002381DC, 0LL, 0LL);
}

uint64_t sub_1002381DC()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 416))
  {
    uint64_t v2 = *(void *)(v0 + 200);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if ((~v2 & 0x3000000000000000LL) != 0)
    {
      uint64_t v5 = *(void *)(v0 + 192);
      uint64_t v4 = *(void *)(v0 + 200);
      uint64_t v3 = v5;
    }

    else
    {
      sub_1004AB1A4();
      uint64_t v3 = v58;
      uint64_t v4 = v59 | 0x2000000000000000LL;
      uint64_t v5 = *(void *)(v0 + 192);
    }

    uint64_t v48 = *(void *)(v0 + 200);
    *(void *)(v0 + 424) = v3;
    *(void *)(v0 + 432) = v4;
    uint64_t v28 = *(int **)(v0 + 352);
    uint64_t v29 = *(void *)(v0 + 360);
    uint64_t v30 = *(void *)(v0 + 320);
    uint64_t v54 = *(void *)(v0 + 328);
    uint64_t v56 = *(void *)(v0 + 344);
    uint64_t v51 = v30;
    uint64_t v52 = *(void *)(v0 + 336);
    uint64_t v31 = *(void *)(v0 + 312);
    uint64_t v49 = *(void *)(v0 + 264);
    uint64_t v33 = *(void *)(v0 + 232);
    uint64_t v32 = *(void *)(v0 + 240);
    uint64_t v46 = *(void *)(v0 + 224);
    uint64_t v47 = *(void *)(v0 + 272);
    char v50 = **(_BYTE **)(v0 + 208);
    uint64_t v45 = v3;
    (*(void (**)(void))(v52 + 16))();
    uint64_t v34 = type metadata accessor for ObservedAdvertisement.Location(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56LL))(v30, 1LL, 1LL, v34);
    uint64_t v35 = (void *)(v33 + *(int *)(v32 + 20));
    uint64_t v37 = v35[3];
    uint64_t v36 = v35[4];
    sub_100012ED8(v35, v37);
    sub_100246228(v5, v48);
    sub_10008699C(v3, v4);
    char v38 = sub_1005F5498(v37, v36);
    uint64_t v39 = v35[3];
    uint64_t v40 = v35[4];
    sub_100012ED8(v35, v39);
    dispatch thunk of RawRepresentable.rawValue.getter((void *)(v0 + 120), v39, *(void *)(v40 + 56));
    uint64_t v41 = *(void *)(v0 + 120);
    uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16);
    *(void *)(v0 + 44sub_100032838(0, 7LL, 0) = v42;
    v42(v31, v46, v49);
    uint64_t v43 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
    *(_BYTE *)(v31 + *(int *)(v43 + 20)) = v38;
    *(void *)(v31 + *(int *)(v43 + swift_release(*(void *)(v0 + 24)) = v41;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56LL))(v31, 0LL, 1LL, v43);
    *(void *)uint64_t v29 = 0LL;
    *(_WORD *)(v29 + 8) = 769;
    *(void *)(v29 + swift_weakDestroy(v0 + 16) = v45;
    *(void *)(v29 + 24) = v4;
    *(_BYTE *)(v29 + 32) = v50;
    *(_WORD *)(v29 + 33) = 0;
    *(_BYTE *)(v29 + 35) = 1;
    *(_DWORD *)(v29 + 36) = -1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v29 + v28[11], v56, v54);
    *(_BYTE *)(v29 + v28[14]) = 0;
    sub_100015750(v51, v29 + v28[12], &qword_10099E770);
    sub_100015750(v31, v29 + v28[13], &qword_1009AA730);
    uint64_t v44 = (void *)swift_task_alloc(dword_1009BCE14);
    *(void *)(v0 + 448) = v44;
    *uint64_t v44 = v0;
    v44[1] = sub_1002385A8;
    return sub_1006D59B4(*(void *)(v0 + 360));
  }

  else
  {
    uint64_t v6 = *(void *)(v0 + 400);
    uint64_t v7 = *(void *)(v0 + 368);
    uint64_t v8 = *(void *)(v0 + 376);
    uint64_t v9 = *(void *)(v0 + 184);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v10 = type metadata accessor for LocationFetcher(0LL);
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v9 + *(int *)(v10 + 32), v7);
    unint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "No ObservationStoreService available!", v14, 2u);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    uint64_t v15 = *(void *)(v0 + 400);
    uint64_t v16 = *(void *)(v0 + 368);
    uint64_t v17 = *(void *)(v0 + 376);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
    uint64_t v18 = *(void *)(v0 + 392);
    uint64_t v19 = *(void *)(v0 + 384);
    uint64_t v20 = *(void *)(v0 + 360);
    uint64_t v21 = *(void *)(v0 + 344);
    uint64_t v23 = *(void *)(v0 + 312);
    uint64_t v22 = *(void *)(v0 + 320);
    uint64_t v25 = *(void *)(v0 + 296);
    uint64_t v24 = *(void *)(v0 + 304);
    uint64_t v26 = *(void *)(v0 + 288);
    uint64_t v53 = *(void *)(v0 + 280);
    uint64_t v55 = *(void *)(v0 + 256);
    uint64_t v57 = *(void *)(v0 + 248);
    swift_task_dealloc(*(void *)(v0 + 400));
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v53);
    swift_task_dealloc(v55);
    swift_task_dealloc(v57);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1002385A8()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 448LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 360LL);
  *(void *)(*(void *)v1 + 45sub_1001F5B54(*(void (**)(void *))(v0 + 16), *(void *)(v0 + 24), 6LL) = v0;
  swift_task_dealloc(v2);
  sub_100018C68(v3, type metadata accessor for ObservedAdvertisement);
  if (v0) {
    uint64_t v4 = sub_100238A7C;
  }
  else {
    uint64_t v4 = sub_100238620;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_100238620()
{
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
  uint64_t v2 = *(void *)(v0 + 392);
  uint64_t v3 = *(void *)(v0 + 368);
  uint64_t v4 = *(void *)(v0 + 376);
  uint64_t v5 = *(void *)(v0 + 304);
  uint64_t v6 = *(void *)(v0 + 288);
  uint64_t v56 = *(void *)(v0 + 256);
  uint64_t v7 = *(void *)(v0 + 224);
  uint64_t v51 = *(void *)(v0 + 264);
  uint64_t v53 = *(void *)(v0 + 232);
  uint64_t v8 = *(void *)(v0 + 208);
  uint64_t v9 = type metadata accessor for LocationFetcher(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1 + *(int *)(v9 + 32), v3);
  sub_10001DC4C(v8, v5, type metadata accessor for RawSearchResult);
  v60(v6, v7, v51);
  uint64_t v10 = sub_10001DC4C(v53, v56, type metadata accessor for BeaconKeyManager.IndexInformation);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.info.getter(v11);
  uint64_t v61 = v11;
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v49 = *(void *)(v0 + 424);
    uint64_t v50 = *(void *)(v0 + 376);
    uint64_t v52 = *(void *)(v0 + 432);
    uint64_t v54 = *(void *)(v0 + 368);
    uint64_t v57 = *(void *)(v0 + 392);
    os_log_type_t v13 = *(char **)(v0 + 304);
    uint64_t v14 = *(void *)(v0 + 264);
    uint64_t v43 = *(void *)(v0 + 288);
    uint64_t v44 = *(void *)(v0 + 272);
    uint64_t v45 = *(void *)(v0 + 256);
    uint64_t v46 = *(void *)(v0 + 240);
    uint64_t v15 = swift_slowAlloc(35LL, -1LL);
    uint64_t v48 = swift_slowAlloc(64LL, -1LL);
    uint64_t v63 = v48;
    *(_DWORD *)uint64_t v15 = 16778243;
    os_log_type_t type = v12;
    char v16 = *v13;
    sub_100018C68((uint64_t)v13, type metadata accessor for RawSearchResult);
    *(_BYTE *)(v0 + 465) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 465, v0 + 466, v15 + 4, v15 + 5);
    *(void *)(v0 + 16sub_100032838(0, 7LL, 0) = 1752392040LL;
    *(_WORD *)(v15 + 5) = 2160;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v15 + 7, v15 + 15);
    *(_WORD *)(v15 + 15) = 2081;
    uint64_t v17 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter(v14, v17);
    *(void *)(v0 + 168) = sub_1003F11D4(v18, v19, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v15 + 17, v15 + 25);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v14);
    *(_WORD *)(v15 + 25) = 2082;
    uint64_t v20 = (void *)(v45 + *(int *)(v46 + 20));
    uint64_t v22 = v20[3];
    uint64_t v21 = v20[4];
    sub_100012ED8(v20, v22);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v22, *(void *)(v21 + 16));
    *(void *)(v0 + 176) = sub_1003F11D4(v23, v24, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v15 + 27, v15 + 35);
    swift_bridgeObjectRelease();
    sub_100018C68(v45, type metadata accessor for BeaconKeyManager.IndexInformation);
    _os_log_impl( (void *)&_mh_execute_header,  v11,  type,  "Saved advertisement status %hhu for beacon %{private,mask.hash}s,index %{public}s.",  (uint8_t *)v15,  0x23u);
    swift_arrayDestroy(v48, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_release();

    sub_1000869A4(v49, v52);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v57, v54);
  }

  else
  {
    uint64_t v26 = *(void *)(v0 + 424);
    uint64_t v25 = *(void *)(v0 + 432);
    uint64_t v27 = *(void *)(v0 + 392);
    uint64_t v28 = *(void *)(v0 + 376);
    uint64_t v58 = *(void *)(v0 + 368);
    uint64_t v29 = *(void *)(v0 + 288);
    uint64_t v31 = *(void *)(v0 + 264);
    uint64_t v30 = *(void *)(v0 + 272);
    uint64_t v32 = *(void *)(v0 + 256);
    sub_100018C68(*(void *)(v0 + 304), type metadata accessor for RawSearchResult);
    sub_1000869A4(v26, v25);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
    sub_100018C68(v32, type metadata accessor for BeaconKeyManager.IndexInformation);
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v58);
  }

  uint64_t v33 = *(void *)(v0 + 392);
  uint64_t v34 = *(void *)(v0 + 384);
  uint64_t v35 = *(void *)(v0 + 360);
  uint64_t v36 = *(void *)(v0 + 344);
  uint64_t v38 = *(void *)(v0 + 312);
  uint64_t v37 = *(void *)(v0 + 320);
  uint64_t v40 = *(void *)(v0 + 296);
  uint64_t v39 = *(void *)(v0 + 304);
  uint64_t v41 = *(void *)(v0 + 288);
  uint64_t v55 = *(void *)(v0 + 280);
  uint64_t v59 = *(void *)(v0 + 256);
  uint64_t v62 = *(void *)(v0 + 248);
  swift_task_dealloc(*(void *)(v0 + 400));
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v55);
  swift_task_dealloc(v59);
  swift_task_dealloc(v62);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100238A7C()
{
  uint64_t v1 = *(void *)(v0 + 456);
  uint64_t v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
  uint64_t v3 = *(void *)(v0 + 376);
  uint64_t v2 = *(void *)(v0 + 384);
  uint64_t v4 = *(void *)(v0 + 368);
  uint64_t v5 = *(void *)(v0 + 296);
  uint64_t v6 = *(void *)(v0 + 280);
  uint64_t v62 = *(void *)(v0 + 248);
  uint64_t v7 = *(void *)(v0 + 224);
  uint64_t v56 = *(void *)(v0 + 264);
  uint64_t v58 = *(void *)(v0 + 232);
  uint64_t v8 = *(void *)(v0 + 208);
  uint64_t v9 = *(void *)(v0 + 184);
  uint64_t v10 = type metadata accessor for LocationFetcher(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v9 + *(int *)(v10 + 32), v4);
  sub_10001DC4C(v8, v5, type metadata accessor for RawSearchResult);
  v66(v6, v7, v56);
  sub_10001DC4C(v58, v62, type metadata accessor for BeaconKeyManager.IndexInformation);
  swift_errorRetain(v1);
  uint64_t v11 = swift_errorRetain(v1);
  os_log_type_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.error.getter(v12);
  uint64_t v67 = v12;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = *(void *)(v0 + 456);
    uint64_t v54 = *(void *)(v0 + 424);
    uint64_t v55 = *(void *)(v0 + 376);
    uint64_t v57 = *(void *)(v0 + 432);
    uint64_t v59 = *(void *)(v0 + 368);
    uint64_t v63 = *(void *)(v0 + 384);
    uint64_t v15 = *(char **)(v0 + 296);
    uint64_t v16 = *(void *)(v0 + 280);
    uint64_t v17 = *(void *)(v0 + 264);
    uint64_t v50 = *(void *)(v0 + 248);
    uint64_t v48 = *(void *)(v0 + 272);
    uint64_t v49 = *(void *)(v0 + 240);
    uint64_t v18 = swift_slowAlloc(45LL, -1LL);
    uint64_t v52 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v53 = swift_slowAlloc(64LL, -1LL);
    uint64_t v69 = v53;
    *(_DWORD *)uint64_t v18 = 16778499;
    os_log_type_t type = v13;
    char v19 = *v15;
    sub_100018C68((uint64_t)v15, type metadata accessor for RawSearchResult);
    *(_BYTE *)(v0 + 464) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 464, v0 + 465, v18 + 4, v18 + 5);
    *(void *)(v0 + 128) = 1752392040LL;
    *(_WORD *)(v18 + 5) = 2160;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v18 + 7, v18 + 15);
    *(_WORD *)(v18 + 15) = 2081;
    uint64_t v20 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter(v17, v20);
    *(void *)(v0 + 136) = sub_1003F11D4(v21, v22, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v18 + 17, v18 + 25);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v16, v17);
    *(_WORD *)(v18 + 25) = 2082;
    uint64_t v23 = (void *)(v50 + *(int *)(v49 + 20));
    uint64_t v25 = v23[3];
    uint64_t v24 = v23[4];
    sub_100012ED8(v23, v25);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter(v25, *(void *)(v24 + 16));
    *(void *)(v0 + 144) = sub_1003F11D4(v26, v27, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v18 + 27, v18 + 35);
    swift_bridgeObjectRelease();
    sub_100018C68(v50, type metadata accessor for BeaconKeyManager.IndexInformation);
    *(_WORD *)(v18 + 35) = 2114;
    swift_errorRetain(v14);
    uint64_t v28 = _swift_stdlib_bridgeErrorToNSError(v14);
    *(void *)(v0 + 152) = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v18 + 37, v18 + 45);
    *uint64_t v52 = v28;
    swift_errorRelease(v14);
    swift_errorRelease(v14);
    _os_log_impl( (void *)&_mh_execute_header,  v67,  type,  "Error saving advertisement status %hhufor beacon %{private,mask.hash}s,index %{public}serror: %{public}@.",  (uint8_t *)v18,  0x2Du);
    uint64_t v29 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v52, 1LL, v29);
    swift_slowDealloc(v52, -1LL, -1LL);
    swift_arrayDestroy(v53, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_release();

    swift_errorRelease(v14);
    sub_1000869A4(v54, v57);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v63, v59);
  }

  else
  {
    uint64_t v30 = *(void *)(v0 + 456);
    uint64_t v32 = *(void *)(v0 + 424);
    uint64_t v31 = *(void *)(v0 + 432);
    uint64_t v33 = *(void *)(v0 + 376);
    uint64_t v60 = *(void *)(v0 + 368);
    uint64_t v64 = *(void *)(v0 + 384);
    uint64_t v34 = *(void *)(v0 + 272);
    uint64_t v35 = *(void *)(v0 + 280);
    uint64_t v36 = *(void *)(v0 + 264);
    uint64_t v37 = *(void *)(v0 + 248);
    sub_100018C68(*(void *)(v0 + 296), type metadata accessor for RawSearchResult);
    sub_1000869A4(v32, v31);
    swift_release();
    swift_errorRelease(v30);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v35, v36);
    sub_100018C68(v37, type metadata accessor for BeaconKeyManager.IndexInformation);
    swift_errorRelease(v30);
    swift_errorRelease(v30);

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v64, v60);
  }

  uint64_t v38 = *(void *)(v0 + 392);
  uint64_t v39 = *(void *)(v0 + 384);
  uint64_t v40 = *(void *)(v0 + 360);
  uint64_t v41 = *(void *)(v0 + 344);
  uint64_t v43 = *(void *)(v0 + 312);
  uint64_t v42 = *(void *)(v0 + 320);
  uint64_t v45 = *(void *)(v0 + 296);
  uint64_t v44 = *(void *)(v0 + 304);
  uint64_t v46 = *(void *)(v0 + 288);
  uint64_t v61 = *(void *)(v0 + 280);
  uint64_t v65 = *(void *)(v0 + 256);
  uint64_t v68 = *(void *)(v0 + 248);
  swift_task_dealloc(*(void *)(v0 + 400));
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v61);
  swift_task_dealloc(v65);
  swift_task_dealloc(v68);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100238FA0( void *a1, void *a2, unint64_t a3, uint64_t a4, uint64_t *a5, char *a6, uint64_t a7, int a8, os_log_s *a9, void *a10)
{
  int v247 = a8;
  uint64_t v251 = a7;
  unint64_t v248 = a6;
  uint64_t v242 = a4;
  unint64_t v257 = a3;
  uint64_t v243 = type metadata accessor for FetchResponse.SearchResult(0LL);
  __chkstk_darwin(v243);
  uint64_t v244 = (uint64_t)&v218 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for TimeBasedKey(0LL);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v250 = (uint64_t *)((char *)&v218 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v237 = (char *)&v218 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v225 = (uint64_t)&v218 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v231 = (uint64_t *)((char *)&v218 - v22);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v229 = (uint64_t)&v218 - v24;
  __chkstk_darwin(v23);
  uint64_t v236 = (uint64_t *)((char *)&v218 - v25);
  id v253 = (void *)type metadata accessor for UUID(0LL);
  uint64_t v254 = *(v253 - 1);
  uint64_t v26 = __chkstk_darwin(v253);
  uint64_t v255 = (char *)&v218 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v224 = (char *)&v218 - v29;
  __chkstk_darwin(v28);
  uint64_t v235 = (char *)&v218 - v30;
  uint64_t v258 = type metadata accessor for Logger(0LL);
  uint64_t v256 = *(void (***)(char *, char *, uint64_t))(v258 - 8);
  uint64_t v31 = __chkstk_darwin(v258);
  uint64_t v249 = (char *)&v218 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v226 = (char *)&v218 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v230 = (char *)&v218 - v36;
  __chkstk_darwin(v35);
  uint64_t v241 = (char *)&v218 - v37;
  uint64_t v38 = sub_100004AEC(&qword_1009AC230);
  __chkstk_darwin(v38);
  os_log_type_t v234 = (char *)&v218 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v227 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v227);
  unsigned __int8 v233 = (uint64_t *)((char *)&v218 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v246 = type metadata accessor for Date(0LL);
  uint64_t v245 = *(void *)(v246 - 8);
  uint64_t v41 = __chkstk_darwin(v246);
  uint64_t v228 = (char *)&v218 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v41);
  uint64_t v240 = (char *)&v218 - v43;
  uint64_t v44 = type metadata accessor for RawSearchResult(0LL);
  uint64_t v238 = *(void *)(v44 - 8);
  uint64_t v45 = __chkstk_darwin(v44);
  uint64_t v47 = (char *)&v218 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v45);
  uint64_t v49 = (char *)&v218 - v48;
  uint64_t v50 = type metadata accessor for BeaconPayloadv1(0LL);
  uint64_t v51 = __chkstk_darwin(v50);
  uint64_t v53 = (char *)&v218 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v51);
  uint64_t v55 = (char *)&v218 - v54;
  uint64_t v239 = v14;
  uint64_t v56 = *(int *)(v14 + 24);
  uint64_t v259 = a5;
  uint64_t v57 = (__int128 *)((char *)a5 + v56);
  __int128 v58 = v57[1];
  __int128 v268 = *v57;
  __int128 v269 = v58;
  __int128 v270 = v57[2];
  id v59 = a1;
  uint64_t v60 = v257;
  sub_10001736C((uint64_t)a2, v257);
  sub_1004DA048();
  uint64_t v61 = v252;
  BeaconPayloadv1.init(using:data:advertisement:)((uint64_t)v59, (uint64_t)a2, v60);
  if (v61)
  {
    uint64_t v62 = type metadata accessor for LocationFetcher(0LL);
    uint64_t v63 = v256;
    uint64_t v64 = (uint64_t)v249;
    uint64_t v65 = v258;
    v256[2](v249, &v248[*(int *)(v62 + 32)], v258);
    uint64_t v66 = v254;
    uint64_t v67 = v253;
    (*(void (**)(_BYTE *, uint64_t, void *))(v254 + 16))(v255, v251, v253);
    uint64_t v68 = v250;
    uint64_t v69 = sub_10001DC4C((uint64_t)v259, (uint64_t)v250, type metadata accessor for TimeBasedKey);
    uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
    LODWORD(v259) = static os_log_type_t.error.getter(v70);
    if (os_log_type_enabled(v70, (os_log_type_t)v259))
    {
      unint64_t v257 = 0LL;
      os_log_t v252 = v61;
      uint64_t v71 = v66;
      uint64_t v72 = swift_slowAlloc(42LL, -1LL);
      uint64_t v73 = swift_slowAlloc(64LL, -1LL);
      uint64_t v265 = v73;
      *(_DWORD *)uint64_t v72 = 141558787;
      uint64_t v263 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264, v72 + 4, v72 + 12);
      *(_WORD *)(v72 + 12) = 2081;
      uint64_t v74 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v75 = v255;
      uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter(v67, v74);
      uint64_t v263 = sub_1003F11D4(v76, v77, &v265);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264, v72 + 14, v72 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, void *))(v71 + 8))(v75, v67);
      *(_WORD *)(v72 + 22) = 2082;
      if ((_BYTE)v247)
      {
        if (v247 == 1)
        {
          uint64_t v78 = 0x61646E6F6365732ELL;
          unint64_t v79 = 0xEA00000000007972LL;
        }

        else
        {
          unint64_t v79 = 0x80000001008533C0LL;
          uint64_t v78 = 0xD000000000000010LL;
        }
      }

      else
      {
        uint64_t v78 = 0x7972616D6972702ELL;
        unint64_t v79 = 0xE800000000000000LL;
      }

      uint64_t v146 = v258;
      uint64_t v263 = sub_1003F11D4(v78, v79, &v265);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264, v72 + 24, v72 + 32);
      swift_bridgeObjectRelease();
      *(_WORD *)(v72 + 32) = 2050;
      uint64_t v147 = *v250;
      sub_100018C68((uint64_t)v250, type metadata accessor for TimeBasedKey);
      uint64_t v263 = v147;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264, v72 + 34, v72 + 42);
      _os_log_impl( (void *)&_mh_execute_header,  v70,  (os_log_type_t)v259,  "Packet decryption failed for beacon %{private,mask.hash}s, sequence: %{public}s, index: %{public}llu.",  (uint8_t *)v72,  0x2Au);
      swift_arrayDestroy(v73, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v73, -1LL, -1LL);
      swift_slowDealloc(v72, -1LL, -1LL);
      swift_errorRelease(v252);

      return ((uint64_t (*)(char *, uint64_t))v256[1])(v249, v146);
    }

    else
    {
      sub_100018C68((uint64_t)v68, type metadata accessor for TimeBasedKey);
      swift_errorRelease(v61);
      (*(void (**)(_BYTE *, void *))(v66 + 8))(v255, v67);

      return ((uint64_t (*)(uint64_t, uint64_t))v63[1])(v64, v65);
    }
  }

  else
  {
    uint64_t v80 = (uint64_t)v240;
    uint64_t v250 = a2;
    uint64_t v232 = (int *)v50;
    uint64_t v255 = v49;
    uint64_t v249 = v47;
    sub_10002218C((uint64_t)v53, (uint64_t)v55, type metadata accessor for BeaconPayloadv1);
    uint64_t v81 = (uint64_t)v55;
    if ((_BYTE)v247)
    {
      uint64_t v82 = v232;
      uint64_t v83 = v245;
      uint64_t v84 = v242;
      uint64_t v85 = v243;
      os_log_t v252 = 0LL;
      uint64_t v86 = *v259;
      uint64_t v266 = &type metadata for SecondaryIndex;
      int v222 = 13;
      unint64_t v87 = sub_1000868A0();
    }

    else
    {
      os_log_t v252 = 0LL;
      uint64_t v86 = *v259;
      uint64_t v266 = &type metadata for PrimaryWildIndex;
      unint64_t v87 = sub_100086928();
      uint64_t v82 = v232;
      uint64_t v83 = v245;
      uint64_t v84 = v242;
      uint64_t v85 = v243;
      int v222 = 7;
    }

    os_log_t v221 = a9;
    unint64_t v267 = v87;
    uint64_t v265 = v86;
    uint64_t v88 = v81 + v82[5];
    uint64_t v89 = *(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 16);
    LODWORD(v22sub_100032838(0, 7LL, 0) = *(unsigned __int8 *)(v81 + v82[10]);
    v89(v80, v88, v246);
    double v90 = *(double *)(v81 + v82[7]);
    double v91 = *(double *)(v81 + v82[8]);
    uint64_t v92 = v82[9];
    uint64_t v223 = (uint64_t *)v81;
    double v93 = *(double *)(v81 + v92);
    uint64_t v94 = (void (*)(void, void, void))v233;
    sub_10001581C((uint64_t)a9 + *(int *)(v85 + 24), (uint64_t)v233, (uint64_t *)&unk_10099D720);
    os_log_type_t v95 = *(void **)(v254 + 16);
    uint64_t v96 = (uint64_t)v234;
    uint64_t v97 = v251;
    uint64_t v98 = v253;
    ((void (*)(char *, uint64_t, void *))v95)(v234, v251, v253);
    uint64_t v99 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
    sub_100013044((uint64_t)&v265, v96 + *(int *)(v99 + 20));
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v99 - 8) + 56LL))(v96, 0LL, 1LL, v99);
    uint64_t v219 = v84;
    int v100 = BYTE4(v84);
    uint64_t v101 = v97;
    sub_1005B9084(v220, v80, v222, (uint64_t)v94, v96, v100 | ((v84 == 3LL) << 8), v255, v90, v91, v93);
    uint64_t v102 = type metadata accessor for LocationFetcher(0LL);
    uint64_t v103 = v256;
    uint64_t v104 = (char *)v256[2];
    uint64_t v105 = v241;
    uint64_t v240 = &v248[*(int *)(v102 + 32)];
    uint64_t v106 = v258;
    unint64_t v248 = v104;
    ((void (*)(char *))v104)(v241);
    uint64_t v107 = v235;
    unsigned __int8 v233 = v95;
    ((void (*)(char *, uint64_t, void *))v95)(v235, v101, v98);
    unint64_t v108 = v236;
    sub_10001DC4C((uint64_t)v259, (uint64_t)v236, type metadata accessor for TimeBasedKey);
    sub_10001DC4C((uint64_t)v221, v244, type metadata accessor for FetchResponse.SearchResult);
    uint64_t v109 = v250;
    unint64_t v110 = v257;
    sub_10001736C((uint64_t)v250, v257);
    uint64_t v111 = sub_10001736C((uint64_t)v109, v110);
    uint64_t v112 = (os_log_s *)Logger.logObject.getter(v111);
    LODWORD(v234) = static os_log_type_t.default.getter(v112);
    if (os_log_type_enabled(v112, (os_log_type_t)v234))
    {
      os_log_t v221 = v112;
      uint64_t v113 = swift_slowAlloc(132LL, -1LL);
      uint64_t v114 = swift_slowAlloc(224LL, -1LL);
      uint64_t v220 = v114;
      *(_DWORD *)uint64_t v113 = 141561091;
      uint64_t v262 = (void *)v114;
      uint64_t v263 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264, v113 + 4, v113 + 12);
      *(_WORD *)(v113 + 12) = 2081;
      uint64_t v115 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v116 = dispatch thunk of CustomStringConvertible.description.getter(v98, v115);
      uint64_t v263 = sub_1003F11D4(v116, v117, (uint64_t *)&v262);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264, v113 + 14, v113 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void *))(v254 + 8))(v107, v98);
      *(_WORD *)(v113 + 22) = 2082;
      if ((_BYTE)v247) {
        uint64_t v118 = 0x61646E6F6365732ELL;
      }
      else {
        uint64_t v118 = 0x7972616D6972702ELL;
      }
      if ((_BYTE)v247) {
        unint64_t v119 = 0xEA00000000007972LL;
      }
      else {
        unint64_t v119 = 0xE800000000000000LL;
      }
      uint64_t v263 = sub_1003F11D4(v118, v119, (uint64_t *)&v262);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264, v113 + 24, v113 + 32);
      swift_bridgeObjectRelease();
      *(_WORD *)(v113 + 32) = 2050;
      uint64_t v120 = *v108;
      sub_100018C68((uint64_t)v108, type metadata accessor for TimeBasedKey);
      uint64_t v263 = v120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264, v113 + 34, v113 + 42);
      *(_WORD *)(v113 + 42) = 2082;
      uint64_t v121 = v223;
      swift_beginAccess(v223, v260, 0LL, 0LL);
      uint64_t v122 = v232;
      uint64_t v123 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      uint64_t v124 = dispatch thunk of CustomStringConvertible.description.getter(v246, v123);
      uint64_t v263 = sub_1003F11D4(v124, v125, (uint64_t *)&v262);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264, v113 + 44, v113 + 52);
      swift_bridgeObjectRelease();
      *(_WORD *)(v113 + 52) = 2082;
      uint64_t v126 = v244;
      uint64_t v127 = Optional.debugDescription.getter(v227);
      uint64_t v263 = sub_1003F11D4(v127, v128, (uint64_t *)&v262);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264, v113 + 54, v113 + 62);
      swift_bridgeObjectRelease();
      sub_100018C68(v126, type metadata accessor for FetchResponse.SearchResult);
      *(_WORD *)(v113 + 62) = 2082;
      uint64_t v129 = sub_100167394(v222);
      uint64_t v263 = sub_1003F11D4(v129, v130, (uint64_t *)&v262);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264, v113 + 64, v113 + 72);
      swift_bridgeObjectRelease();
      *(_WORD *)(v113 + 72) = 2049;
      uint64_t v263 = *(uint64_t *)((char *)v121 + v122[7]);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264, v113 + 74, v113 + 82);
      *(_WORD *)(v113 + 82) = 2049;
      uint64_t v263 = *(uint64_t *)((char *)v121 + v122[8]);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264, v113 + 84, v113 + 92);
      *(_WORD *)(v113 + 92) = 2050;
      uint64_t v263 = *(uint64_t *)((char *)v121 + v122[9]);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264, v113 + 94, v113 + 102);
      *(_WORD *)(v113 + 102) = 2160;
      uint64_t v263 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264, v113 + 104, v113 + 112);
      *(_WORD *)(v113 + 112) = 2081;
      uint64_t v131 = *v121;
      unint64_t v132 = v121[1];
      sub_10001736C(*v121, v132);
      uint64_t v133 = sub_10001736C(v131, v132);
      uint64_t v134 = static MACAddress.length.getter(v133);
      sub_100178C64(v134, v131, v132);
      sub_100016F9C(v131, v132);
      uint64_t v135 = v263;
      unint64_t v136 = v264;
      uint64_t v137 = Data.hexString.getter(v263, v264);
      unint64_t v139 = v138;
      sub_100016F9C(v135, v136);
      uint64_t v263 = sub_1003F11D4(v137, v139, (uint64_t *)&v262);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264, v113 + 114, v113 + 122);
      swift_bridgeObjectRelease();
      *(_WORD *)(v113 + 122) = 2082;
      if (v219 == 3)
      {
        unint64_t v140 = 0xE300000000000000LL;
        uint64_t v141 = 7104878LL;
      }

      else
      {
        LOBYTE(v263) = BYTE4(v242);
        unint64_t v148 = sub_1000B1244();
        uint64_t v141 = BinaryInteger.description.getter(&type metadata for UInt8, v148);
        unint64_t v140 = v149;
      }

      uint64_t v106 = v258;
      uint64_t v150 = v256;
      os_log_t v143 = v252;
      os_log_t v151 = v241;
      os_log_type_t v152 = v234;
      uint64_t v263 = sub_1003F11D4(v141, v140, (uint64_t *)&v262);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264, v113 + 124, v113 + 132);
      swift_bridgeObjectRelease();
      uint64_t v153 = v250;
      unint64_t v154 = v257;
      sub_100016F9C((uint64_t)v250, v257);
      sub_100016F9C((uint64_t)v153, v154);
      os_log_t v155 = v221;
      _os_log_impl( (void *)&_mh_execute_header,  v221,  v152,  "Packet decrypted for beacon %{private,mask.hash}s,\n sequence: %{public}s,\n index: %{public}llu,\n locationTimestamp: %{public}s,\n scanDate: %{public}s,\n source: %{public}s,\n latitude: %{private}f,\n longitude: %{private}f,\n horizontalAccuracy: %{public}f,\n advertisementAddress: %{private,mask.hash}s,\n hint: %{public}s.",  (uint8_t *)v113,  0x84u);
      uint64_t v156 = v220;
      swift_arrayDestroy(v220, 7LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v156, -1LL, -1LL);
      swift_slowDealloc(v113, -1LL, -1LL);

      uint64_t v157 = v151;
      uint64_t v142 = (void (**)(char *, char *, uint64_t))v150[1];
      ((void (*)(char *, uint64_t))v142)(v157, v106);
      uint64_t v144 = (uint64_t)v223;
      uint64_t v98 = v253;
    }

    else
    {
      sub_100018C68((uint64_t)v108, type metadata accessor for TimeBasedKey);
      (*(void (**)(char *, void *))(v254 + 8))(v107, v98);
      sub_100018C68(v244, type metadata accessor for FetchResponse.SearchResult);
      sub_100016F9C((uint64_t)v109, v110);
      sub_100016F9C((uint64_t)v109, v110);

      uint64_t v142 = (void (**)(char *, char *, uint64_t))v103[1];
      ((void (*)(char *, uint64_t))v142)(v105, v106);
      os_log_t v143 = v252;
      uint64_t v144 = (uint64_t)v223;
    }

    uint64_t v158 = (uint64_t)v237;
    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
    unint64_t v257 = (unint64_t)v143;
    uint64_t v159 = sub_1006A0608(v263);
    swift_bridgeObjectRelease();
    if (v159 < 0)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
      __break(1u);
    }

    else
    {
      id v253 = a10;
      uint64_t v160 = v259;
      swift_beginAccess(v144, &v263, 0LL, 0LL);
      uint64_t v161 = DateInterval.contains(_:)(v144 + v232[5]);
      if ((v161 & 1) != 0)
      {
        uint64_t v162 = v228;
        DateInterval.start.getter(v161);
        double v163 = Date.timeIntervalSince(_:)(v162);
        (*(void (**)(char *, uint64_t))(v245 + 8))(v162, v246);
        if ((double)(unint64_t)v159 * 60.0 <= fabs(v163))
        {
          uint64_t v164 = v106;
          uint64_t v165 = v226;
          ((void (*)(char *, char *, uint64_t))v248)(v226, v240, v164);
          unint64_t v166 = v224;
          ((void (*)(char *, uint64_t, void *))v233)(v224, v251, v98);
          __int128 v167 = v259;
          uint64_t v168 = v225;
          sub_10001DC4C((uint64_t)v259, v225, type metadata accessor for TimeBasedKey);
          uint64_t v169 = sub_10001DC4C((uint64_t)v167, v158, type metadata accessor for TimeBasedKey);
          __int128 v170 = (os_log_s *)Logger.logObject.getter(v169);
          os_log_type_t v171 = static os_log_type_t.error.getter(v170);
          int v172 = v171;
          if (os_log_type_enabled(v170, v171))
          {
            uint64_t v173 = swift_slowAlloc(52LL, -1LL);
            os_log_t v252 = v170;
            uint64_t v174 = (uint64_t *)v168;
            uint64_t v175 = v98;
            uint64_t v176 = v173;
            unsigned int v177 = (uint64_t *)swift_slowAlloc(96LL, -1LL);
            uint64_t v259 = v177;
            *(_DWORD *)uint64_t v176 = 141559043;
            uint64_t v261 = 1752392040LL;
            uint64_t v262 = v177;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, &v262, v176 + 4, v176 + 12);
            *(_WORD *)(v176 + 12) = 2081;
            uint64_t v178 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            LODWORD(v251) = v172;
            uint64_t v179 = dispatch thunk of CustomStringConvertible.description.getter(v175, v178);
            uint64_t v261 = sub_1003F11D4(v179, v180, (uint64_t *)&v262);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, &v262, v176 + 14, v176 + 22);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, void *))(v254 + 8))(v166, v175);
            *(_WORD *)(v176 + 22) = 2050;
            uint64_t v181 = *v174;
            sub_100018C68((uint64_t)v174, type metadata accessor for TimeBasedKey);
            uint64_t v261 = v181;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, &v262, v176 + 24, v176 + 32);
            *(_WORD *)(v176 + 32) = 2082;
            uint64_t v182 = type metadata accessor for DateInterval(0LL);
            uint64_t v183 = sub_100007864( &qword_1009A0DE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval,  (uint64_t)&protocol conformance descriptor for DateInterval);
            uint64_t v184 = dispatch thunk of CustomStringConvertible.description.getter(v182, v183);
            uint64_t v261 = sub_1003F11D4(v184, v185, (uint64_t *)&v262);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, &v262, v176 + 34, v176 + 42);
            swift_bridgeObjectRelease();
            sub_100018C68(v158, type metadata accessor for TimeBasedKey);
            *(_WORD *)(v176 + 42) = 2082;
            uint64_t v186 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
            uint64_t v187 = dispatch thunk of CustomStringConvertible.description.getter(v246, v186);
            uint64_t v261 = sub_1003F11D4(v187, v188, (uint64_t *)&v262);
            uint64_t v144 = (uint64_t)v223;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, &v262, v176 + 44, v176 + 52);
            swift_bridgeObjectRelease();
            os_log_t v189 = v252;
            _os_log_impl( (void *)&_mh_execute_header,  v252,  (os_log_type_t)v251,  "Calculated model date for beacon %{private,mask.hash}s,\n index %{public}llu differs from the date from package.\n Calculated date interval %{public}s,\n timestamp from package %{public}s.",  (uint8_t *)v176,  0x34u);
            unint64_t v190 = v259;
            swift_arrayDestroy(v259, 3LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v190, -1LL, -1LL);
            swift_slowDealloc(v176, -1LL, -1LL);

            ((void (*)(char *, uint64_t))v256[1])(v226, v258);
          }

          else
          {
            sub_100018C68(v168, type metadata accessor for TimeBasedKey);
            (*(void (**)(char *, void *))(v254 + 8))(v166, v98);
            sub_100018C68(v158, type metadata accessor for TimeBasedKey);

            ((void (*)(char *, uint64_t))v142)(v165, v258);
          }
        }
      }

      else
      {
        uint64_t v256 = v142;
        unint64_t v191 = v230;
        ((void (*)(char *, char *, uint64_t))v248)(v230, v240, v106);
        uint64_t v192 = v229;
        sub_10001DC4C((uint64_t)v160, v229, type metadata accessor for TimeBasedKey);
        uint64_t v193 = v231;
        uint64_t v194 = sub_10001DC4C((uint64_t)v160, (uint64_t)v231, type metadata accessor for TimeBasedKey);
        uint64_t v195 = (os_log_s *)Logger.logObject.getter(v194);
        os_log_type_t v196 = static os_log_type_t.error.getter(v195);
        if (os_log_type_enabled(v195, v196))
        {
          uint64_t v197 = swift_slowAlloc(32LL, -1LL);
          uint64_t v198 = swift_slowAlloc(64LL, -1LL);
          uint64_t v262 = (void *)v198;
          *(_DWORD *)uint64_t v197 = 136446722;
          uint64_t v199 = type metadata accessor for DateInterval(0LL);
          uint64_t v200 = sub_100007864( &qword_1009A0DE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval,  (uint64_t)&protocol conformance descriptor for DateInterval);
          uint64_t v201 = dispatch thunk of CustomStringConvertible.description.getter(v199, v200);
          uint64_t v261 = sub_1003F11D4(v201, v202, (uint64_t *)&v262);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, &v262, v197 + 4, v197 + 12);
          swift_bridgeObjectRelease();
          sub_100018C68(v192, type metadata accessor for TimeBasedKey);
          *(_WORD *)(v197 + 12) = 2082;
          uint64_t v203 = v106;
          uint64_t v204 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
          uint64_t v205 = dispatch thunk of CustomStringConvertible.description.getter(v246, v204);
          uint64_t v261 = sub_1003F11D4(v205, v206, (uint64_t *)&v262);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, &v262, v197 + 14, v197 + 22);
          swift_bridgeObjectRelease();
          *(_WORD *)(v197 + 22) = 2050;
          uint64_t v207 = *v231;
          uint64_t v144 = (uint64_t)v223;
          sub_100018C68((uint64_t)v231, type metadata accessor for TimeBasedKey);
          uint64_t v261 = v207;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, &v262, v197 + 24, v197 + 32);
          _os_log_impl( (void *)&_mh_execute_header,  v195,  v196,  "Calculated model date doesn't contains the date from package.\n Calculated date interval %{public}s,\n timestamp from package %{public}s,\n index: %{public}llu.",  (uint8_t *)v197,  0x20u);
          swift_arrayDestroy(v198, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v198, -1LL, -1LL);
          swift_slowDealloc(v197, -1LL, -1LL);

          uint64_t v208 = v230;
          uint64_t v209 = v203;
        }

        else
        {
          sub_100018C68((uint64_t)v193, type metadata accessor for TimeBasedKey);
          sub_100018C68(v192, type metadata accessor for TimeBasedKey);

          uint64_t v208 = v191;
          uint64_t v209 = v106;
        }

        ((void (*)(char *, uint64_t))v256)(v208, v209);
      }

      uint64_t v210 = v255;
      uint64_t v211 = (uint64_t)v249;
      sub_10001DC4C((uint64_t)v255, (uint64_t)v249, type metadata accessor for RawSearchResult);
      uint64_t v212 = v253;
      unint64_t v213 = *v253;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v253);
      *uint64_t v212 = v213;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v213 = sub_1004C5B50(0, *(void *)(v213 + 16) + 1LL, 1, v213);
        *uint64_t v212 = v213;
      }

      uint64_t v215 = v238;
      unint64_t v217 = *(void *)(v213 + 16);
      unint64_t v216 = *(void *)(v213 + 24);
      if (v217 >= v216 >> 1)
      {
        unint64_t v213 = sub_1004C5B50(v216 > 1, v217 + 1, 1, v213);
        *uint64_t v212 = v213;
      }

      *(void *)(v213 + swift_weakDestroy(v0 + 16) = v217 + 1;
      sub_10002218C( v211,  v213 + ((*(unsigned __int8 *)(v215 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v215 + 80))
      + *(void *)(v215 + 72) * v217,
        type metadata accessor for RawSearchResult);
      sub_100018C68((uint64_t)v210, type metadata accessor for RawSearchResult);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v265);
      return sub_100018C68(v144, type metadata accessor for BeaconPayloadv1);
    }
  }

  return result;
}

BOOL sub_10023AA30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2 + *(int *)(v8 + 20), v4);
  uint64_t v9 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)(a1, v7, v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return (a2 & 1) == 0;
}

uint64_t sub_10023AB10(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v66 = a6;
  uint64_t v64 = a4;
  uint64_t v65 = a5;
  uint64_t v63 = a1;
  uint64_t v68 = type metadata accessor for UUID(0LL);
  uint64_t v72 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v73 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v69 = *(void *)(v8 - 8);
  uint64_t v70 = v8;
  __chkstk_darwin(v8);
  uint64_t v71 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v60 = sub_100004AEC(&qword_1009A6710);
  uint64_t v62 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v61 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v60 - v22;
  uint64_t v67 = a2;
  sub_100504F30(a2, (uint64_t)v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17) == 1)
  {
    sub_100015794((uint64_t)v16, (uint64_t *)&unk_1009A9C30);
    uint64_t v24 = v71;
LABEL_8:
    uint64_t v30 = v68;
    uint64_t v28 = v72;
    goto LABEL_9;
  }

  sub_10002218C((uint64_t)v16, (uint64_t)v23, type metadata accessor for OwnedBeaconRecord);
  sub_10001DC4C((uint64_t)&v23[*(int *)(v17 + 24)], (uint64_t)v13, type metadata accessor for StableIdentifier);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v13, v11);
  uint64_t v24 = v71;
  if (EnumCaseMultiPayload != 3)
  {
    sub_100018C68((uint64_t)v23, type metadata accessor for OwnedBeaconRecord);
    sub_100018C68((uint64_t)v13, type metadata accessor for StableIdentifier);
    goto LABEL_8;
  }

  uint64_t v26 = sub_100004AEC((uint64_t *)&unk_1009AF840);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v27 = v13[*(int *)(v26 + 96)];
  uint64_t v28 = v72;
  uint64_t v29 = v13;
  uint64_t v30 = v68;
  (*(void (**)(char *, uint64_t))(v72 + 8))(v29, v68);
  uint64_t v31 = *(void *)(v64 + 16);
  if (!v31)
  {
LABEL_21:
    sub_100018C68((uint64_t)v23, type metadata accessor for OwnedBeaconRecord);
LABEL_9:
    uint64_t v33 = v73;
    uint64_t v34 = v67;
    uint64_t v35 = type metadata accessor for LocationFetcher(0LL);
    uint64_t v37 = v69;
    uint64_t v36 = v70;
    (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v24, v65 + *(int *)(v35 + 32), v70);
    sub_10001DC4C(v66, (uint64_t)v21, type metadata accessor for OwnedBeaconRecord);
    uint64_t v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 16))(v33, v34, v30);
    uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
    uint64_t v40 = v28;
    os_log_type_t v41 = static os_log_type_t.default.getter(v39);
    if (os_log_type_enabled(v39, v41))
    {
      uint64_t v42 = swift_slowAlloc(42LL, -1LL);
      uint64_t v68 = swift_slowAlloc(64LL, -1LL);
      uint64_t v76 = v68;
      *(_DWORD *)uint64_t v42 = 141558787;
      uint64_t v74 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v42 + 4, v42 + 12);
      *(_WORD *)(v42 + 12) = 2081;
      uint64_t v43 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter(v30, v43);
      uint64_t v74 = sub_1003F11D4(v44, v45, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v42 + 14, v42 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v21, type metadata accessor for OwnedBeaconRecord);
      *(_WORD *)(v42 + 22) = 2160;
      uint64_t v74 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v42 + 24, v42 + 32);
      *(_WORD *)(v42 + 32) = 2081;
      uint64_t v46 = v73;
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter(v30, v43);
      uint64_t v74 = sub_1003F11D4(v47, v48, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v42 + 34, v42 + 42);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v72 + 8))(v46, v30);
      _os_log_impl( (void *)&_mh_execute_header,  v39,  v41,  "Multipart beacon %{private,mask.hash}s peerIdentifiersWithMultipartPosition did not find partId for %{private,mask.hash}s.",  (uint8_t *)v42,  0x2Au);
      uint64_t v49 = v68;
      swift_arrayDestroy(v68, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1LL, -1LL);
      swift_slowDealloc(v42, -1LL, -1LL);

      return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v71, v70);
    }

    else
    {
      sub_100018C68((uint64_t)v21, type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v73, v30);

      return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v24, v36);
    }
  }

  if (*(unsigned __int8 *)(v64 + 32) != v27)
  {
    uint64_t v32 = 0LL;
    uint64_t v51 = v31 - 1;
    while (v51 != v32)
    {
      int v52 = *(unsigned __int8 *)(v64 + 33 + v32++);
      if (v52 == v27)
      {
        char v59 = 2;
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  v59,  3455LL,  0);
        __break(1u);
        return result;
      }
    }

    goto LABEL_21;
  }

  LOBYTE(v32) = 0;
LABEL_16:
  uint64_t v53 = (uint64_t)v61;
  uint64_t v54 = *(int *)(v60 + 48);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v61, v67, v30);
  *(_BYTE *)(v53 + v54) = v32;
  uint64_t v55 = v63;
  unint64_t v56 = *v63;
  if ((swift_isUniquelyReferenced_nonNull_native(*v63) & 1) == 0) {
    unint64_t v56 = sub_1004C5DD8(0, *(void *)(v56 + 16) + 1LL, 1, v56);
  }
  unint64_t v58 = *(void *)(v56 + 16);
  unint64_t v57 = *(void *)(v56 + 24);
  if (v58 >= v57 >> 1) {
    unint64_t v56 = sub_1004C5DD8(v57 > 1, v58 + 1, 1, v56);
  }
  *(void *)(v56 + swift_weakDestroy(v0 + 16) = v58 + 1;
  sub_100015750( v53,  v56 + ((*(unsigned __int8 *)(v62 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80))
  + *(void *)(v62 + 72) * v58,
    &qword_1009A6710);
  unint64_t *v55 = v56;
  return sub_100018C68((uint64_t)v23, type metadata accessor for OwnedBeaconRecord);
}

Swift::Int sub_10023B200(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v2 = (void *)sub_1003D4A78(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = sub_10023BF74(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_10023B268( uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t), uint64_t (*a4)(void *))
{
  uint64_t v7 = *(void *)(a2(0LL) - 8);
  uint64_t v8 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v8 = a3(v8);
  }
  uint64_t v9 = *(void *)(v8 + 16);
  v11[0] = v8 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v11[1] = v9;
  uint64_t result = a4(v11);
  *a1 = v8;
  return result;
}

uint64_t sub_10023B2F8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100012ED8(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 376))(v3, v4);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t type metadata accessor for LocationFetcher(uint64_t a1)
{
  uint64_t result = qword_1009A6778;
  if (!qword_1009A6778) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationFetcher);
  }
  return result;
}

uint64_t sub_10023B384@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100012ED8(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 376))(v3, v4);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = v6 & 1;
  return result;
}

unint64_t sub_10023B3D4()
{
  unint64_t result = qword_1009A65E8;
  if (!qword_1009A65E8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1008174D0,  &type metadata for ObservationStoreService.ObservationStoreServiceError);
    atomic_store(result, (unint64_t *)&qword_1009A65E8);
  }

  return result;
}

uint64_t sub_10023B418@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100221E5C(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_10023B430()
{
  uint64_t v1 = type metadata accessor for LocationFetcher(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v0 + v4;
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v7 + 24));
  uint64_t v8 = v7 + *(int *)(v1 + 32);
  uint64_t v9 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  swift_bridgeObjectRelease();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + v6));
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, ((v6 + 47) & 0xFFFFFFFFFFFFFFF8LL) + 8, v5);
}

uint64_t sub_10023B518@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for LocationFetcher(0LL);
  unint64_t v4 = (*(void *)(*(void *)(v3 - 8) + 64LL)
  return sub_100222B10((void *)(v1 + v4), *(void *)(v1 + ((v4 + 47) & 0xFFFFFFFFFFFFF8LL)), a1);
}

Swift::Int sub_10023B574(uint64_t *a1)
{
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0LL);
  uint64_t v3 = *(void *)(RequestBeacon - 8);
  uint64_t v4 = __chkstk_darwin(RequestBeacon);
  uint64_t v129 = (uint64_t)&v123 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v139 = (uint64_t)&v123 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v136 = (uint64_t)&v123 - v9;
  __chkstk_darwin(v8);
  uint64_t v135 = (uint64_t)&v123 - v10;
  Swift::Int v11 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v11);
  if (result >= v11)
  {
    if (v11 < 0) {
      goto LABEL_141;
    }
    if (v11) {
      return sub_10023D344(0LL, v11, 1LL, a1);
    }
    return result;
  }

  if (v11 >= 0) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v11 + 1;
  }
  if (v11 < -1) {
    goto LABEL_149;
  }
  uint64_t v126 = v3;
  Swift::Int v124 = result;
  uint64_t v132 = v1;
  if (v11 < 2)
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
    unint64_t v131 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    if (v11 != 1)
    {
      unint64_t v20 = _swiftEmptyArrayStorage[2];
      uint64_t v19 = (char *)_swiftEmptyArrayStorage;
LABEL_106:
      uint64_t v115 = v19;
      uint64_t v123 = v17;
      if (v20 >= 2)
      {
        uint64_t v116 = *a1;
        do
        {
          unint64_t v117 = v20 - 2;
          if (v20 < 2) {
            goto LABEL_136;
          }
          if (!v116) {
            goto LABEL_148;
          }
          uint64_t v118 = *(void *)&v115[16 * v117 + 32];
          uint64_t v119 = *(void *)&v115[16 * v20 + 24];
          uint64_t v120 = v132;
          sub_10023D9C8( v116 + *(void *)(v126 + 72) * v118,  v116 + *(void *)(v126 + 72) * *(void *)&v115[16 * v20 + 16],  v116 + *(void *)(v126 + 72) * v119,  v131);
          uint64_t v132 = v120;
          if (v120) {
            break;
          }
          if (v119 < v118) {
            goto LABEL_137;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v115) & 1) == 0) {
            uint64_t v115 = sub_1003CBA90((uint64_t)v115);
          }
          if (v117 >= *((void *)v115 + 2)) {
            goto LABEL_138;
          }
          uint64_t v121 = &v115[16 * v117 + 32];
          *(void *)uint64_t v121 = v118;
          *((void *)v121 + 1) = v119;
          unint64_t v122 = *((void *)v115 + 2);
          if (v20 > v122) {
            goto LABEL_139;
          }
          memmove(&v115[16 * v20 + 16], &v115[16 * v20 + 32], 16 * (v122 - v20));
          *((void *)v115 + 2) = v122 - 1;
          unint64_t v20 = v122 - 1;
        }

        while (v122 > 2);
      }

Swift::Int sub_10023BF74(uint64_t *a1)
{
  uint64_t v144 = type metadata accessor for Date(0LL);
  uint64_t v137 = *(void *)(v144 - 8);
  uint64_t v2 = __chkstk_darwin(v144);
  uint64_t v4 = (char *)&v125 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v125 - v5;
  Swift::Int v7 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v7);
  if (result >= v7)
  {
    if (v7 < 0) {
      goto LABEL_137;
    }
    if (v7) {
      return sub_10023D588(0LL, v7, 1LL, a1);
    }
    return result;
  }

  if (v7 >= 0) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v7 + 1;
  }
  if (v7 < -1) {
    goto LABEL_145;
  }
  Swift::Int v126 = result;
  if (v7 < 2)
  {
    uint64_t v134 = (char *)&_swiftEmptyArrayStorage[4];
    unint64_t v125 = _swiftEmptyArrayStorage;
    if (v7 != 1)
    {
      unint64_t v15 = _swiftEmptyArrayStorage[2];
      uint64_t v14 = (char *)_swiftEmptyArrayStorage;
LABEL_103:
      uint64_t v116 = v136;
      if (v15 >= 2)
      {
        uint64_t v117 = *a1;
        do
        {
          unint64_t v118 = v15 - 2;
          if (v15 < 2) {
            goto LABEL_132;
          }
          if (!v117) {
            goto LABEL_144;
          }
          uint64_t v119 = v14;
          uint64_t v120 = v14 + 32;
          uint64_t v121 = *(void *)&v14[16 * v118 + 32];
          uint64_t v122 = *(void *)&v14[16 * v15 + 24];
          sub_10023DE8C( (char *)(v117 + 40 * v121),  (char *)(v117 + 40LL * *(void *)&v120[16 * v15 - 16]),  v117 + 40 * v122,  v134);
          if (v116) {
            goto LABEL_100;
          }
          if (v122 < v121) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v119) & 1) == 0) {
            uint64_t v119 = sub_1003CBA90((uint64_t)v119);
          }
          if (v118 >= *((void *)v119 + 2)) {
            goto LABEL_134;
          }
          uint64_t v123 = &v119[16 * v118 + 32];
          *(void *)uint64_t v123 = v121;
          *((void *)v123 + 1) = v122;
          unint64_t v124 = *((void *)v119 + 2);
          if (v15 > v124) {
            goto LABEL_135;
          }
          uint64_t v14 = v119;
          memmove(&v119[16 * v15 + 16], &v119[16 * v15 + 32], 16 * (v124 - v15));
          *((void *)v119 + 2) = v124 - 1;
          unint64_t v15 = v124 - 1;
        }

        while (v124 > 2);
      }

      swift_bridgeObjectRelease();
      v125[2] = 0LL;
      return swift_bridgeObjectRelease();
    }
  }

  else
  {
    uint64_t v10 = v9 >> 1;
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009B1380);
    uint64_t v12 = static Array._allocateBufferUninitialized(minimumCapacity:)(v10, v11);
    *(void *)(v12 + swift_weakDestroy(v0 + 16) = v10;
    unint64_t v125 = (void *)v12;
    uint64_t v134 = (char *)(v12 + 32);
  }

  Swift::Int v13 = 0LL;
  uint64_t v14 = (char *)_swiftEmptyArrayStorage;
  uint64_t v135 = a1;
  unint64_t v131 = v6;
  uint64_t v132 = v4;
  while (1)
  {
    Swift::Int v16 = v13++;
    Swift::Int v130 = v16;
    if (v13 >= v7) {
      break;
    }
    uint64_t v17 = *a1;
    sub_100013044(*a1 + 40 * v13, (uint64_t)&v141);
    uint64_t v18 = v17;
    sub_100013044(v17 + 40 * v16, (uint64_t)v138);
    Swift::Int v133 = v7;
    uint64_t v20 = v142;
    uint64_t v19 = v143;
    sub_100012ED8(&v141, v142);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v19);
    uint64_t v21 = v139;
    uint64_t v22 = v140;
    sub_100012ED8(v138, v139);
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    uint64_t v24 = v22;
    Swift::Int v7 = v133;
    v23(v21, v24);
    LODWORD(v129) = static Date.< infix(_:_:)(v6, v4);
    uint64_t v25 = *(char **)(v137 + 8);
    uint64_t v26 = v144;
    ((void (*)(char *, uint64_t))v25)(v4, v144);
    uint64_t v128 = v25;
    ((void (*)(char *, uint64_t))v25)(v6, v26);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v138);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v141);
    uint64_t v127 = v18;
    if (v16 + 2 >= v7)
    {
      Swift::Int v13 = v16 + 2;
    }

    else
    {
      uint64_t v27 = v18 + 40 * v16 + 40;
      Swift::Int v13 = v16 + 2;
      while (1)
      {
        uint64_t v28 = v27 + 40;
        sub_100013044(v27 + 40, (uint64_t)&v141);
        sub_100013044(v27, (uint64_t)v138);
        uint64_t v30 = v142;
        uint64_t v29 = v143;
        sub_100012ED8(&v141, v142);
        (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v29);
        uint64_t v31 = v139;
        uint64_t v32 = v140;
        sub_100012ED8(v138, v139);
        (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v32);
        LODWORD(v31) = static Date.< infix(_:_:)(v6, v4);
        uint64_t v33 = v144;
        int v34 = v128;
        ((void (*)(char *, uint64_t))v128)(v4, v144);
        ((void (*)(char *, uint64_t))v34)(v6, v33);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v138);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v141);
        ++v13;
        uint64_t v27 = v28;
        Swift::Int v7 = v133;
        if (v133 == v13)
        {
          Swift::Int v13 = v133;
          goto LABEL_23;
        }
      }

      Swift::Int v7 = v133;
    }

LABEL_84:
        if ((v87 & 1) != 0) {
          goto LABEL_124;
        }
        BOOL v95 = &v62[16 * v64];
        uint64_t v97 = *(void *)v95;
        uint64_t v96 = *((void *)v95 + 1);
        BOOL v75 = __OFSUB__(v96, v97);
        uint64_t v98 = v96 - v97;
        if (v75) {
          goto LABEL_127;
        }
        if (v98 < v86) {
          goto LABEL_14;
        }
LABEL_92:
        unint64_t v103 = v64 - 1;
        if (v64 - 1 >= v15)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }

        uint64_t v104 = *a1;
        if (!*a1) {
          goto LABEL_142;
        }
        Swift::Int v105 = v13;
        unint64_t v106 = v14;
        uint64_t v107 = &v62[16 * v103];
        uint64_t v108 = *(void *)v107;
        uint64_t v109 = v62;
        unint64_t v110 = v64;
        uint64_t v111 = &v62[16 * v64];
        uint64_t v112 = *((void *)v111 + 1);
        uint64_t v113 = v136;
        sub_10023DE8C( (char *)(v104 + 40LL * *(void *)v107),  (char *)(v104 + 40LL * *(void *)v111),  v104 + 40 * v112,  v134);
        uint64_t v136 = v113;
        if (v113)
        {
LABEL_100:
          uint64_t v115 = v125;
          swift_bridgeObjectRelease();
          v115[2] = 0LL;
          return swift_bridgeObjectRelease();
        }

        if (v112 < v108) {
          goto LABEL_117;
        }
        if (v110 > *((void *)v106 + 2)) {
          goto LABEL_118;
        }
        *(void *)uint64_t v107 = v108;
        *(void *)&v109[16 * v103 + 8] = v112;
        unint64_t v114 = *((void *)v106 + 2);
        if (v110 >= v114) {
          goto LABEL_119;
        }
        uint64_t v14 = v106;
        unint64_t v15 = v114 - 1;
        memmove(v111, v111 + 16, 16 * (v114 - 1 - v110));
        unint64_t v62 = v109;
        *((void *)v106 + 2) = v114 - 1;
        BOOL v92 = v114 > 2;
        a1 = v135;
        Swift::Int v13 = v105;
        uint64_t v6 = v131;
        uint64_t v4 = v132;
        if (!v92) {
          goto LABEL_14;
        }
      }
    }

    unint64_t v15 = 1LL;
    a1 = v135;
LABEL_14:
    Swift::Int v7 = a1[1];
    if (v13 >= v7) {
      goto LABEL_103;
    }
  }

  if (v13 >= v7) {
    goto LABEL_52;
  }
LABEL_33:
  if (__OFSUB__(v13, v16)) {
    goto LABEL_136;
  }
  if (v13 - v16 >= v126) {
    goto LABEL_52;
  }
  if (__OFADD__(v16, v126)) {
    goto LABEL_139;
  }
  if (v16 + v126 >= v7) {
    Swift::Int v46 = v7;
  }
  else {
    Swift::Int v46 = v16 + v126;
  }
  if (v46 >= v16)
  {
    if (v13 != v46)
    {
      uint64_t v128 = v14;
      Swift::Int v129 = v46;
      uint64_t v47 = 40 * v13 - 40;
      do
      {
        Swift::Int v133 = v47;
        while (1)
        {
          Swift::Int v48 = v13;
          uint64_t v49 = *a1 + v47;
          sub_100013044(v49 + 40, (uint64_t)&v141);
          sub_100013044(v49, (uint64_t)v138);
          uint64_t v50 = a1;
          uint64_t v51 = v142;
          uint64_t v52 = v143;
          sub_100012ED8(&v141, v142);
          (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v52);
          uint64_t v53 = v139;
          uint64_t v54 = v140;
          sub_100012ED8(v138, v139);
          (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v54);
          LOBYTE(v53) = static Date.< infix(_:_:)(v6, v4);
          uint64_t v55 = *(void (**)(char *, uint64_t))(v137 + 8);
          uint64_t v56 = v144;
          v55(v4, v144);
          v55(v6, v56);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v138);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v141);
          if ((v53 & 1) == 0) {
            break;
          }
          uint64_t v57 = *v50;
          if (!*v50) {
            goto LABEL_141;
          }
          a1 = v50;
          uint64_t v58 = v57 + v47;
          sub_100012EC0((__int128 *)(v57 + v47 + 40), (uint64_t)&v141);
          __int128 v59 = *(_OWORD *)(v58 + 16);
          *(_OWORD *)(v58 + 4sub_100032838(0, 7LL, 0) = *(_OWORD *)v58;
          *(_OWORD *)(v58 + 56) = v59;
          *(void *)(v58 + 72) = *(void *)(v58 + 32);
          sub_100012EC0(&v141, v58);
          v47 -= 40LL;
          ++v16;
          Swift::Int v13 = v48;
          if (v48 == v16) {
            goto LABEL_43;
          }
        }

        a1 = v50;
        Swift::Int v13 = v48;
LABEL_43:
        ++v13;
        uint64_t v47 = v133 + 40;
        Swift::Int v16 = v130;
      }

      while (v13 != v129);
      Swift::Int v13 = v129;
      uint64_t v14 = v128;
    }

    goto LABEL_52;
  }

                  if (qword_10099B5E0 != -1) {
                    swift_once(&qword_10099B5E0, sub_1005C6624);
                  }
                  uint64_t v86 = type metadata accessor for Logger(0LL);
                  char v87 = sub_10000A720(v86, (uint64_t)qword_100A2AE08);
                  BOOL v88 = (os_log_s *)Logger.logObject.getter(v87);
                  uint64_t v89 = static os_log_type_t.error.getter(v88);
                  if (os_log_type_enabled(v88, v89))
                  {
                    uint64_t v90 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                    *(_WORD *)uint64_t v90 = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v88,  v89,  "FetchConfig unable to parse locationCacheValidityThreshold from server config response",  v90,  2u);
                    swift_slowDealloc(v90, -1LL, -1LL);
                  }

                  uint64_t v24 = 1;
LABEL_89:
                  if (!*(void *)(v12 + 16)) {
                    goto LABEL_108;
                  }
                  uint64_t v91 = sub_10030CF14(0xD000000000000016LL, 0x800000010084DF90LL);
                  if ((v92 & 1) == 0) {
                    goto LABEL_108;
                  }
                  sub_10006A650(*(void *)(v12 + 56) + 32 * v91, (uint64_t)&v282);
                  uint64_t v93 = swift_dynamicCast( &v242,  &v282,  (char *)&type metadata for Any + 8,  &type metadata for String,  6LL);
                  if ((v93 & 1) == 0) {
                    goto LABEL_108;
                  }
                  uint64_t v94 = v243;
                  uint64_t v242 = 0LL;
                  __chkstk_darwin(v93);
                  unint64_t v213 = &v242;
                  if ((v94 & 0x1000000000000000LL) != 0 || !(v94 & 0x2000000000000000LL | v95 & 0x1000000000000000LL))
                  {
                    _StringGuts._slowWithCString<A>(_:)(&v241, sub_1003389C4, v212);
                  }

                  else
                  {
                    if ((v94 & 0x2000000000000000LL) != 0)
                    {
                      *(void *)&uint64_t v282 = v95;
                      *((void *)&v282 + 1) = v94 & 0xFFFFFFFFFFFFFFLL;
                      uint64_t v98 = (v95 >= 0x21u || ((0x100003E01uLL >> v95) & 1) == 0)
                         && (uint64_t v97 = (_BYTE *)_swift_stdlib_strtod_clocale(&v282, &v242)) != 0LL
                         && *v97 == 0;
                      uint64_t v241 = v98;
                      swift_bridgeObjectRelease();
LABEL_106:
                      if ((v241 & 1) != 0)
                      {
                        Swift::Int v16 = v242;
                        goto LABEL_113;
                      }

    __int128 v306 = 0LL;
    uint64_t v307 = 0LL;
    v689 = 0LL;
    v690 = 0LL;
    uint64_t v340 = v741;
    unint64_t v341 = v760;
LABEL_85:
    v760 = (uint64_t (*)(void, void, void))(v340 & 0xDFFFFFFFFFFFFFFFLL);
    unint64_t v342 = (dispatch_queue_s *)sub_1007C323C((unint64_t)v341, (unint64_t)v198, v771, v772);
    uint64_t v343 = *((void *)v342 + 2);
    v688 = v307;
    v687 = v306;
    v758 = v342;
    if (v343 < 2)
    {
      uint64_t v355 = v342;
    }

    else
    {
      uint64_t v344 = static os_log_type_t.default.getter(v342);
      uint64_t v345 = qword_100A2A8F0;
      uint64_t v346 = swift_allocObject(v754, 192LL, 7LL);
      *(_OWORD *)(v346 + swift_weakDestroy(v0 + 16) = xmmword_1007E8290;
      *(void *)(v346 + 56) = &type metadata for Int;
      *(void *)(v346 + 64) = &protocol witness table for Int;
      *(void *)(v346 + 32) = v343;
      uint64_t v347 = UUID.uuidString.getter(v346);
      uint64_t v348 = v755;
      *(void *)(v346 + 96) = &type metadata for String;
      *(void *)(v346 + 104) = v348;
      *(void *)(v346 + 72) = v347;
      *(void *)(v346 + 8sub_100032838(0, 7LL, 0) = v349;
      v780 = (uint64_t)v198;
      v781 = (unint64_t)v341;
      unint64_t aBlock = 0LL;
      v774 = 0xE000000000000000LL;
      _print_unlocked<A, B>(_:_:)( &v781,  &aBlock,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      v350._countAndFlagsBits = 3026478LL;
      v350._object = (void *)0xE300000000000000LL;
      String.append(_:)(v350);
      _print_unlocked<A, B>(_:_:)( &v780,  &aBlock,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      v351 = aBlock;
      v352 = v774;
      *(void *)(v346 + 136) = &type metadata for String;
      *(void *)(v346 + 144) = v348;
      *(void *)(v346 + 112) = v351;
      *(void *)(v346 + 12sub_100032838(0, 7LL, 0) = v352;
      if (v732)
      {
        if (v732 == 1)
        {
          uint64_t v353 = 0x61646E6F6365732ELL;
          uint64_t v354 = 0xEA00000000007972LL;
        }

        else
        {
          uint64_t v354 = 0x80000001008533C0LL;
          uint64_t v353 = 0xD000000000000010LL;
        }

        uint64_t v161 = v768;
      }

      else
      {
        uint64_t v354 = 0xE800000000000000LL;
        uint64_t v161 = v768;
        uint64_t v353 = 0x7972616D6972702ELL;
      }

      uint64_t v355 = v758;
      *(void *)(v346 + 176) = &type metadata for String;
      *(void *)(v346 + 184) = v348;
      *(void *)(v346 + 152) = v353;
      *(void *)(v346 + 16sub_100032838(0, 7LL, 0) = v354;
      os_log(_:dso:log:_:_:)( v344,  &_mh_execute_header,  v345,  "Using %d sub-builds to satisfy request for %@: %@ - %@",  54LL,  2LL,  v346);
      swift_bridgeObjectRelease();
      uint64_t v343 = *((void *)v355 + 2);
    }

    __int128 v170 = _swiftEmptyArrayStorage;
    if (v343)
    {
      uint64_t v356 = (unint64_t *)((char *)v355 + 40);
      uint64_t v357 = v767;
      v358 = v761;
      uint64_t v359 = v760;
      do
      {
        uint64_t v360 = *(v356 - 1);
        v361 = *v356;
        os_log_t v362 = swift_allocObject(&unk_10097A0D0, 96LL, 7LL);
        v771 = v361;
        v772 = v360;
        *(void *)(v362 + swift_weakDestroy(v0 + 16) = v360;
        *(void *)(v362 + 24) = v361;
        v364 = (uint64_t (*)(void, void, void))v762;
        uint64_t v363 = v763;
        *(void *)(v362 + 32) = v763;
        *(void *)(v362 + 4sub_100032838(0, 7LL, 0) = v364;
        *(void *)(v362 + 48) = v357;
        *(void *)(v362 + 56) = v358;
        os_log_type_t v365 = v764;
        *(void *)(v362 + 64) = v764;
        *(void *)(v362 + 72) = v359;
        *(_BYTE *)(v362 + 8sub_100032838(0, 7LL, 0) = 0;
        *(void *)(v362 + 88) = v713;
        swift_retain();
        sub_10001736C(v363, (unint64_t)v364);
        sub_10001736C((uint64_t)v357, v358);
        sub_10001736C((uint64_t)v365, (unint64_t)v359);
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native(v170) & 1) != 0) {
          os_log_t v366 = v170;
        }
        else {
          os_log_t v366 = sub_1004C6DBC(0LL, v170[2] + 1LL, 1, v170);
        }
        uint64_t v368 = v366[2];
        uint64_t v367 = v366[3];
        if (v368 >= v367 >> 1) {
          os_log_t v366 = sub_1004C6DBC((void *)(v367 > 1), v368 + 1, 1, v366);
        }
        v356 += 2;
        v366[2] = v368 + 1;
        uint64_t v369 = &v366[5 * v368];
        uint64_t v370 = v771;
        v369[4] = v772;
        v369[5] = v370;
        v369[6] = sub_1007C36A8;
        v369[7] = v362;
        *((_BYTE *)v369 + 64) = 0;
        __int128 v170 = v366;
        swift_release(v362);
        --v343;
        uint64_t v161 = v768;
      }

      while (v343);
    }

    swift_bridgeObjectRelease();
    sub_100016F9C((uint64_t)v764, (unint64_t)v760);
    sub_100016F9C((uint64_t)v767, v761);
    sub_100016F9C(v763, (unint64_t)v762);
    v693 = 0LL;
    v694 = 0LL;
    v691 = 0LL;
    uint64_t v299 = &v723;
    goto LABEL_104;
  }

  sub_1007B9058(*v160, v160[1], (uint64_t)v166, v160[3], (uint64_t)v168, v169);
  __int128 v170 = (void *)v164;
  int v172 = v771;
  os_log_type_t v171 = v772;
  uint64_t v173 = sub_1003D8270((unint64_t)v760, (unint64_t)v758, v771, v772);
  uint64_t v175 = v174;
  uint64_t v176 = (void *)swift_allocObject(&unk_10097A328, 48LL, 7LL);
  v176[2] = v172;
  v176[3] = v171;
  unsigned int v177 = (uint64_t)v176;
  uint64_t v178 = v713;
  v176[4] = v170;
  v176[5] = v178;
  uint64_t v179 = v175 - v173;
  if (v175 >= v173)
  {
  }

  else
  {
    if ((uint64_t)(v173 - v175) < 0)
    {
      __break(1u);
LABEL_224:
      __break(1u);
LABEL_225:
      __break(1u);
LABEL_226:
      __break(1u);
LABEL_227:
      __break(1u);
LABEL_228:
      __break(1u);
LABEL_229:
      __break(1u);
LABEL_230:
      __break(1u);
LABEL_231:
      __break(1u);
LABEL_232:
      __break(1u);
LABEL_233:
      __break(1u);
    }

    uint64_t v179 = v175 - v173;
  }

  uint64_t v182 = v179 + 1;
  if (__OFADD__(v179, 1LL))
  {
    __break(1u);
  }

  else
  {
    uint64_t v183 = swift_retain();
    if (v182 < 1345)
    {
      v693 = 0LL;
      v694 = 0LL;
      v691 = 0LL;
      v692 = 0LL;
    }

    else
    {
      v763 = v177;
      LODWORD(v767) = static os_log_type_t.default.getter(v183);
      v764 = (dispatch_queue_t)qword_100A2A8F0;
      uint64_t v184 = swift_allocObject(v754, 192LL, 7LL);
      *(_OWORD *)(v184 + swift_weakDestroy(v0 + 16) = xmmword_1007E8290;
      v780 = v175;
      v781 = v173;
      unint64_t aBlock = 0LL;
      v774 = 0xE000000000000000LL;
      _print_unlocked<A, B>(_:_:)( &v781,  &aBlock,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      v185._countAndFlagsBits = 3026478LL;
      v185._object = (void *)0xE300000000000000LL;
      String.append(_:)(v185);
      uint64_t v186 = _print_unlocked<A, B>(_:_:)( &v780,  &aBlock,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      uint64_t v187 = aBlock;
      unint64_t v188 = v774;
      os_log_t v189 = v755;
      *(void *)(v184 + 56) = &type metadata for String;
      *(void *)(v184 + 64) = v189;
      *(void *)(v184 + 32) = v187;
      *(void *)(v184 + 4sub_100032838(0, 7LL, 0) = v188;
      unint64_t v190 = UUID.uuidString.getter(v186);
      *(void *)(v184 + 96) = &type metadata for String;
      *(void *)(v184 + 104) = v189;
      *(void *)(v184 + 72) = v190;
      *(void *)(v184 + 8sub_100032838(0, 7LL, 0) = v191;
      v780 = v772;
      v781 = v771;
      unint64_t aBlock = 0LL;
      v774 = 0xE000000000000000LL;
      _print_unlocked<A, B>(_:_:)( &v781,  &aBlock,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      v192._countAndFlagsBits = 3026478LL;
      v192._object = (void *)0xE300000000000000LL;
      String.append(_:)(v192);
      _print_unlocked<A, B>(_:_:)( &v780,  &aBlock,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      uint64_t v193 = aBlock;
      uint64_t v194 = v774;
      *(void *)(v184 + 136) = &type metadata for String;
      *(void *)(v184 + 144) = v189;
      *(void *)(v184 + 112) = v193;
      *(void *)(v184 + 12sub_100032838(0, 7LL, 0) = v194;
      if (v732)
      {
        uint64_t v195 = v705;
        os_log_type_t v196 = v761;
        uint64_t v197 = v737;
        if (v732 == 1)
        {
          unsigned __int8 v233 = 0x61646E6F6365732ELL;
          uint64_t v232 = 0xEA00000000007972LL;
        }

        else
        {
          uint64_t v232 = 0x80000001008533C0LL;
          unsigned __int8 v233 = 0xD000000000000010LL;
        }
      }

      else
      {
        uint64_t v232 = 0xE800000000000000LL;
        uint64_t v195 = v705;
        unsigned __int8 v233 = 0x7972616D6972702ELL;
        os_log_type_t v196 = v761;
        uint64_t v197 = v737;
      }

      os_log_type_t v234 = v767;
      uint64_t v235 = v764;
      *(void *)(v184 + 176) = &type metadata for String;
      *(void *)(v184 + 184) = v189;
      *(void *)(v184 + 152) = v233;
      *(void *)(v184 + 16sub_100032838(0, 7LL, 0) = v232;
      os_log(_:dso:log:_:_:)( v234,  &_mh_execute_header,  v235,  "Large hole %@ would be created for %@: %@ - %@",  46LL,  2LL,  v184);
      swift_bridgeObjectRelease();
      uint64_t v236 = (uint64_t (*)(void, void, void))v762;
      sub_1007B7A84((uint64_t)v762, v196, v195);
      sub_10001581C((uint64_t)v236, v197, (uint64_t *)&unk_1009A34D0);
      uint64_t v237 = v759;
      uint64_t v238 = *(dispatch_queue_s **)(v759 + 48);
      uint64_t v161 = v768;
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v238)(v197, 1LL, v768) == 1)
      {
        sub_100015794(v197, (uint64_t *)&unk_1009A34D0);
        uint64_t v239 = 0LL;
        uint64_t v240 = 0LL;
        uint64_t v241 = (uint64_t)v736;
      }

      else
      {
        v764 = v238;
        uint64_t v242 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v237 + 32);
        uint64_t v243 = v242(v738, v197, v161);
        uint64_t v244 = static os_log_type_t.default.getter(v243);
        uint64_t v245 = qword_100A2A8F0;
        uint64_t v246 = swift_allocObject(v754, 72LL, 7LL);
        *(_OWORD *)(v246 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
        int v247 = URL.path.getter(v246);
        *(void *)(v246 + 56) = &type metadata for String;
        *(void *)(v246 + 64) = v189;
        *(void *)(v246 + 32) = v247;
        *(void *)(v246 + 4sub_100032838(0, 7LL, 0) = v248;
        os_log(_:dso:log:_:_:)(v244, &_mh_execute_header, v245, "Deleting  %@", 12LL, 2LL, v246);
        swift_bridgeObjectRelease();
        uint64_t v249 = [(id)objc_opt_self(NSFileManager) defaultManager];
        URL._bridgeToObjectiveC()(v250);
        os_log_t v252 = v251;
        unint64_t aBlock = 0LL;
        LODWORD(v245) = [v249 removeItemAtURL:v251 error:&aBlock];

        id v253 = aBlock;
        uint64_t v254 = (void (*)(uint64_t, char *, uint64_t))v242;
        if ((_DWORD)v245)
        {
          uint64_t v255 = aBlock;
        }

        else
        {
          uint64_t v256 = aBlock;
          unint64_t v257 = _convertNSErrorToError(_:)(v253);

          swift_willThrow(v258);
          swift_errorRelease(v257);
          v751 = 0LL;
        }

        uint64_t v259 = v713;
        v767 = *(dispatch_queue_t *)((char *)v713 + OBJC_IVAR____TtC12searchpartyd16BeaconKeyManager_publishQueue);
        id v260 = v759;
        uint64_t v261 = v740;
        uint64_t v262 = v738;
        uint64_t v263 = v768;
        (*(void (**)(char *, unint64_t, uint64_t))(v759 + 16))(v740, v738, v768);
        unint64_t v264 = *(unsigned __int8 *)(v260 + 80);
        uint64_t v265 = (v264 + 24) & ~v264;
        uint64_t v240 = swift_allocObject(&unk_10097A3C8, v265 + v756, v264 | 7);
        *(void *)(v240 + swift_weakDestroy(v0 + 16) = v259;
        v254(v240 + v265, v261, v263);
        uint64_t v266 = swift_allocObject(&unk_10097A3F0, 32LL, 7LL);
        uint64_t v239 = sub_1007C3C54;
        *(void *)(v266 + swift_weakDestroy(v0 + 16) = sub_1007C3C54;
        *(void *)(v266 + 24) = v240;
        v777 = sub_100154688;
        v778 = v266;
        unint64_t aBlock = _NSConcreteStackBlock;
        v774 = 1107296256LL;
        v775 = sub_100025BD4;
        v776 = &unk_10097A408;
        unint64_t v267 = _Block_copy(&aBlock);
        __int128 v268 = v778;
        uint64_t v161 = v263;
        swift_retain();
        swift_retain();
        swift_release(v268);
        dispatch_sync(v767, v267);
        _Block_release(v267);
        (*(void (**)(unint64_t, uint64_t))(v260 + 8))(v262, v263);
        LOBYTE(v262) = swift_isEscapingClosureAtFileLocation(v266, "", 104LL, 2769LL, 39LL, 1LL);
        swift_release(v266);
        if ((v262 & 1) != 0) {
          goto LABEL_226;
        }
        os_log_type_t v196 = v761;
        uint64_t v241 = (uint64_t)v736;
        uint64_t v238 = v764;
      }

      sub_10001581C(v196, v241, (uint64_t *)&unk_1009A34D0);
      __int128 v269 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v238)(v241, 1LL, v161);
      v694 = v240;
      v693 = v239;
      if (v269 == 1)
      {
        sub_100015794(v196, (uint64_t *)&unk_1009A34D0);
        sub_100015794((uint64_t)v762, (uint64_t *)&unk_1009A34D0);
        sub_100015794(v241, (uint64_t *)&unk_1009A34D0);
        v691 = 0LL;
        v692 = 0LL;
      }

      else
      {
        v767 = *(dispatch_queue_t *)(v759 + 32);
        __int128 v270 = ((uint64_t (*)(char *, uint64_t, uint64_t))v767)(v735, v241, v161);
        int v271 = static os_log_type_t.default.getter(v270);
        uint64_t v272 = qword_100A2A8F0;
        uint64_t v273 = swift_allocObject(v754, 72LL, 7LL);
        *(_OWORD *)(v273 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
        uint64_t v274 = URL.path.getter(v273);
        uint64_t v275 = v755;
        *(void *)(v273 + 56) = &type metadata for String;
        *(void *)(v273 + 64) = v275;
        *(void *)(v273 + 32) = v274;
        *(void *)(v273 + 4sub_100032838(0, 7LL, 0) = v276;
        os_log(_:dso:log:_:_:)(v271, &_mh_execute_header, v272, "Deleting  %@", 12LL, 2LL, v273);
        swift_bridgeObjectRelease();
        uint64_t v277 = [(id)objc_opt_self(NSFileManager) defaultManager];
        URL._bridgeToObjectiveC()(v278);
        uint64_t v280 = v279;
        unint64_t aBlock = 0LL;
        LODWORD(v272) = [v277 removeItemAtURL:v279 error:&aBlock];

        uint64_t v281 = aBlock;
        if ((_DWORD)v272)
        {
          uint64_t v282 = aBlock;
        }

        else
        {
          uint64_t v283 = aBlock;
          unint64_t v284 = _convertNSErrorToError(_:)(v281);

          swift_willThrow(v285);
          swift_errorRelease(v284);
          v751 = 0LL;
        }

        uint64_t v286 = v713;
        v764 = *(dispatch_queue_t *)((char *)v713 + OBJC_IVAR____TtC12searchpartyd16BeaconKeyManager_publishQueue);
        uint64_t v287 = v759;
        uint64_t v288 = v740;
        uint64_t v289 = v735;
        uint64_t v290 = v768;
        (*(void (**)(char *, char *, uint64_t))(v759 + 16))(v740, v735, v768);
        unint64_t v291 = *(unsigned __int8 *)(v287 + 80);
        uint64_t v292 = (v291 + 24) & ~v291;
        unint64_t v293 = swift_allocObject(&unk_10097A350, v292 + v756, v291 | 7);
        *(void *)(v293 + swift_weakDestroy(v0 + 16) = v286;
        ((void (*)(uint64_t, char *, uint64_t))v767)(v293 + v292, v288, v290);
        os_log_t v294 = swift_allocObject(&unk_10097A378, 32LL, 7LL);
        v691 = sub_1007C3C54;
        *(void *)(v294 + swift_weakDestroy(v0 + 16) = sub_1007C3C54;
        *(void *)(v294 + 24) = v293;
        v692 = v293;
        v777 = sub_100154688;
        v778 = v294;
        unint64_t aBlock = _NSConcreteStackBlock;
        v774 = 1107296256LL;
        v775 = sub_100025BD4;
        v776 = &unk_10097A390;
        uint64_t v295 = _Block_copy(&aBlock);
        uint64_t v296 = v778;
        uint64_t v161 = v290;
        swift_retain();
        swift_retain();
        swift_release(v296);
        dispatch_sync(v764, v295);
        _Block_release(v295);
        (*(void (**)(char *, uint64_t))(v287 + 8))(v289, v290);
        sub_100015794(v761, (uint64_t *)&unk_1009A34D0);
        sub_100015794((uint64_t)v762, (uint64_t *)&unk_1009A34D0);
        LOBYTE(v289) = swift_isEscapingClosureAtFileLocation(v294, "", 104LL, 2775LL, 39LL, 1LL);
        swift_release(v294);
      }

      unsigned int v177 = v763;
    }

    swift_retain();
    __int128 v170 = sub_1004C6DBC(0LL, 1LL, 1, _swiftEmptyArrayStorage);
    uint64_t v173 = v170[2];
    uint64_t v179 = v170[3];
    os_log_type_t v171 = v173 + 1;
    if (v173 < v179 >> 1) {
      goto LABEL_71;
    }
  }

  __int128 v170 = sub_1004C6DBC((void *)(v179 > 1), v171, 1, v170);
LABEL_71:
  v170[2] = v171;
  uint64_t v297 = &v170[5 * v173];
  unint64_t v298 = v772;
  v297[4] = v771;
  v297[5] = v298;
  v297[6] = sub_1007C3CB4;
  v297[7] = v177;
  *((_BYTE *)v297 + 64) = 0;
  swift_release(v177);
  v687 = 0LL;
  v688 = 0LL;
  v689 = 0LL;
  uint64_t v299 = &v721;
LABEL_104:
  *(v299 - 32) = 0LL;
  v781 = 0LL;
  unint64_t v371 = v170[2];
  v372 = (uint64_t)v725;
  if (!v371)
  {
    swift_bridgeObjectRelease();
    uint64_t v109 = *(char **)(v759 + 8);
    goto LABEL_206;
  }

  v741 = v756 + 7;
  v740 = (char *)(v750 + 7);
  v685 = v742 + 7;
  v684 = v170;
  v373 = (unsigned __int8 *)(v170 + 8);
  LODWORD(v715) = v739 & 1;
  v710 = " beaconInformation: ";
  v729 = xmmword_1007E67D0;
  v681 = xmmword_1007E8290;
  while (1)
  {
    v734 = v371;
    uint64_t v380 = *((void *)v373 - 3);
    uint64_t v381 = (uint64_t (*)(void, void, void))*((void *)v373 - 2);
    v771 = *((void *)v373 - 4);
    v772 = v380;
    uint64_t v382 = *((void *)v373 - 1);
    v733 = v373;
    uint64_t v383 = *v373;
    v384 = (uint64_t)v728;
    v385 = *((_BYTE *)v728 + v766);
    sub_10001DC4C((uint64_t)v728, v372, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
    if ((v385 & 1) != 0) {
      __int128 v386 = 0;
    }
    else {
      __int128 v386 = *(unsigned __int8 *)(v372 + v731[8]);
    }
    sub_1007C36E8((uint64_t)v381, v382);
    v760 = v381;
    sub_1007C36E8((uint64_t)v381, v382);
    sub_100018C68(v372, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
    v387 = v730;
    v388 = v732;
    uint64_t v389 = (char)v715;
    v763 = sub_1007B69E0(v730, v732, (int)v715, v386);
    v764 = v390;
    v392 = v391;
    __int128 v393 = (uint64_t)v743;
    sub_1007A46B4(v387, v388, 0, v389);
    sub_1007B7A84(v769, v765, v393);
    LODWORD(v387) = *(unsigned __int8 *)(v384 + v766);
    uint64_t v394 = v719;
    sub_10001DC4C(v384, v719, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
    LODWORD(v767) = v383;
    v761 = v382;
    if ((_DWORD)v387 != 1)
    {
      sub_100018C68(v394, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
LABEL_120:
      v413 = *(unsigned __int8 *)(v384 + v766);
      v414 = v714;
      sub_10001DC4C(v384, v714, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
      if (v413 == 1)
      {
        uint64_t v415 = *(_BYTE *)(v414 + v731[8]);
        v416 = sub_100018C68(v414, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
        if ((v415 & 1) == 0)
        {
          if ((v392 & 1) != 0) {
            goto LABEL_125;
          }
          v417 = v707;
          sub_10001581C(v765, v707, (uint64_t *)&unk_1009A34D0);
          v418 = v759;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v759 + 48))(v417, 1LL, v161) == 1)
          {
            v416 = sub_100015794(v417, (uint64_t *)&unk_1009A34D0);
LABEL_125:
            LODWORD(v764) = static os_log_type_t.default.getter(v416);
            v419 = qword_100A2A8F0;
            v420 = swift_allocObject(v754, 152LL, 7LL);
            *(_OWORD *)(v420 + swift_weakDestroy(v0 + 16) = v712;
            v421 = UUID.uuidString.getter(v420);
            uint64_t v422 = v755;
            *(void *)(v420 + 56) = &type metadata for String;
            *(void *)(v420 + 64) = v422;
            *(void *)(v420 + 32) = v421;
            *(void *)(v420 + 4sub_100032838(0, 7LL, 0) = v423;
            v779 = v772;
            v780 = v771;
            unint64_t aBlock = 0LL;
            v774 = 0xE000000000000000LL;
            _print_unlocked<A, B>(_:_:)( &v780,  &aBlock,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
            v424._countAndFlagsBits = 3026478LL;
            v424._object = (void *)0xE300000000000000LL;
            String.append(_:)(v424);
            _print_unlocked<A, B>(_:_:)( &v779,  &aBlock,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
            uint64_t v425 = aBlock;
            uint64_t v426 = v774;
            *(void *)(v420 + 96) = &type metadata for String;
            *(void *)(v420 + 104) = v422;
            *(void *)(v420 + 72) = v425;
            *(void *)(v420 + 8sub_100032838(0, 7LL, 0) = v426;
            if (v732)
            {
              v427 = (uint64_t)v747;
              uint64_t v428 = v161;
              if (v732 == 1)
              {
                v478 = 0x61646E6F6365732ELL;
                v477 = 0xEA00000000007972LL;
              }

              else
              {
                v477 = (unint64_t)v710 | 0x8000000000000000LL;
                v478 = 0xD000000000000010LL;
              }
            }

            else
            {
              uint64_t v428 = v161;
              v477 = 0xE800000000000000LL;
              v478 = 0x7972616D6972702ELL;
              v427 = (uint64_t)v747;
            }

            v479 = v764;
            *(void *)(v420 + 136) = &type metadata for String;
            *(void *)(v420 + 144) = v422;
            *(void *)(v420 + 112) = v478;
            *(void *)(v420 + 12sub_100032838(0, 7LL, 0) = v477;
            os_log(_:dso:log:_:_:)( v479,  &_mh_execute_header,  v419,  "Building keys for %@: %{public}@/%{public}@",  43LL,  2LL,  v420,  v681);
            goto LABEL_156;
          }

          v762 = *(__int128 **)(v418 + 32);
          v466 = ((uint64_t (*)(char *, uint64_t, uint64_t))v762)(v706, v417, v161);
          v467 = static os_log_type_t.default.getter(v466);
          v468 = qword_100A2A8F0;
          v469 = swift_allocObject(v754, 152LL, 7LL);
          *(_OWORD *)(v469 + swift_weakDestroy(v0 + 16) = v712;
          v470 = UUID.uuidString.getter(v469);
          v471 = v755;
          *(void *)(v469 + 56) = &type metadata for String;
          *(void *)(v469 + 64) = v471;
          *(void *)(v469 + 32) = v470;
          *(void *)(v469 + 4sub_100032838(0, 7LL, 0) = v472;
          v779 = v772;
          v780 = v771;
          unint64_t aBlock = 0LL;
          v774 = 0xE000000000000000LL;
          _print_unlocked<A, B>(_:_:)( &v780,  &aBlock,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
          v473._countAndFlagsBits = 3026478LL;
          v473._object = (void *)0xE300000000000000LL;
          String.append(_:)(v473);
          _print_unlocked<A, B>(_:_:)( &v779,  &aBlock,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
          v474 = v471;
          v475 = aBlock;
          v476 = v774;
          *(void *)(v469 + 96) = &type metadata for String;
          *(void *)(v469 + 104) = v471;
          *(void *)(v469 + 72) = v475;
          *(void *)(v469 + 8sub_100032838(0, 7LL, 0) = v476;
          if (v732)
          {
            uint64_t v410 = v726;
            if (v732 == 1)
            {
              v586 = 0x61646E6F6365732ELL;
              v585 = 0xEA00000000007972LL;
            }

            else
            {
              v585 = (unint64_t)v710 | 0x8000000000000000LL;
              v586 = 0xD000000000000010LL;
            }

            v584 = v759;
          }

          else
          {
            v585 = 0xE800000000000000LL;
            v586 = 0x7972616D6972702ELL;
            v584 = v759;
            uint64_t v410 = v726;
          }

          v587 = v467;
          v588 = (void (*)(char *, char *, uint64_t))v762;
          *(void *)(v469 + 136) = &type metadata for String;
          *(void *)(v469 + 144) = v474;
          *(void *)(v469 + 112) = v586;
          *(void *)(v469 + 12sub_100032838(0, 7LL, 0) = v585;
          os_log(_:dso:log:_:_:)( v587,  &_mh_execute_header,  v468,  "Updating keys for %@: %{public}@ - %{public}@",  45LL,  2LL,  v469,  v681);
          swift_bridgeObjectRelease();
          v589 = v753;
          v590 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v584 + 56);
          uint64_t v428 = v768;
          v590((char *)v753 + *(int *)(v410 + 20), 1LL, 1LL, v768);
          v591 = (char *)v589 + *(int *)(v410 + 24);
          v588(v591, v706, v428);
          v590(v591, 0LL, 1LL, v428);
          uint64_t v446 = 0LL;
          v592 = v764;
          *v589 = v763;
          v589[1] = v592;
LABEL_193:
          v427 = (uint64_t)v747;
          goto LABEL_158;
        }
      }

      else
      {
        sub_100018C68(v414, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
      }

      uint64_t v429 = *(_BYTE *)(v384 + v766);
      v430 = v384;
      v431 = v711;
      sub_10001DC4C(v430, v711, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
      if ((v429 & 1) != 0)
      {
        uint64_t v428 = v161;
        sub_100018C68(v431, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
      }

      else
      {
        v432 = *(_BYTE *)(v431 + v731[8]);
        uint64_t v396 = sub_100018C68(v431, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
        if ((v432 & 1) != 0)
        {
          if ((v392 & 1) != 0) {
            goto LABEL_136;
          }
          v397 = v701;
          sub_10001581C(v769, v701, (uint64_t *)&unk_1009A34D0);
          uint64_t v433 = v759;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v759 + 48))(v397, 1LL, v161) == 1)
          {
LABEL_135:
            uint64_t v396 = sub_100015794(v397, (uint64_t *)&unk_1009A34D0);
LABEL_136:
            LODWORD(v764) = static os_log_type_t.default.getter(v396);
            uint64_t v434 = qword_100A2A8F0;
            v435 = swift_allocObject(v754, 152LL, 7LL);
            *(_OWORD *)(v435 + swift_weakDestroy(v0 + 16) = v712;
            v436 = UUID.uuidString.getter(v435);
            uint64_t v437 = v755;
            *(void *)(v435 + 56) = &type metadata for String;
            *(void *)(v435 + 64) = v437;
            *(void *)(v435 + 32) = v436;
            *(void *)(v435 + 4sub_100032838(0, 7LL, 0) = v438;
            v779 = v772;
            v780 = v771;
            unint64_t aBlock = 0LL;
            v774 = 0xE000000000000000LL;
            _print_unlocked<A, B>(_:_:)( &v780,  &aBlock,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
            v439._countAndFlagsBits = 3026478LL;
            v439._object = (void *)0xE300000000000000LL;
            String.append(_:)(v439);
            _print_unlocked<A, B>(_:_:)( &v779,  &aBlock,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
            uint64_t v440 = aBlock;
            double v441 = v774;
            *(void *)(v435 + 96) = &type metadata for String;
            *(void *)(v435 + 104) = v437;
            *(void *)(v435 + 72) = v440;
            *(void *)(v435 + 8sub_100032838(0, 7LL, 0) = v441;
            if (v732)
            {
              v427 = (uint64_t)v747;
              uint64_t v428 = v161;
              if (v732 == 1)
              {
                uint64_t v448 = 0x61646E6F6365732ELL;
                __int128 v447 = 0xEA00000000007972LL;
              }

              else
              {
                __int128 v447 = (unint64_t)v710 | 0x8000000000000000LL;
                uint64_t v448 = 0xD000000000000010LL;
              }
            }

            else
            {
              uint64_t v428 = v161;
              __int128 v447 = 0xE800000000000000LL;
              uint64_t v448 = 0x7972616D6972702ELL;
              v427 = (uint64_t)v747;
            }

            v449 = v764;
            *(void *)(v435 + 136) = &type metadata for String;
            *(void *)(v435 + 144) = v437;
            *(void *)(v435 + 112) = v448;
            *(void *)(v435 + 12sub_100032838(0, 7LL, 0) = v447;
            os_log(_:dso:log:_:_:)( v449,  &_mh_execute_header,  v434,  "Building key maps for %@: %{public}@/%{public}@",  47LL,  2LL,  v435,  v681);
LABEL_156:
            swift_bridgeObjectRelease();
            uint64_t v446 = 1LL;
LABEL_157:
            uint64_t v410 = v726;
            goto LABEL_158;
          }

          v538 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v433 + 32);
          v539 = v538(v700, v397, v161);
          LODWORD(v762) = static os_log_type_t.default.getter(v539);
          v540 = qword_100A2A8F0;
          v541 = swift_allocObject(v754, 152LL, 7LL);
          *(_OWORD *)(v541 + swift_weakDestroy(v0 + 16) = v712;
          v542 = UUID.uuidString.getter(v541);
          v543 = v755;
          *(void *)(v541 + 56) = &type metadata for String;
          *(void *)(v541 + 64) = v543;
          *(void *)(v541 + 32) = v542;
          *(void *)(v541 + 4sub_100032838(0, 7LL, 0) = v544;
          v779 = v772;
          v780 = v771;
          unint64_t aBlock = 0LL;
          v774 = 0xE000000000000000LL;
          _print_unlocked<A, B>(_:_:)( &v780,  &aBlock,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
          v545._countAndFlagsBits = 3026478LL;
          v545._object = (void *)0xE300000000000000LL;
          String.append(_:)(v545);
          _print_unlocked<A, B>(_:_:)( &v779,  &aBlock,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
          v546 = v543;
          v547 = aBlock;
          v548 = v774;
          *(void *)(v541 + 96) = &type metadata for String;
          *(void *)(v541 + 104) = v543;
          *(void *)(v541 + 72) = v547;
          *(void *)(v541 + 8sub_100032838(0, 7LL, 0) = v548;
          if (v732)
          {
            uint64_t v410 = v726;
            v550 = v763;
            v549 = v764;
            if (v732 == 1)
            {
              v594 = 0x61646E6F6365732ELL;
              v593 = 0xEA00000000007972LL;
            }

            else
            {
              v593 = (unint64_t)v710 | 0x8000000000000000LL;
              v594 = 0xD000000000000010LL;
            }
          }

          else
          {
            v593 = 0xE800000000000000LL;
            v594 = 0x7972616D6972702ELL;
            uint64_t v410 = v726;
            v550 = v763;
            v549 = v764;
          }

          v595 = v762;
          *(void *)(v541 + 136) = &type metadata for String;
          *(void *)(v541 + 144) = v546;
          *(void *)(v541 + 112) = v594;
          *(void *)(v541 + 12sub_100032838(0, 7LL, 0) = v593;
          os_log(_:dso:log:_:_:)( v595,  &_mh_execute_header,  v540,  "Updating key maps for %@: %{public}@ - %{public}@",  49LL,  2LL,  v541,  v681);
          swift_bridgeObjectRelease();
          v596 = v753;
          v597 = (char *)v753 + *(int *)(v410 + 20);
          v598 = v768;
          v538(v597, (uint64_t)v700, v768);
          v599 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v759 + 56);
          v599(v597, 0LL, 1LL, v598);
          v599((char *)v596 + *(int *)(v410 + 24), 1LL, 1LL, v598);
          uint64_t v446 = 0LL;
          *v596 = v550;
          v596[1] = (uint64_t)v549;
          uint64_t v428 = v598;
          goto LABEL_193;
        }

        uint64_t v428 = v161;
      }

      uint64_t v446 = 1LL;
      v427 = (uint64_t)v747;
      goto LABEL_157;
    }

    uint64_t v395 = *(_BYTE *)(v394 + v731[8]);
    uint64_t v396 = sub_100018C68(v394, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
    if ((v395 & 1) == 0) {
      goto LABEL_120;
    }
    if ((v392 & 1) != 0) {
      goto LABEL_136;
    }
    v397 = v709;
    sub_10001581C(v765, v709, (uint64_t *)&unk_1009A34D0);
    v398 = v759;
    v762 = *(__int128 **)(v398 + 32);
    v399 = ((uint64_t (*)(char *, uint64_t, uint64_t))v762)(v708, v397, v161);
    v400 = static os_log_type_t.default.getter(v399);
    uint64_t v401 = qword_100A2A8F0;
    uint64_t v402 = swift_allocObject(v754, 152LL, 7LL);
    *(_OWORD *)(v402 + swift_weakDestroy(v0 + 16) = v712;
    uint64_t v403 = UUID.uuidString.getter(v402);
    uint64_t v404 = v755;
    *(void *)(v402 + 56) = &type metadata for String;
    *(void *)(v402 + 64) = v404;
    *(void *)(v402 + 32) = v403;
    *(void *)(v402 + 4sub_100032838(0, 7LL, 0) = v405;
    v779 = v772;
    v780 = v771;
    unint64_t aBlock = 0LL;
    v774 = 0xE000000000000000LL;
    _print_unlocked<A, B>(_:_:)( &v780,  &aBlock,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    v406._countAndFlagsBits = 3026478LL;
    v406._object = (void *)0xE300000000000000LL;
    String.append(_:)(v406);
    _print_unlocked<A, B>(_:_:)( &v779,  &aBlock,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t v407 = v404;
    uint64_t v408 = aBlock;
    v409 = v774;
    *(void *)(v402 + 96) = &type metadata for String;
    *(void *)(v402 + 104) = v404;
    *(void *)(v402 + 72) = v408;
    *(void *)(v402 + 8sub_100032838(0, 7LL, 0) = v409;
    if (v732)
    {
      uint64_t v410 = v726;
      v412 = v763;
      uint64_t v411 = v764;
      if (v732 == 1)
      {
        v562 = 0x61646E6F6365732ELL;
        v561 = 0xEA00000000007972LL;
      }

      else
      {
        v561 = (unint64_t)v710 | 0x8000000000000000LL;
        v562 = 0xD000000000000010LL;
      }
    }

    else
    {
      v561 = 0xE800000000000000LL;
      v562 = 0x7972616D6972702ELL;
      uint64_t v410 = v726;
      v412 = v763;
      uint64_t v411 = v764;
    }

    *(void *)(v402 + 136) = &type metadata for String;
    *(void *)(v402 + 144) = v407;
    *(void *)(v402 + 112) = v562;
    *(void *)(v402 + 12sub_100032838(0, 7LL, 0) = v561;
    os_log(_:dso:log:_:_:)( v400,  &_mh_execute_header,  v401,  "Updating key maps for %@: %{public}@ - %{public}@",  49LL,  2LL,  v402,  v681);
    swift_bridgeObjectRelease();
    v563 = v753;
    sub_10001581C(v769, (uint64_t)v753 + *(int *)(v410 + 20), (uint64_t *)&unk_1009A34D0);
    v564 = (char *)v563 + *(int *)(v410 + 24);
    v565 = v768;
    ((void (*)(char *, char *, uint64_t))v762)(v564, v708, v768);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v759 + 56))(v564, 0LL, 1LL, v565);
    uint64_t v446 = 0LL;
    *v563 = v412;
    v563[1] = (uint64_t)v411;
    uint64_t v428 = v565;
    v427 = (uint64_t)v747;
LABEL_158:
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v724 + 56))(v753, v446, 1LL, v410);
    v480 = swift_allocObject(&unk_10097A0F8, 24LL, 7LL);
    *(void *)(v480 + swift_weakDestroy(v0 + 16) = 0LL;
    v481 = v759;
    v482 = *(void (**)(char *, uint64_t, uint64_t))(v759 + 16);
    v483 = v716;
    v482(v716, v752, v428);
    v484 = (void (*)(uint64_t, char *, uint64_t))v482;
    v742 = (char *)v482;
    v485 = v720;
    sub_10001581C(v769, v720, (uint64_t *)&unk_1009A34D0);
    v484(v757, v483, v428);
    sub_10001581C(v485, v427, (uint64_t *)&unk_1009A34D0);
    v486 = (*(unsigned __int8 *)(v481 + 80) + 25LL) & ~(unint64_t)*(unsigned __int8 *)(v481 + 80);
    v487 = *(unsigned __int8 *)(v481 + 80);
    v737 = v487;
    v736 = (char *)v486;
    v488 = (v486 + v741) & 0xFFFFFFFFFFFFFFF8LL;
    v738 = *(unsigned __int8 *)(v723 + 80);
    v739 = v738 + 16;
    v735 = (char *)v488;
    v489 = (v488 + v738 + 16) & ~v738;
    v763 = v487 | v738 | 7;
    v490 = (unint64_t)&v740[v489] & 0xFFFFFFFFFFFFFFF8LL;
    v758 = (dispatch_queue_t)(v490 + 8);
    v491 = swift_allocObject(&unk_10097A120, v490 + 8, v763);
    v764 = (dispatch_queue_t)v480;
    *(void *)(v491 + swift_weakDestroy(v0 + 16) = v480;
    LOBYTE(v48sub_100032838(0, 7LL, 0) = v748;
    *(_BYTE *)(v491 + 24) = v748;
    v492 = v491 + v486;
    v762 = *(__int128 **)(v481 + 32);
    v493 = v768;
    ((void (*)(unint64_t, char *, uint64_t))v762)(v492, v483, v768);
    v494 = (unint64_t *)(v491 + v488);
    v495 = v772;
    *v494 = v771;
    v494[1] = v495;
    sub_100015750(v485, v491 + v489, (uint64_t *)&unk_1009A34D0);
    v756 = v491;
    *(void *)(v491 + v49sub_100032838(0, 7LL, 0) = v770;
    v496 = swift_allocObject(&unk_10097A148, 24LL, 7LL);
    *(void *)(v496 + swift_weakDestroy(v0 + 16) = 0LL;
    v497 = v717;
    v498 = (void (*)(uint64_t, char *, uint64_t))v742;
    ((void (*)(char *, uint64_t, uint64_t))v742)(v717, v752, v493);
    v499 = v721;
    sub_10001581C(v769, v721, (uint64_t *)&unk_1009A34D0);
    v498(v744, v497, v493);
    sub_10001581C(v499, v745, (uint64_t *)&unk_1009A34D0);
    v500 = swift_allocObject(&unk_10097A170, v758, v763);
    v758 = (dispatch_queue_t)v496;
    *(void *)(v500 + swift_weakDestroy(v0 + 16) = v496;
    *(_BYTE *)(v500 + 24) = v480;
    v501 = v497;
    v502 = v493;
    ((void (*)(char *, char *, uint64_t))v762)(&v736[v500], v501, v493);
    v503 = (unint64_t *)&v735[v500];
    v504 = v772;
    *v503 = v771;
    v503[1] = v504;
    sub_100015750(v499, v500 + v489, (uint64_t *)&unk_1009A34D0);
    *(void *)(v500 + v49sub_100032838(0, 7LL, 0) = v770;
    v505 = swift_allocObject(&unk_10097A198, 24LL, 7LL);
    *(void *)(v505 + swift_weakDestroy(v0 + 16) = 0LL;
    v506 = v718;
    v498((uint64_t)v718, v727, v502);
    v507 = v722;
    sub_10001581C(v765, v722, (uint64_t *)&unk_1009A34D0);
    v498(v749, v506, v502);
    sub_10001581C(v507, v746, (uint64_t *)&unk_1009A34D0);
    v508 = (v737 + 24) & ~v737;
    v509 = (v508 + v741) & 0xFFFFFFFFFFFFFFF8LL;
    v510 = (v509 + v739) & ~v738;
    v511 = (unint64_t)&v740[v510] & 0xFFFFFFFFFFFFFFF8LL;
    v512 = swift_allocObject(&unk_10097A1C0, v511 + 8, v763);
    v763 = v505;
    *(void *)(v512 + swift_weakDestroy(v0 + 16) = v505;
    ((void (*)(uint64_t, char *, uint64_t))v762)(v512 + v508, v506, v768);
    v513 = (unint64_t *)(v512 + v509);
    v514 = v772;
    *v513 = v771;
    v513[1] = v514;
    v515 = sub_100015750(v507, v512 + v510, (uint64_t *)&unk_1009A34D0);
    *(void *)(v512 + v511) = v770;
    v750 = v500;
    v739 = v512;
    if ((v767 & 1) != 0)
    {
      __chkstk_darwin(v515);
      *((void *)&v681 - 4) = sub_1007C381C;
      *((void *)&v681 - 3) = v500;
      *((void *)&v681 - 2) = &v781;
      v516 = (void (*)(uint64_t (*)(uint64_t, uint64_t, unint64_t), __int128 *))v760;
      v517 = v761;
      sub_1007C36E8((uint64_t)v760, v761);
      v518 = v751;
      v516(sub_1007C3A60, &v681 - 3);
      v519 = v518;
      if (!v518)
      {
        swift_retain();
        swift_retain();
        v374 = v758;
        swift_retain();
        sub_1007C3A6C((uint64_t)v516, v517);
        unint64_t v375 = (uint64_t)v747;
        unsigned int v376 = v768;
        goto LABEL_106;
      }
    }

    else
    {
      __chkstk_darwin(v515);
      v520 = v756;
      *((void *)&v681 - 6) = sub_1007C3718;
      *((void *)&v681 - 5) = v520;
      *((void *)&v681 - 4) = sub_1007C39C4;
      *((void *)&v681 - 3) = v512;
      *((void *)&v681 - 2) = &v781;
      v516 = (void (*)(uint64_t (*)(uint64_t, uint64_t, unint64_t), __int128 *))v760;
      v517 = v761;
      sub_1007C36E8((uint64_t)v760, v761);
      v521 = v751;
      v516((uint64_t (*)(uint64_t, uint64_t, unint64_t))sub_1007C3C40, &v681 - 4);
      v519 = v521;
      if (!v521)
      {
        v522 = v764;
        swift_retain();
        swift_retain();
        swift_retain();
        sub_1007C3A6C((uint64_t)v516, v517);
        unint64_t v375 = (uint64_t)v747;
        unsigned int v376 = v768;
LABEL_165:
        sub_100015794(v745, (uint64_t *)&unk_1009A34D0);
        uint64_t v109 = *(char **)(v759 + 8);
        ((void (*)(uint64_t, uint64_t))v109)(v744, v376);
        v533 = v375;
        v534 = sub_1007B5C4C( (uint64_t)v522,  v748,  v757,  v771,  v772,  v375,  v770,  (uint64_t (*)(char *, uint64_t, uint64_t, char *, uint64_t))sub_1003C3C90);
        v535 = v746;
        v536 = v534;
        if (v534)
        {
          sub_1003C628C();
          swift_release(v536);
        }

        v537 = sub_1007B5DD4(v763, v749, v771, v772, v535, v770);
        sub_10078E020(v537);
        swift_release(v537);
        v583 = v749;
        v600 = sub_1007B5DD4(v763, v749, v771, v772, v535, v770);
        sub_100015794(v535, (uint64_t *)&unk_1009A34D0);
        ((void (*)(uint64_t, uint64_t))v109)(v583, v376);
        v601 = (__int128 *)*(unsigned int *)(v600 + OBJC_IVAR____TtC12searchpartyd15KeyMapGenerator_firstIndex);
        v602 = (void **)*(unsigned int *)(v600 + OBJC_IVAR____TtC12searchpartyd15KeyMapGenerator_lastIndex);
        swift_release(v600);
        v762 = v601;
        v751 = v602;
        v603 = v757;
        v604 = sub_1007B5C4C( (uint64_t)v764,  v748,  v757,  v771,  v772,  v533,  v770,  (uint64_t (*)(char *, uint64_t, uint64_t, char *, uint64_t))sub_1003C3C90);
        sub_100015794(v533, (uint64_t *)&unk_1009A34D0);
        ((void (*)(uint64_t, uint64_t))v109)(v603, v376);
        v605 = (uint64_t)v728;
        v606 = v756;
        if (v604)
        {
          v607 = *(_DWORD *)&v604[qword_1009AC768];
          v608 = *(_DWORD *)&v604[qword_1009AC770];
          v609 = swift_release(v604);
          if (v608 < v607) {
            goto LABEL_233;
          }
          if (v607 != (_DWORD)v762 || v608 != (_DWORD)v751)
          {
            v610 = static os_log_type_t.fault.getter(v609);
            v611 = qword_100A2A8F0;
            v612 = swift_allocObject(v754, 192LL, 7LL);
            *(_OWORD *)(v612 + swift_weakDestroy(v0 + 16) = v681;
            *(void *)(v612 + 56) = &type metadata for UInt32;
            *(void *)(v612 + 64) = &protocol witness table for UInt32;
            *(_DWORD *)(v612 + 32) = v607;
            *(void *)(v612 + 96) = &type metadata for UInt32;
            *(void *)(v612 + 104) = &protocol witness table for UInt32;
            *(_DWORD *)(v612 + 72) = v608;
            *(void *)(v612 + 136) = &type metadata for UInt32;
            *(void *)(v612 + 144) = &protocol witness table for UInt32;
            *(_DWORD *)(v612 + 112) = (_DWORD)v762;
            *(void *)(v612 + 176) = &type metadata for UInt32;
            *(void *)(v612 + 184) = &protocol witness table for UInt32;
            *(_DWORD *)(v612 + 152) = (_DWORD)v751;
            os_log(_:dso:log:_:_:)( v610,  &_mh_execute_header,  v611,  "FAULT: indexBuilderRange: %lu...%lu, builderRange = %lu...%lu",  (void)v681,  *((void *)&v681 + 1),  v682,  v683);
            swift_bridgeObjectRelease();
          }
        }

        v613 = v726;
        v614 = v683;
        v615 = &v683[*(int *)(v726 + 20)];
        if (v748)
        {
          v616 = v768;
          v617 = v606;
          v618 = (void (*)(char *, uint64_t, uint64_t))v742;
          ((void (*)(char *, uint64_t, uint64_t))v742)(&v683[*(int *)(v726 + 20)], v752, v768);
          v619 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v759 + 56);
          v619(v615, 0LL, 1LL, v616);
          v620 = (char *)v614 + *(int *)(v613 + 24);
          v618(v620, (uint64_t)v727, v616);
          v606 = v617;
          v605 = (uint64_t)v728;
        }

        else
        {
          v619 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v759 + 56);
          v616 = v768;
          v619(&v683[*(int *)(v726 + 20)], 1LL, 1LL, v768);
          v620 = (char *)v614 + *(int *)(v613 + 24);
          ((void (*)(char *, char *, uint64_t))v742)(v620, v727, v616);
        }

        v619(v620, 0LL, 1LL, v616);
        v621 = v751;
        *v614 = v762;
        v614[1] = v621;
        v622 = v781;
        v623 = objc_autoreleasePoolPush();
        sub_1007AE320(v614, v713, v605, (uint64_t)v753);
        v751 = 0LL;
        objc_autoreleasePoolPop(v623);
        v772 = type metadata accessor for Transaction(0LL);
        v624 = v702;
        sub_10001DC4C(v605, v702, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
        v625 = *(unsigned __int8 *)(v703 + 80);
        v626 = (v625 + 16) & ~v625;
        v627 = (unint64_t)&v685[v626] & 0xFFFFFFFFFFFFFFF8LL;
        v628 = swift_allocObject(&unk_10097A210, v627 + 8, v625 | 7);
        sub_10002218C(v624, v628 + v626, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
        *(void *)(v628 + v627) = v622;
        static Transaction.asyncTask(name:block:)("TotalKeysBuiltAnalytics", 23LL, 2LL, &unk_1009C08F8, v628);
        swift_release(v606);
        swift_release(v739);
        swift_release(v750);
        swift_release(v628);
        v629 = v760;
        v630 = v761;
        sub_1007C3A6C((uint64_t)v760, v761);
        sub_1007C3A6C((uint64_t)v629, v630);
        v581 = (uint64_t)v614;
        goto LABEL_187;
      }
    }

    v522 = v764;
    swift_retain();
    swift_retain();
    v374 = v758;
    swift_retain();
    v523 = (uint64_t)v516;
    v524 = (char)v767;
    v525 = sub_1007C3A6C(v523, v517);
    v526 = static os_log_type_t.error.getter(v525);
    v527 = qword_100A2A8F0;
    v528 = swift_allocObject(v754, 72LL, 7LL);
    *(_OWORD *)(v528 + swift_weakDestroy(v0 + 16) = v729;
    unint64_t aBlock = v519;
    swift_errorRetain(v519);
    v529 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    v530 = String.init<A>(describing:)(&aBlock, v529);
    v531 = v755;
    *(void *)(v528 + 56) = &type metadata for String;
    *(void *)(v528 + 64) = v531;
    *(void *)(v528 + 32) = v530;
    *(void *)(v528 + 4sub_100032838(0, 7LL, 0) = v532;
    swift_bridgeObjectRelease();
    swift_errorRelease(v519);
    unint64_t v375 = (uint64_t)v747;
    unsigned int v376 = v768;
    if ((v524 & 1) == 0) {
      goto LABEL_165;
    }
LABEL_106:
    sub_100015794(v746, (uint64_t *)&unk_1009A34D0);
    uint64_t v109 = *(char **)(v759 + 8);
    ((void (*)(uint64_t, uint64_t))v109)(v749, v376);
    sub_100015794(v375, (uint64_t *)&unk_1009A34D0);
    ((void (*)(uint64_t, uint64_t))v109)(v757, v376);
    int v377 = v744;
    uint64_t v378 = v745;
    int v379 = v376;
    uint64_t v442 = sub_1007B5C4C( (uint64_t)v374,  v748,  v744,  v771,  v772,  v745,  v770,  (uint64_t (*)(char *, uint64_t, uint64_t, char *, uint64_t))sub_1003C3CD0);
    sub_100015794(v378, (uint64_t *)&unk_1009A34D0);
    v443 = v379;
    ((void (*)(uint64_t, uint64_t))v109)(v377, v379);
    uint64_t v444 = v764;
    uint64_t v445 = v750;
    if (!v442) {
      break;
    }
    Swift::Int v133 = (uint64_t)v442;
    sub_1003C62E0();
    uint64_t v450 = *(unsigned int *)&v442[qword_1009AC768];
    uint64_t v451 = (__int128 *)*(unsigned int *)&v442[qword_1009AC770];
    if (v451 < v450)
    {
      __break(1u);
LABEL_220:
      swift_once(&qword_10099B3E8, sub_1003E02E8);
      goto LABEL_12;
    }

    uint64_t v452 = v443;
    v771 = v450;
    v772 = v133;
    v762 = v451;
    v453 = (uint64_t)v728;
    v454 = *((unsigned __int8 *)v728 + v766);
    v455 = v697;
    sub_10001DC4C((uint64_t)v728, v697, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
    if (v454 != 1)
    {
      sub_100018C68(v455, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
      v457 = (uint64_t)v698;
LABEL_173:
      v551 = *(unsigned __int8 *)(v453 + v766);
      v552 = v686;
      sub_10001DC4C(v453, v686, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
      if (v551 == 1)
      {
        v553 = *(_BYTE *)(v552 + v731[8]);
        sub_100018C68(v552, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
        if ((v553 & 1) == 0)
        {
          v554 = v726;
          v465 = v699;
          v555 = v452;
          v556 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v759 + 56);
          v556((char *)v699 + *(int *)(v726 + 20), 1LL, 1LL, v555);
          v557 = (char *)v465 + *(int *)(v554 + 24);
          ((void (*)(char *, char *, uint64_t))v742)(v557, v727, v555);
          v558 = v557;
          v559 = 0LL;
          goto LABEL_183;
        }
      }

      else
      {
        sub_100018C68(v552, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
      }

      v560 = *(_BYTE *)(v453 + v766);
      sub_10001DC4C(v453, v457, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
      if ((v560 & 1) != 0)
      {
        sub_100018C68(v457, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
        goto LABEL_184;
      }

      v566 = *(_BYTE *)(v457 + v731[8]);
      sub_100018C68(v457, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
      if ((v566 & 1) != 0)
      {
        v567 = v726;
        v465 = v699;
        v568 = (char *)v699 + *(int *)(v726 + 20);
        ((void (*)(char *, uint64_t, uint64_t))v742)(v568, v752, v452);
        v555 = v452;
        v556 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v759 + 56);
        v556(v568, 0LL, 1LL, v555);
        v558 = (char *)v465 + *(int *)(v567 + 24);
        v559 = 1LL;
LABEL_183:
        v556(v558, v559, 1LL, v555);
      }

      else
      {
LABEL_184:
        v569 = v452;
        v570 = v726;
        v465 = v699;
        v571 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v759 + 56);
        v571((char *)v699 + *(int *)(v726 + 20), 1LL, 1LL, v569);
        v571((char *)v465 + *(int *)(v570 + 24), 1LL, 1LL, v569);
      }

      *v465 = v771;
      goto LABEL_186;
    }

    v456 = *(_BYTE *)(v455 + v731[8]);
    sub_100018C68(v455, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
    v457 = (uint64_t)v698;
    if ((v456 & 1) == 0) {
      goto LABEL_173;
    }
    v458 = v726;
    v459 = v452;
    v460 = v699;
    v461 = (char *)v699 + *(int *)(v726 + 20);
    v462 = (void (*)(char *, uint64_t, uint64_t))v742;
    ((void (*)(char *, uint64_t, uint64_t))v742)(v461, v752, v459);
    v463 = *(void (**)(char *, void, uint64_t, uint64_t))(v759 + 56);
    v463(v461, 0LL, 1LL, v459);
    v464 = (char *)v460 + *(int *)(v458 + 24);
    v462(v464, (uint64_t)v727, v459);
    v463(v464, 0LL, 1LL, v459);
    v465 = v460;
    *v460 = v771;
LABEL_186:
    v465[1] = (unint64_t)v762;
    v572 = v781;
    v573 = objc_autoreleasePoolPush();
    sub_1007AE320(v465, v713, v453, (uint64_t)v753);
    v751 = 0LL;
    objc_autoreleasePoolPop(v573);
    type metadata accessor for Transaction(0LL);
    v574 = v702;
    sub_10001DC4C(v453, v702, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
    v575 = *(unsigned __int8 *)(v703 + 80);
    v576 = (v575 + 16) & ~v575;
    v577 = (unint64_t)&v685[v576] & 0xFFFFFFFFFFFFFFF8LL;
    v578 = swift_allocObject(&unk_10097A1E8, v577 + 8, v575 | 7);
    sub_10002218C(v574, v578 + v576, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
    *(void *)(v578 + v577) = v572;
    static Transaction.asyncTask(name:block:)("TotalKeysBuiltAnalytics", 23LL, 2LL, &unk_1009C08E8, v578);
    swift_release(v756);
    swift_release(v739);
    swift_release(v750);
    swift_release(v578);
    swift_release(v772);
    v579 = v760;
    v580 = v761;
    sub_1007C3A6C((uint64_t)v760, v761);
    sub_1007C3A6C((uint64_t)v579, v580);
    v581 = (uint64_t)v465;
LABEL_187:
    sub_100018C68(v581, type metadata accessor for BeaconKeyManager.FileSwapInfo);
    uint64_t v161 = v768;
    v582 = v758;
    sub_100015794((uint64_t)v753, &qword_1009C08D8);
    sub_100015794(v765, (uint64_t *)&unk_1009A34D0);
    sub_100015794(v769, (uint64_t *)&unk_1009A34D0);
    ((void (*)(char *, uint64_t))v109)(v743, v161);
    swift_release(v763);
    swift_release(v582);
    swift_release(v764);
    v373 = v733 + 40;
    unint64_t v371 = v734 - 1;
    v372 = (uint64_t)v725;
    if (v734 == 1)
    {
      swift_bridgeObjectRelease();
LABEL_206:
      ((void (*)(char *, uint64_t))v109)(v727, v161);
      ((void (*)(uint64_t, uint64_t))v109)(v752, v161);
      (*(void (**)(uint64_t, uint64_t))(v695 + 8))(v730, v696);
      ((void (*)(uint64_t, uint64_t))v109)(v705, v161);
      goto LABEL_207;
    }
  }

  swift_release(v756);
  swift_release(v739);
  swift_release(v445);
  v636 = v760;
  v637 = v761;
  sub_1007C3A6C((uint64_t)v760, v761);
  sub_1007C3A6C((uint64_t)v636, v637);
  sub_100015794((uint64_t)v753, &qword_1009C08D8);
  sub_100015794(v765, (uint64_t *)&unk_1009A34D0);
  sub_100015794(v769, (uint64_t *)&unk_1009A34D0);
  ((void (*)(char *, uint64_t))v109)(v743, v443);
  swift_bridgeObjectRelease();
  ((void (*)(char *, uint64_t))v109)(v727, v443);
  ((void (*)(uint64_t, uint64_t))v109)(v752, v443);
  (*(void (**)(uint64_t, uint64_t))(v695 + 8))(v730, v696);
  ((void (*)(uint64_t, uint64_t))v109)(v705, v443);
  swift_release(v763);
  swift_release(v374);
  swift_release(v444);
LABEL_207:
  v631 = v688;
  v632 = v690;
  v633 = (uint64_t)v689;
  v634 = v692;
  v635 = (uint64_t)v691;
  sub_10002214C((uint64_t)v693, v694);
  sub_10002214C(v635, v634);
  sub_10002214C((uint64_t)v687, v631);
  sub_10002214C(v633, v632);
}

LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

Swift::Int sub_10023C948(void *a1)
{
  uint64_t v134 = type metadata accessor for RawSearchResult(0LL);
  uint64_t v127 = *(void *)(v134 - 8);
  uint64_t v3 = __chkstk_darwin(v134);
  uint64_t v124 = (uint64_t)&v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v135 = (uint64_t)&v120 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v132 = (uint64_t)&v120 - v8;
  __chkstk_darwin(v7);
  uint64_t v131 = (uint64_t)&v120 - v9;
  Swift::Int v10 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v10);
  if (result >= v10)
  {
    if (v10 < 0) {
      goto LABEL_139;
    }
    if (v10) {
      return sub_10023D78C(0LL, v10, 1LL, a1);
    }
    return result;
  }

  if (v10 >= 0) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v10 + 1;
  }
  if (v10 < -1) {
    goto LABEL_147;
  }
  Swift::Int v133 = a1;
  Swift::Int v122 = result;
  uint64_t v128 = v1;
  if (v10 < 2)
  {
    Swift::Int v16 = (char *)_swiftEmptyArrayStorage;
    unint64_t v126 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v127 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80));
    uint64_t v121 = _swiftEmptyArrayStorage;
    if (v10 != 1)
    {
      unint64_t v18 = _swiftEmptyArrayStorage[2];
LABEL_105:
      uint64_t v112 = v16;
      if (v18 >= 2)
      {
        uint64_t v113 = *v133;
        do
        {
          unint64_t v114 = v18 - 2;
          if (v18 < 2) {
            goto LABEL_134;
          }
          if (!v113) {
            goto LABEL_146;
          }
          uint64_t v115 = *(void *)&v112[16 * v114 + 32];
          uint64_t v116 = *(void *)&v112[16 * v18 + 24];
          uint64_t v117 = v128;
          sub_10023E33C( v113 + *(void *)(v127 + 72) * v115,  v113 + *(void *)(v127 + 72) * *(void *)&v112[16 * v18 + 16],  v113 + *(void *)(v127 + 72) * v116,  v126);
          uint64_t v128 = v117;
          if (v117) {
            break;
          }
          if (v116 < v115) {
            goto LABEL_135;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v112) & 1) == 0) {
            uint64_t v112 = sub_1003CBA90((uint64_t)v112);
          }
          if (v114 >= *((void *)v112 + 2)) {
            goto LABEL_136;
          }
          unint64_t v118 = &v112[16 * v114 + 32];
          *(void *)unint64_t v118 = v115;
          *((void *)v118 + 1) = v116;
          unint64_t v119 = *((void *)v112 + 2);
          if (v18 > v119) {
            goto LABEL_137;
          }
          memmove(&v112[16 * v18 + 16], &v112[16 * v18 + 32], 16 * (v119 - v18));
          *((void *)v112 + 2) = v119 - 1;
          unint64_t v18 = v119 - 1;
        }

        while (v119 > 2);
      }

uint64_t sub_10023D344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v37 = a1;
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0LL);
  uint64_t v7 = __chkstk_darwin(RequestBeacon);
  uint64_t v45 = (uint64_t)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v40 = (uint64_t)&v35 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v39 = (uint64_t)&v35 - v13;
  uint64_t v44 = a3;
  uint64_t v36 = a2;
  if (a3 != a2)
  {
    uint64_t v14 = *(void *)(v12 + 72);
    uint64_t v15 = v14 * (v44 - 1);
    uint64_t v41 = v14;
    uint64_t v16 = v14 * v44;
    Swift::Int v17 = type metadata accessor for FetchRequestBeacon;
    Swift::Int v46 = a4;
LABEL_5:
    uint64_t v18 = 0LL;
    uint64_t v19 = v37;
    uint64_t v42 = v16;
    uint64_t v43 = v15;
    while (1)
    {
      uint64_t v20 = *v46;
      uint64_t v21 = v16 + v18 + *v46;
      uint64_t v22 = v39;
      sub_10001DC4C(v21, v39, v17);
      uint64_t v23 = v15 + v18 + v20;
      uint64_t v24 = v40;
      uint64_t v25 = sub_10001DC4C(v23, v40, v17);
      uint64_t v26 = v17;
      uint64_t v27 = UUID.hashValue.getter(v25);
      uint64_t v28 = UUID.hashValue.getter(v27);
      uint64_t v29 = v24;
      uint64_t v15 = v43;
      sub_100018C68(v29, v26);
      uint64_t v30 = v22;
      uint64_t v16 = v42;
      uint64_t result = sub_100018C68(v30, v26);
      BOOL v31 = v27 < v28;
      Swift::Int v17 = v26;
      if (!v31)
      {
LABEL_4:
        v15 += v41;
        v16 += v41;
        if (++v44 == v36) {
          return result;
        }
        goto LABEL_5;
      }

      uint64_t v32 = *v46;
      if (!*v46) {
        break;
      }
      uint64_t v33 = v32 + v16 + v18;
      uint64_t v34 = v32 + v15 + v18;
      sub_10002218C(v33, v45, v26);
      swift_arrayInitWithTakeFrontToBack(v33, v34, 1LL, RequestBeacon);
      Swift::Int v17 = v26;
      uint64_t result = sub_10002218C(v45, v34, v26);
      v18 -= v41;
      if (v44 == ++v19) {
        goto LABEL_4;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_10023D588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v27 = a1;
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v29 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v25 - v12;
  uint64_t v36 = a3;
  uint64_t v26 = a2;
  if (a3 != a2)
  {
    uint64_t v14 = 40 * v36 - 40;
LABEL_5:
    uint64_t v15 = v27;
    uint64_t v28 = v14;
    while (1)
    {
      uint64_t v16 = *a4 + v14;
      sub_100013044(v16 + 40, (uint64_t)&v33);
      sub_100013044(v16, (uint64_t)v30);
      uint64_t v17 = v34;
      uint64_t v18 = v35;
      sub_100012ED8(&v33, v34);
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
      uint64_t v19 = v31;
      uint64_t v20 = v32;
      sub_100012ED8(v30, v31);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v20);
      LOBYTE(v19) = static Date.< infix(_:_:)(v13, v10);
      uint64_t v21 = *(void (**)(char *, uint64_t))(v29 + 8);
      v21(v10, v7);
      v21(v13, v7);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v30);
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v33);
      if ((v19 & 1) == 0)
      {
LABEL_4:
        uint64_t v14 = v28 + 40;
        if (++v36 == v26) {
          return result;
        }
        goto LABEL_5;
      }

      uint64_t v22 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v23 = v22 + v14;
      sub_100012EC0((__int128 *)(v22 + v14 + 40), (uint64_t)&v33);
      __int128 v24 = *(_OWORD *)(v23 + 16);
      *(_OWORD *)(v23 + 4sub_100032838(0, 7LL, 0) = *(_OWORD *)v23;
      *(_OWORD *)(v23 + 56) = v24;
      *(void *)(v23 + 72) = *(void *)(v23 + 32);
      uint64_t result = sub_100012EC0(&v33, v23);
      v14 -= 40LL;
      if (v36 == ++v15) {
        goto LABEL_4;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_10023D78C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v26 = a1;
  uint64_t v30 = type metadata accessor for RawSearchResult(0LL);
  uint64_t v7 = __chkstk_darwin(v30);
  uint64_t v31 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v27 = (uint64_t)&v24 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v24 - v13;
  uint64_t v29 = a3;
  uint64_t v25 = a2;
  if (a3 != a2)
  {
    uint64_t v15 = *(void *)(v12 + 72);
    uint64_t v33 = v15 * (v29 - 1);
    uint64_t v28 = v15;
    uint64_t v32 = v15 * v29;
LABEL_5:
    uint64_t v16 = 0LL;
    uint64_t v17 = v26;
    while (1)
    {
      uint64_t v18 = *a4;
      sub_10001DC4C(v32 + v16 + *a4, (uint64_t)v14, type metadata accessor for RawSearchResult);
      uint64_t v19 = v27;
      sub_10001DC4C(v33 + v16 + v18, v27, type metadata accessor for RawSearchResult);
      LOBYTE(v18) = static Date.< infix(_:_:)(&v14[*(int *)(v30 + 20)], v19 + *(int *)(v30 + 20));
      sub_100018C68(v19, type metadata accessor for RawSearchResult);
      uint64_t result = sub_100018C68((uint64_t)v14, type metadata accessor for RawSearchResult);
      if ((v18 & 1) == 0)
      {
LABEL_4:
        v33 += v28;
        v32 += v28;
        if (++v29 == v25) {
          return result;
        }
        goto LABEL_5;
      }

      uint64_t v20 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v21 = a4;
      uint64_t v22 = v20 + v32 + v16;
      uint64_t v23 = v20 + v33 + v16;
      sub_10002218C(v22, v31, type metadata accessor for RawSearchResult);
      swift_arrayInitWithTakeFrontToBack(v22, v23, 1LL, v30);
      uint64_t result = sub_10002218C(v31, v23, type metadata accessor for RawSearchResult);
      v16 -= v28;
      ++v17;
      a4 = v21;
      if (v29 == v17) {
        goto LABEL_4;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_10023D9C8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0LL);
  uint64_t v8 = __chkstk_darwin(RequestBeacon);
  uint64_t v49 = (uint64_t)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v44 - v10;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }

  if (a2 - a1 == 0x8000000000000000LL && v13 == -1) {
    goto LABEL_61;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000LL && v13 == -1) {
    goto LABEL_62;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v13;
  unint64_t v52 = a1;
  unint64_t v51 = a4;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000LL) == 0)
    {
      uint64_t v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v16, RequestBeacon);
      }

      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }

      unint64_t v27 = a4 + v18;
      unint64_t v50 = a4 + v18;
      unint64_t v52 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        uint64_t v29 = -v13;
        unint64_t v45 = a4;
        unint64_t v46 = a1;
        do
        {
          unint64_t v48 = a3 + v29;
          sub_10001DC4C(v27 + v29, (uint64_t)v11, type metadata accessor for FetchRequestBeacon);
          unint64_t v30 = a2 + v29;
          unint64_t v31 = a3;
          uint64_t v32 = (uint64_t)v11;
          uint64_t v33 = v49;
          uint64_t v34 = sub_10001DC4C(a2 + v29, v49, type metadata accessor for FetchRequestBeacon);
          uint64_t v35 = UUID.hashValue.getter(v34);
          uint64_t v36 = UUID.hashValue.getter(v35);
          uint64_t v37 = v33;
          uint64_t v11 = (char *)v32;
          sub_100018C68(v37, type metadata accessor for FetchRequestBeacon);
          sub_100018C68(v32, type metadata accessor for FetchRequestBeacon);
          if (v35 >= v36)
          {
            unint64_t v41 = v50;
            unint64_t v42 = v50 + v29;
            v50 += v29;
            a3 = v48;
            if (v31 < v41 || v48 >= v41)
            {
              swift_arrayInitWithTakeFrontToBack(v48, v42, 1LL, RequestBeacon);
              unint64_t v30 = a2;
              unint64_t v40 = v45;
              unint64_t v39 = v46;
            }

            else
            {
              unint64_t v39 = v46;
              if (v31 != v41) {
                swift_arrayInitWithTakeBackToFront(v48, v42);
              }
              unint64_t v30 = a2;
              unint64_t v40 = v45;
            }
          }

          else
          {
            a3 = v48;
            if (v31 < a2 || v48 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v48, a2 + v29, 1LL, RequestBeacon);
              unint64_t v40 = v45;
              unint64_t v39 = v46;
            }

            else
            {
              BOOL v38 = v31 == a2;
              unint64_t v40 = v45;
              unint64_t v39 = v46;
              if (!v38) {
                swift_arrayInitWithTakeBackToFront(v48, a2 + v29);
              }
            }

            v52 += v29;
          }

          unint64_t v27 = v50;
          if (v50 <= v40) {
            break;
          }
          a2 = v30;
        }

        while (v30 > v39);
      }

      goto LABEL_59;
    }
  }

  else if ((v15 & 0x8000000000000000LL) == 0)
  {
    uint64_t v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v15, RequestBeacon);
    }

    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }

    unint64_t v48 = a4 + v17;
    unint64_t v50 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      do
      {
        sub_10001DC4C(a2, (uint64_t)v11, type metadata accessor for FetchRequestBeacon);
        uint64_t v20 = v49;
        uint64_t v21 = sub_10001DC4C(a4, v49, type metadata accessor for FetchRequestBeacon);
        uint64_t v22 = UUID.hashValue.getter(v21);
        uint64_t v23 = UUID.hashValue.getter(v22);
        sub_100018C68(v20, type metadata accessor for FetchRequestBeacon);
        sub_100018C68((uint64_t)v11, type metadata accessor for FetchRequestBeacon);
        unint64_t v24 = v52;
        if (v22 >= v23)
        {
          unint64_t v26 = v51 + v13;
          if (v52 < v51 || v52 >= v26)
          {
            swift_arrayInitWithTakeFrontToBack(v52, v51, 1LL, RequestBeacon);
          }

          else if (v52 != v51)
          {
            swift_arrayInitWithTakeBackToFront(v52, v51);
          }

          unint64_t v51 = v26;
          unint64_t v25 = a2;
        }

        else
        {
          unint64_t v25 = a2 + v13;
          if (v52 < a2 || v52 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack(v52, a2, 1LL, RequestBeacon);
          }

          else if (v52 == a2)
          {
            unint64_t v24 = a2;
          }

          else
          {
            swift_arrayInitWithTakeBackToFront(v52, a2);
          }
        }

        unint64_t v52 = v24 + v13;
        a4 = v51;
        if (v51 >= v48) {
          break;
        }
        a2 = v25;
      }

      while (v25 < a3);
    }

LABEL_63:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

          __break(1u);
          JUMPOUT(0x10029C278LL);
        }

        unint64_t v202 = v95;
        uint64_t v203 = (int)v95;
        uint64_t v204 = static os_log_type_t.error.getter(v95);
        if (qword_10099B520 != -1) {
          swift_once(&qword_10099B520, sub_1004DC610);
        }
        uint64_t v205 = qword_100A2AC90;
        unint64_t v206 = sub_100004AEC((uint64_t *)&unk_10099D740);
        uint64_t v207 = swift_allocObject(v206, 72LL, 7LL);
        *(_OWORD *)(v207 + swift_weakDestroy(v0 + 16) = v244;
        *(void *)(v207 + 56) = &type metadata for Int32;
        *(void *)(v207 + 64) = &protocol witness table for Int32;
        *(_DWORD *)(v207 + 32) = v202;
        os_log(_:dso:log:_:_:)(v204, &_mh_execute_header, v205, "Error running CCECCryptorExportKey. Code: %d.", v231);
        swift_bridgeObjectRelease();
        uint64_t v208 = v232;
        CryptoError.init(rawValue:)(v203);
        uint64_t v209 = type metadata accessor for CryptoError(0LL);
        uint64_t v210 = sub_100007864( (unint64_t *)&qword_1009A1778,  (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError,  (uint64_t)&protocol conformance descriptor for CryptoError);
        __int128 v270 = swift_allocError(v209, v210, 0LL, 0LL);
        uint64_t v212 = v211;
        unint64_t v213 = *(void *)(v209 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v213 + 48))(v208, 1LL, v209) == 1)
        {
          (*(void (**)(uint64_t, void, uint64_t))(v213 + 104))( v212,  enum case for CryptoError.unspecifiedError(_:),  v209);
          uint64_t v214 = sub_100015794(v232, &qword_1009A1760);
        }

        else
        {
          uint64_t v214 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v213 + 32))(v212, v232, v209);
        }

        swift_willThrow(v214);
        uint64_t v81 = swift_release();
      }

      uint64_t v218 = static os_log_type_t.error.getter(v81);
      if (qword_10099B520 != -1) {
        swift_once(&qword_10099B520, sub_1004DC610);
      }
      uint64_t v219 = qword_100A2AC90;
      uint64_t v220 = sub_100004AEC((uint64_t *)&unk_10099D740);
      os_log_t v221 = swift_allocObject(v220, 72LL, 7LL);
      *(_OWORD *)(v221 + swift_weakDestroy(v0 + 16) = v244;
      int v222 = v270;
      *(void *)&uint64_t v273 = v270;
      swift_errorRetain(v270);
      uint64_t v223 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v224 = String.init<A>(describing:)(&v273, v223);
      uint64_t v226 = v225;
      *(void *)(v221 + 56) = &type metadata for String;
      *(void *)(v221 + 64) = sub_1000226F4();
      *(void *)(v221 + 32) = v224;
      *(void *)(v221 + 4sub_100032838(0, 7LL, 0) = v226;
      os_log(_:dso:log:_:_:)(v218, &_mh_execute_header, v219, "Error deriving advertisementKey: %@", 35LL, 2LL, v221);
      swift_bridgeObjectRelease();
      uint64_t v227 = sub_100117A8C();
      unint64_t v216 = swift_allocError(&type metadata for CryptoTokenError, v227, 0LL, 0LL);
      *uint64_t v228 = 0;
      swift_willThrow(v216);
      swift_errorRelease(v222);
LABEL_76:
      sub_100016F9C(v79, v78);
      *(void *)&uint64_t v273 = 0LL;
      *((void *)&v273 + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(35LL);
      v229._object = (void *)0x8000000100854640LL;
      v229._countAndFlagsBits = 0xD000000000000021LL;
      String.append(_:)(v229);
      int v271 = v216;
      uint64_t v230 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      _print_unlocked<A, B>(_:_:)( &v271,  &v273,  v230,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v273,  *((void *)&v273 + 1),  "searchpartyd/KeyRepresentable.swift",  35LL,  2LL,  256LL,  0);
      __break(1u);
      JUMPOUT(0x10029C664LL);
    }

    swift_bridgeObjectRelease();
    uint64_t v272 = (unint64_t)_swiftEmptyArrayStorage;
    *(void *)&uint64_t v273 = _swiftEmptyArrayStorage;
    uint64_t v100 = _swiftEmptyArrayStorage[2];
    if (v100)
    {
      uint64_t v101 = v242;
      uint64_t v102 = (uint64_t)_swiftEmptyArrayStorage
           + ((*(unsigned __int8 *)(v242 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v242 + 80));
      swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
      unint64_t v267 = *(id *)(v101 + 72);
      do
      {
        unint64_t v104 = v263;
        sub_10001DC4C(v102, (uint64_t)v263, _s18ConnectionKeyGroupVMa);
        Swift::Int v105 = *v104;
        unint64_t v106 = v104[1];
        uint64_t v107 = objc_allocWithZone(&OBJC_CLASS___SPBeaconingKey);
        sub_10001736C(v105, v106);
        uint64_t v108 = DateInterval._bridgeToObjectiveC()().super.isa;
        uint64_t v109 = Data._bridgeToObjectiveC()().super.isa;
        uint64_t v110 = [v107 initWithDateInterval:v108 key:v109];

        sub_100016F9C(v105, v106);
        unint64_t v111 = v104[2];
        uint64_t v112 = v104[3];
        uint64_t v113 = objc_allocWithZone(&OBJC_CLASS___SPCommandKeys);
        sub_10001736C(v111, v112);
        unint64_t v114 = Data._bridgeToObjectiveC()().super.isa;
        uint64_t v115 = Data._bridgeToObjectiveC()().super.isa;
        uint64_t v116 = Data._bridgeToObjectiveC()().super.isa;
        uint64_t v117 = [v113 initWithBeaconingKey:v110 commandKey:v114 connectionToken:v115 nearbyToken:v116];
        sub_100016F9C(v111, v112);

        unint64_t v118 = sub_100018C68((uint64_t)v104, _s18ConnectionKeyGroupVMa);
        if (v117)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v118);
          uint64_t v120 = *(void *)((v272 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          unint64_t v119 = *(void *)((v272 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v120 >= v119 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v119 > 1, v120 + 1, 1LL);
          }
          Swift::Int v103 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v120, v117);
          specialized Array._endMutation()(v103);
        }

        v102 += (uint64_t)v267;
        --v100;
      }

      while (v100);
      swift_bridgeObjectRelease();
      uint64_t v121 = (void *)v272;
      uint64_t v7 = v266;
      uint64_t v11 = v269;
      uint64_t v20 = v257;
      uint64_t v21 = v255;
    }

    else
    {
      uint64_t v121 = _swiftEmptyArrayStorage;
    }

    swift_bridgeObjectRelease();
    sub_1001852A0((uint64_t)v121);
    Swift::Int v122 = (uint64_t)v256;
    Swift::Int v123 = v261;
    v259(v256, (uint64_t)v261, v20);
    uint64_t v124 = v273;
    Swift::Int v125 = v258;
    unint64_t v126 = swift_isUniquelyReferenced_nonNull_native(v258);
    uint64_t v272 = (unint64_t)v125;
    sub_10005E1C4(v124, v122, v126);
    uint64_t v258 = (void *)v272;
    swift_bridgeObjectRelease();
    uint64_t v127 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v127(v122, v20);
    v127((uint64_t)v123, v20);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v274);
    uint64_t v8 = v268;
    goto LABEL_49;
  }

  uint64_t v198 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v21 + 56);
  uint64_t v199 = swift_bridgeObjectRetain(a1);
  uint64_t v200 = _swiftEmptyDictionarySingleton;
  v198(v27, 1LL, 1LL, v20, v199);
LABEL_61:
  swift_bridgeObjectRelease();
  return v200;
}

  __break(1u);
}

    if (v60 < v39) {
      goto LABEL_141;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v37);
    uint64_t v197 = v60;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      uint64_t v37 = v184;
    }
    else {
      uint64_t v37 = sub_1003CB1DC(0LL, *((void *)v184 + 2) + 1LL, 1, v184);
    }
    unint64_t v119 = *((void *)v37 + 2);
    unint64_t v118 = *((void *)v37 + 3);
    BOOL v38 = v119 + 1;
    if (v119 >= v118 >> 1) {
      uint64_t v37 = sub_1003CB1DC((char *)(v118 > 1), v119 + 1, 1, v37);
    }
    *((void *)v37 + 2) = v38;
    uint64_t v120 = v37 + 32;
    uint64_t v121 = &v37[16 * v119 + 32];
    Swift::Int v122 = v197;
    *(void *)uint64_t v121 = v39;
    *((void *)v121 + 1) = v122;
    if (v119)
    {
      while (1)
      {
        Swift::Int v123 = v38 - 1;
        if (v38 >= 4)
        {
          uint64_t v128 = &v120[16 * v38];
          uint64_t v129 = *((void *)v128 - 8);
          Swift::Int v130 = *((void *)v128 - 7);
          uint64_t v134 = __OFSUB__(v130, v129);
          uint64_t v131 = v130 - v129;
          if (v134) {
            goto LABEL_130;
          }
          Swift::Int v133 = *((void *)v128 - 6);
          uint64_t v132 = *((void *)v128 - 5);
          uint64_t v134 = __OFSUB__(v132, v133);
          unint64_t v126 = v132 - v133;
          uint64_t v127 = v134;
          if (v134) {
            goto LABEL_131;
          }
          uint64_t v135 = v38 - 2;
          uint64_t v136 = &v120[16 * v38 - 32];
          unint64_t v138 = *(void *)v136;
          uint64_t v137 = *((void *)v136 + 1);
          uint64_t v134 = __OFSUB__(v137, v138);
          uint64_t v139 = v137 - v138;
          if (v134) {
            goto LABEL_133;
          }
          uint64_t v134 = __OFADD__(v126, v139);
          uint64_t v140 = v126 + v139;
          if (v134) {
            goto LABEL_136;
          }
          if (v140 >= v131)
          {
            uint64_t v158 = &v120[16 * v123];
            uint64_t v160 = *(void *)v158;
            uint64_t v159 = *((void *)v158 + 1);
            uint64_t v134 = __OFSUB__(v159, v160);
            uint64_t v161 = v159 - v160;
            if (v134) {
              goto LABEL_140;
            }
            os_log_t v151 = v126 < v161;
            goto LABEL_100;
          }
        }

        else
        {
          if (v38 != 3)
          {
            os_log_type_t v152 = *((void *)v37 + 4);
            uint64_t v153 = *((void *)v37 + 5);
            uint64_t v134 = __OFSUB__(v153, v152);
            uint64_t v145 = v153 - v152;
            uint64_t v146 = v134;
            goto LABEL_94;
          }

          Swift::Int v125 = *((void *)v37 + 4);
          uint64_t v124 = *((void *)v37 + 5);
          uint64_t v134 = __OFSUB__(v124, v125);
          unint64_t v126 = v124 - v125;
          uint64_t v127 = v134;
        }

        if ((v127 & 1) != 0) {
          goto LABEL_132;
        }
        uint64_t v135 = v38 - 2;
        __int128 v141 = &v120[16 * v38 - 32];
        uint64_t v143 = *(void *)v141;
        uint64_t v142 = *((void *)v141 + 1);
        uint64_t v144 = __OFSUB__(v142, v143);
        uint64_t v145 = v142 - v143;
        uint64_t v146 = v144;
        if (v144) {
          goto LABEL_135;
        }
        uint64_t v147 = &v120[16 * v123];
        unint64_t v149 = *(void *)v147;
        unint64_t v148 = *((void *)v147 + 1);
        uint64_t v134 = __OFSUB__(v148, v149);
        uint64_t v150 = v148 - v149;
        if (v134) {
          goto LABEL_138;
        }
        if (__OFADD__(v145, v150)) {
          goto LABEL_139;
        }
        if (v145 + v150 >= v126)
        {
          os_log_t v151 = v126 < v150;
LABEL_100:
          if (v151) {
            Swift::Int v123 = v135;
          }
          goto LABEL_102;
        }

  swift_release();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

      uint64_t v262 = v226;
      uint64_t v263 = (void **)_convertNSErrorToError(_:)(v226);

      swift_willThrow(v264);
      uint64_t v265 = ((uint64_t (*)(char *, uint64_t))v318)(v222, v335);
      uint64_t v266 = static os_log_type_t.error.getter(v265);
      if (qword_10099B3E8 != -1) {
        swift_once(&qword_10099B3E8, sub_1003E02E8);
      }
      unint64_t v267 = qword_100A2A8F0;
      __int128 v268 = sub_100004AEC((uint64_t *)&unk_10099D740);
      __int128 v269 = swift_allocObject(v268, 72LL, 7LL);
      *(_OWORD *)(v269 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      unint64_t aBlock = v263;
      swift_errorRetain(v263);
      __int128 v270 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      int v271 = String.init<A>(describing:)(&aBlock, v270);
      uint64_t v273 = v272;
      *(void *)(v269 + 56) = &type metadata for String;
      *(void *)(v269 + 64) = sub_1000226F4();
      *(void *)(v269 + 32) = v271;
      *(void *)(v269 + 4sub_100032838(0, 7LL, 0) = v273;
      os_log(_:dso:log:_:_:)( v266,  &_mh_execute_header,  v267,  "(Old-File Delete) Error installing map files: %@",  48LL,  2LL,  v269);
      swift_bridgeObjectRelease();
      swift_errorRelease(v263);
      uint64_t v329 = 0LL;
      uint64_t v204 = 0LL;
      uint64_t v203 = v324;
      uint64_t v83 = v328;
      uint64_t v80 = v333;
      char v68 = v318;
      goto LABEL_66;
    }

    sub_1003CB7C8((unint64_t *)&v83, (unint64_t *)&v82, (uint64_t *)&v81);
    return 1LL;
  }

uint64_t sub_10023DE8C(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v60 = *(void *)(v8 - 8);
  uint64_t v61 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v59 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v56 - v11;
  uint64_t v13 = a2 - a1;
  uint64_t v14 = (a2 - a1) / 40;
  uint64_t v15 = a3 - (void)a2;
  uint64_t v16 = (uint64_t)(a3 - (void)a2) / 40;
  uint64_t v70 = a1;
  uint64_t v69 = a4;
  if (v14 >= v16)
  {
    if (v15 < -39) {
      goto LABEL_45;
    }
    if (a4 != a2 || &a2[40 * v16] <= a4) {
      memmove(a4, a2, 40 * v16);
    }
    uint64_t v34 = &a4[40 * v16];
    char v68 = v34;
    uint64_t v70 = a2;
    if (v15 < 40 || a1 >= a2) {
      goto LABEL_44;
    }
    unint64_t v35 = a3 - 40;
    uint64_t v57 = a4;
    unint64_t v58 = a1;
    while (1)
    {
      uint64_t v36 = (char *)(v35 + 40);
      sub_100013044((uint64_t)(v34 - 40), (uint64_t)v65);
      uint64_t v37 = a2 - 40;
      sub_100013044((uint64_t)(a2 - 40), (uint64_t)v62);
      uint64_t v38 = v66;
      uint64_t v39 = v67;
      sub_100012ED8(v65, v66);
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v39);
      uint64_t v40 = v63;
      uint64_t v41 = v64;
      sub_100012ED8(v62, v63);
      unint64_t v42 = v12;
      uint64_t v43 = v59;
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v41);
      LOBYTE(v4sub_100032838(0, 7LL, 0) = static Date.< infix(_:_:)(v42, v43);
      uint64_t v44 = v61;
      unint64_t v45 = *(void (**)(char *, uint64_t))(v60 + 8);
      unint64_t v46 = v43;
      uint64_t v12 = v42;
      v45(v46, v61);
      v45(v42, v44);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v62);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v65);
      if ((v40 & 1) != 0)
      {
        if (v36 != a2 || v35 >= (unint64_t)a2)
        {
          __int128 v47 = *(_OWORD *)v37;
          __int128 v48 = *(_OWORD *)(a2 - 24);
          *(void *)(v35 + 32) = *((void *)a2 - 1);
          *(_OWORD *)unint64_t v35 = v47;
          *(_OWORD *)(v35 + swift_weakDestroy(v0 + 16) = v48;
        }

        v70 -= 40;
        uint64_t v34 = v68;
      }

      else
      {
        uint64_t v49 = v68;
        uint64_t v34 = v68 - 40;
        v68 -= 40;
        if (v36 >= v49 && v35 < (unint64_t)v49)
        {
          unint64_t v50 = (unint64_t)v58;
          if (v36 != v49)
          {
            __int128 v51 = *(_OWORD *)v34;
            __int128 v52 = *(_OWORD *)(v49 - 24);
            *(void *)(v35 + 32) = *((void *)v49 - 1);
            *(_OWORD *)unint64_t v35 = v51;
            *(_OWORD *)(v35 + swift_weakDestroy(v0 + 16) = v52;
          }

          uint64_t v37 = a2;
          goto LABEL_40;
        }

        __int128 v53 = *(_OWORD *)v34;
        __int128 v54 = *(_OWORD *)(v49 - 24);
        *(void *)(v35 + 32) = *((void *)v49 - 1);
        *(_OWORD *)unint64_t v35 = v53;
        *(_OWORD *)(v35 + swift_weakDestroy(v0 + 16) = v54;
        uint64_t v37 = a2;
      }

      unint64_t v50 = (unint64_t)v58;
LABEL_40:
      if (v34 > v57)
      {
        v35 -= 40LL;
        a2 = v37;
      }

      goto LABEL_44;
    }
  }

  if (v13 >= -39)
  {
    if (a4 != a1 || &a1[40 * v14] <= a4) {
      memmove(a4, a1, 40 * v14);
    }
    unint64_t v17 = (unint64_t)&a4[40 * v14];
    char v68 = (char *)v17;
    if (v13 >= 40 && (unint64_t)a2 < a3)
    {
      do
      {
        sub_100013044((uint64_t)a2, (uint64_t)v65);
        sub_100013044((uint64_t)a4, (uint64_t)v62);
        uint64_t v18 = v66;
        uint64_t v19 = v67;
        sub_100012ED8(v65, v66);
        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);
        uint64_t v20 = v63;
        uint64_t v21 = v64;
        sub_100012ED8(v62, v63);
        uint64_t v22 = v59;
        (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v21);
        char v23 = static Date.< infix(_:_:)(v12, v22);
        unint64_t v24 = *(void (**)(char *, uint64_t))(v60 + 8);
        unint64_t v25 = v22;
        uint64_t v26 = v61;
        v24(v25, v61);
        v24(v12, v26);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v62);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v65);
        unint64_t v27 = v70;
        if ((v23 & 1) != 0)
        {
          unint64_t v28 = (unint64_t)(a2 + 40);
          if (v70 >= a2 && (unint64_t)v70 < v28 && v70 == a2)
          {
            unint64_t v27 = a2;
          }

          else
          {
            __int128 v29 = *(_OWORD *)a2;
            __int128 v30 = *((_OWORD *)a2 + 1);
            *((void *)v70 + 4) = *((void *)a2 + 4);
            *unint64_t v27 = v29;
            v27[1] = v30;
          }
        }

        else
        {
          unint64_t v31 = v69 + 40;
          if (v70 != v69 || v70 >= v31)
          {
            __int128 v32 = *(_OWORD *)v69;
            __int128 v33 = *((_OWORD *)v69 + 1);
            *((void *)v70 + 4) = *((void *)v69 + 4);
            *unint64_t v27 = v32;
            v27[1] = v33;
          }

          uint64_t v69 = v31;
          unint64_t v28 = (unint64_t)a2;
        }

        uint64_t v70 = (char *)v27 + 40;
        a4 = v69;
        a2 = (char *)v28;
      }

      while (v28 < a3);
    }

uint64_t sub_10023E33C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v45 = type metadata accessor for RawSearchResult(0LL);
  uint64_t v8 = __chkstk_darwin(v45);
  uint64_t v44 = (uint64_t)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v41 - v10;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }

  if (a2 - a1 == 0x8000000000000000LL && v13 == -1) {
    goto LABEL_62;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000LL && v13 == -1) {
    goto LABEL_63;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v13;
  unint64_t v48 = a1;
  unint64_t v47 = a4;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000LL) == 0)
    {
      uint64_t v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v16, v45);
      }

      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }

      unint64_t v25 = a4 + v18;
      unint64_t v46 = a4 + v18;
      unint64_t v48 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        uint64_t v27 = -v13;
        unint64_t v42 = a4;
        unint64_t v43 = a1;
        do
        {
          unint64_t v28 = a3 + v27;
          sub_10001DC4C(v25 + v27, (uint64_t)v11, type metadata accessor for RawSearchResult);
          unint64_t v29 = a2 + v27;
          unint64_t v30 = a3;
          uint64_t v31 = (uint64_t)v11;
          uint64_t v32 = v44;
          sub_10001DC4C(a2 + v27, v44, type metadata accessor for RawSearchResult);
          char v33 = static Date.< infix(_:_:)(v31 + *(int *)(v45 + 20), v32 + *(int *)(v45 + 20));
          uint64_t v34 = v32;
          uint64_t v11 = (char *)v31;
          sub_100018C68(v34, type metadata accessor for RawSearchResult);
          sub_100018C68(v31, type metadata accessor for RawSearchResult);
          if ((v33 & 1) != 0)
          {
            if (v30 < a2 || v28 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v28, a2 + v27, 1LL, v45);
              unint64_t v37 = v42;
              unint64_t v36 = v43;
            }

            else
            {
              BOOL v35 = v30 == a2;
              unint64_t v37 = v42;
              unint64_t v36 = v43;
              if (!v35) {
                swift_arrayInitWithTakeBackToFront(v28, a2 + v27);
              }
            }

            v48 += v27;
          }

          else
          {
            unint64_t v38 = v46;
            unint64_t v39 = v46 + v27;
            v46 += v27;
            if (v30 < v38 || v28 >= v38)
            {
              swift_arrayInitWithTakeFrontToBack(v28, v39, 1LL, v45);
              unint64_t v29 = a2;
              unint64_t v37 = v42;
              unint64_t v36 = v43;
            }

            else
            {
              BOOL v35 = v30 == v38;
              unint64_t v37 = v42;
              unint64_t v36 = v43;
              if (!v35) {
                swift_arrayInitWithTakeBackToFront(v28, v39);
              }
              unint64_t v29 = a2;
            }
          }

          unint64_t v25 = v46;
          if (v46 <= v37) {
            break;
          }
          a2 = v29;
          a3 = v28;
        }

        while (v29 > v36);
      }

      goto LABEL_60;
    }
  }

  else if ((v15 & 0x8000000000000000LL) == 0)
  {
    uint64_t v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v15, v45);
    }

    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }

    unint64_t v43 = a4 + v17;
    unint64_t v46 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      uint64_t v20 = v44;
      do
      {
        sub_10001DC4C(a2, (uint64_t)v11, type metadata accessor for RawSearchResult);
        sub_10001DC4C(a4, v20, type metadata accessor for RawSearchResult);
        char v21 = static Date.< infix(_:_:)(&v11[*(int *)(v45 + 20)], v20 + *(int *)(v45 + 20));
        sub_100018C68(v20, type metadata accessor for RawSearchResult);
        sub_100018C68((uint64_t)v11, type metadata accessor for RawSearchResult);
        unint64_t v22 = v48;
        if ((v21 & 1) != 0)
        {
          unint64_t v23 = a2 + v13;
          if (v48 < a2 || v48 >= v23)
          {
            swift_arrayInitWithTakeFrontToBack(v48, a2, 1LL, v45);
          }

          else if (v48 == a2)
          {
            unint64_t v22 = a2;
          }

          else
          {
            swift_arrayInitWithTakeBackToFront(v48, a2);
          }
        }

        else
        {
          unint64_t v24 = v47 + v13;
          if (v48 < v47 || v48 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack(v48, v47, 1LL, v45);
          }

          else if (v48 != v47)
          {
            swift_arrayInitWithTakeBackToFront(v48, v47);
          }

          unint64_t v47 = v24;
          unint64_t v23 = a2;
        }

        unint64_t v48 = v22 + v13;
        a4 = v47;
        if (v47 >= v43) {
          break;
        }
        a2 = v23;
      }

      while (v23 < a3);
    }

char *sub_10023E7EC(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  unsigned int v4 = v3 & 0x3F;
  unint64_t v5 = (1LL << v3) + 63;
  uint64_t v6 = v5 >> 6;
  size_t v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0LL), v7);
    uint64_t v8 = sub_10023E948((unint64_t *)((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v6, v2);
    uint64_t v9 = swift_release();
    if (v1) {
      swift_willThrow(v9);
    }
  }

  else
  {
    uint64_t v10 = (void *)swift_slowAlloc(v7, -1LL);
    bzero(v10, v7);
    uint64_t v8 = sub_10023E948((unint64_t *)v10, v6, v2);
    swift_release();
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  return v8;
}

char *sub_10023E948(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = a2;
  unint64_t v23 = a1;
  uint64_t v4 = type metadata accessor for RawSearchResult(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = (char *)__chkstk_darwin(v4);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v9 = 0LL;
  uint64_t v10 = *(void *)(a3 + 56);
  uint64_t v24 = 0LL;
  uint64_t v25 = a3 + 56;
  uint64_t v11 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v26 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_5;
    }

    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v17 >= v26) {
      goto LABEL_24;
    }
    unint64_t v18 = *(void *)(v25 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v26) {
        goto LABEL_24;
      }
      unint64_t v18 = *(void *)(v25 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v26) {
          goto LABEL_24;
        }
        unint64_t v18 = *(void *)(v25 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }

double sub_10023EB74@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10023EB9C(a1, &qword_1009A48D8, &qword_1009A6700, a2);
}

double sub_10023EB88@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10023EB9C(a1, &qword_1009A6610, &qword_1009A6600, a2);
}

double sub_10023EB9C@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(int *)(sub_100004AEC(a2) + 48);
  uint64_t v8 = *(int *)(sub_100004AEC(a3) + 48);
  uint64_t v9 = *(void *)(a1 + v7);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(a4, a1, v10);
  *(void *)(a4 + v8) = v9;
  *(void *)&double result = swift_bridgeObjectRetain(v9).n128_u64[0];
  return result;
}

uint64_t sub_10023EC14(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v44 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_1009A6708);
  __chkstk_darwin(v13);
  unint64_t v15 = (char *)v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = -1LL << *(_BYTE *)(a1 + 32);
  uint64_t v17 = ~v16;
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v19 = -v16;
  uint64_t v46 = a1;
  uint64_t v47 = a1 + 64;
  if (v19 < 64) {
    uint64_t v20 = ~(-1LL << v19);
  }
  else {
    uint64_t v20 = -1LL;
  }
  uint64_t v48 = v17;
  uint64_t v49 = 0LL;
  uint64_t v50 = v20 & v18;
  uint64_t v51 = a2;
  uint64_t v52 = a3;
  v43[1] = a1;
  swift_bridgeObjectRetain(a1);
  v43[0] = a3;
  swift_retain();
  sub_100658518((uint64_t)v15);
  uint64_t v21 = sub_100004AEC(&qword_1009A6700);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48LL))(v15, 1LL, v21) == 1)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1000A6F30(v46);
    return swift_release();
  }

  uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
  while (1)
  {
    uint64_t v27 = *(int *)(v21 + 48);
    uint64_t v28 = v10;
    v45(v12, v15, v10);
    uint64_t v29 = *(void *)&v15[v27];
    unint64_t v30 = *(void **)a5;
    unint64_t v32 = sub_10030D124((uint64_t)v12);
    uint64_t v33 = v30[2];
    BOOL v34 = (v31 & 1) == 0;
    uint64_t v35 = v33 + v34;
    if (__OFADD__(v33, v34)) {
      break;
    }
    char v36 = v31;
    if (v30[3] >= v35)
    {
      if ((a4 & 1) != 0)
      {
        unint64_t v39 = *(void **)a5;
        if ((v31 & 1) != 0) {
          goto LABEL_7;
        }
      }

      else
      {
        sub_100063A54();
        unint64_t v39 = *(void **)a5;
        if ((v36 & 1) != 0) {
          goto LABEL_7;
        }
      }
    }

    else
    {
      sub_10004D508(v35, a4 & 1);
      unint64_t v37 = sub_10030D124((uint64_t)v12);
      if ((v36 & 1) != (v38 & 1)) {
        goto LABEL_22;
      }
      unint64_t v32 = v37;
      unint64_t v39 = *(void **)a5;
      if ((v36 & 1) != 0)
      {
LABEL_7:
        uint64_t v23 = v39[7];
        uint64_t v24 = 8 * v32;
        uint64_t v53 = *(void *)(v23 + 8 * v32);
        swift_bridgeObjectRetain(v53);
        sub_100184B64(v29);
        uint64_t v25 = v53;
        uint64_t v10 = v28;
        (*(void (**)(char *, uint64_t))(v44 + 8))(v12, v28);
        uint64_t v26 = *(void *)(*(void *)a5 + 56LL);
        swift_bridgeObjectRelease();
        *(void *)(v26 + v24) = v25;
        goto LABEL_8;
      }
    }

    v39[(v32 >> 6) + 8] |= 1LL << v32;
    uint64_t v10 = v28;
    v45((char *)(v39[6] + *(void *)(v44 + 72) * v32), v12, v28);
    *(void *)(v39[7] + 8 * v32) = v29;
    uint64_t v40 = v39[2];
    BOOL v41 = __OFADD__(v40, 1LL);
    uint64_t v42 = v40 + 1;
    if (v41) {
      goto LABEL_21;
    }
    v39[2] = v42;
LABEL_8:
    sub_100658518((uint64_t)v15);
    uint64_t v21 = sub_100004AEC(&qword_1009A6700);
    a4 = 1;
  }

  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v28);
  __break(1u);
  return result;
}

uint64_t sub_10023EF58(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v48 = type metadata accessor for UUID(0LL);
  uint64_t v40 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v11 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009A66A0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = -1LL << *(_BYTE *)(a1 + 32);
  uint64_t v16 = ~v15;
  uint64_t v17 = *(void *)(a1 + 64);
  uint64_t v18 = -v15;
  uint64_t v41 = a1;
  uint64_t v42 = a1 + 64;
  if (v18 < 64) {
    uint64_t v19 = ~(-1LL << v18);
  }
  else {
    uint64_t v19 = -1LL;
  }
  uint64_t v43 = v16;
  uint64_t v44 = 0LL;
  uint64_t v45 = v19 & v17;
  uint64_t v46 = a2;
  uint64_t v47 = a3;
  v39[2] = a1;
  swift_bridgeObjectRetain(a1);
  v39[1] = a3;
  swift_retain();
  sub_10065885C((uint64_t)v14);
  uint64_t v20 = sub_100004AEC(&qword_1009A6600);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48LL))(v14, 1LL, v20) == 1)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1000A6F30(v41);
    return swift_release();
  }

  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
  while (1)
  {
    uint64_t v24 = *(int *)(v20 + 48);
    v22(v11, v14, v48);
    uint64_t v25 = *(void *)&v14[v24];
    uint64_t v26 = *a5;
    unint64_t v28 = sub_10030D124((uint64_t)v11);
    uint64_t v29 = *(void *)(v26 + 16);
    BOOL v30 = (v27 & 1) == 0;
    uint64_t v31 = v29 + v30;
    if (__OFADD__(v29, v30)) {
      break;
    }
    char v32 = v27;
    if (*(void *)(v26 + 24) >= v31)
    {
      if ((a4 & 1) != 0)
      {
        if ((v27 & 1) != 0) {
          goto LABEL_7;
        }
      }

      else
      {
        sub_100064E28();
        if ((v32 & 1) != 0) {
          goto LABEL_7;
        }
      }
    }

    else
    {
      sub_10004FDF0(v31, a4 & 1);
      unint64_t v33 = sub_10030D124((uint64_t)v11);
      if ((v32 & 1) != (v34 & 1)) {
        goto LABEL_22;
      }
      unint64_t v28 = v33;
      if ((v32 & 1) != 0)
      {
LABEL_7:
        (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v48);
        uint64_t v23 = *(void *)(*a5 + 56);
        swift_bridgeObjectRelease();
        *(void *)(v23 + 8 * v28) = v25;
        goto LABEL_8;
      }
    }

    uint64_t v35 = (void *)*a5;
    *(void *)(*a5 + 8 * (v28 >> 6) + 64) |= 1LL << v28;
    v22((char *)(v35[6] + *(void *)(v40 + 72) * v28), v11, v48);
    *(void *)(v35[7] + 8 * v28) = v25;
    uint64_t v36 = v35[2];
    BOOL v37 = __OFADD__(v36, 1LL);
    uint64_t v38 = v36 + 1;
    if (v37) {
      goto LABEL_21;
    }
    v35[2] = v38;
LABEL_8:
    sub_10065885C((uint64_t)v14);
    uint64_t v20 = sub_100004AEC(&qword_1009A6600);
    a4 = 1;
  }

  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v48);
  __break(1u);
  return result;
}

uint64_t sub_10023F25C(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  unsigned int v4 = v3 & 0x3F;
  unint64_t v5 = (1LL << v3) + 63;
  uint64_t v6 = v5 >> 6;
  size_t v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0LL), v7);
    uint64_t v8 = sub_10023F3AC((unint64_t *)((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v6, v2);
    if (v1) {
      swift_willThrow(v8);
    }
    else {
      return v8;
    }
  }

  else
  {
    uint64_t v9 = (void *)swift_slowAlloc(v7, -1LL);
    bzero(v9, v7);
    uint64_t v2 = sub_10023F3AC((unint64_t *)v9, v6, v2);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  return v2;
}

uint64_t sub_10023F3AC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = a2;
  char v32 = a1;
  uint64_t v41 = sub_100004AEC(&qword_1009A6610);
  uint64_t v4 = __chkstk_darwin(v41);
  uint64_t v40 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v38 = (char *)&v31 - v6;
  uint64_t v36 = type metadata accessor for UUID(0LL);
  unint64_t v39 = *(void **)(v36 - 8);
  uint64_t result = __chkstk_darwin(v36);
  BOOL v37 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v9 = 0LL;
  uint64_t v42 = (void *)a3;
  uint64_t v10 = *(void *)(a3 + 64);
  uint64_t v33 = 0LL;
  uint64_t v34 = a3 + 64;
  uint64_t v11 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v35 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v14 = (uint64_t)v38;
  uint64_t v15 = v39;
  uint64_t v16 = v36;
  uint64_t v17 = v37;
  uint64_t v18 = v40;
  while (1)
  {
    if (v13)
    {
      uint64_t v43 = (v13 - 1) & v13;
      int64_t v44 = v9;
      unint64_t v19 = __clz(__rbit64(v13)) | (v9 << 6);
      goto LABEL_5;
    }

    int64_t v26 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v26 >= v35) {
      return sub_10023F6C0(v32, v31, v33, v42);
    }
    unint64_t v27 = *(void *)(v34 + 8 * v26);
    int64_t v28 = v9 + 1;
    if (!v27)
    {
      int64_t v28 = v9 + 2;
      if (v9 + 2 >= v35) {
        return sub_10023F6C0(v32, v31, v33, v42);
      }
      unint64_t v27 = *(void *)(v34 + 8 * v28);
      if (!v27)
      {
        int64_t v28 = v9 + 3;
        if (v9 + 3 >= v35) {
          return sub_10023F6C0(v32, v31, v33, v42);
        }
        unint64_t v27 = *(void *)(v34 + 8 * v28);
        if (!v27) {
          break;
        }
      }
    }

uint64_t sub_10023F6C0(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v47 = type metadata accessor for UUID(0LL);
  uint64_t v43 = *(void *)(v47 - 8);
  uint64_t v8 = __chkstk_darwin(v47);
  uint64_t v46 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v42 = (char *)&v38 - v10;
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }

  sub_100004AEC(&qword_10099E3F8);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)(a3);
  uint64_t v12 = result;
  unint64_t v39 = a1;
  uint64_t v40 = a2;
  if (a2 < 1) {
    unint64_t v13 = 0LL;
  }
  else {
    unint64_t v13 = *a1;
  }
  uint64_t v14 = 0LL;
  uint64_t v15 = result + 64;
  uint64_t v41 = a4;
  uint64_t v16 = v47;
  while (1)
  {
    if (v13)
    {
      uint64_t v44 = (v13 - 1) & v13;
      uint64_t v45 = v14;
      unint64_t v17 = __clz(__rbit64(v13)) | (v14 << 6);
    }

    else
    {
      uint64_t v18 = v14 + 1;
      if (__OFADD__(v14, 1LL)) {
        goto LABEL_40;
      }
      if (v18 >= v40) {
        return v12;
      }
      unint64_t v19 = v39[v18];
      uint64_t v20 = v14 + 1;
      if (!v19)
      {
        uint64_t v20 = v14 + 2;
        if (v14 + 2 >= v40) {
          return v12;
        }
        unint64_t v19 = v39[v20];
        if (!v19)
        {
          uint64_t v20 = v14 + 3;
          if (v14 + 3 >= v40) {
            return v12;
          }
          unint64_t v19 = v39[v20];
          if (!v19)
          {
            uint64_t v21 = v14 + 4;
            if (v14 + 4 >= v40) {
              return v12;
            }
            unint64_t v19 = v39[v21];
            if (!v19)
            {
              while (1)
              {
                uint64_t v20 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_41;
                }
                if (v20 >= v40) {
                  return v12;
                }
                unint64_t v19 = v39[v20];
                ++v21;
                if (v19) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v20 = v14 + 4;
          }
        }
      }

uint64_t sub_10023FA0C(uint64_t result, uint64_t a2, char a3, uint64_t a4, int a5, char a6, uint64_t a7)
{
  if ((a6 & 1) != 0 || (a3 & 1) != 0)
  {
LABEL_18:
    __break(1u);
    return result;
  }

  uint64_t v8 = result;
  if (a4 < result) {
    goto LABEL_15;
  }
  uint64_t v10 = a2;
  if (a5 != (_DWORD)a2) {
    goto LABEL_16;
  }
  if (result != a4)
  {
    uint64_t v13 = 0LL;
    while (1)
    {
      uint64_t v11 = v13 + 1;
      if (__OFADD__(v13, 1LL)) {
        break;
      }
      uint64_t v14 = sub_1001FE5FC(v8, v10, 0LL, a7);
      uint64_t v16 = v15;
      char v18 = v17;
      uint64_t result = sub_100086B14(v8, v10, 0);
      if ((v18 & 1) != 0) {
        goto LABEL_17;
      }
      if ((_DWORD)v16 != a5) {
        goto LABEL_14;
      }
      ++v13;
      uint64_t v8 = v14;
      uint64_t v10 = v16;
      if (v14 == a4) {
        return v11;
      }
    }

    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  return 0LL;
}

uint64_t sub_10023FAF8( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t (*a8)(char *))
{
  uint64_t v11 = a4;
  int v14 = a3 & 1;
  int v15 = a6 & 1;
  int v16 = v15 | v14;
  uint64_t result = sub_10023FA0C(a1, a2, v14, a4, a5, v15, a7);
  if (v16)
  {
LABEL_27:
    __break(1u);
    return result;
  }

  if ((_DWORD)a5 != (_DWORD)a2)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  BOOL v18 = v11 < a1;
  if (v11 >= a1) {
    uint64_t v19 = a1;
  }
  else {
    uint64_t v19 = v11;
  }
  if (v11 >= a1) {
    uint64_t v20 = a2;
  }
  else {
    uint64_t v20 = a5;
  }
  if (v11 >= a1)
  {
    uint64_t v21 = 1LL;
  }

  else
  {
    uint64_t v11 = a1;
    uint64_t v21 = -1LL;
  }

  if (v18) {
    int v22 = a2;
  }
  else {
    int v22 = a5;
  }
  uint64_t v25 = v19;
  uint64_t v26 = v20;
  char v27 = 0;
  if (v19 != v11)
  {
    uint64_t v24 = 0LL;
    while (1)
    {
      uint64_t v23 = v24 + v21;
      if (__OFADD__(v24, v21)) {
        break;
      }
      uint64_t result = sub_10023FC08((uint64_t)&v25, a7, a8);
      if ((v27 & 1) != 0) {
        goto LABEL_26;
      }
      if ((_DWORD)v26 != v22) {
        goto LABEL_24;
      }
      v24 += v21;
      if (v25 == v11) {
        return v23;
      }
    }

    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  sub_100086B14(v11, v20, 0);
  return 0LL;
}

uint64_t sub_10023FC08(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *))
{
  int v22 = a3;
  uint64_t v5 = type metadata accessor for RawSearchResult(0LL);
  uint64_t v21 = *(void *)(v5 - 8);
  uint64_t result = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0) {
    goto LABEL_19;
  }
  uint64_t v9 = *(void *)(a1 + 8);
  if (*(_DWORD *)(a2 + 36) == (_DWORD)v9)
  {
    uint64_t v10 = *(void *)a1;
    if (*(void *)a1 != 1LL << *(_BYTE *)(a2 + 32))
    {
      uint64_t v20 = (uint64_t *)a1;
      while (1)
      {
        uint64_t v11 = v9;
        uint64_t v12 = v10;
        uint64_t v10 = sub_1001FE5FC(v10, v9, 0LL, a2);
        uint64_t v9 = v13;
        char v15 = v14;
        uint64_t result = sub_100086B14(v12, v11, 0);
        if ((v15 & 1) != 0) {
          goto LABEL_18;
        }
        if (*(_DWORD *)(a2 + 36) != (_DWORD)v9)
        {
          __break(1u);
LABEL_14:
          __break(1u);
LABEL_15:
          __break(1u);
          goto LABEL_16;
        }

        uint64_t v16 = 1LL << *(_BYTE *)(a2 + 32);
        if (v10 == v16) {
          goto LABEL_12;
        }
        if (v10 < 0 || v10 >= v16) {
          goto LABEL_14;
        }
        sub_10001DC4C( *(void *)(a2 + 48) + *(void *)(v21 + 72) * v10,  (uint64_t)v8,  type metadata accessor for RawSearchResult);
        swift_retain();
        char v17 = v22(v8);
        swift_release();
        uint64_t result = sub_100018C68((uint64_t)v8, type metadata accessor for RawSearchResult);
        if ((v17 & 1) != 0)
        {
LABEL_12:
          BOOL v18 = v20;
          uint64_t *v20 = v10;
          v18[1] = v9;
          *((_BYTE *)v18 + swift_weakDestroy(v0 + 16) = 0;
          return result;
        }
      }
    }
  }

  else
  {
LABEL_16:
    __break(1u);
  }

  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

void sub_10023FDC0(uint64_t a1, void (*a2)(char *, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a3;
  uint64_t v50 = a4;
  uint64_t v48 = a2;
  uint64_t v5 = &qword_1009A6610;
  uint64_t v47 = sub_100004AEC(&qword_1009A6610);
  uint64_t v6 = __chkstk_darwin(v47);
  uint64_t v46 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  __int128 v54 = (char *)&v42 - v9;
  __chkstk_darwin(v8);
  uint64_t v45 = (char *)&v42 - v10;
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v43 = a1 + 64;
  uint64_t v12 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v44 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v51 = a1;
  swift_bridgeObjectRetain(a1);
  int64_t v15 = 0LL;
  uint64_t v16 = (uint64_t)v54;
  while (v14)
  {
    uint64_t v52 = (v14 - 1) & v14;
    int64_t v53 = v15;
    unint64_t v19 = __clz(__rbit64(v14)) | (v15 << 6);
LABEL_24:
    uint64_t v24 = v51;
    uint64_t v25 = *(void *)(v51 + 48);
    uint64_t v26 = type metadata accessor for UUID(0LL);
    uint64_t v27 = *(void *)(v26 - 8);
    uint64_t v28 = *(void (**)(char *, unint64_t, uint64_t))(v27 + 16);
    uint64_t v29 = v45;
    v28(v45, v25 + *(void *)(v27 + 72) * v19, v26);
    uint64_t v30 = *(void *)(*(void *)(v24 + 56) + 8 * v19);
    uint64_t v31 = v47;
    *(void *)&v29[*(int *)(v47 + 48)] = v30;
    uint64_t v32 = (uint64_t)v29;
    char v33 = v5;
    sub_100015750(v32, v16, v5);
    uint64_t v34 = *(int *)(v31 + 48);
    uint64_t v35 = *(void *)(v16 + v34);
    uint64_t v36 = v46;
    v28(v46, v16, v26);
    uint64_t v37 = (uint64_t)v36;
    *(void *)&v36[v34] = v35;
    uint64_t v38 = v50;
    uint64_t v39 = *(void *)(v50 + 16);
    swift_bridgeObjectRetain(v30);
    if (v39 && (unint64_t v40 = sub_10030D124(v37), (v41 & 1) != 0)) {
      uint64_t v17 = *(unsigned __int8 *)(*(void *)(v38 + 56) + v40);
    }
    else {
      uint64_t v17 = 0LL;
    }
    uint64_t v5 = v33;
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v37, v26);
    uint64_t v18 = (uint64_t)v54;
    v48(v54, v35, v17);
    sub_100015794(v18, v5);
    unint64_t v14 = v52;
    int64_t v15 = v53;
  }

  int64_t v20 = v15 + 1;
  if (__OFADD__(v15, 1LL))
  {
    __break(1u);
    goto LABEL_29;
  }

  if (v20 >= v44) {
    goto LABEL_27;
  }
  unint64_t v21 = *(void *)(v43 + 8 * v20);
  int64_t v22 = v15 + 1;
  if (v21) {
    goto LABEL_23;
  }
  int64_t v22 = v15 + 2;
  if (v15 + 2 >= v44) {
    goto LABEL_27;
  }
  unint64_t v21 = *(void *)(v43 + 8 * v22);
  if (v21) {
    goto LABEL_23;
  }
  int64_t v22 = v15 + 3;
  if (v15 + 3 >= v44) {
    goto LABEL_27;
  }
  unint64_t v21 = *(void *)(v43 + 8 * v22);
  if (v21) {
    goto LABEL_23;
  }
  int64_t v22 = v15 + 4;
  if (v15 + 4 >= v44) {
    goto LABEL_27;
  }
  unint64_t v21 = *(void *)(v43 + 8 * v22);
  if (v21)
  {
LABEL_23:
    uint64_t v52 = (v21 - 1) & v21;
    int64_t v53 = v22;
    unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
    goto LABEL_24;
  }

  uint64_t v23 = v15 + 5;
  if (v15 + 5 >= v44)
  {
LABEL_27:
    swift_release();
    return;
  }

  unint64_t v21 = *(void *)(v43 + 8 * v23);
  if (v21)
  {
    int64_t v22 = v15 + 5;
    goto LABEL_23;
  }

  while (1)
  {
    int64_t v22 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v22 >= v44) {
      goto LABEL_27;
    }
    unint64_t v21 = *(void *)(v43 + 8 * v22);
    ++v23;
    if (v21) {
      goto LABEL_23;
    }
  }

void sub_1002400DC(uint64_t a1, void (*a2)(char *, uint64_t, __n128))
{
  uint64_t v3 = v2;
  uint64_t v50 = a2;
  uint64_t v5 = sub_100004AEC(&qword_1009A6678);
  __chkstk_darwin(v5);
  uint64_t v49 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0LL);
  uint64_t v8 = *(void *)(RequestBeacon - 8);
  uint64_t v46 = RequestBeacon;
  uint64_t v47 = v8;
  uint64_t v9 = __chkstk_darwin(RequestBeacon);
  uint64_t v42 = (uint64_t)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v41 = (uint64_t)&v41 - v11;
  uint64_t v48 = sub_100004AEC(&qword_1009A6680);
  uint64_t v12 = __chkstk_darwin(v48);
  unint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v41 - v15;
  uint64_t v17 = *(void *)(a1 + 64);
  uint64_t v44 = a1 + 64;
  uint64_t v18 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v19 = -1LL;
  if (v18 < 64) {
    uint64_t v19 = ~(-1LL << v18);
  }
  unint64_t v20 = v19 & v17;
  int64_t v45 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v51 = a1;
  swift_bridgeObjectRetain(a1);
  int64_t v21 = 0LL;
  uint64_t v43 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v20)
    {
      unint64_t v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v23 = v22 | (v21 << 6);
      goto LABEL_19;
    }

    if (__OFADD__(v21++, 1LL))
    {
      __break(1u);
      goto LABEL_34;
    }

    if (v21 >= v45) {
      goto LABEL_32;
    }
    unint64_t v25 = *(void *)(v44 + 8 * v21);
    if (!v25) {
      break;
    }
LABEL_18:
    unint64_t v20 = (v25 - 1) & v25;
    unint64_t v23 = __clz(__rbit64(v25)) + (v21 << 6);
LABEL_19:
    uint64_t v27 = v51;
    uint64_t v28 = *(void *)(v51 + 48);
    uint64_t v29 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v29 - 8) + 16LL))( v16,  v28 + *(void *)(*(void *)(v29 - 8) + 72LL) * v23,  v29);
    uint64_t v30 = *(void *)(*(void *)(v27 + 56) + 8 * v23);
    uint64_t v31 = v48;
    *(void *)&v16[*(int *)(v48 + 48)] = v30;
    sub_100015750((uint64_t)v16, (uint64_t)v14, &qword_1009A6680);
    uint64_t v32 = *(void *)&v14[*(int *)(v31 + 48)];
    __n128 v33 = swift_bridgeObjectRetain(v30);
    uint64_t v34 = (uint64_t)v49;
    v50(v14, v32, v33);
    if (v3)
    {
      sub_100015794((uint64_t)v14, &qword_1009A6680);
      swift_bridgeObjectRelease();
LABEL_32:
      swift_release();
      return;
    }

    sub_100015794((uint64_t)v14, &qword_1009A6680);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v34, 1LL, v46) == 1)
    {
      sub_100015794(v34, &qword_1009A6678);
    }

    else
    {
      uint64_t v35 = v34;
      uint64_t v36 = v41;
      sub_10002218C(v35, v41, type metadata accessor for FetchRequestBeacon);
      sub_10002218C(v36, v42, type metadata accessor for FetchRequestBeacon);
      if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0) {
        uint64_t v43 = (void *)sub_1004C5714(0, v43[2] + 1LL, 1, (unint64_t)v43);
      }
      unint64_t v38 = v43[2];
      unint64_t v37 = v43[3];
      if (v38 >= v37 >> 1) {
        uint64_t v43 = (void *)sub_1004C5714(v37 > 1, v38 + 1, 1, (unint64_t)v43);
      }
      uint64_t v39 = v42;
      unint64_t v40 = v43;
      void v43[2] = v38 + 1;
      sub_10002218C( v39,  (uint64_t)v40 + ((*(unsigned __int8 *)(v47 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80))
      + *(void *)(v47 + 72) * v38,
        type metadata accessor for FetchRequestBeacon);
    }
  }

  int64_t v26 = v21 + 1;
  if (v21 + 1 >= v45) {
    goto LABEL_32;
  }
  unint64_t v25 = *(void *)(v44 + 8 * v26);
  if (v25) {
    goto LABEL_17;
  }
  int64_t v26 = v21 + 2;
  if (v21 + 2 >= v45) {
    goto LABEL_32;
  }
  unint64_t v25 = *(void *)(v44 + 8 * v26);
  if (v25) {
    goto LABEL_17;
  }
  int64_t v26 = v21 + 3;
  if (v21 + 3 >= v45) {
    goto LABEL_32;
  }
  unint64_t v25 = *(void *)(v44 + 8 * v26);
  if (v25) {
    goto LABEL_17;
  }
  int64_t v26 = v21 + 4;
  if (v21 + 4 >= v45) {
    goto LABEL_32;
  }
  unint64_t v25 = *(void *)(v44 + 8 * v26);
  if (v25)
  {
LABEL_17:
    int64_t v21 = v26;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v21 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v21 >= v45) {
      goto LABEL_32;
    }
    unint64_t v25 = *(void *)(v44 + 8 * v21);
    ++v26;
    if (v25) {
      goto LABEL_18;
    }
  }

void *sub_10024051C(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = sub_100004AEC(&qword_10099D508);
  uint64_t v4 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  __n128 v33 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  unint64_t v40 = *(void **)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v37 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v36 = *(void *)(v4 + 72);
  uint64_t v41 = a2 + 56;
  v32[1] = a1;
  swift_bridgeObjectRetain(a1);
  uint64_t v10 = 0LL;
  uint64_t v11 = _swiftEmptyArrayStorage;
  uint64_t v35 = v9;
  do
  {
    if (*(void *)(a2 + 16))
    {
      unint64_t v12 = v37 + v36 * v10;
      uint64_t v13 = *(void *)(a2 + 40);
      uint64_t v14 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      unint64_t v42 = v12;
      uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v6, v14);
      uint64_t v16 = -1LL << *(_BYTE *)(a2 + 32);
      unint64_t v17 = v15 & ~v16;
      if (((*(void *)(v41 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) != 0)
      {
        uint64_t v38 = v10;
        uint64_t v39 = v11;
        uint64_t v18 = ~v16;
        uint64_t v19 = v40[9];
        unint64_t v20 = (void (*)(char *, unint64_t, uint64_t))v40[2];
        while (1)
        {
          uint64_t v21 = a2;
          v20(v8, *(void *)(a2 + 48) + v19 * v17, v6);
          uint64_t v22 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v42, v6, v22);
          uint64_t v24 = (void (*)(char *, uint64_t))v40[1];
          v24(v8, v6);
          if ((v23 & 1) != 0) {
            break;
          }
          unint64_t v17 = (v17 + 1) & v18;
          a2 = v21;
          if (((*(void *)(v41 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) == 0)
          {
            uint64_t v9 = v35;
            uint64_t v11 = v39;
            goto LABEL_4;
          }
        }

        unint64_t v25 = v33;
        uint64_t v26 = *(int *)(v34 + 48);
        unint64_t v27 = v42;
        v20(v33, v42, v6);
        char v28 = *(_BYTE *)(v27 + v26);
        v25[v26] = v28;
        v24(v25, v6);
        uint64_t v11 = v39;
        if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0) {
          uint64_t v11 = sub_1004C5B44(0LL, v11[2] + 1LL, 1, v11);
        }
        a2 = v21;
        uint64_t v9 = v35;
        unint64_t v30 = v11[2];
        unint64_t v29 = v11[3];
        if (v30 >= v29 >> 1) {
          uint64_t v11 = sub_1004C5B44((void *)(v29 > 1), v30 + 1, 1, v11);
        }
        void v11[2] = v30 + 1;
        *((_BYTE *)v11 + v30 + 32) = v28;
LABEL_4:
        uint64_t v10 = v38;
      }
    }

    ++v10;
  }

  while (v10 != v9);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_100240818(char *__src, char *a2, unint64_t a3, char *__dst, uint64_t a5)
{
  uint64_t v5 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 40;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 40;
  unint64_t v126 = __src;
  Swift::Int v125 = __dst;
  uint64_t v113 = (char *)a3;
  if (v9 >= v11)
  {
    if (v10 < -39) {
      goto LABEL_126;
    }
    if (__dst != a2 || &a2[40 * v11] <= __dst) {
      memmove(__dst, a2, 40 * v11);
    }
    uint64_t v59 = &v5[40 * v11];
    uint64_t v124 = v59;
    unint64_t v126 = v6;
    if (v7 >= v6 || v10 < 40)
    {
LABEL_123:
      sub_1003CB57C((void **)&v126, (const void **)&v125, &v124);
      return 1LL;
    }

    unint64_t v60 = *(void *)(a5 + 16);
    unint64_t v61 = v60 - 1;
    uint64_t v108 = v7;
    unint64_t v109 = v60;
    if (v60 <= 1) {
      unint64_t v60 = 1LL;
    }
    unint64_t v112 = v60 - 1;
    uint64_t v115 = a5 + 40;
    unint64_t v117 = v61;
    while (1)
    {
      sub_100013044((uint64_t)(v59 - 40), (uint64_t)v121);
      uint64_t v64 = v6 - 40;
      sub_100013044((uint64_t)(v6 - 40), (uint64_t)v118);
      uint64_t v65 = v122;
      uint64_t v66 = v123;
      sub_100012ED8(v121, v122);
      uint64_t v67 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v66 + 176))(v65, v66);
      char v68 = v67;
      if (!v109)
      {

        BOOL v77 = 0;
        goto LABEL_93;
      }

      uint64_t v69 = *(void *)(a5 + 32);
      uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
      uint64_t v72 = v71;
      uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
      if (v70 == v73 && v72 == v74)
      {

        swift_bridgeObjectRelease_n(v72, 2LL);
      }

      else
      {
        char v76 = _stringCompareWithSmolCheck(_:_:expecting:)(v70, v72, v73, v74, 0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v76 & 1) == 0)
        {
          uint64_t v78 = 0LL;
          while (v117 != v78)
          {
            uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(v115 + 8 * v78));
            uint64_t v95 = v94;
            uint64_t v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
            if (v93 == v96 && v95 == v97)
            {

              swift_bridgeObjectRelease_n(v95, 2LL);
              ++v78;
              goto LABEL_83;
            }

            char v99 = _stringCompareWithSmolCheck(_:_:expecting:)(v93, v95, v96, v97, 0LL);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            ++v78;
            if ((v99 & 1) != 0)
            {

              goto LABEL_83;
            }
          }

          goto LABEL_120;
        }
      }

      uint64_t v78 = 0LL;
LABEL_83:
      uint64_t v79 = v119;
      uint64_t v80 = v120;
      sub_100012ED8(v118, v119);
      char v68 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v80 + 176))(v79, v80);
      uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
      uint64_t v83 = v82;
      uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
      if (v81 == v84 && v83 == v85)
      {

        swift_bridgeObjectRelease_n(v83, 2LL);
LABEL_90:
        uint64_t v88 = 0LL;
LABEL_91:
        BOOL v77 = v78 < v88;
        goto LABEL_92;
      }

      char v87 = _stringCompareWithSmolCheck(_:_:expecting:)(v81, v83, v84, v85, 0LL);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v87 & 1) != 0)
      {

        goto LABEL_90;
      }

      uint64_t v88 = 0LL;
      while (v117 != v88)
      {
        if (v112 == v88)
        {
LABEL_125:
          __break(1u);
          goto LABEL_126;
        }

        uint64_t v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(v115 + 8 * v88));
        uint64_t v102 = v101;
        uint64_t v103 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
        if (v100 == v103 && v102 == v104)
        {

          swift_bridgeObjectRelease_n(v102, 2LL);
          ++v88;
          goto LABEL_91;
        }

        char v106 = _stringCompareWithSmolCheck(_:_:expecting:)(v100, v102, v103, v104, 0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        ++v88;
        if ((v106 & 1) != 0)
        {

          goto LABEL_91;
        }
      }

LABEL_120:
      BOOL v77 = 0;
LABEL_92:
      uint64_t v7 = v108;
LABEL_93:
      uint64_t v89 = v113 - 40;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v118);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v121);
      if (v77)
      {
        if (v113 != v6 || v89 >= v6)
        {
          __int128 v62 = *(_OWORD *)v64;
          __int128 v63 = *(_OWORD *)(v6 - 24);
          *((void *)v113 - 1) = *((void *)v6 - 1);
          *(_OWORD *)uint64_t v89 = v62;
          *(_OWORD *)(v113 - 24) = v63;
        }

        v126 -= 40;
        uint64_t v59 = v124;
        if (v124 <= v5) {
          goto LABEL_123;
        }
      }

      else
      {
        unint64_t v90 = (unint64_t)v124;
        uint64_t v59 = v124 - 40;
        v124 -= 40;
        if ((unint64_t)v113 < v90 || (unint64_t)v89 >= v90 || v113 != (char *)v90)
        {
          __int128 v91 = *(_OWORD *)v59;
          __int128 v92 = *(_OWORD *)(v90 - 24);
          *((void *)v113 - 1) = *(void *)(v90 - 8);
          *(_OWORD *)uint64_t v89 = v91;
          *(_OWORD *)(v113 - 24) = v92;
        }

        uint64_t v64 = v6;
        if (v59 <= v5) {
          goto LABEL_123;
        }
      }

      uint64_t v6 = v64;
      v113 -= 40;
      if (v64 <= v7) {
        goto LABEL_123;
      }
    }
  }

  if (v8 >= -39)
  {
    if (__dst != __src || &__src[40 * v9] <= __dst) {
      memmove(__dst, __src, 40 * v9);
    }
    unint64_t v114 = (unint64_t)&v5[40 * v9];
    uint64_t v124 = (char *)v114;
    if ((unint64_t)v6 < a3 && v8 >= 40)
    {
      unint64_t v13 = *(void *)(a5 + 16);
      unint64_t v14 = v13 - 1;
      unint64_t v111 = v13;
      if (v13 <= 1) {
        unint64_t v13 = 1LL;
      }
      unint64_t v116 = v13 - 1;
      uint64_t v15 = a5 + 40;
      while (1)
      {
        sub_100013044((uint64_t)v6, (uint64_t)v121);
        sub_100013044((uint64_t)v5, (uint64_t)v118);
        uint64_t v16 = v122;
        uint64_t v17 = v123;
        sub_100012ED8(v121, v122);
        uint64_t v18 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 176))(v16, v17);
        if (!v111) {
          goto LABEL_50;
        }
        uint64_t v19 = *(void *)(a5 + 32);
        uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        uint64_t v22 = v21;
        uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        if (v20 == v23 && v22 == v24)
        {

          swift_bridgeObjectRelease_n(v22, 2LL);
        }

        else
        {
          char v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v22, v23, v24, 0LL);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v26 & 1) == 0)
          {
            uint64_t v27 = 0LL;
            while (v14 != v27)
            {
              uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(v15 + 8 * v27));
              uint64_t v44 = v43;
              uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
              if (v42 == v45 && v44 == v46)
              {

                swift_bridgeObjectRelease_n(v44, 2LL);
                ++v27;
                goto LABEL_20;
              }

              char v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v44, v45, v46, 0LL);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              ++v27;
              if ((v48 & 1) != 0)
              {

                goto LABEL_20;
              }
            }

            goto LABEL_50;
          }
        }

        uint64_t v27 = 0LL;
LABEL_20:
        uint64_t v28 = v119;
        uint64_t v29 = v120;
        sub_100012ED8(v118, v119);
        uint64_t v18 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v29 + 176))(v28, v29);
        uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        uint64_t v32 = v31;
        uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        if (v30 == v33 && v32 == v34)
        {

          swift_bridgeObjectRelease_n(v32, 2LL);
        }

        else
        {
          char v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v32, v33, v34, 0LL);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v36 & 1) == 0)
          {
            uint64_t v37 = 0LL;
            while (v14 != v37)
            {
              if (v116 == v37)
              {
                __break(1u);
                goto LABEL_125;
              }

              uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(v15 + 8 * v37));
              uint64_t v51 = v50;
              uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
              if (v49 == v52 && v51 == v53)
              {

                swift_bridgeObjectRelease_n(v51, 2LL);
                ++v37;
                goto LABEL_28;
              }

              char v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v51, v52, v53, 0LL);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              ++v37;
              if ((v55 & 1) != 0)
              {

                goto LABEL_28;
              }
            }

LABEL_126:
  swift_bridgeObjectRelease();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

        if ((v223 & 1) != 0) {
          goto LABEL_175;
        }
        uint64_t v231 = &v197[16 * v200];
        unsigned __int8 v233 = *(void *)v231;
        uint64_t v232 = *((void *)v231 + 1);
        uint64_t v211 = __OFSUB__(v232, v233);
        os_log_type_t v234 = v232 - v233;
        if (v211) {
          goto LABEL_178;
        }
        if (v234 < v222)
        {
          uint64_t v64 = v293;
          goto LABEL_143;
        }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_1002410B0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v52 = result;
  if (a3 != a2)
  {
    uint64_t v5 = a3;
    unint64_t v6 = *(void *)(a5 + 16);
    unint64_t v7 = v6 - 1;
    unint64_t v54 = v6;
    if (v6 <= 1) {
      unint64_t v6 = 1LL;
    }
    unint64_t v62 = v6 - 1;
    uint64_t v8 = a5 + 40;
LABEL_8:
    uint64_t v51 = v5;
    while (1)
    {
      uint64_t v9 = *a4 + 40 * v5;
      sub_100013044(v9, (uint64_t)&v59);
      sub_100013044(v9 - 40, (uint64_t)v56);
      uint64_t v10 = v60;
      uint64_t v11 = v61;
      sub_100012ED8(&v59, v60);
      unint64_t v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 176))(v10, v11);
      if (!v54) {
        goto LABEL_6;
      }
      uint64_t v13 = *(void *)(a5 + 32);
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      uint64_t v16 = v15;
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      if (v14 == v17 && v16 == v18)
      {

        swift_bridgeObjectRelease_n(v16, 2LL);
      }

      else
      {
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v17, v18, 0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v20 & 1) == 0)
        {
          uint64_t v21 = 0LL;
          while (v7 != v21)
          {
            uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(v8 + 8 * v21));
            uint64_t v38 = v37;
            uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
            if (v36 == v39 && v38 == v40)
            {

              swift_bridgeObjectRelease_n(v38, 2LL);
              ++v21;
              goto LABEL_18;
            }

            char v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, v39, v40, 0LL);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            ++v21;
            if ((v42 & 1) != 0)
            {

              goto LABEL_18;
            }
          }

          goto LABEL_6;
        }
      }

      uint64_t v21 = 0LL;
LABEL_18:
      uint64_t v22 = v57;
      uint64_t v23 = v58;
      sub_100012ED8(v56, v57);
      unint64_t v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v23 + 176))(v22, v23);
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      uint64_t v26 = v25;
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      if (v24 == v27 && v26 == v28)
      {

        swift_bridgeObjectRelease_n(v26, 2LL);
      }

      else
      {
        char v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v26, v27, v28, 0LL);
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v30 & 1) == 0)
        {
          uint64_t v31 = 0LL;
          while (v7 != v31)
          {
            if (v62 == v31)
            {
              __break(1u);
              goto LABEL_50;
            }

            uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(v8 + 8 * v31));
            uint64_t v45 = v44;
            uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
            if (v43 == v46 && v45 == v47)
            {

              swift_bridgeObjectRelease_n(v45, 2LL);
              ++v31;
              goto LABEL_26;
            }

            char v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v43, v45, v46, v47, 0LL);
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            ++v31;
            if ((v49 & 1) != 0)
            {

              goto LABEL_26;
            }
          }

uint64_t sub_10024145C(uint64_t *a1, unint64_t a2)
{
  unint64_t v3 = a2;
  Swift::Int v4 = a1[1];
  swift_bridgeObjectRetain_n(a2, 3LL);
  Swift::Int v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if ((v4 & 0x8000000000000000LL) == 0)
    {
      if (!v4) {
        return swift_bridgeObjectRelease_n(v3, 3LL);
      }
      swift_bridgeObjectRetain(v3);
      sub_1002410B0(0LL, v4, 1LL, a1, v3);
      return swift_bridgeObjectRelease_n(v3, 4LL);
    }

    goto LABEL_248;
  }

  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_256;
  }
  uint64_t v213 = v2;
  uint64_t v214 = v3;
  Swift::Int v196 = v5;
  if (v4 < 2)
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    uint64_t v195 = _swiftEmptyArrayStorage;
    if (v4 == 1) {
      goto LABEL_12;
    }
    unint64_t v135 = _swiftEmptyArrayStorage[2];
LABEL_212:
    uint64_t v208 = v11;
    if (v135 < 2)
    {
LABEL_223:
      swift_bridgeObjectRelease();
      v195[2] = 0LL;
      swift_bridgeObjectRelease_n(v214, 3LL);
      return swift_bridgeObjectRelease();
    }

    uint64_t v188 = *a1;
    while (1)
    {
      unint64_t v189 = v135 - 2;
      if (v135 < 2) {
        break;
      }
      if (!v188) {
        goto LABEL_255;
      }
      uint64_t v190 = *(void *)&v208[16 * v189 + 32];
      uint64_t v191 = *(void *)&v208[16 * v135 + 24];
      uint64_t v192 = (char *)(v188 + 40LL * *(void *)&v208[16 * v135 + 16]);
      unint64_t v3 = v214;
      swift_bridgeObjectRetain(v214);
      sub_100240818((char *)(v188 + 40 * v190), v192, v188 + 40 * v191, __dst, v214);
      if (v213) {
        goto LABEL_224;
      }
      swift_bridgeObjectRelease();
      if (v191 < v190) {
        goto LABEL_244;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v208) & 1) == 0) {
        uint64_t v208 = sub_1003CBA90((uint64_t)v208);
      }
      unint64_t v3 = (unint64_t)v208;
      if (v189 >= *((void *)v208 + 2)) {
        goto LABEL_245;
      }
      uint64_t v193 = &v208[16 * v189 + 32];
      *(void *)uint64_t v193 = v190;
      *((void *)v193 + 1) = v191;
      unint64_t v194 = *((void *)v208 + 2);
      if (v135 > v194) {
        goto LABEL_246;
      }
      memmove(&v208[16 * v135 + 16], &v208[16 * v135 + 32], 16 * (v194 - v135));
      *((void *)v208 + 2) = v194 - 1;
      unint64_t v135 = v194 - 1;
      if (v194 <= 2) {
        goto LABEL_223;
      }
    }

LABEL_242:
    __break(1u);
LABEL_243:
    __break(1u);
LABEL_244:
    __break(1u);
LABEL_245:
    __break(1u);
LABEL_246:
    __break(1u);
LABEL_247:
    __break(1u);
LABEL_248:
    __break(1u);
LABEL_249:
    __break(1u);
LABEL_250:
    __break(1u);
    goto LABEL_251;
  }

  uint64_t v7 = v6 >> 1;
  uint64_t v8 = sub_100004AEC(&qword_1009B0530);
  uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v7;
  uint64_t v195 = (void *)v9;
  __dst = (char *)(v9 + 32);
LABEL_12:
  uint64_t v12 = 0LL;
  unint64_t v222 = v3 + 40;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    Swift::Int v13 = v12 + 1;
    uint64_t v211 = v12;
    if (v12 + 1 >= v4) {
      goto LABEL_100;
    }
    uint64_t v14 = *a1;
    sub_100013044(*a1 + 40 * v13, (uint64_t)&v219);
    uint64_t v198 = v14;
    sub_100013044(v14 + 40 * v12, (uint64_t)v216);
    uint64_t v15 = v220;
    uint64_t v16 = v221;
    sub_100012ED8(&v219, v220);
    uint64_t v17 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v16 + 176))(v15, v16);
    uint64_t v18 = v17;
    Swift::Int v197 = v4;
    unint64_t v199 = *(void *)(v3 + 16);
    uint64_t v205 = v11;
    if (v199)
    {
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(v3 + 32));
      uint64_t v21 = v20;
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      if (v19 == v22 && v21 == v23)
      {

        swift_bridgeObjectRelease_n(v21, 2LL);
        uint64_t v26 = 0LL;
      }

      else
      {
        char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v22, v23, 0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v25 & 1) != 0)
        {

          uint64_t v26 = 0LL;
        }

        else
        {
          uint64_t v26 = 0LL;
          unint64_t v3 = v199 - 1;
          while (1)
          {
            if (v3 == v26)
            {

              int v202 = 0;
              goto LABEL_37;
            }

            uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(v222 + 8 * v26));
            uint64_t v29 = v28;
            uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
            if (v27 == v30 && v29 == v31) {
              break;
            }
            char v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v29, v30, v31, 0LL);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            ++v26;
            if ((v33 & 1) != 0)
            {

              goto LABEL_33;
            }
          }

          swift_bridgeObjectRelease_n(v29, 2LL);
          ++v26;
LABEL_33:
          unint64_t v3 = v214;
        }
      }

      uint64_t v34 = v217;
      uint64_t v35 = v218;
      sub_100012ED8(v216, v217);
      uint64_t v36 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v35 + 176))(v34, v35);
      uint64_t v37 = sub_100226614((uint64_t)v36, v3);
      LOBYTE(v35) = v38;

      BOOL v39 = v26 < v37;
      if ((v35 & 1) != 0) {
        BOOL v39 = 0;
      }
      int v202 = v39;
LABEL_37:
      Swift::Int v4 = v197;
    }

    else
    {

      int v202 = 0;
    }

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v216);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v219);
    Swift::Int v40 = v12 + 2;
    if (v12 + 2 < v4) {
      break;
    }
    Swift::Int v13 = v12 + 2;
    uint64_t v43 = v198;
LABEL_87:
    if (v202) {
      goto LABEL_88;
    }
LABEL_97:
    unint64_t v3 = v214;
    uint64_t v11 = v205;
    if (v13 >= v4) {
      goto LABEL_159;
    }
LABEL_101:
    if (__OFSUB__(v13, v12)) {
      goto LABEL_247;
    }
    if (v13 - v12 >= v196) {
      goto LABEL_159;
    }
    if (__OFADD__(v12, v196)) {
      goto LABEL_249;
    }
    if (v12 + v196 >= v4) {
      Swift::Int v89 = v4;
    }
    else {
      Swift::Int v89 = v12 + v196;
    }
    if (v89 < v12) {
      goto LABEL_250;
    }
    if (v13 == v89) {
      goto LABEL_159;
    }
    unint64_t v90 = *(void *)(v3 + 16);
    unint64_t v3 = v90 - 1;
    unint64_t v206 = v11;
    unint64_t v210 = v90;
    if (v90 <= 1) {
      unint64_t v90 = 1LL;
    }
    unint64_t v91 = v90 - 1;
    Swift::Int v200 = v89;
    while (2)
    {
      Swift::Int v203 = v13;
      Swift::Int v92 = v13;
      while (2)
      {
        uint64_t v93 = *a1 + 40 * v92;
        sub_100013044(v93, (uint64_t)&v219);
        sub_100013044(v93 - 40, (uint64_t)v216);
        uint64_t v94 = v220;
        uint64_t v95 = v221;
        sub_100012ED8(&v219, v220);
        uint64_t v96 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v95 + 176))(v94, v95);
        if (!v210)
        {
LABEL_112:

          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v216);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v219);
          break;
        }

        uint64_t v97 = *(void *)(v214 + 32);
        uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v97);
        uint64_t v100 = v99;
        uint64_t v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
        if (v98 == v101 && v100 == v102)
        {

          swift_bridgeObjectRelease_n(v100, 2LL);
        }

        else
        {
          char v104 = _stringCompareWithSmolCheck(_:_:expecting:)(v98, v100, v101, v102, 0LL);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v104 & 1) == 0)
          {
            uint64_t v105 = 0LL;
            while (1)
            {
              if (v3 == v105) {
                goto LABEL_112;
              }
              uint64_t v120 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(v222 + 8 * v105));
              uint64_t v122 = v121;
              uint64_t v123 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
              if (v120 == v123 && v122 == v124) {
                break;
              }
              char v126 = _stringCompareWithSmolCheck(_:_:expecting:)(v120, v122, v123, v124, 0LL);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              ++v105;
              if ((v126 & 1) != 0)
              {

                goto LABEL_124;
              }
            }

            swift_bridgeObjectRelease_n(v122, 2LL);
            ++v105;
            goto LABEL_124;
          }
        }

        uint64_t v105 = 0LL;
LABEL_124:
        uint64_t v106 = v217;
        uint64_t v107 = v218;
        sub_100012ED8(v216, v217);
        uint64_t v96 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v107 + 176))(v106, v107);
        uint64_t v108 = static String._unconditionallyBridgeFromObjectiveC(_:)(v97);
        uint64_t v110 = v109;
        uint64_t v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
        if (v108 == v111 && v110 == v112)
        {

          swift_bridgeObjectRelease_n(v110, 2LL);
          goto LABEL_131;
        }

        char v114 = _stringCompareWithSmolCheck(_:_:expecting:)(v108, v110, v111, v112, 0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v114 & 1) != 0)
        {

LABEL_131:
          uint64_t v115 = 0LL;
          goto LABEL_132;
        }

        uint64_t v115 = 0LL;
        while (1)
        {
          if (v3 == v115) {
            goto LABEL_112;
          }
          if (v91 == v115)
          {
            __break(1u);
LABEL_226:
            __break(1u);
LABEL_227:
            __break(1u);
LABEL_228:
            __break(1u);
LABEL_229:
            __break(1u);
LABEL_230:
            __break(1u);
LABEL_231:
            __break(1u);
LABEL_232:
            __break(1u);
LABEL_233:
            __break(1u);
LABEL_234:
            __break(1u);
LABEL_235:
            __break(1u);
LABEL_236:
            __break(1u);
LABEL_237:
            __break(1u);
LABEL_238:
            __break(1u);
LABEL_239:
            __break(1u);
LABEL_240:
            __break(1u);
LABEL_241:
            __break(1u);
            goto LABEL_242;
          }

          uint64_t v127 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(v222 + 8 * v115));
          uint64_t v129 = v128;
          uint64_t v130 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
          if (v127 == v130 && v129 == v131) {
            break;
          }
          char v133 = _stringCompareWithSmolCheck(_:_:expecting:)(v127, v129, v130, v131, 0LL);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          ++v115;
          if ((v133 & 1) != 0)
          {

            goto LABEL_132;
          }
        }

        swift_bridgeObjectRelease_n(v129, 2LL);
        ++v115;
LABEL_132:
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v216);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v219);
        if (v105 < v115)
        {
          uint64_t v116 = *a1;
          if (!*a1) {
            goto LABEL_252;
          }
          uint64_t v117 = v116 + 40 * v92;
          uint64_t v118 = v116 + 40 * (v92 - 1);
          sub_100012EC0((__int128 *)v117, (uint64_t)&v219);
          __int128 v119 = *(_OWORD *)(v118 + 16);
          *(_OWORD *)uint64_t v117 = *(_OWORD *)v118;
          *(_OWORD *)(v117 + swift_weakDestroy(v0 + 16) = v119;
          *(void *)(v117 + 32) = *(void *)(v118 + 32);
          sub_100012EC0(&v219, v118);
          if (--v92 == v211) {
            break;
          }
          continue;
        }

        break;
      }

      Swift::Int v13 = v203 + 1;
      if (v203 + 1 != v200) {
        continue;
      }
      break;
    }

    Swift::Int v13 = v200;
    uint64_t v11 = v206;
    uint64_t v12 = v211;
LABEL_159:
    if (v13 < v12) {
      goto LABEL_243;
    }
    Swift::Int v204 = v13;
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0) {
      uint64_t v11 = sub_1003CB1DC(0LL, *((void *)v11 + 2) + 1LL, 1, v11);
    }
    unint64_t v3 = *((void *)v11 + 2);
    unint64_t v134 = *((void *)v11 + 3);
    unint64_t v135 = v3 + 1;
    if (v3 >= v134 >> 1) {
      uint64_t v11 = sub_1003CB1DC((char *)(v134 > 1), v3 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v135;
    uint64_t v136 = v11 + 32;
    uint64_t v137 = &v11[16 * v3 + 32];
    *(void *)uint64_t v137 = v12;
    *((void *)v137 + 1) = v13;
    if (v3)
    {
      uint64_t v207 = v11;
      uint64_t v212 = v11 + 32;
      while (1)
      {
        unint64_t v138 = v135 - 1;
        if (v135 >= 4)
        {
          uint64_t v143 = &v136[16 * v135];
          uint64_t v144 = *((void *)v143 - 8);
          uint64_t v145 = *((void *)v143 - 7);
          BOOL v149 = __OFSUB__(v145, v144);
          uint64_t v146 = v145 - v144;
          if (v149) {
            goto LABEL_231;
          }
          uint64_t v148 = *((void *)v143 - 6);
          uint64_t v147 = *((void *)v143 - 5);
          BOOL v149 = __OFSUB__(v147, v148);
          uint64_t v141 = v147 - v148;
          char v142 = v149;
          if (v149) {
            goto LABEL_232;
          }
          unint64_t v150 = v135 - 2;
          os_log_t v151 = &v136[16 * v135 - 32];
          uint64_t v153 = *(void *)v151;
          uint64_t v152 = *((void *)v151 + 1);
          BOOL v149 = __OFSUB__(v152, v153);
          uint64_t v154 = v152 - v153;
          if (v149) {
            goto LABEL_234;
          }
          BOOL v149 = __OFADD__(v141, v154);
          uint64_t v155 = v141 + v154;
          if (v149) {
            goto LABEL_237;
          }
          if (v155 >= v146)
          {
            uint64_t v173 = &v136[16 * v138];
            uint64_t v175 = *(void *)v173;
            uint64_t v174 = *((void *)v173 + 1);
            BOOL v149 = __OFSUB__(v174, v175);
            uint64_t v176 = v174 - v175;
            if (v149) {
              goto LABEL_241;
            }
            BOOL v166 = v141 < v176;
            goto LABEL_197;
          }
        }

        else
        {
          if (v135 != 3)
          {
            uint64_t v167 = *((void *)v11 + 4);
            uint64_t v168 = *((void *)v11 + 5);
            BOOL v149 = __OFSUB__(v168, v167);
            uint64_t v160 = v168 - v167;
            char v161 = v149;
            goto LABEL_191;
          }

          uint64_t v140 = *((void *)v11 + 4);
          uint64_t v139 = *((void *)v11 + 5);
          BOOL v149 = __OFSUB__(v139, v140);
          uint64_t v141 = v139 - v140;
          char v142 = v149;
        }

        if ((v142 & 1) != 0) {
          goto LABEL_233;
        }
        unint64_t v150 = v135 - 2;
        uint64_t v156 = &v136[16 * v135 - 32];
        uint64_t v158 = *(void *)v156;
        uint64_t v157 = *((void *)v156 + 1);
        BOOL v159 = __OFSUB__(v157, v158);
        uint64_t v160 = v157 - v158;
        char v161 = v159;
        if (v159) {
          goto LABEL_236;
        }
        uint64_t v162 = &v136[16 * v138];
        uint64_t v164 = *(void *)v162;
        uint64_t v163 = *((void *)v162 + 1);
        BOOL v149 = __OFSUB__(v163, v164);
        uint64_t v165 = v163 - v164;
        if (v149) {
          goto LABEL_239;
        }
        if (__OFADD__(v160, v165)) {
          goto LABEL_240;
        }
        if (v160 + v165 >= v141)
        {
          BOOL v166 = v141 < v165;
LABEL_197:
          if (v166) {
            unint64_t v138 = v150;
          }
          goto LABEL_199;
        }

LABEL_191:
        if ((v161 & 1) != 0) {
          goto LABEL_235;
        }
        uint64_t v169 = &v136[16 * v138];
        uint64_t v171 = *(void *)v169;
        uint64_t v170 = *((void *)v169 + 1);
        BOOL v149 = __OFSUB__(v170, v171);
        uint64_t v172 = v170 - v171;
        if (v149) {
          goto LABEL_238;
        }
        if (v172 < v160) {
          goto LABEL_208;
        }
LABEL_199:
        unint64_t v177 = v138 - 1;
        if (v138 - 1 >= v135) {
          goto LABEL_226;
        }
        uint64_t v178 = *a1;
        if (!*a1) {
          goto LABEL_253;
        }
        uint64_t v179 = &v136[16 * v177];
        unint64_t v180 = v136;
        uint64_t v181 = *(void *)v179;
        unint64_t v3 = v138;
        uint64_t v182 = &v180[16 * v138];
        uint64_t v183 = *((void *)v182 + 1);
        uint64_t v184 = (char *)(v178 + 40LL * *(void *)v179);
        unint64_t v185 = (char *)(v178 + 40LL * *(void *)v182);
        unint64_t v186 = v178 + 40 * v183;
        swift_bridgeObjectRetain(v214);
        sub_100240818(v184, v185, v186, __dst, v214);
        if (v213)
        {
LABEL_224:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v195[2] = 0LL;
          swift_bridgeObjectRelease_n(v214, 3LL);
          return swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease();
        if (v183 < v181) {
          goto LABEL_227;
        }
        uint64_t v11 = v207;
        if (v3 > *((void *)v207 + 2)) {
          goto LABEL_228;
        }
        *(void *)uint64_t v179 = v181;
        uint64_t v136 = v212;
        *(void *)&v212[16 * v177 + 8] = v183;
        unint64_t v187 = *((void *)v207 + 2);
        if (v3 >= v187) {
          goto LABEL_229;
        }
        uint64_t v213 = 0LL;
        unint64_t v135 = v187 - 1;
        memmove(v182, v182 + 16, 16 * (v187 - 1 - v3));
        *((void *)v207 + 2) = v187 - 1;
        if (v187 <= 2) {
          goto LABEL_208;
        }
      }
    }

    unint64_t v135 = 1LL;
LABEL_208:
    unint64_t v3 = v214;
    Swift::Int v4 = a1[1];
    uint64_t v12 = v204;
    if (v204 >= v4) {
      goto LABEL_212;
    }
  }

  Swift::Int v41 = v12 + 1;
  uint64_t v43 = v198;
  uint64_t v42 = v199;
  unint64_t v3 = v199 - 1;
  if (v199 <= 1) {
    uint64_t v42 = 1LL;
  }
  uint64_t v209 = v42 - 1;
  while (1)
  {
    sub_100013044(v43 + 40 * v40, (uint64_t)&v219);
    sub_100013044(v43 + 40 * v41, (uint64_t)v216);
    uint64_t v44 = v220;
    uint64_t v45 = v221;
    sub_100012ED8(&v219, v220);
    uint64_t v46 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v45 + 176))(v44, v45);
    uint64_t v47 = v46;
    if (!v199)
    {

      int v56 = 0;
      goto LABEL_62;
    }

    uint64_t v48 = *(void *)(v214 + 32);
    uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    uint64_t v51 = v50;
    uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    if (v49 == v52 && v51 == v53)
    {

      swift_bridgeObjectRelease_n(v51, 2LL);
      goto LABEL_51;
    }

    char v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v51, v52, v53, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v55 & 1) != 0)
    {

LABEL_51:
      uint64_t v57 = 0LL;
      goto LABEL_52;
    }

    uint64_t v57 = 0LL;
    while (1)
    {
      if (v3 == v57)
      {

        int v56 = 0;
        uint64_t v12 = v211;
        Swift::Int v4 = v197;
        uint64_t v43 = v198;
        goto LABEL_62;
      }

      uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(v222 + 8 * v57));
      uint64_t v71 = v70;
      uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
      if (v69 == v72 && v71 == v73) {
        break;
      }
      char v75 = _stringCompareWithSmolCheck(_:_:expecting:)(v69, v71, v72, v73, 0LL);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      ++v57;
      if ((v75 & 1) != 0)
      {

        goto LABEL_52;
      }
    }

    swift_bridgeObjectRelease_n(v71, 2LL);
    ++v57;
LABEL_52:
    uint64_t v58 = v217;
    uint64_t v59 = v218;
    sub_100012ED8(v216, v217);
    uint64_t v60 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v59 + 176))(v58, v59);
    uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    uint64_t v63 = v62;
    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
    BOOL v66 = v61 == v64 && v63 == v65;
    uint64_t v43 = v198;
    if (v66)
    {

      swift_bridgeObjectRelease_n(v63, 2LL);
    }

    else
    {
      char v67 = _stringCompareWithSmolCheck(_:_:expecting:)(v61, v63, v64, v65, 0LL);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v67 & 1) == 0)
      {
        uint64_t v68 = 0LL;
        while (1)
        {
          if (v3 == v68)
          {

            int v56 = 0;
            goto LABEL_61;
          }

          if (v209 == v68) {
            goto LABEL_230;
          }
          uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(v222 + 8 * v68));
          uint64_t v78 = v77;
          uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
          if (v76 == v79 && v78 == v80) {
            break;
          }
          char v82 = _stringCompareWithSmolCheck(_:_:expecting:)(v76, v78, v79, v80, 0LL);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          ++v68;
          if ((v82 & 1) != 0)
          {

            goto LABEL_60;
          }
        }

        swift_bridgeObjectRelease_n(v78, 2LL);
        ++v68;
        goto LABEL_60;
      }
    }

    uint64_t v68 = 0LL;
LABEL_60:
    int v56 = v57 < v68;
LABEL_61:
    uint64_t v12 = v211;
    Swift::Int v4 = v197;
LABEL_62:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v216);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v219);
    if (v202 != v56) {
      break;
    }
    Swift::Int v13 = v40 + 1;
    Swift::Int v41 = v40;
    Swift::Int v40 = v13;
    if (v13 >= v4) {
      goto LABEL_87;
    }
  }

  Swift::Int v13 = v40;
  if (!v202) {
    goto LABEL_97;
  }
LABEL_88:
  uint64_t v11 = v205;
  if (v13 >= v12)
  {
    if (v12 < v13)
    {
      uint64_t v83 = 40 * v13 - 40;
      unint64_t v3 = 40 * v12;
      Swift::Int v84 = v12;
      Swift::Int v85 = v13;
      do
      {
        if (v84 != --v85)
        {
          if (!v43) {
            goto LABEL_254;
          }
          unint64_t v86 = v43 + v3;
          sub_100012EC0((__int128 *)(v43 + v3), (uint64_t)&v219);
          uint64_t v87 = *(void *)(v43 + v83 + 32);
          __int128 v88 = *(_OWORD *)(v43 + v83 + 16);
          *(_OWORD *)unint64_t v86 = *(_OWORD *)(v43 + v83);
          *(_OWORD *)(v86 + swift_weakDestroy(v0 + 16) = v88;
          *(void *)(v86 + 32) = v87;
          sub_100012EC0(&v219, v43 + v83);
        }

        ++v84;
        v83 -= 40LL;
        v3 += 40LL;
      }

      while (v84 < v85);
      unint64_t v3 = v214;
      uint64_t v11 = v205;
      uint64_t v12 = v211;
      Swift::Int v4 = v197;
      if (v13 >= v197) {
        goto LABEL_159;
      }
      goto LABEL_101;
    }

    unint64_t v3 = v214;
LABEL_100:
    if (v13 >= v4) {
      goto LABEL_159;
    }
    goto LABEL_101;
  }

  __break(1u);
LABEL_192:
  swift_release_n(v292, 3LL);
  __break(1u);
LABEL_193:
  swift_release_n(v292, 3LL);
  __break(1u);
LABEL_194:
  swift_release_n(v292, 3LL);
  __break(1u);
LABEL_195:
  swift_release_n(v292, 3LL);
  __break(1u);
LABEL_196:
  swift_release_n(v292, 4LL);
  LOBYTE(v269) = 2;
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  v269,  936LL,  0);
  __break(1u);
  return result;
}

LABEL_251:
  __break(1u);
LABEL_252:
  swift_bridgeObjectRelease_n(v214, 3LL);
  __break(1u);
LABEL_253:
  swift_bridgeObjectRelease_n(v214, 3LL);
  __break(1u);
LABEL_254:
  swift_bridgeObjectRelease_n(v214, 3LL);
  __break(1u);
LABEL_255:
  swift_bridgeObjectRelease_n(v214, 3LL);
  __break(1u);
LABEL_256:
  swift_bridgeObjectRelease_n(v3, 4LL);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_100242414(void **a1, unint64_t a2)
{
  Swift::Int v4 = *a1;
  swift_bridgeObjectRetain_n(a2, 2LL);
  if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0) {
    Swift::Int v4 = (void *)sub_1003D4A14(v4);
  }
  uint64_t v5 = v4[2];
  v7[0] = (uint64_t)(v4 + 4);
  v7[1] = v5;
  swift_bridgeObjectRetain(a2);
  sub_10024145C(v7, a2);
  swift_bridgeObjectRelease();
  *a1 = v4;
  return swift_bridgeObjectRelease_n(a2, 2LL);
}

void sub_1002424B4(uint64_t a1, void *a2, void (*a3)(void *), uint64_t a4)
{
  uint64_t v289 = a1;
  __int128 v270 = (void *)type metadata accessor for FMNAccountType(0LL);
  uint64_t v269 = *(v270 - 1);
  __chkstk_darwin(v270);
  uint64_t v262 = (char *)&v257 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t Endpoint = type metadata accessor for FetchEndpoint(0LL);
  uint64_t v8 = __chkstk_darwin(Endpoint);
  uint64_t v265 = (uint64_t)&v257 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v263 = (uint64_t *)((char *)&v257 - v10);
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009A6DB0);
  __chkstk_darwin(v11);
  uint64_t v282 = (char *)&v257 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v258 = type metadata accessor for OwnedDeviceFetchEndpoint(0LL);
  uint64_t v13 = __chkstk_darwin(v258);
  uint64_t v260 = (uint64_t)&v257 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v259 = (char *)&v257 - v15;
  uint64_t v297 = type metadata accessor for UUID(0LL);
  uint64_t v296 = *(void *)(v297 - 8);
  uint64_t v16 = __chkstk_darwin(v297);
  unint64_t v264 = (char *)&v257 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  unint64_t v291 = (char *)&v257 - v18;
  uint64_t v19 = sub_100004AEC(&qword_1009A6668);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v292 = (char *)&v257 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  os_log_t v294 = (char *)&v257 - v22;
  uint64_t v23 = type metadata accessor for LocationFetcher(0LL);
  uint64_t v276 = *(void *)(v23 - 8);
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v290 = (uint64_t *)((char *)&v257 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v278 = (uint64_t)&v257 - v27;
  uint64_t v277 = v28;
  __chkstk_darwin(v26);
  uint64_t v30 = (uint64_t *)((char *)&v257 - v29);
  uint64_t v31 = type metadata accessor for Logger(0LL);
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v273 = (char *)&v257 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v274 = (char *)&v257 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  int v271 = (char *)&v257 - v38;
  __chkstk_darwin(v37);
  Swift::Int v40 = (char *)&v257 - v39;
  uint64_t v41 = type metadata accessor for Date(0LL);
  int64_t v288 = *(void *)(v41 - 8);
  uint64_t v42 = __chkstk_darwin(v41);
  uint64_t v257 = (uint64_t)&v257 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = __chkstk_darwin(v42);
  __int128 v268 = (char *)&v257 - v45;
  __chkstk_darwin(v44);
  uint64_t v47 = (char *)&v257 - v46;
  uint64_t v48 = swift_allocObject(&unk_10094ADA8, 32LL, 7LL);
  uint64_t v266 = a3;
  *(void *)(v48 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(v48 + 24) = a4;
  uint64_t v275 = v48;
  uint64_t v267 = a4;
  swift_retain();
  static Date.trustedNow.getter((uint64_t)v47);
  uint64_t v49 = swift_allocObject(&unk_10094AA88, 24LL, 7LL);
  uint64_t v283 = v49;
  *(void *)(v49 + swift_weakDestroy(v0 + 16) = &_swiftEmptyDictionarySingleton;
  unint64_t v293 = (uint64_t *)(v49 + 16);
  uint64_t v50 = swift_allocObject(&unk_10094AAB0, 24LL, 7LL);
  uint64_t v286 = v50;
  *(void *)(v50 + swift_weakDestroy(v0 + 16) = &_swiftEmptyDictionarySingleton;
  uint64_t v272 = (void (*)(char *, uint64_t))(v50 + 16);
  uint64_t v51 = (char *)a2 + *(int *)(v23 + 32);
  uint64_t v285 = v32;
  uint64_t v52 = *(uint64_t (**)(char *, char *, uint64_t))(v32 + 16);
  unint64_t v279 = v51;
  uint64_t v280 = v52;
  ((void (*)(char *))v52)(v40);
  uint64_t v295 = a2;
  uint64_t v53 = sub_10001DC4C((uint64_t)a2, (uint64_t)v30, type metadata accessor for LocationFetcher);
  unint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
  os_log_type_t v55 = static os_log_type_t.default.getter(v54);
  BOOL v56 = os_log_type_enabled(v54, v55);
  unint64_t v284 = v47;
  uint64_t v287 = v31;
  if (v56)
  {
    uint64_t v57 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v58 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v57 = 136446210;
    *(void *)&__int128 v308 = v58;
    uint64_t v281 = (void (*)(char *, uint64_t))(v57 + 4);
    uint64_t v59 = v41;
    uint64_t v61 = v30[6];
    uint64_t v60 = v30[7];
    sub_100012ED8(v30 + 3, v61);
    uint64_t v62 = v61;
    uint64_t v41 = v59;
    uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter(v62, *(void *)(v60 + 8));
    uint64_t v304 = sub_1003F11D4(v63, v64, (uint64_t *)&v308);
    uint64_t v47 = v284;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v304, v305, v281, v57 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v30, type metadata accessor for LocationFetcher);
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Begin location fetch with policy: %{public}s.", v57, 0xCu);
    swift_arrayDestroy(v58, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1LL, -1LL);
    swift_slowDealloc(v57, -1LL, -1LL);

    uint64_t v65 = *(void (**)(char *, uint64_t))(v285 + 8);
    BOOL v66 = v40;
    uint64_t v67 = v287;
  }

  else
  {
    sub_100018C68((uint64_t)v30, type metadata accessor for LocationFetcher);

    uint64_t v65 = *(void (**)(char *, uint64_t))(v285 + 8);
    BOOL v66 = v40;
    uint64_t v67 = v31;
  }

  uint64_t v281 = v65;
  v65(v66, v67);
  uint64_t v68 = swift_allocObject(&unk_10094AAD8, 24LL, 7LL);
  uint64_t v285 = v68;
  *(void *)(v68 + swift_weakDestroy(v0 + 16) = &_swiftEmptyDictionarySingleton;
  uint64_t v69 = (void *)(v68 + 16);
  uint64_t v70 = v295;
  uint64_t v71 = v295 + 3;
  uint64_t v72 = v295[6];
  uint64_t v73 = v295[7];
  sub_100012ED8(v295 + 3, v72);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v73 + 24))(v72, v73) & 1) != 0)
  {
    uint64_t v282 = 0LL;
  }

  else
  {
    uint64_t v74 = v70[6];
    uint64_t v75 = v70[7];
    sub_100012ED8(v70 + 3, v74);
    char v76 = (*(uint64_t (**)(uint64_t, uint64_t))(v75 + 64))(v74, v75);
    uint64_t v77 = *(void (**)(char *, uint64_t, void *))(v269 + 104);
    if ((v76 & 1) != 0)
    {
      uint64_t v78 = (uint64_t)v259;
      v77(v259, enum case for FMNAccountType.ownedDeviceLocations(_:), v270);
      sub_1001C5C1C(v78 + *(int *)(v258 + 20));
      uint64_t MyAppURLSessionFactory = type metadata accessor for FindMyAppURLSessionFactory(0LL);
      swift_allocObject( MyAppURLSessionFactory,  *(unsigned int *)(MyAppURLSessionFactory + 48),  *(unsigned __int16 *)(MyAppURLSessionFactory + 52));
      uint64_t v80 = type metadata accessor for FMNMockingPreferences(0LL);
      uint64_t v81 = v282;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56LL))(v282, 1LL, 1LL, v80);
      uint64_t v82 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0LL, 0LL, v81);
      uint64_t v83 = type metadata accessor for ServerInteractionController(0LL);
      uint64_t v84 = swift_allocObject(v83, *(unsigned int *)(v83 + 48), *(unsigned __int16 *)(v83 + 52));
      Swift::Int v85 = type metadata accessor for OwnedDeviceFetchEndpoint;
      uint64_t v86 = v260;
      sub_10001DC4C(v78, v260, type metadata accessor for OwnedDeviceFetchEndpoint);
      uint64_t v87 = sub_10043192C(v86, v82, v84);
    }

    else
    {
      uint64_t v88 = enum case for FMNAccountType.searchParty(_:);
      uint64_t v89 = (uint64_t)v262;
      unint64_t v90 = v270;
      v77(v262, enum case for FMNAccountType.searchParty(_:), v270);
      uint64_t v91 = type metadata accessor for AccountURLComponents();
      swift_allocObject(v91, 56LL, 7LL);
      Swift::Int v92 = sub_1006C217C(v89);
      uint64_t v78 = (uint64_t)v263;
      *uint64_t v263 = v92;
      v77((char *)(v78 + *(int *)(Endpoint + 20)), v88, v90);
      uint64_t v93 = type metadata accessor for FindMyAppURLSessionFactory(0LL);
      swift_allocObject(v93, *(unsigned int *)(v93 + 48), *(unsigned __int16 *)(v93 + 52));
      uint64_t v94 = type metadata accessor for FMNMockingPreferences(0LL);
      uint64_t v95 = v282;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v94 - 8) + 56LL))(v282, 1LL, 1LL, v94);
      uint64_t v96 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0LL, 0LL, v95);
      uint64_t v97 = type metadata accessor for ServerInteractionController(0LL);
      uint64_t v98 = swift_allocObject(v97, *(unsigned int *)(v97 + 48), *(unsigned __int16 *)(v97 + 52));
      Swift::Int v85 = type metadata accessor for FetchEndpoint;
      uint64_t v99 = v265;
      sub_10001DC4C(v78, v265, type metadata accessor for FetchEndpoint);
      uint64_t v87 = sub_100431910(v99, v96, v98);
    }

    uint64_t v282 = (char *)v87;
    sub_100018C68(v78, v85);
  }

  uint64_t v100 = v70[6];
  uint64_t v101 = v70[7];
  sub_100012ED8(v70 + 3, v100);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v101 + 24))(v100, v101) & 1) != 0)
  {
    uint64_t v102 = swift_allocObject(&unk_10094ADF8, 32LL, 7LL);
    uint64_t v103 = v275;
    *(void *)(v102 + swift_weakDestroy(v0 + 16) = sub_100247258;
    *(void *)(v102 + 24) = v103;
    type metadata accessor for Transaction(0LL);
    uint64_t v104 = v278;
    sub_10001DC4C((uint64_t)v70, v278, type metadata accessor for LocationFetcher);
    uint64_t v105 = *(unsigned __int8 *)(v276 + 80);
    uint64_t v106 = (v105 + 40) & ~v105;
    uint64_t v107 = (void *)swift_allocObject(&unk_10094AE20, v106 + v277, v105 | 7);
    v107[2] = sub_100039568;
    v107[3] = v102;
    uint64_t v108 = v289;
    _BYTE v107[4] = v289;
    sub_10002218C(v104, (uint64_t)v107 + v106, type metadata accessor for LocationFetcher);
    swift_bridgeObjectRetain(v108);
    swift_retain();
    swift_retain();
    static Transaction.asyncTask(name:block:)("beaconsFromDisk.FromDisk", 24LL, 2LL, &unk_1009A6718, v107);
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v288 + 8))(v47, v41);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return;
  }

  uint64_t v263 = v69;
  __int128 v270 = v71;
  uint64_t v269 = v41;
  uint64_t v109 = swift_allocObject(&unk_10094AB00, 24LL, 7LL);
  *(void *)(v109 + swift_weakDestroy(v0 + 16) = &_swiftEmptyDictionarySingleton;
  uint64_t v265 = v109 + 16;
  uint64_t v110 = swift_allocObject(&unk_10094AB28, 24LL, 7LL);
  *(void *)(v110 + swift_weakDestroy(v0 + 16) = _swiftEmptyArrayStorage;
  uint64_t v262 = (char *)(v110 + 16);
  uint64_t v111 = (uint64_t)v70;
  uint64_t v112 = v278;
  sub_10001DC4C(v111, v278, type metadata accessor for LocationFetcher);
  uint64_t v113 = *(unsigned __int8 *)(v276 + 80);
  uint64_t v114 = (v113 + 32) & ~v113;
  unint64_t v115 = (v277 + v114 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v116 = (v115 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v117 = (v116 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v118 = swift_allocObject(&unk_10094ADD0, v117 + 8, v113 | 7);
  uint64_t v119 = v286;
  *(void *)(v118 + swift_weakDestroy(v0 + 16) = v285;
  *(void *)(v118 + 24) = v119;
  sub_10002218C(v112, v118 + v114, type metadata accessor for LocationFetcher);
  uint64_t v120 = v283;
  *(void *)(v118 + v115) = v283;
  uint64_t v277 = v110;
  *(void *)(v118 + v1swift_weakDestroy(v0 + 16) = v110;
  uint64_t v276 = v118;
  *(void *)(v118 + v117) = v109;
  uint64_t v121 = v109;
  uint64_t v122 = v271;
  uint64_t v123 = v287;
  uint64_t v124 = v280(v271, v279, v287);
  Swift::Int v125 = (os_log_s *)Logger.logObject.getter(v124);
  os_log_type_t v126 = static os_log_type_t.default.getter(v125);
  if (os_log_type_enabled(v125, v126))
  {
    uint64_t v127 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v127 = 0;
    _os_log_impl((void *)&_mh_execute_header, v125, v126, "Gathering beacon information for fetch.", v127, 2u);
    swift_slowDealloc(v127, -1LL, -1LL);
  }

  swift_retain();
  uint64_t Endpoint = v121;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();

  v281(v122, v123);
  int64_t v128 = *(void *)(v289 + 16);
  swift_bridgeObjectRetain(v289);
  uint64_t v130 = v297;
  if (v128)
  {
    uint64_t v131 = v129 + 32;
    double v132 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
    int64_t v133 = v128;
    do
    {
      sub_100013044(v131, (uint64_t)&v308);
      sub_100012EC0(&v308, (uint64_t)&v304);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)&v132);
      double v301 = v132;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100032928(0, *(void *)(*(void *)&v132 + 16LL) + 1LL, 1);
        double v132 = v301;
      }

      unint64_t v136 = *(void *)(*(void *)&v132 + 16LL);
      unint64_t v135 = *(void *)(*(void *)&v132 + 24LL);
      if (v136 >= v135 >> 1) {
        sub_100032928(v135 > 1, v136 + 1, 1);
      }
      uint64_t v137 = v306;
      uint64_t v138 = v307;
      uint64_t v139 = sub_100037298((uint64_t)&v304, v306);
      __chkstk_darwin(v139);
      uint64_t v141 = (char *)&v257 - ((v140 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v142 + 16))(v141);
      sub_1002BBA60(v136, (uint64_t)v141, (uint64_t *)&v301, v137, v138);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v304);
      double v132 = v301;
      v131 += 40LL;
      --v133;
      uint64_t v130 = v297;
    }

    while (v133);
  }

  else
  {
    double v132 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
  }

  uint64_t v143 = v289;
  uint64_t v144 = swift_bridgeObjectRelease();
  uint64_t v303 = &_swiftEmptyDictionarySingleton;
  __chkstk_darwin(v144);
  uint64_t v145 = v295;
  *(&v257 - 8) = (uint64_t)v262;
  *(&v257 - 7) = (uint64_t)v145;
  uint64_t v146 = (uint64_t)v272;
  *(&v257 - 6) = (uint64_t)v293;
  *(&v257 - 5) = v146;
  *(&v257 - 4) = (uint64_t)&v303;
  *(&v257 - 3) = (uint64_t)v282;
  *(&v257 - 2) = (uint64_t)sub_1002462B4;
  *(&v257 - 1) = v276;
  sub_10021E578(*(void **)&v132, (void (*)(uint64_t, uint64_t))sub_1002462B8, (uint64_t)(&v257 - 10));
  swift_release();
  uint64_t v147 = v263;
  swift_beginAccess(v263, &v304, 0LL, 0LL);
  swift_bridgeObjectRetain(*v147);
  uint64_t v148 = 0LL;
  uint64_t v150 = sub_10023F25C(v149);
  uint64_t v151 = swift_bridgeObjectRelease();
  __chkstk_darwin(v151);
  *(&v257 - 4) = v146;
  *(&v257 - 3) = (uint64_t)v145;
  *(&v257 - 2) = v120;
  sub_100218B90((void (*)(char *, __n128))sub_100247CD4, (uint64_t)(&v257 - 6), v150);
  swift_release();
  double v152 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
  if (v128)
  {
    uint64_t v278 = 0LL;
    double v301 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
    sub_1000328D0(0, v128, 0);
    uint64_t v153 = v143 + 32;
    double v152 = v301;
    uint64_t v154 = v269;
    uint64_t v155 = v296;
    uint64_t v156 = v264;
    do
    {
      sub_100013044(v153, (uint64_t)&v308);
      uint64_t v157 = v309;
      uint64_t v158 = v310;
      sub_100012ED8(&v308, v309);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v158 + 8) + 8LL) + 32LL))(v157);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v308);
      if ((swift_isUniquelyReferenced_nonNull_native(*(void *)&v152) & 1) == 0)
      {
        sub_1000328D0(0, *(void *)(*(void *)&v152 + 16LL) + 1LL, 1);
        double v152 = v301;
      }

      unint64_t v160 = *(void *)(*(void *)&v152 + 16LL);
      unint64_t v159 = *(void *)(*(void *)&v152 + 24LL);
      if (v160 >= v159 >> 1)
      {
        sub_1000328D0(v159 > 1, v160 + 1, 1);
        double v152 = v301;
      }

      *(void *)(*(void *)&v152 + 1sub_1001F5B54(*(void (**)(void *))(v0 + 16), *(void *)(v0 + 24), 6LL) = v160 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v155 + 32))( *(void *)&v152 + ((*(unsigned __int8 *)(v155 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80))
      + *(void *)(v155 + 72) * v160,
        v156,
        v130);
      double v301 = v152;
      v153 += 40LL;
      --v128;
    }

    while (v128);
    uint64_t v161 = v154;
    uint64_t v148 = v278;
  }

  else
  {
    uint64_t v161 = v269;
  }

  uint64_t v162 = sub_1006F1060(*(uint64_t *)&v152);
  swift_bridgeObjectRelease();
  uint64_t v163 = v295;
  uint64_t v164 = v295[6];
  uint64_t v165 = v295[7];
  BOOL v166 = v270;
  sub_100012ED8(v270, v164);
  (*(void (**)(uint64_t, uint64_t))(v165 + 24))(v164, v165);
  uint64_t v167 = v163[6];
  uint64_t v168 = (uint64_t (**)(uint64_t, void *))v163[7];
  sub_100012ED8(v166, v167);
  uint64_t v169 = v168[5](v167, v168);
  __chkstk_darwin(v169);
  uint64_t v170 = (uint64_t)v284;
  *(&v257 - 4) = (uint64_t)v163;
  *(&v257 - 3) = v170;
  *((_BYTE *)&v257 - swift_weakDestroy(v0 + 16) = v171;
  sub_1002188CC((void (*)(char *))sub_100247CE8, (uint64_t)(&v257 - 6), v162);
  swift_bridgeObjectRelease();
  uint64_t v172 = v293;
  __n128 v173 = swift_beginAccess(v293, &v308, 0LL, 0LL);
  int64_t v174 = 0LL;
  double v175 = 0.0;
  uint64_t v176 = *v172;
  uint64_t v177 = *v172;
  uint64_t v178 = 1LL << *(_BYTE *)(*v172 + 32);
  uint64_t v179 = -1LL;
  if (v178 < 64) {
    uint64_t v179 = ~(-1LL << v178);
  }
  uint64_t v181 = *(void *)(v177 + 64);
  uint64_t v180 = v177 + 64;
  unint64_t v182 = v179 & v181;
  int64_t v183 = (unint64_t)(v178 + 63) >> 6;
  int64_t v184 = v288;
  do
  {
    if (v182)
    {
      unint64_t v185 = __clz(__rbit64(v182));
      v182 &= v182 - 1;
      unint64_t v186 = v185 | (v174 << 6);
    }

    else
    {
      int64_t v189 = v174 + 1;
      if (__OFADD__(v174, 1LL)) {
        goto LABEL_97;
      }
      if (v189 >= v183)
      {
LABEL_56:
        ((void (*)(char *, char *, uint64_t, __n128))v280)(v274, v279, v287, v173);
        uint64_t v192 = v268;
        uint64_t v193 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v184 + 16))(v268, v170, v161);
        unint64_t v194 = (os_log_s *)Logger.logObject.getter(v193);
        os_log_type_t v195 = static os_log_type_t.default.getter(v194);
        int v196 = v195;
        if (os_log_type_enabled(v194, v195))
        {
          uint64_t v197 = swift_slowAlloc(22LL, -1LL);
          *(_DWORD *)uint64_t v197 = 134218240;
          uint64_t v278 = v197 + 4;
          uint64_t v198 = v163;
          uint64_t v199 = v161;
          uint64_t v200 = v257;
          static Date.trustedNow.getter(v257);
          LODWORD(v289) = v196;
          double v201 = Date.timeIntervalSince(_:)(v200);
          int v202 = *(void (**)(uint64_t, uint64_t))(v184 + 8);
          uint64_t v203 = v200;
          uint64_t v161 = v199;
          uint64_t v163 = v198;
          v202(v203, v161);
          double v301 = fabs(v201);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v301, v302, v278, v197 + 12);
          uint64_t v272 = (void (*)(char *, uint64_t))v202;
          v202((uint64_t)v192, v161);
          *(_WORD *)(v197 + 12) = 2048;
          double v301 = v175;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v301, v302, v197 + 14, v197 + 22);
          _os_log_impl( (void *)&_mh_execute_header,  v194,  (os_log_type_t)v289,  "Overall fetch took %f seconds. %ld round trip(s).",  (uint8_t *)v197,  0x16u);
          swift_slowDealloc(v197, -1LL, -1LL);
        }

        else
        {
          uint64_t v272 = *(void (**)(char *, uint64_t))(v184 + 8);
          v272(v192, v161);
        }

        uint64_t v168 = (uint64_t (**)(uint64_t, void *))v297;
        uint64_t v204 = v265;

        uint64_t v205 = v287;
        v281(v274, v287);
        uint64_t v206 = v163[6];
        uint64_t v207 = v163[7];
        sub_100012ED8(v270, v206);
        if (((*(uint64_t (**)(uint64_t, uint64_t))(v207 + 24))(v206, v207) & 1) != 0)
        {
LABEL_92:
          uint64_t v236 = v273;
          uint64_t v237 = v280(v273, v279, v205);
          uint64_t v238 = (os_log_s *)Logger.logObject.getter(v237);
          os_log_type_t v239 = static os_log_type_t.default.getter(v238);
          if (os_log_type_enabled(v238, v239))
          {
            uint64_t v240 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v241 = swift_slowAlloc(32LL, -1LL);
            uint64_t v300 = v241;
            uint64_t v242 = v168;
            *(_DWORD *)uint64_t v240 = 136315138;
            swift_beginAccess(v204, v299, 0LL, 0LL);
            uint64_t v243 = Endpoint;
            uint64_t v244 = *(void *)(Endpoint + 16);
            swift_bridgeObjectRetain(v244);
            uint64_t v245 = sub_100004AEC(&qword_1009A6670);
            uint64_t v246 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            uint64_t v247 = Dictionary.description.getter(v244, v242, v245, v246);
            unint64_t v249 = v248;
            swift_retain();
            swift_bridgeObjectRelease();
            uint64_t v250 = v247;
            uint64_t v204 = v265;
            uint64_t v251 = v269;
            uint64_t v298 = sub_1003F11D4(v250, v249, &v300);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v298, v299, v240 + 4, v240 + 12);
            swift_release();
            uint64_t v161 = v251;
            os_log_t v252 = v284;
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v238, v239, "TRACE: returning resultMap: %s", v240, 0xCu);
            swift_arrayDestroy(v241, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v241, -1LL, -1LL);
            swift_slowDealloc(v240, -1LL, -1LL);

            v281(v273, v287);
            uint64_t v253 = v267;
            uint64_t v254 = v266;
            uint64_t v255 = v272;
          }

          else
          {

            v281(v236, v205);
            uint64_t v253 = v267;
            uint64_t v254 = v266;
            uint64_t v243 = Endpoint;
            uint64_t v255 = v272;
            os_log_t v252 = v284;
          }

          swift_beginAccess(v204, &v300, 0LL, 0LL);
          swift_bridgeObjectRetain(*(void *)(v243 + 16));
          sub_10019A174(v256, v254, v253);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          v255(v252, v161);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          return;
        }

        swift_beginAccess(v204, &v301, 0LL, 0LL);
        uint64_t v208 = *(void *)v204;
        uint64_t v209 = *(void *)(*(void *)v204 + 64LL);
        uint64_t v278 = *(void *)v204 + 64LL;
        uint64_t v210 = 1LL << *(_BYTE *)(v208 + 32);
        uint64_t v211 = -1LL;
        if (v210 < 64) {
          uint64_t v211 = ~(-1LL << v210);
        }
        unint64_t v212 = v211 & v209;
        int64_t v288 = (unint64_t)(v210 + 63) >> 6;
        uint64_t v274 = (char *)(v288 - 1);
        uint64_t v289 = v208;
        __n128 v213 = swift_bridgeObjectRetain(v208);
        int64_t v214 = 0LL;
        uint64_t v215 = &qword_1009A48D8;
        uint64_t v216 = (uint64_t)v291;
        while (2)
        {
          uint64_t v217 = (uint64_t)v292;
          if (v212)
          {
            unint64_t v218 = __clz(__rbit64(v212));
            uint64_t v219 = (v212 - 1) & v212;
            unint64_t v220 = v218 | (v214 << 6);
            goto LABEL_65;
          }

          int64_t v226 = v214 + 1;
          if (__OFADD__(v214, 1LL)) {
            goto LABEL_98;
          }
          if (v226 >= v288)
          {
            uint64_t v225 = (uint64_t)v294;
          }

          else
          {
            unint64_t v227 = *(void *)(v278 + 8 * v226);
            uint64_t v225 = (uint64_t)v294;
            if (v227)
            {
LABEL_69:
              uint64_t v219 = (v227 - 1) & v227;
              unint64_t v220 = __clz(__rbit64(v227)) + (v226 << 6);
              int64_t v214 = v226;
LABEL_65:
              uint64_t v221 = v289;
              (*(void (**)(char *, unint64_t, uint64_t (**)(uint64_t, void *), __n128))(v296 + 16))( v292,  *(void *)(v289 + 48) + *(void *)(v296 + 72) * v220,  v168,  v213);
              uint64_t v222 = *(void *)(v221 + 56);
              uint64_t v223 = sub_100004AEC(v215);
              uint64_t v224 = *(void *)(v222 + 8 * v220);
              *(void *)(v217 + *(int *)(v223 + swift_bridgeObjectRelease(*(void *)(v0 + 48)) = v224;
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v223 - 8) + 56LL))( v217,  0LL,  1LL,  v223);
              swift_bridgeObjectRetain(v224);
              uint64_t v225 = (uint64_t)v294;
LABEL_72:
              sub_100015750(v217, v225, &qword_1009A6668);
              uint64_t v229 = sub_100004AEC(v215);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v229 - 8) + 48LL))( v225,  1LL,  v229) == 1)
              {
                swift_release();
                uint64_t v161 = v269;
                uint64_t v205 = v287;
                uint64_t v204 = v265;
                goto LABEL_92;
              }

              uint64_t v297 = v219;
              uint64_t v230 = v215;
              uint64_t v231 = *(void *)(v225 + *(int *)(v229 + 48));
              uint64_t v232 = v290;
              sub_10001DC4C((uint64_t)v295, (uint64_t)v290, type metadata accessor for LocationFetcher);
              uint64_t v233 = v296;
              (*(void (**)(uint64_t, uint64_t, uint64_t (**)(uint64_t, void *)))(v296 + 32))( v216,  v225,  v168);
              os_log_type_t v234 = v168;
              uint64_t v168 = (uint64_t (**)(uint64_t, void *))objc_autoreleasePoolPush();
              sub_10021F708(v232, v231, (uint64_t *)&v303, v216, v293);
              if (v148) {
                goto LABEL_101;
              }
              objc_autoreleasePoolPop(v168);
              swift_bridgeObjectRelease();
              sub_100018C68((uint64_t)v232, type metadata accessor for LocationFetcher);
              (*(void (**)(uint64_t, uint64_t (**)(uint64_t, void *)))(v233 + 8))(v216, v234);
              uint64_t v168 = v234;
              uint64_t v215 = v230;
              unint64_t v212 = v297;
              continue;
            }

            v214 += 2LL;
            if (v226 + 1 >= v288)
            {
              int64_t v214 = v226;
            }

            else
            {
              unint64_t v227 = *(void *)(v278 + 8 * v214);
              if (v227)
              {
                ++v226;
                goto LABEL_69;
              }

              if (v226 + 2 < v288)
              {
                unint64_t v227 = *(void *)(v278 + 8 * (v226 + 2));
                if (v227)
                {
                  v226 += 2LL;
                  goto LABEL_69;
                }

                int64_t v235 = v226 + 3;
                if (v226 + 3 < v288)
                {
                  unint64_t v227 = *(void *)(v278 + 8 * v235);
                  if (!v227)
                  {
                    while (1)
                    {
                      int64_t v226 = v235 + 1;
                      if (__OFADD__(v235, 1LL)) {
                        goto LABEL_100;
                      }
                      if (v226 >= v288)
                      {
                        int64_t v214 = (int64_t)v274;
                        goto LABEL_71;
                      }

                      unint64_t v227 = *(void *)(v278 + 8 * v226);
                      ++v235;
                      if (v227) {
                        goto LABEL_69;
                      }
                    }
                  }

                  v226 += 3LL;
                  goto LABEL_69;
                }

                int64_t v214 = v226 + 2;
              }
            }
          }

          break;
        }

void sub_100244004(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v289 = a1;
  __int128 v270 = (void *)type metadata accessor for FMNAccountType(0LL);
  uint64_t v269 = *(v270 - 1);
  __chkstk_darwin(v270);
  uint64_t v262 = (char *)&v257 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t Endpoint = type metadata accessor for FetchEndpoint(0LL);
  uint64_t v8 = __chkstk_darwin(Endpoint);
  uint64_t v265 = (uint64_t)&v257 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v263 = (uint64_t *)((char *)&v257 - v10);
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009A6DB0);
  __chkstk_darwin(v11);
  uint64_t v282 = (char *)&v257 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v258 = type metadata accessor for OwnedDeviceFetchEndpoint(0LL);
  uint64_t v13 = __chkstk_darwin(v258);
  uint64_t v260 = (uint64_t)&v257 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v259 = (char *)&v257 - v15;
  uint64_t v297 = type metadata accessor for UUID(0LL);
  uint64_t v296 = *(void *)(v297 - 8);
  uint64_t v16 = __chkstk_darwin(v297);
  unint64_t v264 = (char *)&v257 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  unint64_t v291 = (char *)&v257 - v18;
  uint64_t v19 = sub_100004AEC(&qword_1009A6668);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v292 = (char *)&v257 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  os_log_t v294 = (char *)&v257 - v22;
  uint64_t v23 = type metadata accessor for LocationFetcher(0LL);
  uint64_t v276 = *(void *)(v23 - 8);
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v290 = (uint64_t *)((char *)&v257 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v278 = (uint64_t)&v257 - v27;
  uint64_t v277 = v28;
  __chkstk_darwin(v26);
  uint64_t v30 = (uint64_t *)((char *)&v257 - v29);
  uint64_t v31 = type metadata accessor for Logger(0LL);
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v273 = (char *)&v257 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v274 = (char *)&v257 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  int v271 = (char *)&v257 - v38;
  __chkstk_darwin(v37);
  Swift::Int v40 = (char *)&v257 - v39;
  uint64_t v41 = type metadata accessor for Date(0LL);
  int64_t v288 = *(void *)(v41 - 8);
  uint64_t v42 = __chkstk_darwin(v41);
  uint64_t v257 = (uint64_t)&v257 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = __chkstk_darwin(v42);
  __int128 v268 = (char *)&v257 - v45;
  __chkstk_darwin(v44);
  uint64_t v47 = (char *)&v257 - v46;
  uint64_t v48 = swift_allocObject(&unk_10094AA60, 32LL, 7LL);
  uint64_t v266 = a3;
  *(void *)(v48 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(v48 + 24) = a4;
  uint64_t v275 = v48;
  uint64_t v267 = a4;
  swift_retain();
  static Date.trustedNow.getter((uint64_t)v47);
  uint64_t v49 = swift_allocObject(&unk_10094AA88, 24LL, 7LL);
  uint64_t v283 = v49;
  *(void *)(v49 + swift_weakDestroy(v0 + 16) = &_swiftEmptyDictionarySingleton;
  unint64_t v293 = (uint64_t *)(v49 + 16);
  uint64_t v50 = swift_allocObject(&unk_10094AAB0, 24LL, 7LL);
  uint64_t v286 = v50;
  *(void *)(v50 + swift_weakDestroy(v0 + 16) = &_swiftEmptyDictionarySingleton;
  uint64_t v272 = (void (*)(char *, uint64_t))(v50 + 16);
  uint64_t v51 = (char *)a2 + *(int *)(v23 + 32);
  uint64_t v285 = v32;
  uint64_t v52 = *(uint64_t (**)(char *, char *, uint64_t))(v32 + 16);
  unint64_t v279 = v51;
  uint64_t v280 = v52;
  ((void (*)(char *))v52)(v40);
  uint64_t v295 = a2;
  uint64_t v53 = sub_10001DC4C((uint64_t)a2, (uint64_t)v30, type metadata accessor for LocationFetcher);
  unint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
  os_log_type_t v55 = static os_log_type_t.default.getter(v54);
  BOOL v56 = os_log_type_enabled(v54, v55);
  unint64_t v284 = v47;
  uint64_t v287 = v31;
  if (v56)
  {
    uint64_t v57 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v58 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v57 = 136446210;
    *(void *)&__int128 v308 = v58;
    uint64_t v281 = (void (*)(char *, uint64_t))(v57 + 4);
    uint64_t v59 = v41;
    uint64_t v61 = v30[6];
    uint64_t v60 = v30[7];
    sub_100012ED8(v30 + 3, v61);
    uint64_t v62 = v61;
    uint64_t v41 = v59;
    uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter(v62, *(void *)(v60 + 8));
    uint64_t v304 = sub_1003F11D4(v63, v64, (uint64_t *)&v308);
    uint64_t v47 = v284;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v304, v305, v281, v57 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v30, type metadata accessor for LocationFetcher);
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Begin location fetch with policy: %{public}s.", v57, 0xCu);
    swift_arrayDestroy(v58, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1LL, -1LL);
    swift_slowDealloc(v57, -1LL, -1LL);

    uint64_t v65 = *(void (**)(char *, uint64_t))(v285 + 8);
    BOOL v66 = v40;
    uint64_t v67 = v287;
  }

  else
  {
    sub_100018C68((uint64_t)v30, type metadata accessor for LocationFetcher);

    uint64_t v65 = *(void (**)(char *, uint64_t))(v285 + 8);
    BOOL v66 = v40;
    uint64_t v67 = v31;
  }

  uint64_t v281 = v65;
  v65(v66, v67);
  uint64_t v68 = swift_allocObject(&unk_10094AAD8, 24LL, 7LL);
  uint64_t v285 = v68;
  *(void *)(v68 + swift_weakDestroy(v0 + 16) = &_swiftEmptyDictionarySingleton;
  uint64_t v69 = (void *)(v68 + 16);
  uint64_t v70 = v295;
  uint64_t v71 = v295 + 3;
  uint64_t v72 = v295[6];
  uint64_t v73 = v295[7];
  sub_100012ED8(v295 + 3, v72);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v73 + 24))(v72, v73) & 1) != 0)
  {
    uint64_t v282 = 0LL;
  }

  else
  {
    uint64_t v74 = v70[6];
    uint64_t v75 = v70[7];
    sub_100012ED8(v70 + 3, v74);
    char v76 = (*(uint64_t (**)(uint64_t, uint64_t))(v75 + 64))(v74, v75);
    uint64_t v77 = *(void (**)(char *, uint64_t, void *))(v269 + 104);
    if ((v76 & 1) != 0)
    {
      uint64_t v78 = (uint64_t)v259;
      v77(v259, enum case for FMNAccountType.ownedDeviceLocations(_:), v270);
      sub_1001C5C1C(v78 + *(int *)(v258 + 20));
      uint64_t MyAppURLSessionFactory = type metadata accessor for FindMyAppURLSessionFactory(0LL);
      swift_allocObject( MyAppURLSessionFactory,  *(unsigned int *)(MyAppURLSessionFactory + 48),  *(unsigned __int16 *)(MyAppURLSessionFactory + 52));
      uint64_t v80 = type metadata accessor for FMNMockingPreferences(0LL);
      uint64_t v81 = v282;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56LL))(v282, 1LL, 1LL, v80);
      uint64_t v82 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0LL, 0LL, v81);
      uint64_t v83 = type metadata accessor for ServerInteractionController(0LL);
      uint64_t v84 = swift_allocObject(v83, *(unsigned int *)(v83 + 48), *(unsigned __int16 *)(v83 + 52));
      Swift::Int v85 = type metadata accessor for OwnedDeviceFetchEndpoint;
      uint64_t v86 = v260;
      sub_10001DC4C(v78, v260, type metadata accessor for OwnedDeviceFetchEndpoint);
      uint64_t v87 = sub_10043192C(v86, v82, v84);
    }

    else
    {
      uint64_t v88 = enum case for FMNAccountType.searchParty(_:);
      uint64_t v89 = (uint64_t)v262;
      unint64_t v90 = v270;
      v77(v262, enum case for FMNAccountType.searchParty(_:), v270);
      uint64_t v91 = type metadata accessor for AccountURLComponents();
      swift_allocObject(v91, 56LL, 7LL);
      Swift::Int v92 = sub_1006C217C(v89);
      uint64_t v78 = (uint64_t)v263;
      *uint64_t v263 = v92;
      v77((char *)(v78 + *(int *)(Endpoint + 20)), v88, v90);
      uint64_t v93 = type metadata accessor for FindMyAppURLSessionFactory(0LL);
      swift_allocObject(v93, *(unsigned int *)(v93 + 48), *(unsigned __int16 *)(v93 + 52));
      uint64_t v94 = type metadata accessor for FMNMockingPreferences(0LL);
      uint64_t v95 = v282;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v94 - 8) + 56LL))(v282, 1LL, 1LL, v94);
      uint64_t v96 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0LL, 0LL, v95);
      uint64_t v97 = type metadata accessor for ServerInteractionController(0LL);
      uint64_t v98 = swift_allocObject(v97, *(unsigned int *)(v97 + 48), *(unsigned __int16 *)(v97 + 52));
      Swift::Int v85 = type metadata accessor for FetchEndpoint;
      uint64_t v99 = v265;
      sub_10001DC4C(v78, v265, type metadata accessor for FetchEndpoint);
      uint64_t v87 = sub_100431910(v99, v96, v98);
    }

    uint64_t v282 = (char *)v87;
    sub_100018C68(v78, v85);
  }

  uint64_t v100 = v70[6];
  uint64_t v101 = v70[7];
  sub_100012ED8(v70 + 3, v100);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v101 + 24))(v100, v101) & 1) != 0)
  {
    uint64_t v102 = swift_allocObject(&unk_10094AB78, 32LL, 7LL);
    uint64_t v103 = v275;
    *(void *)(v102 + swift_weakDestroy(v0 + 16) = sub_100246284;
    *(void *)(v102 + 24) = v103;
    type metadata accessor for Transaction(0LL);
    uint64_t v104 = v278;
    sub_10001DC4C((uint64_t)v70, v278, type metadata accessor for LocationFetcher);
    uint64_t v105 = *(unsigned __int8 *)(v276 + 80);
    uint64_t v106 = (v105 + 40) & ~v105;
    uint64_t v107 = (void *)swift_allocObject(&unk_10094ABA0, v106 + v277, v105 | 7);
    v107[2] = sub_1000228F4;
    v107[3] = v102;
    uint64_t v108 = v289;
    _BYTE v107[4] = v289;
    sub_10002218C(v104, (uint64_t)v107 + v106, type metadata accessor for LocationFetcher);
    swift_bridgeObjectRetain(v108);
    swift_retain();
    swift_retain();
    static Transaction.asyncTask(name:block:)("beaconsFromDisk.FromDisk", 24LL, 2LL, &unk_1009A48C0, v107);
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v288 + 8))(v47, v41);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return;
  }

  uint64_t v263 = v69;
  __int128 v270 = v71;
  uint64_t v269 = v41;
  uint64_t v109 = swift_allocObject(&unk_10094AB00, 24LL, 7LL);
  *(void *)(v109 + swift_weakDestroy(v0 + 16) = &_swiftEmptyDictionarySingleton;
  uint64_t v265 = v109 + 16;
  uint64_t v110 = swift_allocObject(&unk_10094AB28, 24LL, 7LL);
  *(void *)(v110 + swift_weakDestroy(v0 + 16) = _swiftEmptyArrayStorage;
  uint64_t v262 = (char *)(v110 + 16);
  uint64_t v111 = (uint64_t)v70;
  uint64_t v112 = v278;
  sub_10001DC4C(v111, v278, type metadata accessor for LocationFetcher);
  uint64_t v113 = *(unsigned __int8 *)(v276 + 80);
  uint64_t v114 = (v113 + 32) & ~v113;
  unint64_t v115 = (v277 + v114 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v116 = (v115 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v117 = (v116 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v118 = swift_allocObject(&unk_10094AB50, v117 + 8, v113 | 7);
  uint64_t v119 = v286;
  *(void *)(v118 + swift_weakDestroy(v0 + 16) = v285;
  *(void *)(v118 + 24) = v119;
  sub_10002218C(v112, v118 + v114, type metadata accessor for LocationFetcher);
  uint64_t v120 = v283;
  *(void *)(v118 + v115) = v283;
  uint64_t v277 = v110;
  *(void *)(v118 + v1swift_weakDestroy(v0 + 16) = v110;
  uint64_t v276 = v118;
  *(void *)(v118 + v117) = v109;
  uint64_t v121 = v109;
  uint64_t v122 = v271;
  uint64_t v123 = v287;
  uint64_t v124 = v280(v271, v279, v287);
  Swift::Int v125 = (os_log_s *)Logger.logObject.getter(v124);
  os_log_type_t v126 = static os_log_type_t.default.getter(v125);
  if (os_log_type_enabled(v125, v126))
  {
    uint64_t v127 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v127 = 0;
    _os_log_impl((void *)&_mh_execute_header, v125, v126, "Gathering beacon information for fetch.", v127, 2u);
    swift_slowDealloc(v127, -1LL, -1LL);
  }

  swift_retain();
  uint64_t Endpoint = v121;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();

  v281(v122, v123);
  int64_t v128 = *(void *)(v289 + 16);
  swift_bridgeObjectRetain(v289);
  uint64_t v130 = v297;
  if (v128)
  {
    uint64_t v131 = v129 + 32;
    double v132 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
    int64_t v133 = v128;
    do
    {
      sub_100013044(v131, (uint64_t)&v308);
      sub_100012EC0(&v308, (uint64_t)&v304);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)&v132);
      double v301 = v132;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100032928(0, *(void *)(*(void *)&v132 + 16LL) + 1LL, 1);
        double v132 = v301;
      }

      unint64_t v136 = *(void *)(*(void *)&v132 + 16LL);
      unint64_t v135 = *(void *)(*(void *)&v132 + 24LL);
      if (v136 >= v135 >> 1) {
        sub_100032928(v135 > 1, v136 + 1, 1);
      }
      uint64_t v137 = v306;
      uint64_t v138 = v307;
      uint64_t v139 = sub_100037298((uint64_t)&v304, v306);
      __chkstk_darwin(v139);
      uint64_t v141 = (char *)&v257 - ((v140 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v142 + 16))(v141);
      sub_1002BBA60(v136, (uint64_t)v141, (uint64_t *)&v301, v137, v138);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v304);
      double v132 = v301;
      v131 += 40LL;
      --v133;
      uint64_t v130 = v297;
    }

    while (v133);
  }

  else
  {
    double v132 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
  }

  uint64_t v143 = v289;
  uint64_t v144 = swift_bridgeObjectRelease();
  uint64_t v303 = &_swiftEmptyDictionarySingleton;
  __chkstk_darwin(v144);
  uint64_t v145 = v295;
  *(&v257 - 8) = (uint64_t)v262;
  *(&v257 - 7) = (uint64_t)v145;
  uint64_t v146 = (uint64_t)v272;
  *(&v257 - 6) = (uint64_t)v293;
  *(&v257 - 5) = v146;
  *(&v257 - 4) = (uint64_t)&v303;
  *(&v257 - 3) = (uint64_t)v282;
  *(&v257 - 2) = (uint64_t)sub_1002462B4;
  *(&v257 - 1) = v276;
  sub_10021E578(*(void **)&v132, (void (*)(uint64_t, uint64_t))sub_1002462B8, (uint64_t)(&v257 - 10));
  swift_release();
  uint64_t v147 = v263;
  swift_beginAccess(v263, &v304, 0LL, 0LL);
  swift_bridgeObjectRetain(*v147);
  uint64_t v148 = 0LL;
  uint64_t v150 = sub_10023F25C(v149);
  uint64_t v151 = swift_bridgeObjectRelease();
  __chkstk_darwin(v151);
  *(&v257 - 4) = v146;
  *(&v257 - 3) = (uint64_t)v145;
  *(&v257 - 2) = v120;
  sub_100218B90((void (*)(char *, __n128))sub_1002462BC, (uint64_t)(&v257 - 6), v150);
  swift_release();
  double v152 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
  if (v128)
  {
    uint64_t v278 = 0LL;
    double v301 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
    sub_1000328D0(0, v128, 0);
    uint64_t v153 = v143 + 32;
    double v152 = v301;
    uint64_t v154 = v269;
    uint64_t v155 = v296;
    uint64_t v156 = v264;
    do
    {
      sub_100013044(v153, (uint64_t)&v308);
      uint64_t v157 = v309;
      uint64_t v158 = v310;
      sub_100012ED8(&v308, v309);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v158 + 8) + 8LL) + 32LL))(v157);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v308);
      if ((swift_isUniquelyReferenced_nonNull_native(*(void *)&v152) & 1) == 0)
      {
        sub_1000328D0(0, *(void *)(*(void *)&v152 + 16LL) + 1LL, 1);
        double v152 = v301;
      }

      unint64_t v160 = *(void *)(*(void *)&v152 + 16LL);
      unint64_t v159 = *(void *)(*(void *)&v152 + 24LL);
      if (v160 >= v159 >> 1)
      {
        sub_1000328D0(v159 > 1, v160 + 1, 1);
        double v152 = v301;
      }

      *(void *)(*(void *)&v152 + 1sub_1001F5B54(*(void (**)(void *))(v0 + 16), *(void *)(v0 + 24), 6LL) = v160 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v155 + 32))( *(void *)&v152 + ((*(unsigned __int8 *)(v155 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80))
      + *(void *)(v155 + 72) * v160,
        v156,
        v130);
      double v301 = v152;
      v153 += 40LL;
      --v128;
    }

    while (v128);
    uint64_t v161 = v154;
    uint64_t v148 = v278;
  }

  else
  {
    uint64_t v161 = v269;
  }

  uint64_t v162 = sub_1006F1060(*(uint64_t *)&v152);
  swift_bridgeObjectRelease();
  uint64_t v163 = v295;
  uint64_t v164 = v295[6];
  uint64_t v165 = v295[7];
  BOOL v166 = v270;
  sub_100012ED8(v270, v164);
  (*(void (**)(uint64_t, uint64_t))(v165 + 24))(v164, v165);
  uint64_t v167 = v163[6];
  uint64_t v168 = (uint64_t (**)(uint64_t, void *))v163[7];
  sub_100012ED8(v166, v167);
  uint64_t v169 = v168[5](v167, v168);
  __chkstk_darwin(v169);
  uint64_t v170 = (uint64_t)v284;
  *(&v257 - 4) = (uint64_t)v163;
  *(&v257 - 3) = v170;
  *((_BYTE *)&v257 - swift_weakDestroy(v0 + 16) = v171;
  sub_1002188CC((void (*)(char *))sub_1002462D8, (uint64_t)(&v257 - 6), v162);
  swift_bridgeObjectRelease();
  uint64_t v172 = v293;
  __n128 v173 = swift_beginAccess(v293, &v308, 0LL, 0LL);
  int64_t v174 = 0LL;
  double v175 = 0.0;
  uint64_t v176 = *v172;
  uint64_t v177 = *v172;
  uint64_t v178 = 1LL << *(_BYTE *)(*v172 + 32);
  uint64_t v179 = -1LL;
  if (v178 < 64) {
    uint64_t v179 = ~(-1LL << v178);
  }
  uint64_t v181 = *(void *)(v177 + 64);
  uint64_t v180 = v177 + 64;
  unint64_t v182 = v179 & v181;
  int64_t v183 = (unint64_t)(v178 + 63) >> 6;
  int64_t v184 = v288;
  do
  {
    if (v182)
    {
      unint64_t v185 = __clz(__rbit64(v182));
      v182 &= v182 - 1;
      unint64_t v186 = v185 | (v174 << 6);
    }

    else
    {
      int64_t v189 = v174 + 1;
      if (__OFADD__(v174, 1LL)) {
        goto LABEL_97;
      }
      if (v189 >= v183)
      {
LABEL_56:
        ((void (*)(char *, char *, uint64_t, __n128))v280)(v274, v279, v287, v173);
        uint64_t v192 = v268;
        uint64_t v193 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v184 + 16))(v268, v170, v161);
        unint64_t v194 = (os_log_s *)Logger.logObject.getter(v193);
        os_log_type_t v195 = static os_log_type_t.default.getter(v194);
        int v196 = v195;
        if (os_log_type_enabled(v194, v195))
        {
          uint64_t v197 = swift_slowAlloc(22LL, -1LL);
          *(_DWORD *)uint64_t v197 = 134218240;
          uint64_t v278 = v197 + 4;
          uint64_t v198 = v163;
          uint64_t v199 = v161;
          uint64_t v200 = v257;
          static Date.trustedNow.getter(v257);
          LODWORD(v289) = v196;
          double v201 = Date.timeIntervalSince(_:)(v200);
          int v202 = *(void (**)(uint64_t, uint64_t))(v184 + 8);
          uint64_t v203 = v200;
          uint64_t v161 = v199;
          uint64_t v163 = v198;
          v202(v203, v161);
          double v301 = fabs(v201);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v301, v302, v278, v197 + 12);
          uint64_t v272 = (void (*)(char *, uint64_t))v202;
          v202((uint64_t)v192, v161);
          *(_WORD *)(v197 + 12) = 2048;
          double v301 = v175;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v301, v302, v197 + 14, v197 + 22);
          _os_log_impl( (void *)&_mh_execute_header,  v194,  (os_log_type_t)v289,  "Overall fetch took %f seconds. %ld round trip(s).",  (uint8_t *)v197,  0x16u);
          swift_slowDealloc(v197, -1LL, -1LL);
        }

        else
        {
          uint64_t v272 = *(void (**)(char *, uint64_t))(v184 + 8);
          v272(v192, v161);
        }

        uint64_t v168 = (uint64_t (**)(uint64_t, void *))v297;
        uint64_t v204 = v265;

        uint64_t v205 = v287;
        v281(v274, v287);
        uint64_t v206 = v163[6];
        uint64_t v207 = v163[7];
        sub_100012ED8(v270, v206);
        if (((*(uint64_t (**)(uint64_t, uint64_t))(v207 + 24))(v206, v207) & 1) != 0)
        {
LABEL_92:
          uint64_t v236 = v273;
          uint64_t v237 = v280(v273, v279, v205);
          uint64_t v238 = (os_log_s *)Logger.logObject.getter(v237);
          os_log_type_t v239 = static os_log_type_t.default.getter(v238);
          if (os_log_type_enabled(v238, v239))
          {
            uint64_t v240 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v241 = swift_slowAlloc(32LL, -1LL);
            uint64_t v300 = v241;
            uint64_t v242 = v168;
            *(_DWORD *)uint64_t v240 = 136315138;
            swift_beginAccess(v204, v299, 0LL, 0LL);
            uint64_t v243 = Endpoint;
            uint64_t v244 = *(void *)(Endpoint + 16);
            swift_bridgeObjectRetain(v244);
            uint64_t v245 = sub_100004AEC(&qword_1009A6670);
            uint64_t v246 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            uint64_t v247 = Dictionary.description.getter(v244, v242, v245, v246);
            unint64_t v249 = v248;
            swift_retain();
            swift_bridgeObjectRelease();
            uint64_t v250 = v247;
            uint64_t v204 = v265;
            uint64_t v251 = v269;
            uint64_t v298 = sub_1003F11D4(v250, v249, &v300);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v298, v299, v240 + 4, v240 + 12);
            swift_release();
            uint64_t v161 = v251;
            os_log_t v252 = v284;
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v238, v239, "TRACE: returning resultMap: %s", v240, 0xCu);
            swift_arrayDestroy(v241, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v241, -1LL, -1LL);
            swift_slowDealloc(v240, -1LL, -1LL);

            v281(v273, v287);
            uint64_t v253 = v267;
            uint64_t v254 = v266;
            uint64_t v255 = v272;
          }

          else
          {

            v281(v236, v205);
            uint64_t v253 = v267;
            uint64_t v254 = v266;
            uint64_t v243 = Endpoint;
            uint64_t v255 = v272;
            os_log_t v252 = v284;
          }

          swift_beginAccess(v204, &v300, 0LL, 0LL);
          swift_bridgeObjectRetain(*(void *)(v243 + 16));
          sub_1003E2374(v256, v254, v253);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          v255(v252, v161);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          return;
        }

        swift_beginAccess(v204, &v301, 0LL, 0LL);
        uint64_t v208 = *(void *)v204;
        uint64_t v209 = *(void *)(*(void *)v204 + 64LL);
        uint64_t v278 = *(void *)v204 + 64LL;
        uint64_t v210 = 1LL << *(_BYTE *)(v208 + 32);
        uint64_t v211 = -1LL;
        if (v210 < 64) {
          uint64_t v211 = ~(-1LL << v210);
        }
        unint64_t v212 = v211 & v209;
        int64_t v288 = (unint64_t)(v210 + 63) >> 6;
        uint64_t v274 = (char *)(v288 - 1);
        uint64_t v289 = v208;
        __n128 v213 = swift_bridgeObjectRetain(v208);
        int64_t v214 = 0LL;
        uint64_t v215 = (uint64_t *)&unk_1009A48D8;
        uint64_t v216 = (uint64_t)v291;
        while (2)
        {
          uint64_t v217 = (uint64_t)v292;
          if (v212)
          {
            unint64_t v218 = __clz(__rbit64(v212));
            uint64_t v219 = (v212 - 1) & v212;
            unint64_t v220 = v218 | (v214 << 6);
            goto LABEL_65;
          }

          int64_t v226 = v214 + 1;
          if (__OFADD__(v214, 1LL)) {
            goto LABEL_98;
          }
          if (v226 >= v288)
          {
            uint64_t v225 = (uint64_t)v294;
          }

          else
          {
            unint64_t v227 = *(void *)(v278 + 8 * v226);
            uint64_t v225 = (uint64_t)v294;
            if (v227)
            {
LABEL_69:
              uint64_t v219 = (v227 - 1) & v227;
              unint64_t v220 = __clz(__rbit64(v227)) + (v226 << 6);
              int64_t v214 = v226;
LABEL_65:
              uint64_t v221 = v289;
              (*(void (**)(char *, unint64_t, uint64_t (**)(uint64_t, void *), __n128))(v296 + 16))( v292,  *(void *)(v289 + 48) + *(void *)(v296 + 72) * v220,  v168,  v213);
              uint64_t v222 = *(void *)(v221 + 56);
              uint64_t v223 = sub_100004AEC(v215);
              uint64_t v224 = *(void *)(v222 + 8 * v220);
              *(void *)(v217 + *(int *)(v223 + swift_bridgeObjectRelease(*(void *)(v0 + 48)) = v224;
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v223 - 8) + 56LL))( v217,  0LL,  1LL,  v223);
              swift_bridgeObjectRetain(v224);
              uint64_t v225 = (uint64_t)v294;
LABEL_72:
              sub_100015750(v217, v225, &qword_1009A6668);
              uint64_t v229 = sub_100004AEC(v215);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v229 - 8) + 48LL))( v225,  1LL,  v229) == 1)
              {
                swift_release();
                uint64_t v161 = v269;
                uint64_t v205 = v287;
                uint64_t v204 = v265;
                goto LABEL_92;
              }

              uint64_t v297 = v219;
              uint64_t v230 = v215;
              uint64_t v231 = *(void *)(v225 + *(int *)(v229 + 48));
              uint64_t v232 = v290;
              sub_10001DC4C((uint64_t)v295, (uint64_t)v290, type metadata accessor for LocationFetcher);
              uint64_t v233 = v296;
              (*(void (**)(uint64_t, uint64_t, uint64_t (**)(uint64_t, void *)))(v296 + 32))( v216,  v225,  v168);
              os_log_type_t v234 = v168;
              uint64_t v168 = (uint64_t (**)(uint64_t, void *))objc_autoreleasePoolPush();
              sub_10021F708(v232, v231, (uint64_t *)&v303, v216, v293);
              if (v148) {
                goto LABEL_101;
              }
              objc_autoreleasePoolPop(v168);
              swift_bridgeObjectRelease();
              sub_100018C68((uint64_t)v232, type metadata accessor for LocationFetcher);
              (*(void (**)(uint64_t, uint64_t (**)(uint64_t, void *)))(v233 + 8))(v216, v234);
              uint64_t v168 = v234;
              uint64_t v215 = v230;
              unint64_t v212 = v297;
              continue;
            }

            v214 += 2LL;
            if (v226 + 1 >= v288)
            {
              int64_t v214 = v226;
            }

            else
            {
              unint64_t v227 = *(void *)(v278 + 8 * v214);
              if (v227)
              {
                ++v226;
                goto LABEL_69;
              }

              if (v226 + 2 < v288)
              {
                unint64_t v227 = *(void *)(v278 + 8 * (v226 + 2));
                if (v227)
                {
                  v226 += 2LL;
                  goto LABEL_69;
                }

                int64_t v235 = v226 + 3;
                if (v226 + 3 < v288)
                {
                  unint64_t v227 = *(void *)(v278 + 8 * v235);
                  if (!v227)
                  {
                    while (1)
                    {
                      int64_t v226 = v235 + 1;
                      if (__OFADD__(v235, 1LL)) {
                        goto LABEL_100;
                      }
                      if (v226 >= v288)
                      {
                        int64_t v214 = (int64_t)v274;
                        goto LABEL_71;
                      }

                      unint64_t v227 = *(void *)(v278 + 8 * v226);
                      ++v235;
                      if (v227) {
                        goto LABEL_69;
                      }
                    }
                  }

                  v226 += 3LL;
                  goto LABEL_69;
                }

                int64_t v214 = v226 + 2;
              }
            }
          }

          break;
        }