void sub_10000481C( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

uint64_t sub_100004830()
{
  if (qword_10099B0E0 != -1) {
    swift_once(&qword_10099B0E0, sub_1000B8B68);
  }
  return dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0LL);
}

uint64_t variable initialization expression of CurrentLocationMonitor.delegate()
{
  return 0LL;
}

uint64_t variable initialization expression of CurrentLocationMonitor.locationManager()
{
  return 0LL;
}

uint64_t variable initialization expression of CurrentLocationMonitor._currentAuthorizationStatus()
{
  return 0LL;
}

uint64_t variable initialization expression of CurrentLocationMonitor.queue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v0);
  v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AB0();
  uint64_t v10 = (*(uint64_t (**)(char *, void, uint64_t))(v7 + 104))( v9,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v6);
  static DispatchQoS.unspecified.getter(v10);
  v16 = &_swiftEmptyArrayStorage;
  uint64_t v11 = sub_100007864( (unint64_t *)&qword_10099BAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009A0CD0);
  unint64_t v13 = sub_100004B2C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v0, v11);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002ELL,  0x8000000100850200LL,  v5,  v2,  v9,  0LL);
}

uint64_t variable initialization expression of DeviceIdentityUtility.certExpiryDate@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(a1, 1LL, 1LL, v2);
}

void *variable initialization expression of DeviceIdentityUtility.certs()
{
  return &_swiftEmptyArrayStorage;
}

unint64_t sub_100004AB0()
{
  unint64_t result = qword_1009A0CC0;
  if (!qword_1009A0CC0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1009A0CC0);
  }

  return result;
}

uint64_t sub_100004AEC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

unint64_t sub_100004B2C()
{
  unint64_t result = qword_10099BAB0;
  if (!qword_10099BAB0)
  {
    uint64_t v1 = sub_100004B78((uint64_t *)&unk_1009A0CD0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10099BAB0);
  }

  return result;
}

uint64_t sub_100004B78(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

void type metadata accessor for CBManagerState(uint64_t a1)
{
}

void type metadata accessor for QualityOfService(uint64_t a1)
{
}

__n128 initializeWithTake for StableIdentifier.UDID(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Coordinates(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for Coordinates(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for sp_key_index_map_handle(uint64_t a1)
{
}

void type metadata accessor for CFRunLoopSource(uint64_t a1)
{
}

void type metadata accessor for CKAccountStatus(uint64_t a1)
{
}

void type metadata accessor for sp_key_subsequence_handle(uint64_t a1)
{
}

void type metadata accessor for CFUserNotification(uint64_t a1)
{
}

void type metadata accessor for SPBTRSSIChannel(uint64_t a1)
{
}

void type metadata accessor for SPBeaconType(uint64_t a1)
{
}

void type metadata accessor for CBUseCase(uint64_t a1)
{
}

void type metadata accessor for Scope(uint64_t a1)
{
}

void type metadata accessor for SPDisabledReason(uint64_t a1)
{
}

void type metadata accessor for SPServiceState(uint64_t a1)
{
}

void type metadata accessor for NWConnectionState(uint64_t a1)
{
}

void type metadata accessor for RTLocationOfInterestType(uint64_t a1)
{
}

void type metadata accessor for SPSecureLocationPublishReason(uint64_t a1)
{
}

void type metadata accessor for SPMotionActivityState(uint64_t a1)
{
}

void type metadata accessor for SPDeviceEventSource(uint64_t a1)
{
}

void type metadata accessor for CBCharacteristicProperties(uint64_t a1)
{
}

void type metadata accessor for BeaconTaskState(uint64_t a1)
{
}

void type metadata accessor for PlaySoundContext(uint64_t a1)
{
}

void type metadata accessor for TrackingObservationAction(uint64_t a1)
{
}

void type metadata accessor for SPSecureLocationSubscriptionMode(uint64_t a1)
{
}

void type metadata accessor for SPBeaconObservationType(uint64_t a1)
{
}

void type metadata accessor for SecKey(uint64_t a1)
{
}

void type metadata accessor for SPBeaconGroupStatus(uint64_t a1)
{
}

void type metadata accessor for TrackingObservationType(uint64_t a1)
{
}

void type metadata accessor for CLAuthorizationStatus(uint64_t a1)
{
}

uint64_t sub_100004E44(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C1D0,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E1FAC);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100004E84(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C1D0,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E1FAC);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100004EC8(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100004F08@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_100004F10(uint64_t a1, uint64_t a2)
{
  return sub_100007CB0(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

void *sub_100004F2C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_100004F40(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_100004F54(void *result)
{
  *v1 &= *result;
  return result;
}

BOOL sub_100004F68(void *a1)
{
  return (*v1 & ~*a1) == 0LL;
}

BOOL sub_100004F7C(void *a1)
{
  return (*a1 & ~*v1) == 0LL;
}

uint64_t sub_100004F90(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C0E0,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E2748);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100004FD0(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C0E0,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E2748);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100005010(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C110,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E3038);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100005058(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C018,  (uint64_t (*)(uint64_t))type metadata accessor for FirmwareUpdateError,  (uint64_t)&unk_1007E2C24);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100005098(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C018,  (uint64_t (*)(uint64_t))type metadata accessor for FirmwareUpdateError,  (uint64_t)&unk_1007E2C24);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000050D8(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C050,  (uint64_t (*)(uint64_t))type metadata accessor for FirmwareUpdateError,  (uint64_t)&unk_1007E2C64);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100005120(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C2E8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E1A58);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100005160(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C2E8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E1A58);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000051A0(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000051E0(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C208,  (uint64_t (*)(uint64_t))type metadata accessor for UnpairError,  (uint64_t)&unk_1007E1EC4);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100005220(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C208,  (uint64_t (*)(uint64_t))type metadata accessor for UnpairError,  (uint64_t)&unk_1007E1EC4);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100005260(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C238,  (uint64_t (*)(uint64_t))type metadata accessor for UnpairError,  (uint64_t)&unk_1007E3650);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000052A0(uint64_t a1, uint64_t a2)
{
  return sub_100007CB0(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_1000052B0(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C150,  (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError,  (uint64_t)&unk_1007E2450);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000052F0(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C150,  (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError,  (uint64_t)&unk_1007E2450);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100005330(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C180,  (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError,  (uint64_t)&unk_1007E329C);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100005370(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C2B0,  (uint64_t (*)(uint64_t))type metadata accessor for CommandError,  (uint64_t)&unk_1007E1B84);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000053B0(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C2B0,  (uint64_t (*)(uint64_t))type metadata accessor for CommandError,  (uint64_t)&unk_1007E1B84);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000053F0(uint64_t a1)
{
  uint64_t v2 = sub_100007864( (unint64_t *)&qword_10099C2E0,  (uint64_t (*)(uint64_t))type metadata accessor for CommandError,  (uint64_t)&unk_1007E3980);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

_DWORD *sub_100005430@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_100005440(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

id sub_10000544C()
{
  return *v0;
}

void *sub_100005454@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_100005464(void *a1@<X8>)
{
  *a1 = *v1;
}

void sub_100005470()
{
}

uint64_t sub_100005498(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C058,  (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError,  (uint64_t)&unk_1007E2B08);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000054D8(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C058,  (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError,  (uint64_t)&unk_1007E2B08);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100005518(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C088,  (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError,  (uint64_t)&unk_1007E2D64);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100005558(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C090,  (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError,  (uint64_t)&unk_1007E29E0);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100005598(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C090,  (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError,  (uint64_t)&unk_1007E29E0);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000055D8(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C0C0,  (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError,  (uint64_t)&unk_1007E2E74);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100005618(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C310,  (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError,  (uint64_t)&unk_1007E192C);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100005658(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C310,  (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError,  (uint64_t)&unk_1007E192C);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100005698(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C340,  (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError,  (uint64_t)&unk_1007E3AFC);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000056D8(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C278,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E1C6C);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100005718(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C278,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E1C6C);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100005758(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100005798@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000057C0(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C118,  (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError,  (uint64_t)&unk_1007E257C);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100005800(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C118,  (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError,  (uint64_t)&unk_1007E257C);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100005840(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C148,  (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError,  (uint64_t)&unk_1007E318C);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100005880(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C240,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1007E1D98);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000058C0(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C240,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1007E1D98);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100005900(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C270,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1007E3760);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100005940(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C188,  (uint64_t (*)(uint64_t))type metadata accessor for SPTagSeparationError,  (uint64_t)&unk_1007E2324);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100005980(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C188,  (uint64_t (*)(uint64_t))type metadata accessor for SPTagSeparationError,  (uint64_t)&unk_1007E2324);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000059C0(uint64_t a1)
{
  uint64_t v2 = sub_100007864( (unint64_t *)&qword_10099C1B8,  (uint64_t (*)(uint64_t))type metadata accessor for SPTagSeparationError,  (uint64_t)&unk_1007E33AC);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100005A00(uint64_t a1, id *a2)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  uint64_t v5 = v8;
  if (v8)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    uint64_t result = swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return result;
}

uint64_t sub_100005A74(uint64_t a1, id *a2)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  char v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  uint64_t v5 = v9;
  if (v9)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_100005AF0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = v3;
  NSString v5 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v4);
  *a2 = v5;
  return result;
}

Swift::Int sub_100005B30()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_100005B74(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100005BB4()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SPPairingSessionErrorDomain);
}

uint64_t sub_100005BC4(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100005C04(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100005C44(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100005CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100005CFC()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
}

uint64_t sub_100005D0C(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C110,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E3038);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100005D4C(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C110,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E3038);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100005D8C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100007864( &qword_10099C110,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E3038);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100005DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007864( &qword_10099C110,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E3038);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100005E40()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SPFirmwareUpdateErrorDomain);
}

uint64_t sub_100005E50(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C050,  (uint64_t (*)(uint64_t))type metadata accessor for FirmwareUpdateError,  (uint64_t)&unk_1007E2C64);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100005E90(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C050,  (uint64_t (*)(uint64_t))type metadata accessor for FirmwareUpdateError,  (uint64_t)&unk_1007E2C64);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100005ED0(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100007864( &qword_10099C050,  (uint64_t (*)(uint64_t))type metadata accessor for FirmwareUpdateError,  (uint64_t)&unk_1007E2C64);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100005F34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007864( &qword_10099C050,  (uint64_t (*)(uint64_t))type metadata accessor for FirmwareUpdateError,  (uint64_t)&unk_1007E2C64);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100005F84()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SPOwnerSessionErrorDomain);
}

uint64_t sub_100005F94(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100005FD4(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100006014(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100006078(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000060C8()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SPUnpairErrorDomain);
}

uint64_t sub_1000060D8(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C238,  (uint64_t (*)(uint64_t))type metadata accessor for UnpairError,  (uint64_t)&unk_1007E3650);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100006118(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C238,  (uint64_t (*)(uint64_t))type metadata accessor for UnpairError,  (uint64_t)&unk_1007E3650);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100006158(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100007864( &qword_10099C238,  (uint64_t (*)(uint64_t))type metadata accessor for UnpairError,  (uint64_t)&unk_1007E3650);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_1000061BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007864( &qword_10099C238,  (uint64_t (*)(uint64_t))type metadata accessor for UnpairError,  (uint64_t)&unk_1007E3650);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_10000620C(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C180,  (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError,  (uint64_t)&unk_1007E329C);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10000624C(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C180,  (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError,  (uint64_t)&unk_1007E329C);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10000628C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100007864( &qword_10099C180,  (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError,  (uint64_t)&unk_1007E329C);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_1000062F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007864( &qword_10099C180,  (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError,  (uint64_t)&unk_1007E329C);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100006340()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SPCommandErrorDomain);
}

uint64_t sub_100006350(uint64_t a1)
{
  uint64_t v2 = sub_100007864( (unint64_t *)&qword_10099C2E0,  (uint64_t (*)(uint64_t))type metadata accessor for CommandError,  (uint64_t)&unk_1007E3980);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100006390(uint64_t a1)
{
  uint64_t v2 = sub_100007864( (unint64_t *)&qword_10099C2E0,  (uint64_t (*)(uint64_t))type metadata accessor for CommandError,  (uint64_t)&unk_1007E3980);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000063D0(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100007864( (unint64_t *)&qword_10099C2E0,  (uint64_t (*)(uint64_t))type metadata accessor for CommandError,  (uint64_t)&unk_1007E3980);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100006434(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007864( (unint64_t *)&qword_10099C2E0,  (uint64_t (*)(uint64_t))type metadata accessor for CommandError,  (uint64_t)&unk_1007E3980);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100006484()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(CKErrorDomain);
}

uint64_t sub_100006494(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C270,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1007E3760);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000064D4(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C270,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1007E3760);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100006514(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100007864( &qword_10099C270,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1007E3760);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100006578()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_1000065AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007864( &qword_10099C270,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1007E3760);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000065FC()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SPAccessoryDiscoveryAndPairingSessionErrorDomain);
}

uint64_t sub_10000660C(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C088,  (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError,  (uint64_t)&unk_1007E2D64);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10000664C(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C088,  (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError,  (uint64_t)&unk_1007E2D64);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10000668C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100007864( &qword_10099C088,  (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError,  (uint64_t)&unk_1007E2D64);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_1000066F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007864( &qword_10099C088,  (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError,  (uint64_t)&unk_1007E2D64);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

void sub_100006740(void *a1@<X8>)
{
  *a1 = 0LL;
}

void *sub_100006748@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_10000675C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_100006770(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_1000067A0@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1000067CC@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_1000067F0(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_100006804@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_100006818(void *a1)
{
  return (*v1 & *a1) == 0LL;
}

BOOL sub_10000682C()
{
  return *v0 == 0LL;
}

uint64_t sub_10000683C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

void *sub_100006854(void *result)
{
  *v1 &= ~*result;
  return result;
}

void *sub_100006868@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100006874()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SPTrackingAvoidanceErrorDomain);
}

uint64_t sub_100006884(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C0C0,  (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError,  (uint64_t)&unk_1007E2E74);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000068C4(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C0C0,  (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError,  (uint64_t)&unk_1007E2E74);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100006904(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100007864( &qword_10099C0C0,  (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError,  (uint64_t)&unk_1007E2E74);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100006968(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007864( &qword_10099C0C0,  (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError,  (uint64_t)&unk_1007E2E74);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000069B8()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SPCBPeripheralErrorDomain);
}

uint64_t sub_1000069C8(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C340,  (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError,  (uint64_t)&unk_1007E3AFC);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100006A08(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C340,  (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError,  (uint64_t)&unk_1007E3AFC);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100006A48(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100007864( &qword_10099C340,  (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError,  (uint64_t)&unk_1007E3AFC);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100006AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007864( &qword_10099C340,  (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError,  (uint64_t)&unk_1007E3AFC);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100006AFC()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SPSeparationMonitoringErrorDomain);
}

uint64_t sub_100006B0C(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100006B4C(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100006B8C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100006BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100006C40()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SPBTFindingSessionErrorDomain);
}

uint64_t sub_100006C50(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C148,  (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError,  (uint64_t)&unk_1007E318C);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100006C90(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C148,  (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError,  (uint64_t)&unk_1007E318C);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100006CD0(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100007864( &qword_10099C148,  (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError,  (uint64_t)&unk_1007E318C);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100006D34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007864( &qword_10099C148,  (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError,  (uint64_t)&unk_1007E318C);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100006D84()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SPTagSeparationErrorDomain);
}

uint64_t sub_100006D94(uint64_t a1)
{
  uint64_t v2 = sub_100007864( (unint64_t *)&qword_10099C1B8,  (uint64_t (*)(uint64_t))type metadata accessor for SPTagSeparationError,  (uint64_t)&unk_1007E33AC);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100006DD4(uint64_t a1)
{
  uint64_t v2 = sub_100007864( (unint64_t *)&qword_10099C1B8,  (uint64_t (*)(uint64_t))type metadata accessor for SPTagSeparationError,  (uint64_t)&unk_1007E33AC);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100006E14(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100007864( (unint64_t *)&qword_10099C1B8,  (uint64_t (*)(uint64_t))type metadata accessor for SPTagSeparationError,  (uint64_t)&unk_1007E33AC);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100006E78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007864( (unint64_t *)&qword_10099C1B8,  (uint64_t (*)(uint64_t))type metadata accessor for SPTagSeparationError,  (uint64_t)&unk_1007E33AC);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100006EC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[9] = *v3;
  Hasher.init(_seed:)(v7, a1);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

uint64_t sub_100006F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100006F7C(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099BC98,  (uint64_t (*)(uint64_t))type metadata accessor for SPServiceState,  (uint64_t)&unk_1007E073C);
  uint64_t v3 = sub_100007864( &qword_10099BCA0,  (uint64_t (*)(uint64_t))type metadata accessor for SPServiceState,  (uint64_t)&unk_1007E06DC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100007000(uint64_t a1)
{
  uint64_t v2 = sub_100007864( (unint64_t *)&unk_1009A9CB0,  (uint64_t (*)(uint64_t))type metadata accessor for SPDisabledReason,  (uint64_t)&unk_1007E0894);
  uint64_t v3 = sub_100007864( &qword_10099BC90,  (uint64_t (*)(uint64_t))type metadata accessor for SPDisabledReason,  (uint64_t)&unk_1007E0834);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100007084(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C3A0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1007E3C0C);
  uint64_t v3 = sub_100007864( &qword_10099C3A8,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1007E1640);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100007108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007864( &qword_10099C110,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E3038);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100007160(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C3C0,  (uint64_t (*)(uint64_t))type metadata accessor for SPFinderDisabledReason,  (uint64_t)&unk_1007E3C94);
  uint64_t v3 = sub_100007864( &qword_10099C3C8,  (uint64_t (*)(uint64_t))type metadata accessor for SPFinderDisabledReason,  (uint64_t)&unk_1007E140C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000071E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007864( &qword_10099C050,  (uint64_t (*)(uint64_t))type metadata accessor for FirmwareUpdateError,  (uint64_t)&unk_1007E2C64);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10000723C(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C380,  (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey,  (uint64_t)&unk_1007E34FC);
  uint64_t v3 = sub_100007864( &qword_10099C388,  (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey,  (uint64_t)&unk_1007E2058);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000072C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100007318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007864( &qword_10099C238,  (uint64_t (*)(uint64_t))type metadata accessor for UnpairError,  (uint64_t)&unk_1007E3650);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100007370(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099BC78,  (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconType,  (uint64_t)&unk_1007E09EC);
  uint64_t v3 = sub_100007864( (unint64_t *)&unk_10099BC80,  (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconType,  (uint64_t)&unk_1007E098C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000073F4(uint64_t a1)
{
  uint64_t v2 = sub_100007864( (unint64_t *)&qword_10099C3B0,  (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName,  (uint64_t)&unk_1007E3C50);
  uint64_t v3 = sub_100007864( &qword_10099C3B8,  (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName,  (uint64_t)&unk_1007E1520);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100007478(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C360,  (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconLocationSource,  (uint64_t)&unk_1007E2F74);
  uint64_t v3 = sub_100007864( &qword_10099C368,  (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconLocationSource,  (uint64_t)&unk_1007E285C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000074FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007864( &qword_10099C180,  (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError,  (uint64_t)&unk_1007E329C);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100007554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007864( (unint64_t *)&qword_10099C2E0,  (uint64_t (*)(uint64_t))type metadata accessor for CommandError,  (uint64_t)&unk_1007E3980);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_1000075AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007864( &qword_10099C270,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1007E3760);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

BOOL sub_100007604(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100007618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007864( &qword_10099C088,  (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError,  (uint64_t)&unk_1007E2D64);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100007670@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_100007E60(a1);
  uint64_t result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000076AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007864( &qword_10099C0C0,  (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError,  (uint64_t)&unk_1007E2E74);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100007704(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C390,  (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType,  (uint64_t)&unk_1007E17B4);
  uint64_t v3 = sub_100007864( &qword_10099C398,  (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType,  (uint64_t)&unk_1007E1754);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100007788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007864( &qword_10099C340,  (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError,  (uint64_t)&unk_1007E3AFC);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_1000077E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100007838()
{
  return sub_100007864( &qword_10099BBF8,  (uint64_t (*)(uint64_t))type metadata accessor for CBCharacteristicProperties,  (uint64_t)&unk_1007E0384);
}

uint64_t sub_100007864(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1000078A4()
{
  return sub_100007864( &qword_10099BC00,  (uint64_t (*)(uint64_t))type metadata accessor for CBCharacteristicProperties,  (uint64_t)&unk_1007E0354);
}

uint64_t sub_1000078D0()
{
  return sub_100007864( &qword_10099BC08,  (uint64_t (*)(uint64_t))type metadata accessor for CBCharacteristicProperties,  (uint64_t)&unk_1007E03AC);
}

uint64_t sub_1000078FC()
{
  return sub_100007864( &qword_10099BC10,  (uint64_t (*)(uint64_t))type metadata accessor for CBCharacteristicProperties,  (uint64_t)&unk_1007E03E4);
}

uint64_t sub_100007928()
{
  return sub_100007864( &qword_10099BC18,  (uint64_t (*)(uint64_t))type metadata accessor for SPMotionActivityState,  (uint64_t)&unk_1007E0528);
}

uint64_t sub_100007954()
{
  return sub_100007864( &qword_10099BC20,  (uint64_t (*)(uint64_t))type metadata accessor for SPSecureLocationPublishReason,  (uint64_t)&unk_1007E05D4);
}

uint64_t sub_100007980()
{
  return sub_100007864( &qword_10099BC28,  (uint64_t (*)(uint64_t))type metadata accessor for SPServiceState,  (uint64_t)&unk_1007E06A0);
}

uint64_t sub_1000079AC()
{
  return sub_100007864( &qword_10099BC30,  (uint64_t (*)(uint64_t))type metadata accessor for SPServiceState,  (uint64_t)&unk_1007E0674);
}

uint64_t sub_1000079D8()
{
  return sub_100007864( &qword_10099BC38,  (uint64_t (*)(uint64_t))type metadata accessor for SPServiceState,  (uint64_t)&unk_1007E0710);
}

uint64_t sub_100007A04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007864( &qword_10099C148,  (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError,  (uint64_t)&unk_1007E318C);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100007A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007864( (unint64_t *)&qword_10099C1B8,  (uint64_t (*)(uint64_t))type metadata accessor for SPTagSeparationError,  (uint64_t)&unk_1007E33AC);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100007AB4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_100007AF8(uint64_t a1)
{
  uint64_t v2 = sub_100007864( &qword_10099C370,  (uint64_t (*)(uint64_t))type metadata accessor for CBConnectionEventMatchingOption,  (uint64_t)&unk_1007E34BC);
  uint64_t v3 = sub_100007864( &qword_10099C378,  (uint64_t (*)(uint64_t))type metadata accessor for CBConnectionEventMatchingOption,  (uint64_t)&unk_1007E2164);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100007B7C()
{
  return sub_100007864( &qword_10099BC40,  (uint64_t (*)(uint64_t))type metadata accessor for SPDisabledReason,  (uint64_t)&unk_1007E07F8);
}

uint64_t sub_100007BA8()
{
  return sub_100007864( &qword_10099BC48,  (uint64_t (*)(uint64_t))type metadata accessor for SPDisabledReason,  (uint64_t)&unk_1007E07CC);
}

uint64_t sub_100007BD4()
{
  return sub_100007864( &qword_10099BC50,  (uint64_t (*)(uint64_t))type metadata accessor for SPDisabledReason,  (uint64_t)&unk_1007E0868);
}

uint64_t sub_100007C00()
{
  return sub_100007864( &qword_10099BC58,  (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconType,  (uint64_t)&unk_1007E0950);
}

uint64_t sub_100007C2C()
{
  return sub_100007864( &qword_10099BC60,  (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconType,  (uint64_t)&unk_1007E0924);
}

uint64_t sub_100007C58()
{
  return sub_100007864( &qword_10099BC68,  (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconType,  (uint64_t)&unk_1007E09C0);
}

uint64_t sub_100007C84()
{
  return sub_100007864( &qword_10099BC70,  (uint64_t (*)(uint64_t))type metadata accessor for SPBTRSSIChannel,  (uint64_t)&unk_1007E0AC0);
}

uint64_t sub_100007CB0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  uint64_t v7 = v6;
  uint64_t v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100007CEC(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100007D2C(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  Swift::Int v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_100007D9C(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_100007E28(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (int *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0) {
      int v4 = 0;
    }
    uint64_t result = v4 | result;
    --v1;
  }

  while (v1);
  return result;
}

uint64_t sub_100007E60(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t result = 0LL;
  int v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0LL;
    }
    result |= v5;
    --v1;
  }

  while (v1);
  return result;
}

void type metadata accessor for SecCertificate(uint64_t a1)
{
}

void type metadata accessor for FirmwareUpdateError(uint64_t a1)
{
}

void type metadata accessor for SPAccessoryDiscoverySessionError(uint64_t a1)
{
}

void type metadata accessor for TrackingAvoidanceError(uint64_t a1)
{
}

void type metadata accessor for CLFindMyAccessoryBatteryStatus(uint64_t a1)
{
}

void type metadata accessor for SPBeaconLocationSource(uint64_t a1)
{
}

void type metadata accessor for CFError(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for Code(uint64_t a1)
{
}

void type metadata accessor for SecureLocationsError(uint64_t a1)
{
}

void type metadata accessor for NotificationType(uint64_t a1)
{
}

void type metadata accessor for ShutdownReason(uint64_t a1)
{
}

void type metadata accessor for LocalBeaconManagerState(uint64_t a1)
{
}

void type metadata accessor for BeaconingKeyType(uint64_t a1)
{
}

void type metadata accessor for SPBTFindingSessionError(uint64_t a1)
{
}

void type metadata accessor for UpdateBatteryLevelError(uint64_t a1)
{
}

void type metadata accessor for SPTagSeparationError(uint64_t a1)
{
}

void type metadata accessor for SPSeparationEventType(uint64_t a1)
{
}

void type metadata accessor for IDSIDStatus(uint64_t a1)
{
}

void type metadata accessor for CBConnectionEventMatchingOption(uint64_t a1)
{
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
}

void type metadata accessor for SPPairingSessionError(uint64_t a1)
{
}

void type metadata accessor for UnpairError(uint64_t a1)
{
}

void type metadata accessor for CKError(uint64_t a1)
{
}

void type metadata accessor for SPSeparationMonitoringError(uint64_t a1)
{
}

void type metadata accessor for CommandError(uint64_t a1)
{
}

void type metadata accessor for SPOwnerSessionError(uint64_t a1)
{
}

void type metadata accessor for CFNotificationName(uint64_t a1)
{
}

void type metadata accessor for CFNotificationCenter(uint64_t a1)
{
}

void type metadata accessor for SPCBPeripheralError(uint64_t a1)
{
}

void type metadata accessor for FileProtectionType(uint64_t a1)
{
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for SPBeaconTaskName(uint64_t a1)
{
}

void type metadata accessor for SPFinderDisabledReason(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for AccessorySoftwareInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

void *sub_100008184(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1020uLL);
}

uint64_t sub_10000818C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 4128)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000081B0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 4104) = 0u;
    *(void *)(result + 4120) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 4088) = 0u;
    *(_OWORD *)(result + 4072) = 0u;
    *(_OWORD *)(result + 4056) = 0u;
    *(_OWORD *)(result + 4040) = 0u;
    *(_OWORD *)(result + 4024) = 0u;
    *(_OWORD *)(result + 4008) = 0u;
    *(_OWORD *)(result + 3992) = 0u;
    *(_OWORD *)(result + 3976) = 0u;
    *(_OWORD *)(result + 3960) = 0u;
    *(_OWORD *)(result + 3944) = 0u;
    *(_OWORD *)(result + 3928) = 0u;
    *(_OWORD *)(result + 3912) = 0u;
    *(_OWORD *)(result + 3896) = 0u;
    *(_OWORD *)(result + 3880) = 0u;
    *(_OWORD *)(result + 3864) = 0u;
    *(_OWORD *)(result + 3848) = 0u;
    *(_OWORD *)(result + 3832) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 4128) = v3;
  return result;
}

void type metadata accessor for _sp_key_index_map(uint64_t a1)
{
}

__n128 sub_100008640(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for _sp_key_subsequence(uint64_t a1)
{
}

void type metadata accessor for SPSimpleBeaconProperty(uint64_t a1)
{
}

uint64_t sub_100008674()
{
  return sub_100007864( &qword_10099BE98,  (uint64_t (*)(uint64_t))type metadata accessor for SPSimpleBeaconProperty,  (uint64_t)&unk_1007E1238);
}

uint64_t sub_1000086A0()
{
  return sub_100007864( &qword_10099BEA0,  (uint64_t (*)(uint64_t))type metadata accessor for SPSimpleBeaconProperty,  (uint64_t)&unk_1007E1208);
}

uint64_t sub_1000086CC()
{
  return sub_100007864( &qword_10099BEA8,  (uint64_t (*)(uint64_t))type metadata accessor for SPSimpleBeaconProperty,  (uint64_t)&unk_1007E1260);
}

uint64_t sub_1000086F8()
{
  return sub_100007864( &qword_10099BEB0,  (uint64_t (*)(uint64_t))type metadata accessor for SPSimpleBeaconProperty,  (uint64_t)&unk_1007E1298);
}

uint64_t sub_100008724()
{
  return sub_100007864( &qword_10099BEB8,  (uint64_t (*)(uint64_t))type metadata accessor for SPFinderDisabledReason,  (uint64_t)&unk_1007E13D0);
}

uint64_t sub_100008750()
{
  return sub_100007864( &qword_10099BEC0,  (uint64_t (*)(uint64_t))type metadata accessor for SPFinderDisabledReason,  (uint64_t)&unk_1007E13A4);
}

uint64_t sub_10000877C()
{
  return sub_100007864( &qword_10099BEC8,  (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName,  (uint64_t)&unk_1007E14E4);
}

uint64_t sub_1000087A8()
{
  return sub_100007864( &qword_10099BED0,  (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName,  (uint64_t)&unk_1007E14B8);
}

uint64_t sub_1000087D4()
{
  return sub_100007864( &qword_10099BED8,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1007E1604);
}

uint64_t sub_100008800()
{
  return sub_100007864( &qword_10099BEE0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1007E15D8);
}

uint64_t sub_10000882C()
{
  return sub_100007864( &qword_10099BEE8,  (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType,  (uint64_t)&unk_1007E1718);
}

uint64_t sub_100008858()
{
  return sub_100007864( &qword_10099BEF0,  (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType,  (uint64_t)&unk_1007E16EC);
}

uint64_t sub_100008884()
{
  return sub_100007864( &qword_10099BEF8,  (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType,  (uint64_t)&unk_1007E1788);
}

uint64_t sub_1000088B0()
{
  return sub_100007864( &qword_10099BF00,  (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError,  (uint64_t)&unk_1007E1844);
}

uint64_t sub_1000088DC()
{
  return sub_100007864( &qword_10099BF08,  (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError,  (uint64_t)&unk_1007E1870);
}

uint64_t sub_100008908()
{
  return sub_100007864( &qword_10099BF10,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E1970);
}

uint64_t sub_100008934()
{
  return sub_100007864( &qword_10099BF18,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E199C);
}

uint64_t sub_100008960()
{
  return sub_100007864( &qword_10099BF20,  (uint64_t (*)(uint64_t))type metadata accessor for CommandError,  (uint64_t)&unk_1007E1A9C);
}

uint64_t sub_10000898C()
{
  return sub_100007864( &qword_10099BF28,  (uint64_t (*)(uint64_t))type metadata accessor for CommandError,  (uint64_t)&unk_1007E1AC8);
}

uint64_t sub_1000089B8()
{
  return sub_100007864( (unint64_t *)&unk_10099BF30,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E1BC8);
}

uint64_t sub_1000089E4()
{
  return sub_100007864( &qword_1009AF810,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E2FB8);
}

uint64_t sub_100008A10()
{
  return sub_100007864( &qword_10099BF40,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1007E1CB0);
}

uint64_t sub_100008A3C()
{
  return sub_100007864( &qword_10099BF48,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1007E1CDC);
}

uint64_t sub_100008A68()
{
  return sub_100007864( &qword_10099BF50,  (uint64_t (*)(uint64_t))type metadata accessor for UnpairError,  (uint64_t)&unk_1007E1DDC);
}

uint64_t sub_100008A94()
{
  return sub_100007864( &qword_10099BF58,  (uint64_t (*)(uint64_t))type metadata accessor for UnpairError,  (uint64_t)&unk_1007E1E08);
}

uint64_t sub_100008AC0()
{
  return sub_100007864( &qword_10099BF60,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E1F08);
}

uint64_t sub_100008AEC()
{
  return sub_100007864( &qword_10099BF68,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3148);
}

uint64_t sub_100008B18()
{
  return sub_100007864( &qword_10099BF70,  (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey,  (uint64_t)&unk_1007E201C);
}

uint64_t sub_100008B44()
{
  return sub_100007864( &qword_10099BF78,  (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey,  (uint64_t)&unk_1007E1FF0);
}

uint64_t sub_100008B70()
{
  return sub_100007864( &qword_10099BF80,  (uint64_t (*)(uint64_t))type metadata accessor for CBConnectionEventMatchingOption,  (uint64_t)&unk_1007E212C);
}

uint64_t sub_100008B9C()
{
  return sub_100007864( &qword_10099BF88,  (uint64_t (*)(uint64_t))type metadata accessor for CBConnectionEventMatchingOption,  (uint64_t)&unk_1007E2104);
}

uint64_t sub_100008BC8()
{
  return sub_100007864( &qword_10099BF90,  (uint64_t (*)(uint64_t))type metadata accessor for SPTagSeparationError,  (uint64_t)&unk_1007E223C);
}

uint64_t sub_100008BF4()
{
  return sub_100007864( &qword_10099BF98,  (uint64_t (*)(uint64_t))type metadata accessor for SPTagSeparationError,  (uint64_t)&unk_1007E2268);
}

uint64_t sub_100008C20()
{
  return sub_100007864( &qword_10099BFA0,  (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError,  (uint64_t)&unk_1007E2368);
}

uint64_t sub_100008C4C()
{
  return sub_100007864( &qword_10099BFA8,  (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError,  (uint64_t)&unk_1007E2394);
}

uint64_t sub_100008C78()
{
  return sub_100007864( &qword_10099BFB0,  (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError,  (uint64_t)&unk_1007E2494);
}

uint64_t sub_100008CA4()
{
  return sub_100007864( &qword_10099BFB8,  (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError,  (uint64_t)&unk_1007E24C0);
}

uint64_t sub_100008CD0()
{
  return sub_100007864( &qword_10099BFC0,  (uint64_t (*)(uint64_t))type metadata accessor for ShutdownReason,  (uint64_t)&unk_1007E2600);
}

uint64_t sub_100008CFC()
{
  return sub_100007864( &qword_10099BFC8,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E2660);
}

uint64_t sub_100008D28()
{
  return sub_100007864( &qword_10099BFD0,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E268C);
}

uint64_t sub_100008D54()
{
  return sub_100007864( &qword_10099BFD8,  (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconLocationSource,  (uint64_t)&unk_1007E2820);
}

uint64_t sub_100008D80()
{
  return sub_100007864( &qword_10099BFE0,  (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconLocationSource,  (uint64_t)&unk_1007E27F4);
}

uint64_t sub_100008DAC()
{
  return sub_100007864( &qword_10099BFE8,  (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError,  (uint64_t)&unk_1007E2908);
}

uint64_t sub_100008DD8()
{
  return sub_100007864( &qword_10099BFF0,  (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError,  (uint64_t)&unk_1007E2930);
}

uint64_t sub_100008E04()
{
  return sub_100007864( &qword_10099BFF8,  (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError,  (uint64_t)&unk_1007E2A20);
}

uint64_t sub_100008E30()
{
  return sub_100007864( &qword_10099C000,  (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError,  (uint64_t)&unk_1007E2A4C);
}

uint64_t sub_100008E5C()
{
  return sub_100007864( &qword_10099C008,  (uint64_t (*)(uint64_t))type metadata accessor for FirmwareUpdateError,  (uint64_t)&unk_1007E2B4C);
}

uint64_t sub_100008E88()
{
  return sub_100007864( &qword_10099C010,  (uint64_t (*)(uint64_t))type metadata accessor for FirmwareUpdateError,  (uint64_t)&unk_1007E2B74);
}

uint64_t sub_100008EB4()
{
  return sub_100007864( &qword_10099C018,  (uint64_t (*)(uint64_t))type metadata accessor for FirmwareUpdateError,  (uint64_t)&unk_1007E2C24);
}

uint64_t sub_100008EE0()
{
  return sub_100007864( &qword_10099C020,  (uint64_t (*)(uint64_t))type metadata accessor for FirmwareUpdateError,  (uint64_t)&unk_1007E2BF4);
}

uint64_t sub_100008F0C()
{
  return sub_100007864( &qword_10099C028,  (uint64_t (*)(uint64_t))type metadata accessor for FirmwareUpdateError,  (uint64_t)&unk_1007E2BB4);
}

uint64_t sub_100008F38()
{
  return sub_100007864(&qword_10099C030, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_12, (uint64_t)&unk_1007E2D04);
}

void _s3__C4CodeOMa_12(uint64_t a1)
{
}

uint64_t sub_100008F78()
{
  return sub_100007864(&qword_10099C038, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_12, (uint64_t)&unk_1007E2CCC);
}

unint64_t sub_100008FA8()
{
  unint64_t result = qword_10099C040;
  if (!qword_10099C040)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_10099C040);
  }

  return result;
}

uint64_t sub_100008FEC()
{
  return sub_100007864(&qword_10099C048, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_12, (uint64_t)&unk_1007E2D3C);
}

uint64_t sub_100009018()
{
  return sub_100007864( &qword_10099C050,  (uint64_t (*)(uint64_t))type metadata accessor for FirmwareUpdateError,  (uint64_t)&unk_1007E2C64);
}

uint64_t sub_100009044()
{
  return sub_100007864( &qword_10099C058,  (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError,  (uint64_t)&unk_1007E2B08);
}

uint64_t sub_100009070()
{
  return sub_100007864( &qword_10099C060,  (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError,  (uint64_t)&unk_1007E2AD4);
}

uint64_t sub_10000909C()
{
  return sub_100007864( &qword_10099C068,  (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError,  (uint64_t)&unk_1007E2A90);
}

uint64_t sub_1000090C8()
{
  return sub_100007864(&qword_10099C070, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_11, (uint64_t)&unk_1007E2E0C);
}

void _s3__C4CodeOMa_11(uint64_t a1)
{
}

uint64_t sub_100009108()
{
  return sub_100007864(&qword_10099C078, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_11, (uint64_t)&unk_1007E2DD0);
}

uint64_t sub_100009134()
{
  return sub_100007864(&qword_10099C080, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_11, (uint64_t)&unk_1007E2E48);
}

uint64_t sub_100009160()
{
  return sub_100007864( &qword_10099C088,  (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError,  (uint64_t)&unk_1007E2D64);
}

uint64_t sub_10000918C()
{
  return sub_100007864( &qword_10099C090,  (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError,  (uint64_t)&unk_1007E29E0);
}

uint64_t sub_1000091B8()
{
  return sub_100007864( &qword_10099C098,  (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError,  (uint64_t)&unk_1007E29B0);
}

uint64_t sub_1000091E4()
{
  return sub_100007864( &qword_10099C0A0,  (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError,  (uint64_t)&unk_1007E2970);
}

uint64_t sub_100009210()
{
  return sub_100007864(&qword_10099C0A8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_10, (uint64_t)&unk_1007E2F14);
}

void _s3__C4CodeOMa_10(uint64_t a1)
{
}

uint64_t sub_100009250()
{
  return sub_100007864(&qword_10099C0B0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_10, (uint64_t)&unk_1007E2EDC);
}

uint64_t sub_10000927C()
{
  return sub_100007864(&qword_10099C0B8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_10, (uint64_t)&unk_1007E2F4C);
}

uint64_t sub_1000092A8()
{
  return sub_100007864( &qword_10099C0C0,  (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError,  (uint64_t)&unk_1007E2E74);
}

uint64_t sub_1000092D4()
{
  return sub_100007864( &qword_10099C0C8,  (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconLocationSource,  (uint64_t)&unk_1007E2890);
}

uint64_t sub_100009300()
{
  return sub_100007864( &qword_10099C0D0,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_1007E278C);
}

uint64_t sub_10000932C()
{
  return sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
}

uint64_t sub_100009358()
{
  return sub_100007864( &qword_10099C0E0,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E2748);
}

uint64_t sub_100009384()
{
  return sub_100007864( &qword_10099C0E8,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E2714);
}

uint64_t sub_1000093B0()
{
  return sub_100007864( &qword_10099C0F0,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E26D0);
}

uint64_t sub_1000093DC()
{
  return sub_100007864(&qword_10099C0F8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_9, (uint64_t)&unk_1007E30E0);
}

void _s3__C4CodeOMa_9(uint64_t a1)
{
}

uint64_t sub_10000941C()
{
  return sub_100007864(&qword_10099C100, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_9, (uint64_t)&unk_1007E30A4);
}

uint64_t sub_100009448()
{
  return sub_100007864(&qword_10099C108, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_9, (uint64_t)&unk_1007E311C);
}

uint64_t sub_100009474()
{
  return sub_100007864( &qword_10099C110,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E3038);
}

uint64_t sub_1000094A0()
{
  return sub_100007864( &qword_10099C118,  (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError,  (uint64_t)&unk_1007E257C);
}

uint64_t sub_1000094CC()
{
  return sub_100007864( &qword_10099C120,  (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError,  (uint64_t)&unk_1007E2548);
}

uint64_t sub_1000094F8()
{
  return sub_100007864( &qword_10099C128,  (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError,  (uint64_t)&unk_1007E2504);
}

uint64_t sub_100009524()
{
  return sub_100007864(&qword_10099C130, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_8, (uint64_t)&unk_1007E3234);
}

void _s3__C4CodeOMa_8(uint64_t a1)
{
}

uint64_t sub_100009564()
{
  return sub_100007864(&qword_10099C138, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_8, (uint64_t)&unk_1007E31F8);
}

uint64_t sub_100009590()
{
  return sub_100007864(&qword_10099C140, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_8, (uint64_t)&unk_1007E3270);
}

uint64_t sub_1000095BC()
{
  return sub_100007864( &qword_10099C148,  (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError,  (uint64_t)&unk_1007E318C);
}

uint64_t sub_1000095E8()
{
  return sub_100007864( &qword_10099C150,  (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError,  (uint64_t)&unk_1007E2450);
}

uint64_t sub_100009614()
{
  return sub_100007864( &qword_10099C158,  (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError,  (uint64_t)&unk_1007E241C);
}

uint64_t sub_100009640()
{
  return sub_100007864( &qword_10099C160,  (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError,  (uint64_t)&unk_1007E23D8);
}

uint64_t sub_10000966C()
{
  return sub_100007864(&qword_10099C168, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_7, (uint64_t)&unk_1007E3344);
}

void _s3__C4CodeOMa_7(uint64_t a1)
{
}

uint64_t sub_1000096AC()
{
  return sub_100007864(&qword_10099C170, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_7, (uint64_t)&unk_1007E3308);
}

uint64_t sub_1000096D8()
{
  return sub_100007864(&qword_10099C178, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_7, (uint64_t)&unk_1007E3380);
}

uint64_t sub_100009704()
{
  return sub_100007864( &qword_10099C180,  (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError,  (uint64_t)&unk_1007E329C);
}

uint64_t sub_100009730()
{
  return sub_100007864( &qword_10099C188,  (uint64_t (*)(uint64_t))type metadata accessor for SPTagSeparationError,  (uint64_t)&unk_1007E2324);
}

uint64_t sub_10000975C()
{
  return sub_100007864( &qword_10099C190,  (uint64_t (*)(uint64_t))type metadata accessor for SPTagSeparationError,  (uint64_t)&unk_1007E22F0);
}

uint64_t sub_100009788()
{
  return sub_100007864( &qword_10099C198,  (uint64_t (*)(uint64_t))type metadata accessor for SPTagSeparationError,  (uint64_t)&unk_1007E22AC);
}

uint64_t sub_1000097B4()
{
  return sub_100007864(&qword_10099C1A0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_6, (uint64_t)&unk_1007E3454);
}

void _s3__C4CodeOMa_6(uint64_t a1)
{
}

uint64_t sub_1000097F4()
{
  return sub_100007864(&qword_10099C1A8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_6, (uint64_t)&unk_1007E3418);
}

uint64_t sub_100009820()
{
  return sub_100007864(&qword_10099C1B0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_6, (uint64_t)&unk_1007E3490);
}

uint64_t sub_10000984C()
{
  return sub_100007864( (unint64_t *)&qword_10099C1B8,  (uint64_t (*)(uint64_t))type metadata accessor for SPTagSeparationError,  (uint64_t)&unk_1007E33AC);
}

uint64_t sub_100009878()
{
  return sub_100007864( &qword_10099C1C0,  (uint64_t (*)(uint64_t))type metadata accessor for CBConnectionEventMatchingOption,  (uint64_t)&unk_1007E2194);
}

uint64_t sub_1000098A4()
{
  return sub_100007864( &qword_10099C1C8,  (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey,  (uint64_t)&unk_1007E208C);
}

uint64_t sub_1000098D0()
{
  return sub_100007864( &qword_10099C1D0,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E1FAC);
}

uint64_t sub_1000098FC()
{
  return sub_100007864( &qword_10099C1D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E1F78);
}

uint64_t sub_100009928()
{
  return sub_100007864( &qword_10099C1E0,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E1F34);
}

uint64_t sub_100009954()
{
  return sub_100007864(&qword_10099C1E8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_5, (uint64_t)&unk_1007E35E8);
}

void _s3__C4CodeOMa_5(uint64_t a1)
{
}

uint64_t sub_100009994()
{
  return sub_100007864(&qword_10099C1F0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_5, (uint64_t)&unk_1007E35AC);
}

uint64_t sub_1000099C0()
{
  return sub_100007864(&qword_10099C1F8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_5, (uint64_t)&unk_1007E3624);
}

uint64_t sub_1000099EC()
{
  return sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
}

uint64_t sub_100009A18()
{
  return sub_100007864( &qword_10099C208,  (uint64_t (*)(uint64_t))type metadata accessor for UnpairError,  (uint64_t)&unk_1007E1EC4);
}

uint64_t sub_100009A44()
{
  return sub_100007864( &qword_10099C210,  (uint64_t (*)(uint64_t))type metadata accessor for UnpairError,  (uint64_t)&unk_1007E1E90);
}

uint64_t sub_100009A70()
{
  return sub_100007864( &qword_10099C218,  (uint64_t (*)(uint64_t))type metadata accessor for UnpairError,  (uint64_t)&unk_1007E1E4C);
}

uint64_t sub_100009A9C()
{
  return sub_100007864(&qword_10099C220, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_4, (uint64_t)&unk_1007E36F8);
}

void _s3__C4CodeOMa_4(uint64_t a1)
{
}

uint64_t sub_100009ADC()
{
  return sub_100007864(&qword_10099C228, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_4, (uint64_t)&unk_1007E36BC);
}

uint64_t sub_100009B08()
{
  return sub_100007864(&qword_10099C230, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_4, (uint64_t)&unk_1007E3734);
}

uint64_t sub_100009B34()
{
  return sub_100007864( &qword_10099C238,  (uint64_t (*)(uint64_t))type metadata accessor for UnpairError,  (uint64_t)&unk_1007E3650);
}

uint64_t sub_100009B60()
{
  return sub_100007864( &qword_10099C240,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1007E1D98);
}

uint64_t sub_100009B8C()
{
  return sub_100007864( &qword_10099C248,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1007E1D64);
}

uint64_t sub_100009BB8()
{
  return sub_100007864( &qword_10099C250,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1007E1D20);
}

uint64_t sub_100009BE4()
{
  return sub_100007864(&qword_10099C258, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_3, (uint64_t)&unk_1007E3808);
}

void _s3__C4CodeOMa_3(uint64_t a1)
{
}

uint64_t sub_100009C24()
{
  return sub_100007864(&qword_10099C260, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_3, (uint64_t)&unk_1007E37CC);
}

uint64_t sub_100009C50()
{
  return sub_100007864(&qword_10099C268, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_3, (uint64_t)&unk_1007E3844);
}

uint64_t sub_100009C7C()
{
  return sub_100007864( &qword_10099C270,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1007E3760);
}

uint64_t sub_100009CA8()
{
  return sub_100007864( &qword_10099C278,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E1C6C);
}

uint64_t sub_100009CD4()
{
  return sub_100007864( &qword_10099C280,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E1C38);
}

uint64_t sub_100009D00()
{
  return sub_100007864( &qword_10099C288,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E1BF4);
}

uint64_t sub_100009D2C()
{
  return sub_100007864(&qword_10099C290, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_2, (uint64_t)&unk_1007E3918);
}

void _s3__C4CodeOMa_2(uint64_t a1)
{
}

uint64_t sub_100009D6C()
{
  return sub_100007864(&qword_10099C298, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_2, (uint64_t)&unk_1007E38DC);
}

uint64_t sub_100009D98()
{
  return sub_100007864( (unint64_t *)&unk_10099C2A0,  (uint64_t (*)(uint64_t))_s3__C4CodeOMa_2,  (uint64_t)&unk_1007E3954);
}

uint64_t sub_100009DC4()
{
  return sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
}

uint64_t sub_100009DF0()
{
  return sub_100007864( &qword_10099C2B0,  (uint64_t (*)(uint64_t))type metadata accessor for CommandError,  (uint64_t)&unk_1007E1B84);
}

uint64_t sub_100009E1C()
{
  return sub_100007864( &qword_10099C2B8,  (uint64_t (*)(uint64_t))type metadata accessor for CommandError,  (uint64_t)&unk_1007E1B50);
}

uint64_t sub_100009E48()
{
  return sub_100007864( &qword_10099C2C0,  (uint64_t (*)(uint64_t))type metadata accessor for CommandError,  (uint64_t)&unk_1007E1B0C);
}

uint64_t sub_100009E74()
{
  return sub_100007864(&qword_10099C2C8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_1, (uint64_t)&unk_1007E3A28);
}

void _s3__C4CodeOMa_1(uint64_t a1)
{
}

uint64_t sub_100009EB4()
{
  return sub_100007864(&qword_10099C2D0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_1, (uint64_t)&unk_1007E39EC);
}

uint64_t sub_100009EE0()
{
  return sub_100007864(&qword_10099C2D8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_1, (uint64_t)&unk_1007E3A64);
}

uint64_t sub_100009F0C()
{
  return sub_100007864( (unint64_t *)&qword_10099C2E0,  (uint64_t (*)(uint64_t))type metadata accessor for CommandError,  (uint64_t)&unk_1007E3980);
}

uint64_t sub_100009F38()
{
  return sub_100007864( &qword_10099C2E8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E1A58);
}

uint64_t sub_100009F64()
{
  return sub_100007864( &qword_10099C2F0,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E1A24);
}

uint64_t sub_100009F90()
{
  return sub_100007864( &qword_10099C2F8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E19E0);
}

uint64_t sub_100009FBC()
{
  return sub_100007864( &qword_10099C300,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_1007E2FFC);
}

uint64_t sub_100009FE8()
{
  return sub_100007864( &qword_10099C308,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_1007E27B8);
}

uint64_t sub_10000A014()
{
  return sub_100007864( &qword_10099C310,  (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError,  (uint64_t)&unk_1007E192C);
}

uint64_t sub_10000A040()
{
  return sub_100007864( &qword_10099C318,  (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError,  (uint64_t)&unk_1007E18F8);
}

uint64_t sub_10000A06C()
{
  return sub_100007864( &qword_10099C320,  (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError,  (uint64_t)&unk_1007E18B4);
}

uint64_t sub_10000A098()
{
  return sub_100007864(&qword_10099C328, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_1007E3BA4);
}

void _s3__C4CodeOMa_0(uint64_t a1)
{
}

uint64_t sub_10000A0D8()
{
  return sub_100007864(&qword_10099C330, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_1007E3B68);
}

uint64_t sub_10000A104()
{
  return sub_100007864(&qword_10099C338, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_1007E3BE0);
}

uint64_t sub_10000A130()
{
  return sub_100007864( &qword_10099C340,  (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError,  (uint64_t)&unk_1007E3AFC);
}

uint64_t sub_10000A15C()
{
  return sub_100007864( &qword_10099C348,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1007E1674);
}

uint64_t sub_10000A188()
{
  return sub_100007864( &qword_10099C350,  (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName,  (uint64_t)&unk_1007E1554);
}

uint64_t sub_10000A1B4()
{
  return sub_100007864( &qword_10099C358,  (uint64_t (*)(uint64_t))type metadata accessor for SPFinderDisabledReason,  (uint64_t)&unk_1007E1440);
}

__n128 sub_10000A1E0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for sp_key_index_map_toc_entry(uint64_t a1)
{
}

uint64_t sub_10000A200(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000A220(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for sp_key_file_header(uint64_t a1)
{
}

void sub_10000A260(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_10000A320()
{
  uint64_t v0 = sub_100004AEC((uint64_t *)&unk_10099D720);
  sub_10000A8AC(v0, qword_10099C630);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_10099C630);
  uint64_t v2 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
}

uint64_t static Date.testSetNow(date:)(uint64_t a1)
{
  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  uint64_t v5 = 0x7365547265646E75LL;
  unint64_t v6 = 0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v7, &v5, sub_10000A71C, 0LL, &type metadata for Bool);
  swift_bridgeObjectRelease(v6);
  if (v7 == 1)
  {
    if (qword_10099B020 != -1) {
      swift_once(&qword_10099B020, sub_10000A320);
    }
    uint64_t v2 = sub_100004AEC((uint64_t *)&unk_10099D720);
    uint64_t v3 = sub_10000A720(v2, (uint64_t)qword_10099C630);
    swift_beginAccess(v3, &v5, 33LL, 0LL);
    sub_10000A738(a1, v3);
    return swift_endAccess(&v5);
  }

  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000047LL,  0x8000000100850640LL,  "searchpartyd/DateExtensions_ReferenceClock.swift",  48LL,  2LL,  18LL,  0);
    __break(1u);
  }

  return result;
}

uint64_t static Date.trustedNow.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v2);
  int v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  uint64_t v16 = 0x7365547265646E75LL;
  unint64_t v17 = 0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(v15, &v16, sub_10000A71C, 0LL, &type metadata for Bool);
  swift_bridgeObjectRelease(v17);
  if (LOBYTE(v15[0]) == 1)
  {
    id v5 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
    unsigned int v6 = [v5 isInternalBuild];

    if (v6)
    {
      if (qword_10099B020 != -1) {
        swift_once(&qword_10099B020, sub_10000A320);
      }
      uint64_t v7 = sub_10000A720(v2, (uint64_t)qword_10099C630);
      swift_beginAccess(v7, v15, 0LL, 0LL);
      sub_10000A824(v7, (uint64_t)v4);
      uint64_t v8 = type metadata accessor for Date(0LL);
      uint64_t v9 = *(void *)(v8 - 8);
      sub_10000A86C((uint64_t)v4);
    }
  }

  uint64_t My = type metadata accessor for Feature.FindMy(0LL);
  uint64_t v18 = My;
  unint64_t v19 = sub_10000A780();
  uint64_t v11 = sub_10000A7C8(&v16);
  (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v11,  enum case for Feature.FindMy.trustedNowUsesReferenceClock(_:),  My);
  LOBYTE(My) = isFeatureEnabled(_:)(&v16);
  uint64_t v12 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v16);
  if ((My & 1) == 0) {
    return Date.init()(v12);
  }
  sub_100630AB4();
  return Date.init(timeIntervalSinceReferenceDate:)(v13);
}

uint64_t sub_10000A720(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_10000A738(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D720);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10000A780()
{
  unint64_t result = qword_1009B04D0;
  if (!qword_1009B04D0)
  {
    uint64_t My = type metadata accessor for Feature.FindMy(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Feature.FindMy, My);
    atomic_store(result, (unint64_t *)&qword_1009B04D0);
  }

  return result;
}

void *sub_10000A7C8(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

uint64_t _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10000A824(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D720);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000A86C(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_10099D720);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t *sub_10000A8AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

id sub_10000A8EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC12searchpartyd40UnwantedTrackingUserNotificationDelegate_name];
  *(void *)uint64_t v2 = 0xD000000000000028LL;
  *((void *)v2 + 1) = 0x80000001007E3EF0LL;
  if (qword_10099B638 != -1) {
    swift_once(&qword_10099B638, sub_1005E6B7C);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = sub_10000A720(v3, (uint64_t)qword_100A2AED0);
  id v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "UnwantedTrackingUserNotificationDelegate: init", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for UnwantedTrackingUserNotificationDelegate();
  return objc_msgSendSuper2(&v9, "init");
}

id sub_10000AA24()
{
  uint64_t v1 = v0;
  if (qword_10099B638 != -1) {
    swift_once(&qword_10099B638, sub_1005E6B7C);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_10000A720(v2, (uint64_t)qword_100A2AED0);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "UnwantedTrackingUserNotificationDelegate: Deinit", v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for UnwantedTrackingUserNotificationDelegate();
  return objc_msgSendSuper2(&v8, "dealloc");
}

uint64_t type metadata accessor for UnwantedTrackingUserNotificationDelegate()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd40UnwantedTrackingUserNotificationDelegate);
}

void sub_10000AC3C(uint64_t a1, id a2)
{
  id v4 = [a2 notificationSettings];
  id v5 = [v4 authorizationStatus];

  if (v5)
  {
    if (qword_10099B638 != -1) {
      swift_once(&qword_10099B638, sub_1005E6B7C);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    uint64_t v7 = sub_10000A720(v6, (uint64_t)qword_100A2AED0);
    objc_super v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      char v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)char v10 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "UnwantedTrackingUserNotificationDelegate: No need to request deliver quietly authorization for Find My. Authoriz ation already determined.",  v10,  2u);
      swift_slowDealloc(v10, -1LL, -1LL);
    }
  }

  else
  {
    v13[4] = sub_10000B204;
    uint64_t v14 = a1;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256LL;
    v13[2] = sub_10000AFD0;
    v13[3] = &unk_100938198;
    uint64_t v11 = _Block_copy(v13);
    uint64_t v12 = v14;
    swift_retain(a1);
    swift_release(v12);
    [a2 requestAuthorizationWithOptions:66 completionHandler:v11];
    _Block_release(v11);
  }

void sub_10000ADD8(char a1, uint64_t a2)
{
  if (qword_10099B638 != -1) {
    swift_once(&qword_10099B638, sub_1005E6B7C);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10000A720(v4, (uint64_t)qword_100A2AED0);
  swift_errorRetain(a2);
  uint64_t v5 = swift_errorRetain(a2);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc(18LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = v9;
    *(_DWORD *)uint64_t v8 = 67109378;
    LODWORD(v14) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, (char *)&v14 + 4, v8 + 4, v8 + 8);
    *(_WORD *)(v8 + 8) = 2080;
    uint64_t v14 = a2;
    swift_errorRetain(a2);
    uint64_t v10 = sub_100004AEC(&qword_10099C678);
    uint64_t v11 = String.init<A>(describing:)(&v14, v10);
    unint64_t v13 = v12;
    uint64_t v14 = sub_1003F11D4(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v8 + 10, v8 + 18);
    swift_bridgeObjectRelease(v13);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "UnwantedTrackingUserNotificationDelegate: Request deliver quietly authorization for Find My completed. Granted?: % {BOOL}d. Error?: %s",  (uint8_t *)v8,  0x12u);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }

  Transaction.capture()();
}

void sub_10000AFD0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v7 = a3;
  v6(a2, a3);
  swift_release(v5);
}

uint64_t sub_10000B030()
{
  uint64_t v1 = (uint64_t *)(*v0 + OBJC_IVAR____TtC12searchpartyd40UnwantedTrackingUserNotificationDelegate_name);
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

void sub_10000B070()
{
  if (qword_10099B638 != -1) {
    swift_once(&qword_10099B638, sub_1005E6B7C);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2AED0);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "UnwantedTrackingUserNotificationDelegate: startup", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  id v5 = objc_allocWithZone(&OBJC_CLASS___UNUserNotificationCenter);
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 initWithBundleIdentifier:v6];

  uint64_t v8 = type metadata accessor for Transaction(0LL);
  __chkstk_darwin(v8);
  id v9 = v7;
  static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.requestProvisionalAuthorizationFindMyApp",  70LL,  2LL,  sub_10000B1EC);
}

void sub_10000B1EC(uint64_t a1)
{
}

void sub_10000B204(char a1, uint64_t a2)
{
}

uint64_t sub_10000B20C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10000B21C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10000B224()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A29E40);
  sub_10000A720(v0, (uint64_t)qword_100A29E40);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000010LL,  0x8000000100850810LL);
}

uint64_t sub_10000B2A8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A29E58);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A29E58);
  if (qword_10099B028 != -1) {
    swift_once(&qword_10099B028, sub_10000B224);
  }
  uint64_t v2 = sub_10000A720(v0, (uint64_t)qword_100A29E40);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_10000B338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[15] = a4;
  uint64_t v5 = sub_100004AEC(&qword_10099C818);
  v4[16] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for FinderStateInfo(0LL);
  v4[17] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[18] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[19] = swift_task_alloc(v8);
  v4[20] = swift_task_alloc(v8);
  uint64_t v9 = sub_100004AEC(&qword_10099C820);
  v4[21] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_10099C828);
  v4[22] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[23] = v11;
  v4[24] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_10099C830);
  v4[25] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v4[26] = v13;
  v4[27] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10000B448, 0LL, 0LL);
}

uint64_t sub_10000B448()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain(*(void *)(v0 + 120));
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    uint64_t v3 = *(void *)(v0 + 120);
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    swift_release(v3);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v5 = (uint64_t (__cdecl *)())((char *)&dword_10099C838 + dword_10099C838);
    uint64_t v4 = (void *)swift_task_alloc(unk_10099C83C);
    *(void *)(v0 + 224) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_10000B548;
    return v5();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10000B548(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 224LL);
  *(void *)(*(void *)v1 + 232LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10000B5A4, 0LL, 0LL);
}

uint64_t sub_10000B5A4()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 232))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc(dword_1009AB384);
    *(void *)(v0 + 240) = v2;
    void *v2 = v0;
    v2[1] = sub_10000B71C;
    return sub_1003A9CB0(*(void *)(v0 + 192));
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B030 != -1) {
      swift_once(&qword_10099B030, sub_10000B2A8);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A29E58);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      unint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing FinderStateObserver service.", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    uint64_t v9 = *(void *)(v0 + 192);
    uint64_t v11 = *(void *)(v0 + 160);
    uint64_t v10 = *(void *)(v0 + 168);
    uint64_t v12 = *(void *)(v0 + 152);
    uint64_t v13 = *(void *)(v0 + 128);
    swift_task_dealloc(*(void *)(v0 + 216));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10000B71C()
{
  return swift_task_switch(sub_10000B770, 0LL, 0LL);
}

uint64_t sub_10000B770()
{
  uint64_t v2 = v0[23];
  uint64_t v1 = v0[24];
  uint64_t v3 = v0[22];
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[31] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10000B7FC;
  return AsyncStream.Iterator.next(isolation:)(v0[21], 0LL, 0LL, v0[25]);
}

uint64_t sub_10000B7FC()
{
  return swift_task_switch(sub_10000B850, 0LL, 0LL);
}

uint64_t sub_10000B850()
{
  uint64_t v1 = *(void **)(v0 + 168);
  uint64_t v2 = sub_100004AEC(&qword_10099C840);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(v1, 1LL, v2) == 1)
  {
    uint64_t v3 = *(void *)(v0 + 232);
    (*(void (**)(void, void))(*(void *)(v0 + 208) + 8LL))(*(void *)(v0 + 216), *(void *)(v0 + 200));
    swift_release(v3);
    uint64_t v4 = *(void *)(v0 + 192);
    uint64_t v6 = *(void *)(v0 + 160);
    uint64_t v5 = *(void *)(v0 + 168);
    uint64_t v7 = *(void *)(v0 + 152);
    uint64_t v8 = *(void *)(v0 + 128);
    swift_task_dealloc(*(void *)(v0 + 216));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v10 = *(void *)(v0 + 160);
  uint64_t v11 = *(void *)(v0 + 136);
  uint64_t v12 = *(void *)(v0 + 144);
  uint64_t v13 = *(void *)(v0 + 128);
  swift_release(*v1);
  uint64_t v14 = (uint64_t)v1 + *(int *)(v2 + 48);
  uint64_t v15 = sub_100004AEC(&qword_10099C848);
  sub_100012EFC(v14 + *(int *)(v15 + 48), v10);
  sub_100015750(v14, v13, &qword_10099C818);
  int v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v13, 1LL, v11);
  unint64_t v17 = *(unsigned __int8 **)(v0 + 160);
  if (v16 == 1)
  {
    uint64_t v18 = *(void *)(v0 + 128);
    sub_100012F40(*(void *)(v0 + 160));
    sub_100015794(v18, &qword_10099C818);
  }

  else
  {
    unint64_t v19 = *(unsigned __int8 **)(v0 + 152);
    sub_100012EFC(*(void *)(v0 + 128), (uint64_t)v19);
    if (*v19 != *v17) {
      return swift_task_switch(sub_10000BA50, *(void *)(v0 + 120), 0LL);
    }
    uint64_t v20 = *(void *)(v0 + 160);
    sub_100012F40(*(void *)(v0 + 152));
    sub_100012F40(v20);
  }

  v21 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(void *)(v0 + 248) = v21;
  void *v21 = v0;
  v21[1] = sub_10000B7FC;
  return AsyncStream.Iterator.next(isolation:)(*(void *)(v0 + 168), 0LL, 0LL, *(void *)(v0 + 200));
}

uint64_t sub_10000BA50()
{
  *(_BYTE *)(*(void *)(v0 + 120) + 176LL) = 1;
  uint64_t v1 = (void *)swift_task_alloc(dword_10099C6AC);
  *(void *)(v0 + 256) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000BAA4;
  return sub_10000BD00();
}

uint64_t sub_10000BAA4()
{
  return swift_task_switch(sub_10000BAF8, 0LL, 0LL);
}

uint64_t sub_10000BAF8()
{
  uint64_t v1 = v0[20];
  sub_100012F40(v0[19]);
  sub_100012F40(v1);
  v0[31] = (uint64_t)v2;
  void *v2 = v0;
  v2[1] = (uint64_t *)sub_10000B7FC;
  return AsyncStream.Iterator.next(isolation:)(v0[21], 0LL, 0LL, v0[25]);
}

uint64_t sub_10000BB68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001581C(a1, (uint64_t)v8, &qword_1009A9BF0);
  uint64_t v9 = type metadata accessor for TaskPriority(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) == 1)
  {
    sub_100015794((uint64_t)v8, &qword_1009A9BF0);
    uint64_t v11 = 4096LL;
    uint64_t v12 = *(void *)(a3 + 16);
    if (v12)
    {
LABEL_3:
      uint64_t v13 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v12);
      swift_unknownObjectRetain(v12);
      uint64_t v15 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v13);
      uint64_t v17 = v16;
      swift_unknownObjectRelease(v12);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v18 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    uint64_t v11 = v18 | 0x1000LL;
    uint64_t v12 = *(void *)(a3 + 16);
    if (v12) {
      goto LABEL_3;
    }
  }

  uint64_t v15 = 0LL;
  uint64_t v17 = 0LL;
LABEL_6:
  uint64_t v19 = swift_allocObject(&unk_100938270, 32LL, 7LL);
  *(void *)(v19 + 16) = a2;
  *(void *)(v19 + 24) = a3;
  if (v17 | v15)
  {
    v22[0] = 0LL;
    v22[1] = 0LL;
    uint64_t v20 = v22;
    v22[2] = v15;
    v22[3] = v17;
  }

  else
  {
    uint64_t v20 = 0LL;
  }

  return swift_task_create(v11, v20, (char *)&type metadata for () + 8, &unk_1009AB890, v19);
}

uint64_t sub_10000BD00()
{
  v1[6] = v0;
  uint64_t v2 = type metadata accessor for XPCActivity.State(0LL);
  v1[7] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[8] = v3;
  v1[9] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10000BD60, v0, 0LL);
}

uint64_t sub_10000BD60()
{
  uint64_t v1 = *(void *)(v0 + 48);
  if (*(_BYTE *)(v1 + 176) != 1)
  {
    if (qword_10099B030 != -1) {
      swift_once(&qword_10099B030, sub_10000B2A8);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    uint64_t v20 = sub_10000A720(v19, (uint64_t)qword_100A29E58);
    v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v23 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "FindMyNetworkPublishActivityService maintaining existing criteria.",  v23,  2u);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    goto LABEL_15;
  }

  *(_BYTE *)(v1 + 176) = 0;
  swift_beginAccess(v1 + 168, v0 + 16, 0LL, 0LL);
  uint64_t v2 = *(void *)(v1 + 168);
  *(void *)(v0 + 80) = v2;
  char v3 = *(_BYTE *)(v2 + 32);
  *(_BYTE *)(v0 + 120) = v3;
  uint64_t v4 = -1LL;
  uint64_t v5 = -1LL << v3;
  if (-(-1LL << v3) < 64) {
    uint64_t v4 = ~(-1LL << -(char)v5);
  }
  unint64_t v6 = v4 & *(void *)(v2 + 64);
  uint64_t v7 = (void *)swift_bridgeObjectRetain(v2);
  if (!v6)
  {
    unint64_t v25 = 63 - v5;
    if ((unint64_t)(63 - v5) > 0x7F)
    {
      unint64_t v26 = v7[9];
      if (v26)
      {
        uint64_t v8 = 1LL;
LABEL_20:
        uint64_t v10 = (v26 - 1) & v26;
        unint64_t v9 = __clz(__rbit64(v26)) + (v8 << 6);
        goto LABEL_6;
      }

      if (v25 >= 0xC0)
      {
        unint64_t v26 = v7[10];
        if (v26)
        {
          uint64_t v8 = 2LL;
          goto LABEL_20;
        }

        if (v25 >= 0x100)
        {
          unint64_t v26 = v7[11];
          if (v26)
          {
            uint64_t v8 = 3LL;
            goto LABEL_20;
          }

          if (v25 > 0x13F)
          {
            unint64_t v26 = v7[12];
            if (v26)
            {
              uint64_t v8 = 4LL;
              goto LABEL_20;
            }

            uint64_t v28 = 0LL;
            uint64_t v29 = v25 >> 6;
            if (v29 <= 5) {
              uint64_t v29 = 5LL;
            }
            uint64_t v30 = v29 - 5;
            while (v30 != v28)
            {
              unint64_t v26 = v7[v28++ + 13];
              if (v26)
              {
                uint64_t v8 = v28 + 4;
                goto LABEL_20;
              }
            }
          }
        }
      }
    }

    swift_release(v7);
LABEL_15:
    swift_task_dealloc(*(void *)(v0 + 72));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v8 = 0LL;
  unint64_t v9 = __clz(__rbit64(v6));
  uint64_t v10 = (v6 - 1) & v6;
LABEL_6:
  *(void *)(v0 + 88) = v8;
  *(void *)(v0 + 96) = v10;
  uint64_t v11 = *(unsigned __int8 *)(v7[6] + v9);
  uint64_t v12 = *(void *)(v7[7] + 8 * v9);
  *(void *)(v0 + 104) = v12;
  uint64_t v13 = qword_10099B030;
  swift_retain(v12);
  if (v13 != -1) {
    swift_once(&qword_10099B030, sub_10000B2A8);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  sub_10000A720(v14, (uint64_t)qword_100A29E58);
  uint64_t v15 = swift_retain_n(v12, 2LL);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    unsigned __int8 v18 = (_DWORD *)swift_slowAlloc(12LL, -1LL);
    *(void *)(v0 + 40) = swift_slowAlloc(32LL, -1LL);
    *unsigned __int8 v18 = 136446210;
    __asm { BR              X9 }
  }

  swift_release_n(v12, 2LL);

  *(void *)(v0 + 112) = v27;
  void *v27 = v0;
  v27[1] = sub_10000C250;
  return v31(*(void *)(v0 + 72));
}

uint64_t sub_10000C250()
{
  uint64_t v2 = *(void *)(*(void *)v0 + 64LL);
  uint64_t v1 = *(void *)(*(void *)v0 + 72LL);
  uint64_t v4 = *(void *)(*(void *)v0 + 48LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 56LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 112LL));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_10000C2C4, v4, 0LL);
}

uint64_t sub_10000C2C4()
{
  int64_t v1 = *(void *)(v0 + 88);
  unint64_t v2 = *(void *)(v0 + 96);
  if (!v2)
  {
    int64_t v14 = v1 + 1;
    if (__OFADD__(v1, 1LL))
    {
      __break(1u);
    }

    else
    {
      int64_t v15 = (unint64_t)((1LL << *(_BYTE *)(v0 + 120)) + 63) >> 6;
      uint64_t v5 = *(void *)(v0 + 80);
      if (v14 >= v15) {
        goto LABEL_22;
      }
      uint64_t v16 = v5 + 64;
      unint64_t v17 = *(void *)(v5 + 64 + 8 * v14);
      ++v1;
      if (v17)
      {
LABEL_11:
        uint64_t v3 = (v17 - 1) & v17;
        unint64_t v4 = __clz(__rbit64(v17)) + (v1 << 6);
        goto LABEL_3;
      }

      int64_t v1 = v14 + 1;
      if (v14 + 1 >= v15) {
        goto LABEL_22;
      }
      unint64_t v17 = *(void *)(v16 + 8 * v1);
      if (v17) {
        goto LABEL_11;
      }
      int64_t v1 = v14 + 2;
      if (v14 + 2 >= v15) {
        goto LABEL_22;
      }
      unint64_t v17 = *(void *)(v16 + 8 * v1);
      if (v17) {
        goto LABEL_11;
      }
      int64_t v18 = v14 + 3;
      if (v18 >= v15)
      {
LABEL_22:
        swift_release(v5);
        swift_task_dealloc(*(void *)(v0 + 72));
        return (*(uint64_t (**)(void))(v0 + 8))();
      }

      unint64_t v17 = *(void *)(v16 + 8 * v18);
      if (v17)
      {
        int64_t v1 = v18;
        goto LABEL_11;
      }

      while (1)
      {
        int64_t v1 = v18 + 1;
        if (__OFADD__(v18, 1LL)) {
          break;
        }
        if (v1 >= v15) {
          goto LABEL_22;
        }
        unint64_t v17 = *(void *)(v16 + 8 * v1);
        ++v18;
        if (v17) {
          goto LABEL_11;
        }
      }
    }

    __break(1u);
    JUMPOUT(0x10000C6BCLL);
  }

  uint64_t v3 = (v2 - 1) & v2;
  unint64_t v4 = __clz(__rbit64(v2)) | (v1 << 6);
  uint64_t v5 = *(void *)(v0 + 80);
LABEL_3:
  *(void *)(v0 + 88) = v1;
  *(void *)(v0 + 96) = v3;
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v4);
  uint64_t v7 = *(void *)(*(void *)(v5 + 56) + 8 * v4);
  *(void *)(v0 + 104) = v7;
  uint64_t v8 = qword_10099B030;
  swift_retain(v7);
  if (v8 != -1) {
    swift_once(&qword_10099B030, sub_10000B2A8);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_10000A720(v9, (uint64_t)qword_100A29E58);
  uint64_t v10 = swift_retain_n(v7, 2LL);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (_DWORD *)swift_slowAlloc(12LL, -1LL);
    *(void *)(v0 + 40) = swift_slowAlloc(32LL, -1LL);
    *uint64_t v13 = 136446210;
    __asm { BR              X9 }
  }

  swift_release_n(v7, 2LL);

  *(void *)(v0 + 112) = v19;
  *uint64_t v19 = v0;
  v19[1] = sub_10000C250;
  return v21(*(void *)(v0 + 72));
}

uint64_t sub_10000C6E0()
{
  v1[6] = v0;
  v1[7] = *v0;
  uint64_t v2 = type metadata accessor for DispatchQoS(0LL);
  v1[8] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10000C740, v0, 0LL);
}

uint64_t sub_10000C740()
{
  if (qword_10099B030 != -1) {
    swift_once(&qword_10099B030, sub_10000B2A8);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A29E58);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "FindMyNetworkPublishActivityService registerPublishActivities.",  v5,  2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 48);

  *(_BYTE *)(v6 + 176) = 0;
  uint64_t v7 = sub_1005722D8();
  *(void *)(v0 + 72) = v7;
  char v8 = *(_BYTE *)(v7 + 32);
  *(_BYTE *)(v0 + 120) = v8;
  uint64_t v9 = -1LL;
  uint64_t v10 = -1LL << v8;
  if (-v10 < 64) {
    uint64_t v9 = ~(-1LL << -(char)v10);
  }
  unint64_t v11 = v9 & *(void *)(v7 + 56);
  if (v11)
  {
    uint64_t v12 = 0LL;
    unint64_t v13 = __clz(__rbit64(v11));
    uint64_t v14 = (v11 - 1) & v11;
    goto LABEL_9;
  }

  unint64_t v17 = 63 - v10;
  if (v17 > 0x7F)
  {
    unint64_t v18 = *(void *)(v7 + 64);
    if (v18)
    {
      uint64_t v12 = 1LL;
LABEL_13:
      uint64_t v14 = (v18 - 1) & v18;
      unint64_t v13 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_9:
      *(void *)(v0 + 80) = v12;
      *(void *)(v0 + 88) = v14;
      uint64_t v15 = *(unsigned __int8 *)(*(void *)(v7 + 48) + v13);
      *(_BYTE *)(v0 + 121) = v15;
      uint64_t MyNetworkPublishDateProvider = type metadata accessor for FindMyNetworkPublishDateProvider();
      *(void *)(v0 + 96) = swift_allocObject(MyNetworkPublishDateProvider, 112LL, 15LL);
      swift_defaultActor_initialize();
      __asm { BR              X9 }
    }

    if (v17 >= 0xC0)
    {
      unint64_t v18 = *(void *)(v7 + 72);
      if (v18)
      {
        uint64_t v12 = 2LL;
        goto LABEL_13;
      }

      if (v17 >= 0x100)
      {
        unint64_t v18 = *(void *)(v7 + 80);
        if (v18)
        {
          uint64_t v12 = 3LL;
          goto LABEL_13;
        }

        if (v17 >= 0x140)
        {
          unint64_t v18 = *(void *)(v7 + 88);
          if (v18)
          {
            uint64_t v12 = 4LL;
          }

          else
          {
            uint64_t v19 = 0LL;
            uint64_t v20 = v17 >> 6;
            if (v20 <= 5) {
              uint64_t v20 = 5LL;
            }
            uint64_t v21 = v20 - 5;
            do
            {
              if (v21 == v19) {
                goto LABEL_29;
              }
              unint64_t v18 = *(void *)(v7 + 96 + 8 * v19++);
            }

            while (!v18);
            uint64_t v12 = v19 + 4;
          }

          goto LABEL_13;
        }
      }
    }
  }

LABEL_29:
  uint64_t v22 = *(void *)(v0 + 64);
  swift_release(v7);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

  v38 = *(void *)(v0 + 64);
  swift_release(v30);
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

      unint64_t v13 = (v20 - 1) & v20;
      v49 = v21;
      unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
    }

    v23 = *(void **)(*(void *)(v46 + 48) + 8 * v18);
    v24 = (uint64_t *)(*(void *)(v46 + 56) + 16 * v18);
    unint64_t v25 = *v24;
    unint64_t v26 = v24[1];
    v27 = v23;
    sub_10001736C(v25, v26);
    uint64_t v28 = v27;
    sub_10001736C(v25, v26);
    sub_100598998();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v15);
    *(void *)&v51 = v15;
    v31 = sub_10030D124((uint64_t)v4);
    v32 = v15[2];
    v33 = (v30 & 1) == 0;
    v34 = v32 + v33;
    if (__OFADD__(v32, v33)) {
      break;
    }
    v35 = v30;
    if (v15[3] >= v34)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v15 = (void *)v51;
        if ((v30 & 1) != 0) {
          goto LABEL_8;
        }
      }

      else
      {
        sub_1000620B8();
        uint64_t v15 = (void *)v51;
        if ((v35 & 1) != 0) {
          goto LABEL_8;
        }
      }
    }

    else
    {
      sub_10004A740(v34, isUniquelyReferenced_nonNull_native);
      v36 = sub_10030D124((uint64_t)v4);
      if ((v35 & 1) != (v37 & 1)) {
        goto LABEL_50;
      }
      v31 = v36;
      uint64_t v15 = (void *)v51;
      if ((v35 & 1) != 0)
      {
LABEL_8:
        uint64_t v16 = v15[7] + 16 * v31;
        sub_100016F9C(*(void *)v16, *(void *)(v16 + 8));
        *(void *)uint64_t v16 = v25;
        *(void *)(v16 + 8) = v26;
        goto LABEL_9;
      }
    }

    v15[(v31 >> 6) + 8] |= 1LL << v31;
    (*(void (**)(unint64_t, char *, uint64_t))(v47 + 16))( v15[6] + *(void *)(v47 + 72) * v31,  v4,  v48);
    v38 = (uint64_t *)(v15[7] + 16 * v31);
    *v38 = v25;
    v38[1] = v26;
    v39 = v15[2];
    v40 = __OFADD__(v39, 1LL);
    v41 = v39 + 1;
    if (v40) {
      goto LABEL_47;
    }
    v15[2] = v41;
LABEL_9:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v4, v48);

    sub_100016F9C(v25, v26);
    uint64_t v14 = v49;
  }

  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v48);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    v148 = 1LL;
    v139 = (unint64_t)v141;
LABEL_31:
    v149 = v324;
    v150 = v321;
    (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v324 + 56))(v321, v148, 1LL, v143);
    sub_100015750(v150, v144, &qword_1009A2440);
    v151 = v144;
    v152 = v34;
    v153 = v318;
    sub_10002218C(v151, v318, type metadata accessor for LocationProvider);
    v154 = sub_10057EEA4( *(unsigned __int8 *)(v153 + v143[6]),  *(void *)(v153 + v143[6] + 8),  *(void **)(v153 + v143[6] + 16));
    v157 = (void *)sub_1006054A8(v154, v155, v156);
    swift_bridgeObjectRelease();
    v158 = objc_allocWithZone(&OBJC_CLASS___SPLocationProvider);
    v159 = Date._bridgeToObjectiveC()().super.isa;
    v160 = [v158 initWithTimestamp:v159 provider:v157];

    v161 = v153;
    v34 = v152;
    sub_100018C68(v161, type metadata accessor for LocationProvider);
    v162 = v160;
    v136 = v320;
    sub_1000BDD04((Swift::Int *)&v328, v162);
  }

  swift_bridgeObjectRelease();
  v163 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v164 = v315;
  [v315 setLocationProviders:v163];

  v165 = v316;
  v166 = *(void *)(v316 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  v167 = type metadata accessor for BeaconKeyManager(0LL);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10014F014, v165, v166, (char *)&type metadata for () + 8, v167);
  v168 = (int *)v330;
  sub_100013044((uint64_t)v332, (uint64_t)&v330);
  v169 = swift_allocObject(&unk_100940050, 64LL, 7LL);
  *(void *)(v169 + 16) = v168;
  sub_100012EC0(&v330, v169 + 24);
  v325 = v168;
  swift_retain();
  v170 = v311;
  unsafeFromAsyncTask<A>(_:)(&unk_1009A25F0, v169, v281);
  swift_release();
  v171 = &qword_1009A2438;
  v172 = v282;
  sub_10001581C(v170, (uint64_t)v282, &qword_1009A2438);
  v173 = sub_100004AEC((uint64_t *)&unk_1009AE460);
  v174 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v173 - 8) + 48LL);
  v175 = 1LL;
  if (v174(v172, 1LL, v173) != 1)
  {
    v175 = *v172;
    v171 = (uint64_t *)&unk_1009AE460;
  }

  v142 = v304;
  v176 = v280;
  v136 = v320;
  sub_100015794((uint64_t)v172, v171);
  [v164 setKeySyncLastObservedIndex:v175];
  v177 = &qword_1009A2438;
  v178 = v283;
  sub_10001581C(v311, v283, &qword_1009A2438);
  v179 = 1LL;
  if (v174((uint64_t *)v178, 1LL, v173) == 1)
  {
    v180 = (uint64_t)v278;
  }

  else
  {
    v180 = (uint64_t)v278;
    ((void (*)(char *, uint64_t, uint64_t))v292)(v278, v178 + *(int *)(v173 + 36), v136);
    v179 = 0LL;
    v177 = (uint64_t *)&unk_1009AE460;
  }

  v181 = (uint64_t)v299;
  sub_100015794(v178, v177);
  v182 = v314;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v314 + 56))(v180, v179, 1LL, v136);
  sub_100013044((uint64_t)v332, (uint64_t)&v330);
  v183 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v295)(v180, 1LL, v136);
  v184 = v300;
  if (v183 == 1)
  {
    sub_100012ED8(&v330, v331);
    sub_1007636B4(v181);
    v181 = (uint64_t)v299;
    sub_100015794(v180, (uint64_t *)&unk_10099D720);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v182 + 32))(v181, v180, v136);
  }

  v185 = v308;
  v186 = (uint64_t)v279;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v330);
  v187 = v181;
  v188 = Date._bridgeToObjectiveC()().super.isa;
  v185(v187, v136);
  [v164 setKeySyncLastIndexObservationDate:v188];

  [v164 setKeySyncWildIndexFallback:1];
  v189 = v310;
  v313((uint64_t *)v310, v184, (uint64_t)v142);
  sub_100576BD4(v186);
  ((void (*)(char *, uint64_t (*)(uint64_t)))v317)(v189, v142);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v284 + 48))(v186, 1LL, v176) == 1)
  {
    sub_100015794(v186, &qword_1009A2430);
    v190 = [v164 setKeyAlignmentLastObservedIndex:0];
    v191 = v301;
    static Date.distantPast.getter(v190);
    v192 = Date._bridgeToObjectiveC()().super.isa;
    v185(v191, v136);
    [v164 setKeyAlignmentLastIndexObservationDate:v192];
  }

  else
  {
    v193 = v186;
    v194 = v269;
    sub_10002218C(v193, v269, type metadata accessor for KeyAlignmentRecord);
    [v164 setKeyAlignmentLastObservedIndex:*(void *)(v194 + *(int *)(v176 + 28))];
    v195 = Date._bridgeToObjectiveC()().super.isa;
    [v164 setKeyAlignmentLastIndexObservationDate:v195];

    sub_100018C68(v194, type metadata accessor for KeyAlignmentRecord);
  }

  v196 = [v164 type];
  v197 = SPBeaconTypeAccessory;
  v198 = static String._unconditionallyBridgeFromObjectiveC(_:)(v196);
  v200 = v199;
  v202 = static String._unconditionallyBridgeFromObjectiveC(_:)(v197);
  if (v198 == v202 && v200 == v201)
  {
LABEL_46:

    swift_bridgeObjectRelease_n(v200, 2LL);
    v141 = v315;
    v203 = (int *)v298;
    goto LABEL_48;
  }

  v204 = _stringCompareWithSmolCheck(_:_:expecting:)(v198, v200, v202, v201, 0LL);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v141 = v315;
  v203 = (int *)v298;
  if ((v204 & 1) != 0) {
    goto LABEL_48;
  }
  v196 = [v315 type];
  v251 = SPBeaconTypeHele;
  v252 = static String._unconditionallyBridgeFromObjectiveC(_:)(v196);
  v200 = v253;
  v255 = static String._unconditionallyBridgeFromObjectiveC(_:)(v251);
  if (v252 == v255 && v200 == v254) {
    goto LABEL_46;
  }
  v256 = _stringCompareWithSmolCheck(_:_:expecting:)(v252, v200, v255, v254, 0LL);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v141 = v315;
  v203 = (int *)v298;
  if ((v256 & 1) != 0)
  {
LABEL_48:
    v205 = [v141 identifier];
    v206 = (uint64_t)v310;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v205);

    v207 = v277;
    sub_10050B884(v206, v277);
    ((void (*)(uint64_t, uint64_t (*)(uint64_t)))v317)(v206, v142);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v275 + 48))(v207, 1LL, v276) == 1)
    {
      sub_100015794(v207, &qword_1009AA870);
    }

    else
    {
      v208 = v207;
      v209 = v268;
      sub_10002218C(v208, v268, type metadata accessor for BeaconProductInfoRecord);
      v210 = sub_10039E040();
      [v141 setAccessoryProductInfo:v210];

      sub_100018C68(v209, type metadata accessor for BeaconProductInfoRecord);
    }
  }

  v211 = v310;
  v212 = ((uint64_t (*)(char *, uint64_t, uint64_t (*)(uint64_t)))v313)(v310, v184, v142);
  __chkstk_darwin(v212);
  v213 = (uint64_t)v287;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_10015471C);
  ((void (*)(char *, uint64_t (*)(uint64_t)))v317)(v211, v142);
  v214 = (int *)v288;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v285 + 48))(v213, 1LL, v288) == 1)
  {
    sub_100015794(v213, &qword_1009AE490);
    v215 = v296;
    v216 = (uint64_t)v291;
    v217 = (uint64_t)v290;
  }

  else
  {
    v218 = v297;
    sub_10002218C(v213, v297, type metadata accessor for BeaconNamingRecord);
    swift_bridgeObjectRetain(*(void *)(v218 + v214[8] + 8));
    v219 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v141 setName:v219];

    v220 = *(void *)(v218 + v214[7]);
    v221 = (void *)sub_10013E428(v220, (uint64_t)sub_100022170);
    v222 = v221;
    v215 = v296;
    v216 = (uint64_t)v291;
    if (v220 == SPBeaconRoleIdOther && (v223 = v297 + v214[9], *(void *)(v223 + 8)) && v221)
    {
      v224 = objc_msgSend(v221, "role", swift_bridgeObjectRetain(*(void *)(v223 + 8)).n128_f64[0]);
      static String._unconditionallyBridgeFromObjectiveC(_:)(v224);

      v225 = objc_allocWithZone(&OBJC_CLASS___SPBeaconRole);
      v226 = String._bridgeToObjectiveC()();
      v141 = v315;
      swift_bridgeObjectRelease();
      v227 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v228 = v225;
      v203 = (int *)v298;
      v229 = [v228 initWithRoleId:v220 role:v226 roleEmoji:v227];

      v136 = v320;
      v216 = (uint64_t)v291;
      [v141 setRole:v229];

      v222 = v229;
    }

    else
    {
      [v141 setRole:v221];
    }

    v217 = (uint64_t)v290;

    sub_100018C68(v297, type metadata accessor for BeaconNamingRecord);
  }

  sub_100013044((uint64_t)v332, (uint64_t)&v328);
  v230 = sub_100004AEC(&qword_1009B0530);
  v231 = swift_dynamicCast(v217, &v328, v230, v203, 6LL);
  v232 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v289 + 56);
  if (!v231)
  {
    v232(v217, 1LL, 1LL, v203);
    sub_100015794(v217, (uint64_t *)&unk_1009A9C30);
    sub_100013044((uint64_t)v332, (uint64_t)&v328);
    v236 = (uint64_t)v272;
    v237 = v302;
    v238 = swift_dynamicCast(v272, &v328, v230, v302, 6LL);
    v239 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v270 + 56);
    if ((v238 & 1) == 0)
    {
      v239(v236, 1LL, 1LL, v237);
      swift_bridgeObjectRelease();
      swift_release();
      v259 = (void (*)(char *, uint64_t))v308;
      v308((uint64_t)v322, v136);
      sub_100015794(v311, &qword_1009A2438);
      v259(v305, v136);
      sub_100015794((uint64_t)v306, &qword_1009A1800);
      ((void (*)(char *, uint64_t (*)(uint64_t)))v317)(v215, v142);
      sub_100015794(v236, (uint64_t *)&unk_1009AE470);
      goto LABEL_83;
    }

    v239(v236, 0LL, 1LL, v237);
    v240 = v273;
    sub_10002218C(v236, v273, type metadata accessor for SharedBeaconRecord);
    v241 = String._bridgeToObjectiveC()();
    [v141 setStableIdentifier:v241];

    v242 = v240 + v237[7];
    v243 = *(void *)(v242 + 8);
    v244 = *(void **)(v242 + 16);
    v245 = *(_BYTE *)v242;
    swift_bridgeObjectRetain(v244);
    v246 = (void *)sub_1006054A8(v245, v243, v244);
    swift_bridgeObjectRelease();
    [v141 setOwner:v246];

    [v141 setAccepted:*(unsigned __int8 *)(v240 + v237[13])];
    swift_bridgeObjectRetain(*(void *)(v240 + v237[8] + 8));
    v247 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v141 setCorrelationIdentifier:v247];

    [v141 setInternalShareType:qword_1007EDF70[*(char *)(v240 + v237[16])]];
    v248 = v240 + v237[20];
    v139 = v266;
    sub_10001581C(v248, v266, &qword_1009AE600);
    v143 = (int *)type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
    v249 = (*(uint64_t (**)(unint64_t, uint64_t, int *))(*((void *)v143 - 1) + 48LL))(v139, 1LL, v143);
    v34 = (char *)v308;
    if (v249 == 1)
    {
      sub_100015794(v139, &qword_1009AE600);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(v312 + 56))( v267,  1LL,  1LL,  v142);
      v250 = 0LL;
LABEL_81:
      v215 = v296;
      [v141 setOwnerBeaconIdentifier:v250];
      swift_bridgeObjectRelease();
      swift_release();

      ((void (*)(char *, uint64_t))v34)(v322, v136);
      sub_100018C68(v273, type metadata accessor for SharedBeaconRecord);
      sub_100015794(v311, &qword_1009A2438);
      ((void (*)(char *, uint64_t))v34)(v305, v136);
      goto LABEL_82;
    }

  __break(1u);
  return result;
}

    v36 = sub_100004AEC(v23);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56LL))(v13, 1LL, 1LL, v36);
    unint64_t v25 = 0LL;
LABEL_30:
    sub_100015750((uint64_t)v13, (uint64_t)v16, (uint64_t *)&unk_1009A58D0);
    v37 = sub_100004AEC(v23);
    v38 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 48LL))(v16, 1LL, v37);
    v57 = v38 == 1;
    if (v38 == 1) {
      return v57;
    }
    v59 = v25;
    v39 = v23;
    v40 = v13;
    v41 = (uint64_t)v16 + *(int *)(v37 + 48);
    v42 = *v16;
    v43 = v16[1];
    sub_10002218C(v41, (uint64_t)v9, type metadata accessor for OwnedBeaconGroup.PairingState);
    v44 = sub_10030CFC0(v42, v43);
    v45 = (uint64_t)v9;
    v47 = v46;
    sub_100016F9C(v42, v43);
    if ((v47 & 1) == 0)
    {
      sub_100018C68(v45, type metadata accessor for OwnedBeaconGroup.PairingState);
      return 0;
    }

    v48 = v55;
    sub_10001DC4C( *(void *)(a2 + 56) + *(void *)(v5 + 72) * v44,  v55,  type metadata accessor for OwnedBeaconGroup.PairingState);
    v49 = sub_1001D5394(v48, v45);
    sub_100018C68(v48, type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t result = sub_100018C68(v45, type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v9 = (char *)v45;
    unint64_t v13 = v40;
    v23 = v39;
    uint64_t v16 = v58;
    uint64_t v22 = v59;
    if ((v49 & 1) == 0) {
      return v57;
    }
  }

  v34 = *(void *)(v52 + 8 * v35);
  if (v34)
  {
LABEL_15:
    v33 = v35;
LABEL_12:
    unint64_t v25 = (v34 - 1) & v34;
    unint64_t v26 = __clz(__rbit64(v34)) + (v33 << 6);
    v56 = v33;
    goto LABEL_8;
  }

  while (1)
  {
    v33 = v35 + 1;
    if (__OFADD__(v35, 1LL)) {
      break;
    }
    if (v33 >= v53)
    {
      v56 = v51;
      goto LABEL_29;
    }

    v34 = *(void *)(v52 + 8 * v33);
    ++v35;
    if (v34) {
      goto LABEL_12;
    }
  }

    v34 = sub_100004AEC(&qword_1009A59A8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56LL))(v15, 1LL, 1LL, v34);
    unint64_t v26 = 0LL;
LABEL_30:
    sub_100015750((uint64_t)v15, (uint64_t)v18, &qword_1009A59A0);
    v35 = sub_100004AEC(&qword_1009A59A8);
    v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48LL))(v18, 1LL, v35);
    v63 = v36 == 1;
    if (v36 == 1) {
      return v63;
    }
    v64 = v26;
    v37 = &v18[*(int *)(v35 + 48)];
    v39 = v65;
    v38 = v66;
    v40 = v5;
    v41 = (uint64_t)v61;
    v42 = v18;
    (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v61, v18, v66);
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v9, v37, v4);
    v43 = v59;
    v44 = v9;
    v45 = sub_10030D124(v41);
    v47 = v46;
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v41, v38);
    if ((v47 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v40 + 8))(v44, v4);
      return 0;
    }

    v48 = *(void *)(v43 + 56) + *(void *)(v40 + 72) * v45;
    v49 = v60;
    (*(void (**)(char *, unint64_t, uint64_t))(v40 + 16))(v60, v48, v4);
    v50 = sub_100007864( &qword_10099DA90,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    v51 = dispatch thunk of static Equatable.== infix(_:_:)(v49, v44, v4, v50);
    v52 = *(void (**)(char *, uint64_t))(v40 + 8);
    v52(v49, v4);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v52)(v44, v4);
    uint64_t v9 = v44;
    uint64_t v5 = v40;
    uint64_t v15 = v58;
    unint64_t v18 = v42;
    v24 = v64;
    if ((v51 & 1) == 0) {
      return v63;
    }
  }

  v32 = *(void *)(v55 + 8 * v33);
  if (v32)
  {
LABEL_15:
    v31 = v33;
LABEL_12:
    unint64_t v26 = (v32 - 1) & v32;
    v27 = __clz(__rbit64(v32)) + (v31 << 6);
    v62 = v31;
    goto LABEL_8;
  }

  while (1)
  {
    v31 = v33 + 1;
    if (__OFADD__(v33, 1LL)) {
      break;
    }
    if (v31 >= v56)
    {
      v62 = v54;
      goto LABEL_29;
    }

    v32 = *(void *)(v55 + 8 * v31);
    ++v33;
    if (v32) {
      goto LABEL_12;
    }
  }

  __break(1u);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

      __break(1u);
      goto LABEL_30;
    }

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

      swift_release();
LABEL_30:
      swift_release();
      return sub_100018C68((uint64_t)v19, type metadata accessor for SecureLocationsUnsubscribeEndpoint);
    }

    v55 = [(id)objc_opt_self(AKDevice) currentDevice];
    if (!v55
      || (v56 = v55,
          v57 = [v55 uniqueDeviceIdentifier],
          v56,
          !v57))
    {
      v73 = swift_bridgeObjectRelease();
      v74 = (os_log_s *)Logger.logObject.getter(v73);
      v75 = static os_log_type_t.error.getter(v74);
      if (os_log_type_enabled(v74, v75))
      {
        v76 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)v76 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v74,  v75,  "Unable to get device identifier for server Unsubscribe",  v76,  2u);
        swift_slowDealloc(v76, -1LL, -1LL);
      }

      static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
      v77 = objc_allocWithZone(&OBJC_CLASS___NSError);
      v78 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v79 = [v77 initWithDomain:v78 code:4 userInfo:0];

      v80 = v79;
      v163(v79);
      swift_release();

      goto LABEL_30;
    }

    v167 = v40;
    v160 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
    v59 = v58;

    v60 = v168;
    v61 = sub_100004AEC(&qword_1009A34B0);
    OS_dispatch_queue.sync<A>(execute:)(sub_100338BF0, v60, v61);
    v62 = *((void *)&v177 + 1);
    if (!*((void *)&v177 + 1))
    {
      swift_bridgeObjectRelease();
      v87 = swift_bridgeObjectRelease();
      v82 = (os_log_s *)Logger.logObject.getter(v87);
      v83 = static os_log_type_t.error.getter(v82);
      if (os_log_type_enabled(v82, v83))
      {
        v84 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)v84 = 0;
        v85 = "No APS token. Not proceeding with SubscribeAndFetch request";
LABEL_28:
        _os_log_impl((void *)&_mh_execute_header, v82, v83, v85, v84, 2u);
        swift_slowDealloc(v84, -1LL, -1LL);
      }

      goto LABEL_29;
    }

    v63 = v59;
    v64 = v177;
    v65 = v172;
    v66 = [v172 clientApp];
    v157 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
    v68 = v67;

    v158 = v62;
    swift_bridgeObjectRetain(v62);
    v159 = v63;
    swift_bridgeObjectRetain(v63);
    v69 = objc_msgSend(v65, "subscriptionMode", swift_bridgeObjectRetain(v68).n128_f64[0]);
    v70 = &off_10099B000;
    v166 = v35;
    v165 = v39;
    if (v69 == (id)1)
    {
      if (qword_10099B850 != -1) {
        v69 = (id)swift_once(&qword_10099B850, sub_1006BAC84);
      }
      v71 = qword_100A2B210;
      __chkstk_darwin(v69);
      *(&v152 - 4) = (uint64_t)v169;
      *(&v152 - 3) = v71;
      *((_BYTE *)&v152 - 16) = 1;
      swift_retain();
      v72 = sub_100004AEC(&qword_1009A5D10);
      OS_dispatch_queue.sync<A>(execute:)(sub_100339DB8, &v152 - 6, v72);
      swift_release();
      v161 = (void *)v177;
      swift_bridgeObjectRelease();
      v70 = &off_10099B000;
    }

    else
    {
      v161 = _swiftEmptyDictionarySingleton;
    }

    v88 = [v172 subscriptionMode];
    v89 = 0uLL;
    if (v88 == (id)2)
    {
      if (v70[266] != (_UNKNOWN *)-1LL) {
        swift_once(&qword_10099B850, sub_1006BAC84);
      }
      v90 = qword_100A2B210;
      swift_retain();
      v91 = sub_100004AEC(&qword_1009A5D28);
      OS_dispatch_queue.sync<A>(execute:)(sub_100339DA0, v90, v91);
      swift_release();
      v92 = (uint64_t)v170;
      v93 = v158;
      if ((void)v179)
      {
        v155 = v177;
        v154 = v178;
        v94 = (char)v180;
        v156 = v179;
        swift_bridgeObjectRelease();
        v95 = v154;
        v96 = v156;
        v89 = v155;
      }

      else
      {
        v94 = 0;
        v95 = 0uLL;
        v96 = 0uLL;
        v89 = 0uLL;
      }
    }

    else
    {
      v94 = 0;
      v95 = 0uLL;
      v96 = 0uLL;
      v92 = (uint64_t)v170;
      v93 = v158;
    }

    *(void *)&v177 = v64;
    *((void *)&v177 + 1) = v93;
    *(void *)&v178 = v160;
    *((void *)&v178 + 1) = v159;
    *(void *)&v179 = v157;
    *((void *)&v179 + 1) = v68;
    v97 = v161;
    v180 = v161;
    v181 = v89;
    v182 = v95;
    v183 = v96;
    v184 = v94;
    v185 = _swiftEmptyArrayStorage;
    *(void *)&v155 = v96;
    swift_bridgeObjectRetain(v96);
    swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v93);
    swift_bridgeObjectRetain(v97);
    swift_bridgeObjectRelease();
    v98 = sub_100572E30((uint64_t)v41, (uint64_t *)&v177);
    if (!v98)
    {
      v120 = swift_bridgeObjectRelease();
      v121 = (os_log_s *)Logger.logObject.getter(v120);
      v122 = static os_log_type_t.error.getter(v121);
      if (os_log_type_enabled(v121, v122))
      {
        v123 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)v123 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v121,  v122,  "Failed to create request for server SubscribeAndFetch",  v123,  2u);
        swift_slowDealloc(v123, -1LL, -1LL);
      }

      static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
      v124 = objc_allocWithZone(&OBJC_CLASS___NSError);
      v125 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v126 = [v124 initWithDomain:v125 code:4 userInfo:0];

      v127 = v126;
      v163(v126);
      swift_release();

      swift_release();
      sub_100018C68(v92, type metadata accessor for SecureLocationsUnsubscribeEndpoint);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }

    v101 = (uint64_t)v98;
    v102 = v99;
    *(void *)&v156 = v100;
    *(void *)&v154 = v68;
    v103 = (os_log_s *)Logger.logObject.getter(v98);
    v104 = static os_log_type_t.default.getter(v103);
    v105 = os_log_type_enabled(v103, v104);
    v160 = v102;
    if (v105)
    {
      v106 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v106 = 0;
      _os_log_impl((void *)&_mh_execute_header, v103, v104, "Sending Unsubscribe server request", v106, 2u);
      v107 = v106;
      v102 = v160;
      swift_slowDealloc(v107, -1LL, -1LL);
    }

    v108 = v156;
    sub_100339CB4(v101, v102, v156);
    swift_bridgeObjectRetain(v101);
    v109 = sub_10001736C(v102, v108);
    v110 = (os_log_s *)Logger.logObject.getter(v109);
    v111 = static os_log_type_t.debug.getter(v110);
    v112 = os_log_type_enabled(v110, v111);
    v157 = v101;
    if (v112)
    {
      v113 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v153 = swift_slowAlloc(32LL, -1LL);
      aBlock = v153;
      *(_DWORD *)v113 = 136315138;
      swift_bridgeObjectRetain(v101);
      v115 = Dictionary.description.getter( v114,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
      v117 = v116;
      swift_bridgeObjectRelease();
      v118 = v115;
      v101 = v157;
      v173 = sub_1003F11D4(v118, v117, &aBlock);
      v108 = v156;
      v102 = v160;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v173, &aBlock, v113 + 4, v113 + 12);
      swift_bridgeObjectRelease();
      sub_100117A58(v101, v102, v108);
      sub_100117A58(v101, v102, v108);
      _os_log_impl((void *)&_mh_execute_header, v110, v111, "Unsubscribe request headers %s", v113, 0xCu);
      v119 = v153;
      swift_arrayDestroy(v153, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v119, -1LL, -1LL);
      swift_slowDealloc(v113, -1LL, -1LL);
    }

    else
    {
      sub_100117A58(v101, v102, v108);
      sub_100117A58(v101, v102, v108);
    }

    swift_bridgeObjectRetain(v101);
    sub_10001736C(v102, v108);
    swift_bridgeObjectRetain(v101);
    v128 = sub_10001736C(v102, v108);
    v129 = (os_log_s *)Logger.logObject.getter(v128);
    v130 = static os_log_type_t.debug.getter(v129);
    if (os_log_type_enabled(v129, v130))
    {
      v131 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v132 = swift_slowAlloc(32LL, -1LL);
      aBlock = v132;
      *(_DWORD *)v131 = 136315138;
      v133 = v162;
      static String.Encoding.utf8.getter(v132);
      v134 = String.init(data:encoding:)(v160, v156, v133);
      if (v135)
      {
        v136 = v135;
      }

      else
      {
        v134 = 7104878LL;
        v136 = 0xE300000000000000LL;
      }

      v173 = sub_1003F11D4(v134, v136, &aBlock);
      v102 = v160;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v173, &aBlock, v131 + 4, v131 + 12);
      v108 = v156;
      swift_bridgeObjectRelease();
      sub_100117A58(v157, v102, v108);
      sub_100117A58(v157, v102, v108);
      _os_log_impl((void *)&_mh_execute_header, v129, v130, "Unsubscribe request body %s", v131, 0xCu);
      swift_arrayDestroy(v132, 1LL, (char *)&type metadata for Any + 8);
      v137 = v132;
      v101 = v157;
      swift_slowDealloc(v137, -1LL, -1LL);
      swift_slowDealloc(v131, -1LL, -1LL);
    }

    else
    {
      sub_100117A58(v101, v102, v108);
      sub_100117A58(v101, v102, v108);
    }

    v138 = v169;
    v139 = v167;
    if (!v167) {
      break;
    }
    v167 = *(void *)(v168 + 48);
    swift_bridgeObjectRetain(v169);
    unint64_t v11 = (uint64_t)(v138 + 5);
    while (1)
    {
      v140 = *(void *)(v11 - 8);
      v141 = *(void *)v11;
      v142 = v167;
      v171 = *(dispatch_queue_t *)(v167 + 16);
      uint64_t v14 = (char *)swift_allocObject(&unk_100951168, 49LL, 7LL);
      *((void *)v14 + 2) = v142;
      *((void *)v14 + 3) = v140;
      uint64_t v10 = v172;
      *((void *)v14 + 4) = v141;
      *((void *)v14 + 5) = v10;
      v14[48] = 3;
      unint64_t v17 = (char *)swift_allocObject(&unk_100951190, 32LL, 7LL);
      *((void *)v17 + 2) = sub_100338CE4;
      *((void *)v17 + 3) = v14;
      v175[3] = sub_100154688;
      v176 = v17;
      aBlock = (uint64_t)_NSConcreteStackBlock;
      v175[0] = 1107296256LL;
      v175[1] = sub_100025BD4;
      v175[2] = &unk_1009511A8;
      a1 = _Block_copy(&aBlock);
      uint64_t v19 = v176;
      swift_bridgeObjectRetain_n(v141, 2LL);
      v143 = v10;
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v171, a1);
      _Block_release(a1);
      LOBYTE(v142) = swift_isEscapingClosureAtFileLocation(v17, "", 120LL, 101LL, 35LL, 1LL);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      if ((v142 & 1) != 0) {
        break;
      }
      v11 += 16LL;
      if (!--v139)
      {
        swift_bridgeObjectRelease();
        v138 = v169;
        v101 = v157;
        v102 = v160;
        v108 = v156;
        goto LABEL_61;
      }
    }

    __break(1u);
LABEL_64:
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }

      _Block_release(v60);
      return;
    case 0xDuLL:
      sub_100012ED8( &v157[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation],  *(void *)&v157[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
      v119 = [a1 identifier];
      v46 = (uint64_t)v156;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v119);

      v120 = [a1 beaconIdentifier];
      v48 = (uint64_t)v155;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v120);

      sub_1001A1FD0(v46, v48, (uint64_t)sub_10009C9E4, v160);
      goto LABEL_26;
    case 0xEuLL:
      sub_100012ED8( &v157[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation],  *(void *)&v157[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
      v121 = [a1 identifier];
      v46 = (uint64_t)v156;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v121);

      v122 = [a1 beaconIdentifier];
      v48 = (uint64_t)v155;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v122);

      sub_10019B4C0(v46, v48, (uint64_t)sub_10009C9E4, v160);
      goto LABEL_26;
    case 0xFuLL:
      sub_100012ED8( &v157[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation],  *(void *)&v157[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
      v123 = [a1 identifier];
      v46 = (uint64_t)v156;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v123);

      v124 = [a1 beaconIdentifier];
      v48 = (uint64_t)v155;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v124);

      sub_10019CE40(v46, v48, (uint64_t)sub_10009C9E4, v160);
LABEL_26:
      v125 = v159;
      v126 = *(void (**)(uint64_t, uint64_t))(v158 + 8);
      v126(v48, v159);
      v126(v46, v125);
LABEL_27:
      swift_release();
LABEL_28:
      v127 = v161;
      _Block_release(v161);
      _Block_release(v127);
      v60 = v127;
      goto LABEL_29;
    default:
      uint64_t v29 = sub_100352588();
      uint64_t v30 = swift_allocError(&type metadata for BeaconManagerTrampoline.BeaconManagerTrampolineError, v29, 0LL, 0LL);
      v31 = v30;
      *v32 = 1;
      goto LABEL_5;
  }

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

    swift_bridgeObjectRelease();
    v60 = (uint64_t)v122;
    sub_1000F0A44((uint64_t)v54, (uint64_t)v122);
    swift_release();
    v61 = v126;
    sub_10001581C(v60, v126, (uint64_t *)&unk_1009A5990);
    v62 = v132;
    if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v134 + 6))(v61, 1LL, v132) == 1)
    {
      sub_100015794(v61, (uint64_t *)&unk_1009A5990);
      if (qword_10099B4C8 != -1) {
        swift_once(&qword_10099B4C8, sub_10047B404);
      }
      v63 = type metadata accessor for Logger(0LL);
      sub_10000A720(v63, (uint64_t)qword_100A2AAA0);
      v64 = sub_100013044((uint64_t)v144, (uint64_t)&v137);
      v65 = (os_log_s *)Logger.logObject.getter(v64);
      v66 = static os_log_type_t.default.getter(v65);
      if (os_log_type_enabled(v65, v66))
      {
        v67 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        v68 = swift_slowAlloc(32LL, -1LL);
        v136 = v68;
        *(_DWORD *)v67 = 136315138;
        sub_100012ED8(&v137, *((uint64_t *)&v138 + 1));
        v69 = v128;
        (*(void (**)(unint64_t))(*(void *)(v118[1] + 8LL) + 32LL))(v119);
        v70 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        v71 = dispatch thunk of CustomStringConvertible.description.getter(v53, v70);
        v73 = v72;
        ((void (*)(char *, uint64_t))v130)(v69, v53);
        v135 = sub_1003F11D4(v71, v73, &v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, &v136, v67 + 4, v67 + 12);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v137);
        _os_log_impl( (void *)&_mh_execute_header,  v65,  v66,  "Can't monitor beacon: %s due to: airpods but missing last BT observation.",  v67,  0xCu);
        swift_arrayDestroy(v68, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v68, -1LL, -1LL);
        swift_slowDealloc(v67, -1LL, -1LL);

        goto LABEL_52;
      }

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v137);
      v103 = v60;
LABEL_53:
      sub_100015794(v103, (uint64_t *)&unk_1009A5990);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v140);
LABEL_54:
      v39 = 1LL;
      goto LABEL_55;
    }

    v86 = (uint64_t)v121;
    sub_10002218C(v61, (uint64_t)v121, type metadata accessor for BeaconObservation);
    v87 = v124;
    static Date.trustedNow.getter(v124);
    v88 = Date.timeIntervalSince(_:)(v86 + *(int *)(v62 + 20));
    (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v87, v120);
    OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
    sub_1006A14F4(v137);
    v90 = v89;
    swift_bridgeObjectRelease();
    if (v90 < v88)
    {
      if (qword_10099B4C8 != -1) {
        swift_once(&qword_10099B4C8, sub_10047B404);
      }
      v91 = type metadata accessor for Logger(0LL);
      sub_10000A720(v91, (uint64_t)qword_100A2AAA0);
      v92 = sub_100013044((uint64_t)v144, (uint64_t)&v137);
      v93 = (os_log_s *)Logger.logObject.getter(v92);
      v94 = static os_log_type_t.default.getter(v93);
      if (os_log_type_enabled(v93, v94))
      {
        v95 = swift_slowAlloc(32LL, -1LL);
        v96 = swift_slowAlloc(32LL, -1LL);
        v136 = v96;
        *(_DWORD *)v95 = 136315650;
        sub_100012ED8(&v137, *((uint64_t *)&v138 + 1));
        v97 = v128;
        (*(void (**)(unint64_t))(*(void *)(v118[1] + 8LL) + 32LL))(v119);
        v98 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        v99 = v123;
        v100 = dispatch thunk of CustomStringConvertible.description.getter(v123, v98);
        v102 = v101;
        ((void (*)(char *, uint64_t))v130)(v97, v99);
        v135 = sub_1003F11D4(v100, v102, &v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, &v136, v95 + 4, v95 + 12);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v137);
        *(_WORD *)(v95 + 12) = 2048;
        v135 = *(void *)&v88;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, &v136, v95 + 14, v95 + 22);
        *(_WORD *)(v95 + 22) = 2048;
        v135 = *(void *)&v90;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, &v136, v95 + 24, v95 + 32);
        _os_log_impl( (void *)&_mh_execute_header,  v93,  v94,  "Can't monitor beacon: %s due to: airpods but expired (%f > %f sec ago)",  (uint8_t *)v95,  0x20u);
        swift_arrayDestroy(v96, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v96, -1LL, -1LL);
        swift_slowDealloc(v95, -1LL, -1LL);
      }

      else
      {

        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v137);
      }

      sub_100018C68(v86, type metadata accessor for BeaconObservation);
LABEL_52:
      v103 = (uint64_t)v122;
      goto LABEL_53;
    }

    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    v104 = type metadata accessor for Logger(0LL);
    sub_10000A720(v104, (uint64_t)qword_100A2AAA0);
    v105 = sub_100013044((uint64_t)v144, (uint64_t)&v137);
    v106 = (os_log_s *)Logger.logObject.getter(v105);
    v107 = static os_log_type_t.default.getter(v106);
    if (os_log_type_enabled(v106, v107))
    {
      v108 = swift_slowAlloc(32LL, -1LL);
      v109 = swift_slowAlloc(32LL, -1LL);
      v136 = v109;
      *(_DWORD *)v108 = 136315650;
      sub_100012ED8(&v137, *((uint64_t *)&v138 + 1));
      v110 = v128;
      (*(void (**)(unint64_t))(*(void *)(v118[1] + 8LL) + 32LL))(v119);
      v111 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      v112 = v123;
      v113 = dispatch thunk of CustomStringConvertible.description.getter(v123, v111);
      v115 = v114;
      ((void (*)(char *, uint64_t))v130)(v110, v112);
      v135 = sub_1003F11D4(v113, v115, &v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, &v136, v108 + 4, v108 + 12);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v137);
      *(_WORD *)(v108 + 12) = 2048;
      v135 = *(void *)&v88;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, &v136, v108 + 14, v108 + 22);
      *(_WORD *)(v108 + 22) = 2048;
      v135 = *(void *)&v90;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, &v136, v108 + 24, v108 + 32);
      _os_log_impl( (void *)&_mh_execute_header,  v106,  v107,  "Will monitor beacon: %s due to: airpods, not expired (%f < %f sec ago)",  (uint8_t *)v108,  0x20u);
      swift_arrayDestroy(v109, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v109, -1LL, -1LL);
      swift_slowDealloc(v108, -1LL, -1LL);
    }

    else
    {

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v137);
    }

    sub_100018C68(v86, type metadata accessor for BeaconObservation);
    sub_100015794((uint64_t)v122, (uint64_t *)&unk_1009A5990);
    v38 = v140;
  }

  else
  {
    v38 = v143;
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
  v39 = 0LL;
LABEL_55:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v144);
  return v39;
}

  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

    v153 = (uint64_t)v148;
    v154 = 1LL;
    v143 = v145;
LABEL_31:
    v155 = (unsigned int (**)(uint64_t, uint64_t, int *))v334;
    v156 = v331;
    (*((void (**)(uint64_t, uint64_t, uint64_t, int *))v334 + 7))(v331, v154, 1LL, v149);
    sub_100015750(v156, v153, &qword_1009A2440);
    if (v155[6](v153, 1LL, v149) == 1) {
      break;
    }
    v157 = v38;
    v158 = v328;
    sub_10002218C(v153, v328, type metadata accessor for LocationProvider);
    v159 = sub_10057EEA4( *(unsigned __int8 *)(v158 + v149[6]),  *(void *)(v158 + v149[6] + 8),  *(void **)(v158 + v149[6] + 16));
    v162 = (void *)sub_1006054A8(v159, v160, v161);
    swift_bridgeObjectRelease();
    v163 = objc_allocWithZone(&OBJC_CLASS___SPLocationProvider);
    v164 = Date._bridgeToObjectiveC()().super.isa;
    v165 = [v163 initWithTimestamp:v164 provider:v162];

    v166 = v158;
    v38 = v157;
    v148 = v329;
    sub_100018C68(v166, type metadata accessor for LocationProvider);
    v167 = v165;
    v99 = v330;
    sub_1000BDD04((Swift::Int *)&v338, v167);

    v144 = (uint64_t)v333;
  }

  swift_bridgeObjectRelease();
  v168 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v169 = v325;
  [v325 setLocationProviders:v168];

  v170 = v322;
  v171 = *(void *)(v322 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  v172 = type metadata accessor for BeaconKeyManager(0LL);
  v173 = v306;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10054F370, v170, v171, (char *)&type metadata for () + 8, v172);
  v334 = v173;
  v174 = (int *)v340;
  sub_100013044((uint64_t)v342, (uint64_t)&v340);
  v175 = swift_allocObject(&unk_100960A80, 64LL, 7LL);
  *(void *)(v175 + 16) = v174;
  sub_100012EC0(&v340, v175 + 24);
  v335 = v174;
  swift_retain();
  v176 = (uint64_t)v316;
  unsafeFromAsyncTask<A>(_:)(&unk_1009A2458, v175, v293);
  swift_release(v175);
  v177 = &qword_1009A2438;
  v178 = v294;
  sub_10001581C(v176, (uint64_t)v294, &qword_1009A2438);
  v179 = sub_100004AEC((uint64_t *)&unk_1009AE460);
  v180 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v179 - 8) + 48LL);
  v181 = 1LL;
  if (v180(v178, 1LL, v179) != 1)
  {
    v181 = *v178;
    v177 = (uint64_t *)&unk_1009AE460;
  }

  v182 = v320;
  v183 = (uint64_t)v291;
  v184 = (uint64_t)v290;
  v99 = v330;
  sub_100015794((uint64_t)v178, v177);
  [v169 setKeySyncLastObservedIndex:v181];
  v185 = &qword_1009A2438;
  sub_10001581C((uint64_t)v316, v184, &qword_1009A2438);
  v186 = 1LL;
  v187 = v180((uint64_t *)v184, 1LL, v179);
  v188 = v318;
  v189 = (uint64_t)v289;
  if (v187 != 1)
  {
    v284(v289, (char *)(v184 + *(int *)(v179 + 36)), v99);
    v186 = 0LL;
    v185 = (uint64_t *)&unk_1009AE460;
  }

  sub_100015794(v184, v185);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v188 + 56))(v189, v186, 1LL, v99);
  sub_100013044((uint64_t)v342, (uint64_t)&v340);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v307)(v189, 1LL, v99) == 1)
  {
    sub_100012ED8(&v340, v341);
    v190 = v288;
    v277(v182, v317);
    sub_100015794(v189, (uint64_t *)&unk_10099D720);
  }

  else
  {
    v190 = v288;
    (*(void (**)(char *, uint64_t, uint64_t))(v188 + 32))(v288, v189, v99);
  }

  v191 = v324;
  v192 = (void (*)(char *, uint64_t))v315;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v340);
  v193 = Date._bridgeToObjectiveC()().super.isa;
  v192(v190, v99);
  [v169 setKeySyncLastIndexObservationDate:v193];

  [v169 setKeySyncWildIndexFallback:1];
  v194 = v321;
  v323(v182, (uint64_t)v319);
  sub_100576BD4(v183);
  v326(v194, v191);
  v195 = v296;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v295 + 48))(v183, 1LL, v296) == 1)
  {
    sub_100015794(v183, &qword_1009A2430);
    v196 = [v169 setKeyAlignmentLastObservedIndex:0];
    v197 = v310;
    static Date.distantPast.getter(v196);
    v198 = Date._bridgeToObjectiveC()().super.isa;
    v192(v197, v99);
    [v169 setKeyAlignmentLastIndexObservationDate:v198];
  }

  else
  {
    v199 = v278;
    sub_10002218C(v183, v278, type metadata accessor for KeyAlignmentRecord);
    [v169 setKeyAlignmentLastObservedIndex:*(void *)(v199 + *(int *)(v195 + 28))];
    v200 = Date._bridgeToObjectiveC()().super.isa;
    [v169 setKeyAlignmentLastIndexObservationDate:v200];

    sub_100018C68(v199, type metadata accessor for KeyAlignmentRecord);
  }

  v201 = [v169 type];
  v202 = SPBeaconTypeAccessory;
  v203 = static String._unconditionallyBridgeFromObjectiveC(_:)(v201);
  v205 = v204;
  v207 = static String._unconditionallyBridgeFromObjectiveC(_:)(v202);
  if (v203 == v207 && v205 == v206)
  {
LABEL_45:

    swift_bridgeObjectRelease_n(v205, 2LL);
    v148 = (char *)v324;
    v38 = v325;
    goto LABEL_47;
  }

  v208 = _stringCompareWithSmolCheck(_:_:expecting:)(v203, v205, v207, v206, 0LL);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v148 = (char *)v324;
  v38 = v325;
  if ((v208 & 1) != 0) {
    goto LABEL_47;
  }
  v201 = [v325 type];
  v258 = SPBeaconTypeHele;
  v259 = static String._unconditionallyBridgeFromObjectiveC(_:)(v201);
  v205 = v260;
  v262 = static String._unconditionallyBridgeFromObjectiveC(_:)(v258);
  if (v259 == v262 && v205 == v261) {
    goto LABEL_45;
  }
  v263 = _stringCompareWithSmolCheck(_:_:expecting:)(v259, v205, v262, v261, 0LL);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v148 = (char *)v324;
  v38 = v325;
  if ((v263 & 1) != 0)
  {
LABEL_47:
    v209 = [v38 identifier];
    v210 = (uint64_t)v321;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v209);

    v211 = v287;
    sub_10050B884(v210, v287);
    v326((char *)v210, (uint64_t)v148);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v285 + 48))(v211, 1LL, v286) == 1)
    {
      sub_100015794(v211, &qword_1009AA870);
    }

    else
    {
      v212 = v211;
      v213 = v276;
      sub_10002218C(v212, v276, type metadata accessor for BeaconProductInfoRecord);
      v214 = sub_10039E040();
      [v38 setAccessoryProductInfo:v214];

      sub_100018C68(v213, type metadata accessor for BeaconProductInfoRecord);
    }
  }

  v215 = v321;
  v216 = v320;
  v217 = ((uint64_t (*)(uint64_t, void))v323)(v320, v319);
  __chkstk_darwin(v217);
  v218 = v299;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_10014F098);
  v219 = (uint64_t)v218;
  v326(v215, (uint64_t)v148);
  v220 = v218;
  v221 = v300;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v297 + 48))(v220, 1LL, v300) == 1)
  {
    sub_100015794(v219, &qword_1009AE490);
    v222 = v309;
    v223 = (uint64_t)v292;
    v224 = (int *)v303;
    v225 = (uint64_t)v302;
    v147 = (unint64_t *)v335;
  }

  else
  {
    v226 = v308;
    sub_10002218C(v219, v308, type metadata accessor for BeaconNamingRecord);
    swift_bridgeObjectRetain(*(void *)(v226 + *(int *)(v221 + 32) + 8));
    v227 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v38 setName:v227];

    v228 = *(void *)(v226 + *(int *)(v221 + 28));
    v229 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v317 + 200))(v228, v216);
    v230 = v229;
    v231 = v221;
    v223 = (uint64_t)v292;
    v224 = (int *)v303;
    if (v228 == SPBeaconRoleIdOther && (v232 = v308 + *(int *)(v231 + 36), *(void *)(v232 + 8)) && v229)
    {
      v233 = objc_msgSend(v229, "role", swift_bridgeObjectRetain(*(void *)(v232 + 8)).n128_f64[0]);
      static String._unconditionallyBridgeFromObjectiveC(_:)(v233);

      v234 = objc_allocWithZone(&OBJC_CLASS___SPBeaconRole);
      v235 = String._bridgeToObjectiveC()();
      v38 = v325;
      swift_bridgeObjectRelease();
      v236 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v237 = v234;
      v99 = v330;
      v238 = [v237 initWithRoleId:v228 role:v235 roleEmoji:v236];

      v148 = (char *)v324;
      v224 = (int *)v303;
      [v38 setRole:v238];

      v230 = v238;
    }

    else
    {
      [v38 setRole:v229];
    }

    v222 = v309;
    v225 = (uint64_t)v302;
    v147 = (unint64_t *)v335;

    sub_100018C68(v308, type metadata accessor for BeaconNamingRecord);
  }

  sub_100013044((uint64_t)v342, (uint64_t)&v338);
  v239 = sub_100004AEC(&qword_1009B0530);
  v240 = swift_dynamicCast(v225, &v338, v239, v224, 6LL);
  v241 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v301 + 56);
  if (!v240)
  {
    v241(v225, 1LL, 1LL, v224);
    sub_100015794(v225, (uint64_t *)&unk_1009A9C30);
    sub_100013044((uint64_t)v342, (uint64_t)&v338);
    v245 = (uint64_t)v281;
    v246 = (int *)v282;
    v247 = swift_dynamicCast(v281, &v338, v239, v282, 6LL);
    v248 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v279 + 56);
    if ((v247 & 1) == 0)
    {
      v248(v245, 1LL, 1LL, v246);
      swift_bridgeObjectRelease();
      swift_release(v147);
      v266 = (void (*)(char *, uint64_t))v315;
      v315((uint64_t)v332, v99);
      sub_100015794((uint64_t)v316, &qword_1009A2438);
      v266(v313, v99);
      sub_100015794((uint64_t)v314, &qword_1009A1800);
      v326(v222, (uint64_t)v148);
      sub_100015794(v245, (uint64_t *)&unk_1009AE470);
      goto LABEL_82;
    }

    v248(v245, 0LL, 1LL, v246);
    v249 = v283;
    sub_10002218C(v245, v283, type metadata accessor for SharedBeaconRecord);
    v250 = String._bridgeToObjectiveC()();
    [v38 setStableIdentifier:v250];

    v251 = v249 + v246[7];
    v252 = *(void *)(v251 + 8);
    v253 = *(void **)(v251 + 16);
    v254 = *(_BYTE *)v251;
    swift_bridgeObjectRetain(v253);
    v255 = (void *)sub_1006054A8(v254, v252, v253);
    swift_bridgeObjectRelease();
    [v38 setOwner:v255];

    [v38 setAccepted:*(unsigned __int8 *)(v249 + v246[13])];
    swift_bridgeObjectRetain(*(void *)(v249 + v246[8] + 8));
    v256 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v38 setCorrelationIdentifier:v256];

    [v38 setInternalShareType:qword_1008069E8[*(char *)(v249 + v246[16])]];
    v146 = v274;
    sub_10001581C(v249 + v246[20], (uint64_t)v274, &qword_1009AE600);
    v149 = (int *)type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
    if ((*(unsigned int (**)(void *, uint64_t, int *))(*((void *)v149 - 1) + 48LL))(v146, 1LL, v149) == 1)
    {
      sub_100015794((uint64_t)v146, &qword_1009AE600);
      (*(void (**)(uint64_t, uint64_t, uint64_t, char *))(v311 + 56))(v275, 1LL, 1LL, v148);
      v257 = 0LL;
LABEL_80:
      v271 = v309;
      [v38 setOwnerBeaconIdentifier:v257];
      swift_bridgeObjectRelease();
      swift_release(v147);

      v272 = (void (*)(char *, uint64_t))v315;
      v315((uint64_t)v332, v99);
      sub_100018C68(v283, type metadata accessor for SharedBeaconRecord);
      sub_100015794((uint64_t)v316, &qword_1009A2438);
      v272(v313, v99);
      sub_100015794((uint64_t)v314, &qword_1009A1800);
      v269 = v271;
      goto LABEL_81;
    }

        uint64_t v22 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
      }

      goto LABEL_31;
    }

    while (1)
    {
      unint64_t v13 = v17 + 1;
      if (__OFADD__(v17, 1LL)) {
        break;
      }
      if (v13 >= v25) {
        goto LABEL_30;
      }
      uint64_t v16 = *(void *)(v24 + 8 * v13);
      ++v17;
      if (v16) {
        goto LABEL_21;
      }
    }
  }

  __break(1u);
}

  __break(1u);
}

      unint64_t v11 = (v18 - 1) & v18;
      v53 = v19;
      uint64_t v16 = __clz(__rbit64(v18)) + (v19 << 6);
    }

    uint64_t v21 = 16 * v16;
    uint64_t v22 = (uint64_t *)(*(void *)(v52 + 48) + v21);
    v24 = *v22;
    v23 = v22[1];
    unint64_t v25 = (uint64_t *)(*(void *)(v52 + 56) + v21);
    v27 = *v25;
    unint64_t v26 = v25[1];
    sub_10001736C(*v22, v23);
    sub_10001736C(v27, v26);
    sub_10001736C(v24, v23);
    sub_10001736C(v27, v26);
    isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v29 = [(id)objc_opt_self(CBUUID) UUIDWithData:isa];

    sub_10001736C(v27, v26);
    uint64_t v30 = swift_isUniquelyReferenced_nonNull_native(v13);
    *(void *)&v54[0] = v13;
    v32 = sub_10030DB40((uint64_t)v29);
    v33 = v13[2];
    v34 = (v31 & 1) == 0;
    v35 = v33 + v34;
    if (__OFADD__(v33, v34)) {
      break;
    }
    v36 = v31;
    if (v13[3] >= v35)
    {
      if ((v30 & 1) != 0)
      {
        unint64_t v13 = *(void **)&v54[0];
        if ((v31 & 1) != 0) {
          goto LABEL_8;
        }
      }

      else
      {
        sub_100067C28();
        unint64_t v13 = *(void **)&v54[0];
        if ((v36 & 1) != 0) {
          goto LABEL_8;
        }
      }
    }

    else
    {
      sub_100055978(v35, v30);
      v37 = sub_10030DB40((uint64_t)v29);
      if ((v36 & 1) != (v38 & 1)) {
        goto LABEL_50;
      }
      v32 = v37;
      unint64_t v13 = *(void **)&v54[0];
      if ((v36 & 1) != 0)
      {
LABEL_8:
        uint64_t v14 = v13[7] + 16 * v32;
        sub_100016F9C(*(void *)v14, *(void *)(v14 + 8));
        *(void *)uint64_t v14 = v27;
        *(void *)(v14 + 8) = v26;
        goto LABEL_9;
      }
    }

    v13[(v32 >> 6) + 8] |= 1LL << v32;
    *(void *)(v13[6] + 8 * v32) = v29;
    v39 = (uint64_t *)(v13[7] + 16 * v32);
    *v39 = v27;
    v39[1] = v26;
    v40 = v13[2];
    v41 = __OFADD__(v40, 1LL);
    v42 = v40 + 1;
    if (v41) {
      goto LABEL_47;
    }
    v13[2] = v42;
    v43 = v29;
LABEL_9:

    swift_bridgeObjectRelease();
    sub_100016F9C(v24, v23);
    sub_100016F9C(v27, v26);
    sub_100016F9C(v24, v23);
    sub_100016F9C(v27, v26);
    uint64_t v12 = v53;
  }

  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  v46 = sub_100022898(0LL, (unint64_t *)&qword_1009AFB10, &OBJC_CLASS___CBUUID_ptr);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v46);
  __break(1u);
  return result;
}

  __break(1u);
}

    swift_once(&qword_10099B840, sub_1006B4000);
    goto LABEL_17;
  }

  uint64_t v29 = v94;
  swift_retain();
  swift_bridgeObjectRetain(a1);
  uint64_t v30 = sub_1006B8100((uint64_t)v98, v29, a1);
  swift_release();
  swift_bridgeObjectRelease();
  v98 = v30;
  v31 = v30[2];
  if (!v31)
  {
    swift_bridgeObjectRelease();
    if (qword_10099B840 != -1) {
      swift_once(&qword_10099B840, sub_1006B4000);
    }
    v70 = type metadata accessor for Logger(0LL);
    v71 = sub_10000A720(v70, (uint64_t)qword_100A2B1F8);
    v66 = (os_log_s *)Logger.logObject.getter(v71);
    v67 = static os_log_type_t.error.getter(v66);
    if (!os_log_type_enabled(v66, v67)) {
      goto LABEL_24;
    }
    v68 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)v68 = 0;
    v69 = "Failed to match beacons with products from server response!";
    goto LABEL_23;
  }

  v76 = dispatch_group_create();
  dispatch_group_enter(v76);
  v83 = (void *)(v94 + 40);
  v79 = v12 + 7;
  v32 = swift_bridgeObjectRetain(v98);
  v33 = 0LL;
  v34 = (uint64_t *)v93;
  v82 = v16;
  v81 = v21;
  v80 = v31;
  v78 = v15;
  while (1)
  {
    if (v33 == v31)
    {
      v35 = 1LL;
      v36 = v31;
    }

    else
    {
      if (v33 >= v98[2])
      {
        __break(1u);
        goto LABEL_28;
      }

      v36 = v33 + 1;
      v37 = (uint64_t)&v77[*(int *)(v16 + 48)];
      sub_10001DC4C( (uint64_t)v98 + ((*(unsigned __int8 *)(v95 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80))
      + *(void *)(v95 + 72) * v33,
        v37,
        type metadata accessor for BeaconProductInfoRecord);
      v38 = (uint64_t)v21 + *(int *)(v16 + 48);
      os_log_s *v21 = v33;
      sub_10002218C(v37, v38, type metadata accessor for BeaconProductInfoRecord);
      v35 = 0LL;
    }

    v39 = v92;
    (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t, __n128))(v92 + 56))(v21, v35, 1LL, v16, v32);
    sub_100015750((uint64_t)v21, (uint64_t)v34, &qword_1009BBDA0);
    v96 = *v34;
    v97 = v36;
    sub_10002218C((uint64_t)v34 + *(int *)(v16 + 48), (uint64_t)v15, type metadata accessor for BeaconProductInfoRecord);
    v40 = v94;
    v41 = *(void *)(v94 + 24);
    v42 = v84;
    sub_10001DC4C((uint64_t)v15, v84, type metadata accessor for BeaconProductInfoRecord);
    v43 = *(unsigned __int8 *)(v95 + 80);
    v44 = (v43 + 16) & ~v43;
    v45 = v43 | 7;
    v46 = (v79 + v44) & 0xFFFFFFFFFFFFFFF8LL;
    v47 = swift_allocObject(&unk_1009732B0, v46 + 8, v43 | 7);
    sub_10002218C(v42, v47 + v44, type metadata accessor for BeaconProductInfoRecord);
    *(void *)(v47 + v46) = v40;
    sub_10001DC4C((uint64_t)v15, v42, type metadata accessor for BeaconProductInfoRecord);
    v48 = (v46 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    v49 = swift_allocObject(&unk_1009732D8, v48 + 16, v45);
    sub_10002218C(v42, v49 + v44, type metadata accessor for BeaconProductInfoRecord);
    *(void *)(v49 + v46) = v41;
    v50 = (void (**)(uint64_t))(v49 + v48);
    *v50 = sub_1006B875C;
    v50[1] = (void (*)(uint64_t))v47;
    aBlock[4] = sub_1006B87B0;
    aBlock[5] = v49;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    aBlock[3] = &unk_1009732F0;
    v51 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    v52 = swift_retain();
    v53 = v85;
    static DispatchQoS.unspecified.getter(v52);
    v99 = _swiftEmptyArrayStorage;
    v54 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v55 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    v56 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    v57 = v88;
    v58 = v90;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v99, v55, v56, v90, v54);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v53, v57, v51);
    _Block_release(v51);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v57, v58);
    v59 = v53;
    uint64_t v15 = v78;
    (*(void (**)(char *, uint64_t))(v86 + 8))(v59, v87);
    swift_release();
    swift_release();
    swift_beginAccess(v83, aBlock, 33LL, 0LL);
    v60 = v91;
    sub_1003CF124((uint64_t)v15, v91);
    sub_100015794(v60, &qword_10099D8A0);
    swift_endAccess(aBlock);
    if (v96 == v98[2] - 1LL) {
      dispatch_group_leave(v76);
    }
    sub_100018C68((uint64_t)v15, type metadata accessor for BeaconProductInfoRecord);
    uint64_t v16 = v82;
    uint64_t v21 = v81;
    v34 = (uint64_t *)v93;
    v31 = v80;
    v33 = v97;
  }

  swift_bridgeObjectRelease_n(v98, 2LL);
  v61 = v76;
  OS_dispatch_group.wait()();
  v62 = v83;
  swift_beginAccess(v83, aBlock, 1LL, 0LL);
  *v62 = &_swiftEmptySetSingleton;
  v63 = swift_bridgeObjectRelease();
  if (v75) {
    v75(v63);
  }
}

              if ((a1 & 0x400) != 0) {
                goto LABEL_39;
              }
              goto LABEL_30;
            }

      swift_retain();
      v33 = [a1 state];
      CurrentValueSubject.send(_:)(&v33);
      return swift_release();
  }

uint64_t sub_10000CB20(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 104LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 48LL);
  *(void *)(*(void *)v1 + 112LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10000CB80, v3, 0LL);
}

uint64_t sub_10000CB80()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 121);
  swift_release(*(void *)(v0 + 96));
  swift_beginAccess(v1 + 168, v0 + 16, 33LL, 0LL);
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + 168));
  uint64_t v4 = *(void *)(v1 + 168);
  *(void *)(v0 + 40) = v4;
  *(void *)(v1 + 168) = 0x8000000000000000LL;
  unint64_t v6 = sub_10030CFFC(v2);
  uint64_t v7 = *(void *)(v4 + 16);
  BOOL v8 = (v5 & 1) == 0;
  uint64_t v9 = v7 + v8;
  if (__OFADD__(v7, v8))
  {
    __break(1u);
    goto LABEL_31;
  }

  char v10 = v5;
  if (*(void *)(v4 + 24) >= v9)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      sub_10006177C();
    }
  }

  else
  {
    uint64_t v11 = *(unsigned __int8 *)(v0 + 121);
    sub_100049650(v9, isUniquelyReferenced_nonNull_native);
    uint64_t v12 = sub_10030CFFC(v11);
    if ((v10 & 1) != (v13 & 1)) {
      return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for PublishingPolicy);
    }
    unint64_t v6 = v12;
  }

  uint64_t v15 = *(void **)(v0 + 40);
  uint64_t v16 = *(void *)(v0 + 112);
  if ((v10 & 1) != 0)
  {
    uint64_t v17 = v15[7];
    uint64_t v18 = 8 * v6;
    swift_release(*(void *)(v17 + v18));
    *(void *)(v17 + v18) = v16;
    goto LABEL_12;
  }

  char v19 = *(_BYTE *)(v0 + 121);
  v15[(v6 >> 6) + 8] |= 1LL << v6;
  *(_BYTE *)(v15[6] + v6) = v19;
  *(void *)(v15[7] + 8 * v6) = v16;
  uint64_t v20 = v15[2];
  BOOL v21 = __OFADD__(v20, 1LL);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  v15[2] = v22;
LABEL_12:
  uint64_t v23 = *(void *)(v0 + 48);
  uint64_t v24 = *(void *)(v23 + 168);
  *(void *)(v23 + 168) = v15;
  swift_bridgeObjectRelease(v24);
  swift_endAccess(v0 + 16);
  int64_t v25 = *(void *)(v0 + 80);
  unint64_t v26 = *(void *)(v0 + 88);
  if (v26)
  {
    unint64_t v27 = __clz(__rbit64(v26));
    uint64_t v28 = (v26 - 1) & v26;
    unint64_t v29 = v27 | (v25 << 6);
    uint64_t v30 = *(void *)(v0 + 72);
    goto LABEL_14;
  }

  int64_t v33 = v25 + 1;
  if (__OFADD__(v25, 1LL)) {
    goto LABEL_32;
  }
  int64_t v34 = (unint64_t)((1LL << *(_BYTE *)(v0 + 120)) + 63) >> 6;
  uint64_t v30 = *(void *)(v0 + 72);
  if (v33 < v34)
  {
    uint64_t v35 = v30 + 56;
    unint64_t v36 = *(void *)(v30 + 56 + 8 * v33);
    ++v25;
    if (v36)
    {
LABEL_18:
      uint64_t v28 = (v36 - 1) & v36;
      unint64_t v29 = __clz(__rbit64(v36)) + (v25 << 6);
LABEL_14:
      *(void *)(v0 + 80) = v25;
      *(void *)(v0 + 88) = v28;
      uint64_t v31 = *(unsigned __int8 *)(*(void *)(v30 + 48) + v29);
      *(_BYTE *)(v0 + 121) = v31;
      uint64_t MyNetworkPublishDateProvider = type metadata accessor for FindMyNetworkPublishDateProvider();
      *(void *)(v0 + 96) = swift_allocObject(MyNetworkPublishDateProvider, 112LL, 15LL);
      swift_defaultActor_initialize();
      __asm { BR              X9 }
    }

    int64_t v25 = v33 + 1;
    if (v33 + 1 < v34)
    {
      unint64_t v36 = *(void *)(v35 + 8 * v25);
      if (v36) {
        goto LABEL_18;
      }
      int64_t v25 = v33 + 2;
      if (v33 + 2 < v34)
      {
        unint64_t v36 = *(void *)(v35 + 8 * v25);
        if (v36) {
          goto LABEL_18;
        }
        int64_t v37 = v33 + 3;
        if (v37 < v34)
        {
          unint64_t v36 = *(void *)(v35 + 8 * v37);
          if (v36)
          {
            int64_t v25 = v37;
            goto LABEL_18;
          }

          while (1)
          {
            int64_t v25 = v37 + 1;
            if (__OFADD__(v37, 1LL)) {
              break;
            }
            if (v25 >= v34) {
              goto LABEL_29;
            }
            unint64_t v36 = *(void *)(v35 + 8 * v25);
            ++v37;
            if (v36) {
              goto LABEL_18;
            }
          }

LABEL_33:
          __break(1u);
          JUMPOUT(0x10000CFECLL);
        }
      }
    }
  }

        char v13 = (v23 - 1) & v23;
        BOOL v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }

      unint64_t v29 = 8 * v21;
      uint64_t v30 = *(void *)(*(void *)(v5 + 48) + v29);
      uint64_t v31 = *(void **)(*(void *)(v5 + 56) + v29);
      if ((a2 & 1) == 0) {
        v32 = v31;
      }
      uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v8 + 40), v30);
      uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v16 = result & ~v15;
      uint64_t v17 = v16 >> 6;
      if (((-1LL << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        int64_t v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          unint64_t v27 = v17 == v26;
          if (v17 == v26) {
            uint64_t v17 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v14 + 8 * v17);
        }

        while (v28 == -1);
        uint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }

      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
      char v19 = 8 * v18;
      *(void *)(*(void *)(v8 + 48) + v19) = v30;
      *(void *)(*(void *)(v8 + 56) + v19) = v31;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release();
LABEL_43:
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v24 - 1) & v24;
    BOOL v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    uint64_t v31 = v30[1];
    int64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v38 & 1) == 0) {
      swift_bridgeObjectRetain(v30[1]);
    }
    Hasher.init(_seed:)(v39, *(void *)(v8 + 40));
    String.hash(into:)(v39, v32, v31);
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0LL;
        }
        v26 |= v28;
        unint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    char v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *char v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v35;
  uint64_t v23 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  int64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    uint8_t *v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

        uint64_t v12 = (v25 - 1) & v25;
        uint64_t v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }

      uint64_t v31 = 16 * v23;
      v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
      int64_t v34 = *v32;
      int64_t v33 = v32[1];
      v39 = *(_OWORD *)(*(void *)(v5 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain(v33);
        swift_retain();
      }

      Hasher.init(_seed:)(v40, *(void *)(v9 + 40));
      String.hash(into:)(v40, v34, v33);
      uint64_t result = Hasher._finalize()();
      uint64_t v16 = -1LL << *(_BYTE *)(v9 + 32);
      uint64_t v17 = result & ~v16;
      uint64_t v18 = v17 >> 6;
      if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        char v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v27 = 0;
        uint64_t v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }

          unint64_t v29 = v18 == v28;
          if (v18 == v28) {
            uint64_t v18 = 0LL;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v13 + 8 * v18);
        }

        while (v30 == -1);
        char v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }

      *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
      uint64_t v20 = 16 * v19;
      BOOL v21 = (void *)(*(void *)(v9 + 48) + v20);
      os_log_s *v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(void *)(v9 + 56) + v20) = v39;
      ++*(void *)(v9 + 16);
    }
  }

  uint64_t result = swift_release();
  *uint64_t v3 = v9;
  return result;
}

        char v13 = (v23 - 1) & v23;
        BOOL v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }

      unint64_t v29 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v21);
      v32 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v21);
      if ((a2 & 1) == 0) {
        sub_10001736C(v32, *((unint64_t *)&v32 + 1));
      }
      uint64_t result = static Hasher._hash(seed:bytes:count:)(*(void *)(v8 + 40), v29, 1LL);
      uint64_t v16 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v17 = result & ~v16;
      uint64_t v18 = v17 >> 6;
      if (((-1LL << v17) & ~*(void *)(v15 + 8 * (v17 >> 6))) != 0)
      {
        char v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v15 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        int64_t v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          unint64_t v27 = v18 == v26;
          if (v18 == v26) {
            uint64_t v18 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v15 + 8 * v18);
        }

        while (v28 == -1);
        char v19 = __clz(__rbit64(~v28)) + (v18 << 6);
      }

      *(void *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
      *(_BYTE *)(*(void *)(v8 + 48) + v19) = v29;
      *(_OWORD *)(*(void *)(v8 + 56) + 16 * v19) = v32;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
LABEL_43:
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v26 - 1) & v26;
    uint64_t v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    v32 = 16 * v23;
    int64_t v33 = (uint64_t *)(*(void *)(v5 + 48) + v32);
    uint64_t v35 = *v33;
    int64_t v34 = v33[1];
    unint64_t v36 = (uint64_t *)(*(void *)(v5 + 56) + v32);
    int64_t v37 = *v36;
    uint64_t v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRetain(v38);
    }

    Hasher.init(_seed:)(v44, *(void *)(v8 + 40));
    String.hash(into:)(v44, v35, v34);
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v30 = v17 == v29;
        if (v17 == v29) {
          uint64_t v17 = 0LL;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v12 + 8 * v17);
      }

      while (v31 == -1);
      uint64_t v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    char v19 = 16 * v18;
    uint64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
    *uint64_t v20 = v35;
    v20[1] = v34;
    BOOL v21 = (void *)(*(void *)(v8 + 56) + v19);
    os_log_s *v21 = v37;
    v21[1] = v38;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v40;
  int64_t v25 = (void *)(v5 + 64);
  if ((v43 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  v39 = 1LL << *(_BYTE *)(v5 + 32);
  if (v39 >= 64) {
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *int64_t v25 = -1LL << v39;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

        uint64_t v11 = (v25 - 1) & v25;
        uint64_t v23 = __clz(__rbit64(v25)) + (v14 << 6);
      }

      uint64_t v31 = 16 * v23;
      v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
      int64_t v34 = *v32;
      int64_t v33 = v32[1];
      uint64_t v35 = *(void *)(v5 + 56) + v31;
      unint64_t v36 = *(void **)v35;
      int64_t v37 = *(_BYTE *)(v35 + 8);
      if ((v42 & 1) == 0)
      {
        swift_bridgeObjectRetain(v32[1]);
        sub_10006A348(v36, v37);
      }

      Hasher.init(_seed:)(v43, *(void *)(v8 + 40));
      String.hash(into:)(v43, v34, v33);
      uint64_t result = Hasher._finalize()();
      uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v16 = result & ~v15;
      uint64_t v17 = v16 >> 6;
      if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v27 = 0;
        uint64_t v28 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }

          unint64_t v29 = v17 == v28;
          if (v17 == v28) {
            uint64_t v17 = 0LL;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v12 + 8 * v17);
        }

        while (v30 == -1);
        uint64_t v18 = __clz(__rbit64(~v30)) + (v17 << 6);
      }

      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
      char v19 = 16 * v18;
      uint64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
      *uint64_t v20 = v34;
      v20[1] = v33;
      BOOL v21 = *(void *)(v8 + 56) + v19;
      *(void *)BOOL v21 = v36;
      *(_BYTE *)(v21 + 8) = v37;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v29 - 1) & v29;
    unint64_t v26 = __clz(__rbit64(v29)) + (v14 << 6);
LABEL_34:
    uint64_t v35 = 8 * v26;
    unint64_t v36 = *(void **)(*(void *)(v5 + 48) + v35);
    int64_t v37 = *(void **)(*(void *)(v5 + 56) + v35);
    if ((v44 & 1) == 0)
    {
      uint64_t v38 = v36;
      v39 = v37;
    }

    uint64_t v15 = *(void *)(v8 + 40);
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    uint64_t v18 = v17;
    Hasher.init(_seed:)(v45, v15);
    String.hash(into:)(v45, v16, v18);
    char v19 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v20 = -1LL << *(_BYTE *)(v8 + 32);
    BOOL v21 = v19 & ~v20;
    uint64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      uint64_t v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v31 = 0;
      v32 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        int64_t v33 = v22 == v32;
        if (v22 == v32) {
          uint64_t v22 = 0LL;
        }
        v31 |= v33;
        int64_t v34 = *(void *)(v12 + 8 * v22);
      }

      while (v34 == -1);
      uint64_t v23 = __clz(__rbit64(~v34)) + (v22 << 6);
    }

    *(void *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    uint64_t v24 = 8 * v23;
    *(void *)(*(void *)(v8 + 48) + v24) = v36;
    *(void *)(*(void *)(v8 + 56) + v24) = v37;
    ++*(void *)(v8 + 16);
  }

  swift_release();
  uint64_t v3 = v41;
  uint64_t v28 = (void *)(v5 + 64);
  if ((v44 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  v40 = 1LL << *(_BYTE *)(v5 + 32);
  if (v40 >= 64) {
    bzero(v28, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v28 = -1LL << v40;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

        uint64_t v11 = (v23 - 1) & v23;
        BOOL v21 = __clz(__rbit64(v23)) + (v14 << 6);
      }

      unint64_t v29 = (unsigned __int8 *)(*(void *)(v5 + 48) + 24 * v21);
      uint64_t v30 = *v29;
      v32 = *((void *)v29 + 1);
      uint64_t v31 = *((void *)v29 + 2);
      uint64_t v38 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v21);
      if ((v37 & 1) == 0)
      {
        swift_bridgeObjectRetain(v31);
        sub_10001736C(v38, *((unint64_t *)&v38 + 1));
      }

      Hasher.init(_seed:)(v39, *(void *)(v8 + 40));
      Hasher._combine(_:)(v30);
      swift_bridgeObjectRetain(v31);
      String.hash(into:)(v39, v32, v31);
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v16 = result & ~v15;
      uint64_t v17 = v16 >> 6;
      if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        int64_t v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }

          unint64_t v27 = v17 == v26;
          if (v17 == v26) {
            uint64_t v17 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v17);
        }

        while (v28 == -1);
        uint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }

      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
      char v19 = *(void *)(v8 + 48) + 24 * v18;
      *(_BYTE *)char v19 = v30;
      *(void *)(v19 + 8) = v32;
      *(void *)(v19 + 16) = v31;
      *(_OWORD *)(*(void *)(v8 + 56) + 16 * v18) = v38;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v12 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    uint64_t v31 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v22);
    int64_t v33 = *v31;
    v32 = v31[1];
    int64_t v34 = *(void **)(*(void *)(v6 + 56) + 8 * v22);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      uint64_t v35 = v34;
    }

    Hasher.init(_seed:)(v41, *(void *)(v9 + 40));
    String.hash(into:)(v41, v33, v32);
    uint64_t result = Hasher._finalize()();
    uint64_t v16 = -1LL << *(_BYTE *)(v9 + 32);
    uint64_t v17 = result & ~v16;
    uint64_t v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      char v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        unint64_t v29 = v18 == v28;
        if (v18 == v28) {
          uint64_t v18 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      char v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    uint64_t v20 = (void *)(*(void *)(v9 + 48) + 16 * v19);
    *uint64_t v20 = v33;
    v20[1] = v32;
    *(void *)(*(void *)(v9 + 56) + 8 * v19) = v34;
    ++*(void *)(v9 + 16);
  }

  swift_release(v6);
  uint64_t v4 = v37;
  uint64_t v24 = (void *)(v6 + 64);
  if ((v40 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  unint64_t v36 = 1LL << *(_BYTE *)(v6 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v36;
  }
  *(void *)(v6 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v6);
  *uint64_t v4 = v9;
  return result;
}

        uint64_t v12 = (v22 - 1) & v22;
        uint64_t v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }

      uint64_t v28 = 8 * v20;
      unint64_t v29 = *(void *)(v5 + 56);
      uint64_t v30 = *(void *)(*(void *)(v5 + 48) + v28);
      uint64_t v31 = *(void *)(v29 + v28);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain(*(void *)(v29 + v28));
      }
      Hasher.init(_seed:)(v36, *(void *)(v8 + 40));
      Hasher._combine(_:)(v30);
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v15 = result & ~v14;
      uint64_t v16 = v15 >> 6;
      if (((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        uint64_t v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v24 = 0;
        int64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          unint64_t v26 = v16 == v25;
          if (v16 == v25) {
            uint64_t v16 = 0LL;
          }
          v24 |= v26;
          unint64_t v27 = *(void *)(v13 + 8 * v16);
        }

        while (v27 == -1);
        uint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }

      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      uint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v8 + 48) + v18) = v30;
      *(void *)(*(void *)(v8 + 56) + v18) = v31;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release();
LABEL_43:
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    uint64_t v31 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v22);
    v32 = (uint64_t *)(*(void *)(v5 + 56) + 32 * v22);
    int64_t v33 = *v32;
    int64_t v34 = v32[1];
    uint64_t v35 = v32[2];
    unint64_t v36 = v32[3];
    v43 = v31;
    int64_t v37 = *((void *)&v31 + 1);
    if ((v42 & 1) == 0)
    {
      sub_10001736C(v31, *((unint64_t *)&v31 + 1));
      sub_10001736C(v33, v34);
      sub_10001736C(v35, v36);
    }

    Hasher.init(_seed:)(v44, *(void *)(v8 + 40));
    sub_10001736C(v43, v37);
    Data.hash(into:)(v44, v43, v37);
    sub_100016F9C(v43, v37);
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
      char v19 = v43;
    }

    else
    {
      unint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v15) >> 6;
      char v19 = v43;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        unint64_t v29 = v17 == v28;
        if (v17 == v28) {
          uint64_t v17 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v12 + 8 * v17);
      }

      while (v30 == -1);
      uint64_t v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    *(_OWORD *)(*(void *)(v8 + 48) + 16 * v18) = v19;
    uint64_t v20 = (uint64_t *)(*(void *)(v8 + 56) + 32 * v18);
    *uint64_t v20 = v33;
    v20[1] = v34;
    v20[2] = v35;
    v20[3] = v36;
    ++*(void *)(v8 + 16);
  }

  swift_release();
  uint64_t v24 = v40;
  if ((v42 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v38 = 1LL << *(_BYTE *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v38;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v26 - 1) & v26;
    uint64_t v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    v32 = 16 * v23;
    int64_t v33 = *(_OWORD *)(*(void *)(v5 + 48) + v32);
    int64_t v34 = *(void *)(v5 + 56) + v32;
    uint64_t v35 = *(void *)v34;
    unint64_t v36 = *(_BYTE *)(v34 + 8);
    v43 = v33;
    int64_t v37 = *((void *)&v33 + 1);
    if ((v42 & 1) == 0) {
      sub_10001736C(v33, *((unint64_t *)&v33 + 1));
    }
    Hasher.init(_seed:)(v44, *(void *)(v8 + 40));
    sub_10001736C(v43, v37);
    Data.hash(into:)(v44, v43, v37);
    sub_100016F9C(v43, v37);
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
      char v19 = v43;
    }

    else
    {
      uint64_t v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v15) >> 6;
      char v19 = v43;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v30 = v17 == v29;
        if (v17 == v29) {
          uint64_t v17 = 0LL;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v12 + 8 * v17);
      }

      while (v31 == -1);
      uint64_t v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t v20 = 16 * v18;
    *(_OWORD *)(*(void *)(v8 + 48) + v20) = v19;
    BOOL v21 = *(void *)(v8 + 56) + v20;
    *(void *)BOOL v21 = v35;
    *(_BYTE *)(v21 + 8) = v36;
    ++*(void *)(v8 + 16);
  }

  swift_release();
  uint64_t v3 = v39;
  int64_t v25 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v38 = 1LL << *(_BYTE *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *int64_t v25 = -1LL << v38;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v24 - 1) & v24;
    BOOL v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    uint64_t v31 = v30[1];
    int64_t v33 = *(_BYTE *)(*(void *)(v5 + 56) + v21);
    if ((v38 & 1) == 0) {
      swift_bridgeObjectRetain(v30[1]);
    }
    Hasher.init(_seed:)(v39, *(void *)(v8 + 40));
    String.hash(into:)(v39, v32, v31);
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0LL;
        }
        v26 |= v28;
        unint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    char v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *char v19 = v32;
    v19[1] = v31;
    *(_BYTE *)(*(void *)(v8 + 56) + v18) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release();
  uint64_t v3 = v35;
  uint64_t v23 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  int64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    uint8_t *v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

        uint64_t v12 = (v21 - 1) & v21;
        char v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }

      unint64_t v27 = *(void *)(v5 + 56);
      uint64_t v28 = *(char *)(*(void *)(v5 + 48) + v19);
      unint64_t v29 = *(void *)(v27 + 8 * v19);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain(*(void *)(v27 + 8 * v19));
      }
      Hasher.init(_seed:)(v34, *(void *)(v8 + 40));
      Hasher._combine(_:)(qword_1007E7D20[v28]);
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v15 = result & ~v14;
      uint64_t v16 = v15 >> 6;
      if (((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        uint64_t v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v23 = 0;
        uint64_t v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          int64_t v25 = v16 == v24;
          if (v16 == v24) {
            uint64_t v16 = 0LL;
          }
          v23 |= v25;
          unint64_t v26 = *(void *)(v13 + 8 * v16);
        }

        while (v26 == -1);
        uint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }

      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      *(_BYTE *)(*(void *)(v8 + 48) + v17) = v28;
      *(void *)(*(void *)(v8 + 56) + 8 * v17) = v29;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
LABEL_43:
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    uint64_t v31 = *(void **)(*(void *)(v5 + 56) + 8 * v22);
    int64_t v37 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v22);
    v32 = *(void *)(*(void *)(v5 + 48) + 16 * v22 + 8);
    if ((a2 & 1) == 0)
    {
      sub_10001736C(v37, v32);
      int64_t v33 = v31;
    }

    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    Data.hash(into:)(v38, v37, v32);
    uint64_t result = Hasher._finalize()();
    uint64_t v16 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v17 = result & ~v16;
    uint64_t v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      char v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
      uint64_t v20 = v37;
    }

    else
    {
      unint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v16) >> 6;
      uint64_t v20 = v37;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        unint64_t v29 = v18 == v28;
        if (v18 == v28) {
          uint64_t v18 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      char v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    *(_OWORD *)(*(void *)(v8 + 48) + 16 * v19) = v20;
    *(void *)(*(void *)(v8 + 56) + 8 * v19) = v31;
    ++*(void *)(v8 + 16);
  }

  swift_release();
  uint64_t v3 = v35;
  uint64_t v24 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  int64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v24, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

        uint64_t v12 = (v21 - 1) & v21;
        char v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }

      unint64_t v27 = *(void *)(v5 + 56);
      uint64_t v28 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v19);
      unint64_t v29 = *(void *)(v27 + 8 * v19);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain(*(void *)(v27 + 8 * v19));
      }
      Hasher.init(_seed:)(v34, *(void *)(v8 + 40));
      Hasher._combine(_:)(v28);
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v15 = result & ~v14;
      uint64_t v16 = v15 >> 6;
      if (((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        uint64_t v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v23 = 0;
        uint64_t v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          int64_t v25 = v16 == v24;
          if (v16 == v24) {
            uint64_t v16 = 0LL;
          }
          v23 |= v25;
          unint64_t v26 = *(void *)(v13 + 8 * v16);
        }

        while (v26 == -1);
        uint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }

      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      *(_BYTE *)(*(void *)(v8 + 48) + v17) = v28;
      *(void *)(*(void *)(v8 + 56) + 8 * v17) = v29;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release();
LABEL_43:
  *uint64_t v3 = v8;
  return result;
}

        uint64_t v12 = (v22 - 1) & v22;
        uint64_t v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }

      uint64_t v28 = 8 * v20;
      unint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      uint64_t v30 = *(void **)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        uint64_t v31 = v30;
      }
      Hasher.init(_seed:)(v36, *(void *)(v8 + 40));
      Hasher._combine(_:)(v29);
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v15 = result & ~v14;
      uint64_t v16 = v15 >> 6;
      if (((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        uint64_t v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v24 = 0;
        int64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          unint64_t v26 = v16 == v25;
          if (v16 == v25) {
            uint64_t v16 = 0LL;
          }
          v24 |= v26;
          unint64_t v27 = *(void *)(v13 + 8 * v16);
        }

        while (v27 == -1);
        uint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }

      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      uint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v8 + 48) + v18) = v29;
      *(void *)(*(void *)(v8 + 56) + v18) = v30;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release();
LABEL_43:
  *uint64_t v3 = v8;
  return result;
}

        uint64_t v12 = (v26 - 1) & v26;
        uint64_t v24 = __clz(__rbit64(v26)) + (v16 << 6);
      }

      v32 = 16 * v24;
      int64_t v33 = *(_OWORD *)(*(void *)(v5 + 48) + v32);
      int64_t v37 = *(_OWORD *)(*(void *)(v5 + 56) + v32);
      uint64_t v38 = v33;
      int64_t v34 = *(void *)(*(void *)(v5 + 48) + v32 + 8);
      if ((a2 & 1) == 0)
      {
        sub_10001736C(v33, *((unint64_t *)&v33 + 1));
        sub_10001736C(v37, *((unint64_t *)&v37 + 1));
      }

      Hasher.init(_seed:)(v39, *(void *)(v8 + 40));
      Data.hash(into:)(v39, v38, v34);
      uint64_t result = Hasher._finalize()();
      uint64_t v17 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v18 = result & ~v17;
      char v19 = v18 >> 6;
      if (((-1LL << v18) & ~*(void *)(v14 + 8 * (v18 >> 6))) != 0)
      {
        uint64_t v20 = __clz(__rbit64((-1LL << v18) & ~*(void *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0LL;
        BOOL v21 = v38;
      }

      else
      {
        uint64_t v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v17) >> 6;
        BOOL v21 = v38;
        do
        {
          if (++v19 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          uint64_t v30 = v19 == v29;
          if (v19 == v29) {
            char v19 = 0LL;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v19);
        }

        while (v31 == -1);
        uint64_t v20 = __clz(__rbit64(~v31)) + (v19 << 6);
      }

      *(void *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
      uint64_t v22 = 16 * v20;
      *(_OWORD *)(*(void *)(v8 + 48) + v22) = v21;
      *(_OWORD *)(*(void *)(v8 + 56) + v22) = v37;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release();
LABEL_43:
  *uint64_t v3 = v8;
  return result;
}

        uint64_t v12 = (v24 - 1) & v24;
        uint64_t v22 = __clz(__rbit64(v24)) + (v16 << 6);
      }

      uint64_t v30 = *(void **)(*(void *)(v5 + 48) + 8 * v22);
      int64_t v34 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v22);
      if ((a2 & 1) == 0)
      {
        uint64_t v31 = v30;
        sub_10001736C(v34, *((unint64_t *)&v34 + 1));
      }

      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
      uint64_t v17 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v18 = result & ~v17;
      char v19 = v18 >> 6;
      if (((-1LL << v18) & ~*(void *)(v14 + 8 * (v18 >> 6))) != 0)
      {
        uint64_t v20 = __clz(__rbit64((-1LL << v18) & ~*(void *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          uint64_t v28 = v19 == v27;
          if (v19 == v27) {
            char v19 = 0LL;
          }
          v26 |= v28;
          unint64_t v29 = *(void *)(v14 + 8 * v19);
        }

        while (v29 == -1);
        uint64_t v20 = __clz(__rbit64(~v29)) + (v19 << 6);
      }

      *(void *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
      *(void *)(*(void *)(v8 + 48) + 8 * v20) = v30;
      *(_OWORD *)(*(void *)(v8 + 56) + 16 * v20) = v34;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release();
LABEL_43:
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v12 = (v26 - 1) & v26;
    uint64_t v23 = __clz(__rbit64(v26)) + (v16 << 6);
LABEL_34:
    v32 = 8 * v23;
    int64_t v33 = *(void **)(*(void *)(v6 + 48) + v32);
    int64_t v34 = *(void **)(*(void *)(v6 + 56) + v32);
    if ((a2 & 1) == 0)
    {
      uint64_t v35 = v33;
      unint64_t v36 = v34;
    }

    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v9 + 40));
    uint64_t v17 = -1LL << *(_BYTE *)(v9 + 32);
    uint64_t v18 = result & ~v17;
    char v19 = v18 >> 6;
    if (((-1LL << v18) & ~*(void *)(v14 + 8 * (v18 >> 6))) != 0)
    {
      uint64_t v20 = __clz(__rbit64((-1LL << v18) & ~*(void *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v30 = v19 == v29;
        if (v19 == v29) {
          char v19 = 0LL;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v14 + 8 * v19);
      }

      while (v31 == -1);
      uint64_t v20 = __clz(__rbit64(~v31)) + (v19 << 6);
    }

    *(void *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    BOOL v21 = 8 * v20;
    *(void *)(*(void *)(v9 + 48) + v21) = v33;
    *(void *)(*(void *)(v9 + 56) + v21) = v34;
    ++*(void *)(v9 + 16);
  }

  swift_release(v6);
  uint64_t v4 = v38;
  int64_t v25 = (void *)(v6 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  int64_t v37 = 1LL << *(_BYTE *)(v6 + 32);
  if (v37 >= 64) {
    bzero(v25, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *int64_t v25 = -1LL << v37;
  }
  *(void *)(v6 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v6);
  *uint64_t v4 = v9;
  return result;
}

    char v13 = (v27 - 1) & v27;
    uint64_t v24 = __clz(__rbit64(v27)) + (v17 << 6);
LABEL_34:
    int64_t v33 = *(void **)(*(void *)(v7 + 48) + 8 * v24);
    int64_t v34 = *(void *)(v7 + 56) + 16 * v24;
    uint64_t v35 = *(void *)v34;
    unint64_t v36 = *(unsigned __int8 *)(v34 + 8);
    if ((v41 & 1) == 0)
    {
      int64_t v37 = v33;
      a4(v35, v36);
    }

    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v10 + 40));
    uint64_t v18 = -1LL << *(_BYTE *)(v10 + 32);
    char v19 = result & ~v18;
    uint64_t v20 = v19 >> 6;
    if (((-1LL << v19) & ~*(void *)(v15 + 8 * (v19 >> 6))) != 0)
    {
      BOOL v21 = __clz(__rbit64((-1LL << v19) & ~*(void *)(v15 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v29 = 0;
      uint64_t v30 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v31 = v20 == v30;
        if (v20 == v30) {
          uint64_t v20 = 0LL;
        }
        v29 |= v31;
        v32 = *(void *)(v15 + 8 * v20);
      }

      while (v32 == -1);
      BOOL v21 = __clz(__rbit64(~v32)) + (v20 << 6);
    }

    *(void *)(v15 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
    *(void *)(*(void *)(v10 + 48) + 8 * v21) = v33;
    uint64_t v22 = *(void *)(v10 + 56) + 16 * v21;
    *(void *)uint64_t v22 = v35;
    *(_BYTE *)(v22 + 8) = v36;
    ++*(void *)(v10 + 16);
  }

  swift_release(v7);
  unint64_t v26 = (void *)(v7 + 64);
  if ((v41 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v38 = 1LL << *(_BYTE *)(v7 + 32);
  if (v38 >= 64) {
    bzero(v26, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *unint64_t v26 = -1LL << v38;
  }
  *(void *)(v7 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v7);
  uint8_t *v5 = v10;
  return result;
}

        uint64_t v11 = (v23 - 1) & v23;
        BOOL v21 = __clz(__rbit64(v23)) + (v14 << 6);
      }

      unint64_t v29 = (unsigned __int8 *)(*(void *)(v5 + 48) + 24 * v21);
      uint64_t v30 = *v29;
      v32 = *((void *)v29 + 1);
      uint64_t v31 = *((void *)v29 + 2);
      int64_t v33 = *(_BYTE *)(*(void *)(v5 + 56) + v21);
      if ((v38 & 1) == 0) {
        swift_bridgeObjectRetain(*((void *)v29 + 2));
      }
      Hasher.init(_seed:)(v39, *(void *)(v8 + 40));
      Hasher._combine(_:)(v30);
      swift_bridgeObjectRetain(v31);
      String.hash(into:)(v39, v32, v31);
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v16 = result & ~v15;
      uint64_t v17 = v16 >> 6;
      if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        int64_t v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }

          unint64_t v27 = v17 == v26;
          if (v17 == v26) {
            uint64_t v17 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v17);
        }

        while (v28 == -1);
        uint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }

      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
      char v19 = *(void *)(v8 + 48) + 24 * v18;
      *(_BYTE *)char v19 = v30;
      *(void *)(v19 + 8) = v32;
      *(void *)(v19 + 16) = v31;
      *(_BYTE *)(*(void *)(v8 + 56) + v18) = v33;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v22);
    int64_t v33 = *v31;
    v32 = v31[1];
    int64_t v34 = (char *)(*(void *)(v5 + 56) + 2 * v22);
    uint64_t v35 = *v34;
    unint64_t v36 = v34[1];
    if ((v41 & 1) == 0) {
      swift_bridgeObjectRetain(v31[1]);
    }
    Hasher.init(_seed:)(v42, *(void *)(v8 + 40));
    String.hash(into:)(v42, v33, v32);
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        unint64_t v29 = v17 == v28;
        if (v17 == v28) {
          uint64_t v17 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v12 + 8 * v17);
      }

      while (v30 == -1);
      uint64_t v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    char v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *char v19 = v33;
    v19[1] = v32;
    uint64_t v20 = (_BYTE *)(*(void *)(v8 + 56) + 2 * v18);
    *uint64_t v20 = v35;
    v20[1] = v36;
    ++*(void *)(v8 + 16);
  }

  swift_release();
  uint64_t v3 = v38;
  uint64_t v24 = (void *)(v5 + 64);
  if ((v41 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  int64_t v37 = 1LL << *(_BYTE *)(v5 + 32);
  if (v37 >= 64) {
    bzero(v24, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v37;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v22);
    int64_t v33 = *v31;
    v32 = v31[1];
    int64_t v34 = *(void *)(v5 + 56) + 24 * v22;
    uint64_t v35 = *(void *)v34;
    v41 = *(_OWORD *)(v34 + 8);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRetain(v41);
      swift_bridgeObjectRetain(*((void *)&v41 + 1));
    }

    Hasher.init(_seed:)(v42, *(void *)(v8 + 40));
    String.hash(into:)(v42, v33, v32);
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        unint64_t v29 = v17 == v28;
        if (v17 == v28) {
          uint64_t v17 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v12 + 8 * v17);
      }

      while (v30 == -1);
      uint64_t v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    char v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *char v19 = v33;
    v19[1] = v32;
    uint64_t v20 = *(void *)(v8 + 56) + 24 * v18;
    *(void *)uint64_t v20 = v35;
    *(_OWORD *)(v20 + 8) = v41;
    ++*(void *)(v8 + 16);
  }

  swift_release();
  uint64_t v3 = v37;
  uint64_t v24 = (void *)(v5 + 64);
  if ((v40 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  unint64_t v36 = 1LL << *(_BYTE *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v36;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v12 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    uint64_t v31 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v22);
    int64_t v33 = *v31;
    v32 = v31[1];
    int64_t v34 = *(void *)(*(void *)(v6 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      swift_bridgeObjectRetain(v34);
    }

    Hasher.init(_seed:)(v39, *(void *)(v9 + 40));
    String.hash(into:)(v39, v33, v32);
    uint64_t result = Hasher._finalize()();
    uint64_t v16 = -1LL << *(_BYTE *)(v9 + 32);
    uint64_t v17 = result & ~v16;
    uint64_t v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      char v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        unint64_t v29 = v18 == v28;
        if (v18 == v28) {
          uint64_t v18 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      char v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    uint64_t v20 = (void *)(*(void *)(v9 + 48) + 16 * v19);
    *uint64_t v20 = v33;
    v20[1] = v32;
    *(void *)(*(void *)(v9 + 56) + 8 * v19) = v34;
    ++*(void *)(v9 + 16);
  }

  swift_release(v6);
  uint64_t v24 = (void *)(v6 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v35 = 1LL << *(_BYTE *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v35;
  }
  *(void *)(v6 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v6);
  *uint64_t v4 = v9;
  return result;
}

    uint64_t v11 = (v24 - 1) & v24;
    BOOL v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    uint64_t v30 = (unsigned __int8 *)(*(void *)(v5 + 48) + 24 * v21);
    uint64_t v31 = *v30;
    int64_t v33 = *((void *)v30 + 1);
    v32 = *((void *)v30 + 2);
    int64_t v34 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(*((void *)v30 + 2));
      swift_bridgeObjectRetain(v34);
    }

    Hasher.init(_seed:)(v40, *(void *)(v8 + 40));
    Hasher._combine(_:)(v31);
    swift_bridgeObjectRetain(v32);
    String.hash(into:)(v40, v33, v32);
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0LL;
        }
        v26 |= v28;
        unint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    char v19 = *(void *)(v8 + 48) + 24 * v18;
    *(_BYTE *)char v19 = v31;
    *(void *)(v19 + 8) = v33;
    *(void *)(v19 + 16) = v32;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v34;
    ++*(void *)(v8 + 16);
  }

  swift_release();
  uint64_t v3 = v36;
  uint64_t v23 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    uint8_t *v23 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v18 = (v27 - 1) & v27;
    char v19 = __clz(__rbit64(v27)) + (v20 << 6);
    goto LABEL_34;
  }

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

        v109 = (_BYTE *)(v51 + v36);
        v105 = v108;
        if (v108 < v101)
        {
          v106 = v54;
          if (v54 < v53) {
            continue;
          }
        }

        goto LABEL_71;
      }

      (*(void (**)(_BYTE *, uint64_t))(v46 + 8))(v95, v48);
      v42 = v94;
      v43 = v99;
LABEL_26:
      sub_100015794((uint64_t)v45, (uint64_t *)&unk_10099D720);
      sub_100018C68((uint64_t)v44, type metadata accessor for ShareRecord);
      sub_100018C68(v43, type metadata accessor for ShareRecord);
      unint64_t v36 = v42;
LABEL_27:
      v51 = (unint64_t)v109;
      v52 = &v108[v36];
      uint64_t v24 = v103;
      v53 = v104;
      if (v109 < v108 || v109 >= v52)
      {
        swift_arrayInitWithTakeFrontToBack(v109, v108, 1LL, v103);
      }

      else if (v109 != v108)
      {
        swift_arrayInitWithTakeBackToFront(v109, v108);
      }

      v108 = v52;
      v54 = v106;
      goto LABEL_33;
    }

    goto LABEL_71;
  }

  __break(1u);
}

  __break(1u);
}

            swift_release();
            v70(*(void *)(v0 + 1208), *(void *)(v0 + 1144));
            goto LABEL_34;
          }

  __break(1u);
}

          v54 = 0LL;
          uint64_t v28 = 1LL;
          uint64_t v24 = v44;
          unint64_t v27 = v52;
          goto LABEL_7;
        }

        v54 = 0LL;
        uint64_t v28 = 1LL;
        v24 += 3LL;
        unint64_t v27 = v52;
LABEL_7:
        unint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
        uint64_t v30 = v10;
        uint64_t v31 = v60;
        v29(v27, v28, 1LL, v60);
        v32 = v57;
        int64_t v33 = v56;
        *v57 = v58;
        v32[1] = v33;
        v32[2] = v55;
        v32[3] = v24;
        v32[4] = v54;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v27, 1LL, v31) == 1)
        {
          sub_100015794(v27, &qword_1009AC060);
          swift_retain();
          return (void *)sub_100546C4C(v51, v49, v50, a3);
        }

        sub_10002218C(v27, (uint64_t)v16, type metadata accessor for BeaconIdentifier);
        Hasher.init(_seed:)(v59, *(void *)(a3 + 40));
        int64_t v34 = type metadata accessor for UUID(0LL);
        uint64_t v35 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of Hashable.hash(into:)(v59, v34, v35);
        unint64_t v36 = &v16[*(int *)(v31 + 20)];
        dispatch thunk of Hashable.hash(into:)(v59, v34, v35);
        int64_t v37 = Hasher._finalize()();
        uint64_t v38 = -1LL << *(_BYTE *)(a3 + 32);
        v39 = v37 & ~v38;
        if (((*(void *)(v21 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v39) & 1) != 0) {
          break;
        }
LABEL_3:
        uint64_t result = (void *)sub_100018C68((uint64_t)v16, type metadata accessor for BeaconIdentifier);
        char v10 = v53;
      }

      v40 = ~v38;
      v41 = *(void *)(v53 + 72);
      while (1)
      {
        sub_10001DC4C(*(void *)(a3 + 48) + v41 * v39, (uint64_t)v13, type metadata accessor for BeaconIdentifier);
        if ((static UUID.== infix(_:_:)(v13, v16) & 1) != 0
          && (static UUID.== infix(_:_:)(&v13[*(int *)(v60 + 20)], v36) & 1) != 0)
        {
          break;
        }

        sub_100018C68((uint64_t)v13, type metadata accessor for BeaconIdentifier);
        v39 = (v39 + 1) & v40;
        if (((*(void *)(v21 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v39) & 1) == 0) {
          goto LABEL_3;
        }
      }

      sub_100018C68((uint64_t)v13, type metadata accessor for BeaconIdentifier);
      uint64_t result = (void *)sub_100018C68((uint64_t)v16, type metadata accessor for BeaconIdentifier);
      v42 = (v39 >> 3) & 0x1FFFFFFFFFFFFFF8LL;
      v43 = *(unint64_t *)((char *)v51 + v42);
      *(unint64_t *)((char *)v51 + v42) = v43 & ~(1LL << v39);
      char v10 = v53;
    }

    while ((v43 & (1LL << v39)) == 0);
    uint64_t v20 = v50 - 1;
    if (__OFSUB__(v50, 1LL))
    {
LABEL_41:
      __break(1u);
      return result;
    }

    if (v50 != 1) {
      continue;
    }
    return &_swiftEmptySetSingleton;
  }

  if (!(_DWORD)v626) {
    return;
  }
LABEL_219:
  swift_bridgeObjectRelease();
}

    swift_bridgeObjectRelease();
    v44 = (void *)v26;
    unint64_t v36 = sub_100004AEC(&qword_1009AE6A8);
    CheckedContinuation.resume(returning:)(&v44, v36);
    return;
  }

  v44 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v2);
  sub_10003331C(0, v3, 0);
  uint64_t v4 = _swiftEmptyArrayStorage;
  unint64_t v6 = sub_10036D714(v2);
  uint64_t v7 = 0LL;
  BOOL v8 = v2 + 64;
  uint64_t v9 = *(_BYTE *)(v2 + 32);
  int64_t v37 = v3;
  uint64_t v38 = v5;
  v39 = v2 + 64;
  while ((v6 & 0x8000000000000000LL) == 0 && v6 < 1LL << v9)
  {
    uint64_t v12 = (unint64_t)v6 >> 6;
    if (*(_DWORD *)(v2 + 36) != v5) {
      goto LABEL_36;
    }
    v40 = v7;
    char v13 = *(void *)(v2 + 56) + 48 * v6;
    uint64_t v14 = *(void *)(v13 + 24);
    v42 = *(void *)(v13 + 16);
    v43 = *(void *)(v13 + 8);
    v41 = *(_BYTE *)(v13 + 32);
    uint64_t v15 = *(void *)(v13 + 40);
    v44 = v4;
    uint64_t v16 = v4[2];
    uint64_t v17 = v4[3];
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    if (v16 >= v17 >> 1)
    {
      sub_10003331C(v17 > 1, v16 + 1, 1);
      uint64_t v4 = v44;
    }

    v4[2] = v16 + 1;
    uint64_t v18 = &v4[5 * v16];
    v18[4] = v43;
    v18[5] = v42;
    v18[6] = v14;
    *((_BYTE *)v18 + 56) = v41;
    v18[8] = v15;
    uint64_t v9 = *(_BYTE *)(v2 + 32);
    char v10 = 1LL << v9;
    if (v6 >= 1LL << v9) {
      goto LABEL_37;
    }
    BOOL v8 = v2 + 64;
    char v19 = *(void *)(v39 + 8 * v12);
    if ((v19 & (1LL << v6)) == 0) {
      goto LABEL_38;
    }
    char v5 = v38;
    if (*(_DWORD *)(v2 + 36) != v38) {
      goto LABEL_39;
    }
    uint64_t v20 = v19 & (-2LL << (v6 & 0x3F));
    if (v20)
    {
      char v10 = __clz(__rbit64(v20)) | v6 & 0xFFFFFFFFFFFFFFC0LL;
      uint64_t v11 = v37;
    }

    else
    {
      BOOL v21 = v12 + 1;
      uint64_t v22 = (v10 + 63) >> 6;
      uint64_t v11 = v37;
      if (v12 + 1 < v22)
      {
        uint64_t v23 = *(void *)(v39 + 8 * v21);
        if (!v23)
        {
          BOOL v21 = v12 + 2;
          if (v12 + 2 >= v22) {
            goto LABEL_4;
          }
          uint64_t v23 = *(void *)(v39 + 8 * v21);
          if (!v23)
          {
            while (v22 - 3 != v12)
            {
              uint64_t v23 = *(void *)(v2 + 88 + 8 * v12++);
              if (v23)
              {
                BOOL v21 = v12 + 2;
                goto LABEL_17;
              }
            }

            goto LABEL_4;
          }
        }

  unint64_t v26 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v26,  1046LL,  0);
  __break(1u);
  return result;
}

    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  sub_100049DAC(v56, isUniquelyReferenced_nonNull_native);
  v50 = v112;
  v57 = sub_10030CF14(v51, isEscapingClosureAtFileLocation);
  if ((v11 & 1) == (v58 & 1))
  {
    v53 = v57;
    goto LABEL_14;
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  __break(1u);
}

    swift_release();
    return;
  }

  __break(1u);
LABEL_35:
  __break(1u);
}

      (*(void (**)(char *, uint64_t))(v53 + 8))(v71, v21);
      swift_bridgeObjectRelease();
LABEL_43:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
      return (uint64_t)v29;
    }
  }

  v78 = *(void *)(v22 + 16);
  if (!v78) {
    goto LABEL_28;
  }
  uint64_t v30 = 0LL;
  uint64_t v31 = _swiftEmptyArrayStorage;
  v76 = v22 + 32;
  v77 = v22;
  v32 = v80;
  int64_t v33 = (uint64_t)v81;
  while (v30 < *(void *)(v22 + 16))
  {
    v84 = v30;
    int64_t v34 = (uint64_t *)(v76 + 56 * v30);
    unint64_t v36 = *v34;
    uint64_t v35 = v34[1];
    int64_t v37 = v34[5];
    uint64_t v38 = v34[6];
    v39 = *(void *)(v38 + 16);
    v85 = v35;
    v86 = v36;
    v83 = v37;
    v91 = v38;
    if (v39)
    {
      v79 = v31;
      swift_bridgeObjectRetain(v38);
      sub_10001736C(v36, v35);
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRetain_n(v38, 2LL);
      v40 = (unint64_t *)(v38 + 40);
      v41 = _swiftEmptyArrayStorage;
      do
      {
        v43 = *(v40 - 1);
        v42 = *v40;
        sub_10001736C(v43, *v40);
        if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0) {
          v41 = sub_1004C6800(0LL, v41[2] + 1LL, 1, v41);
        }
        v45 = v41[2];
        v44 = v41[3];
        if (v45 >= v44 >> 1) {
          v41 = sub_1004C6800((void *)(v44 > 1), v45 + 1, 1, v41);
        }
        v40 += 4;
        v41[2] = v45 + 1;
        v46 = &v41[3 * v45];
        v46[4] = v43;
        v46[5] = v42;
        *((_BYTE *)v46 + 52) = 0;
        *((_DWORD *)v46 + 12) = 3;
        --v39;
      }

      while (v39);
      swift_bridgeObjectRelease_n(v91, 2LL);
      uint64_t v31 = v79;
      v32 = v80;
      int64_t v33 = (uint64_t)v81;
      uint64_t v35 = v85;
      unint64_t v36 = v86;
    }

    else
    {
      sub_10001736C(v36, v35);
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRetain(v38);
      v41 = _swiftEmptyArrayStorage;
    }

    v47 = v89;
    v48 = (char *)v32 + *(int *)(v89 + 24);
    v49 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56LL))(v48, 1LL, 1LL, v49);
    *v32 = v36;
    v32[1] = v35;
    v32[2] = (uint64_t)v41;
    *((_BYTE *)v32 + *(int *)(v47 + 28)) = 15;
    sub_10059C274((uint64_t)v32, v33);
    sub_10001736C(v36, v35);
    if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0) {
      uint64_t v31 = (void *)sub_1004C6920(0, v31[2] + 1LL, 1, (unint64_t)v31);
    }
    uint64_t v22 = v77;
    v51 = v31[2];
    v50 = v31[3];
    if (v51 >= v50 >> 1) {
      uint64_t v31 = (void *)sub_1004C6920(v50 > 1, v51 + 1, 1, (unint64_t)v31);
    }
    v52 = v84 + 1;
    v31[2] = v51 + 1;
    uint64_t v30 = v52;
    sub_10059C2B8( v33,  (uint64_t)v31 + ((*(unsigned __int8 *)(v88 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80))
    + *(void *)(v88 + 72) * v51);
    sub_100016F9C(v86, v85);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = sub_10059C2FC((uint64_t)v32);
    if (v30 == v78) {
      goto LABEL_29;
    }
  }

  __break(1u);
  return result;
}

          char v19 = (v28 - 1) & v28;
          uint64_t v20 = __clz(__rbit64(v28)) + (v21 << 6);
        }

        uint64_t v30 = *(void *)(*(void *)(v4 + 48) + 8 * v20);
        unint64_t v26 = swift_retain();
        if (!v30) {
          goto LABEL_37;
        }
      }

      XPCSession.proxy.getter(v26);
      uint64_t v31 = v34;
      if (v34)
      {
        [v34 updatedBTRSSIResult:a1];
        swift_release();
        char v10 = (void *)swift_unknownObjectRelease(v31);
      }

      else
      {
        char v10 = (void *)swift_release();
      }

      uint64_t v12 = v21;
      char v13 = v19;
    }
  }

      v1 |= 8uLL;
      if ((a1 & 0x10) != 0)
      {
LABEL_34:
        v1 |= 0x10uLL;
        if ((a1 & 0x20) != 0)
        {
LABEL_35:
          v1 |= 0x20uLL;
          if ((a1 & 0x40) != 0)
          {
LABEL_36:
            v1 |= 0x40uLL;
            if ((a1 & 0x80) != 0)
            {
LABEL_37:
              v1 |= 0x80uLL;
              if ((a1 & 0x100) != 0)
              {
LABEL_38:
                v1 |= 0x100uLL;
                if ((a1 & 0x400) != 0) {
                  goto LABEL_39;
                }
LABEL_30:
                if ((a1 & 0x800) != 0) {
                  goto LABEL_40;
                }
                goto LABEL_31;
              }

      swift_once(&qword_10099B700, sub_100651100);
      goto LABEL_13;
    }

    v77 = v73;
    v78 = v74;
    v56 = v75;
    v79 = v96;
    v55 = v93;
    v54 = v90;
LABEL_29:
    v80 = *(void *)(v79 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
    v81 = type metadata accessor for BeaconKeyManager(0LL);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10014F014, v79, v80, (char *)&type metadata for () + 8, v81);
    v82 = v110[0];
    v52 = (uint64_t)v97;
    v83 = sub_1007A6E24((uint64_t)v97, 1, v54, v98, v55, v77, v78, v56);
    v84 = v52 + *(int *)(v99 + 20);
    swift_retain();
    v85 = sub_1007C16C8(v83, v82);
    swift_release();
    v86 = v94;
    (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v94, v84, v101);
    v87 = sub_100004AEC(&qword_1009BDC68);
    swift_allocObject(v87, *(unsigned int *)(v87 + 48), *(unsigned __int16 *)(v87 + 52));
    v88 = QueuePool.Wrapper.init(identifier:blocks:)(v86, v85);
    swift_bridgeObjectRelease();
    v89 = type metadata accessor for Transaction(0LL);
    v110[0] = v88;
    __chkstk_darwin(v89);
    *(&v90 - 6) = v82;
    *(&v90 - 5) = v52;
    *(&v90 - 4) = 0LL;
    *(&v90 - 3) = 0LL;
    *(&v90 - 2) = (unint64_t)v110;
    swift_retain();
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.KeyGenerationOperation",  52LL,  2LL,  sub_100705BD4);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }

  __break(1u);
}

    swift_release(v34);
    return;
  }

  if (qword_10099B8B8 != -1) {
    swift_once(&qword_10099B8B8, sub_100713ED8);
  }
  BOOL v8 = type metadata accessor for Logger(0LL);
  sub_10000A720(v8, (uint64_t)qword_100A2B330);
  uint64_t v9 = swift_retain();
  char v10 = (os_log_s *)Logger.logObject.getter(v9);
  uint64_t v11 = static os_log_type_t.info.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    char v13 = swift_slowAlloc(32LL, -1LL);
    v39 = v13;
    *(_DWORD *)uint64_t v12 = 136446210;
    swift_bridgeObjectRetain(v5);
    *(void *)&uint64_t v35 = sub_1003F11D4(v6, v5, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, (char *)&v35 + 8, v12 + 4, v12 + 12);
    swift_release(a1);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "AnalyticsEvent not computing disallowed analytics event %{public}s.",  v12,  0xCu);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {

    swift_release(a1);
  }

    swift_release();
    return;
  }

  if (qword_10099B8B8 != -1) {
    swift_once(&qword_10099B8B8, sub_100713ED8);
  }
  BOOL v8 = type metadata accessor for Logger(0LL);
  sub_10000A720(v8, (uint64_t)qword_100A2B330);
  uint64_t v9 = swift_retain();
  char v10 = (os_log_s *)Logger.logObject.getter(v9);
  uint64_t v11 = static os_log_type_t.info.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    char v13 = swift_slowAlloc(32LL, -1LL);
    v41 = v13;
    *(_DWORD *)uint64_t v12 = 136446210;
    swift_bridgeObjectRetain(v5);
    *(void *)&int64_t v37 = sub_1003F11D4(v6, v5, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, (char *)&v37 + 8, v12 + 4, v12 + 12);
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "AnalyticsEvent not computing disallowed analytics event %{public}s.",  v12,  0xCu);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {

    swift_release();
  }

    swift_release();
    return;
  }

  if (qword_10099B8B8 != -1) {
    swift_once(&qword_10099B8B8, sub_100713ED8);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  sub_10000A720(v16, (uint64_t)qword_100A2B330);
  uint64_t v17 = swift_retain();
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  char v19 = static os_log_type_t.info.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    BOOL v21 = swift_slowAlloc(32LL, -1LL);
    v47 = v21;
    *(_DWORD *)uint64_t v20 = 136446210;
    swift_bridgeObjectRetain(v13);
    *(void *)&v43 = sub_1003F11D4(v14, v13, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, (char *)&v43 + 8, v20 + 4, v20 + 12);
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "AnalyticsEvent not computing disallowed analytics event %{public}s.",  v20,  0xCu);
    swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  else
  {

    swift_release();
  }

    swift_release();
    return;
  }

  if (qword_10099B8B8 != -1) {
    swift_once(&qword_10099B8B8, sub_100713ED8);
  }
  unint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10000A720(v6, (uint64_t)qword_100A2B330);
  uint64_t v7 = swift_retain();
  BOOL v8 = (os_log_s *)Logger.logObject.getter(v7);
  uint64_t v9 = static os_log_type_t.info.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    char v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    v39 = v11;
    *(_DWORD *)char v10 = 136446210;
    swift_bridgeObjectRetain(v3);
    *(void *)&uint64_t v35 = sub_1003F11D4(v4, v3, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, (char *)&v35 + 8, v10 + 4, v10 + 12);
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "AnalyticsEvent not computing disallowed analytics event %{public}s.",  v10,  0xCu);
    swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {

    swift_release();
  }

    swift_release(v40);
    return;
  }

  if (qword_10099B8B8 != -1) {
    swift_once(&qword_10099B8B8, sub_100713ED8);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  sub_10000A720(v12, (uint64_t)qword_100A2B330);
  char v13 = swift_retain();
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  uint64_t v15 = static os_log_type_t.info.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v17 = swift_slowAlloc(32LL, -1LL);
    v45 = v17;
    *(_DWORD *)uint64_t v16 = 136446210;
    swift_bridgeObjectRetain(v9);
    *(void *)&v41 = sub_1003F11D4(v10, v9, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, (char *)&v41 + 8, v16 + 4, v16 + 12);
    swift_release(a1);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "AnalyticsEvent not computing disallowed analytics event %{public}s.",  v16,  0xCu);
    swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  else
  {

    swift_release(a1);
  }

    swift_release();
    return;
  }

  if (qword_10099B8B8 != -1) {
    swift_once(&qword_10099B8B8, sub_100713ED8);
  }
  unint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10000A720(v6, (uint64_t)qword_100A2B330);
  uint64_t v7 = swift_retain();
  BOOL v8 = (os_log_s *)Logger.logObject.getter(v7);
  uint64_t v9 = static os_log_type_t.info.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    char v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    int64_t v37 = v11;
    *(_DWORD *)char v10 = 136446210;
    swift_bridgeObjectRetain(v3);
    *(void *)&int64_t v33 = sub_1003F11D4(v4, v3, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, (char *)&v33 + 8, v10 + 4, v10 + 12);
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "AnalyticsEvent not computing disallowed analytics event %{public}s.",  v10,  0xCu);
    swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {

    swift_release();
  }

    swift_release();
    return;
  }

  if (qword_10099B8B8 != -1) {
    swift_once(&qword_10099B8B8, sub_100713ED8);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_10000A720(v9, (uint64_t)qword_100A2B330);
  char v10 = swift_retain();
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  uint64_t v12 = static os_log_type_t.info.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    char v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    v41 = v14;
    *(_DWORD *)char v13 = 136446210;
    swift_bridgeObjectRetain(v6);
    *(void *)&int64_t v37 = sub_1003F11D4(v7, v6, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, (char *)&v37 + 8, v13 + 4, v13 + 12);
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "AnalyticsEvent not computing disallowed analytics event %{public}s.",  v13,  0xCu);
    swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {

    swift_release();
  }

    swift_release();
    return;
  }

  if (qword_10099B8B8 != -1) {
    swift_once(&qword_10099B8B8, sub_100713ED8);
  }
  BOOL v8 = type metadata accessor for Logger(0LL);
  sub_10000A720(v8, (uint64_t)qword_100A2B330);
  uint64_t v9 = swift_retain();
  char v10 = (os_log_s *)Logger.logObject.getter(v9);
  uint64_t v11 = static os_log_type_t.info.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    char v13 = swift_slowAlloc(32LL, -1LL);
    v39 = v13;
    *(_DWORD *)uint64_t v12 = 136446210;
    swift_bridgeObjectRetain(v5);
    *(void *)&uint64_t v35 = sub_1003F11D4(v6, v5, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, (char *)&v35 + 8, v12 + 4, v12 + 12);
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "AnalyticsEvent not computing disallowed analytics event %{public}s.",  v12,  0xCu);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {

    swift_release();
  }

    swift_release();
    return;
  }

  if (qword_10099B8B8 != -1) {
    swift_once(&qword_10099B8B8, sub_100713ED8);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_10000A720(v9, (uint64_t)qword_100A2B330);
  char v10 = swift_retain();
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  uint64_t v12 = static os_log_type_t.info.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    char v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    v41 = v14;
    *(_DWORD *)char v13 = 136446210;
    swift_bridgeObjectRetain(v6);
    *(void *)&int64_t v37 = sub_1003F11D4(v7, v6, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, (char *)&v37 + 8, v13 + 4, v13 + 12);
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "AnalyticsEvent not computing disallowed analytics event %{public}s.",  v13,  0xCu);
    swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {

    swift_release();
  }

    swift_release();
    return;
  }

  if (qword_10099B8B8 != -1) {
    swift_once(&qword_10099B8B8, sub_100713ED8);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_10000A720(v7, (uint64_t)qword_100A2B330);
  BOOL v8 = swift_retain();
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  char v10 = static os_log_type_t.info.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    v39 = v12;
    *(_DWORD *)uint64_t v11 = 136446210;
    swift_bridgeObjectRetain(v4);
    *(void *)&uint64_t v35 = sub_1003F11D4(v5, v4, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, (char *)&v35 + 8, v11 + 4, v11 + 12);
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "AnalyticsEvent not computing disallowed analytics event %{public}s.",  v11,  0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {

    swift_release();
  }

    swift_release();
    return;
  }

  if (qword_10099B8B8 != -1) {
    swift_once(&qword_10099B8B8, sub_100713ED8);
  }
  char v19 = type metadata accessor for Logger(0LL);
  sub_10000A720(v19, (uint64_t)qword_100A2B330);
  uint64_t v20 = swift_retain();
  BOOL v21 = (os_log_s *)Logger.logObject.getter(v20);
  uint64_t v22 = static os_log_type_t.info.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    v53 = v24;
    *(_DWORD *)uint64_t v23 = 136446210;
    swift_bridgeObjectRetain(v16);
    *(void *)&v49 = sub_1003F11D4(v17, v16, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, (char *)&v49 + 8, v23 + 4, v23 + 12);
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "AnalyticsEvent not computing disallowed analytics event %{public}s.",  v23,  0xCu);
    swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  else
  {

    swift_release();
  }

    swift_release(v18);
    return;
  }

  if (qword_10099B8B8 != -1) {
    swift_once(&qword_10099B8B8, sub_100713ED8);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  sub_10000A720(v12, (uint64_t)qword_100A2B330);
  char v13 = swift_retain();
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  uint64_t v15 = static os_log_type_t.info.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v17 = swift_slowAlloc(32LL, -1LL);
    v41 = v17;
    *(_DWORD *)uint64_t v16 = 136446210;
    swift_bridgeObjectRetain(v9);
    *(void *)&int64_t v37 = sub_1003F11D4(v10, v9, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, (char *)&v37 + 8, v16 + 4, v16 + 12);
    swift_release(a1);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "AnalyticsEvent not computing disallowed analytics event %{public}s.",  v16,  0xCu);
    swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  else
  {

    swift_release(a1);
  }

    swift_release();
    return;
  }

  if (qword_10099B8B8 != -1) {
    swift_once(&qword_10099B8B8, sub_100713ED8);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_10000A720(v7, (uint64_t)qword_100A2B330);
  BOOL v8 = swift_retain();
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  char v10 = static os_log_type_t.info.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    v39 = v12;
    *(_DWORD *)uint64_t v11 = 136446210;
    swift_bridgeObjectRetain(v4);
    *(void *)&uint64_t v35 = sub_1003F11D4(v5, v4, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, (char *)&v35 + 8, v11 + 4, v11 + 12);
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "AnalyticsEvent not computing disallowed analytics event %{public}s.",  v11,  0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {

    swift_release();
  }

    swift_release();
    return;
  }

  if (qword_10099B8B8 != -1) {
    swift_once(&qword_10099B8B8, sub_100713ED8);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_10000A720(v11, (uint64_t)qword_100A2B330);
  uint64_t v12 = swift_retain();
  char v13 = (os_log_s *)Logger.logObject.getter(v12);
  uint64_t v14 = static os_log_type_t.info.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    v43 = v16;
    *(_DWORD *)uint64_t v15 = 136446210;
    swift_bridgeObjectRetain(v8);
    *(void *)&v39 = sub_1003F11D4(v9, v8, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, (char *)&v39 + 8, v15 + 4, v15 + 12);
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "AnalyticsEvent not computing disallowed analytics event %{public}s.",  v15,  0xCu);
    swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {

    swift_release();
  }

    swift_release();
    return;
  }

  if (qword_10099B8B8 != -1) {
    swift_once(&qword_10099B8B8, sub_100713ED8);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  sub_10000A720(v14, (uint64_t)qword_100A2B330);
  uint64_t v15 = swift_retain();
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  uint64_t v17 = static os_log_type_t.info.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    char v19 = swift_slowAlloc(32LL, -1LL);
    v47 = v19;
    *(_DWORD *)uint64_t v18 = 136446210;
    swift_bridgeObjectRetain(v11);
    *(void *)&v43 = sub_1003F11D4(v12, v11, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, (char *)&v43 + 8, v18 + 4, v18 + 12);
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "AnalyticsEvent not computing disallowed analytics event %{public}s.",  v18,  0xCu);
    swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {

    swift_release();
  }

    swift_release();
    return;
  }

  if (qword_10099B8B8 != -1) {
    swift_once(&qword_10099B8B8, sub_100713ED8);
  }
  unint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10000A720(v6, (uint64_t)qword_100A2B330);
  uint64_t v7 = swift_retain();
  BOOL v8 = (os_log_s *)Logger.logObject.getter(v7);
  uint64_t v9 = static os_log_type_t.info.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    char v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    v39 = v11;
    *(_DWORD *)char v10 = 136446210;
    swift_bridgeObjectRetain(v3);
    *(void *)&uint64_t v35 = sub_1003F11D4(v4, v3, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, (char *)&v35 + 8, v10 + 4, v10 + 12);
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "AnalyticsEvent not computing disallowed analytics event %{public}s.",  v10,  0xCu);
    swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {

    swift_release();
  }

    swift_release();
    return;
  }

  if (qword_10099B8B8 != -1) {
    swift_once(&qword_10099B8B8, sub_100713ED8);
  }
  unint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10000A720(v6, (uint64_t)qword_100A2B330);
  uint64_t v7 = swift_retain();
  BOOL v8 = (os_log_s *)Logger.logObject.getter(v7);
  uint64_t v9 = static os_log_type_t.info.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    char v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    v39 = v11;
    *(_DWORD *)char v10 = 136446210;
    swift_bridgeObjectRetain(v3);
    *(void *)&uint64_t v35 = sub_1003F11D4(v4, v3, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, (char *)&v35 + 8, v10 + 4, v10 + 12);
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "AnalyticsEvent not computing disallowed analytics event %{public}s.",  v10,  0xCu);
    swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {

    swift_release();
  }

    swift_release();
    return;
  }

  if (qword_10099B8B8 != -1) {
    swift_once(&qword_10099B8B8, sub_100713ED8);
  }
  unint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10000A720(v6, (uint64_t)qword_100A2B330);
  uint64_t v7 = swift_retain();
  BOOL v8 = (os_log_s *)Logger.logObject.getter(v7);
  uint64_t v9 = static os_log_type_t.info.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    char v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    int64_t v37 = v11;
    *(_DWORD *)char v10 = 136446210;
    swift_bridgeObjectRetain(v3);
    *(void *)&int64_t v33 = sub_1003F11D4(v4, v3, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, (char *)&v33 + 8, v10 + 4, v10 + 12);
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "AnalyticsEvent not computing disallowed analytics event %{public}s.",  v10,  0xCu);
    swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {

    swift_release();
  }

    swift_release();
    return;
  }

  if (qword_10099B8B8 != -1) {
    swift_once(&qword_10099B8B8, sub_100713ED8);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  sub_10000A720(v15, (uint64_t)qword_100A2B330);
  uint64_t v16 = swift_retain();
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  uint64_t v18 = static os_log_type_t.info.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    char v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v20 = swift_slowAlloc(32LL, -1LL);
    v47 = v20;
    *(_DWORD *)char v19 = 136446210;
    swift_bridgeObjectRetain(v12);
    *(void *)&v43 = sub_1003F11D4(v13, v12, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, (char *)&v43 + 8, v19 + 4, v19 + 12);
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "AnalyticsEvent not computing disallowed analytics event %{public}s.",  v19,  0xCu);
    swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  else
  {

    swift_release();
  }

    swift_release();
    return;
  }

  if (qword_10099B8B8 != -1) {
    swift_once(&qword_10099B8B8, sub_100713ED8);
  }
  char v10 = type metadata accessor for Logger(0LL);
  sub_10000A720(v10, (uint64_t)qword_100A2B330);
  uint64_t v11 = swift_retain();
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  char v13 = static os_log_type_t.info.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    v43 = v15;
    *(_DWORD *)uint64_t v14 = 136446210;
    swift_bridgeObjectRetain(v7);
    *(void *)&v39 = sub_1003F11D4(v8, v7, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, (char *)&v39 + 8, v14 + 4, v14 + 12);
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "AnalyticsEvent not computing disallowed analytics event %{public}s.",  v14,  0xCu);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {

    swift_release();
  }

        BOOL v8 = (v24 - 1) & v24;
        uint64_t v7 = __clz(__rbit64(v24)) + (v6 << 6);
        continue;
      }

      break;
    }
  }

  else
  {
    LODWORD(v6) = v2 & 0x3F;
    if (v6 > 6)
    {
      uint64_t v9 = (unint64_t)(v3 + 63) >> 6;
      uint64_t v24 = *(void *)(a1 + 64);
      if (v24)
      {
        unint64_t v6 = 1LL;
        goto LABEL_33;
      }

      if (v6 >= 8)
      {
        uint64_t v24 = *(void *)(a1 + 72);
        if (v24)
        {
          unint64_t v6 = 2LL;
        }

        else
        {
          uint64_t v24 = *(void *)(a1 + 80);
          if (!v24) {
            goto LABEL_40;
          }
          unint64_t v6 = 3LL;
        }

        goto LABEL_33;
      }
    }
  }

  return 0LL;
}

uint64_t sub_10000D010(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(dword_10099CAE4);
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_100015D58;
  return sub_10000D094(a1, a3, a2, a4, a5);
}

uint64_t sub_10000D094(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 168) = a4;
  *(void *)(v5 + 176) = a5;
  *(_BYTE *)(v5 + 296) = a2;
  *(void *)(v5 + 160) = a1;
  uint64_t v6 = type metadata accessor for XPCActivity.Criteria.Options(0LL);
  *(void *)(v5 + 184) = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for XPCActivity.Priority(0LL);
  *(void *)(v5 + 192) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v5 + 200) = v8;
  *(void *)(v5 + 208) = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for XPCActivity.Criteria(0LL);
  *(void *)(v5 + 216) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v5 + 224) = v10;
  *(void *)(v5 + 232) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_10099C818);
  *(void *)(v5 + 240) = v11;
  *(void *)(v5 + 248) = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10000D16C, 0LL, 0LL);
}

uint64_t sub_10000D16C()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C838 + dword_10099C838);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C83C);
    *(void *)(v0 + 256) = v2;
    void *v2 = v0;
    v2[1] = sub_10000D258;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10000D258(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 256LL);
  *(void *)(*(void *)v1 + 264LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10000D2B4, 0LL, 0LL);
}

uint64_t sub_10000D2B4()
{
  uint64_t v1 = *(void *)(v0 + 264);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 264);
    swift_retain(v2);
    return swift_task_switch(sub_10000D4D0, v2, 0LL);
  }

  else
  {
    if (qword_10099B030 != -1) {
      swift_once(&qword_10099B030, sub_10000B2A8);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A29E58);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.default.getter(v6);
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = *(void *)(v0 + 264);
    if (v8)
    {
      unsigned __int8 v10 = *(_BYTE *)(v0 + 296);
      uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v12 = swift_slowAlloc(32LL, -1LL);
      uint64_t v20 = v12;
      *(_DWORD *)uint64_t v11 = 136446210;
      uint64_t v13 = sub_100571C70(v10);
      unint64_t v15 = v14;
      *(void *)(v0 + 120) = sub_1003F11D4(v13, v14, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease(v15);
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "                    FindMyNetworkPublishActivityService has finder disabled.                     Removing publis h criteria for policy %{public}s.",  v11,  0xCu);
      swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    swift_release(v9);
    uint64_t v16 = *(void *)(v0 + 248);
    uint64_t v17 = *(void *)(v0 + 232);
    uint64_t v18 = *(void *)(v0 + 208);
    uint64_t v19 = *(void *)(v0 + 184);
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 224) + 56LL))( *(void *)(v0 + 160),  1LL,  1LL,  *(void *)(v0 + 216));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10000D4D0()
{
  uint64_t v1 = v0[33];
  uint64_t v2 = sub_100015C48( (unint64_t *)&qword_10099CAE8,  255LL,  type metadata accessor for FinderStateObserver,  (uint64_t)&unk_1007FE30C);
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[34] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10000D578;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[31],  v0[33],  v2,  0x6E4965746174735FLL,  0xEC00000029286F66LL,  sub_100015C40,  v1,  v0[30]);
}

uint64_t sub_10000D578()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 264LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 272LL));
  swift_release(v1);
  return swift_task_switch(sub_10000D5D4, 0LL, 0LL);
}

uint64_t sub_10000D5D4()
{
  uint64_t v1 = *(unsigned __int8 **)(v0 + 248);
  uint64_t v2 = type metadata accessor for FinderStateInfo(0LL);
  if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(v1, 1LL, v2) == 1)
  {
    sub_100015794((uint64_t)v1, &qword_10099C818);
LABEL_7:
    if (qword_10099B030 != -1) {
      swift_once(&qword_10099B030, sub_10000B2A8);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    uint64_t v9 = sub_10000A720(v8, (uint64_t)qword_100A29E58);
    unsigned __int8 v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.default.getter(v10);
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = *(void *)(v0 + 264);
    if (v12)
    {
      unsigned __int8 v14 = *(_BYTE *)(v0 + 296);
      unint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v16 = swift_slowAlloc(32LL, -1LL);
      uint64_t v24 = v16;
      *(_DWORD *)unint64_t v15 = 136446210;
      uint64_t v17 = sub_100571C70(v14);
      unint64_t v19 = v18;
      *(void *)(v0 + 120) = sub_1003F11D4(v17, v18, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v15 + 4, v15 + 12);
      swift_bridgeObjectRelease(v19);
      _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "                    FindMyNetworkPublishActivityService has finder disabled.                     Removing publis h criteria for policy %{public}s.",  v15,  0xCu);
      swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1LL, -1LL);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    swift_release(v13);
    uint64_t v20 = *(void *)(v0 + 248);
    uint64_t v21 = *(void *)(v0 + 232);
    uint64_t v22 = *(void *)(v0 + 208);
    uint64_t v23 = *(void *)(v0 + 184);
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 224) + 56LL))( *(void *)(v0 + 160),  1LL,  1LL,  *(void *)(v0 + 216));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  int v3 = *v1;
  sub_100012F40((uint64_t)v1);
  if (v3 != 1) {
    goto LABEL_7;
  }
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  uint64_t v4 = qword_100A2A710;
  *(void *)(v0 + 280) = qword_100A2A710;
  uint64_t v5 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain(v4);
  uint64_t v6 = (void *)swift_task_alloc(v5);
  *(void *)(v0 + 288) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10000D89C;
  return unsafeBlocking<A>(_:)(v0 + 128, sub_100015814, v4, &type metadata for Configuration);
}

uint64_t sub_10000D89C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 280LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 288LL));
  swift_release(v1);
  return swift_task_switch(sub_10000D8F8, 0LL, 0LL);
}

uint64_t sub_10000D8F8()
{
  uint64_t v1 = *(void *)(v0 + 128);
  sub_1006A05FC(v1);
  double v3 = v2;
  swift_bridgeObjectRelease(v1);
  if ((~*(void *)&v3 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v3 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if (v3 < 9.22337204e18)
  {
    uint64_t v5 = *(void *)(v0 + 200);
    uint64_t v4 = *(void *)(v0 + 208);
    uint64_t v7 = *(void *)(v0 + 184);
    uint64_t v6 = *(void *)(v0 + 192);
    char v8 = *(_BYTE *)(v0 + 296);
    uint64_t v9 = sub_100571D3C(*(void *)(v0 + 168), *(void *)(v0 + 176), v8);
    (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))( v4,  enum case for XPCActivity.Priority.maintenance(_:),  v6);
    sub_10000F148(v8);
    XPCActivity.Criteria.init(priority:repeating:delay:gracePeriod:interval:options:)(v4, 0LL, v9, (uint64_t)v3, 0LL, v7);
    if (qword_10099B030 == -1) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }

LABEL_10:
  __break(1u);
LABEL_11:
  swift_once(&qword_10099B030, sub_10000B2A8);
LABEL_5:
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = sub_10000A720(v10, (uint64_t)qword_100A29E58);
  BOOL v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = *(unsigned __int8 *)(v0 + 296);
    unint64_t v15 = (_DWORD *)swift_slowAlloc(32LL, -1LL);
    swift_slowAlloc(32LL, -1LL);
    *unint64_t v15 = 136446722;
    __asm { BR              X9 }
  }

  uint64_t v16 = *(void *)(v0 + 264);

  swift_release(v16);
  (*(void (**)(void, void, void))(*(void *)(v0 + 224) + 32LL))( *(void *)(v0 + 160),  *(void *)(v0 + 232),  *(void *)(v0 + 216));
  uint64_t v17 = *(void *)(v0 + 248);
  uint64_t v18 = *(void *)(v0 + 232);
  uint64_t v19 = *(void *)(v0 + 208);
  uint64_t v20 = *(void *)(v0 + 184);
  (*(void (**)(void, void, uint64_t, void))(*(void *)(v0 + 224) + 56LL))( *(void *)(v0 + 160),  0LL,  1LL,  *(void *)(v0 + 216));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

  uint64_t v10 = *v14;
  *(void *)(*v14 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(_BYTE *)(*(void *)(v10 + 48) + a2) = v15;
  uint64_t v11 = *(void *)(v10 + 16);
  BOOL v12 = __OFADD__(v11, 1LL);
  os_log_type_t v13 = v11 + 1;
  if (v12)
  {
    __break(1u);
    JUMPOUT(0x1000C8F68LL);
  }

  *(void *)(v10 + 16) = v13;
  return result;
}

  BOOL v12 = *v16;
  *(void *)(*v16 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(_BYTE *)(*(void *)(v12 + 48) + a2) = v17;
  os_log_type_t v13 = *(void *)(v12 + 16);
  uint64_t v14 = __OFADD__(v13, 1LL);
  unint64_t v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
    JUMPOUT(0x1000CA27CLL);
  }

  *(void *)(v12 + 16) = v15;
  return result;
}

  uint64_t v19 = *v26;
  *(void *)(*v26 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t result = sub_10002218C( a1,  *(void *)(v19 + 48) + *(void *)(v25 + 72) * a2,  type metadata accessor for OwnedBeaconGroup);
  uint64_t v21 = *(void *)(v19 + 16);
  uint64_t v22 = __OFADD__(v21, 1LL);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
    __break(1u);
    JUMPOUT(0x1000CB624LL);
  }

  *(void *)(v19 + 16) = v23;
  return result;
}

  unint64_t v15 = *v20;
  *(void *)(*v20 + 8 * (a4 >> 6) + 56) |= 1LL << a4;
  uint64_t v16 = *(void *)(v15 + 48) + 24 * a4;
  *(void *)uint64_t v16 = v10;
  *(void *)(v16 + 8) = a2;
  *(_DWORD *)(v16 + 16) = a3;
  uint64_t v17 = *(void *)(v15 + 16);
  uint64_t v18 = __OFADD__(v17, 1LL);
  uint64_t v19 = v17 + 1;
  if (v18)
  {
    __break(1u);
    JUMPOUT(0x1000CDA50LL);
  }

  *(void *)(v15 + 16) = v19;
  return result;
}

  v45 = 0LL;
  v46 = 0LL;
LABEL_11:
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 520);
  uint64_t v18 = *(void *)(v0 + 448);
  uint64_t v19 = *(void *)(v0 + 432);
  uint64_t v20 = *(void *)(v0 + 384);
  v47 = *(void *)(v0 + 392);
  uint64_t v21 = *(void *)(v0 + 360);
  v48 = *(void *)(v0 + 352);
  v49 = *(void *)(v0 + 488);
  uint64_t v22 = *(int **)(v0 + 336);
  uint64_t v23 = v18 + *(int *)(v0 + 652);
  uint64_t v24 = type metadata accessor for Date(0LL);
  int64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56LL);
  v25(v21, 1LL, 1LL, v24);
  v17(v21 + v22[5], v18 + *(int *)(v19 + 20), v20);
  unint64_t v26 = v21 + v22[7];
  v17(v26, v23, v20);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v47 + 56))(v26, 0LL, 1LL, v20);
  v25(v21 + v22[9], 1LL, 1LL, v24);
  *(_BYTE *)(v21 + v22[6]) = 0;
  *(void *)(v21 + v22[8]) = _swiftEmptyArrayStorage;
  unint64_t v27 = (uint64_t *)(v21 + v22[10]);
  void *v27 = v46;
  v27[1] = v45;
  *(void *)(v21 + v22[11]) = _swiftEmptyArrayStorage;
  *(void *)(v21 + v22[12]) = _swiftEmptyArrayStorage;
  sub_10001DC4C(v21, v48, type metadata accessor for NotifyMeRequest.Subscription);
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v49);
  unint64_t v29 = *(void *)(v0 + 488);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v29 = sub_1004C51E8(0, *(void *)(v29 + 16) + 1LL, 1, *(void *)(v0 + 488));
  }
  uint64_t v31 = *(void *)(v29 + 16);
  uint64_t v30 = *(void *)(v29 + 24);
  if (v31 >= v30 >> 1) {
    unint64_t v29 = sub_1004C51E8(v30 > 1, v31 + 1, 1, v29);
  }
  v32 = *(void *)(v0 + 464);
  int64_t v33 = *(void *)(v0 + 448);
  int64_t v34 = *(void *)(v0 + 352);
  uint64_t v35 = *(void *)(v0 + 360);
  unint64_t v36 = *(void *)(v0 + 344);
  int64_t v37 = *(void *)(v0 + 480) + 1LL;
  *(void *)(v29 + 16) = v31 + 1;
  sub_10002218C( v34,  v29 + ((*(unsigned __int8 *)(v36 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))
  + *(void *)(v36 + 72) * v31,
    type metadata accessor for NotifyMeRequest.Subscription);
  sub_100018C68(v35, type metadata accessor for NotifyMeRequest.Subscription);
  sub_100018C68(v33, type metadata accessor for NotifyWhenFoundRecord);
  if (v37 == v32)
  {
    swift_bridgeObjectRelease();
    uint64_t v38 = *(void *)(*(void *)(v0 + 224) + 128LL);
    v39 = unk_1009A267C;
    v50 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1009A2678 + dword_1009A2678);
    swift_retain();
    v40 = (void *)swift_task_alloc(v39);
    *(void *)(v0 + 552) = v40;
    *v40 = v0;
    v40[1] = sub_100113F2C;
    return v50(v29, v38);
  }

  else
  {
    v42 = *(void *)(v0 + 472);
    v43 = *(void *)(v0 + 480) + 1LL;
    *(void *)(v0 + 480) = v43;
    *(void *)(v0 + 488) = v29;
    sub_10001DC4C( *(void *)(v0 + 216)
    + ((*(unsigned __int8 *)(v0 + 648) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 648))
    + v42 * v43,
      *(void *)(v0 + 448),
      type metadata accessor for NotifyWhenFoundRecord);
    if (qword_10099B9E0 != -1) {
      swift_once(&qword_10099B9E0, sub_10076012C);
    }
    swift_beginAccess(&xmmword_1009BED80, v0 + 136, 0LL, 0LL);
    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
    if (*(void *)(v0 + 80))
    {
      sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
      sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
      v51 = (uint64_t (__cdecl *)())((char *)&dword_10099C890 + dword_10099C890);
      v44 = (void *)swift_task_alloc(unk_10099C894);
      *(void *)(v0 + 496) = v44;
      *v44 = v0;
      v44[1] = sub_1001135A0;
      return v51();
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

  uint64_t v18 = *(void *)(v0 + 264);
  uint64_t v20 = *(void *)(v0 + 240);
  uint64_t v19 = *(void *)(v0 + 248);
  uint64_t v21 = *(void *)(v0 + 232);
  ContinuousClock.init()(v15);
  *(_OWORD *)(v0 + 176) = xmmword_1007F70D0;
  *(void *)(v0 + 144) = 0LL;
  *(void *)(v0 + 136) = 0LL;
  *(_BYTE *)(v0 + 152) = 1;
  uint64_t v22 = sub_100007864( &qword_1009A61B8,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock,  (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v18, v22);
  uint64_t v23 = sub_100007864( &qword_1009AE520,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant,  (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 176, v21, v23);
  uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  *(void *)(v0 + 288) = v24;
  v24(v19, v21);
  int64_t v25 = (void *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  *(void *)(v0 + 296) = v25;
  *int64_t v25 = v0;
  v25[1] = sub_1001FAF28;
  dispatch thunk of Clock.sleep(until:tolerance:)(*(void *)(v0 + 256), v0 + 136, *(void *)(v0 + 264), v22);
}

  sub_100018C68((uint64_t)v16, type metadata accessor for OwnedBeaconRecord);
  return v22 & 1;
}

  swift_release();
  swift_task_dealloc(*(void *)(v0 + 184));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v13);
}

  __break(1u);
  return result;
}

  __break(1u);
LABEL_11:
  swift_once(&qword_10099B028, sub_10000B224);
LABEL_5:
  uint64_t v20 = v18 & ~(v18 >> 63);
  uint64_t v21 = type metadata accessor for Logger(0LL);
  sub_10000A720(v21, (uint64_t)qword_100A29E40);
  uint64_t v22 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  uint64_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, (os_log_type_t)v24))
  {
    uint64_t v31 = v24;
    v32 = v20;
    int64_t v25 = a3;
    unint64_t v26 = (_DWORD *)swift_slowAlloc(54LL, -1LL);
    uint64_t v30 = swift_slowAlloc(96LL, -1LL);
    int64_t v34 = v30;
    *unint64_t v26 = 136447490;
    v29[3] = v13;
    __asm { BR              X9 }
  }

  unint64_t v27 = *(void (**)(char *, uint64_t))(v7 + 8);
  v27(v10, v6);
  v27(v12, v6);
  return v20;
}

  uint64_t v19 = *v1;
  uint64_t v20 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
  uint64_t v21 = swift_unknownObjectRetain(v19);
  a1 = (void *)swift_dynamicCastClass(v21, v20);
  if (!a1)
  {
    swift_unknownObjectRelease(v19);
    a1 = _swiftEmptyArrayStorage;
  }

  uint64_t result = type metadata accessor for Bit(0LL);
  uint64_t v22 = *(void *)(result - 8);
  uint64_t v23 = *(void *)(v22 + 72);
  if (!v23) {
    goto LABEL_21;
  }
  uint64_t v24 = v8
      + v23 * v6
      - ((void)a1
       + ((*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80)));
  if (v23 != -1 || v24 != 0x8000000000000000LL)
  {
    int64_t v25 = v24 / v23;
    uint64_t result = v7 + v25;
    if (!__OFADD__(v7, v25))
    {
      uint64_t v4 = a1[2];
      if (result >= v4) {
        return (uint64_t)a1;
      }
LABEL_23:
      sub_10069FB98(result, v4, 0LL);
      return (uint64_t)a1;
    }

  uint64_t result = (void *)(v4 + v9);
  if (__OFADD__(v4, v9)) {
    goto LABEL_43;
  }
  if (v18 < (uint64_t)result)
  {
    if (v18 + 0x4000000000000000LL < 0)
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }

    uint64_t v21 = 2 * v18;
  }

  uint64_t v38 = v12;
  uint64_t v7 = a3;
  uint64_t result = (void *)sub_10069F034((uint64_t)result);
  char v8 = v5[2];
  uint64_t v22 = v5[3];
  uint64_t v6 = (v22 >> 1) - v8;
  if (__OFSUB__(v22 >> 1, v8)) {
    goto LABEL_44;
  }
  uint64_t v24 = *v5;
  uint64_t v23 = v5[1];
  uint64_t result = (void *)type metadata accessor for Bit(0LL);
  int64_t v25 = *(result - 1);
  uint64_t v4 = *(void *)(v25 + 72);
  char v8 = v23 + v4 * v8 + v4 * v6;
  if ((v22 & 1) == 0) {
    goto LABEL_45;
  }
  unint64_t v26 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
  unint64_t v27 = swift_unknownObjectRetain(v24);
  uint64_t v28 = (void *)swift_dynamicCastClass(v27, v26);
  unint64_t v29 = v41;
  if (!v28)
  {
    swift_unknownObjectRelease(v24);
    uint64_t v28 = _swiftEmptyArrayStorage;
  }

  uint64_t v30 = *(unsigned __int8 *)(v25 + 80);
  uint64_t v31 = v28[2];
  if ((void *)v8 == (void *)((char *)v28 + ((v30 + 32) & ~v30) + v31 * v4))
  {
    uint64_t v35 = v28[3];
    uint64_t result = (void *)swift_release();
    unint64_t v36 = (v35 >> 1) - v31;
    uint64_t v20 = __OFADD__(v6, v36);
    int64_t v37 = v6 + v36;
    if (v20)
    {
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }

    while (1)
    {
      unint64_t v29 = v41;
      v32 = v37 - v6;
      if (!__OFSUB__(v37, v6)) {
        break;
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      int64_t v37 = v6;
    }
  }

  else
  {
    uint64_t result = (void *)swift_release();
    v32 = 0LL;
  }

  if (v29 == v7)
  {
    if (v9 <= 0)
    {
      uint64_t v9 = 0LL;
      unint64_t v29 = v7;
      goto LABEL_34;
    }

    __break(1u);
    goto LABEL_47;
  }

  if (v32 < v9)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }

  if (v9 < 0)
  {
LABEL_52:
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_53;
  }

  int64_t v33 = a2 + v4 * v7;
  if (v33 < v8 + v4 * v9 && v8 < v33 + v4 * v9)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_53:
    __break(1u);
    return result;
  }

  uint64_t result = (void *)swift_arrayInitWithCopy(v8);
  if (v9)
  {
    if (__OFADD__(v6, v9))
    {
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }

    uint64_t result = sub_10069F694((void *)(v6 + v9));
  }

      v40 = v6;
      v41 = Date.timeIntervalSinceNow.getter(v39);
      sub_100018C68((uint64_t)v21, type metadata accessor for BeaconObservation);
      v42 = v74;
      sub_10001DC4C((uint64_t)v28, v74, type metadata accessor for BeaconObservation);
      if (v41 >= v33)
      {
        sub_100018C68(v42, type metadata accessor for BeaconObservation);
LABEL_16:
        v49 = v70;
        sub_10002218C((uint64_t)v28, v70, type metadata accessor for BeaconObservation);
        if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0) {
          sub_100032AA8(0, v29[2] + 1LL, 1);
        }
        unint64_t v29 = v78;
        v51 = v78[2];
        v50 = v78[3];
        if (v51 >= v50 >> 1)
        {
          sub_100032AA8(v50 > 1, v51 + 1, 1);
          unint64_t v29 = v78;
        }

        v29[2] = v51 + 1;
        uint64_t v35 = v72;
        sub_10002218C(v49, (uint64_t)v29 + v67 + v51 * v72, type metadata accessor for BeaconObservation);
        uint64_t v6 = v40;
        uint64_t v9 = v68;
        goto LABEL_5;
      }

      sub_1006F6874(v4, v6, v2 != 0, a1, &qword_1009A9C70, &OBJC_CLASS___SPUnauthorizedTrackingObservation_ptr);
      uint64_t v10 = v14;
      sub_100086B14(v4, v6, v2 != 0);
      return v10;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

  v32 = !v17;
  sub_100187C98(v12, v13, v14, v15, v32);
  type metadata accessor for SPSeparationEventType(0LL);
  v37[0] = a3;
  uint64_t result = (id)_diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v33, v37, v33, &type metadata for Int);
  __break(1u);
  return result;
}

    BOOL v12 = 0;
    return v12 & 1;
  }

  if ((a4 & 0x3000000000000000LL) != 0) {
    goto LABEL_10;
  }
  sub_10078F028(a1, a2, sub_10001736C);
  sub_10078F028(a3, a4, sub_10001736C);
  uint64_t v9 = a1;
  uint64_t v10 = a2;
LABEL_9:
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v9, v10);
  BOOL v12 = v11;
  sub_10078F028(a3, a4, sub_100016F9C);
  sub_10078F028(a1, a2, sub_100016F9C);
  return v12 & 1;
}

  unint64_t v36 = swift_getKeyPath(&unk_10081CC20);
  int64_t v37 = static AnyKeyPath.== infix(_:_:)(a2, v36);
  uint64_t result = swift_release();
  if ((v37 & 1) == 0) {
    return result;
  }
  v39 = swift_getKeyPath(&unk_10081CC48);
  sub_1006A1FC0(v39, v68, v11);
  swift_release();
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
  {
    v40 = &qword_10099D8A0;
    v41 = (uint64_t)v11;
    return sub_100015794(v41, v40);
  }

  (*(void (**)(char *, void *, uint64_t))(v13 + 32))(v15, v11, v12);
  v42 = *(void *)(v3 + 16);
  swift_unownedRetainStrong(v42);
  if (!v42)
  {
    v71 = 0LL;
    v69 = 0u;
    v70 = 0u;
    v43 = (uint64_t)v67;
    goto LABEL_20;
  }

  sub_100504C28((uint64_t)v15, (uint64_t)&v69);
  swift_release();
  v43 = (uint64_t)v67;
  if (!*((void *)&v70 + 1))
  {
LABEL_20:
    sub_100015794((uint64_t)&v69, (uint64_t *)&unk_1009A9C40);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 56))(v43, 1LL, 1LL, v66);
    goto LABEL_21;
  }

  v44 = sub_100004AEC(&qword_1009B0530);
  v45 = v66;
  v46 = swift_dynamicCast(v43, &v69, v44, v66, 6LL);
  v47 = v65;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v65 + 56))(v43, v46 ^ 1u, 1LL, v45);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v43, 1LL, v45) == 1)
  {
LABEL_21:
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    v40 = (uint64_t *)&unk_1009A9C30;
    v41 = v43;
    return sub_100015794(v41, v40);
  }

  v48 = v15;
  v49 = v64;
  v50 = sub_10002218C(v43, v64, type metadata accessor for OwnedBeaconRecord);
  LODWORD(v68) = static os_log_type_t.default.getter(v50);
  if (qword_10099B3E8 != -1) {
    swift_once(&qword_10099B3E8, sub_1003E02E8);
  }
  v51 = qword_100A2A8F0;
  v52 = sub_100004AEC((uint64_t *)&unk_10099D740);
  v53 = swift_allocObject(v52, 72LL, 7LL);
  *(_OWORD *)(v53 + 16) = xmmword_1007E67D0;
  v54 = UUID.uuidString.getter(v53);
  v56 = v55;
  *(void *)(v53 + 56) = &type metadata for String;
  *(void *)(v53 + 64) = sub_1000226F4();
  *(void *)(v53 + 32) = v54;
  *(void *)(v53 + 40) = v56;
  os_log(_:dso:log:_:_:)( v68,  &_mh_execute_header,  v51,  "BeaconKeyManager - self beacon UUID changed. Re-evaluating keys. %@",  67LL,  2LL,  v53);
  swift_bridgeObjectRelease();
  v57 = type metadata accessor for Transaction(0LL);
  __chkstk_darwin(v57);
  *(&v58 - 6) = v3;
  *(&v58 - 5) = v49;
  *((_BYTE *)&v58 - 32) = 2;
  *(&v58 - 3) = 0LL;
  *(&v58 - 2) = 0LL;
  static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.checkForMissingKeyMaps.forbeacon",  62LL,  2LL,  sub_1002D69C0);
  sub_100018C68(v49, type metadata accessor for OwnedBeaconRecord);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v48, v12);
}

uint64_t sub_10000DD34(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a2;
  *(void *)(v4 + 48) = a4;
  *(_BYTE *)(v4 + 96) = a3;
  *(void *)(v4 + 32) = a1;
  uint64_t v6 = type metadata accessor for XPCActivity.State(0LL);
  *(void *)(v4 + 56) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v4 + 64) = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v4 + 72) = swift_task_alloc(v8);
  *(void *)(v4 + 80) = swift_task_alloc(v8);
  return swift_task_switch(sub_10000DDB0, a4, 0LL);
}

uint64_t sub_10000DDB0()
{
  if (qword_10099B030 != -1) {
    swift_once(&qword_10099B030, sub_10000B2A8);
  }
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_10000A720(v5, (uint64_t)qword_100A29E58);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  uint64_t v7 = v6(v1, v4, v2);
  unint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter(v8);
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = *(void *)(v0 + 80);
  uint64_t v12 = *(void *)(v0 + 56);
  if (v10)
  {
    unsigned __int8 v13 = *(_BYTE *)(v0 + 96);
    uint64_t v37 = *(void *)(v0 + 64);
    uint64_t v14 = swift_slowAlloc(22LL, -1LL);
    uint64_t v38 = v6;
    uint64_t v39 = swift_slowAlloc(64LL, -1LL);
    uint64_t v15 = v39;
    *(_DWORD *)uint64_t v14 = 136446466;
    uint64_t v16 = sub_100571C70(v13);
    *(void *)(v0 + 16) = sub_1003F11D4(v16, v17, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    uint64_t v18 = sub_100015C48( &qword_10099CAD8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity.State,  (uint64_t)&protocol conformance descriptor for XPCActivity.State);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter(v12, v18);
    *(void *)(v0 + 24) = sub_1003F11D4(v19, v20, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease();
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
    v21(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Publish activity %{public}s, state: %s.", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 2LL, (char *)&type metadata for Any + 8);
    uint64_t v22 = v15;
    uint64_t v6 = v38;
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 64) + 8LL);
    v21(*(void *)(v0 + 80), *(void *)(v0 + 56));
  }

  uint64_t v24 = *(void *)(v0 + 64);
  uint64_t v23 = *(void *)(v0 + 72);
  uint64_t v25 = *(void *)(v0 + 56);
  v6(v23, *(void *)(v0 + 40), v25);
  int v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 88))(v23, v25);
  if (v26 == enum case for XPCActivity.State.checkIn(_:) || v26 == enum case for XPCActivity.State.wait(_:)) {
    goto LABEL_11;
  }
  if (v26 == enum case for XPCActivity.State.run(_:))
  {
    uint64_t v30 = swift_task_alloc(dword_10099C6BC);
    *(void *)(v0 + 88) = v30;
    *(void *)uint64_t v30 = v0;
    *(void *)(v30 + 8) = sub_10000E200;
    uint64_t v31 = *(void *)(v0 + 48);
    char v32 = *(_BYTE *)(v0 + 96);
    *(void *)(v30 + 144) = v31;
    *(_BYTE *)(v30 + 232) = v32;
    return swift_task_switch(sub_10000E2F4, v31, 0LL);
  }

  if (v26 != enum case for XPCActivity.State.defer(_:))
  {
    if (v26 != enum case for XPCActivity.State.continue(_:) && v26 != enum case for XPCActivity.State.done(_:))
    {
      if (v26 == enum case for XPCActivity.State.invalidated(_:)) {
        *(_BYTE *)(*(void *)(v0 + 48) + 176LL) = 1;
      }
      else {
        v21(*(void *)(v0 + 72), *(void *)(v0 + 56));
      }
    }

LABEL_11:
    uint64_t v28 = *(void *)(v0 + 72);
    swift_task_dealloc(*(void *)(v0 + 80));
    swift_task_dealloc(v28);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v33 = type metadata accessor for XPCActivity(0LL);
  uint64_t v34 = sub_100015C48( &qword_10099CAD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity,  (uint64_t)&protocol conformance descriptor for XPCActivity);
  uint64_t v35 = dispatch thunk of Actor.unownedExecutor.getter(v33, v34);
  return swift_task_switch(sub_10000E188, v35, v36);
}

    v20[(v14 >> 6) + 8] |= 1LL << v14;
    uint64_t v24 = (uint64_t *)(v20[6] + 16 * v14);
    *uint64_t v24 = a3;
    v24[1] = a4;
    uint64_t v25 = (void *)(v20[7] + 16 * v14);
    *uint64_t v25 = a1;
    v25[1] = a2;
    int v26 = v20[2];
    unint64_t v27 = __OFADD__(v26, 1LL);
    uint64_t v28 = v26 + 1;
    if (!v27)
    {
      v20[2] = v28;
      swift_bridgeObjectRetain(a4);
      return;
    }

    goto LABEL_14;
  }

  sub_10004A0B4(v17, a5 & 1);
  uint64_t v22 = sub_10030CF14(a3, a4);
  if ((v18 & 1) == (v23 & 1))
  {
    uint64_t v14 = v22;
    unint64_t v20 = (void *)*v6;
    if ((v18 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v20[(v14 >> 6) + 8] |= 1LL << v14;
    uint64_t v24 = (uint64_t *)(v20[6] + 16 * v14);
    *uint64_t v24 = a3;
    v24[1] = a4;
    uint64_t v25 = (void *)(v20[7] + 16 * v14);
    *uint64_t v25 = a1;
    v25[1] = a2;
    int v26 = v20[2];
    unint64_t v27 = __OFADD__(v26, 1LL);
    uint64_t v28 = v26 + 1;
    if (!v27)
    {
      v20[2] = v28;
      swift_bridgeObjectRetain(a4);
      return;
    }

    goto LABEL_14;
  }

  sub_10004B4C8(v17, a5 & 1);
  uint64_t v22 = sub_10030CF14(a3, a4);
  if ((v18 & 1) == (v23 & 1))
  {
    uint64_t v14 = v22;
    unint64_t v20 = (void *)*v6;
    if ((v18 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v20[(v14 >> 6) + 8] |= 1LL << v14;
    uint64_t v24 = (uint64_t *)(v20[6] + 16 * v14);
    *uint64_t v24 = a2;
    v24[1] = a3;
    *(void *)(v20[7] + 8 * v14) = a1;
    uint64_t v25 = v20[2];
    int v26 = __OFADD__(v25, 1LL);
    unint64_t v27 = v25 + 1;
    if (!v26)
    {
      v20[2] = v27;
      swift_bridgeObjectRetain(a3);
      return;
    }

    goto LABEL_14;
  }

  sub_10005753C(v17, a4 & 1, a5);
  uint64_t v22 = sub_10030CF14(a2, a3);
  if ((v18 & 1) == (v23 & 1))
  {
    uint64_t v14 = v22;
    unint64_t v20 = (void *)*v7;
    if ((v18 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v20[(v14 >> 6) + 8] |= 1LL << v14;
    uint64_t v24 = (uint64_t *)(v20[6] + 16 * v14);
    *uint64_t v24 = a3;
    v24[1] = a4;
    uint64_t v25 = v20[7] + 16 * v14;
    *(void *)uint64_t v25 = a1;
    *(_BYTE *)(v25 + 8) = a2;
    int v26 = v20[2];
    unint64_t v27 = __OFADD__(v26, 1LL);
    uint64_t v28 = v26 + 1;
    if (!v27)
    {
      v20[2] = v28;
      swift_bridgeObjectRetain(a4);
      return;
    }

    goto LABEL_14;
  }

  sub_10004BDB0(v17, a5 & 1);
  uint64_t v22 = sub_10030CF14(a3, a4);
  if ((v18 & 1) == (v23 & 1))
  {
    uint64_t v14 = v22;
    unint64_t v20 = (void *)*v6;
    if ((v18 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v15[(v9 >> 6) + 8] |= 1LL << v9;
    uint64_t v19 = 8 * v9;
    *(void *)(v15[6] + v19) = a2;
    *(void *)(v15[7] + v19) = a1;
    unint64_t v20 = v15[2];
    uint64_t v21 = __OFADD__(v20, 1LL);
    uint64_t v22 = v20 + 1;
    if (!v21)
    {
      v15[2] = v22;
      uint64_t v23 = a2;
      return;
    }

    goto LABEL_14;
  }

  sub_10004DCD0(v12, a3 & 1);
  unint64_t v17 = sub_10030D388(a2);
  if ((v13 & 1) == (v18 & 1))
  {
    os_log_type_t v9 = v17;
    uint64_t v15 = (void *)*v4;
    if ((v13 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v22[(v16 >> 6) + 8] |= 1LL << v16;
    int v26 = v22[6] + 24 * v16;
    *(_BYTE *)int v26 = a3;
    *(void *)(v26 + 8) = a4;
    *(void *)(v26 + 16) = a5;
    unint64_t v27 = (void *)(v22[7] + 16 * v16);
    void *v27 = a1;
    v27[1] = a2;
    uint64_t v28 = v22[2];
    unint64_t v29 = __OFADD__(v28, 1LL);
    uint64_t v30 = v28 + 1;
    if (!v29)
    {
      v22[2] = v30;
      swift_bridgeObjectRetain(a5);
      return;
    }

    goto LABEL_14;
  }

  sub_10004EACC(v19, a6 & 1);
  uint64_t v24 = sub_10030D3A8(a3, a4, a5);
  if ((v20 & 1) == (v25 & 1))
  {
    uint64_t v16 = v24;
    uint64_t v22 = (void *)*v7;
    if ((v20 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v20[(v14 >> 6) + 8] |= 1LL << v14;
    uint64_t v24 = (uint64_t *)(v20[6] + 16 * v14);
    *uint64_t v24 = a2;
    v24[1] = a3;
    *(void *)(v20[7] + 8 * v14) = a1;
    uint64_t v25 = v20[2];
    int v26 = __OFADD__(v25, 1LL);
    unint64_t v27 = v25 + 1;
    if (!v26)
    {
      v20[2] = v27;
      swift_bridgeObjectRetain(a3);
      return;
    }

    goto LABEL_14;
  }

  sub_10004EE04(v17, a4 & 1, a5);
  uint64_t v22 = sub_10030CF14(a2, a3);
  if ((v18 & 1) == (v23 & 1))
  {
    uint64_t v14 = v22;
    unint64_t v20 = (void *)*v7;
    if ((v18 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v17[(v11 >> 6) + 8] |= 1LL << v11;
    uint64_t v22 = 8 * v11;
    *(void *)(v17[6] + v22) = a2;
    *(void *)(v17[7] + v22) = a1;
    uint64_t v23 = v17[2];
    uint64_t v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (!v24)
    {
      v17[2] = v25;
      return;
    }

    goto LABEL_14;
  }

  sub_10004F40C(v14, a3 & 1);
  unint64_t v20 = sub_10030D384(a2, v19);
  if ((v15 & 1) == (v21 & 1))
  {
    uint64_t v11 = v20;
    unint64_t v17 = (void *)*v5;
    if ((v15 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v16[(v10 >> 6) + 8] |= 1LL << v10;
    *(_BYTE *)(v16[6] + v10) = a2;
    *(_BYTE *)(v16[7] + v10) = a1 & 1;
    uint64_t v18 = v16[2];
    uint64_t v19 = __OFADD__(v18, 1LL);
    unint64_t v20 = v18 + 1;
    if (!v19)
    {
      v16[2] = v20;
      return result;
    }

    goto LABEL_14;
  }

  sub_10004FB40(result, a3 & 1);
  uint64_t result = sub_10030D190(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    BOOL v10 = result;
    uint64_t v16 = (void *)*v4;
    if ((v14 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    uint64_t v21 = (uint64_t *)(v18[6] + 16 * v12);
    os_log_s *v21 = a2;
    v21[1] = a3;
    *(_BYTE *)(v18[7] + v12) = a1 & 1;
    uint64_t v22 = v18[2];
    uint64_t v23 = __OFADD__(v22, 1LL);
    uint64_t v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      swift_bridgeObjectRetain(a3);
      return;
    }

    goto LABEL_14;
  }

  sub_100051384(v15, a4 & 1);
  uint64_t v19 = sub_10030CF14(a2, a3);
  if ((v16 & 1) == (v20 & 1))
  {
    uint64_t v12 = v19;
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v16[(v10 >> 6) + 8] |= 1LL << v10;
    *(_BYTE *)(v16[6] + v10) = a2;
    *(void *)(v16[7] + 8 * v10) = a1;
    uint64_t v19 = v16[2];
    unint64_t v20 = __OFADD__(v19, 1LL);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }

    goto LABEL_14;
  }

  sub_10005168C(result, a3 & 1);
  uint64_t result = sub_10030D6BC(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    BOOL v10 = result;
    uint64_t v16 = (void *)*v4;
    if ((v14 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v17[(v11 >> 6) + 8] |= 1LL << v11;
    uint64_t v22 = 8 * v11;
    *(void *)(v17[6] + v22) = a2;
    *(void *)(v17[7] + v22) = a1;
    uint64_t v23 = v17[2];
    uint64_t v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (!v24)
    {
      v17[2] = v25;
      return;
    }

    goto LABEL_14;
  }

  sub_1000540B8(v14, a3 & 1);
  unint64_t v20 = sub_10030D384(a2, v19);
  if ((v15 & 1) == (v21 & 1))
  {
    uint64_t v11 = v20;
    unint64_t v17 = (void *)*v5;
    if ((v15 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v20[(v14 >> 6) + 8] |= 1LL << v14;
    uint64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
    *uint64_t v25 = a3;
    v25[1] = a4;
    int v26 = (void *)(v20[7] + 16 * v14);
    *int v26 = a1;
    v26[1] = a2;
    unint64_t v27 = v20[2];
    uint64_t v28 = __OFADD__(v27, 1LL);
    unint64_t v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return sub_10001736C(a3, a4);
    }

    goto LABEL_14;
  }

  sub_100055258(v17, a5 & 1);
  uint64_t v23 = sub_10030D84C(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    uint64_t v14 = v23;
    unint64_t v20 = (void *)*v6;
    if ((v18 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v23[(v17 >> 6) + 8] |= 1LL << v17;
    unint64_t v27 = 8 * v17;
    *(void *)(v23[6] + v27) = a2;
    *(void *)(v23[7] + v27) = a1;
    uint64_t v28 = v23[2];
    unint64_t v29 = __OFADD__(v28, 1LL);
    uint64_t v30 = v28 + 1;
    if (!v29)
    {
      v23[2] = v30;
      uint64_t v31 = a2;
      return;
    }

    goto LABEL_14;
  }

  sub_100055C58(v20, a3 & 1, a5);
  uint64_t v25 = a4(a2);
  if ((v21 & 1) == (v26 & 1))
  {
    unint64_t v17 = v25;
    uint64_t v23 = (void *)*v12;
    if ((v21 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v22[(v16 >> 6) + 8] |= 1LL << v16;
    int v26 = (uint64_t *)(v22[6] + 16 * v16);
    *int v26 = a4;
    v26[1] = a5;
    unint64_t v27 = (void *)(v22[7] + 24 * v16);
    void *v27 = a1;
    v27[1] = a2;
    v27[2] = a3;
    uint64_t v28 = v22[2];
    unint64_t v29 = __OFADD__(v28, 1LL);
    uint64_t v30 = v28 + 1;
    if (!v29)
    {
      v22[2] = v30;
      swift_bridgeObjectRetain(a5);
      return;
    }

    goto LABEL_14;
  }

  sub_100056DB8(v19, a6 & 1);
  uint64_t v24 = sub_10030CF14(a4, a5);
  if ((v20 & 1) == (v25 & 1))
  {
    uint64_t v16 = v24;
    uint64_t v22 = (void *)*v7;
    if ((v20 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

      a2 = (a2 + 1) & v45;
    }

    while (((*(void *)(v47 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

    int v26 = *(void *)(v0 + 88);
    swift_task_dealloc(*(void *)(v0 + 96));
    swift_task_dealloc(v26);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v28 = *(void *)(v0 + 64) + 16LL;
  swift_beginAccess(v28, v0 + 16, 0LL, 0LL);
  Strong = swift_weakLoadStrong(v28);
  *(void *)(v0 + 104) = Strong;
  if (Strong)
  {
    uint64_t v30 = (void *)swift_task_alloc(dword_1009A1544);
    *(void *)(v0 + 112) = v30;
    *uint64_t v30 = v0;
    v30[1] = sub_1001046AC;
    return sub_100104B0C();
  }

  else
  {
    uint64_t v35 = type metadata accessor for XPCActivity(0LL);
    uint64_t v36 = sub_100015C48( &qword_10099CAD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity,  (uint64_t)&protocol conformance descriptor for XPCActivity);
    uint64_t v37 = dispatch thunk of Actor.unownedExecutor.getter(v35, v36);
    return swift_task_switch(sub_100104748, v37, v38);
  }

    v25[(v18 >> 6) + 8] |= 1LL << v18;
    unint64_t v27 = (uint64_t *)(v25[6] + 16 * v18);
    void *v27 = v12;
    v27[1] = v13;
    uint64_t v28 = (void *)(v25[7] + 16 * v18);
    *uint64_t v28 = v14;
    v28[1] = v15;
    unint64_t v29 = v25[2];
    uint64_t v30 = __OFADD__(v29, 1LL);
    uint64_t v31 = v29 + 1;
    if (v30)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }

    v25[2] = v31;
LABEL_13:
    char v32 = sub_100658360();
    if (v33)
    {
      uint64_t v36 = v32;
      uint64_t v37 = v33;
      uint64_t v38 = v34;
      uint64_t v39 = v35;
      do
      {
        v44 = (void *)*a5;
        v46 = sub_10030CF14(v36, v37);
        v47 = v44[2];
        v48 = (v45 & 1) == 0;
        v49 = v47 + v48;
        if (__OFADD__(v47, v48)) {
          goto LABEL_25;
        }
        v50 = v45;
        if (v44[3] < v49)
        {
          sub_10004B4C8(v49, 1LL);
          v51 = sub_10030CF14(v36, v37);
          if ((v50 & 1) != (v52 & 1)) {
            goto LABEL_27;
          }
          v46 = v51;
        }

        v53 = (void *)*a5;
        if ((v50 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v40 = (void *)(v53[7] + 16 * v46);
          swift_bridgeObjectRelease();
          *v40 = v38;
          v40[1] = v39;
        }

        else
        {
          v53[(v46 >> 6) + 8] |= 1LL << v46;
          v54 = (uint64_t *)(v53[6] + 16 * v46);
          *v54 = v36;
          v54[1] = v37;
          v55 = (void *)(v53[7] + 16 * v46);
          *v55 = v38;
          v55[1] = v39;
          v56 = v53[2];
          uint64_t v30 = __OFADD__(v56, 1LL);
          v57 = v56 + 1;
          if (v30) {
            goto LABEL_26;
          }
          v53[2] = v57;
        }

        uint64_t v36 = sub_100658360();
        uint64_t v37 = v41;
        uint64_t v38 = v42;
        uint64_t v39 = v43;
      }

      while (v41);
    }

    if (qword_10099B158 != -1) {
      swift_once(&qword_10099B158, sub_100171BBC);
    }
    uint64_t v23 = (dispatch_queue_s *)qword_1009A39F8;
    uint64_t v24 = swift_allocObject(&unk_1009420C8, 32LL, 7LL);
    *(void *)(v24 + 16) = sub_100177A68;
    *(void *)(v24 + 24) = v3;
    aBlock[4] = (uint64_t)sub_100095030;
    aBlock[5] = v24;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_100025BD4;
    aBlock[3] = (uint64_t)&unk_1009420E0;
    uint64_t v5 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v23, v5);
    _Block_release(v5);
    LOBYTE(v23) = swift_isEscapingClosureAtFileLocation(v24, "", 92LL, 507LL, 29LL, 1LL);
    swift_release();
    uint64_t result = swift_release();
    __break(1u);
LABEL_15:
    swift_once(&qword_10099B810, sub_10069374C);
  }

  return result;
}

      BOOL v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10) {
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
      goto LABEL_5;
    }

    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v14 + v8, v9 - v8);
  }

    *(void *)(v47[7] + 8 * v39) = 1LL;
LABEL_12:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v49 += 2;
    if (!--v48) {
      goto LABEL_3;
    }
  }

  sub_100049DAC(v72, v68);
  v73 = sub_10030CF14(v38, v50);
  if ((v10 & 1) != (v74 & 1)) {
    goto LABEL_56;
  }
  uint64_t v39 = v73;
  v47 = (void *)v126[0];
  if ((v10 & 1) != 0) {
    goto LABEL_11;
  }
LABEL_30:
  v47[(v39 >> 6) + 8] |= 1LL << v39;
  v75 = (uint64_t *)(v47[6] + 16 * v39);
  *v75 = v38;
  v75[1] = v50;
  *(void *)(v47[7] + 8 * v39) = 1LL;
  v76 = v47[2];
  v66 = __OFADD__(v76, 1LL);
  v67 = v76 + 1;
  if (!v66)
  {
LABEL_31:
    v47[2] = v67;
    swift_bridgeObjectRetain(v50);
    goto LABEL_12;
  }

  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

    swift_once(&qword_10099B220, sub_1002673AC);
    goto LABEL_4;
  }

  unint64_t v27 = (void (*)(void *))v2[16];
  if (v27)
  {
    uint64_t v28 = v2[17];
    LOBYTE(v63[0]) = 1;
    v64 = 0;
    swift_retain();
    v27(v63);
    sub_10002214C((uint64_t)v27, v28);
    sub_100015794((uint64_t)v63, &qword_1009A7950);
  }

  sub_100018C68((uint64_t)v6, type metadata accessor for OwnedBeaconRecord);
  return v18 & 1;
}

  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v18 = sub_10000A720(v10, (uint64_t)qword_100A2AE08);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  unint64_t v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "LocationMonitor: secureLocations feature is disabled. Not proceeding with starting monitor",  v21,  2u);
    swift_slowDealloc(v21, -1LL, -1LL);
  }
}

    unint64_t v17 = v9[v7[6]];
LABEL_12:
    sub_100018C68((uint64_t)v9, type metadata accessor for BeaconProductInfoRecord);
    uint64_t v18 = v84;
    [v84 setEligibleForPairing:v17];
    [v18 setHidden:*(unsigned __int8 *)(v1 + v7[7])];
    uint64_t v19 = String._bridgeToObjectiveC()();
    [v18 setModelName:v19];

    unint64_t v20 = String._bridgeToObjectiveC()();
    [v18 setManufacturerName:v20];

    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
    os_log_type_t v9 = (char *)sub_1006A0C70((uint64_t)v88);
    swift_bridgeObjectRelease();
    uint64_t v21 = *((void *)v9 + 2);
    if (!v21) {
      break;
    }
    v83 = v6;
    uint64_t v6 = 0LL;
    uint64_t v22 = v9 + 32;
    v86 = v9 + 32;
    v87 = v21;
    while (v6 < *((void *)v9 + 2))
    {
      uint64_t v31 = *(void *)&v22[32 * v6 + 24];
      char v32 = *(void *)(v31 + 16);
      if (v32)
      {
        uint64_t v33 = v1 + v7[10];
        uint64_t v34 = *(void *)v33;
        uint64_t v35 = *(unsigned __int8 *)(v33 + 8);
        uint64_t v36 = (uint64_t *)(v31 + 64);
        while (1)
        {
          uint64_t v37 = *(v36 - 4) == v34 ? v35 : 1;
          if (v37 != 1) {
            break;
          }
          v36 += 5;
          if (!--v32) {
            goto LABEL_17;
          }
        }

        uint64_t v23 = *(v36 - 2);
        uint64_t v24 = v7;
        uint64_t v25 = v1;
        int v26 = *v36;
        unint64_t v27 = objc_allocWithZone(&OBJC_CLASS___SPBeaconRole);
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v26);
        uint64_t v28 = String._bridgeToObjectiveC()();
        unint64_t v29 = String._bridgeToObjectiveC()();
        uint64_t v30 = [v27 initWithRoleId:v34 role:v28 roleEmoji:v29];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        uint64_t v1 = v25;
        uint64_t v7 = v24;
        [v84 setDefaultRole:v30];

        uint64_t v22 = v86;
        uint64_t v21 = v87;
      }

    swift_bridgeObjectRelease();
    return 0LL;
  }

  unint64_t v8 = *(void *)(v2 + 40);
  swift_bridgeObjectRetain(*v1);
  os_log_type_t v9 = sub_100004AEC(&qword_1009A0C08);
  BOOL v10 = sub_1000372EC(&qword_1009A0C10, &qword_1009A0C08, (uint64_t)&protocol conformance descriptor for XPCSession<A>);
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)(v8, v9, v10);
  uint64_t v12 = -1LL << *(_BYTE *)(v2 + 32);
  unsigned __int8 v13 = v11 & ~v12;
  if (((*(void *)(v2 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
    goto LABEL_11;
  }
  uint64_t v14 = ~v12;
  uint64_t v15 = sub_1000372EC(&qword_1009A0C18, &qword_1009A0C08, (uint64_t)&protocol conformance descriptor for XPCSession<A>);
  while (1)
  {
    uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v19, &v20, v9, v15) & 1) != 0) {
      break;
    }
    unsigned __int8 v13 = (v13 + 1) & v14;
    if (((*(void *)(v2 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
      goto LABEL_11;
    }
  }

  swift_bridgeObjectRelease();
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  uint64_t v18 = *v1;
  uint64_t v19 = *v1;
  *uint64_t v1 = 0x8000000000000000LL;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_1000CE244();
    uint64_t v18 = v19;
  }

  uint64_t v7 = *(void *)(*(void *)(v18 + 48) + 8 * v13);
  sub_1003D45EC(v13, &qword_1009A0C10, &qword_1009A0C08);
  *uint64_t v1 = v19;
  swift_bridgeObjectRelease();
  return v7;
}

    swift_bridgeObjectRelease();
    return 0LL;
  }

  unint64_t v8 = *(void *)(v2 + 40);
  os_log_type_t v9 = type metadata accessor for AnyCancellable(0LL);
  BOOL v10 = sub_100007864( (unint64_t *)&unk_1009AC370,  (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable,  (uint64_t)&protocol conformance descriptor for AnyCancellable);
  swift_bridgeObjectRetain(v2);
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)(v8, v9, v10);
  uint64_t v12 = -1LL << *(_BYTE *)(v2 + 32);
  unsigned __int8 v13 = v11 & ~v12;
  if (((*(void *)(v2 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
    goto LABEL_11;
  }
  uint64_t v14 = ~v12;
  uint64_t v15 = sub_100007864( &qword_1009A0CA0,  (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable,  (uint64_t)&protocol conformance descriptor for AnyCancellable);
  while (1)
  {
    uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v19, &v20, v9, v15) & 1) != 0) {
      break;
    }
    unsigned __int8 v13 = (v13 + 1) & v14;
    if (((*(void *)(v2 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
      goto LABEL_11;
    }
  }

  swift_bridgeObjectRelease();
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  uint64_t v18 = *v1;
  uint64_t v19 = *v1;
  *uint64_t v1 = 0x8000000000000000LL;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_1000CE7D0();
    uint64_t v18 = v19;
  }

  uint64_t v7 = *(void *)(*(void *)(v18 + 48) + 8 * v13);
  sub_1003D3F7C(v13);
  *uint64_t v1 = v19;
  swift_bridgeObjectRelease();
  return v7;
}

    swift_bridgeObjectRelease();
    return 0LL;
  }

  unint64_t v8 = *(void *)(v2 + 40);
  swift_bridgeObjectRetain(*v1);
  os_log_type_t v9 = sub_100004AEC((uint64_t *)&unk_1009BA0E0);
  BOOL v10 = sub_1000372EC( &qword_1009A0B90,  (uint64_t *)&unk_1009BA0E0,  (uint64_t)&protocol conformance descriptor for XPCSession<A>);
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)(v8, v9, v10);
  uint64_t v12 = -1LL << *(_BYTE *)(v2 + 32);
  unsigned __int8 v13 = v11 & ~v12;
  if (((*(void *)(v2 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
    goto LABEL_11;
  }
  uint64_t v14 = ~v12;
  uint64_t v15 = sub_1000372EC( &qword_1009A0B98,  (uint64_t *)&unk_1009BA0E0,  (uint64_t)&protocol conformance descriptor for XPCSession<A>);
  while (1)
  {
    uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v19, &v20, v9, v15) & 1) != 0) {
      break;
    }
    unsigned __int8 v13 = (v13 + 1) & v14;
    if (((*(void *)(v2 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
      goto LABEL_11;
    }
  }

  swift_bridgeObjectRelease();
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  uint64_t v18 = *v1;
  uint64_t v19 = *v1;
  *uint64_t v1 = 0x8000000000000000LL;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_1000CEB94();
    uint64_t v18 = v19;
  }

  uint64_t v7 = *(void *)(*(void *)(v18 + 48) + 8 * v13);
  sub_1003D45EC(v13, &qword_1009A0B90, (uint64_t *)&unk_1009BA0E0);
  *uint64_t v1 = v19;
  swift_bridgeObjectRelease();
  return v7;
}

    swift_bridgeObjectRelease();
    return 0LL;
  }

  unint64_t v8 = *(void *)(v2 + 40);
  swift_bridgeObjectRetain(*v1);
  os_log_type_t v9 = sub_100004AEC((uint64_t *)&unk_1009A0080);
  BOOL v10 = sub_1000372EC( (unint64_t *)&unk_1009AC330,  (uint64_t *)&unk_1009A0080,  (uint64_t)&protocol conformance descriptor for XPCSession<A>);
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)(v8, v9, v10);
  uint64_t v12 = -1LL << *(_BYTE *)(v2 + 32);
  unsigned __int8 v13 = v11 & ~v12;
  if (((*(void *)(v2 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
    goto LABEL_11;
  }
  uint64_t v14 = ~v12;
  uint64_t v15 = sub_1000372EC( &qword_1009A0C40,  (uint64_t *)&unk_1009A0080,  (uint64_t)&protocol conformance descriptor for XPCSession<A>);
  while (1)
  {
    uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v19, &v20, v9, v15) & 1) != 0) {
      break;
    }
    unsigned __int8 v13 = (v13 + 1) & v14;
    if (((*(void *)(v2 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
      goto LABEL_11;
    }
  }

  swift_bridgeObjectRelease();
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  uint64_t v18 = *v1;
  uint64_t v19 = *v1;
  *uint64_t v1 = 0x8000000000000000LL;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_1000CED34();
    uint64_t v18 = v19;
  }

  uint64_t v7 = *(void *)(*(void *)(v18 + 48) + 8 * v13);
  sub_1003D45EC(v13, (unint64_t *)&unk_1009AC330, (uint64_t *)&unk_1009A0080);
  *uint64_t v1 = v19;
  swift_bridgeObjectRelease();
  return v7;
}

    swift_bridgeObjectRelease();
    return 0LL;
  }

  unint64_t v8 = *(void *)(v2 + 40);
  swift_bridgeObjectRetain(*v1);
  os_log_type_t v9 = sub_100004AEC((uint64_t *)&unk_1009A0AB0);
  BOOL v10 = sub_1000372EC( (unint64_t *)&unk_1009A6B00,  (uint64_t *)&unk_1009A0AB0,  (uint64_t)&protocol conformance descriptor for XPCSession<A>);
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)(v8, v9, v10);
  uint64_t v12 = -1LL << *(_BYTE *)(v2 + 32);
  unsigned __int8 v13 = v11 & ~v12;
  if (((*(void *)(v2 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
    goto LABEL_11;
  }
  uint64_t v14 = ~v12;
  uint64_t v15 = sub_1000372EC( (unint64_t *)&unk_1009A0C90,  (uint64_t *)&unk_1009A0AB0,  (uint64_t)&protocol conformance descriptor for XPCSession<A>);
  while (1)
  {
    uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v19, &v20, v9, v15) & 1) != 0) {
      break;
    }
    unsigned __int8 v13 = (v13 + 1) & v14;
    if (((*(void *)(v2 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
      goto LABEL_11;
    }
  }

  swift_bridgeObjectRelease();
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  uint64_t v18 = *v1;
  uint64_t v19 = *v1;
  *uint64_t v1 = 0x8000000000000000LL;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_1000CF0E4();
    uint64_t v18 = v19;
  }

  uint64_t v7 = *(void *)(*(void *)(v18 + 48) + 8 * v13);
  sub_1003D45EC(v13, (unint64_t *)&unk_1009A6B00, (uint64_t *)&unk_1009A0AB0);
  *uint64_t v1 = v19;
  swift_bridgeObjectRelease();
  return v7;
}

    swift_bridgeObjectRelease();
    return 0LL;
  }

  unint64_t v8 = *(void *)(v2 + 40);
  swift_bridgeObjectRetain(*v1);
  os_log_type_t v9 = sub_100004AEC((uint64_t *)&unk_1009AC2E0);
  BOOL v10 = sub_1000372EC( (unint64_t *)&unk_1009A0B00,  (uint64_t *)&unk_1009AC2E0,  (uint64_t)&protocol conformance descriptor for XPCSession<A>);
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)(v8, v9, v10);
  uint64_t v12 = -1LL << *(_BYTE *)(v2 + 32);
  unsigned __int8 v13 = v11 & ~v12;
  if (((*(void *)(v2 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
    goto LABEL_11;
  }
  uint64_t v14 = ~v12;
  uint64_t v15 = sub_1000372EC( (unint64_t *)&unk_1009AC2F0,  (uint64_t *)&unk_1009AC2E0,  (uint64_t)&protocol conformance descriptor for XPCSession<A>);
  while (1)
  {
    uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v19, &v20, v9, v15) & 1) != 0) {
      break;
    }
    unsigned __int8 v13 = (v13 + 1) & v14;
    if (((*(void *)(v2 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
      goto LABEL_11;
    }
  }

  swift_bridgeObjectRelease();
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  uint64_t v18 = *v1;
  uint64_t v19 = *v1;
  *uint64_t v1 = 0x8000000000000000LL;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_1000CF0F0();
    uint64_t v18 = v19;
  }

  uint64_t v7 = *(void *)(*(void *)(v18 + 48) + 8 * v13);
  sub_1003D45EC(v13, (unint64_t *)&unk_1009A0B00, (uint64_t *)&unk_1009AC2E0);
  *uint64_t v1 = v19;
  swift_bridgeObjectRelease();
  return v7;
}

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a3);
  return v19 & 1;
}

  __break(1u);
  return result;
}

    swift_once(&qword_10099B580, sub_100581FC4);
    goto LABEL_4;
  }

  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v35 = type metadata accessor for Logger(0LL);
  uint64_t v36 = sub_10000A720(v35, (uint64_t)qword_100A2AE08);
  uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
  uint64_t v38 = static os_log_type_t.default.getter(v37);
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v39 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "shareKey: Unable to get myPersonID to update cachedSharingKeys",  v39,  2u);
    swift_slowDealloc(v39, -1LL, -1LL);
  }
}

  CKRecordKeyValueSetting.subscript.getter( &v25,  0x6449656C6F72LL,  0xE600000000000000LL,  ObjectType,  &type metadata for Int,  &protocol witness table for Int);
  uint64_t v15 = *(void *)(v1 + v7[7]);
  if ((BYTE8(v25) & 1) != 0 || (void)v25 != v15)
  {
    *((void *)&v26 + 1) = &type metadata for Int;
    unint64_t v27 = &protocol witness table for Int;
    *(void *)&uint64_t v25 = v15;
    CKRecordKeyValueSetting.subscript.setter(&v25, 0x6449656C6F72LL, 0xE600000000000000LL, ObjectType);
  }

  CKRecordKeyValueSetting.subscript.getter( &v25,  1701667182LL,  0xE400000000000000LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  uint64_t v16 = (unint64_t *)(v1 + v7[8]);
  uint64_t v18 = *v16;
  unint64_t v17 = v16[1];
  if (!*((void *)&v25 + 1)) {
    goto LABEL_18;
  }
  if (v25 == __PAIR128__(v17, v18))
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }

  uint64_t v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, *((void *)&v25 + 1), *v16, v16[1], 0LL);
  swift_bridgeObjectRelease();
  if ((v19 & 1) == 0)
  {
LABEL_18:
    *((void *)&v26 + 1) = &type metadata for String;
    unint64_t v27 = &protocol witness table for String;
    *(void *)&uint64_t v25 = v18;
    *((void *)&v25 + 1) = v17;
    swift_bridgeObjectRetain(v17);
    CKRecordKeyValueSetting.subscript.setter(&v25, 1701667182LL, 0xE400000000000000LL, ObjectType);
  }

  CKRecordKeyValueSetting.subscript.getter( &v28,  0x6C69616D65LL,  0xE500000000000000LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  uint64_t v15 = (unint64_t *)(v1 + v7[7]);
  unint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  if (*((void *)&v28 + 1))
  {
    if (!v16)
    {
      swift_bridgeObjectRelease();
      uint64_t v30 = 0LL;
      uint64_t v28 = 0u;
      unint64_t v29 = 0u;
LABEL_20:
      swift_bridgeObjectRetain(v16);
      CKRecordKeyValueSetting.subscript.setter(&v28, 0x6C69616D65LL, 0xE500000000000000LL, ObjectType);
      goto LABEL_21;
    }

    if (v28 == __PAIR128__(v16, v17))
    {
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }

    uint64_t v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, *((void *)&v28 + 1), *v15, v15[1], 0LL);
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
    {
LABEL_19:
      *((void *)&v29 + 1) = &type metadata for String;
      uint64_t v30 = &protocol witness table for String;
      *(void *)&uint64_t v28 = v17;
      *((void *)&v28 + 1) = v16;
      goto LABEL_20;
    }
  }

  else if (v16)
  {
    goto LABEL_19;
  }

      unint64_t v17 = 0LL;
      goto LABEL_12;
    }

    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_100062E58();
      goto LABEL_7;
    }

    sub_10004BDA4(v14, a3 & 1);
    uint64_t v18 = sub_10030D124(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      uint64_t v11 = v18;
      v8[3] = v18;
      if ((v15 & 1) != 0) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }

  uint64_t v21 = type metadata accessor for UUID(0LL);
  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
  __break(1u);
  return result;
}

      unint64_t v20 = 0LL;
      uint64_t v21 = 0uLL;
      goto LABEL_12;
    }

    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_100068998();
      goto LABEL_7;
    }

    sub_100056DB8(v16, a4 & 1);
    uint64_t v22 = sub_10030CF14(a2, a3);
    if ((v17 & 1) == (v23 & 1))
    {
      unsigned __int8 v13 = v22;
      *((void *)v10 + 6) = v22;
      if ((v17 & 1) != 0) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }

  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  swift_bridgeObjectRelease();
LABEL_12:
  uint64_t v5 = sub_100004AEC(&qword_1009A0E28);
  inited = swift_initStackObject(v5, v10);
  *(_OWORD *)(inited + 16) = xmmword_1007E8280;
  strcpy((char *)(inited + 32), "publishCount");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 56) = 0;
  strcpy((char *)(inited + 64), "powerWiFiCount");
  *(_BYTE *)(inited + 79) = -18;
  *(NSNumber *)(inited + 80) = Int._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 88) = 0;
  strcpy((char *)(inited + 96), "powerCellCount");
  *(_BYTE *)(inited + 111) = -18;
  *(NSNumber *)(inited + 112) = Int._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 120) = 0;
  *(void *)(inited + 128) = 0xD000000000000010LL;
  *(void *)(inited + 136) = 0x8000000100871E80LL;
  *(NSNumber *)(inited + 144) = Int._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 152) = 0;
  *(void *)(inited + 160) = 0xD000000000000010LL;
  *(void *)(inited + 168) = 0x8000000100871EA0LL;
  *(NSNumber *)(inited + 176) = Int._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 184) = 0;
  return sub_100412AA4(inited);
}

  uint64_t v7 = 96 * v16;
  uint64_t v22 = v55 + *(int *)(type metadata accessor for OwnedBeaconRecord(0LL) + 20);
  uint64_t v23 = v3;
  uint64_t v24 = sub_1007A50A4(v22);
  uint64_t v25 = v24 - v7;
  if (v24 < v7) {
    int v26 = 1LL;
  }
  else {
    int v26 = v24 - v7;
  }
  unint64_t v27 = v24 + v7;
  if (__CFADD__(v24, v7))
  {
    __break(1u);
  }

  else if (v27 >= v26)
  {
    a2 &= 1u;
    sub_1007A58E0(v55, v26, v27, a2, (uint64_t)v15);
    v53 = v15;
    sub_10001DC4C((uint64_t)v15, (uint64_t)v13, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
    uint64_t v15 = (char *)sub_1004C6A98(0, 1LL, 1, (unint64_t)_swiftEmptyArrayStorage);
    uint64_t v7 = *((void *)v15 + 2);
    uint64_t v25 = *((void *)v15 + 3);
    uint64_t v23 = v7 + 1;
    if (v7 < v25 >> 1) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }

  __break(1u);
LABEL_36:
  uint64_t v15 = (char *)sub_1004C6A98(v25 > 1, v23, 1, (unint64_t)v15);
LABEL_17:
  *((void *)v15 + 2) = v23;
  uint64_t v28 = (*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v48 = *(void *)(v8 + 72);
  sub_10002218C( (uint64_t)v13,  (uint64_t)&v15[v28 + v48 * v7],  type metadata accessor for BeaconKeyManager.PersistenceInstruction);
  v49 = v28;
  unint64_t v29 = qword_10099B318 == -1;
  if (a2) {
    goto LABEL_22;
  }
  if (qword_10099B318 != -1) {
    goto LABEL_40;
  }
LABEL_19:
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, v20[226], &type metadata for Configuration);
  uint64_t v30 = v56;
  uint64_t v31 = sub_1006A1398(v56);
  swift_bridgeObjectRelease();
  if (v31 < 0) {
    goto LABEL_43;
  }
  unint64_t v29 = ((unint64_t)v31 * (unsigned __int128)0x60uLL) >> 64 == 0;
  if (is_mul_ok(v31, 0x60uLL)) {
    goto LABEL_26;
  }
  __break(1u);
LABEL_22:
  if (!v29) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, v20[226], &type metadata for Configuration);
  uint64_t v30 = v56;
  uint64_t v31 = sub_1006A1384(v56);
  swift_bridgeObjectRelease();
  if ((v31 & 0x8000000000000000LL) == 0)
  {
    char v32 = ((unint64_t)v31 * (unsigned __int128)0x60uLL) >> 64;
    if (!is_mul_ok(v31, 0x60uLL))
    {
      __break(1u);
LABEL_42:
      uint64_t v15 = (char *)sub_1004C6A98(v32 > 1, v31, 1, (unint64_t)v15);
LABEL_31:
      *((void *)v15 + 2) = v31;
      sub_10002218C( v21,  (uint64_t)&v15[v49 + v7 * v48],  type metadata accessor for BeaconKeyManager.PersistenceInstruction);
      sub_100018C68(v22, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
      v46 = (uint64_t)v53;
LABEL_32:
      sub_100018C68(v46, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
      return (uint64_t)v15;
    }

uint64_t sub_10000E188()
{
  uint64_t v1 = *(void *)(v0 + 48);
  dispatch thunk of XPCActivity.defer()();
  return swift_task_switch(sub_10000E1C8, v1, 0LL);
}

uint64_t sub_10000E1C8()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 80));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000E200()
{
  uint64_t v1 = type metadata accessor for XPCActivity(0LL);
  uint64_t v2 = sub_100015C48( &qword_10099CAD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity,  (uint64_t)&protocol conformance descriptor for XPCActivity);
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, v2);
  return swift_task_switch(sub_10000E298, v3, v4);
}

uint64_t sub_10000E298()
{
  uint64_t v1 = *(void *)(v0 + 48);
  dispatch thunk of XPCActivity.done()();
  return swift_task_switch(sub_100015D50, v1, 0LL);
}

uint64_t sub_10000E2D8(char a1)
{
  *(void *)(v2 + 144) = v1;
  *(_BYTE *)(v2 + 232) = a1;
  return swift_task_switch(sub_10000E2F4, v1, 0LL);
}

uint64_t sub_10000E2F4()
{
  if (qword_10099B030 != -1) {
    swift_once(&qword_10099B030, sub_10000B2A8);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A29E58);
  *(void *)(v0 + 152) = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(unsigned __int8 *)(v0 + 232);
    uint64_t v6 = (_DWORD *)swift_slowAlloc(12LL, -1LL);
    swift_slowAlloc(32LL, -1LL);
    *uint64_t v6 = 136446210;
    __asm { BR              X9 }
  }

  uint64_t MyNetworkPublishDateProvider = type metadata accessor for FindMyNetworkPublishDateProvider();
  *(void *)(v0 + 160) = swift_allocObject(MyNetworkPublishDateProvider, 112LL, 15LL);
  swift_defaultActor_initialize();
  uint64_t v8 = sub_1006F0F78((uint64_t)&off_1009326F0);
  unsigned __int8 v9 = sub_100411504();
  BOOL v10 = sub_1004E4AB8(v9, v8);
  *(_BYTE *)(v0 + 233) = v10;
  swift_bridgeObjectRelease(v8);
  unsigned __int8 v13 = (uint64_t (*)(char))((char *)&dword_10099CA78 + dword_10099CA78);
  uint64_t v11 = (void *)swift_task_alloc(unk_10099CA7C);
  *(void *)(v0 + 168) = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_10000E5F4;
  return v13(v10);
}

uint64_t sub_10000E5F4(char a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 168);
  uint64_t v5 = *v1;
  swift_task_dealloc(v4);
  if ((a1 & 1) != 0)
  {
    uint64_t v6 = swift_task_alloc(dword_10099C6CC);
    *(void *)(v3 + 224) = v6;
    *(void *)uint64_t v6 = v5;
    *(void *)(v6 + 8) = sub_10000ED4C;
    char v7 = *(_BYTE *)(v3 + 233);
    uint64_t v8 = *(void *)(v3 + 144);
    *(void *)(v6 + 120) = v8;
    *(_BYTE *)(v6 + 176) = v7;
    return swift_task_switch(sub_10000F618, v8, 0LL);
  }

  else
  {
    BOOL v10 = (void *)swift_task_alloc(dword_10099C6C4);
    *(void *)(v3 + 176) = v10;
    *BOOL v10 = v5;
    v10[1] = sub_10000E6B8;
    return sub_10000F2E0(*(_BYTE *)(v3 + 232));
  }

uint64_t sub_10000E6B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 176LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 144LL);
  *(void *)(*(void *)v1 + 184LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10000E718, v3, 0LL);
}

uint64_t sub_10000E718()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain(*(void *)(v0 + 144));
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    uint64_t v3 = *(void *)(v0 + 144);
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    swift_release(v3);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v5 = (uint64_t (__cdecl *)())((char *)&dword_10099C860 + dword_10099C860);
    uint64_t v4 = (void *)swift_task_alloc(unk_10099C864);
    *(void *)(v0 + 192) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_10000E818;
    return v5();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10000E818(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 192LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 144LL);
  *(void *)(*(void *)v1 + 200LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10000E878, v3, 0LL);
}

uint64_t sub_10000E878()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 200))
  {
    uint64_t v2 = *(void *)(v0 + 184);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = dword_1009AD304;
    swift_retain(v2);
    uint64_t v4 = (void *)swift_task_alloc(v3);
    *(void *)(v0 + 208) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_10000EC74;
    return sub_10040B7E4(v2);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    unint64_t v6 = sub_1000157D0();
    uint64_t v7 = swift_allocError(&type metadata for DaemonError, v6, 0LL, 0LL);
    *uint64_t v8 = 0xD00000000000001DLL;
    v8[1] = 0x80000001008509B0LL;
    swift_willThrow();
    swift_errorRetain(v7);
    uint64_t v9 = swift_errorRetain(v7);
    BOOL v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *(unsigned __int8 *)(v0 + 232);
      unsigned __int8 v13 = (_DWORD *)swift_slowAlloc(22LL, -1LL);
      swift_slowAlloc(8LL, -1LL);
      swift_slowAlloc(32LL, -1LL);
      *unsigned __int8 v13 = 136446466;
      __asm { BR              X9 }
    }

    uint64_t v14 = *(void *)(v0 + 160);
    swift_release(*(void *)(v0 + 184));
    swift_release(v14);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_errorRelease(v7);

    *(_BYTE *)(*(void *)(v0 + 144) + 176LL) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10000EC74(void *a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 208LL);
  *(void *)(*(void *)v2 + 216LL) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = v4[18];
    uint64_t v7 = sub_10000EDE0;
  }

  else
  {
    uint64_t v8 = v4[25];
    uint64_t v9 = v4[23];
    uint64_t v10 = v4[18];
    swift_release(v9);
    swift_release(v8);

    uint64_t v7 = sub_10000ED04;
    uint64_t v6 = v10;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_10000ED04()
{
  uint64_t v1 = *(void *)(v0 + 160);
  swift_release(*(void *)(v0 + 184));
  swift_release(v1);
  *(_BYTE *)(*(void *)(v0 + 144) + 176LL) = 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000ED4C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 144LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 224LL));
  return swift_task_switch(sub_10000EDA4, v1, 0LL);
}

uint64_t sub_10000EDA4()
{
  *(_BYTE *)(*(void *)(v0 + 144) + 176LL) = 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000EDE0()
{
  uint64_t v1 = *(void *)(v0 + 200);
  swift_release(*(void *)(v0 + 184));
  swift_release(v1);
  uint64_t v2 = *(void *)(v0 + 216);
  swift_errorRetain(v2);
  uint64_t v3 = swift_errorRetain(v2);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(unsigned __int8 *)(v0 + 232);
    uint64_t v7 = (_DWORD *)swift_slowAlloc(22LL, -1LL);
    swift_slowAlloc(8LL, -1LL);
    swift_slowAlloc(32LL, -1LL);
    *uint64_t v7 = 136446466;
    __asm { BR              X9 }
  }

  uint64_t v8 = *(void *)(v0 + 160);
  swift_release(*(void *)(v0 + 184));
  swift_release(v8);
  swift_errorRelease(v2);
  swift_errorRelease(v2);
  swift_errorRelease(v2);

  *(_BYTE *)(*(void *)(v0 + 144) + 176LL) = 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10000F148(char a1)
{
  uint64_t v2 = type metadata accessor for XPCActivity.Criteria.Options(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v14 - v8;
  uint64_t v10 = static XPCActivity.Criteria.Options.usesDuetPowerBudgeting.getter(v7);
  static XPCActivity.Criteria.Options.requiresNetwork.getter(v10);
  sub_100010118(v9, (uint64_t)v6);
  os_log_type_t v11 = *(void (**)(char *, uint64_t))(v3 + 8);
  v11(v6, v2);
  uint64_t v12 = ((uint64_t (*)(char *, uint64_t))v11)(v9, v2);
  static XPCActivity.Criteria.Options.usesDuetNetworkBudgeting.getter(v12);
  sub_100010118(v9, (uint64_t)v6);
  v11(v6, v2);
  uint64_t v13 = ((uint64_t (*)(char *, uint64_t))v11)(v9, v2);
  static XPCActivity.Criteria.Options.preventDeviceSleep.getter(v13);
  sub_100010118(v9, (uint64_t)v6);
  v11(v6, v2);
  v11(v9, v2);
  __asm { BR              X10 }

uint64_t sub_10000F264()
{
  uint64_t v4 = v3(v2, v0);
  ((void (*)(uint64_t))static XPCActivity.Criteria.Options.requiresInexpensiveNetwork.getter)(v4);
  sub_100010118(v2, v1);
  v3((char *)v1, v0);
  return v3(v2, v0);
}

uint64_t sub_10000F2E0(char a1)
{
  *(void *)(v2 + 40) = v1;
  *(_BYTE *)(v2 + 96) = a1;
  unint64_t v3 = (*(void *)(*(void *)(sub_100004AEC(&qword_10099CA60) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v2 + 48) = swift_task_alloc(v3);
  *(void *)(v2 + 56) = swift_task_alloc(v3);
  return swift_task_switch(sub_10000F350, v1, 0LL);
}

uint64_t sub_10000F350()
{
  uint64_t v1 = type metadata accessor for AnalyticsEvent(0LL);
  uint64_t v2 = (char *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v0[8] = v2;
  swift_defaultActor_initialize();
  unint64_t v3 = sub_10041271C((uint64_t)_swiftEmptyArrayStorage);
  *((void *)v2 + 14) = v3;
  UUID.init()(v3);
  uint64_t v4 = &v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v5 = type metadata accessor for DispatchTime(0LL);
  v0[9] = v5;
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL);
  v0[10] = v6;
  v6(v4, 1LL, 1LL, v5);
  v6(&v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1LL, 1LL, v5);
  *((void *)v2 + 15) = 0xD000000000000034LL;
  *((void *)v2 + 16) = 0x80000001008508B0LL;
  return swift_task_switch(sub_10000F44C, v2, 0LL);
}

uint64_t sub_10000F44C()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[10];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[8];
  uint64_t v6 = v0[5];
  uint64_t v5 = v0[6];
  static DispatchTime.now()();
  v2(v3, 0LL, 1LL, v1);
  sub_100015750(v3, v5, &qword_10099CA60);
  uint64_t v7 = v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess(v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime, v0 + 2, 33LL, 0LL);
  sub_100015680(v5, v7);
  swift_endAccess(v0 + 2);
  return swift_task_switch(sub_10000F510, v6, 0LL);
}

uint64_t sub_10000F510()
{
  uint64_t v1 = unk_1009BE13C;
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, char))((char *)&dword_1009BE138 + dword_1009BE138);
  swift_retain(*(void *)(v0 + 40));
  uint64_t v2 = (void *)swift_task_alloc(v1);
  *(void *)(v0 + 88) = v2;
  void *v2 = v0;
  v2[1] = sub_10000F584;
  return v4(*(void *)(v0 + 64), *(void *)(v0 + 40), *(_BYTE *)(v0 + 96));
}

uint64_t sub_10000F584()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 40);
  uint64_t v5 = *v1;
  swift_task_dealloc(v3);
  swift_release(v4);
  if (v0) {
    swift_errorRelease(v0);
  }
  uint64_t v6 = v2[6];
  swift_task_dealloc(v2[7]);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v5 + 8))(v2[8]);
}

uint64_t sub_10000F5FC(char a1)
{
  *(void *)(v2 + 120) = v1;
  *(_BYTE *)(v2 + 176) = a1;
  return swift_task_switch(sub_10000F618, v1, 0LL);
}

uint64_t sub_10000F618()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain(*(void *)(v0 + 120));
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    uint64_t v3 = *(void *)(v0 + 120);
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    swift_release(v3);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v5 = (uint64_t (__cdecl *)())((char *)&dword_10099C878 + dword_10099C878);
    uint64_t v4 = (void *)swift_task_alloc(unk_10099C87C);
    *(void *)(v0 + 128) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_10000F718;
    return v5();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10000F718(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 120LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 128LL);
  *(void *)(*(void *)v1 + 136LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10000F774, v3, 0LL);
}

uint64_t sub_10000F774()
{
  uint64_t v1 = *(void *)(v0 + 136);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  uint64_t v2 = type metadata accessor for AnalyticsEvent(0LL);
  uint64_t v3 = (char *)swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  *(void *)(v0 + 144) = v3;
  swift_defaultActor_initialize();
  unint64_t v4 = sub_10041271C((uint64_t)_swiftEmptyArrayStorage);
  *((void *)v3 + 14) = v4;
  UUID.init()(v4);
  uint64_t v5 = &v3[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v6 = type metadata accessor for DispatchTime(0LL);
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL);
  v7(v5, 1LL, 1LL, v6);
  v7(&v3[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1LL, 1LL, v6);
  *((void *)v3 + 15) = 0xD000000000000037LL;
  *((void *)v3 + 16) = 0x8000000100850830LL;
  uint64_t v8 = unk_1009BE134;
  os_log_type_t v11 = (uint64_t (*)(uint64_t, uint64_t, char))((char *)&dword_1009BE130 + dword_1009BE130);
  swift_retain(v1);
  uint64_t v9 = (void *)swift_task_alloc(v8);
  *(void *)(v0 + 152) = v9;
  void *v9 = v0;
  v9[1] = sub_10000F8B8;
  return v11((uint64_t)v3, *(void *)(v0 + 136), *(_BYTE *)(v0 + 176));
}

uint64_t sub_10000F8B8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 136);
  swift_task_dealloc(*(void *)(*v1 + 152));
  swift_release(v3);
  uint64_t v4 = *(void *)(v2 + 120);
  if (v0)
  {
    swift_errorRelease(v0);
    uint64_t v5 = sub_100015D54;
  }

  else
  {
    uint64_t v5 = sub_10000F938;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_10000F938()
{
  uint64_t v1 = type metadata accessor for AnalyticsPublisher();
  v0[20] = swift_allocObject(v1, 112LL, 15LL);
  swift_defaultActor_initialize();
  uint64_t v2 = (uint64_t **)swift_task_alloc(dword_1009BDE0C);
  v0[21] = (uint64_t)v2;
  void *v2 = v0;
  v2[1] = (uint64_t *)sub_10000F9A4;
  return sub_100713F88(v0[18]);
}

uint64_t sub_10000F9A4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 160LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 120LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 168LL));
  swift_release(v1);
  return swift_task_switch(sub_10000FA04, v2, 0LL);
}

uint64_t sub_10000FA04()
{
  uint64_t v1 = *(void *)(v0 + 136);
  swift_release(*(void *)(v0 + 144));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000FA3C(uint64_t a1, char a2)
{
  *(_BYTE *)(v2 + 264) = a2;
  *(void *)(v2 + 240) = a1;
  return swift_task_switch(sub_10000FA58, 0LL, 0LL);
}

uint64_t sub_10000FA58()
{
  if (*(void *)(v0 + 240))
  {
    uint64_t v1 = (void *)swift_task_alloc(dword_1009BCDC4);
    *(void *)(v0 + 248) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_10000FB94;
    return sub_1006D4B08();
  }

  else
  {
    char v3 = *(_BYTE *)(v0 + 264);
    uint64_t v4 = sub_100004AEC(&qword_10099CA50);
    uint64_t inited = swift_initStackObject(v4, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_1007E4050;
    *(void *)(inited + 32) = 0x6E6F73616572LL;
    *(void *)(inited + 40) = 0xE600000000000000LL;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 80) = sub_1000155F8();
    *(void *)(inited + 48) = 0xD000000000000012LL;
    *(void *)(inited + 56) = 0x8000000100850870LL;
    *(_WORD *)(inited + 88) = 1;
    *(void *)(inited + 96) = 0xD000000000000010LL;
    *(void *)(inited + 104) = 0x8000000100850890LL;
    *(void *)(inited + 136) = &type metadata for Int64;
    *(void *)(inited + 144) = sub_10001563C();
    *(void *)(inited + 112) = 0LL;
    *(_WORD *)(inited + 152) = 2;
    *(void *)(inited + 160) = 0x7265747461426E6FLL;
    *(void *)(inited + 168) = 0xE900000000000079LL;
    *(_BYTE *)(inited + 176) = v3;
    *(_WORD *)(inited + 216) = 0;
    unint64_t v6 = sub_10041285C(inited);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v6);
  }

uint64_t sub_10000FB94(uint64_t a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc(*(void *)(*v2 + 248));
  if (v1)
  {
    swift_errorRelease(v1);
    uint64_t v5 = sub_10000FD1C;
  }

  else
  {
    *(void *)(v4 + 256) = a1;
    uint64_t v5 = sub_10000FC0C;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_10000FC0C()
{
  uint64_t v1 = *(void *)(v0 + 256);
  char v2 = *(_BYTE *)(v0 + 264);
  uint64_t v3 = sub_100004AEC(&qword_10099CA50);
  uint64_t inited = swift_initStackObject(v3, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_1007E4050;
  *(void *)(inited + 32) = 0x6E6F73616572LL;
  *(void *)(inited + 40) = 0xE600000000000000LL;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = sub_1000155F8();
  *(void *)(inited + 48) = 0xD000000000000012LL;
  *(void *)(inited + 56) = 0x8000000100850870LL;
  *(_WORD *)(inited + 88) = 1;
  *(void *)(inited + 96) = 0xD000000000000010LL;
  *(void *)(inited + 104) = 0x8000000100850890LL;
  *(void *)(inited + 136) = &type metadata for Int64;
  *(void *)(inited + 144) = sub_10001563C();
  *(void *)(inited + 112) = v1;
  *(_WORD *)(inited + 152) = 2;
  *(void *)(inited + 160) = 0x7265747461426E6FLL;
  *(void *)(inited + 168) = 0xE900000000000079LL;
  *(_BYTE *)(inited + 176) = v2;
  *(_WORD *)(inited + 216) = 0;
  unint64_t v5 = sub_10041285C(inited);
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v5);
}

uint64_t sub_10000FD1C()
{
  char v1 = *(_BYTE *)(v0 + 264);
  uint64_t v2 = sub_100004AEC(&qword_10099CA50);
  uint64_t inited = swift_initStackObject(v2, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_1007E4050;
  *(void *)(inited + 32) = 0x6E6F73616572LL;
  *(void *)(inited + 40) = 0xE600000000000000LL;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = sub_1000155F8();
  *(void *)(inited + 48) = 0xD000000000000012LL;
  *(void *)(inited + 56) = 0x8000000100850870LL;
  *(_WORD *)(inited + 88) = 1;
  *(void *)(inited + 96) = 0xD000000000000010LL;
  *(void *)(inited + 104) = 0x8000000100850890LL;
  *(void *)(inited + 136) = &type metadata for Int64;
  *(void *)(inited + 144) = sub_10001563C();
  *(void *)(inited + 112) = 0LL;
  *(_WORD *)(inited + 152) = 2;
  *(void *)(inited + 160) = 0x7265747461426E6FLL;
  *(void *)(inited + 168) = 0xE900000000000079LL;
  *(_BYTE *)(inited + 176) = v1;
  *(_WORD *)(inited + 216) = 0;
  unint64_t v4 = sub_10041285C(inited);
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v4);
}

uint64_t sub_10000FE20()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for FindMyNetworkPublishActivityService()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd35FindMyNetworkPublishActivityService);
}

uint64_t DeviceIdentityUtility.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_10000FE80()
{
  v1[2] = v0;
  v1[3] = *v0;
  uint64_t v2 = sub_100004AEC(&qword_1009A9BF0);
  v1[4] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10000FEE4, v0, 0LL);
}

uint64_t sub_10000FEE4()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = type metadata accessor for TaskPriority(0LL);
  __int128 v7 = *(_OWORD *)(v0 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
  uint64_t v3 = swift_allocObject(&unk_100938248, 48LL, 7LL);
  *(void *)(v3 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = 0LL;
  *(void *)(v3 + 24) = 0LL;
  *(_OWORD *)(v3 + 32) = v7;
  swift_retain(v7);
  uint64_t v4 = sub_10000BB68(v1, (uint64_t)&unk_10099C808, v3);
  swift_release(v4);
  sub_100015794(v1, &qword_1009A9BF0);
  unint64_t v5 = (void *)swift_task_alloc(dword_10099C6B4);
  *(void *)(v0 + 40) = v5;
  void *v5 = v0;
  v5[1] = sub_10000FFB8;
  return sub_10000C6E0();
}

uint64_t sub_10000FFB8()
{
  uint64_t v1 = *(void *)(*v0 + 32);
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 40));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100010008()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112LL);
  swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 120LL));
  return v1;
}

uint64_t sub_100010038(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100015C48( &qword_10099C7F8,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for FindMyNetworkPublishActivityService,  (uint64_t)&unk_1007E4020);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100010074()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000100A0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  __int128 v7 = (void *)swift_task_alloc(dword_10099C804);
  *(void *)(v2 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v7;
  *__int128 v7 = v2;
  v7[1] = sub_100015D58;
  return sub_10000B338(a1, v4, v5, v6);
}

uint64_t sub_100010118(char *a1, uint64_t a2)
{
  unint64_t v29 = a1;
  uint64_t v4 = sub_100004AEC(&qword_10099CAF0);
  uint64_t v5 = __chkstk_darwin(v4);
  unint64_t v27 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v24 - v7;
  uint64_t v9 = type metadata accessor for XPCActivity.Criteria.Options(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v24 - v14;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v26 = v2;
  v16(v13, v2, v9);
  uint64_t v25 = sub_100015C48( &qword_10099CAF8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity.Criteria.Options,  (uint64_t)&protocol conformance descriptor for XPCActivity.Criteria.Options);
  dispatch thunk of SetAlgebra.intersection(_:)(a2, v9);
  uint64_t v17 = sub_100015C48( &qword_10099CB00,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity.Criteria.Options,  (uint64_t)&protocol conformance descriptor for XPCActivity.Criteria.Options);
  uint64_t v18 = a2;
  char v19 = dispatch thunk of static Equatable.== infix(_:_:)(v15, a2, v9, v17) ^ 1;
  uint64_t v28 = v4;
  unint64_t v20 = &v8[*(int *)(v4 + 48)];
  *uint64_t v8 = v19 & 1;
  if ((v19 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    v16(v20, v18, v9);
    v16(v13, v18, v9);
    dispatch thunk of SetAlgebra.formUnion(_:)(v13, v9, v25);
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  }

  else
  {
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v21(v20, v15, v9);
  }

  uint64_t v22 = &v27[*(int *)(v28 + 48)];
  v21(v22, v20, v9);
  v21(v29, v22, v9);
  return v19 & 1;
}

uint64_t sub_100010348@<X0>(uint64_t a1@<X8>)
{
  id v2 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 objectForKey:v3];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v9, v4);
    swift_unknownObjectRelease(v4);
  }

  else
  {
    memset(v9, 0, sizeof(v9));
  }

  sub_100015750((uint64_t)v9, (uint64_t)v10, &qword_10099E200);
  if (v11)
  {
    uint64_t v5 = type metadata accessor for Date(0LL);
    int v6 = swift_dynamicCast(a1, v10, (char *)&type metadata for Any + 8, v5, 6LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))( a1,  v6 ^ 1u,  1LL,  v5);
  }

  else
  {
    sub_100015794((uint64_t)v10, &qword_10099E200);
    uint64_t v8 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))( a1,  1LL,  1LL,  v8);
  }

uint64_t sub_10001049C()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return swift_task_switch(sub_1000104BC, 0LL, 0LL);
}

uint64_t sub_1000104BC()
{
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = *(_OWORD *)(v0 + 24);
  id v2 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 48) = v2;
  void *v2 = v0;
  v2[1] = sub_10001055C;
  return withCheckedContinuation<A>(isolation:function:_:)( v2,  0LL,  0LL,  0x4970757472617473LL,  0xEF2928656E6F4473LL,  sub_100015E28,  v1,  (char *)&type metadata for () + 8);
}

uint64_t sub_10001055C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 48LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1000105B8, 0LL, 0LL);
}

uint64_t sub_1000105B8()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_100004AEC(&qword_10099C868);
  *uint64_t v1 = v0;
  v1[1] = sub_100015D60;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 16,  0LL,  0LL,  0x6976726553746567LL,  0xEC00000029286563LL,  sub_100013088,  *(void *)(v0 + 24),  v2);
}

uint64_t sub_10001064C()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10001066C, 0LL, 0LL);
}

uint64_t sub_10001066C()
{
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 48) = v2;
  void *v2 = v0;
  v2[1] = sub_10001070C;
  return withCheckedContinuation<A>(isolation:function:_:)( v2,  0LL,  0LL,  0x4970757472617473LL,  0xEF2928656E6F4473LL,  sub_100012F7C,  v1,  (char *)&type metadata for () + 8);
}

uint64_t sub_10001070C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 48LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100010768, 0LL, 0LL);
}

uint64_t sub_100010768()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_100004AEC(&qword_10099C850);
  *uint64_t v1 = v0;
  v1[1] = sub_100015D60;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 16,  0LL,  0LL,  0x6976726553746567LL,  0xEC00000029286563LL,  sub_100012F84,  *(void *)(v0 + 24),  v2);
}

uint64_t sub_1000107FC()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10001081C, 0LL, 0LL);
}

uint64_t sub_10001081C()
{
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 48) = v2;
  void *v2 = v0;
  v2[1] = sub_1000108BC;
  return withCheckedContinuation<A>(isolation:function:_:)( v2,  0LL,  0LL,  0x4970757472617473LL,  0xEF2928656E6F4473LL,  sub_100015E28,  v1,  (char *)&type metadata for () + 8);
}

uint64_t sub_1000108BC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 48LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100010918, 0LL, 0LL);
}

uint64_t sub_100010918()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_100004AEC(&qword_10099C880);
  *uint64_t v1 = v0;
  v1[1] = sub_100015D60;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 16,  0LL,  0LL,  0x6976726553746567LL,  0xEC00000029286563LL,  sub_10001313C,  *(void *)(v0 + 24),  v2);
}

uint64_t sub_1000109AC()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return swift_task_switch(sub_1000109CC, 0LL, 0LL);
}

uint64_t sub_1000109CC()
{
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 48) = v2;
  void *v2 = v0;
  v2[1] = sub_100010A6C;
  return withCheckedContinuation<A>(isolation:function:_:)( v2,  0LL,  0LL,  0x4970757472617473LL,  0xEF2928656E6F4473LL,  sub_100015E28,  v1,  (char *)&type metadata for () + 8);
}

uint64_t sub_100010A6C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 48LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100010AC8, 0LL, 0LL);
}

uint64_t sub_100010AC8()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_100004AEC(&qword_10099CA38);
  *uint64_t v1 = v0;
  v1[1] = sub_100015D60;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 16,  0LL,  0LL,  0x6976726553746567LL,  0xEC00000029286563LL,  sub_100013A2C,  *(void *)(v0 + 24),  v2);
}

uint64_t sub_100010B5C()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return swift_task_switch(sub_100010B7C, 0LL, 0LL);
}

uint64_t sub_100010B7C()
{
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 48) = v2;
  void *v2 = v0;
  v2[1] = sub_100010C1C;
  return withCheckedContinuation<A>(isolation:function:_:)( v2,  0LL,  0LL,  0x4970757472617473LL,  0xEF2928656E6F4473LL,  sub_100015E28,  v1,  (char *)&type metadata for () + 8);
}

uint64_t sub_100010C1C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 48LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100010C78, 0LL, 0LL);
}

uint64_t sub_100010C78()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_100004AEC(&qword_10099C898);
  *uint64_t v1 = v0;
  v1[1] = sub_100015D60;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 16,  0LL,  0LL,  0x6976726553746567LL,  0xEC00000029286563LL,  sub_100013198,  *(void *)(v0 + 24),  v2);
}

uint64_t sub_100010D0C()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return swift_task_switch(sub_100010D2C, 0LL, 0LL);
}

uint64_t sub_100010D2C()
{
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 48) = v2;
  void *v2 = v0;
  v2[1] = sub_100010DCC;
  return withCheckedContinuation<A>(isolation:function:_:)( v2,  0LL,  0LL,  0x4970757472617473LL,  0xEF2928656E6F4473LL,  sub_100015E28,  v1,  (char *)&type metadata for () + 8);
}

uint64_t sub_100010DCC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 48LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100010E28, 0LL, 0LL);
}

uint64_t sub_100010E28()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_100004AEC(&qword_10099C970);
  *uint64_t v1 = v0;
  v1[1] = sub_100015D60;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 16,  0LL,  0LL,  0x6976726553746567LL,  0xEC00000029286563LL,  sub_10001351C,  *(void *)(v0 + 24),  v2);
}

uint64_t sub_100010EBC()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return swift_task_switch(sub_100010EDC, 0LL, 0LL);
}

uint64_t sub_100010EDC()
{
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 48) = v2;
  void *v2 = v0;
  v2[1] = sub_100010F7C;
  return withCheckedContinuation<A>(isolation:function:_:)( v2,  0LL,  0LL,  0x4970757472617473LL,  0xEF2928656E6F4473LL,  sub_100015E28,  v1,  (char *)&type metadata for () + 8);
}

uint64_t sub_100010F7C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 48LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100010FD8, 0LL, 0LL);
}

uint64_t sub_100010FD8()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_100004AEC(&qword_10099C8B0);
  *uint64_t v1 = v0;
  v1[1] = sub_100015D60;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 16,  0LL,  0LL,  0x6976726553746567LL,  0xEC00000029286563LL,  sub_1000131F4,  *(void *)(v0 + 24),  v2);
}

uint64_t sub_10001106C()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10001108C, 0LL, 0LL);
}

uint64_t sub_10001108C()
{
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 48) = v2;
  void *v2 = v0;
  v2[1] = sub_10001112C;
  return withCheckedContinuation<A>(isolation:function:_:)( v2,  0LL,  0LL,  0x4970757472617473LL,  0xEF2928656E6F4473LL,  sub_100015E28,  v1,  (char *)&type metadata for () + 8);
}

uint64_t sub_10001112C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 48LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100011188, 0LL, 0LL);
}

uint64_t sub_100011188()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_100004AEC(&qword_10099CA08);
  *uint64_t v1 = v0;
  v1[1] = sub_100015D60;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 16,  0LL,  0LL,  0x6976726553746567LL,  0xEC00000029286563LL,  sub_100013978,  *(void *)(v0 + 24),  v2);
}

uint64_t sub_10001121C()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10001123C, 0LL, 0LL);
}

uint64_t sub_10001123C()
{
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 48) = v2;
  void *v2 = v0;
  v2[1] = sub_1000112DC;
  return withCheckedContinuation<A>(isolation:function:_:)( v2,  0LL,  0LL,  0x4970757472617473LL,  0xEF2928656E6F4473LL,  sub_100015E28,  v1,  (char *)&type metadata for () + 8);
}

uint64_t sub_1000112DC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 48LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100011338, 0LL, 0LL);
}

uint64_t sub_100011338()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_100004AEC(&qword_10099CA20);
  *uint64_t v1 = v0;
  v1[1] = sub_100015D60;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 16,  0LL,  0LL,  0x6976726553746567LL,  0xEC00000029286563LL,  sub_1000139D4,  *(void *)(v0 + 24),  v2);
}

uint64_t sub_1000113CC()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return swift_task_switch(sub_1000113EC, 0LL, 0LL);
}

uint64_t sub_1000113EC()
{
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 48) = v2;
  void *v2 = v0;
  v2[1] = sub_10001148C;
  return withCheckedContinuation<A>(isolation:function:_:)( v2,  0LL,  0LL,  0x4970757472617473LL,  0xEF2928656E6F4473LL,  sub_100015E28,  v1,  (char *)&type metadata for () + 8);
}

uint64_t sub_10001148C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 48LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1000114E8, 0LL, 0LL);
}

uint64_t sub_1000114E8()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_100004AEC(&qword_10099C8E0);
  *uint64_t v1 = v0;
  v1[1] = sub_100015D60;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 16,  0LL,  0LL,  0x6976726553746567LL,  0xEC00000029286563LL,  sub_1000132AC,  *(void *)(v0 + 24),  v2);
}

uint64_t sub_10001157C()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10001159C, 0LL, 0LL);
}

uint64_t sub_10001159C()
{
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 48) = v2;
  void *v2 = v0;
  v2[1] = sub_10001163C;
  return withCheckedContinuation<A>(isolation:function:_:)( v2,  0LL,  0LL,  0x4970757472617473LL,  0xEF2928656E6F4473LL,  sub_100015E28,  v1,  (char *)&type metadata for () + 8);
}

uint64_t sub_10001163C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 48LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100011698, 0LL, 0LL);
}

uint64_t sub_100011698()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_100004AEC(&qword_10099C910);
  *uint64_t v1 = v0;
  v1[1] = sub_100015D60;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 16,  0LL,  0LL,  0x6976726553746567LL,  0xEC00000029286563LL,  sub_100013364,  *(void *)(v0 + 24),  v2);
}

uint64_t sub_10001172C()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10001174C, 0LL, 0LL);
}

uint64_t sub_10001174C()
{
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 48) = v2;
  void *v2 = v0;
  v2[1] = sub_1000117EC;
  return withCheckedContinuation<A>(isolation:function:_:)( v2,  0LL,  0LL,  0x4970757472617473LL,  0xEF2928656E6F4473LL,  sub_100015E28,  v1,  (char *)&type metadata for () + 8);
}

uint64_t sub_1000117EC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 48LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100011848, 0LL, 0LL);
}

uint64_t sub_100011848()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_100004AEC(&qword_10099C928);
  *uint64_t v1 = v0;
  v1[1] = sub_100015D60;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 16,  0LL,  0LL,  0x6976726553746567LL,  0xEC00000029286563LL,  sub_1000133C0,  *(void *)(v0 + 24),  v2);
}

uint64_t sub_1000118DC()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return swift_task_switch(sub_1000118FC, 0LL, 0LL);
}

uint64_t sub_1000118FC()
{
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 48) = v2;
  void *v2 = v0;
  v2[1] = sub_10001199C;
  return withCheckedContinuation<A>(isolation:function:_:)( v2,  0LL,  0LL,  0x4970757472617473LL,  0xEF2928656E6F4473LL,  sub_100015E28,  v1,  (char *)&type metadata for () + 8);
}

uint64_t sub_10001199C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 48LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1000119F8, 0LL, 0LL);
}

uint64_t sub_1000119F8()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_100004AEC(&qword_10099C8C8);
  *uint64_t v1 = v0;
  v1[1] = sub_100015D60;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 16,  0LL,  0LL,  0x6976726553746567LL,  0xEC00000029286563LL,  sub_100013250,  *(void *)(v0 + 24),  v2);
}

uint64_t sub_100011A8C()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return swift_task_switch(sub_100011AAC, 0LL, 0LL);
}

uint64_t sub_100011AAC()
{
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 48) = v2;
  void *v2 = v0;
  v2[1] = sub_100011B4C;
  return withCheckedContinuation<A>(isolation:function:_:)( v2,  0LL,  0LL,  0x4970757472617473LL,  0xEF2928656E6F4473LL,  sub_100015E28,  v1,  (char *)&type metadata for () + 8);
}

uint64_t sub_100011B4C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 48LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100011BA8, 0LL, 0LL);
}

uint64_t sub_100011BA8()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_100004AEC(&qword_10099C9A0);
  *uint64_t v1 = v0;
  v1[1] = sub_100015D60;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 16,  0LL,  0LL,  0x6976726553746567LL,  0xEC00000029286563LL,  sub_1000135D0,  *(void *)(v0 + 24),  v2);
}

uint64_t sub_100011C3C()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return swift_task_switch(sub_100011C5C, 0LL, 0LL);
}

uint64_t sub_100011C5C()
{
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 48) = v2;
  void *v2 = v0;
  v2[1] = sub_100011CFC;
  return withCheckedContinuation<A>(isolation:function:_:)( v2,  0LL,  0LL,  0x4970757472617473LL,  0xEF2928656E6F4473LL,  sub_100015E28,  v1,  (char *)&type metadata for () + 8);
}

uint64_t sub_100011CFC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 48LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100011D58, 0LL, 0LL);
}

uint64_t sub_100011D58()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_100004AEC(&qword_10099C8F8);
  *uint64_t v1 = v0;
  v1[1] = sub_100015D60;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 16,  0LL,  0LL,  0x6976726553746567LL,  0xEC00000029286563LL,  sub_100013308,  *(void *)(v0 + 24),  v2);
}

uint64_t sub_100011DEC()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return swift_task_switch(sub_100011E0C, 0LL, 0LL);
}

uint64_t sub_100011E0C()
{
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 48) = v2;
  void *v2 = v0;
  v2[1] = sub_100011EAC;
  return withCheckedContinuation<A>(isolation:function:_:)( v2,  0LL,  0LL,  0x4970757472617473LL,  0xEF2928656E6F4473LL,  sub_100015E28,  v1,  (char *)&type metadata for () + 8);
}

uint64_t sub_100011EAC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 48LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100011F08, 0LL, 0LL);
}

uint64_t sub_100011F08()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_100004AEC(&qword_10099C958);
  *uint64_t v1 = v0;
  v1[1] = sub_100015D60;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 16,  0LL,  0LL,  0x6976726553746567LL,  0xEC00000029286563LL,  sub_1000134C4,  *(void *)(v0 + 24),  v2);
}

uint64_t sub_100011F9C()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return swift_task_switch(sub_100011FBC, 0LL, 0LL);
}

uint64_t sub_100011FBC()
{
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 48) = v2;
  void *v2 = v0;
  v2[1] = sub_10001205C;
  return withCheckedContinuation<A>(isolation:function:_:)( v2,  0LL,  0LL,  0x4970757472617473LL,  0xEF2928656E6F4473LL,  sub_100015E28,  v1,  (char *)&type metadata for () + 8);
}

uint64_t sub_10001205C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 48LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1000120B8, 0LL, 0LL);
}

uint64_t sub_1000120B8()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_100004AEC(&qword_10099C9D8);
  *uint64_t v1 = v0;
  v1[1] = sub_100015D60;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 16,  0LL,  0LL,  0x6976726553746567LL,  0xEC00000029286563LL,  sub_1000138C8,  *(void *)(v0 + 24),  v2);
}

uint64_t sub_10001214C()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10001216C, 0LL, 0LL);
}

uint64_t sub_10001216C()
{
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 48) = v2;
  void *v2 = v0;
  v2[1] = sub_10001220C;
  return withCheckedContinuation<A>(isolation:function:_:)( v2,  0LL,  0LL,  0x4970757472617473LL,  0xEF2928656E6F4473LL,  sub_100015E28,  v1,  (char *)&type metadata for () + 8);
}

uint64_t sub_10001220C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 48LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100012268, 0LL, 0LL);
}

uint64_t sub_100012268()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_100004AEC(&qword_10099CB10);
  *uint64_t v1 = v0;
  v1[1] = sub_1000122FC;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 16,  0LL,  0LL,  0x6976726553746567LL,  0xEC00000029286563LL,  sub_100015C88,  *(void *)(v0 + 24),  v2);
}

uint64_t sub_1000122FC()
{
  uint64_t v1 = *v0;
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 56));
  return (*(uint64_t (**)(void))(v3 + 8))(*(void *)(v1 + 16));
}

uint64_t sub_100012344()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return swift_task_switch(sub_100012364, 0LL, 0LL);
}

uint64_t sub_100012364()
{
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 48) = v2;
  void *v2 = v0;
  v2[1] = sub_100012404;
  return withCheckedContinuation<A>(isolation:function:_:)( v2,  0LL,  0LL,  0x4970757472617473LL,  0xEF2928656E6F4473LL,  sub_100015E28,  v1,  (char *)&type metadata for () + 8);
}

uint64_t sub_100012404()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 48LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100012460, 0LL, 0LL);
}

uint64_t sub_100012460()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_100004AEC(&qword_10099C9B8);
  *uint64_t v1 = v0;
  v1[1] = sub_100015D60;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 16,  0LL,  0LL,  0x6976726553746567LL,  0xEC00000029286563LL,  sub_10001362C,  *(void *)(v0 + 24),  v2);
}

uint64_t sub_1000124F4()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return swift_task_switch(sub_100012514, 0LL, 0LL);
}

uint64_t sub_100012514()
{
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 48) = v2;
  void *v2 = v0;
  v2[1] = sub_1000125B4;
  return withCheckedContinuation<A>(isolation:function:_:)( v2,  0LL,  0LL,  0x4970757472617473LL,  0xEF2928656E6F4473LL,  sub_100015E28,  v1,  (char *)&type metadata for () + 8);
}

uint64_t sub_1000125B4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 48LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100012610, 0LL, 0LL);
}

uint64_t sub_100012610()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_100004AEC(&qword_10099C940);
  *uint64_t v1 = v0;
  v1[1] = sub_100015D60;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 16,  0LL,  0LL,  0x6976726553746567LL,  0xEC00000029286563LL,  sub_10001341C,  *(void *)(v0 + 24),  v2);
}

uint64_t sub_1000126A4()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return swift_task_switch(sub_1000126C4, 0LL, 0LL);
}

uint64_t sub_1000126C4()
{
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 48) = v2;
  void *v2 = v0;
  v2[1] = sub_100012764;
  return withCheckedContinuation<A>(isolation:function:_:)( v2,  0LL,  0LL,  0x4970757472617473LL,  0xEF2928656E6F4473LL,  sub_100015E28,  v1,  (char *)&type metadata for () + 8);
}

uint64_t sub_100012764()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 48LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1000127C0, 0LL, 0LL);
}

uint64_t sub_1000127C0()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_100004AEC(&qword_10099C988);
  *uint64_t v1 = v0;
  v1[1] = sub_100015D60;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 16,  0LL,  0LL,  0x6976726553746567LL,  0xEC00000029286563LL,  sub_100013578,  *(void *)(v0 + 24),  v2);
}

uint64_t sub_100012854()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return swift_task_switch(sub_100012874, 0LL, 0LL);
}

uint64_t sub_100012874()
{
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 48) = v2;
  void *v2 = v0;
  v2[1] = sub_100012914;
  return withCheckedContinuation<A>(isolation:function:_:)( v2,  0LL,  0LL,  0x4970757472617473LL,  0xEF2928656E6F4473LL,  sub_100015E28,  v1,  (char *)&type metadata for () + 8);
}

uint64_t sub_100012914()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 48LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100012970, 0LL, 0LL);
}

uint64_t sub_100012970()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009B5B20);
  *uint64_t v1 = v0;
  v1[1] = sub_100015D60;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 16,  0LL,  0LL,  0x6976726553746567LL,  0xEC00000029286563LL,  sub_100013920,  *(void *)(v0 + 24),  v2);
}

uint64_t sub_100012A04(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v30 = a6;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v33 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v31 = *(void *)(v12 - 8);
  uint64_t v32 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(a3);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  __chkstk_darwin(v15);
  uint64_t v29 = *(void *)(a2 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))( (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v15);
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = (v18 + 24) & ~v18;
  uint64_t v20 = swift_allocObject(v27, v19 + v17, v18 | 7);
  *(void *)(v20 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))( v20 + v19,  (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v15);
  aBlock[4] = v28;
  uint64_t v36 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = v30;
  uint64_t v21 = _Block_copy(aBlock);
  uint64_t v22 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v22);
  uint64_t v34 = _swiftEmptyArrayStorage;
  uint64_t v23 = sub_100015C48( (unint64_t *)&qword_10099FAB0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v24 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  unint64_t v25 = sub_100012FF8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v24, v25, v9, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v11, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v32);
  return swift_release(v36);
}

uint64_t sub_100012C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t *a5)
{
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    uint64_t v11 = v9 + 32;
    swift_bridgeObjectRetain(v9);
    do
    {
      sub_100013044(v11, (uint64_t)v18);
      uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009B14A0);
      uint64_t v13 = a4(a3);
      else {
        BOOL v14 = 1;
      }
      if (!v14)
      {
        swift_bridgeObjectRelease(v9);
        v18[0] = v17;
        goto LABEL_11;
      }

      v11 += 40LL;
      --v10;
    }

    while (v10);
    swift_bridgeObjectRelease(v9);
  }

  v18[0] = 0LL;
LABEL_11:
  uint64_t v15 = sub_100004AEC(a5);
  return CheckedContinuation.resume(returning:)(v18, v15);
}

uint64_t sub_100012D64(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v9 = v7 + 32;
    swift_bridgeObjectRetain(v7);
    while (1)
    {
      sub_100013044(v9, (uint64_t)v15);
      uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009B14A0);
      uint64_t v11 = a4(0LL);
      v9 += 40LL;
      if (!--v8)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }

    swift_bridgeObjectRelease();
    v15[0] = v14;
  }

  else
  {
LABEL_6:
    v15[0] = 0LL;
  }

  uint64_t v12 = sub_100004AEC(a3);
  return CheckedContinuation.resume(returning:)(v15, v12);
}

uint64_t sub_100012E5C(uint64_t a1, int *a2)
{
  int v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  id v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v4;
  *id v4 = v2;
  v4[1] = sub_100015D5C;
  return v6(a1);
}

uint64_t sub_100012EC0(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v3;
  return a2;
}

void *sub_100012ED8(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t sub_100012EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FinderStateInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100012F40(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FinderStateInfo(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100012F7C(uint64_t a1)
{
  return sub_100217240(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100012F84(uint64_t a1)
{
  return sub_100012A04( a1,  v1,  &qword_10099C858,  (uint64_t)&unk_100938298,  (uint64_t)sub_100012FC8,  (uint64_t)&unk_1009382B0);
}

uint64_t sub_100012FBC()
{
  return sub_100015CCC(&qword_10099C858);
}

uint64_t sub_100012FC8()
{
  return sub_1000130E4(&qword_10099C858, 0LL, type metadata accessor for FinderStateObserver);
}

uint64_t sub_100012FE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100012FF0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_100012FF8()
{
  unint64_t result = qword_10099FAC0;
  if (!qword_10099FAC0)
  {
    uint64_t v1 = sub_100004B78((uint64_t *)&unk_1009AB860);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10099FAC0);
  }

  return result;
}

uint64_t sub_100013044(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100013088(uint64_t a1)
{
  return sub_100012A04( a1,  v1,  &qword_10099C870,  (uint64_t)&unk_1009382E8,  (uint64_t)sub_1000130CC,  (uint64_t)&unk_100938300);
}

uint64_t sub_1000130C0()
{
  return sub_100015CCC(&qword_10099C870);
}

uint64_t sub_1000130CC()
{
  return sub_1000130E4( &qword_10099C870,  0LL,  (uint64_t (*)(uint64_t))type metadata accessor for FindMyNetworkPublisherService);
}

uint64_t sub_1000130E4(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(sub_100004AEC(a1) - 8) + 80LL);
  return sub_100012C54(*(void *)(v3 + 16), v3 + ((v7 + 24) & ~v7), a2, a3, a1);
}

uint64_t sub_10001313C(uint64_t a1)
{
  return sub_100012A04( a1,  v1,  &qword_10099C888,  (uint64_t)&unk_100938338,  (uint64_t)sub_100013180,  (uint64_t)&unk_100938350);
}

uint64_t sub_100013174()
{
  return sub_100015CCC(&qword_10099C888);
}

uint64_t sub_100013180()
{
  return sub_1000130E4( &qword_10099C888,  0LL,  (uint64_t (*)(uint64_t))type metadata accessor for ObservationStoreService);
}

uint64_t sub_100013198(uint64_t a1)
{
  return sub_100012A04( a1,  v1,  &qword_10099C8A0,  (uint64_t)&unk_100938388,  (uint64_t)sub_1000131DC,  (uint64_t)&unk_1009383A0);
}

uint64_t sub_1000131D0()
{
  return sub_100015CCC(&qword_10099C8A0);
}

uint64_t sub_1000131DC()
{
  return sub_1000130E4( &qword_10099C8A0,  0LL,  (uint64_t (*)(uint64_t))type metadata accessor for BeaconStoreActor);
}

uint64_t sub_1000131F4(uint64_t a1)
{
  return sub_100012A04( a1,  v1,  &qword_10099C8B8,  (uint64_t)&unk_1009383D8,  (uint64_t)sub_100013238,  (uint64_t)&unk_1009383F0);
}

uint64_t sub_10001322C()
{
  return sub_100015CCC(&qword_10099C8B8);
}

uint64_t sub_100013238()
{
  return sub_1000130E4( &qword_10099C8B8,  0LL,  (uint64_t (*)(uint64_t))type metadata accessor for BeaconKeyService);
}

uint64_t sub_100013250(uint64_t a1)
{
  return sub_100012A04( a1,  v1,  &qword_10099C8D0,  (uint64_t)&unk_100938428,  (uint64_t)sub_100013294,  (uint64_t)&unk_100938440);
}

uint64_t sub_100013288()
{
  return sub_100015CCC(&qword_10099C8D0);
}

uint64_t sub_100013294()
{
  return sub_1000130E4(&qword_10099C8D0, 0LL, type metadata accessor for BeaconStore);
}

uint64_t sub_1000132AC(uint64_t a1)
{
  return sub_100012A04( a1,  v1,  &qword_10099C8E8,  (uint64_t)&unk_100938478,  (uint64_t)sub_1000132F0,  (uint64_t)&unk_100938490);
}

uint64_t sub_1000132E4()
{
  return sub_100015CCC(&qword_10099C8E8);
}

uint64_t sub_1000132F0()
{
  return sub_1000130E4( &qword_10099C8E8,  0LL,  (uint64_t (*)(uint64_t))type metadata accessor for StandaloneBeaconService);
}

uint64_t sub_100013308(uint64_t a1)
{
  return sub_100012A04( a1,  v1,  &qword_10099C900,  (uint64_t)&unk_1009384C8,  (uint64_t)sub_10001334C,  (uint64_t)&unk_1009384E0);
}

uint64_t sub_100013340()
{
  return sub_100015CCC(&qword_10099C900);
}

uint64_t sub_10001334C()
{
  return sub_1000130E4( &qword_10099C900,  0LL,  (uint64_t (*)(uint64_t))type metadata accessor for SimpleBeaconUpdateService);
}

uint64_t sub_100013364(uint64_t a1)
{
  return sub_100012A04( a1,  v1,  &qword_10099C918,  (uint64_t)&unk_100938518,  (uint64_t)sub_1000133A8,  (uint64_t)&unk_100938530);
}

uint64_t sub_10001339C()
{
  return sub_100015CCC(&qword_10099C918);
}

uint64_t sub_1000133A8()
{
  return sub_1000130E4( &qword_10099C918,  0LL,  (uint64_t (*)(uint64_t))type metadata accessor for NotifyWhenFoundManager);
}

uint64_t sub_1000133C0(uint64_t a1)
{
  return sub_100012A04( a1,  v1,  &qword_10099C930,  (uint64_t)&unk_100938568,  (uint64_t)sub_100013404,  (uint64_t)&unk_100938580);
}

uint64_t sub_1000133F8()
{
  return sub_100015CCC(&qword_10099C930);
}

uint64_t sub_100013404()
{
  return sub_1000130E4(&qword_10099C930, 0LL, type metadata accessor for OwnerCommandService);
}

uint64_t sub_10001341C(uint64_t a1)
{
  return sub_100012A04( a1,  v1,  &qword_10099C948,  (uint64_t)&unk_1009385B8,  (uint64_t)sub_100013460,  (uint64_t)&unk_1009385D0);
}

uint64_t sub_100013454()
{
  return sub_100015CCC(&qword_10099C948);
}

uint64_t sub_100013460()
{
  return sub_100013474(&qword_10099C948, (uint64_t (*)(void))type metadata accessor for FMIPService);
}

uint64_t sub_100013474(uint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(sub_100004AEC(a1) - 8) + 80LL);
  return sub_100012D64(*(void *)(v2 + 16), v2 + ((v5 + 24) & ~v5), a1, a2);
}

uint64_t sub_1000134C4(uint64_t a1)
{
  return sub_100012A04( a1,  v1,  &qword_10099C960,  (uint64_t)&unk_100938608,  (uint64_t)sub_100013508,  (uint64_t)&unk_100938620);
}

uint64_t sub_1000134FC()
{
  return sub_100015CCC(&qword_10099C960);
}

uint64_t sub_100013508()
{
  return sub_100013474(&qword_10099C960, (uint64_t (*)(void))type metadata accessor for OwnerCommandManager);
}

uint64_t sub_10001351C(uint64_t a1)
{
  return sub_100012A04( a1,  v1,  &qword_10099C978,  (uint64_t)&unk_100938658,  (uint64_t)sub_100013560,  (uint64_t)&unk_100938670);
}

uint64_t sub_100013554()
{
  return sub_100015CCC(&qword_10099C978);
}

uint64_t sub_100013560()
{
  return sub_1000130E4(&qword_10099C978, 0LL, type metadata accessor for BeaconManagerService);
}

uint64_t sub_100013578(uint64_t a1)
{
  return sub_100012A04( a1,  v1,  &qword_10099C990,  (uint64_t)&unk_1009386A8,  (uint64_t)sub_1000135BC,  (uint64_t)&unk_1009386C0);
}

uint64_t sub_1000135B0()
{
  return sub_100015CCC(&qword_10099C990);
}

uint64_t sub_1000135BC()
{
  return sub_100013474( &qword_10099C990,  (uint64_t (*)(void))type metadata accessor for DeviceBeaconPayloadPublisher);
}

uint64_t sub_1000135D0(uint64_t a1)
{
  return sub_100012A04( a1,  v1,  &qword_10099C9A8,  (uint64_t)&unk_1009386F8,  (uint64_t)sub_100013614,  (uint64_t)&unk_100938710);
}

uint64_t sub_100013608()
{
  return sub_100015CCC(&qword_10099C9A8);
}

uint64_t sub_100013614()
{
  return sub_1000130E4( &qword_10099C9A8,  0LL,  (uint64_t (*)(uint64_t))type metadata accessor for BatteryLevelService);
}

uint64_t sub_10001362C(uint64_t a1)
{
  return sub_100012A04( a1,  v1,  &qword_10099C9C0,  (uint64_t)&unk_100938748,  (uint64_t)sub_100013670,  (uint64_t)&unk_100938760);
}

uint64_t sub_100013664()
{
  return sub_100015CCC(&qword_10099C9C0);
}

uint64_t sub_100013670()
{
  return sub_100013474( &qword_10099C9C0,  (uint64_t (*)(void))type metadata accessor for LeechScanningService);
}

uint64_t sub_100013684(uint64_t a1, int *a2)
{
  int v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000136E8;
  return v6(a1);
}

uint64_t sub_1000136E8()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100013734()
{
  uint64_t v0 = type metadata accessor for NetworkReachabilityStatus(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  int v6 = (char *)&v15 - v5;
  uint64_t v7 = type metadata accessor for NetworkReachability(0LL);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t v8 = NetworkReachability.init()();
  dispatch thunk of NetworkReachability.status.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v4,  enum case for NetworkReachabilityStatus.reachableViaWiFi(_:),  v0);
  uint64_t v9 = sub_100015C48( &qword_10099C9C8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NetworkReachabilityStatus,  (uint64_t)&protocol conformance descriptor for NetworkReachabilityStatus);
  dispatch thunk of RawRepresentable.rawValue.getter(&v17, v0, v9);
  dispatch thunk of RawRepresentable.rawValue.getter(&v15, v0, v9);
  uint64_t v10 = v18;
  uint64_t v11 = v16;
  if (v17 == v15 && v18 == v16)
  {
    char v12 = 1;
    uint64_t v11 = v18;
  }

  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v15, v16, 0LL);
  }

  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v11);
  swift_release(v8);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v1 + 8);
  v13(v4, v0);
  v13(v6, v0);
  return v12 & 1;
}

uint64_t sub_1000138C8(uint64_t a1)
{
  return sub_100012A04( a1,  v1,  &qword_10099C9E0,  (uint64_t)&unk_100938798,  (uint64_t)sub_10001390C,  (uint64_t)&unk_1009387B0);
}

uint64_t sub_100013900()
{
  return sub_100015CCC(&qword_10099C9E0);
}

uint64_t sub_10001390C()
{
  return sub_100013474( &qword_10099C9E0,  (uint64_t (*)(void))type metadata accessor for WildModeAssociationRecordsPublisher);
}

uint64_t sub_100013920(uint64_t a1)
{
  return sub_100012A04( a1,  v1,  &qword_10099C9F0,  (uint64_t)&unk_1009387E8,  (uint64_t)sub_100013964,  (uint64_t)&unk_100938800);
}

uint64_t sub_100013958()
{
  return sub_100015CCC(&qword_10099C9F0);
}

uint64_t sub_100013964()
{
  return sub_100013474(&qword_10099C9F0, (uint64_t (*)(void))type metadata accessor for CentralManager);
}

uint64_t sub_100013978(uint64_t a1)
{
  return sub_100012A04( a1,  v1,  &qword_10099CA10,  (uint64_t)&unk_100938838,  (uint64_t)sub_1000139BC,  (uint64_t)&unk_100938850);
}

uint64_t sub_1000139B0()
{
  return sub_100015CCC(&qword_10099CA10);
}

uint64_t sub_1000139BC()
{
  return sub_1000130E4( &qword_10099CA10,  0LL,  (uint64_t (*)(uint64_t))type metadata accessor for CompanionPublishActivity);
}

uint64_t sub_1000139D4(uint64_t a1)
{
  return sub_100012A04( a1,  v1,  &qword_10099CA28,  (uint64_t)&unk_100938888,  (uint64_t)sub_100013A18,  (uint64_t)&unk_1009388A0);
}

uint64_t sub_100013A0C()
{
  return sub_100015CCC(&qword_10099CA28);
}

uint64_t sub_100013A18(uint64_t a1, uint64_t a2)
{
  return sub_1000130E4( &qword_10099CA28,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for FindMyNetworkPublishActivityService);
}

uint64_t sub_100013A2C(uint64_t a1)
{
  return sub_100012A04( a1,  v1,  &qword_10099CA40,  (uint64_t)&unk_1009388D8,  (uint64_t)sub_100013A70,  (uint64_t)&unk_1009388F0);
}

uint64_t sub_100013A64()
{
  return sub_100015CCC(&qword_10099CA40);
}

uint64_t sub_100013A70()
{
  return sub_1000130E4( &qword_10099CA40,  0LL,  (uint64_t (*)(uint64_t))type metadata accessor for AccountService);
}

uint64_t sub_100013A88()
{
  uint64_t v0 = sub_100004AEC(&qword_1009A9BF0);
  uint64_t v1 = __chkstk_darwin(v0);
  v121 = (char *)&v119 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v1);
  v126 = (char *)&v119 - v3;
  uint64_t v132 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v4 = __chkstk_darwin(v132);
  uint64_t v122 = (uint64_t)&v119 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v127 = (uint64_t)&v119 - v6;
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v119 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  v125 = (char *)&v119 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  v136 = (char *)&v119 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v119 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  v134 = (char *)&v119 - v20;
  __chkstk_darwin(v19);
  v141 = (char *)&v119 - v21;
  unint64_t v22 = sub_1000F26E0();
  uint64_t v23 = sub_1000B88B0(v22);
  swift_bridgeObjectRelease(v22);
  unint64_t v24 = *(void *)(v23 + 16);
  if (!v24)
  {
    uint64_t v71 = v23;
LABEL_43:
    swift_bridgeObjectRelease(v71);
    return 0LL;
  }

  unint64_t v25 = 0LL;
  unint64_t v26 = (*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v135 = v23;
  unint64_t v120 = v26;
  uint64_t v27 = (char *)(v23 + v26);
  uint64_t v140 = *(void *)(v8 + 72);
  v138 = *(void (**)(char *))(v8 + 16);
  unsigned int v137 = enum case for Feature.FindMy.trustedNowUsesReferenceClock(_:);
  NSNotificationName v131 = NSSystemClockDidChangeNotification;
  v124 = (char *)&type metadata for () + 8;
  uint64_t v129 = v7;
  uint64_t v128 = v8;
  v130 = v18;
  uint64_t v28 = v11;
  v123 = v11;
  unint64_t v139 = v24;
  while (1)
  {
    v133 = v27;
    v138(v136);
    if (qword_10099B6A0 != -1) {
      swift_once(&qword_10099B6A0, sub_100626B90);
    }
    double aBlock = 7.45683732e247;
    *(double *)&uint64_t v147 = -5.98008217e197;
    SynchronousCache.cachedValue<A>(key:computeBlock:)(v144, &aBlock, sub_10000A71C, 0LL, &type metadata for Bool);
    swift_bridgeObjectRelease(v147);
    if (LOBYTE(v144[0]) == 1)
    {
      id v29 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
      unsigned int v30 = [v29 isInternalBuild];

      if (v30)
      {
        if (qword_10099B020 != -1) {
          swift_once(&qword_10099B020, sub_10000A320);
        }
        uint64_t v31 = sub_10000A720(v132, (uint64_t)qword_10099C630);
        swift_beginAccess(v31, v142, 0LL, 0LL);
        uint64_t v32 = v31;
        uint64_t v33 = v122;
        sub_10001581C(v32, v122, (uint64_t *)&unk_10099D720);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v33, 1LL, v7) != 1)
        {
          uint64_t v59 = v8;
          v60 = v28;
          uint64_t v61 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 32))(v28, v33, v7);
          goto LABEL_34;
        }

        sub_100015794(v33, (uint64_t *)&unk_10099D720);
      }
    }

    uint64_t My = type metadata accessor for Feature.FindMy(0LL);
    v149 = (void *)My;
    uint64_t v150 = sub_100015C48( (unint64_t *)&qword_1009B04D0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
    uint64_t v35 = sub_10000A7C8(&aBlock);
    (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))(v35, v137, My);
    LOBYTE(My) = isFeatureEnabled(_:)(&aBlock);
    uint64_t v36 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
    if ((My & 1) == 0)
    {
      uint64_t v59 = v8;
      v60 = v28;
      uint64_t v61 = Date.init()(v36);
      goto LABEL_34;
    }

    if (qword_10099B6B0 != -1) {
      swift_once(&qword_10099B6B0, sub_1006307C8);
    }
    uint64_t v37 = qword_1009B8F50;
    uint64_t v38 = sub_100004AEC(&qword_10099CA80);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100015860, 0LL, v37, v124, v38);
    double v39 = *(double *)&v147;
    if ((LOBYTE(aBlock) & 1) == 0)
    {
      id v40 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
      uint64_t v150 = (uint64_t)sub_100015874;
      uint64_t v151 = 0LL;
      double aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
      uint64_t v147 = 1107296256LL;
      v148 = sub_100630694;
      v149 = &unk_100938990;
      v41 = _Block_copy(&aBlock);
      swift_release(v151);
      id v42 = [v40 addObserverForName:v131 object:0 queue:0 usingBlock:v41];
      _Block_release(v41);
      uint64_t v28 = v123;
      swift_unknownObjectRelease(v42);
    }

    if (qword_10099B6C0 != -1) {
      swift_once(&qword_10099B6C0, sub_100630838);
    }
    double Current = CFAbsoluteTimeGetCurrent();
    uint64_t v44 = qword_1009B8F50;
    uint64_t v45 = sub_100004AEC(&qword_10099CA88);
    uint64_t v46 = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100015878, 0LL, v44, (char *)&type metadata for () + 8, v45);
    if (Current - aBlock - *(double *)&v147 > 86400.0)
    {
      OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_10001588C,  0LL,  qword_1009B8F50,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
      uint64_t v47 = type metadata accessor for TaskPriority(0LL);
      uint64_t v48 = *(void *)(v47 - 8);
      uint64_t v49 = (uint64_t)v121;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56))(v121, 1LL, 1LL, v47);
      uint64_t v50 = swift_allocObject(&unk_1009389C8, 32LL, 7LL);
      *(void *)(v50 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = 0LL;
      v51 = (uint64_t *)(v50 + 16);
      *(void *)(v50 + 24) = 0LL;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v49, 1LL, v47) == 1)
      {
        sub_100015794(v49, &qword_1009A9BF0);
        uint64_t v52 = 0LL;
        uint64_t v53 = *v51;
        if (*v51)
        {
LABEL_23:
          uint64_t v54 = *(void *)(v50 + 24);
          uint64_t ObjectType = swift_getObjectType(v53);
          swift_unknownObjectRetain(v53);
          uint64_t v56 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v54);
          uint64_t v58 = v57;
          swift_unknownObjectRelease(v53);
LABEL_29:
          uint64_t v18 = v130;
          uint64_t v63 = swift_allocObject(&unk_1009389F0, 32LL, 7LL);
          *(void *)(v63 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = &unk_10099CAA0;
          *(void *)(v63 + 24) = v50;
          if (v58 | v56)
          {
            v143[0] = 0LL;
            v143[1] = 0LL;
            v64 = v143;
            v143[2] = v56;
            v143[3] = v58;
          }

          else
          {
            v64 = 0LL;
          }

          uint64_t v7 = v129;
          uint64_t v59 = v128;
          v60 = v123;
          uint64_t v65 = swift_task_create(v52 | 0x1C00, v64, (char *)&type metadata for () + 8, &unk_10099CAA8, v63);
          uint64_t v46 = swift_release(v65);
          goto LABEL_33;
        }
      }

      else
      {
        unsigned __int8 v62 = TaskPriority.rawValue.getter();
        (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v49, v47);
        uint64_t v52 = v62;
        uint64_t v53 = *v51;
        if (*v51) {
          goto LABEL_23;
        }
      }

      uint64_t v56 = 0LL;
      uint64_t v58 = 0LL;
      goto LABEL_29;
    }

    uint64_t v59 = v8;
    v60 = v28;
LABEL_33:
    uint64_t v61 = Date.init(timeIntervalSinceReferenceDate:)(v46);
LABEL_34:
    v66 = v125;
    Date.addingTimeInterval(_:)(v61, -86400.0);
    v67 = *(void (**)(char *, uint64_t))(v59 + 8);
    uint64_t v28 = v60;
    v67(v60, v7);
    v68 = v136;
    char v69 = static Date.> infix(_:_:)(v136, v66);
    v67(v66, v7);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v67)(v68, v7);
    if ((v69 & 1) != 0) {
      break;
    }
    ++v25;
    uint64_t v27 = &v133[v140];
    uint64_t v8 = v59;
    if (v139 == v25) {
      goto LABEL_42;
    }
  }

  unint64_t v72 = v139;
  uint64_t v73 = v25;
  uint64_t v74 = v59;
  if (v139 < v25)
  {
    uint64_t v75 = -1LL;
    uint64_t v76 = v25;
    uint64_t v73 = v139;
    goto LABEL_45;
  }

  if (v139 == v25)
  {
LABEL_42:
    uint64_t v71 = v135;
    goto LABEL_43;
  }

  uint64_t v75 = 1LL;
  uint64_t v76 = v139;
LABEL_45:
  v77 = 0LL;
  v124 = (char *)(v135 + v120);
  v133 = (char *)&type metadata for () + 8;
  v123 = (char *)v75;
  uint64_t v122 = v76;
  while (2)
  {
    BOOL v79 = __OFADD__(v77, v75);
    v77 += v75;
    if (v79) {
      goto LABEL_90;
    }
    if (v73 == v72)
    {
LABEL_91:
      __break(1u);
      return result;
    }

    unint64_t v78 = v73 + 1;
    if (v73 + 1 != v72)
    {
      v125 = v77;
      v80 = &v124[v140 * v78];
      v136 = (char *)v73;
      while (1)
      {
        if (v73 < -1)
        {
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
          goto LABEL_91;
        }

        if (v78 >= *(void *)(v135 + 16)) {
          goto LABEL_89;
        }
        ((void (*)(char *, char *, uint64_t))v138)(v141, v80, v7);
        double aBlock = 7.45683732e247;
        *(double *)&uint64_t v147 = -5.98008217e197;
        SynchronousCache.cachedValue<A>(key:computeBlock:)(&v152, &aBlock, sub_10000A71C, 0LL, &type metadata for Bool);
        swift_bridgeObjectRelease(v147);
        if (v152 == 1)
        {
          id v81 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
          unsigned int v82 = [v81 isInternalBuild];

          if (v82)
          {
            if (qword_10099B020 != -1) {
              swift_once(&qword_10099B020, sub_10000A320);
            }
            uint64_t v83 = sub_10000A720(v132, (uint64_t)qword_10099C630);
            swift_beginAccess(v83, v144, 0LL, 0LL);
            uint64_t v84 = v83;
            uint64_t v85 = v127;
            sub_10001581C(v84, v127, (uint64_t *)&unk_10099D720);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v85, 1LL, v7) != 1)
            {
              uint64_t v111 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 32))(v18, v85, v7);
              goto LABEL_82;
            }

            sub_100015794(v85, (uint64_t *)&unk_10099D720);
          }
        }

        uint64_t v86 = type metadata accessor for Feature.FindMy(0LL);
        v149 = (void *)v86;
        uint64_t v150 = sub_100015C48( (unint64_t *)&qword_1009B04D0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
        v87 = sub_10000A7C8(&aBlock);
        (*(void (**)(void *, void, uint64_t))(*(void *)(v86 - 8) + 104LL))(v87, v137, v86);
        LOBYTE(v86) = isFeatureEnabled(_:)(&aBlock);
        uint64_t v88 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
        if ((v86 & 1) == 0)
        {
          uint64_t v111 = Date.init()(v88);
          goto LABEL_82;
        }

        if (qword_10099B6B0 != -1) {
          swift_once(&qword_10099B6B0, sub_1006307C8);
        }
        uint64_t v89 = qword_1009B8F50;
        uint64_t v90 = sub_100004AEC(&qword_10099CA80);
        OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100015860, 0LL, v89, v133, v90);
        double v91 = *(double *)&v147;
        if ((LOBYTE(aBlock) & 1) == 0)
        {
          id v92 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
          uint64_t v150 = (uint64_t)sub_100015874;
          uint64_t v151 = 0LL;
          double aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
          uint64_t v147 = 1107296256LL;
          v148 = sub_100630694;
          v149 = &unk_100938918;
          v93 = _Block_copy(&aBlock);
          swift_release(v151);
          id v94 = [v92 addObserverForName:v131 object:0 queue:0 usingBlock:v93];
          _Block_release(v93);
          swift_unknownObjectRelease(v94);
        }

        if (qword_10099B6C0 != -1) {
          swift_once(&qword_10099B6C0, sub_100630838);
        }
        double v95 = CFAbsoluteTimeGetCurrent();
        uint64_t v96 = qword_1009B8F50;
        uint64_t v97 = sub_100004AEC(&qword_10099CA88);
        uint64_t v98 = OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_100015878,  0LL,  v96,  (char *)&type metadata for () + 8,  v97);
LABEL_81:
        uint64_t v111 = Date.init(timeIntervalSinceReferenceDate:)(v98);
LABEL_82:
        v116 = v134;
        Date.addingTimeInterval(_:)(v111, -86400.0);
        v67(v18, v7);
        v117 = v141;
        char v118 = static Date.> infix(_:_:)(v141, v116);
        v67(v116, v7);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v67)(v117, v7);
        if ((v118 & 1) != 0)
        {
          unint64_t v72 = v139;
          goto LABEL_86;
        }

        ++v78;
        v80 += v140;
        unint64_t v72 = v139;
        uint64_t v73 = (uint64_t)v136;
        if (v139 == v78)
        {
          unint64_t v78 = v139;
LABEL_86:
          uint64_t v75 = (uint64_t)v123;
          v77 = v125;
          uint64_t v76 = v122;
          goto LABEL_47;
        }
      }

      OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_10001588C,  0LL,  qword_1009B8F50,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
      uint64_t v99 = type metadata accessor for TaskPriority(0LL);
      uint64_t v100 = *(void *)(v99 - 8);
      uint64_t v101 = (uint64_t)v126;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v100 + 56))(v126, 1LL, 1LL, v99);
      uint64_t v102 = swift_allocObject(&unk_100938950, 32LL, 7LL);
      *(void *)(v102 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = 0LL;
      v103 = (uint64_t *)(v102 + 16);
      *(void *)(v102 + 24) = 0LL;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v100 + 48))(v101, 1LL, v99) == 1)
      {
        sub_100015794(v101, &qword_1009A9BF0);
        uint64_t v104 = 0LL;
        uint64_t v105 = *v103;
        if (*v103) {
          goto LABEL_72;
        }
LABEL_76:
        uint64_t v108 = 0LL;
        uint64_t v110 = 0LL;
      }

      else
      {
        unsigned __int8 v112 = TaskPriority.rawValue.getter();
        (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v101, v99);
        uint64_t v104 = v112;
        uint64_t v105 = *v103;
        if (!*v103) {
          goto LABEL_76;
        }
LABEL_72:
        uint64_t v106 = *(void *)(v102 + 24);
        uint64_t v107 = swift_getObjectType(v105);
        swift_unknownObjectRetain(v105);
        uint64_t v108 = dispatch thunk of Actor.unownedExecutor.getter(v107, v106);
        uint64_t v110 = v109;
        swift_unknownObjectRelease(v105);
      }

      uint64_t v113 = swift_allocObject(&unk_100938978, 32LL, 7LL);
      *(void *)(v113 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = &unk_10099CA90;
      *(void *)(v113 + 24) = v102;
      if (v110 | v108)
      {
        v145[0] = 0LL;
        v145[1] = 0LL;
        v114 = v145;
        v145[2] = v108;
        v145[3] = v110;
      }

      else
      {
        v114 = 0LL;
      }

      uint64_t v7 = v129;
      uint64_t v74 = v128;
      uint64_t v115 = swift_task_create(v104 | 0x1C00, v114, (char *)&type metadata for () + 8, &unk_10099CA98, v113);
      uint64_t v98 = swift_release(v115);
      uint64_t v18 = v130;
      goto LABEL_81;
    }

    unint64_t v78 = v72;
LABEL_47:
    uint64_t v73 = v78;
    if (v78 != v76) {
      continue;
    }
    break;
  }

  swift_bridgeObjectRelease(v135);
  return (uint64_t)v77;
}

uint64_t sub_100014A74(char a1)
{
  *(_BYTE *)(v1 + 96) = a1;
  unint64_t v2 = (*(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_10099D720) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v1 + 48) = swift_task_alloc(v2);
  *(void *)(v1 + 56) = swift_task_alloc(v2);
  *(void *)(v1 + 64) = swift_task_alloc(v2);
  return swift_task_switch(sub_100014AEC, 0LL, 0LL);
}

uint64_t sub_100014AEC()
{
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  uint64_t v1 = qword_100A2A710;
  *(void *)(v0 + 72) = qword_100A2A710;
  uint64_t v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain(v1);
  uint64_t v3 = (void *)swift_task_alloc(v2);
  *(void *)(v0 + 80) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100014B9C;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_100015814, v1, &type metadata for Configuration);
}

uint64_t sub_100014B9C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 72LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 80LL));
  swift_release(v1);
  return swift_task_switch(sub_100014BF8, 0LL, 0LL);
}

uint64_t sub_100014BF8()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = sub_1006A107C(v2);
  uint64_t v4 = sub_1006A1090(v2);
  swift_bridgeObjectRelease(v2);
  uint64_t v5 = v3 + v4;
  if (__OFADD__(v3, v4))
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = *(char **)(v0 + 64);
    uint64_t v1 = sub_100013A88();
    unint64_t v7 = sub_1000F26E0();
    uint64_t v8 = sub_1000B88B0(v7);
    swift_bridgeObjectRelease(v7);
    sub_1000F0D9C(v8, v6);
    swift_bridgeObjectRelease(v8);
    if (qword_10099B028 == -1) {
      goto LABEL_3;
    }
  }

  swift_once(&qword_10099B028, sub_10000B224);
LABEL_3:
  uint64_t v9 = *(void *)(v0 + 56);
  uint64_t v10 = *(void *)(v0 + 64);
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_10000A720(v11, (uint64_t)qword_100A29E40);
  uint64_t v12 = sub_10001581C(v10, v9, (uint64_t *)&unk_10099D720);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v37 = v14;
    uint64_t v35 = v0 + 92;
    uint64_t v15 = *(void *)(v0 + 48);
    uint64_t v16 = *(void *)(v0 + 56);
    uint64_t v17 = swift_slowAlloc(44LL, -1LL);
    uint64_t v36 = swift_slowAlloc(32LL, -1LL);
    uint64_t v38 = v36;
    *(_DWORD *)uint64_t v17 = 134219010;
    uint64_t v34 = v1;
    *(void *)(v0 + 24) = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v17 + 4, v17 + 12);
    *(_WORD *)(v17 + 12) = 2048;
    *(void *)(v0 + 32) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v17 + 14, v17 + 22);
    *(_WORD *)(v17 + 22) = 2082;
    sub_10001581C(v16, v15, (uint64_t *)&unk_10099D720);
    uint64_t v18 = type metadata accessor for Date(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
    int v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v15, 1LL, v18);
    uint64_t v21 = *(void *)(v0 + 48);
    if (v20 == 1)
    {
      sub_100015794(*(void *)(v0 + 48), (uint64_t *)&unk_10099D720);
      unint64_t v22 = 0xE300000000000000LL;
      uint64_t v23 = 7104878LL;
    }

    else
    {
      uint64_t v23 = Date.debugDescription.getter();
      unint64_t v22 = v27;
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v18);
    }

    uint64_t v28 = *(void *)(v0 + 56);
    uint64_t v33 = *(void *)(v0 + 64);
    int v32 = *(unsigned __int8 *)(v0 + 96);
    *(void *)(v0 + 40) = sub_1003F11D4(v23, v22, &v38);
    uint64_t v1 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v17 + 24, v17 + 32);
    swift_bridgeObjectRelease(v22);
    sub_100015794(v28, (uint64_t *)&unk_10099D720);
    *(_WORD *)(v17 + 32) = 1024;
    *(_DWORD *)(v0 + 88) = v5 < v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v35, v17 + 34, v17 + 38);
    *(_WORD *)(v17 + 38) = 1024;
    *(_DWORD *)(v0 + 92) = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v35, v0 + 96, v17 + 40, v17 + 44);
    _os_log_impl( (void *)&_mh_execute_header,  v13,  v37,  "Publish limit check: %ld / %ld, finderStartOfDay: %{public}s. Reached maximum: %{BOOL}d, on battery: %{BOOL}d.",  (uint8_t *)v17,  0x2Cu);
    swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);

    uint64_t v26 = v33;
  }

  else
  {
    uint64_t v24 = *(void *)(v0 + 56);
    uint64_t v25 = *(void *)(v0 + 64);

    sub_100015794(v24, (uint64_t *)&unk_10099D720);
    uint64_t v26 = v25;
  }

  sub_100015794(v26, (uint64_t *)&unk_10099D720);
  uint64_t v29 = *(void *)(v0 + 56);
  uint64_t v30 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 64));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(BOOL))(v0 + 8))(v5 < v1);
}

double sub_100014FC4()
{
  uint64_t v0 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v0);
  uint64_t v2 = &v14[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t MyNetworkPublishDateProvider = type metadata accessor for FindMyNetworkPublishDateProvider();
  uint64_t v8 = swift_allocObject(MyNetworkPublishDateProvider, 112LL, 15LL);
  swift_defaultActor_initialize();
  unint64_t v9 = sub_1000F26E0();
  uint64_t v10 = sub_1000B88B0(v9);
  swift_bridgeObjectRelease(v9);
  sub_1000F0564(v10, v2);
  swift_bridgeObjectRelease(v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1LL, v3) == 1)
  {
    static Date.trustedNow.getter((uint64_t)v6);
    uint64_t v11 = sub_100015794((uint64_t)v2, (uint64_t *)&unk_10099D720);
  }

  else
  {
    uint64_t v11 = (*(uint64_t (**)(_BYTE *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
  }

  double v12 = Date.timeIntervalSinceNow.getter(v11);
  swift_release(v8);
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
  return fabs(v12);
}

uint64_t sub_100015134(uint64_t a1, char a2)
{
  *(_BYTE *)(v2 + 544) = a2;
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D720);
  *(void *)(v2 + 496) = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Date(0LL);
  *(void *)(v2 + 504) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v2 + 512) = v6;
  *(void *)(v2 + 520) = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000151BC, a1, 0LL);
}

uint64_t sub_1000151BC()
{
  uint64_t v1 = *(void *)(v0 + 504);
  uint64_t v2 = *(void *)(v0 + 512);
  uint64_t v3 = *(void *)(v0 + 496);
  uint64_t MyNetworkPublishDateProvider = type metadata accessor for FindMyNetworkPublishDateProvider();
  uint64_t v5 = swift_allocObject(MyNetworkPublishDateProvider, 112LL, 15LL);
  swift_defaultActor_initialize();
  sub_100010348(v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1LL, v1) == 1)
  {
    uint64_t v6 = *(void *)(v0 + 496);
    static Date.trustedNow.getter(*(void *)(v0 + 520));
    uint64_t v7 = sub_100015794(v6, (uint64_t *)&unk_10099D720);
  }

  else
  {
    uint64_t v7 = (*(uint64_t (**)(void, void, void))(*(void *)(v0 + 512) + 32LL))( *(void *)(v0 + 520),  *(void *)(v0 + 496),  *(void *)(v0 + 504));
  }

  uint64_t v8 = *(void *)(v0 + 520);
  uint64_t v9 = *(void *)(v0 + 504);
  uint64_t v10 = *(void *)(v0 + 512);
  *(double *)(v0 + 528) = Date.timeIntervalSinceNow.getter(v7);
  swift_release(v5);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  *(double *)(v0 + 536) = sub_100014FC4();
  return swift_task_switch(sub_1000152B4, 0LL, 0LL);
}

void sub_1000152B4()
{
  __asm { BR              X10 }

uint64_t sub_100015314()
{
  double v2 = *(double *)(v0 + 536);
  uint64_t v3 = *(void *)(v0 + 520);
  uint64_t v4 = *(void *)(v0 + 496);
  double v5 = fabs(*(double *)(v0 + 528));
  uint64_t v6 = sub_100716DA4(v2);
  uint64_t v7 = sub_100716DA4(v5);
  uint64_t v8 = sub_100004AEC(&qword_10099CA50);
  uint64_t v9 = ((uint64_t (*)(uint64_t, uint64_t))swift_initStackObject)(v8, v0 + 16);
  *(_OWORD *)(v9 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = xmmword_1007E4060;
  *(void *)(v9 + 32) = 0x7265747461426E6FLL;
  *(void *)(v9 + 40) = v1 + 7;
  uint64_t v10 = sub_1006F0F78((uint64_t)&off_1009326C8);
  unsigned __int8 v11 = sub_100411504();
  BOOL v12 = sub_1004E4AB8(v11, v10);
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(v9 + 48) = v12;
  *(_WORD *)(v9 + 88) = 0;
  *(void *)(v9 + 96) = 0x696669576E6FLL;
  *(void *)(v9 + 104) = 0xE600000000000000LL;
  *(_BYTE *)(v9 + 112) = sub_100013734() & 1;
  *(_WORD *)(v9 + 152) = 0;
  *(void *)(v9 + 160) = 0xD000000000000014LL;
  *(void *)(v9 + 168) = 0x80000001008508F0LL;
  *(void *)(v9 + 200) = &type metadata for Double;
  unint64_t v13 = sub_1000156C8();
  *(void *)(v9 + 208) = v13;
  *(double *)(v9 + 176) = v2;
  *(_WORD *)(v9 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = 3;
  *(void *)(v9 + 224) = 0xD000000000000014LL;
  *(void *)(v9 + 232) = 0x8000000100850910LL;
  *(void *)(v9 + 264) = &type metadata for Double;
  *(void *)(v9 + 272) = v13;
  *(double *)(v9 + 240) = v5;
  *(_WORD *)(v9 + 280) = 3;
  *(void *)(v9 + 288) = 0xD000000000000016LL;
  *(void *)(v9 + 296) = 0x8000000100850930LL;
  *(void *)(v9 + 328) = &type metadata for String;
  *(void *)(v9 + 336) = sub_1000155F8();
  *(void *)(v9 + 304) = 0x6F506D756964656DLL;
  *(void *)(v9 + 312) = 0xEB00000000726577LL;
  *(_WORD *)(v9 + 344) = 1;
  *(void *)(v9 + 352) = 0xD000000000000019LL;
  *(void *)(v9 + 360) = 0x8000000100850950LL;
  *(void *)(v9 + 392) = &type metadata for Int;
  unint64_t v14 = sub_10001570C();
  *(void *)(v9 + 400) = v14;
  *(void *)(v9 + 368) = v6;
  *(_WORD *)(v9 + 408) = 2;
  *(void *)(v9 + 4_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = 0xD000000000000019LL;
  *(void *)(v9 + 424) = 0x8000000100850970LL;
  *(void *)(v9 + 456) = &type metadata for Int;
  *(void *)(v9 + 464) = v14;
  *(void *)(v9 + 432) = v7;
  *(_WORD *)(v9 + 472) = 2;
  unint64_t v15 = sub_10041285C(v9);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v15);
}

unint64_t sub_1000155F8()
{
  unint64_t result = qword_1009AE4A0;
  if (!qword_1009AE4A0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1009AE4A0);
  }

  return result;
}

unint64_t sub_10001563C()
{
  unint64_t result = qword_10099CA58;
  if (!qword_10099CA58)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int64, &type metadata for Int64);
    atomic_store(result, (unint64_t *)&qword_10099CA58);
  }

  return result;
}

uint64_t sub_100015680(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099CA60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000156C8()
{
  unint64_t result = qword_10099CA70;
  if (!qword_10099CA70)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Double, &type metadata for Double);
    atomic_store(result, (unint64_t *)&qword_10099CA70);
  }

  return result;
}

unint64_t sub_10001570C()
{
  unint64_t result = qword_1009AFB30;
  if (!qword_1009AFB30)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1009AFB30);
  }

  return result;
}

uint64_t sub_100015750(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100004AEC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_100015794(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100004AEC(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

unint64_t sub_1000157D0()
{
  unint64_t result = qword_1009AB8A0;
  if (!qword_1009AB8A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008166E4, &type metadata for DaemonError);
    atomic_store(result, (unint64_t *)&qword_1009AB8A0);
  }

  return result;
}

uint64_t sub_100015814()
{
  return sub_10002482C(v0);
}

uint64_t sub_10001581C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100004AEC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

double sub_100015860@<D0>(uint64_t a1@<X8>)
{
  return sub_100631388(a1);
}

double sub_100015878@<D0>(void *a1@<X8>)
{
  return sub_100630C28(a1);
}

void sub_10001588C()
{
}

uint64_t sub_1000158A0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000158C4()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1009B903C);
  *(void *)(v0 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100015D58;
  return sub_100630C9C();
}

uint64_t sub_100015928()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10001594C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_10099C814);
  *(void *)(v2 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1000159BC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10099C810 + dword_10099C810))(a1, v4);
}

uint64_t sub_1000159BC()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100015A04()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1009B903C);
  *(void *)(v0 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000159BC;
  return sub_100630C9C();
}

uint64_t sub_100015A68(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_10099C814);
  *(void *)(v2 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_100015D58;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10099C810 + dword_10099C810))(a1, v4);
}

uint64_t sub_100015AD8()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100015AFC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(v2 + 32);
  char v8 = *(_BYTE *)(v2 + 16);
  uint64_t v9 = (void *)swift_task_alloc(dword_10099CAB4);
  *(void *)(v3 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v9;
  void *v9 = v3;
  v9[1] = sub_100015D58;
  uint64_t v10 = (void *)swift_task_alloc(dword_10099CAE4);
  _OWORD v9[2] = v10;
  *uint64_t v10 = v9;
  v10[1] = sub_100015D58;
  return sub_10000D094(a1, v8, a2, v6, v7);
}

uint64_t sub_100015BA4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100015BC8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 24);
  char v7 = *(_BYTE *)(v2 + 16);
  char v8 = (void *)swift_task_alloc(dword_10099CAC4);
  *(void *)(v3 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v8;
  *char v8 = v3;
  v8[1] = sub_100015D58;
  return sub_10000DD34(a1, a2, v7, v6);
}

uint64_t sub_100015C40(uint64_t a1)
{
  return sub_1003A9F5C(a1, v1);
}

uint64_t sub_100015C48(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = a3(a2);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100015C88(uint64_t a1)
{
  return sub_100012A04( a1,  v1,  &qword_10099CB18,  (uint64_t)&unk_100938A68,  (uint64_t)sub_100015D3C,  (uint64_t)&unk_100938A80);
}

uint64_t sub_100015CC0()
{
  return sub_100015CCC(&qword_10099CB18);
}

uint64_t sub_100015CCC(uint64_t *a1)
{
  uint64_t v2 = sub_100004AEC(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  swift_release(*(void *)(v1 + 16));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

uint64_t sub_100015D3C()
{
  return sub_100013474(&qword_10099CB18, (uint64_t (*)(void))type metadata accessor for FirstUnlockService);
}

_BYTE *initializeBufferWithCopyOfBuffer for PublishingPolicy(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MaintenanceConnectionPolicy(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x13;
  int v8 = v6 - 19;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v5 = (v21 - 1) & v21;
  unsigned int v6 = __clz(__rbit64(v21)) + (v4 << 6);
LABEL_4:
  *(void *)(v0 + 584) = v5;
  *(void *)(v0 + 576) = v4;
  int v8 = *(void *)(v0 + 432);
  uint64_t v9 = *(void *)(v0 + 440);
  uint64_t v10 = *(void *)(v0 + 424);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 520))( v10,  *(void *)(v7 + 48) + *(void *)(v9 + 72) * v6,  v8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v10, 0LL, 1LL, v8);
  unint64_t v13 = *(void *)(v0 + 488);
  unint64_t v14 = *(void *)(v0 + 432);
  unint64_t v15 = *(void *)(v0 + 424);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 440) + 32LL);
  *(void *)(v0 + 592) = v16;
  v16(v13, v15, v14);
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 216, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 136, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 160))
  {
    sub_100012EC0((__int128 *)(v0 + 136), v0 + 176);
    sub_100012ED8((void *)(v0 + 176), *(void *)(v0 + 200));
    v66 = (uint64_t (*)(void))((char *)&dword_10099C890 + dword_10099C890);
    unsigned __int8 v11 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 600) = v11;
    BOOL v12 = (uint64_t (*)(uint64_t))sub_1000FB830;
    goto LABEL_12;
  }

  swift_release(v22);
LABEL_18:
  objc_autoreleasePoolPop(v34);
  sub_1000F0A44((uint64_t)v23, v13);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v13, 1LL, v4) == 1)
  {
    sub_100015794(v13, (uint64_t *)&unk_1009A5990);
    unint64_t v27 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))( a2,  1LL,  1LL,  v27);
  }

  else
  {
    uint64_t v29 = v13 + *(int *)(v4 + 20);
    uint64_t v30 = type metadata accessor for Date(0LL);
    uint64_t v31 = *(void *)(v30 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v31 + 16))(a2, v29, v30);
    sub_100018C68(v13, type metadata accessor for BeaconObservation);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56))(a2, 0LL, 1LL, v30);
  }

    swift_once(&qword_10099B150, sub_100165180);
    goto LABEL_4;
  }

  if (qword_10099B150 != -1) {
    swift_once(&qword_10099B150, sub_100165180);
  }
  int v32 = type metadata accessor for Logger(0LL);
  sub_10000A720(v32, (uint64_t)qword_100A2A248);
  uint64_t v33 = v15;
  uint64_t v34 = v48;
  uint64_t v35 = sub_100166278(v33, v48);
  uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
  os_log_type_t v37 = static os_log_type_t.info.getter(v36);
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = swift_slowAlloc(22LL, -1LL);
    double v39 = swift_slowAlloc(32LL, -1LL);
    v50[0] = v39;
    *(_DWORD *)uint64_t v38 = 141558275;
    v51 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v38 + 4, v38 + 12);
    *(_WORD *)(v38 + 12) = 2081;
    id v40 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    v41 = dispatch thunk of CustomStringConvertible.description.getter(v21, v40);
    v51 = sub_1003F11D4(v41, v42, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v38 + 14, v38 + 22);
    swift_bridgeObjectRelease();
    sub_1001662BC(v34);
    _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "Already posted SPAccessoryDidPair for %{private,mask.hash}s",  (uint8_t *)v38,  0x16u);
    swift_arrayDestroy(v39, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1LL, -1LL);
    swift_slowDealloc(v38, -1LL, -1LL);
  }

  else
  {
    sub_1001662BC(v34);
  }
}

  int v2 = v4[2];
  int v3 = v36[0];
  uint64_t v35 = v36[1];
  unint64_t v14 = v37;
  unsigned int v6 = v38;
  if (v39)
  {
    uint64_t v19 = (v39 - 1) & v39;
    int v20 = __clz(__rbit64(v39)) | (v38 << 6);
    uint64_t v21 = (unint64_t)(v37 + 64) >> 6;
    goto LABEL_19;
  }

  unint64_t v22 = *(void *)(v0 + 968);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 4_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = *(void *)(v0 + 424);
  swift_retain();
  sub_1001A6468((void *)(v0 + 416));
  if (v22)
  {
    swift_bridgeObjectRelease_n(*(void *)(v0 + 608), 2LL);
    swift_release();
    return;
  }

  v170 = (void *)(v0 + 464);
  uint64_t v23 = *(void *)(v0 + 752);
  uint64_t v24 = *(void *)(v0 + 744);
  uint64_t v25 = *(void *)(v0 + 736);
  swift_release();
  uint64_t v26 = *(void *)(v0 + 416);
  *(void *)(v0 + 1032) = v26;
  sub_1000F0BF0(v26, v25);
  unint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  if (v27(v25, 1LL, v24) != 1)
  {
    uint64_t v47 = *(void *)(v0 + 976);
    uint64_t v48 = *(void *)(v0 + 792);
    uint64_t v49 = *(void *)(v0 + 744);
    uint64_t v50 = *(void *)(v0 + 720);
    v51 = *(void *)(v0 + 696);
    uint64_t v52 = *(void *)(v0 + 688);
    uint64_t v53 = sub_10002218C(*(void *)(v0 + 736), v48, type metadata accessor for BeaconEstimatedLocation);
    Date.init()(v53);
    *(double *)(v0 + 1040) = Date.timeIntervalSince(_:)(v48 + *(int *)(v49 + 40));
    uint64_t v54 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
    *(void *)(v0 + 1048) = v54;
    v54(v50, v52);
    *(void *)(v0 + 1056) = v47 + 1;
    if (!__OFADD__(v47, 1LL))
    {
      v55 = *(void *)(v26 + 16);
      if (v55)
      {
        uint64_t v56 = *(void *)(v0 + 752);
        uint64_t v57 = v26 + ((*(unsigned __int8 *)(v56 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80));
        uint64_t v58 = *(void *)(v56 + 72);
        swift_retain();
        do
        {
          sub_100190B80(v57, *(void *)(v0 + 896));
          v57 += v58;
          --v55;
        }

        while (v55);
        swift_release();
      }

      *(void *)(v0 + 1064) = 0LL;
      uint64_t v129 = *(void *)(v0 + 696);
      v130 = *(void *)(v0 + 688);
      NSNotificationName v131 = *(void *)(v0 + 680);
      uint64_t v132 = *(void *)(v0 + 616);
      *(void *)(v0 + 464) = 0LL;
      sub_10001581C(v132, v131, (uint64_t *)&unk_10099D720);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v129 + 48))(v131, 1LL, v130) == 1)
      {
        sub_100015794(*(void *)(v0 + 680), (uint64_t *)&unk_10099D720);
      }

      else
      {
        v133 = *(void *)(v0 + 712);
        v134 = *(void *)(v0 + 688);
        uint64_t v135 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v0 + 696) + 32LL))( v133,  *(void *)(v0 + 680),  v134);
        v136 = Date.timeIntervalSinceNow.getter(v135);
        v54(v133, v134);
        if ((~*(void *)&v136 & 0x7FF0000000000000LL) == 0)
        {
LABEL_111:
          __break(1u);
          goto LABEL_112;
        }

        if (v136 <= -9.22337204e18)
        {
LABEL_112:
          __break(1u);
          goto LABEL_113;
        }

        if (v136 >= 9.22337204e18)
        {
LABEL_113:
          __break(1u);
          goto LABEL_114;
        }

        *v170 = (uint64_t)v136;
      }

      unsigned int v137 = *(void *)(v0 + 744);
      v138 = *(void *)(v0 + 728);
      *(void *)(v0 + 472) = 0LL;
      sub_1000F1084(v26, v138);
      if (v27(v138, 1LL, v137) == 1)
      {
        sub_100015794(*(void *)(v0 + 728), &qword_1009A48E0);
      }

      else
      {
        unint64_t v139 = *(void *)(v0 + 784);
        uint64_t v140 = sub_10002218C(*(void *)(v0 + 728), v139, type metadata accessor for BeaconEstimatedLocation);
        v141 = Date.timeIntervalSinceNow.getter(v140);
        sub_100018C68(v139, type metadata accessor for BeaconEstimatedLocation);
        if ((~*(void *)&v141 & 0x7FF0000000000000LL) == 0)
        {
LABEL_114:
          __break(1u);
          goto LABEL_115;
        }

        if (v141 <= -9.22337204e18)
        {
LABEL_115:
          __break(1u);
          goto LABEL_116;
        }

        if (v141 >= 9.22337204e18)
        {
LABEL_116:
          __break(1u);
          goto LABEL_117;
        }

        *(void *)(v0 + 472) = (uint64_t)v141;
      }

      v142 = (void *)swift_task_alloc(dword_1009B639C);
      *(void *)(v0 + 1072) = v142;
      *v142 = v0;
      v142[1] = sub_10018E51C;
      sub_1005EBBC8(v0 + 296);
      return;
    }

    __break(1u);
    goto LABEL_109;
  }

  uint64_t v28 = (void *)(v0 + 440);
  uint64_t v29 = *(void *)(v0 + 736);
  swift_bridgeObjectRelease();
  swift_release();
  sub_100015794(v29, &qword_1009A48E0);
  if (qword_10099B188 != -1) {
    swift_once(&qword_10099B188, sub_100189D08);
  }
  v167 = (void *)(v0 + 296);
  uint64_t v30 = *(void *)(v0 + 896);
  uint64_t v31 = *(void *)(v0 + 888);
  int v32 = *(void *)(v0 + 840);
  uint64_t v33 = *(void *)(v0 + 832);
  uint64_t v34 = type metadata accessor for Logger(0LL);
  sub_10000A720(v34, (uint64_t)qword_100A2A2B0);
  uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v31, v30, v33);
  uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
  os_log_type_t v37 = static os_log_type_t.default.getter(v36);
  uint64_t v38 = os_log_type_enabled(v36, v37);
  double v39 = *(void *)(v0 + 888);
  id v40 = *(void *)(v0 + 840);
  v41 = *(void *)(v0 + 832);
  if (v38)
  {
    id v42 = swift_slowAlloc(22LL, -1LL);
    v166 = swift_slowAlloc(32LL, -1LL);
    v172[0] = v166;
    *(_DWORD *)id v42 = 141558275;
    *(void *)(v0 + 448) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 448, v0 + 456, v42 + 4, v42 + 12);
    *(_WORD *)(v42 + 12) = 2081;
    v43 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter(v41, v43);
    *(void *)(v0 + 456) = sub_1003F11D4(v44, v45, v172);
    uint64_t v28 = (void *)(v0 + 440);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 456, v170, v42 + 14, v42 + 22);
    swift_bridgeObjectRelease();
    uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    v46(v39, v41);
    _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "No cached latest location found for beacon %{private,mask.hash}s and given filter.",  (uint8_t *)v42,  0x16u);
    swift_arrayDestroy(v166, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v166, -1LL, -1LL);
    swift_slowDealloc(v42, -1LL, -1LL);
  }

  else
  {
    uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    v46(v39, v41);
  }

  if (__OFADD__(*v28, 1LL))
  {
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
    goto LABEL_111;
  }

  uint64_t v152 = (void *)(v0 + 480);
  uint64_t v59 = *(void **)(v0 + 1008);
  v60 = *(void *)(v0 + 608);
  *(void *)(v0 + 440) = *v28 + 1LL;
  uint64_t v61 = *(void *)(v0 + 320);
  unsigned __int8 v62 = *(void *)(v0 + 328);
  sub_100012ED8(v167, v61);
  uint64_t v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 112))(v61, v62);
  swift_bridgeObjectRelease_n(v60, 2LL);

  if ((v63 & 1) == 0) {
    goto LABEL_34;
  }
  if (__OFADD__(*v152, 1LL)) {
    goto LABEL_110;
  }
  ++*v152;
LABEL_34:
  v46(*(void *)(v0 + 896), *(void *)(v0 + 832));
  v64 = *(double *)(v0 + 984);
  uint64_t v65 = *(void *)(v0 + 976);
  v66 = *(void *)(v0 + 960);
  v67 = *(void *)(v0 + 992) + 1LL;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v167);
  if (v67 != v66)
  {
    v125 = *(void *)(v0 + 992) + 1LL;
    *(void *)(v0 + 992) = v125;
    *(double *)(v0 + 984) = v64;
    *(void *)(v0 + 976) = v65;
    *(void *)(v0 + 968) = 0LL;
    sub_100013044(*(void *)(v0 + 600) + 40 * v125 + 32, (uint64_t)v167);
    uint64_t v127 = *(void *)(v0 + 320);
    v126 = *(void *)(v0 + 328);
    sub_100012ED8(v167, v127);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v126 + 8) + 8LL) + 32LL))(v127);
    uint64_t v128 = (void *)swift_task_alloc(dword_1009B63A4);
    *(void *)(v0 + 1000) = v128;
    *uint64_t v128 = v0;
    v128[1] = sub_10018D480;
    sub_1005EBD74((uint64_t)v167);
    return;
  }

  uint64_t v150 = v65;
  swift_bridgeObjectRelease();
  v68 = *(void *)(v0 + 624);
  char v69 = *(void *)(v68 + 16);
  v153 = v69;
  if (!v69)
  {
LABEL_98:
    v143 = (void *)(v0 + 408);
    *(void *)(v0 + 1176) = 0LL;
    *(void *)(v0 + 408) = 0LL;
    if (v150 <= 0)
    {
LABEL_103:
      v145 = *(void *)(v0 + 920);
      v146 = *(void *)(v0 + 904);
      uint64_t v147 = *(void *)(v0 + 632);
      v148 = *(void *)(v0 + 600);
      v149 = (void *)swift_task_alloc(64LL);
      *(void *)(v0 + 1184) = v149;
      v149[2] = v148;
      v149[3] = v147;
      v149[4] = v146;
      v149[5] = v0 + 440;
      v149[6] = v152;
      v149[7] = v143;
      swift_task_switch(sub_100190724, v145, 0LL);
      return;
    }

    v144 = v64 / (double)v150;
    if ((~*(void *)&v144 & 0x7FF0000000000000LL) != 0)
    {
      if (v144 > -9.22337204e18)
      {
        if (v144 < 9.22337204e18)
        {
          *v143 = (uint64_t)v144;
          goto LABEL_103;
        }

              __break(1u);
              goto LABEL_18;
            }

    unint64_t v15 = (v21 - 1) & v21;
  }

  __break(1u);
LABEL_30:
  __break(1u);
}

    v93 = (v42 - 1) & v42;
    id v94 = v40;
    unint64_t v27 = __clz(__rbit64(v42)) + (v40 << 6);
LABEL_5:
    uint64_t v30 = v101;
    uint64_t v29 = v102;
    uint64_t v31 = *(void (**)(char *, unint64_t, uint64_t))(v101 + 16);
    v31(v26, v28[6] + *(void *)(v101 + 72) * v27, v102);
    int v32 = v28[7];
    uint64_t v33 = v95;
    uint64_t v34 = *(int *)(v95 + 48);
    uint64_t v35 = *(void *)(v32 + 8 * v27);
    *(void *)&v26[v34] = v35;
    (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v25, v26, v29);
    *(void *)(v25 + v34) = v35;
    uint64_t v36 = *(int *)(v33 + 48);
    os_log_type_t v37 = (uint64_t)v89;
    v31(v89, v25, v29);
    *(void *)(v37 + v36) = v35;
    swift_bridgeObjectRetain_n(v35, 2LL);
    uint64_t v38 = objc_autoreleasePoolPush();
    sub_10022FE7C(v37, v100, v104);
    objc_autoreleasePoolPop(v38);
    sub_100015794(v25, &qword_1009A6610);
    sub_100015794(v37, &qword_1009A6610);
    uint64_t v23 = v93;
    uint64_t v24 = v94;
  }

          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v40);
          v120[0] = v40;
          sub_1000CA340(v43, v47, isUniquelyReferenced_nonNull_native);
          id v40 = v120[0];
          swift_bridgeObjectRelease();
          if (v41 == 2) {
            break;
          }
        }

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x10;
  int v8 = v6 - 16;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xF;
  int v8 = v6 - 15;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

      swift_release();
      a1 = v127;
      v43 = v134;
    }

    else
    {
LABEL_15:
      swift_bridgeObjectRelease();
      uint64_t v54 = _swiftEmptyArrayStorage;
    }

    objc_autoreleasePoolPop(v136);
    uint64_t v135 = *(int *)(v2 + 24);
    if (a1[v135] == 33) {
      sub_1000F1230((uint64_t)v54, (uint64_t)v43);
    }
    else {
      sub_1000F0A44((uint64_t)v54, (uint64_t)v43);
    }
    swift_bridgeObjectRelease();
    uint64_t v58 = v133;
    sub_10001581C((uint64_t)v43, v133, (uint64_t *)&unk_1009A5990);
    v136 = *(void **)(v146 + 48);
    if (((unsigned int (*)(uint64_t, uint64_t, unint64_t))v136)(v58, 1LL, v2) == 1)
    {
      sub_100015794(v58, (uint64_t *)&unk_1009A5990);
      uint64_t v59 = 0.0;
    }

    else
    {
      v60 = v126;
      uint64_t v61 = sub_10002218C(v58, v126, type metadata accessor for BeaconObservation);
      uint64_t v59 = fabs(Date.timeIntervalSinceNow.getter(v61));
      unsigned __int8 v62 = v141;
      sub_100015794(v141, (uint64_t *)&unk_1009A5990);
      sub_10002218C(v60, v62, type metadata accessor for BeaconObservation);
      ((void (*)(uint64_t, void, uint64_t, unint64_t))v138)(v62, 0LL, 1LL, v2);
    }

    uint64_t v63 = qword_100A2A6C8;
    v144 = (char *)objc_autoreleasePoolPush();
    OS_dispatch_queue.sync<A>(execute:)(sub_1000DE20C, v63, v139);
    v64 = v149;
    v43 = v142;
    if (!v149[2] || (uint64_t v65 = sub_10030D124((uint64_t)a1), (v66 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      v70 = _swiftEmptyArrayStorage;
      goto LABEL_40;
    }

    v67 = *(void *)(v64[7] + 8 * v65);
    swift_bridgeObjectRetain(v67);
    swift_bridgeObjectRelease();
    v68 = sub_1002FF0C8( v67,  &qword_1009A60C8,  (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))sub_100301504);
    swift_bridgeObjectRelease();
    sub_1002FFE1C((uint64_t)v68);
    uint64_t v23 = v69;
    swift_release();
    v70 = _swiftEmptyArrayStorage;
    v149 = _swiftEmptyArrayStorage;
    a1 = (_BYTE *)*((void *)v23 + 2);
    if (!a1) {
      break;
    }
    v121 = v11;
    uint64_t v122 = v8;
    unsigned __int8 v11 = 0LL;
    int v8 = (unint64_t)type metadata accessor for BeaconObservation;
    while (v11 < *((void *)v23 + 2))
    {
      uint64_t v71 = (*(unsigned __int8 *)(v146 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v146 + 80);
      unint64_t v72 = *(void *)(v146 + 72);
      sub_10001DC4C((uint64_t)&v23[v71 + v72 * v11], (uint64_t)v43, type metadata accessor for BeaconObservation);
      if (*((_BYTE *)v43 + *(int *)(v2 + 24)) == 35)
      {
        sub_10002218C((uint64_t)v43, (uint64_t)v143, type metadata accessor for BeaconObservation);
        if ((swift_isUniquelyReferenced_nonNull_native(v70) & 1) == 0) {
          sub_100032AA8(0, v70[2] + 1LL, 1);
        }
        v70 = v149;
        uint64_t v74 = v149[2];
        uint64_t v73 = v149[3];
        if (v74 >= v73 >> 1)
        {
          sub_100032AA8(v73 > 1, v74 + 1, 1);
          v70 = v149;
        }

        v70[2] = v74 + 1;
        sub_10002218C((uint64_t)v143, (uint64_t)v70 + v71 + v74 * v72, type metadata accessor for BeaconObservation);
        int v2 = v145;
        v43 = v142;
      }

      else
      {
        sub_100303000((uint64_t)v43);
      }

      if (a1 == (_BYTE *)++v11)
      {
        v70 = v149;
        int v8 = v122;
        unsigned __int8 v11 = v121;
        goto LABEL_39;
      }
    }

  uint64_t v56 = *(void *)(v56 + 16);
  sub_1000E55BC(v55, (uint64_t)v12);
  v12[v10[9]] = v28;
  swift_beginAccess(v24, v62, 0LL, 0LL);
  uint64_t v33 = (uint64_t)&v12[v10[11]];
  uint64_t v34 = a4;
  sub_1000372DC((uint64_t)v60, a4);
  sub_100015794(v33, (uint64_t *)&unk_10099D720);
  sub_10001581C((uint64_t)v24, v33, (uint64_t *)&unk_10099D720);
  static Date.trustedNow.getter((uint64_t)v22);
  v25(v22, 0LL, 1LL, v7);
  sub_100345620((uint64_t)v22, (uint64_t)&v12[v10[18]]);
  static Date.trustedNow.getter((uint64_t)v19);
  v25(v19, 0LL, 1LL, v7);
  uint64_t v35 = v10[17];
  uint64_t v36 = v59;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v19, 1LL, v7) == 1)
  {
    sub_100015794((uint64_t)v19, (uint64_t *)&unk_10099D720);
    swift_bridgeObjectRetain(*(void *)&v12[v35]);
    os_log_type_t v37 = sub_10030CEE4(6LL);
    double v39 = v38;
    swift_bridgeObjectRelease();
    if ((v39 & 1) != 0)
    {
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)&v12[v35]);
      v41 = *(void *)&v12[v35];
      uint64_t v61 = v41;
      *(void *)&v12[v35] = 0x8000000000000000LL;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100063030();
        v41 = v61;
      }

      id v42 = (uint64_t)v54;
      (*(void (**)(char *, unint64_t, uint64_t))(v59 + 32))( v54,  *(void *)(v41 + 56) + *(void *)(v59 + 72) * v37,  v7);
      sub_100058B04(v37, v41);
      *(void *)&v12[v35] = v41;
      swift_bridgeObjectRelease();
      v43 = 0LL;
    }

    else
    {
      v43 = 1LL;
      id v42 = (uint64_t)v54;
    }

    v25((char *)v42, v43, 1LL, v7);
    uint64_t v47 = sub_100015794(v42, (uint64_t *)&unk_10099D720);
  }

  else
  {
    uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
    uint64_t v45 = (uint64_t)v53;
    v44(v53, v19, v7);
    uint64_t v46 = swift_isUniquelyReferenced_nonNull_native(*(void *)&v12[v35]);
    uint64_t v61 = *(void *)&v12[v35];
    *(void *)&v12[v35] = 0x8000000000000000LL;
    sub_10005C818(v45, 6LL, v46);
    *(void *)&v12[v35] = v61;
    uint64_t v47 = swift_bridgeObjectRelease();
  }

  v12[v10[16]] = 6;
  __chkstk_darwin(v47);
  *(&v52 - 2) = v48;
  *(&v52 - 1) = (uint64_t)v12;
  OS_dispatch_queue.sync<A>(execute:)(sub_100345668, &v52 - 4, (char *)&type metadata for () + 8);
  sub_1004E97E0();
  uint64_t v49 = v58;
  sub_1000E55BC((uint64_t)v12, v58);
  swift_storeEnumTagMultiPayload(v49, v57, 0LL);
  uint64_t v50 = v60;
  sub_100342E90(v49, v60);
  sub_100015794(v49, &qword_1009A99D8);
  sub_100018C68((uint64_t)v12, type metadata accessor for WildModeAssociationRecord);
  sub_10002214C((uint64_t)v50, v34);
  return sub_100015794((uint64_t)v24, (uint64_t *)&unk_10099D720);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

    unint64_t v14 = (v19 - 1) & v19;
  }

  __break(1u);
LABEL_31:
  __break(1u);
}

    uint64_t v9 = (v16 - 1) & v16;
  }

  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

  swift_release();
LABEL_18:
  objc_autoreleasePoolPop(v9);
  if (qword_10099B330 != -1) {
    swift_once(&qword_10099B330, sub_100374304);
  }
  uint64_t v26 = type metadata accessor for Logger(0LL);
  sub_10000A720(v26, (uint64_t)qword_100A2A748);
  unint64_t v27 = swift_bridgeObjectRetain_n(v17, 2LL);
  uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  uint64_t v29 = static os_log_type_t.default.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v31 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v45 = v31;
    *(_DWORD *)uint64_t v30 = 136315138;
    swift_bridgeObjectRetain(v17);
    uint64_t v33 = Array.description.getter(v32, v2);
    uint64_t v35 = v34;
    swift_bridgeObjectRelease();
    v43 = sub_1003F11D4(v33, v35, (uint64_t *)&v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v30 + 4, v30 + 12);
    swift_bridgeObjectRelease_n(v17, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Found queueObservations %s", v30, 0xCu);
    swift_arrayDestroy(v31, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1LL, -1LL);
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v17, 2LL);
  }

  uint64_t v36 = v17[2];
  swift_bridgeObjectRelease();
  return v36 == 0;
}

      if (++v6 == v21)
      {
        swift_bridgeObjectRelease();
        unsigned int v6 = v83;
        goto LABEL_29;
      }
    }

    __break(1u);
LABEL_49:
    swift_once(&qword_10099B670, sub_100605974);
  }

  swift_bridgeObjectRelease();
LABEL_29:
  sub_10001581C(v1 + v7[12], v6, (uint64_t *)&unk_1009A34D0);
  uint64_t v38 = type metadata accessor for URL(0LL);
  double v39 = *(void *)(v38 - 8);
  id v40 = v6;
  v41 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v39 + 48);
  v43 = 0LL;
  if (v41(v40, 1LL, v38) != 1)
  {
    URL._bridgeToObjectiveC()(v42);
    v43 = v44;
    (*(void (**)(unint64_t, uint64_t))(v39 + 8))(v40, v38);
  }

  [v84 setDisableURL:v43];

  if (*(void *)(v1 + v7[11] + 8)) {
    uint64_t v45 = String._bridgeToObjectiveC()();
  }
  else {
    uint64_t v45 = 0LL;
  }
  [v84 setAppBundleIdentifier:v45];

  uint64_t v46 = v85;
  sub_10001581C(v1 + v7[13], v85, (uint64_t *)&unk_1009A34D0);
  if (v41(v46, 1LL, v38) == 1)
  {
    uint64_t v48 = 0LL;
  }

  else
  {
    uint64_t v49 = v46;
    URL._bridgeToObjectiveC()(v47);
    uint64_t v48 = v50;
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v49, v38);
  }

  v51 = v84;
  [v84 setLowBatteryInfoURL:v48];

  uint64_t v52 = String._bridgeToObjectiveC()();
  [v51 setVersion:v52];

  [v51 setTxPower:*(double *)(v1 + v7[15])];
  [v51 setCapabilities:sub_1006DA6DC(*(_DWORD *)(v1 + v7[17]))];
  uint64_t v85 = *(void *)(v1 + v7[18]);
  if (v85)
  {
    uint64_t v53 = *(void *)(v85 + 16);
    if (v53)
    {
      unsigned int v82 = v7;
      uint64_t v83 = v1;
      uint64_t v88 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v85);
      specialized ContiguousArray.reserveCapacity(_:)(v53);
      uint64_t v54 = 0LL;
      do
      {
        uint64_t v59 = *(unsigned __int8 *)(v85 + v54 + 32);
        v60 = *(void *)(v85 + v54 + 48);
        uint64_t v61 = *(void *)(v85 + v54 + 64);
        unsigned __int8 v62 = *(void *)(v85 + v54 + 80);
        uint64_t v86 = *(char **)(v85 + v54 + 72);
        LODWORD(v87) = *(unsigned __int8 *)(v85 + v54 + 88);
        uint64_t v63 = objc_allocWithZone(&OBJC_CLASS___SPAccessoryLayoutTemplate);
        swift_bridgeObjectRetain(v62);
        swift_bridgeObjectRetain(v60);
        v64 = objc_msgSend(v63, "init", swift_bridgeObjectRetain(v61).n128_f64[0]);
        [v64 setPartIdentifier:v59];
        uint64_t v65 = String._bridgeToObjectiveC()();
        [v64 setPartType:v65];

        v66 = String._bridgeToObjectiveC()();
        [v64 setPartName:v66];

        if (v62)
        {
          swift_bridgeObjectRetain(v62);
          v55 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }

        else
        {
          v55 = 0LL;
        }

        [v64 setPartSymbol:v55];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        [v64 setIsPrimary:v87 & 1];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v56);
        uint64_t v57 = v88[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v57);
        uint64_t v58 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v57, v64);
        specialized ContiguousArray._endMutation()(v58);
        v54 += 64LL;
        --v53;
      }

      while (v53);
      swift_bridgeObjectRelease();
      BOOL v7 = v82;
    }

    sub_10039E9B8();
    v67.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }

  else
  {
    v67.super.isa = 0LL;
  }

  v68 = v84;
  [v84 setLayoutTemplate:v67.super.isa];

  URL._bridgeToObjectiveC()((NSURL *)v7[19]);
  v70 = v69;
  [v68 setDefaultHeroIcon:v69];

  URL._bridgeToObjectiveC()((NSURL *)v7[20]);
  unint64_t v72 = v71;
  [v68 setDefaultListIcon:v71];

  URL._bridgeToObjectiveC()((NSURL *)v7[21]);
  uint64_t v74 = v73;
  [v68 setDefaultHeroIcon2x:v73];

  URL._bridgeToObjectiveC()((NSURL *)v7[22]);
  uint64_t v76 = v75;
  [v68 setDefaultListIcon2x:v75];

  URL._bridgeToObjectiveC()((NSURL *)v7[23]);
  unint64_t v78 = v77;
  [v68 setDefaultHeroIcon3x:v77];

  URL._bridgeToObjectiveC()((NSURL *)v7[24]);
  v80 = v79;
  [v68 setDefaultListIcon3x:v79];

  return v68;
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x15;
  int v8 = v6 - 21;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v8 = v6 - 14;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xAF;
  int v8 = v6 - 175;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x2B;
  int v8 = v6 - 43;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

        uint64_t v10 = __clz(__rbit64(v23)) + (v21 << 6);
      }
    }

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x95;
  int v8 = v6 - 149;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x19;
  int v8 = v6 - 25;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
          v82[0] = v3;
          sub_1000CA340(v8, a2, isUniquelyReferenced_nonNull_native);
          int v3 = (void *)v82[0];
          swift_bridgeObjectRelease();
          if (v34 == 7) {
            break;
          }
        }

          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
          v81[0] = v3;
          sub_1000CA340(v34, a2, isUniquelyReferenced_nonNull_native);
          int v3 = (void *)v81[0];
          swift_bridgeObjectRelease();
          if (v32 == 7) {
            break;
          }
        }

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x12;
  int v8 = v6 - 18;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = (*a1 & 0x3C | (*a1 >> 6)) ^ 0x3F;
  if (v6 >= 0x3C) {
    unsigned int v6 = -1;
  }
  return v6 + 1;
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v8 = v6 - 13;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

          swift_once(&qword_10099B710, sub_1006511CC);
          goto LABEL_11;
        }
      }

      else
      {
LABEL_8:
        swift_bridgeObjectRelease();
        uint64_t v53 = *(id *)(v43 + 240);
        if (!v53) {
          goto LABEL_10;
        }
      }

      uint64_t v53 = [v53 setDelegate:*(void *)(v43 + 248)];
      goto LABEL_10;
    }

    uint64_t v54 = static os_log_type_t.error.getter(v17);
    if (qword_10099B710 != -1) {
      swift_once(&qword_10099B710, sub_1006511CC);
    }
    os_log(_:dso:log:_:_:)( v54,  &_mh_execute_header,  qword_100A2B020,  "Unable to get bundleIdentifier!",  31LL,  2LL,  _swiftEmptyArrayStorage);
  }

  unsigned int v6 = *(unsigned __int8 *)a1;
  if (v6 >= 2) {
    BOOL v7 = ((v6 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    BOOL v7 = -2;
  }
  if (v7 < 0) {
    BOOL v7 = -1;
  }
  return (v7 + 1);
}

      swift_once(&qword_10099B870, sub_1006C3D04);
      goto LABEL_9;
    }

    uint64_t v19 = static Keychain.data(account:service:)(a1[2], a1[3], a1[4]);
    if (v20 >> 60 == 15)
    {
      uint64_t v21 = (dispatch_queue_s *)a1[10];
      unint64_t v22 = swift_allocObject(&unk_100974178, 32LL, 7LL);
      *(void *)(v22 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = sub_1006C5DF4;
      *(void *)(v22 + 24) = a1;
      int v32 = sub_100095030;
      uint64_t v33 = v22;
      double aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v29 = 1107296256LL;
      uint64_t v30 = sub_100025BD4;
      uint64_t v31 = &unk_100974190;
      uint64_t v23 = _Block_copy(&aBlock);
      uint64_t v24 = v33;
      swift_retain();
      swift_retain();
      swift_release(v24);
      dispatch_sync(v21, v23);
      _Block_release(v23);
      LOBYTE(v21) = swift_isEscapingClosureAtFileLocation(v22, "", 98LL, 58LL, 25LL, 1LL);
      swift_release(a1);
      swift_release(v22);
      if ((v21 & 1) != 0)
      {
        __break(1u);
      }

      else
      {
        sub_1006C5100();
        a1 = (void *)static os_log_type_t.default.getter(v25);
        if (qword_10099B870 == -1)
        {
LABEL_13:
          os_log(_:dso:log:_:_:)( a1,  &_mh_execute_header,  qword_100A2B280,  "New encryption key generated",  28LL,  2LL,  _swiftEmptyArrayStorage);
          return;
        }
      }

      swift_once(&qword_10099B870, sub_1006C3D04);
      goto LABEL_13;
    }

    uint64_t v26 = a1[15];
    unint64_t v27 = a1[16];
    a1[15] = v19;
    a1[16] = v20;
    sub_1000182F0(v26, v27);
  }

            unint64_t v15 = v17;
            goto LABEL_14;
          }
        }
      }
    }

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x2C;
  int v8 = v6 - 44;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
        goto LABEL_19;
      }
    }

    __break(1u);
    goto LABEL_17;
  }

  sub_10001736C(v2, v1);
  sub_100178C64(32LL, v2, v1);
  sub_1001782BC(v13, v14);
  if (v3)
  {
LABEL_13:
    sub_100016F9C(v2, v1);
    return v4;
  }

  int v4 = v15;
  sub_10001736C(v2, v1);
  sub_10001736C(v15, v16);
  sub_1003B7854(175LL, v2, v1);
  sub_1003B6EB8(v15, v16);
  sub_10079027C(v5, v6);
  sub_100016F9C(v2, v1);
  sub_100016F9C(v15, v16);
  return v4;
}

    v43 = sub_1007907FC();
    id v40 = swift_allocError(&type metadata for KeyMapGenerator.Error, v43, 0LL, 0LL);
    *(void *)uint64_t v44 = 4LL;
    *(_BYTE *)(v44 + 8) = 3;
    swift_willThrow(v40);
    swift_release(v32);
    id v42 = v30;
    goto LABEL_18;
  }

  uint64_t v17 = a5();
  uint64_t v18 = (uint64_t *)(v17 + OBJC_IVAR____TtC12searchpartyd15KeyMapGenerator_keyUnion);
  uint64_t v19 = *(void *)(v17 + OBJC_IVAR____TtC12searchpartyd15KeyMapGenerator_keyUnion + 8);
  if ((~v19 & 0x3000000000000000LL) == 0)
  {
    int v20 = *(void *)(a2 + 16);
    uint64_t v21 = *(void *)(a2 + 24);
    unint64_t v22 = *v18;
    *uint64_t v18 = v20;
    v18[1] = v21 | 0x1000000000000000LL;
    sub_10001736C(v20, v21);
    sub_100790840(v22, v19);
    uint64_t v23 = swift_release(v17);
    goto LABEL_15;
  }

  uint64_t v54 = sub_1007907FC();
  id v40 = swift_allocError(&type metadata for KeyMapGenerator.Error, v54, 0LL, 0LL);
  *(void *)v55 = 4LL;
  *(_BYTE *)(v55 + 8) = 3;
  swift_willThrow(v40);
  uint64_t v45 = swift_release(v17);
LABEL_19:
  uint64_t v46 = static os_log_type_t.error.getter(v45);
  if (qword_10099B3E8 != -1) {
    swift_once(&qword_10099B3E8, sub_1003E02E8);
  }
  uint64_t v47 = qword_100A2A8F0;
  uint64_t v48 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v49 = swift_allocObject(v48, 72LL, 7LL);
  *(_OWORD *)(v49 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = xmmword_1007E67D0;
  v60 = v40;
  swift_errorRetain(v40);
  uint64_t v50 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  v51 = String.init<A>(describing:)(&v60, v50);
  uint64_t v53 = v52;
  *(void *)(v49 + 56) = &type metadata for String;
  *(void *)(v49 + 64) = sub_1000226F4();
  *(void *)(v49 + 32) = v51;
  *(void *)(v49 + 40) = v53;
  os_log(_:dso:log:_:_:)(v46, &_mh_execute_header, v47, "Error building key maps: %@", 27LL, 2LL, v49);
  swift_bridgeObjectRelease();
  return swift_errorRelease(v40);
}

uint64_t storeEnumTagSinglePayload for MaintenanceConnectionPolicy( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100015F14 + 4 * byte_1007E4075[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100015F48 + 4 * byte_1007E4070[v4]))();
}

uint64_t sub_100015F48(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100015F50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100015F58LL);
  }
  return result;
}

uint64_t sub_100015F64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100015F6CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100015F70(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100015F78(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100015F84(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100015F90(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for MaintenanceConnectionPolicy()
{
  return &type metadata for MaintenanceConnectionPolicy;
}

BOOL sub_100015FA8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100015FBC()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100016000()
{
}

Swift::Int sub_100016028(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100016068()
{
  uint64_t v1 = 1684826487LL;
  if (*v0 != 1) {
    uint64_t v1 = 7105633LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701736302LL;
  }
}

unint64_t sub_1000160B0()
{
  unint64_t result = qword_10099CB20;
  if (!qword_10099CB20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E4104, &type metadata for MaintenanceConnectionPolicy);
    atomic_store(result, (unint64_t *)&qword_10099CB20);
  }

  return result;
}

uint64_t sub_1000160F4()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000A8AC(v2, qword_100A29E70);
  sub_10000A720(v0, (uint64_t)qword_100A29E70);
  type metadata accessor for BeaconStore(0LL);
  sub_1004E6208((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000013LL, 0x8000000100850CA0LL, 1LL);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_1000161C4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  unint64_t v5 = v2[1];
  sub_10001736C(v4, v5);
  Data.hash(into:)(a1, v4, v5);
  sub_100016F9C(v4, v5);
  uint64_t v6 = (int *)type metadata accessor for LostModeInfoRecord(0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v7, v8);
  dispatch thunk of Hashable.hash(into:)(a1, v7, v8);
  uint64_t v9 = (uint64_t *)((char *)v2 + v6[7]);
  uint64_t v10 = v9[1];
  if (v10)
  {
    uint64_t v11 = *v9;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v10);
    String.hash(into:)(a1, v11, v10);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  BOOL v12 = (uint64_t *)((char *)v2 + v6[8]);
  uint64_t v13 = v12[1];
  if (v13)
  {
    uint64_t v14 = *v12;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v13);
    String.hash(into:)(a1, v14, v13);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  else {
    Swift::UInt64 v15 = 0LL;
  }
  Hasher._combine(_:)(v15);
  else {
    Swift::UInt64 v16 = 0LL;
  }
  Hasher._combine(_:)(v16);
  uint64_t v17 = (uint64_t *)((char *)v2 + v6[11]);
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  sub_10001736C(*v17, v19);
  Data.hash(into:)(a1, v18, v19);
  return sub_100016F9C(v18, v19);
}

uint64_t sub_100016388(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000163C0 + 4 * byte_1007E4130[a1]))( 0xD000000000000010LL,  0x800000010084DE70LL);
}

uint64_t sub_1000163C0()
{
  return 0x696669746E656469LL;
}

  ;
}

uint64_t sub_1000163F0()
{
  return 0x6D754E656E6F6870LL;
}

uint64_t sub_100016410()
{
  return 0x6567617373656DLL;
}

uint64_t sub_100016428()
{
  return 0x656475746974616CLL;
}

uint64_t sub_100016440()
{
  return 0x64757469676E6F6CLL;
}

uint64_t sub_10001645C()
{
  return 0x7369747265766461LL;
}

uint64_t sub_100016480()
{
  return sub_100016388(*v0);
}

uint64_t sub_100016488@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100017C48(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000164AC()
{
  return 0LL;
}

void sub_1000164B8(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_1000164C4(uint64_t a1)
{
  unint64_t v2 = sub_100016F58();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000164EC(uint64_t a1)
{
  unint64_t v2 = sub_100016F58();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_100016514()
{
  return Hasher._finalize()();
}

Swift::Int sub_100016554(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100016590(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_10099CB50);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_100016F58();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for LostModeInfoRecord.CodingKeys,  &type metadata for LostModeInfoRecord.CodingKeys,  v11,  v9,  v10);
  __int128 v29 = *v3;
  char v30 = 0;
  unint64_t v12 = sub_1000170A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v29, &v30, v5, &type metadata for Data, v12);
  if (!v2)
  {
    uint64_t v28 = (int *)type metadata accessor for LostModeInfoRecord(0LL);
    uint64_t v13 = v3;
    uint64_t v14 = (char *)v3 + v28[5];
    LOBYTE(v29) = 1;
    uint64_t v15 = type metadata accessor for UUID(0LL);
    uint64_t v16 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v29, v5, v15, v16);
    uint64_t v17 = (char *)v13 + v28[6];
    LOBYTE(v29) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v29, v5, v15, v16);
    uint64_t v18 = (uint64_t *)((char *)v13 + v28[7]);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    LOBYTE(v29) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, &v29, v5);
    uint64_t v21 = (uint64_t *)((char *)v13 + v28[8]);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    LOBYTE(v29) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v29, v5);
    double v24 = *(double *)((char *)v13 + v28[9]);
    LOBYTE(v29) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(&v29, v5, v24);
    double v25 = *(double *)((char *)v13 + v28[10]);
    LOBYTE(v29) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(&v29, v5, v25);
    __int128 v29 = *(_OWORD *)((char *)v13 + v28[11]);
    char v30 = 7;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v29, &v30, v5, &type metadata for Data, v12);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100016858@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v46 = type metadata accessor for UUID(0LL);
  uint64_t v44 = *(void *)(v46 - 8);
  uint64_t v4 = __chkstk_darwin(v46);
  uint64_t v6 = (uint64_t *)((char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v4);
  uint64_t v8 = (uint64_t *)((char *)&v38 - v7);
  uint64_t v43 = sub_100004AEC(&qword_10099CB40);
  uint64_t v9 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  unint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = type metadata accessor for LostModeInfoRecord(0LL);
  __chkstk_darwin(v47);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  uint64_t v45 = a1;
  sub_100012ED8(a1, v14);
  unint64_t v16 = sub_100016F58();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for LostModeInfoRecord.CodingKeys,  &type metadata for LostModeInfoRecord.CodingKeys,  v16,  v14,  v15);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v45);
  }
  v41 = v6;
  uint64_t v17 = v9;
  char v49 = 0;
  unint64_t v18 = sub_100016FE0();
  uint64_t v19 = v43;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v48, &type metadata for Data, &v49, v43, &type metadata for Data, v18);
  *(_OWORD *)uint64_t v13 = v48;
  LOBYTE(v48) = 1;
  uint64_t v20 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v21 = v46;
  uint64_t v40 = v20;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v8, v46, &v48, v19, v46, v20);
  unint64_t v39 = v18;
  uint64_t v22 = (int *)v47;
  uint64_t v23 = v19;
  double v24 = *(void (**)(char *, void *, uint64_t))(v44 + 32);
  v24(&v13[*(int *)(v47 + 20)], v8, v21);
  LOBYTE(v48) = 2;
  double v25 = v41;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v41, v21, &v48, v23, v21, v40);
  v24(&v13[v22[6]], v25, v21);
  LOBYTE(v48) = 3;
  uint64_t v26 = v43;
  uint64_t v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v48, v43);
  uint64_t v28 = v45;
  __int128 v29 = (uint64_t *)&v13[v22[7]];
  *__int128 v29 = v27;
  v29[1] = v30;
  LOBYTE(v48) = 4;
  uint64_t v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v48, v26);
  int v32 = (uint64_t *)&v13[v22[8]];
  *int v32 = v31;
  v32[1] = v33;
  LOBYTE(v48) = 5;
  KeyedDecodingContainer.decode(_:forKey:)(&v48, v43);
  *(void *)&v13[v22[9]] = v34;
  LOBYTE(v48) = 6;
  KeyedDecodingContainer.decode(_:forKey:)(&v48, v43);
  *(void *)&v13[v22[10]] = v35;
  char v49 = 7;
  uint64_t v36 = v43;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v48, &type metadata for Data, &v49, v43, &type metadata for Data, v39);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v11, v36);
  *(_OWORD *)&v13[*(int *)(v47 + 44)] = v48;
  sub_100017024((uint64_t)v13, v42);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return sub_100017068((uint64_t)v13);
}

uint64_t sub_100016D90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_100016DD0()
{
  if (qword_10099B038 != -1) {
    swift_once(&qword_10099B038, sub_1000160F4);
  }
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A29E70);
  uint64_t v2 = UUID.uuidString.getter(v1);
  URL.appendingPathComponent(_:isDirectory:)(v2, v3, 1LL);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100016E5C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100016858(a1, a2);
}

uint64_t sub_100016E70(void *a1)
{
  return sub_100016590(a1);
}

uint64_t sub_100016E84(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100007864( &qword_10099CB28,  type metadata accessor for LostModeInfoRecord,  (uint64_t)&unk_1007E416C);
  uint64_t result = sub_100007864(&qword_10099CB30, type metadata accessor for LostModeInfoRecord, (uint64_t)&unk_1007E4144);
  *(void *)(a1 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = result;
  return result;
}

uint64_t type metadata accessor for LostModeInfoRecord(uint64_t a1)
{
  uint64_t result = qword_10099CBB0;
  if (!qword_10099CBB0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LostModeInfoRecord);
  }
  return result;
}

uint64_t sub_100016F1C(uint64_t a1)
{
  uint64_t result = sub_100007864(&qword_10099CB38, type metadata accessor for LostModeInfoRecord, (uint64_t)&unk_1007E4194);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100016F58()
{
  unint64_t result = qword_10099CB48;
  if (!qword_10099CB48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E4348, &type metadata for LostModeInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099CB48);
  }

  return result;
}

uint64_t sub_100016F9C(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

unint64_t sub_100016FE0()
{
  unint64_t result = qword_10099DA60;
  if (!qword_10099DA60)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10099DA60);
  }

  return result;
}

uint64_t sub_100017024(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LostModeInfoRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100017068(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LostModeInfoRecord(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_1000170A4()
{
  unint64_t result = qword_10099DA30;
  if (!qword_10099DA30)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10099DA30);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for LostModeInfoRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }

uint64_t storeEnumTagSinglePayload for LostModeInfoRecord.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_1000171C4 + 4 * byte_1007E413D[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1000171F8 + 4 * byte_1007E4138[v4]))();
}

uint64_t sub_1000171F8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100017200(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100017208LL);
  }
  return result;
}

uint64_t sub_100017214(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10001721CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 7;
  return result;
}

uint64_t sub_100017220(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100017228(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LostModeInfoRecord.CodingKeys()
{
  return &type metadata for LostModeInfoRecord.CodingKeys;
}

uint64_t *sub_100017244(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v28 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v28 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v28);
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_10001736C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    unint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID(0LL);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
    v13(v10, v11, v12);
    v13((char *)a1 + a3[6], (char *)a2 + a3[6], v12);
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    unint64_t v16 = (uint64_t *)((char *)a1 + v14);
    uint64_t v17 = (uint64_t *)((char *)a2 + v14);
    uint64_t v18 = v17[1];
    void *v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = (uint64_t *)((char *)a1 + v15);
    uint64_t v20 = (uint64_t *)((char *)a2 + v15);
    uint64_t v21 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v21;
    uint64_t v22 = a3[10];
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(uint64_t *)((char *)a1 + v22) = *(uint64_t *)((char *)a2 + v22);
    uint64_t v23 = a3[11];
    double v24 = (uint64_t *)((char *)a1 + v23);
    double v25 = (uint64_t *)((char *)a2 + v23);
    uint64_t v26 = *v25;
    unint64_t v27 = v25[1];
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v21);
    sub_10001736C(v26, v27);
    *double v24 = v26;
    v24[1] = v27;
  }

  return a1;
}

uint64_t sub_10001736C(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000173B0(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UUID(0LL);
  unsigned int v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v6(v4, v5);
  v6(a1 + a2[6], v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_100016F9C(*(void *)(a1 + a2[11]), *(void *)(a1 + a2[11] + 8));
}

uint64_t *sub_100017450(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], (char *)a2 + a3[6], v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = (uint64_t *)((char *)a1 + v13);
  unint64_t v16 = (uint64_t *)((char *)a2 + v13);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  uint64_t v18 = (uint64_t *)((char *)a1 + v14);
  uint64_t v19 = (uint64_t *)((char *)a2 + v14);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  uint64_t v21 = a3[10];
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  *(uint64_t *)((char *)a1 + v21) = *(uint64_t *)((char *)a2 + v21);
  uint64_t v22 = a3[11];
  uint64_t v23 = (uint64_t *)((char *)a1 + v22);
  double v24 = (uint64_t *)((char *)a2 + v22);
  uint64_t v25 = *v24;
  unint64_t v26 = v24[1];
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v20);
  sub_10001736C(v25, v26);
  uint64_t *v23 = v25;
  v23[1] = v26;
  return a1;
}

uint64_t *sub_10001754C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100016F9C(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24LL);
  v14(v11, v12, v13);
  v14((char *)a1 + a3[6], (char *)a2 + a3[6], v13);
  uint64_t v15 = a3[7];
  unint64_t v16 = (uint64_t *)((char *)a1 + v15);
  uint64_t v17 = (uint64_t *)((char *)a2 + v15);
  void *v16 = *v17;
  uint64_t v18 = v17[1];
  v16[1] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[8];
  uint64_t v20 = (uint64_t *)((char *)a1 + v19);
  uint64_t v21 = (uint64_t *)((char *)a2 + v19);
  *uint64_t v20 = *v21;
  uint64_t v22 = v21[1];
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  uint64_t v23 = a3[11];
  double v24 = (uint64_t *)((char *)a1 + v23);
  uint64_t v25 = (uint64_t *)((char *)a2 + v23);
  uint64_t v26 = *v25;
  unint64_t v27 = v25[1];
  sub_10001736C(*v25, v27);
  uint64_t v28 = *v24;
  unint64_t v29 = v24[1];
  *double v24 = v26;
  v24[1] = v27;
  sub_100016F9C(v28, v29);
  return a1;
}

char *sub_100017684(char *a1, char *a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  uint64_t v11 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v11] = *(_OWORD *)&a2[v11];
  uint64_t v12 = a3[10];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  return a1;
}

uint64_t *sub_100017744(uint64_t *a1, char *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016F9C(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], &a2[a3[6]], v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = (uint64_t *)((char *)a1 + v13);
  uint64_t v15 = (uint64_t *)&a2[v13];
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[8];
  uint64_t v19 = (uint64_t *)((char *)a1 + v18);
  uint64_t v20 = (uint64_t *)&a2[v18];
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  *uint64_t v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[10];
  *(uint64_t *)((char *)a1 + a3[9]) = *(void *)&a2[a3[9]];
  *(uint64_t *)((char *)a1 + v23) = *(void *)&a2[v23];
  uint64_t v24 = a3[11];
  uint64_t v25 = *(uint64_t *)((char *)a1 + v24);
  unint64_t v26 = *(uint64_t *)((char *)a1 + v24 + 8);
  *(_OWORD *)((char *)a1 + v24) = *(_OWORD *)&a2[v24];
  sub_100016F9C(v25, v26);
  return a1;
}

uint64_t sub_100017840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001784C);
}

uint64_t sub_10001784C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  int v10 = v9 - 1;
  if (v10 < 0) {
    int v10 = -1;
  }
  return (v10 + 1);
}

uint64_t sub_1000178DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000178E8);
}

uint64_t sub_1000178E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))( a1 + *(int *)(a4 + 20),  a2,  a2,  result);
  }
  *(void *)(a1 + *(int *)(a4 + 28) + 8) = a2;
  return result;
}

uint64_t sub_100017968(uint64_t a1)
{
  uint64_t v4 = &unk_1007E41F8;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(result - 8) + 64LL;
    uint64_t v6 = v5;
    uint64_t v7 = &unk_1007E4210;
    uint64_t v8 = &unk_1007E4210;
    uint64_t v9 = (char *)&value witness table for Builtin.Int64 + 64;
    int v10 = (char *)&value witness table for Builtin.Int64 + 64;
    uint64_t v11 = &unk_1007E41F8;
    swift_initStructMetadata(a1, 256LL, 8LL, &v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1000179FC()
{
  return sub_100007864(&qword_10099CC00, type metadata accessor for LostModeInfoRecord, (uint64_t)&unk_1007E4228);
}

unint64_t sub_100017A2C()
{
  unint64_t result = qword_10099CC08;
  if (!qword_10099CC08)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E4320, &type metadata for LostModeInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099CC08);
  }

  return result;
}

unint64_t sub_100017A74()
{
  unint64_t result = qword_10099CC10;
  if (!qword_10099CC10)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E4290, &type metadata for LostModeInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099CC10);
  }

  return result;
}

unint64_t sub_100017ABC()
{
  unint64_t result = qword_10099CC18;
  if (!qword_10099CC18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E42B8, &type metadata for LostModeInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099CC18);
  }

  return result;
}

void sub_100017B00(uint64_t *a1, uint64_t a2)
{
  if ((v4 & 1) == 0) {
    return;
  }
  uint64_t v5 = (int *)type metadata accessor for LostModeInfoRecord(0LL);
  if ((static UUID.== infix(_:_:)((char *)a1 + v5[5], a2 + v5[5]) & 1) == 0
    || (static UUID.== infix(_:_:)((char *)a1 + v5[6], a2 + v5[6]) & 1) == 0)
  {
    return;
  }

  uint64_t v6 = v5[7];
  uint64_t v7 = (uint64_t *)((char *)a1 + v6);
  uint64_t v8 = *(uint64_t *)((char *)a1 + v6 + 8);
  uint64_t v9 = (void *)(a2 + v6);
  uint64_t v10 = v9[1];
  if (!v8)
  {
    if (v10) {
      return;
    }
LABEL_13:
    uint64_t v12 = v5[8];
    uint64_t v13 = (uint64_t *)((char *)a1 + v12);
    uint64_t v14 = *(uint64_t *)((char *)a1 + v12 + 8);
    uint64_t v15 = (void *)(a2 + v12);
    uint64_t v16 = v15[1];
    if (v14)
    {
      if (!v16) {
        return;
      }
      BOOL v17 = *v13 == *v15 && v14 == v16;
      if (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v13, v14, *v15, v16, 0LL) & 1) == 0) {
        return;
      }
    }

    else if (v16)
    {
      return;
    }

    if (*(double *)((char *)a1 + v5[9]) == *(double *)(a2 + v5[9])
      && *(double *)((char *)a1 + v5[10]) == *(double *)(a2 + v5[10]))
    {
      _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0( *(uint64_t *)((char *)a1 + v5[11]),  *(uint64_t *)((char *)a1 + v5[11] + 8));
    }

    return;
  }

  if (v10)
  {
    BOOL v11 = *v7 == *v9 && v8 == v10;
    if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v7, v8, *v9, v10, 0LL) & 1) != 0) {
      goto LABEL_13;
    }
  }

uint64_t sub_100017C48(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x800000010084DE70LL;
    if (a2 == 0x800000010084DE70LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010084DE70LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v6 = 0xEA00000000007265LL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_11;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v7 = 0x800000010084D8A0LL;
    if (a2 == 0x800000010084D8A0LL) {
      goto LABEL_16;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010084D8A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if (a1 == 0x6D754E656E6F6870LL && a2 == 0xEB00000000726562LL)
  {
    unint64_t v8 = 0xEB00000000726562LL;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D754E656E6F6870LL, 0xEB00000000726562LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_22;
  }

  if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000LL)
  {
    unint64_t v9 = 0xE700000000000000LL;
LABEL_28:
    swift_bridgeObjectRelease(v9);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6567617373656DLL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_28;
  }

  if (a1 == 0x656475746974616CLL && a2 == 0xE800000000000000LL)
  {
    unint64_t v10 = 0xE800000000000000LL;
LABEL_34:
    swift_bridgeObjectRelease(v10);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656475746974616CLL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_34;
  }

  if (a1 == 0x64757469676E6F6CLL && a2 == 0xE900000000000065LL)
  {
    unint64_t v11 = 0xE900000000000065LL;
LABEL_40:
    swift_bridgeObjectRelease(v11);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64757469676E6F6CLL, 0xE900000000000065LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_40;
  }

  if (a1 == 0x7369747265766461LL && a2 == 0xED0000746E656D65LL)
  {
    swift_bridgeObjectRelease(0xED0000746E656D65LL);
    return 7LL;
  }

  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7369747265766461LL, 0xED0000746E656D65LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0) {
      return 7LL;
    }
    else {
      return 8LL;
    }
  }

uint64_t sub_100017FD8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A29E88);
  sub_10000A720(v0, (uint64_t)qword_100A29E88);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000010LL,  0x8000000100850DC0LL);
}

uint64_t sub_10001805C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_10099CC20);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_10099CC20);
  if (qword_10099B040 != -1) {
    swift_once(&qword_10099B040, sub_100017FD8);
  }
  uint64_t v2 = sub_10000A720(v0, (uint64_t)qword_100A29E88);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_1000180EC()
{
  swift_release(*(void *)(v0 + 152));
  sub_1000182F0(*(void *)(v0 + 160), *(void *)(v0 + 168));
  swift_release(*(void *)(v0 + 184));
  sub_100015794(v0 + 192, &qword_10099CE58);
  sub_100015794(v0 + 232, &qword_10099CE60);
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100018160()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for AirPodsLEPairingService()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd23AirPodsLEPairingService);
}

uint64_t sub_100018198()
{
  return swift_task_switch(sub_1000181AC, v0, 0LL);
}

uint64_t sub_1000181AC()
{
  if (qword_10099B048 != -1) {
    swift_once(&qword_10099B048, sub_10001805C);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_10099CC20);
  unint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "AirPodsLEPairingService: Starting up.", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100018288(uint64_t a1)
{
  unint64_t result = sub_1000182AC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000182AC()
{
  unint64_t result = qword_10099CE50;
  if (!qword_10099CE50)
  {
    uint64_t v1 = type metadata accessor for AirPodsLEPairingService();
    unint64_t result = swift_getWitnessTable(&unk_1007E4454, v1);
    atomic_store(result, (unint64_t *)&qword_10099CE50);
  }

  return result;
}

uint64_t sub_1000182F0(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100016F9C(result, a2);
  }
  return result;
}

uint64_t sub_100018304@<X0>(__int128 *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v80 = a3;
  BOOL v79 = a1;
  v87 = a4;
  uint64_t v5 = sub_100004AEC(&qword_10099CE68);
  __chkstk_darwin(v5);
  uint64_t v81 = (uint64_t)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v83 = *(void *)(v7 - 8);
  uint64_t v84 = v7;
  __chkstk_darwin(v7);
  uint64_t v82 = (uint64_t)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for StableIdentifier(0LL);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v86 = (uint64_t)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v68 - v12;
  uint64_t v14 = type metadata accessor for Endianness(0LL);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v85 = (uint64_t)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v68 - v20;
  uint64_t v22 = type metadata accessor for UUID(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  unint64_t v26 = (char *)&v68 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __chkstk_darwin(v24);
  unint64_t v29 = (char *)&v68 - v28;
  uint64_t v30 = a2[12];
  if (!v30 || a2[14] >> 60 == 15LL || (unint64_t v31 = a2[16]) == 0)
  {
LABEL_6:
    uint64_t v33 = static os_log_type_t.error.getter(v27);
    if (qword_10099B798 != -1) {
      swift_once(&qword_10099B798, sub_100651870);
    }
    os_log(_:dso:log:_:_:)( v33,  &_mh_execute_header,  qword_100A2B0A8,  "generateOwnedBeaconRecord: could not get basic device info from the session.",  76LL,  2LL,  _swiftEmptyArrayStorage);
LABEL_9:
    uint64_t v34 = type metadata accessor for OwnedBeaconRecord(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56LL))( v87,  1LL,  1LL,  v34);
  }

  unint64_t v78 = a2[14];
  uint64_t v75 = v30;
  uint64_t v74 = a2[11];
  uint64_t v77 = a2[13];
  uint64_t v76 = a2[15];
  uint64_t v32 = (uint64_t)a2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId;
  swift_beginAccess(v32, v88, 0LL, 0LL);
  sub_10001581C(v32, (uint64_t)v21, &qword_10099D8A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1LL, v22) == 1)
  {
    uint64_t v27 = sub_100015794((uint64_t)v21, &qword_10099D8A0);
    goto LABEL_6;
  }

  uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
  v36(v29, v21, v22);
  uint64_t v37 = HIBYTE(v31) & 0xF;
  if ((v31 & 0x2000000000000000LL) == 0) {
    uint64_t v37 = v76 & 0xFFFFFFFFFFFFLL;
  }
  if (!v37)
  {
    uint64_t v58 = v77;
    unint64_t v59 = v78;
    uint64_t v60 = sub_10001736C(v77, v78);
    uint64_t v61 = static os_log_type_t.error.getter(v60);
    if (qword_10099B798 != -1) {
      swift_once(&qword_10099B798, sub_100651870);
    }
    os_log(_:dso:log:_:_:)( v61,  &_mh_execute_header,  qword_100A2B0A8,  "generateOwnedBeaconRecord: invalid parameters for StableIdentifier.",  67LL,  2LL,  _swiftEmptyArrayStorage);
    sub_1000182F0(v58, v59);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v29, v22);
    goto LABEL_9;
  }

  unint64_t v72 = v36;
  swift_bridgeObjectRetain(v75);
  uint64_t v38 = v77;
  unint64_t v39 = v78;
  sub_100018BE4(v77, v78);
  swift_bridgeObjectRetain(v31);
  sub_1000F54C8(v38, v39);
  uint64_t v73 = v40;
  uint64_t v41 = sub_1000F55FC(v38, v39);
  uint64_t v43 = v42;
  static Endianness.current.getter(v41);
  sub_100018B30();
  FixedWidthInteger.init(data:ofEndianness:)(&v93, v41, v43, v16);
  uint64_t v44 = (int)v93;
  if (BYTE4(v93)) {
    uint64_t v44 = 0LL;
  }
  uint64_t v71 = v44;
  uint64_t v45 = (int *)sub_100004AEC((uint64_t *)&unk_1009B0520);
  uint64_t v46 = &v13[v45[12]];
  uint64_t v47 = &v13[v45[16]];
  __int128 v48 = &v13[v45[20]];
  uint64_t v70 = v45[24];
  char v69 = &v13[v45[28]];
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v13, v29, v22);
  *(void *)uint64_t v46 = 0LL;
  *((void *)v46 + 1) = 0LL;
  *(void *)uint64_t v47 = 0LL;
  *((void *)v47 + 1) = 0LL;
  *(void *)__int128 v48 = v76;
  *((void *)v48 + 1) = v31;
  *(_WORD *)&v13[v70] = 256;
  char v49 = v69;
  *(void *)char v69 = 0LL;
  *((void *)v49 + 1) = 0LL;
  uint64_t v50 = swift_storeEnumTagMultiPayload(v13, v9, 2LL);
  UUID.init()(v50);
  sub_100018B74((uint64_t)v13, v86);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v85, 1LL, 1LL, v22);
  uint64_t v51 = v82;
  sub_1004E6660(v82);
  uint64_t v52 = v79;
  __int128 v93 = v79[2];
  sub_100015750((uint64_t)(v79 + 3), (uint64_t)v92, &qword_10099CE70);
  sub_100015750((uint64_t)(v52 + 4), (uint64_t)v91, &qword_10099CE70);
  __int128 v53 = *v52;
  __int128 v89 = v52[1];
  __int128 v90 = v53;
  uint64_t v54 = v81;
  sub_10001581C(v80, v81, &qword_10099CE68);
  uint64_t v55 = type metadata accessor for AccessoryProductInfo(0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 48LL))(v54, 1LL, v55) == 1)
  {
    sub_100018BF8((uint64_t)&v93);
    sub_100018BB8((uint64_t)v92);
    sub_100018BB8((uint64_t)v91);
    sub_100018BF8((uint64_t)&v90);
    sub_100018BF8((uint64_t)&v89);
    sub_100015794(v54, &qword_10099CE68);
    uint64_t v56 = 0LL;
    unint64_t v57 = 0xE000000000000000LL;
  }

  else
  {
    unsigned __int8 v62 = (uint64_t *)(v54 + *(int *)(v55 + 48));
    uint64_t v56 = *v62;
    unint64_t v57 = v62[1];
    sub_100018BF8((uint64_t)&v93);
    sub_100018BB8((uint64_t)v92);
    sub_100018BB8((uint64_t)v91);
    sub_100018BF8((uint64_t)&v90);
    sub_100018BF8((uint64_t)&v89);
    swift_bridgeObjectRetain(v57);
    sub_100018C68(v54, type metadata accessor for AccessoryProductInfo);
  }

  sub_1000182F0(v77, v78);
  sub_100018C68((uint64_t)v13, type metadata accessor for StableIdentifier);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v29, v22);
  uint64_t v63 = v87;
  *(_OWORD *)v87 = xmmword_1007E4480;
  v64 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  v72(&v63[v64[5]], v26, v22);
  sub_100018C24(v86, (uint64_t)&v63[v64[6]]);
  sub_100015750(v85, (uint64_t)&v63[v64[7]], &qword_10099D8A0);
  (*(void (**)(char *, uint64_t, uint64_t))(v83 + 32))(&v63[v64[8]], v51, v84);
  *(_OWORD *)&v63[v64[9]] = v93;
  sub_100015750((uint64_t)v92, (uint64_t)&v63[v64[10]], &qword_10099CE70);
  sub_100015750((uint64_t)v91, (uint64_t)&v63[v64[11]], &qword_10099CE70);
  *(_OWORD *)&v63[v64[12]] = v90;
  *(_OWORD *)&v63[v64[13]] = v89;
  uint64_t v65 = &v63[v64[14]];
  *(void *)uint64_t v65 = v56;
  *((void *)v65 + 1) = v57;
  v66 = &v63[v64[15]];
  uint64_t v67 = v75;
  *(void *)v66 = v74;
  *((void *)v66 + 1) = v67;
  *(void *)&v63[v64[16]] = v73;
  *(void *)&v63[v64[17]] = v71;
  v63[v64[18]] = 3;
  v63[v64[19]] = 0;
  v63[v64[20]] = 0;
  return (*(uint64_t (**)(char *, void, uint64_t, int *))(*((void *)v64 - 1) + 56LL))(v63, 0LL, 1LL, v64);
}

unint64_t sub_100018B30()
{
  unint64_t result = qword_1009A6D60;
  if (!qword_1009A6D60)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int32, &type metadata for Int32);
    atomic_store(result, (unint64_t *)&qword_1009A6D60);
  }

  return result;
}

uint64_t sub_100018B74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for StableIdentifier(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100018BB8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100018BE4(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10001736C(result, a2);
  }
  return result;
}

uint64_t sub_100018BF8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100018C24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for StableIdentifier(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100018C68(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_100018CA4()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A29EA0);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A29EA0);
  if (qword_10099B058 != -1) {
    swift_once(&qword_10099B058, sub_10001CE38);
  }
  uint64_t v2 = sub_10000A720(v0, (uint64_t)qword_100A29EB8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_100018D34()
{
  v1[17] = v0;
  uint64_t v2 = type metadata accessor for StableIdentifier(0LL);
  v1[18] = v2;
  v1[19] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for OwnedBeaconRecord(0LL);
  v1[20] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[21] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[22] = swift_task_alloc(v5);
  v1[23] = swift_task_alloc(v5);
  return swift_task_switch(sub_100018DC8, v0, 0LL);
}

uint64_t sub_100018DC8()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001CEB4((uint64_t)&xmmword_1009BED80, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C890 + dword_10099C890);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 192) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100018EC0;
    return v4();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100018EC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 192LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 136LL);
  *(void *)(*(void *)v1 + 20Hasher.init(_seed:)(v1, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100018F20, v3, 0LL);
}

uint64_t sub_100018F20()
{
  uint64_t v1 = *(void *)(v0 + 200);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (v1)
  {
    uint64_t v2 = (void *)swift_task_alloc(dword_10099CF8C);
    *(void *)(v0 + 208) = v2;
    void *v2 = v0;
    v2[1] = sub_100018FF8;
    return sub_1000195E4();
  }

  else
  {
    unint64_t v4 = sub_1000157D0();
    uint64_t v5 = swift_allocError(&type metadata for DaemonError, v4, 0LL, 0LL);
    *uint64_t v6 = 0xD000000000000010LL;
    v6[1] = 0x8000000100850F20LL;
    swift_willThrow(v5);
    uint64_t v7 = *(void *)(v0 + 176);
    uint64_t v8 = *(void *)(v0 + 152);
    swift_task_dealloc(*(void *)(v0 + 184));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100018FF8(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 208);
  *(void *)(*v2 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = *(void *)(v4 + 136);
  if (v1)
  {
    uint64_t v7 = sub_10001958C;
  }

  else
  {
    *(void *)(v4 + 224) = a1;
    uint64_t v7 = sub_10001906C;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_10001906C()
{
  uint64_t v1 = sub_1006F1060(v0[28]);
  v0[29] = v1;
  swift_bridgeObjectRelease();
  if (qword_10099B050 != -1) {
    swift_once(&qword_10099B050, sub_100018CA4);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A29EA0);
  swift_bridgeObjectRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v6 = 134217984;
    v0[16] = *(void *)(v1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 17, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "FMIP server has %ld self-beaconing devices registered.",  v6,  0xCu);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  return swift_task_switch(sub_1000191C0, v0[25], 0LL);
}

uint64_t sub_1000191C0()
{
  *(void *)(v0 + 240) = *(void *)(*(void *)(v0 + 200) + 136LL);
  swift_retain();
  return swift_task_switch(sub_100019204, 0LL, 0LL);
}

uint64_t sub_100019204()
{
  uint64_t v1 = v0[30];
  uint64_t v2 = v0[25];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[31] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DD18;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[32] = v4;
  uint64_t v5 = sub_100004AEC(&qword_10099CFB8);
  *uint64_t v4 = v0;
  v4[1] = sub_1000192C4;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 15,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_10001DD20,  v3,  v5);
}

uint64_t sub_1000192C4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 248);
  uint64_t v3 = *(void *)(*v0 + 136);
  swift_task_dealloc(*(void *)(*v0 + 256));
  swift_release();
  swift_task_dealloc(v2);
  *(void *)(v1 + 264) = *(void *)(v1 + 120);
  return swift_task_switch(sub_10001933C, v3, 0LL);
}

uint64_t sub_10001933C()
{
  uint64_t result = *(void *)(v0 + 264);
  uint64_t v2 = _swiftEmptyArrayStorage;
  uint64_t v27 = *(void *)(result + 16);
  if (v27)
  {
    unint64_t v3 = 0LL;
    uint64_t v25 = *(void *)(v0 + 168);
    uint64_t v26 = *(void *)(v0 + 160);
    uint64_t v24 = _swiftEmptyArrayStorage;
    uint64_t v4 = type metadata accessor for StableIdentifier;
    while (v3 < *(void *)(result + 16))
    {
      uint64_t v5 = result;
      uint64_t v6 = *(void *)(v0 + 184);
      uint64_t v8 = *(void *)(v0 + 144);
      uint64_t v7 = *(void *)(v0 + 152);
      unint64_t v9 = (*(unsigned __int8 *)(v25 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
      uint64_t v10 = *(void *)(v25 + 72);
      sub_10001DC4C(*(void *)(v0 + 264) + v9 + v10 * v3, v6, type metadata accessor for OwnedBeaconRecord);
      sub_10001DC4C(v6 + *(int *)(v26 + 24), v7, v4);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v7, v8);
      uint64_t v12 = *(void *)(v0 + 184);
      if (EnumCaseMultiPayload)
      {
        sub_100018C68(*(void *)(v0 + 152), v4);
        sub_100018C68(v12, type metadata accessor for OwnedBeaconRecord);
      }

      else
      {
        uint64_t v13 = v4;
        uint64_t v14 = *(void *)(v0 + 176);
        swift_bridgeObjectRelease();
        sub_10001DBBC(v12, v14);
        uint64_t v15 = v24;
        if ((swift_isUniquelyReferenced_nonNull_native(v24) & 1) == 0)
        {
          sub_1000328A4(0, v24[2] + 1LL, 1);
          uint64_t v15 = _swiftEmptyArrayStorage;
        }

        unint64_t v17 = v15[2];
        unint64_t v16 = v15[3];
        if (v17 >= v16 >> 1)
        {
          sub_1000328A4(v16 > 1, v17 + 1, 1);
          uint64_t v15 = _swiftEmptyArrayStorage;
        }

        uint64_t v18 = *(void *)(v0 + 176);
        v15[2] = v17 + 1;
        uint64_t v24 = v15;
        sub_10001DBBC(v18, (uint64_t)v15 + v9 + v17 * v10);
        uint64_t v4 = v13;
      }

      ++v3;
      uint64_t result = v5;
      if (v27 == v3)
      {
        uint64_t v2 = v24;
        goto LABEL_13;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_13:
    uint64_t v19 = *(void *)(v0 + 232);
    uint64_t v21 = *(void *)(v0 + 176);
    uint64_t v20 = *(void *)(v0 + 184);
    uint64_t v22 = *(void *)(v0 + 152);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(v19);
    uint64_t v23 = sub_10001D468((uint64_t)v2, v19);
    swift_bridgeObjectRelease_n(v19, 2LL);
    swift_release();
    swift_release();
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void *))(v0 + 8))(v23);
  }

  return result;
}

uint64_t sub_10001958C()
{
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 152);
  swift_task_dealloc(*(void *)(v0 + 184));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000195E4()
{
  v1[43] = v0;
  uint64_t v2 = sub_100004AEC(&qword_10099D8A0);
  v1[44] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v1[45] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[46] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[47] = swift_task_alloc(v5);
  v1[48] = swift_task_alloc(v5);
  uint64_t v6 = type metadata accessor for AnyAnalyticsEvent(0LL);
  v1[49] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v1[50] = v7;
  v1[51] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0LL);
  v1[52] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v1[53] = v9;
  v1[54] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Logger(0LL);
  v1[55] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v1[56] = v11;
  v1[57] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Response(0LL);
  v1[58] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v1[59] = v13;
  v1[60] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for ContinuousClock.Instant(0LL);
  v1[61] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v1[62] = v15;
  unint64_t v16 = (*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[63] = swift_task_alloc(v16);
  v1[64] = swift_task_alloc(v16);
  v1[65] = swift_task_alloc(v16);
  uint64_t DevicesEndpoint = type metadata accessor for FetchDevicesEndpoint(0LL);
  v1[66] = DevicesEndpoint;
  v1[67] = swift_task_alloc((*(void *)(*(void *)(DevicesEndpoint - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v18 = (*(void *)(*(void *)(type metadata accessor for SearchpartyAccount(0LL) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[68] = swift_task_alloc(v18);
  v1[69] = swift_task_alloc(v18);
  uint64_t v19 = type metadata accessor for ContinuousClock(0LL);
  v1[70] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v1[71] = v20;
  unint64_t v21 = (*(void *)(v20 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[72] = swift_task_alloc(v21);
  v1[73] = swift_task_alloc(v21);
  return swift_task_switch(sub_1000197E8, v0, 0LL);
}

uint64_t sub_1000197E8()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 296, 0LL, 0LL);
  uint64_t result = sub_10001CEB4((uint64_t)&xmmword_1009BED80, v0 + 136);
  if (*(void *)(v0 + 160))
  {
    sub_100012EC0((__int128 *)(v0 + 136), v0 + 96);
    swift_release();
    sub_100012ED8((void *)(v0 + 96), *(void *)(v0 + 120));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099CA30 + dword_10099CA30);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099CA34);
    *(void *)(v0 + 592) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1000198E0;
    return v4();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000198E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 592LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 344LL);
  *(void *)(*(void *)v1 + 60Hasher.init(_seed:)(v1, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100019940, v3, 0LL);
}

uint64_t sub_100019940()
{
  uint64_t v1 = (void *)(v0 + 96);
  if (*(void *)(v0 + 600))
  {
    uint64_t v2 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    ContinuousClock.init()(v2);
    uint64_t v3 = (void *)swift_task_alloc(dword_1009A0E7C);
    *(void *)(v0 + 608) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100019AFC;
    return sub_1000DF9D0(v0 + 16);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    unint64_t v5 = sub_1000157D0();
    uint64_t v21 = swift_allocError(&type metadata for DaemonError, v5, 0LL, 0LL);
    strcpy(v6, "AccountService");
    v6[15] = -18;
    swift_willThrow(v21);
    uint64_t v7 = *(void *)(v0 + 576);
    uint64_t v8 = *(void *)(v0 + 552);
    uint64_t v9 = *(void *)(v0 + 544);
    uint64_t v10 = *(void *)(v0 + 536);
    uint64_t v11 = *(void *)(v0 + 520);
    uint64_t v13 = *(void *)(v0 + 504);
    uint64_t v12 = *(void *)(v0 + 512);
    uint64_t v14 = *(void *)(v0 + 480);
    uint64_t v15 = *(void *)(v0 + 456);
    uint64_t v16 = *(void *)(v0 + 432);
    uint64_t v17 = *(void *)(v0 + 408);
    uint64_t v18 = *(void *)(v0 + 384);
    uint64_t v19 = *(void *)(v0 + 376);
    uint64_t v20 = *(void *)(v0 + 352);
    swift_task_dealloc(*(void *)(v0 + 584));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100019AFC()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 608LL);
  uint64_t v3 = *(void **)v1;
  v3[77] = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_10001AC08, v3[43], 0LL);
  }
  unint64_t v5 = (void *)swift_task_alloc(dword_1009A0E84);
  v3[78] = v5;
  void *v5 = v3;
  v5[1] = sub_100019B90;
  return sub_1000E0490(v3[69]);
}

uint64_t sub_100019B90()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 624);
  *(void *)(*v1 + 632) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 344);
    sub_10001CEFC((void *)(v2 + 16));
    unint64_t v5 = sub_10001AD34;
    uint64_t v6 = v4;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 344);
    unint64_t v5 = sub_100019C04;
  }

  return swift_task_switch(v5, v6, 0LL);
}

uint64_t sub_100019C04(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 632);
  uint64_t v3 = *(void *)(v1 + 552);
  uint64_t v4 = *(void **)(v1 + 544);
  URLComponents.init()(a1);
  URLComponents.scheme.setter(0x7370747468LL, 0xE500000000000000LL);
  uint64_t v5 = *(void *)(v1 + 80);
  uint64_t v6 = *(void *)(v1 + 88);
  swift_bridgeObjectRetain(v6);
  URLComponents.host.setter(v5, v6);
  sub_10001CEFC((void *)(v1 + 16));
  URLComponents.path.setter(0xD000000000000024LL, 0x8000000100850EF0LL);
  sub_10001DC4C(v3, (uint64_t)v4, type metadata accessor for SearchpartyAccount);
  *(void *)(v1 + 640) = v4[2];
  uint64_t v7 = v4[3];
  *(void *)(v1 + 648) = v7;
  *(void *)(v1 + 656) = v4[4];
  uint64_t v8 = v4[5];
  *(void *)(v1 + 664) = v8;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  sub_100018C68((uint64_t)v4, type metadata accessor for SearchpartyAccount);
  *(void *)(v1 + 672) = sub_100651BF4();
  *(void *)(v1 + 680) = v9;
  if (v2)
  {
    uint64_t v10 = *(void *)(v1 + 584);
    uint64_t v11 = *(void *)(v1 + 568);
    uint64_t v12 = *(void *)(v1 + 560);
    uint64_t v13 = *(void *)(v1 + 552);
    uint64_t v14 = *(void *)(v1 + 536);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    sub_100018C68(v14, type metadata accessor for FetchDevicesEndpoint);
    sub_100018C68(v13, type metadata accessor for SearchpartyAccount);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    uint64_t v15 = *(void *)(v1 + 576);
    uint64_t v16 = *(void *)(v1 + 552);
    uint64_t v17 = *(void *)(v1 + 544);
    uint64_t v18 = *(void *)(v1 + 536);
    uint64_t v19 = *(void *)(v1 + 520);
    uint64_t v21 = *(void *)(v1 + 504);
    uint64_t v20 = *(void *)(v1 + 512);
    uint64_t v22 = *(void *)(v1 + 480);
    uint64_t v23 = *(void *)(v1 + 456);
    uint64_t v30 = *(void *)(v1 + 432);
    uint64_t v31 = *(void *)(v1 + 408);
    uint64_t v32 = *(void *)(v1 + 384);
    uint64_t v33 = *(void *)(v1 + 376);
    uint64_t v34 = *(void *)(v1 + 352);
    swift_task_dealloc(*(void *)(v1 + 584));
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

  else
  {
    type metadata accessor for ServerInteractionController(0LL);
    *(void *)(v1 + 688) = ServerInteractionController.__allocating_init(bundleIdentifier:)( 0xD00000000000001DLL,  0x80000001008507F0LL);
    uint64_t v25 = sub_100004AEC(&qword_10099CF90);
    uint64_t v26 = AnalyticsEvent.__allocating_init(name:)();
    *(void *)(v1 + 696) = v26;
    ContinuousClock.now.getter(v26);
    unint64_t v27 = sub_10001DC00();
    uint64_t v28 = dispatch thunk of Actor.unownedExecutor.getter(v25, v27);
    *(void *)(v1 + 704) = v28;
    *(void *)(v1 + 712) = v29;
    return swift_task_switch(sub_100019EF0, v28, v29);
  }

uint64_t sub_100019EF0()
{
  uint64_t v1 = *(void *)(v0 + 344);
  dispatch thunk of AnalyticsEvent.startTiming()();
  return swift_task_switch(sub_100019F30, v1, 0LL);
}

uint64_t sub_100019F30()
{
  unint64_t v1 = *(void *)(v0 + 680);
  uint64_t v2 = *(void *)(v0 + 672);
  uint64_t v3 = *(void *)(v0 + 664);
  uint64_t v4 = *(void *)(v0 + 656);
  __int128 v10 = *(_OWORD *)(v0 + 640);
  uint64_t v5 = *(void *)(v0 + 536);
  *(void *)(v0 + 200) = *(void *)(v0 + 528);
  *(void *)(v0 + 208) = sub_100015C48( &qword_10099CFA0,  255LL,  type metadata accessor for FetchDevicesEndpoint,  (uint64_t)&unk_1007EF168);
  uint64_t v6 = sub_10000A7C8((void *)(v0 + 176));
  sub_10001DC4C(v5, (uint64_t)v6, type metadata accessor for FetchDevicesEndpoint);
  *(void *)(v0 + 240) = &type metadata for FetchDevicesRequest;
  *(void *)(v0 + 248) = sub_10001DC90();
  *(void *)(v0 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v2;
  *(void *)(v0 + 224) = v1;
  *(void *)(v0 + 280) = &type metadata for SearchpartyCredential;
  *(void *)(v0 + 288) = sub_10001DB08();
  uint64_t v7 = swift_allocObject(&unk_100938E80, 48LL, 7LL);
  *(void *)(v0 + 256) = v7;
  *(_OWORD *)(v7 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v10;
  *(void *)(v7 + 32) = v4;
  *(void *)(v7 + 40) = v3;
  sub_100018BE4(v2, v1);
  *(void *)(v0 + 720) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10001A090;
  return ((uint64_t (*)(void, uint64_t, uint64_t, uint64_t))v10)( *(void *)(v0 + 480),  v0 + 176,  v0 + 216,  v0 + 256);
}

uint64_t sub_10001A090()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 720LL);
  *(void *)(*(void *)v1 + 728LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = v2[43];
    uint64_t v5 = sub_10001AE60;
  }

  else
  {
    uint64_t v6 = (uint64_t)(v2 + 32);
    uint64_t v7 = v2 + 27;
    uint64_t v8 = v2 + 22;
    uint64_t v9 = v2[43];
    sub_100015794(v6, &qword_10099CF70);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v7);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v8);
    uint64_t v5 = sub_10001A12C;
    uint64_t v4 = v9;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_10001A12C()
{
  if (qword_10099B050 != -1) {
    swift_once(&qword_10099B050, sub_100018CA4);
  }
  uint64_t v116 = *(void *)(v0 + 576);
  uint64_t v120 = *(void *)(v0 + 584);
  uint64_t v1 = *(void *)(v0 + 568);
  uint64_t v2 = *(void *)(v0 + 560);
  uint64_t v3 = *(void *)(v0 + 520);
  uint64_t v4 = *(void *)(v0 + 512);
  uint64_t v6 = *(void *)(v0 + 488);
  uint64_t v5 = *(void *)(v0 + 496);
  uint64_t v7 = *(void *)(v0 + 448);
  uint64_t v8 = *(void *)(v0 + 456);
  uint64_t v9 = *(void *)(v0 + 440);
  uint64_t v10 = sub_10000A720(v9, (uint64_t)qword_100A29EA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v8, v10, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v3, v6);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v116, v120, v2);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter(v12);
  BOOL v14 = os_log_type_enabled(v12, v13);
  uint64_t v15 = *(void *)(v0 + 576);
  uint64_t v16 = *(void *)(v0 + 568);
  uint64_t v17 = *(void *)(v0 + 560);
  uint64_t v18 = *(void *)(v0 + 512);
  if (v14)
  {
    uint64_t v19 = *(void *)(v0 + 504);
    uint64_t v20 = *(void *)(v0 + 488);
    uint64_t v113 = *(void *)(v0 + 448);
    uint64_t v21 = *(void *)(v0 + 432);
    uint64_t v117 = *(void *)(v0 + 440);
    uint64_t v121 = *(void *)(v0 + 456);
    uint64_t v88 = *(void *)(v0 + 424);
    uint64_t v91 = *(void *)(v0 + 416);
    uint64_t v94 = *(void *)(v0 + 496);
    os_log_type_t type = v13;
    uint64_t v97 = *(void *)(v0 + 576);
    uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v105 = swift_slowAlloc(32LL, -1LL);
    uint64_t v122 = v105;
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v23 = ContinuousClock.now.getter(v105);
    static Duration.UnitsFormatStyle.Unit.milliseconds.getter(v23);
    uint64_t v24 = sub_100015C48( &qword_1009AE520,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant,  (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
    uint64_t v25 = static Duration.description<A>(_:_:units:)(v18, v19, v21, v20, v24);
    uint64_t v86 = v16;
    unint64_t v27 = v26;
    (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v21, v91);
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v94 + 8);
    v28(v19, v20);
    *(void *)(v0 + 336) = sub_1003F11D4(v25, v27, &v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease();
    v28(v18, v20);
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v86 + 8);
    v29(v97, v17);
    _os_log_impl((void *)&_mh_execute_header, v12, type, "fetchDevices duration: %s", v22, 0xCu);
    swift_arrayDestroy(v105, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v105, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);

    uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v113 + 8))(v121, v117);
  }

  else
  {
    uint64_t v32 = *(void *)(v0 + 448);
    uint64_t v31 = *(void *)(v0 + 456);
    uint64_t v33 = *(void *)(v0 + 440);
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 496) + 8LL);
    v28(*(void *)(v0 + 512), *(void *)(v0 + 488));
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v29(v15, v17);

    uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
  }

  *(void *)(v0 + 744) = v28;
  *(void *)(v0 + 736) = v29;
  uint64_t v34 = (void *)Response.response.getter(v30);
  id v35 = [v34 statusCode];

  if (v35 != (id)200)
  {
    uint64_t v93 = *(void *)(v0 + 672);
    unint64_t v96 = *(void *)(v0 + 680);
    uint64_t v114 = *(void *)(v0 + 584);
    uint64_t v107 = *(void *)(v0 + 552);
    *(void *)typea = *(void *)(v0 + 560);
    uint64_t v101 = *(void *)(v0 + 520);
    uint64_t v103 = *(void *)(v0 + 536);
    uint64_t v47 = *(void *)(v0 + 480);
    uint64_t v99 = *(void *)(v0 + 488);
    uint64_t v87 = *(void *)(v0 + 472);
    uint64_t v90 = *(void *)(v0 + 464);
    uint64_t v48 = type metadata accessor for GenericError(0LL);
    uint64_t v49 = sub_100015C48( (unint64_t *)&qword_10099CF78,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for GenericError,  (uint64_t)&protocol conformance descriptor for GenericError);
    swift_allocError(v48, v49, 0LL, 0LL);
    uint64_t v51 = v50;
    uint64_t v122 = 0LL;
    unint64_t v123 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(21LL);
    uint64_t v52 = swift_bridgeObjectRelease();
    uint64_t v122 = 0xD000000000000013LL;
    unint64_t v123 = 0x8000000100850ED0LL;
    __int128 v53 = (void *)Response.response.getter(v52);
    id v54 = [v53 statusCode];

    *(void *)(v0 + 320) = v54;
    v55._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    unint64_t v56 = v123;
    void *v51 = v122;
    v51[1] = v56;
    uint64_t v57 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v48 - 8) + 104LL))( v51,  enum case for GenericError.error(_:),  v48);
    swift_willThrow(v57);
    swift_release();
    swift_release();
    swift_release();
    sub_1000182F0(v93, v96);
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v47, v90);
    v28(v101, v99);
    sub_100018C68(v103, type metadata accessor for FetchDevicesEndpoint);
    sub_100018C68(v107, type metadata accessor for SearchpartyAccount);
    v29(v114, *(void *)typea);
LABEL_10:
    uint64_t v58 = *(void *)(v0 + 576);
    uint64_t v59 = *(void *)(v0 + 552);
    uint64_t v60 = *(void *)(v0 + 544);
    uint64_t v61 = *(void *)(v0 + 536);
    uint64_t v62 = *(void *)(v0 + 520);
    uint64_t v64 = *(void *)(v0 + 504);
    uint64_t v63 = *(void *)(v0 + 512);
    uint64_t v65 = *(void *)(v0 + 480);
    uint64_t v66 = *(void *)(v0 + 456);
    uint64_t v104 = *(void *)(v0 + 432);
    uint64_t v108 = *(void *)(v0 + 408);
    *(void *)typec = *(void *)(v0 + 384);
    uint64_t v115 = *(void *)(v0 + 376);
    uint64_t v119 = *(void *)(v0 + 352);
    swift_task_dealloc(*(void *)(v0 + 584));
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v104);
    swift_task_dealloc(v108);
    swift_task_dealloc(*(void *)typec);
    swift_task_dealloc(v115);
    swift_task_dealloc(v119);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v36 = (void *)(v0 + 328);
  uint64_t v37 = *(void *)(v0 + 728);
  uint64_t v38 = type metadata accessor for JSONDecoder(0LL);
  uint64_t v39 = swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
  JSONDecoder.init()(v39);
  uint64_t v40 = Response.body.getter();
  unint64_t v42 = v41;
  unint64_t v43 = sub_10001DCD4();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)( &type metadata for FetchDevicesResponse,  v40,  v42,  &type metadata for FetchDevicesResponse,  v43);
  if (v37)
  {
    uint64_t v89 = *(void *)(v0 + 672);
    unint64_t v92 = *(void *)(v0 + 680);
    char v118 = v28;
    uint64_t v106 = *(void *)(v0 + 560);
    *(void *)typeb = *(void *)(v0 + 584);
    uint64_t v100 = *(void *)(v0 + 536);
    uint64_t v102 = *(void *)(v0 + 552);
    uint64_t v44 = *(void *)(v0 + 480);
    uint64_t v95 = *(void *)(v0 + 488);
    uint64_t v98 = *(void *)(v0 + 520);
    uint64_t v46 = *(void *)(v0 + 464);
    uint64_t v45 = *(void *)(v0 + 472);
    sub_100016F9C(v40, v42);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_1000182F0(v89, v92);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
    v118(v98, v95);
    sub_100018C68(v100, type metadata accessor for FetchDevicesEndpoint);
    sub_100018C68(v102, type metadata accessor for SearchpartyAccount);
    v29(*(void *)typeb, v106);
    goto LABEL_10;
  }

  sub_100016F9C(v40, v42);
  swift_release();
  uint64_t v68 = *v36;
  uint64_t v69 = *(void *)(*v36 + 16LL);
  if (v69)
  {
    uint64_t v70 = *(void *)(v0 + 368);
    swift_bridgeObjectRetain(*v36);
    uint64_t v71 = (uint64_t *)(v68 + 56);
    unint64_t v72 = (char *)_swiftEmptyArrayStorage;
    do
    {
      uint64_t v74 = *(void *)(v0 + 352);
      uint64_t v73 = *(void *)(v0 + 360);
      uint64_t v75 = *(v71 - 3);
      uint64_t v76 = *(v71 - 2);
      uint64_t v77 = *v71;
      swift_bridgeObjectRetain(v76);
      swift_bridgeObjectRetain(v77);
      UUID.init(uuidString:)(v75, v76);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48))(v74, 1LL, v73) == 1)
      {
        sub_100015794(*(void *)(v0 + 352), &qword_10099D8A0);
      }

      else
      {
        BOOL v79 = *(char **)(v0 + 376);
        unint64_t v78 = *(char **)(v0 + 384);
        uint64_t v80 = *(void *)(v0 + 360);
        uint64_t v81 = *(void (**)(char *, char *, uint64_t))(v70 + 32);
        v81(v78, *(char **)(v0 + 352), v80);
        v81(v79, v78, v80);
        if ((swift_isUniquelyReferenced_nonNull_native(v72) & 1) == 0) {
          unint64_t v72 = (char *)sub_1004C44BC(0, *((void *)v72 + 2) + 1LL, 1, (unint64_t)v72);
        }
        unint64_t v83 = *((void *)v72 + 2);
        unint64_t v82 = *((void *)v72 + 3);
        if (v83 >= v82 >> 1) {
          unint64_t v72 = (char *)sub_1004C44BC(v82 > 1, v83 + 1, 1, (unint64_t)v72);
        }
        uint64_t v84 = *(char **)(v0 + 376);
        uint64_t v85 = *(void *)(v0 + 360);
        *((void *)v72 + 2) = v83 + 1;
        v81( &v72[((*(unsigned __int8 *)(v70 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80))
             + *(void *)(v70 + 72) * v83],
          v84,
          v85);
      }

      v71 += 4;
      --v69;
    }

    while (v69);
    swift_bridgeObjectRelease();
  }

  else
  {
    unint64_t v72 = (char *)_swiftEmptyArrayStorage;
  }

  *(void *)(v0 + 752) = v72;
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_10001A9D4, *(void *)(v0 + 704), *(void *)(v0 + 712));
}

uint64_t sub_10001A9D4()
{
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v2 = dispatch thunk of AnalyticsEvent.stopTiming()();
  dispatch thunk of AnalyticsEvent.anyAnalyticsEvent.getter(v2);
  return swift_task_switch(sub_10001AA28, v1, 0LL);
}

uint64_t sub_10001AA28()
{
  uint64_t v8 = *(void *)(v0 + 672);
  unint64_t v9 = *(void *)(v0 + 680);
  uint64_t v16 = *(void *)(v0 + 584);
  uint64_t v17 = *(void *)(v0 + 576);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 736);
  BOOL v14 = *(void (**)(uint64_t, uint64_t))(v0 + 744);
  uint64_t v15 = *(void *)(v0 + 560);
  uint64_t v12 = *(void *)(v0 + 536);
  uint64_t v13 = *(void *)(v0 + 552);
  uint64_t v19 = *(void *)(v0 + 544);
  uint64_t v20 = *(void *)(v0 + 512);
  uint64_t v1 = *(void *)(v0 + 480);
  uint64_t v10 = *(void *)(v0 + 488);
  uint64_t v11 = *(void *)(v0 + 520);
  uint64_t v2 = *(void *)(v0 + 464);
  uint64_t v3 = *(void *)(v0 + 472);
  uint64_t v21 = *(void *)(v0 + 504);
  uint64_t v22 = *(void *)(v0 + 456);
  uint64_t v5 = *(void *)(v0 + 400);
  uint64_t v4 = *(void *)(v0 + 408);
  uint64_t v6 = *(void *)(v0 + 392);
  uint64_t v23 = *(void *)(v0 + 432);
  uint64_t v24 = *(void *)(v0 + 384);
  uint64_t v25 = *(void *)(v0 + 376);
  uint64_t v26 = *(void *)(v0 + 352);
  static AnalyticsPublisher.publish(event:)(v4);
  swift_release();
  swift_release();
  swift_release();
  sub_1000182F0(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v14(v11, v10);
  sub_100018C68(v12, type metadata accessor for FetchDevicesEndpoint);
  sub_100018C68(v13, type metadata accessor for SearchpartyAccount);
  v18(v16, v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v13);
  swift_task_dealloc(v19);
  swift_task_dealloc(v12);
  swift_task_dealloc(v11);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v1);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v4);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 752));
}

uint64_t sub_10001AC08()
{
  uint64_t v1 = *(void *)(v0 + 584);
  uint64_t v2 = *(void *)(v0 + 568);
  uint64_t v3 = *(void *)(v0 + 560);
  swift_release(*(void *)(v0 + 600));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = *(void *)(v0 + 576);
  uint64_t v5 = *(void *)(v0 + 552);
  uint64_t v6 = *(void *)(v0 + 544);
  uint64_t v7 = *(void *)(v0 + 536);
  uint64_t v8 = *(void *)(v0 + 520);
  uint64_t v10 = *(void *)(v0 + 504);
  uint64_t v9 = *(void *)(v0 + 512);
  uint64_t v11 = *(void *)(v0 + 480);
  uint64_t v12 = *(void *)(v0 + 456);
  uint64_t v14 = *(void *)(v0 + 432);
  uint64_t v15 = *(void *)(v0 + 408);
  uint64_t v16 = *(void *)(v0 + 384);
  uint64_t v17 = *(void *)(v0 + 376);
  uint64_t v18 = *(void *)(v0 + 352);
  swift_task_dealloc(*(void *)(v0 + 584));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001AD34()
{
  uint64_t v1 = *(void *)(v0 + 584);
  uint64_t v2 = *(void *)(v0 + 568);
  uint64_t v3 = *(void *)(v0 + 560);
  swift_release(*(void *)(v0 + 600));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = *(void *)(v0 + 576);
  uint64_t v5 = *(void *)(v0 + 552);
  uint64_t v6 = *(void *)(v0 + 544);
  uint64_t v7 = *(void *)(v0 + 536);
  uint64_t v8 = *(void *)(v0 + 520);
  uint64_t v10 = *(void *)(v0 + 504);
  uint64_t v9 = *(void *)(v0 + 512);
  uint64_t v11 = *(void *)(v0 + 480);
  uint64_t v12 = *(void *)(v0 + 456);
  uint64_t v14 = *(void *)(v0 + 432);
  uint64_t v15 = *(void *)(v0 + 408);
  uint64_t v16 = *(void *)(v0 + 384);
  uint64_t v17 = *(void *)(v0 + 376);
  uint64_t v18 = *(void *)(v0 + 352);
  swift_task_dealloc(*(void *)(v0 + 584));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001AE60()
{
  unint64_t v1 = *(void *)(v0 + 680);
  uint64_t v2 = *(void *)(v0 + 672);
  uint64_t v22 = *(void *)(v0 + 584);
  uint64_t v18 = *(void *)(v0 + 568);
  uint64_t v20 = *(void *)(v0 + 560);
  uint64_t v3 = *(void *)(v0 + 552);
  uint64_t v4 = *(void *)(v0 + 536);
  uint64_t v5 = *(void *)(v0 + 520);
  uint64_t v6 = *(void *)(v0 + 488);
  uint64_t v7 = *(void *)(v0 + 496);
  swift_release();
  swift_release();
  swift_release();
  sub_1000182F0(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  sub_100018C68(v4, type metadata accessor for FetchDevicesEndpoint);
  sub_100018C68(v3, type metadata accessor for SearchpartyAccount);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v22, v20);
  sub_100015794(v0 + 256, &qword_10099CF70);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 216));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 176));
  uint64_t v8 = *(void *)(v0 + 576);
  uint64_t v9 = *(void *)(v0 + 552);
  uint64_t v10 = *(void *)(v0 + 544);
  uint64_t v11 = *(void *)(v0 + 536);
  uint64_t v12 = *(void *)(v0 + 520);
  uint64_t v14 = *(void *)(v0 + 504);
  uint64_t v13 = *(void *)(v0 + 512);
  uint64_t v15 = *(void *)(v0 + 480);
  uint64_t v16 = *(void *)(v0 + 456);
  uint64_t v19 = *(void *)(v0 + 432);
  uint64_t v21 = *(void *)(v0 + 408);
  uint64_t v23 = *(void *)(v0 + 384);
  uint64_t v24 = *(void *)(v0 + 376);
  uint64_t v25 = *(void *)(v0 + 352);
  swift_task_dealloc(*(void *)(v0 + 584));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001B030(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[6] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[7] = swift_task_alloc(v5);
  v2[8] = swift_task_alloc(v5);
  uint64_t v6 = type metadata accessor for StableIdentifier(0LL);
  void v2[9] = v6;
  v2[10] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OwnedBeaconRecord(0LL);
  v2[11] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[12] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[13] = swift_task_alloc(v9);
  v2[14] = swift_task_alloc(v9);
  v2[15] = swift_task_alloc(v9);
  return swift_task_switch(sub_10001B108, v1, 0LL);
}

uint64_t sub_10001B108()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = _swiftEmptyArrayStorage;
  int64_t v3 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain(v1);
  int64_t v41 = v3;
  if (v3)
  {
    uint64_t v5 = v0[12];
    uint64_t v44 = v0[11];
    uint64_t v6 = *(void *)(v5 + 72);
    unint64_t v42 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v7 = v4 + v42;
    do
    {
      uint64_t v8 = v0[15];
      uint64_t v10 = v0[9];
      uint64_t v9 = v0[10];
      sub_10001DC4C(v7, v8, type metadata accessor for OwnedBeaconRecord);
      sub_10001DC4C(v8 + *(int *)(v44 + 24), v9, type metadata accessor for StableIdentifier);
      LODWORD(v8) = swift_getEnumCaseMultiPayload(v9, v10);
      sub_100018C68(v9, type metadata accessor for StableIdentifier);
      uint64_t v11 = v0[15];
      if ((_DWORD)v8)
      {
        sub_10001DBBC(v11, v0[14]);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
          sub_1000328A4(0, _swiftEmptyArrayStorage[2] + 1LL, 1);
        }
        unint64_t v13 = _swiftEmptyArrayStorage[2];
        unint64_t v12 = _swiftEmptyArrayStorage[3];
        if (v13 >= v12 >> 1) {
          sub_1000328A4(v12 > 1, v13 + 1, 1);
        }
        uint64_t v14 = v0[14];
        _swiftEmptyArrayStorage[2] = v13 + 1;
        sub_10001DBBC(v14, (uint64_t)_swiftEmptyArrayStorage + v42 + v13 * v6);
      }

      else
      {
        sub_100018C68(v11, type metadata accessor for OwnedBeaconRecord);
      }

      v7 += v6;
      --v3;
    }

    while (v3);
    int64_t v3 = v41;
    uint64_t v2 = _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease();
  int64_t v15 = _swiftEmptyArrayStorage[2];
  if (v15)
  {
    uint64_t v16 = v0[12];
    uint64_t v45 = v0[11];
    uint64_t v47 = _swiftEmptyArrayStorage;
    uint64_t v17 = v0[6];
    sub_1000328D0(0, v15, 0);
    uint64_t v18 = (char *)_swiftEmptyArrayStorage
        + ((*(unsigned __int8 *)(v16 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    uint64_t v43 = *(void *)(v16 + 72);
    uint64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v19 = v0[13];
      uint64_t v20 = v0[8];
      uint64_t v21 = v0[5];
      sub_10001DC4C((uint64_t)v18, v19, type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v20, v19 + *(int *)(v45 + 20), v21);
      sub_100018C68(v19, type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_1000328D0(0, v2[2] + 1LL, 1);
        uint64_t v2 = v47;
      }

      unint64_t v23 = v2[2];
      unint64_t v22 = v2[3];
      if (v23 >= v22 >> 1)
      {
        sub_1000328D0(v22 > 1, v23 + 1, 1);
        uint64_t v2 = v47;
      }

      uint64_t v24 = v0[8];
      uint64_t v25 = v0[5];
      v2[2] = v23 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v17 + 32))( (unint64_t)v2 + ((*(unsigned __int8 *)(v17 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))
      + *(void *)(v17 + 72) * v23,
        v24,
        v25);
      uint64_t v47 = v2;
      v18 += v43;
      --v15;
    }

    while (v15);
    swift_release();
    int64_t v3 = v41;
  }

  else
  {
    swift_release();
  }

  v0[16] = v2;
  uint64_t v26 = _swiftEmptyArrayStorage;
  if (v3)
  {
    uint64_t v27 = v0[12];
    uint64_t v46 = v0[11];
    uint64_t v48 = _swiftEmptyArrayStorage;
    uint64_t v28 = v0[6];
    uint64_t v29 = v0[3];
    sub_1000328D0(0, v3, 0);
    uint64_t v30 = v29 + ((*(unsigned __int8 *)(v27 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
    uint64_t v31 = *(void *)(v27 + 72);
    uint64_t v26 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v32 = v0[13];
      uint64_t v33 = v0[7];
      uint64_t v34 = v0[5];
      sub_10001DC4C(v30, v32, type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v33, v32 + *(int *)(v46 + 20), v34);
      sub_100018C68(v32, type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0)
      {
        sub_1000328D0(0, v26[2] + 1LL, 1);
        uint64_t v26 = v48;
      }

      unint64_t v36 = v26[2];
      unint64_t v35 = v26[3];
      if (v36 >= v35 >> 1)
      {
        sub_1000328D0(v35 > 1, v36 + 1, 1);
        uint64_t v26 = v48;
      }

      uint64_t v37 = v0[7];
      uint64_t v38 = v0[5];
      v26[2] = v36 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v28 + 32))( (unint64_t)v26 + ((*(unsigned __int8 *)(v28 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))
      + *(void *)(v28 + 72) * v36,
        v37,
        v38);
      uint64_t v48 = v26;
      v30 += v31;
      --v3;
    }

    while (v3);
  }

  v0[17] = sub_1006F1060((uint64_t)v26);
  swift_bridgeObjectRelease();
  uint64_t v39 = (void *)swift_task_alloc(dword_10099CF8C);
  v0[18] = v39;
  *uint64_t v39 = v0;
  v39[1] = sub_10001B55C;
  return sub_1000195E4();
}

uint64_t sub_10001B55C(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 144);
  *(void *)(*v2 + 152) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = *(void *)(v4 + 32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_10001B6DC;
    uint64_t v8 = v6;
  }

  else
  {
    uint64_t v8 = *(void *)(v4 + 32);
    *(void *)(v4 + 160) = a1;
    uint64_t v7 = sub_10001B5E8;
  }

  return swift_task_switch(v7, v8, 0LL);
}

uint64_t sub_10001B5E8()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 80);
  uint64_t v11 = *(void *)(v0 + 64);
  uint64_t v12 = *(void *)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v7 = sub_10001CF64(*(void *)(v0 + 160), *(void *)(v0 + 136));
  swift_bridgeObjectRelease();
  *(void *)(v0 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v7;
  sub_100687EC0(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(v6);
  uint64_t v9 = sub_10001D778(v8, (uint64_t *)(v0 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void *))(v0 + 8))(v9);
}

uint64_t sub_10001B6DC()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 120));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001B754(uint64_t a1)
{
  v2[42] = a1;
  v2[43] = v1;
  uint64_t v3 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0LL);
  v2[44] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[45] = v4;
  v2[46] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v2[47] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[48] = v6;
  v2[49] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Response(0LL);
  v2[50] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[51] = v8;
  v2[52] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for ContinuousClock.Instant(0LL);
  v2[53] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[54] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[55] = swift_task_alloc(v11);
  v2[56] = swift_task_alloc(v11);
  v2[57] = swift_task_alloc(v11);
  uint64_t v12 = type metadata accessor for MetricsEndpoint(0LL);
  v2[58] = v12;
  v2[59] = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = (*(void *)(*(void *)(type metadata accessor for SearchpartyAccount(0LL) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[60] = swift_task_alloc(v13);
  v2[61] = swift_task_alloc(v13);
  uint64_t v14 = type metadata accessor for ContinuousClock(0LL);
  v2[62] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v2[63] = v15;
  unint64_t v16 = (*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[64] = swift_task_alloc(v16);
  v2[65] = swift_task_alloc(v16);
  return swift_task_switch(sub_10001B8D4, v1, 0LL);
}

uint64_t sub_10001B8D4()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 296, 0LL, 0LL);
  uint64_t result = sub_10001CEB4((uint64_t)&xmmword_1009BED80, v0 + 136);
  if (*(void *)(v0 + 160))
  {
    sub_100012EC0((__int128 *)(v0 + 136), v0 + 96);
    swift_release();
    sub_100012ED8((void *)(v0 + 96), *(void *)(v0 + 120));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099CA30 + dword_10099CA30);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099CA34);
    *(void *)(v0 + 528) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10001B9CC;
    return v4();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10001B9CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 528LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 344LL);
  *(void *)(*(void *)v1 + 536LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10001BA2C, v3, 0LL);
}

uint64_t sub_10001BA2C()
{
  uint64_t v1 = (void *)(v0 + 96);
  if (*(void *)(v0 + 536))
  {
    uint64_t v2 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    ContinuousClock.init()(v2);
    uint64_t v3 = (void *)swift_task_alloc(dword_1009A0E7C);
    *(void *)(v0 + 544) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10001BBA8;
    return sub_1000DF9D0(v0 + 16);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    unint64_t v5 = sub_1000157D0();
    uint64_t v6 = swift_allocError(&type metadata for DaemonError, v5, 0LL, 0LL);
    strcpy(v7, "AccountService");
    v7[15] = -18;
    swift_willThrow(v6);
    uint64_t v8 = *(void *)(v0 + 512);
    uint64_t v10 = *(void *)(v0 + 480);
    uint64_t v9 = *(void *)(v0 + 488);
    uint64_t v11 = *(void *)(v0 + 472);
    uint64_t v13 = *(void *)(v0 + 448);
    uint64_t v12 = *(void *)(v0 + 456);
    uint64_t v14 = *(void *)(v0 + 440);
    uint64_t v15 = *(void *)(v0 + 416);
    uint64_t v16 = *(void *)(v0 + 392);
    uint64_t v17 = *(void *)(v0 + 368);
    swift_task_dealloc(*(void *)(v0 + 520));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10001BBA8()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 544LL);
  uint64_t v3 = *(void **)v1;
  v3[69] = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_10001C868, v3[43], 0LL);
  }
  unint64_t v5 = (void *)swift_task_alloc(dword_1009A0E84);
  v3[70] = v5;
  void *v5 = v3;
  v5[1] = sub_10001BC3C;
  return sub_1000E0490(v3[61]);
}

uint64_t sub_10001BC3C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 560);
  *(void *)(*v1 + 568) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 344);
    sub_10001CEFC((void *)(v2 + 16));
    unint64_t v5 = sub_10001C954;
    uint64_t v6 = v4;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 344);
    unint64_t v5 = sub_10001BCB0;
  }

  return swift_task_switch(v5, v6, 0LL);
}

uint64_t sub_10001BCB0(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 568);
  uint64_t v4 = *(void **)(v1 + 480);
  uint64_t v3 = *(void *)(v1 + 488);
  unint64_t v5 = *(__int128 **)(v1 + 336);
  URLComponents.init()(a1);
  URLComponents.scheme.setter(0x7370747468LL, 0xE500000000000000LL);
  uint64_t v6 = *(void *)(v1 + 80);
  uint64_t v7 = *(void *)(v1 + 88);
  swift_bridgeObjectRetain(v7);
  URLComponents.host.setter(v6, v7);
  sub_10001CEFC((void *)(v1 + 16));
  URLComponents.path.setter(0xD00000000000001FLL, 0x8000000100850EB0LL);
  sub_10001DC4C(v3, (uint64_t)v4, type metadata accessor for SearchpartyAccount);
  uint64_t v9 = v4[2];
  uint64_t v8 = v4[3];
  uint64_t v11 = v4[4];
  uint64_t v10 = v4[5];
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  sub_100018C68((uint64_t)v4, type metadata accessor for SearchpartyAccount);
  uint64_t v12 = sub_10049FF7C(v5);
  *(void *)(v1 + 576) = v12;
  *(void *)(v1 + 584) = v13;
  if (v2)
  {
    uint64_t v14 = *(void *)(v1 + 520);
    uint64_t v15 = *(void *)(v1 + 496);
    uint64_t v16 = *(void *)(v1 + 504);
    uint64_t v17 = *(void *)(v1 + 488);
    uint64_t v18 = *(void *)(v1 + 472);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    sub_100018C68(v18, type metadata accessor for MetricsEndpoint);
    sub_100018C68(v17, type metadata accessor for SearchpartyAccount);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
    uint64_t v19 = *(void *)(v1 + 512);
    uint64_t v21 = *(void *)(v1 + 480);
    uint64_t v20 = *(void *)(v1 + 488);
    uint64_t v22 = *(void *)(v1 + 472);
    uint64_t v24 = *(void *)(v1 + 448);
    uint64_t v23 = *(void *)(v1 + 456);
    uint64_t v25 = *(void *)(v1 + 440);
    uint64_t v26 = *(void *)(v1 + 416);
    uint64_t v37 = *(void *)(v1 + 392);
    uint64_t v39 = *(void *)(v1 + 368);
    swift_task_dealloc(*(void *)(v1 + 520));
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v37);
    swift_task_dealloc(v39);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

  else
  {
    uint64_t v28 = v12;
    unint64_t v29 = v13;
    uint64_t v35 = v9;
    uint64_t v30 = *(void *)(v1 + 464);
    uint64_t v34 = *(void *)(v1 + 472);
    type metadata accessor for ServerInteractionController(0LL);
    uint64_t v38 = ServerInteractionController.__allocating_init(bundleIdentifier:)(0xD00000000000001DLL, 0x80000001008507F0LL);
    *(void *)(v1 + 592) = v38;
    ContinuousClock.now.getter(v38);
    *(void *)(v1 + 200) = v30;
    *(void *)(v1 + 208) = sub_100015C48( &qword_10099CF58,  255LL,  type metadata accessor for MetricsEndpoint,  (uint64_t)&unk_10081039C);
    uint64_t v31 = sub_10000A7C8((void *)(v1 + 176));
    sub_10001DC4C(v34, (uint64_t)v31, type metadata accessor for MetricsEndpoint);
    *(void *)(v1 + 240) = &type metadata for MetricsRequest;
    *(void *)(v1 + 248) = sub_10001DAC4();
    *(void *)(v1 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v28;
    *(void *)(v1 + 224) = v29;
    *(void *)(v1 + 280) = &type metadata for SearchpartyCredential;
    *(void *)(v1 + 288) = sub_10001DB08();
    uint64_t v32 = (void *)swift_allocObject(&unk_100938E80, 48LL, 7LL);
    *(void *)(v1 + 256) = v32;
    v32[2] = v35;
    v32[3] = v8;
    v32[4] = v11;
    v32[5] = v10;
    sub_100018BE4(v28, v29);
    *(void *)(v1 + 600) = v33;
    *uint64_t v33 = v1;
    v33[1] = sub_10001C00C;
    return ((uint64_t (*)(void, uint64_t, uint64_t, uint64_t))v36)( *(void *)(v1 + 416),  v1 + 176,  v1 + 216,  v1 + 256);
  }

uint64_t sub_10001C00C()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 600LL);
  *(void *)(*(void *)v1 + 608LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = v2[43];
    unint64_t v5 = sub_10001CA40;
  }

  else
  {
    uint64_t v6 = (uint64_t)(v2 + 32);
    uint64_t v7 = v2 + 27;
    uint64_t v8 = v2 + 22;
    uint64_t v9 = v2[43];
    sub_100015794(v6, &qword_10099CF70);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v7);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v8);
    unint64_t v5 = sub_10001C0A8;
    uint64_t v4 = v9;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_10001C0A8()
{
  if (qword_10099B050 != -1) {
    swift_once(&qword_10099B050, sub_100018CA4);
  }
  uint64_t v113 = v0[65];
  uint64_t v1 = v0[63];
  uint64_t v111 = v0[64];
  uint64_t v2 = v0[62];
  uint64_t v4 = v0[56];
  uint64_t v3 = v0[57];
  uint64_t v6 = v0[53];
  uint64_t v5 = v0[54];
  uint64_t v7 = v0[48];
  uint64_t v8 = v0[49];
  uint64_t v9 = v0[47];
  uint64_t v10 = sub_10000A720(v9, (uint64_t)qword_100A29EA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v8, v10, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v3, v6);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v111, v113, v2);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter(v12);
  BOOL v14 = os_log_type_enabled(v12, v13);
  uint64_t v16 = v0[63];
  uint64_t v15 = v0[64];
  uint64_t v17 = v0[62];
  uint64_t v18 = v0[56];
  if (v14)
  {
    uint64_t v19 = v0[55];
    uint64_t v20 = v0[53];
    uint64_t v109 = v0[49];
    uint64_t v21 = v0[46];
    uint64_t v103 = v0[48];
    uint64_t v106 = v0[47];
    uint64_t v79 = v0[45];
    uint64_t v84 = v0[44];
    uint64_t v88 = v0[54];
    os_log_type_t type = v13;
    uint64_t v114 = v0[62];
    uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v95 = swift_slowAlloc(32LL, -1LL);
    uint64_t v117 = v95;
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v23 = ContinuousClock.now.getter(v95);
    static Duration.UnitsFormatStyle.Unit.milliseconds.getter(v23);
    uint64_t v24 = sub_100015C48( &qword_1009AE520,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant,  (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
    uint64_t v25 = static Duration.description<A>(_:_:units:)(v18, v19, v21, v20, v24);
    uint64_t v76 = v15;
    unint64_t v27 = v26;
    (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v21, v84);
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v88 + 8);
    v28(v19, v20);
    v0[41] = sub_1003F11D4(v25, v27, &v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 41, v0 + 42, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease();
    unsigned __int8 v112 = v28;
    v28(v18, v20);
    uint64_t v29 = v114;
    uint64_t v115 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v115(v76, v29);
    _os_log_impl((void *)&_mh_execute_header, v12, type, "metrics duration: %s", v22, 0xCu);
    swift_arrayDestroy(v95, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v95, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);

    uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v103 + 8))(v109, v106);
  }

  else
  {
    uint64_t v32 = v0[48];
    uint64_t v31 = v0[49];
    uint64_t v33 = v0[47];
    unsigned __int8 v112 = *(void (**)(uint64_t, uint64_t))(v0[54] + 8LL);
    v112(v0[56], v0[53]);
    uint64_t v115 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v115(v15, v17);

    uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
  }

  uint64_t v34 = (void *)Response.response.getter(v30);
  id v35 = [v34 statusCode];

  if (v35 == (id)200)
  {
    uint64_t v36 = v0[76];
    uint64_t v37 = type metadata accessor for JSONDecoder(0LL);
    uint64_t v38 = swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
    JSONDecoder.init()(v38);
    uint64_t v39 = Response.body.getter();
    unint64_t v41 = v40;
    unint64_t v42 = sub_10001DB78();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)( &type metadata for MetricsResponse,  v39,  v41,  &type metadata for MetricsResponse,  v42);
    uint64_t v43 = v0[72];
    unint64_t v104 = v0[73];
    uint64_t v107 = v0[65];
    if (!v36)
    {
      uint64_t v83 = v0[62];
      uint64_t v87 = v0[64];
      uint64_t v78 = v0[59];
      uint64_t v81 = v0[61];
      uint64_t v91 = v0[60];
      uint64_t v94 = v0[56];
      uint64_t v71 = v0[52];
      uint64_t v74 = v0[53];
      uint64_t v75 = v0[57];
      uint64_t v72 = v0[50];
      uint64_t v73 = v0[51];
      uint64_t v110 = v0[49];
      uint64_t v98 = v0[55];
      *(void *)typec = v0[46];
      sub_100016F9C(v39, v41);
      swift_release();
      swift_release();
      swift_release();
      sub_1000182F0(v43, v104);
      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v71, v72);
      v112(v75, v74);
      sub_100018C68(v78, type metadata accessor for MetricsEndpoint);
      sub_100018C68(v81, type metadata accessor for SearchpartyAccount);
      v115(v107, v83);
      swift_task_dealloc(v107);
      swift_task_dealloc(v87);
      swift_task_dealloc(v81);
      swift_task_dealloc(v91);
      swift_task_dealloc(v78);
      swift_task_dealloc(v75);
      swift_task_dealloc(v94);
      swift_task_dealloc(v98);
      swift_task_dealloc(v71);
      swift_task_dealloc(v110);
      swift_task_dealloc(*(void *)typec);
      uint64_t v69 = (uint64_t (*)(void))v0[1];
      return v69();
    }

    uint64_t v96 = v0[61];
    *(void *)typea = v0[62];
    uint64_t v89 = v0[57];
    uint64_t v92 = v0[59];
    uint64_t v85 = v0[53];
    uint64_t v44 = v0[51];
    uint64_t v45 = v0[52];
    uint64_t v46 = v0[50];
    sub_100016F9C(v39, v41);
    swift_release();
    swift_release();
    swift_release();
    sub_1000182F0(v43, v104);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v45, v46);
    v112(v89, v85);
    sub_100018C68(v92, type metadata accessor for MetricsEndpoint);
    sub_100018C68(v96, type metadata accessor for SearchpartyAccount);
    uint64_t v47 = v107;
    uint64_t v48 = *(void *)typea;
  }

  else
  {
    uint64_t v82 = v0[72];
    unint64_t v86 = v0[73];
    uint64_t v105 = v0[62];
    uint64_t v108 = v0[65];
    uint64_t v97 = v0[59];
    uint64_t typeb = v0[61];
    uint64_t v49 = v0[52];
    uint64_t v90 = v0[53];
    uint64_t v93 = v0[57];
    uint64_t v77 = v0[51];
    uint64_t v80 = v0[50];
    uint64_t v50 = type metadata accessor for GenericError(0LL);
    uint64_t v51 = sub_100015C48( (unint64_t *)&qword_10099CF78,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for GenericError,  (uint64_t)&protocol conformance descriptor for GenericError);
    swift_allocError(v50, v51, 0LL, 0LL);
    __int128 v53 = v52;
    uint64_t v117 = 0LL;
    unint64_t v118 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(21LL);
    uint64_t v54 = swift_bridgeObjectRelease();
    uint64_t v117 = 0xD000000000000013LL;
    unint64_t v118 = 0x8000000100850ED0LL;
    Swift::String v55 = (void *)Response.response.getter(v54);
    id v56 = [v55 statusCode];

    v0[40] = v56;
    v57._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    String.append(_:)(v57);
    swift_bridgeObjectRelease();
    unint64_t v58 = v118;
    *__int128 v53 = v117;
    v53[1] = v58;
    uint64_t v59 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v50 - 8) + 104LL))( v53,  enum case for GenericError.error(_:),  v50);
    swift_willThrow(v59);
    swift_release();
    swift_release();
    sub_1000182F0(v82, v86);
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v49, v80);
    v112(v93, v90);
    sub_100018C68(v97, type metadata accessor for MetricsEndpoint);
    sub_100018C68(typeb, type metadata accessor for SearchpartyAccount);
    uint64_t v48 = v105;
    uint64_t v47 = v108;
  }

  v115(v47, v48);
  uint64_t v60 = v0[64];
  uint64_t v62 = v0[60];
  uint64_t v61 = v0[61];
  uint64_t v63 = v0[59];
  uint64_t v65 = v0[56];
  uint64_t v64 = v0[57];
  uint64_t v66 = v0[55];
  uint64_t v67 = v0[52];
  uint64_t v68 = v0[49];
  uint64_t v116 = v0[46];
  swift_task_dealloc(v0[65]);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v116);
  uint64_t v69 = (uint64_t (*)(void))v0[1];
  return v69();
}

uint64_t sub_10001C868()
{
  uint64_t v1 = *(void *)(v0 + 520);
  uint64_t v2 = *(void *)(v0 + 496);
  uint64_t v3 = *(void *)(v0 + 504);
  swift_release(*(void *)(v0 + 536));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  uint64_t v4 = *(void *)(v0 + 512);
  uint64_t v6 = *(void *)(v0 + 480);
  uint64_t v5 = *(void *)(v0 + 488);
  uint64_t v7 = *(void *)(v0 + 472);
  uint64_t v9 = *(void *)(v0 + 448);
  uint64_t v8 = *(void *)(v0 + 456);
  uint64_t v10 = *(void *)(v0 + 440);
  uint64_t v11 = *(void *)(v0 + 416);
  uint64_t v12 = *(void *)(v0 + 392);
  uint64_t v14 = *(void *)(v0 + 368);
  swift_task_dealloc(*(void *)(v0 + 520));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001C954()
{
  uint64_t v1 = *(void *)(v0 + 520);
  uint64_t v2 = *(void *)(v0 + 496);
  uint64_t v3 = *(void *)(v0 + 504);
  swift_release(*(void *)(v0 + 536));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  uint64_t v4 = *(void *)(v0 + 512);
  uint64_t v6 = *(void *)(v0 + 480);
  uint64_t v5 = *(void *)(v0 + 488);
  uint64_t v7 = *(void *)(v0 + 472);
  uint64_t v9 = *(void *)(v0 + 448);
  uint64_t v8 = *(void *)(v0 + 456);
  uint64_t v10 = *(void *)(v0 + 440);
  uint64_t v11 = *(void *)(v0 + 416);
  uint64_t v12 = *(void *)(v0 + 392);
  uint64_t v14 = *(void *)(v0 + 368);
  swift_task_dealloc(*(void *)(v0 + 520));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001CA40()
{
  unint64_t v1 = *(void *)(v0 + 584);
  uint64_t v2 = *(void *)(v0 + 576);
  uint64_t v20 = *(void *)(v0 + 520);
  uint64_t v3 = *(void *)(v0 + 504);
  uint64_t v19 = *(void *)(v0 + 496);
  uint64_t v4 = *(void *)(v0 + 488);
  uint64_t v5 = *(void *)(v0 + 472);
  uint64_t v6 = *(void *)(v0 + 456);
  uint64_t v7 = *(void *)(v0 + 424);
  uint64_t v8 = *(void *)(v0 + 432);
  swift_release();
  swift_release();
  sub_1000182F0(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  sub_100018C68(v5, type metadata accessor for MetricsEndpoint);
  sub_100018C68(v4, type metadata accessor for SearchpartyAccount);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v20, v19);
  sub_100015794(v0 + 256, &qword_10099CF70);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 216));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 176));
  uint64_t v9 = *(void *)(v0 + 512);
  uint64_t v11 = *(void *)(v0 + 480);
  uint64_t v10 = *(void *)(v0 + 488);
  uint64_t v12 = *(void *)(v0 + 472);
  uint64_t v14 = *(void *)(v0 + 448);
  uint64_t v13 = *(void *)(v0 + 456);
  uint64_t v15 = *(void *)(v0 + 440);
  uint64_t v16 = *(void *)(v0 + 416);
  uint64_t v17 = *(void *)(v0 + 392);
  uint64_t v21 = *(void *)(v0 + 368);
  swift_task_dealloc(*(void *)(v0 + 520));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001CBC0()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for FMIPService()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd11FMIPService);
}

uint64_t sub_10001CC04(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100015C48( &qword_10099CF50,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for FMIPService,  (uint64_t)&unk_1007E44F8);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10001CC40()
{
  return 1LL;
}

Swift::Int sub_10001CC48(uint64_t a1, uint64_t a2)
{
  return sub_10001CCE8(a1, a2, 0xD000000000000036LL, 0x800000010084D8E0LL);
}

uint64_t sub_10001CC64(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000036LL, 0x800000010084D8E0LL);
}

Swift::Int sub_10001CC80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001CD74(a1, a2, a3, 0xD000000000000036LL, 0x800000010084D8E0LL);
}

uint64_t sub_10001CC9C@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1009329C0;
  return sub_10001CDC8(v2, a1, a2);
}

void sub_10001CCA8(void *a1@<X8>)
{
  *a1 = 0xD000000000000036LL;
  a1[1] = 0x800000010084D8E0LL;
}

Swift::Int sub_10001CCC8(uint64_t a1, uint64_t a2)
{
  return sub_10001CCE8(a1, a2, 0x6F43656369766564LL, 0xEB00000000746E75LL);
}

Swift::Int sub_10001CCE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Hasher._finalize()();
}

uint64_t sub_10001CD34(uint64_t a1)
{
  return String.hash(into:)(a1, 0x6F43656369766564LL, 0xEB00000000746E75LL);
}

Swift::Int sub_10001CD54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001CD74(a1, a2, a3, 0x6F43656369766564LL, 0xEB00000000746E75LL);
}

Swift::Int sub_10001CD74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Hasher._finalize()();
}

uint64_t sub_10001CDBC@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1009329F8;
  return sub_10001CDC8(v2, a1, a2);
}

uint64_t sub_10001CDC8@<X0>(Swift::OpaquePointer cases@<0:X3>, uint64_t *a2@<X0>, BOOL *a3@<X8>)
{
  v4._countAndFlagsBits = *a2;
  uint64_t v5 = (void *)a2[1];
  v4._object = v5;
  Swift::Int v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease(v5);
  *a3 = v6 != 0;
  return result;
}

void sub_10001CE14(void *a1@<X8>)
{
  *a1 = 0x6F43656369766564LL;
  a1[1] = 0xEB00000000746E75LL;
}

uint64_t sub_10001CE38()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A29EB8);
  sub_10000A720(v0, (uint64_t)qword_100A29EB8);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x7672655350494D46LL,  0xEB00000000656369LL);
}

uint64_t sub_10001CEB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099FA80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void *sub_10001CEFC(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[7];
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_10001CF64(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  char v4 = *(_BYTE *)(a2 + 32);
  unsigned int v5 = v4 & 0x3F;
  unint64_t v6 = (1LL << v4) + 63;
  uint64_t v7 = v6 >> 6;
  size_t v8 = 8 * (v6 >> 6);
  if (v5 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v6 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0LL), v8);
    uint64_t v9 = sub_10001D0E4((unint64_t *)((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v7, v3, a2);
    swift_release();
  }

  else
  {
    uint64_t v10 = (void *)swift_slowAlloc(v8, -1LL);
    bzero(v10, v8);
    uint64_t v9 = sub_10001D0E4((unint64_t *)v10, v7, v3, a2);
    swift_release();
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  return v9;
}

uint64_t sub_10001D0E4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = a2;
  unint64_t v42 = a1;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v38 - v12;
  uint64_t v14 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = *(void *)(a3 + 16);
  uint64_t v40 = a3;
  if (v46)
  {
    uint64_t v38 = v4;
    uint64_t v45 = a3 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v50 = *(void *)(v8 + 72);
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16);
    uint64_t v48 = a4 + 56;
    uint64_t v49 = v17;
    __n128 v18 = swift_bridgeObjectRetain(a3);
    uint64_t v41 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v44 = v16;
    while (1)
    {
      v49(v16, v45 + v50 * v19, v7, v18);
      uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v8 + 56);
      ((void (*)(char *, void, uint64_t, uint64_t))v43)(v16, 0LL, 1LL, v7);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v16, 1LL, v7) == 1)
      {
        uint64_t v36 = v39;
        uint64_t v37 = v41;
        goto LABEL_20;
      }

      uint64_t v47 = v19;
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v16, v7);
      uint64_t v20 = *(void *)(a4 + 40);
      uint64_t v21 = sub_100015C48( &qword_1009A58F0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v22 = dispatch thunk of Hashable._rawHashValue(seed:)(v20, v7, v21);
      uint64_t v23 = a4;
      uint64_t v24 = -1LL << *(_BYTE *)(a4 + 32);
      unint64_t v25 = v22 & ~v24;
      if (((*(void *)(v48 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v25) & 1) == 0) {
        break;
      }
      uint64_t v26 = ~v24;
      while (1)
      {
        ((void (*)(char *, unint64_t, uint64_t))v49)(v11, *(void *)(v23 + 48) + v25 * v50, v7);
        uint64_t v27 = sub_100015C48( (unint64_t *)&qword_1009A0A40,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        char v28 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v13, v7, v27);
        uint64_t v29 = *(void (**)(char *, uint64_t))(v8 + 8);
        v29(v11, v7);
        if ((v28 & 1) != 0) {
          break;
        }
        unint64_t v25 = (v25 + 1) & v26;
        if (((*(void *)(v48 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v25) & 1) == 0) {
          goto LABEL_10;
        }
      }

      uint64_t result = ((uint64_t (*)(char *, uint64_t))v29)(v13, v7);
      uint64_t v31 = (v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL;
      uint64_t v32 = *(unint64_t *)((char *)v42 + v31);
      *(unint64_t *)((char *)v42 + v31) = v32 | (1LL << v25);
      if ((v32 & (1LL << v25)) != 0) {
        goto LABEL_12;
      }
      BOOL v33 = __OFADD__(v41++, 1LL);
      uint64_t v16 = v44;
      if (v33)
      {
        __break(1u);
        return result;
      }

      a4 = v23;
LABEL_13:
      uint64_t v19 = v47 + 1;
      if (v47 + 1 == v46)
      {
        uint64_t v36 = v39;
        uint64_t v37 = v41;
        v43(v16, 1LL, 1LL, v7, v18);
        goto LABEL_20;
      }
    }

    uint64_t v29 = *(void (**)(char *, uint64_t))(v8 + 8);
LABEL_10:
    v29(v13, v7);
LABEL_12:
    a4 = v23;
    uint64_t v16 = v44;
    goto LABEL_13;
  }

  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v8 + 56);
  __n128 v35 = swift_bridgeObjectRetain(a3);
  uint64_t v37 = 0LL;
  uint64_t v36 = v39;
  v34(v16, 1LL, 1LL, v7, v35);
LABEL_20:
  swift_bridgeObjectRelease();
  swift_retain();
  return sub_100545C40(v42, v36, v37, a4);
}

void *sub_10001D468(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v5 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v33 = (uint64_t)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v38 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = *(void *)(a1 + 16);
  if (!v32) {
    return _swiftEmptyArrayStorage;
  }
  v28[0] = a1;
  v28[1] = v2;
  unint64_t v30 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v31 = a1 + v30;
  uint64_t v35 = *(void *)(v5 + 72);
  uint64_t v39 = a2 + 56;
  swift_bridgeObjectRetain(a1);
  uint64_t v10 = 0LL;
  uint64_t v34 = _swiftEmptyArrayStorage;
  uint64_t v11 = a2;
  do
  {
    uint64_t v36 = v10;
    uint64_t v37 = v31 + v35 * v10;
    if (*(void *)(a2 + 16)
      && (uint64_t v12 = v37 + *(int *)(v29 + 20),
          uint64_t v13 = *(void *)(a2 + 40),
          v14 = sub_100015C48( &qword_1009A58F0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID),  uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v7, v14),  v16 = -1LL << *(_BYTE *)(v11 + 32),  v17 = v15 & ~v16,  ((*(void *)(v39 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) != 0))
    {
      uint64_t v18 = v11;
      uint64_t v19 = ~v16;
      uint64_t v20 = *(void *)(v38 + 72);
      uint64_t v21 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
      while (1)
      {
        v21(v9, *(void *)(v18 + 48) + v20 * v17, v7);
        uint64_t v22 = sub_100015C48( (unint64_t *)&qword_1009A0A40,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        char v23 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v12, v7, v22);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v7);
        if ((v23 & 1) != 0) {
          break;
        }
        unint64_t v17 = (v17 + 1) & v19;
        uint64_t v18 = v11;
        if (((*(void *)(v39 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) == 0) {
          goto LABEL_10;
        }
      }
    }

    else
    {
LABEL_10:
      sub_10001DC4C(v37, v33, type metadata accessor for OwnedBeaconRecord);
      unint64_t v24 = (unint64_t)v34;
      if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0) {
        unint64_t v24 = sub_1004C46DC(0, *(void *)(v24 + 16) + 1LL, 1, v24);
      }
      unint64_t v26 = *(void *)(v24 + 16);
      unint64_t v25 = *(void *)(v24 + 24);
      if (v26 >= v25 >> 1) {
        unint64_t v24 = sub_1004C46DC(v25 > 1, v26 + 1, 1, v24);
      }
      *(void *)(v24 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v26 + 1;
      uint64_t v34 = (void *)v24;
      sub_10001DBBC(v33, v24 + v30 + v26 * v35);
    }

    uint64_t v10 = v36 + 1;
    a2 = v11;
  }

  while (v36 + 1 != v32);
  swift_bridgeObjectRelease();
  return v34;
}

void *sub_10001D778(uint64_t a1, uint64_t *a2)
{
  uint64_t v37 = a2;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v41 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v40 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v6 = __chkstk_darwin(v34);
  uint64_t v32 = (uint64_t)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v30 - v9;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v43 = _swiftEmptyArrayStorage;
  uint64_t v36 = *(void *)(a1 + 16);
  if (v36)
  {
    v30[1] = v2;
    uint64_t v12 = 0LL;
    unint64_t v13 = (*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v38 = *(void *)(v8 + 72);
    unint64_t v31 = v13;
    uint64_t v35 = a1 + v13;
    uint64_t v33 = (char *)v30 - v9;
    uint64_t v14 = v40;
    while (1)
    {
      sub_10001DC4C(v35 + v38 * v12, (uint64_t)v10, type metadata accessor for OwnedBeaconRecord);
      uint64_t v15 = *v37;
      if (*(void *)(*v37 + 16))
      {
        uint64_t v39 = v12;
        uint64_t v16 = &v10[*(int *)(v34 + 20)];
        uint64_t v17 = *(void *)(v15 + 40);
        uint64_t v18 = sub_100015C48( &qword_1009A58F0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        swift_bridgeObjectRetain(v15);
        unint64_t v42 = v16;
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)(v17, v4, v18);
        uint64_t v20 = -1LL << *(_BYTE *)(v15 + 32);
        unint64_t v21 = v19 & ~v20;
        if (((*(void *)(v15 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) != 0)
        {
          uint64_t v22 = ~v20;
          uint64_t v23 = *(void *)(v41 + 72);
          unint64_t v24 = *(void (**)(char *, unint64_t, uint64_t))(v41 + 16);
          while (1)
          {
            v24(v14, *(void *)(v15 + 48) + v23 * v21, v4);
            uint64_t v25 = sub_100015C48( (unint64_t *)&qword_1009A0A40,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            char v26 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v42, v4, v25);
            (*(void (**)(char *, uint64_t))(v41 + 8))(v14, v4);
            if ((v26 & 1) != 0) {
              break;
            }
            unint64_t v21 = (v21 + 1) & v22;
            if (((*(void *)(v15 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) == 0) {
              goto LABEL_3;
            }
          }

          swift_bridgeObjectRelease();
          uint64_t v10 = v33;
          sub_10001DBBC((uint64_t)v33, v32);
          uint64_t v27 = v43;
          if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
          {
            sub_1000328A4(0, v27[2] + 1LL, 1);
            uint64_t v27 = v43;
          }

          unint64_t v29 = v27[2];
          unint64_t v28 = v27[3];
          if (v29 >= v28 >> 1)
          {
            sub_1000328A4(v28 > 1, v29 + 1, 1);
            uint64_t v27 = v43;
          }

          v27[2] = v29 + 1;
          sub_10001DBBC(v32, (uint64_t)v27 + v31 + v29 * v38);
          uint64_t v12 = v39;
          goto LABEL_5;
        }

LABEL_3:
        swift_bridgeObjectRelease();
        uint64_t v10 = v33;
        uint64_t v12 = v39;
      }

      sub_100018C68((uint64_t)v10, type metadata accessor for OwnedBeaconRecord);
LABEL_5:
      if (++v12 == v36) {
        return v43;
      }
    }
  }

  return result;
}

  uint64_t v8 = __clz(__rbit64(v4));
  uint64_t v9 = v8 + v7;
  if (v9 == v6)
  {
LABEL_24:
    swift_bridgeObjectRelease();
    uint64_t v17 = sub_100044DDC;
    return swift_task_switch(v17, 0LL, 0LL);
  }

  if (v9 < 0 || v9 >= v6)
  {
    __break(1u);
    goto LABEL_27;
  }

  if (((*(void *)(v3 + 64 + (((unint64_t)v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  uint64_t v2 = *(void *)(*(void *)(v3 + 56) + 8 * v9);
  swift_bridgeObjectRetain(v2);
  uint64_t result = swift_bridgeObjectRelease();
  if (!((unint64_t)v2 >> 62))
  {
    if (*(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }

  uint64_t v4 = 0LL;
  while (1)
  {
    if ((v2 & 0xC000000000000001LL) != 0)
    {
      uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v2);
    }

    else
    {
      uint64_t v5 = *(void *)(v2 + 8 * v4 + 32);
      swift_retain();
    }

    uint64_t v6 = *(void **)(v5 + qword_1009A4BD0);
    [v6 lock];
    uint64_t v7 = *(unsigned __int8 *)(v5 + qword_1009A4BD8);
    [v6 unlock];
    if (v7 == 1) {
      break;
    }
    swift_release();
    uint64_t v8 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      if (v2 < 0) {
        uint64_t v61 = v2;
      }
      else {
        uint64_t v61 = v2 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v2);
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v61);
      if (!v3) {
        goto LABEL_10;
      }
      goto LABEL_3;
    }

    ++v4;
    if (v8 == v3) {
      goto LABEL_10;
    }
  }

  if (qword_10099B198 != -1) {
    swift_once(&qword_10099B198, sub_1001B4240);
  }
  uint64_t v19 = type metadata accessor for Logger(0LL);
  uint64_t v20 = sub_10000A720(v19, (uint64_t)qword_100A2A2E0);
  unint64_t v21 = swift_retain_n(v5, 2LL);
  uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  uint64_t v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    unint64_t v24 = v1;
    uint64_t v25 = swift_slowAlloc(12LL, -1LL);
    char v26 = swift_slowAlloc(32LL, -1LL);
    uint64_t v68 = v26;
    *(_DWORD *)uint64_t v25 = 136315138;
    uint64_t v20 = v5 + qword_100A2A300;
    uint64_t v27 = type metadata accessor for UUID(0LL);
    unint64_t v28 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    unint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter(v27, v28);
    *(void *)(v25 + 4) = sub_1003F11D4(v29, v30, &v68);
    swift_release_n(v5, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Removing controller with %s", (uint8_t *)v25, 0xCu);
    swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    unint64_t v31 = v25;
    unint64_t v1 = v24;
    swift_slowDealloc(v31, -1LL, -1LL);
    swift_bridgeObjectRelease();
    swift_release();
  }

  else
  {
    swift_bridgeObjectRelease();

    swift_release_n(v5, 3LL);
  }

  uint64_t v32 = v4 + 1;
  uint64_t v33 = &qword_1009A4000;
  if (__OFADD__(v4, 1LL))
  {
    __break(1u);
LABEL_103:
    if (v20 < 0) {
      uint64_t v65 = v20;
    }
    else {
      uint64_t v65 = v20 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v20);
    uint64_t v66 = _CocoaArrayWrapper.endIndex.getter(v65);
    swift_bridgeObjectRelease();
    if (v32 != v66) {
      goto LABEL_28;
    }
    goto LABEL_12;
  }

  uint64_t v20 = *v1;
  if (v32 != *(void *)((v20 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
LABEL_28:
    uint64_t v34 = v4 + 5;
    uint64_t v67 = v1;
    while (1)
    {
      uint64_t v35 = v34 - 4;
      uint64_t v36 = *v1;
      if ((*v1 & 0xC000000000000001LL) != 0)
      {
        uint64_t v37 = specialized _ArrayBuffer._getElementSlowPath(_:)(v34 - 4, v36);
      }

      else
      {
        if ((v35 & 0x8000000000000000LL) != 0) {
          goto LABEL_73;
        }
        if (v35 >= *(void *)((v36 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
          goto LABEL_74;
        }
        uint64_t v37 = *(void *)(v36 + 8 * v34);
        swift_retain();
      }

      uint64_t v38 = *(void **)(v37 + v33[378]);
      [v38 lock];
      uint64_t v39 = *(unsigned __int8 *)(v37 + qword_1009A4BD8);
      [v38 unlock];
      if (v39 != 1) {
        break;
      }
      uint64_t v40 = swift_retain_n(v37, 2LL);
      uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
      unint64_t v42 = static os_log_type_t.default.getter(v41);
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = swift_slowAlloc(12LL, -1LL);
        uint64_t v44 = swift_slowAlloc(32LL, -1LL);
        uint64_t v68 = v44;
        *(_DWORD *)uint64_t v43 = 136315138;
        uint64_t v45 = type metadata accessor for UUID(0LL);
        uint64_t v46 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter(v45, v46);
        *(void *)(v43 + 4) = sub_1003F11D4(v47, v48, &v68);
        swift_release_n(v37, 2LL);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Removing controller with %s", (uint8_t *)v43, 0xCu);
        swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v44, -1LL, -1LL);
        swift_slowDealloc(v43, -1LL, -1LL);
        swift_release();
      }

      else
      {

        swift_release_n(v37, 3LL);
      }

      unint64_t v1 = v67;
      uint64_t v33 = &qword_1009A4000;
LABEL_60:
      uint64_t v2 = v34 - 3;
      if (__OFADD__(v35, 1LL)) {
        goto LABEL_75;
      }
      unint64_t v58 = *v1;
      if ((unint64_t)*v1 >> 62)
      {
        if (v58 < 0) {
          uint64_t v60 = *v1;
        }
        else {
          uint64_t v60 = v58 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(*v1);
        uint64_t v59 = _CocoaArrayWrapper.endIndex.getter(v60);
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v59 = *(void *)((v58 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }

      ++v34;
      if (v2 == v59) {
        goto LABEL_12;
      }
    }

    swift_release();
    if (v35 == v4)
    {
LABEL_55:
      if (__OFADD__(v4++, 1LL)) {
        goto LABEL_76;
      }
      goto LABEL_60;
    }

    uint64_t v49 = *v1;
    if ((*v1 & 0xC000000000000001LL) != 0)
    {
      uint64_t v50 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, *v1);
      uint64_t v49 = *v1;
      if ((*v1 & 0xC000000000000001LL) == 0)
      {
LABEL_41:
        if ((v35 & 0x8000000000000000LL) != 0) {
          goto LABEL_79;
        }
        if (v35 >= *(void *)((v49 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
          goto LABEL_80;
        }
        uint64_t v51 = *(void *)(v49 + 8 * v34);
        swift_retain();
        goto LABEL_44;
      }
    }

    else
    {
      if (v4 < 0) {
        goto LABEL_77;
      }
      uint64_t v50 = *(void *)(v49 + 8 * v4 + 32);
      swift_retain();
      if ((v49 & 0xC000000000000001LL) == 0) {
        goto LABEL_41;
      }
    }

    uint64_t v51 = specialized _ArrayBuffer._getElementSlowPath(_:)(v34 - 4, v49);
    uint64_t v49 = *v1;
LABEL_44:
    isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v49);
    *unint64_t v1 = v49;
    if (!isUniquelyReferenced_nonNull_bridgeObject || v49 < 0 || (v49 & 0x4000000000000000LL) != 0)
    {
      uint64_t v49 = sub_10059965C(v49);
      *unint64_t v1 = v49;
    }

    *(void *)((v49 & 0xFFFFFFFFFFFFFF8LL) + 8 * v4 + 0x20) = v51;
    __int128 v53 = swift_release();
    specialized Array._endMutation()(v53);
    uint64_t v54 = *v1;
    Swift::String v55 = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
    *unint64_t v1 = v54;
    if (!v55 || v54 < 0 || (v54 & 0x4000000000000000LL) != 0)
    {
      uint64_t v54 = sub_10059965C(v54);
      *unint64_t v1 = v54;
    }

    if ((v35 & 0x8000000000000000LL) != 0) {
      goto LABEL_81;
    }
    if (v35 >= *(void *)((v54 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_82;
    }
    *(void *)((v54 & 0xFFFFFFFFFFFFFF8LL) + 8 * v34) = v50;
    id v56 = swift_release();
    specialized Array._endMutation()(v56);
    goto LABEL_55;
  }

      uint64_t v6 = v66 + 1;
      swift_bridgeObjectRelease();
      uint64_t v5 = v63;
    }

    while (v66 + 1 != v64);
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = (os_log_s *)_swiftEmptyDictionarySingleton;
  }

  swift_bridgeObjectRetain(v7);
  uint64_t v4 = (unint64_t)sub_1002FF0A8(v38);
  swift_bridgeObjectRelease();
  uint64_t v39 = swift_retain_n(v4, 2LL);
  uint64_t v0 = (os_log_s *)Logger.logObject.getter(v39);
  LOBYTE(v40) = static os_log_type_t.default.getter(v0);
  if (!os_log_type_enabled(v0, (os_log_type_t)v40))
  {
    swift_release_n(v4, 2LL);
    goto LABEL_40;
  }

  uint64_t v3 = v1 + 80;
  uint64_t v2 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  *(_DWORD *)uint64_t v2 = 134217984;
  if ((v4 & 0x8000000000000000LL) != 0 || (v4 & 0x4000000000000000LL) != 0) {
    goto LABEL_60;
  }
  uint64_t v41 = *(void *)(v4 + 16);
  while (1)
  {
    swift_release();
    *(void *)(v1 + 80) = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v3, v1 + 88, v2 + 4, v2 + 12);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v0, (os_log_type_t)v40, "Peripheral count: %ld", v2, 0xCu);
    swift_slowDealloc(v2, -1LL, -1LL);
LABEL_40:

    if ((v4 & 0x8000000000000000LL) != 0 || (v4 & 0x4000000000000000LL) != 0)
    {
LABEL_57:
      uint64_t v54 = swift_retain();
      uint64_t v40 = _CocoaArrayWrapper.endIndex.getter(v54);
      if (!v40) {
        goto LABEL_58;
      }
    }

    else
    {
      uint64_t v40 = *(void *)(v4 + 16);
      swift_retain();
      if (!v40) {
        goto LABEL_58;
      }
    }

    if (v40 >= 1) {
      break;
    }
    __break(1u);
LABEL_60:
    swift_bridgeObjectRetain(v4);
    uint64_t v41 = _CocoaArrayWrapper.endIndex.getter(v62);
    swift_release();
  }

  unint64_t v42 = 0LL;
  uint64_t v43 = v4 & 0xC000000000000001LL;
  uint64_t v71 = v4 & 0xC000000000000001LL;
  do
  {
    if (v43) {
      uint64_t v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v42, v4);
    }
    else {
      uint64_t v45 = *(id *)(v4 + 8 * v42 + 32);
    }
    uint64_t v46 = (os_log_s *)v45;
    uint64_t v44 = (os_log_s *)Logger.logObject.getter(v46);
    uint64_t v47 = static os_log_type_t.default.getter(v44);
    if (os_log_type_enabled(v44, v47))
    {
      uint64_t v48 = swift_slowAlloc(12LL, -1LL);
      uint64_t v49 = v40;
      uint64_t v50 = (void *)v4;
      uint64_t v51 = (os_log_s **)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v48 = 138412290;
      *(void *)(v48 + 4) = v46;
      void *v51 = v46;
      _os_log_impl((void *)&_mh_execute_header, v44, v47, "Peripheral: %@", (uint8_t *)v48, 0xCu);
      uint64_t v52 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v51, 1LL, v52);
      __int128 v53 = v51;
      uint64_t v4 = (unint64_t)v50;
      uint64_t v40 = v49;
      uint64_t v43 = v71;
      swift_slowDealloc(v53, -1LL, -1LL);
      swift_slowDealloc(v48, -1LL, -1LL);
    }

    else
    {

      uint64_t v44 = v46;
    }

    ++v42;
  }

  while (v40 != v42);
LABEL_58:
  swift_release();
  Swift::String v55 = objc_allocWithZone(&OBJC_CLASS___SPCBPeripheralKeyResponse);
  sub_100022898(0LL, &qword_1009AEDD8, &OBJC_CLASS___SPPeripheral_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  Swift::String v57 = [v55 initWithPeripherals:isa];

  swift_bridgeObjectRelease();
  unint64_t v58 = *(void *)(v1 + 160);
  uint64_t v60 = *(void *)(v1 + 128);
  uint64_t v59 = *(void *)(v1 + 136);
  uint64_t v61 = *(void *)(v1 + 120);
  swift_task_dealloc(*(void *)(v1 + 168));
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  return (*(uint64_t (**)(id))(v1 + 8))(v57);
}

    sub_100018C68((uint64_t)v10, type metadata accessor for BeaconObservation);
LABEL_4:
    if (++v13 == v12) {
      return v30;
    }
  }

  uint64_t v23 = 33LL;
  while (1)
  {
    unint64_t v24 = v23 - 31;
    if (__OFADD__(v23 - 32, 1LL)) {
      break;
    }
    ++v23;
    if (v24 == v17) {
      goto LABEL_3;
    }
  }

  __break(1u);
  return result;
}

    uint64_t v16 = v13[7];
    swift_bridgeObjectRelease();
    *(void *)(v16 + 8 * v44) = v41;
LABEL_4:
    swift_bridgeObjectRelease();
    uint64_t v6 = v63;
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
    v17((uint64_t)v64, v5);
LABEL_5:
    uint64_t v4 = v61;
    uint64_t v12 = v60;
    v17((uint64_t)v60, v5);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v70);
    v15 += 40LL;
    if (!--v14)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
  }

  sub_10005784C(v47, v42);
  uint64_t v49 = sub_10030D124((uint64_t)v64);
  if ((v48 & 1) == (v50 & 1))
  {
    uint64_t v44 = v49;
    unint64_t v13 = v65;
    if ((v48 & 1) == 0) {
      goto LABEL_23;
    }
    goto LABEL_3;
  }

unint64_t sub_10001DAC4()
{
  unint64_t result = qword_10099CF60;
  if (!qword_10099CF60)
  {
    unint64_t result = swift_getWitnessTable(&unk_100804740, &type metadata for MetricsRequest);
    atomic_store(result, (unint64_t *)&qword_10099CF60);
  }

  return result;
}

unint64_t sub_10001DB08()
{
  unint64_t result = qword_10099CF68;
  if (!qword_10099CF68)
  {
    unint64_t result = swift_getWitnessTable(&unk_100811A18, &type metadata for SearchpartyCredential);
    atomic_store(result, (unint64_t *)&qword_10099CF68);
  }

  return result;
}

uint64_t sub_10001DB4C()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

unint64_t sub_10001DB78()
{
  unint64_t result = qword_10099CF80;
  if (!qword_10099CF80)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008054F0, &type metadata for MetricsResponse);
    atomic_store(result, &qword_10099CF80);
  }

  return result;
}

uint64_t sub_10001DBBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10001DC00()
{
  unint64_t result = qword_10099CF98;
  if (!qword_10099CF98)
  {
    uint64_t v1 = sub_100004B78(&qword_10099CF90);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AnalyticsEvent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10099CF98);
  }

  return result;
}

uint64_t sub_10001DC4C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

unint64_t sub_10001DC90()
{
  unint64_t result = qword_10099CFA8;
  if (!qword_10099CFA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100811F44, &type metadata for FetchDevicesRequest);
    atomic_store(result, (unint64_t *)&qword_10099CFA8);
  }

  return result;
}

unint64_t sub_10001DCD4()
{
  unint64_t result = qword_10099CFB0;
  if (!qword_10099CFB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802AC0, &type metadata for FetchDevicesResponse);
    atomic_store(result, (unint64_t *)&qword_10099CFB0);
  }

  return result;
}

char *sub_10001DD18@<X0>(char **a1@<X8>)
{
  return sub_1005EA664(a1);
}

uint64_t sub_10001DD20(uint64_t a1)
{
  return sub_10036C9E0(a1, v1[2], v1[3], v1[4]);
}

ValueMetadata *type metadata accessor for FMIPService.AnalyticsKey()
{
  return &type metadata for FMIPService.AnalyticsKey;
}

uint64_t getEnumTagSinglePayload for FindMyNetworkPublishDateProviderFactory(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t _s12searchpartyd11FMIPServiceC12AnalyticsKeyOwst_0(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10001DDD8 + 4 * byte_1007E44A0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10001DDF8 + 4 * byte_1007E44A5[v4]))();
  }
}

_BYTE *sub_10001DDD8(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_10001DDF8(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10001DE00(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10001DE08(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10001DE10(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10001DE18(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FMIPService.AnalyticsEvent()
{
  return &type metadata for FMIPService.AnalyticsEvent;
}

unint64_t sub_10001DE38()
{
  unint64_t result = qword_10099CFC0;
  if (!qword_10099CFC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E45A4, &type metadata for FMIPService.AnalyticsEvent);
    atomic_store(result, (unint64_t *)&qword_10099CFC0);
  }

  return result;
}

unint64_t sub_10001DE80()
{
  unint64_t result = qword_10099CFC8;
  if (!qword_10099CFC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E456C, &type metadata for FMIPService.AnalyticsEvent);
    atomic_store(result, (unint64_t *)&qword_10099CFC8);
  }

  return result;
}

unint64_t sub_10001DEC8()
{
  unint64_t result = qword_10099CFD0;
  if (!qword_10099CFD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E45E4, &type metadata for FMIPService.AnalyticsEvent);
    atomic_store(result, (unint64_t *)&qword_10099CFD0);
  }

  return result;
}

unint64_t sub_10001DF10()
{
  unint64_t result = qword_10099CFD8;
  if (!qword_10099CFD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E4674, &type metadata for FMIPService.AnalyticsKey);
    atomic_store(result, (unint64_t *)&qword_10099CFD8);
  }

  return result;
}

unint64_t sub_10001DF58()
{
  unint64_t result = qword_10099CFE0;
  if (!qword_10099CFE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E463C, &type metadata for FMIPService.AnalyticsKey);
    atomic_store(result, (unint64_t *)&qword_10099CFE0);
  }

  return result;
}

unint64_t sub_10001DFA0()
{
  unint64_t result = qword_10099CFE8;
  if (!qword_10099CFE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E46B4, &type metadata for FMIPService.AnalyticsKey);
    atomic_store(result, (unint64_t *)&qword_10099CFE8);
  }

  return result;
}

void DeviceInformationProviderFactory.provider()(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for SystemInfo;
  *(void *)(a1 + 32) = &off_100939080;
}

ValueMetadata *type metadata accessor for DeviceInformationProviderFactory()
{
  return &type metadata for DeviceInformationProviderFactory;
}

uint64_t sub_10001E00C(void *a1)
{
  uint64_t v2 = v1;
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10000A720(v4, (uint64_t)qword_100A2AC98);
  uint64_t v5 = swift_retain_n(a1, 2LL);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = (uint64_t)a1;
    uint64_t v16 = v9;
    *(_DWORD *)uint64_t v8 = 136446210;
    uint64_t v10 = type metadata accessor for CloudKitCoordinator();
    swift_retain();
    uint64_t v11 = String.init<A>(describing:)(&v15, v10);
    uint64_t v15 = sub_1003F11D4(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v8 + 4, v8 + 12);
    swift_release_n(a1, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "CloudKitCoordinator was reset: %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {

    swift_release_n(a1, 2LL);
  }

  swift_retain();
  uint64_t v13 = swift_retain();
  sub_100551480(v13, a1, v2);
  swift_release(a1);
  return swift_release(v2);
}

void sub_10001E1F8(uint64_t a1, void *a2, uint64_t a3)
{
}

uint64_t sub_10001E204(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  os_log_type_t v7 = (uint64_t *)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = sub_10000A720(v8, (uint64_t)qword_100A2AC98);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    unint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "CloudKitCoordinator requested flushCache", v12, 2u);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  uint64_t v13 = *(uint64_t **)(v2 + 136);
  uint64_t v14 = (void *)v13[2];
  *os_log_type_t v7 = v14;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.notOnQueue(_:), v4);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v7);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v14 & 1) != 0)
  {
    uint64_t v17 = dispatch_group_create();
    dispatch_group_enter(v17);
    swift_retain();
    uint64_t v18 = v17;
    sub_100688204(0, a1, v13, v18);
    swift_release(v13);

    QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
    return sub_1004E696C(6u);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10001E3F0(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v135 = a2;
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009AE470);
  __chkstk_darwin(v7);
  uint64_t v127 = (char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v133 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v122 = *(void *)(v133 - 8);
  uint64_t v9 = __chkstk_darwin(v133);
  NSNotificationName v131 = (char *)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v111 = (char *)&v101 - v11;
  uint64_t v117 = sub_100004AEC((uint64_t *)&unk_1009B5370);
  __chkstk_darwin(v117);
  unint64_t v118 = (char *)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v13);
  uint64_t v115 = (char *)&v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v114 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v113 = *(void *)(v114 - 8);
  __chkstk_darwin(v114);
  uint64_t v116 = (char *)&v101 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v130 = type metadata accessor for URL(0LL);
  uint64_t v128 = *(void *)(v130 - 8);
  __chkstk_darwin(v130);
  uint64_t v129 = (char *)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v109 = (char *)&v101 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v110 = (char *)&v101 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  unsigned __int8 v112 = (char *)&v101 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v121 = (char *)&v101 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v119 = (char *)&v101 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  v126 = (char *)&v101 - v29;
  __chkstk_darwin(v28);
  unint64_t v31 = (char *)&v101 - v30;
  uint64_t v32 = type metadata accessor for UUID(0LL);
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v132 = (char *)&v101 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v120 = (char *)&v101 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  v124 = (char *)&v101 - v39;
  __chkstk_darwin(v38);
  uint64_t v41 = (char *)&v101 - v40;
  id v42 = [a1 recordName];
  uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
  uint64_t v45 = v44;

  UUID.init(uuidString:)(v43, v45);
  swift_bridgeObjectRelease();
  uint64_t v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
  if (v46((uint64_t)v31, 1LL, v32) != 1)
  {
    uint64_t v107 = v46;
    uint64_t v105 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
    v105(v41, v31, v32);
    Swift::String v55 = v41;
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v56 = type metadata accessor for Logger(0LL);
    uint64_t v57 = sub_10000A720(v56, (uint64_t)qword_100A2AC98);
    id v58 = a1;
    swift_bridgeObjectRetain_n(a3, 2LL);
    id v59 = v58;
    uint64_t v106 = v57;
    uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
    os_log_type_t v61 = static os_log_type_t.default.getter(v60);
    BOOL v62 = os_log_type_enabled(v60, v61);
    uint64_t v125 = v32;
    uint64_t v134 = v33;
    uint64_t v123 = v4;
    uint64_t v63 = v135;
    if (v62)
    {
      uint64_t v64 = swift_slowAlloc(22LL, -1LL);
      os_log_t v103 = v60;
      uint64_t v65 = v64;
      uint64_t v66 = swift_slowAlloc(8LL, -1LL);
      uint64_t v108 = v55;
      uint64_t v102 = (void *)v66;
      uint64_t v104 = swift_slowAlloc(32LL, -1LL);
      *(void *)&v142[0] = v104;
      *(_DWORD *)uint64_t v65 = 138412546;
      *(void *)&__int128 v139 = v59;
      unint64_t v67 = a3;
      uint64_t v68 = v63;
      id v69 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, (char *)&v139 + 8, v65 + 4, v65 + 12);
      uint64_t v70 = v102;
      *uint64_t v102 = v59;

      uint64_t v63 = v68;
      unint64_t v71 = v67;
      *(_WORD *)(v65 + 12) = 2082;
      swift_bridgeObjectRetain(v67);
      *(void *)&__int128 v139 = sub_1003F11D4(v63, v67, (uint64_t *)v142);
      uint64_t v33 = v134;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, (char *)&v139 + 8, v65 + 14, v65 + 22);
      swift_bridgeObjectRelease_n(v67, 3LL);
      os_log_t v72 = v103;
      _os_log_impl( (void *)&_mh_execute_header,  v103,  v61,  "Process CloudKit delete recordID: %@ recordType: %{public}s",  (uint8_t *)v65,  0x16u);
      uint64_t v73 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      uint64_t v74 = v70;
      uint64_t v75 = v125;
      swift_arrayDestroy(v74, 1LL, v73);
      Swift::String v55 = v108;
      swift_slowDealloc(v74, -1LL, -1LL);
      uint64_t v76 = v104;
      swift_arrayDestroy(v104, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1LL, -1LL);
      swift_slowDealloc(v65, -1LL, -1LL);
    }

    else
    {
      uint64_t v79 = v32;

      swift_bridgeObjectRelease_n(a3, 2LL);
      unint64_t v71 = a3;
      uint64_t v75 = v79;
    }

    sub_1003F2EC4();
    if (v80 == 12)
    {
      uint64_t v81 = swift_bridgeObjectRetain_n(v71, 2LL);
      uint64_t v82 = (os_log_s *)Logger.logObject.getter(v81);
      os_log_type_t v83 = static os_log_type_t.default.getter(v82);
      if (os_log_type_enabled(v82, v83))
      {
        uint64_t v84 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v85 = swift_slowAlloc(32LL, -1LL);
        *(void *)&v142[0] = v85;
        uint64_t v108 = v55;
        *(_DWORD *)uint64_t v84 = 136446210;
        swift_bridgeObjectRetain(v71);
        *(void *)&__int128 v139 = sub_1003F11D4(v63, v71, (uint64_t *)v142);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, (char *)&v139 + 8, v84 + 4, v84 + 12);
        swift_bridgeObjectRelease_n(v71, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v82,  v83,  "Ignoring record delete for unknown record type: %{public}s",  v84,  0xCu);
        swift_arrayDestroy(v85, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v85, -1LL, -1LL);
        swift_slowDealloc(v84, -1LL, -1LL);

        (*(void (**)(char *, uint64_t))(v33 + 8))(v108, v75);
      }

      else
      {
        swift_bridgeObjectRelease_n(v71, 2LL);

        (*(void (**)(char *, uint64_t))(v33 + 8))(v55, v75);
      }

      swift_bridgeObjectRetain(v71);
      return v63;
    }

    char v86 = v80;
    uint64_t v104 = (uint64_t)v59;
    id v87 = [v59 recordName];
    uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
    uint64_t v90 = v89;

    uint64_t v91 = (uint64_t)v126;
    UUID.init(uuidString:)(v88, v90);
    swift_bridgeObjectRelease();
    if (v107(v91, 1LL, v75) == 1)
    {
      sub_100015794(v91, &qword_10099D8A0);
    }

    else
    {
      uint64_t v92 = v124;
      v105(v124, (char *)v91, v75);
      sub_1003F2EC4();
      if (v93 != 12)
      {
        uint64_t v94 = (uint64_t)v129;
        sub_1003F314C(v93);
        sub_100574CA4(v94, (uint64_t)&v136);
        (*(void (**)(uint64_t, uint64_t))(v128 + 8))(v94, v130);
        uint64_t v95 = v137;
        if (v137)
        {
          uint64_t v108 = v55;
          uint64_t v96 = v92;
          uint64_t v97 = v138;
          uint64_t v98 = sub_100012ED8(&v136, v137);
          *((void *)&v140 + 1) = v95;
          uint64_t v141 = *(void *)(v97 + 8);
          uint64_t v99 = sub_10000A7C8(&v139);
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v95 - 8) + 16LL))(v99, v98, v95);
          (*(void (**)(char *, uint64_t))(v33 + 8))(v96, v75);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v136);
        }

        else
        {
          (*(void (**)(char *, uint64_t))(v33 + 8))(v92, v75);
          sub_100015794((uint64_t)&v136, (uint64_t *)&unk_1009A9C40);
          __int128 v139 = 0u;
          __int128 v140 = 0u;
          uint64_t v141 = 0LL;
        }

        sub_1000221F4((uint64_t)&v139, (uint64_t)v142);
LABEL_26:
        __asm { BR              X10 }
      }

      (*(void (**)(char *, uint64_t))(v33 + 8))(v92, v75);
    }

    uint64_t v143 = 0LL;
    memset(v142, 0, sizeof(v142));
    goto LABEL_26;
  }

  sub_100015794((uint64_t)v31, &qword_10099D8A0);
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v47 = type metadata accessor for Logger(0LL);
  sub_10000A720(v47, (uint64_t)qword_100A2AC98);
  id v48 = a1;
  uint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
  os_log_type_t v50 = static os_log_type_t.error.getter(v49);
  if (os_log_type_enabled(v49, v50))
  {
    uint64_t v51 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v52 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v51 = 138543362;
    *(void *)&v142[0] = v48;
    id v53 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v142, (char *)v142 + 8, v51 + 4, v51 + 12);
    *uint64_t v52 = v48;

    _os_log_impl((void *)&_mh_execute_header, v49, v50, "Invalid record identifier beaconRecord: %{public}@", v51, 0xCu);
    uint64_t v54 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v52, 1LL, v54);
    swift_slowDealloc(v52, -1LL, -1LL);
    swift_slowDealloc(v51, -1LL, -1LL);
  }

  else
  {

    uint64_t v49 = (os_log_s *)v48;
  }

  unint64_t v77 = sub_1000220F0();
  uint64_t v63 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v77, 0LL, 0LL);
  *uint64_t v78 = 12;
  return v63;
}

void sub_100020224(void *a1)
{
  id v2 = [a1 recordID];
  id v3 = [v2 zoneID];

  if (qword_10099B540 != -1) {
    swift_once(&qword_10099B540, sub_1004F7298);
  }
  uint64_t v4 = (void *)qword_100A2ACE0;
  sub_100022898(0LL, &qword_10099E2C0, &OBJC_CLASS___CKRecordZoneID_ptr);
  id v5 = v4;
  char v6 = static NSObject.== infix(_:_:)(v5, v3);

  if ((v6 & 1) != 0)
  {
    sub_1000204B0(a1);
    if ((v9 & 1) != 0)
    {
      sub_1000220E0(v7, v8, 1);
    }

    else
    {
      sub_1000BD5BC((uint64_t *)&v18, v7, v8);
      swift_bridgeObjectRelease();
    }
  }

  else
  {
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    sub_10000A720(v10, (uint64_t)qword_100A2AC98);
    id v11 = a1;
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v15 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v14 = 138543362;
      id v16 = [v11 recordID];
      id v18 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v14 + 4, v14 + 12);
      *uint64_t v15 = v16;

      _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "Ignoring changed record from unknown zone: %{public}@",  v14,  0xCu);
      uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v15, 1LL, v17);
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    else
    {
    }
  }

void sub_1000204B0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for OwnedDeviceKeyRecord(0LL);
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for KeyAlignmentRecord(0LL);
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for LostModeRecord(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SafeLocation(0LL);
  __chkstk_darwin(v9);
  uint64_t v56 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for LeashRecord(0LL);
  __chkstk_darwin(v11);
  Swift::String v55 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord(0LL);
  __chkstk_darwin(found);
  uint64_t v54 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for BeaconNamingRecord(0LL);
  __chkstk_darwin(v15);
  id v53 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for ShareRecord(0LL);
  __chkstk_darwin(v17);
  uint64_t v52 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for OwnedBeaconGroup(0LL);
  __chkstk_darwin(v19);
  uint64_t v51 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for SharedBeaconRecord(0LL);
  __chkstk_darwin(v21);
  os_log_type_t v50 = (char *)&v42 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v23);
  uint64_t v49 = (char *)&v42 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v25 = type metadata accessor for Logger(0LL);
  uint64_t v26 = sub_10000A720(v25, (uint64_t)qword_100A2AC98);
  id v27 = a1;
  uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v29 = static os_log_type_t.default.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v46 = v26;
    uint64_t v30 = swift_slowAlloc(12LL, -1LL);
    uint64_t v48 = v2;
    unint64_t v31 = (uint8_t *)v30;
    uint64_t v44 = swift_slowAlloc(32LL, -1LL);
    v58[0] = v44;
    *(_DWORD *)unint64_t v31 = 136315138;
    uint64_t v43 = v31 + 4;
    id v32 = v27;
    id v47 = v27;
    id v33 = v32;
    id v34 = [v32 description];
    uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
    uint64_t v45 = v8;
    unint64_t v37 = v36;

    uint64_t v57 = sub_1003F11D4(v35, v37, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58, v43, v31 + 12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "processBeaconZoneRecordUpdate: %s", v31, 0xCu);
    uint64_t v38 = v44;
    swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  else
  {
  }

  CKRecord.recordType.getter(v39);
  sub_1003F2EC4();
  char v41 = v40;
  swift_bridgeObjectRelease();
  __asm { BR              X10 }

uint64_t sub_100020FF0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = sub_10000A720(v10, (uint64_t)qword_100A2AC98);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Cloud data purged, attempting to clear local data", v14, 2u);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  uint64_t v15 = *(uint64_t **)(v3 + 136);
  uint64_t v16 = (void *)v15[2];
  void *v9 = v16;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.notOnQueue(_:), v6);
  id v17 = v16;
  LOBYTE(v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = _dispatchPreconditionTest(_:)(v9);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if ((v16 & 1) != 0)
  {
    uint64_t v19 = dispatch_group_create();
    dispatch_group_enter(v19);
    swift_retain();
    uint64_t v20 = v19;
    sub_100688204(a2 & 1, a1, v15, v20);
    swift_release(v15);

    QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
    return sub_1004E696C(6u);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_1000211E8(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v8 = a2(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  os_log_type_t v13 = (char *)&v22 - v12;
  uint64_t v25 = a1;
  uint64_t v26 = v3;
  OS_dispatch_queue.sync<A>(execute:)(a3, v24, (char *)&type metadata for () + 8);
  if (!v4)
  {
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    sub_10000A720(v14, (uint64_t)qword_100A2AC98);
    uint64_t v15 = sub_10001DC4C(v3, (uint64_t)v13, a2);
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v23 = swift_slowAlloc(32LL, -1LL);
      uint64_t v29 = v23;
      *(_DWORD *)uint64_t v18 = 136315138;
      uint64_t v22 = v18 + 4;
      sub_10001DC4C((uint64_t)v13, (uint64_t)v11, a2);
      uint64_t v19 = String.init<A>(describing:)(v11, v8);
      uint64_t v27 = sub_1003F11D4(v19, v20, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v22, v18 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v13, a2);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "New record: %s", v18, 0xCu);
      uint64_t v21 = v23;
      swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v13, a2);
    }
  }

void sub_10002143C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = __chkstk_darwin(a1);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v23 - v9;
  sub_100578848(v2, v12, *(void *)(v11 + 8));
  if (!v3)
  {
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_10000A720(v13, (uint64_t)qword_100A2AC98);
    uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v15 = v14(v10, v2, a2);
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v25 = swift_slowAlloc(32LL, -1LL);
      uint64_t v28 = v25;
      uint64_t v24 = v18;
      *(_DWORD *)uint64_t v18 = 136315138;
      uint64_t v23 = v18 + 4;
      v14(v8, (uint64_t)v10, a2);
      uint64_t v19 = String.init<A>(describing:)(v8, a2);
      uint64_t v26 = sub_1003F11D4(v19, v20, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v23, v18 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, a2);
      uint64_t v21 = v24;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "New record: %s", v24, 0xCu);
      uint64_t v22 = v25;
      swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, a2);
    }
  }

void sub_100021678(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v48 = *(void *)(v8 - 8);
  uint64_t v49 = v8;
  __chkstk_darwin(v8);
  id v47 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v46 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  sub_10000A720(v13, (uint64_t)qword_100A2AC98);
  uint64_t v14 = swift_retain_n(a1, 2LL);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v43 = v11;
    uint64_t v17 = swift_slowAlloc(12LL, -1LL);
    uint64_t v44 = v10;
    uint64_t v18 = (uint8_t *)v17;
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    uint64_t v42 = a2;
    uint64_t v20 = v19;
    os_log_type_t v50 = a1;
    aBlock[0] = v19;
    *(_DWORD *)uint64_t v18 = 136446210;
    uint64_t v21 = type metadata accessor for CloudKitCoordinator();
    uint64_t v45 = v7;
    uint64_t v22 = v5;
    uint64_t v23 = v4;
    uint64_t v24 = v21;
    swift_retain();
    uint64_t v25 = String.init<A>(describing:)(&v50, v24);
    os_log_type_t v50 = (void *)sub_1003F11D4(v25, v26, aBlock);
    uint64_t v11 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, aBlock, v18 + 4, v18 + 12);
    swift_release_n(a1, 2LL);
    uint64_t v4 = v23;
    uint64_t v5 = v22;
    uint64_t v7 = v45;
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "CloudKitCoordinator available again after reset: %{public}s",  v18,  0xCu);
    swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v27 = v20;
    a2 = v42;
    swift_slowDealloc(v27, -1LL, -1LL);
    uint64_t v28 = v18;
    uint64_t v10 = v44;
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  else
  {

    swift_release_n(a1, 2LL);
  }

  uint64_t v29 = a2 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_resetHandler;
  uint64_t v30 = *(void *)(a2 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_resetHandler);
  if (v30)
  {
    uint64_t v31 = *(void *)(v29 + 8);
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    id v32 = v46;
    (*(void (**)(char *, void, uint64_t))(v11 + 104))( v46,  enum case for DispatchQoS.QoSClass.default(_:),  v10);
    swift_retain();
    id v33 = (void *)static OS_dispatch_queue.global(qos:)(v32);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v32, v10);
    uint64_t v34 = swift_allocObject(&unk_100939100, 32LL, 7LL);
    *(void *)(v34 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v30;
    *(void *)(v34 + 24) = v31;
    aBlock[4] = (uint64_t)sub_1000228F4;
    uint64_t v52 = v34;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1001C31E8;
    aBlock[3] = (uint64_t)&unk_100939118;
    uint64_t v35 = _Block_copy(aBlock);
    uint64_t v36 = swift_retain();
    unint64_t v37 = v47;
    static DispatchQoS.unspecified.getter(v36);
    os_log_type_t v50 = _swiftEmptyArrayStorage;
    uint64_t v38 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v39 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    unint64_t v40 = sub_100012FF8();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v50, v39, v40, v4, v38);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v37, v7, v35);
    _Block_release(v35);

    sub_10002214C(v30, v31);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v37, v49);
    swift_release(v52);
  }

uint64_t sub_100021ABC()
{
  return sub_100514460(v0);
}

uint64_t sub_100021AD4(uint64_t a1)
{
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2AC98);
  swift_bridgeObjectRetain(a1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v6 = 134217984;
    uint64_t v35 = *(void *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "databaseUpdated recordsDeleted: %ld.", v6, 0xCu);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease();
  }

  uint64_t v7 = &_swiftEmptySetSingleton;
  unint64_t v37 = &_swiftEmptySetSingleton;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_100022898(0LL, &qword_10099E2C0, &OBJC_CLASS___CKRecordZoneID_ptr);
    swift_bridgeObjectRetain(a1);
    uint64_t v9 = (unint64_t *)(a1 + 48);
    do
    {
      uint64_t v10 = *(v9 - 1);
      unint64_t v11 = *v9;
      id v12 = (id)*(v9 - 2);
      swift_bridgeObjectRetain(v11);
      uint64_t v13 = objc_autoreleasePoolPush();
      id v14 = [v12 zoneID];
      if (qword_10099B540 != -1) {
        swift_once(&qword_10099B540, sub_1004F7298);
      }
      id v15 = (id)qword_100A2ACE0;
      char v16 = static NSObject.== infix(_:_:)(v15, v14);

      if ((v16 & 1) != 0)
      {
        uint64_t v17 = sub_10001E3F0(v12, v10, v11);
        if ((v19 & 1) != 0)
        {
          sub_1000220E0(v17, v18, 1);
        }

        else
        {
          sub_1000BD5BC(&v35, v17, v18);
          swift_bridgeObjectRelease();
        }
      }

      else
      {
        id v20 = v12;
        uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
        os_log_type_t v22 = static os_log_type_t.error.getter(v21);
        if (os_log_type_enabled(v21, v22))
        {
          uint64_t v23 = swift_slowAlloc(12LL, -1LL);
          uint64_t v24 = (void *)swift_slowAlloc(8LL, -1LL);
          *(_DWORD *)uint64_t v23 = 138543362;
          *(void *)(v23 + 4) = v20;
          *uint64_t v24 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "Ignoring delete record from unknown zone: %{public}@",  (uint8_t *)v23,  0xCu);
          uint64_t v25 = sub_100004AEC((uint64_t *)&unk_10099FB20);
          swift_arrayDestroy(v24, 1LL, v25);
          swift_slowDealloc(v24, -1LL, -1LL);
          swift_slowDealloc(v23, -1LL, -1LL);
        }

        else
        {
        }
      }

      v9 += 3;
      objc_autoreleasePoolPop(v13);
      swift_bridgeObjectRelease();

      --v8;
    }

    while (v8);
    swift_bridgeObjectRelease();
    QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
    sub_1004E696C(7u);
    uint64_t v7 = v37;
  }

  swift_bridgeObjectRetain(v7);
  char v26 = sub_1004E4ABC(0x61636F4C65666153LL, 0xEC0000006E6F6974LL, (uint64_t)v7);
  swift_bridgeObjectRelease();
  if ((v26 & 1) != 0)
  {
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0LL);
    type metadata accessor for Transaction(0LL);
    static Transaction.asyncTask(name:block:)( "BeaconStore.canBeLeashedByHostStateChanged",  42LL,  2LL,  &unk_1009B2780,  0LL);
    sub_1004E6B70();
  }

  else
  {
    swift_bridgeObjectRetain(v7);
    char v27 = sub_1004E4ABC(0x636552687361654CLL, 0xEB0000000064726FLL, (uint64_t)v7);
    swift_bridgeObjectRelease();
    if ((v27 & 1) != 0)
    {
      dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0LL);
      type metadata accessor for Transaction(0LL);
      static Transaction.asyncTask(name:block:)( "BeaconStore.canBeLeashedByHostStateChanged",  42LL,  2LL,  &unk_1009B2780,  0LL);
    }
  }

  uint64_t v28 = qword_10099B608;
  swift_bridgeObjectRetain(v7);
  if (v28 != -1) {
    swift_once(&qword_10099B608, sub_1005D3BF0);
  }
  uint64_t v29 = qword_100A2AE70;
  uint64_t v30 = *(void *)algn_100A2AE78;
  swift_bridgeObjectRetain(*(void *)algn_100A2AE78);
  LOBYTE(v29) = sub_1004E4ABC(v29, v30, (uint64_t)v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v29 & 1) != 0
    || (swift_bridgeObjectRetain(v7),
        char v31 = sub_1004E4ABC(0xD000000000000012LL, 0x8000000100850F60LL, (uint64_t)v7),
        swift_bridgeObjectRelease(),
        (v31 & 1) != 0)
    || (swift_bridgeObjectRetain(v7),
        char v32 = sub_1004E4ABC(0xD000000000000012LL, 0x8000000100850F80LL, (uint64_t)v7),
        swift_bridgeObjectRelease(),
        (v32 & 1) != 0))
  {
    type metadata accessor for Transaction(0LL);
    static Transaction.named<A>(_:with:)( "com.apple.searchpartyd.triggerSiriDeviceNameSync",  48LL,  2LL,  sub_1000220C8,  v34);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000220C8(uint64_t a1)
{
  return sub_1005146E4(a1, v1);
}

uint64_t sub_1000220E0(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_errorRelease(a1);
  }
  else {
    return swift_bridgeObjectRelease(a2);
  }
}

unint64_t sub_1000220F0()
{
  unint64_t result = qword_1009AF760;
  if (!qword_1009AF760)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080696C, &type metadata for BeaconStore.BeaconStoreError);
    atomic_store(result, (unint64_t *)&qword_1009AF760);
  }

  return result;
}

uint64_t sub_100022134@<X0>(_BYTE *a1@<X8>)
{
  return sub_10057456C(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_10002214C(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

uint64_t sub_10002215C(uint64_t a1)
{
  return sub_1000221D0(a1);
}

uint64_t sub_100022170@<X0>(void *a1@<X8>)
{
  return sub_100024810(v1, a1);
}

uint64_t sub_10002218C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000221D0(uint64_t a1)
{
  return sub_1005212D8( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void **)(v1 + 32),  *(unsigned __int8 *)(v1 + 40),  *(unsigned __int8 *)(v1 + 41));
}

uint64_t sub_1000221F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099CFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002223C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v30 = &_swiftEmptySetSingleton;
  if (qword_10099B528 != -1) {
    goto LABEL_30;
  }
  while (1)
  {
    uint64_t v4 = type metadata accessor for Logger(0LL);
    sub_10000A720(v4, (uint64_t)qword_100A2AC98);
    uint64_t v5 = swift_bridgeObjectRetain_n(a1, 2LL);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.default.getter(v6);
    unint64_t v8 = (unint64_t)a1 >> 62;
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v9 = 134217984;
      if (v8)
      {
        uint64_t v27 = a1 < 0 ? a1 : a1 & 0xFFFFFFFFFFFFFF8LL;
        swift_bridgeObjectRetain(a1);
        uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v27);
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }

      swift_bridgeObjectRelease();
      uint64_t v28 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "databaseUpdated recordsChanged: processed %ld change records.",  v9,  0xCu);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a1, 2LL);
    }

    if (v8)
    {
      uint64_t v26 = a1 < 0 ? a1 : a1 & 0xFFFFFFFFFFFFFF8LL;
      swift_bridgeObjectRetain(a1);
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v26);
    }

    else
    {
      uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(a1);
    }

    if (!v11) {
      break;
    }
    uint64_t v12 = 4LL;
    while (1)
    {
      id v13 = (a1 & 0xC000000000000001LL) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 4, a1)
          : *(id *)(a1 + 8 * v12);
      id v14 = v13;
      uint64_t v15 = v12 - 3;
      if (__OFADD__(v12 - 4, 1LL)) {
        break;
      }
      char v16 = objc_autoreleasePoolPush();
      sub_100020224(v14);
      objc_autoreleasePoolPop(v16);

      ++v12;
      if (v15 == v11)
      {
        swift_bridgeObjectRelease();
        QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
        sub_1004E696C(7u);
        uint64_t v17 = v30;
        goto LABEL_18;
      }
    }

    __break(1u);
LABEL_30:
    swift_once(&qword_10099B528, sub_1004F3B00);
  }

  swift_bridgeObjectRelease();
  uint64_t v17 = &_swiftEmptySetSingleton;
LABEL_18:
  swift_bridgeObjectRetain(v17);
  char v18 = sub_1004E4ABC(0x61636F4C65666153LL, 0xEC0000006E6F6974LL, (uint64_t)v17);
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
  {
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0LL);
    type metadata accessor for Transaction(0LL);
    static Transaction.asyncTask(name:block:)( "BeaconStore.canBeLeashedByHostStateChanged",  42LL,  2LL,  &unk_1009B2780,  0LL);
    sub_1004E6B70();
  }

  else
  {
    swift_bridgeObjectRetain(v17);
    char v19 = sub_1004E4ABC(0x636552687361654CLL, 0xEB0000000064726FLL, (uint64_t)v17);
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
    {
      dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0LL);
      type metadata accessor for Transaction(0LL);
      static Transaction.asyncTask(name:block:)( "BeaconStore.canBeLeashedByHostStateChanged",  42LL,  2LL,  &unk_1009B2780,  0LL);
    }
  }

  uint64_t v20 = qword_10099B608;
  swift_bridgeObjectRetain(v17);
  if (v20 != -1) {
    swift_once(&qword_10099B608, sub_1005D3BF0);
  }
  uint64_t v21 = qword_100A2AE70;
  uint64_t v22 = *(void *)algn_100A2AE78;
  swift_bridgeObjectRetain(*(void *)algn_100A2AE78);
  LOBYTE(v21) = sub_1004E4ABC(v21, v22, (uint64_t)v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v21 & 1) != 0
    || (swift_bridgeObjectRetain(v17),
        char v23 = sub_1004E4ABC(0xD000000000000012LL, 0x8000000100850F60LL, (uint64_t)v17),
        swift_bridgeObjectRelease(),
        (v23 & 1) != 0)
    || (swift_bridgeObjectRetain(v17),
        char v24 = sub_1004E4ABC(0xD000000000000012LL, 0x8000000100850F80LL, (uint64_t)v17),
        swift_bridgeObjectRelease(),
        (v24 & 1) != 0))
  {
    type metadata accessor for Transaction(0LL);
    static Transaction.named<A>(_:with:)( "com.apple.searchpartyd.triggerSiriDeviceNameSync",  48LL,  2LL,  sub_1000220C8,  v2);
  }

  return swift_bridgeObjectRelease();
}

unint64_t sub_1000226F4()
{
  unint64_t result = qword_10099FA40;
  if (!qword_10099FA40)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10099FA40);
  }

  return result;
}

unint64_t sub_100022738()
{
  unint64_t result = qword_10099D750;
  if (!qword_10099D750)
  {
    uint64_t v1 = sub_100022898(255LL, (unint64_t *)&qword_10099D920, &OBJC_CLASS___CKRecord_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10099D750);
  }

  return result;
}

void sub_100022790()
{
}

void sub_1000227A8()
{
}

void sub_1000227C0()
{
}

void sub_1000227D8()
{
}

void sub_1000227F0()
{
}

void sub_100022808()
{
}

void sub_100022820()
{
}

void sub_100022838()
{
}

void sub_100022850()
{
}

void sub_100022868()
{
}

void sub_100022880()
{
}

uint64_t sub_100022898(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t sub_1000228D0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000228F4()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100022914(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100022924(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10002292C@<X0>(_BYTE *a1@<X8>)
{
  return sub_100022134(a1);
}

uint64_t sub_100022940(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100022978 + 4 * byte_1007E47A0[a1]))( 0xD000000000000011LL,  0x800000010084D930LL);
}

  ;
}

uint64_t sub_1000229C0()
{
  return 0x6544654D41746F6ELL;
}

uint64_t sub_1000229E0()
{
  return 0x6F4E656369766564LL;
}

void sub_100022A04()
{
}

void sub_100022A0C(uint64_t a1)
{
}

void sub_100022A14(uint64_t a1)
{
}

unint64_t sub_100022A1C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000230F0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100022A48@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100022940(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100022A70(char *a1)
{
}

uint64_t sub_100022A7C(char a1)
{
  if (a1 == 6) {
    return 1701736302LL;
  }
  if (a1 != 7) {
    __asm { BR              X10 }
  }

  return 0x64656C62616E65LL;
}

uint64_t sub_100022B1C(uint64_t a1)
{
  unint64_t v1 = 0x800000010084D950LL;
  String.append(_:)(*(Swift::String *)&a1);
  swift_bridgeObjectRelease(0x800000010084D950LL);
  return v3;
}

void sub_100022BCC(unsigned __int8 *a1, char *a2)
{
  int v2 = *a1;
  char v3 = *a2;
  if (v2 != 7 && v2 != 6 && (v3 & 0xFE) != 6) {
    sub_100306360(v2);
  }
}

uint64_t sub_100022C18()
{
  return sub_100022A7C(*v0);
}

void *sub_100022C20()
{
  uint64_t v1 = v0[9];
  uint64_t ObjectType = swift_getObjectType(v0[8]);
  (*(void (**)(uint64_t, uint64_t))(v1 + 56))(ObjectType, v1);
  swift_release(v0[2]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 3);
  swift_unknownObjectRelease(v0[8]);
  swift_release(v0[10]);
  swift_release(v0[11]);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100022C94()
{
  return swift_deallocClassInstance(v0, 104LL, 7LL);
}

uint64_t type metadata accessor for SeparationMonitoringStateDecider()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd32SeparationMonitoringStateDecider);
}

uint64_t getEnumTagSinglePayload for SeparationMonitoringStateDecider.SeparationMonitoringPolicy( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF9)
  {
    unsigned int v6 = *a1;
    if (v6 >= 6) {
      unsigned int v7 = v6 - 5;
    }
    else {
      unsigned int v7 = 0;
    }
    if (v7 >= 3) {
      return v7 - 2;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    unsigned int v2 = a2 + 7;
    if (a2 + 7 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_100022D24 + 4 * byte_1007E47AC[v4]))();
  }

uint64_t storeEnumTagSinglePayload for SeparationMonitoringStateDecider.SeparationMonitoringPolicy( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 7;
  if (a3 + 7 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    LODWORD(v5) = v4;
  }
  else {
    LODWORD(v5) = 0;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_100022DD0 + 4 * byte_1007E47B6[v5]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100022E04 + 4 * byte_1007E47B1[v5]))();
}

uint64_t sub_100022E04(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100022E0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100022E14LL);
  }
  return result;
}

uint64_t sub_100022E20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100022E28LL);
  }
  *(_BYTE *)uint64_t result = a2 + 7;
  return result;
}

uint64_t sub_100022E2C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100022E34(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100022E40(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 6) {
    return v1 - 5;
  }
  else {
    return 0LL;
  }
}

_BYTE *sub_100022E54(_BYTE *result, int a2)
{
  if (a2) {
    *uint64_t result = a2 + 5;
  }
  return result;
}

ValueMetadata *type metadata accessor for SeparationMonitoringStateDecider.SeparationMonitoringPolicy()
{
  return &type metadata for SeparationMonitoringStateDecider.SeparationMonitoringPolicy;
}

void *initializeBufferWithCopyOfBuffer for SeparationMonitoringStateDecider.CurrentLocationState( void *a1, void **a2)
{
  unsigned int v3 = *a2;
  *a1 = v3;
  return a1;
}

void destroy for SeparationMonitoringStateDecider.CurrentLocationState(void **a1)
{
  unsigned int v1 = *a1;
}

void **assignWithCopy for SeparationMonitoringStateDecider.CurrentLocationState(void **a1, void **a2)
{
  unsigned int v3 = *a1;
  id v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
    {
      *a1 = v4;
      id v6 = v4;
      return a1;
    }

LABEL_7:
    *a1 = v4;
    return a1;
  }

  if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    id v4 = *a2;
    goto LABEL_7;
  }

  *a1 = v4;
  id v5 = v4;

  return a1;
}

  __break(1u);
  return result;
}

    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }

  *a1 = *a2;
  id v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

    unint64_t v67 = (uint64_t *)&unk_1009B5370;
    uint64_t v68 = (uint64_t)v52;
    goto LABEL_8;
  }

  sub_10001581C((uint64_t)v52, (uint64_t)v56, &qword_10099D8A0);
  if (v66(v65, 1LL, v47) == 1)
  {
    sub_100015794((uint64_t)v59, &qword_10099D8A0);
    sub_100015794((uint64_t)v61, &qword_10099D8A0);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v56, v47);
    goto LABEL_7;
  }

  id v69 = v207;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 32))(v207, v65, v47);
  uint64_t v70 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  unint64_t v71 = dispatch thunk of static Equatable.== infix(_:_:)(v56, v69, v47, v70);
  os_log_t v72 = *(void (**)(char *, uint64_t))(v48 + 8);
  v72(v69, v47);
  sub_100015794((uint64_t)v59, &qword_10099D8A0);
  sub_100015794((uint64_t)v61, &qword_10099D8A0);
  v72(v56, v47);
  sub_100015794((uint64_t)v52, &qword_10099D8A0);
  if ((v71 & 1) == 0) {
    return 0LL;
  }
LABEL_10:
  uint64_t v73 = v173;
  uint64_t v74 = v175;
  uint64_t v75 = v174;
  if (*(unsigned __int8 *)(v175 + v173[6]) != *(unsigned __int8 *)(v174 + v173[6])
    || (static MACAddress.== infix(_:_:)(v175 + v173[7], v174 + v173[7]) & 1) == 0
    || (sub_100126740(*(void *)(v74 + v73[8]), *(void *)(v75 + v73[8])) & 1) == 0
    || *(unsigned __int8 *)(v74 + v73[9]) != *(unsigned __int8 *)(v75 + v73[9])
    || (static Date.== infix(_:_:)(v74 + v73[10], v75 + v73[10]) & 1) == 0)
  {
    return 0LL;
  }

  uint64_t v76 = v202;
  sub_10001581C(v74 + v73[11], v202, (uint64_t *)&unk_10099D720);
  unint64_t v77 = v206;
  sub_10001581C(v75 + v73[11], v206, (uint64_t *)&unk_10099D720);
  uint64_t v78 = v203;
  uint64_t v79 = v203 + *(int *)(v172 + 48);
  sub_10001581C(v76, v203, (uint64_t *)&unk_10099D720);
  sub_10001581C(v77, v79, (uint64_t *)&unk_10099D720);
  char v80 = v204;
  uint64_t v81 = v205;
  uint64_t v82 = *(char **)(v204 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v82)(v78, 1LL, v205) == 1)
  {
    sub_100015794(v77, (uint64_t *)&unk_10099D720);
    sub_100015794(v76, (uint64_t *)&unk_10099D720);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v82)(v79, 1LL, v81) == 1)
    {
      v207 = v82;
      sub_100015794(v78, (uint64_t *)&unk_10099D720);
      goto LABEL_22;
    }

  uint64_t v12 = (unsigned __int16)sub_1001B958C(v8, v9, a3);
  swift_bridgeObjectRelease();
  return v12 & 0x1FF;
}

  uint64_t v12 = sub_1001B9834(v8, v9, a3);
  swift_bridgeObjectRelease();
  return v12 & 0x1FFFF;
}

  id v14 = a4(v10, v11, a3);
  swift_bridgeObjectRelease();
  return v14;
}

  uint64_t v12 = sub_1001B9FD4(v8, v9, a3);
  swift_bridgeObjectRelease();
  return v12 | ((((unint64_t)v12 >> 32) & 1) << 32);
}

    uint64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v22 >= v14) {
      goto LABEL_29;
    }
    char v23 = *(void *)(v10 + 8 * v22);
    ++v15;
    if (!v23)
    {
      uint64_t v15 = v22 + 1;
      if (v22 + 1 >= v14) {
        goto LABEL_29;
      }
      char v23 = *(void *)(v10 + 8 * v15);
      if (!v23)
      {
        uint64_t v15 = v22 + 2;
        if (v22 + 2 >= v14) {
          goto LABEL_29;
        }
        char v23 = *(void *)(v10 + 8 * v15);
        if (!v23)
        {
          uint64_t v15 = v22 + 3;
          if (v22 + 3 >= v14) {
            goto LABEL_29;
          }
          char v23 = *(void *)(v10 + 8 * v15);
          if (!v23) {
            break;
          }
        }
      }
    }

    uint64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v21 >= v32) {
      goto LABEL_29;
    }
    uint64_t v22 = *(void *)(v31 + 8 * v21);
    ++v11;
    if (!v22)
    {
      uint64_t v11 = v21 + 1;
      if (v21 + 1 >= v32) {
        goto LABEL_29;
      }
      uint64_t v22 = *(void *)(v31 + 8 * v11);
      if (!v22)
      {
        uint64_t v11 = v21 + 2;
        if (v21 + 2 >= v32) {
          goto LABEL_29;
        }
        uint64_t v22 = *(void *)(v31 + 8 * v11);
        if (!v22)
        {
          uint64_t v11 = v21 + 3;
          if (v21 + 3 >= v32) {
            goto LABEL_29;
          }
          uint64_t v22 = *(void *)(v31 + 8 * v11);
          if (!v22) {
            break;
          }
        }
      }
    }

    uint64_t v30 = sub_100004AEC(&qword_1009A6DD0);
    memcpy((void *)v12, (const void *)v13, *(void *)(*(void *)(v30 - 8) + 64LL));
    goto LABEL_27;
  }

  if (v18)
  {
    sub_100018C68(v12, type metadata accessor for AccessoryInfoResponseContent.Configuration);
    goto LABEL_7;
  }

  uint64_t v147 = a3;
  *(void *)uint64_t v12 = *(void *)v13;
  char v31 = *(void *)(v13 + 8);
  *(void *)(v12 + 8) = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease();
  *(void *)(v12 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = *(void *)(v13 + 16);
  char v32 = *(void *)(v13 + 24);
  *(void *)(v12 + 24) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease();
  *(void *)(v12 + 32) = *(void *)(v13 + 32);
  id v33 = *(void *)(v13 + 40);
  *(void *)(v12 + 40) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease();
  *(_WORD *)(v12 + 48) = *(_WORD *)(v13 + 48);
  *(void *)(v12 + 56) = *(void *)(v13 + 56);
  uint64_t v34 = *(void *)(v13 + 64);
  *(_BYTE *)(v12 + 72) = *(_BYTE *)(v13 + 72);
  *(void *)(v12 + 64) = v34;
  uint64_t v35 = v14[10];
  uint64_t v36 = (void *)(v12 + v35);
  unint64_t v37 = (void *)(v13 + v35);
  uint64_t v38 = type metadata accessor for URL(0LL);
  v146 = *(void *)(v38 - 8);
  uint64_t v39 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v146 + 48);
  unint64_t v40 = v39(v36, 1LL, v38);
  uint64_t v41 = v39(v37, 1LL, v38);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(void *, void *, uint64_t))(v146 + 16))(v36, v37, v38);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v146 + 56))(v36, 0LL, 1LL, v38);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v41)
  {
    (*(void (**)(void *, uint64_t))(v146 + 8))(v36, v38);
LABEL_18:
    uint64_t v73 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v36, v37, *(void *)(*(void *)(v73 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(void *, void *, uint64_t))(v146 + 24))(v36, v37, v38);
LABEL_19:
  uint64_t v74 = v14[11];
  uint64_t v75 = (void *)(v12 + v74);
  uint64_t v76 = (void *)(v13 + v74);
  unint64_t v77 = v39((void *)(v12 + v74), 1LL, v38);
  uint64_t v78 = v39(v76, 1LL, v38);
  if (!v77)
  {
    if (!v78)
    {
      (*(void (**)(void *, void *, uint64_t))(v146 + 24))(v75, v76, v38);
      goto LABEL_25;
    }

    (*(void (**)(void *, uint64_t))(v146 + 8))(v75, v38);
    goto LABEL_24;
  }

  if (v78)
  {
LABEL_24:
    uint64_t v79 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v75, v76, *(void *)(*(void *)(v79 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(void *, void *, uint64_t))(v146 + 16))(v75, v76, v38);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v146 + 56))(v75, 0LL, 1LL, v38);
LABEL_25:
  char v80 = v14[12];
  uint64_t v81 = v12 + v80;
  uint64_t v82 = (uint64_t *)(v13 + v80);
  os_log_type_t v83 = *v82;
  *(_BYTE *)(v81 + 8) = *((_BYTE *)v82 + 8);
  *(void *)uint64_t v81 = v83;
  uint64_t v84 = v14[13];
  uint64_t v85 = (void *)(v12 + v84);
  char v86 = (void *)(v13 + v84);
  *uint64_t v85 = *v86;
  id v87 = v86[1];
  v85[1] = v87;
  swift_bridgeObjectRetain(v87);
  swift_bridgeObjectRelease();
  uint64_t v88 = v14[14];
  uint64_t v89 = *(void *)(v13 + v88);
  *(void *)(v12 + v88) = v89;
  swift_bridgeObjectRetain(v89);
  swift_bridgeObjectRelease();
  uint64_t v90 = v14[15];
  uint64_t v91 = (void *)(v12 + v90);
  uint64_t v92 = (void *)(v13 + v90);
  *uint64_t v91 = *v92;
  char v93 = v92[1];
  v91[1] = v93;
  swift_bridgeObjectRetain(v93);
  swift_bridgeObjectRelease();
  uint64_t v94 = v14[16];
  uint64_t v95 = *(void *)(v13 + v94);
  *(void *)(v12 + v94) = v95;
  swift_bridgeObjectRetain(v95);
  swift_bridgeObjectRelease();
  uint64_t v96 = v14[17];
  uint64_t v97 = v12 + v96;
  uint64_t v98 = (__int128 *)(v13 + v96);
  uint64_t v99 = *v98;
  *(_BYTE *)(v97 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = *((_BYTE *)v98 + 16);
  *(_OWORD *)uint64_t v97 = v99;
  uint64_t v100 = v14[18];
  uint64_t v101 = v12 + v100;
  uint64_t v102 = (__int128 *)(v13 + v100);
  os_log_t v103 = *v102;
  *(_BYTE *)(v101 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = *((_BYTE *)v102 + 16);
  *(_OWORD *)uint64_t v101 = v103;
LABEL_26:
  a3 = v147;
LABEL_27:
  uint64_t v104 = a3[7];
  uint64_t v105 = (char *)(a1 + v104);
  uint64_t v106 = (char *)a2 + v104;
  uint64_t v107 = (int *)type metadata accessor for AccessoryInfoResponseContent.Assets(0LL);
  uint64_t v108 = *((void *)v107 - 1);
  uint64_t v109 = *(uint64_t (**)(char *, uint64_t, int *))(v108 + 48);
  uint64_t v110 = v109(v105, 1LL, v107);
  uint64_t v111 = v109(v106, 1LL, v107);
  if (v110)
  {
    if (!v111)
    {
      unsigned __int8 v112 = type metadata accessor for URL(0LL);
      uint64_t v113 = *(void (**)(char *, char *, uint64_t))(*(void *)(v112 - 8) + 16LL);
      v113(v105, v106, v112);
      v113(&v105[v107[5]], &v106[v107[5]], v112);
      v113(&v105[v107[6]], &v106[v107[6]], v112);
      v113(&v105[v107[7]], &v106[v107[7]], v112);
      v113(&v105[v107[8]], &v106[v107[8]], v112);
      v113(&v105[v107[9]], &v106[v107[9]], v112);
      v113(&v105[v107[10]], &v106[v107[10]], v112);
      v113(&v105[v107[11]], &v106[v107[11]], v112);
      v113(&v105[v107[12]], &v106[v107[12]], v112);
      v113(&v105[v107[13]], &v106[v107[13]], v112);
      v113(&v105[v107[14]], &v106[v107[14]], v112);
      v113(&v105[v107[15]], &v106[v107[15]], v112);
      (*(void (**)(char *, void, uint64_t, int *))(v108 + 56))(v105, 0LL, 1LL, v107);
      goto LABEL_33;
    }

    goto LABEL_32;
  }

  if (v111)
  {
    sub_100018C68((uint64_t)v105, type metadata accessor for AccessoryInfoResponseContent.Assets);
LABEL_32:
    uint64_t v114 = sub_100004AEC(&qword_1009A6DC8);
    memcpy(v105, v106, *(void *)(*(void *)(v114 - 8) + 64LL));
    goto LABEL_33;
  }

  uint64_t v132 = type metadata accessor for URL(0LL);
  uint64_t v133 = *(void (**)(char *, char *, uint64_t))(*(void *)(v132 - 8) + 24LL);
  v133(v105, v106, v132);
  v133(&v105[v107[5]], &v106[v107[5]], v132);
  v133(&v105[v107[6]], &v106[v107[6]], v132);
  v133(&v105[v107[7]], &v106[v107[7]], v132);
  v133(&v105[v107[8]], &v106[v107[8]], v132);
  v133(&v105[v107[9]], &v106[v107[9]], v132);
  v133(&v105[v107[10]], &v106[v107[10]], v132);
  v133(&v105[v107[11]], &v106[v107[11]], v132);
  v133(&v105[v107[12]], &v106[v107[12]], v132);
  v133(&v105[v107[13]], &v106[v107[13]], v132);
  v133(&v105[v107[14]], &v106[v107[14]], v132);
  v133(&v105[v107[15]], &v106[v107[15]], v132);
LABEL_33:
  uint64_t v115 = a3[8];
  uint64_t v116 = (void *)(a1 + v115);
  uint64_t v117 = (uint64_t *)((char *)a2 + v115);
  char *v116 = *v117;
  unint64_t v118 = v117[1];
  v116[1] = v118;
  swift_bridgeObjectRetain(v118);
  swift_bridgeObjectRelease();
  uint64_t v119 = a3[9];
  uint64_t v120 = (void *)(a1 + v119);
  uint64_t v121 = (uint64_t *)((char *)a2 + v119);
  uint64_t v122 = *(void *)(a1 + v119 + 8);
  uint64_t v123 = *(uint64_t *)((char *)a2 + v119 + 8);
  if (v122)
  {
    if (v123)
    {
      *uint64_t v120 = *v121;
      v124 = v121[1];
      v120[1] = v124;
      swift_bridgeObjectRetain(v124);
      swift_bridgeObjectRelease();
      v120[2] = v121[2];
      uint64_t v125 = v121[3];
      v120[3] = v125;
      swift_bridgeObjectRetain(v125);
      swift_bridgeObjectRelease();
      v120[4] = v121[4];
      v126 = v121[5];
      v120[5] = v126;
      swift_bridgeObjectRetain(v126);
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_1002EC69C(v120);
      NSNotificationName v131 = *((_OWORD *)v121 + 1);
      uint64_t v130 = *((_OWORD *)v121 + 2);
      *(_OWORD *)uint64_t v120 = *(_OWORD *)v121;
      *((_OWORD *)v120 + 1) = v131;
      *((_OWORD *)v120 + 2) = v130;
    }
  }

  else if (v123)
  {
    *uint64_t v120 = *v121;
    uint64_t v127 = v121[1];
    v120[1] = v127;
    v120[2] = v121[2];
    uint64_t v128 = v121[3];
    v120[3] = v128;
    v120[4] = v121[4];
    uint64_t v129 = v121[5];
    v120[5] = v129;
    swift_bridgeObjectRetain(v127);
    swift_bridgeObjectRetain(v128);
    swift_bridgeObjectRetain(v129);
  }

  else
  {
    uint64_t v134 = *(_OWORD *)v121;
    uint64_t v135 = *((_OWORD *)v121 + 2);
    *((_OWORD *)v120 + 1) = *((_OWORD *)v121 + 1);
    *((_OWORD *)v120 + 2) = v135;
    *(_OWORD *)uint64_t v120 = v134;
  }

  uint64_t v136 = a3[10];
  uint64_t v137 = a1 + v136;
  uint64_t v138 = (uint64_t)a2 + v136;
  __int128 v139 = type metadata accessor for ServerStatusCode(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v139 - 8) + 24LL))(v137, v138, v139);
  __int128 v140 = a3[11];
  uint64_t v141 = *(uint64_t *)((char *)a2 + v140);
  *(void *)(a1 + v140) = v141;
  swift_bridgeObjectRetain(v141);
  swift_bridgeObjectRelease();
  return a1;
}

  if (v5 < 0)
  {
LABEL_19:
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_20;
  }

  id v13 = v10 + 4;
  id v14 = a2 + 16 * a3;
  if (v14 >= (unint64_t)&v10[(unint64_t)v8 / 8 + 4] || (unint64_t)v13 >= v14 + v8)
  {
    swift_arrayInitWithCopy(v13);
    return v10;
  }

  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_20:
  __break(1u);
  return result;
}

  unsigned int v7 = *(void *)(v0 + 632);
  unint64_t v8 = *(void *)(v0 + 1608);
  uint64_t v9 = *(void *)(v0 + 1600);
  uint64_t v10 = *(void *)(v0 + 1592);
  uint64_t v11 = *(void *)(v0 + 1584);
  uint64_t v12 = *(_BYTE *)(v0 + 1919);
  if ((v7 & 0x100) != 0)
  {
    *(void *)(v0 + 1664) = v8;
    *(void *)(v0 + 1656) = v9;
    *(void *)(v0 + 1648) = v10;
    *(void *)(v0 + 1640) = v11;
    *(_BYTE *)(v0 + 1920) = v12;
    *(void *)(v0 + 1632) = v2;
    char v18 = (void *)swift_task_alloc(dword_1009AE1FC);
    *(void *)(v0 + 1672) = v18;
    *char v18 = v0;
    v18[1] = sub_10044D2EC;
    sub_100448784(*(void *)(v0 + 688), *(void *)(v0 + 616));
  }

  else
  {
    *(void *)(v0 + 1720) = v8;
    *(void *)(v0 + 1712) = v9;
    *(void *)(v0 + 1704) = v10;
    *(void *)(v0 + 1696) = v11;
    *(_BYTE *)(v0 + 1921) = v12;
    *(void *)(v0 + 1688) = v2;
    *(void *)(v0 + 1680) = 0LL;
    id v13 = *(void *)(v0 + 624);
    if ((v7 & 0x240) != 0)
    {
      id v14 = *(void **)(v0 + 616);
      uint64_t v15 = v14[3];
      char v16 = v14[4];
      sub_100012ED8(v14, v15);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v16 + 8) + 8LL) + 32LL))(v15);
      uint64_t v17 = sub_10044D5A0;
    }

    else
    {
      *(void *)(v0 + 1768) = 0LL;
      *(void *)(v0 + 1760) = v13;
      char v19 = *(void **)(v0 + 616);
      uint64_t v20 = v19[3];
      uint64_t v21 = v19[4];
      sub_100012ED8(v19, v20);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v21 + 8) + 8LL) + 32LL))(v20);
      uint64_t v17 = sub_10044D89C;
    }

    swift_task_switch(v17, v13, 0LL);
  }

  __break(1u);
}

        uint64_t v91 = (v31 - 1) & v31;
        uint64_t v34 = __clz(__rbit64(v31)) | (v27 << 6);
        uint64_t v35 = v85;
      }
    }

    uint64_t v38 = v36 + 3;
    if (v38 < v80)
    {
      unint64_t v37 = *(void *)(v79 + 8 * v38);
      if (v37)
      {
        uint64_t v27 = v38;
        goto LABEL_21;
      }

      while (1)
      {
        uint64_t v27 = v38 + 1;
        if (__OFADD__(v38, 1LL)) {
          goto LABEL_46;
        }
        if (v27 >= v80) {
          break;
        }
        unint64_t v37 = *(void *)(v79 + 8 * v27);
        ++v38;
        if (v37) {
          goto LABEL_21;
        }
      }
    }
  }

  uint64_t v15 = 0LL;
LABEL_8:
  char v16 = type metadata accessor for Date(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  isa = 0LL;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(a7, 1LL, v16) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a7, v16);
  }

  char v19 = [v8 initWithMessage:v13 email:v14 phoneNumber:v15 timestamp:isa];

  return v19;
}

    sub_100044A2C(v30, 1);
    char v16 = 0;
    return v16 & 1;
  }

  if ((v31 & 1) != 0) {
    goto LABEL_7;
  }
  sub_1001DB830(v30);
  char v18 = sub_1006F1294(v17);
  swift_bridgeObjectRelease();
  char v19 = type metadata accessor for MessagingMessageContext(0LL);
  uint64_t v20 = sub_10057EEA4( *(unsigned __int8 *)(a1 + *(int *)(v19 + 24)),  *(void *)(a1 + *(int *)(v19 + 24) + 8),  *(void **)(a1 + *(int *)(v19 + 24) + 16));
  char v23 = sub_1004E57AC(v20, v21, v22, v18);
  swift_bridgeObjectRelease();
  sub_10001DC4C(a4, (uint64_t)v10, type metadata accessor for SharedBeaconRecord);
  if ((v23 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    sub_100044A2C(v13, 0);
    char v16 = 1;
  }

  else
  {
    char v24 = &v10[*(int *)(v8 + 28)];
    uint64_t v25 = *((void *)v24 + 1);
    uint64_t v26 = *((void *)v24 + 2);
    uint64_t v27 = *v24;
    swift_bridgeObjectRetain(v26);
    char v16 = sub_1004E57AC(v27, v25, v26, v18);
    swift_bridgeObjectRelease();
    sub_100044A2C(v13, 0);
    swift_bridgeObjectRelease();
  }

  sub_100018C68((uint64_t)v10, type metadata accessor for SharedBeaconRecord);
  return v16 & 1;
}

  __break(1u);
}

void *initializeWithTake for SeparationMonitoringStateDecider.CurrentLocationState( void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void **assignWithTake for SeparationMonitoringStateDecider.CurrentLocationState( void **a1, unint64_t *a2)
{
  unsigned int v3 = *a1;
  unint64_t v4 = *a2;
  if (v4 < 0xFFFFFFFF)
  {

LABEL_6:
    *a1 = (void *)v4;
    return a1;
  }

  *a1 = (void *)v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for SeparationMonitoringStateDecider.CurrentLocationState( uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFD && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  uint64_t v3 = *a1;
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for SeparationMonitoringStateDecider.CurrentLocationState( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)uint64_t result = 0LL;
    *(_DWORD *)uint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 2;
    }
  }

  return result;
}

uint64_t sub_10002305C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  return (v1 + 1);
}

void *sub_100023074(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }

  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }

  *uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for SeparationMonitoringStateDecider.CurrentLocationState()
{
  return &type metadata for SeparationMonitoringStateDecider.CurrentLocationState;
}

void sub_1000230A4(uint64_t a1, uint64_t a2, void *a3)
{
  else {
    uint64_t v3 = (uint64_t)a3;
  }
  uint64_t v5 = v3;
  id v4 = a3;
  CurrentValueSubject.send(_:)(&v5);
}

uint64_t sub_1000230E8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return sub_1000234F4(a3);
}

unint64_t sub_1000230F0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100932A60, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6) {
    return 6LL;
  }
  else {
    return v3;
  }
}

void sub_100023138(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = a2;
  __asm { BR              X10; loc_1000231E4 }

uint64_t sub_1000234F4(unsigned int a1)
{
  if (a1 < 3)
  {
LABEL_9:
    uint64_t v13 = 2LL;
    return CurrentValueSubject.send(_:)(&v13);
  }

  if (a1 - 3 > 1)
  {
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v2 = type metadata accessor for Logger(0LL);
    uint64_t v3 = sub_10000A720(v2, (uint64_t)qword_100A2AAA0);
    id v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      id v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v7 = swift_slowAlloc(32LL, -1LL);
      uint64_t v13 = v7;
      *(_DWORD *)id v6 = 136315138;
      LODWORD(v12) = a1;
      type metadata accessor for CLAuthorizationStatus(0LL);
      uint64_t v9 = String.init<A>(describing:)(&v12, v8);
      uint64_t v12 = sub_1003F11D4(v9, v10, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v6 + 4, v6 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unknown CLAuthorizationStatus value detected: %s", v6, 0xCu);
      swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1LL, -1LL);
      swift_slowDealloc(v6, -1LL, -1LL);
    }

    goto LABEL_9;
  }

  uint64_t v13 = 0LL;
  return CurrentValueSubject.send(_:)(&v13);
}

uint64_t getEnumTagSinglePayload for SeparationMonitoringStateDecider.SeparationMonitoringPolicy.DisableReason( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }

uint64_t storeEnumTagSinglePayload for SeparationMonitoringStateDecider.SeparationMonitoringPolicy.DisableReason( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_10002378C + 4 * byte_1007E47D9[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000237C0 + 4 * byte_1007E47D4[v4]))();
}

uint64_t sub_1000237C0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000237C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000237D0LL);
  }
  return result;
}

uint64_t sub_1000237DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000237E4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1000237E8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000237F0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SeparationMonitoringStateDecider.SeparationMonitoringPolicy.DisableReason()
{
  return &type metadata for SeparationMonitoringStateDecider.SeparationMonitoringPolicy.DisableReason;
}

unint64_t sub_100023810()
{
  unint64_t result = qword_10099D0F8;
  if (!qword_10099D0F8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007E48E8,  &type metadata for SeparationMonitoringStateDecider.SeparationMonitoringPolicy.DisableReason);
    atomic_store(result, (unint64_t *)&qword_10099D0F8);
  }

  return result;
}

uint64_t sub_100023858(uint64_t (*a1)(char *), void *a2, uint64_t a3)
{
  return sub_1000238A0( a1,  a2,  a3,  type metadata accessor for OwnedBeaconRecord,  (void (*)(BOOL, uint64_t, uint64_t))sub_1000328A4);
}

uint64_t sub_10002387C(uint64_t (*a1)(char *), void *a2, uint64_t a3)
{
  return sub_1000238A0( a1,  a2,  a3,  type metadata accessor for DefaultConfigurationLayer,  (void (*)(BOOL, uint64_t, uint64_t))sub_1000328FC);
}

uint64_t sub_1000238A0( uint64_t (*a1)(char *), void *a2, uint64_t a3, uint64_t (*a4)(void), void (*a5)(BOOL, uint64_t, uint64_t))
{
  uint64_t v22 = a5;
  unsigned int v6 = a4;
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  uint64_t v8 = a4(0LL);
  uint64_t v27 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v26 = (uint64_t)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v22 - v12;
  id v14 = _swiftEmptyArrayStorage;
  uint64_t v30 = _swiftEmptyArrayStorage;
  uint64_t v25 = *(void *)(a3 + 16);
  if (v25)
  {
    unint64_t v15 = 0LL;
    char v16 = _swiftEmptyArrayStorage;
    char v23 = v6;
    uint64_t v24 = a3;
    while (v15 < *(void *)(a3 + 16))
    {
      unint64_t v17 = (*(unsigned __int8 *)(v27 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
      uint64_t v18 = *(void *)(v27 + 72);
      sub_10001DC4C(a3 + v17 + v18 * v15, (uint64_t)v13, v6);
      id v14 = v29;
      char v19 = v28(v13);
      if (v5)
      {
        sub_100018C68((uint64_t)v13, v6);
        swift_release(v16);
        swift_bridgeObjectRelease();
        return (uint64_t)v14;
      }

      if ((v19 & 1) != 0)
      {
        sub_10002218C((uint64_t)v13, v26, v6);
        if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0) {
          v22(0, v16[2] + 1LL, 1LL);
        }
        char v16 = v30;
        unint64_t v21 = v30[2];
        unint64_t v20 = v30[3];
        if (v21 >= v20 >> 1)
        {
          v22(v20 > 1, v21 + 1, 1LL);
          char v16 = v30;
        }

        v16[2] = v21 + 1;
        unsigned int v6 = v23;
        uint64_t result = sub_10002218C(v26, (uint64_t)v16 + v17 + v21 * v18, v23);
        a3 = v24;
      }

      else
      {
        uint64_t result = sub_100018C68((uint64_t)v13, v6);
      }

      if (v25 == ++v15)
      {
        id v14 = v30;
        goto LABEL_15;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v14;
  }

  return result;
}

uint64_t sub_100023AB0(uint64_t (*a1)(char *), void *a2, uint64_t a3)
{
  return sub_1000238A0( a1,  a2,  a3,  type metadata accessor for BeaconObservation,  (void (*)(BOOL, uint64_t, uint64_t))sub_100032AA8);
}

uint64_t sub_100023AD4(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v29 = _swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    uint64_t v8 = (uint64_t (*)(__int128 *))result;
    unint64_t v9 = 0LL;
    uint64_t v10 = a3 + 32;
    char v23 = (uint64_t (*)(__int128 *))result;
    uint64_t v24 = a3;
    uint64_t v22 = v6;
    while (v9 < *(void *)(v4 + 16))
    {
      sub_100013044(v10, (uint64_t)v28);
      uint64_t v5 = a2;
      char v11 = v8(v28);
      if (v3)
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
        swift_bridgeObjectRelease();
        swift_release();
        return (uint64_t)v5;
      }

      if ((v11 & 1) != 0)
      {
        sub_100012EC0(v28, (uint64_t)v25);
        uint64_t v12 = v29;
        if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0)
        {
          sub_100032928(0, v12[2] + 1LL, 1);
          uint64_t v12 = v29;
        }

        unint64_t v14 = v12[2];
        unint64_t v13 = v12[3];
        if (v14 >= v13 >> 1) {
          sub_100032928(v13 > 1, v14 + 1, 1);
        }
        uint64_t v15 = v26;
        uint64_t v16 = v27;
        uint64_t v17 = sub_100037298((uint64_t)v25, v26);
        __chkstk_darwin(v17);
        char v19 = (char *)&v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *))(v20 + 16))(v19);
        sub_1002BBA60(v14, (uint64_t)v19, (uint64_t *)&v29, v15, v16);
        uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
        uint64_t v8 = v23;
        uint64_t v4 = v24;
        uint64_t v6 = v22;
      }

      else
      {
        uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
      }

      ++v9;
      v10 += 40LL;
      if (v6 == v9)
      {
        uint64_t v5 = v29;
        goto LABEL_15;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }

  return result;
}

uint64_t sub_100023CB8(uint64_t (*a1)(char *), void *a2, uint64_t a3)
{
  return sub_1000238A0( a1,  a2,  a3,  type metadata accessor for SharedBeaconRecord,  (void (*)(BOOL, uint64_t, uint64_t))sub_100032BC4);
}

uint64_t sub_100023CDC(uint64_t (*a1)(char *), void *a2, uint64_t a3)
{
  return sub_1000238A0( a1,  a2,  a3,  type metadata accessor for SafeLocation,  (void (*)(BOOL, uint64_t, uint64_t))sub_100032BF0);
}

uint64_t sub_100023D00(uint64_t (*a1)(char *), void *a2, uint64_t a3)
{
  return sub_1000238A0( a1,  a2,  a3,  type metadata accessor for BeaconEstimatedLocation,  (void (*)(BOOL, uint64_t, uint64_t))sub_100032D0C);
}

uint64_t sub_100023D24(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  return sub_100024558( a1,  a2,  a3,  (uint64_t *)&unk_1009A0850,  (void (*)(BOOL, uint64_t, uint64_t))sub_100032DD8);
}

uint64_t sub_100023D48(uint64_t (*a1)(char *), void *a2, uint64_t a3)
{
  return sub_1000238A0( a1,  a2,  a3,  type metadata accessor for ShareRecord,  (void (*)(BOOL, uint64_t, uint64_t))sub_100032E20);
}

uint64_t sub_100023D6C(uint64_t (*a1)(char *), void *a2, uint64_t a3)
{
  return sub_1000238A0( a1,  a2,  a3,  type metadata accessor for FetchRequestBeacon,  (void (*)(BOOL, uint64_t, uint64_t))sub_100032F70);
}

uint64_t sub_100023D90(uint64_t (*a1)(char *), void *a2, uint64_t a3)
{
  return sub_1000238A0( a1,  a2,  a3,  type metadata accessor for RawSearchResult,  (void (*)(BOOL, uint64_t, uint64_t))sub_100032FC8);
}

uint64_t sub_100023DB4(uint64_t (*a1)(char *), void *a2, uint64_t a3)
{
  return sub_1000238A0( a1,  a2,  a3,  type metadata accessor for WildModeAssociationRecord,  (void (*)(BOOL, uint64_t, uint64_t))sub_1000330A4);
}

uint64_t sub_100023DD8(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  return sub_100024558(a1, a2, a3, &qword_1009B0800, (void (*)(BOOL, uint64_t, uint64_t))sub_100033128);
}

uint64_t sub_100023DFC(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009AA7A0);
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v23 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v20 - v11;
  unint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v22 = *(void *)(a3 + 16);
  if (v22)
  {
    unint64_t v14 = 0LL;
    uint64_t v15 = _swiftEmptyArrayStorage;
    v20[1] = a2;
    uint64_t v21 = a3;
    v20[0] = a1;
    while (v14 < *(void *)(a3 + 16))
    {
      unint64_t v16 = (*(unsigned __int8 *)(v24 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      unint64_t v13 = *(void **)(v24 + 72);
      sub_10001581C(a3 + v16 + (void)v13 * v14, (uint64_t)v12, (uint64_t *)&unk_1009AA7A0);
      char v17 = a1(v12);
      if (v3)
      {
        sub_100015794((uint64_t)v12, (uint64_t *)&unk_1009AA7A0);
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v13;
      }

      if ((v17 & 1) != 0)
      {
        sub_10003732C((uint64_t)v12, v23);
        if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0) {
          sub_1000331DC(0, v15[2] + 1LL, 1);
        }
        uint64_t v15 = v25;
        unint64_t v19 = v25[2];
        unint64_t v18 = v25[3];
        if (v19 >= v18 >> 1)
        {
          sub_1000331DC(v18 > 1, v19 + 1, 1);
          uint64_t v15 = v25;
        }

        v15[2] = v19 + 1;
        uint64_t result = sub_10003732C(v23, (uint64_t)v15 + v16 + v19 * (void)v13);
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }

      else
      {
        uint64_t result = sub_100015794((uint64_t)v12, (uint64_t *)&unk_1009AA7A0);
      }

      if (v22 == ++v14)
      {
        unint64_t v13 = v25;
        goto LABEL_15;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v13;
  }

  return result;
}

uint64_t sub_100024008(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v23 = _swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    uint64_t v7 = (uint64_t (*)(_OWORD *))result;
    unint64_t v8 = 0LL;
    uint64_t v9 = a3 + 32;
    uint64_t v15 = *(void *)(a3 + 16);
    while (v8 < *(void *)(v4 + 16))
    {
      sub_10001581C(v9, (uint64_t)v21, &qword_10099D518);
      char v10 = v7(v21);
      if (v3)
      {
        sub_100015794((uint64_t)v21, &qword_10099D518);
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v5;
      }

      if ((v10 & 1) != 0)
      {
        uint64_t v11 = v7;
        __int128 v17 = v21[0];
        __int128 v18 = v21[1];
        __int128 v19 = v21[2];
        uint64_t v20 = v22;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native(v5);
        if ((result & 1) == 0) {
          uint64_t result = sub_1000331C0(0, v5[2] + 1LL, 1);
        }
        uint64_t v5 = v23;
        unint64_t v13 = v23[2];
        unint64_t v12 = v23[3];
        if (v13 >= v12 >> 1)
        {
          uint64_t result = sub_1000331C0(v12 > 1, v13 + 1, 1);
          uint64_t v5 = v23;
        }

        v5[2] = v13 + 1;
        unint64_t v14 = &v5[7 * v13];
        *((_OWORD *)v14 + 2) = v17;
        *((_OWORD *)v14 + 3) = v18;
        *((_OWORD *)v14 + 4) = v19;
        v14[10] = v20;
        uint64_t v7 = v11;
        uint64_t v6 = v15;
        uint64_t v4 = a3;
      }

      else
      {
        uint64_t result = sub_100015794((uint64_t)v21, &qword_10099D518);
      }

      ++v8;
      v9 += 56LL;
      if (v6 == v8) {
        goto LABEL_13;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }

  return result;
}

uint64_t sub_1000241C4(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  return sub_100024558(a1, a2, a3, &qword_1009B11D0, (void (*)(BOOL, uint64_t, uint64_t))sub_1000332F0);
}

void *sub_1000241E8(uint64_t (*a1)(id *), void *a2, unint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v26 = &_swiftEmptyArrayStorage;
  if (a3 >> 62) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v7)
  {
    while (1)
    {
      unint64_t v8 = 0LL;
      uint64_t v23 = v4 & 0xFFFFFFFFFFFFFF8LL;
      unint64_t v24 = v4 & 0xC000000000000001LL;
      uint64_t v22 = v4;
      while (v24)
      {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v4);
LABEL_9:
        char v10 = v9;
        unint64_t v11 = v8 + 1;
        if (__OFADD__(v8, 1LL)) {
          goto LABEL_17;
        }
        id v25 = v9;
        unint64_t v12 = a2;
        char v13 = a1(&v25);
        if (v3)
        {
          swift_bridgeObjectRelease(v4);

          swift_release(v26);
          return v12;
        }

        if ((v13 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          uint64_t v14 = v7;
          uint64_t v15 = a1;
          unint64_t v16 = a2;
          uint64_t v17 = v26[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
          uint64_t v18 = v17;
          a2 = v16;
          a1 = v15;
          uint64_t v7 = v14;
          uint64_t v4 = v22;
          uint64_t v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v10);
          specialized ContiguousArray._endMutation()(v19);
        }

        else
        {
        }

        ++v8;
        if (v11 == v7)
        {
          unint64_t v12 = v26;
          goto LABEL_23;
        }
      }

      if (v8 < *(void *)(v23 + 16)) {
        break;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      if (v4 < 0) {
        uint64_t v20 = v4;
      }
      else {
        uint64_t v20 = v4 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v20);
      if (!v7) {
        goto LABEL_22;
      }
    }

    id v9 = *(id *)(v4 + 8 * v8 + 32);
    goto LABEL_9;
  }

LABEL_22:
  unint64_t v12 = &_swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease(v4);
  return v12;
}

    unint64_t v16 = (v22 - 1) & v22;
    uint64_t v18 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_9:
    uint64_t v19 = *(void *)(v28 + 72) * v18;
    sub_10001DC4C(*(void *)(v8 + 48) + v19, (uint64_t)v7, type metadata accessor for BeaconIdentifier);
    uint64_t v20 = *(void *)(v29 + 72) * v18;
    sub_10001DC4C(*(void *)(v8 + 56) + v20, (uint64_t)v4, type metadata accessor for ObservedAdvertisement);
    sub_10002218C((uint64_t)v7, *(void *)(v10 + 48) + v19, type metadata accessor for BeaconIdentifier);
    uint64_t result = (void *)sub_10002218C( (uint64_t)v4,  *(void *)(v10 + 56) + v20,  type metadata accessor for ObservedAdvertisement);
  }

  uint64_t v23 = v21 + 2;
  if (v23 >= v27)
  {
LABEL_23:
    uint64_t result = (void *)swift_release(v8);
    __int16 v1 = v25;
    goto LABEL_25;
  }

  uint64_t v22 = *(void *)(v26 + 8 * v23);
  if (v22)
  {
    char v13 = v23;
    goto LABEL_22;
  }

  while (1)
  {
    char v13 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v13 >= v27) {
      goto LABEL_23;
    }
    uint64_t v22 = *(void *)(v26 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }

    unint64_t v16 = (v23 - 1) & v23;
    uint64_t v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_9:
    uint64_t v19 = v2[9] * v18;
    uint64_t v20 = (void (*)(char *, unint64_t, uint64_t))v2[2];
    v20(v7, *(void *)(v8 + 48) + v19, v1);
    v20(v5, *(void *)(v8 + 56) + v19, v1);
    uint64_t v21 = (void (*)(unint64_t, char *, uint64_t))v2[4];
    v21(*(void *)(v10 + 48) + v19, v7, v1);
    uint64_t result = (void *)((uint64_t (*)(unint64_t, char *, uint64_t))v21)( *(void *)(v10 + 56) + v19,  v5,  v1);
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v28) {
    goto LABEL_23;
  }
  uint64_t v23 = *(void *)(v27 + 8 * v24);
  if (v23)
  {
    char v13 = v24;
    goto LABEL_22;
  }

  while (1)
  {
    char v13 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v13 >= v28) {
      goto LABEL_23;
    }
    uint64_t v23 = *(void *)(v27 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_22;
    }
  }

    char v13 = (v28 - 1) & v28;
    uint64_t v44 = v29;
    uint64_t v21 = __clz(__rbit64(v28)) + (v29 << 6);
LABEL_9:
    uint64_t v23 = *(void *)(v14 + 72) * v21;
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v17, *(void *)(v22 + 48) + v23, v16);
    unint64_t v24 = *(void *)(v15 + 72) * v21;
    id v25 = *(void *)(v22 + 56) + v24;
    uint64_t v26 = v40;
    (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v40, v25, v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(*(void *)(v19 + 48) + v23, v17, v16);
    uint64_t result = (char *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v15 + 32))( *(void *)(v19 + 56) + v24,  v26,  v18);
    char v10 = v44;
  }

  uint64_t v30 = v27 + 2;
  if (v30 >= v35)
  {
LABEL_23:
    uint64_t result = (char *)swift_release();
    char v31 = v33;
    char v32 = v43;
    goto LABEL_25;
  }

  uint64_t v28 = *(void *)(v34 + 8 * v30);
  if (v28)
  {
    uint64_t v29 = v30;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v29 = v30 + 1;
    if (__OFADD__(v30, 1LL)) {
      break;
    }
    if (v29 >= v35) {
      goto LABEL_23;
    }
    uint64_t v28 = *(void *)(v34 + 8 * v29);
    ++v30;
    if (v28) {
      goto LABEL_22;
    }
  }

    unint64_t v16 = (v31 - 1) & v31;
    id v47 = v32;
    unint64_t v24 = __clz(__rbit64(v31)) + (v32 << 6);
LABEL_9:
    uint64_t v26 = *(void *)(v17 + 72) * v24;
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v20, *(void *)(v25 + 48) + v26, v19);
    uint64_t v27 = *(void *)(v18 + 72) * v24;
    uint64_t v28 = *(void *)(v25 + 56) + v27;
    uint64_t v29 = v43;
    (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v43, v28, v21);
    (*(void (**)(unint64_t, char *, uint64_t))(v17 + 32))(*(void *)(v22 + 48) + v26, v20, v19);
    uint64_t result = (char *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v18 + 32))( *(void *)(v22 + 56) + v27,  v29,  v21);
    char v13 = v47;
  }

  id v33 = v30 + 2;
  if (v33 >= v38)
  {
LABEL_23:
    uint64_t result = (char *)swift_release();
    uint64_t v34 = v36;
    uint64_t v35 = v46;
    goto LABEL_25;
  }

  char v31 = *(void *)(v37 + 8 * v33);
  if (v31)
  {
    char v32 = v33;
    goto LABEL_22;
  }

  while (1)
  {
    char v32 = v33 + 1;
    if (__OFADD__(v33, 1LL)) {
      break;
    }
    if (v32 >= v38) {
      goto LABEL_23;
    }
    char v31 = *(void *)(v37 + 8 * v32);
    ++v33;
    if (v31) {
      goto LABEL_22;
    }
  }

    uint64_t v17 = (v30 - 1) & v30;
    uint64_t v23 = __clz(__rbit64(v30)) + (v14 << 6);
LABEL_9:
    id v25 = *(void *)(v6 + 72) * v23;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v19, *(void *)(v24 + 48) + v25, v18);
    uint64_t v26 = *(void *)(v24 + 56);
    uint64_t v27 = v41;
    uint64_t v28 = *(void *)(v40 + 72) * v23;
    sub_10001DC4C(v26 + v28, v20, v41);
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(i + 48) + v25, v19, v18);
  }

  char v31 = v29 + 2;
  if (v31 >= v36)
  {
LABEL_23:
    uint64_t result = (void *)swift_release(v42);
    char v32 = v34;
    id v33 = v43;
    goto LABEL_25;
  }

  uint64_t v30 = *(void *)(v35 + 8 * v31);
  if (v30)
  {
    uint64_t v14 = v31;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v14 = v31 + 1;
    if (__OFADD__(v31, 1LL)) {
      break;
    }
    if (v14 >= v36) {
      goto LABEL_23;
    }
    uint64_t v30 = *(void *)(v35 + 8 * v14);
    ++v31;
    if (v30) {
      goto LABEL_22;
    }
  }

    unint64_t v16 = (v22 - 1) & v22;
    uint64_t v18 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_9:
    uint64_t v19 = *(void *)(v5 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v19, v4);
    uint64_t v20 = *(void *)(v27 + 72) * v18;
    sub_10001581C(*(void *)(v8 + 56) + v20, (uint64_t)v3, &qword_10099E380);
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(void *)(v10 + 48) + v19, v7, v4);
    uint64_t result = (void *)sub_10006A4A8((uint64_t)v3, *(void *)(v10 + 56) + v20);
  }

  uint64_t v23 = v21 + 2;
  if (v23 >= v26) {
    goto LABEL_23;
  }
  uint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    char v13 = v23;
    goto LABEL_22;
  }

  while (1)
  {
    char v13 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v13 >= v26) {
      goto LABEL_23;
    }
    uint64_t v22 = *(void *)(v25 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }

    uint64_t v14 = (v25 - 1) & v25;
    uint64_t v20 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_9:
    uint64_t v22 = *(void *)(v3 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v16, *(void *)(v21 + 48) + v22, v15);
    uint64_t v23 = *(void *)(v36 + 72) * v20;
    sub_10001DC4C(*(void *)(v21 + 56) + v23, v17, type metadata accessor for BeaconScanner.AISLookupState);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(i + 48) + v22, v16, v15);
  }

  uint64_t v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v27 = v30;
    uint64_t v28 = v38;
    goto LABEL_25;
  }

  id v25 = *(void *)(v31 + 8 * v26);
  if (v25)
  {
    unint64_t v11 = v26;
    goto LABEL_22;
  }

  while (1)
  {
    unint64_t v11 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v11 >= v32) {
      goto LABEL_23;
    }
    id v25 = *(void *)(v31 + 8 * v11);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }

    uint64_t v19 = (v32 - 1) & v32;
    id v25 = __clz(__rbit64(v32)) + (v16 << 6);
LABEL_9:
    uint64_t v27 = *(void *)(v40 + 72) * v25;
    sub_10001DC4C(*(void *)(v26 + 48) + v27, v20, v21);
    uint64_t v28 = *(void *)(v6 + 72) * v25;
    uint64_t v29 = *(void *)(v26 + 56) + v28;
    uint64_t v30 = v41;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v41, v29, v22);
    sub_10002218C(v20, *(void *)(i + 48) + v27, v21);
  }

  id v33 = v31 + 2;
  if (v33 >= v38)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v34 = v36;
    uint64_t v35 = v45;
    goto LABEL_25;
  }

  char v32 = *(void *)(v37 + 8 * v33);
  if (v32)
  {
    unint64_t v16 = v33;
    goto LABEL_22;
  }

  while (1)
  {
    unint64_t v16 = v33 + 1;
    if (__OFADD__(v33, 1LL)) {
      break;
    }
    if (v16 >= v38) {
      goto LABEL_23;
    }
    char v32 = *(void *)(v37 + 8 * v16);
    ++v33;
    if (v32) {
      goto LABEL_22;
    }
  }

        unint64_t v11 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
        uint64_t v15 = *(unsigned __int8 *)(*(void *)(v3 + 48) + v11);
        Hasher.init(_seed:)(v19, *(void *)(v5 + 40));
        __asm { BR              X8 }
      }
    }
  }

        unint64_t v11 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
        uint64_t v15 = *(unsigned __int8 *)(*(void *)(v3 + 48) + v11);
        Hasher.init(_seed:)(v18, *(void *)(v5 + 40));
        __asm { BR              X8 }
      }
    }
  }

  uint64_t v23 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  unint64_t v24 = (uint64_t *)(*(void *)(v23 + 48) + 16 * a3);
  *unint64_t v24 = v8;
  v24[1] = a2;
  id v25 = *(void *)(v23 + 16);
  uint64_t v26 = __OFADD__(v25, 1LL);
  uint64_t v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v23 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v27;
  }
  return result;
}

  unint64_t v24 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  id v25 = (void *)(*(void *)(v24 + 48) + 16 * a3);
  *id v25 = a1;
  v25[1] = a2;
  uint64_t v26 = *(void *)(v24 + 16);
  uint64_t v27 = __OFADD__(v26, 1LL);
  uint64_t v28 = v26 + 1;
  if (v27) {
    __break(1u);
  }
  else {
    *(void *)(v24 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v28;
  }
}

        char v10 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_23:
        uint64_t v14 = *(unsigned __int8 *)(*(void *)(v3 + 48) + v10);
        Hasher.init(_seed:)(v17, *(void *)(v5 + 40));
        __asm { BR              X8 }
      }
    }
  }

        char v10 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_23:
        uint64_t v14 = *(unsigned __int8 *)(*(void *)(v3 + 48) + v10);
        Hasher.init(_seed:)(v16, *(void *)(v5 + 40));
        __asm { BR              X8 }
      }
    }
  }

    uint64_t v51 = (v10 - 1) & v10;
    uint64_t v52 = v11;
    unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_23:
    char v13 = *(void *)(v0 + 248);
    uint64_t v54 = v13;
    uint64_t v60 = *(void *)(v0 + 240);
    uint64_t v14 = *(void *)(v0 + 232);
    id v53 = v14;
    uint64_t v15 = *(void *)(v0 + 208);
    uint64_t v57 = *(_BYTE *)(v0 + 264);
    unint64_t v16 = *(void *)(v0 + 184);
    id v58 = *(void *)(v0 + 192);
    id v59 = *(void *)(v0 + 200);
    uint64_t v56 = *(void *)(v0 + 176);
    Swift::String v55 = *(void *)(v0 + 168);
    sub_100013044(*(void *)(v48 + 56) + 40 * v8, (uint64_t)v50);
    uint64_t v17 = type metadata accessor for TaskPriority(0LL);
    uint64_t v18 = *(void *)(v17 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v13, 1LL, 1LL, v17);
    sub_100012EC0(v50, (uint64_t)v49);
    uint64_t v19 = v14;
    uint64_t v20 = v15;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v19, v16, v15);
    uint64_t v21 = *(unsigned __int8 *)(v47 + 80);
    uint64_t v22 = (v21 + 88) & ~v21;
    uint64_t v23 = (v46 + v22) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v24 = (void *)swift_allocObject(&unk_1009413A0, v23 + 24, v21 | 7);
    v24[2] = 0LL;
    id v25 = v24 + 2;
    v24[3] = 0LL;
    sub_100012EC0(v49, (uint64_t)(v24 + 4));
    v24[9] = v55;
    v24[10] = v56;
    uint64_t v26 = v18;
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))((char *)v24 + v22, v53, v20);
    uint64_t v27 = (char *)v24 + v23;
    void *v27 = v57;
    *((void *)v27 + 1) = v58;
    *((void *)v27 + 2) = v59;
    sub_10015F85C(v54, v60);
    LODWORD(v18) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v60, 1LL, v17);
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v59);
    uint64_t v29 = *(void *)(v0 + 240);
    if ((_DWORD)v18 == 1)
    {
      sub_100015794(*(void *)(v0 + 240), &qword_1009A9BF0);
      uint64_t v30 = 0LL;
    }

    else
    {
      char v31 = TaskPriority.rawValue.getter(v28);
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v29, v17);
      uint64_t v30 = v31;
    }

    uint64_t v6 = v51;
    __int16 v1 = v52;
    char v32 = *v25;
    if (*v25)
    {
      id v33 = v24[3];
      uint64_t ObjectType = swift_getObjectType(*v25);
      swift_unknownObjectRetain(v32);
      uint64_t v35 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v33);
      unint64_t v37 = v36;
      swift_unknownObjectRelease(v32);
    }

    else
    {
      uint64_t v35 = 0LL;
      unint64_t v37 = 0LL;
    }

    uint64_t v38 = **(void **)(v0 + 152);
    uint64_t v39 = swift_allocObject(&unk_1009413C8, 32LL, 7LL);
    *(void *)(v39 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = &unk_1009A2C38;
    *(void *)(v39 + 24) = v24;
    unint64_t v40 = v37 | v35;
    if (v37 | v35)
    {
      unint64_t v40 = v0 + 96;
      *(void *)(v0 + 96) = 0LL;
      *(void *)(v0 + 104) = 0LL;
      *(void *)(v0 + 112) = v35;
      *(void *)(v0 + 120) = v37;
    }

    uint64_t v7 = *(void *)(v0 + 248);
    *(void *)(v0 + 128) = 1LL;
    *(void *)(v0 + 136) = v40;
    *(void *)(v0 + 144) = v38;
    swift_task_create(v30 | 0x3100, v0 + 128, (char *)&type metadata for () + 8, &unk_1009A2C40, v39);
    swift_release();
    sub_100015794(v7, &qword_1009A9BF0);
  }

  unint64_t v12 = v1 + 5;
  if (v1 + 5 >= v45)
  {
LABEL_31:
    uint64_t v41 = *(void *)(v0 + 248);
    uint64_t v43 = *(void *)(v0 + 232);
    uint64_t v42 = *(void *)(v0 + 240);
    swift_release();
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    (*(void (**)(void))(v0 + 8))();
    return;
  }

  char v10 = *(void *)(v44 + 8 * v12);
  if (v10)
  {
    unint64_t v11 = v1 + 5;
    goto LABEL_22;
  }

  while (1)
  {
    unint64_t v11 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      break;
    }
    if (v11 >= v45) {
      goto LABEL_31;
    }
    char v10 = *(void *)(v44 + 8 * v11);
    ++v12;
    if (v10) {
      goto LABEL_22;
    }
  }

    id v47 = (v10 - 1) & v10;
    uint64_t v48 = v11;
    unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_23:
    char v13 = *(void *)(v0 + 272);
    uint64_t v15 = *(void *)(v0 + 248);
    uint64_t v14 = *(void *)(v0 + 256);
    unint64_t v16 = *(void *)(v0 + 232);
    uint64_t v57 = *(void *)(v0 + 224);
    id v58 = *(void *)(v0 + 264);
    Swift::String v55 = *(void *)(v0 + 208);
    uint64_t v56 = *(void *)(v0 + 216);
    uint64_t v17 = *(void *)(v0 + 192);
    id v53 = *(void *)(v0 + 200);
    uint64_t v52 = *(_BYTE *)(v0 + 289);
    uint64_t v18 = *(void *)(v0 + 176);
    uint64_t v51 = *(void *)(v0 + 184);
    os_log_type_t v50 = *(_BYTE *)(v0 + 288);
    uint64_t v49 = *(void *)(v0 + 168);
    sub_100013044(*(void *)(v43 + 56) + 40 * v8, (uint64_t)v45);
    uint64_t v19 = type metadata accessor for TaskPriority(0LL);
    uint64_t v20 = *(void *)(v19 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v13, 1LL, 1LL, v19);
    sub_100012EC0(v45, (uint64_t)v44);
    sub_10001DC4C(v16, v14, type metadata accessor for MessagingMessageContext);
    uint64_t v21 = *(unsigned __int8 *)(v42 + 80);
    uint64_t v22 = (v21 + 152) & ~v21;
    uint64_t v23 = swift_allocObject(&unk_100941328, v22 + v15, v21 | 7);
    *(void *)(v23 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = 0LL;
    uint64_t v46 = (void *)(v23 + 16);
    *(void *)(v23 + 24) = 0LL;
    sub_100012EC0(v44, v23 + 32);
    *(void *)(v23 + 72) = v49;
    *(void *)(v23 + 80) = v18;
    *(_BYTE *)(v23 + 88) = v50;
    *(void *)(v23 + 96) = v51;
    *(void *)(v23 + 104) = v17;
    *(_BYTE *)(v23 + 112) = v52;
    *(void *)(v23 + 120) = v53;
    *(void *)(v23 + 128) = v55;
    *(void *)(v23 + 136) = v56;
    *(void *)(v23 + 144) = v57;
    sub_10002218C(v14, v23 + v22, type metadata accessor for MessagingMessageContext);
    sub_10015F85C(v13, v58);
    uint64_t v54 = v20;
    LODWORD(v20) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v58, 1LL, v19);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v17);
    sub_10001736C(v55, v56);
    swift_bridgeObjectRetain(v57);
    id v25 = *(void *)(v0 + 264);
    if ((_DWORD)v20 == 1)
    {
      sub_100015794(*(void *)(v0 + 264), &qword_1009A9BF0);
      uint64_t v26 = 0LL;
    }

    else
    {
      uint64_t v27 = TaskPriority.rawValue.getter(v24);
      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v25, v19);
      uint64_t v26 = v27;
    }

    uint64_t v6 = v47;
    __int16 v1 = v48;
    uint64_t v28 = *v46;
    if (*v46)
    {
      uint64_t v29 = *(void *)(v23 + 24);
      uint64_t ObjectType = swift_getObjectType(*v46);
      swift_unknownObjectRetain(v28);
      char v31 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v29);
      id v33 = v32;
      swift_unknownObjectRelease(v28);
    }

    else
    {
      char v31 = 0LL;
      id v33 = 0LL;
    }

    uint64_t v34 = **(void **)(v0 + 152);
    uint64_t v35 = swift_allocObject(&unk_100941350, 32LL, 7LL);
    *(void *)(v35 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = &unk_1009A2C00;
    *(void *)(v35 + 24) = v23;
    uint64_t v36 = v33 | v31;
    if (v33 | v31)
    {
      uint64_t v36 = v0 + 96;
      *(void *)(v0 + 96) = 0LL;
      *(void *)(v0 + 104) = 0LL;
      *(void *)(v0 + 112) = v31;
      *(void *)(v0 + 120) = v33;
    }

    uint64_t v7 = *(void *)(v0 + 272);
    *(void *)(v0 + 128) = 1LL;
    *(void *)(v0 + 136) = v36;
    *(void *)(v0 + 144) = v34;
    swift_task_create(v26 | 0x3100, v0 + 128, (char *)&type metadata for () + 8, &unk_1009A2C08, v35);
    swift_release();
    sub_100015794(v7, &qword_1009A9BF0);
  }

  unint64_t v12 = v1 + 5;
  if (v1 + 5 >= v41)
  {
LABEL_31:
    unint64_t v37 = *(void *)(v0 + 272);
    uint64_t v39 = *(void *)(v0 + 256);
    uint64_t v38 = *(void *)(v0 + 264);
    swift_release();
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    (*(void (**)(void))(v0 + 8))();
    return;
  }

  char v10 = *(void *)(v40 + 8 * v12);
  if (v10)
  {
    unint64_t v11 = v1 + 5;
    goto LABEL_22;
  }

  while (1)
  {
    unint64_t v11 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      break;
    }
    if (v11 >= v41) {
      goto LABEL_31;
    }
    char v10 = *(void *)(v40 + 8 * v11);
    ++v12;
    if (v10) {
      goto LABEL_22;
    }
  }

    uint64_t v42 = (v12 - 1) & v12;
    id v9 = v13;
    char v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
    uint64_t v15 = *(void *)(v0 + 176);
    unint64_t v16 = *(void *)(v0 + 184);
    uint64_t v17 = *(void *)(v0 + 168);
    sub_100013044(*(void *)(v39 + 56) + 40 * v10, (uint64_t)v41);
    uint64_t v18 = type metadata accessor for TaskPriority(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v16, 1LL, 1LL, v18);
    sub_100012EC0(v41, (uint64_t)v40);
    uint64_t v20 = (void *)swift_allocObject(&unk_1009412B0, 80LL, 7LL);
    void v20[2] = 0LL;
    uint64_t v21 = v20 + 2;
    v20[3] = 0LL;
    sub_100012EC0(v40, (uint64_t)(v20 + 4));
    v20[9] = v17;
    sub_10015F85C(v16, v15);
    LODWORD(v15) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v15, 1LL, v18);
    swift_bridgeObjectRetain(v17);
    uint64_t v23 = *(void *)(v0 + 176);
    if ((_DWORD)v15 == 1)
    {
      sub_100015794(*(void *)(v0 + 176), &qword_1009A9BF0);
      unint64_t v24 = 0LL;
    }

    else
    {
      id v25 = TaskPriority.rawValue.getter(v22);
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v23, v18);
      unint64_t v24 = v25;
    }

    __int16 v1 = v9;
    uint64_t v6 = v42;
    uint64_t v26 = *v21;
    if (*v21)
    {
      uint64_t v27 = v20[3];
      uint64_t ObjectType = swift_getObjectType(*v21);
      swift_unknownObjectRetain(v26);
      uint64_t v29 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v27);
      char v31 = v30;
      swift_unknownObjectRelease(v26);
    }

    else
    {
      uint64_t v29 = 0LL;
      char v31 = 0LL;
    }

    char v32 = **(void **)(v0 + 152);
    id v33 = swift_allocObject(&unk_1009412D8, 32LL, 7LL);
    *(void *)(v33 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = &unk_1009A2BC8;
    *(void *)(v33 + 24) = v20;
    uint64_t v34 = v31 | v29;
    if (v31 | v29)
    {
      uint64_t v34 = v0 + 96;
      *(void *)(v0 + 96) = 0LL;
      *(void *)(v0 + 104) = 0LL;
      *(void *)(v0 + 112) = v29;
      *(void *)(v0 + 120) = v31;
    }

    uint64_t v7 = *(void *)(v0 + 184);
    *(void *)(v0 + 128) = 1LL;
    *(void *)(v0 + 136) = v34;
    *(void *)(v0 + 144) = v32;
    swift_task_create(v24 | 0x3100, v0 + 128, (char *)&type metadata for () + 8, &unk_1009A2BD0, v33);
    swift_release();
    sub_100015794(v7, &qword_1009A9BF0);
  }

  uint64_t v14 = v1 + 5;
  if (v1 + 5 >= v38)
  {
LABEL_31:
    uint64_t v35 = *(void *)(v0 + 184);
    uint64_t v36 = *(void *)(v0 + 176);
    swift_release();
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    (*(void (**)(void))(v0 + 8))();
    return;
  }

  unint64_t v12 = *(void *)(v37 + 8 * v14);
  if (v12)
  {
    char v13 = v1 + 5;
    goto LABEL_22;
  }

  while (1)
  {
    char v13 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v13 >= v38) {
      goto LABEL_31;
    }
    unint64_t v12 = *(void *)(v37 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_22;
    }
  }

    uint64_t v42 = (v12 - 1) & v12;
    id v9 = v13;
    char v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
    uint64_t v15 = *(void *)(v0 + 176);
    unint64_t v16 = *(void *)(v0 + 184);
    uint64_t v17 = *(void *)(v0 + 168);
    sub_100013044(*(void *)(v39 + 56) + 40 * v10, (uint64_t)v41);
    uint64_t v18 = type metadata accessor for TaskPriority(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v16, 1LL, 1LL, v18);
    sub_100012EC0(v41, (uint64_t)v40);
    uint64_t v20 = (void *)swift_allocObject(&unk_100941238, 80LL, 7LL);
    void v20[2] = 0LL;
    uint64_t v21 = v20 + 2;
    v20[3] = 0LL;
    sub_100012EC0(v40, (uint64_t)(v20 + 4));
    v20[9] = v17;
    sub_10015F85C(v16, v15);
    LODWORD(v15) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v15, 1LL, v18);
    swift_bridgeObjectRetain(v17);
    uint64_t v23 = *(void *)(v0 + 176);
    if ((_DWORD)v15 == 1)
    {
      sub_100015794(*(void *)(v0 + 176), &qword_1009A9BF0);
      unint64_t v24 = 0LL;
    }

    else
    {
      id v25 = TaskPriority.rawValue.getter(v22);
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v23, v18);
      unint64_t v24 = v25;
    }

    __int16 v1 = v9;
    uint64_t v6 = v42;
    uint64_t v26 = *v21;
    if (*v21)
    {
      uint64_t v27 = v20[3];
      uint64_t ObjectType = swift_getObjectType(*v21);
      swift_unknownObjectRetain(v26);
      uint64_t v29 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v27);
      char v31 = v30;
      swift_unknownObjectRelease(v26);
    }

    else
    {
      uint64_t v29 = 0LL;
      char v31 = 0LL;
    }

    char v32 = **(void **)(v0 + 152);
    id v33 = swift_allocObject(&unk_100941260, 32LL, 7LL);
    *(void *)(v33 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = &unk_1009A2B90;
    *(void *)(v33 + 24) = v20;
    uint64_t v34 = v31 | v29;
    if (v31 | v29)
    {
      uint64_t v34 = v0 + 96;
      *(void *)(v0 + 96) = 0LL;
      *(void *)(v0 + 104) = 0LL;
      *(void *)(v0 + 112) = v29;
      *(void *)(v0 + 120) = v31;
    }

    uint64_t v7 = *(void *)(v0 + 184);
    *(void *)(v0 + 128) = 1LL;
    *(void *)(v0 + 136) = v34;
    *(void *)(v0 + 144) = v32;
    swift_task_create(v24 | 0x3100, v0 + 128, (char *)&type metadata for () + 8, &unk_1009A2B98, v33);
    swift_release();
    sub_100015794(v7, &qword_1009A9BF0);
  }

  uint64_t v14 = v1 + 5;
  if (v1 + 5 >= v38)
  {
LABEL_31:
    uint64_t v35 = *(void *)(v0 + 184);
    uint64_t v36 = *(void *)(v0 + 176);
    swift_release();
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    (*(void (**)(void))(v0 + 8))();
    return;
  }

  unint64_t v12 = *(void *)(v37 + 8 * v14);
  if (v12)
  {
    char v13 = v1 + 5;
    goto LABEL_22;
  }

  while (1)
  {
    char v13 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v13 >= v38) {
      goto LABEL_31;
    }
    unint64_t v12 = *(void *)(v37 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_22;
    }
  }

    uint64_t v48 = (v10 - 1) & v10;
    uint64_t v49 = v11;
    unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_23:
    char v13 = *(void *)(v0 + 232);
    os_log_type_t v50 = v13;
    uint64_t v14 = *(void *)(v0 + 216);
    uint64_t v54 = *(void *)(v0 + 192);
    Swift::String v55 = *(void *)(v0 + 224);
    uint64_t v51 = *(_BYTE *)(v0 + 248);
    uint64_t v15 = *(void *)(v0 + 168);
    uint64_t v52 = *(void *)(v0 + 176);
    id v53 = *(void *)(v0 + 184);
    sub_100013044(*(void *)(v45 + 56) + 40 * v8, (uint64_t)v47);
    unint64_t v16 = type metadata accessor for TaskPriority(0LL);
    uint64_t v17 = *(void *)(v16 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v13, 1LL, 1LL, v16);
    sub_100012EC0(v47, (uint64_t)v46);
    sub_10001DC4C(v15, v14, type metadata accessor for BeaconSharingSessionContext);
    uint64_t v18 = *(unsigned __int8 *)(v44 + 80);
    uint64_t v19 = (v18 + 72) & ~v18;
    uint64_t v20 = (v43 + v19) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v21 = (v20 + 31) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v22 = swift_allocObject(&unk_1009411C0, v21 + 8, v18 | 7);
    *(void *)(v22 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = 0LL;
    uint64_t v23 = (void *)(v22 + 16);
    *(void *)(v22 + 24) = 0LL;
    sub_100012EC0(v46, v22 + 32);
    sub_10002218C(v14, v22 + v19, type metadata accessor for BeaconSharingSessionContext);
    unint64_t v24 = v22 + v20;
    *(_BYTE *)unint64_t v24 = v51;
    *(void *)(v24 + 8) = v52;
    *(void *)(v24 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v53;
    *(void *)(v22 + v21) = v54;
    sub_10015F85C(v50, v55);
    LODWORD(v21) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v55, 1LL, v16);
    swift_bridgeObjectRetain(v53);
    id v25 = swift_retain();
    uint64_t v26 = *(void *)(v0 + 224);
    if ((_DWORD)v21 == 1)
    {
      sub_100015794(*(void *)(v0 + 224), &qword_1009A9BF0);
      uint64_t v27 = 0LL;
    }

    else
    {
      uint64_t v28 = TaskPriority.rawValue.getter(v25);
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v26, v16);
      uint64_t v27 = v28;
    }

    uint64_t v6 = v48;
    __int16 v1 = v49;
    uint64_t v29 = *v23;
    if (*v23)
    {
      uint64_t v30 = *(void *)(v22 + 24);
      uint64_t ObjectType = swift_getObjectType(*v23);
      swift_unknownObjectRetain(v29);
      char v32 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v30);
      uint64_t v34 = v33;
      swift_unknownObjectRelease(v29);
    }

    else
    {
      char v32 = 0LL;
      uint64_t v34 = 0LL;
    }

    uint64_t v35 = **(void **)(v0 + 152);
    uint64_t v36 = swift_allocObject(&unk_1009411E8, 32LL, 7LL);
    *(void *)(v36 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = &unk_1009A2B58;
    *(void *)(v36 + 24) = v22;
    unint64_t v37 = v34 | v32;
    if (v34 | v32)
    {
      unint64_t v37 = v0 + 96;
      *(void *)(v0 + 96) = 0LL;
      *(void *)(v0 + 104) = 0LL;
      *(void *)(v0 + 112) = v32;
      *(void *)(v0 + 120) = v34;
    }

    uint64_t v7 = *(void *)(v0 + 232);
    *(void *)(v0 + 128) = 1LL;
    *(void *)(v0 + 136) = v37;
    *(void *)(v0 + 144) = v35;
    swift_task_create(v27 | 0x3100, v0 + 128, (char *)&type metadata for () + 8, &unk_1009A2B60, v36);
    swift_release();
    sub_100015794(v7, &qword_1009A9BF0);
  }

  unint64_t v12 = v1 + 5;
  if (v1 + 5 >= v42)
  {
LABEL_31:
    uint64_t v38 = *(void *)(v0 + 232);
    unint64_t v40 = *(void *)(v0 + 216);
    uint64_t v39 = *(void *)(v0 + 224);
    swift_release();
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    (*(void (**)(void))(v0 + 8))();
    return;
  }

  char v10 = *(void *)(v41 + 8 * v12);
  if (v10)
  {
    unint64_t v11 = v1 + 5;
    goto LABEL_22;
  }

  while (1)
  {
    unint64_t v11 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      break;
    }
    if (v11 >= v42) {
      goto LABEL_31;
    }
    char v10 = *(void *)(v41 + 8 * v11);
    ++v12;
    if (v10) {
      goto LABEL_22;
    }
  }

    uint64_t v42 = (v12 - 1) & v12;
    id v9 = v13;
    char v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
    uint64_t v15 = *(void *)(v0 + 176);
    unint64_t v16 = *(void *)(v0 + 184);
    uint64_t v17 = *(void *)(v0 + 168);
    sub_100013044(*(void *)(v39 + 56) + 40 * v10, (uint64_t)v41);
    uint64_t v18 = type metadata accessor for TaskPriority(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v16, 1LL, 1LL, v18);
    sub_100012EC0(v41, (uint64_t)v40);
    uint64_t v20 = (void *)swift_allocObject(&unk_100941148, 80LL, 7LL);
    void v20[2] = 0LL;
    uint64_t v21 = v20 + 2;
    v20[3] = 0LL;
    sub_100012EC0(v40, (uint64_t)(v20 + 4));
    v20[9] = v17;
    sub_10015F85C(v16, v15);
    LODWORD(v15) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v15, 1LL, v18);
    uint64_t v22 = swift_retain();
    uint64_t v23 = *(void *)(v0 + 176);
    if ((_DWORD)v15 == 1)
    {
      sub_100015794(*(void *)(v0 + 176), &qword_1009A9BF0);
      unint64_t v24 = 0LL;
    }

    else
    {
      id v25 = TaskPriority.rawValue.getter(v22);
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v23, v18);
      unint64_t v24 = v25;
    }

    __int16 v1 = v9;
    uint64_t v6 = v42;
    uint64_t v26 = *v21;
    if (*v21)
    {
      uint64_t v27 = v20[3];
      uint64_t ObjectType = swift_getObjectType(*v21);
      swift_unknownObjectRetain(v26);
      uint64_t v29 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v27);
      char v31 = v30;
      swift_unknownObjectRelease(v26);
    }

    else
    {
      uint64_t v29 = 0LL;
      char v31 = 0LL;
    }

    char v32 = **(void **)(v0 + 152);
    id v33 = swift_allocObject(&unk_100941170, 32LL, 7LL);
    *(void *)(v33 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = &unk_1009A2B28;
    *(void *)(v33 + 24) = v20;
    uint64_t v34 = v31 | v29;
    if (v31 | v29)
    {
      uint64_t v34 = v0 + 96;
      *(void *)(v0 + 96) = 0LL;
      *(void *)(v0 + 104) = 0LL;
      *(void *)(v0 + 112) = v29;
      *(void *)(v0 + 120) = v31;
    }

    uint64_t v7 = *(void *)(v0 + 184);
    *(void *)(v0 + 128) = 1LL;
    *(void *)(v0 + 136) = v34;
    *(void *)(v0 + 144) = v32;
    swift_task_create(v24 | 0x3100, v0 + 128, (char *)&type metadata for () + 8, &unk_1009AC110, v33);
    swift_release();
    sub_100015794(v7, &qword_1009A9BF0);
  }

  uint64_t v14 = v1 + 5;
  if (v1 + 5 >= v38)
  {
LABEL_31:
    uint64_t v35 = *(void *)(v0 + 184);
    uint64_t v36 = *(void *)(v0 + 176);
    swift_release();
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    (*(void (**)(void))(v0 + 8))();
    return;
  }

  unint64_t v12 = *(void *)(v37 + 8 * v14);
  if (v12)
  {
    char v13 = v1 + 5;
    goto LABEL_22;
  }

  while (1)
  {
    char v13 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v13 >= v38) {
      goto LABEL_31;
    }
    unint64_t v12 = *(void *)(v37 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_22;
    }
  }

    char v13 = (v23 - 1) & v23;
  }

  unint64_t v24 = v22 + 4;
  if (v24 >= v14)
  {
LABEL_29:
    swift_release();
    return;
  }

  uint64_t v23 = *(void *)(v10 + 8 * v24);
  if (v23)
  {
    uint64_t v15 = v24;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v15 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v15 >= v14) {
      goto LABEL_29;
    }
    uint64_t v23 = *(void *)(v10 + 8 * v15);
    ++v24;
    if (v23) {
      goto LABEL_22;
    }
  }

    uint64_t v5 = (v12 - 1) & v12;
    id v9 = __clz(__rbit64(v12)) + (v7 << 6);
LABEL_5:
    swift_bridgeObjectRetain(*(void *)(*(void *)(a1 + 56) + 8 * v9));
    sub_100184B3C(v10);
  }

  char v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_23:
    swift_release();
    return;
  }

  unint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    uint64_t v7 = v13;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v7 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v7);
    ++v13;
    if (v12) {
      goto LABEL_22;
    }
  }

    uint64_t v17 = (v22 - 1) & v22;
  }

  uint64_t v23 = v21 + 4;
  if (v23 >= v32)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v16;
  }

  uint64_t v22 = *(void *)(v31 + 8 * v23);
  if (v22)
  {
    unint64_t v11 = v23;
    goto LABEL_22;
  }

  while (1)
  {
    unint64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v11 >= v32) {
      goto LABEL_29;
    }
    uint64_t v22 = *(void *)(v31 + 8 * v11);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }

  swift_release();
  os_log_t v103 = _swiftEmptyArrayStorage;
  uint64_t v44 = 1LL << *((_BYTE *)v28 + 32);
  uint64_t v45 = -1LL;
  if (v44 < 64) {
    uint64_t v45 = ~(-1LL << v44);
  }
  uint64_t v46 = v45 & v28[8];
  id v47 = (unint64_t)(v44 + 63) >> 6;
  uint64_t v48 = swift_bridgeObjectRetain(v28);
  uint64_t v49 = 0LL;
  os_log_type_t v50 = (uint64_t)v91;
  if (!v46) {
    goto LABEL_26;
  }
  while (2)
  {
    uint64_t v51 = __clz(__rbit64(v46));
    v46 &= v46 - 1;
    uint64_t v52 = v51 | (v49 << 6);
LABEL_39:
    (*(void (**)(uint64_t, unint64_t, uint64_t, __n128))(v101 + 16))( v50,  v28[6] + *(void *)(v101 + 72) * v52,  v102,  v48);
    Swift::String v55 = *(void *)(v28[7] + 8 * v52);
    *(void *)(v50 + *(int *)(v95 + 48)) = v55;
    sub_100015750(v50, (uint64_t)v41, &qword_1009A6610);
    swift_bridgeObjectRetain(v55);
    sub_1002331F8(&v103, (uint64_t)v41);
    sub_100015794((uint64_t)v41, &qword_1009A6610);
    if (v46) {
      continue;
    }
    break;
  }

    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v12 = __clz(__rbit64(v17)) + (v10 << 6);
LABEL_5:
    char v13 = *(void *)(a1 + 48);
    uint64_t v14 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL))( v4,  v13 + *(void *)(*(void *)(v14 - 8) + 72LL) * v12,  v14);
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8 * v12);
    *(void *)&v4[*(int *)(v2 + 48)] = v15;
    swift_bridgeObjectRetain_n(v15, 2LL);
    sub_1003497E0((uint64_t)v4);
    sub_100185648(v15);
  }

  uint64_t v18 = v16 + 4;
  if (v18 >= v9)
  {
LABEL_23:
    swift_release(a1);
    return;
  }

  uint64_t v17 = *(void *)(v5 + 8 * v18);
  if (v17)
  {
    char v10 = v18;
    goto LABEL_22;
  }

  while (1)
  {
    char v10 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v10 >= v9) {
      goto LABEL_23;
    }
    uint64_t v17 = *(void *)(v5 + 8 * v10);
    ++v18;
    if (v17) {
      goto LABEL_22;
    }
  }

    uint64_t v44 = (v11 - 1) & v11;
    uint64_t v43 = v12;
    id v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_23:
    uint64_t v15 = *(void *)(v0 + 136);
    uint64_t v14 = *(void *)(v0 + 144);
    uint64_t v17 = *(void *)(v0 + 120);
    unint64_t v16 = *(void *)(v0 + 128);
    uint64_t v18 = *(void *)(*(void *)(v41 + 56) + 8 * v9);
    uint64_t v19 = type metadata accessor for TaskPriority(0LL);
    uint64_t v20 = *(void *)(v19 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v14, 1LL, 1LL, v19);
    uint64_t v21 = (void *)swift_allocObject(&unk_100956200, 56LL, 7LL);
    v21[2] = 0LL;
    uint64_t v42 = v21 + 2;
    _OWORD v21[3] = 0LL;
    v21[4] = v17;
    v21[5] = v16;
    v21[6] = v18;
    sub_10001581C(v14, v15, &qword_1009A9BF0);
    LODWORD(v15) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v15, 1LL, v19);
    swift_retain_n(v18, 2LL);
    uint64_t v22 = sub_10008699C(v17, v16);
    uint64_t v23 = *(void *)(v0 + 136);
    if ((_DWORD)v15 == 1)
    {
      sub_100015794(*(void *)(v0 + 136), &qword_1009A9BF0);
      unint64_t v24 = 0LL;
    }

    else
    {
      id v25 = TaskPriority.rawValue.getter(v22);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v23, v19);
      unint64_t v24 = v25;
    }

    uint64_t v6 = v43;
    uint64_t v26 = *v42;
    if (*v42)
    {
      uint64_t v27 = v21[3];
      uint64_t ObjectType = swift_getObjectType(*v42);
      swift_unknownObjectRetain(v26);
      uint64_t v29 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v27);
      char v31 = v30;
      swift_unknownObjectRelease(v26);
    }

    else
    {
      uint64_t v29 = 0LL;
      char v31 = 0LL;
    }

    char v32 = **(void **)(v0 + 104);
    id v33 = swift_allocObject(&unk_100956228, 32LL, 7LL);
    *(void *)(v33 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = &unk_1009AC248;
    *(void *)(v33 + 24) = v21;
    uint64_t v34 = v31 | v29;
    if (v31 | v29)
    {
      uint64_t v34 = v0 + 16;
      *(void *)(v0 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = 0LL;
      *(void *)(v0 + 24) = 0LL;
      *(void *)(v0 + 32) = v29;
      *(void *)(v0 + 40) = v31;
    }

    uint64_t v7 = *(void *)(v0 + 192);
    unint64_t v8 = *(void *)(v0 + 144);
    *(void *)(v0 + 72) = 1LL;
    *(void *)(v0 + 80) = v34;
    *(void *)(v0 + 88) = v32;
    swift_task_create(v24 | 0x3100, v0 + 72, v7, &unk_1009AC258, v33);
    swift_release();
    swift_release();
    sub_100015794(v8, &qword_1009A9BF0);
    uint64_t v5 = v44;
  }

  char v13 = v6 + 5;
  if (v6 + 5 >= v40)
  {
LABEL_31:
    uint64_t v35 = *(void **)(v0 + 104);
    swift_release();
    uint64_t v36 = sub_1004C6600(0, v38, 0, (unint64_t)_swiftEmptyArrayStorage);
    *(void *)(v0 + 264) = v36;
    *(void *)(v0 + 272) = *v35;
    swift_bridgeObjectRetain(v36);
    *(void *)(v0 + 280) = sub_1004E84E0(v37);
    swift_bridgeObjectRelease();
    swift_task_switch(sub_1003BD52C, 0LL, 0LL);
    return;
  }

  unint64_t v11 = *(void *)(v39 + 8 * v13);
  if (v11)
  {
    unint64_t v12 = v6 + 5;
    goto LABEL_22;
  }

  while (1)
  {
    unint64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v12 >= v40) {
      goto LABEL_31;
    }
    unint64_t v11 = *(void *)(v39 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_22;
    }
  }

          if (qword_10099B4F0 != -1) {
            swift_once(&qword_10099B4F0, sub_1004B82C0);
          }
          id v53 = *(void *)(v0 + 160);
          uint64_t v54 = *(void *)(v0 + 136);
          Swift::String v55 = type metadata accessor for Logger(0LL);
          sub_10000A720(v55, (uint64_t)qword_100A2AB30);
          uint64_t v56 = sub_10001DC4C(v53, v54, type metadata accessor for ObservedAdvertisement);
          uint64_t v57 = (os_log_s *)Logger.logObject.getter(v56);
          id v58 = static os_log_type_t.default.getter(v57);
          id v59 = os_log_type_enabled(v57, v58);
          uint64_t v60 = *(void *)(v0 + 136);
          if (v59)
          {
            os_log_type_t v61 = *(void *)(v0 + 112);
            BOOL v62 = *(void *)(v0 + 96);
            uint64_t v63 = swift_slowAlloc(22LL, -1LL);
            uint64_t v90 = swift_slowAlloc(32LL, -1LL);
            v91[0] = v90;
            *(_DWORD *)uint64_t v63 = 141558275;
            *(void *)(v0 + 32) = 1752392040LL;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v1, v0 + 40, v63 + 4, v63 + 12);
            *(_WORD *)(v63 + 12) = 2081;
            sub_10001581C(v60 + *(int *)(v61 + 52), v62, &qword_1009AA730);
            uint64_t v64 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
            uint64_t v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 48LL))(v62, 1LL, v64);
            uint64_t v66 = *(void *)(v0 + 96);
            if (v65 == 1)
            {
              unint64_t v67 = 0x6E776F6E6B6E55LL;
              sub_100015794(*(void *)(v0 + 96), &qword_1009AA730);
              uint64_t v68 = 0xE700000000000000LL;
            }

            else
            {
              id v69 = *(void *)(v0 + 72);
              uint64_t v70 = *(void *)(v0 + 80);
              unint64_t v71 = *(void *)(v0 + 64);
              (*(void (**)(uint64_t, void, uint64_t))(v69 + 16))(v70, *(void *)(v0 + 96), v71);
              os_log_t v72 = sub_100018C68(v66, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
              unint64_t v67 = UUID.uuidString.getter(v72);
              uint64_t v68 = v73;
              (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v70, v71);
            }

            uint64_t v74 = *(void *)(v0 + 136);
            *(void *)(v0 + 40) = sub_1003F11D4(v67, v68, v91);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v63 + 14, v63 + 22);
            swift_bridgeObjectRelease();
            sub_100018C68(v74, type metadata accessor for ObservedAdvertisement);
            _os_log_impl( (void *)&_mh_execute_header,  v57,  v58,  "Change detected in reconciled advt for %{private,mask.hash}s. Posting SPManagedCBPeripheralChanged.",  (uint8_t *)v63,  0x16u);
            swift_arrayDestroy(v90, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v90, -1LL, -1LL);
            swift_slowDealloc(v63, -1LL, -1LL);
          }

          else
          {
            sub_100018C68(*(void *)(v0 + 136), type metadata accessor for ObservedAdvertisement);
          }

          uint64_t v75 = (void *)SPManagedCBPeripheralChangedNotification;
          uint64_t v76 = type metadata accessor for DarwinNotificationHelper(0LL);
          swift_allocObject(v76, *(unsigned int *)(v76 + 48), *(unsigned __int16 *)(v76 + 52));
          unint64_t v40 = DarwinNotificationHelper.init(notificationName:rateLimit:)(v75, 0.0);
          dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0LL);
          sub_100018C68(*(void *)(v0 + 160), type metadata accessor for ObservedAdvertisement);
          goto LABEL_31;
        }

    if ((v23 & 0x400000000000LL) == 0)
    {
LABEL_12:
      if ((v23 & 0x20000000000000LL) == 0) {
        goto LABEL_13;
      }
      goto LABEL_24;
    }

    uint64_t v7 = (v12 - 1) & v12;
    char v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    uint64_t result = sub_1000BDCDC(&v14, *(void *)(*(void *)(v2 + 48) + 8 * v10));
  }

  char v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return v15;
  }

  unint64_t v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    uint64_t v3 = v13;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v3);
    ++v13;
    if (v12) {
      goto LABEL_22;
    }
  }

    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v11 = __clz(__rbit64(v17)) + (v3 << 6);
LABEL_5:
    unint64_t v12 = *(void *)(v2 + 48) + 24 * v11;
    char v13 = *(void *)(v12 + 8);
    uint64_t v14 = *(void *)(v12 + 16);
    uint64_t v15 = *(_BYTE *)v12;
    swift_bridgeObjectRetain(v14);
    sub_1000BDB08((uint64_t)&v19, v15, v13, v14);
    uint64_t result = swift_bridgeObjectRelease();
  }

  uint64_t v18 = v16 + 4;
  if (v18 >= v9)
  {
LABEL_23:
    swift_release();
    return v20;
  }

  uint64_t v17 = *(void *)(v5 + 8 * v18);
  if (v17)
  {
    uint64_t v3 = v18;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v3 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v3 >= v9) {
      goto LABEL_23;
    }
    uint64_t v17 = *(void *)(v5 + 8 * v3);
    ++v18;
    if (v17) {
      goto LABEL_22;
    }
  }

    id v47 = v93[14];
    uint64_t v48 = v93[12];
    v8[(v39 >> 6) + 8] |= 1LL << v39;
    uint64_t v4 = v88;
    v34(v8[6] + *(void *)(v88 + 72) * v39, v47, v48);
    *(void *)(v8[7] + 8 * v39) = v36;
    uint64_t v49 = v8[2];
    os_log_type_t v50 = __OFADD__(v49, 1LL);
    uint64_t v51 = v49 + 1;
    if (v50) {
      goto LABEL_43;
    }
    v8[2] = v51;
    goto LABEL_4;
  }

  uint64_t v57 = v0[25];
  unint64_t v8 = _swiftEmptyDictionarySingleton;
LABEL_35:
  swift_bridgeObjectRelease();
  id v58 = sub_1004B959C((uint64_t)v8);
  swift_bridgeObjectRelease();
  id v59 = type metadata accessor for PropertyListEncoder(0LL);
  uint64_t v60 = swift_allocObject(v59, *(unsigned int *)(v59 + 48), *(unsigned __int16 *)(v59 + 52));
  PropertyListEncoder.init()(v60);
  v0[5] = v58;
  os_log_type_t v61 = sub_100004AEC(&qword_1009B0638);
  BOOL v62 = sub_1004BCF88();
  uint64_t v63 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 5, v61, v62);
  if (v57)
  {
    swift_release();
    swift_release();
    uint64_t v65 = v0[20];
    uint64_t v66 = v0[17];
    uint64_t v68 = v0[14];
    unint64_t v67 = v0[15];
    id v69 = v0[11];
    swift_task_dealloc(v0[21]);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    uint64_t v70 = (uint64_t (*)(void))v0[1];
  }

  else
  {
    unint64_t v71 = v63;
    os_log_t v72 = v64;
    uint64_t v74 = v0[10];
    uint64_t v73 = v0[11];
    uint64_t v75 = v0[9];
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, void, uint64_t))(v74 + 104))( v73,  enum case for StateCaptureDateType.serialized(_:),  v75);
    StateCaptureStateData.init(type:title:data:)(v73, 0x4D636E795379654BLL, 0xEF61746164617465LL, v71, v72);
    uint64_t v76 = v93[21];
    unint64_t v77 = v93[20];
    uint64_t v78 = v93[17];
    uint64_t v79 = v93[15];
    char v80 = v93[14];
    uint64_t v81 = v93[11];
    uint64_t v82 = v93[6];
    os_log_type_t v83 = type metadata accessor for StateCaptureStateData(0LL);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v83 - 8) + 56LL))(v82, 0LL, 1LL, v83);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    uint64_t v70 = (uint64_t (*)(void))v93[1];
  }

  return v70();
}

      if (++v23 == v123)
      {
        swift_release_n(_swiftEmptyArrayStorage, 2LL);
        uint64_t v105 = v114;
        uint64_t v104 = v115;
        uint64_t v107 = v111;
        uint64_t v106 = v112;
        uint64_t v108 = v113;
        goto LABEL_94;
      }
    }
  }

  swift_release();
  uint64_t v107 = 0LL;
  unint64_t v24 = 0LL;
  uint64_t v108 = 0LL;
  uint64_t v104 = 0LL;
  uint64_t v106 = 0LL;
  uint64_t v105 = 0LL;
LABEL_94:
  v0[2] = v105;
  v0[3] = v106;
  v0[4] = v104;
  v0[5] = v108;
  v0[6] = v24;
  v0[7] = v107;
  uint64_t v109 = (void *)swift_task_alloc(dword_10099CEB4);
  v0[66] = v109;
  *uint64_t v109 = v0;
  v109[1] = sub_1004F6180;
  sub_10001B754((uint64_t)(v0 + 2));
}

    uint64_t v34 = sub_100004AEC(&qword_1009B2C70);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56LL))(v15, 1LL, 1LL, v34);
    uint64_t v84 = 0LL;
LABEL_23:
    sub_100015750((uint64_t)v15, (uint64_t)v17, &qword_1009B2C68);
    uint64_t v35 = sub_100004AEC(&qword_1009B2C70);
    if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48LL))(v17, 1LL, v35) == 1)
    {
      swift_release(v72);
      return (uint64_t)v88;
    }

    os_log_type_t v83 = *v17;
    uint64_t v36 = (uint64_t)v17 + *(int *)(v35 + 48);
    unint64_t v37 = v78;
    uint64_t v38 = *(void *)(v81 + 136);
    uint64_t v39 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v37, v36 + *(int *)(v39 + 20), v25);
    unint64_t v40 = v5;
    uint64_t v41 = v24;
    uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
    uint64_t v43 = v79;
    v42(v40, v36 + *(int *)(v39 + 24), v79);
    uint64_t v44 = sub_100018C68(v36, type metadata accessor for CloudKitChangeSet.TombstoneInfo);
    __chkstk_darwin(v44);
    *(&v69 - 4) = v38;
    *(&v69 - 3) = (int64_t)v37;
    *(&v69 - 2) = (int64_t)v40;
    uint64_t v45 = v43;
    uint64_t v46 = v87;
    id v47 = v89;
    OS_dispatch_queue.sync<A>(execute:)(sub_100154730, &v69 - 6, v80);
    if (v47)
    {

      (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v45);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v37, v25);
      swift_release(v72);
      uint64_t v65 = (uint64_t)v88;
      sub_1005708C4((uint64_t)v88);
      uint64_t v66 = swift_bridgeObjectRelease();
      swift_willThrow(v66);
      return v65;
    }

    uint64_t v89 = 0LL;
    (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v45);
    uint64_t v48 = v37;
    uint64_t v49 = v25;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v48, v25);
    sub_10001DC4C(v46, v86, type metadata accessor for BeaconStoreFileRecord);
    os_log_type_t v50 = v83;
    uint64_t v51 = (uint64_t)v88;
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v88);
    uint64_t v90 = (void *)v51;
    uint64_t v54 = sub_10030D338((uint64_t)v50);
    Swift::String v55 = *(void *)(v51 + 16);
    uint64_t v56 = (v53 & 1) == 0;
    uint64_t v57 = v55 + v56;
    if (__OFADD__(v55, v56)) {
      break;
    }
    id v58 = v53;
    if (*(void *)(v51 + 24) >= v57)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v23 = v90;
        if ((v53 & 1) != 0) {
          goto LABEL_4;
        }
      }

      else
      {
        sub_10006753C();
        uint64_t v23 = v90;
        if ((v58 & 1) != 0) {
          goto LABEL_4;
        }
      }
    }

    else
    {
      sub_100054EF8(v57, isUniquelyReferenced_nonNull_native);
      id v59 = sub_10030D338((uint64_t)v50);
      if ((v58 & 1) != (v60 & 1)) {
        goto LABEL_51;
      }
      uint64_t v54 = v59;
      uint64_t v23 = v90;
      if ((v58 & 1) != 0)
      {
LABEL_4:
        sub_10006A5A4(v86, v23[7] + *(void *)(v76 + 72) * v54, type metadata accessor for BeaconStoreFileRecord);
        uint64_t v3 = v77;
        goto LABEL_5;
      }
    }

    v23[(v54 >> 6) + 8] |= 1LL << v54;
    *(void *)(v23[6] + 8 * v54) = v50;
    sub_10002218C(v86, v23[7] + *(void *)(v76 + 72) * v54, type metadata accessor for BeaconStoreFileRecord);
    os_log_type_t v61 = v23[2];
    BOOL v62 = __OFADD__(v61, 1LL);
    uint64_t v63 = v61 + 1;
    uint64_t v3 = v77;
    if (v62) {
      goto LABEL_48;
    }
    v23[2] = v63;
    uint64_t v64 = v50;
LABEL_5:

    swift_bridgeObjectRelease();
    sub_100018C68(v87, type metadata accessor for BeaconStoreFileRecord);
    uint64_t v7 = v74;
    uint64_t v5 = v75;
    uint64_t v6 = v49;
    uint64_t v15 = v73;
    uint64_t v17 = v82;
    uint64_t v21 = v84;
    uint64_t v22 = v85;
  }

  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  uint64_t v68 = sub_100022898(0LL, &qword_10099E510, &OBJC_CLASS___CKRecordID_ptr);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v68);
  __break(1u);
  return result;
}

  swift_getErrorValue(a2, v71, v70);
  if (Error.code.getter(v70[1], v70[2]) != 4) {
    goto LABEL_10;
  }
  unint64_t v37 = 1;
LABEL_11:
  type metadata accessor for Transaction(0LL);
  uint64_t v38 = swift_allocObject(&unk_100965E60, 41LL, 7LL);
  *(void *)(v38 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v35;
  *(_BYTE *)(v38 + 24) = v19;
  *(void *)(v38 + 32) = a2;
  *(_BYTE *)(v38 + 40) = v37;
  swift_errorRetain(a2);
  swift_retain();
  static Transaction.asyncTask(name:block:)("PlayAnalytics", 13LL, 2LL, &unk_1009B3D98, v38);
  swift_release();
  swift_beginAccess(v36, v76, 0LL, 0LL);
  Strong = swift_weakLoadStrong(v36);
  if (!Strong)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56))(v11, 1LL, 1LL, v33);
    goto LABEL_17;
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))( v11,  Strong + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_beaconIdentifier,  v33);
  swift_release();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v11, 0LL, 1LL, v33);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v11, 1LL, v33) == 1)
  {
LABEL_17:
    sub_100015794((uint64_t)v11, &qword_10099D8A0);
    goto LABEL_18;
  }

  unint64_t v40 = (uint64_t)v54;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v54, v11, v33);
  swift_beginAccess(v36, v72, 0LL, 0LL);
  if (swift_weakLoadStrong(v36))
  {
    sub_1005A5A10(a2 == 0, v40, a2);
    swift_release();
  }

  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v40, v33);
LABEL_18:
  swift_beginAccess(v36, v75, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v36);
  if (result)
  {
    uint64_t v42 = *(id *)(result + 56);
    swift_release();
    aBlock[4] = sub_1005A6E4C;
    uint64_t aBlock[5] = v55;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    aBlock[3] = &unk_100965E78;
    uint64_t v43 = _Block_copy(aBlock);
    uint64_t v44 = swift_retain();
    uint64_t v45 = v56;
    static DispatchQoS.unspecified.getter(v44);
    uint64_t v73 = _swiftEmptyArrayStorage;
    uint64_t v46 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    id v47 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v48 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v49 = v59;
    os_log_type_t v50 = v47;
    uint64_t v51 = v61;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v73, v50, v48, v61, v46);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v45, v49, v43);
    _Block_release(v43);

    (*(void (**)(char *, uint64_t))(v60 + 8))(v49, v51);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v45, v58);
    return swift_release();
  }

  return result;
}

  Swift::String v55 = type metadata accessor for DateInterval(0LL);
  uint64_t v56 = *(void *)(v55 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v19, a2, v55);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(v19, 0LL, 1LL, v55);
LABEL_24:
  RequestBeacon = (int *)type metadata accessor for FetchRequestBeacon(0LL);
  uint64_t v60 = v67;
  sub_10060142C((uint64_t)v21, v67 + RequestBeacon[5]);
  sub_10060142C((uint64_t)v19, v60 + RequestBeacon[6]);
  os_log_type_t v61 = type metadata accessor for UUID(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 32LL))(v60, v66, v61);
  *(void *)(v60 + RequestBeacon[7]) = v75;
  uint64_t v63 = v60 + RequestBeacon[8];
  uint64_t v64 = BYTE1(v68);
  *(_BYTE *)uint64_t v63 = v68;
  *(_BYTE *)(v63 + 1) = v64 & 1;
  *(void *)(v63 + 8) = a10;
  *(void *)(v60 + RequestBeacon[9]) = &_swiftEmptyDictionarySingleton;
  return result;
}

    uint64_t v6 = (v18 - 1) & v18;
    id v9 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_5:
    char v10 = 16 * v9;
    unint64_t v11 = (uint64_t *)(*(void *)(a1 + 48) + v10);
    unint64_t v12 = *v11;
    char v13 = v11[1];
    uint64_t v14 = *(void *)(a1 + 56) + v10;
    uint64_t v15 = *(void *)v14;
    unint64_t v16 = *(unsigned __int8 *)(v14 + 8);
    sub_10001736C(*v11, v13);
    a2(v12, v13, v15, v16);
    sub_100016F9C(v12, v13);
  }

  uint64_t v19 = v17 + 4;
  if (v19 >= v21)
  {
LABEL_23:
    swift_release();
    return;
  }

  uint64_t v18 = *(void *)(v20 + 8 * v19);
  if (v18)
  {
    uint64_t v7 = v19;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v7 >= v21) {
      goto LABEL_23;
    }
    uint64_t v18 = *(void *)(v20 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }

    uint64_t v17 = (v22 - 1) & v22;
    uint64_t v20 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_5:
    sub_10001DC4C( *(void *)(a1 + 48) + *(void *)(v3 + 72) * v20,  (uint64_t)v12,  type metadata accessor for RawSearchResult);
    sub_10002218C((uint64_t)v12, (uint64_t)v6, type metadata accessor for RawSearchResult);
    sub_1000C0374((uint64_t)v9, v6);
    uint64_t result = sub_100018C68((uint64_t)v9, type metadata accessor for RawSearchResult);
  }

  uint64_t v23 = v21 + 4;
  if (v23 >= v18) {
    return swift_release();
  }
  uint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    char v13 = v23;
    goto LABEL_22;
  }

  while (1)
  {
    char v13 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v13 >= v18) {
      return swift_release();
    }
    uint64_t v22 = *(void *)(v25 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }

  uint64_t v94 = v141;
LABEL_25:
  sub_10006A574(v94, 0);
}

        swift_once(&qword_10099B710, sub_1006511CC);
        goto LABEL_14;
      }
    }

    else
    {
      char v32 = *(void **)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(a1);
      if (v32) {
        goto LABEL_10;
      }
    }

    return swift_bridgeObjectRelease();
  }

  return result;
}

  uint64_t v51 = swift_unknownObjectWeakLoadStrong(a5 + 16);
  if (!v51)
  {
    uint64_t v85 = static os_log_type_t.error.getter(0LL);
    char v86 = (os_log_s *)qword_100A2B020;
    id v87 = os_log(_:dso:log:_:_:)( v85,  &_mh_execute_header,  qword_100A2B020,  "Delegate does not define a zone!",  32LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v88 = static os_log_type_t.info.getter(v87);
    if (os_log_type_enabled(v86, v88))
    {
      swift_retain_n(a5, 2LL);
      uint64_t v89 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v90 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v89 = 136315138;
      v155[0] = v90;
      uint64_t v91 = [*(id *)(a5 + 280) debugDescription];
      uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v91);
      uint64_t v94 = v93;

      v162 = sub_1003F11D4(v92, v94, v155);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, v163, v89 + 4, v89 + 12);
      swift_release_n(a5, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v86,  v88,  ">>> fetchDatabaseChanges (NoZone) exclusiveAccessSemaphore.signal() %s",  v89,  0xCu);
      swift_arrayDestroy(v90, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v90, -1LL, -1LL);
      swift_slowDealloc(v89, -1LL, -1LL);
    }

    uint64_t v95 = *(void **)(a5 + 280);
    uint64_t v96 = OS_dispatch_semaphore.signal()();
    uint64_t v97 = static os_log_type_t.info.getter(v96);
    uint64_t v98 = (os_log_s *)qword_100A2B020;
    uint64_t v99 = v97;
    if (os_log_type_enabled((os_log_t)qword_100A2B020, v97))
    {
      swift_retain_n(a5, 2LL);
      uint64_t v100 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v101 = swift_slowAlloc(32LL, -1LL);
      v155[0] = v101;
      *(_DWORD *)uint64_t v100 = 136315138;
      uint64_t v102 = [v95 debugDescription];
      os_log_t v103 = static String._unconditionallyBridgeFromObjectiveC(_:)(v102);
      uint64_t v105 = v104;

      v162 = sub_1003F11D4(v103, v105, v155);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, v163, v100 + 4, v100 + 12);
      swift_release_n(a5, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v98,  v99,  "<<< fetchDatabaseChanges (NoZone) exclusiveAccessSemaphore.signal() %s",  v100,  0xCu);
      swift_arrayDestroy(v101, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v101, -1LL, -1LL);
      swift_slowDealloc(v100, -1LL, -1LL);
    }

    uint64_t v106 = [objc_allocWithZone(NSError) init];
    a7((uint64_t)v106, 1LL);

    return;
  }

  uint64_t v52 = v51;
  id v53 = (uint64_t *)(a10 + 16);
  uint64_t v54 = *(id *)(v51 + 128);
  swift_unknownObjectRelease(v52);
  swift_beginAccess(a9 + 16, v155, 0LL, 0LL);
  Swift::String v55 = *(void *)(a9 + 16);
  swift_bridgeObjectRetain(v55);
  uint64_t v56 = sub_1000BC864((uint64_t)v54, v55);
  swift_bridgeObjectRelease();
  if ((v56 & 1) != 0)
  {
    uint64_t v57 = swift_unknownObjectWeakLoadStrong(a5 + 16);
    id v58 = v149;
    if (v57)
    {
      id v59 = v57;
      sub_100020FF0(a5, 1);
      swift_unknownObjectRelease(v59);
    }

    uint64_t v60 = *(void *)(a5 + 80);
    *(void *)(a5 + 80) = 0LL;
    sub_100689248(v60);
    os_log_type_t v61 = *(void *)(a5 + 80);
    sub_100689258(v61);
    sub_1006889CC(v61);
    BOOL v62 = sub_100689248(v61);
    uint64_t v63 = static os_log_type_t.default.getter(v62);
    uint64_t v64 = 2;
    os_log(_:dso:log:_:_:)( v63,  &_mh_execute_header,  qword_100A2B020,  "Setting zoneState to .unknown",  29LL,  2LL,  _swiftEmptyArrayStorage);
    goto LABEL_41;
  }

  swift_beginAccess(v53, &v162, 0LL, 0LL);
  uint64_t v107 = *v53;
  swift_bridgeObjectRetain(*v53);
  uint64_t v108 = sub_1000BC864((uint64_t)v54, v107);
  swift_bridgeObjectRelease();
  id v58 = v149;
  if ((v108 & 1) == 0)
  {
    uint64_t v64 = 3;
LABEL_41:
    sub_10067CA70(v64);
  }

  uint64_t v109 = sub_100689A28();
  uint64_t v110 = (void *)sub_1006F20F8((uint64_t)v109);
  swift_bridgeObjectRelease();
  swift_beginAccess(v53, v161, 0LL, 0LL);
  swift_bridgeObjectRetain(*v53);
  unsigned __int8 v112 = sub_1006F20F8(v111);
  swift_bridgeObjectRelease();
  sub_10045D4A4(v112, v110);
  uint64_t v114 = sub_1002FF1AC(v113);
  swift_bridgeObjectRelease();
  swift_beginAccess(v53, v160, 1LL, 0LL);
  *id v53 = (uint64_t)v114;
  swift_bridgeObjectRelease();
  swift_beginAccess(v53, v159, 0LL, 0LL);
  uint64_t v115 = *v53;
  if ((unint64_t)*v53 >> 62)
  {
    if (v115 < 0) {
      uint64_t v122 = *v53;
    }
    else {
      uint64_t v122 = v115 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v53);
    uint64_t v123 = _CocoaArrayWrapper.endIndex.getter(v122);
    swift_bridgeObjectRelease();
    if (v123) {
      goto LABEL_44;
    }
  }

  else if (*(void *)((v115 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
LABEL_44:
    uint64_t v116 = *(void *)(a5 + 80);
    *(void *)(a5 + 80) = 2LL;
    sub_100689248(v116);
    uint64_t v117 = *(void *)(a5 + 80);
    sub_100689258(v117);
    sub_1006889CC(v117);
    sub_100689248(v117);
    swift_beginAccess(v53, v158, 0LL, 0LL);
    swift_bridgeObjectRetain(*v53);
    sub_100689C0C(v118);
    swift_beginAccess(v53, &v156, 0LL, 0LL);
    uint64_t v119 = *v53;
    uint64_t v120 = (void *)swift_allocObject(&unk_100971378, 56LL, 7LL);
    v120[2] = a5;
    v120[3] = a6;
    v120[4] = v147;
    v120[5] = a7;
    v120[6] = a8;
    uint64_t v121 = v147;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain(v119);
    sub_100685464(a6, v58, v119, (Swift::Int)sub_100689F78, v120);
    swift_bridgeObjectRelease();
    swift_release(v120);

    return;
  }

  v124 = sub_100683B04(a6, v147);
  uint64_t v125 = static os_log_type_t.info.getter(v124);
  v126 = (os_log_s *)qword_100A2B020;
  uint64_t v127 = v125;
  if (os_log_type_enabled((os_log_t)qword_100A2B020, v125))
  {
    swift_retain_n(a5, 2LL);
    uint64_t v128 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v129 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v128 = 136315138;
    v158[0] = v129;
    uint64_t v130 = [*(id *)(a5 + 280) debugDescription];
    NSNotificationName v131 = static String._unconditionallyBridgeFromObjectiveC(_:)(v130);
    v153 = v54;
    uint64_t v133 = v132;

    v156 = sub_1003F11D4(v131, v133, v158);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, v157, v128 + 4, v128 + 12);
    swift_release_n(a5, 2LL);
    uint64_t v54 = v153;
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v126,  v127,  ">>> fetchDatabaseChanges (no zone fetch needed) exclusiveAccessSemaphore.signal() %s",  v128,  0xCu);
    swift_arrayDestroy(v129, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v129, -1LL, -1LL);
    swift_slowDealloc(v128, -1LL, -1LL);
  }

  uint64_t v134 = *(void **)(a5 + 280);
  uint64_t v135 = OS_dispatch_semaphore.signal()();
  uint64_t v136 = static os_log_type_t.info.getter(v135);
  uint64_t v137 = (os_log_s *)qword_100A2B020;
  uint64_t v138 = v136;
  if (os_log_type_enabled((os_log_t)qword_100A2B020, v136))
  {
    swift_retain_n(a5, 2LL);
    __int128 v139 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    __int128 v140 = swift_slowAlloc(32LL, -1LL);
    v158[0] = v140;
    *(_DWORD *)__int128 v139 = 136315138;
    uint64_t v141 = [v134 debugDescription];
    v142 = static String._unconditionallyBridgeFromObjectiveC(_:)(v141);
    uint64_t v143 = v54;
    v145 = v144;

    v156 = sub_1003F11D4(v142, v145, v158);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, v157, v139 + 4, v139 + 12);
    swift_release_n(a5, 2LL);
    uint64_t v54 = v143;
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v137,  v138,  "<<< fetchDatabaseChanges (no zone fetch needed) exclusiveAccessSemaphore.signal() %s",  v139,  0xCu);
    swift_arrayDestroy(v140, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v140, -1LL, -1LL);
    swift_slowDealloc(v139, -1LL, -1LL);
  }

  a7(0LL, 0LL);
}

    uint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_5:
    sub_10006A5E8(*(void *)(a1 + 48) + 40 * v12, (uint64_t)v16);
    uint64_t v17 = *(id *)(*(void *)(a1 + 56) + 8 * v12);
    a2(v16, v17);
    uint64_t result = sub_100015794((uint64_t)v16, &qword_1009BA8C0);
  }

  uint64_t v15 = v13 + 4;
  if (v15 >= v8) {
    return swift_release(a1);
  }
  uint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
    char v10 = v15;
    goto LABEL_22;
  }

  while (1)
  {
    char v10 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v10 >= v8) {
      return swift_release(a1);
    }
    uint64_t v14 = *(void *)(v4 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_22;
    }
  }

    uint64_t v14 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_23:
    uint64_t v43 = v14;
    uint64_t v19 = *(void *)(a1 + 48) + 24 * v15;
    uint64_t v44 = *(_BYTE *)v19;
    uint64_t v45 = *(void *)(v19 + 8);
    uint64_t v46 = *(void *)(v19 + 16);
    uint64_t v20 = *(void *)(*(void *)(a1 + 56) + 8 * v15);
    if ((unint64_t)v20 >> 62)
    {
      if (v20 < 0) {
        unint64_t v24 = *(void *)(*(void *)(a1 + 56) + 8 * v15);
      }
      else {
        unint64_t v24 = v20 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v46);
      swift_bridgeObjectRetain(v20);
      if (_CocoaArrayWrapper.endIndex.getter(v24))
      {
LABEL_25:
        if ((v20 & 0xC000000000000001LL) != 0) {
          uint64_t v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v20);
        }
        else {
          uint64_t v22 = *(id *)(v20 + 32);
        }
        uint64_t v23 = [v22 capabilities];
        __asm { BR              X8 }
      }
    }

    else
    {
      uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(*(void *)(v19 + 16));
      swift_bridgeObjectRetain(v20);
      if (v21) {
        goto LABEL_25;
      }
    }

    swift_bridgeObjectRelease();
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    uint64_t v27 = sub_10030D3A8(v44, v45, v46);
    uint64_t v28 = _swiftEmptyDictionarySingleton[2];
    uint64_t v29 = (v26 & 1) == 0;
    uint64_t v30 = v28 + v29;
    if (__OFADD__(v28, v29))
    {
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MessagingDestination);
      __break(1u);
      JUMPOUT(0x1006955E4LL);
    }

    char v31 = v26;
    if (_swiftEmptyDictionarySingleton[3] >= v30)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_10006849C();
      }
      char v32 = v46;
      if ((v31 & 1) != 0) {
        goto LABEL_5;
      }
    }

    else
    {
      sub_10005647C(v30, isUniquelyReferenced_nonNull_native);
      char v32 = v46;
      id v33 = sub_10030D3A8(v44, v45, v46);
      if ((v31 & 1) != (v34 & 1)) {
        goto LABEL_49;
      }
      uint64_t v27 = v33;
      if ((v31 & 1) != 0)
      {
LABEL_5:
        *(_BYTE *)(_swiftEmptyDictionarySingleton[7] + v27) = 0;
        goto LABEL_6;
      }
    }

    _swiftEmptyDictionarySingleton[(v27 >> 6) + 8] |= 1LL << v27;
    uint64_t v35 = _swiftEmptyDictionarySingleton[6] + 24 * v27;
    *(_BYTE *)uint64_t v35 = v44;
    *(void *)(v35 + 8) = v45;
    *(void *)(v35 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v32;
    *(_BYTE *)(_swiftEmptyDictionarySingleton[7] + v27) = 0;
    uint64_t v36 = _swiftEmptyDictionarySingleton[2];
    unint64_t v37 = __OFADD__(v36, 1LL);
    uint64_t v38 = v36 + 1;
    if (v37) {
      goto LABEL_46;
    }
    _swiftEmptyDictionarySingleton[2] = v38;
    swift_bridgeObjectRetain(v32);
LABEL_6:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v10 = v43;
  }

    __break(1u);
    goto LABEL_23;
  }

      __break(1u);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }

    v1 |= 4uLL;
    goto LABEL_23;
  }

  __int16 v1 = 0LL;
  if ((a1 & 4) != 0) {
    goto LABEL_22;
  }
  if ((a1 & 8) != 0) {
    goto LABEL_33;
  }
LABEL_9:
  if ((a1 & 0x10) != 0) {
    goto LABEL_34;
  }
  if ((a1 & 0x20) != 0) {
    goto LABEL_35;
  }
  if ((a1 & 0x40) != 0) {
    goto LABEL_36;
  }
  if ((a1 & 0x80) != 0) {
    goto LABEL_37;
  }
  if ((a1 & 0x100) != 0) {
    goto LABEL_38;
  }
  if ((a1 & 0x400) == 0)
  {
    if ((a1 & 0x800) == 0)
    {
      if ((a1 & 0x200) == 0)
      {
        if ((a1 & 0x1000) == 0) {
          return v1;
        }
        goto LABEL_52;
      }

    uint64_t v5 = (v12 - 1) & v12;
    id v9 = __clz(__rbit64(v12)) + (v7 << 6);
LABEL_5:
    swift_bridgeObjectRetain(*(void *)(*(void *)(a1 + 56) + 8 * v9));
    sub_100184B50(v10);
  }

  char v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_23:
    swift_release();
    return;
  }

  unint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    uint64_t v7 = v13;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v7 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v7);
    ++v13;
    if (v12) {
      goto LABEL_22;
    }
  }

          unint64_t v11 = (v17 - 1) & v17;
          uint64_t v64 = v18;
          uint64_t v14 = __clz(__rbit64(v17)) + (v18 << 6);
        }

        uint64_t v20 = (unsigned __int8 *)(*(void *)(v15 + 48) + 24 * v14);
        uint64_t v21 = *v20;
        uint64_t v22 = *((void *)v20 + 1);
        uint64_t v23 = *((void *)v20 + 2);
        Hasher.init(_seed:)(v67, *(void *)(v5 + 40));
        Hasher._combine(_:)(v21);
        swift_bridgeObjectRetain(v23);
        String.hash(into:)(v67, v22, v23);
        unint64_t v24 = Hasher._finalize()();
        id v25 = -1LL << *(_BYTE *)(v5 + 32);
        uint64_t v26 = v24 & ~v25;
        if (((*(void *)(v12 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v26) & 1) != 0) {
          break;
        }
LABEL_6:
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v5 = v68;
        unint64_t v8 = v64;
      }

      uint64_t v4 = ~v25;
      uint64_t v27 = *(void *)(v68 + 48);
      while (1)
      {
        uint64_t v28 = (unsigned __int8 *)(v27 + 24 * v26);
        if (*v28 == (_DWORD)v21)
        {
          uint64_t v29 = *((void *)v28 + 1);
          uint64_t v30 = *((void *)v28 + 2);
          char v31 = v29 == v22 && v30 == v23;
          if (v31 || (_stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, v22, v23, 0LL) & 1) != 0) {
            break;
          }
        }

        uint64_t v26 = (v26 + 1) & v4;
        if (((*(void *)(v12 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v26) & 1) == 0) {
          goto LABEL_6;
        }
      }

      uint64_t result = swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v58 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v26;
      unint64_t v8 = v64;
      char v32 = __OFADD__(v63++, 1LL);
      uint64_t v5 = v68;
    }

    while (!v32);
    __break(1u);
  }

  uint64_t v63 = 0LL;
  id v33 = 0LL;
  uint64_t v57 = v5 + 56;
  uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 < 64) {
    uint64_t v35 = ~(-1LL << v34);
  }
  else {
    uint64_t v35 = -1LL;
  }
  uint64_t v36 = v35 & *(void *)(v5 + 56);
  uint64_t v60 = (unint64_t)(v34 + 63) >> 6;
  unint64_t v37 = v4 + 56;
  while (v36)
  {
    uint64_t v38 = __clz(__rbit64(v36));
    v36 &= v36 - 1;
    uint64_t v65 = v33;
    uint64_t v39 = v38 | (v33 << 6);
    uint64_t v5 = v68;
LABEL_56:
    BOOL v62 = v39;
    uint64_t v44 = (unsigned __int8 *)(*(void *)(v5 + 48) + 24 * v39);
    uint64_t v45 = *v44;
    uint64_t v46 = *((void *)v44 + 1);
    id v47 = *((void *)v44 + 2);
    Hasher.init(_seed:)(v67, *(void *)(v4 + 40));
    Hasher._combine(_:)(v45);
    swift_bridgeObjectRetain(v47);
    String.hash(into:)(v67, v46, v47);
    uint64_t v48 = Hasher._finalize()();
    uint64_t v49 = -1LL << *(_BYTE *)(v4 + 32);
    os_log_type_t v50 = v48 & ~v49;
    if (((*(void *)(v37 + ((v50 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v50) & 1) != 0)
    {
      uint64_t v5 = ~v49;
      uint64_t v51 = *(void *)(a4 + 48);
      while (1)
      {
        uint64_t v52 = (unsigned __int8 *)(v51 + 24 * v50);
        if (*v52 == (_DWORD)v45)
        {
          id v53 = *((void *)v52 + 1);
          uint64_t v54 = *((void *)v52 + 2);
          Swift::String v55 = v53 == v46 && v54 == v47;
          if (v55 || (_stringCompareWithSmolCheck(_:_:expecting:)(v53, v54, v46, v47, 0LL) & 1) != 0) {
            break;
          }
        }

        os_log_type_t v50 = (v50 + 1) & v5;
        if (((*(void *)(v37 + ((v50 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v50) & 1) == 0) {
          goto LABEL_39;
        }
      }

      uint64_t result = swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v58 + ((v62 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v62;
      id v33 = v65;
      char v32 = __OFADD__(v63++, 1LL);
      uint64_t v4 = a4;
      if (v32)
      {
        __break(1u);
        goto LABEL_68;
      }
    }

    else
    {
LABEL_39:
      uint64_t result = swift_bridgeObjectRelease();
      id v33 = v65;
      uint64_t v4 = a4;
    }
  }

  unint64_t v40 = v33 + 1;
  uint64_t v5 = v68;
  if (__OFADD__(v33, 1LL)) {
    goto LABEL_70;
  }
  if (v40 >= v60) {
    goto LABEL_68;
  }
  uint64_t v41 = *(void *)(v57 + 8 * v40);
  uint64_t v42 = v33 + 1;
  if (v41) {
    goto LABEL_55;
  }
  uint64_t v42 = v33 + 2;
  if (v33 + 2 >= v60) {
    goto LABEL_68;
  }
  uint64_t v41 = *(void *)(v57 + 8 * v42);
  if (v41) {
    goto LABEL_55;
  }
  uint64_t v42 = v33 + 3;
  if (v33 + 3 >= v60) {
    goto LABEL_68;
  }
  uint64_t v41 = *(void *)(v57 + 8 * v42);
  if (v41)
  {
LABEL_55:
    uint64_t v36 = (v41 - 1) & v41;
    uint64_t v65 = v42;
    uint64_t v39 = __clz(__rbit64(v41)) + (v42 << 6);
    goto LABEL_56;
  }

  uint64_t v43 = v33 + 4;
  if (v33 + 4 >= v60) {
    goto LABEL_68;
  }
  uint64_t v41 = *(void *)(v57 + 8 * v43);
  if (v41)
  {
    uint64_t v42 = v33 + 4;
    goto LABEL_55;
  }

  while (1)
  {
    uint64_t v42 = v43 + 1;
    if (__OFADD__(v43, 1LL)) {
      break;
    }
    if (v42 >= v60) {
      goto LABEL_68;
    }
    uint64_t v41 = *(void *)(v57 + 8 * v42);
    ++v43;
    if (v41) {
      goto LABEL_55;
    }
  }

    char v13 = (v19 - 1) & v19;
    uint64_t v17 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_23:
    uint64_t v21 = (Swift::UInt32 *)(*(void *)(a4 + 48) + 8 * v17);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    Hasher.init(_seed:)(v55, *(void *)(v5 + 40));
    Hasher._combine(_:)(v22);
    Hasher._combine(_:)(v23);
    uint64_t result = Hasher._finalize()();
    uint64_t v5 = v56;
    unint64_t v24 = -1LL << *(_BYTE *)(v56 + 32);
    id v25 = result & ~v24;
    if (((*(void *)(v14 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v25) & 1) != 0)
    {
      uint64_t v26 = ~v24;
      while (1)
      {
        uint64_t v27 = (int *)(*(void *)(v56 + 48) + 8 * v25);
        uint64_t v29 = *v27;
        uint64_t v28 = v27[1];
        if (v29 == v22 && v28 == v23) {
          break;
        }
        id v25 = (v25 + 1) & v26;
        if (((*(void *)(v14 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v25) & 1) == 0) {
          goto LABEL_7;
        }
      }

      *(unint64_t *)((char *)v54 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
      uint64_t v15 = __OFADD__(v8++, 1LL);
      if (v15) {
        goto LABEL_63;
      }
    }
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v52) {
    goto LABEL_60;
  }
  uint64_t v19 = *(void *)(v10 + 8 * v20);
  if (v19)
  {
    id v9 = v20;
    goto LABEL_22;
  }

  while (1)
  {
    id v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v52) {
      goto LABEL_60;
    }
    uint64_t v19 = *(void *)(v10 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }

uint64_t sub_10002438C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v17 = _swiftEmptyArrayStorage;
  uint64_t v6 = *(void **)(a3 + 16);
  if (v6)
  {
    uint64_t v7 = (uint64_t (*)(__int128 *))result;
    uint64_t v5 = 0LL;
    uint64_t v8 = a3 + 32;
    id v9 = _swiftEmptyArrayStorage;
    char v13 = *(void **)(a3 + 16);
    uint64_t v14 = (uint64_t (*)(__int128 *))result;
    while ((unint64_t)v5 < *(void *)(a3 + 16))
    {
      sub_100013044(v8, (uint64_t)v16);
      char v10 = v7(v16);
      if (v3)
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v16);
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v5;
      }

      if ((v10 & 1) != 0)
      {
        sub_100012EC0(v16, (uint64_t)v15);
        if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0) {
          sub_1000333A4(0, v9[2] + 1LL, 1);
        }
        id v9 = v17;
        unint64_t v12 = v17[2];
        unint64_t v11 = v17[3];
        if (v12 >= v11 >> 1)
        {
          sub_1000333A4(v11 > 1, v12 + 1, 1);
          id v9 = v17;
        }

        _OWORD v9[2] = v12 + 1;
        uint64_t result = sub_100012EC0(v15, (uint64_t)&v9[5 * v12 + 4]);
        uint64_t v6 = v13;
        uint64_t v7 = v14;
      }

      else
      {
        uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v16);
      }

      uint64_t v5 = (void *)((char *)v5 + 1);
      v8 += 40LL;
      if (v6 == v5)
      {
        uint64_t v5 = v17;
        goto LABEL_15;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }

  return result;
}

uint64_t sub_100024510(uint64_t (*a1)(char *), void *a2, uint64_t a3)
{
  return sub_1000238A0( a1,  a2,  a3,  type metadata accessor for LocationProvider,  (void (*)(BOOL, uint64_t, uint64_t))sub_1000333FC);
}

uint64_t sub_100024534(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  return sub_100024558(a1, a2, a3, &qword_10099D4A0, (void (*)(BOOL, uint64_t, uint64_t))sub_100033460);
}

uint64_t sub_100024558( uint64_t (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(BOOL, uint64_t, uint64_t))
{
  uint64_t v26 = a5;
  char v32 = a1;
  uint64_t v8 = sub_100004AEC(a4);
  uint64_t v33 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  char v31 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v34 = (char *)&v25 - v12;
  char v13 = _swiftEmptyArrayStorage;
  uint64_t v35 = _swiftEmptyArrayStorage;
  uint64_t v30 = *(void *)(a3 + 16);
  if (v30)
  {
    unint64_t v14 = 0LL;
    uint64_t v15 = _swiftEmptyArrayStorage;
    uint64_t v28 = a2;
    uint64_t v29 = a3;
    uint64_t v27 = v8;
    while (v14 < *(void *)(a3 + 16))
    {
      char v13 = (void *)((*(unsigned __int8 *)(v33 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80));
      uint64_t v16 = *(void *)(v33 + 72);
      uint64_t v17 = a3;
      uint64_t v18 = (char *)v13 + a3 + v16 * v14;
      uint64_t v19 = v34;
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v34, v18, v8);
      char v20 = v32(v19);
      if (v5)
      {
        (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v8);
        swift_release(v15);
        swift_bridgeObjectRelease();
        return (uint64_t)v13;
      }

      if ((v20 & 1) != 0)
      {
        uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
        v21(v31, v34, v8);
        if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0) {
          v26(0, v15[2] + 1LL, 1LL);
        }
        uint64_t v15 = v35;
        unint64_t v23 = v35[2];
        unint64_t v22 = v35[3];
        if (v23 >= v22 >> 1)
        {
          v26(v22 > 1, v23 + 1, 1LL);
          uint64_t v15 = v35;
        }

        __int128 v15[2] = v23 + 1;
        unint64_t v24 = (char *)v13 + (void)v15 + v23 * v16;
        uint64_t v8 = v27;
        uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v21)(v24, v31, v27);
        a3 = v29;
      }

      else
      {
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v34, v8);
        a3 = v17;
      }

      if (v30 == ++v14)
      {
        char v13 = v35;
        goto LABEL_15;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v13;
  }

  return result;
}

uint64_t sub_100024790()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A29ED0);
  sub_10000A720(v0, (uint64_t)qword_100A29ED0);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x72756769666E6F63LL,  0xED00006E6F697461LL);
}

uint64_t sub_100024810@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 56);
  *a2 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10002482C(uint64_t a1)
{
  return OS_dispatch_queue.sync<A>(execute:)(sub_100035F18, a1, &type metadata for Configuration);
}

uint64_t sub_100024874()
{
  if (*(void *)(v0 + 64))
  {
    uint64_t v1 = *(void *)(v0 + 64);
  }

  else
  {
    uint64_t v2 = v0;
    uint64_t v3 = type metadata accessor for ServerConfigurationProvider(0LL);
    swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
    uint64_t v1 = sub_100436348();
    *(void *)(v2 + 64) = v1;
    swift_retain();
    swift_release();
  }

  swift_retain();
  return v1;
}

void *sub_1000248E4()
{
  if (*(void *)(v0 + 72))
  {
    uint64_t v1 = *(void **)(v0 + 72);
  }

  else
  {
    uint64_t v2 = v0;
    uint64_t v3 = type metadata accessor for UserDefaultsConfigurationProvider();
    swift_allocObject(v3, 40LL, 7LL);
    uint64_t v1 = sub_10075ECD0();
    *(void *)(v2 + 72) = v1;
    swift_retain();
    swift_release();
  }

  swift_retain();
  return v1;
}

void *sub_100024954()
{
  uint64_t v1 = *(void *)(v0 + 80);
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 80);
  }

  else
  {
    uint64_t v3 = v0;
    uint64_t v4 = type metadata accessor for ServiceStateProvider();
    swift_allocObject(v4, 64LL, 7LL);
    uint64_t v2 = sub_10061EF7C();
    uint64_t v5 = *(void *)(v3 + 80);
    *(void *)(v3 + 80) = v2;
    swift_retain(v2);
    swift_release(v5);
    uint64_t v1 = 0LL;
  }

  swift_retain(v1);
  return v2;
}

void sub_1000249C4()
{
  qword_100A29EE8 = (uint64_t)&off_100932C00;
}

void sub_1000249D8(char *a1)
{
}

unint64_t sub_1000249E4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000394DC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100024A10()
{
  return ((uint64_t (*)(void))((char *)sub_100024A40 + 4 * byte_1007E4990[*v0]))();
}

void sub_100024A40(void *a1@<X8>)
{
  *a1 = 0x726576726573LL;
  a1[1] = 0xE600000000000000LL;
}

void sub_100024A58(void *a1@<X8>)
{
  *a1 = 0x73656C6F72LL;
  a1[1] = 0xE500000000000000LL;
}

void sub_100024A70(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_100024A94(void *a1@<X8>)
{
  *a1 = 0x5365636976726573LL;
  a1[1] = 0xEF73676E69747465LL;
}

void sub_100024ABC()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v2, 0LL);
  __asm { BR              X9 }

Swift::Int sub_100024B08()
{
  return Hasher._finalize()();
}

void sub_100024B9C()
{
  __asm { BR              X10 }

uint64_t sub_100024BD8(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE600000000000000LL);
}

void sub_100024C58(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }

Swift::Int sub_100024CA0()
{
  return Hasher._finalize()();
}

uint64_t sub_100024D34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100039524();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100024D90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100039524();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void *sub_100024DDC(uint64_t a1)
{
  uint64_t v51 = a1;
  uint64_t v49 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v49);
  *(void *)&__int128 v50 = &v44[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v3 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = &v44[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v47 = v6;
  __chkstk_darwin(v6);
  uint64_t v9 = &v44[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  v1[2] = _swiftEmptyArrayStorage;
  uint64_t v48 = v1;
  id v10 = [objc_allocWithZone(FMStateCapture) init];
  aBlock[4] = sub_10028CE4C;
  uint64_t v53 = 0LL;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000325B4;
  aBlock[3] = &unk_1009394D0;
  unint64_t v11 = _Block_copy(aBlock);
  swift_release(v53);
  [v10 setStateCaptureBlock:v11];
  _Block_release(v11);
  v1[3] = v10;
  sub_100004AB0();
  unsigned int v45 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v46 = *(uint64_t (**)(_BYTE *))(v7 + 104);
  uint64_t v12 = v46(v9);
  static DispatchQoS.unspecified.getter(v12);
  aBlock[0] = _swiftEmptyArrayStorage;
  uint64_t v13 = sub_100007864( (unint64_t *)&qword_10099BAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009A0CD0);
  uint64_t v15 = sub_1000372EC( (unint64_t *)&qword_10099BAB0,  (uint64_t *)&unk_1009A0CD0,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v17 = v49;
  uint64_t v16 = v50;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v14, v15, v49, v13);
  uint64_t v18 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000043LL,  0x80000001008513F0LL,  v5,  v16,  v9,  0LL);
  uint64_t v19 = v47;
  char v20 = v48;
  v48[4] = v18;
  uint64_t v21 = ((uint64_t (*)(_BYTE *, void, uint64_t))v46)(v9, v45, v19);
  static DispatchQoS.unspecified.getter(v21);
  aBlock[0] = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v14, v15, v17, v13);
  v20[5] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000036LL,  0x8000000100851440LL,  v5,  v16,  v9,  0LL);
  uint64_t v22 = sub_100004AEC(&qword_10099D300);
  uint64_t v23 = *(void *)(type metadata accessor for DefaultConfigurationLayer(0LL) - 8);
  uint64_t v24 = *(void *)(v23 + 72);
  uint64_t v25 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v26 = (v25 + 32) & ~v25;
  uint64_t v27 = swift_allocObject(v22, v26 + v24, v25 | 7);
  __int128 v50 = xmmword_1007E67D0;
  *(_OWORD *)(v27 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = xmmword_1007E67D0;
  uint64_t v28 = sub_1004142F0(v27 + v26);
  v20[7] = v27;
  v20[8] = 0LL;
  v20[9] = 0LL;
  v20[10] = 0LL;
  uint64_t v29 = static os_log_type_t.default.getter(v28);
  if (qword_10099B760 != -1) {
    swift_once(&qword_10099B760, sub_1006515A8);
  }
  uint64_t v30 = qword_100A2B070;
  uint64_t v31 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v32 = swift_allocObject(v31, 72LL, 7LL);
  *(_OWORD *)(v32 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v50;
  uint64_t v33 = type metadata accessor for URL(0LL);
  uint64_t v34 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v35 = v51;
  uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter(v33, v34);
  uint64_t v38 = v37;
  *(void *)(v32 + 56) = &type metadata for String;
  *(void *)(v32 + 64) = sub_1000226F4();
  *(void *)(v32 + 32) = v36;
  *(void *)(v32 + 40) = v38;
  os_log(_:dso:log:_:_:)( v29,  &_mh_execute_header,  v30,  "ConfigurationCoordinator created with url %{public}@",  52LL,  2LL,  v32);
  swift_bridgeObjectRelease(v32);
  uint64_t v39 = *(void *)(v33 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))( (uint64_t)v20 + OBJC_IVAR____TtC12searchpartyd24ConfigurationCoordinator_rootURL,  v35,  v33);
  unint64_t v40 = (void *)v20[5];
  uint64_t v41 = type metadata accessor for QueueSynchronizer(0LL);
  swift_allocObject(v41, *(unsigned int *)(v41 + 48), *(unsigned __int16 *)(v41 + 52));
  uint64_t v42 = QueueSynchronizer.init(queue:)(v40);
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v35, v33);
  v20[6] = v42;
  return v20;
}

uint64_t sub_100025270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v66 = a3;
  uint64_t v65 = a2;
  uint64_t v64 = a1;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v68 = *(void *)(v5 - 8);
  uint64_t v69 = v5;
  __chkstk_darwin(v5);
  uint64_t v63 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v67 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v56 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  Swift::String v55 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v62 = sub_100004AEC((uint64_t *)&unk_1009A0850);
  uint64_t v61 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v10 = (int *)type metadata accessor for ServiceStateConfigurationLayer(0LL);
  __chkstk_darwin(v10);
  uint64_t v60 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009B11D0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100025F6C(0);
  sub_1000248E4();
  uint64_t v16 = type metadata accessor for ConfigurationCoordinator(0LL);
  uint64_t v78 = (ValueMetadata *)v16;
  uint64_t v79 = (uint64_t (*)())&off_1009393A8;
  aBlock[0] = v3;
  swift_retain();
  sub_10075F178((uint64_t)aBlock, (uint64_t)v15);
  swift_release();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v13 + 8);
  v17(v15, v12);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
  sub_1000248E4();
  swift_release();
  uint64_t v78 = &type metadata for UserDefaultsConfigurationLayer;
  uint64_t v79 = (uint64_t (*)())&off_100977B98;
  uint64_t v18 = *(void *)(v3 + 48);
  char v70 = 3;
  uint64_t v71 = v4;
  os_log_t v72 = aBlock;
  char v73 = 0;
  uint64_t v74 = 0LL;
  uint64_t v75 = 0LL;
  uint64_t v53 = (char *)&type metadata for () + 8;
  uint64_t v54 = v18;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_1000372C0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
  sub_100024954();
  uint64_t v78 = (ValueMetadata *)v16;
  uint64_t v79 = (uint64_t (*)())&off_1009393A8;
  uint64_t v57 = (ValueMetadata *)v16;
  aBlock[0] = v4;
  swift_retain();
  sub_100620F90((uint64_t)aBlock, (uint64_t)v15);
  swift_release();
  id v58 = v15;
  uint64_t v59 = v12;
  v17(v15, v12);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
  sub_100024954();
  id v19 = sub_10061EC7C();
  id v20 = [v19 stringForKey:SPSettingsServiceStateKey];

  if (!v20)
  {
    if (qword_10099B428 != -1) {
      swift_once(&qword_10099B428, sub_10041E30C);
    }
    id v20 = (id)qword_100A2A980;
  }

  uint64_t v50 = 0LL;
  uint64_t v51 = (void (*)(uint64_t, uint64_t))v17;
  uint64_t v52 = v9;
  uint64_t v49 = sub_10061F870();
  uint64_t v21 = v60;
  sub_10061FCE4((uint64_t)&v60[v10[6]]);
  sub_100620478((uint64_t)v21 + v10[7]);
  uint64_t v22 = sub_100620498();
  char v24 = v23;
  sub_100620788((uint64_t)v21 + v10[9]);
  id v25 = sub_10061EC7C();
  NSString v26 = String._bridgeToObjectiveC()();
  unsigned __int8 v27 = [v25 BOOLForKey:v26];
  swift_release();

  uint64_t v28 = v49;
  void *v21 = v20;
  v21[1] = v28;
  uint64_t v29 = (char *)v21 + v10[8];
  *(void *)uint64_t v29 = v22;
  v29[8] = v24 & 1;
  *((_BYTE *)v21 + v10[10]) = v27;
  uint64_t v78 = (ValueMetadata *)v10;
  uint64_t v79 = (uint64_t (*)())&off_10096D280;
  uint64_t v30 = sub_10000A7C8(aBlock);
  uint64_t v31 = sub_10001DC4C((uint64_t)v21, (uint64_t)v30, type metadata accessor for ServiceStateConfigurationLayer);
  __chkstk_darwin(v31);
  *((_BYTE *)&v48 - 48) = 4;
  *(&v48 - 5) = v4;
  *(&v48 - 4) = (uint64_t)aBlock;
  *((_BYTE *)&v48 - 24) = 0;
  *(&v48 - 2) = 0LL;
  *(&v48 - 1) = 0LL;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_1000372C0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
  sub_100024874();
  uint64_t v32 = v57;
  uint64_t v78 = v57;
  uint64_t v79 = (uint64_t (*)())&off_1009393A8;
  aBlock[0] = v4;
  swift_retain();
  uint64_t v33 = (uint64_t)v58;
  sub_1004380C8((uint64_t)aBlock, (uint64_t)v58);
  swift_release();
  v51(v33, v59);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
  uint64_t v78 = v32;
  uint64_t v79 = (uint64_t (*)())&off_100939380;
  aBlock[0] = v4;
  swift_retain();
  uint64_t v34 = (uint64_t)v52;
  sub_1001BFAC0((uint64_t)aBlock, (uint64_t)v52);
  (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v34, v62);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
  uint64_t v35 = swift_allocObject(&unk_100939BC0, 32LL, 7LL);
  uint64_t v36 = v65;
  uint64_t v37 = v66;
  *(void *)(v35 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v65;
  *(void *)(v35 + 24) = v37;
  uint64_t v79 = sub_1000392D8;
  uint64_t v80 = v35;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  uint64_t v78 = (ValueMetadata *)&unk_100939BD8;
  uint64_t v38 = _Block_copy(aBlock);
  uint64_t v39 = sub_1000372DC(v36, v37);
  unint64_t v40 = v55;
  static DispatchQoS.unspecified.getter(v39);
  uint64_t v76 = _swiftEmptyArrayStorage;
  uint64_t v41 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v42 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v43 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v44 = v63;
  uint64_t v45 = v42;
  uint64_t v46 = v69;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v76, v45, v43, v69, v41);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v40, v44, v38);
  _Block_release(v38);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v44, v46);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v40, v67);
  sub_100018C68((uint64_t)v21, type metadata accessor for ServiceStateConfigurationLayer);
  return swift_release();
}

uint64_t sub_100025944(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v24 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v22 = *(void *)(v7 - 8);
  uint64_t v23 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AB0();
  (*(void (**)(char *, void, uint64_t))(v11 + 104))( v13,  enum case for DispatchQoS.QoSClass.default(_:),  v10);
  uint64_t v14 = (void *)static OS_dispatch_queue.global(qos:)(v13);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v15 = swift_allocObject(&unk_100939C10, 32LL, 7LL);
  *(void *)(v15 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = a1;
  *(void *)(v15 + 24) = a2;
  aBlock[4] = sub_1000372D8;
  void aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  void aBlock[3] = &unk_100939C28;
  uint64_t v16 = _Block_copy(aBlock);
  uint64_t v17 = sub_1000372DC(a1, a2);
  static DispatchQoS.unspecified.getter(v17);
  id v25 = _swiftEmptyArrayStorage;
  uint64_t v18 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v20 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v19, v20, v4, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v6, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v23);
  return swift_release();
}

uint64_t sub_100025BB4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100025BD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_100025BF4(uint64_t a1)
{
  uint64_t v2 = sub_1006A0638(v1);
  swift_bridgeObjectRelease();
  sub_100025CB0((uint64_t)v2, 0);
  uint64_t v3 = swift_bridgeObjectRelease();
  uint64_t v4 = static os_log_type_t.default.getter(v3);
  if (qword_10099B760 != -1) {
    swift_once(&qword_10099B760, sub_1006515A8);
  }
  return os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  qword_100A2B070,  "ConfigurationCoordinator has reloaded in memory with defaults, userDefaults, serviceState.",  90LL,  2LL,  _swiftEmptyArrayStorage);
}

uint64_t sub_100025CB0(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  int v20 = a2;
  uint64_t v19 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  uint64_t v9 = static os_log_type_t.default.getter(v8);
  if (qword_10099B760 != -1) {
    swift_once(&qword_10099B760, sub_1006515A8);
  }
  os_log(_:dso:log:_:_:)( v9,  &_mh_execute_header,  qword_100A2B070,  "ConfigurationCoordinator persisting updated config.",  51LL,  2LL,  _swiftEmptyArrayStorage,  v19);
  uint64_t v10 = *(void *)(v3 + 56);
  *(void *)(v3 + 56) = a1;
  uint64_t v11 = type metadata accessor for PropertyListEncoder(0LL);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  uint64_t v12 = swift_bridgeObjectRetain(a1);
  uint64_t v13 = PropertyListEncoder.init()(v12);
  uint64_t v21 = a1;
  unint64_t v14 = sub_10003926C();
  uint64_t v15 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v21, &type metadata for Configuration, v14);
  unint64_t v17 = v16;
  swift_release(v13);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000018LL, 0x8000000100851620LL, 0LL);
  Data.write(to:excludeFromBackup:options:)(v7, 1LL, 0x10000000LL, 0LL, v15, v17);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v19);
  sub_100016F9C(v15, v17);
  if ((sub_100126C68(v10, a1) & 1) == 0 && (v20 & 1) != 0) {
    sub_100026520(v10, a1);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100025F6C(char a1)
{
  uint64_t v3 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static DispatchWorkItemFlags.barrier.getter(v9);
  uint64_t v12 = swift_allocObject(&unk_1009393C8, 24LL, 7LL);
  swift_weakInit(v12 + 16, v1);
  uint64_t v13 = swift_allocObject(&unk_100939B70, 25LL, 7LL);
  *(void *)(v13 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v12;
  *(_BYTE *)(v13 + 24) = a1;
  aBlock[4] = sub_10003921C;
  void aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  void aBlock[3] = &unk_100939B88;
  unint64_t v14 = _Block_copy(aBlock);
  uint64_t v15 = swift_retain();
  static DispatchQoS.unspecified.getter(v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v6, v11, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  swift_release();
  return swift_release();
}

uint64_t sub_100026114(uint64_t a1, int a2)
{
  uint64_t v4 = type metadata accessor for DefaultConfigurationLayer(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = &v25[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v25[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = a1 + 16;
  swift_beginAccess(a1 + 16, v30, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a1 + 16);
  if (result)
  {
    int v26 = a2;
    uint64_t v13 = static os_log_type_t.default.getter(result);
    if (qword_10099B760 != -1) {
      swift_once(&qword_10099B760, sub_1006515A8);
    }
    os_log(_:dso:log:_:_:)( v13,  &_mh_execute_header,  qword_100A2B070,  "ConfigurationCoordinator restoring config from disk",  51LL,  2LL,  _swiftEmptyArrayStorage);
    URL.appendingPathComponent(_:isDirectory:)(0xD000000000000018LL, 0x8000000100851620LL, 0LL);
    uint64_t v14 = Data.init(contentsOf:options:)(v10, 0LL);
    unint64_t v16 = v15;
    uint64_t v17 = type metadata accessor for PropertyListDecoder(0LL);
    uint64_t v18 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
    PropertyListDecoder.init()(v18);
    unint64_t v19 = sub_100039228();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( v29,  &type metadata for Configuration,  v14,  v16,  &type metadata for Configuration,  v19);
    swift_release();
    uint64_t v20 = v29[0];
    sub_1004142F0((uint64_t)v6);
    uint64_t v21 = sub_1006A0980((uint64_t)v6, v20);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v6, type metadata accessor for DefaultConfigurationLayer);
    if ((v26 & 1) != 0)
    {
      swift_beginAccess(v11, v28, 0LL, 0LL);
      uint64_t Strong = swift_weakLoadStrong(v11);
      if (Strong)
      {
        uint64_t v23 = *(void *)(Strong + 56);
        swift_bridgeObjectRetain(v23);
        swift_release();
        swift_beginAccess(v11, v27, 0LL, 0LL);
        if (swift_weakLoadStrong(v11))
        {
          sub_100026520(v23, (uint64_t)v21);
          swift_release();
        }

        swift_bridgeObjectRelease();
      }
    }

    swift_beginAccess(v11, v29, 0LL, 0LL);
    uint64_t v24 = swift_weakLoadStrong(v11);
    sub_100016F9C(v14, v16);
    if (v24)
    {
      swift_release();
      (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
      *(void *)(v24 + 56) = v21;
      swift_release();
      return swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_release();
      return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
    }
  }

  return result;
}

uint64_t sub_100026520(uint64_t a1, uint64_t a2)
{
  uint64_t v596 = type metadata accessor for Date(0LL);
  uint64_t v601 = *(void *)(v596 - 8);
  __chkstk_darwin(v596);
  v586 = (char *)&v582 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v599 = sub_100004AEC((uint64_t *)&unk_10099D760);
  uint64_t v6 = __chkstk_darwin(v599);
  uint64_t v591 = (uint64_t)&v582 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v595 = (uint64_t)&v582 - v8;
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v585 = (uint64_t)&v582 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  v590 = (char **)((char *)&v582 - v13);
  uint64_t v14 = __chkstk_darwin(v12);
  v600 = (char **)((char *)&v582 - v15);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v584 = (uint64_t)&v582 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  v597 = (char **)((char *)&v582 - v19);
  __chkstk_darwin(v18);
  v594 = (char **)((char *)&v582 - v20);
  uint64_t v588 = type metadata accessor for UUID(0LL);
  uint64_t v589 = *(void *)(v588 - 8);
  __chkstk_darwin(v588);
  v582 = (char *)&v582 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v587 = sub_100004AEC((uint64_t *)&unk_1009B5370);
  __chkstk_darwin(v587);
  uint64_t v598 = (uint64_t)&v582 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v24 = __chkstk_darwin(v23);
  int v26 = (char *)&v582 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __chkstk_darwin(v24);
  v592 = (char **)((char *)&v582 - v28);
  __chkstk_darwin(v27);
  v593 = (char **)((char *)&v582 - v29);
  uint64_t v30 = type metadata accessor for Mirror(0LL);
  uint64_t v31 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v33 = (char *)&v582 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v602 = v2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  uint64_t v35 = static os_log_type_t.default.getter(v34);
  uint64_t v36 = *sub_100650F90();
  uint64_t v37 = sub_100687710(0LL);
  os_log(_:dso:log:_:_:)( v35,  &_mh_execute_header,  v36,  "ConfigurationCoordinator diffing for subscribers...",  51LL,  2LL,  v37);
  swift_bridgeObjectRelease();
  uint64_t v38 = swift_allocObject(&unk_100939558, 24LL, 7LL);
  v604[3] = type metadata accessor for DefaultConfigurationLayer(0LL);
  uint64_t v39 = sub_10000A7C8(v604);
  sub_1004142F0((uint64_t)v39);
  uint64_t v40 = Mirror.init(reflecting:)(v604);
  uint64_t v41 = Mirror.children.getter(v40);
  uint64_t v42 = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v33, v30);
  uint64_t v43 = dispatch thunk of _AnyCollectionBox._count.getter(v42);
  uint64_t result = swift_release(v41);
  if (__OFSUB__(v43, 1LL))
  {
    __break(1u);
    return result;
  }

  *(void *)(v38 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v43 - 1;
  uint64_t v45 = sub_1006A0AF4(a1);
  unint64_t v47 = v46;
  uint64_t v48 = sub_1006A0AF4(a2);
  unint64_t v50 = v49;
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v45, v47);
  char v52 = v51;
  sub_100016F9C(v48, v50);
  sub_100016F9C(v45, v47);
  if ((v52 & 1) == 0)
  {
    uint64_t KeyPath = swift_getKeyPath(&unk_1007E4AC0);
    sub_10002A8B4(a2, KeyPath);
    swift_release(KeyPath);
  }

  sub_10002A6DC(v38);
  uint64_t v54 = sub_1006A0B40(a1);
  if (v54 != sub_1006A0B40(a2))
  {
    uint64_t v55 = swift_getKeyPath(&unk_1007E4AE8);
    sub_10002AE54(a2, v55);
    swift_release(v55);
  }

  sub_10002A6DC(v38);
  sub_1006A05FC(a1);
  double v57 = v56;
  sub_1006A05FC(a2);
  if (v57 != v58)
  {
    uint64_t v59 = swift_getKeyPath(&unk_1007E4B10);
    sub_10002B3F4(a2, v59);
    swift_release(v59);
  }

  sub_10002A6DC(v38);
  sub_1006A0B54(a1);
  double v61 = v60;
  sub_1006A0B54(a2);
  if (v61 != v62)
  {
    uint64_t v63 = swift_getKeyPath(&unk_1007E4B38);
    sub_10002B3F4(a2, v63);
    swift_release(v63);
  }

  sub_10002A6DC(v38);
  int v64 = sub_1006A0B60(a1) & 1;
  if (v64 != (sub_1006A0B60(a2) & 1))
  {
    uint64_t v65 = swift_getKeyPath(&unk_1007E4B60);
    sub_10002B994(a2, v65);
    swift_release(v65);
  }

  sub_10002A6DC(v38);
  uint64_t v66 = (void *)sub_1006A0B6C(a1);
  uint64_t v67 = (void *)sub_1006A0B6C(a2);
  char v68 = sub_100125B04(v66, v67);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v68 & 1) == 0)
  {
    uint64_t v69 = swift_getKeyPath(&unk_1007E4B88);
    sub_10002BF34(a2, v69);
    swift_release(v69);
  }

  sub_10002A6DC(v38);
  int v70 = sub_1006A0B80(a1) & 1;
  if (v70 != (sub_1006A0B80(a2) & 1))
  {
    uint64_t v71 = swift_getKeyPath(&unk_1007E4BB0);
    sub_10002B994(a2, v71);
    swift_release(v71);
  }

  sub_10002A6DC(v38);
  uint64_t v72 = sub_1006A0B8C(a1);
  uint64_t v74 = v73;
  uint64_t v76 = sub_1006A0B8C(a2);
  if (v72 == v76 && v74 == v75)
  {
    swift_bridgeObjectRelease_n(v74, 2LL);
  }

  else
  {
    char v77 = _stringCompareWithSmolCheck(_:_:expecting:)(v72, v74, v76, v75, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v77 & 1) == 0)
    {
      uint64_t v78 = swift_getKeyPath(&unk_1007E4BD8);
      sub_10002C4D4(a2, v78);
      swift_release(v78);
    }
  }

  sub_10002A6DC(v38);
  uint64_t v79 = sub_1006A0B98(a1);
  uint64_t v80 = sub_1006A0B98(a2);
  uint64_t v81 = v588;
  if (v79 != v80)
  {
    uint64_t v82 = swift_getKeyPath(&unk_1007E4C00);
    sub_10002CA74(a2, v82);
    swift_release(v82);
  }

  sub_10002A6DC(v38);
  int v83 = sub_1006A0BAC(a1) & 1;
  char v84 = sub_1006A0BAC(a2);
  v583 = v26;
  if (v83 != (v84 & 1))
  {
    uint64_t v85 = swift_getKeyPath(&unk_1007E4C28);
    sub_10002B994(a2, v85);
    swift_release(v85);
  }

  sub_10002A6DC(v38);
  int v86 = sub_1006A0BB8(a1) & 1;
  char v87 = sub_1006A0BB8(a2);
  uint64_t v88 = v592;
  if (v86 != (v87 & 1))
  {
    uint64_t v89 = swift_getKeyPath(&unk_1007E4C50);
    sub_10002B994(a2, v89);
    swift_release(v89);
  }

  sub_10002A6DC(v38);
  uint64_t v90 = sub_1006A0BC4(a1);
  if (v90 != sub_1006A0BC4(a2))
  {
    uint64_t v91 = swift_getKeyPath(&unk_1007E4C78);
    sub_10002CA74(a2, v91);
    swift_release(v91);
  }

  sub_10002A6DC(v38);
  uint64_t v92 = sub_1006A0608(a1);
  if (v92 != sub_1006A0608(a2))
  {
    uint64_t v93 = swift_getKeyPath(&unk_1007E4CA0);
    sub_10002CA74(a2, v93);
    swift_release(v93);
  }

  sub_10002A6DC(v38);
  uint64_t v94 = sub_1006A0BD8(a1);
  if (v94 != sub_1006A0BD8(a2))
  {
    uint64_t v95 = swift_getKeyPath(&unk_1007E4CC8);
    sub_10002CA74(a2, v95);
    swift_release(v95);
  }

  sub_10002A6DC(v38);
  uint64_t v96 = sub_1006A0BEC(a1);
  if (v96 != sub_1006A0BEC(a2))
  {
    uint64_t v97 = swift_getKeyPath(&unk_1007E4CF0);
    sub_10002CA74(a2, v97);
    swift_release(v97);
  }

  sub_10002A6DC(v38);
  uint64_t v98 = sub_1006A0C00(a1);
  if (v98 != sub_1006A0C00(a2))
  {
    uint64_t v99 = swift_getKeyPath(&unk_1007E4D18);
    sub_10002CA74(a2, v99);
    swift_release(v99);
  }

  sub_10002A6DC(v38);
  sub_1006A0C14(a1);
  double v101 = v100;
  sub_1006A0C14(a2);
  if (v101 != v102)
  {
    uint64_t v103 = swift_getKeyPath(&unk_1007E4D40);
    sub_10002B3F4(a2, v103);
    swift_release(v103);
  }

  sub_10002A6DC(v38);
  uint64_t v104 = sub_1006A0C20(a1);
  if (v104 != sub_1006A0C20(a2))
  {
    uint64_t v105 = swift_getKeyPath(&unk_1007E4D68);
    sub_10002CA74(a2, v105);
    swift_release(v105);
  }

  sub_10002A6DC(v38);
  uint64_t v106 = sub_1006A0C34(a1);
  if (v106 != sub_1006A0C34(a2))
  {
    uint64_t v107 = swift_getKeyPath(&unk_1007E4D90);
    sub_10002CA74(a2, v107);
    swift_release(v107);
  }

  sub_10002A6DC(v38);
  uint64_t v108 = sub_1006A0C48(a1);
  if (v108 != sub_1006A0C48(a2))
  {
    uint64_t v109 = swift_getKeyPath(&unk_1007E4DB8);
    sub_10002CA74(a2, v109);
    swift_release(v109);
  }

  sub_10002A6DC(v38);
  uint64_t v110 = sub_1006A0C5C(a1);
  if (v110 != sub_1006A0C5C(a2))
  {
    uint64_t v111 = swift_getKeyPath(&unk_1007E4DE0);
    sub_10002CA74(a2, v111);
    swift_release(v111);
  }

  sub_10002A6DC(v38);
  uint64_t v112 = sub_1006A0C70(a1);
  uint64_t v113 = sub_1006A0C70(a2);
  char v114 = sub_1001268D4(v112, v113);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v114 & 1) == 0)
  {
    uint64_t v115 = swift_getKeyPath(&unk_1007E4E08);
    sub_10002D014(a2, v115);
    swift_release(v115);
  }

  sub_10002A6DC(v38);
  int v116 = sub_1006A0C84(a1) & 1;
  if (v116 != (sub_1006A0C84(a2) & 1))
  {
    uint64_t v117 = swift_getKeyPath(&unk_1007E4E30);
    sub_10002B994(a2, v117);
    swift_release(v117);
  }

  sub_10002A6DC(v38);
  uint64_t v118 = sub_1006A0C90(a1);
  uint64_t v119 = sub_1006A0C90(a2);
  char v120 = sub_1001D3770(v118, v119);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v120 & 1) == 0)
  {
    uint64_t v121 = swift_getKeyPath(&unk_1007E4E58);
    sub_10002D5B4(a2, v121);
    swift_release(v121);
  }

  sub_10002A6DC(v38);
  uint64_t v122 = sub_1006A0CA4(a1);
  if (v122 != sub_1006A0CA4(a2))
  {
    uint64_t v123 = swift_getKeyPath(&unk_1007E4E80);
    sub_10002CA74(a2, v123);
    swift_release(v123);
  }

  sub_10002A6DC(v38);
  uint64_t v124 = sub_1006A0CB8(a1);
  if (v124 != sub_1006A0CB8(a2))
  {
    uint64_t v125 = swift_getKeyPath(&unk_1007E4EA8);
    sub_10002CA74(a2, v125);
    swift_release(v125);
  }

  sub_10002A6DC(v38);
  uint64_t v126 = sub_1006A0CCC(a1);
  if (v126 != sub_1006A0CCC(a2))
  {
    uint64_t v127 = swift_getKeyPath(&unk_1007E4ED0);
    sub_10002CA74(a2, v127);
    swift_release(v127);
  }

  sub_10002A6DC(v38);
  uint64_t v128 = sub_1006A0CE0(a1);
  if (v128 != sub_1006A0CE0(a2))
  {
    uint64_t v129 = swift_getKeyPath(&unk_1007E4EF8);
    sub_10002CA74(a2, v129);
    swift_release(v129);
  }

  sub_10002A6DC(v38);
  uint64_t v130 = sub_1006A0CF4(a1);
  if (v130 != sub_1006A0CF4(a2))
  {
    uint64_t v131 = swift_getKeyPath(&unk_1007E4F20);
    sub_10002CA74(a2, v131);
    swift_release(v131);
  }

  sub_10002A6DC(v38);
  uint64_t v132 = sub_1006A0D08(a1);
  if (v132 != sub_1006A0D08(a2))
  {
    uint64_t v133 = swift_getKeyPath(&unk_1007E4F48);
    sub_10002CA74(a2, v133);
    swift_release(v133);
  }

  sub_10002A6DC(v38);
  uint64_t v134 = sub_1006A0D1C(a1);
  if (v134 != sub_1006A0D1C(a2))
  {
    uint64_t v135 = swift_getKeyPath(&unk_1007E4F70);
    sub_10002CA74(a2, v135);
    swift_release(v135);
  }

  sub_10002A6DC(v38);
  uint64_t v136 = sub_1006A0D30(a1);
  if (v136 != sub_1006A0D30(a2))
  {
    uint64_t v137 = swift_getKeyPath(&unk_1007E4F98);
    sub_10002CA74(a2, v137);
    swift_release(v137);
  }

  sub_10002A6DC(v38);
  uint64_t v138 = sub_1006A0D44(a1);
  if (v138 != sub_1006A0D44(a2))
  {
    uint64_t v139 = swift_getKeyPath(&unk_1007E4FC0);
    sub_10002CA74(a2, v139);
    swift_release(v139);
  }

  sub_10002A6DC(v38);
  uint64_t v140 = sub_1006A0D58(a1);
  if (v140 != sub_1006A0D58(a2))
  {
    uint64_t v141 = swift_getKeyPath(&unk_1007E4FE8);
    sub_10002CA74(a2, v141);
    swift_release(v141);
  }

  sub_10002A6DC(v38);
  int v142 = sub_1006A0D6C(a1) & 1;
  if (v142 != (sub_1006A0D6C(a2) & 1))
  {
    uint64_t v143 = swift_getKeyPath(&unk_1007E5010);
    sub_10002B994(a2, v143);
    swift_release(v143);
  }

  sub_10002A6DC(v38);
  uint64_t v144 = sub_1006A0D78(a1);
  if (v144 != sub_1006A0D78(a2))
  {
    uint64_t v145 = swift_getKeyPath(&unk_1007E5038);
    sub_10002CA74(a2, v145);
    swift_release(v145);
  }

  sub_10002A6DC(v38);
  uint64_t v146 = sub_1006A0D8C(a1);
  if (v146 != sub_1006A0D8C(a2))
  {
    uint64_t v147 = swift_getKeyPath(&unk_1007E5060);
    sub_10002CA74(a2, v147);
    swift_release(v147);
  }

  sub_10002A6DC(v38);
  uint64_t v148 = sub_1006A0DA0(a1);
  if (v148 != sub_1006A0DA0(a2))
  {
    uint64_t v149 = swift_getKeyPath(&unk_1007E5088);
    sub_10002CA74(a2, v149);
    swift_release(v149);
  }

  sub_10002A6DC(v38);
  uint64_t v150 = sub_1006A0DB4(a1);
  if (v150 != sub_1006A0DB4(a2))
  {
    uint64_t v151 = swift_getKeyPath(&unk_1007E50B0);
    sub_10002CA74(a2, v151);
    swift_release(v151);
  }

  sub_10002A6DC(v38);
  uint64_t v152 = sub_1006A0DC8(a1);
  if (v152 != sub_1006A0DC8(a2))
  {
    uint64_t v153 = swift_getKeyPath(&unk_1007E50D8);
    sub_10002CA74(a2, v153);
    swift_release(v153);
  }

  sub_10002A6DC(v38);
  uint64_t v154 = sub_1006A0DDC(a1);
  if (v154 != sub_1006A0DDC(a2))
  {
    uint64_t v155 = swift_getKeyPath(&unk_1007E5100);
    sub_10002CA74(a2, v155);
    swift_release(v155);
  }

  sub_10002A6DC(v38);
  uint64_t v156 = sub_1006A0DF0(a1);
  if (v156 != sub_1006A0DF0(a2))
  {
    uint64_t v157 = swift_getKeyPath(&unk_1007E5128);
    sub_10002CA74(a2, v157);
    swift_release(v157);
  }

  sub_10002A6DC(v38);
  sub_1006A0E04(a1);
  double v159 = v158;
  sub_1006A0E04(a2);
  if (v159 != v160)
  {
    uint64_t v161 = swift_getKeyPath(&unk_1007E5150);
    sub_10002B3F4(a2, v161);
    swift_release(v161);
  }

  sub_10002A6DC(v38);
  sub_1006A0E10(a1);
  double v163 = v162;
  sub_1006A0E10(a2);
  if (v163 != v164)
  {
    uint64_t v165 = swift_getKeyPath(&unk_1007E5178);
    sub_10002B3F4(a2, v165);
    swift_release(v165);
  }

  sub_10002A6DC(v38);
  v166 = (void *)sub_1006A0E1C(a1);
  v167 = (void *)sub_1006A0E1C(a2);
  char v168 = sub_10030703C((uint64_t)v166, (uint64_t)v167);

  if ((v168 & 1) == 0)
  {
    uint64_t v169 = swift_getKeyPath(&unk_1007E51A0);
    sub_10002DB54(a2, v169);
    swift_release(v169);
  }

  sub_10002A6DC(v38);
  uint64_t v170 = sub_1006A0F10(a1);
  uint64_t v171 = sub_1006A0F10(a2);
  char v172 = sub_100126A40(v170, v171);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v172 & 1) == 0)
  {
    uint64_t v173 = swift_getKeyPath(&unk_1007E51C8);
    sub_10002E0F4(a2, v173);
    swift_release(v173);
  }

  sub_10002A6DC(v38);
  uint64_t v174 = sub_1006A0F24(a1);
  if (v174 != sub_1006A0F24(a2))
  {
    uint64_t v175 = swift_getKeyPath(&unk_1007E51F0);
    sub_10002CA74(a2, v175);
    swift_release(v175);
  }

  sub_10002A6DC(v38);
  uint64_t v176 = sub_1006A0F38(a1);
  uint64_t v177 = sub_1006A0F38(a2);
  v178 = v593;
  if (v176 != v177)
  {
    uint64_t v179 = swift_getKeyPath(&unk_1007E5218);
    sub_10002CA74(a2, v179);
    swift_release(v179);
  }

  sub_10002A6DC(v38);
  uint64_t v180 = sub_1006A0F4C(a1);
  if (v180 != sub_1006A0F4C(a2))
  {
    uint64_t v181 = swift_getKeyPath(&unk_1007E5240);
    sub_10002CA74(a2, v181);
    swift_release(v181);
  }

  sub_10002A6DC(v38);
  uint64_t v182 = sub_1006A0F60(a1);
  if (v182 != sub_1006A0F60(a2))
  {
    uint64_t v183 = swift_getKeyPath(&unk_1007E5268);
    sub_10002CA74(a2, v183);
    swift_release(v183);
  }

  sub_10002A6DC(v38);
  uint64_t v184 = sub_1006A0F74(a1);
  if (v184 != sub_1006A0F74(a2))
  {
    uint64_t v185 = swift_getKeyPath(&unk_1007E5290);
    sub_10002CA74(a2, v185);
    swift_release(v185);
  }

  sub_10002A6DC(v38);
  int v186 = sub_1006A0F88(a1) & 1;
  if (v186 != (sub_1006A0F88(a2) & 1))
  {
    uint64_t v187 = swift_getKeyPath(&unk_1007E52B8);
    sub_10002B994(a2, v187);
    swift_release(v187);
  }

  sub_10002A6DC(v38);
  sub_1006A061C(a1, v178);
  sub_1006A061C(a2, v88);
  uint64_t v188 = v598;
  uint64_t v189 = v598 + *(int *)(v587 + 48);
  sub_10001581C((uint64_t)v178, v598, &qword_10099D8A0);
  sub_10001581C((uint64_t)v88, v189, &qword_10099D8A0);
  uint64_t v190 = v589;
  uint64_t v191 = (uint64_t)v178;
  v192 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v589 + 48);
  if (v192(v188, 1LL, v81) == 1)
  {
    sub_100015794((uint64_t)v88, &qword_10099D8A0);
    sub_100015794(v191, &qword_10099D8A0);
    int v193 = v192(v189, 1LL, v81);
    uint64_t v194 = v595;
    v195 = v594;
    v196 = v597;
    uint64_t v197 = v596;
    if (v193 == 1)
    {
      sub_100015794(v598, &qword_10099D8A0);
      goto LABEL_116;
    }

    goto LABEL_114;
  }

  uint64_t v198 = (uint64_t)v583;
  sub_10001581C(v188, (uint64_t)v583, &qword_10099D8A0);
  if (v192(v189, 1LL, v81) == 1)
  {
    sub_100015794((uint64_t)v592, &qword_10099D8A0);
    sub_100015794((uint64_t)v593, &qword_10099D8A0);
    (*(void (**)(uint64_t, uint64_t))(v190 + 8))(v198, v81);
    uint64_t v194 = v595;
    v195 = v594;
    uint64_t v197 = v596;
LABEL_114:
    sub_100015794(v598, (uint64_t *)&unk_1009B5370);
LABEL_115:
    uint64_t v199 = swift_getKeyPath(&unk_1007E52E0);
    sub_10002E694(a2, v199);
    uint64_t v200 = v199;
    v196 = v597;
    swift_release(v200);
    goto LABEL_116;
  }

  v567 = v582;
  (*(void (**)(char *, uint64_t, uint64_t))(v190 + 32))(v582, v189, v81);
  uint64_t v568 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  char v569 = dispatch thunk of static Equatable.== infix(_:_:)(v198, v567, v81, v568);
  v570 = *(void (**)(char *, uint64_t))(v190 + 8);
  v570(v567, v81);
  sub_100015794((uint64_t)v592, &qword_10099D8A0);
  sub_100015794((uint64_t)v593, &qword_10099D8A0);
  v570((char *)v198, v81);
  sub_100015794(v598, &qword_10099D8A0);
  uint64_t v194 = v595;
  v195 = v594;
  v196 = v597;
  uint64_t v197 = v596;
  if ((v569 & 1) == 0) {
    goto LABEL_115;
  }
LABEL_116:
  sub_10002A6DC(v38);
  sub_1006A0F94(a1, v195);
  sub_1006A0F94(a2, v196);
  uint64_t v201 = v194 + *(int *)(v599 + 48);
  sub_10001581C((uint64_t)v195, v194, (uint64_t *)&unk_10099D720);
  sub_10001581C((uint64_t)v196, v201, (uint64_t *)&unk_10099D720);
  v202 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v601 + 48);
  if (v202(v194, 1LL, v197) == 1)
  {
    sub_100015794((uint64_t)v196, (uint64_t *)&unk_10099D720);
    sub_100015794((uint64_t)v195, (uint64_t *)&unk_10099D720);
    if (v202(v201, 1LL, v197) == 1)
    {
      sub_100015794(v595, (uint64_t *)&unk_10099D720);
      uint64_t v203 = v591;
      goto LABEL_123;
    }

    goto LABEL_121;
  }

  uint64_t v204 = v584;
  sub_10001581C(v194, v584, (uint64_t *)&unk_10099D720);
  if (v202(v201, 1LL, v197) == 1)
  {
    sub_100015794((uint64_t)v597, (uint64_t *)&unk_10099D720);
    sub_100015794((uint64_t)v594, (uint64_t *)&unk_10099D720);
    (*(void (**)(uint64_t, uint64_t))(v601 + 8))(v204, v197);
LABEL_121:
    sub_100015794(v595, (uint64_t *)&unk_10099D760);
    uint64_t v203 = v591;
LABEL_122:
    uint64_t v205 = swift_getKeyPath(&unk_1007E5308);
    sub_10002EC34(a2, v205);
    swift_release(v205);
    goto LABEL_123;
  }

  uint64_t v571 = v601;
  v572 = v586;
  (*(void (**)(char *, uint64_t, uint64_t))(v601 + 32))(v586, v201, v197);
  uint64_t v573 = sub_100007864( &qword_10099DA90,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  char v574 = dispatch thunk of static Equatable.== infix(_:_:)(v204, v572, v197, v573);
  v575 = *(void (**)(char *, uint64_t))(v571 + 8);
  v575(v572, v596);
  sub_100015794((uint64_t)v597, (uint64_t *)&unk_10099D720);
  sub_100015794((uint64_t)v594, (uint64_t *)&unk_10099D720);
  v575((char *)v204, v596);
  uint64_t v197 = v596;
  sub_100015794(v194, (uint64_t *)&unk_10099D720);
  uint64_t v203 = v591;
  if ((v574 & 1) == 0) {
    goto LABEL_122;
  }
LABEL_123:
  sub_10002A6DC(v38);
  uint64_t v206 = sub_1006A0FB0(a1);
  char v208 = v207;
  uint64_t v209 = sub_1006A0FB0(a2);
  if ((v208 & 1) != 0)
  {
    if ((v210 & 1) != 0) {
      goto LABEL_129;
    }
    goto LABEL_128;
  }

  if ((v210 & 1) != 0 || v206 != v209)
  {
LABEL_128:
    uint64_t v211 = swift_getKeyPath(&unk_1007E5330);
    sub_10002F1D4(a2, v211);
    swift_release(v211);
  }

LABEL_129:
  sub_10002A6DC(v38);
  v212 = v600;
  sub_1006A1004(a1, v600);
  v213 = v590;
  sub_1006A1004(a2, v590);
  uint64_t v214 = v203 + *(int *)(v599 + 48);
  uint64_t v215 = (uint64_t)v212;
  uint64_t v216 = (uint64_t)v213;
  sub_10001581C(v215, v203, (uint64_t *)&unk_10099D720);
  sub_10001581C((uint64_t)v213, v214, (uint64_t *)&unk_10099D720);
  if (v202(v203, 1LL, v197) != 1)
  {
    uint64_t v217 = v585;
    sub_10001581C(v203, v585, (uint64_t *)&unk_10099D720);
    if (v202(v214, 1LL, v197) != 1)
    {
      uint64_t v576 = v601;
      uint64_t v577 = v216;
      v578 = v586;
      (*(void (**)(char *, uint64_t, uint64_t))(v601 + 32))(v586, v214, v197);
      uint64_t v579 = sub_100007864( &qword_10099DA90,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      char v580 = dispatch thunk of static Equatable.== infix(_:_:)(v217, v578, v197, v579);
      v581 = *(void (**)(char *, uint64_t))(v576 + 8);
      v581(v578, v197);
      sub_100015794(v577, (uint64_t *)&unk_10099D720);
      sub_100015794((uint64_t)v600, (uint64_t *)&unk_10099D720);
      v581((char *)v217, v197);
      sub_100015794(v591, (uint64_t *)&unk_10099D720);
      if ((v580 & 1) != 0) {
        goto LABEL_136;
      }
      goto LABEL_135;
    }

    sub_100015794(v216, (uint64_t *)&unk_10099D720);
    sub_100015794((uint64_t)v600, (uint64_t *)&unk_10099D720);
    (*(void (**)(uint64_t, uint64_t))(v601 + 8))(v217, v197);
LABEL_134:
    sub_100015794(v203, (uint64_t *)&unk_10099D760);
LABEL_135:
    uint64_t v218 = swift_getKeyPath(&unk_1007E5358);
    sub_10002EC34(a2, v218);
    swift_release(v218);
    goto LABEL_136;
  }

  sub_100015794((uint64_t)v213, (uint64_t *)&unk_10099D720);
  sub_100015794((uint64_t)v600, (uint64_t *)&unk_10099D720);
  if (v202(v214, 1LL, v197) != 1) {
    goto LABEL_134;
  }
  sub_100015794(v203, (uint64_t *)&unk_10099D720);
LABEL_136:
  sub_10002A6DC(v38);
  uint64_t v219 = sub_1006A107C(a1);
  if (v219 != sub_1006A107C(a2))
  {
    uint64_t v220 = swift_getKeyPath(&unk_1007E5380);
    sub_10002CA74(a2, v220);
    swift_release(v220);
  }

  sub_10002A6DC(v38);
  uint64_t v221 = sub_1006A1090(a1);
  if (v221 != sub_1006A1090(a2))
  {
    uint64_t v222 = swift_getKeyPath(&unk_1007E53A8);
    sub_10002CA74(a2, v222);
    swift_release(v222);
  }

  sub_10002A6DC(v38);
  sub_1006A10A4(a1);
  double v224 = v223;
  sub_1006A10A4(a2);
  if (v224 != v225)
  {
    uint64_t v226 = swift_getKeyPath(&unk_1007E53D0);
    sub_10002B3F4(a2, v226);
    swift_release(v226);
  }

  sub_10002A6DC(v38);
  sub_1006A10B0(a1);
  double v228 = v227;
  sub_1006A10B0(a2);
  if (v228 != v229)
  {
    uint64_t v230 = swift_getKeyPath(&unk_1007E53F8);
    sub_10002B3F4(a2, v230);
    swift_release(v230);
  }

  sub_10002A6DC(v38);
  sub_1006A10BC(a1);
  double v232 = v231;
  sub_1006A10BC(a2);
  if (v232 != v233)
  {
    uint64_t v234 = swift_getKeyPath(&unk_1007E5420);
    sub_10002B3F4(a2, v234);
    swift_release(v234);
  }

  sub_10002A6DC(v38);
  sub_1006A10C8(a1);
  double v236 = v235;
  sub_1006A10C8(a2);
  if (v236 != v237)
  {
    uint64_t v238 = swift_getKeyPath(&unk_1007E5448);
    sub_10002B3F4(a2, v238);
    swift_release(v238);
  }

  sub_10002A6DC(v38);
  sub_1006A10D4(a1, (uint64_t)v603);
  sub_1006A10D4(a2, (uint64_t)v604);
  char v239 = _s12searchpartyd19AllMacBeaconConfigsV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v603, (uint64_t)v604);
  sub_100037C10((uint64_t)v604);
  sub_100037C10((uint64_t)v603);
  if ((v239 & 1) == 0)
  {
    uint64_t v240 = swift_getKeyPath(&unk_1007E5470);
    sub_10002F774(a2, v240);
    swift_release(v240);
  }

  sub_10002A6DC(v38);
  int v241 = sub_1006A1160(a1) & 1;
  if (v241 != (sub_1006A1160(a2) & 1))
  {
    uint64_t v242 = swift_getKeyPath(&unk_1007E5498);
    sub_10002B994(a2, v242);
    swift_release(v242);
  }

  sub_10002A6DC(v38);
  int v243 = sub_1006A116C(a1) & 1;
  if (v243 != (sub_1006A116C(a2) & 1))
  {
    uint64_t v244 = swift_getKeyPath(&unk_1007E54C0);
    sub_10002B994(a2, v244);
    swift_release(v244);
  }

  sub_10002A6DC(v38);
  int v245 = sub_1006A1178(a1) & 1;
  if (v245 != (sub_1006A1178(a2) & 1))
  {
    uint64_t v246 = swift_getKeyPath(&unk_1007E54E8);
    sub_10002B994(a2, v246);
    swift_release(v246);
  }

  sub_10002A6DC(v38);
  sub_1006A1184(a1);
  double v248 = v247;
  sub_1006A1184(a2);
  if (v248 != v249)
  {
    uint64_t v250 = swift_getKeyPath(&unk_1007E5510);
    sub_10002B3F4(a2, v250);
    swift_release(v250);
  }

  sub_10002A6DC(v38);
  sub_1006A1190(a1);
  double v252 = v251;
  sub_1006A1190(a2);
  if (v252 != v253)
  {
    uint64_t v254 = swift_getKeyPath(&unk_1007E5538);
    sub_10002B3F4(a2, v254);
    swift_release(v254);
  }

  sub_10002A6DC(v38);
  sub_1006A119C(a1);
  double v256 = v255;
  sub_1006A119C(a2);
  if (v256 != v257)
  {
    uint64_t v258 = swift_getKeyPath(&unk_1007E5560);
    sub_10002B3F4(a2, v258);
    swift_release(v258);
  }

  sub_10002A6DC(v38);
  sub_1006A11A8(a1);
  double v260 = v259;
  sub_1006A11A8(a2);
  if (v260 != v261)
  {
    uint64_t v262 = swift_getKeyPath(&unk_1007E5588);
    sub_10002B3F4(a2, v262);
    swift_release(v262);
  }

  sub_10002A6DC(v38);
  sub_1006A11B4(a1);
  double v264 = v263;
  sub_1006A11B4(a2);
  if (v264 != v265)
  {
    uint64_t v266 = swift_getKeyPath(&unk_1007E55B0);
    sub_10002B3F4(a2, v266);
    swift_release(v266);
  }

  sub_10002A6DC(v38);
  sub_1006A11C0(a1);
  double v268 = v267;
  sub_1006A11C0(a2);
  if (v268 != v269)
  {
    uint64_t v270 = swift_getKeyPath(&unk_1007E55D8);
    sub_10002B3F4(a2, v270);
    swift_release(v270);
  }

  sub_10002A6DC(v38);
  sub_1006A11CC(a1);
  double v272 = v271;
  sub_1006A11CC(a2);
  if (v272 != v273)
  {
    uint64_t v274 = swift_getKeyPath(&unk_1007E5600);
    sub_10002B3F4(a2, v274);
    swift_release(v274);
  }

  sub_10002A6DC(v38);
  sub_1006A11D8(a1);
  double v276 = v275;
  sub_1006A11D8(a2);
  if (v276 != v277)
  {
    uint64_t v278 = swift_getKeyPath(&unk_1007E5628);
    sub_10002B3F4(a2, v278);
    swift_release(v278);
  }

  sub_10002A6DC(v38);
  uint64_t v279 = sub_1006A11E4(a1);
  uint64_t v281 = v280;
  uint64_t v283 = sub_1006A11E4(a2);
  if (v279 == v283 && v281 == v282)
  {
    swift_bridgeObjectRelease_n(v281, 2LL);
  }

  else
  {
    char v284 = _stringCompareWithSmolCheck(_:_:expecting:)(v279, v281, v283, v282, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v284 & 1) == 0)
    {
      uint64_t v285 = swift_getKeyPath(&unk_1007E5650);
      sub_10002C4D4(a2, v285);
      swift_release(v285);
    }
  }

  sub_10002A6DC(v38);
  uint64_t v286 = sub_1006A11F0(a1);
  if (v286 != sub_1006A11F0(a2))
  {
    uint64_t v287 = swift_getKeyPath(&unk_1007E5678);
    sub_10002CA74(a2, v287);
    swift_release(v287);
  }

  sub_10002A6DC(v38);
  uint64_t v288 = sub_1006A1204(a1);
  uint64_t v290 = v289;
  uint64_t v292 = sub_1006A1204(a2);
  if (v288 == v292 && v290 == v291)
  {
    swift_bridgeObjectRelease_n(v290, 2LL);
  }

  else
  {
    char v293 = _stringCompareWithSmolCheck(_:_:expecting:)(v288, v290, v292, v291, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v293 & 1) == 0)
    {
      uint64_t v294 = swift_getKeyPath(&unk_1007E56A0);
      sub_10002C4D4(a2, v294);
      swift_release(v294);
    }
  }

  sub_10002A6DC(v38);
  uint64_t v295 = sub_1006A1210(a1);
  if (v295 != sub_1006A1210(a2))
  {
    uint64_t v296 = swift_getKeyPath(&unk_1007E56C8);
    sub_10002CA74(a2, v296);
    swift_release(v296);
  }

  sub_10002A6DC(v38);
  v297 = (void *)sub_1006A1224(a1);
  v298 = (void *)sub_1006A1224(a2);
  BOOL v299 = sub_100126B14(v297, v298);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v299)
  {
    uint64_t v300 = swift_getKeyPath(&unk_1007E56F0);
    sub_10002FD14(a2, v300);
    swift_release(v300);
  }

  sub_10002A6DC(v38);
  uint64_t v301 = sub_1006A1238(a1);
  uint64_t v303 = v302;
  uint64_t v305 = sub_1006A1238(a2);
  if (v301 == v305 && v303 == v304)
  {
    swift_bridgeObjectRelease_n(v303, 2LL);
  }

  else
  {
    char v306 = _stringCompareWithSmolCheck(_:_:expecting:)(v301, v303, v305, v304, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v306 & 1) == 0)
    {
      uint64_t v307 = swift_getKeyPath(&unk_1007E5718);
      sub_10002C4D4(a2, v307);
      swift_release(v307);
    }
  }

  sub_10002A6DC(v38);
  sub_1006A1244(a1);
  double v309 = v308;
  sub_1006A1244(a2);
  if (v309 != v310)
  {
    uint64_t v311 = swift_getKeyPath(&unk_1007E5740);
    sub_10002B3F4(a2, v311);
    swift_release(v311);
  }

  sub_10002A6DC(v38);
  int v312 = sub_1006A1250(a1) & 1;
  if (v312 != (sub_1006A1250(a2) & 1))
  {
    uint64_t v313 = swift_getKeyPath(&unk_1007E5768);
    sub_10002B994(a2, v313);
    swift_release(v313);
  }

  sub_10002A6DC(v38);
  int v314 = sub_1006A125C(a1) & 1;
  if (v314 != (sub_1006A125C(a2) & 1))
  {
    uint64_t v315 = swift_getKeyPath(&unk_1007E5790);
    sub_10002B994(a2, v315);
    swift_release(v315);
  }

  sub_10002A6DC(v38);
  int v316 = sub_1006A1268(a1) & 1;
  if (v316 != (sub_1006A1268(a2) & 1))
  {
    uint64_t v317 = swift_getKeyPath(&unk_1007E57B8);
    sub_10002B994(a2, v317);
    swift_release(v317);
  }

  sub_10002A6DC(v38);
  int v318 = sub_1006A1274(a1) & 1;
  if (v318 != (sub_1006A1274(a2) & 1))
  {
    uint64_t v319 = swift_getKeyPath(&unk_1007E57E0);
    sub_10002B994(a2, v319);
    swift_release(v319);
  }

  sub_10002A6DC(v38);
  uint64_t v320 = sub_1006A1280(a1);
  if (v320 != sub_1006A1280(a2))
  {
    uint64_t v321 = swift_getKeyPath(&unk_1007E5808);
    sub_10002CA74(a2, v321);
    swift_release(v321);
  }

  sub_10002A6DC(v38);
  uint64_t v322 = sub_1006A1294(a1);
  if (v322 != sub_1006A1294(a2))
  {
    uint64_t v323 = swift_getKeyPath(&unk_1007E5830);
    sub_10002CA74(a2, v323);
    swift_release(v323);
  }

  sub_10002A6DC(v38);
  uint64_t v324 = sub_1006A12A8(a1);
  if (v324 != sub_1006A12A8(a2))
  {
    uint64_t v325 = swift_getKeyPath(&unk_1007E5858);
    sub_10002CA74(a2, v325);
    swift_release(v325);
  }

  sub_10002A6DC(v38);
  uint64_t v326 = sub_1006A12BC(a1);
  if (v326 != sub_1006A12BC(a2))
  {
    uint64_t v327 = swift_getKeyPath(&unk_1007E5880);
    sub_10002CA74(a2, v327);
    swift_release(v327);
  }

  sub_10002A6DC(v38);
  uint64_t v328 = sub_1006A12D0(a1);
  if (v328 != sub_1006A12D0(a2))
  {
    uint64_t v329 = swift_getKeyPath(&unk_1007E58A8);
    sub_10002CA74(a2, v329);
    swift_release(v329);
  }

  sub_10002A6DC(v38);
  sub_1006A12E4(a1);
  double v331 = v330;
  sub_1006A12E4(a2);
  if (v331 != v332)
  {
    uint64_t v333 = swift_getKeyPath(&unk_1007E58D0);
    sub_10002B3F4(a2, v333);
    swift_release(v333);
  }

  sub_10002A6DC(v38);
  sub_1006A12F0(a1);
  double v335 = v334;
  sub_1006A12F0(a2);
  if (v335 != v336)
  {
    uint64_t v337 = swift_getKeyPath(&unk_1007E58F8);
    sub_10002B3F4(a2, v337);
    swift_release(v337);
  }

  sub_10002A6DC(v38);
  sub_1006A12FC(a1);
  double v339 = v338;
  sub_1006A12FC(a2);
  if (v339 != v340)
  {
    uint64_t v341 = swift_getKeyPath(&unk_1007E5920);
    sub_10002B3F4(a2, v341);
    swift_release(v341);
  }

  sub_10002A6DC(v38);
  uint64_t v342 = sub_1006A1308(a1);
  if (v342 != sub_1006A1308(a2))
  {
    uint64_t v343 = swift_getKeyPath(&unk_1007E5948);
    sub_10002CA74(a2, v343);
    swift_release(v343);
  }

  sub_10002A6DC(v38);
  uint64_t v344 = sub_1006A131C(a1);
  if (v344 != sub_1006A131C(a2))
  {
    uint64_t v345 = swift_getKeyPath(&unk_1007E5970);
    sub_10002CA74(a2, v345);
    swift_release(v345);
  }

  sub_10002A6DC(v38);
  uint64_t v346 = sub_1006A1330(a1);
  if (v346 != sub_1006A1330(a2))
  {
    uint64_t v347 = swift_getKeyPath(&unk_1007E5998);
    sub_10002CA74(a2, v347);
    swift_release(v347);
  }

  sub_10002A6DC(v38);
  uint64_t v348 = sub_1006A1344(a1);
  if (v348 != sub_1006A1344(a2))
  {
    uint64_t v349 = swift_getKeyPath(&unk_1007E59C0);
    sub_10002CA74(a2, v349);
    swift_release(v349);
  }

  sub_10002A6DC(v38);
  sub_1006A1358(a1);
  double v351 = v350;
  sub_1006A1358(a2);
  if (v351 != v352)
  {
    uint64_t v353 = swift_getKeyPath(&unk_1007E59E8);
    sub_10002B3F4(a2, v353);
    swift_release(v353);
  }

  sub_10002A6DC(v38);
  sub_1006A1364(a1);
  double v355 = v354;
  sub_1006A1364(a2);
  if (v355 != v356)
  {
    uint64_t v357 = swift_getKeyPath(&unk_1007E5A10);
    sub_10002B3F4(a2, v357);
    swift_release(v357);
  }

  sub_10002A6DC(v38);
  uint64_t v358 = sub_1006A1370(a1);
  if (v358 != sub_1006A1370(a2))
  {
    uint64_t v359 = swift_getKeyPath(&unk_1007E5A38);
    sub_10002CA74(a2, v359);
    swift_release(v359);
  }

  sub_10002A6DC(v38);
  uint64_t v360 = sub_1006A1384(a1);
  if (v360 != sub_1006A1384(a2))
  {
    uint64_t v361 = swift_getKeyPath(&unk_1007E5A60);
    sub_10002CA74(a2, v361);
    swift_release(v361);
  }

  sub_10002A6DC(v38);
  uint64_t v362 = sub_1006A1398(a1);
  if (v362 != sub_1006A1398(a2))
  {
    uint64_t v363 = swift_getKeyPath(&unk_1007E5A88);
    sub_10002CA74(a2, v363);
    swift_release(v363);
  }

  sub_10002A6DC(v38);
  uint64_t v364 = sub_1006A13AC(a1);
  if (v364 != sub_1006A13AC(a2))
  {
    uint64_t v365 = swift_getKeyPath(&unk_1007E5AB0);
    sub_10002CA74(a2, v365);
    swift_release(v365);
  }

  sub_10002A6DC(v38);
  uint64_t v366 = sub_1006A13C0(a1);
  if (v366 != sub_1006A13C0(a2))
  {
    uint64_t v367 = swift_getKeyPath(&unk_1007E5AD8);
    sub_10002CA74(a2, v367);
    swift_release(v367);
  }

  sub_10002A6DC(v38);
  uint64_t v368 = sub_1006A13D4(a1);
  if (v368 != sub_1006A13D4(a2))
  {
    uint64_t v369 = swift_getKeyPath(&unk_1007E5B00);
    sub_10002CA74(a2, v369);
    swift_release(v369);
  }

  sub_10002A6DC(v38);
  uint64_t v370 = sub_1006A13E8(a1);
  if (v370 != sub_1006A13E8(a2))
  {
    uint64_t v371 = swift_getKeyPath(&unk_1007E5B28);
    sub_10002CA74(a2, v371);
    swift_release(v371);
  }

  sub_10002A6DC(v38);
  uint64_t v372 = sub_1006A13FC(a1);
  if (v372 != sub_1006A13FC(a2))
  {
    uint64_t v373 = swift_getKeyPath(&unk_1007E5B50);
    sub_10002CA74(a2, v373);
    swift_release(v373);
  }

  sub_10002A6DC(v38);
  sub_1006A1410(a1);
  double v375 = v374;
  sub_1006A1410(a2);
  if (v375 != v376)
  {
    uint64_t v377 = swift_getKeyPath(&unk_1007E5B78);
    sub_10002B3F4(a2, v377);
    swift_release(v377);
  }

  sub_10002A6DC(v38);
  int v378 = sub_1006A141C(a1) & 1;
  if (v378 != (sub_1006A141C(a2) & 1))
  {
    uint64_t v379 = swift_getKeyPath(&unk_1007E5BA0);
    sub_10002B994(a2, v379);
    swift_release(v379);
  }

  sub_10002A6DC(v38);
  sub_1006A1428(a1);
  double v381 = v380;
  sub_1006A1428(a2);
  if (v381 != v382)
  {
    uint64_t v383 = swift_getKeyPath(&unk_1007E5BC8);
    sub_10002B3F4(a2, v383);
    swift_release(v383);
  }

  sub_10002A6DC(v38);
  sub_1006A1434(a1);
  double v385 = v384;
  sub_1006A1434(a2);
  if (v385 != v386)
  {
    uint64_t v387 = swift_getKeyPath(&unk_1007E5BF0);
    sub_10002B3F4(a2, v387);
    swift_release(v387);
  }

  sub_10002A6DC(v38);
  uint64_t v388 = sub_1006A1440(a1);
  if (v388 != sub_1006A1440(a2))
  {
    uint64_t v389 = swift_getKeyPath(&unk_1007E5C18);
    sub_10002CA74(a2, v389);
    swift_release(v389);
  }

  sub_10002A6DC(v38);
  int v390 = sub_1006A1454(a1) & 1;
  if (v390 != (sub_1006A1454(a2) & 1))
  {
    uint64_t v391 = swift_getKeyPath(&unk_1007E5C40);
    sub_10002B994(a2, v391);
    swift_release(v391);
  }

  sub_10002A6DC(v38);
  int v392 = sub_1006A1460(a1) & 1;
  if (v392 != (sub_1006A1460(a2) & 1))
  {
    uint64_t v393 = swift_getKeyPath(&unk_1007E5C68);
    sub_10002B994(a2, v393);
    swift_release(v393);
  }

  sub_10002A6DC(v38);
  int v394 = sub_1006A146C(a1) & 1;
  if (v394 != (sub_1006A146C(a2) & 1))
  {
    uint64_t v395 = swift_getKeyPath(&unk_1007E5C90);
    sub_10002B994(a2, v395);
    swift_release(v395);
  }

  sub_10002A6DC(v38);
  uint64_t v396 = sub_1006A1478(a1);
  if (v396 != sub_1006A1478(a2))
  {
    uint64_t v397 = swift_getKeyPath(&unk_1007E5CB8);
    sub_10002CA74(a2, v397);
    swift_release(v397);
  }

  sub_10002A6DC(v38);
  sub_1006A148C(a1);
  double v399 = v398;
  sub_1006A148C(a2);
  if (v399 != v400)
  {
    uint64_t v401 = swift_getKeyPath(&unk_1007E5CE0);
    sub_10002B3F4(a2, v401);
    swift_release(v401);
  }

  sub_10002A6DC(v38);
  sub_1006A1498(a1);
  double v403 = v402;
  sub_1006A1498(a2);
  if (v403 != v404)
  {
    uint64_t v405 = swift_getKeyPath(&unk_1007E5D08);
    sub_10002B3F4(a2, v405);
    swift_release(v405);
  }

  sub_10002A6DC(v38);
  uint64_t v406 = sub_1006A14A4(a1);
  if (v406 != sub_1006A14A4(a2))
  {
    uint64_t v407 = swift_getKeyPath(&unk_1007E5D30);
    sub_1000302B4(a2, v407);
    swift_release(v407);
  }

  sub_10002A6DC(v38);
  uint64_t v408 = sub_1006A14B8(a1);
  if (v408 != sub_1006A14B8(a2))
  {
    uint64_t v409 = swift_getKeyPath(&unk_1007E5D58);
    sub_1000302B4(a2, v409);
    swift_release(v409);
  }

  sub_10002A6DC(v38);
  uint64_t v410 = sub_1006A14CC(a1);
  if (v410 != sub_1006A14CC(a2))
  {
    uint64_t v411 = swift_getKeyPath(&unk_1007E5D80);
    sub_1000302B4(a2, v411);
    swift_release(v411);
  }

  sub_10002A6DC(v38);
  uint64_t v412 = sub_1006A14E0(a1);
  if (v412 != sub_1006A14E0(a2))
  {
    uint64_t v413 = swift_getKeyPath(&unk_1007E5DA8);
    sub_1000302B4(a2, v413);
    swift_release(v413);
  }

  sub_10002A6DC(v38);
  sub_1006A14F4(a1);
  double v415 = v414;
  sub_1006A14F4(a2);
  if (v415 != v416)
  {
    uint64_t v417 = swift_getKeyPath(&unk_1007E5DD0);
    sub_10002B3F4(a2, v417);
    swift_release(v417);
  }

  sub_10002A6DC(v38);
  int v418 = sub_1006A1500(a1) & 1;
  if (v418 != (sub_1006A1500(a2) & 1))
  {
    uint64_t v419 = swift_getKeyPath(&unk_1007E5DF8);
    sub_10002B994(a2, v419);
    swift_release(v419);
  }

  sub_10002A6DC(v38);
  sub_1006A150C(a1);
  double v421 = v420;
  sub_1006A150C(a2);
  if (v421 != v422)
  {
    uint64_t v423 = swift_getKeyPath(&unk_1007E5E20);
    sub_10002B3F4(a2, v423);
    swift_release(v423);
  }

  sub_10002A6DC(v38);
  sub_1006A1518(a1);
  double v425 = v424;
  sub_1006A1518(a2);
  if (v425 != v426)
  {
    uint64_t v427 = swift_getKeyPath(&unk_1007E5E48);
    sub_10002B3F4(a2, v427);
    swift_release(v427);
  }

  sub_10002A6DC(v38);
  v428 = (void *)sub_1006A1524(a1);
  v429 = (void *)sub_1006A1524(a2);
  BOOL v430 = sub_100126B14(v428, v429);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v430)
  {
    uint64_t v431 = swift_getKeyPath(&unk_1007E5E70);
    sub_10002FD14(a2, v431);
    swift_release(v431);
  }

  sub_10002A6DC(v38);
  int v432 = sub_1006A1538(a1) & 1;
  if (v432 != (sub_1006A1538(a2) & 1))
  {
    uint64_t v433 = swift_getKeyPath(&unk_1007E5E98);
    sub_10002B994(a2, v433);
    swift_release(v433);
  }

  sub_10002A6DC(v38);
  int v434 = sub_1006A1544(a1) & 1;
  if (v434 != (sub_1006A1544(a2) & 1))
  {
    uint64_t v435 = swift_getKeyPath(&unk_1007E5EC0);
    sub_10002B994(a2, v435);
    swift_release(v435);
  }

  sub_10002A6DC(v38);
  uint64_t v436 = sub_1006A1550(a1);
  uint64_t v437 = sub_1006A1550(a2);
  char v438 = sub_1001D3C60(v436, v437);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v438 & 1) == 0)
  {
    uint64_t v439 = swift_getKeyPath(&unk_1007E5EE8);
    sub_100030854(a2, v439);
    swift_release(v439);
  }

  sub_10002A6DC(v38);
  sub_1006A165C(a1);
  double v441 = v440;
  sub_1006A165C(a2);
  if (v441 != v442)
  {
    uint64_t v443 = swift_getKeyPath(&unk_1007E5F10);
    sub_10002B3F4(a2, v443);
    swift_release(v443);
  }

  sub_10002A6DC(v38);
  sub_1006A1668(a1);
  double v445 = v444;
  sub_1006A1668(a2);
  if (v445 != v446)
  {
    uint64_t v447 = swift_getKeyPath(&unk_1007E5F38);
    sub_10002B3F4(a2, v447);
    swift_release(v447);
  }

  sub_10002A6DC(v38);
  int v448 = sub_1006A1674(a1) & 1;
  if (v448 != (sub_1006A1674(a2) & 1))
  {
    uint64_t v449 = swift_getKeyPath(&unk_1007E5F60);
    sub_10002B994(a2, v449);
    swift_release(v449);
  }

  sub_10002A6DC(v38);
  int v450 = sub_1006A1680(a1) & 1;
  if (v450 != (sub_1006A1680(a2) & 1))
  {
    uint64_t v451 = swift_getKeyPath(&unk_1007E5F88);
    sub_10002B994(a2, v451);
    swift_release(v451);
  }

  sub_10002A6DC(v38);
  uint64_t v452 = sub_1006A168C(a1);
  if (v452 != sub_1006A168C(a2))
  {
    uint64_t v453 = swift_getKeyPath(&unk_1007E5FB0);
    sub_10002AE54(a2, v453);
    swift_release(v453);
  }

  sub_10002A6DC(v38);
  uint64_t v454 = sub_1006A16A0(a1);
  if (v454 != sub_1006A16A0(a2))
  {
    uint64_t v455 = swift_getKeyPath(&unk_1007E5FD8);
    sub_10002AE54(a2, v455);
    swift_release(v455);
  }

  sub_10002A6DC(v38);
  uint64_t v456 = sub_1006A16B4(a1);
  if (v456 != sub_1006A16B4(a2))
  {
    uint64_t v457 = swift_getKeyPath(&unk_1007E6000);
    sub_10002AE54(a2, v457);
    swift_release(v457);
  }

  sub_10002A6DC(v38);
  uint64_t v458 = sub_1006A16C8(a1);
  if (v458 != sub_1006A16C8(a2))
  {
    uint64_t v459 = swift_getKeyPath(&unk_1007E6028);
    sub_10002AE54(a2, v459);
    swift_release(v459);
  }

  sub_10002A6DC(v38);
  uint64_t v460 = sub_1006A16DC(a1);
  if (v460 != sub_1006A16DC(a2))
  {
    uint64_t v461 = swift_getKeyPath(&unk_1007E6050);
    sub_10002AE54(a2, v461);
    swift_release(v461);
  }

  sub_10002A6DC(v38);
  uint64_t v462 = sub_1006A16F0(a1);
  if (v462 != sub_1006A16F0(a2))
  {
    uint64_t v463 = swift_getKeyPath(&unk_1007E6078);
    sub_10002AE54(a2, v463);
    swift_release(v463);
  }

  sub_10002A6DC(v38);
  uint64_t v464 = sub_1006A1704(a1);
  if (v464 != sub_1006A1704(a2))
  {
    uint64_t v465 = swift_getKeyPath(&unk_1007E60A0);
    sub_10002AE54(a2, v465);
    swift_release(v465);
  }

  sub_10002A6DC(v38);
  uint64_t v466 = sub_1006A1718(a1);
  if (v466 != sub_1006A1718(a2))
  {
    uint64_t v467 = swift_getKeyPath(&unk_1007E60C8);
    sub_10002AE54(a2, v467);
    swift_release(v467);
  }

  sub_10002A6DC(v38);
  uint64_t v468 = sub_1006A172C(a1);
  if (v468 != sub_1006A172C(a2))
  {
    uint64_t v469 = swift_getKeyPath(&unk_1007E60F0);
    sub_10002AE54(a2, v469);
    swift_release(v469);
  }

  sub_10002A6DC(v38);
  uint64_t v470 = sub_1006A1740(a1);
  if (v470 != sub_1006A1740(a2))
  {
    uint64_t v471 = swift_getKeyPath(&unk_1007E6118);
    sub_10002AE54(a2, v471);
    swift_release(v471);
  }

  sub_10002A6DC(v38);
  uint64_t v472 = sub_1006A1754(a1);
  if (v472 != sub_1006A1754(a2))
  {
    uint64_t v473 = swift_getKeyPath(&unk_1007E6140);
    sub_10002AE54(a2, v473);
    swift_release(v473);
  }

  sub_10002A6DC(v38);
  uint64_t v474 = sub_1006A1768(a1);
  if (v474 != sub_1006A1768(a2))
  {
    uint64_t v475 = swift_getKeyPath(&unk_1007E6168);
    sub_10002AE54(a2, v475);
    swift_release(v475);
  }

  sub_10002A6DC(v38);
  uint64_t v476 = sub_1006A177C(a1);
  if (v476 != sub_1006A177C(a2))
  {
    uint64_t v477 = swift_getKeyPath(&unk_1007E6190);
    sub_10002AE54(a2, v477);
    swift_release(v477);
  }

  sub_10002A6DC(v38);
  uint64_t v478 = sub_1006A1790(a1);
  if (v478 != sub_1006A1790(a2))
  {
    uint64_t v479 = swift_getKeyPath(&unk_1007E61B8);
    sub_10002AE54(a2, v479);
    swift_release(v479);
  }

  sub_10002A6DC(v38);
  uint64_t v480 = sub_1006A17A4(a1);
  if (v480 != sub_1006A17A4(a2))
  {
    uint64_t v481 = swift_getKeyPath(&unk_1007E61E0);
    sub_10002AE54(a2, v481);
    swift_release(v481);
  }

  sub_10002A6DC(v38);
  uint64_t v482 = sub_1006A17B8(a1);
  if (v482 != sub_1006A17B8(a2))
  {
    uint64_t v483 = swift_getKeyPath(&unk_1007E6208);
    sub_10002AE54(a2, v483);
    swift_release(v483);
  }

  sub_10002A6DC(v38);
  sub_1006A17CC(a1);
  double v485 = v484;
  sub_1006A17CC(a2);
  if (v485 != v486)
  {
    uint64_t v487 = swift_getKeyPath(&unk_1007E6230);
    sub_10002B3F4(a2, v487);
    swift_release(v487);
  }

  sub_10002A6DC(v38);
  sub_1006A17D8(a1);
  double v489 = v488;
  sub_1006A17D8(a2);
  if (v489 != v490)
  {
    uint64_t v491 = swift_getKeyPath(&unk_1007E6258);
    sub_10002B3F4(a2, v491);
    swift_release(v491);
  }

  sub_10002A6DC(v38);
  int v492 = sub_1006A17E4(a1) & 1;
  if (v492 != (sub_1006A17E4(a2) & 1))
  {
    uint64_t v493 = swift_getKeyPath(&unk_1007E6280);
    sub_10002B994(a2, v493);
    swift_release(v493);
  }

  sub_10002A6DC(v38);
  sub_1006A17F0(a1);
  double v495 = v494;
  sub_1006A17F0(a2);
  if (v495 != v496)
  {
    uint64_t v497 = swift_getKeyPath(&unk_1007E62A8);
    sub_10002B3F4(a2, v497);
    swift_release(v497);
  }

  sub_10002A6DC(v38);
  sub_1006A17FC(a1);
  double v499 = v498;
  sub_1006A17FC(a2);
  if (v499 != v500)
  {
    uint64_t v501 = swift_getKeyPath(&unk_1007E62D0);
    sub_10002B3F4(a2, v501);
    swift_release(v501);
  }

  sub_10002A6DC(v38);
  sub_1006A1808(a1);
  double v503 = v502;
  sub_1006A1808(a2);
  if (v503 != v504)
  {
    uint64_t v505 = swift_getKeyPath(&unk_1007E62F8);
    sub_10002B3F4(a2, v505);
    swift_release(v505);
  }

  sub_10002A6DC(v38);
  uint64_t v506 = sub_1006A1814(a1);
  uint64_t v508 = v507;
  uint64_t v510 = sub_1006A1814(a2);
  if (v506 == v510 && v508 == v509)
  {
    swift_bridgeObjectRelease_n(v508, 2LL);
  }

  else
  {
    char v511 = _stringCompareWithSmolCheck(_:_:expecting:)(v506, v508, v510, v509, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v511 & 1) == 0)
    {
      uint64_t v512 = swift_getKeyPath(&unk_1007E6320);
      sub_10002C4D4(a2, v512);
      swift_release(v512);
    }
  }

  sub_10002A6DC(v38);
  uint64_t v513 = sub_1006A1920(a1);
  if (v513 != sub_1006A1920(a2))
  {
    uint64_t v514 = swift_getKeyPath(&unk_1007E6348);
    sub_10002AE54(a2, v514);
    swift_release(v514);
  }

  sub_10002A6DC(v38);
  int v515 = sub_1006A1934(a1) & 1;
  if (v515 != (sub_1006A1934(a2) & 1))
  {
    uint64_t v516 = swift_getKeyPath(&unk_1007E6370);
    sub_10002B994(a2, v516);
    swift_release(v516);
  }

  sub_10002A6DC(v38);
  sub_1006A1940(a1);
  double v518 = v517;
  sub_1006A1940(a2);
  if (v518 != v519)
  {
    uint64_t v520 = swift_getKeyPath(&unk_1007E6398);
    sub_10002B3F4(a2, v520);
    swift_release(v520);
  }

  sub_10002A6DC(v38);
  sub_1006A194C(a1);
  double v522 = v521;
  sub_1006A194C(a2);
  if (v522 != v523)
  {
    uint64_t v524 = swift_getKeyPath(&unk_1007E63C0);
    sub_10002B3F4(a2, v524);
    swift_release(v524);
  }

  sub_10002A6DC(v38);
  int v525 = sub_1006A1958(a1) & 1;
  if (v525 != (sub_1006A1958(a2) & 1))
  {
    uint64_t v526 = swift_getKeyPath(&unk_1007E63E8);
    sub_10002B994(a2, v526);
    swift_release(v526);
  }

  sub_10002A6DC(v38);
  int v527 = sub_1006A1964(a1) & 1;
  if (v527 != (sub_1006A1964(a2) & 1))
  {
    uint64_t v528 = swift_getKeyPath(&unk_1007E6410);
    sub_10002B994(a2, v528);
    swift_release(v528);
  }

  sub_10002A6DC(v38);
  int v529 = sub_1006A1970(a1);
  if (v529 != sub_1006A1970(a2))
  {
    uint64_t v530 = swift_getKeyPath(&unk_1007E6438);
    sub_100030DF4(a2, v530);
    swift_release(v530);
  }

  sub_10002A6DC(v38);
  uint64_t v531 = sub_1006A1A64(a1);
  if (v531 != sub_1006A1A64(a2))
  {
    uint64_t v532 = swift_getKeyPath(&unk_1007E6460);
    sub_10002CA74(a2, v532);
    swift_release(v532);
  }

  sub_10002A6DC(v38);
  sub_1006A1B70(a1);
  double v534 = v533;
  sub_1006A1B70(a2);
  if (v534 != v535)
  {
    uint64_t v536 = swift_getKeyPath(&unk_1007E6488);
    sub_10002B3F4(a2, v536);
    swift_release(v536);
  }

  sub_10002A6DC(v38);
  sub_1006A1B7C(a1);
  double v538 = v537;
  sub_1006A1B7C(a2);
  if (v538 != v539)
  {
    uint64_t v540 = swift_getKeyPath(&unk_1007E64B0);
    sub_10002B3F4(a2, v540);
    swift_release(v540);
  }

  sub_10002A6DC(v38);
  sub_1006A1B88(a1);
  double v542 = v541;
  sub_1006A1B88(a2);
  if (v542 != v543)
  {
    uint64_t v544 = swift_getKeyPath(&unk_1007E64D8);
    sub_10002B3F4(a2, v544);
    swift_release(v544);
  }

  sub_10002A6DC(v38);
  sub_1006A1B94(a1);
  double v546 = v545;
  sub_1006A1B94(a2);
  if (v546 != v547)
  {
    uint64_t v548 = swift_getKeyPath(&unk_1007E6500);
    sub_10002B3F4(a2, v548);
    swift_release(v548);
  }

  sub_10002A6DC(v38);
  sub_1006A1BA0(a1);
  double v550 = v549;
  sub_1006A1BA0(a2);
  if (v550 != v551)
  {
    uint64_t v552 = swift_getKeyPath(&unk_1007E6528);
    sub_10002B3F4(a2, v552);
    swift_release(v552);
  }

  sub_10002A6DC(v38);
  sub_1006A1BAC(a1);
  double v554 = v553;
  sub_1006A1BAC(a2);
  if (v554 != v555)
  {
    uint64_t v556 = swift_getKeyPath(&unk_1007E6550);
    sub_10002B3F4(a2, v556);
    swift_release(v556);
  }

  sub_10002A6DC(v38);
  int v557 = sub_1006A1BB8(a1) & 1;
  if (v557 != (sub_1006A1BB8(a2) & 1))
  {
    uint64_t v558 = swift_getKeyPath(&unk_1007E6578);
    sub_10002B994(a2, v558);
    swift_release(v558);
  }

  sub_10002A6DC(v38);
  sub_1006A1CBC(a1);
  double v560 = v559;
  sub_1006A1CBC(a2);
  if (v560 != v561)
  {
    uint64_t v562 = swift_getKeyPath(&unk_1007E65A0);
    sub_10002B3F4(a2, v562);
    swift_release(v562);
  }

  sub_10002A6DC(v38);
  sub_1006A1CC8(a1);
  double v564 = v563;
  sub_1006A1CC8(a2);
  if (v564 != v565)
  {
    uint64_t v566 = swift_getKeyPath(&unk_1007E65C8);
    sub_10002B3F4(a2, v566);
    swift_release(v566);
  }

  sub_10002A6DC(v38);
  return swift_release(v38);
}

uint64_t sub_10002A6DC(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 16);
  uint64_t result = swift_beginAccess(a1 + 16, v7, 1LL, 0LL);
  uint64_t v4 = *(void *)(a1 + 16);
  BOOL v5 = __OFSUB__(v4, 1LL);
  uint64_t v6 = v4 - 1;
  if (v5) {
    __break(1u);
  }
  else {
    void *v2 = v6;
  }
  return result;
}

double sub_10002A72C@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007E6690);
  sub_10065EF74(KeyPath, v3, &v6);
  swift_release(KeyPath);
  double result = *(double *)&v6;
  *a2 = v6;
  return result;
}

uint64_t sub_10002A788@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007E6640);
  uint64_t v5 = sub_1006A1DC4(KeyPath, v3);
  char v7 = v6;
  uint64_t result = swift_release(KeyPath);
  *(void *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v7 & 1;
  return result;
}

uint64_t sub_10002A7E4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t KeyPath = swift_getKeyPath(a2);
  sub_1006A27B0(KeyPath, v4, a3);
  return swift_release(KeyPath);
}

__n128 sub_10002A828@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007E65F0);
  sub_10065F250(KeyPath, v3, (uint64_t)v12);
  swift_release(KeyPath);
  uint64_t v5 = v13;
  uint64_t v6 = v17;
  __n128 result = v14;
  __int128 v8 = v15;
  __int128 v9 = v16;
  __int128 v10 = v12[1];
  __int128 v11 = v12[2];
  *(_OWORD *)a2 = v12[0];
  *(_OWORD *)(a2 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v10;
  *(_OWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 48) = v5;
  *(__n128 *)(a2 + 56) = result;
  *(_OWORD *)(a2 + 72) = v8;
  *(_OWORD *)(a2 + 88) = v9;
  *(void *)(a2 + 104) = v6;
  return result;
}

uint64_t sub_10002A8B4(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = a1;
  uint64_t v67 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v72 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v74 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v70 = *(void *)(v7 - 8);
  uint64_t v71 = v7;
  __chkstk_darwin(v7);
  uint64_t v69 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = sub_100004AEC(&qword_1009A0840);
  uint64_t v73 = *(void *)(v77 - 8);
  uint64_t v9 = *(void *)(v73 + 64);
  uint64_t v10 = __chkstk_darwin(v77);
  char v68 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v76 = (char *)&v53 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  uint64_t v12 = sub_100004AEC(&qword_10099D5B0);
  uint64_t v13 = OS_dispatch_queue.sync<A>(execute:)(sub_100038DAC, v2, v12);
  uint64_t v14 = aBlock[0];
  uint64_t v15 = static os_log_type_t.default.getter(v13);
  if (qword_10099B760 != -1) {
    swift_once(&qword_10099B760, sub_1006515A8);
  }
  uint64_t v16 = qword_100A2B070;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = xmmword_1007E67D0;
  aBlock[0] = a2;
  swift_retain(a2);
  uint64_t v19 = sub_100004AEC(&qword_10099D678);
  uint64_t v20 = String.init<A>(describing:)(aBlock, v19);
  uint64_t v22 = v21;
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_1000226F4();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  v16,  "ConfigurationCoordinator config value changed for %{public}@",  60LL,  2LL,  v18);
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v14 + 16);
  if (v23)
  {
    unint64_t v63 = sub_100004AB0();
    uint64_t v24 = v73;
    uint64_t v25 = *(unsigned __int8 *)(v73 + 80);
    uint64_t v53 = v14;
    int v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    uint64_t v62 = *(void *)(v73 + 72);
    uint64_t v60 = v25 | 7;
    double v58 = v5;
    uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
    uint64_t v61 = (v25 + 16) & ~v25;
    unsigned int v57 = enum case for DispatchQoS.QoSClass.default(_:);
    unint64_t v56 = (v9 + v61 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v55 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v54 = v55 + 8;
    uint64_t v28 = v76;
    uint64_t v27 = v77;
    do
    {
      uint64_t v75 = v23;
      uint64_t v29 = v59;
      v59(v28, v26, v27);
      uint64_t v30 = v69;
      uint64_t v31 = v70;
      uint64_t v32 = v71;
      (*(void (**)(char *, void, uint64_t))(v70 + 104))(v69, v57, v71);
      uint64_t v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      uint64_t v34 = v68;
      v29(v68, v76, v77);
      uint64_t v35 = swift_allocObject(&unk_100939B20, v54, v60);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v61, v34, v77);
      uint64_t v36 = v65;
      *(void *)(v35 + v56) = v65;
      *(void *)(v35 + v55) = a2;
      aBlock[4] = sub_1000391E0;
      uint64_t v80 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1001C31E8;
      void aBlock[3] = &unk_100939B38;
      uint64_t v37 = _Block_copy(aBlock);
      swift_retain(a2);
      uint64_t v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      uint64_t v78 = _swiftEmptyArrayStorage;
      uint64_t v39 = a2;
      uint64_t v40 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v41 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v42 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v43 = v58;
      uint64_t v44 = v67;
      uint64_t v45 = v40;
      a2 = v39;
      unint64_t v46 = v74;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v41, v42, v67, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v46, v43, v37);
      uint64_t v27 = v77;
      unint64_t v47 = v37;
      uint64_t v48 = v66;
      uint64_t v49 = v64;
      uint64_t v24 = v73;
      _Block_release(v47);

      unint64_t v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      uint64_t v51 = v75;
      uint64_t v28 = v76;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v80);
      v26 += v62;
      uint64_t v23 = v51 - 1;
    }

    while (v23);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10002AE54(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = a1;
  uint64_t v67 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v72 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v74 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v70 = *(void *)(v7 - 8);
  uint64_t v71 = v7;
  __chkstk_darwin(v7);
  uint64_t v69 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = sub_100004AEC(&qword_1009A0840);
  uint64_t v73 = *(void *)(v77 - 8);
  uint64_t v9 = *(void *)(v73 + 64);
  uint64_t v10 = __chkstk_darwin(v77);
  char v68 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v76 = (char *)&v53 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  uint64_t v12 = sub_100004AEC(&qword_10099D5B0);
  uint64_t v13 = OS_dispatch_queue.sync<A>(execute:)(sub_100038DAC, v2, v12);
  uint64_t v14 = aBlock[0];
  uint64_t v15 = static os_log_type_t.default.getter(v13);
  if (qword_10099B760 != -1) {
    swift_once(&qword_10099B760, sub_1006515A8);
  }
  uint64_t v16 = qword_100A2B070;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = xmmword_1007E67D0;
  aBlock[0] = a2;
  swift_retain(a2);
  uint64_t v19 = sub_100004AEC(&qword_10099D670);
  uint64_t v20 = String.init<A>(describing:)(aBlock, v19);
  uint64_t v22 = v21;
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_1000226F4();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  v16,  "ConfigurationCoordinator config value changed for %{public}@",  60LL,  2LL,  v18);
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v14 + 16);
  if (v23)
  {
    unint64_t v63 = sub_100004AB0();
    uint64_t v24 = v73;
    uint64_t v25 = *(unsigned __int8 *)(v73 + 80);
    uint64_t v53 = v14;
    int v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    uint64_t v62 = *(void *)(v73 + 72);
    uint64_t v60 = v25 | 7;
    double v58 = v5;
    uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
    uint64_t v61 = (v25 + 16) & ~v25;
    unsigned int v57 = enum case for DispatchQoS.QoSClass.default(_:);
    unint64_t v56 = (v9 + v61 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v55 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v54 = v55 + 8;
    uint64_t v28 = v76;
    uint64_t v27 = v77;
    do
    {
      uint64_t v75 = v23;
      uint64_t v29 = v59;
      v59(v28, v26, v27);
      uint64_t v30 = v69;
      uint64_t v31 = v70;
      uint64_t v32 = v71;
      (*(void (**)(char *, void, uint64_t))(v70 + 104))(v69, v57, v71);
      uint64_t v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      uint64_t v34 = v68;
      v29(v68, v76, v77);
      uint64_t v35 = swift_allocObject(&unk_100939AD0, v54, v60);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v61, v34, v77);
      uint64_t v36 = v65;
      *(void *)(v35 + v56) = v65;
      *(void *)(v35 + v55) = a2;
      aBlock[4] = sub_1000390EC;
      uint64_t v80 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1001C31E8;
      void aBlock[3] = &unk_100939AE8;
      uint64_t v37 = _Block_copy(aBlock);
      swift_retain(a2);
      uint64_t v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      uint64_t v78 = _swiftEmptyArrayStorage;
      uint64_t v39 = a2;
      uint64_t v40 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v41 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v42 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v43 = v58;
      uint64_t v44 = v67;
      uint64_t v45 = v40;
      a2 = v39;
      unint64_t v46 = v74;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v41, v42, v67, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v46, v43, v37);
      uint64_t v27 = v77;
      unint64_t v47 = v37;
      uint64_t v48 = v66;
      uint64_t v49 = v64;
      uint64_t v24 = v73;
      _Block_release(v47);

      unint64_t v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      uint64_t v51 = v75;
      uint64_t v28 = v76;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v80);
      v26 += v62;
      uint64_t v23 = v51 - 1;
    }

    while (v23);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10002B3F4(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = a1;
  uint64_t v67 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v72 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v74 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v70 = *(void *)(v7 - 8);
  uint64_t v71 = v7;
  __chkstk_darwin(v7);
  uint64_t v69 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = sub_100004AEC(&qword_1009A0840);
  uint64_t v73 = *(void *)(v77 - 8);
  uint64_t v9 = *(void *)(v73 + 64);
  uint64_t v10 = __chkstk_darwin(v77);
  char v68 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v76 = (char *)&v53 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  uint64_t v12 = sub_100004AEC(&qword_10099D5B0);
  uint64_t v13 = OS_dispatch_queue.sync<A>(execute:)(sub_100038DAC, v2, v12);
  uint64_t v14 = aBlock[0];
  uint64_t v15 = static os_log_type_t.default.getter(v13);
  if (qword_10099B760 != -1) {
    swift_once(&qword_10099B760, sub_1006515A8);
  }
  uint64_t v16 = qword_100A2B070;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = xmmword_1007E67D0;
  aBlock[0] = a2;
  swift_retain(a2);
  uint64_t v19 = sub_100004AEC(&qword_10099D668);
  uint64_t v20 = String.init<A>(describing:)(aBlock, v19);
  uint64_t v22 = v21;
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_1000226F4();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  v16,  "ConfigurationCoordinator config value changed for %{public}@",  60LL,  2LL,  v18);
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v14 + 16);
  if (v23)
  {
    unint64_t v63 = sub_100004AB0();
    uint64_t v24 = v73;
    uint64_t v25 = *(unsigned __int8 *)(v73 + 80);
    uint64_t v53 = v14;
    int v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    uint64_t v62 = *(void *)(v73 + 72);
    uint64_t v60 = v25 | 7;
    double v58 = v5;
    uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
    uint64_t v61 = (v25 + 16) & ~v25;
    unsigned int v57 = enum case for DispatchQoS.QoSClass.default(_:);
    unint64_t v56 = (v9 + v61 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v55 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v54 = v55 + 8;
    uint64_t v28 = v76;
    uint64_t v27 = v77;
    do
    {
      uint64_t v75 = v23;
      uint64_t v29 = v59;
      v59(v28, v26, v27);
      uint64_t v30 = v69;
      uint64_t v31 = v70;
      uint64_t v32 = v71;
      (*(void (**)(char *, void, uint64_t))(v70 + 104))(v69, v57, v71);
      uint64_t v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      uint64_t v34 = v68;
      v29(v68, v76, v77);
      uint64_t v35 = swift_allocObject(&unk_100939A80, v54, v60);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v61, v34, v77);
      uint64_t v36 = v65;
      *(void *)(v35 + v56) = v65;
      *(void *)(v35 + v55) = a2;
      aBlock[4] = sub_1000390D4;
      uint64_t v80 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1001C31E8;
      void aBlock[3] = &unk_100939A98;
      uint64_t v37 = _Block_copy(aBlock);
      swift_retain(a2);
      uint64_t v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      uint64_t v78 = _swiftEmptyArrayStorage;
      uint64_t v39 = a2;
      uint64_t v40 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v41 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v42 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v43 = v58;
      uint64_t v44 = v67;
      uint64_t v45 = v40;
      a2 = v39;
      unint64_t v46 = v74;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v41, v42, v67, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v46, v43, v37);
      uint64_t v27 = v77;
      unint64_t v47 = v37;
      uint64_t v48 = v66;
      uint64_t v49 = v64;
      uint64_t v24 = v73;
      _Block_release(v47);

      unint64_t v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      uint64_t v51 = v75;
      uint64_t v28 = v76;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v80);
      v26 += v62;
      uint64_t v23 = v51 - 1;
    }

    while (v23);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10002B994(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = a1;
  uint64_t v67 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v72 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v74 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v70 = *(void *)(v7 - 8);
  uint64_t v71 = v7;
  __chkstk_darwin(v7);
  uint64_t v69 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = sub_100004AEC(&qword_1009A0840);
  uint64_t v73 = *(void *)(v77 - 8);
  uint64_t v9 = *(void *)(v73 + 64);
  uint64_t v10 = __chkstk_darwin(v77);
  char v68 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v76 = (char *)&v53 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  uint64_t v12 = sub_100004AEC(&qword_10099D5B0);
  uint64_t v13 = OS_dispatch_queue.sync<A>(execute:)(sub_100038DAC, v2, v12);
  uint64_t v14 = aBlock[0];
  uint64_t v15 = static os_log_type_t.default.getter(v13);
  if (qword_10099B760 != -1) {
    swift_once(&qword_10099B760, sub_1006515A8);
  }
  uint64_t v16 = qword_100A2B070;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = xmmword_1007E67D0;
  aBlock[0] = a2;
  swift_retain(a2);
  uint64_t v19 = sub_100004AEC(&qword_10099D660);
  uint64_t v20 = String.init<A>(describing:)(aBlock, v19);
  uint64_t v22 = v21;
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_1000226F4();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  v16,  "ConfigurationCoordinator config value changed for %{public}@",  60LL,  2LL,  v18);
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v14 + 16);
  if (v23)
  {
    unint64_t v63 = sub_100004AB0();
    uint64_t v24 = v73;
    uint64_t v25 = *(unsigned __int8 *)(v73 + 80);
    uint64_t v53 = v14;
    int v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    uint64_t v62 = *(void *)(v73 + 72);
    uint64_t v60 = v25 | 7;
    double v58 = v5;
    uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
    uint64_t v61 = (v25 + 16) & ~v25;
    unsigned int v57 = enum case for DispatchQoS.QoSClass.default(_:);
    unint64_t v56 = (v9 + v61 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v55 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v54 = v55 + 8;
    uint64_t v28 = v76;
    uint64_t v27 = v77;
    do
    {
      uint64_t v75 = v23;
      uint64_t v29 = v59;
      v59(v28, v26, v27);
      uint64_t v30 = v69;
      uint64_t v31 = v70;
      uint64_t v32 = v71;
      (*(void (**)(char *, void, uint64_t))(v70 + 104))(v69, v57, v71);
      uint64_t v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      uint64_t v34 = v68;
      v29(v68, v76, v77);
      uint64_t v35 = swift_allocObject(&unk_100939A30, v54, v60);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v61, v34, v77);
      uint64_t v36 = v65;
      *(void *)(v35 + v56) = v65;
      *(void *)(v35 + v55) = a2;
      aBlock[4] = sub_1000390BC;
      uint64_t v80 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1001C31E8;
      void aBlock[3] = &unk_100939A48;
      uint64_t v37 = _Block_copy(aBlock);
      swift_retain(a2);
      uint64_t v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      uint64_t v78 = _swiftEmptyArrayStorage;
      uint64_t v39 = a2;
      uint64_t v40 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v41 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v42 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v43 = v58;
      uint64_t v44 = v67;
      uint64_t v45 = v40;
      a2 = v39;
      unint64_t v46 = v74;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v41, v42, v67, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v46, v43, v37);
      uint64_t v27 = v77;
      unint64_t v47 = v37;
      uint64_t v48 = v66;
      uint64_t v49 = v64;
      uint64_t v24 = v73;
      _Block_release(v47);

      unint64_t v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      uint64_t v51 = v75;
      uint64_t v28 = v76;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v80);
      v26 += v62;
      uint64_t v23 = v51 - 1;
    }

    while (v23);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10002BF34(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = a1;
  uint64_t v67 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v72 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v74 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v70 = *(void *)(v7 - 8);
  uint64_t v71 = v7;
  __chkstk_darwin(v7);
  uint64_t v69 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = sub_100004AEC(&qword_1009A0840);
  uint64_t v73 = *(void *)(v77 - 8);
  uint64_t v9 = *(void *)(v73 + 64);
  uint64_t v10 = __chkstk_darwin(v77);
  char v68 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v76 = (char *)&v53 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  uint64_t v12 = sub_100004AEC(&qword_10099D5B0);
  uint64_t v13 = OS_dispatch_queue.sync<A>(execute:)(sub_100038DAC, v2, v12);
  uint64_t v14 = aBlock[0];
  uint64_t v15 = static os_log_type_t.default.getter(v13);
  if (qword_10099B760 != -1) {
    swift_once(&qword_10099B760, sub_1006515A8);
  }
  uint64_t v16 = qword_100A2B070;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = xmmword_1007E67D0;
  aBlock[0] = a2;
  swift_retain(a2);
  uint64_t v19 = sub_100004AEC(&qword_10099D658);
  uint64_t v20 = String.init<A>(describing:)(aBlock, v19);
  uint64_t v22 = v21;
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_1000226F4();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  v16,  "ConfigurationCoordinator config value changed for %{public}@",  60LL,  2LL,  v18);
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v14 + 16);
  if (v23)
  {
    unint64_t v63 = sub_100004AB0();
    uint64_t v24 = v73;
    uint64_t v25 = *(unsigned __int8 *)(v73 + 80);
    uint64_t v53 = v14;
    int v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    uint64_t v62 = *(void *)(v73 + 72);
    uint64_t v60 = v25 | 7;
    double v58 = v5;
    uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
    uint64_t v61 = (v25 + 16) & ~v25;
    unsigned int v57 = enum case for DispatchQoS.QoSClass.default(_:);
    unint64_t v56 = (v9 + v61 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v55 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v54 = v55 + 8;
    uint64_t v28 = v76;
    uint64_t v27 = v77;
    do
    {
      uint64_t v75 = v23;
      uint64_t v29 = v59;
      v59(v28, v26, v27);
      uint64_t v30 = v69;
      uint64_t v31 = v70;
      uint64_t v32 = v71;
      (*(void (**)(char *, void, uint64_t))(v70 + 104))(v69, v57, v71);
      uint64_t v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      uint64_t v34 = v68;
      v29(v68, v76, v77);
      uint64_t v35 = swift_allocObject(&unk_1009399E0, v54, v60);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v61, v34, v77);
      uint64_t v36 = v65;
      *(void *)(v35 + v56) = v65;
      *(void *)(v35 + v55) = a2;
      aBlock[4] = sub_1000390A4;
      uint64_t v80 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1001C31E8;
      void aBlock[3] = &unk_1009399F8;
      uint64_t v37 = _Block_copy(aBlock);
      swift_retain(a2);
      uint64_t v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      uint64_t v78 = _swiftEmptyArrayStorage;
      uint64_t v39 = a2;
      uint64_t v40 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v41 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v42 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v43 = v58;
      uint64_t v44 = v67;
      uint64_t v45 = v40;
      a2 = v39;
      unint64_t v46 = v74;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v41, v42, v67, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v46, v43, v37);
      uint64_t v27 = v77;
      unint64_t v47 = v37;
      uint64_t v48 = v66;
      uint64_t v49 = v64;
      uint64_t v24 = v73;
      _Block_release(v47);

      unint64_t v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      uint64_t v51 = v75;
      uint64_t v28 = v76;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v80);
      v26 += v62;
      uint64_t v23 = v51 - 1;
    }

    while (v23);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10002C4D4(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = a1;
  uint64_t v67 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v72 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v74 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v70 = *(void *)(v7 - 8);
  uint64_t v71 = v7;
  __chkstk_darwin(v7);
  uint64_t v69 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = sub_100004AEC(&qword_1009A0840);
  uint64_t v73 = *(void *)(v77 - 8);
  uint64_t v9 = *(void *)(v73 + 64);
  uint64_t v10 = __chkstk_darwin(v77);
  char v68 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v76 = (char *)&v53 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  uint64_t v12 = sub_100004AEC(&qword_10099D5B0);
  uint64_t v13 = OS_dispatch_queue.sync<A>(execute:)(sub_100038DAC, v2, v12);
  uint64_t v14 = aBlock[0];
  uint64_t v15 = static os_log_type_t.default.getter(v13);
  if (qword_10099B760 != -1) {
    swift_once(&qword_10099B760, sub_1006515A8);
  }
  uint64_t v16 = qword_100A2B070;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = xmmword_1007E67D0;
  aBlock[0] = a2;
  swift_retain(a2);
  uint64_t v19 = sub_100004AEC(&qword_10099D650);
  uint64_t v20 = String.init<A>(describing:)(aBlock, v19);
  uint64_t v22 = v21;
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_1000226F4();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  v16,  "ConfigurationCoordinator config value changed for %{public}@",  60LL,  2LL,  v18);
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v14 + 16);
  if (v23)
  {
    unint64_t v63 = sub_100004AB0();
    uint64_t v24 = v73;
    uint64_t v25 = *(unsigned __int8 *)(v73 + 80);
    uint64_t v53 = v14;
    int v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    uint64_t v62 = *(void *)(v73 + 72);
    uint64_t v60 = v25 | 7;
    double v58 = v5;
    uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
    uint64_t v61 = (v25 + 16) & ~v25;
    unsigned int v57 = enum case for DispatchQoS.QoSClass.default(_:);
    unint64_t v56 = (v9 + v61 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v55 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v54 = v55 + 8;
    uint64_t v28 = v76;
    uint64_t v27 = v77;
    do
    {
      uint64_t v75 = v23;
      uint64_t v29 = v59;
      v59(v28, v26, v27);
      uint64_t v30 = v69;
      uint64_t v31 = v70;
      uint64_t v32 = v71;
      (*(void (**)(char *, void, uint64_t))(v70 + 104))(v69, v57, v71);
      uint64_t v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      uint64_t v34 = v68;
      v29(v68, v76, v77);
      uint64_t v35 = swift_allocObject(&unk_100939990, v54, v60);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v61, v34, v77);
      uint64_t v36 = v65;
      *(void *)(v35 + v56) = v65;
      *(void *)(v35 + v55) = a2;
      aBlock[4] = sub_10003908C;
      uint64_t v80 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1001C31E8;
      void aBlock[3] = &unk_1009399A8;
      uint64_t v37 = _Block_copy(aBlock);
      swift_retain(a2);
      uint64_t v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      uint64_t v78 = _swiftEmptyArrayStorage;
      uint64_t v39 = a2;
      uint64_t v40 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v41 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v42 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v43 = v58;
      uint64_t v44 = v67;
      uint64_t v45 = v40;
      a2 = v39;
      unint64_t v46 = v74;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v41, v42, v67, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v46, v43, v37);
      uint64_t v27 = v77;
      unint64_t v47 = v37;
      uint64_t v48 = v66;
      uint64_t v49 = v64;
      uint64_t v24 = v73;
      _Block_release(v47);

      unint64_t v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      uint64_t v51 = v75;
      uint64_t v28 = v76;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v80);
      v26 += v62;
      uint64_t v23 = v51 - 1;
    }

    while (v23);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10002CA74(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = a1;
  uint64_t v67 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v72 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v74 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v70 = *(void *)(v7 - 8);
  uint64_t v71 = v7;
  __chkstk_darwin(v7);
  uint64_t v69 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = sub_100004AEC(&qword_1009A0840);
  uint64_t v73 = *(void *)(v77 - 8);
  uint64_t v9 = *(void *)(v73 + 64);
  uint64_t v10 = __chkstk_darwin(v77);
  char v68 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v76 = (char *)&v53 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  uint64_t v12 = sub_100004AEC(&qword_10099D5B0);
  uint64_t v13 = OS_dispatch_queue.sync<A>(execute:)(sub_100038DAC, v2, v12);
  uint64_t v14 = aBlock[0];
  uint64_t v15 = static os_log_type_t.default.getter(v13);
  if (qword_10099B760 != -1) {
    swift_once(&qword_10099B760, sub_1006515A8);
  }
  uint64_t v16 = qword_100A2B070;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = xmmword_1007E67D0;
  aBlock[0] = a2;
  swift_retain(a2);
  uint64_t v19 = sub_100004AEC(&qword_10099D648);
  uint64_t v20 = String.init<A>(describing:)(aBlock, v19);
  uint64_t v22 = v21;
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_1000226F4();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  v16,  "ConfigurationCoordinator config value changed for %{public}@",  60LL,  2LL,  v18);
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v14 + 16);
  if (v23)
  {
    unint64_t v63 = sub_100004AB0();
    uint64_t v24 = v73;
    uint64_t v25 = *(unsigned __int8 *)(v73 + 80);
    uint64_t v53 = v14;
    int v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    uint64_t v62 = *(void *)(v73 + 72);
    uint64_t v60 = v25 | 7;
    double v58 = v5;
    uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
    uint64_t v61 = (v25 + 16) & ~v25;
    unsigned int v57 = enum case for DispatchQoS.QoSClass.default(_:);
    unint64_t v56 = (v9 + v61 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v55 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v54 = v55 + 8;
    uint64_t v28 = v76;
    uint64_t v27 = v77;
    do
    {
      uint64_t v75 = v23;
      uint64_t v29 = v59;
      v59(v28, v26, v27);
      uint64_t v30 = v69;
      uint64_t v31 = v70;
      uint64_t v32 = v71;
      (*(void (**)(char *, void, uint64_t))(v70 + 104))(v69, v57, v71);
      uint64_t v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      uint64_t v34 = v68;
      v29(v68, v76, v77);
      uint64_t v35 = swift_allocObject(&unk_100939940, v54, v60);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v61, v34, v77);
      uint64_t v36 = v65;
      *(void *)(v35 + v56) = v65;
      *(void *)(v35 + v55) = a2;
      aBlock[4] = sub_100039074;
      uint64_t v80 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1001C31E8;
      void aBlock[3] = &unk_100939958;
      uint64_t v37 = _Block_copy(aBlock);
      swift_retain(a2);
      uint64_t v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      uint64_t v78 = _swiftEmptyArrayStorage;
      uint64_t v39 = a2;
      uint64_t v40 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v41 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v42 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v43 = v58;
      uint64_t v44 = v67;
      uint64_t v45 = v40;
      a2 = v39;
      unint64_t v46 = v74;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v41, v42, v67, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v46, v43, v37);
      uint64_t v27 = v77;
      unint64_t v47 = v37;
      uint64_t v48 = v66;
      uint64_t v49 = v64;
      uint64_t v24 = v73;
      _Block_release(v47);

      unint64_t v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      uint64_t v51 = v75;
      uint64_t v28 = v76;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v80);
      v26 += v62;
      uint64_t v23 = v51 - 1;
    }

    while (v23);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10002D014(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = a1;
  uint64_t v67 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v72 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v74 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v70 = *(void *)(v7 - 8);
  uint64_t v71 = v7;
  __chkstk_darwin(v7);
  uint64_t v69 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = sub_100004AEC(&qword_1009A0840);
  uint64_t v73 = *(void *)(v77 - 8);
  uint64_t v9 = *(void *)(v73 + 64);
  uint64_t v10 = __chkstk_darwin(v77);
  char v68 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v76 = (char *)&v53 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  uint64_t v12 = sub_100004AEC(&qword_10099D5B0);
  uint64_t v13 = OS_dispatch_queue.sync<A>(execute:)(sub_100038DAC, v2, v12);
  uint64_t v14 = aBlock[0];
  uint64_t v15 = static os_log_type_t.default.getter(v13);
  if (qword_10099B760 != -1) {
    swift_once(&qword_10099B760, sub_1006515A8);
  }
  uint64_t v16 = qword_100A2B070;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = xmmword_1007E67D0;
  aBlock[0] = a2;
  swift_retain(a2);
  uint64_t v19 = sub_100004AEC(&qword_10099D638);
  uint64_t v20 = String.init<A>(describing:)(aBlock, v19);
  uint64_t v22 = v21;
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_1000226F4();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  v16,  "ConfigurationCoordinator config value changed for %{public}@",  60LL,  2LL,  v18);
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v14 + 16);
  if (v23)
  {
    unint64_t v63 = sub_100004AB0();
    uint64_t v24 = v73;
    uint64_t v25 = *(unsigned __int8 *)(v73 + 80);
    uint64_t v53 = v14;
    int v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    uint64_t v62 = *(void *)(v73 + 72);
    uint64_t v60 = v25 | 7;
    double v58 = v5;
    uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
    uint64_t v61 = (v25 + 16) & ~v25;
    unsigned int v57 = enum case for DispatchQoS.QoSClass.default(_:);
    unint64_t v56 = (v9 + v61 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v55 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v54 = v55 + 8;
    uint64_t v28 = v76;
    uint64_t v27 = v77;
    do
    {
      uint64_t v75 = v23;
      uint64_t v29 = v59;
      v59(v28, v26, v27);
      uint64_t v30 = v69;
      uint64_t v31 = v70;
      uint64_t v32 = v71;
      (*(void (**)(char *, void, uint64_t))(v70 + 104))(v69, v57, v71);
      uint64_t v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      uint64_t v34 = v68;
      v29(v68, v76, v77);
      uint64_t v35 = swift_allocObject(&unk_1009398F0, v54, v60);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v61, v34, v77);
      uint64_t v36 = v65;
      *(void *)(v35 + v56) = v65;
      *(void *)(v35 + v55) = a2;
      aBlock[4] = sub_10003905C;
      uint64_t v80 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1001C31E8;
      void aBlock[3] = &unk_100939908;
      uint64_t v37 = _Block_copy(aBlock);
      swift_retain(a2);
      uint64_t v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      uint64_t v78 = _swiftEmptyArrayStorage;
      uint64_t v39 = a2;
      uint64_t v40 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v41 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v42 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v43 = v58;
      uint64_t v44 = v67;
      uint64_t v45 = v40;
      a2 = v39;
      unint64_t v46 = v74;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v41, v42, v67, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v46, v43, v37);
      uint64_t v27 = v77;
      unint64_t v47 = v37;
      uint64_t v48 = v66;
      uint64_t v49 = v64;
      uint64_t v24 = v73;
      _Block_release(v47);

      unint64_t v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      uint64_t v51 = v75;
      uint64_t v28 = v76;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v80);
      v26 += v62;
      uint64_t v23 = v51 - 1;
    }

    while (v23);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10002D5B4(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = a1;
  uint64_t v67 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v72 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v74 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v70 = *(void *)(v7 - 8);
  uint64_t v71 = v7;
  __chkstk_darwin(v7);
  uint64_t v69 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = sub_100004AEC(&qword_1009A0840);
  uint64_t v73 = *(void *)(v77 - 8);
  uint64_t v9 = *(void *)(v73 + 64);
  uint64_t v10 = __chkstk_darwin(v77);
  char v68 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v76 = (char *)&v53 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  uint64_t v12 = sub_100004AEC(&qword_10099D5B0);
  uint64_t v13 = OS_dispatch_queue.sync<A>(execute:)(sub_100038DAC, v2, v12);
  uint64_t v14 = aBlock[0];
  uint64_t v15 = static os_log_type_t.default.getter(v13);
  if (qword_10099B760 != -1) {
    swift_once(&qword_10099B760, sub_1006515A8);
  }
  uint64_t v16 = qword_100A2B070;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = xmmword_1007E67D0;
  aBlock[0] = a2;
  swift_retain(a2);
  uint64_t v19 = sub_100004AEC(&qword_10099D628);
  uint64_t v20 = String.init<A>(describing:)(aBlock, v19);
  uint64_t v22 = v21;
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_1000226F4();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  v16,  "ConfigurationCoordinator config value changed for %{public}@",  60LL,  2LL,  v18);
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v14 + 16);
  if (v23)
  {
    unint64_t v63 = sub_100004AB0();
    uint64_t v24 = v73;
    uint64_t v25 = *(unsigned __int8 *)(v73 + 80);
    uint64_t v53 = v14;
    int v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    uint64_t v62 = *(void *)(v73 + 72);
    uint64_t v60 = v25 | 7;
    double v58 = v5;
    uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
    uint64_t v61 = (v25 + 16) & ~v25;
    unsigned int v57 = enum case for DispatchQoS.QoSClass.default(_:);
    unint64_t v56 = (v9 + v61 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v55 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v54 = v55 + 8;
    uint64_t v28 = v76;
    uint64_t v27 = v77;
    do
    {
      uint64_t v75 = v23;
      uint64_t v29 = v59;
      v59(v28, v26, v27);
      uint64_t v30 = v69;
      uint64_t v31 = v70;
      uint64_t v32 = v71;
      (*(void (**)(char *, void, uint64_t))(v70 + 104))(v69, v57, v71);
      uint64_t v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      uint64_t v34 = v68;
      v29(v68, v76, v77);
      uint64_t v35 = swift_allocObject(&unk_1009398A0, v54, v60);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v61, v34, v77);
      uint64_t v36 = v65;
      *(void *)(v35 + v56) = v65;
      *(void *)(v35 + v55) = a2;
      aBlock[4] = sub_100039044;
      uint64_t v80 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1001C31E8;
      void aBlock[3] = &unk_1009398B8;
      uint64_t v37 = _Block_copy(aBlock);
      swift_retain(a2);
      uint64_t v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      uint64_t v78 = _swiftEmptyArrayStorage;
      uint64_t v39 = a2;
      uint64_t v40 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v41 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v42 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v43 = v58;
      uint64_t v44 = v67;
      uint64_t v45 = v40;
      a2 = v39;
      unint64_t v46 = v74;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v41, v42, v67, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v46, v43, v37);
      uint64_t v27 = v77;
      unint64_t v47 = v37;
      uint64_t v48 = v66;
      uint64_t v49 = v64;
      uint64_t v24 = v73;
      _Block_release(v47);

      unint64_t v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      uint64_t v51 = v75;
      uint64_t v28 = v76;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v80);
      v26 += v62;
      uint64_t v23 = v51 - 1;
    }

    while (v23);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10002DB54(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = a1;
  uint64_t v67 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v72 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v74 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v70 = *(void *)(v7 - 8);
  uint64_t v71 = v7;
  __chkstk_darwin(v7);
  uint64_t v69 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = sub_100004AEC(&qword_1009A0840);
  uint64_t v73 = *(void *)(v77 - 8);
  uint64_t v9 = *(void *)(v73 + 64);
  uint64_t v10 = __chkstk_darwin(v77);
  char v68 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v76 = (char *)&v53 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  uint64_t v12 = sub_100004AEC(&qword_10099D5B0);
  uint64_t v13 = OS_dispatch_queue.sync<A>(execute:)(sub_100038DAC, v2, v12);
  uint64_t v14 = aBlock[0];
  uint64_t v15 = static os_log_type_t.default.getter(v13);
  if (qword_10099B760 != -1) {
    swift_once(&qword_10099B760, sub_1006515A8);
  }
  uint64_t v16 = qword_100A2B070;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = xmmword_1007E67D0;
  aBlock[0] = a2;
  swift_retain(a2);
  uint64_t v19 = sub_100004AEC(&qword_10099D620);
  uint64_t v20 = String.init<A>(describing:)(aBlock, v19);
  uint64_t v22 = v21;
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_1000226F4();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  v16,  "ConfigurationCoordinator config value changed for %{public}@",  60LL,  2LL,  v18);
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v14 + 16);
  if (v23)
  {
    unint64_t v63 = sub_100004AB0();
    uint64_t v24 = v73;
    uint64_t v25 = *(unsigned __int8 *)(v73 + 80);
    uint64_t v53 = v14;
    int v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    uint64_t v62 = *(void *)(v73 + 72);
    uint64_t v60 = v25 | 7;
    double v58 = v5;
    uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
    uint64_t v61 = (v25 + 16) & ~v25;
    unsigned int v57 = enum case for DispatchQoS.QoSClass.default(_:);
    unint64_t v56 = (v9 + v61 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v55 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v54 = v55 + 8;
    uint64_t v28 = v76;
    uint64_t v27 = v77;
    do
    {
      uint64_t v75 = v23;
      uint64_t v29 = v59;
      v59(v28, v26, v27);
      uint64_t v30 = v69;
      uint64_t v31 = v70;
      uint64_t v32 = v71;
      (*(void (**)(char *, void, uint64_t))(v70 + 104))(v69, v57, v71);
      uint64_t v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      uint64_t v34 = v68;
      v29(v68, v76, v77);
      uint64_t v35 = swift_allocObject(&unk_100939850, v54, v60);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v61, v34, v77);
      uint64_t v36 = v65;
      *(void *)(v35 + v56) = v65;
      *(void *)(v35 + v55) = a2;
      aBlock[4] = sub_100038FF0;
      uint64_t v80 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1001C31E8;
      void aBlock[3] = &unk_100939868;
      uint64_t v37 = _Block_copy(aBlock);
      swift_retain(a2);
      uint64_t v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      uint64_t v78 = _swiftEmptyArrayStorage;
      uint64_t v39 = a2;
      uint64_t v40 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v41 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v42 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v43 = v58;
      uint64_t v44 = v67;
      uint64_t v45 = v40;
      a2 = v39;
      unint64_t v46 = v74;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v41, v42, v67, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v46, v43, v37);
      uint64_t v27 = v77;
      unint64_t v47 = v37;
      uint64_t v48 = v66;
      uint64_t v49 = v64;
      uint64_t v24 = v73;
      _Block_release(v47);

      unint64_t v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      uint64_t v51 = v75;
      uint64_t v28 = v76;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v80);
      v26 += v62;
      uint64_t v23 = v51 - 1;
    }

    while (v23);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10002E0F4(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = a1;
  uint64_t v67 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v72 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v74 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v70 = *(void *)(v7 - 8);
  uint64_t v71 = v7;
  __chkstk_darwin(v7);
  uint64_t v69 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = sub_100004AEC(&qword_1009A0840);
  uint64_t v73 = *(void *)(v77 - 8);
  uint64_t v9 = *(void *)(v73 + 64);
  uint64_t v10 = __chkstk_darwin(v77);
  char v68 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v76 = (char *)&v53 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  uint64_t v12 = sub_100004AEC(&qword_10099D5B0);
  uint64_t v13 = OS_dispatch_queue.sync<A>(execute:)(sub_100038DAC, v2, v12);
  uint64_t v14 = aBlock[0];
  uint64_t v15 = static os_log_type_t.default.getter(v13);
  if (qword_10099B760 != -1) {
    swift_once(&qword_10099B760, sub_1006515A8);
  }
  uint64_t v16 = qword_100A2B070;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = xmmword_1007E67D0;
  aBlock[0] = a2;
  swift_retain(a2);
  uint64_t v19 = sub_100004AEC(&qword_10099D610);
  uint64_t v20 = String.init<A>(describing:)(aBlock, v19);
  uint64_t v22 = v21;
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_1000226F4();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  v16,  "ConfigurationCoordinator config value changed for %{public}@",  60LL,  2LL,  v18);
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v14 + 16);
  if (v23)
  {
    unint64_t v63 = sub_100004AB0();
    uint64_t v24 = v73;
    uint64_t v25 = *(unsigned __int8 *)(v73 + 80);
    uint64_t v53 = v14;
    int v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    uint64_t v62 = *(void *)(v73 + 72);
    uint64_t v60 = v25 | 7;
    double v58 = v5;
    uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
    uint64_t v61 = (v25 + 16) & ~v25;
    unsigned int v57 = enum case for DispatchQoS.QoSClass.default(_:);
    unint64_t v56 = (v9 + v61 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v55 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v54 = v55 + 8;
    uint64_t v28 = v76;
    uint64_t v27 = v77;
    do
    {
      uint64_t v75 = v23;
      uint64_t v29 = v59;
      v59(v28, v26, v27);
      uint64_t v30 = v69;
      uint64_t v31 = v70;
      uint64_t v32 = v71;
      (*(void (**)(char *, void, uint64_t))(v70 + 104))(v69, v57, v71);
      uint64_t v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      uint64_t v34 = v68;
      v29(v68, v76, v77);
      uint64_t v35 = swift_allocObject(&unk_100939800, v54, v60);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v61, v34, v77);
      uint64_t v36 = v65;
      *(void *)(v35 + v56) = v65;
      *(void *)(v35 + v55) = a2;
      aBlock[4] = sub_100038FD8;
      uint64_t v80 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1001C31E8;
      void aBlock[3] = &unk_100939818;
      uint64_t v37 = _Block_copy(aBlock);
      swift_retain(a2);
      uint64_t v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      uint64_t v78 = _swiftEmptyArrayStorage;
      uint64_t v39 = a2;
      uint64_t v40 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v41 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v42 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v43 = v58;
      uint64_t v44 = v67;
      uint64_t v45 = v40;
      a2 = v39;
      unint64_t v46 = v74;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v41, v42, v67, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v46, v43, v37);
      uint64_t v27 = v77;
      unint64_t v47 = v37;
      uint64_t v48 = v66;
      uint64_t v49 = v64;
      uint64_t v24 = v73;
      _Block_release(v47);

      unint64_t v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      uint64_t v51 = v75;
      uint64_t v28 = v76;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v80);
      v26 += v62;
      uint64_t v23 = v51 - 1;
    }

    while (v23);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10002E694(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = a1;
  uint64_t v67 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v72 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v74 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v70 = *(void *)(v7 - 8);
  uint64_t v71 = v7;
  __chkstk_darwin(v7);
  uint64_t v69 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = sub_100004AEC(&qword_1009A0840);
  uint64_t v73 = *(void *)(v77 - 8);
  uint64_t v9 = *(void *)(v73 + 64);
  uint64_t v10 = __chkstk_darwin(v77);
  char v68 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v76 = (char *)&v53 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  uint64_t v12 = sub_100004AEC(&qword_10099D5B0);
  uint64_t v13 = OS_dispatch_queue.sync<A>(execute:)(sub_100038DAC, v2, v12);
  uint64_t v14 = aBlock[0];
  uint64_t v15 = static os_log_type_t.default.getter(v13);
  if (qword_10099B760 != -1) {
    swift_once(&qword_10099B760, sub_1006515A8);
  }
  uint64_t v16 = qword_100A2B070;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = xmmword_1007E67D0;
  aBlock[0] = a2;
  swift_retain(a2);
  uint64_t v19 = sub_100004AEC(&qword_10099D608);
  uint64_t v20 = String.init<A>(describing:)(aBlock, v19);
  uint64_t v22 = v21;
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_1000226F4();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  v16,  "ConfigurationCoordinator config value changed for %{public}@",  60LL,  2LL,  v18);
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v14 + 16);
  if (v23)
  {
    unint64_t v63 = sub_100004AB0();
    uint64_t v24 = v73;
    uint64_t v25 = *(unsigned __int8 *)(v73 + 80);
    uint64_t v53 = v14;
    int v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    uint64_t v62 = *(void *)(v73 + 72);
    uint64_t v60 = v25 | 7;
    double v58 = v5;
    uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
    uint64_t v61 = (v25 + 16) & ~v25;
    unsigned int v57 = enum case for DispatchQoS.QoSClass.default(_:);
    unint64_t v56 = (v9 + v61 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v55 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v54 = v55 + 8;
    uint64_t v28 = v76;
    uint64_t v27 = v77;
    do
    {
      uint64_t v75 = v23;
      uint64_t v29 = v59;
      v59(v28, v26, v27);
      uint64_t v30 = v69;
      uint64_t v31 = v70;
      uint64_t v32 = v71;
      (*(void (**)(char *, void, uint64_t))(v70 + 104))(v69, v57, v71);
      uint64_t v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      uint64_t v34 = v68;
      v29(v68, v76, v77);
      uint64_t v35 = swift_allocObject(&unk_1009397B0, v54, v60);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v61, v34, v77);
      uint64_t v36 = v65;
      *(void *)(v35 + v56) = v65;
      *(void *)(v35 + v55) = a2;
      aBlock[4] = sub_100038FC0;
      uint64_t v80 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1001C31E8;
      void aBlock[3] = &unk_1009397C8;
      uint64_t v37 = _Block_copy(aBlock);
      swift_retain(a2);
      uint64_t v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      uint64_t v78 = _swiftEmptyArrayStorage;
      uint64_t v39 = a2;
      uint64_t v40 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v41 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v42 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v43 = v58;
      uint64_t v44 = v67;
      uint64_t v45 = v40;
      a2 = v39;
      unint64_t v46 = v74;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v41, v42, v67, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v46, v43, v37);
      uint64_t v27 = v77;
      unint64_t v47 = v37;
      uint64_t v48 = v66;
      uint64_t v49 = v64;
      uint64_t v24 = v73;
      _Block_release(v47);

      unint64_t v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      uint64_t v51 = v75;
      uint64_t v28 = v76;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v80);
      v26 += v62;
      uint64_t v23 = v51 - 1;
    }

    while (v23);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10002EC34(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = a1;
  uint64_t v67 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v72 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v74 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v70 = *(void *)(v7 - 8);
  uint64_t v71 = v7;
  __chkstk_darwin(v7);
  uint64_t v69 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = sub_100004AEC(&qword_1009A0840);
  uint64_t v73 = *(void *)(v77 - 8);
  uint64_t v9 = *(void *)(v73 + 64);
  uint64_t v10 = __chkstk_darwin(v77);
  char v68 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v76 = (char *)&v53 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  uint64_t v12 = sub_100004AEC(&qword_10099D5B0);
  uint64_t v13 = OS_dispatch_queue.sync<A>(execute:)(sub_100038DAC, v2, v12);
  uint64_t v14 = aBlock[0];
  uint64_t v15 = static os_log_type_t.default.getter(v13);
  if (qword_10099B760 != -1) {
    swift_once(&qword_10099B760, sub_1006515A8);
  }
  uint64_t v16 = qword_100A2B070;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = xmmword_1007E67D0;
  aBlock[0] = a2;
  swift_retain(a2);
  uint64_t v19 = sub_100004AEC(&qword_10099D600);
  uint64_t v20 = String.init<A>(describing:)(aBlock, v19);
  uint64_t v22 = v21;
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_1000226F4();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  v16,  "ConfigurationCoordinator config value changed for %{public}@",  60LL,  2LL,  v18);
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v14 + 16);
  if (v23)
  {
    unint64_t v63 = sub_100004AB0();
    uint64_t v24 = v73;
    uint64_t v25 = *(unsigned __int8 *)(v73 + 80);
    uint64_t v53 = v14;
    int v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    uint64_t v62 = *(void *)(v73 + 72);
    uint64_t v60 = v25 | 7;
    double v58 = v5;
    uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
    uint64_t v61 = (v25 + 16) & ~v25;
    unsigned int v57 = enum case for DispatchQoS.QoSClass.default(_:);
    unint64_t v56 = (v9 + v61 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v55 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v54 = v55 + 8;
    uint64_t v28 = v76;
    uint64_t v27 = v77;
    do
    {
      uint64_t v75 = v23;
      uint64_t v29 = v59;
      v59(v28, v26, v27);
      uint64_t v30 = v69;
      uint64_t v31 = v70;
      uint64_t v32 = v71;
      (*(void (**)(char *, void, uint64_t))(v70 + 104))(v69, v57, v71);
      uint64_t v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      uint64_t v34 = v68;
      v29(v68, v76, v77);
      uint64_t v35 = swift_allocObject(&unk_100939760, v54, v60);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v61, v34, v77);
      uint64_t v36 = v65;
      *(void *)(v35 + v56) = v65;
      *(void *)(v35 + v55) = a2;
      aBlock[4] = sub_100038F60;
      uint64_t v80 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1001C31E8;
      void aBlock[3] = &unk_100939778;
      uint64_t v37 = _Block_copy(aBlock);
      swift_retain(a2);
      uint64_t v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      uint64_t v78 = _swiftEmptyArrayStorage;
      uint64_t v39 = a2;
      uint64_t v40 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v41 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v42 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v43 = v58;
      uint64_t v44 = v67;
      uint64_t v45 = v40;
      a2 = v39;
      unint64_t v46 = v74;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v41, v42, v67, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v46, v43, v37);
      uint64_t v27 = v77;
      unint64_t v47 = v37;
      uint64_t v48 = v66;
      uint64_t v49 = v64;
      uint64_t v24 = v73;
      _Block_release(v47);

      unint64_t v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      uint64_t v51 = v75;
      uint64_t v28 = v76;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v80);
      v26 += v62;
      uint64_t v23 = v51 - 1;
    }

    while (v23);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10002F1D4(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = a1;
  uint64_t v67 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v72 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v74 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v70 = *(void *)(v7 - 8);
  uint64_t v71 = v7;
  __chkstk_darwin(v7);
  uint64_t v69 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = sub_100004AEC(&qword_1009A0840);
  uint64_t v73 = *(void *)(v77 - 8);
  uint64_t v9 = *(void *)(v73 + 64);
  uint64_t v10 = __chkstk_darwin(v77);
  char v68 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v76 = (char *)&v53 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  uint64_t v12 = sub_100004AEC(&qword_10099D5B0);
  uint64_t v13 = OS_dispatch_queue.sync<A>(execute:)(sub_100038DAC, v2, v12);
  uint64_t v14 = aBlock[0];
  uint64_t v15 = static os_log_type_t.default.getter(v13);
  if (qword_10099B760 != -1) {
    swift_once(&qword_10099B760, sub_1006515A8);
  }
  uint64_t v16 = qword_100A2B070;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = xmmword_1007E67D0;
  aBlock[0] = a2;
  swift_retain(a2);
  uint64_t v19 = sub_100004AEC(&qword_10099D5F0);
  uint64_t v20 = String.init<A>(describing:)(aBlock, v19);
  uint64_t v22 = v21;
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_1000226F4();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  v16,  "ConfigurationCoordinator config value changed for %{public}@",  60LL,  2LL,  v18);
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v14 + 16);
  if (v23)
  {
    unint64_t v63 = sub_100004AB0();
    uint64_t v24 = v73;
    uint64_t v25 = *(unsigned __int8 *)(v73 + 80);
    uint64_t v53 = v14;
    int v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    uint64_t v62 = *(void *)(v73 + 72);
    uint64_t v60 = v25 | 7;
    double v58 = v5;
    uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
    uint64_t v61 = (v25 + 16) & ~v25;
    unsigned int v57 = enum case for DispatchQoS.QoSClass.default(_:);
    unint64_t v56 = (v9 + v61 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v55 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v54 = v55 + 8;
    uint64_t v28 = v76;
    uint64_t v27 = v77;
    do
    {
      uint64_t v75 = v23;
      uint64_t v29 = v59;
      v59(v28, v26, v27);
      uint64_t v30 = v69;
      uint64_t v31 = v70;
      uint64_t v32 = v71;
      (*(void (**)(char *, void, uint64_t))(v70 + 104))(v69, v57, v71);
      uint64_t v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      uint64_t v34 = v68;
      v29(v68, v76, v77);
      uint64_t v35 = swift_allocObject(&unk_100939710, v54, v60);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v61, v34, v77);
      uint64_t v36 = v65;
      *(void *)(v35 + v56) = v65;
      *(void *)(v35 + v55) = a2;
      aBlock[4] = sub_100038EF8;
      uint64_t v80 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1001C31E8;
      void aBlock[3] = &unk_100939728;
      uint64_t v37 = _Block_copy(aBlock);
      swift_retain(a2);
      uint64_t v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      uint64_t v78 = _swiftEmptyArrayStorage;
      uint64_t v39 = a2;
      uint64_t v40 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v41 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v42 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v43 = v58;
      uint64_t v44 = v67;
      uint64_t v45 = v40;
      a2 = v39;
      unint64_t v46 = v74;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v41, v42, v67, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v46, v43, v37);
      uint64_t v27 = v77;
      unint64_t v47 = v37;
      uint64_t v48 = v66;
      uint64_t v49 = v64;
      uint64_t v24 = v73;
      _Block_release(v47);

      unint64_t v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      uint64_t v51 = v75;
      uint64_t v28 = v76;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v80);
      v26 += v62;
      uint64_t v23 = v51 - 1;
    }

    while (v23);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10002F774(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = a1;
  uint64_t v67 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v72 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v74 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v70 = *(void *)(v7 - 8);
  uint64_t v71 = v7;
  __chkstk_darwin(v7);
  uint64_t v69 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = sub_100004AEC(&qword_1009A0840);
  uint64_t v73 = *(void *)(v77 - 8);
  uint64_t v9 = *(void *)(v73 + 64);
  uint64_t v10 = __chkstk_darwin(v77);
  char v68 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v76 = (char *)&v53 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  uint64_t v12 = sub_100004AEC(&qword_10099D5B0);
  uint64_t v13 = OS_dispatch_queue.sync<A>(execute:)(sub_100038DAC, v2, v12);
  uint64_t v14 = aBlock[0];
  uint64_t v15 = static os_log_type_t.default.getter(v13);
  if (qword_10099B760 != -1) {
    swift_once(&qword_10099B760, sub_1006515A8);
  }
  uint64_t v16 = qword_100A2B070;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = xmmword_1007E67D0;
  aBlock[0] = a2;
  swift_retain(a2);
  uint64_t v19 = sub_100004AEC(&qword_10099D5E8);
  uint64_t v20 = String.init<A>(describing:)(aBlock, v19);
  uint64_t v22 = v21;
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_1000226F4();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  v16,  "ConfigurationCoordinator config value changed for %{public}@",  60LL,  2LL,  v18);
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v14 + 16);
  if (v23)
  {
    unint64_t v63 = sub_100004AB0();
    uint64_t v24 = v73;
    uint64_t v25 = *(unsigned __int8 *)(v73 + 80);
    uint64_t v53 = v14;
    int v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    uint64_t v62 = *(void *)(v73 + 72);
    uint64_t v60 = v25 | 7;
    double v58 = v5;
    uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
    uint64_t v61 = (v25 + 16) & ~v25;
    unsigned int v57 = enum case for DispatchQoS.QoSClass.default(_:);
    unint64_t v56 = (v9 + v61 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v55 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v54 = v55 + 8;
    uint64_t v28 = v76;
    uint64_t v27 = v77;
    do
    {
      uint64_t v75 = v23;
      uint64_t v29 = v59;
      v59(v28, v26, v27);
      uint64_t v30 = v69;
      uint64_t v31 = v70;
      uint64_t v32 = v71;
      (*(void (**)(char *, void, uint64_t))(v70 + 104))(v69, v57, v71);
      uint64_t v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      uint64_t v34 = v68;
      v29(v68, v76, v77);
      uint64_t v35 = swift_allocObject(&unk_1009396C0, v54, v60);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v61, v34, v77);
      uint64_t v36 = v65;
      *(void *)(v35 + v56) = v65;
      *(void *)(v35 + v55) = a2;
      aBlock[4] = sub_100038E94;
      uint64_t v80 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1001C31E8;
      void aBlock[3] = &unk_1009396D8;
      uint64_t v37 = _Block_copy(aBlock);
      swift_retain(a2);
      uint64_t v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      uint64_t v78 = _swiftEmptyArrayStorage;
      uint64_t v39 = a2;
      uint64_t v40 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v41 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v42 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v43 = v58;
      uint64_t v44 = v67;
      uint64_t v45 = v40;
      a2 = v39;
      unint64_t v46 = v74;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v41, v42, v67, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v46, v43, v37);
      uint64_t v27 = v77;
      unint64_t v47 = v37;
      uint64_t v48 = v66;
      uint64_t v49 = v64;
      uint64_t v24 = v73;
      _Block_release(v47);

      unint64_t v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      uint64_t v51 = v75;
      uint64_t v28 = v76;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v80);
      v26 += v62;
      uint64_t v23 = v51 - 1;
    }

    while (v23);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10002FD14(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = a1;
  uint64_t v67 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v72 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v74 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v70 = *(void *)(v7 - 8);
  uint64_t v71 = v7;
  __chkstk_darwin(v7);
  uint64_t v69 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = sub_100004AEC(&qword_1009A0840);
  uint64_t v73 = *(void *)(v77 - 8);
  uint64_t v9 = *(void *)(v73 + 64);
  uint64_t v10 = __chkstk_darwin(v77);
  char v68 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v76 = (char *)&v53 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  uint64_t v12 = sub_100004AEC(&qword_10099D5B0);
  uint64_t v13 = OS_dispatch_queue.sync<A>(execute:)(sub_100038DAC, v2, v12);
  uint64_t v14 = aBlock[0];
  uint64_t v15 = static os_log_type_t.default.getter(v13);
  if (qword_10099B760 != -1) {
    swift_once(&qword_10099B760, sub_1006515A8);
  }
  uint64_t v16 = qword_100A2B070;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = xmmword_1007E67D0;
  aBlock[0] = a2;
  swift_retain(a2);
  uint64_t v19 = sub_100004AEC(&qword_10099D5D8);
  uint64_t v20 = String.init<A>(describing:)(aBlock, v19);
  uint64_t v22 = v21;
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_1000226F4();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  v16,  "ConfigurationCoordinator config value changed for %{public}@",  60LL,  2LL,  v18);
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v14 + 16);
  if (v23)
  {
    unint64_t v63 = sub_100004AB0();
    uint64_t v24 = v73;
    uint64_t v25 = *(unsigned __int8 *)(v73 + 80);
    uint64_t v53 = v14;
    int v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    uint64_t v62 = *(void *)(v73 + 72);
    uint64_t v60 = v25 | 7;
    double v58 = v5;
    uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
    uint64_t v61 = (v25 + 16) & ~v25;
    unsigned int v57 = enum case for DispatchQoS.QoSClass.default(_:);
    unint64_t v56 = (v9 + v61 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v55 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v54 = v55 + 8;
    uint64_t v28 = v76;
    uint64_t v27 = v77;
    do
    {
      uint64_t v75 = v23;
      uint64_t v29 = v59;
      v59(v28, v26, v27);
      uint64_t v30 = v69;
      uint64_t v31 = v70;
      uint64_t v32 = v71;
      (*(void (**)(char *, void, uint64_t))(v70 + 104))(v69, v57, v71);
      uint64_t v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      uint64_t v34 = v68;
      v29(v68, v76, v77);
      uint64_t v35 = swift_allocObject(&unk_100939670, v54, v60);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v61, v34, v77);
      uint64_t v36 = v65;
      *(void *)(v35 + v56) = v65;
      *(void *)(v35 + v55) = a2;
      aBlock[4] = sub_100038E7C;
      uint64_t v80 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1001C31E8;
      void aBlock[3] = &unk_100939688;
      uint64_t v37 = _Block_copy(aBlock);
      swift_retain(a2);
      uint64_t v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      uint64_t v78 = _swiftEmptyArrayStorage;
      uint64_t v39 = a2;
      uint64_t v40 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v41 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v42 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v43 = v58;
      uint64_t v44 = v67;
      uint64_t v45 = v40;
      a2 = v39;
      unint64_t v46 = v74;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v41, v42, v67, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v46, v43, v37);
      uint64_t v27 = v77;
      unint64_t v47 = v37;
      uint64_t v48 = v66;
      uint64_t v49 = v64;
      uint64_t v24 = v73;
      _Block_release(v47);

      unint64_t v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      uint64_t v51 = v75;
      uint64_t v28 = v76;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v80);
      v26 += v62;
      uint64_t v23 = v51 - 1;
    }

    while (v23);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000302B4(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = a1;
  uint64_t v67 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v72 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v74 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v70 = *(void *)(v7 - 8);
  uint64_t v71 = v7;
  __chkstk_darwin(v7);
  uint64_t v69 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = sub_100004AEC(&qword_1009A0840);
  uint64_t v73 = *(void *)(v77 - 8);
  uint64_t v9 = *(void *)(v73 + 64);
  uint64_t v10 = __chkstk_darwin(v77);
  char v68 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v76 = (char *)&v53 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  uint64_t v12 = sub_100004AEC(&qword_10099D5B0);
  uint64_t v13 = OS_dispatch_queue.sync<A>(execute:)(sub_100038DAC, v2, v12);
  uint64_t v14 = aBlock[0];
  uint64_t v15 = static os_log_type_t.default.getter(v13);
  if (qword_10099B760 != -1) {
    swift_once(&qword_10099B760, sub_1006515A8);
  }
  uint64_t v16 = qword_100A2B070;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = xmmword_1007E67D0;
  aBlock[0] = a2;
  swift_retain(a2);
  uint64_t v19 = sub_100004AEC(&qword_10099D5D0);
  uint64_t v20 = String.init<A>(describing:)(aBlock, v19);
  uint64_t v22 = v21;
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_1000226F4();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  v16,  "ConfigurationCoordinator config value changed for %{public}@",  60LL,  2LL,  v18);
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v14 + 16);
  if (v23)
  {
    unint64_t v63 = sub_100004AB0();
    uint64_t v24 = v73;
    uint64_t v25 = *(unsigned __int8 *)(v73 + 80);
    uint64_t v53 = v14;
    int v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    uint64_t v62 = *(void *)(v73 + 72);
    uint64_t v60 = v25 | 7;
    double v58 = v5;
    uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
    uint64_t v61 = (v25 + 16) & ~v25;
    unsigned int v57 = enum case for DispatchQoS.QoSClass.default(_:);
    unint64_t v56 = (v9 + v61 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v55 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v54 = v55 + 8;
    uint64_t v28 = v76;
    uint64_t v27 = v77;
    do
    {
      uint64_t v75 = v23;
      uint64_t v29 = v59;
      v59(v28, v26, v27);
      uint64_t v30 = v69;
      uint64_t v31 = v70;
      uint64_t v32 = v71;
      (*(void (**)(char *, void, uint64_t))(v70 + 104))(v69, v57, v71);
      uint64_t v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      uint64_t v34 = v68;
      v29(v68, v76, v77);
      uint64_t v35 = swift_allocObject(&unk_100939620, v54, v60);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v61, v34, v77);
      uint64_t v36 = v65;
      *(void *)(v35 + v56) = v65;
      *(void *)(v35 + v55) = a2;
      aBlock[4] = sub_100038E64;
      uint64_t v80 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1001C31E8;
      void aBlock[3] = &unk_100939638;
      uint64_t v37 = _Block_copy(aBlock);
      swift_retain(a2);
      uint64_t v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      uint64_t v78 = _swiftEmptyArrayStorage;
      uint64_t v39 = a2;
      uint64_t v40 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v41 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v42 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v43 = v58;
      uint64_t v44 = v67;
      uint64_t v45 = v40;
      a2 = v39;
      unint64_t v46 = v74;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v41, v42, v67, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v46, v43, v37);
      uint64_t v27 = v77;
      unint64_t v47 = v37;
      uint64_t v48 = v66;
      uint64_t v49 = v64;
      uint64_t v24 = v73;
      _Block_release(v47);

      unint64_t v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      uint64_t v51 = v75;
      uint64_t v28 = v76;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v80);
      v26 += v62;
      uint64_t v23 = v51 - 1;
    }

    while (v23);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100030854(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = a1;
  uint64_t v67 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v72 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v74 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v70 = *(void *)(v7 - 8);
  uint64_t v71 = v7;
  __chkstk_darwin(v7);
  uint64_t v69 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = sub_100004AEC(&qword_1009A0840);
  uint64_t v73 = *(void *)(v77 - 8);
  uint64_t v9 = *(void *)(v73 + 64);
  uint64_t v10 = __chkstk_darwin(v77);
  char v68 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v76 = (char *)&v53 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  uint64_t v12 = sub_100004AEC(&qword_10099D5B0);
  uint64_t v13 = OS_dispatch_queue.sync<A>(execute:)(sub_100038DAC, v2, v12);
  uint64_t v14 = aBlock[0];
  uint64_t v15 = static os_log_type_t.default.getter(v13);
  if (qword_10099B760 != -1) {
    swift_once(&qword_10099B760, sub_1006515A8);
  }
  uint64_t v16 = qword_100A2B070;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = xmmword_1007E67D0;
  aBlock[0] = a2;
  swift_retain(a2);
  uint64_t v19 = sub_100004AEC(&qword_10099D5C0);
  uint64_t v20 = String.init<A>(describing:)(aBlock, v19);
  uint64_t v22 = v21;
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_1000226F4();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  v16,  "ConfigurationCoordinator config value changed for %{public}@",  60LL,  2LL,  v18);
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v14 + 16);
  if (v23)
  {
    unint64_t v63 = sub_100004AB0();
    uint64_t v24 = v73;
    uint64_t v25 = *(unsigned __int8 *)(v73 + 80);
    uint64_t v53 = v14;
    int v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    uint64_t v62 = *(void *)(v73 + 72);
    uint64_t v60 = v25 | 7;
    double v58 = v5;
    uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
    uint64_t v61 = (v25 + 16) & ~v25;
    unsigned int v57 = enum case for DispatchQoS.QoSClass.default(_:);
    unint64_t v56 = (v9 + v61 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v55 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v54 = v55 + 8;
    uint64_t v28 = v76;
    uint64_t v27 = v77;
    do
    {
      uint64_t v75 = v23;
      uint64_t v29 = v59;
      v59(v28, v26, v27);
      uint64_t v30 = v69;
      uint64_t v31 = v70;
      uint64_t v32 = v71;
      (*(void (**)(char *, void, uint64_t))(v70 + 104))(v69, v57, v71);
      uint64_t v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      uint64_t v34 = v68;
      v29(v68, v76, v77);
      uint64_t v35 = swift_allocObject(&unk_1009395D0, v54, v60);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v61, v34, v77);
      uint64_t v36 = v65;
      *(void *)(v35 + v56) = v65;
      *(void *)(v35 + v55) = a2;
      aBlock[4] = sub_100038DDC;
      uint64_t v80 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1001C31E8;
      void aBlock[3] = &unk_1009395E8;
      uint64_t v37 = _Block_copy(aBlock);
      swift_retain(a2);
      uint64_t v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      uint64_t v78 = _swiftEmptyArrayStorage;
      uint64_t v39 = a2;
      uint64_t v40 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v41 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v42 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v43 = v58;
      uint64_t v44 = v67;
      uint64_t v45 = v40;
      a2 = v39;
      unint64_t v46 = v74;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v41, v42, v67, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v46, v43, v37);
      uint64_t v27 = v77;
      unint64_t v47 = v37;
      uint64_t v48 = v66;
      uint64_t v49 = v64;
      uint64_t v24 = v73;
      _Block_release(v47);

      unint64_t v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      uint64_t v51 = v75;
      uint64_t v28 = v76;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v80);
      v26 += v62;
      uint64_t v23 = v51 - 1;
    }

    while (v23);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100030DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = a1;
  uint64_t v67 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v72 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v74 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v70 = *(void *)(v7 - 8);
  uint64_t v71 = v7;
  __chkstk_darwin(v7);
  uint64_t v69 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = sub_100004AEC(&qword_1009A0840);
  uint64_t v73 = *(void *)(v77 - 8);
  uint64_t v9 = *(void *)(v73 + 64);
  uint64_t v10 = __chkstk_darwin(v77);
  char v68 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v76 = (char *)&v53 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  uint64_t v12 = sub_100004AEC(&qword_10099D5B0);
  uint64_t v13 = OS_dispatch_queue.sync<A>(execute:)(sub_100038DAC, v2, v12);
  uint64_t v14 = aBlock[0];
  uint64_t v15 = static os_log_type_t.default.getter(v13);
  if (qword_10099B760 != -1) {
    swift_once(&qword_10099B760, sub_1006515A8);
  }
  uint64_t v16 = qword_100A2B070;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = xmmword_1007E67D0;
  aBlock[0] = a2;
  swift_retain(a2);
  uint64_t v19 = sub_100004AEC(&qword_10099D5B8);
  uint64_t v20 = String.init<A>(describing:)(aBlock, v19);
  uint64_t v22 = v21;
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_1000226F4();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  v16,  "ConfigurationCoordinator config value changed for %{public}@",  60LL,  2LL,  v18);
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v14 + 16);
  if (v23)
  {
    unint64_t v63 = sub_100004AB0();
    uint64_t v24 = v73;
    uint64_t v25 = *(unsigned __int8 *)(v73 + 80);
    uint64_t v53 = v14;
    int v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    uint64_t v62 = *(void *)(v73 + 72);
    uint64_t v60 = v25 | 7;
    double v58 = v5;
    uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
    uint64_t v61 = (v25 + 16) & ~v25;
    unsigned int v57 = enum case for DispatchQoS.QoSClass.default(_:);
    unint64_t v56 = (v9 + v61 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v55 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v54 = v55 + 8;
    uint64_t v28 = v76;
    uint64_t v27 = v77;
    do
    {
      uint64_t v75 = v23;
      uint64_t v29 = v59;
      v59(v28, v26, v27);
      uint64_t v30 = v69;
      uint64_t v31 = v70;
      uint64_t v32 = v71;
      (*(void (**)(char *, void, uint64_t))(v70 + 104))(v69, v57, v71);
      uint64_t v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      uint64_t v34 = v68;
      v29(v68, v76, v77);
      uint64_t v35 = swift_allocObject(&unk_100939580, v54, v60);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v61, v34, v77);
      uint64_t v36 = v65;
      *(void *)(v35 + v56) = v65;
      *(void *)(v35 + v55) = a2;
      aBlock[4] = sub_100038DC4;
      uint64_t v80 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1001C31E8;
      void aBlock[3] = &unk_100939598;
      uint64_t v37 = _Block_copy(aBlock);
      swift_retain(a2);
      uint64_t v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      uint64_t v78 = _swiftEmptyArrayStorage;
      uint64_t v39 = a2;
      uint64_t v40 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v41 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v42 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v43 = v58;
      uint64_t v44 = v67;
      uint64_t v45 = v40;
      a2 = v39;
      unint64_t v46 = v74;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v41, v42, v67, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v46, v43, v37);
      uint64_t v27 = v77;
      unint64_t v47 = v37;
      uint64_t v48 = v66;
      uint64_t v49 = v64;
      uint64_t v24 = v73;
      _Block_release(v47);

      unint64_t v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      uint64_t v51 = v75;
      uint64_t v28 = v76;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v80);
      v26 += v62;
      uint64_t v23 = v51 - 1;
    }

    while (v23);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100031394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100004AEC(&qword_1009A0840);
  Subscription.subscriber.getter(v11, v5);
  uint64_t v6 = v12;
  uint64_t v7 = v13;
  sub_100012ED8(v11, v12);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 8);
  type metadata accessor for SPServiceState(0LL);
  v8(a2, a3, v9, v6, v7);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v11);
}

uint64_t sub_100031424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = sub_100004AEC(&qword_1009A0840);
  Subscription.subscriber.getter(v13, v7);
  uint64_t v8 = v14;
  uint64_t v9 = v15;
  sub_100012ED8(v13, v14);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8);
  uint64_t v11 = sub_100004AEC(a4);
  v10(a2, a3, v11, v8, v9);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v13);
}

uint64_t sub_1000314C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100004AEC(&qword_1009A0840);
  Subscription.subscriber.getter(v11, v7);
  uint64_t v8 = v12;
  uint64_t v9 = v13;
  sub_100012ED8(v11, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8))(a2, a3, a4, v8, v9);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v11);
}

uint64_t sub_10003154C(char a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v47 = a5;
  uint64_t v48 = a6;
  int v45 = a4;
  uint64_t v43 = a3;
  uint64_t v46 = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v53 = *(void *)(v7 - 8);
  uint64_t v54 = v7;
  __chkstk_darwin(v7);
  char v52 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v50 = *(void *)(v9 - 8);
  uint64_t v51 = v9;
  __chkstk_darwin(v9);
  uint64_t v49 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v11 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DefaultConfigurationLayer(0LL);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = static os_log_type_t.default.getter(v15);
  if (qword_10099B760 != -1) {
    swift_once(&qword_10099B760, sub_1006515A8);
  }
  uint64_t v19 = qword_100A2B070;
  uint64_t v20 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v21 = swift_allocObject(v20, 72LL, 7LL);
  *(_OWORD *)(v21 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = xmmword_1007E67D0;
  LOBYTE(aBlock[0]) = a1;
  uint64_t v22 = String.init<A>(describing:)(aBlock, &type metadata for ConfigurationCoordinator.ConfigurationSource);
  uint64_t v24 = v23;
  *(void *)(v21 + 56) = &type metadata for String;
  *(void *)(v21 + 64) = sub_1000226F4();
  *(void *)(v21 + 32) = v22;
  *(void *)(v21 + 40) = v24;
  os_log(_:dso:log:_:_:)( v18,  &_mh_execute_header,  v19,  "ConfigurationCoordinator new config from %{public}@",  51LL,  2LL,  v21);
  swift_bridgeObjectRelease();
  uint64_t v25 = *(void *)(v46 + 56);
  sub_100013044(v43, (uint64_t)aBlock);
  swift_bridgeObjectRetain(v25);
  sub_10041511C(aBlock, a1, (uint64_t)v17);
  int v26 = sub_1006A0980((uint64_t)v17, v25);
  swift_bridgeObjectRelease();
  sub_100018C68((uint64_t)v17, type metadata accessor for DefaultConfigurationLayer);
  sub_100025CB0((uint64_t)v26, v45 & 1);
  swift_bridgeObjectRelease();
  sub_100004AB0();
  uint64_t v27 = v44;
  (*(void (**)(char *, void, uint64_t))(v11 + 104))( v13,  enum case for DispatchQoS.QoSClass.default(_:),  v44);
  uint64_t v28 = (void *)static OS_dispatch_queue.global(qos:)(v13);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v27);
  uint64_t v29 = swift_allocObject(&unk_100939508, 32LL, 7LL);
  uint64_t v31 = v47;
  uint64_t v30 = v48;
  *(void *)(v29 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v47;
  *(void *)(v29 + 24) = v30;
  aBlock[4] = sub_1000372D8;
  uint64_t v56 = v29;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  void aBlock[3] = &unk_100939520;
  uint64_t v32 = _Block_copy(aBlock);
  uint64_t v33 = sub_1000372DC(v31, v30);
  uint64_t v34 = v49;
  static DispatchQoS.unspecified.getter(v33);
  unsigned int v57 = _swiftEmptyArrayStorage;
  uint64_t v35 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v36 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v37 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v38 = v52;
  uint64_t v39 = v36;
  uint64_t v40 = v54;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v57, v39, v37, v54, v35);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v34, v38, v32);
  _Block_release(v32);

  (*(void (**)(char *, uint64_t))(v53 + 8))(v38, v40);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v34, v51);
  return swift_release(v56);
}

uint64_t sub_10003194C()
{
  swift_release(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  swift_release(*(void *)(v0 + 64));
  swift_release(*(void *)(v0 + 72));
  swift_release(*(void *)(v0 + 80));
  uint64_t v1 = v0 + OBJC_IVAR____TtC12searchpartyd24ConfigurationCoordinator_rootURL;
  uint64_t v2 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  return v0;
}

uint64_t sub_1000319D8()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_1000319FC()
{
  return type metadata accessor for ConfigurationCoordinator(0LL);
}

uint64_t type metadata accessor for ConfigurationCoordinator(uint64_t a1)
{
  uint64_t result = qword_10099D130;
  if (!qword_10099D130) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ConfigurationCoordinator);
  }
  return result;
}

uint64_t sub_100031A40(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[6] = "\b";
  v4[7] = "\b";
  v4[8] = "\b";
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    void v4[9] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 10LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100031AEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100004AEC(&qword_1009A0840);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  sub_100013044(a1, (uint64_t)aBlock);
  uint64_t v8 = swift_allocObject(&unk_1009393C8, 24LL, 7LL);
  swift_weakInit(v8 + 16, v2);
  uint64_t v9 = sub_100004AEC(&qword_10099D2E8);
  Subscription.init(subscriber:unsubscribeBlock:)(aBlock, sub_100032564, v8, v9);
  uint64_t v10 = *(dispatch_queue_s **)(v2 + 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))( (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a2,  v5);
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = (v11 + 24) & ~v11;
  uint64_t v13 = swift_allocObject(&unk_1009393F0, v12 + v7, v11 | 7);
  *(void *)(v13 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v2;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))( v13 + v12,  (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v5);
  uint64_t v14 = swift_allocObject(&unk_100939418, 32LL, 7LL);
  *(void *)(v14 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = sub_100032580;
  *(void *)(v14 + 24) = v13;
  aBlock[4] = sub_1000228F4;
  uint64_t v20 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100025BD4;
  void aBlock[3] = &unk_100939430;
  uint64_t v15 = _Block_copy(aBlock);
  uint64_t v16 = v20;
  swift_retain(v2);
  swift_retain(v14);
  swift_release(v16);
  dispatch_sync(v10, v15);
  _Block_release(v15);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v14, "", 117LL, 1169LL, 32LL, 1LL);
  swift_release(v13);
  uint64_t result = swift_release(v14);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100031CE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    sub_100031D60(a1);
    return swift_release(v5);
  }

  return result;
}

uint64_t sub_100031D60(uint64_t a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009A0840);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  uint64_t v6 = *(dispatch_queue_s **)(v1 + 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))( (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v3);
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = (v7 + 24) & ~v7;
  uint64_t v9 = swift_allocObject(&unk_100939468, v8 + v5, v7 | 7);
  *(void *)(v9 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v1;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))( v9 + v8,  (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v3);
  uint64_t v10 = swift_allocObject(&unk_100939490, 32LL, 7LL);
  *(void *)(v10 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = sub_100032784;
  *(void *)(v10 + 24) = v9;
  aBlock[4] = sub_100039568;
  uint64_t v16 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100025BD4;
  void aBlock[3] = &unk_1009394A8;
  uint64_t v11 = _Block_copy(aBlock);
  uint64_t v12 = v16;
  swift_retain(v1);
  swift_retain(v10);
  swift_release(v12);
  dispatch_sync(v6, v11);
  _Block_release(v11);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v10, "", 117LL, 1178LL, 32LL, 1LL);
  swift_release(v9);
  uint64_t result = swift_release(v10);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100031F10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A0840);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v8 = a1 + 16;
  swift_beginAccess(a1 + 16, v21, 33LL, 0LL);
  unint64_t v9 = *(void *)(a1 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
  *(void *)(a1 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v9 = sub_1004C4754(0, *(void *)(v9 + 16) + 1LL, 1, v9);
    *(void *)uint64_t v8 = v9;
  }

  unint64_t v12 = *(void *)(v9 + 16);
  unint64_t v11 = *(void *)(v9 + 24);
  if (v12 >= v11 >> 1)
  {
    unint64_t v9 = sub_1004C4754(v11 > 1, v12 + 1, 1, v9);
    *(void *)uint64_t v8 = v9;
  }

  *(void *)(v9 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = v12 + 1;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v5 + 32))( v9 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
  + *(void *)(v5 + 72) * v12,
    v7,
    v4);
  uint64_t v13 = swift_endAccess(v21);
  uint64_t v14 = static os_log_type_t.default.getter(v13);
  if (qword_10099B760 != -1) {
    swift_once(&qword_10099B760, sub_1006515A8);
  }
  uint64_t v15 = qword_100A2B070;
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
  *(_OWORD *)(v17 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = xmmword_1007E67D0;
  uint64_t v18 = *(void *)(*(void *)v8 + 16LL);
  *(void *)(v17 + 56) = &type metadata for Int;
  *(void *)(v17 + 64) = &protocol witness table for Int;
  *(void *)(v17 + 32) = v18;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "ConfigurationCoordinator client subscribed. Count is %i", v20);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100032108(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 16;
  swift_beginAccess(a1 + 16, v15, 1LL, 0LL);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v14 = a2;
  swift_bridgeObjectRetain(v5);
  *(void *)(a1 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = sub_100024558( (uint64_t (*)(char *))sub_1000327E4,  (uint64_t)v13,  v5,  &qword_1009A0840,  (void (*)(BOOL, uint64_t, uint64_t))sub_100032954);
  uint64_t v6 = swift_bridgeObjectRelease();
  uint64_t v7 = static os_log_type_t.default.getter(v6);
  if (qword_10099B760 != -1) {
    swift_once(&qword_10099B760, sub_1006515A8);
  }
  uint64_t v8 = qword_100A2B070;
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v10 = swift_allocObject(v9, 72LL, 7LL);
  *(_OWORD *)(v10 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = xmmword_1007E67D0;
  uint64_t v11 = *(void *)(*(void *)v4 + 16LL);
  *(void *)(v10 + 56) = &type metadata for Int;
  *(void *)(v10 + 64) = &protocol witness table for Int;
  *(void *)(v10 + 32) = v11;
  os_log(_:dso:log:_:_:)( v7,  &_mh_execute_header,  v8,  "ConfigurationCoordinator client unsubscribed. Count is %i",  v13[0]);
  return swift_bridgeObjectRelease();
}

BOOL sub_100032248(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A0840);
  uint64_t v5 = sub_1000372EC(&qword_10099D2F8, &qword_1009A0840, (uint64_t)&protocol conformance descriptor for Subscription<A>);
  return (dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, v5) & 1) == 0;
}

uint64_t sub_1000322CC()
{
  uint64_t v1 = *v0;
  swift_beginAccess(*v0 + 16, v3, 0LL, 0LL);
  return swift_bridgeObjectRetain(*(void *)(v1 + 16));
}

uint64_t sub_10003230C(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_beginAccess(v3 + 16, v6, 1LL, 0LL);
  uint64_t v4 = *(void *)(v3 + 16);
  *(void *)(v3 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = a1;
  return swift_bridgeObjectRelease(v4);
}

void *sub_100032354(uint64_t a1)
{
  return &j__swift_endAccess;
}

uint64_t sub_100032398@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100031AEC(a1, a2);
}

uint64_t sub_1000323B8(uint64_t a1)
{
  char v1 = a1;
  uint64_t v2 = static os_log_type_t.default.getter(a1);
  if (qword_10099B760 != -1) {
    swift_once(&qword_10099B760, sub_1006515A8);
  }
  uint64_t v3 = qword_100A2B070;
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16) = xmmword_1007E67D0;
  *(void *)(v5 + 56) = &type metadata for Bool;
  *(void *)(v5 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v5 + 32) = v1 & 1;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "FMIP State changed to %i", v9);
  uint64_t result = swift_bridgeObjectRelease();
  if ((v1 & 1) == 0)
  {
    uint64_t v7 = static os_log_type_t.default.getter(result);
    os_log(_:dso:log:_:_:)( v7,  &_mh_execute_header,  qword_100A2B070,  "ConfigurationCoordinator asking ServiceStateProvider to reset.",  62LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v8 = sub_100024954();
    sub_10061F484();
    return swift_release(v8);
  }

  return result;
}

uint64_t sub_1000324E4(uint64_t a1)
{
  return sub_1000323B8(a1);
}

uint64_t sub_100032504(uint64_t a1)
{
  uint64_t result = sub_100007864(&qword_10099D2E0, type metadata accessor for ConfigurationCoordinator, (uint64_t)&unk_1007E4A48);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100032540()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100032564(uint64_t a1)
{
  return sub_100031CE8(a1, v1);
}

uint64_t sub_100032580()
{
  return sub_100032790(sub_100031F10);
}

uint64_t sub_10003258C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10003259C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000325AC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

Class sub_1000325B4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  uint64_t v4 = v1(v3);
  swift_release(v2);
  if (v4)
  {
    v5.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v4);
  }

  else
  {
    v5.super.isa = 0LL;
  }

  return v5.super.isa;
}

uint64_t sub_100032628(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  sub_100012ED8(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 432))(v1, v2);
}

uint64_t sub_100032670@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100012ED8(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 440))(v3, v4);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1000326C0(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  sub_100012ED8(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 448))(v1, v2);
}

uint64_t sub_10003270C()
{
  uint64_t v1 = sub_100004AEC(&qword_1009A0840);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100032784()
{
  return sub_100032790(sub_100032108);
}

uint64_t sub_100032790(uint64_t (*a1)(void, uint64_t))
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(sub_100004AEC(&qword_1009A0840) - 8) + 80LL);
  return a1(*(void *)(v1 + 16), v1 + ((v2 + 24) & ~v2));
}

uint64_t sub_1000327D4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

BOOL sub_1000327E4(uint64_t a1)
{
  return sub_100032248(a1, *(void *)(v1 + 16));
}

uint64_t sub_100032800(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000335AC(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10003281C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100033714(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032838(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100034058(a1, a2, a3, *v3, &qword_10099D310);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10003285C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036DE0(a1, a2, a3, (void *)*v3, &qword_10099D480, (uint64_t *)&unk_1009B9340);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032888(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100033A0C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000328A4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC( a1,  a2,  a3,  (void *)*v3,  (uint64_t *)&unk_1009B1090,  type metadata accessor for OwnedBeaconRecord);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000328D0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC( a1,  a2,  a3,  (void *)*v3,  (uint64_t *)&unk_1009A9C20,  (uint64_t (*)(void))&type metadata accessor for UUID);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000328FC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC( a1,  a2,  a3,  (void *)*v3,  &qword_10099D300,  type metadata accessor for DefaultConfigurationLayer);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032928(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000350E4(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_1009B1080, &qword_1009B0530);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032954(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036DE0(a1, a2, a3, (void *)*v3, &qword_10099D2F0, &qword_1009A0840);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032980(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100033BB4(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10003299C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100033D18(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000329B8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC(a1, a2, a3, (void *)*v3, &qword_10099D358, type metadata accessor for ObservedAdvertisement);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000329E4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100033EBC(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100032A00(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC( a1,  a2,  a3,  (void *)*v3,  &qword_10099D3B0,  type metadata accessor for ObservedAdvertisement.Location);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032A2C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC(a1, a2, a3, (void *)*v3, &qword_10099D320, type metadata accessor for KeySyncMetadata);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032A58(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC(a1, a2, a3, (void *)*v3, &qword_10099D3A8, type metadata accessor for DeviceEvent);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032A84(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036210(a1, a2, a3, *v3, &qword_10099D328);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100032AA8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC(a1, a2, a3, (void *)*v3, &qword_10099D318, type metadata accessor for BeaconObservation);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032AD4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC( a1,  a2,  a3,  (void *)*v3,  &qword_10099D338,  type metadata accessor for KeyGenerationBeaconInfo);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032B00(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100034058(a1, a2, a3, *v3, &qword_1009B10C0);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100032B24(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000341B0(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100032B40(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000350E4(a1, a2, a3, (void *)*v3, &qword_10099D590, &qword_10099D598);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032B6C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC(a1, a2, a3, (void *)*v3, &qword_10099D5A0, type metadata accessor for SPCachedAdvertisement);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032B98(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC(a1, a2, a3, (void *)*v3, &qword_10099D350, type metadata accessor for BeaconIdentifier);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032BC4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC(a1, a2, a3, (void *)*v3, &qword_1009B1300, type metadata accessor for SharedBeaconRecord);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032BF0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC(a1, a2, a3, (void *)*v3, &qword_10099D380, type metadata accessor for SafeLocation);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032C1C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100034320(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100032C38(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100034488(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032C54(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100034610(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032C70(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000347B4(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100032C8C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100034920(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100032CA8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100034AA4(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100032CC4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100034C0C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100032CE0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000350E4(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_1009AA770, (uint64_t *)&unk_1009B1380);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032D0C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC( a1,  a2,  a3,  (void *)*v3,  &qword_1009B10F0,  type metadata accessor for BeaconEstimatedLocation);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032D38(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000350E4(a1, a2, a3, (void *)*v3, &qword_10099D450, (uint64_t *)&unk_1009B1230);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032D64(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036DE0(a1, a2, a3, (void *)*v3, &qword_10099D438, &qword_10099D440);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032D90(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100034DC8(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032DAC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC(a1, a2, a3, (void *)*v3, &qword_1009B1210, type metadata accessor for TimeBasedKey);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032DD8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036DE0(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_1009B14B0, (uint64_t *)&unk_1009A0850);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032E04(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100034F4C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100032E20(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC(a1, a2, a3, (void *)*v3, &qword_10099D4C0, type metadata accessor for ShareRecord);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032E4C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC(a1, a2, a3, (void *)*v3, &qword_10099D420, type metadata accessor for CryptoKeys);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032E78(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC(a1, a2, a3, (void *)*v3, &qword_10099D430, type metadata accessor for FamilyCryptoKeysV1);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032EA4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000350E4(a1, a2, a3, (void *)*v3, &qword_10099D4C8, &qword_10099D4D0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032ED0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000350E4(a1, a2, a3, (void *)*v3, &qword_10099D4D8, &qword_10099D4E0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032EFC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100035288(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100032F18(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC(a1, a2, a3, (void *)*v3, &qword_10099D428, type metadata accessor for FamilyCryptoKeysV2);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032F44(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036DE0(a1, a2, a3, (void *)*v3, &qword_10099D500, &qword_10099D508);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032F70(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC(a1, a2, a3, (void *)*v3, &qword_1009B13B0, type metadata accessor for FetchRequestBeacon);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032F9C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC( a1,  a2,  a3,  (void *)*v3,  &qword_1009B1550,  type metadata accessor for FetchResponse.SearchResult);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032FC8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC(a1, a2, a3, (void *)*v3, &qword_10099D4E8, type metadata accessor for RawSearchResult);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032FF4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000350E4(a1, a2, a3, (void *)*v3, &qword_10099D578, &qword_10099D580);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100033020(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000350E4(a1, a2, a3, (void *)*v3, &qword_10099D4B0, &qword_10099D4B8);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10003304C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036DE0(a1, a2, a3, (void *)*v3, &qword_10099D570, &qword_1009A6B70);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100033078(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC(a1, a2, a3, (void *)*v3, &qword_10099D540, type metadata accessor for SecureLocation);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000330A4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC( a1,  a2,  a3,  (void *)*v3,  &qword_10099D498,  type metadata accessor for WildModeAssociationRecord);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000330D0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036DE0(a1, a2, a3, (void *)*v3, &qword_10099D468, &qword_10099D470);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000330FC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC(a1, a2, a3, (void *)*v3, &qword_1009B0630, type metadata accessor for KeySyncMetadataDisplay);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100033128(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036DE0(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_1009B10A0, &qword_1009B0800);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100033154(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036210(a1, a2, a3, *v3, &qword_1009B1460);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100033178(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100035900(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100033194(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036DE0(a1, a2, a3, (void *)*v3, &qword_10099D510, (uint64_t *)&unk_1009AA7E0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000331C0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100035A78(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000331DC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036DE0(a1, a2, a3, (void *)*v3, &qword_10099D520, (uint64_t *)&unk_1009AA7A0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100033208(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000350E4(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_1009B1440, &qword_10099D550);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100033234(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100035C20(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100033250(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC(a1, a2, a3, (void *)*v3, &qword_10099D558, type metadata accessor for OwnSubmitLocationInfo);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10003327C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC( a1,  a2,  a3,  (void *)*v3,  (uint64_t *)&unk_1009B10D0,  type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000332A8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100035DBC(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000332C4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036DE0(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_1009B1200, &qword_1009AC230);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000332F0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036DE0(a1, a2, a3, (void *)*v3, &qword_10099D410, &qword_1009B11D0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10003331C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100035F34(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100033338(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC( a1,  a2,  a3,  (void *)*v3,  &qword_10099D368,  type metadata accessor for ManagedCBPeripheralBeaconInfo);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100033364(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000360B4(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100033380(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036210(a1, a2, a3, *v3, &qword_10099D488);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000333A4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000350E4(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_1009B11B0, &qword_10099D408);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000333D0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036DE0(a1, a2, a3, (void *)*v3, &qword_10099D528, (uint64_t *)&unk_1009AC320);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000333FC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC( a1,  a2,  a3,  (void *)*v3,  (uint64_t *)&unk_1009B1290,  type metadata accessor for LocationProvider);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100033428(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10003636C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100033444(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036674(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100033460(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036DE0(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_1009B1120, &qword_10099D4A0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10003348C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000367EC(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000334A8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036968(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000334C4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000350E4(a1, a2, a3, (void *)*v3, &qword_10099D690, &qword_10099D698);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000334F0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036AC0(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10003350C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036C44(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100033528(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC( a1,  a2,  a3,  (void *)*v3,  (uint64_t *)&unk_1009B1060,  (uint64_t (*)(void))&type metadata accessor for URL);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100033554(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC( a1,  a2,  a3,  (void *)*v3,  &qword_10099D3F0,  type metadata accessor for BeaconKeyManager.KeyIndexMapInfo);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100033580(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036FFC( a1,  a2,  a3,  (void *)*v3,  (uint64_t *)&unk_1009B1170,  type metadata accessor for BeaconKeyManager.KeyMapInfo);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000335AC(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_1009AF520);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

    uint64_t v11 = (v24 - 1) & v24;
    uint64_t v18 = __clz(__rbit64(v24)) + (v10 << 6);
    goto LABEL_33;
  }

  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
}

    uint64_t v11 = (v24 - 1) & v24;
    uint64_t v18 = __clz(__rbit64(v24)) + (v10 << 6);
    goto LABEL_33;
  }

  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
}

    swift_release();
    __break(1u);
    return;
  }

  uint64_t v184 = v17;
  uint64_t v206 = dispatch_group_create();
  uint64_t v38 = *(void *)(v195 + 16);
  if (v38)
  {
    uint64_t v201 = (unsigned __int8 *)(v216 + *(int *)(v20 + 36));
    uint64_t v200 = v216 + *(int *)(v20 + 20);
    uint64_t v39 = v195 + ((*(unsigned __int8 *)(v21 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    uint64_t v198 = *(void *)(v21 + 72);
    swift_bridgeObjectRetain(v195);
    uint64_t v226 = 0LL;
    uint64_t v199 = xmmword_1007E4480;
    uint64_t v197 = xmmword_1007E4750;
    uint64_t v40 = v224;
    v196 = v13;
    while (1)
    {
      uint64_t v221 = v39;
      uint64_t v222 = v38;
      uint64_t v41 = v216;
      sub_10001DC4C(v39, v216, type metadata accessor for ShareRecord);
      uint64_t v220 = *v201;
      uint64_t v42 = (void (*)(uint64_t))*((void *)v201 + 2);
      uint64_t v219 = (char *)*((void *)v201 + 1);
      uint64_t v43 = v209;
      sub_10001DC4C(v36, v209, type metadata accessor for OwnedBeaconRecord);
      uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v227 + 16);
      int v45 = v210;
      uint64_t v46 = v211;
      v44(v210, v200, v211);
      double v225 = v42;
      swift_bridgeObjectRetain(v42);
      uint64_t v47 = v215;
      swift_bridgeObjectRetain(v215);
      sub_100018C68(v41, type metadata accessor for ShareRecord);
      uint64_t v48 = (int *)v207;
      *((_BYTE *)v13 + *(int *)(v207 + 56)) = 3;
      uint64_t v49 = (uint64_t)v13 + v48[20];
      double v223 = v48[15];
      double v224 = (int *)v49;
      uint64_t v50 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
      uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56LL);
      char v52 = v49;
      uint64_t v53 = v50;
      v51(v52, 1LL, 1LL);
      *uint64_t v13 = v199;
      v44((char *)v13 + v48[5], v43 + v40[5], v46);
      v44((char *)v13 + v48[6], (uint64_t)v45, v46);
      uint64_t v54 = (char *)v13 + v48[7];
      *uint64_t v54 = v203;
      *((void *)v54 + 1) = v202;
      *((void *)v54 + 2) = v47;
      unint64_t v55 = (void *)((char *)v13 + v48[8]);
      *unint64_t v55 = 0LL;
      v55[1] = 0xE000000000000000LL;
      uint64_t v56 = (uint64_t *)(v43 + v40[14]);
      double v58 = *v56;
      unsigned int v57 = v56[1];
      uint64_t v59 = (void *)((char *)v13 + v48[9]);
      *uint64_t v59 = v58;
      v59[1] = v57;
      uint64_t v60 = (uint64_t *)(v43 + v40[15]);
      uint64_t v61 = *v60;
      uint64_t v62 = v60[1];
      unint64_t v63 = (void *)((char *)v13 + v48[10]);
      *unint64_t v63 = v61;
      v63[1] = v62;
      *(void *)((char *)v13 + v48[11]) = *(void *)(v43 + v40[16]);
      *(void *)((char *)v13 + v48[12]) = *(void *)(v43 + v40[17]);
      *(void *)((char *)v13 + v223) = -1LL;
      *((_BYTE *)v13 + v48[13]) = 0;
      *((_BYTE *)v13 + v48[16]) = 1;
      *(void *)((char *)v13 + v48[17]) = 0LL;
      swift_bridgeObjectRetain(v57);
      swift_bridgeObjectRetain(v62);
      uint64_t v64 = v212;
      static Date.distantPast.getter(v65);
      (*(void (**)(char *, uint64_t))(v227 + 8))(v45, v46);
      (*(void (**)(char *, char *, uint64_t))(v213 + 32))((char *)v13 + v48[18], v64, v214);
      sub_10001581C(v43 + v40[7], (uint64_t)v13 + v48[19], &qword_10099D8A0);
      sub_100018C68(v43, type metadata accessor for OwnedBeaconRecord);
      uint64_t v66 = (uint64_t)v224;
      sub_100015794((uint64_t)v224, &qword_1009AE600);
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v51)(v66, 1LL, 1LL, v53);
      uint64_t v67 = v208;
      sub_10001DC4C((uint64_t)v13, v208, type metadata accessor for SharedBeaconRecord);
      char v68 = v226;
      uint64_t v69 = sub_1001F31E4( 4,  1LL,  v67,  &qword_1009B1300,  type metadata accessor for SharedBeaconRecord,  &qword_1009A6098,  (uint64_t (*)(void))sub_10020CEE8,  (uint64_t)&aBlock);
      if (v68) {
        break;
      }
      uint64_t v226 = 0LL;
      uint64_t v70 = aBlock;
      uint64_t v218 = (char *)v232;
      double v223 = (unint64_t)v234;
      double v224 = (int *)v233;
      uint64_t v71 = static os_log_type_t.default.getter(v69);
      if (qword_10099B700 != -1) {
        swift_once(&qword_10099B700, sub_100651100);
      }
      uint64_t v72 = qword_100A2B010;
      uint64_t v73 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v74 = swift_allocObject(v73, 112LL, 7LL);
      *(_OWORD *)(v74 + swift_weakDestroy(v0 + 16) = v197;
      uint64_t v75 = UUID.uuidString.getter(v74);
      uint64_t v77 = v76;
      *(void *)(v74 + 56) = &type metadata for String;
      uint64_t v78 = sub_1000226F4();
      *(void *)(v74 + 32) = v75;
      *(void *)(v74 + 40) = v77;
      *(void *)(v74 + 96) = &type metadata for String;
      *(void *)(v74 + 104) = v78;
      uint64_t v79 = v219;
      *(void *)(v74 + 64) = v78;
      *(void *)(v74 + 72) = v79;
      uint64_t v80 = v225;
      *(void *)(v74 + 80) = v225;
      *(void *)&uint64_t v81 = swift_bridgeObjectRetain(v80).n128_u64[0];
      os_log(_:dso:log:_:_:)( v71,  &_mh_execute_header,  v72,  "Sending updateSharedBeacon for beacon: %@ to destination: %@",  60LL,  2LL,  v74,  v81);
      swift_bridgeObjectRelease();
      uint64_t v82 = v206;
      dispatch_group_enter(v206);
      int v83 = v82;
      char v84 = v217;
      swift_retain();
      uint64_t v85 = (os_log_s *)sub_1004131A4((uint64_t)_swiftEmptyArrayStorage);
      int v86 = (void *)sub_1006F13B0((uint64_t)&off_100933DD8);
      uint64_t v182 = (void (*)(uint64_t, uint64_t))sub_1006F13B0((uint64_t)_swiftEmptyArrayStorage);
      char v87 = v70;
      uint64_t v88 = v223;
      uint64_t v89 = (uint64_t)v224;
      sub_1002076D4( v87,  v218,  (uint64_t)v224,  v223,  v85,  v220,  v79,  (void (*)(void, void, void))v80,  0,  0LL,  1,  0,  v86,  v182,  0LL,  0LL,  v205,  v83,  v84);
      swift_release();

      swift_bridgeObjectRelease();
      uint64_t v36 = v228;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100016F9C(v89, v88);
      swift_bridgeObjectRelease();
      uint64_t v13 = v196;
      sub_100018C68((uint64_t)v196, type metadata accessor for SharedBeaconRecord);
      uint64_t v39 = v221 + v198;
      uint64_t v38 = v222 - 1;
      uint64_t v90 = v204;
      if (v222 == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_100018C68((uint64_t)v13, type metadata accessor for SharedBeaconRecord);
    swift_release();
    uint64_t v129 = swift_bridgeObjectRelease();
    uint64_t v130 = static os_log_type_t.error.getter(v129);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v131 = qword_100A2B010;
    uint64_t v132 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v133 = swift_allocObject(v132, 72LL, 7LL);
    *(_OWORD *)(v133 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    double aBlock = v68;
    swift_errorRetain(v68);
    uint64_t v134 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v135 = String.init<A>(describing:)(&aBlock, v134);
    uint64_t v137 = v136;
    *(void *)(v133 + 56) = &type metadata for String;
    *(void *)(v133 + 64) = sub_1000226F4();
    *(void *)(v133 + 32) = v135;
    *(void *)(v133 + 40) = v137;
    os_log(_:dso:log:_:_:)(v130, &_mh_execute_header, v131, "Failed in updateSharedBeacon: %@", 32LL, 2LL, v133);
    swift_bridgeObjectRelease();
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v138 = v192;
    uint64_t v139 = v189;
    uint64_t v140 = v193;
    (*(void (**)(char *, void, uint64_t))(v192 + 104))( v189,  enum case for DispatchQoS.QoSClass.default(_:),  v193);
    uint64_t v141 = (void *)static OS_dispatch_queue.global(qos:)(v139);
    (*(void (**)(char *, uint64_t))(v138 + 8))(v139, v140);
    int v142 = (void *)swift_allocObject(&unk_100949198, 40LL, 7LL);
    uint64_t v143 = v190;
    _OWORD v142[2] = sub_10020CE64;
    v142[3] = v143;
    v142[4] = v68;
    double v235 = sub_1001FA824;
    double v236 = v142;
    double aBlock = _NSConcreteStackBlock;
    double v232 = 1107296256LL;
    double v233 = sub_1001C31E8;
    uint64_t v234 = &unk_1009491B0;
    uint64_t v144 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v145 = swift_errorRetain(v68);
    uint64_t v146 = v187;
    static DispatchQoS.unspecified.getter(v145);
    uint64_t v230 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v147 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v148 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v149 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v150 = v188;
    uint64_t v151 = v148;
    uint64_t v152 = v185;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v230, v151, v149, v185, v147);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v146, v150, v144);
    _Block_release(v144);

    swift_errorRelease(v68);
    (*(void (**)(char *, uint64_t))(v204 + 8))(v150, v152);
    (*(void (**)(char *, uint64_t))(v194 + 8))(v146, v184);
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v90 = v204;
LABEL_25:
    OS_dispatch_group.wait()();
    uint64_t v153 = v186;
    swift_beginAccess(v186, &v230, 0LL, 0LL);
    uint64_t v154 = *v153;
    uint64_t v155 = v190;
    uint64_t v156 = v193;
    uint64_t v157 = v192;
    double v158 = v189;
    if (v154)
    {
      sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
      LODWORD(v228) = enum case for DispatchQoS.QoSClass.default(_:);
      (*(void (**)(char *))(v157 + 104))(v158);
      swift_errorRetain(v154);
      double v227 = static OS_dispatch_queue.global(qos:)(v158);
      (*(void (**)(char *, uint64_t))(v157 + 8))(v158, v156);
      double v159 = (void *)swift_allocObject(&unk_100949238, 40LL, 7LL);
      v159[2] = sub_10020CE64;
      v159[3] = v155;
      v159[4] = v154;
      double v235 = sub_1001FA824;
      double v236 = v159;
      double aBlock = _NSConcreteStackBlock;
      double v232 = 1107296256LL;
      double v233 = sub_1001C31E8;
      uint64_t v234 = &unk_100949250;
      double v160 = _Block_copy(&aBlock);
      swift_errorRetain(v154);
      uint64_t v161 = swift_retain();
      double v162 = v187;
      static DispatchQoS.unspecified.getter(v161);
      double v229 = _swiftEmptyArrayStorage;
      double v163 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      double v164 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v165 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      v166 = v188;
      v167 = v164;
      char v168 = v185;
      uint64_t v169 = v163;
      uint64_t v157 = v192;
      uint64_t v155 = v190;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v229, v167, v165, v185, v169);
      uint64_t v170 = (void *)v227;
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v162, v166, v160);
      uint64_t v171 = v160;
      uint64_t v156 = v193;
      _Block_release(v171);

      char v172 = v154;
      uint64_t v173 = v228;
      swift_errorRelease(v172);
      (*(void (**)(char *, uint64_t))(v90 + 8))(v166, v168);
      (*(void (**)(char *, uint64_t))(v194 + 8))(v162, v184);
      swift_release();
    }

    else
    {
      uint64_t v173 = enum case for DispatchQoS.QoSClass.default(_:);
      char v168 = v185;
      v166 = v188;
      double v162 = v187;
    }

    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    (*(void (**)(char *, uint64_t, uint64_t))(v157 + 104))(v158, v173, v156);
    *(void *)&double v228 = static OS_dispatch_queue.global(qos:)(v158);
    (*(void (**)(char *, uint64_t))(v157 + 8))(v158, v156);
    uint64_t v174 = swift_allocObject(&unk_1009491E8, 32LL, 7LL);
    *(void *)(v174 + swift_weakDestroy(v0 + 16) = sub_10020CE64;
    *(void *)(v174 + 24) = v155;
    double v235 = sub_10020CE78;
    double v236 = (void *)v174;
    double aBlock = _NSConcreteStackBlock;
    double v232 = 1107296256LL;
    double v233 = sub_1001C31E8;
    uint64_t v234 = &unk_100949200;
    uint64_t v175 = _Block_copy(&aBlock);
    uint64_t v176 = swift_retain();
    static DispatchQoS.unspecified.getter(v176);
    double v229 = _swiftEmptyArrayStorage;
    uint64_t v177 = v162;
    v178 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v179 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v180 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v229, v179, v180, v168, v178);
    uint64_t v181 = (void *)v228;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v177, v166, v175);
    _Block_release(v175);

    (*(void (**)(char *, uint64_t))(v90 + 8))(v166, v168);
    (*(void (**)(char *, uint64_t))(v194 + 8))(v177, v184);
    swift_release();
  }

  swift_release();
  swift_release();
}

          sub_1000A6F30(v1);
          return;
        }
      }
    }
  }

          sub_1000A6F30(v1);
          return;
        }
      }
    }
  }

          sub_1000A6F30(v1);
          return;
        }
      }
    }
  }

          sub_1000A6F30(a1);
          return;
        }
      }
    }
  }

          uint64_t v99 = *(void *)(v0 + 1192);
          double v100 = *(void *)(v0 + 1152);
          double v101 = *(void *)(v0 + 1144);
          double v102 = *(void *)(v0 + 1112);
          uint64_t v103 = *(void *)(v0 + 1040);
          sub_100018C68(*(void *)(v0 + 1032), type metadata accessor for BeaconEstimatedLocation);
          sub_100018C68(v103, type metadata accessor for BeaconEstimatedLocation);
          sub_100018C68(v102, type metadata accessor for BeaconEstimatedLocation);
          uint64_t v70 = *(uint64_t (**)(uint64_t, uint64_t))(v100 + 8);
          v70(v99, v101);
          goto LABEL_33;
        }

    __break(1u);
    return result;
  }

  sub_100015794(v69, (uint64_t *)&unk_10099D720);
  uint64_t v73 = sub_100012ED8(v216, v216[3]);
  uint64_t v74 = sub_1006A0F38(*v73);
  uint64_t v75 = v213;
  uint64_t v76 = v214;
  uint64_t v77 = v215;
  uint64_t result = (*(uint64_t (**)(char *, void, uint64_t))(v214 + 104))( v213,  enum case for Calendar.Component.day(_:),  v215);
  if (__OFSUB__(0LL, v74))
  {
    __break(1u);
    goto LABEL_32;
  }

  uint64_t v79 = (uint64_t)v194;
  uint64_t v80 = v199;
  Calendar.date(byAdding:value:to:wrappingComponents:)(v75, -v74, v199, 0LL);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v75, v77);
  uint64_t v81 = *(void (**)(char *, uint64_t, uint64_t))(v70 + 16);
  uint64_t v82 = v198;
  v81(v198, v80, v72);
  if (v71(v79, 1LL, v72) == 1)
  {
    int v83 = *(void (**)(char *, char *, uint64_t))(v70 + 32);
    char v84 = v200;
    v83(v200, v82, v72);
    sub_100015794(v79, (uint64_t *)&unk_10099D720);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v70 + 8))(v82, v72);
    int v83 = *(void (**)(char *, char *, uint64_t))(v70 + 32);
    char v84 = v200;
    v83(v200, (char *)v79, v72);
  }

  uint64_t v95 = v208;
  uint64_t v96 = v196;
  sub_10000A824(v205, v196);
  uint64_t v97 = v71(v96, 1LL, v72);
  uint64_t v98 = v224;
  v212 = (uint64_t (*)(uint64_t, char *, uint64_t))v83;
  if (v97 == 1)
  {
    sub_100015794(v96, (uint64_t *)&unk_10099D720);
LABEL_21:
    uint64_t v132 = ((uint64_t (*)(char *, char *, uint64_t))v81)(v95, v84, v72);
    uint64_t v133 = static os_log_type_t.default.getter(v132);
    uint64_t v134 = qword_100A2B080;
    uint64_t v135 = swift_allocObject(v229, 112LL, 7LL);
    *(_OWORD *)(v135 + swift_weakDestroy(v0 + 16) = v228;
    uint64_t v136 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v137 = dispatch thunk of CustomStringConvertible.description.getter(v72, v136);
    uint64_t v138 = v223;
    *(void *)(v135 + 56) = &type metadata for String;
    *(void *)(v135 + 64) = v138;
    *(void *)(v135 + 32) = v137;
    *(void *)(v135 + 40) = v139;
    uint64_t v140 = v220(v222, v221);
    uint64_t v141 = UUID.uuidString.getter(v140);
    int v142 = v98;
    uint64_t v144 = v143;
    v226(v142, v225);
    *(void *)(v135 + 96) = &type metadata for String;
    *(void *)(v135 + 104) = v138;
    *(void *)(v135 + 72) = v141;
    *(void *)(v135 + 80) = v144;
    os_log(_:dso:log:_:_:)( v133,  &_mh_execute_header,  v134,  "Fetch limit set to longest look back %@ for beacon %@ ",  54LL,  2LL,  v135);
    swift_bridgeObjectRelease();
    uint64_t v117 = *(void (**)(char *, uint64_t))(v217 + 8);
    goto LABEL_22;
  }

  double v102 = v192;
  v83(v192, (char *)v96, v72);
  if ((static Date.> infix(_:_:)(v102, v84) & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v70 + 8))(v102, v72);
    goto LABEL_21;
  }

  uint64_t v103 = ((uint64_t (*)(char *, char *, uint64_t))v81)(v95, v102, v72);
  uint64_t v104 = static os_log_type_t.default.getter(v103);
  uint64_t v215 = qword_100A2B080;
  uint64_t v105 = swift_allocObject(v229, 112LL, 7LL);
  *(_OWORD *)(v105 + swift_weakDestroy(v0 + 16) = v228;
  uint64_t v106 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v107 = dispatch thunk of CustomStringConvertible.description.getter(v72, v106);
  uint64_t v108 = v84;
  uint64_t v109 = v70;
  uint64_t v110 = v223;
  *(void *)(v105 + 56) = &type metadata for String;
  *(void *)(v105 + 64) = v110;
  *(void *)(v105 + 32) = v107;
  *(void *)(v105 + 40) = v111;
  uint64_t v112 = v220(v222, v221);
  uint64_t v113 = UUID.uuidString.getter(v112);
  char v114 = v98;
  int v116 = v115;
  v226(v114, v225);
  *(void *)(v105 + 96) = &type metadata for String;
  *(void *)(v105 + 104) = v110;
  *(void *)(v105 + 72) = v113;
  *(void *)(v105 + 80) = v116;
  os_log(_:dso:log:_:_:)( v104,  &_mh_execute_header,  v215,  "Fetch limit set to most recent key date %@ for beacon %@ ",  57LL,  2LL,  v105);
  swift_bridgeObjectRelease();
  uint64_t v117 = *(void (**)(char *, uint64_t))(v109 + 8);
  v117(v192, v72);
  uint64_t v118 = v108;
LABEL_25:
  double v159 = ((uint64_t (*)(char *, uint64_t))v117)(v118, v72);
  if (v219)
  {
    double v160 = v202;
    uint64_t v161 = [v160 timestamp];
    double v162 = v203;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v161);

    LOBYTE(v161) = static Date.> infix(_:_:)(v162, v95);
    v117(v162, v72);
    if ((v161 & 1) != 0)
    {
      double v163 = sub_100012ED8(v216, v216[3]);
      if ((sub_1006A1544(*v163) & 1) != 0)
      {
        double v164 = [v160 timestamp];
        uint64_t v165 = v203;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v164);

        v117(v95, v72);
        v166 = v212((uint64_t)v95, v165, v72);
        v167 = static os_log_type_t.default.getter(v166);
        uint64_t v219 = (id)qword_100A2B080;
        char v168 = swift_allocObject(v229, 112LL, 7LL);
        *(_OWORD *)(v168 + swift_weakDestroy(v0 + 16) = v228;
        uint64_t v169 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
        uint64_t v170 = dispatch thunk of CustomStringConvertible.description.getter(v72, v169);
        char v172 = v223;
        uint64_t v171 = v224;
        *(void *)(v168 + 56) = &type metadata for String;
        *(void *)(v168 + 64) = v172;
        *(void *)(v168 + 32) = v170;
        *(void *)(v168 + 40) = v173;
        uint64_t v174 = v220(v222, v221);
        uint64_t v175 = UUID.uuidString.getter(v174);
        uint64_t v177 = v176;
        v226(v171, v225);
        *(void *)(v168 + 96) = &type metadata for String;
        *(void *)(v168 + 104) = v172;
        *(void *)(v168 + 72) = v175;
        *(void *)(v168 + 80) = v177;
        os_log(_:dso:log:_:_:)( v167,  &_mh_execute_header,  v219,  "Fetch limit updated to last online location date %@ for beacon %@ ",  66LL,  2LL,  v168);
        swift_bridgeObjectRelease();
        type metadata accessor for Transaction(0LL);
        static Transaction.asyncTask(name:block:)("FetchOptimisationAnalytics", 26LL, 2LL, &unk_1009AC580, 0LL);
      }
    }
  }

  v178 = static os_log_type_t.default.getter(v159);
  uint64_t v179 = qword_100A2B080;
  uint64_t v180 = swift_allocObject(v229, 112LL, 7LL);
  *(_OWORD *)(v180 + swift_weakDestroy(v0 + 16) = v228;
  uint64_t v181 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v182 = dispatch thunk of CustomStringConvertible.description.getter(v72, v181);
  uint64_t v184 = v223;
  uint64_t v183 = v224;
  *(void *)(v180 + 56) = &type metadata for String;
  *(void *)(v180 + 64) = v184;
  *(void *)(v180 + 32) = v182;
  *(void *)(v180 + 40) = v185;
  int v186 = v220(v222, v221);
  uint64_t v187 = UUID.uuidString.getter(v186);
  uint64_t v189 = v188;
  v226(v183, v225);
  *(void *)(v180 + 96) = &type metadata for String;
  *(void *)(v180 + 104) = v184;
  *(void *)(v180 + 72) = v187;
  *(void *)(v180 + 80) = v189;
  os_log(_:dso:log:_:_:)( v178,  &_mh_execute_header,  v179,  "Adjusted location fetch start date %@ for beacon %@ ",  52LL,  2LL,  v180);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v206 + 8))(v218, v207);
}

    swift_once(&qword_10099B708, sub_100651168);
    goto LABEL_3;
  }

  uint64_t v32 = sub_10057667C();
  uint64_t v33 = _swiftEmptyArrayStorage;
  uint64_t v76 = _swiftEmptyArrayStorage;
  uint64_t v66 = v32[2];
  unint64_t v63 = v1;
  if (v66)
  {
    uint64_t v34 = 0LL;
    uint64_t v30 = _swiftEmptyArrayStorage;
    uint64_t v35 = type metadata accessor for SharedBeaconRecord;
    uint64_t v36 = &qword_10099D8A0;
    uint64_t v64 = v10;
    while (v34 < v32[2])
    {
      uint64_t v38 = (*((unsigned __int8 *)v70 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v70 + 80);
      uint64_t v39 = v70[9];
      sub_10001DC4C((uint64_t)v32 + v38 + v39 * v34, (uint64_t)v16, v35);
      sub_10001581C((uint64_t)&v16[*(int *)(v74 + 76)], (uint64_t)v10, v36);
      uint64_t v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v72 + 48))(v10, 1LL, v73);
      sub_100015794((uint64_t)v10, v36);
      if (v40 == 1)
      {
        sub_100018C68((uint64_t)v16, v35);
      }

      else
      {
        uint64_t v41 = v35;
        uint64_t v42 = v36;
        uint64_t v43 = v41;
        sub_10002218C((uint64_t)v16, v67, v41);
        if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0) {
          sub_100032BC4(0, v30[2] + 1LL, 1);
        }
        uint64_t v30 = v76;
        int v45 = v76[2];
        uint64_t v44 = v76[3];
        if (v45 >= v44 >> 1)
        {
          sub_100032BC4(v44 > 1, v45 + 1, 1);
          uint64_t v30 = v76;
        }

        void v30[2] = v45 + 1;
        sub_10002218C(v67, (uint64_t)v30 + v38 + v45 * v39, v43);
        uint64_t v36 = v42;
        uint64_t v35 = v43;
        uint64_t v10 = v64;
      }

      ++v34;
      uint64_t v37 = (uint64_t)v71;
      if (v66 == v34)
      {
        uint64_t v33 = v76;
        uint64_t v1 = v63;
        goto LABEL_17;
      }
    }

    __break(1u);
    goto LABEL_32;
  }

  uint64_t v37 = (uint64_t)v71;
LABEL_17:
  swift_bridgeObjectRelease();
  uint64_t v46 = v33[2];
  uint64_t v48 = v72;
  uint64_t v47 = v73;
  if (v46)
  {
    uint64_t v49 = (uint64_t)v33 + ((*((unsigned __int8 *)v70 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v70 + 80));
    uint64_t v50 = v70[9];
    uint64_t v70 = v33;
    swift_retain();
    uint64_t v51 = _swiftEmptyArrayStorage;
    char v52 = (uint64_t)v68;
    do
    {
      sub_10001DC4C(v49, v52, type metadata accessor for SharedBeaconRecord);
      sub_10001581C(v52 + *(int *)(v74 + 76), v37, &qword_10099D8A0);
      sub_100018C68(v52, type metadata accessor for SharedBeaconRecord);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v37, 1LL, v47) == 1)
      {
        sub_100015794(v37, &qword_10099D8A0);
      }

      else
      {
        uint64_t v53 = v37;
        uint64_t v54 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 32);
        unint64_t v55 = v65;
        v54(v65, v53, v47);
        v54(v69, (uint64_t)v55, v47);
        if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) == 0) {
          uint64_t v51 = (void *)sub_1004C44BC(0, v51[2] + 1LL, 1, (unint64_t)v51);
        }
        unsigned int v57 = v51[2];
        uint64_t v56 = v51[3];
        if (v57 >= v56 >> 1) {
          uint64_t v51 = (void *)sub_1004C44BC(v56 > 1, v57 + 1, 1, (unint64_t)v51);
        }
        v51[2] = v57 + 1;
        uint64_t v48 = v72;
        double v58 = (unint64_t)v51
        uint64_t v47 = v73;
        v54((char *)v58, (uint64_t)v69, v73);
        uint64_t v37 = (uint64_t)v71;
      }

      v49 += v50;
      --v46;
    }

    while (v46);
    swift_release_n(v70, 2LL);
    uint64_t v1 = v63;
  }

  else
  {
    swift_release();
    uint64_t v51 = _swiftEmptyArrayStorage;
  }

  uint64_t v59 = sub_1006F1060((uint64_t)v51);
  swift_bridgeObjectRelease();
  swift_retain();
  sub_10054F3A0( v59,  v1,  &qword_1009A7F48,  type metadata accessor for SharedBeaconGroup,  (void (*)(char *))sub_10050F7D0,  (uint64_t (*)(void, uint64_t, uint64_t))sub_1004C55AC);
  uint64_t v31 = v60;
  swift_bridgeObjectRelease();
  swift_release();
  return v31;
}

  int v45 = swift_allocObject(&unk_100962A38, 33LL, 7LL);
  *(void *)(v45 + swift_weakDestroy(v0 + 16) = a4;
  *(void *)(v45 + 24) = a5;
  *(_BYTE *)(v45 + 32) = v23 != v18;
  uint64_t v64 = sub_1000DEC6C;
  uint64_t v65 = v45;
  double aBlock = _NSConcreteStackBlock;
  uint64_t v61 = 1107296256LL;
  uint64_t v62 = sub_1001C31E8;
  unint64_t v63 = &unk_100962A50;
  uint64_t v46 = _Block_copy(&aBlock);
  uint64_t v47 = swift_retain();
  uint64_t v48 = v56;
  static DispatchQoS.unspecified.getter(v47);
  uint64_t v59 = _swiftEmptyArrayStorage;
  uint64_t v49 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v50 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v51 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v59, v50, v51, v10, v49);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v48, v13, v46);
  _Block_release(v46);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v48, v58);
  return swift_release();
}

            __break(1u);
            JUMPOUT(0x10062AB64LL);
          }

          goto LABEL_24;
        }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MessagingStats.MessageKey);
  __break(1u);
  return result;
}

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MessagingStats.MessageKey);
  __break(1u);
  return result;
}

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MessagingStats.MessageKey);
  __break(1u);
  return result;
}

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MessagingStats.MessageKey);
  __break(1u);
  return result;
}

      uint64_t v1 = v1 | 8;
      if ((a1 & 0x10) != 0)
      {
LABEL_33:
        uint64_t v1 = v1 | 0x10;
        if ((a1 & 0x20) != 0)
        {
LABEL_34:
          uint64_t v1 = v1 | 0x20;
          if ((a1 & 0x40) != 0)
          {
LABEL_35:
            uint64_t v1 = v1 | 0x40;
            if ((a1 & 0x80) != 0)
            {
LABEL_36:
              uint64_t v1 = v1 | 0x80;
              if ((a1 & 0x100) != 0)
              {
LABEL_37:
                uint64_t v1 = v1 | 0x100;
                if ((a1 & 0x400) != 0) {
                  goto LABEL_38;
                }
LABEL_29:
                if ((a1 & 0x800) != 0) {
                  goto LABEL_39;
                }
                goto LABEL_30;
              }

    uint64_t v9 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v7 << 6);
    goto LABEL_33;
  }

  __break(1u);
}

uint64_t sub_100033714(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_10099D398);
    uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    v11[2] = v8;
    void v11[3] = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v14 = (unint64_t)(v11 + 4);
  unint64_t v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8) {
      memmove(v11 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_30;
  }

  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_100004AEC(&qword_10099D3A0);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }

uint64_t sub_10003389C(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_10099D3C8);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    memcpy(v14, v15, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }

uint64_t sub_1000339F8(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100036FFC( a1,  a2,  a3,  a4,  (uint64_t *)&unk_1009A9C20,  (uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100033A0C(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_10099D388);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }

uint64_t sub_100033B74(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100036FFC(a1, a2, a3, a4, (uint64_t *)&unk_1009B1090, type metadata accessor for OwnedBeaconRecord);
}

uint64_t sub_100033B88(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100036FFC(a1, a2, a3, a4, &qword_10099D300, type metadata accessor for DefaultConfigurationLayer);
}

uint64_t sub_100033B9C(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000350E4(a1, a2, a3, a4, (uint64_t *)&unk_1009B1080, &qword_1009B0530);
}

uint64_t sub_100033BB4(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_10099D4A8);
    uint64_t v11 = (char *)swift_allocObject(v10, (v9 << 6) | 0x20, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 + 31;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 6);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  size_t v16 = v8 << 6;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16]) {
      memmove(v14, v15, v16);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }

uint64_t sub_100033D18(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_10099D3D0);
    uint64_t v11 = (void *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    v11[2] = v8;
    void v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v13 = (unint64_t)(v11 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 24 * v8) {
      memmove(v11 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_28;
  }

  if (v14 >= v13 + 24 * v8 || v13 >= v14 + 24 * v8)
  {
    sub_100004AEC(&qword_10099D3D8);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    uint64_t v8 = (v17 - 1) & v17;
    int64_t v7 = __clz(__rbit64(v17)) + (v6 << 6);
  }

  uint64_t v10 = *(void *)(result + 56);
  uint64_t result = *(void *)(v10 + 8 * v7);
  while (v8)
  {
    uint64_t v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    size_t v12 = v11 | (v6 << 6);
LABEL_7:
    unint64_t v13 = *(void *)(v10 + 8 * v12);
    if (result <= v13) {
      uint64_t result = v13;
    }
  }

  unint64_t v14 = v6 + 1;
  if (__OFADD__(v6, 1LL))
  {
    __break(1u);
    goto LABEL_37;
  }

  if (v14 >= v9) {
    return result;
  }
  unint64_t v15 = *(void *)(v1 + 8 * v14);
  ++v6;
  if (v15) {
    goto LABEL_25;
  }
  unint64_t v6 = v14 + 1;
  if (v14 + 1 >= v9) {
    return result;
  }
  unint64_t v15 = *(void *)(v1 + 8 * v6);
  if (v15) {
    goto LABEL_25;
  }
  unint64_t v6 = v14 + 2;
  if (v14 + 2 >= v9) {
    return result;
  }
  unint64_t v15 = *(void *)(v1 + 8 * v6);
  if (v15) {
    goto LABEL_25;
  }
  unint64_t v6 = v14 + 3;
  if (v14 + 3 >= v9) {
    return result;
  }
  unint64_t v15 = *(void *)(v1 + 8 * v6);
  if (v15)
  {
LABEL_25:
    uint64_t v8 = (v15 - 1) & v15;
    size_t v12 = __clz(__rbit64(v15)) + (v6 << 6);
    goto LABEL_7;
  }

  size_t v16 = v14 + 4;
  if (v16 >= v9) {
    return result;
  }
  unint64_t v15 = *(void *)(v1 + 8 * v16);
  if (v15)
  {
    unint64_t v6 = v16;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v6 >= v9) {
      return result;
    }
    unint64_t v15 = *(void *)(v1 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_25;
    }
  }

  __break(1u);
LABEL_43:
  uint64_t v18 = 0LL;
  uint64_t v19 = 6LL;
  if (v9 > 6) {
    uint64_t v19 = v9;
  }
  int v20 = v19 - 6;
  while (v20 != v18)
  {
    uint64_t v17 = *(void *)(result + 112 + 8 * v18++);
    if (v17)
    {
      unint64_t v6 = v18 + 5;
      goto LABEL_30;
    }
  }

  return 0LL;
}

        __break(1u);
        JUMPOUT(0x1001FFD14LL);
      }

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v98);
    goto LABEL_31;
  }

  if ((sub_1005DAD9C() & 1) != 0)
  {
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    sub_10000A720(v19, (uint64_t)qword_100A2AAA0);
    int v20 = sub_100013044((uint64_t)v100, (uint64_t)v98);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    uint64_t v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc(22LL, -1LL);
      uint64_t v24 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v23 = 141558275;
      uint64_t v96 = 1752392040LL;
      uint64_t v97 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v23 + 4, v23 + 12);
      *(_WORD *)(v23 + 12) = 2081;
      uint64_t v25 = v14;
      uint64_t v92 = (char *)(v23 + 14);
      int v26 = (char *)sub_100012ED8(v98, v99);
      uint64_t v27 = v94;
      uint64_t v28 = v93;
      (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v93, &v26[v95[5]], v14);
      uint64_t v29 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter(v14, v29);
      uint64_t v32 = v31;
      (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v25);
      uint64_t v96 = sub_1003F11D4(v30, v32, &v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v92, v23 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v98);
      uint64_t v33 = "Can't monitor beacon: %{private,mask.hash}s due to: this device.";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v21, v22, v33, (uint8_t *)v23, 0x16u);
      swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
LABEL_31:

LABEL_32:
      uint64_t v60 = 0LL;
      goto LABEL_33;
    }

    goto LABEL_30;
  }

  uint64_t v90 = v14;
  uint64_t v91 = v10;
  uint64_t v44 = swift_retain();
  CurrentValueSubject.value.getter(v98, v44);
  swift_release();
  uint64_t v89 = v98[0];
  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  int v45 = (void *)qword_100A2AF38;
  uint64_t v46 = (void *)objc_opt_self(&OBJC_CLASS___FMSystemInfo);
  uint64_t v47 = [v46 sharedInstance];
  uint64_t v48 = [v47 isInternalBuild];

  if ((v48 & 1) != 0
    && (uint64_t v49 = String._bridgeToObjectiveC()(),
        uint64_t v50 = [v45 BOOLForKey:v49],
        v49,
        v50))
  {
    uint64_t v51 = [v46 sharedInstance];
    char v52 = [v51 isInternalBuild];
  }

  else
  {
    char v52 = 0;
  }

  uint64_t v53 = v90;
  uint64_t v54 = (uint64_t)v91;
  unint64_t v55 = v95;
  if (sub_1005E269C(*(void *)((char *)v18 + v95[16]), *(void *)((char *)v18 + v95[17])))
  {
    if (v89 > 1) {
      uint64_t v56 = 1;
    }
    else {
      uint64_t v56 = v52;
    }
    if ((v56 & 1) != 0)
    {
      sub_10001581C((uint64_t)v18 + v55[7], (uint64_t)v13, &qword_10099D8A0);
      unsigned int v57 = v94;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v13, 1LL, v53) == 1)
      {
        double v58 = &qword_10099D8A0;
        uint64_t v59 = (uint64_t)v13;
      }

      else
      {
        uint64_t v73 = (uint64_t)v92;
        (*(void (**)(void))(v57 + 32))();
        sub_10050F124(v73, (uint64_t)v6);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) != 1)
        {
          sub_10002218C((uint64_t)v6, v54, type metadata accessor for OwnedBeaconGroup);
          if ((sub_1001CB708() & 1) != 0)
          {
            sub_100018C68(v54, type metadata accessor for OwnedBeaconGroup);
            (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v73, v53);
            uint64_t v60 = 1LL;
            goto LABEL_33;
          }

          if (qword_10099B4C8 != -1) {
            swift_once(&qword_10099B4C8, sub_10047B404);
          }
          uint64_t v74 = type metadata accessor for Logger(0LL);
          sub_10000A720(v74, (uint64_t)qword_100A2AAA0);
          uint64_t v75 = sub_100013044((uint64_t)v100, (uint64_t)v98);
          uint64_t v76 = (os_log_s *)Logger.logObject.getter(v75);
          uint64_t v77 = static os_log_type_t.default.getter(v76);
          if (os_log_type_enabled(v76, v77))
          {
            uint64_t v78 = swift_slowAlloc(22LL, -1LL);
            uint64_t v79 = swift_slowAlloc(32LL, -1LL);
            *(_DWORD *)uint64_t v78 = 141558275;
            uint64_t v96 = 1752392040LL;
            uint64_t v97 = v79;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v78 + 4, v78 + 12);
            *(_WORD *)(v78 + 12) = 2081;
            uint64_t v80 = v53;
            uint64_t v90 = v78 + 14;
            uint64_t v81 = (char *)sub_100012ED8(v98, v99) + v55[5];
            uint64_t v82 = v93;
            int v83 = v94;
            (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v93, v81, v53);
            char v84 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            uint64_t v85 = dispatch thunk of CustomStringConvertible.description.getter(v53, v84);
            char v87 = v86;
            uint64_t v88 = *(void (**)(char *, uint64_t))(v83 + 8);
            v88(v82, v80);
            uint64_t v96 = sub_1003F11D4(v85, v87, &v97);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v90, v78 + 22);
            swift_bridgeObjectRelease();
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v98);
            _os_log_impl( (void *)&_mh_execute_header,  v76,  v77,  "Can't monitor beacon: %{private,mask.hash}s due to: group pairing incomplete.",  (uint8_t *)v78,  0x16u);
            swift_arrayDestroy(v79, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v79, -1LL, -1LL);
            swift_slowDealloc(v78, -1LL, -1LL);

            sub_100018C68((uint64_t)v91, type metadata accessor for OwnedBeaconGroup);
            v88(v92, v80);
          }

          else
          {

            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v98);
            sub_100018C68(v54, type metadata accessor for OwnedBeaconGroup);
            (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v73, v53);
          }

          goto LABEL_32;
        }

        (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v73, v53);
        double v58 = &qword_1009AA830;
        uint64_t v59 = (uint64_t)v6;
      }

      sub_100015794(v59, v58);
      uint64_t v60 = 1LL;
      goto LABEL_33;
    }

    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v61 = type metadata accessor for Logger(0LL);
    sub_10000A720(v61, (uint64_t)qword_100A2AAA0);
    uint64_t v62 = sub_100013044((uint64_t)v100, (uint64_t)v98);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v62);
    uint64_t v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      unint64_t v63 = v55;
      uint64_t v23 = swift_slowAlloc(22LL, -1LL);
      uint64_t v24 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v23 = 141558275;
      uint64_t v96 = 1752392040LL;
      uint64_t v97 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v23 + 4, v23 + 12);
      *(_WORD *)(v23 + 12) = 2081;
      uint64_t v64 = v53;
      uint64_t v92 = (char *)(v23 + 14);
      uint64_t v65 = (char *)sub_100012ED8(v98, v99) + v63[5];
      uint64_t v66 = v93;
      uint64_t v67 = v94;
      (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v93, v65, v53);
      char v68 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter(v53, v68);
      uint64_t v71 = v70;
      (*(void (**)(char *, uint64_t))(v67 + 8))(v66, v64);
      uint64_t v96 = sub_1003F11D4(v69, v71, &v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v92, v23 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v98);
      uint64_t v33 = "Can't monitor beacon: %{private,mask.hash}s due to: airpods beacon but less than 2 adv buffers.";
      goto LABEL_11;
    }

    goto LABEL_30;
  }

  uint64_t v60 = 1LL;
LABEL_33:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v100);
  return v60;
}

    uint64_t v72 = (char *)v38;
    if (a4[124] != -1) {
LABEL_37:
    }
      swift_once(&qword_10099B3E0, sub_1003DCC84);
    uint64_t v54 = type metadata accessor for Logger(0LL);
    sub_10000A720(v54, (uint64_t)qword_100A2A8D8);
    unint64_t v55 = v13[2]((char *)a3, v75, v10);
    uint64_t v38 = Logger.logObject.getter(v55);
    uint64_t v56 = static os_log_type_t.default.getter(v38);
    if (os_log_type_enabled((os_log_t)v38, v56))
    {
      unint64_t v13 = (uint64_t (**)(char *, uint64_t, uint64_t))swift_slowAlloc(52LL, -1LL);
      unsigned int v57 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)unint64_t v13 = 141559043;
      uint64_t v76 = 1752392040LL;
      uint64_t v77 = v57;
      a4 = &v77;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, (char *)v13 + 4, (char *)v13 + 12);
      *((_WORD *)v13 + 6) = 2081;
      double v58 = sub_1000F620C();
      uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter(v74, v58);
      uint64_t v76 = sub_1003F11D4(v59, v60, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, (char *)v13 + 14, (char *)v13 + 22);
      swift_bridgeObjectRelease();
      uint64_t v61 = v73[1];
      ((void (*)(unint64_t, uint64_t))v61)(a3, v74);
      *((_WORD *)v13 + 11) = 2048;
      uint64_t v76 = a5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v13 + 3, v13 + 4);
      *((_WORD *)v13 + swift_weakDestroy(v0 + 16) = 2048;
      uint64_t v76 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, (char *)v13 + 34, (char *)v13 + 42);
      *((_WORD *)v13 + 21) = 2048;
      uint64_t v10 = v74;
      uint64_t v76 = (uint64_t)v72;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, (char *)v13 + 44, (char *)v13 + 52);
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v38,  v56,  "        Buckets for beacon %{private,mask.hash}s,secondary index %llu - %llu (factor %lld).",  (uint8_t *)v13,  0x34u);
      swift_arrayDestroy(v57, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v62 = v57;
      unint64_t v15 = v71;
      swift_slowDealloc(v62, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    else
    {
      uint64_t v61 = v13[1];
      ((void (*)(unint64_t, uint64_t))v61)(a3, v10);
    }

    v66(v15, v67);
    ((void (*)(uint64_t, uint64_t))v61)(v75, v10);
    if (v9 >= a5) {
      break;
    }
    __break(1u);
LABEL_39:
    swift_once(&qword_10099B3E0, sub_1003DCC84);
  }

  (*(void (**)(char *, uint64_t *))(v69 + 8))(v68, v70);
  return a5;
}

  __break(1u);
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

        swift_once(&qword_10099B498, sub_100452EEC);
        goto LABEL_17;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_30;
  }

  if (qword_10099B498 != -1) {
    swift_once(&qword_10099B498, sub_100452EEC);
  }
  uint64_t v29 = type metadata accessor for Logger(0LL);
  uint64_t v30 = sub_10000A720(v29, (uint64_t)qword_1009AE718);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v30);
  uint64_t v31 = static os_log_type_t.default.getter(v18);
  unint64_t v6 = v33;
  uint64_t v22 = v34;
  if (!os_log_type_enabled(v18, v31))
  {
    uint64_t v21 = v32;
    goto LABEL_27;
  }

  int v20 = swift_slowAlloc(2LL, -1LL);
  *(_WORD *)int v20 = 0;
  _os_log_impl( (void *)&_mh_execute_header,  v18,  v31,  "BeaconKeyService retaining existing XPCActivity criteria",  (uint8_t *)v20,  2u);
  uint64_t v21 = v32;
LABEL_23:
  swift_slowDealloc(v20, -1LL, -1LL);
LABEL_27:

  *a2 = v4;
  a2[1] = v21;
  a2[2] = v22;
  a2[3] = v6;
  a2[4] = v5;
}

    uint64_t v21 = (v29 - 1) & v29;
    uint64_t v22 = __clz(__rbit64(v29)) + (v23 << 6);
LABEL_31:
    uint64_t v27 = *(id *)(*(void *)(v7 + 48) + 8 * v22);
    if (!v27) {
      goto LABEL_34;
    }
    while (1)
    {
      a6(v35, v27);

      unint64_t v15 = v23;
      size_t v16 = v21;
      if ((v7 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_12:
      uint64_t v24 = __CocoaSet.Iterator.next()(a1);
      if (v24)
      {
        uint64_t v25 = v24;
        uint64_t v34 = v24;
        int v26 = sub_100022898(0LL, a3, a4);
        swift_unknownObjectRetain(v25);
        swift_dynamicCast(v35, &v34, (char *)&type metadata for Swift.AnyObject + 8, v26, 7LL);
        uint64_t v27 = v35[0];
        swift_unknownObjectRelease(v25);
        uint64_t v23 = v15;
        uint64_t v21 = v16;
        if (v27) {
          continue;
        }
      }

      goto LABEL_34;
    }
  }

  __break(1u);
}

    uint64_t v67 = v106;
    sub_10001DC4C((uint64_t)v17, v106, type metadata accessor for ManagedCBPeripheralBeaconInfo);
    char v68 = &v17[v108[10]];
    uint64_t v69 = *(void *)v68;
    uint64_t v22 = *((void *)v68 + 1);
    uint64_t v70 = v17[v108[12]];
    swift_bridgeObjectRetain(v22);
    uint64_t v71 = (uint64_t)v103;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v103);
    v109[0] = v71;
    uint64_t v73 = v67;
    int v20 = (void *)v71;
    uint64_t v74 = sub_10030D7F4(v73);
    uint64_t v76 = v71;
    int64_t v7 = v74;
    uint64_t v77 = *(void *)(v76 + 16);
    uint64_t v78 = (v75 & 1) == 0;
    uint64_t v79 = v77 + v78;
    if (__OFADD__(v77, v78))
    {
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }

    uint64_t v18 = v75;
    if (*(void *)(v76 + 24) >= v79)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_10006661C();
      }
      goto LABEL_36;
    }

    sub_10005301C(v79, isUniquelyReferenced_nonNull_native);
    uint64_t v80 = sub_10030D7F4(v106);
    if ((v18 & 1) != (v81 & 1)) {
      break;
    }
    int64_t v7 = v80;
LABEL_36:
    int v20 = (void *)v109[0];
    uint64_t v103 = (void *)v109[0];
    if ((v18 & 1) != 0)
    {
      uint64_t v31 = *(void *)(v109[0] + 56) + 24 * v7;
      swift_bridgeObjectRelease();
      *(void *)uint64_t v31 = v69;
      *(void *)(v31 + 8) = v22;
      *(_BYTE *)(v31 + swift_weakDestroy(v0 + 16) = v70;
    }

    else
    {
      *(void *)(v109[0] + 8 * (v7 >> 6) + 64) |= 1LL << v7;
      sub_10001DC4C(v106, v20[6] + v7 * v102, type metadata accessor for ManagedCBPeripheralBeaconInfo);
      uint64_t v82 = v20[7] + 24 * v7;
      *(void *)uint64_t v82 = v69;
      *(void *)(v82 + 8) = v22;
      *(_BYTE *)(v82 + swift_weakDestroy(v0 + 16) = v70;
      int v83 = v20[2];
      char v84 = __OFADD__(v83, 1LL);
      uint64_t v85 = v83 + 1;
      if (v84) {
        goto LABEL_45;
      }
      void v20[2] = v85;
    }

    swift_bridgeObjectRelease();
    sub_100018C68(v106, type metadata accessor for ManagedCBPeripheralBeaconInfo);
    uint64_t v18 = v107;
LABEL_15:
    uint64_t v30 = (uint64_t)v100;
    uint64_t v32 = v105;
    sub_100018C68((uint64_t)v17, type metadata accessor for ManagedCBPeripheralBeaconInfo);
    uint64_t v28 = v32 + v102;
    if (!--v24)
    {
      swift_bridgeObjectRelease();
      return v103;
    }
  }

  uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v108);
  __break(1u);
  return result;
}

  swift_release(v36);
LABEL_31:
  uint64_t v47 = (uint64_t)v54;
  objc_autoreleasePoolPop(v28);
  sub_1000F0A44((uint64_t)v37, v47);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v47, 1LL, v11) == 1)
  {
    sub_100015794(v47, (uint64_t *)&unk_1009A5990);
    return 0LL;
  }

  else
  {
    uint64_t v48 = v53;
    sub_10002218C(v47, v53, type metadata accessor for BeaconObservation);
    uint64_t v49 = *(unsigned __int8 *)(v48 + *(int *)(v11 + 24));
    sub_100018C68(v48, type metadata accessor for BeaconObservation);
    uint64_t v50 = 3LL;
    if (v49 != 42) {
      uint64_t v50 = 0LL;
    }
    if (v49 == 41) {
      return 2LL;
    }
    else {
      return v50;
    }
  }

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v100);
    goto LABEL_31;
  }

  if ((sub_1007940CC(a3, a4) & 1) != 0)
  {
    uint64_t v22 = a4;
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v23 = type metadata accessor for Logger(0LL);
    sub_10000A720(v23, (uint64_t)qword_100A2AAA0);
    uint64_t v24 = sub_100013044((uint64_t)v102, (uint64_t)v100);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    int v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc(22LL, -1LL);
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v27 = 141558275;
      uint64_t v98 = 1752392040LL;
      uint64_t v99 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v27 + 4, v27 + 12);
      *(_WORD *)(v27 + 12) = 2081;
      sub_100012ED8(v100, v101);
      uint64_t v29 = *(void (**)(uint64_t))(*(void *)(*(void *)(v22 + 8) + 8LL) + 32LL);
      uint64_t v30 = v96;
      v29(a3);
      uint64_t v31 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter(v17, v31);
      uint64_t v34 = v33;
      (*(void (**)(char *, uint64_t))(v97 + 8))(v30, v17);
      uint64_t v98 = sub_1003F11D4(v32, v34, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v27 + 14, v27 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v100);
      uint64_t v35 = "Can't monitor beacon: %{private,mask.hash}s due to: this device.";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v25, v26, v35, (uint8_t *)v27, 0x16u);
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v27, -1LL, -1LL);
LABEL_31:

LABEL_32:
      uint64_t v60 = 0LL;
      goto LABEL_33;
    }

    goto LABEL_30;
  }

  uint64_t v93 = a4;
  uint64_t v90 = v17;
  int v45 = *(void *)(*(void *)(a2
                              + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_bluetoothCommunicatorCoordinator)
                  + 64LL);
  uint64_t v46 = swift_retain();
  CurrentValueSubject.value.getter(v100, v46);
  swift_release(v45);
  uint64_t v92 = v100[0];
  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  uint64_t v91 = (id)qword_100A2AF38;
  uint64_t v47 = (void *)objc_opt_self(&OBJC_CLASS___FMSystemInfo);
  uint64_t v48 = [v47 sharedInstance];
  uint64_t v49 = [v48 isInternalBuild];

  if ((v49 & 1) != 0
    && (uint64_t v50 = String._bridgeToObjectiveC()(),
        uint64_t v51 = [v91 BOOLForKey:v50],
        v50,
        v51))
  {
    char v52 = [v47 sharedInstance];
    uint64_t v53 = [v52 isInternalBuild];
  }

  else
  {
    uint64_t v53 = 0;
  }

  uint64_t v54 = v93;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v93 + 120))(a3, v93) & 1) != 0)
  {
    if (v92 > 1) {
      unint64_t v55 = 1;
    }
    else {
      unint64_t v55 = v53;
    }
    if ((v55 & 1) != 0)
    {
      (*(void (**)(uint64_t, uint64_t))(v54 + 192))(a3, v54);
      uint64_t v56 = v97;
      unsigned int v57 = v90;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v16, 1LL, v90) == 1)
      {
        double v58 = &qword_10099D8A0;
        uint64_t v59 = (uint64_t)v16;
      }

      else
      {
        uint64_t v70 = (uint64_t)v95;
        (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v95, v16, v57);
        uint64_t v71 = v70;
        sub_10050F124(v70, (uint64_t)v10);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11) != 1)
        {
          uint64_t v72 = v57;
          uint64_t v73 = v94;
          sub_10002218C((uint64_t)v10, v94, type metadata accessor for OwnedBeaconGroup);
          if ((sub_1001CB708() & 1) != 0)
          {
            sub_100018C68(v73, type metadata accessor for OwnedBeaconGroup);
            (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v71, v57);
            uint64_t v60 = 1LL;
            goto LABEL_33;
          }

          if (qword_10099B4C8 != -1) {
            swift_once(&qword_10099B4C8, sub_10047B404);
          }
          uint64_t v74 = type metadata accessor for Logger(0LL);
          sub_10000A720(v74, (uint64_t)qword_100A2AAA0);
          uint64_t v75 = sub_100013044((uint64_t)v102, (uint64_t)v100);
          uint64_t v76 = (os_log_s *)Logger.logObject.getter(v75);
          uint64_t v77 = static os_log_type_t.default.getter(v76);
          if (os_log_type_enabled(v76, v77))
          {
            uint64_t v78 = v56;
            uint64_t v79 = swift_slowAlloc(22LL, -1LL);
            uint64_t v80 = swift_slowAlloc(32LL, -1LL);
            *(_DWORD *)uint64_t v79 = 141558275;
            uint64_t v98 = 1752392040LL;
            uint64_t v99 = v80;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v79 + 4, v79 + 12);
            *(_WORD *)(v79 + 12) = 2081;
            uint64_t v81 = v54;
            uint64_t v82 = v72;
            uint64_t v92 = v79 + 14;
            sub_100012ED8(v100, v101);
            int v83 = v96;
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v81 + 8) + 8LL) + 32LL))(a3);
            char v84 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            uint64_t v85 = dispatch thunk of CustomStringConvertible.description.getter(v82, v84);
            char v87 = v86;
            uint64_t v88 = *(void (**)(char *, uint64_t))(v78 + 8);
            v88(v83, v82);
            uint64_t v98 = sub_1003F11D4(v85, v87, &v99);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v92, v79 + 22);
            swift_bridgeObjectRelease();
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v100);
            _os_log_impl( (void *)&_mh_execute_header,  v76,  v77,  "Can't monitor beacon: %{private,mask.hash}s due to: group pairing incomplete.",  (uint8_t *)v79,  0x16u);
            swift_arrayDestroy(v80, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v80, -1LL, -1LL);
            swift_slowDealloc(v79, -1LL, -1LL);

            sub_100018C68(v94, type metadata accessor for OwnedBeaconGroup);
            v88(v95, v82);
          }

          else
          {

            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v100);
            sub_100018C68(v73, type metadata accessor for OwnedBeaconGroup);
            (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v71, v57);
          }

          goto LABEL_32;
        }

        (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v70, v57);
        double v58 = &qword_1009AA830;
        uint64_t v59 = (uint64_t)v10;
      }

      sub_100015794(v59, v58);
      uint64_t v60 = 1LL;
      goto LABEL_33;
    }

    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v61 = type metadata accessor for Logger(0LL);
    sub_10000A720(v61, (uint64_t)qword_100A2AAA0);
    uint64_t v62 = sub_100013044((uint64_t)v102, (uint64_t)v100);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v62);
    int v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc(22LL, -1LL);
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v27 = 141558275;
      uint64_t v98 = 1752392040LL;
      uint64_t v99 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v27 + 4, v27 + 12);
      *(_WORD *)(v27 + 12) = 2081;
      sub_100012ED8(v100, v101);
      unint64_t v63 = v96;
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v93 + 8) + 8LL) + 32LL))(a3);
      uint64_t v64 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v65 = v90;
      uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter(v90, v64);
      char v68 = v67;
      (*(void (**)(char *, uint64_t))(v97 + 8))(v63, v65);
      uint64_t v98 = sub_1003F11D4(v66, v68, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v27 + 14, v27 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v100);
      uint64_t v35 = "Can't monitor beacon: %{private,mask.hash}s due to: airpods beacon but less than 2 adv buffers.";
      goto LABEL_11;
    }

    goto LABEL_30;
  }

  uint64_t v60 = 1LL;
LABEL_33:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v102);
  return v60;
}

  swift_bridgeObjectRelease_n(v9, 2LL);
  uint64_t v19 = 0LL;
  uint64_t result = 0LL;
  if ((v8 & 1) == 0) {
    return result;
  }
  return v19;
}

    swift_once(&qword_10099B798, sub_100651870);
    goto LABEL_18;
  }

  uint64_t v107 = v29;
  sub_10002218C((uint64_t)v63, v119, type metadata accessor for OwnedBeaconRecord);
  uint64_t v72 = dispatch_group_create();
  dispatch_group_enter(v72);
  uint64_t v73 = sub_100004AEC((uint64_t *)&unk_1009B0830);
  uint64_t v117 = (__int128 *)swift_allocBox(v73);
  uint64_t v75 = v74;
  type metadata accessor for SPPairingSessionError(0LL);
  uint64_t v77 = v76;
  v123[0] = 1LL;
  uint64_t v78 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v79 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
  _BridgedStoredNSError.init(_:userInfo:)(v122, v123, v78, v77, v79);
  *uint64_t v75 = v122[0];
  swift_storeEnumTagMultiPayload(v75, v73, 1LL);
  uint64_t v80 = v111;
  uint64_t v81 = [v111 name];
  uint64_t v112 = v56;
  if (v81)
  {
    uint64_t v82 = v81;
    int v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
    char v84 = v83;
  }

  else
  {
    int v116 = 0LL;
    char v84 = 0xE000000000000000LL;
  }

  uint64_t v85 = v109;
  int v86 = v110;
  char v87 = [v80 roleId];
  uint64_t v88 = [v80 roleEmoji];
  if (v88)
  {
    uint64_t v89 = v88;
    uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
    uint64_t v92 = v91;
  }

  else
  {
    uint64_t v90 = 0LL;
    uint64_t v92 = 0LL;
  }

  uint64_t v93 = [v58 productInformation];
  if (v93)
  {
    uint64_t v94 = v93;
    uint64_t v95 = v108;
    sub_1007429A0(v108);

    uint64_t v96 = type metadata accessor for AccessoryProductInfo(0LL);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v96 - 8) + 56LL))(v95, 0LL, 1LL, v96);
  }

  else
  {
    uint64_t v97 = type metadata accessor for AccessoryProductInfo(0LL);
    uint64_t v95 = v108;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v97 - 8) + 56LL))(v108, 1LL, 1LL, v97);
  }

  *int v86 = v116;
  v86[1] = v84;
  v86[2] = (uint64_t)v87;
  v86[3] = v90;
  v86[4] = v92;
  sub_100015750(v95, (uint64_t)v86 + *(int *)(v85 + 28), &qword_10099CE68);
  uint64_t v98 = (void *)swift_allocObject(&unk_10095F810, 48LL, 7LL);
  uint64_t v99 = v117;
  v98[2] = v72;
  v98[3] = v99;
  double v100 = v113;
  v98[4] = v107;
  v98[5] = v100;
  double v101 = v72;
  swift_retain();
  swift_retain();
  swift_retain();
  double v102 = v119;
  sub_1004F1A58(v119, v86, (uint64_t)sub_1004D555C, (uint64_t)v98);
  swift_release();
  OS_dispatch_group.wait()();

  sub_100018C68((uint64_t)v86, type metadata accessor for PairingConfig);
  sub_100018C68(v102, type metadata accessor for OwnedBeaconRecord);
  swift_beginAccess(v75, v122, 0LL, 0LL);
  sub_10001581C((uint64_t)v75, (uint64_t)v120, (uint64_t *)&unk_1009B0830);
  return swift_release();
}

  __break(1u);
  return result;
}

        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(countAndFlagsBits);
        v195._countAndFlagsBits = (uint64_t)countAndFlagsBits;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1000334A8(0, countAndFlagsBits[2] + 1LL, 1);
          countAndFlagsBits = (void *)v195._countAndFlagsBits;
        }

        uint64_t v35 = countAndFlagsBits[2];
        uint64_t v34 = countAndFlagsBits[3];
        if (v35 >= v34 >> 1)
        {
          sub_1000334A8(v34 > 1, v35 + 1, 1);
          countAndFlagsBits = (void *)v195._countAndFlagsBits;
        }

        countAndFlagsBits[2] = v35 + 1;
        uint64_t v36 = &countAndFlagsBits[2 * v35];
        v36[4] = v31;
        *((_BYTE *)v36 + 40) = v32;
        if (!v17) {
          goto LABEL_9;
        }
LABEL_8:
        uint64_t v24 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
      }
    }

    uint64_t v29 = v26 + 5;
    if (v29 < v18)
    {
      uint64_t v28 = *(void *)(v192 + 8 * v29);
      if (v28)
      {
        uint64_t v19 = v29;
        goto LABEL_26;
      }

      while (1)
      {
        uint64_t v19 = v29 + 1;
        if (__OFADD__(v29, 1LL)) {
          goto LABEL_189;
        }
        if (v19 >= v18) {
          break;
        }
        uint64_t v28 = *(void *)(v192 + 8 * v19);
        ++v29;
        if (v28) {
          goto LABEL_26;
        }
      }
    }
  }

    __break(1u);
    goto LABEL_31;
  }

  uint64_t v32 = static os_log_type_t.error.getter(v20);
  if (qword_10099B3E8 != -1) {
    swift_once(&qword_10099B3E8, sub_1003E02E8);
  }
  uint64_t v33 = qword_100A2A8F0;
  uint64_t v34 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v35 = swift_allocObject(v34, 72LL, 7LL);
  *(_OWORD *)(v35 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(v35 + 56) = &type metadata for UInt32;
  *(void *)(v35 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v35 + 32) = a1;
  os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Failed to read intermediate and public keys for index %u", v66);
  uint64_t v36 = swift_bridgeObjectRelease();
  return swift_willThrow(v36);
}

    size_t v12 = (v20 - 1) & v20;
    unint64_t v13 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_31:
    uint64_t v18 = *(void *)(*(void *)(v1 + 48) + 8 * v13);
    swift_retain();
    if (!v18) {
      return sub_1000A6F30(v1);
    }
    while (1)
    {
      sub_1000C14BC(&v24, v18);
      uint64_t result = swift_release();
      unint64_t v6 = v14;
      int64_t v7 = v12;
      if ((v1 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_12:
      unint64_t v15 = __CocoaSet.Iterator.next()(result);
      if (v15)
      {
        size_t v16 = v15;
        uint64_t v23 = v15;
        uint64_t v17 = type metadata accessor for Characteristic();
        swift_unknownObjectRetain(v16);
        swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v17, 7LL);
        uint64_t v18 = v24;
        swift_unknownObjectRelease(v16);
        unint64_t v14 = v6;
        size_t v12 = v7;
        if (v18) {
          continue;
        }
      }

      return sub_1000A6F30(v1);
    }
  }

  __break(1u);
  return result;
}

    size_t v12 = (v20 - 1) & v20;
    unint64_t v13 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_31:
    uint64_t v18 = *(id *)(*(void *)(v1 + 48) + 8 * v13);
    if (!v18) {
      goto LABEL_34;
    }
    while (1)
    {
      sub_1000C1A9C((Swift::Int *)&v24, v18);

      unint64_t v6 = v14;
      int64_t v7 = v12;
      if ((v1 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_12:
      unint64_t v15 = __CocoaSet.Iterator.next()(a1);
      if (v15)
      {
        size_t v16 = v15;
        uint64_t v23 = v15;
        uint64_t v17 = sub_100022898(0LL, &qword_10099E2C0, &OBJC_CLASS___CKRecordZoneID_ptr);
        swift_unknownObjectRetain(v16);
        swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v17, 7LL);
        uint64_t v18 = v24;
        swift_unknownObjectRelease(v16);
        unint64_t v14 = v6;
        size_t v12 = v7;
        if (v18) {
          continue;
        }
      }

      goto LABEL_34;
    }
  }

  __break(1u);
}

    __break(1u);
LABEL_31:
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    __break(1u);
  }

    __break(1u);
LABEL_31:
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    __break(1u);
  }

    __break(1u);
LABEL_31:
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    __break(1u);
  }

    __break(1u);
LABEL_31:
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    __break(1u);
  }

  if ((a1 & 0x200) != 0) {
    goto LABEL_40;
  }
LABEL_42:
  if ((a1 & 0x1000) != 0) {
    return v1 | 0x1000;
  }
  return v1;
}

        uint64_t v9 = v50;
        goto LABEL_31;
      }

uint64_t sub_100033EBC(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_10099D3B8);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100034024(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100036FFC(a1, a2, a3, a4, &qword_1009B12F0, type metadata accessor for PairingErrorRecord);
}

uint64_t sub_100034038(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100036FFC(a1, a2, a3, a4, &qword_10099D5A8, type metadata accessor for UpdateDeviceState);
}

uint64_t sub_10003404C(char a1, int64_t a2, char a3, char *a4)
{
  return sub_100034058(a1, a2, a3, a4, &qword_1009B10C0);
}

uint64_t sub_100034058(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v8 = a2;
  }

  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    uint64_t v11 = sub_100004AEC(a5);
    int64_t v12 = (char *)swift_allocObject(v11, 8 * v10 + 32, 7LL);
    int64_t v13 = j__malloc_size(v12);
    uint64_t v14 = v13 - 32;
    if (v13 < 32) {
      uint64_t v14 = v13 - 25;
    }
    *((void *)v12 + 2) = v9;
    *((void *)v12 + 3) = 2 * (v14 >> 3);
  }

  else
  {
    int64_t v12 = (char *)&_swiftEmptyArrayStorage;
  }

  unint64_t v15 = v12 + 32;
  size_t v16 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[8 * v9]) {
      memmove(v15, v16, 8 * v9);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v16 >= &v15[8 * v9] || v15 >= &v16[8 * v9])
  {
    memcpy(v15, v16, 8 * v9);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v12;
  }

uint64_t sub_1000341B0(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009B1310);
    uint64_t v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8]) {
      memmove(v14, v15, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10003430C(char a1, int64_t a2, char a3, char *a4)
{
  return sub_1000355EC(a1, a2, a3, a4, (uint64_t *)&unk_1009B1560);
}

uint64_t sub_100034320(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_10099D418);
    uint64_t v11 = (char *)swift_allocObject(v10, (v9 << 7) | 0x20, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 + 95;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 7);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[128 * v8]) {
      memmove(v14, v15, v8 << 7);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[128 * v8] || v14 >= &v15[128 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }

uint64_t sub_100034488(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_10099D478);
    uint64_t v11 = (void *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    v11[2] = v8;
    void v11[3] = 2 * (v13 >> 3);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v14 = (unint64_t)(v11 + 4);
  unint64_t v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 8 * v8) {
      memmove(v11 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_30;
  }

  if (v15 >= v14 + 8 * v8 || v14 >= v15 + 8 * v8)
  {
    sub_100004AEC((uint64_t *)&unk_1009A5470);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }

uint64_t sub_100034610(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_10099D458);
    uint64_t v11 = (void *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    v11[2] = v8;
    void v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v13 = (unint64_t)(v11 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 24 * v8) {
      memmove(v11 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_28;
  }

  if (v14 >= v13 + 24 * v8 || v13 >= v14 + 24 * v8)
  {
    sub_100004AEC(&qword_10099D460);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }

uint64_t sub_1000347B4(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_10099D400);
    uint64_t v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8]) {
      memmove(v14, v15, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }

uint64_t sub_100034920(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_10099D340);
    uint64_t v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8]) {
      memmove(v13, v14, 24 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[24 * v8] || v13 >= &v14[24 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }

uint64_t sub_100034AA4(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_10099D588);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }

uint64_t sub_100034C0C(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_10099D390);
    uint64_t v11 = (char *)swift_allocObject(v10, 160 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 160);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[160 * v8]) {
      memmove(v13, v14, 160 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[160 * v8] || v13 >= &v14[160 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }

uint64_t sub_100034D8C(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000350E4(a1, a2, a3, a4, (uint64_t *)&unk_1009AA770, (uint64_t *)&unk_1009B1380);
}

uint64_t sub_100034DA0(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100036FFC(a1, a2, a3, a4, &qword_1009B10F0, type metadata accessor for BeaconEstimatedLocation);
}

uint64_t sub_100034DB4(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100036FFC(a1, a2, a3, a4, &qword_10099D448, type metadata accessor for BeaconStatus);
}

uint64_t sub_100034DC8(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009B1220);
    uint64_t v11 = (void *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    v11[2] = v8;
    void v11[3] = 2 * (v13 >> 3);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v14 = (unint64_t)(v11 + 4);
  unint64_t v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 8 * v8) {
      memmove(v11 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_30;
  }

  if (v15 >= v14 + 8 * v8 || v14 >= v15 + 8 * v8)
  {
    type metadata accessor for SPBeaconTaskName(0LL);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }

uint64_t sub_100034F4C(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_1009B11A0);
    uint64_t v11 = (char *)swift_allocObject(v10, 48 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[48 * v8]) {
      memmove(v13, v14, 48 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[48 * v8] || v13 >= &v14[48 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }

uint64_t sub_1000350D0(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100036FFC(a1, a2, a3, a4, &qword_10099D4C0, type metadata accessor for ShareRecord);
}

uint64_t sub_1000350E4(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v10 = a2;
  }

  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    uint64_t v13 = sub_100004AEC(a5);
    unint64_t v14 = (void *)swift_allocObject(v13, 40 * v12 + 32, 7LL);
    size_t v15 = j__malloc_size(v14);
    v14[2] = v11;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
  }

  else
  {
    unint64_t v14 = _swiftEmptyArrayStorage;
  }

  unint64_t v16 = (unint64_t)(v14 + 4);
  unint64_t v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v16 >= v17 + 40 * v11) {
      memmove(v14 + 4, a4 + 4, 40 * v11);
    }
    a4[2] = 0LL;
    goto LABEL_28;
  }

  if (v17 >= v16 + 40 * v11 || v16 >= v17 + 40 * v11)
  {
    sub_100004AEC(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v14;
  }

uint64_t sub_100035288(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009B1370);
    uint64_t v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8]) {
      memmove(v13, v14, 24 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[24 * v8] || v13 >= &v14[24 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }

uint64_t sub_10003540C(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009B13C0);
    uint64_t v11 = (void *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    v11[2] = v8;
    void v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v13 = (unint64_t)(v11 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 24 * v8) {
      memmove(v11 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_28;
  }

  if (v14 >= v13 + 24 * v8 || v13 >= v14 + 24 * v8)
  {
    sub_100004AEC(&qword_10099D4F8);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }

uint64_t sub_1000355B0(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100036FFC(a1, a2, a3, a4, &qword_1009B13B0, type metadata accessor for FetchRequestBeacon);
}

uint64_t sub_1000355C4(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100036FFC(a1, a2, a3, a4, &qword_10099D4E8, type metadata accessor for RawSearchResult);
}

uint64_t sub_1000355D8(char a1, int64_t a2, char a3, char *a4)
{
  return sub_1000355EC(a1, a2, a3, a4, &qword_10099D568);
}

uint64_t sub_1000355EC(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v8 = a2;
  }

  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    uint64_t v11 = sub_100004AEC(a5);
    size_t v12 = (char *)swift_allocObject(v11, 32 * v10 + 32, 7LL);
    int64_t v13 = j__malloc_size(v12);
    uint64_t v14 = v13 - 32;
    if (v13 < 32) {
      uint64_t v14 = v13 - 1;
    }
    *((void *)v12 + 2) = v9;
    *((void *)v12 + 3) = 2 * (v14 >> 5);
  }

  else
  {
    size_t v12 = (char *)_swiftEmptyArrayStorage;
  }

  size_t v15 = v12 + 32;
  unint64_t v16 = a4 + 32;
  size_t v17 = 32 * v9;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[v17]) {
      memmove(v15, v16, v17);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v16 >= &v15[v17] || v15 >= &v16[v17])
  {
    swift_arrayInitWithCopy(v15);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v12;
  }

uint64_t sub_100035754(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100036FFC(a1, a2, a3, a4, &qword_10099D3F8, type metadata accessor for OwnedDeviceKeyRecord);
}

uint64_t sub_100035768(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100036FFC(a1, a2, a3, a4, &qword_1009B0630, type metadata accessor for KeySyncMetadataDisplay);
}

uint64_t sub_10003577C(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_10099D538);
    uint64_t v11 = (char *)swift_allocObject(v10, 88 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 88);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  int64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[88 * v8]) {
      memmove(v13, v14, 88 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[88 * v8] || v13 >= &v14[88 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }

uint64_t sub_100035900(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_10099D330);
    uint64_t v11 = (char *)swift_allocObject(v10, 96 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 96);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  int64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  size_t v15 = 96 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }

uint64_t sub_100035A78(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_1009AA7B0);
    uint64_t v11 = (void *)swift_allocObject(v10, 56 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    v11[2] = v8;
    void v11[3] = 2 * ((uint64_t)(v12 - 32) / 56);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v13 = (unint64_t)(v11 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 56 * v8) {
      memmove(v11 + 4, a4 + 4, 56 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_28;
  }

  if (v14 >= v13 + 56 * v8 || v13 >= v14 + 56 * v8)
  {
    sub_100004AEC(&qword_10099D518);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }

uint64_t sub_100035C20(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_10099D560);
    uint64_t v11 = (char *)swift_allocObject(v10, 56 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 56);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[56 * v8]) {
      memmove(v13, v14, 56 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[56 * v8] || v13 >= &v14[56 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }

uint64_t sub_100035DA8(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100036FFC( a1,  a2,  a3,  a4,  (uint64_t *)&unk_1009B10D0,  type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
}

uint64_t sub_100035DBC(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_10099D348);
    uint64_t v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8]) {
      memmove(v14, v15, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100035F18@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 56);
  *a1 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100035F34(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_10099D548);
    uint64_t v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8]) {
      memmove(v13, v14, 40 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[40 * v8] || v13 >= &v14[40 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }

uint64_t sub_1000360B4(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_10099D360);
    uint64_t v11 = (char *)swift_allocObject(v10, 4 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 29;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 2);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v8]) {
      memmove(v14, v15, 4 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[4 * v8] || v14 >= &v15[4 * v8])
  {
    memcpy(v14, v15, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }

uint64_t sub_100036210(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v8 = a2;
  }

  int64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = v8;
  }
  if (v10)
  {
    uint64_t v11 = sub_100004AEC(a5);
    int64_t v12 = (char *)swift_allocObject(v11, v10 + 32, 7LL);
    size_t v13 = j__malloc_size(v12);
    *((void *)v12 + 2) = v9;
    *((void *)v12 + 3) = 2 * v13 - 64;
  }

  else
  {
    int64_t v12 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v12 + 32;
  size_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v14 >= &v15[v9]) {
      memmove(v14, v15, v9);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v15 >= &v14[v9] || v14 >= &v15[v9])
  {
    memcpy(v14, v15, v9);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v12;
  }

uint64_t sub_100036358(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100036DE0(a1, a2, a3, a4, &qword_10099D528, (uint64_t *)&unk_1009AC320);
}

uint64_t sub_10003636C(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_1009B1050);
    uint64_t v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  size_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8]) {
      memmove(v13, v14, 40 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[40 * v8] || v13 >= &v14[40 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }

uint64_t sub_1000364EC(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_10099D370);
    uint64_t v11 = (void *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    v11[2] = v8;
    void v11[3] = 2 * (v13 >> 5);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v14 = (unint64_t)(v11 + 4);
  unint64_t v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 32 * v8) {
      memmove(v11 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_30;
  }

  if (v15 >= v14 + 32 * v8 || v14 >= v15 + 32 * v8)
  {
    sub_100004AEC(&qword_10099D378);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100036674(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_10099D6A8);
    uint64_t v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  size_t v15 = 24 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }

uint64_t sub_1000367EC(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_10099D490);
    uint64_t v11 = (char *)swift_allocObject(v10, 72 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 72);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  size_t v15 = 72 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }

uint64_t sub_100036968(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_10099D4F0);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  size_t v16 = 16 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16]) {
      memmove(v14, v15, v16);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    memcpy(v14, v15, v16);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }

uint64_t sub_100036AC0(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_10099D530);
    uint64_t v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8]) {
      memmove(v13, v14, 24 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[24 * v8] || v13 >= &v14[24 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }

uint64_t sub_100036C44(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_10099D3E0);
    uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    v11[2] = v8;
    void v11[3] = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v14 = (unint64_t)(v11 + 4);
  unint64_t v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8) {
      memmove(v11 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_30;
  }

  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_100004AEC(&qword_10099D3E8);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100036DCC(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100036DE0(a1, a2, a3, a4, &qword_10099D3C0, &qword_1009AC1E0);
}

uint64_t sub_100036DE0(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }

      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v10 = a2;
  }

  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v13 = sub_100004AEC(a5);
  uint64_t v14 = *(void *)(sub_100004AEC(a6) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  size_t v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (v19 - v17 == 0x8000000000000000LL && v15 == -1) {
    goto LABEL_34;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  uint64_t v21 = sub_100004AEC(a6);
  uint64_t v22 = *(void *)(v21 - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  uint64_t v24 = (char *)v18 + v23;
  uint64_t v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(void *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }

    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v24, v25);
    }

    a4[2] = 0LL;
    goto LABEL_32;
  }

  uint64_t v26 = *(void *)(v22 + 72) * v11;
  uint64_t v27 = &v24[v26];
  unint64_t v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }

LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  swift_release();
  uint64_t v3 = v45;
  if ((v50 & 1) != 0)
  {
    uint64_t v44 = 1LL << *(_BYTE *)(v10 + 32);
    if (v44 >= 64) {
      bzero(v47, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
    }
    else {
      *uint64_t v47 = -1LL << v44;
    }
    *(void *)(v10 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  swift_release();
  uint64_t v3 = v45;
  if ((v53 & 1) != 0)
  {
    uint64_t v44 = 1LL << *(_BYTE *)(v12 + 32);
    if (v44 >= 64) {
      bzero(v47, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
    }
    else {
      *uint64_t v47 = -1LL << v44;
    }
    *(void *)(v12 + swift_weakDestroy(v0 + 16) = 0LL;
  }

          unint64_t v28 = __clz(__rbit64(v4));
          v4 &= v4 - 1;
        }
      }

      uint64_t v11 = v9 + 4;
      if (v11 < v44)
      {
        int64_t v10 = *(void *)(v30 + 8 * v11);
        if (v10)
        {
          unint64_t v6 = v11;
          goto LABEL_21;
        }

        while (1)
        {
          unint64_t v6 = v11 + 1;
          if (__OFADD__(v11, 1LL)) {
            goto LABEL_39;
          }
          if (v6 >= v44) {
            break;
          }
          int64_t v10 = *(void *)(v30 + 8 * v6);
          ++v11;
          if (v10) {
            goto LABEL_21;
          }
        }
      }
    }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    uint64_t v140 = *(void (**)(char *, uint64_t))(v197 + 8);
    v140(v131, v55);
    goto LABEL_37;
  }

  sub_100013044((uint64_t)&v203, (uint64_t)&v201);
  uint64_t v79 = sub_100004AEC(&qword_1009B0530);
  uint64_t v80 = (uint64_t)v179;
  if ((swift_dynamicCast(v179, &v201, v79, v178, 6LL) & 1) == 0)
  {
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v130 = type metadata accessor for Logger(0LL);
    sub_10000A720(v130, (uint64_t)qword_100A2AC98);
    uint64_t v131 = v173;
    uint64_t v132 = ((uint64_t (*)(char *, uint64_t, uint64_t))v52)(v173, v56, v55);
    uint64_t v133 = (os_log_s *)Logger.logObject.getter(v132);
    uint64_t v134 = static os_log_type_t.error.getter(v133);
    if (os_log_type_enabled(v133, v134))
    {
      uint64_t v135 = swift_slowAlloc(22LL, -1LL);
      uint64_t v136 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v135 = 141558275;
      uint64_t v200 = 1752392040LL;
      *(void *)&uint64_t v201 = v136;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, &v201, v135 + 4, v135 + 12);
      *(_WORD *)(v135 + 12) = 2081;
      uint64_t v137 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v138 = dispatch thunk of CustomStringConvertible.description.getter(v55, v137);
      uint64_t v200 = sub_1003F11D4(v138, v139, (uint64_t *)&v201);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, &v201, v135 + 14, v135 + 22);
      swift_bridgeObjectRelease();
      uint64_t v140 = *(void (**)(char *, uint64_t))(v197 + 8);
      v140(v131, v55);
      uint64_t v141 = "Cannot restore default name for owned item yet. Beacon: %{private,mask.hash}s.";
LABEL_35:
      _os_log_impl((void *)&_mh_execute_header, v133, v134, v141, (uint8_t *)v135, 0x16u);
      swift_arrayDestroy(v136, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v136, -1LL, -1LL);
      swift_slowDealloc(v135, -1LL, -1LL);
LABEL_37:

      uint64_t v77 = v195;
      uint64_t v147 = v189;
      (*((void (**)(const void *, void))v195 + 2))(v195, 0LL);
      sub_100018C68(v147, type metadata accessor for BeaconNamingRecord);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v203);
      v140((char *)v56, v55);
      goto LABEL_45;
    }

    goto LABEL_36;
  }

  sub_100018C68(v80, type metadata accessor for SharedBeaconRecord);
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v81 = type metadata accessor for Logger(0LL);
  sub_10000A720(v81, (uint64_t)qword_100A2AC98);
  uint64_t v82 = v174;
  int v83 = ((uint64_t (*)(char *, uint64_t, uint64_t))v52)(v174, v56, v55);
  char v84 = (os_log_s *)Logger.logObject.getter(v83);
  uint64_t v85 = static os_log_type_t.default.getter(v84);
  LODWORD(v192) = v85;
  int v86 = os_log_type_enabled(v84, v85);
  uint64_t v169 = v55;
  if (v86)
  {
    char v87 = v82;
    uint64_t v88 = swift_slowAlloc(22LL, -1LL);
    uint64_t v89 = swift_slowAlloc(32LL, -1LL);
    uint64_t v191 = (char *)v89;
    *(_DWORD *)uint64_t v88 = 141558275;
    uint64_t v200 = 1752392040LL;
    *(void *)&uint64_t v201 = v89;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, &v201, v88 + 4, v88 + 12);
    *(_WORD *)(v88 + 12) = 2081;
    int v193 = (id)(v88 + 14);
    uint64_t v90 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v188 = v84;
    uint64_t v91 = dispatch thunk of CustomStringConvertible.description.getter(v55, v90);
    uint64_t v200 = sub_1003F11D4(v91, v92, (uint64_t *)&v201);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, &v201, v193, v88 + 22);
    swift_bridgeObjectRelease();
    uint64_t v56 = (uint64_t)v199;
    int v193 = *(id *)(v197 + 8);
    ((void (*)(char *, uint64_t))v193)(v87, v55);
    uint64_t v93 = v188;
    _os_log_impl( (void *)&_mh_execute_header,  v188,  (os_log_type_t)v192,  "Restoring default name for shared item Beacon: %{private,mask.hash}s.",  (uint8_t *)v88,  0x16u);
    uint64_t v94 = v191;
    swift_arrayDestroy(v191, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v94, -1LL, -1LL);
    swift_slowDealloc(v88, -1LL, -1LL);
  }

  else
  {
    int v193 = *(id *)(v197 + 8);
    ((void (*)(char *, uint64_t))v193)(v82, v55);
  }

  uint64_t v148 = swift_allocObject(&unk_10094DB50, 32LL, 7LL);
  *(void *)(v148 + swift_weakDestroy(v0 + 16) = sub_1002DDE88;
  uint64_t v149 = v196;
  *(void *)(v148 + 24) = v196;
  uint64_t v150 = __chkstk_darwin(v149);
  *(&v169 - 2) = v48;
  *(&v169 - 1) = v56;
  swift_retain_n(v150, 2LL);
  uint64_t v151 = (uint64_t)v175;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_10015471C);
  if (v60(v151, 1LL, v198) == 1)
  {
    sub_100015794(v151, &qword_1009AE490);
    uint64_t v77 = v195;
    (*((void (**)(const void *, uint64_t))v195 + 2))(v195, 1LL);
    uint64_t v152 = v169;
  }

  else
  {
    uint64_t v153 = v151;
    uint64_t v154 = v171;
    sub_10002218C(v153, v171, type metadata accessor for BeaconNamingRecord);
    uint64_t v155 = v177;
    uint64_t v152 = v169;
    v52(v177, v56, v169);
    uint64_t v156 = *(unsigned __int8 *)(v197 + 80);
    uint64_t v157 = (v156 + 24) & ~v156;
    double v158 = (v176 + v157 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    double v159 = swift_allocObject(&unk_10094DB78, v158 + 16, v156 | 7);
    *(void *)(v159 + swift_weakDestroy(v0 + 16) = v48;
    v194(v159 + v157, v155, v152);
    double v160 = (uint64_t (**)())(v159 + v158);
    *double v160 = sub_1000228F4;
    v160[1] = (uint64_t (*)())v148;
    swift_retain();
    uint64_t v161 = swift_retain();
    double v162 = static os_log_type_t.default.getter(v161);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    double v163 = qword_100A2B018;
    double v164 = swift_allocObject(v182, 72LL, 7LL);
    *(_OWORD *)(v164 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v165 = v170;
    sub_10001DC4C(v154, v170, type metadata accessor for BeaconNamingRecord);
    v166 = String.init<A>(describing:)(v165, v198);
    v167 = v183;
    *(void *)(v164 + 56) = &type metadata for String;
    *(void *)(v164 + 64) = v167;
    *(void *)(v164 + 32) = v166;
    *(void *)(v164 + 40) = v168;
    os_log(_:dso:log:_:_:)(v162, &_mh_execute_header, v163, "Attempting to remove: %@", 24LL, 2LL, v164);
    swift_bridgeObjectRelease();
    swift_retain();
    sub_100557ED8(v154, v48, (void (*)(void))sub_1002DA130, v159);
    swift_release_n(v159, 2LL);
    sub_100018C68(v154, type metadata accessor for BeaconNamingRecord);
    uint64_t v77 = v195;
  }

  swift_release();
  swift_release();
  sub_100018C68(v189, type metadata accessor for BeaconNamingRecord);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v203);
  ((void (*)(uint64_t, uint64_t))v193)(v56, v152);
LABEL_45:
  swift_release();
  _Block_release(v77);
}

        uint64_t v25 = 0LL;
        uint64_t v29 = 1LL;
      }
    }
  }

  uint64_t v39 = v33;
  uint64_t v40 = ~v37;
  uint64_t v41 = *(void *)(v8 + 72);
  uint64_t v42 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  while (1)
  {
    v42(v11, *(void *)(v39 + 48) + v41 * v38, v7);
    uint64_t v43 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v44 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v61, v7, v43);
    int v45 = *(void (**)(char *, uint64_t))(v8 + 8);
    v45(v11, v7);
    if ((v44 & 1) != 0) {
      break;
    }
    uint64_t v38 = (v38 + 1) & v40;
    if (((*(void *)&v60[(v38 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v38) & 1) == 0) {
      goto LABEL_34;
    }
  }

  isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v45)(v61, v7);
  uint64_t v47 = *(_BYTE *)(v39 + 32);
  uint64_t v48 = v47 & 0x3F;
  uint64_t v49 = (1LL << v47) + 63;
  uint64_t v50 = v49 >> 6;
  uint64_t v51 = 8 * (v49 >> 6);
  if (v48 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v49 >> 6), 8LL), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v55 - ((v51 + 15) & 0x3FFFFFFFFFFFFFF0LL), v60, v51);
    char v52 = sub_1003D10B8((unint64_t *)((char *)&v55 - ((v51 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v50, v39, v38, &v62);
    swift_release(v39);
    sub_1000A6F30(v62);
  }

  else
  {
    uint64_t v54 = (void *)swift_slowAlloc(v51, -1LL);
    memcpy(v54, v60, v51);
    char v52 = sub_1003D10B8((unint64_t *)v54, v50, v39, v38, &v62);
    swift_release(v39);
    sub_1000A6F30(v62);
    swift_slowDealloc(v54, -1LL, -1LL);
  }

  return v52;
}

        uint64_t v25 = 0LL;
        uint64_t v29 = 1LL;
      }
    }
  }

  uint64_t v39 = v33;
  uint64_t v40 = ~v37;
  uint64_t v41 = *(void *)(v8 + 72);
  uint64_t v42 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  while (1)
  {
    v42(v11, *(void *)(v39 + 48) + v41 * v38, v7);
    uint64_t v43 = sub_100007864( (unint64_t *)&unk_1009AC310,  (uint64_t (*)(uint64_t))&type metadata accessor for CorrelationIdentifier,  (uint64_t)&protocol conformance descriptor for CorrelationIdentifier);
    uint64_t v44 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v61, v7, v43);
    int v45 = *(void (**)(char *, uint64_t))(v8 + 8);
    v45(v11, v7);
    if ((v44 & 1) != 0) {
      break;
    }
    uint64_t v38 = (v38 + 1) & v40;
    if (((*(void *)&v60[(v38 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v38) & 1) == 0) {
      goto LABEL_34;
    }
  }

  isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v45)(v61, v7);
  uint64_t v47 = *(_BYTE *)(v39 + 32);
  uint64_t v48 = v47 & 0x3F;
  uint64_t v49 = (1LL << v47) + 63;
  uint64_t v50 = v49 >> 6;
  uint64_t v51 = 8 * (v49 >> 6);
  if (v48 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v49 >> 6), 8LL), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v55 - ((v51 + 15) & 0x3FFFFFFFFFFFFFF0LL), v60, v51);
    char v52 = sub_1003D2310((unint64_t *)((char *)&v55 - ((v51 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v50, v39, v38, &v62);
    swift_release();
    sub_1000A6F30(v62);
  }

  else
  {
    uint64_t v54 = (void *)swift_slowAlloc(v51, -1LL);
    memcpy(v54, v60, v51);
    char v52 = sub_1003D2310((unint64_t *)v54, v50, v39, v38, &v62);
    swift_release();
    sub_1000A6F30(v62);
    swift_slowDealloc(v54, -1LL, -1LL);
  }

  return v52;
}

          uint64_t v29 = 0LL;
          uint64_t v31 = 1LL;
          uint64_t v26 = v48;
          goto LABEL_8;
        }

        uint64_t v29 = 0LL;
        uint64_t v31 = 1LL;
        v26 += 3LL;
LABEL_8:
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v31, 1LL, v12);
        *a5 = v24;
        a5[1] = v25;
        a5[2] = v57;
        a5[3] = v26;
        a5[4] = v29;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
        {
          sub_100015794((uint64_t)v11, &qword_10099D8A0);
          uint64_t v50 = v59;
          swift_retain();
          return (void *)sub_100545C40(v54, v52, v53, v50);
        }

        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v60, v11, v12);
        uint64_t v32 = v59;
        uint64_t v33 = *(void *)(v59 + 40);
        uint64_t v34 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v35 = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v12, v34);
        uint64_t v36 = -1LL << *(_BYTE *)(v32 + 32);
        uint64_t v37 = v35 & ~v36;
        if (((*(void *)(v58 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v37) & 1) != 0) {
          break;
        }
        unint64_t v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
LABEL_4:
        uint64_t result = (void *)v23(v60, v12);
        uint64_t v11 = v55;
        a5 = v56;
      }

      uint64_t v38 = ~v36;
      uint64_t v39 = *(void *)(v13 + 72);
      uint64_t v40 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
      while (1)
      {
        v40(v16, *(void *)(v59 + 48) + v39 * v37, v12);
        uint64_t v41 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v42 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v60, v12, v41);
        unint64_t v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
        v23(v16, v12);
        if ((v42 & 1) != 0) {
          break;
        }
        uint64_t v37 = (v37 + 1) & v38;
        if (((*(void *)(v58 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v37) & 1) == 0) {
          goto LABEL_4;
        }
      }

      uint64_t result = (void *)v23(v60, v12);
      uint64_t v46 = (v37 >> 3) & 0x1FFFFFFFFFFFFFF8LL;
      uint64_t v11 = v55;
      uint64_t v47 = *(unint64_t *)((char *)v54 + v46);
      *(unint64_t *)((char *)v54 + v46) = v47 & ~(1LL << v37);
      a5 = v56;
    }

    while ((v47 & (1LL << v37)) == 0);
    uint64_t v22 = v53 - 1;
    if (__OFSUB__(v53, 1LL))
    {
LABEL_44:
      __break(1u);
      return result;
    }

    if (v53 != 1) {
      continue;
    }
    return &_swiftEmptySetSingleton;
  }

  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
  }
  size_t v19 = v2[2];
  uint64_t v18 = v2[3];
  if (v19 >= v18 >> 1) {
    uint64_t v2 = sub_1004C4120((void *)(v18 > 1), v19 + 1, 1, v2);
  }
  v2[2] = v19 + 1;
  int v20 = &v2[2 * v19];
  v20[4] = 0x74616369646E692ELL;
  v20[5] = 0xE900000000000065LL;
  if ((a1 & 0x40) == 0)
  {
LABEL_17:
    if ((a1 & 0x80) == 0) {
      goto LABEL_18;
    }
    goto LABEL_46;
  }

      __break(1u);
LABEL_37:
      sub_100061B10();
      uint64_t v61 = v128;
    }

  uint64_t v180 = v3;
  swift_release();
  uint64_t v37 = countAndFlagsBits[2];
  if (!v37)
  {
LABEL_86:
    swift_release();
    goto LABEL_87;
  }

  uint64_t v38 = countAndFlagsBits[4];
  uint64_t v39 = *((_BYTE *)countAndFlagsBits + 40);
  uint64_t v40 = v37 - 1;
  if (v40)
  {
    uint64_t v41 = countAndFlagsBits + 7;
    do
    {
      uint64_t v42 = *((void *)v41 - 1);
      uint64_t v44 = *v41;
      v41 += 16;
      uint64_t v43 = v44;
      if (v42 < v38)
      {
        uint64_t v38 = v42;
        uint64_t v39 = v43;
      }

      --v40;
    }

    while (v40);
  }

  swift_release();
  int v45 = 1LL << *(_BYTE *)(v198 + 32);
  uint64_t v46 = -1LL;
  if (v45 < 64) {
    uint64_t v46 = ~(-1LL << v45);
  }
  uint64_t v47 = v46 & *(void *)(v198 + 64);
  uint64_t v191 = (unint64_t)(v45 + 63) >> 6;
  swift_bridgeObjectRetain(v198);
  uint64_t v48 = 0LL;
  uint64_t v49 = _swiftEmptyArrayStorage;
  if (v47) {
    goto LABEL_49;
  }
LABEL_50:
  unint64_t v55 = v48 + 1;
  if (__OFADD__(v48, 1LL)) {
    goto LABEL_187;
  }
  uint64_t v27 = v192;
  if (v55 < v191)
  {
    uint64_t v56 = *(void *)(v192 + 8 * v55);
    ++v48;
    if (v56) {
      goto LABEL_67;
    }
    uint64_t v48 = v55 + 1;
    if (v55 + 1 >= v191) {
      goto LABEL_77;
    }
    uint64_t v56 = *(void *)(v192 + 8 * v48);
    if (v56) {
      goto LABEL_67;
    }
    uint64_t v48 = v55 + 2;
    if (v55 + 2 >= v191) {
      goto LABEL_77;
    }
    uint64_t v56 = *(void *)(v192 + 8 * v48);
    if (v56) {
      goto LABEL_67;
    }
    uint64_t v48 = v55 + 3;
    if (v55 + 3 >= v191) {
      goto LABEL_77;
    }
    uint64_t v56 = *(void *)(v192 + 8 * v48);
    if (v56) {
      goto LABEL_67;
    }
    uint64_t v48 = v55 + 4;
    if (v55 + 4 >= v191) {
      goto LABEL_77;
    }
    uint64_t v56 = *(void *)(v192 + 8 * v48);
    if (v56)
    {
LABEL_67:
      uint64_t v47 = (v56 - 1) & v56;
      for (j = __clz(__rbit64(v56)) + (v48 << 6); ; j = v53 | (v48 << 6))
      {
        double v58 = *(void *)(v198 + 56) + 16 * j;
        uint64_t v59 = *(void *)v58;
        uint64_t v60 = *(unsigned __int8 *)(v58 + 8);
        uint64_t v50 = 0x7261646E6F636553LL;
        uint64_t v51 = 0xE900000000000079LL;
        if (v60 != 1)
        {
          if (v60 != 2)
          {
            swift_bridgeObjectRelease();
            goto LABEL_71;
          }

          uint64_t v50 = 0x6F4C657275636553LL;
          uint64_t v51 = 0xEF736E6F69746163LL;
        }

        char v52 = _stringCompareWithSmolCheck(_:_:expecting:)(v50, v51, 0x7972616D697250LL, 0xE700000000000000LL, 0LL);
        swift_bridgeObjectRelease();
        if ((v52 & 1) == 0)
        {
          if (!v47) {
            goto LABEL_50;
          }
          goto LABEL_49;
        }

  sub_1000A6F30(v1);
}

uint64_t sub_100036FC0(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100036FFC( a1,  a2,  a3,  a4,  (uint64_t *)&unk_1009B1180,  type metadata accessor for BeaconKeyManager.PersistenceInstruction);
}

uint64_t sub_100036FD4(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100036FFC(a1, a2, a3, a4, &qword_10099D3F0, type metadata accessor for BeaconKeyManager.KeyIndexMapInfo);
}

uint64_t sub_100036FE8(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100036FFC( a1,  a2,  a3,  a4,  (uint64_t *)&unk_1009B1170,  type metadata accessor for BeaconKeyManager.KeyMapInfo);
}

uint64_t sub_100036FFC( char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }

      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v10 = a2;
  }

  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v13 = sub_100004AEC(a5);
  uint64_t v14 = *(void *)(a6(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  size_t v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (v19 - v17 == 0x8000000000000000LL && v15 == -1) {
    goto LABEL_34;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  uint64_t v21 = a6(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  uint64_t v24 = (char *)v18 + v23;
  uint64_t v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(void *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }

    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v24, v25);
    }

    a4[2] = 0LL;
    goto LABEL_32;
  }

  uint64_t v26 = *(void *)(v22 + 72) * v11;
  uint64_t v27 = &v24[v26];
  unint64_t v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }

uint64_t sub_1000371DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD v12[3] = a7;
  v12[4] = a8;
  int64_t v10 = sub_10000A7C8(v12);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 16LL))(v10, a1, a7);
  QueueSynchronizer.conditionalSync<A>(_:)(sub_1000372C0);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v12);
}

uint64_t sub_100037298(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

uint64_t sub_1000372C0()
{
  return sub_1000392B0();
}

uint64_t sub_1000372DC(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_retain(a2);
  }
  return result;
}

uint64_t sub_1000372EC(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_100004B78(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10003732C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009AA7A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100037374()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100037388@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0B40(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000373B0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A05FC(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000373D8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A0B54(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100037400@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1006A0B60(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_10003742C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0B6C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100037458@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0B8C(*a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_100037484@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1006A0BAC(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000374B4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0BC4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000374DC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0608(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100037504@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0BD8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10003752C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0BEC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100037554@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0C00(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10003757C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A0C14(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000375A4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0C20(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000375CC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0C34(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000375F4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0C48(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10003761C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0C5C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100037644@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0C70(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10003766C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1006A0C84(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_100037698@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0C90(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000376C0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0CA4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000376E8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0CB8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100037710@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0CCC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100037738@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0CE0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100037760@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0CF4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100037788@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0D08(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000377B0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0D1C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000377D8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0D30(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100037800@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0D44(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100037828@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0D58(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100037850@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1006A0D6C(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_10003787C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0D78(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000378A4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0D8C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000378CC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0DA0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000378F4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0DB4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10003791C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0DC8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100037944@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0DDC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10003796C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0DF0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100037994@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A0E04(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000379BC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A0E10(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000379EC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0F24(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100037A14@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0F38(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100037A3C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0F4C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100037A64@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0F60(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100037A8C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0F74(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100037AB4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1006A0F88(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_100037AE4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10002A7E4(a1, (uint64_t)&unk_1007E6668, a2);
}

uint64_t sub_100037B04@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10002A7E4(a1, (uint64_t)&unk_1007E6618, a2);
}

uint64_t sub_100037B20@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A107C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100037B48@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A1090(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100037B70@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A10A4(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100037B98@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A10B0(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100037BC0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A10BC(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100037BE8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A10C8(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100037C10(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  swift_bridgeObjectRelease(*(void *)(a1 + 48));
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_100037C48@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1006A1160(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_100037C74@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1006A116C(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_100037CA0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1006A1178(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_100037CCC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A1184(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100037CF4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A1190(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100037D1C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A119C(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100037D44@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A11A8(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100037D6C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A11B4(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100037D94@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A11C0(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100037DBC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A11CC(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100037DE4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A11D8(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100037E0C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A11E4(*a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_100037E34@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A11F0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100037E5C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A1204(*a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_100037E84@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A1210(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100037EAC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A1224(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100037ED4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A1238(*a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_100037EFC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A1244(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100037F24@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1006A1250(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_100037F50@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1006A125C(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_100037F7C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1006A1268(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_100037FA8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1006A1274(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_100037FDC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A12A8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100038004@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A12BC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10003802C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A12D0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100038054@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A12E4(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_10003807C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A12F0(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000380A4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A12FC(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000380CC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A1308(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000380F4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A131C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10003811C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A1330(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100038144@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A1344(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10003816C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A1358(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100038194@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A1364(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000381BC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A1370(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000381E4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A1384(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10003820C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A1398(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100038234@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A13AC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10003825C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A13C0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100038284@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A13D4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000382AC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A13E8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000382D4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A13FC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000382FC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A1410(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100038324@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1006A141C(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_100038350@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A1428(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100038378@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A1434(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000383A0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A1440(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000383C8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1006A1454(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000383F4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1006A1460(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_100038420@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1006A146C(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_10003844C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A1478(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100038474@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A148C(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_10003849C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A1498(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000384C4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A14A4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000384EC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A14B8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100038514@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A14CC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10003853C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A14E0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100038564@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A14F4(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_10003858C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1006A1500(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000385B8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A150C(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000385E0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A1518(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100038608@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A1524(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100038630@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1006A1538(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_10003865C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1006A1544(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_100038688@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A1550(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000386B0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A165C(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000386D8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A1668(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100038700@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1006A1674(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_10003872C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1006A1680(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_100038758@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A168C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100038780@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A16A0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000387A8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A16B4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000387D0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A16C8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000387F8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A16DC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100038820@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A16F0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100038848@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A1704(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100038870@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A1718(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100038898@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A172C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000388C0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A1740(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000388E8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A1754(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100038910@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A1768(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100038938@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A177C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100038960@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A1790(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100038988@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A17A4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000389B0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A17B8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000389D8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A17CC(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100038A00@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A17D8(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100038A28@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1006A17E4(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_100038A54@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A17F0(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100038A7C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A17FC(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100038AA4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A1808(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100038ACC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A1814(*a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_100038AF4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A1920(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100038B1C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1006A1934(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_100038B48@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A1940(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100038B70@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A194C(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100038B98@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1006A1958(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_100038BC4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1006A1964(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_100038BF0@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = sub_1006A1970(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100038C18@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A1A64(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100038C40@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A1B70(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100038C68@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A1B7C(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100038C90@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A1B88(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100038CB8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A1B94(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100038CE0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A1BA0(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100038D08@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A1BAC(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100038D30@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1006A1BB8(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_100038D5C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A1CBC(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100038D84@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006A1CC8(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100038DAC@<X0>(void *a1@<X8>)
{
  return sub_100039100(a1);
}

uint64_t sub_100038DC4()
{
  return sub_100038DF0( (uint64_t)&type metadata for UInt32,  (uint64_t (*)(unint64_t, void, void, uint64_t))sub_1000314C0);
}

uint64_t sub_100038DDC()
{
  return sub_100038DF0( (uint64_t)&unk_10099D5C8,  (uint64_t (*)(unint64_t, void, void, uint64_t))sub_100031424);
}

uint64_t sub_100038DF0(uint64_t a1, uint64_t (*a2)(unint64_t, void, void, uint64_t))
{
  uint64_t v5 = *(void *)(sub_100004AEC(&qword_1009A0840) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return a2(v2 + v6, *(void *)(v2 + v7), *(void *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFF8LL)), a1);
}

uint64_t sub_100038E64()
{
  return sub_100038DF0( (uint64_t)&type metadata for UInt64,  (uint64_t (*)(unint64_t, void, void, uint64_t))sub_1000314C0);
}

uint64_t sub_100038E7C()
{
  return sub_100038DF0( (uint64_t)&unk_10099D5E0,  (uint64_t (*)(unint64_t, void, void, uint64_t))sub_100031424);
}

uint64_t sub_100038E94()
{
  return sub_100038DF0( (uint64_t)&type metadata for AllMacBeaconConfigs,  (uint64_t (*)(unint64_t, void, void, uint64_t))sub_1000314C0);
}

uint64_t sub_100038EAC(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  sub_100012ED8(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 448))(v1, v2);
}

uint64_t sub_100038EF8()
{
  return sub_100038DF0( (uint64_t)&unk_10099D5F8,  (uint64_t (*)(unint64_t, void, void, uint64_t))sub_100031424);
}

uint64_t sub_100038F0C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100012ED8(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 440))(v3, v4);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_100038F60()
{
  return sub_100038DF0( (uint64_t)&unk_10099D720,  (uint64_t (*)(unint64_t, void, void, uint64_t))sub_100031424);
}

uint64_t sub_100038F74(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  sub_100012ED8(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 432))(v1, v2);
}

uint64_t sub_100038FC0()
{
  return sub_100038DF0( (uint64_t)&qword_10099D8A0,  (uint64_t (*)(unint64_t, void, void, uint64_t))sub_100031424);
}

uint64_t sub_100038FD8()
{
  return sub_100038DF0( (uint64_t)&unk_10099D618,  (uint64_t (*)(unint64_t, void, void, uint64_t))sub_100031424);
}

uint64_t sub_100038FF0()
{
  uint64_t v1 = *(void *)(sub_100004AEC(&qword_1009A0840) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_100031394(v0 + v2, *(void *)(v0 + v3), *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100039044()
{
  return sub_100038DF0( (uint64_t)&unk_10099D630,  (uint64_t (*)(unint64_t, void, void, uint64_t))sub_100031424);
}

uint64_t sub_10003905C()
{
  return sub_100038DF0( (uint64_t)&unk_10099D640,  (uint64_t (*)(unint64_t, void, void, uint64_t))sub_100031424);
}

uint64_t sub_100039074()
{
  return sub_100038DF0( (uint64_t)&type metadata for Int,  (uint64_t (*)(unint64_t, void, void, uint64_t))sub_1000314C0);
}

uint64_t sub_10003908C()
{
  return sub_100038DF0( (uint64_t)&type metadata for String,  (uint64_t (*)(unint64_t, void, void, uint64_t))sub_1000314C0);
}

uint64_t sub_1000390A4()
{
  return sub_100038DF0( (uint64_t)&unk_1009AED50,  (uint64_t (*)(unint64_t, void, void, uint64_t))sub_100031424);
}

uint64_t sub_1000390BC()
{
  return sub_100038DF0( (uint64_t)&type metadata for Bool,  (uint64_t (*)(unint64_t, void, void, uint64_t))sub_1000314C0);
}

uint64_t sub_1000390D4()
{
  return sub_100038DF0( (uint64_t)&type metadata for Double,  (uint64_t (*)(unint64_t, void, void, uint64_t))sub_1000314C0);
}

uint64_t sub_1000390EC()
{
  return sub_100038DF0( (uint64_t)&type metadata for UInt,  (uint64_t (*)(unint64_t, void, void, uint64_t))sub_1000314C0);
}

uint64_t sub_100039100@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *a1 = v3;
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_100039150()
{
  uint64_t v1 = sub_100004AEC(&qword_1009A0840);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_release(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1000391E0()
{
  return sub_100038DF0( (uint64_t)&type metadata for Data,  (uint64_t (*)(unint64_t, void, void, uint64_t))sub_1000314C0);
}

uint64_t sub_1000391F8()
{
  return swift_deallocObject(v0, 25LL, 7LL);
}

uint64_t sub_10003921C()
{
  return sub_100026114(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24));
}

unint64_t sub_100039228()
{
  unint64_t result = qword_10099D680;
  if (!qword_10099D680)
  {
    unint64_t result = swift_getWitnessTable(&unk_100814034, &type metadata for Configuration);
    atomic_store(result, (unint64_t *)&qword_10099D680);
  }

  return result;
}

unint64_t sub_10003926C()
{
  unint64_t result = qword_10099D688;
  if (!qword_10099D688)
  {
    unint64_t result = swift_getWitnessTable(&unk_10081400C, &type metadata for Configuration);
    atomic_store(result, (unint64_t *)&qword_10099D688);
  }

  return result;
}

uint64_t sub_1000392B0()
{
  return sub_10003154C( *(_BYTE *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(unsigned __int8 *)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56));
}

uint64_t sub_1000392D8()
{
  return sub_100025944(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000392E4()
{
  if (*(void *)(v0 + 16)) {
    swift_release(*(void *)(v0 + 24));
  }
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100039310()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SystemInfoDynamic.MeDeviceState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

uint64_t storeEnumTagSinglePayload for ConfigurationCoordinator.ConfigurationSource( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_100039414 + 4 * byte_1007E49A9[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100039448 + 4 * byte_1007E49A4[v4]))();
}

uint64_t sub_100039448(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100039450(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100039458LL);
  }
  return result;
}

uint64_t sub_100039464(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10003946CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_100039470(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100039478(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConfigurationCoordinator.ConfigurationSource()
{
  return &type metadata for ConfigurationCoordinator.ConfigurationSource;
}

unint64_t sub_100039498()
{
  unint64_t result = qword_10099D6A0;
  if (!qword_10099D6A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E679C, &type metadata for ConfigurationCoordinator.ConfigurationSource);
    atomic_store(result, (unint64_t *)&qword_10099D6A0);
  }

  return result;
}

unint64_t sub_1000394DC(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100932C28, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5) {
    return 5LL;
  }
  else {
    return v3;
  }
}

unint64_t sub_100039524()
{
  unint64_t result = qword_10099D6B0;
  if (!qword_10099D6B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E6764, &type metadata for ConfigurationCoordinator.ConfigurationSource);
    atomic_store(result, (unint64_t *)&qword_10099D6B0);
  }

  return result;
}

void sub_100039634(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v5);
  uint64_t v90 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v91 = type metadata accessor for Date(0LL);
  uint64_t v89 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  uint64_t v88 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v81 - v12;
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v15 = *(void **)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v92 = (char *)&v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v93 = (char *)&v81 - v19;
  uint64_t v20 = CKRecord.recordType.getter(v18);
  if (v20 == 0xD000000000000012LL && v21 == 0x80000001007E6870LL)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, 0xD000000000000012LL, 0x80000001007E6870LL, 0LL);
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {
      unint64_t v56 = sub_10003AC60();
      uint64_t v31 = swift_allocError(&type metadata for KeyAlignmentRecord.KeyAlignmentRecordConversionError, v56, 0LL, 0LL);
      *unsigned int v57 = 0;
      goto LABEL_14;
    }
  }

  uint64_t v87 = v2;
  id v23 = [a1 recordID];
  id v24 = [v23 recordName];

  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  uint64_t v94 = v15;
  uint64_t v27 = v26;

  UUID.init(uuidString:)(v25, v27);
  unint64_t v28 = v94;
  swift_bridgeObjectRelease();
  uint64_t v29 = (unsigned int (*)(char *, uint64_t, uint64_t))v28[6];
  if (v29(v13, 1LL, v14) == 1)
  {
    sub_100015794((uint64_t)v13, &qword_10099D8A0);
    unint64_t v30 = sub_10003AC60();
    uint64_t v31 = swift_allocError(&type metadata for KeyAlignmentRecord.KeyAlignmentRecordConversionError, v30, 0LL, 0LL);
    *uint64_t v32 = 2;
LABEL_14:
    swift_willThrow(v31);

    return;
  }

  char v84 = (void (*)(char *, char *, uint64_t))v28[4];
  v84(v93, v13, v14);
  uint64_t v83 = type metadata accessor for KeyAlignmentRecord(0LL);
  uint64_t v33 = (void (*)(void))v28[2];
  uint64_t v85 = (char *)a2 + *(int *)(v83 + 20);
  uint64_t v86 = v14;
  v33();
  uint64_t v34 = objc_autoreleasePoolPush();
  id v35 = [objc_allocWithZone(NSKeyedArchiver) initRequiringSecureCoding:1];
  [a1 encodeSystemFieldsWithCoder:v35];
  [v35 finishEncoding];
  id v36 = [v35 encodedData];
  uint64_t v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v36);
  uint64_t v38 = a2;
  uint64_t v40 = v39;

  objc_autoreleasePoolPop(v34);
  *uint64_t v38 = v37;
  v38[1] = v40;
  uint64_t v41 = v38;
  id v42 = [a1 encryptedValues];
  NSString v43 = String._bridgeToObjectiveC()();
  id v44 = [v42 objectForKeyedSubscript:v43];

  if (!v44
    || (uint64_t v96 = (uint64_t)v44,
        uint64_t v45 = sub_100004AEC((uint64_t *)&unk_10099D910),
        (swift_dynamicCast(v95, &v96, v45, &type metadata for String, 6LL) & 1) == 0))
  {
    unint64_t v52 = sub_10003AC60();
    uint64_t v53 = swift_allocError(&type metadata for KeyAlignmentRecord.KeyAlignmentRecordConversionError, v52, 0LL, 0LL);
    *uint64_t v54 = 3;
    swift_willThrow(v53);
    swift_unknownObjectRelease(v42);

    uint64_t v50 = (void (*)(char *, uint64_t))v94[1];
    uint64_t v51 = v41;
    uint64_t v46 = v86;
    goto LABEL_12;
  }

  UUID.init(uuidString:)(v95[0], v95[1]);
  swift_bridgeObjectRelease();
  uint64_t v46 = v86;
  if (v29(v11, 1LL, v86) == 1)
  {
    sub_100015794((uint64_t)v11, &qword_10099D8A0);
    unint64_t v47 = sub_10003AC60();
    uint64_t v48 = swift_allocError(&type metadata for KeyAlignmentRecord.KeyAlignmentRecordConversionError, v47, 0LL, 0LL);
    *uint64_t v49 = 4;
    swift_willThrow(v48);
    swift_unknownObjectRelease(v42);

    uint64_t v50 = (void (*)(char *, uint64_t))v94[1];
    uint64_t v51 = v41;
LABEL_12:
    unint64_t v55 = v85;
    v50(v93, v46);
    sub_100016F9C(*v51, v51[1]);
    v50(v55, v46);
    return;
  }

  double v58 = v42;
  uint64_t v59 = v92;
  v84(v92, v11, v46);
  NSString v60 = String._bridgeToObjectiveC()();
  id v82 = v58;
  id v61 = [v58 objectForKeyedSubscript:v60];

  if (!v61 || (v95[0] = v61, uint64_t v62 = swift_dynamicCast(&v96, v95, v45, &type metadata for UInt64, 6LL), (v62 & 1) == 0))
  {
LABEL_22:
    uint64_t v73 = static os_log_type_t.error.getter(v62);
    uint64_t v74 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v75 = swift_allocObject(v74, 72LL, 7LL);
    *(_OWORD *)(v75 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v75 + 56) = sub_100022898(0LL, (unint64_t *)&qword_10099D920, &OBJC_CLASS___CKRecord_ptr);
    *(void *)(v75 + 64) = sub_100022738();
    *(void *)(v75 + 32) = a1;
    sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
    id v76 = a1;
    uint64_t v77 = (void *)static OS_os_log.default.getter(v76);
    os_log(_:dso:log:_:_:)(v73, &_mh_execute_header, v77, "Invalid KeyAlignmentRecord - %@", 31LL, 2LL, v75);
    swift_bridgeObjectRelease();

    unint64_t v78 = sub_10003AC60();
    uint64_t v79 = swift_allocError(&type metadata for KeyAlignmentRecord.KeyAlignmentRecordConversionError, v78, 0LL, 0LL);
    _BYTE *v80 = 5;
    swift_willThrow(v79);
    swift_unknownObjectRelease(v82);

    uint64_t v50 = (void (*)(char *, uint64_t))v94[1];
    v50(v59, v46);
    uint64_t v51 = v41;
    goto LABEL_12;
  }

  uint64_t v63 = v96;
  NSString v64 = String._bridgeToObjectiveC()();
  id v65 = [v82 objectForKeyedSubscript:v64];

  if (!v65)
  {
    uint64_t v67 = (uint64_t)v90;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v89 + 56))(v90, 1LL, 1LL, v91);
    goto LABEL_21;
  }

  v95[0] = v65;
  uint64_t v67 = (uint64_t)v90;
  uint64_t v66 = v91;
  int v68 = swift_dynamicCast(v90, v95, v45, v91, 6LL);
  uint64_t v69 = v89;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v89 + 56))(v67, v68 ^ 1u, 1LL, v66);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v67, 1LL, v66) == 1)
  {
LABEL_21:
    uint64_t v62 = sub_100015794(v67, (uint64_t *)&unk_10099D720);
    goto LABEL_22;
  }

  swift_unknownObjectRelease(v82);

  ((void (*)(char *, uint64_t))v94[1])(v93, v46);
  uint64_t v70 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 32);
  uint64_t v71 = v88;
  v70(v88, v67, v66);
  uint64_t v72 = v83;
  v84((char *)v41 + *(int *)(v83 + 24), v59, v46);
  *(uint64_t *)((char *)v41 + *(int *)(v72 + 28)) = v63;
  v70((char *)v41 + *(int *)(v72 + 32), (uint64_t)v71, v66);
}

uint64_t sub_100039E68()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000A8AC(v2, qword_100A29EF0);
  sub_10000A720(v0, (uint64_t)qword_100A29EF0);
  type metadata accessor for BeaconStore(0LL);
  sub_1004E6208((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000013LL, 0x8000000100851710LL, 1LL);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_100039F38(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100039F70 + 4 * byte_1007E67E0[a1]))( 0xD000000000000010LL,  0x800000010084DE70LL);
}

uint64_t sub_100039F70()
{
  return 0x696669746E656469LL;
}

  ;
}

uint64_t sub_100039FC8()
{
  return sub_100039F38(*v0);
}

uint64_t sub_100039FD0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10003AD48(a1, a2);
  *a3 = result;
  return result;
}

void sub_100039FF4(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_10003A000(uint64_t a1)
{
  unint64_t v2 = sub_10003AB9C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003A028(uint64_t a1)
{
  unint64_t v2 = sub_10003AB9C();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_10003A050(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v8, v3, v4);
  dispatch thunk of Hashable.hash(into:)(v8, v3, v4);
  Hasher._combine(_:)(*(void *)((char *)v1 + *(int *)(a1 + 28)));
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v8, v5, v6);
  return Hasher._finalize()();
}

uint64_t sub_10003A154(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v5, v6);
  dispatch thunk of Hashable.hash(into:)(a1, v5, v6);
  Hasher._combine(_:)(*(void *)((char *)v2 + *(int *)(a2 + 28)));
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  return dispatch thunk of Hashable.hash(into:)(a1, v7, v8);
}

Swift::Int sub_10003A23C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v9, v4, v5);
  dispatch thunk of Hashable.hash(into:)(v9, v4, v5);
  Hasher._combine(_:)(*(void *)((char *)v2 + *(int *)(a2 + 28)));
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v9, v6, v7);
  return Hasher._finalize()();
}

uint64_t sub_10003A34C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_10099D700);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_10003AB9C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for KeyAlignmentRecord.CodingKeys,  &type metadata for KeyAlignmentRecord.CodingKeys,  v11,  v9,  v10);
  __int128 v23 = *v3;
  char v24 = 0;
  unint64_t v12 = sub_1000170A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v24, v5, &type metadata for Data, v12);
  if (!v2)
  {
    uint64_t v13 = (int *)type metadata accessor for KeyAlignmentRecord(0LL);
    uint64_t v14 = (char *)v3 + v13[5];
    LOBYTE(v23) = 1;
    uint64_t v15 = type metadata accessor for UUID(0LL);
    uint64_t v16 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v23, v5, v15, v16);
    uint64_t v17 = (char *)v3 + v13[6];
    LOBYTE(v23) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v23, v5, v15, v16);
    uint64_t v18 = *(void *)((char *)v3 + v13[7]);
    LOBYTE(v23) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, &v23, v5);
    uint64_t v19 = (char *)v3 + v13[8];
    LOBYTE(v23) = 4;
    uint64_t v20 = type metadata accessor for Date(0LL);
    uint64_t v21 = sub_100007864( &qword_10099DA40,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v23, v5, v20, v21);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10003A588@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v35 = type metadata accessor for Date(0LL);
  uint64_t v33 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  id v36 = (uint64_t *)((char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v38 = type metadata accessor for UUID(0LL);
  uint64_t v40 = *(void *)(v38 - 8);
  uint64_t v4 = __chkstk_darwin(v38);
  uint64_t v37 = (uint64_t *)((char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v31 - v6);
  uint64_t v39 = sub_100004AEC(&qword_10099D6D8);
  uint64_t v8 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = (int *)type metadata accessor for KeyAlignmentRecord(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  sub_100012ED8(a1, v14);
  unint64_t v16 = sub_10003AB9C();
  uint64_t v41 = v10;
  uint64_t v17 = v42;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for KeyAlignmentRecord.CodingKeys,  &type metadata for KeyAlignmentRecord.CodingKeys,  v16,  v14,  v15);
  if (v17) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v32 = v8;
  id v42 = a1;
  uint64_t v18 = v13;
  uint64_t v19 = v40;
  uint64_t v20 = v38;
  char v44 = 0;
  unint64_t v21 = sub_100016FE0();
  uint64_t v22 = v39;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for Data, &v44, v39, &type metadata for Data, v21);
  *(_OWORD *)uint64_t v18 = v43;
  LOBYTE(v43) = 1;
  uint64_t v31 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v7, v20, &v43, v22, v20, v31);
  __int128 v23 = *(void (**)(char *, void *, uint64_t))(v19 + 32);
  v23(&v18[v11[5]], v7, v20);
  LOBYTE(v43) = 2;
  char v24 = v37;
  uint64_t v25 = v31;
  uint64_t v31 = 0LL;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v37, v20, &v43, v22, v20, v25);
  ((void (*)(char *, void *))v23)(&v18[v11[6]], v24);
  LOBYTE(v43) = 3;
  *(void *)&v18[v11[7]] = KeyedDecodingContainer.decode(_:forKey:)(&v43, v22);
  LOBYTE(v43) = 4;
  uint64_t v26 = sub_100007864( &qword_10099DA70,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v27 = v22;
  uint64_t v28 = v35;
  uint64_t v29 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v36, v35, &v43, v27, v35, v26);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v41, v39);
  (*(void (**)(char *, void *, uint64_t))(v33 + 32))(&v18[v11[8]], v29, v28);
  sub_10003ABE0((uint64_t)v18, v34);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
  return sub_10003AC24((uint64_t)v18);
}

void sub_10003AA04()
{
  uint64_t v0 = objc_autoreleasePoolPush();
  if (qword_10099B070 != -1) {
    swift_once(&qword_10099B070, sub_100039E68);
  }
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A29EF0);
  uint64_t v3 = UUID.uuidString.getter(v2);
  URL.appendingPathComponent(_:)(v3, v4);
  swift_bridgeObjectRelease();
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_10003AAA0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10003A588(a1, a2);
}

uint64_t sub_10003AAB4(void *a1)
{
  return sub_10003A34C(a1);
}

uint64_t sub_10003AAC8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100007864( &qword_10099D6C0,  type metadata accessor for KeyAlignmentRecord,  (uint64_t)&unk_1007E6824);
  uint64_t result = sub_100007864(&qword_10099D6C8, type metadata accessor for KeyAlignmentRecord, (uint64_t)&unk_1007E67FC);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

uint64_t type metadata accessor for KeyAlignmentRecord(uint64_t a1)
{
  uint64_t result = qword_10099D7C8;
  if (!qword_10099D7C8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KeyAlignmentRecord);
  }
  return result;
}

uint64_t sub_10003AB60(uint64_t a1)
{
  uint64_t result = sub_100007864(&qword_10099D6D0, type metadata accessor for KeyAlignmentRecord, (uint64_t)&unk_1007E684C);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10003AB9C()
{
  unint64_t result = qword_10099D6E0;
  if (!qword_10099D6E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E6AC0, &type metadata for KeyAlignmentRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099D6E0);
  }

  return result;
}

uint64_t sub_10003ABE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KeyAlignmentRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003AC24(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for KeyAlignmentRecord(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_10003AC60()
{
  unint64_t result = qword_10099D730;
  if (!qword_10099D730)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007E6A80,  &type metadata for KeyAlignmentRecord.KeyAlignmentRecordConversionError);
    atomic_store(result, (unint64_t *)&qword_10099D730);
  }

  return result;
}

uint64_t sub_10003ACA4(uint64_t *a1, uint64_t a2)
{
  if ((v4 & 1) != 0
    && (uint64_t v5 = (int *)type metadata accessor for KeyAlignmentRecord(0LL),
        (static UUID.== infix(_:_:)((char *)a1 + v5[5], a2 + v5[5]) & 1) != 0)
    && (static UUID.== infix(_:_:)((char *)a1 + v5[6], a2 + v5[6]) & 1) != 0
    && *(uint64_t *)((char *)a1 + v5[7]) == *(void *)(a2 + v5[7]))
  {
    return static Date.== infix(_:_:)((char *)a1 + v5[8], a2 + v5[8]);
  }

  else
  {
    return 0LL;
  }

uint64_t sub_10003AD48(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x800000010084DE70LL;
    if (a2 == 0x800000010084DE70LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010084DE70LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v6 = 0xEA00000000007265LL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_11;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v7 = 0x800000010084D8A0LL;
    if (a2 == 0x800000010084D8A0LL) {
      goto LABEL_16;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010084D8A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if (a1 == 0xD000000000000011LL && a2 == 0x8000000100851730LL)
  {
    unint64_t v8 = 0x8000000100851730LL;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x8000000100851730LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_22;
  }

  if (a1 == 0xD000000000000018LL && a2 == 0x8000000100851770LL)
  {
    swift_bridgeObjectRelease(0x8000000100851770LL);
    return 4LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x8000000100851770LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

uint64_t sub_10003AF4C(uint64_t a1, id *a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v60 = *(void *)(v4 - 8);
  id v61 = (void *)v4;
  __chkstk_darwin(v4);
  uint64_t v53 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v55 = sub_100004AEC((uint64_t *)&unk_10099D760);
  __chkstk_darwin(v55);
  uint64_t v58 = (uint64_t)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v54 = (uint64_t)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v56 = (const char **)((char *)&v52 - v11);
  __chkstk_darwin(v10);
  uint64_t v57 = (uint64_t)&v52 - v12;
  uint64_t v13 = type metadata accessor for KeyAlignmentRecord(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v16 = [*a2 encryptedValues];
  uint64_t ObjectType = swift_getObjectType(v16);
  uint64_t v59 = v13;
  uint64_t v62 = a1;
  uint64_t v18 = UUID.uuidString.getter(ObjectType);
  uint64_t v20 = v19;
  CKRecordKeyValueSetting.subscript.getter( &v63,  0xD000000000000010LL,  0x800000010084D8A0LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  if (!v64)
  {
    uint64_t v21 = swift_bridgeObjectRelease();
LABEL_7:
    uint64_t v23 = UUID.uuidString.getter(v21);
    id v65 = &type metadata for String;
    uint64_t v66 = &protocol witness table for String;
    uint64_t v63 = v23;
    uint64_t v64 = v24;
    CKRecordKeyValueSetting.subscript.setter(&v63, 0xD000000000000010LL, 0x800000010084D8A0LL, ObjectType);
    goto LABEL_8;
  }

  if (v18 == v63 && v64 == v20)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }

  char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v63, v64, 0LL);
  swift_bridgeObjectRelease();
  uint64_t v21 = swift_bridgeObjectRelease();
  if ((v22 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v25 = v59;
  uint64_t v26 = *(int *)(v59 + 28);
  uint64_t v27 = v62;
  uint64_t v28 = *(void *)(v62 + v26);
  uint64_t v29 = "KeyAlignmentRecords";
  CKRecordKeyValueSetting.subscript.getter( &v63,  0xD000000000000011LL,  0x8000000100851730LL,  ObjectType,  &type metadata for UInt64,  &protocol witness table for UInt64);
  if ((v64 & 1) != 0)
  {
    sub_10003ABE0(v27, (uint64_t)v15);
LABEL_14:
    sub_10003AC24((uint64_t)v15);
LABEL_15:
    uint64_t v39 = v62;
    uint64_t v40 = *(void *)(v62 + v26);
    uint64_t v66 = &protocol witness table for UInt64;
    id v65 = &type metadata for UInt64;
    uint64_t v63 = v40;
    CKRecordKeyValueSetting.subscript.setter( &v63,  0xD000000000000011LL,  (unint64_t)v29 | 0x8000000000000000LL,  ObjectType);
    uint64_t v41 = v39 + *(int *)(v25 + 32);
    id v42 = v61;
    id v65 = v61;
    uint64_t v66 = &protocol witness table for Date;
    __int128 v43 = sub_10000A7C8(&v63);
    (*(void (**)(void *, uint64_t, void *))(v60 + 16))(v43, v41, v42);
    CKRecordKeyValueSetting.subscript.setter(&v63, 0xD000000000000018LL, 0x8000000100851770LL, ObjectType);
    return swift_unknownObjectRelease(v16);
  }

  uint64_t v30 = v63;
  sub_10003ABE0(v27, (uint64_t)v15);
  if (v28 != v30) {
    goto LABEL_14;
  }
  unint64_t v52 = "KeyAlignmentRecords";
  uint64_t v32 = v60;
  uint64_t v31 = v61;
  uint64_t v33 = v57;
  (*(void (**)(uint64_t, char *, void *))(v60 + 16))(v57, &v15[*(int *)(v25 + 32)], v61);
  (*(void (**)(uint64_t, void, uint64_t, void *))(v32 + 56))(v33, 0LL, 1LL, v31);
  uint64_t v34 = v56;
  CKRecordKeyValueSetting.subscript.getter( v56,  0xD000000000000018LL,  0x8000000100851770LL,  ObjectType,  v31,  &protocol witness table for Date);
  uint64_t v35 = v58;
  uint64_t v36 = v58 + *(int *)(v55 + 48);
  sub_10000A824(v33, v58);
  uint64_t v55 = v36;
  sub_10000A824((uint64_t)v34, v36);
  uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, void *))(v32 + 48);
  if (v37(v35, 1LL, v31) != 1)
  {
    uint64_t v45 = v58;
    uint64_t v46 = v54;
    sub_10000A824(v58, v54);
    uint64_t v47 = v55;
    int v48 = v37(v55, 1LL, v31);
    uint64_t v29 = v52;
    if (v48 != 1)
    {
      uint64_t v49 = v53;
      (*(void (**)(char *, uint64_t, void *))(v60 + 32))(v53, v47, v31);
      uint64_t v50 = sub_100007864( &qword_10099DA90,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      LODWORD(v55) = dispatch thunk of static Equatable.== infix(_:_:)(v46, v49, v31, v50);
      uint64_t v51 = *(void (**)(char *, void *))(v60 + 8);
      v51(v49, v31);
      sub_100015794((uint64_t)v56, (uint64_t *)&unk_10099D720);
      sub_100015794(v57, (uint64_t *)&unk_10099D720);
      sub_10003AC24((uint64_t)v15);
      v51((char *)v46, v31);
      sub_100015794(v45, (uint64_t *)&unk_10099D720);
      uint64_t v25 = v59;
      if ((v55 & 1) != 0) {
        return swift_unknownObjectRelease(v16);
      }
      goto LABEL_15;
    }

    sub_100015794((uint64_t)v56, (uint64_t *)&unk_10099D720);
    sub_100015794(v57, (uint64_t *)&unk_10099D720);
    sub_10003AC24((uint64_t)v15);
    (*(void (**)(uint64_t, void *))(v60 + 8))(v46, v61);
    goto LABEL_19;
  }

  sub_100015794((uint64_t)v34, (uint64_t *)&unk_10099D720);
  sub_100015794(v33, (uint64_t *)&unk_10099D720);
  sub_10003AC24((uint64_t)v15);
  int v38 = v37(v55, 1LL, v61);
  uint64_t v29 = v52;
  if (v38 != 1)
  {
LABEL_19:
    sub_100015794(v58, (uint64_t *)&unk_10099D760);
    uint64_t v25 = v59;
    goto LABEL_15;
  }

  sub_100015794(v58, (uint64_t *)&unk_10099D720);
  return swift_unknownObjectRelease(v16);
}

uint64_t storeEnumTagSinglePayload for KeyAlignmentRecord.KeyAlignmentRecordConversionError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_10003B5AC + 4 * byte_1007E67EA[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10003B5E0 + 4 * byte_1007E67E5[v4]))();
}

uint64_t sub_10003B5E0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003B5E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10003B5F0LL);
  }
  return result;
}

uint64_t sub_10003B5FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10003B604LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_10003B608(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003B610(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyAlignmentRecord.KeyAlignmentRecordConversionError()
{
  return &type metadata for KeyAlignmentRecord.KeyAlignmentRecordConversionError;
}

uint64_t storeEnumTagSinglePayload for KeyAlignmentRecord.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10003B678 + 4 * byte_1007E67F4[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10003B6AC + 4 * byte_1007E67EF[v4]))();
}

uint64_t sub_10003B6AC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003B6B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10003B6BCLL);
  }
  return result;
}

uint64_t sub_10003B6C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10003B6D0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10003B6D4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003B6DC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyAlignmentRecord.CodingKeys()
{
  return &type metadata for KeyAlignmentRecord.CodingKeys;
}

uint64_t *sub_10003B6F8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v18);
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_10001736C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID(0LL);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
    v13(v10, v11, v12);
    v13((char *)a1 + a3[6], (char *)a2 + a3[6], v12);
    uint64_t v14 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    uint64_t v15 = (char *)a1 + v14;
    id v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16LL))(v15, v16, v17);
  }

  return a1;
}

uint64_t sub_10003B7F0(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v6(v4, v5);
  v6(a1 + a2[6], v5);
  uint64_t v7 = a1 + a2[8];
  uint64_t v8 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
}

uint64_t *sub_10003B884(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], (char *)a2 + a3[6], v11);
  uint64_t v13 = a3[8];
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16LL))(v14, v15, v16);
  return a1;
}

uint64_t *sub_10003B950(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100016F9C(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24LL);
  v14(v11, v12, v13);
  v14((char *)a1 + a3[6], (char *)a2 + a3[6], v13);
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  uint64_t v15 = a3[8];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 24LL))(v16, v17, v18);
  return a1;
}

char *sub_10003BA28(char *a1, char *a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  uint64_t v11 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32LL))(v12, v13, v14);
  return a1;
}

uint64_t *sub_10003BAE8(uint64_t *a1, char *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016F9C(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], &a2[a3[6]], v11);
  uint64_t v13 = a3[8];
  *(uint64_t *)((char *)a1 + a3[7]) = *(void *)&a2[a3[7]];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 40LL))(v14, v15, v16);
  return a1;
}

uint64_t sub_10003BBB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003BBC0);
}

uint64_t sub_10003BBC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0) {
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = type metadata accessor for UUID(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 20);
    }

    else
    {
      uint64_t v10 = type metadata accessor for Date(0LL);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 32);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t sub_10003BC6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003BC78);
}

char *sub_10003BC78(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)unint64_t result = 0LL;
    *((void *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }

  else
  {
    uint64_t v8 = type metadata accessor for UUID(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 20);
    }

    else
    {
      uint64_t v10 = type metadata accessor for Date(0LL);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 32);
    }

    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }

  return result;
}

uint64_t sub_10003BD1C(uint64_t a1)
{
  uint64_t v5 = &unk_1007E68E0;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v6 = *(void *)(result - 8) + 64LL;
    uint64_t v7 = v6;
    uint64_t v8 = (char *)&value witness table for Builtin.Int64 + 64;
    uint64_t result = type metadata accessor for Date(319LL);
    if (v4 <= 0x3F)
    {
      uint64_t v9 = *(void *)(result - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 5LL, &v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10003BDBC()
{
  return sub_100007864(&qword_10099D810, type metadata accessor for KeyAlignmentRecord, (uint64_t)&unk_1007E6A58);
}

unint64_t sub_10003BDEC()
{
  unint64_t result = qword_10099D818;
  if (!qword_10099D818)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E69C8, &type metadata for KeyAlignmentRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099D818);
  }

  return result;
}

unint64_t sub_10003BE34()
{
  unint64_t result = qword_10099D820;
  if (!qword_10099D820)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007E6A30,  &type metadata for KeyAlignmentRecord.KeyAlignmentRecordConversionError);
    atomic_store(result, (unint64_t *)&qword_10099D820);
  }

  return result;
}

unint64_t sub_10003BE7C()
{
  unint64_t result = qword_10099D828;
  if (!qword_10099D828)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E6938, &type metadata for KeyAlignmentRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099D828);
  }

  return result;
}

unint64_t sub_10003BEC4()
{
  unint64_t result = qword_10099D830;
  if (!qword_10099D830)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E6960, &type metadata for KeyAlignmentRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099D830);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for OwnSubmitPayloadTypes.Mode( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10003BF64 + 4 * byte_1007E6B25[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10003BF98 + 4 * byte_1007E6B20[v4]))();
}

uint64_t sub_10003BF98(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003BFA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10003BFA8LL);
  }
  return result;
}

uint64_t sub_10003BFB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10003BFBCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10003BFC0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003BFC8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnSubmitPayloadTypes.Mode()
{
  return &type metadata for OwnSubmitPayloadTypes.Mode;
}

uint64_t storeEnumTagSinglePayload for OwnSubmitPayloadTypes.ShareType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10003C030 + 4 * byte_1007E6B2F[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10003C064 + 4 * byte_1007E6B2A[v4]))();
}

uint64_t sub_10003C064(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003C06C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10003C074LL);
  }
  return result;
}

uint64_t sub_10003C080(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10003C088LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10003C08C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003C094(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnSubmitPayloadTypes.ShareType()
{
  return &type metadata for OwnSubmitPayloadTypes.ShareType;
}

ValueMetadata *type metadata accessor for OwnSubmitPayloadTypes()
{
  return &type metadata for OwnSubmitPayloadTypes;
}

uint64_t getEnumTagSinglePayload for OwnSubmitPayloadTypes.KeyType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

uint64_t storeEnumTagSinglePayload for OwnSubmitPayloadTypes.KeyType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10003C19C + 4 * byte_1007E6B39[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10003C1D0 + 4 * byte_1007E6B34[v4]))();
}

uint64_t sub_10003C1D0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003C1D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10003C1E0LL);
  }
  return result;
}

uint64_t sub_10003C1EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10003C1F4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10003C1F8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003C200(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnSubmitPayloadTypes.KeyType()
{
  return &type metadata for OwnSubmitPayloadTypes.KeyType;
}

uint64_t sub_10003C21C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100307F98(*a1, *a2);
}

Swift::Int sub_10003C228()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v7, 0LL);
  unint64_t v2 = 0xE600000000000000LL;
  uint64_t v3 = 0x646572616873LL;
  if (v1 != 1)
  {
    uint64_t v3 = 6448503LL;
    unint64_t v2 = 0xE300000000000000LL;
  }

  if (v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0x72656E776FLL;
  }
  if (v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xE500000000000000LL;
  }
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_10003C2B8(uint64_t a1)
{
  unint64_t v2 = 0xE600000000000000LL;
  uint64_t v3 = 0x646572616873LL;
  if (*v1 != 1)
  {
    uint64_t v3 = 6448503LL;
    unint64_t v2 = 0xE300000000000000LL;
  }

  if (*v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0x72656E776FLL;
  }
  if (*v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xE500000000000000LL;
  }
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10003C324(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  unint64_t v3 = 0xE600000000000000LL;
  uint64_t v4 = 0x646572616873LL;
  if (v2 != 1)
  {
    uint64_t v4 = 6448503LL;
    unint64_t v3 = 0xE300000000000000LL;
  }

  if (v2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0x72656E776FLL;
  }
  if (v2) {
    unint64_t v6 = v3;
  }
  else {
    unint64_t v6 = 0xE500000000000000LL;
  }
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_10003C3B0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10003CC04(*a1);
  *a2 = result;
  return result;
}

void sub_10003C3DC(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE500000000000000LL;
  unint64_t v4 = 0xE600000000000000LL;
  uint64_t v5 = 0x646572616873LL;
  if (v2 != 1)
  {
    uint64_t v5 = 6448503LL;
    unint64_t v4 = 0xE300000000000000LL;
  }

  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x72656E776FLL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_10003C42C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10003CBC0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10003C488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10003CBC0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

Swift::Int sub_10003C4D4()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10003C518()
{
}

Swift::Int sub_10003C540(uint64_t a1)
{
  Swift::UInt8 v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10003C580@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10003CC4C(*a1);
  *a2 = result;
  return result;
}

void sub_10003C5A8(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

unint64_t sub_10003C5B8()
{
  unint64_t result = qword_10099D850;
  if (!qword_10099D850)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E6C78, &type metadata for OwnSubmitPayloadTypes.KeyType);
    atomic_store(result, (unint64_t *)&qword_10099D850);
  }

  return result;
}

unint64_t sub_10003C600()
{
  unint64_t result = qword_10099D858;
  if (!qword_10099D858)
  {
    uint64_t v1 = sub_100004B78(&qword_10099D860);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10099D858);
  }

  return result;
}

uint64_t sub_10003C64C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10003CB38();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10003C6A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10003CB38();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_10003C6F4(char *a1)
{
}

void sub_10003C700()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v2, 0LL);
  __asm { BR              X9 }

Swift::Int sub_10003C744()
{
  return Hasher._finalize()();
}

void sub_10003C7C8()
{
  __asm { BR              X10 }

uint64_t sub_10003C7FC(uint64_t a1)
{
  return swift_bridgeObjectRelease(v1);
}

void sub_10003C86C(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }

Swift::Int sub_10003C8AC()
{
  return Hasher._finalize()();
}

unint64_t sub_10003C930@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10003CC60(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10003C95C()
{
  return ((uint64_t (*)(void))((char *)sub_10003C984 + 4 * byte_1007E6B4D[*v0]))();
}

void sub_10003C984(void *a1@<X8>)
{
  *a1 = 1936094325LL;
  a1[1] = v1;
}

void sub_10003C994(void *a1@<X8>)
{
  *a1 = 0x63616542666C6573LL;
  a1[1] = 0xEA00000000006E6FLL;
}

void sub_10003C9B4(void *a1@<X8>)
{
  *a1 = 0x6F4C657275636573LL;
  a1[1] = 0xEF736E6F69746163LL;
}

void sub_10003C9DC(void *a1@<X8>)
{
  *a1 = 6448503LL;
  a1[1] = 0xE300000000000000LL;
}

uint64_t sub_10003C9F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10003CB7C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10003CA4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10003CB7C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_10003CA98(void *a1@<X8>)
{
  *a1 = &off_100932DC0;
}

unint64_t sub_10003CAAC()
{
  unint64_t result = qword_10099D868;
  if (!qword_10099D868)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E6D50, &type metadata for OwnSubmitPayloadTypes.ShareType);
    atomic_store(result, (unint64_t *)&qword_10099D868);
  }

  return result;
}

unint64_t sub_10003CAF4()
{
  unint64_t result = qword_10099D870;
  if (!qword_10099D870)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E6DF0, &type metadata for OwnSubmitPayloadTypes.Mode);
    atomic_store(result, (unint64_t *)&qword_10099D870);
  }

  return result;
}

unint64_t sub_10003CB38()
{
  unint64_t result = qword_10099D878;
  if (!qword_10099D878)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E6C00, &type metadata for OwnSubmitPayloadTypes.KeyType);
    atomic_store(result, (unint64_t *)&qword_10099D878);
  }

  return result;
}

unint64_t sub_10003CB7C()
{
  unint64_t result = qword_10099D880;
  if (!qword_10099D880)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E6CD8, &type metadata for OwnSubmitPayloadTypes.ShareType);
    atomic_store(result, (unint64_t *)&qword_10099D880);
  }

  return result;
}

unint64_t sub_10003CBC0()
{
  unint64_t result = qword_10099D888;
  if (!qword_10099D888)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E6D78, &type metadata for OwnSubmitPayloadTypes.Mode);
    atomic_store(result, (unint64_t *)&qword_10099D888);
  }

  return result;
}

unint64_t sub_10003CC04(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100932CC0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10003CC4C(uint64_t result)
{
  if ((result & 0xFC) != 0) {
    return 4LL;
  }
  else {
    return result;
  }
}

unint64_t sub_10003CC60(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100932D28, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5) {
    return 5LL;
  }
  else {
    return v3;
  }
}

void sub_10003CCA8(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v134 = a2;
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_10099D890);
  __chkstk_darwin(v3);
  uint64_t v139 = (char *)&v125 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v137 = *(void *)(v5 - 8);
  uint64_t v138 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v135 = (char *)&v125 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v136 = (uint64_t)&v125 - v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v125 - v10;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v141 = v12;
  uint64_t v142 = v13;
  __chkstk_darwin(v12);
  uint64_t v140 = (char *)&v125 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v125 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v125 - v19;
  uint64_t v144 = type metadata accessor for UUID(0LL);
  uint64_t v21 = *(void *)(v144 - 8);
  uint64_t v22 = __chkstk_darwin(v144);
  uint64_t v24 = (char *)&v125 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v143 = (char *)&v125 - v26;
  id v145 = a1;
  uint64_t v27 = CKRecord.recordType.getter(v25);
  if (v27 == 0x6365526572616853LL && v28 == 0xEB0000000064726FLL)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, 0x6365526572616853LL, 0xEB0000000064726FLL, 0LL);
    swift_bridgeObjectRelease();
    if ((v29 & 1) == 0)
    {
      unint64_t v52 = sub_10003ECC4();
      uint64_t v53 = swift_allocError(&type metadata for ShareRecord.ShareRecordConversionError, v52, 0LL, 0LL);
      *uint64_t v54 = 0;
      swift_willThrow(v53);

      return;
    }
  }

  uint64_t v133 = v24;
  id v30 = v145;
  id v31 = [v145 recordID];
  id v32 = [v31 recordName];

  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  uint64_t v35 = v34;

  UUID.init(uuidString:)(v33, v35);
  swift_bridgeObjectRelease();
  uint64_t v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  uint64_t v37 = v144;
  if (v36(v20, 1LL, v144) == 1)
  {
    sub_100015794((uint64_t)v20, &qword_10099D8A0);
    unint64_t v38 = sub_10003ECC4();
    uint64_t v39 = swift_allocError(&type metadata for ShareRecord.ShareRecordConversionError, v38, 0LL, 0LL);
    *uint64_t v40 = 2;
    swift_willThrow(v39);

    return;
  }

  uint64_t v132 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  v132(v143, v20, v37);
  id v41 = [v30 encryptedValues];
  uint64_t ObjectType = swift_getObjectType(v41);
  NSString v42 = String._bridgeToObjectiveC()();
  id v43 = [v41 objectForKeyedSubscript:v42];

  if (!v43
    || (uint64_t v148 = (uint64_t)v43,
        uint64_t v44 = sub_100004AEC((uint64_t *)&unk_10099D910),
        (swift_dynamicCast(&v146, &v148, v44, &type metadata for String, 6LL) & 1) == 0))
  {
    unint64_t v49 = sub_10003ECC4();
    uint64_t v50 = swift_allocError(&type metadata for ShareRecord.ShareRecordConversionError, v49, 0LL, 0LL);
    _BYTE *v51 = 3;
    swift_willThrow(v50);
    swift_unknownObjectRelease(v41);

    (*(void (**)(char *, uint64_t))(v21 + 8))(v143, v144);
    return;
  }

  UUID.init(uuidString:)(v146, v147);
  swift_bridgeObjectRelease();
  uint64_t v45 = v144;
  if (v36(v18, 1LL, v144) == 1)
  {
    sub_100015794((uint64_t)v18, &qword_10099D8A0);
    unint64_t v46 = sub_10003ECC4();
    uint64_t v47 = swift_allocError(&type metadata for ShareRecord.ShareRecordConversionError, v46, 0LL, 0LL);
    *int v48 = 4;
    swift_willThrow(v47);
    swift_unknownObjectRelease(v41);

    (*(void (**)(char *, uint64_t))(v21 + 8))(v143, v45);
    return;
  }

  uint64_t v55 = v41;
  unint64_t v56 = v133;
  v132(v133, v18, v45);
  NSString v57 = String._bridgeToObjectiveC()();
  id v130 = v55;
  id v58 = [v55 objectForKeyedSubscript:v57];

  if (!v58
    || (uint64_t v148 = (uint64_t)v58, (swift_dynamicCast(&v146, &v148, v44, &type metadata for String, 6LL) & 1) == 0)
    || (uint64_t v59 = _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0(v146, (uint64_t)v147), !v61))
  {
    unint64_t v80 = sub_10003ECC4();
    uint64_t v81 = swift_allocError(&type metadata for ShareRecord.ShareRecordConversionError, v80, 0LL, 0LL);
    *id v82 = 5;
    swift_willThrow(v81);
    swift_unknownObjectRelease(v130);

LABEL_23:
    uint64_t v83 = *(void (**)(char *, uint64_t))(v21 + 8);
    uint64_t v84 = v144;
    v83(v56, v144);
    v83(v143, v84);
    return;
  }

  uint64_t v62 = v59;
  uint64_t v128 = v60;
  uint64_t v129 = v61;
  NSString v63 = String._bridgeToObjectiveC()();
  id v64 = [v130 objectForKeyedSubscript:v63];

  if (!v64)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v142 + 56))(v11, 1LL, 1LL, v141);
    goto LABEL_25;
  }

  uint64_t v126 = v62;
  uint64_t v146 = (uint64_t)v64;
  uint64_t v65 = v141;
  int v66 = swift_dynamicCast(v11, &v146, v44, v141, 6LL);
  uint64_t v67 = v142;
  uint64_t v127 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v142 + 56);
  v127(v11, v66 ^ 1u, 1LL, v65);
  int v68 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48);
  if (v68(v11, 1LL, v65) == 1)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    uint64_t v85 = (uint64_t *)&unk_10099D720;
    uint64_t v86 = (uint64_t)v11;
LABEL_26:
    uint64_t v87 = sub_100015794(v86, v85);
LABEL_27:
    uint64_t v88 = static os_log_type_t.error.getter(v87);
    uint64_t v89 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v90 = swift_allocObject(v89, 72LL, 7LL);
    *(_OWORD *)(v90 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v90 + 56) = sub_100022898(0LL, (unint64_t *)&qword_10099D920, &OBJC_CLASS___CKRecord_ptr);
    *(void *)(v90 + 64) = sub_100022738();
    id v91 = v145;
    *(void *)(v90 + 32) = v145;
    sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
    id v92 = v91;
    uint64_t v93 = (void *)static OS_os_log.default.getter(v92);
    os_log(_:dso:log:_:_:)(v88, &_mh_execute_header, v93, "Invalid Share Record - %@", 25LL, 2LL, v90);
    swift_bridgeObjectRelease();

    unint64_t v94 = sub_10003ECC4();
    uint64_t v95 = swift_allocError(&type metadata for ShareRecord.ShareRecordConversionError, v94, 0LL, 0LL);
    *uint64_t v96 = 6;
    swift_willThrow(v95);
    swift_unknownObjectRelease(v130);

    goto LABEL_23;
  }

  uint64_t v125 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
  v125(v140, v11, v65);
  uint64_t v69 = v65;
  NSString v70 = String._bridgeToObjectiveC()();
  id v71 = [v130 objectForKeyedSubscript:v70];

  if (!v71)
  {
    uint64_t v79 = (uint64_t)v139;
    v127(v139, 1LL, 1LL, v69);
    goto LABEL_29;
  }

  uint64_t v146 = (uint64_t)v71;
  uint64_t v72 = v135;
  uint64_t v73 = v69;
  if ((swift_dynamicCast(v135, &v146, v44, v69, 6LL) & 1) == 0)
  {
    v127(v72, 1LL, 1LL, v69);
    uint64_t v77 = (uint64_t)v72;
    uint64_t v78 = v142;
    goto LABEL_36;
  }

  uint64_t v74 = v69;
  uint64_t v75 = v127;
  v127(v72, 0LL, 1LL, v74);
  unsigned int v76 = v68(v72, 1LL, v73);
  uint64_t v77 = (uint64_t)v72;
  uint64_t v78 = v142;
  if (v76 == 1)
  {
LABEL_36:
    sub_100015794(v77, (uint64_t *)&unk_10099D720);
    uint64_t v107 = v139;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v137 + 56))(v139, 1LL, 1LL, v138);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v78 + 8))(v140, v73);
    uint64_t v85 = (uint64_t *)&unk_10099D890;
    uint64_t v86 = (uint64_t)v107;
    goto LABEL_26;
  }

  uint64_t v79 = (uint64_t)v139;
  v125(v139, (char *)v77, v73);
  v75((char *)v79, 0LL, 1LL, v73);
LABEL_29:
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v137 + 56))(v79, 0LL, 1LL, v138);
  uint64_t v97 = v136;
  sub_10003F130(v79, v136);
  NSString v98 = String._bridgeToObjectiveC()();
  id v99 = [v130 objectForKeyedSubscript:v98];

  if (!v99 || (uint64_t v148 = (uint64_t)v99, (swift_dynamicCast(&v146, &v148, v44, &type metadata for String, 6LL) & 1) == 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v106 = v141;
    sub_100015794(v97, (uint64_t *)&unk_10099D720);
    uint64_t v87 = (*(uint64_t (**)(char *, uint64_t))(v142 + 8))(v140, v106);
    goto LABEL_27;
  }

  uint64_t v142 = v146;
  uint64_t v139 = v147;
  NSString v100 = String._bridgeToObjectiveC()();
  id v101 = v130;
  id v102 = [v130 objectForKeyedSubscript:v100];

  if (v102)
  {
    uint64_t v146 = (uint64_t)v102;
    int v103 = swift_dynamicCast(&v148, &v146, v44, &type metadata for UInt64, 6LL);
    id v104 = v145;
    uint64_t v105 = ObjectType;
    if (v103) {
      uint64_t v138 = v148;
    }
    else {
      uint64_t v138 = 0LL;
    }
  }

  else
  {
    uint64_t v138 = 0LL;
    id v104 = v145;
    uint64_t v105 = ObjectType;
  }

  CKRecordKeyValueSetting.subscript.getter( &v146,  0x7079546572616873LL,  0xE900000000000065LL,  v105,  &type metadata for Int,  &protocol witness table for Int);
  if ((_BYTE)v147) {
    unint64_t v108 = 1LL;
  }
  else {
    unint64_t v108 = v146;
  }
  char v109 = sub_1003ED128(v108);
  if (v109 == 4) {
    char v110 = 1;
  }
  else {
    char v110 = v109;
  }
  uint64_t v111 = objc_autoreleasePoolPush();
  id v112 = [objc_allocWithZone(NSKeyedArchiver) initRequiringSecureCoding:1];
  [v104 encodeSystemFieldsWithCoder:v112];
  [v112 finishEncoding];
  id v113 = [v112 encodedData];
  uint64_t v114 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v113);
  uint64_t v116 = v115;

  objc_autoreleasePoolPop(v111);
  swift_unknownObjectRelease(v101);

  uint64_t v117 = v134;
  uint64_t *v134 = v114;
  v117[1] = v116;
  uint64_t v118 = (int *)type metadata accessor for ShareRecord(0LL);
  uint64_t v119 = v144;
  char v120 = v132;
  v132((char *)v117 + v118[5], v143, v144);
  v120((char *)v117 + v118[6], v133, v119);
  v125((char *)v117 + v118[7], v140, v141);
  sub_10003F130(v136, (uint64_t)v117 + v118[8]);
  uint64_t v121 = (char *)v117 + v118[9];
  char *v121 = v126;
  uint64_t v122 = v129;
  *((void *)v121 + 1) = v128;
  *((void *)v121 + 2) = v122;
  uint64_t v123 = (uint64_t *)((char *)v117 + v118[10]);
  uint64_t v124 = v139;
  uint64_t *v123 = v142;
  v123[1] = (uint64_t)v124;
  *(uint64_t *)((char *)v117 + v118[11]) = v138;
  *((_BYTE *)v117 + v118[12]) = v110;
}

uint64_t sub_10003D920()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000A8AC(v2, qword_100A29F08);
  sub_10000A720(v0, (uint64_t)qword_100A29F08);
  type metadata accessor for BeaconStore(0LL);
  sub_1004E6208((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0x6365526572616853LL, 0xEB0000000064726FLL, 1LL);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

void sub_10003D9F4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v24 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v1;
  unint64_t v11 = v2[1];
  sub_10001736C(v10, v11);
  Data.hash(into:)(a1, v10, v11);
  sub_100016F9C(v10, v11);
  uint64_t v12 = (int *)type metadata accessor for ShareRecord(0LL);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v13, v14);
  dispatch thunk of Hashable.hash(into:)(a1, v13, v14);
  uint64_t v15 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v4, v15);
  sub_10000A824((uint64_t)v2 + v12[8], (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v9, 1LL, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v16 = v24;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v24, v9, v4);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v15);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v16, v4);
  }

  uint64_t v17 = (unsigned __int8 *)v2 + v12[9];
  uint64_t v18 = *((void *)v17 + 1);
  uint64_t v19 = *((void *)v17 + 2);
  Hasher._combine(_:)(*v17);
  swift_bridgeObjectRetain(v19);
  String.hash(into:)(a1, v18, v19);
  swift_bridgeObjectRelease();
  uint64_t v20 = (uint64_t *)((char *)v2 + v12[10]);
  uint64_t v21 = *v20;
  uint64_t v22 = v20[1];
  swift_bridgeObjectRetain(v22);
  String.hash(into:)(a1, v21, v22);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(uint64_t *)((char *)v2 + v12[11]));
  Hasher._combine(_:)(qword_1007E7288[*((char *)v2 + v12[12])]);
}

uint64_t sub_10003DC94(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10003DCCC + 4 * byte_1007E6F10[a1]))( 0xD000000000000010LL,  0x800000010084DE70LL);
}

uint64_t sub_10003DCCC()
{
  return 0x696669746E656469LL;
}

  ;
}

uint64_t sub_10003DD8C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_10099DA20);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_100040054();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ShareRecord.CodingKeys,  &type metadata for ShareRecord.CodingKeys,  v11,  v9,  v10);
  __int128 v33 = *v3;
  char v35 = 0;
  unint64_t v12 = sub_1000170A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v33, &v35, v5, &type metadata for Data, v12);
  if (!v2)
  {
    uint64_t v13 = (int *)type metadata accessor for ShareRecord(0LL);
    uint64_t v14 = (char *)v3 + v13[5];
    LOBYTE(v33) = 1;
    uint64_t v15 = type metadata accessor for UUID(0LL);
    uint64_t v16 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v33, v5, v15, v16);
    uint64_t v17 = (char *)v3 + v13[6];
    LOBYTE(v33) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v33, v5, v15, v16);
    uint64_t v18 = (char *)v3 + v13[7];
    LOBYTE(v33) = 3;
    uint64_t v19 = type metadata accessor for Date(0LL);
    uint64_t v20 = sub_100007864( &qword_10099DA40,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v18, &v33, v5, v19, v20);
    uint64_t v21 = (char *)v3 + v13[8];
    LOBYTE(v33) = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v33, v5, v19, v20);
    uint64_t v22 = (char *)v3 + v13[9];
    char v23 = *v22;
    uint64_t v25 = *((void *)v22 + 1);
    uint64_t v24 = *((void *)v22 + 2);
    LOBYTE(v33) = v23;
    *((void *)&v33 + 1) = v25;
    uint64_t v34 = v24;
    char v35 = 5;
    unint64_t v26 = sub_100040098();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v33, &v35, v5, &type metadata for MessagingDestination, v26);
    uint64_t v27 = (uint64_t *)((char *)v3 + v13[10]);
    uint64_t v28 = *v27;
    uint64_t v29 = v27[1];
    LOBYTE(v33) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v28, v29, &v33, v5);
    uint64_t v30 = *(void *)((char *)v3 + v13[11]);
    LOBYTE(v33) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v30, &v33, v5);
    LOBYTE(v33) = *((_BYTE *)v3 + v13[12]);
    char v35 = 8;
    unint64_t v31 = sub_1000400DC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v33, &v35, v5, &type metadata for ShareType, v31);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10003E0C4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v46 = a2;
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v3);
  uint64_t v47 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v48 = *(void *)(v5 - 8);
  uint64_t v49 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (void (**)(uint64_t, char *, uint64_t))((char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v54 = type metadata accessor for UUID(0LL);
  uint64_t v50 = *(void *)(v54 - 8);
  uint64_t v8 = __chkstk_darwin(v54);
  uint64_t v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v45 - v11;
  uint64_t v52 = sub_100004AEC(&qword_10099DA58);
  uint64_t v13 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v55 = type metadata accessor for ShareRecord(0LL);
  __chkstk_darwin(v55);
  uint64_t v17 = (_OWORD *)((char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v19 = a1[3];
  uint64_t v18 = a1[4];
  uint64_t v53 = a1;
  sub_100012ED8(a1, v19);
  unint64_t v20 = sub_100040054();
  uint64_t v51 = v15;
  uint64_t v21 = v56;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ShareRecord.CodingKeys,  &type metadata for ShareRecord.CodingKeys,  v20,  v19,  v18);
  if (v21) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v53);
  }
  unint64_t v56 = v7;
  char v59 = 0;
  unint64_t v22 = sub_100016FE0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v57, &type metadata for Data, &v59, v52, &type metadata for Data, v22);
  uint64_t v23 = (uint64_t)v17;
  *uint64_t v17 = v57;
  LOBYTE(v57) = 1;
  uint64_t v24 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v25 = v12;
  unint64_t v26 = v12;
  uint64_t v27 = v54;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v26, v54, &v57, v52, v54, v24);
  uint64_t v28 = v24;
  uint64_t v29 = (int *)v55;
  uint64_t v30 = v23 + *(int *)(v55 + 20);
  uint64_t v45 = *(void (**)(uint64_t, char *, uint64_t))(v50 + 32);
  v45(v30, v25, v27);
  LOBYTE(v57) = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v10, v27, &v57, v52, v27, v28);
  v45(v23 + v29[6], v10, v27);
  LOBYTE(v57) = 3;
  uint64_t v31 = sub_100007864( &qword_10099DA70,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  id v32 = v56;
  uint64_t v33 = v49;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v56, v49, &v57, v52, v49, v31);
  (*(void (**)(uint64_t, void *, uint64_t))(v48 + 32))(v23 + v29[7], v32, v33);
  LOBYTE(v57) = 4;
  uint64_t v34 = (uint64_t)v47;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v33, &v57, v52, v33, v31);
  char v35 = v53;
  sub_10003F130(v34, v23 + v29[8]);
  char v59 = 5;
  unint64_t v36 = sub_100040120();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v57,  &type metadata for MessagingDestination,  &v59,  v52,  &type metadata for MessagingDestination,  v36);
  uint64_t v37 = *((void *)&v57 + 1);
  uint64_t v38 = v58;
  uint64_t v39 = v23 + v29[9];
  *(_BYTE *)uint64_t v39 = v57;
  *(void *)(v39 + 8) = v37;
  *(void *)(v39 + swift_weakDestroy(v0 + 16) = v38;
  LOBYTE(v57) = 6;
  uint64_t v40 = KeyedDecodingContainer.decode(_:forKey:)(&v57, v52);
  id v41 = (uint64_t *)(v23 + v29[10]);
  uint64_t *v41 = v40;
  v41[1] = v42;
  LOBYTE(v57) = 7;
  *(void *)(v23 + v29[11]) = KeyedDecodingContainer.decode(_:forKey:)(&v57, v52);
  char v59 = 8;
  unint64_t v43 = sub_100040164();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v57,  &type metadata for ShareType,  &v59,  v52,  &type metadata for ShareType,  v43);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v51, v52);
  *(_BYTE *)(v23 + v29[12]) = v57;
  sub_1000401A8(v23, v46);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v35);
  return sub_1000401EC(v23);
}

uint64_t sub_10003E758()
{
  return sub_10003DC94(*v0);
}

uint64_t sub_10003E760@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10004045C(a1, a2);
  *a3 = result;
  return result;
}

void sub_10003E784(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_10003E790(uint64_t a1)
{
  unint64_t v2 = sub_100040054();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003E7B8(uint64_t a1)
{
  unint64_t v2 = sub_100040054();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003E7E0(void **a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *a1;
  id v8 = [v7 encryptedValues];
  uint64_t ObjectType = swift_getObjectType(v8);
  uint64_t v10 = static os_log_type_t.debug.getter(ObjectType);
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v12 = swift_allocObject(v11, 72LL, 7LL);
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  id v13 = v7;
  id v14 = [v13 description];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  uint64_t v17 = v16;

  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 64) = sub_1000226F4();
  *(void *)(v12 + 32) = v15;
  *(void *)(v12 + 40) = v17;
  uint64_t v18 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v19 = (void *)static OS_os_log.default.getter(v18);
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v19, "Updating share record: %@", 25LL, 2LL, v12);
  swift_bridgeObjectRelease();

  unint64_t v20 = (int *)type metadata accessor for ShareRecord(0LL);
  uint64_t v21 = UUID.uuidString.getter(v20);
  *((void *)&v38 + 1) = &type metadata for String;
  uint64_t v39 = &protocol witness table for String;
  *(void *)&__int128 v37 = v21;
  *((void *)&v37 + 1) = v22;
  CKRecordKeyValueSetting.subscript.setter(&v37, 0xD000000000000010LL, 0x800000010084D8A0LL, ObjectType);
  uint64_t v23 = v2 + v20[7];
  uint64_t v24 = type metadata accessor for Date(0LL);
  *((void *)&v38 + 1) = v24;
  uint64_t v39 = &protocol witness table for Date;
  uint64_t v25 = sub_10000A7C8(&v37);
  uint64_t v26 = *(void *)(v24 - 8);
  (*(void (**)(void *, uint64_t, uint64_t))(v26 + 16))(v25, v23, v24);
  CKRecordKeyValueSetting.subscript.setter(&v37, 0x7461446572616873LL, 0xE900000000000065LL, ObjectType);
  sub_10000A824(v2 + v20[8], (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v6, 1LL, v24) == 1)
  {
    sub_100015794((uint64_t)v6, (uint64_t *)&unk_10099D720);
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    uint64_t v39 = 0LL;
  }

  else
  {
    *((void *)&v38 + 1) = v24;
    uint64_t v39 = &protocol witness table for Date;
    uint64_t v27 = sub_10000A7C8(&v37);
    (*(void (**)(void *, char *, uint64_t))(v26 + 32))(v27, v6, v24);
  }

  CKRecordKeyValueSetting.subscript.setter(&v37, 0x6974617269707865LL, 0xEA00000000006E6FLL, ObjectType);
  uint64_t v28 = v2 + v20[9];
  uint64_t v30 = *(void *)(v28 + 8);
  uint64_t v29 = *(void *)(v28 + 16);
  *((void *)&v38 + 1) = &type metadata for String;
  uint64_t v39 = &protocol witness table for String;
  *(void *)&__int128 v37 = v30;
  *((void *)&v37 + 1) = v29;
  swift_bridgeObjectRetain(v29);
  CKRecordKeyValueSetting.subscript.setter(&v37, 0x6148656572616873LL, 0xEC000000656C646ELL, ObjectType);
  uint64_t v31 = (uint64_t *)(v2 + v20[10]);
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  *((void *)&v38 + 1) = &type metadata for String;
  uint64_t v39 = &protocol witness table for String;
  *(void *)&__int128 v37 = v33;
  *((void *)&v37 + 1) = v32;
  swift_bridgeObjectRetain(v32);
  CKRecordKeyValueSetting.subscript.setter(&v37, 0xD000000000000015LL, 0x800000010084DA30LL, ObjectType);
  uint64_t v34 = *(void *)(v2 + v20[11]);
  *((void *)&v38 + 1) = &type metadata for UInt64;
  uint64_t v39 = &protocol witness table for UInt64;
  *(void *)&__int128 v37 = v34;
  CKRecordKeyValueSetting.subscript.setter(&v37, 0xD000000000000011LL, 0x80000001008517B0LL, ObjectType);
  uint64_t v35 = qword_1007E7288[*(char *)(v2 + v20[12])];
  *((void *)&v38 + 1) = &type metadata for Int;
  uint64_t v39 = &protocol witness table for Int;
  *(void *)&__int128 v37 = v35;
  CKRecordKeyValueSetting.subscript.setter(&v37, 0x7079546572616873LL, 0xE900000000000065LL, ObjectType);
  return swift_unknownObjectRelease(v8);
}

Swift::Int sub_10003EBC0()
{
  return Hasher._finalize()();
}

Swift::Int sub_10003EC00(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_10003EC38()
{
  if (qword_10099B078 != -1) {
    swift_once(&qword_10099B078, sub_10003D920);
  }
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A29F08);
  uint64_t v2 = UUID.uuidString.getter(v1);
  URL.appendingPathComponent(_:isDirectory:)(v2, v3, 1LL);
  return swift_bridgeObjectRelease();
}

unint64_t sub_10003ECC4()
{
  unint64_t result = qword_10099D8A8;
  if (!qword_10099D8A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E70D0, &type metadata for ShareRecord.ShareRecordConversionError);
    atomic_store(result, (unint64_t *)&qword_10099D8A8);
  }

  return result;
}

uint64_t sub_10003ED0C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10003E0C4(a1, a2);
}

uint64_t sub_10003ED20(void *a1)
{
  return sub_10003DD8C(a1);
}

BOOL sub_10003ED34(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D760);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v12 = __chkstk_darwin(v11);
  id v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v45 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v45 - v18;
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*a1, a1[1]);
  if ((v20 & 1) == 0) {
    return 0LL;
  }
  uint64_t v48 = v4;
  uint64_t v21 = (int *)type metadata accessor for ShareRecord(0LL);
  if ((static UUID.== infix(_:_:)((char *)a1 + v21[5], a2 + v21[5]) & 1) == 0
    || (static UUID.== infix(_:_:)((char *)a1 + v21[6], a2 + v21[6]) & 1) == 0
    || (static Date.== infix(_:_:)((char *)a1 + v21[7], a2 + v21[7]) & 1) == 0)
  {
    return 0LL;
  }

  sub_10000A824((uint64_t)a1 + v21[8], (uint64_t)v19);
  uint64_t v46 = v21;
  sub_10000A824(a2 + v21[8], (uint64_t)v17);
  uint64_t v22 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_10000A824((uint64_t)v19, (uint64_t)v10);
  uint64_t v47 = v22;
  sub_10000A824((uint64_t)v17, v22);
  uint64_t v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  uint64_t v24 = v48;
  if (v23((uint64_t)v10, 1LL, v48) == 1)
  {
    sub_100015794((uint64_t)v17, (uint64_t *)&unk_10099D720);
    sub_100015794((uint64_t)v19, (uint64_t *)&unk_10099D720);
    if (v23(v47, 1LL, v24) == 1)
    {
      sub_100015794((uint64_t)v10, (uint64_t *)&unk_10099D720);
      goto LABEL_12;
    }

    goto LABEL_10;
  }

  sub_10000A824((uint64_t)v10, (uint64_t)v14);
  if (v23(v47, 1LL, v24) == 1)
  {
    sub_100015794((uint64_t)v17, (uint64_t *)&unk_10099D720);
    sub_100015794((uint64_t)v19, (uint64_t *)&unk_10099D720);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v24);
LABEL_10:
    sub_100015794((uint64_t)v10, (uint64_t *)&unk_10099D760);
    return 0LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v47, v24);
  uint64_t v25 = sub_100007864( &qword_10099DA90,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  char v26 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v7, v24, v25);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v5 + 8);
  v27(v7, v24);
  sub_100015794((uint64_t)v17, (uint64_t *)&unk_10099D720);
  sub_100015794((uint64_t)v19, (uint64_t *)&unk_10099D720);
  v27(v14, v24);
  sub_100015794((uint64_t)v10, (uint64_t *)&unk_10099D720);
  if ((v26 & 1) == 0) {
    return 0LL;
  }
LABEL_12:
  uint64_t v28 = v46;
  uint64_t v29 = v46[9];
  uint64_t v30 = (char *)a1 + v29;
  int v31 = *((unsigned __int8 *)a1 + v29);
  uint64_t v32 = (unsigned __int8 *)(a2 + v29);
  if (v31 != *v32) {
    return 0LL;
  }
  uint64_t v33 = *((void *)v30 + 1);
  uint64_t v34 = *((void *)v30 + 2);
  uint64_t v35 = *((void *)v32 + 1);
  uint64_t v36 = *((void *)v32 + 2);
  if (v33 == v35 && v34 == v36
    || (v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v34, v35, v36, 0LL), BOOL result = 0LL, (v37 & 1) != 0))
  {
    if ((uint64_t v39 = v28[10],
          uint64_t v40 = *(uint64_t *)((char *)a1 + v39),
          uint64_t v41 = *(uint64_t *)((char *)a1 + v39 + 8),
          uint64_t v42 = (void *)(a2 + v39),
          uint64_t v43 = v42[1],
          v40 == *v42)
      && v41 == v43
      || (v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v41, *v42, v43, 0LL), BOOL result = 0LL, (v44 & 1) != 0))
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10003F130(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D720);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ShareRecord(uint64_t a1)
{
  uint64_t result = qword_10099D998;
  if (!qword_10099D998) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ShareRecord);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BatteryLevel(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

uint64_t storeEnumTagSinglePayload for ShareRecord.ShareRecordConversionError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_10003F290 + 4 * byte_1007E6F25[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10003F2C4 + 4 * byte_1007E6F20[v4]))();
}

uint64_t sub_10003F2C4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003F2CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10003F2D4LL);
  }
  return result;
}

uint64_t sub_10003F2E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10003F2E8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 6;
  return result;
}

uint64_t sub_10003F2EC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003F2F4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShareRecord.ShareRecordConversionError()
{
  return &type metadata for ShareRecord.ShareRecordConversionError;
}

uint64_t *sub_10003F310(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v24);
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_10001736C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID(0LL);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
    v13(v10, v11, v12);
    v13((char *)a1 + a3[6], (char *)a2 + a3[6], v12);
    uint64_t v14 = a3[7];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for Date(0LL);
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
    v19(v15, v16, v17);
    uint64_t v20 = a3[8];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))((char *)a2 + v20, 1LL, v17))
    {
      uint64_t v23 = sub_100004AEC((uint64_t *)&unk_10099D720);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      v19(v21, v22, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v21, 0LL, 1LL, v17);
    }

    uint64_t v25 = a3[9];
    uint64_t v26 = a3[10];
    uint64_t v27 = (char *)a1 + v25;
    uint64_t v28 = (char *)a2 + v25;
    char *v27 = *v28;
    uint64_t v29 = *((void *)v28 + 2);
    *((void *)v27 + 1) = *((void *)v28 + 1);
    *((void *)v27 + 2) = v29;
    uint64_t v30 = (uint64_t *)((char *)a1 + v26);
    int v31 = (uint64_t *)((char *)a2 + v26);
    uint64_t v32 = v31[1];
    *uint64_t v30 = *v31;
    v30[1] = v32;
    uint64_t v33 = a3[12];
    *(uint64_t *)((char *)a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    *((_BYTE *)a1 + v33) = *((_BYTE *)a2 + v33);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v32);
  }

  return a1;
}

uint64_t sub_10003F4C0(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UUID(0LL);
  unsigned int v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v6(v4, v5);
  v6(a1 + a2[6], v5);
  uint64_t v7 = a1 + a2[7];
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = a1 + a2[8];
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t *sub_10003F5A4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], (char *)a2 + a3[6], v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for Date(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  v18(v14, v15, v16);
  uint64_t v19 = a3[8];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))((char *)a2 + v19, 1LL, v16))
  {
    uint64_t v22 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64LL));
  }

  else
  {
    v18(v20, v21, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v20, 0LL, 1LL, v16);
  }

  uint64_t v23 = a3[9];
  uint64_t v24 = a3[10];
  uint64_t v25 = (char *)a1 + v23;
  uint64_t v26 = (char *)a2 + v23;
  *uint64_t v25 = *v26;
  uint64_t v27 = *((void *)v26 + 2);
  *((void *)v25 + 1) = *((void *)v26 + 1);
  *((void *)v25 + 2) = v27;
  uint64_t v28 = (uint64_t *)((char *)a1 + v24);
  uint64_t v29 = (uint64_t *)((char *)a2 + v24);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  uint64_t v31 = a3[12];
  *(uint64_t *)((char *)a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
  *((_BYTE *)a1 + v31) = *((_BYTE *)a2 + v31);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v30);
  return a1;
}

uint64_t *sub_10003F728(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100016F9C(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24LL);
  v14(v11, v12, v13);
  v14((char *)a1 + a3[6], (char *)a2 + a3[6], v13);
  uint64_t v15 = a3[7];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for Date(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v19 + 24);
  v20(v16, v17, v18);
  uint64_t v21 = a3[8];
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  LODWORD(v14) = v24((char *)a1 + v21, 1LL, v18);
  int v25 = v24(v23, 1LL, v18);
  if (!(_DWORD)v14)
  {
    if (!v25)
    {
      v20(v22, v23, v18);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    goto LABEL_6;
  }

  if (v25)
  {
LABEL_6:
    uint64_t v26 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v22, v23, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v22, 0LL, 1LL, v18);
LABEL_7:
  uint64_t v27 = a3[9];
  uint64_t v28 = (char *)a1 + v27;
  uint64_t v29 = (char *)a2 + v27;
  *uint64_t v28 = *v29;
  *((void *)v28 + 1) = *((void *)v29 + 1);
  uint64_t v30 = *((void *)v29 + 2);
  *((void *)v28 + 2) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[10];
  uint64_t v32 = (uint64_t *)((char *)a1 + v31);
  uint64_t v33 = (uint64_t *)((char *)a2 + v31);
  *uint64_t v32 = *v33;
  uint64_t v34 = v33[1];
  v32[1] = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  return a1;
}

char *sub_10003F92C(char *a1, char *a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v16(v12, v13, v14);
  uint64_t v17 = a3[8];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(&a2[v17], 1LL, v14))
  {
    uint64_t v20 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    v16(v18, v19, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v18, 0LL, 1LL, v14);
  }

  uint64_t v21 = a3[9];
  uint64_t v22 = a3[10];
  uint64_t v23 = &a1[v21];
  uint64_t v24 = &a2[v21];
  __int128 v25 = *(_OWORD *)v24;
  *((void *)v23 + 2) = *((void *)v24 + 2);
  *(_OWORD *)uint64_t v23 = v25;
  *(_OWORD *)&a1[v22] = *(_OWORD *)&a2[v22];
  uint64_t v26 = a3[12];
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  a1[v26] = a2[v26];
  return a1;
}

uint64_t *sub_10003FA90(uint64_t *a1, char *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016F9C(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], &a2[a3[6]], v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for Date(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v17 + 40);
  v18(v14, v15, v16);
  uint64_t v19 = a3[8];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = &a2[v19];
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v12) = v22((char *)a1 + v19, 1LL, v16);
  int v23 = v22(v21, 1LL, v16);
  if (!(_DWORD)v12)
  {
    if (!v23)
    {
      v18(v20, v21, v16);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    goto LABEL_6;
  }

  if (v23)
  {
LABEL_6:
    uint64_t v24 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v20, v21, v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v20, 0LL, 1LL, v16);
LABEL_7:
  uint64_t v25 = a3[9];
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = &a2[v25];
  *uint64_t v26 = *v27;
  uint64_t v29 = *((void *)v27 + 1);
  uint64_t v28 = *((void *)v27 + 2);
  *((void *)v26 + 1) = v29;
  *((void *)v26 + 2) = v28;
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[10];
  uint64_t v31 = (uint64_t *)((char *)a1 + v30);
  uint64_t v32 = (uint64_t *)&a2[v30];
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *uint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  uint64_t v35 = a3[12];
  *(uint64_t *)((char *)a1 + a3[11]) = *(void *)&a2[a3[11]];
  *((_BYTE *)a1 + v35) = a2[v35];
  return a1;
}

uint64_t sub_10003FC68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003FC74);
}

uint64_t sub_10003FC74(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }

  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v10;
    uint64_t v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }

  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v7 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v11;
    uint64_t v9 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }

  unint64_t v13 = *(void *)(a1 + a3[9] + 16);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  return (v13 + 1);
}

uint64_t sub_10003FD44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003FD50);
}

uint64_t sub_10003FD50(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }

  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v12 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v12;
    uint64_t v11 = a4[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }

  uint64_t result = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a4[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }

  *(void *)(a1 + a4[9] + swift_weakDestroy(v0 + 16) = (a2 - 1);
  return result;
}

void sub_10003FE1C(uint64_t a1)
{
  uint64_t v8 = &unk_1007E6F78;
  uint64_t v2 = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v9 = *(void *)(v2 - 8) + 64LL;
    uint64_t v10 = v9;
    uint64_t v4 = type metadata accessor for Date(319LL);
    if (v5 <= 0x3F)
    {
      uint64_t v11 = *(void *)(v4 - 8) + 64LL;
      sub_10003FEF4(319LL);
      if (v7 <= 0x3F)
      {
        uint64_t v12 = *(void *)(v6 - 8) + 64LL;
        unint64_t v13 = &unk_1007E6F90;
        uint64_t v14 = &unk_1007E6FA8;
        uint64_t v15 = (char *)&value witness table for Builtin.Int64 + 64;
        uint64_t v16 = &unk_1007E6FC0;
        swift_initStructMetadata(a1, 256LL, 9LL, &v8, a1 + 16);
      }
    }
  }

void sub_10003FEF4(uint64_t a1)
{
  if (!qword_1009A09E0)
  {
    uint64_t v2 = type metadata accessor for Date(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1009A09E0);
    }
  }

uint64_t sub_10003FF48()
{
  return sub_100007864(&qword_10099D9F8, type metadata accessor for ShareRecord, (uint64_t)&unk_1007E6FD8);
}

unint64_t sub_10003FF78()
{
  unint64_t result = qword_10099DA00;
  if (!qword_10099DA00)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E7080, &type metadata for ShareRecord.ShareRecordConversionError);
    atomic_store(result, (unint64_t *)&qword_10099DA00);
  }

  return result;
}

uint64_t sub_10003FFBC(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100007864(&qword_10099DA08, type metadata accessor for ShareRecord, (uint64_t)&unk_1007E70A8);
  uint64_t result = sub_100007864(&qword_10099DA10, type metadata accessor for ShareRecord, (uint64_t)&unk_1007E712C);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

uint64_t sub_100040018(uint64_t a1)
{
  uint64_t result = sub_100007864(&qword_10099DA18, type metadata accessor for ShareRecord, (uint64_t)&unk_1007E7110);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100040054()
{
  unint64_t result = qword_10099DA28;
  if (!qword_10099DA28)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E7234, &type metadata for ShareRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099DA28);
  }

  return result;
}

unint64_t sub_100040098()
{
  unint64_t result = qword_10099DA48;
  if (!qword_10099DA48)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for MessagingDestination,  &type metadata for MessagingDestination);
    atomic_store(result, (unint64_t *)&qword_10099DA48);
  }

  return result;
}

unint64_t sub_1000400DC()
{
  unint64_t result = qword_10099DA50;
  if (!qword_10099DA50)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FFBF8, &type metadata for ShareType);
    atomic_store(result, (unint64_t *)&qword_10099DA50);
  }

  return result;
}

unint64_t sub_100040120()
{
  unint64_t result = qword_10099DA78;
  if (!qword_10099DA78)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for MessagingDestination,  &type metadata for MessagingDestination);
    atomic_store(result, (unint64_t *)&qword_10099DA78);
  }

  return result;
}

unint64_t sub_100040164()
{
  unint64_t result = qword_10099DA80;
  if (!qword_10099DA80)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FFC20, &type metadata for ShareType);
    atomic_store(result, (unint64_t *)&qword_10099DA80);
  }

  return result;
}

uint64_t sub_1000401A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShareRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000401EC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ShareRecord(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for PublishingPolicy(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }

uint64_t storeEnumTagSinglePayload for ShareRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_100040304 + 4 * byte_1007E6F2F[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_100040338 + 4 * byte_1007E6F2A[v4]))();
}

uint64_t sub_100040338(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100040340(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100040348LL);
  }
  return result;
}

uint64_t sub_100040354(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10004035CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 8;
  return result;
}

uint64_t sub_100040360(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100040368(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShareRecord.CodingKeys()
{
  return &type metadata for ShareRecord.CodingKeys;
}

unint64_t sub_100040388()
{
  unint64_t result = qword_10099DA98;
  if (!qword_10099DA98)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E720C, &type metadata for ShareRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099DA98);
  }

  return result;
}

unint64_t sub_1000403D0()
{
  unint64_t result = qword_10099DAA0;
  if (!qword_10099DAA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E717C, &type metadata for ShareRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099DAA0);
  }

  return result;
}

unint64_t sub_100040418()
{
  unint64_t result = qword_10099DAA8;
  if (!qword_10099DAA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E71A4, &type metadata for ShareRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099DAA8);
  }

  return result;
}

uint64_t sub_10004045C(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x800000010084DE70LL;
    if (a2 == 0x800000010084DE70LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010084DE70LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v6 = 0xEA00000000007265LL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_11;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v7 = 0x800000010084D8A0LL;
    if (a2 == 0x800000010084D8A0LL) {
      goto LABEL_16;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010084D8A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if (a1 == 0x7461446572616873LL && a2 == 0xE900000000000065LL)
  {
    unint64_t v8 = 0xE900000000000065LL;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461446572616873LL, 0xE900000000000065LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_22;
  }

  if (a1 == 0x6974617269707865LL && a2 == 0xEA00000000006E6FLL)
  {
    unint64_t v9 = 0xEA00000000006E6FLL;
LABEL_28:
    swift_bridgeObjectRelease(v9);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974617269707865LL, 0xEA00000000006E6FLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_28;
  }

  if (a1 == 0x6148656572616873LL && a2 == 0xEC000000656C646ELL)
  {
    unint64_t v10 = 0xEC000000656C646ELL;
LABEL_34:
    swift_bridgeObjectRelease(v10);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6148656572616873LL, 0xEC000000656C646ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_34;
  }

  if (a1 == 0xD000000000000015LL && a2 == 0x800000010084DA30LL)
  {
    unint64_t v11 = 0x800000010084DA30LL;
LABEL_40:
    swift_bridgeObjectRelease(v11);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x800000010084DA30LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_40;
  }

  if (a1 == 0xD000000000000011LL && a2 == 0x80000001008517B0LL)
  {
    unint64_t v12 = 0x80000001008517B0LL;
LABEL_46:
    swift_bridgeObjectRelease(v12);
    return 7LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x80000001008517B0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
    goto LABEL_46;
  }

  if (a1 == 0x7079546572616873LL && a2 == 0xE900000000000065LL)
  {
    swift_bridgeObjectRelease(0xE900000000000065LL);
    return 8LL;
  }

  else
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7079546572616873LL, 0xE900000000000065LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0) {
      return 8LL;
    }
    else {
      return 9LL;
    }
  }

uint64_t sub_10004081C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A29F20);
  sub_10000A720(v0, (uint64_t)qword_100A29F20);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x5379726574746162LL,  0xED00007375746174LL);
}

uint64_t sub_1000408A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000417C8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100040900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000417C8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10004094C()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100040978 + 4 * byte_1007E72A8[*v0]))( 0x656C707061LL,  0xE500000000000000LL);
}

uint64_t sub_100040978()
{
  return 0x6E6169727564LL;
}

uint64_t sub_10004098C()
{
  return 0x6579656B776168LL;
}

uint64_t sub_1000409A4()
{
  return 1701602664LL;
}

uint64_t sub_1000409B4(unsigned int a1)
{
  uint64_t v1 = HIWORD(a1) & 1;
  uint64_t v2 = HIBYTE(a1) & 1;
  Bool.intValue.getter((a1 >> 8) & 1);
  uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  Bool.intValue.getter(v1);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  Bool.intValue.getter(v2);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  unint64_t v6 = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v6);
  return v8;
}

uint64_t sub_100040A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100041948();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100040AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100041948();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100040B2C@<X0>(unsigned __int8 *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = sub_100041014(*a1);
  *a2 = result & 0x10101FF;
  return result;
}

uint64_t sub_100040B60()
{
  if (v0[3]) {
    int v1 = 0x1000000;
  }
  else {
    int v1 = 0;
  }
  if (v0[2]) {
    int v2 = 0x10000;
  }
  else {
    int v2 = 0;
  }
  if (v0[1]) {
    int v3 = 256;
  }
  else {
    int v3 = 0;
  }
  return sub_1000409B4(v3 | *v0 | v2 | v1);
}

uint64_t sub_100040BA4(unsigned int a1)
{
  v2._countAndFlagsBits = 0x203A657079747BLL;
  v2._object = (void *)0xE700000000000000LL;
  String.append(_:)(v2);
  int v3 = (a1 >> 4) & 3;
  uint64_t v4 = 0x6579656B776168LL;
  unint64_t v5 = 0xE400000000000000LL;
  uint64_t v6 = 1701602664LL;
  if (v3 != 3)
  {
    uint64_t v6 = 0x656C707061LL;
    unint64_t v5 = 0xE500000000000000LL;
  }

  if (v3 == 2) {
    unint64_t v5 = 0xE700000000000000LL;
  }
  else {
    uint64_t v4 = v6;
  }
  if (v3 == 1) {
    uint64_t v7 = 0x6E6169727564LL;
  }
  else {
    uint64_t v7 = v4;
  }
  if (v3 == 1) {
    unint64_t v8 = 0xE600000000000000LL;
  }
  else {
    unint64_t v8 = v5;
  }
  unint64_t v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x726574746162202CLL;
  v10._object = (void *)0xEB00000000203A79LL;
  String.append(_:)(v10);
  int v11 = a1 >> 6;
  unint64_t v12 = 0xE300000000000000LL;
  uint64_t v13 = 7827308LL;
  unint64_t v14 = 0xE800000000000000LL;
  uint64_t v15 = 0x6C61636974697263LL;
  if (v11 == 1)
  {
    uint64_t v15 = 0x6D756964656DLL;
    unint64_t v14 = 0xE600000000000000LL;
  }

  if (v11 != 2)
  {
    uint64_t v13 = v15;
    unint64_t v12 = v14;
  }

  else {
    uint64_t v16 = 1751607656LL;
  }
  else {
    unint64_t v17 = 0xE400000000000000LL;
  }
  unint64_t v18 = v17;
  String.append(_:)(*(Swift::String *)&v16);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 0x61746E69616D202CLL;
  v19._object = (void *)0xEE00203A64656E69LL;
  String.append(_:)(v19);
  unint64_t v20 = sub_100041584();
  char v21 = FixedWidthInteger.BOOLValue.getter(&type metadata for UInt8, v20);
  BOOL v22 = (v21 & 1) == 0;
  if ((v21 & 1) != 0) {
    uint64_t v23 = 1702195828LL;
  }
  else {
    uint64_t v23 = 0x65736C6166LL;
  }
  if (v22) {
    unint64_t v24 = 0xE500000000000000LL;
  }
  else {
    unint64_t v24 = 0xE400000000000000LL;
  }
  unint64_t v25 = v24;
  String.append(_:)(*(Swift::String *)&v23);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 0x617069746C756D20LL;
  v26._object = (void *)0xEC000000203A7472LL;
  String.append(_:)(v26);
  int v27 = sub_100041014(a1 & 0xB);
  v28._countAndFlagsBits = sub_1000409B4(v27 & 0x10101FF);
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._countAndFlagsBits = 125LL;
  v29._object = (void *)0xE100000000000000LL;
  String.append(_:)(v29);
  return 0LL;
}

unsigned __int8 *sub_100040E0C@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100040E1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10004180C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100040E78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10004180C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100040EC4()
{
  return sub_100040BA4(*v0);
}

uint64_t SPBeaconGroupStatus.description.getter(uint64_t a1)
{
  uint64_t result = 0x6574617261706573LL;
  switch(a1)
  {
    case 1LL:
    case 4LL:
      return result;
    case 2LL:
      uint64_t result = 0x646570756F7267LL;
      break;
    case 3LL:
      uint64_t result = 0x49646570756F7267LL;
      break;
    default:
      uint64_t result = 0x6E776F6E6B6E75LL;
      break;
  }

  return result;
}

uint64_t sub_100040F70()
{
  uint64_t result = 0x6574617261706573LL;
  switch(*v0)
  {
    case 1LL:
    case 4LL:
      return result;
    case 2LL:
      uint64_t result = 0x646570756F7267LL;
      break;
    case 3LL:
      uint64_t result = 0x49646570756F7267LL;
      break;
    default:
      uint64_t result = 0x6E776F6E6B6E75LL;
      break;
  }

  return result;
}

uint64_t sub_100041014(int a1)
{
  uint64_t v2 = type metadata accessor for Bit(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v6 = &v22[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v4);
  unint64_t v8 = &v22[-v7];
  BYTE6(v30) = a1;
  unint64_t v9 = sub_100041584();
  uint64_t result = FixedWidthInteger.bits()(&type metadata for UInt8, v9);
  if (!*(void *)(result + 16))
  {
    __break(1u);
    goto LABEL_6;
  }

  uint64_t v11 = result;
  unint64_t v12 = result + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  Swift::String v28 = *(void (**)(_BYTE *, unint64_t, uint64_t))(v3 + 16);
  v28(v8, v12, v2);
  uint64_t v13 = *(void (**)(void))(v3 + 104);
  unsigned int v27 = enum case for Bit.one(_:);
  Swift::String v29 = (void (*)(_BYTE *, void, uint64_t))v13;
  v13(v6);
  unint64_t v14 = sub_1000415C8();
  dispatch thunk of RawRepresentable.rawValue.getter((uint64_t *)((char *)&v30 + 5), v2, v14);
  dispatch thunk of RawRepresentable.rawValue.getter((uint64_t *)((char *)&v30 + 4), v2, v14);
  int v15 = BYTE5(v30);
  int v26 = BYTE4(v30);
  uint64_t v16 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
  v16(v6, v2);
  uint64_t result = ((uint64_t (*)(_BYTE *, uint64_t))v16)(v8, v2);
  if (*(void *)(v11 + 16) < 2uLL)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  int v24 = v15;
  int v25 = a1;
  uint64_t v17 = *(void *)(v3 + 72);
  v28(v8, v12 + v17, v2);
  v29(v6, v27, v2);
  dispatch thunk of RawRepresentable.rawValue.getter((uint64_t *)((char *)&v30 + 3), v2, v14);
  dispatch thunk of RawRepresentable.rawValue.getter((uint64_t *)((char *)&v30 + 2), v2, v14);
  int v18 = BYTE3(v30);
  int v19 = BYTE2(v30);
  v16(v6, v2);
  uint64_t result = ((uint64_t (*)(_BYTE *, uint64_t))v16)(v8, v2);
  if (*(void *)(v11 + 16) >= 4uLL)
  {
    int v23 = v18 == v19;
    int v20 = v24 == v26;
    v28(v8, v12 + 3 * v17, v2);
    swift_bridgeObjectRelease();
    v29(v6, v27, v2);
    dispatch thunk of RawRepresentable.rawValue.getter((uint64_t *)((char *)&v30 + 1), v2, v14);
    dispatch thunk of RawRepresentable.rawValue.getter(&v30, v2, v14);
    int v21 = BYTE1(v30) == v30;
    v16(v6, v2);
    v16(v8, v2);
    return v25 & 0xB | (v20 << 8) | (v23 << 16) | (v21 << 24);
  }

void *sub_1000412D0(unsigned __int8 a1, char a2, char a3, char a4)
{
  int v15 = &_swiftEmptySetSingleton;
  if (a1 > 3u)
  {
    if (qword_10099B080 != -1) {
      swift_once(&qword_10099B080, sub_10004081C);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    uint64_t v8 = sub_10000A720(v7, (uint64_t)qword_100A29F20);
    unint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc(5LL, -1LL);
      *(_DWORD *)uint64_t v11 = 16777472;
      unsigned __int8 v14 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v11 + 4, v11 + 5);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "illegal selfPart: %hhu!", v11, 5u);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    return &_swiftEmptySetSingleton;
  }

  else
  {
    switch(a1)
    {
      case 0u:
        if ((a2 & 1) != 0)
        {
          sub_1000BD9EC(&v14, 1LL);
          if ((a3 & 1) == 0)
          {
LABEL_5:
            if ((a4 & 1) == 0) {
              goto LABEL_37;
            }
LABEL_29:
            uint64_t v13 = 3LL;
            goto LABEL_36;
          }
        }

        else if ((a3 & 1) == 0)
        {
          goto LABEL_5;
        }

        sub_1000BD9EC(&v14, 2LL);
        if ((a4 & 1) == 0) {
          goto LABEL_37;
        }
        goto LABEL_29;
      case 1u:
        if ((a2 & 1) != 0)
        {
          sub_1000BD9EC(&v14, 2LL);
          if ((a3 & 1) == 0)
          {
LABEL_22:
            if ((a4 & 1) == 0) {
              goto LABEL_37;
            }
            goto LABEL_35;
          }
        }

        else if ((a3 & 1) == 0)
        {
          goto LABEL_22;
        }

        sub_1000BD9EC(&v14, 3LL);
        if ((a4 & 1) == 0) {
          goto LABEL_37;
        }
LABEL_35:
        uint64_t v13 = 0LL;
        goto LABEL_36;
      case 2u:
        if ((a2 & 1) != 0)
        {
          sub_1000BD9EC(&v14, 3LL);
          if ((a3 & 1) == 0)
          {
LABEL_14:
            if ((a4 & 1) == 0) {
              goto LABEL_37;
            }
            goto LABEL_26;
          }
        }

        else if ((a3 & 1) == 0)
        {
          goto LABEL_14;
        }

        sub_1000BD9EC(&v14, 0LL);
        if ((a4 & 1) == 0) {
          goto LABEL_37;
        }
LABEL_26:
        uint64_t v13 = 1LL;
        goto LABEL_36;
      case 3u:
        if ((a2 & 1) != 0)
        {
          sub_1000BD9EC(&v14, 0LL);
          if ((a3 & 1) == 0)
          {
LABEL_18:
            if ((a4 & 1) == 0) {
              goto LABEL_37;
            }
            goto LABEL_32;
          }
        }

        else if ((a3 & 1) == 0)
        {
          goto LABEL_18;
        }

        sub_1000BD9EC(&v14, 1LL);
        if ((a4 & 1) == 0) {
          goto LABEL_37;
        }
LABEL_32:
        uint64_t v13 = 2LL;
LABEL_36:
        sub_1000BD9EC(&v14, v13);
LABEL_37:
        uint64_t result = v15;
        break;
      default:
        uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "searchpartyd/Type18Status.swift",  31LL,  2LL,  251LL,  0);
        __break(1u);
        return result;
    }
  }

  return result;
}

unint64_t sub_100041584()
{
  unint64_t result = qword_1009A6C50;
  if (!qword_1009A6C50)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt8, &type metadata for UInt8);
    atomic_store(result, (unint64_t *)&qword_1009A6C50);
  }

  return result;
}

unint64_t sub_1000415C8()
{
  unint64_t result = qword_10099DAB0;
  if (!qword_10099DAB0)
  {
    uint64_t v1 = type metadata accessor for Bit(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Bit, v1);
    atomic_store(result, (unint64_t *)&qword_10099DAB0);
  }

  return result;
}

uint64_t sub_100041610(char a1, char a2, char a3, uint64_t a4)
{
  uint64_t v4 = 2LL;
  if ((a1 & 1) != 0) {
    uint64_t v4 = 3LL;
  }
  uint64_t v5 = 4LL;
  if ((a1 & 1) == 0) {
    uint64_t v5 = 1LL;
  }
  if ((a3 & 1) == 0) {
    uint64_t v4 = v5;
  }
  uint64_t v6 = 2LL;
  if ((a2 & 1) != 0) {
    uint64_t v6 = 3LL;
  }
  uint64_t v7 = 4LL;
  if ((a2 & 1) == 0) {
    uint64_t v7 = 1LL;
  }
  if ((a1 & 1) == 0) {
    uint64_t v6 = v7;
  }
  if (a4) {
    uint64_t v6 = 0LL;
  }
  if (a4 == 1) {
    return v4;
  }
  else {
    return v6;
  }
}

uint64_t storeEnumTagSinglePayload for Type18Status.DeviceType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000416A8 + 4 * byte_1007E72BF[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000416DC + 4 * byte_1007E72BA[v4]))();
}

uint64_t sub_1000416DC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000416E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000416ECLL);
  }
  return result;
}

uint64_t sub_1000416F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100041700LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100041704(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004170C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Type18Status.DeviceType()
{
  return &type metadata for Type18Status.DeviceType;
}

ValueMetadata *type metadata accessor for Type18Status()
{
  return &type metadata for Type18Status;
}

unint64_t sub_10004173C()
{
  unint64_t result = qword_10099DAB8;
  if (!qword_10099DAB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E7318, &type metadata for Type18Status);
    atomic_store(result, (unint64_t *)&qword_10099DAB8);
  }

  return result;
}

unint64_t sub_100041784()
{
  unint64_t result = qword_10099DAC0;
  if (!qword_10099DAC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E7480, &type metadata for Type18Status.DeviceType);
    atomic_store(result, (unint64_t *)&qword_10099DAC0);
  }

  return result;
}

unint64_t sub_1000417C8()
{
  unint64_t result = qword_10099DAC8;
  if (!qword_10099DAC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E7408, &type metadata for Type18Status.DeviceType);
    atomic_store(result, (unint64_t *)&qword_10099DAC8);
  }

  return result;
}

unint64_t sub_10004180C()
{
  unint64_t result = qword_10099DAD0;
  if (!qword_10099DAD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E73A8, &type metadata for Type18Status);
    atomic_store(result, (unint64_t *)&qword_10099DAD0);
  }

  return result;
}

_DWORD *initializeBufferWithCopyOfBuffer for Type18Status.Multipart(_DWORD *result, _DWORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Type18Status.Multipart(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 1);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Type18Status.Multipart( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 4) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 4) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 1) = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Type18Status.Multipart()
{
  return &type metadata for Type18Status.Multipart;
}

unint64_t sub_100041904()
{
  unint64_t result = qword_10099DAD8;
  if (!qword_10099DAD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E7548, &type metadata for Type18Status.Multipart);
    atomic_store(result, (unint64_t *)&qword_10099DAD8);
  }

  return result;
}

unint64_t sub_100041948()
{
  unint64_t result = qword_10099DAE0;
  if (!qword_10099DAE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E75D8, &type metadata for Type18Status.Multipart);
    atomic_store(result, (unint64_t *)&qword_10099DAE0);
  }

  return result;
}

uint64_t destroy for AirPodsLEFinalizePairingCommandPayload(uint64_t *a1)
{
  uint64_t result = sub_100016F9C(a1[20], a1[21]);
  unint64_t v3 = a1[23];
  if (v3 >> 60 != 15) {
    return sub_100016F9C(a1[22], v3);
  }
  return result;
}

uint64_t initializeWithCopy for AirPodsLEFinalizePairingCommandPayload(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10001736C(*a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_10001736C(v6, v7);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  sub_10001736C(v8, v9);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  uint64_t v10 = a2[6];
  unint64_t v11 = a2[7];
  sub_10001736C(v10, v11);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  uint64_t v12 = a2[8];
  unint64_t v13 = a2[9];
  sub_10001736C(v12, v13);
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v13;
  uint64_t v14 = a2[10];
  unint64_t v15 = a2[11];
  sub_10001736C(v14, v15);
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  uint64_t v16 = a2[12];
  unint64_t v17 = a2[13];
  sub_10001736C(v16, v17);
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
  uint64_t v18 = a2[14];
  unint64_t v19 = a2[15];
  sub_10001736C(v18, v19);
  *(void *)(a1 + 112) = v18;
  *(void *)(a1 + 120) = v19;
  uint64_t v20 = a2[16];
  unint64_t v21 = a2[17];
  sub_10001736C(v20, v21);
  *(void *)(a1 + 128) = v20;
  *(void *)(a1 + 136) = v21;
  uint64_t v22 = a2[18];
  unint64_t v23 = a2[19];
  sub_10001736C(v22, v23);
  *(void *)(a1 + 144) = v22;
  *(void *)(a1 + 152) = v23;
  uint64_t v24 = a2[20];
  unint64_t v25 = a2[21];
  sub_10001736C(v24, v25);
  *(void *)(a1 + 160) = v24;
  *(void *)(a1 + 168) = v25;
  int v26 = a2 + 22;
  unint64_t v27 = a2[23];
  if (v27 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 176) = *(_OWORD *)v26;
  }

  else
  {
    uint64_t v28 = *v26;
    sub_10001736C(*v26, v27);
    *(void *)(a1 + 176) = v28;
    *(void *)(a1 + 184) = v27;
  }

  return a1;
}

uint64_t *assignWithCopy for AirPodsLEFinalizePairingCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10001736C(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100016F9C(v6, v7);
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_10001736C(v8, v9);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_100016F9C(v10, v11);
  uint64_t v12 = a2[4];
  unint64_t v13 = a2[5];
  sub_10001736C(v12, v13);
  uint64_t v14 = a1[4];
  unint64_t v15 = a1[5];
  a1[4] = v12;
  a1[5] = v13;
  sub_100016F9C(v14, v15);
  uint64_t v16 = a2[6];
  unint64_t v17 = a2[7];
  sub_10001736C(v16, v17);
  uint64_t v18 = a1[6];
  unint64_t v19 = a1[7];
  a1[6] = v16;
  a1[7] = v17;
  sub_100016F9C(v18, v19);
  uint64_t v20 = a2[8];
  unint64_t v21 = a2[9];
  sub_10001736C(v20, v21);
  uint64_t v22 = a1[8];
  unint64_t v23 = a1[9];
  a1[8] = v20;
  a1[9] = v21;
  sub_100016F9C(v22, v23);
  uint64_t v24 = a2[10];
  unint64_t v25 = a2[11];
  sub_10001736C(v24, v25);
  uint64_t v26 = a1[10];
  unint64_t v27 = a1[11];
  a1[10] = v24;
  a1[11] = v25;
  sub_100016F9C(v26, v27);
  uint64_t v28 = a2[12];
  unint64_t v29 = a2[13];
  sub_10001736C(v28, v29);
  uint64_t v30 = a1[12];
  unint64_t v31 = a1[13];
  a1[12] = v28;
  a1[13] = v29;
  sub_100016F9C(v30, v31);
  uint64_t v32 = a2[14];
  unint64_t v33 = a2[15];
  sub_10001736C(v32, v33);
  uint64_t v34 = a1[14];
  unint64_t v35 = a1[15];
  a1[14] = v32;
  a1[15] = v33;
  sub_100016F9C(v34, v35);
  uint64_t v36 = a2[16];
  unint64_t v37 = a2[17];
  sub_10001736C(v36, v37);
  uint64_t v38 = a1[16];
  unint64_t v39 = a1[17];
  a1[16] = v36;
  a1[17] = v37;
  sub_100016F9C(v38, v39);
  uint64_t v40 = a2[18];
  unint64_t v41 = a2[19];
  sub_10001736C(v40, v41);
  uint64_t v42 = a1[18];
  unint64_t v43 = a1[19];
  a1[18] = v40;
  a1[19] = v41;
  sub_100016F9C(v42, v43);
  uint64_t v44 = a2[20];
  unint64_t v45 = a2[21];
  sub_10001736C(v44, v45);
  uint64_t v46 = a1[20];
  unint64_t v47 = a1[21];
  a1[20] = v44;
  a1[21] = v45;
  sub_100016F9C(v46, v47);
  uint64_t v48 = a2 + 22;
  unint64_t v49 = a2[23];
  if ((unint64_t)a1[23] >> 60 != 15)
  {
    if (v49 >> 60 != 15)
    {
      uint64_t v51 = *v48;
      sub_10001736C(*v48, v49);
      uint64_t v52 = a1[22];
      unint64_t v53 = a1[23];
      a1[22] = v51;
      a1[23] = v49;
      sub_100016F9C(v52, v53);
      return a1;
    }

    sub_100041D4C((uint64_t)(a1 + 22));
    goto LABEL_6;
  }

  if (v49 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 11) = *(_OWORD *)v48;
    return a1;
  }

  uint64_t v50 = *v48;
  sub_10001736C(*v48, v49);
  a1[22] = v50;
  a1[23] = v49;
  return a1;
}

uint64_t sub_100041D4C(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for AirPodsLEFinalizePairingCommandPayload(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  __int128 v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  __int128 v9 = a2[9];
  __int128 v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t *assignWithTake for AirPodsLEFinalizePairingCommandPayload(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016F9C(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_100016F9C(v6, v7);
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  sub_100016F9C(v8, v9);
  uint64_t v10 = a1[6];
  unint64_t v11 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  sub_100016F9C(v10, v11);
  uint64_t v12 = a1[8];
  unint64_t v13 = a1[9];
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  sub_100016F9C(v12, v13);
  uint64_t v14 = a1[10];
  unint64_t v15 = a1[11];
  *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 80);
  sub_100016F9C(v14, v15);
  uint64_t v16 = a1[12];
  unint64_t v17 = a1[13];
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  sub_100016F9C(v16, v17);
  uint64_t v18 = a1[14];
  unint64_t v19 = a1[15];
  *((_OWORD *)a1 + 7) = *(_OWORD *)(a2 + 112);
  sub_100016F9C(v18, v19);
  uint64_t v20 = a1[16];
  unint64_t v21 = a1[17];
  *((_OWORD *)a1 + 8) = *(_OWORD *)(a2 + 128);
  sub_100016F9C(v20, v21);
  uint64_t v22 = a1[18];
  unint64_t v23 = a1[19];
  *((_OWORD *)a1 + 9) = *(_OWORD *)(a2 + 144);
  sub_100016F9C(v22, v23);
  uint64_t v24 = a1[20];
  unint64_t v25 = a1[21];
  *((_OWORD *)a1 + 10) = *(_OWORD *)(a2 + 160);
  sub_100016F9C(v24, v25);
  uint64_t v26 = (uint64_t *)(a2 + 176);
  unint64_t v27 = a1[23];
  if (v27 >> 60 != 15)
  {
    unint64_t v28 = *(void *)(a2 + 184);
    if (v28 >> 60 != 15)
    {
      uint64_t v29 = a1[22];
      a1[22] = *v26;
      a1[23] = v28;
      sub_100016F9C(v29, v27);
      return a1;
    }

    sub_100041D4C((uint64_t)(a1 + 22));
  }

  *((_OWORD *)a1 + 11) = *(_OWORD *)v26;
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsLEFinalizePairingCommandPayload(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 192)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AirPodsLEFinalizePairingCommandPayload( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 184) = 0LL;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 192) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 192) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0LL;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AirPodsLEFinalizePairingCommandPayload()
{
  return &type metadata for AirPodsLEFinalizePairingCommandPayload;
}

uint64_t sub_100041FC4(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100012ED8(a1, v3);
  dispatch thunk of BinaryEncoding.container()(v30, v3, v4);
  __int128 v29 = *v1;
  uint64_t v5 = v31;
  uint64_t v6 = v32;
  sub_100037298((uint64_t)v30, v31);
  unint64_t v7 = sub_100042440();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v29, &type metadata for Data, v7, v5, v6);
  if (!v2)
  {
    __int128 v29 = v1[1];
    uint64_t v8 = v31;
    uint64_t v9 = v32;
    sub_100037298((uint64_t)v30, v31);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v29, &type metadata for Data, v7, v8, v9);
    __int128 v29 = v1[3];
    uint64_t v10 = v31;
    uint64_t v11 = v32;
    sub_100037298((uint64_t)v30, v31);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v29, &type metadata for Data, v7, v10, v11);
    __int128 v29 = v1[4];
    uint64_t v12 = v31;
    uint64_t v13 = v32;
    sub_100037298((uint64_t)v30, v31);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v29, &type metadata for Data, v7, v12, v13);
    __int128 v29 = v1[2];
    uint64_t v14 = v31;
    uint64_t v15 = v32;
    sub_100037298((uint64_t)v30, v31);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v29, &type metadata for Data, v7, v14, v15);
    __int128 v29 = v1[5];
    uint64_t v16 = v31;
    uint64_t v17 = v32;
    sub_100037298((uint64_t)v30, v31);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v29, &type metadata for Data, v7, v16, v17);
    __int128 v29 = v1[7];
    uint64_t v18 = v31;
    uint64_t v19 = v32;
    sub_100037298((uint64_t)v30, v31);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v29, &type metadata for Data, v7, v18, v19);
    __int128 v29 = v1[6];
    uint64_t v20 = v31;
    uint64_t v21 = v32;
    sub_100037298((uint64_t)v30, v31);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v29, &type metadata for Data, v7, v20, v21);
    __int128 v29 = v1[8];
    uint64_t v22 = v31;
    uint64_t v23 = v32;
    sub_100037298((uint64_t)v30, v31);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v29, &type metadata for Data, v7, v22, v23);
    __int128 v29 = v1[9];
    uint64_t v24 = v31;
    uint64_t v25 = v32;
    sub_100037298((uint64_t)v30, v31);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v29, &type metadata for Data, v7, v24, v25);
    __int128 v29 = v1[10];
    uint64_t v26 = v31;
    uint64_t v27 = v32;
    sub_100037298((uint64_t)v30, v31);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v29, &type metadata for Data, v7, v26, v27);
  }

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v30);
}

double sub_100042318@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v19;
    a2[8] = v18;
    a2[9] = v5;
    __int128 v6 = v21;
    a2[10] = v20;
    a2[11] = v6;
    __int128 v7 = v15;
    a2[4] = v14;
    a2[5] = v7;
    __int128 v8 = v17;
    a2[6] = v16;
    a2[7] = v8;
    __int128 v9 = v11[1];
    *a2 = v11[0];
    a2[1] = v9;
    double result = *(double *)&v12;
    __int128 v10 = v13;
    a2[2] = v12;
    a2[3] = v10;
  }

  return result;
}

uint64_t sub_100042378(void *a1)
{
  return sub_100041FC4(a1);
}

unint64_t sub_10004238C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1000423B8();
  unint64_t result = sub_1000423FC();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_1000423B8()
{
  unint64_t result = qword_10099DAE8;
  if (!qword_10099DAE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E7698, &type metadata for AirPodsLEFinalizePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_10099DAE8);
  }

  return result;
}

unint64_t sub_1000423FC()
{
  unint64_t result = qword_10099DAF0;
  if (!qword_10099DAF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E76C0, &type metadata for AirPodsLEFinalizePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_10099DAF0);
  }

  return result;
}

unint64_t sub_100042440()
{
  unint64_t result = qword_10099DAF8;
  if (!qword_10099DAF8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10099DAF8);
  }

  return result;
}

void sub_100042484(uint64_t a1, uint64_t a2)
{
  __asm { BR              X26 }

void sub_1000424D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a2) == 89LL) {
    __asm { BR              X26 }
  }

  __break(1u);
  JUMPOUT(0x10004289CLL);
}

uint64_t sub_10004296C@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100012ED8(a1, v5);
  dispatch thunk of BinaryDecoding.container()(v57, v5, v6);
  uint64_t v7 = v58;
  uint64_t v8 = v59;
  sub_100037298((uint64_t)v57, v58);
  uint64_t v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)(89LL, v7, v8);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v57);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    uint64_t v11 = v9;
    uint64_t v12 = v10;
    uint64_t v13 = v58;
    uint64_t v14 = v59;
    sub_100037298((uint64_t)v57, v58);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(32LL, v13, v14);
    uint64_t v72 = v15;
    uint64_t v17 = v58;
    uint64_t v16 = v59;
    sub_100037298((uint64_t)v57, v58);
    uint64_t v18 = dispatch thunk of BinaryDecodingContaining.decode(length:)(100LL, v17, v16);
    unint64_t v55 = v19;
    uint64_t v56 = v18;
    uint64_t v20 = v58;
    uint64_t v21 = v59;
    sub_100037298((uint64_t)v57, v58);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(1LL, v20, v21);
    sub_10001736C(v56, v55);
    sub_100042F34();
    uint64_t v22 = DataProtocol.intValue.getter(&type metadata for Data);
    sub_100178C64(v22, v56, v55);
    uint64_t v23 = v58;
    uint64_t v24 = v59;
    sub_100037298((uint64_t)v57, v58);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(60LL, v23, v24);
    uint64_t v25 = v58;
    uint64_t v26 = v59;
    sub_100037298((uint64_t)v57, v58);
    uint64_t v27 = dispatch thunk of BinaryDecodingContaining.decode(length:)(706LL, v25, v26);
    unint64_t v54 = v28;
    uint64_t v29 = v58;
    uint64_t v30 = v59;
    sub_100037298((uint64_t)v57, v58);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(2LL, v29, v30);
    sub_10001736C(v27, v54);
    uint64_t v31 = DataProtocol.intValue.getter(&type metadata for Data);
    sub_100178C64(v31, v27, v54);
    uint64_t v32 = v58;
    uint64_t v33 = v59;
    sub_100037298((uint64_t)v57, v58);
    uint64_t v34 = dispatch thunk of BinaryDecodingContaining.decode(length:)(554LL, v32, v33);
    unint64_t v52 = v35;
    uint64_t v53 = v34;
    uint64_t v36 = v58;
    uint64_t v37 = v59;
    sub_100037298((uint64_t)v57, v58);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(2LL, v36, v37);
    sub_10001736C(v53, v52);
    uint64_t v38 = DataProtocol.intValue.getter(&type metadata for Data);
    sub_100178C64(v38, v53, v52);
    uint64_t v39 = v58;
    uint64_t v40 = v59;
    sub_100037298((uint64_t)v57, v58);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(8LL, v39, v40);
    uint64_t v41 = v58;
    uint64_t v42 = v59;
    sub_100037298((uint64_t)v57, v58);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(24LL, v41, v42);
    sub_100016F9C(v53, v52);
    sub_100016F9C(v27, v54);
    sub_100016F9C(v56, v55);
    sub_100042484(v11, v12);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v57);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    __int128 v44 = v69;
    __int128 v45 = v70;
    __int128 v46 = v67;
    a2[8] = v68;
    a2[9] = v44;
    __int128 v47 = v71;
    a2[10] = v45;
    a2[11] = v47;
    __int128 v48 = v65;
    __int128 v49 = v66;
    a2[4] = v64;
    a2[5] = v48;
    a2[6] = v49;
    a2[7] = v46;
    __int128 v50 = v61;
    *a2 = v60;
    a2[1] = v50;
    __int128 v51 = v63;
    a2[2] = v62;
    a2[3] = v51;
  }

  return result;
}

unint64_t sub_100042F34()
{
  unint64_t result = qword_1009A6C70;
  if (!qword_1009A6C70)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1009A6C70);
  }

  return result;
}

Swift::Int sub_100042F78()
{
  return Hasher._finalize()();
}

void sub_100042FB8()
{
}

Swift::Int sub_100042FDC(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100043018()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for FindMyNetworkPublishDateProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd32FindMyNetworkPublishDateProvider);
}

uint64_t storeEnumTagSinglePayload for FindMyNetworkPublishDateProviderFactory(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100043094 + 4 * byte_1007E7710[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000430B4 + 4 * byte_1007E7715[v4]))();
  }
}

_BYTE *sub_100043094(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1000430B4(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000430BC(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000430C4(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000430CC(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000430D4(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FindMyNetworkPublishDateProviderFactory()
{
  return &type metadata for FindMyNetworkPublishDateProviderFactory;
}

unint64_t sub_1000430F4()
{
  unint64_t result = qword_10099DBD8;
  if (!qword_10099DBD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E7808, &type metadata for FindMyNetworkPublishDateProviderFactory);
    atomic_store(result, (unint64_t *)&qword_10099DBD8);
  }

  return result;
}

uint64_t sub_100043138()
{
  uint64_t v1 = v0;
  if (qword_10099B7B0 != -1) {
    swift_once(&qword_10099B7B0, sub_100651924);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_10000A720(v2, (uint64_t)qword_100A2B0E0);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "AirPodsLEPairingManager.deinit", v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  swift_release(*(void *)(v1 + 24));
  swift_release(*(void *)(v1 + 32));

  swift_release(*(void *)(v1 + 48));
  swift_release(*(void *)(v1 + 64));
  swift_bridgeObjectRelease();
  swift_release(*(void *)(v1 + 80));
  swift_release(*(void *)(v1 + 88));
  swift_release(*(void *)(v1 + 96));
  swift_release(*(void *)(v1 + 104));
  sub_1000182F0(*(void *)(v1 + 112), *(void *)(v1 + 120));
  swift_release(*(void *)(v1 + 128));
  swift_release(*(void *)(v1 + 136));
  sub_10002214C(*(void *)(v1 + 144), *(void *)(v1 + 152));
  sub_1000182F0(*(void *)(v1 + 160), *(void *)(v1 + 168));
  swift_bridgeObjectRelease();
  swift_release(*(void *)(v1 + 192));
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1000432AC()
{
  return swift_deallocClassInstance(v0, 216LL, 7LL);
}

uint64_t type metadata accessor for AirPodsLEPairingManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd23AirPodsLEPairingManager);
}

uint64_t sub_1000432EC()
{
  uint64_t v0 = sub_100004AEC(&qword_1009BB4F0);
  uint64_t result = swift_allocObject(v0, 20LL, 7LL);
  *(_DWORD *)(result + swift_weakDestroy(v0 + 16) = 0;
  qword_10099DF60 = result;
  return result;
}

void *sub_100043320()
{
  uint64_t Controller = type metadata accessor for MessagingQueryController();
  swift_allocObject(Controller, 136LL, 15LL);
  uint64_t result = sub_10078B044(0xD00000000000001BLL, 0x8000000100851AB0LL);
  qword_10099DF78 = (uint64_t)result;
  return result;
}

BOOL sub_100043374(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_10004338C(uint64_t a1)
{
  uint64_t v1 = static os_log_type_t.debug.getter(a1);
  if (qword_10099B728 != -1) {
    swift_once(&qword_10099B728, sub_1006512E8);
  }
  os_log(_:dso:log:_:_:)( v1,  &_mh_execute_header,  qword_100A2B038,  "Flushing FamilyCircle cache",  27LL,  2LL,  _swiftEmptyArrayStorage);
  qword_10099DF68 = 0LL;
  swift_bridgeObjectRelease();
  qword_10099DF70 = 0LL;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10004342C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = qword_10099DF68;
  if (qword_10099DF68)
  {
    swift_bridgeObjectRetain(qword_10099DF68);
    uint64_t v4 = static os_log_type_t.debug.getter(v3);
    if (qword_10099B728 != -1) {
      swift_once(&qword_10099B728, sub_1006512E8);
    }
    uint64_t result = os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  qword_100A2B038,  "Using cached FamilyCircle",  25LL,  2LL,  _swiftEmptyArrayStorage);
    *(void *)a1 = v2;
    *(_BYTE *)(a1 + 8) = 0;
  }

  else
  {
    id v6 = [objc_allocWithZone(FAFetchFamilyCircleRequest) init];
    [v6 setCachePolicy:1];
    uint64_t v7 = dispatch_group_create();
    uint64_t v8 = swift_allocObject(&unk_10093A948, 25LL, 7LL);
    unint64_t v9 = sub_100044A38();
    uint64_t v10 = swift_allocError(&type metadata for FamilyCircle.FamilyCircleError, v9, 0LL, 0LL);
    *uint64_t v11 = 1;
    *(void *)(v8 + swift_weakDestroy(v0 + 16) = v10;
    *(_BYTE *)(v8 + 24) = 1;
    dispatch_group_enter(v7);
    uint64_t v12 = swift_allocObject(&unk_10093A970, 32LL, 7LL);
    *(void *)(v12 + swift_weakDestroy(v0 + 16) = v7;
    *(void *)(v12 + 24) = v8;
    v17[4] = sub_100044AA8;
    v17[5] = v12;
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 1107296256LL;
    v17[2] = sub_1000437C8;
    v17[3] = &unk_10093A988;
    uint64_t v13 = _Block_copy(v17);
    uint64_t v14 = v7;
    swift_retain();
    swift_release();
    [v6 startRequestWithCompletionHandler:v13];
    _Block_release(v13);
    OS_dispatch_group.wait()();

    swift_beginAccess(v8 + 16, v17, 0LL, 0LL);
    uint64_t v15 = *(void *)(v8 + 16);
    char v16 = *(_BYTE *)(v8 + 24);
    *(void *)a1 = v15;
    *(_BYTE *)(a1 + 8) = v16;
    sub_100044AC8(v15, v16);
    return swift_release();
  }

  return result;
}

void sub_100043644(void *a1, uint64_t a2, dispatch_group_s *a3, uint64_t a4)
{
  uint64_t v6 = a4 + 16;
  if (a2)
  {
    swift_beginAccess(a4 + 16, v20, 1LL, 0LL);
    uint64_t v8 = *(void *)(a4 + 16);
    char v9 = *(_BYTE *)(a4 + 24);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = a2;
    *(_BYTE *)(a4 + 24) = 1;
    swift_errorRetain(a2);
    uint64_t v10 = v8;
    char v11 = v9;
  }

  else if (a1)
  {
    id v12 = a1;
    id v13 = [v12 members];
    uint64_t v14 = sub_100022898(0LL, &qword_10099DF88, &OBJC_CLASS___FAFamilyMember_ptr);
    uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

    uint64_t v16 = sub_1006F1270(v15);
    swift_bridgeObjectRelease();
    qword_10099DF68 = v16;
    swift_bridgeObjectRetain(v16);

    swift_bridgeObjectRelease();
    swift_beginAccess(v6, v20, 1LL, 0LL);
    uint64_t v10 = *(void *)(a4 + 16);
    char v11 = *(_BYTE *)(a4 + 24);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = v16;
    *(_BYTE *)(a4 + 24) = 0;
  }

  else
  {
    unint64_t v17 = sub_100044A38();
    uint64_t v18 = swift_allocError(&type metadata for FamilyCircle.FamilyCircleError, v17, 0LL, 0LL);
    *unint64_t v19 = 1;
    swift_beginAccess(v6, v20, 1LL, 0LL);
    uint64_t v10 = *(void *)(a4 + 16);
    char v11 = *(_BYTE *)(a4 + 24);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = v18;
    *(_BYTE *)(a4 + 24) = 1;
  }

  sub_100044A2C(v10, v11);
  dispatch_group_leave(a3);
}

void sub_1000437C8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(void (**)(void *, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v8 = a2;
  id v7 = a3;
  v6(a2, a3);
  swift_release(v5);
}

uint64_t sub_10004383C@<X0>(void *a1@<X8>)
{
  uint64_t v1 = qword_10099DF70;
  *a1 = qword_10099DF70;
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_10004385C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[14] = a5;
  v6[15] = a6;
  v6[13] = a4;
  return swift_task_switch(sub_100043878, 0LL, 0LL);
}

uint64_t sub_100043878()
{
  uint64_t v1 = *(void *)(v0 + 104);
  *(void *)(v0 + 88) = &_swiftEmptySetSingleton;
  char v2 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(v0 + 256) = v2;
  uint64_t v3 = -1LL;
  uint64_t v4 = -1LL << v2;
  if (-(-1LL << v2) < 64) {
    uint64_t v3 = ~(-1LL << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(v1 + 56);
  swift_bridgeObjectRetain(v1);
  if (!v5)
  {
    unint64_t v15 = 63 - v4;
    if ((unint64_t)(63 - v4) > 0x7F)
    {
      unint64_t v16 = v6[8];
      if (v16)
      {
        uint64_t v7 = 1LL;
LABEL_11:
        uint64_t v9 = (v16 - 1) & v16;
        unint64_t v8 = __clz(__rbit64(v16)) + (v7 << 6);
        goto LABEL_5;
      }

      if (v15 >= 0xC0)
      {
        unint64_t v16 = v6[9];
        if (v16)
        {
          uint64_t v7 = 2LL;
          goto LABEL_11;
        }

        if (v15 >= 0x100)
        {
          unint64_t v16 = v6[10];
          if (v16)
          {
            uint64_t v7 = 3LL;
            goto LABEL_11;
          }

          if (v15 >= 0x140)
          {
            unint64_t v16 = v6[11];
            if (v16)
            {
              uint64_t v7 = 4LL;
              goto LABEL_11;
            }

            uint64_t v17 = 0LL;
            uint64_t v18 = v15 >> 6;
            if (v18 <= 5) {
              uint64_t v18 = 5LL;
            }
            uint64_t v19 = v18 - 5;
            while (v19 != v17)
            {
              unint64_t v16 = v6[v17++ + 12];
              if (v16)
              {
                uint64_t v7 = v17 + 4;
                goto LABEL_11;
              }
            }
          }
        }
      }
    }

    swift_release();
    uint64_t v20 = *(void *)(v0 + 88);
    *(void *)(v0 + 128) = v20;
    uint64_t v21 = swift_allocObject(&unk_10093A9C0, 24LL, 7LL);
    *(void *)(v0 + 136) = v21;
    *(void *)(v21 + swift_weakDestroy(v0 + 16) = v20;
    uint64_t v22 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_bridgeObjectRetain(v20);
    uint64_t v23 = (void *)swift_task_alloc(v22);
    *(void *)(v0 + 144) = v23;
    void *v23 = v0;
    v23[1] = sub_100043AA0;
    return unsafeBlocking<A>(_:)(v23, sub_100044BE8, v21, (char *)&type metadata for () + 8);
  }

  uint64_t v7 = 0LL;
  unint64_t v8 = __clz(__rbit64(v5));
  uint64_t v9 = (v5 - 1) & v5;
LABEL_5:
  *(void *)(v0 + 152) = v7;
  *(void *)(v0 + 160) = v9;
  uint64_t v10 = v6[6] + 24 * v8;
  *(_BYTE *)(v0 + 257) = *(_BYTE *)v10;
  *(void *)(v0 + 168) = *(void *)(v10 + 8);
  uint64_t v11 = *(void *)(v10 + 16);
  *(void *)(v0 + 176) = v11;
  uint64_t v12 = qword_10099B090;
  swift_bridgeObjectRetain(v11);
  if (v12 != -1) {
    swift_once(&qword_10099B090, sub_100043320);
  }
  uint64_t v13 = qword_10099DF78;
  *(void *)(v0 + 184) = qword_10099DF78;
  return swift_task_switch(sub_100043B40, v13, 0LL);
}

uint64_t sub_100043AA0()
{
  return swift_task_switch(sub_100043AFC, 0LL, 0LL);
}

uint64_t sub_100043AFC()
{
  uint64_t v1 = *(void *)(v0 + 128);
  (*(void (**)(uint64_t, void))(v0 + 112))(v1, 0LL);
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100043B40()
{
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 168);
  char v4 = *(_BYTE *)(v0 + 257);
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009B1370);
  uint64_t inited = swift_initStackObject(v5, v0 + 16);
  *(void *)(v0 + 192) = inited;
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(_BYTE *)(inited + 32) = v4;
  *(void *)(inited + 40) = v3;
  *(void *)(inited + 48) = v1;
  uint64_t v7 = *(void **)(v2 + 112);
  *(void *)(v0 + 200) = v7;
  swift_bridgeObjectRetain(v1);
  if (v7)
  {
    uint64_t v8 = *(void *)(v0 + 184);
    unint64_t v9 = sub_100044B70();
    uint64_t v10 = (void *)swift_task_alloc(48LL);
    *(void *)(v0 + 208) = v10;
    v10[2] = inited;
    v10[3] = v7;
    v10[4] = v8;
    uint64_t v11 = async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1];
    id v12 = v7;
    uint64_t v13 = (void *)swift_task_alloc(v11);
    *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = v13;
    uint64_t v14 = sub_100004AEC(&qword_10099DFB0);
    *uint64_t v13 = v0;
    v13[1] = sub_100043CF8;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 96,  v8,  v9,  0xD00000000000001CLL,  0x8000000100851A60LL,  sub_100044BB8,  v10,  v14);
  }

  else
  {
    unint64_t v16 = sub_100044AD4();
    uint64_t v17 = swift_allocError(&type metadata for MessagingError, v16, 0LL, 0LL);
    *uint64_t v18 = 6LL;
    swift_willThrow(v17);
    *(void *)(v0 + 232) = v17;
    uint64_t v19 = *(void *)(v0 + 192);
    swift_setDeallocating(v19);
    swift_arrayDestroy(v19 + 32, *(void *)(v19 + 16), &type metadata for MessagingDestination);
    swift_bridgeObjectRelease();
    return swift_task_switch(sub_100043FFC, 0LL, 0LL);
  }

uint64_t sub_100043CF8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 216);
  *(void *)(*v1 + 224) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 184);
    uint64_t v5 = sub_100043F78;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 184);
    swift_task_dealloc(*(void *)(v2 + 208));
    uint64_t v5 = sub_100043D6C;
    uint64_t v4 = v6;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_100043D6C()
{
  uint64_t v1 = *(void *)(v0 + 192);

  uint64_t v2 = v1 + 32;
  swift_setDeallocating(v1);
  swift_arrayDestroy(v1 + 32, *(void *)(v1 + 16), &type metadata for MessagingDestination);
  uint64_t v3 = *(void *)(v0 + 96);
  unint64_t v4 = *(void *)(v3 + 64);
  char v5 = *(_BYTE *)(v3 + 32);
  uint64_t v6 = 1LL << v5;
  if (v4)
  {
    uint64_t v7 = 0LL;
  }

  else
  {
    if ((v5 & 0x3Fu) < 7) {
      goto LABEL_24;
    }
    unint64_t v4 = *(void *)(v3 + 72);
    if (!v4)
    {
      unint64_t v18 = (unint64_t)(v6 + 63) >> 6;
      if (v18 <= 2) {
        unint64_t v18 = 2LL;
      }
      uint64_t v19 = (unint64_t *)(v3 + 80);
      unint64_t v20 = v18 - 2;
      uint64_t v7 = 64LL;
      while (v20)
      {
        unint64_t v21 = *v19++;
        unint64_t v4 = v21;
        v7 += 64LL;
        --v20;
        if (v21) {
          goto LABEL_3;
        }
      }

      goto LABEL_24;
    }

    uint64_t v7 = 64LL;
  }

LABEL_28:
  if (v2 < 0) {
    uint64_t v22 = v2;
  }
  else {
    uint64_t v22 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v2);
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter(v22);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v23) {
    goto LABEL_24;
  }
LABEL_9:
  if ((v2 & 0xC000000000000001LL) != 0)
  {
    id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v2);
LABEL_12:
    id v12 = v11;
    swift_bridgeObjectRelease();
    id v13 = [v12 senderCorrelationIdentifier];

    if (v13)
    {
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      uint64_t v16 = v15;

      *(void *)(v0 + 240) = v14;
      *(void *)(v0 + 248) = v16;
      uint64_t v17 = sub_1000442D0;
    }

    else
    {
      uint64_t v17 = sub_1000444F4;
    }

    return swift_task_switch(v17, 0LL, 0LL);
  }

  if (*(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    id v11 = *(id *)(v2 + 32);
    goto LABEL_12;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

          sub_100018C68(v64, type metadata accessor for LostModeRecord);
          goto LABEL_29;
        }

    uint64_t v30 = sub_100004AEC(&qword_1009A5978);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v13, 1LL, 1LL, v30);
    uint64_t v22 = 0LL;
  }

  __int128 v64 = v36;
  unint64_t v43 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  __int128 v44 = swift_bridgeObjectRetain(v41);
  __int128 v45 = 0LL;
  __int128 v63 = *(void *)(v4 + 72);
  __int128 v46 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v4 + 16);
  while (1)
  {
    __int128 v47 = v66;
    uint64_t result = v46(v66, v41 + v43, v67, v44);
    if (v45 >= *(void *)(v64 + 16)) {
      break;
    }
    __int128 v48 = v65;
    __int128 v49 = v67;
    ((void (*)(char *, unint64_t, uint64_t))v46)(v65, v64 + v43, v67);
    __int128 v50 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    __int128 v51 = dispatch thunk of static Equatable.== infix(_:_:)(v47, v48, v49, v50);
    v40((uint64_t)v48, v49);
    v40((uint64_t)v47, v49);
    if ((v51 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_44;
    }

    ++v45;
    v43 += v63;
    if (v42 == v45)
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      a1 = v55;
      a2 = v56;
      id v13 = v53;
      unint64_t v4 = v54;
      goto LABEL_40;
    }
  }

  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

    __break(1u);
    goto LABEL_29;
  }

  return v27;
}

  __break(1u);
}

    uint64_t v79 = (v42 - 1) & v42;
    unint64_t v80 = v43;
    uint64_t v40 = __clz(__rbit64(v42)) + (v43 << 6);
LABEL_29:
    __int128 v45 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    __int128 v46 = (uint64_t)v76;
    v45(v76, *(void *)(v17 + 48) + *(void *)(v9 + 72) * v40, v8);
    __int128 v47 = *(void *)(*(void *)(v17 + 56) + 8 * v40);
    __int128 v48 = v78;
    *(void *)(v46 + *(int *)(v78 + 48)) = v47;
    sub_100015750(v46, (uint64_t)v15, &qword_1009A7DB0);
    __int128 v49 = *(int *)(v48 + 48);
    __int128 v50 = v77;
    v45(v77, (unint64_t)v15, v8);
    uint64_t v19 = *(void *)&v15[v49];
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v81, v50, v8);
    if ((unint64_t)v19 >> 62)
    {
      if (v19 < 0) {
        __int128 v66 = v19;
      }
      else {
        __int128 v66 = v19 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRetain(v19);
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v66);
      if (!v17)
      {
LABEL_44:
        uint64_t v24 = swift_bridgeObjectRelease();
        unint64_t v52 = _swiftEmptyArrayStorage;
        goto LABEL_8;
      }
    }

    else
    {
      uint64_t v17 = *(void *)((v19 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRetain(v19);
      if (!v17) {
        goto LABEL_44;
      }
    }

    id v82 = _swiftEmptyArrayStorage;
    sub_100032800(0, v17 & ~(v17 >> 63), 0);
    if (v17 < 0)
    {
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }

    __int128 v51 = 0LL;
    unint64_t v52 = v82;
    do
    {
      if ((v19 & 0xC000000000000001LL) != 0) {
        uint64_t v53 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v51, v19);
      }
      else {
        uint64_t v53 = *(id *)(v19 + 8 * v51 + 32);
      }
      unint64_t v54 = v53;
      unint64_t v55 = [v53 beaconingKey];
      uint64_t v56 = [v55 key];

      __int128 v57 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v56);
      uint64_t v59 = v58;

      __int128 v60 = Data.hexString.getter(v57, v59);
      __int128 v62 = v61;
      sub_100016F9C(v57, v59);

      id v82 = v52;
      __int128 v64 = v52[2];
      __int128 v63 = v52[3];
      if (v64 >= v63 >> 1)
      {
        sub_100032800(v63 > 1, v64 + 1, 1);
        unint64_t v52 = v82;
      }

      ++v51;
      v52[2] = v64 + 1;
      __int128 v65 = &v52[2 * v64];
      v65[4] = v60;
      v65[5] = v62;
    }

    while (v17 != v51);
    uint64_t v24 = swift_bridgeObjectRelease();
    unint64_t v8 = v71;
LABEL_8:
    uint64_t v25 = static os_log_type_t.default.getter(v24);
    uint64_t v26 = qword_100A2B030;
    uint64_t v27 = sub_100004AEC((uint64_t *)&unk_10099D740);
    unint64_t v28 = swift_allocObject(v27, 112LL, 7LL);
    *(_OWORD *)(v28 + swift_weakDestroy(v0 + 16) = v72;
    uint64_t v29 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v30 = v81;
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter(v8, v29);
    uint64_t v33 = v32;
    *(void *)(v28 + 56) = &type metadata for String;
    uint64_t v34 = sub_1000226F4();
    *(void *)(v28 + 64) = v34;
    *(void *)(v28 + 32) = v31;
    *(void *)(v28 + 40) = v33;
    id v82 = v52;
    unint64_t v35 = sub_100004AEC(&qword_1009AED50);
    uint64_t v36 = sub_1000372EC( (unint64_t *)&qword_1009A0500,  &qword_1009AED50,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v37 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v35, v36);
    uint64_t v39 = v38;
    swift_bridgeObjectRelease();
    *(void *)(v28 + 96) = &type metadata for String;
    *(void *)(v28 + 104) = v34;
    *(void *)(v28 + 72) = v37;
    *(void *)(v28 + 80) = v39;
    os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v26, "%@: %@", 6LL, 2LL, v28);
    swift_bridgeObjectRelease();
    uint64_t v9 = v75;
    (*(void (**)(char *, uint64_t))(v75 + 8))(v30, v8);
    uint64_t v15 = v73;
    sub_100015794((uint64_t)v73, &qword_1009A7DB0);
    uint64_t v17 = v74;
    uint64_t v19 = v79;
    uint64_t v23 = v80;
  }

  __int128 v44 = v23 + 6;
  if (v23 + 6 >= v70) {
    goto LABEL_45;
  }
  uint64_t v42 = *(void *)(v69 + 8 * v44);
  if (v42)
  {
    unint64_t v43 = v23 + 6;
    goto LABEL_28;
  }

  while (1)
  {
    unint64_t v43 = v44 + 1;
    if (__OFADD__(v44, 1LL)) {
      break;
    }
    if (v43 >= v70) {
      goto LABEL_45;
    }
    uint64_t v42 = *(void *)(v69 + 8 * v43);
    ++v44;
    if (v42) {
      goto LABEL_28;
    }
  }

  __break(1u);
}

    uint64_t v85 = (v46 - 1) & v46;
    uint64_t v86 = v47;
    __int128 v44 = __clz(__rbit64(v46)) + (v47 << 6);
LABEL_29:
    __int128 v50 = v89;
    __int128 v49 = v90;
    __int128 v51 = *(void (**)(char *, unint64_t, uint64_t))(v89 + 16);
    unint64_t v52 = (uint64_t)v81;
    v51(v81, v22[6] + *(void *)(v89 + 72) * v44, v90);
    uint64_t v53 = *(void *)(v22[7] + 8 * v44);
    unint64_t v54 = v83;
    *(void *)(v52 + *(int *)(v83 + 48)) = v53;
    unint64_t v55 = v87;
    sub_100015750(v52, v87, &qword_1009A7DB0);
    uint64_t v56 = *(int *)(v54 + 48);
    __int128 v57 = v82;
    v51(v82, v55, v49);
    uint64_t v58 = *(void *)(v55 + v56);
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v88, v57, v49);
    if ((unint64_t)v58 >> 62)
    {
      if (v58 < 0) {
        uint64_t v75 = v58;
      }
      else {
        uint64_t v75 = v58 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRetain(v58);
      unint64_t v21 = _CocoaArrayWrapper.endIndex.getter(v75);
      if (!v21)
      {
LABEL_44:
        uint64_t v27 = swift_bridgeObjectRelease();
        __int128 v60 = _swiftEmptyArrayStorage;
        goto LABEL_8;
      }
    }

    else
    {
      unint64_t v21 = *(void *)((v58 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRetain(v58);
      if (!v21) {
        goto LABEL_44;
      }
    }

    id v92 = _swiftEmptyArrayStorage;
    sub_100032800(0, v21 & ~(v21 >> 63), 0);
    if (v21 < 0)
    {
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }

    uint64_t v59 = 0LL;
    __int128 v60 = v92;
    id v91 = v58 & 0xC000000000000001LL;
    __int128 v61 = v58;
    do
    {
      if (v91) {
        __int128 v62 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v59, v58);
      }
      else {
        __int128 v62 = *(id *)(v58 + 8 * v59 + 32);
      }
      __int128 v63 = v62;
      __int128 v64 = [v62 beaconingKey];
      __int128 v65 = [v64 key];

      __int128 v66 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v65);
      __int128 v68 = v67;

      __int128 v69 = Data.hexString.getter(v66, v68);
      __int128 v71 = v70;
      sub_100016F9C(v66, v68);

      id v92 = v60;
      uint64_t v73 = v60[2];
      uint64_t v72 = v60[3];
      if (v73 >= v72 >> 1)
      {
        sub_100032800(v72 > 1, v73 + 1, 1);
        __int128 v60 = v92;
      }

      ++v59;
      v60[2] = v73 + 1;
      uint64_t v74 = &v60[2 * v73];
      v74[4] = v69;
      v74[5] = v71;
      uint64_t v58 = v61;
    }

    while (v21 != v59);
    uint64_t v27 = swift_bridgeObjectRelease();
LABEL_8:
    unint64_t v28 = static os_log_type_t.default.getter(v27);
    uint64_t v29 = qword_100A2B030;
    uint64_t v30 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v31 = swift_allocObject(v30, 112LL, 7LL);
    *(_OWORD *)(v31 + swift_weakDestroy(v0 + 16) = v80;
    uint64_t v32 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v33 = v88;
    uint64_t v34 = v90;
    unint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter(v90, v32);
    uint64_t v37 = v36;
    *(void *)(v31 + 56) = &type metadata for String;
    uint64_t v38 = sub_1000226F4();
    *(void *)(v31 + 64) = v38;
    *(void *)(v31 + 32) = v35;
    *(void *)(v31 + 40) = v37;
    id v92 = v60;
    uint64_t v39 = sub_100004AEC(&qword_1009AED50);
    uint64_t v40 = sub_1000372EC( (unint64_t *)&qword_1009A0500,  &qword_1009AED50,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v41 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v39, v40);
    unint64_t v43 = v42;
    swift_bridgeObjectRelease();
    *(void *)(v31 + 96) = &type metadata for String;
    *(void *)(v31 + 104) = v38;
    *(void *)(v31 + 72) = v41;
    *(void *)(v31 + 80) = v43;
    os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "%@: %@", 6LL, 2LL, v31);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v89 + 8))(v33, v34);
    sub_100015794(v87, &qword_1009A7DB0);
    uint64_t v22 = v84;
    unint64_t v21 = v85;
    uint64_t v26 = v86;
  }

  __int128 v48 = v26 + 6;
  if (v26 + 6 >= v79) {
    goto LABEL_45;
  }
  __int128 v46 = v78[v48];
  if (v46)
  {
    __int128 v47 = v26 + 6;
    goto LABEL_28;
  }

  while (1)
  {
    __int128 v47 = v48 + 1;
    if (__OFADD__(v48, 1LL)) {
      break;
    }
    if (v47 >= v79) {
      goto LABEL_45;
    }
    __int128 v46 = v78[v47];
    ++v48;
    if (v46) {
      goto LABEL_28;
    }
  }

  __break(1u);
}

      uint64_t v24 = v25;
      uint64_t v22 = v26;
      swift_release();
      uint64_t v23 = 1LL;
LABEL_29:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v22, v23, 1LL, v24);
      return;
    }

      swift_release(a3);
      return 0LL;
    }

    swift_once(&qword_10099B330, sub_100374304);
    goto LABEL_9;
  }

  uint64_t v87 = v38;
  uint64_t v88 = v4;
  sub_10002218C((uint64_t)v23, v101, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  if (qword_10099B330 != -1) {
    swift_once(&qword_10099B330, sub_100374304);
  }
  __int128 v50 = type metadata accessor for Logger(0LL);
  sub_10000A720(v50, (uint64_t)qword_100A2A748);
  __int128 v51 = v102;
  unint64_t v52 = v100;
  uint64_t v86 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v102 + 16);
  uint64_t v53 = v86(v100, v28, v12);
  unint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
  unint64_t v55 = static os_log_type_t.default.getter(v54);
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = swift_slowAlloc(22LL, -1LL);
    uint64_t v85 = swift_slowAlloc(32LL, -1LL);
    v104[0] = v85;
    *(_DWORD *)uint64_t v56 = 141558275;
    uint64_t v105 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v56 + 4, v56 + 12);
    *(_WORD *)(v56 + 12) = 2081;
    uint64_t v84 = v56 + 14;
    __int128 v57 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter(v12, v57);
    uint64_t v105 = sub_1003F11D4(v58, v59, v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v84, v56 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v100, v12);
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "commandComplete %{private,mask.hash}s", (uint8_t *)v56, 0x16u);
    __int128 v60 = v85;
    swift_arrayDestroy(v85, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1LL, -1LL);
    swift_slowDealloc(v56, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v12);
  }

  __int128 v61 = v101;
  __int128 v62 = *(void *)(v101 + v24[7]);
  __int128 v63 = swift_retain();
  dispatch thunk of DispatchWorkItem.cancel()(v63);
  swift_release(v62);
  if ((v94 & 1) != 0) {
    __int128 v64 = 5;
  }
  else {
    __int128 v64 = 3;
  }
  *(_BYTE *)(v61 + v24[6]) = v64;
  *(_BYTE *)(v61 + v24[10]) = 0;
  __int128 v65 = v89;
  static Date.trustedNow.getter(v89);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 40))(v61 + v24[8], v65, v92);
  __int128 v66 = v24[9];
  __int128 v67 = *(void *)(v61 + v66);
  __int128 v68 = v95;
  swift_errorRetain(v95);
  swift_errorRelease(v67);
  *(void *)(v61 + v66) = v68;
  __int128 v69 = (uint64_t)v93;
  __int128 v70 = (void (*)(char *, uint64_t, uint64_t))v86;
  v86(v93, v28, v12);
  __int128 v71 = v90;
  sub_10001DC4C(v61, v90, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  v87((char *)v71, 0LL, 1LL, v24);
  swift_beginAccess(v33, v104, 33LL, 0LL);
  sub_1000451A8(v71, v69);
  swift_endAccess(v104);
  uint64_t v72 = v28;
  if (qword_10099B300 != -1) {
    swift_once(&qword_10099B300, sub_1003459EC);
  }
  uint64_t v73 = qword_100A2A6C8;
  uint64_t v74 = (uint64_t)v98;
  v70(v98, v72, v12);
  uint64_t v75 = v96;
  static Date.trustedNow.getter(v74 + *(int *)(v96 + 20));
  *(_BYTE *)(v74 + *(int *)(v75 + swift_release(*(void *)(v0 + 24)) = 29;
  unsigned int v76 = sub_100004AEC(&qword_10099D318);
  uint64_t v77 = *(unsigned __int8 *)(v97 + 80);
  uint64_t v78 = (v77 + 32) & ~v77;
  uint64_t v79 = swift_allocObject(v76, v78 + *(void *)(v97 + 72), v77 | 7);
  *(_OWORD *)(v79 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  sub_10001DC4C(v74, v79 + v78, type metadata accessor for BeaconObservation);
  unint64_t v80 = type metadata accessor for Transaction(0LL);
  __chkstk_darwin(v80);
  *(&v83 - 4) = v73;
  *(&v83 - 3) = v79;
  *(&v83 - 2) = 0LL;
  *(&v83 - 1) = 0LL;
  static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.BeaconObservationStore.save",  57LL,  2LL,  sub_1002DDE58);
  swift_bridgeObjectRelease();
  sub_100018C68(v74, type metadata accessor for BeaconObservation);
  uint64_t v81 = v99;
  sub_10050BDEC(v72, v99);
  id v82 = type metadata accessor for WildModeAssociationRecord(0LL);
  LODWORD(v79) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 48LL))(v81, 1LL, v82);
  sub_100015794(v81, &qword_1009A4890);
  if ((_DWORD)v79 == 1) {
    sub_1004E696C(0xAu);
  }
  else {
    sub_1004E97E0();
  }
  sub_100018C68(v101, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
}

        sub_1003F1994(v6, v5);
        if (qword_10099B3F8 != -1) {
          swift_once(&qword_10099B3F8, sub_1003F1160);
        }
        unint64_t v43 = type metadata accessor for Logger(0LL);
        sub_10000A720(v43, (uint64_t)qword_100A2A910);
        __int128 v44 = swift_unknownObjectRetain_n(v4, 3LL);
        __int128 v45 = (os_log_s *)Logger.logObject.getter(v44);
        __int128 v71 = static os_log_type_t.default.getter(v45);
        if (os_log_type_enabled(v45, v71))
        {
          __int128 v46 = swift_slowAlloc(18LL, -1LL);
          __int128 v68 = swift_slowAlloc(32LL, -1LL);
          uint64_t v73 = v68;
          *(_DWORD *)__int128 v46 = 136446466;
          uint64_t v75 = v4;
          __int128 v47 = dispatch thunk of CustomStringConvertible.description.getter(v6, *(void *)(v5 + 8));
          uint64_t v75 = sub_1003F11D4(v47, v48, &v73);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v46 + 4, v46 + 12);
          swift_unknownObjectRelease(v4);
          swift_bridgeObjectRelease();
          *(_WORD *)(v46 + 12) = 1024;
          __int128 v49 = v62(v6, v5);
          swift_unknownObjectRelease(v4);
          LODWORD(v75) = v49;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, (char *)&v75 + 4, v46 + 14, v46 + 18);
          swift_unknownObjectRelease(v4);
          _os_log_impl( (void *)&_mh_execute_header,  v45,  v71,  "%{public}s is available. [schema version %d]",  (uint8_t *)v46,  0x12u);
          __int128 v50 = (char *)&type metadata for Any + 8;
          __int128 v51 = v68;
LABEL_37:
          swift_arrayDestroy(v51, 1LL, v50);
          swift_slowDealloc(v51, -1LL, -1LL);
          swift_slowDealloc(v46, -1LL, -1LL);

LABEL_39:
          (*(void (**)(uint64_t, uint64_t))(v5 + 120))(v6, v5);
          goto LABEL_40;
        }

        goto LABEL_38;
      }

      __break(1u);
    }

    swift_once(&qword_10099B3F8, sub_1003F1160);
LABEL_35:
    unint64_t v55 = type metadata accessor for Logger(0LL);
    sub_10000A720(v55, (uint64_t)qword_100A2A910);
    uint64_t v56 = swift_unknownObjectRetain_n(v4, 3LL);
    __int128 v45 = (os_log_s *)Logger.logObject.getter(v56);
    __int128 v57 = static os_log_type_t.default.getter(v45);
    if (os_log_type_enabled(v45, v57))
    {
      __int128 v46 = swift_slowAlloc(18LL, -1LL);
      uint64_t v72 = swift_slowAlloc(32LL, -1LL);
      uint64_t v73 = v72;
      *(_DWORD *)__int128 v46 = 136446466;
      uint64_t v75 = v4;
      __int128 v69 = v57;
      uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter(v6, *(void *)(v5 + 8));
      uint64_t v75 = sub_1003F11D4(v58, v59, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v46 + 4, v46 + 12);
      swift_unknownObjectRelease(v4);
      swift_bridgeObjectRelease();
      *(_WORD *)(v46 + 12) = 1024;
      __int128 v60 = v62(v6, v5);
      swift_unknownObjectRelease(v4);
      LODWORD(v75) = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, (char *)&v75 + 4, v46 + 14, v46 + 18);
      swift_unknownObjectRelease(v4);
      _os_log_impl( (void *)&_mh_execute_header,  v45,  v69,  "%{public}s is available. [schema version %d]",  (uint8_t *)v46,  0x12u);
      __int128 v50 = (char *)&type metadata for Any + 8;
      __int128 v51 = v72;
      goto LABEL_37;
    }

  __break(1u);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

  __break(1u);
}

      goto LABEL_15;
    }

    uint64_t v56 = v91;
    sub_10001DC4C((uint64_t)v17, v91, type metadata accessor for ManagedCBPeripheralBeaconInfo);
    if (v92)
    {
      sub_100018C68(v56, type metadata accessor for ManagedCBPeripheralBeaconInfo);
      goto LABEL_30;
    }

    __int128 v63 = sub_1004E5B60(*(_DWORD *)(v56 + v108[9]), v90);
    __int128 v64 = v56;
    __int128 v65 = v63;
    __int128 v66 = sub_100018C68(v64, type metadata accessor for ManagedCBPeripheralBeaconInfo);
    if (!v65)
    {
      __int128 v57 = (os_log_s *)Logger.logObject.getter(v66);
      uint64_t v86 = static os_log_type_t.info.getter(v57);
      if (os_log_type_enabled(v57, v86))
      {
        uint64_t v59 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v59 = 0;
        __int128 v60 = v57;
        __int128 v61 = v86;
        __int128 v62 = "Skipping non-allowed vendorId";
LABEL_27:
        _os_log_impl((void *)&_mh_execute_header, v60, v61, v62, v59, 2u);
        swift_slowDealloc(v59, -1LL, -1LL);
      }

      goto LABEL_28;
    }

  uint64_t v19 = 2;
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v19,  1046LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

          swift_release();
          uint64_t v41 = v122;
        }

        else
        {
          swift_bridgeObjectRelease();
          unint64_t v54 = _swiftEmptyArrayStorage;
        }
      }

      else
      {
        swift_bridgeObjectRelease();
        unint64_t v54 = _swiftEmptyArrayStorage;
        __int128 v48 = (uint64_t)v117;
      }

      objc_autoreleasePoolPop(v121);
      swift_release();
      __int128 v63 = v54[2];
      if (v63)
      {
        sub_1003493A4((uint64_t)v54 + v125, v48);
        swift_bridgeObjectRetain(v54);
        __int128 v64 = v63 - 1;
        if (v64)
        {
          uint64_t v77 = (uint64_t)v54 + v104;
          do
          {
            sub_1003493A4(v77, (uint64_t)v22);
            if ((static Date.< infix(_:_:)(v48 + *(int *)(v6 + 20), &v22[*(int *)(v6 + 20)]) & 1) != 0)
            {
              sub_100303000(v48);
              sub_1003493E8((uint64_t)v22, v48);
            }

            else
            {
              sub_100303000((uint64_t)v22);
            }

            v77 += v37;
            --v64;
          }

          while (v64);
        }

        swift_bridgeObjectRelease();
        sub_1003493E8(v48, (uint64_t)v5);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0LL, 1LL, v6);
        swift_bridgeObjectRelease();
        uint64_t v41 = v122;
      }

      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1LL, 1LL, v6);
        swift_bridgeObjectRelease();
      }

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
      {
        sub_100015794((uint64_t)v5, (uint64_t *)&unk_1009A5990);
      }

      else
      {
        __int128 v65 = (uint64_t)v105;
        sub_1003493E8((uint64_t)v5, (uint64_t)v105);
        if ((static Date.> infix(_:_:)(v65 + *(int *)(v6 + 20), v41 + *(int *)(v6 + 20)) & 1) != 0)
        {
          __int128 v66 = (uint64_t)v99;
          if (qword_10099B4C8 != -1) {
            swift_once(&qword_10099B4C8, sub_10047B404);
          }
          __int128 v67 = type metadata accessor for Logger(0LL);
          sub_10000A720(v67, (uint64_t)qword_100A2AAA0);
          __int128 v68 = sub_1003493A4(v41, v66);
          __int128 v69 = (os_log_s *)Logger.logObject.getter(v68);
          __int128 v70 = static os_log_type_t.default.getter(v69);
          if (os_log_type_enabled(v69, v70))
          {
            __int128 v71 = swift_slowAlloc(12LL, -1LL);
            uint64_t v121 = (void *)swift_slowAlloc(32LL, -1LL);
            v127[0] = (uint64_t)v121;
            *(_DWORD *)__int128 v71 = v103.n128_u32[0];
            uint64_t v72 = type metadata accessor for UUID(0LL);
            uint64_t v73 = sub_1000F620C();
            uint64_t v74 = dispatch thunk of CustomStringConvertible.description.getter(v72, v73);
            *(void *)(v71 + 4) = sub_1003F11D4(v74, v75, v127);
            swift_bridgeObjectRelease();
            sub_100303000(v66);
            _os_log_impl( (void *)&_mh_execute_header,  v69,  v70,  "SeparationStateSyncService: We already have a newer observation for %s, ignoring.",  (uint8_t *)v71,  0xCu);
            unsigned int v76 = v121;
            swift_arrayDestroy(v121, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v76, -1LL, -1LL);
            swift_slowDealloc(v71, -1LL, -1LL);
          }

          else
          {

            sub_100303000(v66);
          }

          sub_100303000((uint64_t)v105);
          sub_100303000(v41);
          uint64_t v7 = v115;
          uint64_t v40 = v119;
          unint64_t v43 = v120;
          goto LABEL_10;
        }

        sub_100303000(v65);
      }

      uint64_t v78 = (uint64_t)v108;
      if (qword_10099B4C8 != -1) {
        swift_once(&qword_10099B4C8, sub_10047B404);
      }
      uint64_t v79 = type metadata accessor for Logger(0LL);
      sub_10000A720(v79, (uint64_t)qword_100A2AAA0);
      unint64_t v80 = sub_1003493A4(v41, v78);
      uint64_t v81 = (os_log_s *)Logger.logObject.getter(v80);
      id v82 = static os_log_type_t.default.getter(v81);
      if (os_log_type_enabled(v81, v82))
      {
        uint64_t v83 = v78;
        uint64_t v84 = swift_slowAlloc(12LL, -1LL);
        uint64_t v85 = swift_slowAlloc(32LL, -1LL);
        v127[0] = v85;
        *(_DWORD *)uint64_t v84 = v103.n128_u32[0];
        uint64_t v86 = type metadata accessor for UUID(0LL);
        uint64_t v87 = sub_1000F620C();
        uint64_t v88 = dispatch thunk of CustomStringConvertible.description.getter(v86, v87);
        *(void *)(v84 + 4) = sub_1003F11D4(v88, v89, v127);
        swift_bridgeObjectRelease();
        sub_100303000(v83);
        _os_log_impl( (void *)&_mh_execute_header,  v81,  v82,  "SeparationStateSyncService: Received remote observation for %s",  (uint8_t *)v84,  0xCu);
        swift_arrayDestroy(v85, 1LL, v102);
        swift_slowDealloc(v85, -1LL, -1LL);
        swift_slowDealloc(v84, -1LL, -1LL);
      }

      else
      {
        sub_100303000(v78);
      }

      uint64_t v90 = (uint64_t)v109;
      id v91 = v123;
      id v92 = v110;
      sub_1003493A4(v122, v110);
      sub_1003493A4(v92, v90);
      uint64_t v93 = swift_allocObject(&unk_1009640F0, v106, v114);
      *(void *)(v93 + swift_weakDestroy(v0 + 16) = v91;
      sub_1003493E8(v92, v93 + v107);
      swift_retain_n(v91, 2LL);
      unint64_t v94 = sub_1004F730C();
      if (qword_10099B6A0 != -1) {
        swift_once(&qword_10099B6A0, sub_100626B90);
      }
      v127[0] = 0x7365547265646E75LL;
      v127[1] = 0xE900000000000074LL;
      SynchronousCache.cachedValue<A>(key:computeBlock:)(&v128, v127, sub_10000A71C, 0LL, &type metadata for Bool);
      swift_bridgeObjectRelease();
      if (v128 == 1)
      {
        uint64_t v95 = sub_100004AEC(&qword_10099D318);
        uint64_t v96 = swift_allocObject(v95, v104, v114);
        *(_OWORD *)(v96 + swift_weakDestroy(v0 + 16) = v101;
        sub_1003493A4(v90, v96 + v125);
        uint64_t v97 = type metadata accessor for Transaction(0LL);
        __chkstk_darwin(v97);
        uint64_t v40 = v119;
        v98[-4] = v118;
        v98[-3] = v96;
        v98[-2] = 0LL;
        v98[-1] = 0LL;
        static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.BeaconObservationStore.save",  57LL,  2LL,  sub_1002DDE58);
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v42 = type metadata accessor for Transaction(0LL);
        __chkstk_darwin(v42);
        v98[-4] = v94;
        v98[-3] = sub_10057EBDC;
        v98[-2] = v93;
        uint64_t v40 = v119;
        static Transaction.named<A>(_:with:)("CloudKitCoordinator.AfterPendingUpdates", 39LL, 2LL, sub_10049DD48);
        swift_release();
        swift_release();
        swift_release();
      }

      unint64_t v43 = v120;
      sub_100303000(v90);
      uint64_t v41 = v122;
      sub_100303000(v122);
      uint64_t v7 = v115;
LABEL_10:
      uint64_t v39 = v43 + 1;
      char v5 = v116;
      if (v39 == v113)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for HashedAdvertisement);
  __break(1u);
  return result;
}

            if ((a1 & 0x100) != 0) {
              goto LABEL_38;
            }
            goto LABEL_29;
          }

              if ((a1 & 0x400) != 0) {
                goto LABEL_38;
              }
              goto LABEL_29;
            }

      swift_once(&qword_10099B700, sub_100651100);
      goto LABEL_19;
    }

    __int128 v71 = v56;
    uint64_t v72 = v57;
    uint64_t v73 = v58;
    uint64_t v74 = v88;
    uint64_t v75 = *(void *)(v88 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
    unsigned int v76 = type metadata accessor for BeaconKeyManager(0LL);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10014F014, v74, v75, (char *)&type metadata for () + 8, v76);
    uint64_t v77 = v106[0];
    uint64_t v78 = (uint64_t)v91;
    uint64_t v79 = sub_1007A6E24((uint64_t)v91, 1, v71, v72, v73, 0LL, 0LL, 0LL);
    unint64_t v80 = v78 + *(int *)(v93 + 20);
    swift_retain();
    uint64_t v81 = sub_1007C16C8(v79, v77);
    swift_release();
    id v82 = v96;
    (*(void (**)(char *, uint64_t, uint64_t))(v94 + 16))(v96, v80, v95);
    uint64_t v83 = sub_100004AEC(&qword_1009BDC68);
    swift_allocObject(v83, *(unsigned int *)(v83 + 48), *(unsigned __int16 *)(v83 + 52));
    uint64_t v84 = QueuePool.Wrapper.init(identifier:blocks:)(v82, v81);
    swift_bridgeObjectRelease();
    uint64_t v85 = type metadata accessor for Transaction(0LL);
    v106[0] = v84;
    __chkstk_darwin(v85);
    *(&v88 - 6) = v77;
    *(&v88 - 5) = v78;
    *(&v88 - 4) = 0LL;
    *(&v88 - 3) = 0LL;
    *(&v88 - 2) = (uint64_t)v106;
    swift_retain();
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.KeyGenerationOperation",  52LL,  2LL,  sub_100705BD4);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v86 = *(void (**)(uint64_t, uint64_t))(v97 + 8);
    uint64_t v87 = v92;
    v86(v98, v92);
    v86((uint64_t)v99, v87);
    __int128 v70 = v78;
  }

  else
  {
    __int128 v69 = static os_log_type_t.error.getter(v26);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    os_log(_:dso:log:_:_:)( v69,  &_mh_execute_header,  qword_100A2B010,  "KeyUpdate message received with no keys!",  40LL,  2LL,  _swiftEmptyArrayStorage);
    __int128 v70 = (uint64_t)v21;
  }

  return sub_100018C68(v70, type metadata accessor for SharedBeaconRecord);
}

    uint64_t v141 = 0LL;
    *(_OWORD *)(v0 + 122) = 0u;
    *(_OWORD *)(v0 + 96) = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
    *uint64_t v139 = 0u;
LABEL_29:
    sub_100015750((uint64_t)v139, isUniquelyReferenced_nonNull_native, &qword_1009BE0C0);
    uint64_t v19 = *(void *)(v0 + 24);
    if (!v19)
    {
      swift_release();
      id v101 = *(uint64_t (**)(void))(v0 + 8);
      return v101();
    }

    unint64_t v20 = *(void *)isUniquelyReferenced_nonNull_native;
    sub_10006A420(v0 + 32, (uint64_t)v2);
    unint64_t v21 = *v8;
    uint64_t v142 = v20;
    if (!*(void *)(*v8 + 16))
    {
      *(void *)(v3 + 32) = 0LL;
      *(_OWORD *)uint64_t v3 = 0u;
      *(_OWORD *)(v3 + swift_weakDestroy(v0 + 16) = 0u;
      *(_BYTE *)(v0 + 328) = -1;
LABEL_45:
      sub_100015794(v3, &qword_1009BE048);
      sub_10006A3E4((uint64_t)v2, v133);
      if (*(_BYTE *)(v0 + 185))
      {
        if (*(_BYTE *)(v0 + 185) == 1)
        {
          uint64_t v38 = *(void *)(v0 + 144);
          *(void *)(v0 + 360) = &type metadata for Int64;
          *(void *)(v0 + 368) = sub_10001563C();
          *(void *)(v0 + 336) = v38;
          *(_BYTE *)(v0 + 376) = 2;
        }

        else
        {
          uint64_t v39 = *(void *)(v0 + 144);
          *(void *)(v0 + 360) = &type metadata for Double;
          *(void *)(v0 + 368) = sub_1000156C8();
          *(void *)(v0 + 336) = v39;
          *(_BYTE *)(v0 + 376) = 3;
        }
      }

      else
      {
        sub_10006A2FC(v133, v140);
      }

      swift_beginAccess(v8, v136, 33LL, 0LL);
      sub_10006A2C0(v140, v137);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
      char v5 = *v8;
      uint64_t v143 = *v8;
      *unint64_t v8 = 0x8000000000000000LL;
      uint64_t v41 = sub_10030CF14(v142, v19);
      uint64_t v42 = *(void *)(v5 + 16);
      unint64_t v43 = (v40 & 1) == 0;
      __int128 v44 = v42 + v43;
      if (__OFADD__(v42, v43))
      {
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
        goto LABEL_119;
      }

      __int128 v45 = v40;
      if (*(void *)(v5 + 24) >= v44)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          char isUniquelyReferenced_nonNull_native = v0 + 16;
          if ((v40 & 1) == 0) {
            goto LABEL_57;
          }
        }

        else
        {
          sub_10006191C();
          char v5 = v143;
          char isUniquelyReferenced_nonNull_native = v0 + 16;
          if ((v45 & 1) == 0) {
            goto LABEL_57;
          }
        }
      }

      else
      {
        sub_100049A7C(v44, isUniquelyReferenced_nonNull_native);
        char v5 = v143;
        __int128 v46 = sub_10030CF14(v142, v19);
        if ((v45 & 1) != (v47 & 1)) {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        }
        uint64_t v41 = v46;
        char isUniquelyReferenced_nonNull_native = v0 + 16;
        if ((v45 & 1) == 0)
        {
LABEL_57:
          *(void *)(v5 + 8 * (v41 >> 6) + 64) |= 1LL << v41;
          __int128 v48 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v41);
          *__int128 v48 = v142;
          v48[1] = v19;
          sub_10006A2FC(v137, *(void *)(v5 + 56) + 48 * v41);
          __int128 v49 = *(void *)(v5 + 16);
          __int128 v50 = __OFADD__(v49, 1LL);
          __int128 v51 = v49 + 1;
          if (v50) {
            goto LABEL_115;
          }
          *(void *)(v5 + swift_weakDestroy(v0 + 16) = v51;
          swift_bridgeObjectRetain(v19);
          goto LABEL_6;
        }
      }

      sub_100728A3C(v137, *(void *)(v5 + 56) + 48 * v41);
LABEL_6:
      *unint64_t v8 = v5;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess(v136);
      uint64_t v10 = v0 + 336;
      goto LABEL_7;
    }

    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v21);
    uint64_t v22 = sub_10030CF14(v20, v19);
    if ((v23 & 1) != 0)
    {
      sub_10006A2C0(*(void *)(v21 + 56) + 48 * v22, v3);
    }

    else
    {
      *(void *)(v3 + 32) = 0LL;
      *(_OWORD *)uint64_t v3 = 0u;
      *(_OWORD *)(v3 + swift_weakDestroy(v0 + 16) = 0u;
      *(_BYTE *)(v0 + 328) = -1;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10006A2FC(v3, v135);
    sub_10006A3E4((uint64_t)v2, v129);
    if (!*(_BYTE *)(v0 + 281))
    {
      unint64_t v35 = v0 + 528;
      sub_10006A2FC(v129, v134);
      goto LABEL_94;
    }

    if (*(_BYTE *)(v0 + 281) == 1)
    {
      uint64_t v24 = *(void *)(v0 + 240);
      uint64_t v25 = v0 + 672;
      sub_10006A2C0(v135, (uint64_t)v114);
      if (*(_BYTE *)(v0 + 712) != 2) {
        goto LABEL_110;
      }
      uint64_t v122 = v24;
      sub_100012EC0(v114, (uint64_t)v124);
      char isUniquelyReferenced_nonNull_native = *(void *)(v0 + 792);
      uint64_t v26 = *(void *)(v0 + 800);
      uint64_t v27 = sub_100012ED8(v124, isUniquelyReferenced_nonNull_native);
      unint64_t v28 = *(void **)(isUniquelyReferenced_nonNull_native - 8);
      uint64_t v29 = (v28[8] + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
      uint64_t v30 = swift_task_alloc(v29);
      uint64_t v31 = (void (*)(uint64_t, void *, uint64_t))v28[2];
      v31(v30, v27, isUniquelyReferenced_nonNull_native);
      LOBYTE(v27) = dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v26);
      uint64_t v125 = v29;
      uint64_t v32 = swift_task_alloc(v29);
      v31(v32, (void *)v30, isUniquelyReferenced_nonNull_native);
      uint64_t v121 = v32;
      uint64_t v107 = v28;
      if ((v27 & 1) != 0)
      {
        uint64_t v33 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v26);
        uint64_t v34 = (void (*)(uint64_t, uint64_t))v28[1];
        v34(v32, isUniquelyReferenced_nonNull_native);
        unint64_t v35 = v0 + 528;
        uint64_t v127 = v34;
        if (v33 > 64)
        {
          uint64_t v36 = swift_task_alloc(v125);
          v31(v36, (void *)v30, isUniquelyReferenced_nonNull_native);
          *uint64_t v106 = 0x8000000000000000LL;
          if ((dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v26) & 1) != 0)
          {
            if (dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v26) >= 64)
            {
              __int128 v65 = swift_task_alloc(v125);
              __int128 v66 = sub_10001563C();
              dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)( v106,  &type metadata for Int64,  v66,  isUniquelyReferenced_nonNull_native,  v26);
              uint64_t v119 = dispatch thunk of static Comparable.< infix(_:_:)( v36,  v65,  isUniquelyReferenced_nonNull_native,  *(void *)(*(void *)(v26 + 32) + 8LL));
              v127(v65, isUniquelyReferenced_nonNull_native);
              v127(v36, isUniquelyReferenced_nonNull_native);
              __int128 v67 = v65;
              unint64_t v35 = v0 + 528;
              uint64_t result = swift_task_dealloc(v67);
              if ((v119 & 1) != 0) {
                goto LABEL_121;
              }
            }

            else
            {
              uint64_t v117 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v26);
              uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v127)(v36, isUniquelyReferenced_nonNull_native);
              if (v117 < *v106) {
                goto LABEL_121;
              }
            }
          }

          else
          {
            __int128 v61 = dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v26);
            uint64_t v118 = v36;
            __int128 v62 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v26);
            if ((v61 & 1) != 0)
            {
              if (v62 <= 64)
              {
                __int128 v68 = *(void *)(*(void *)(v26 + 24) + 16LL);
                char v110 = v68;
                AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v68,  isUniquelyReferenced_nonNull_native,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
                __int128 v70 = swift_task_alloc((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
                AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v68,  isUniquelyReferenced_nonNull_native,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                uint64_t v72 = v70;
                id v104 = v70;
                dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_100819D80,  256LL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
                uint64_t v73 = v26;
                uint64_t v74 = swift_task_alloc(v125);
                dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)( v72,  isUniquelyReferenced_nonNull_native,  v110);
                uint64_t v75 = v73;
                LOBYTE(v110) = dispatch thunk of static Comparable.< infix(_:_:)( v118,  v74,  isUniquelyReferenced_nonNull_native,  *(void *)(*(void *)(v73 + 32) + 8LL));
                uint64_t v9 = (uint64_t)v127;
                v127(v74, isUniquelyReferenced_nonNull_native);
                swift_task_dealloc(v74);
                swift_task_dealloc(v104);
                char v5 = swift_task_alloc(v125);
                ((void (*)(uint64_t, uint64_t, uint64_t))v107[4])(v5, v118, isUniquelyReferenced_nonNull_native);
                if ((v110 & 1) != 0) {
                  goto LABEL_120;
                }
                uint64_t v111 = *v106;
                uint64_t v26 = v75;
                unsigned int v76 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v75);
                v127(v5, isUniquelyReferenced_nonNull_native);
                uint64_t result = swift_task_dealloc(v5);
                uint64_t v77 = v76 < v111;
                unint64_t v35 = v0 + 528;
                uint64_t v36 = v118;
                if (v77) {
                  goto LABEL_121;
                }
              }

              else
              {
                __int128 v63 = swift_task_alloc(v125);
                __int128 v64 = sub_10001563C();
                dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)( v106,  &type metadata for Int64,  v64,  isUniquelyReferenced_nonNull_native,  v26);
                unint64_t v108 = dispatch thunk of static Comparable.< infix(_:_:)( v36,  v63,  isUniquelyReferenced_nonNull_native,  *(void *)(*(void *)(v26 + 32) + 8LL));
                v127(v63, isUniquelyReferenced_nonNull_native);
                v127(v36, isUniquelyReferenced_nonNull_native);
                uint64_t result = swift_task_dealloc(v63);
                unint64_t v35 = v0 + 528;
                if ((v108 & 1) != 0) {
                  goto LABEL_121;
                }
              }
            }

            else
            {
              unint64_t v35 = v0 + 528;
              if (v62 < 64)
              {
                char v109 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v26);
                uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v127)(v36, isUniquelyReferenced_nonNull_native);
                if (v109 < *v106) {
                  goto LABEL_121;
                }
              }

              else
              {
                v127(v36, isUniquelyReferenced_nonNull_native);
              }
            }
          }

          swift_task_dealloc(v36);
        }
      }

      else
      {
        uint64_t v127 = (void (*)(uint64_t, uint64_t))v28[1];
        v127(v32, isUniquelyReferenced_nonNull_native);
        unint64_t v35 = v0 + 528;
      }

      uint64_t v78 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v26);
      uint64_t v9 = v26;
      uint64_t v79 = swift_task_alloc(v125);
      v31(v79, (void *)v30, isUniquelyReferenced_nonNull_native);
      if (v78 >= 65)
      {
        v127(v79, isUniquelyReferenced_nonNull_native);
        goto LABEL_82;
      }

      unint64_t v80 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v9);
      v127(v79, isUniquelyReferenced_nonNull_native);
      if (v80 == 64
        && (dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v9) & 1) == 0)
      {
LABEL_82:
        uint64_t v81 = swift_task_alloc(v125);
        id v112 = v30;
        v31(v81, (void *)v30, isUniquelyReferenced_nonNull_native);
        char *v116 = 0x7FFFFFFFFFFFFFFFLL;
        id v82 = dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v9);
        char v120 = v9;
        uint64_t v83 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v9);
        if ((v82 & 1) != 0)
        {
          if (v83 > 64)
          {
            uint64_t v84 = swift_task_alloc(v125);
            uint64_t v85 = sub_10001563C();
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)( v116,  &type metadata for Int64,  v85,  isUniquelyReferenced_nonNull_native,  v9);
            char v5 = dispatch thunk of static Comparable.< infix(_:_:)( v84,  v81,  isUniquelyReferenced_nonNull_native,  *(void *)(*(void *)(v9 + 32) + 8LL));
            uint64_t v9 = (uint64_t)v127;
            v127(v84, isUniquelyReferenced_nonNull_native);
            v127(v81, isUniquelyReferenced_nonNull_native);
            swift_task_dealloc(v84);
            if ((v5 & 1) != 0) {
              goto LABEL_118;
            }
            goto LABEL_91;
          }

    id v11 = 0LL;
    *(_OWORD *)(v1 + 122) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
    *(_OWORD *)(v1 + 112) = 0u;
    *uint64_t v139 = 0u;
LABEL_29:
    sub_100015750((uint64_t)v139, isUniquelyReferenced_nonNull_native, &qword_1009BE0C0);
    unint64_t v18 = *(void *)(v1 + 24);
    if (!v18)
    {
      swift_release();
      id v102 = *(uint64_t (**)(void))(v1 + 8);
      return v102();
    }

    uint64_t v141 = v11;
    uint64_t v19 = *(void *)isUniquelyReferenced_nonNull_native;
    sub_10006A420(v1 + 32, (uint64_t)v3);
    unint64_t v20 = *v8;
    if (!*(void *)(*v8 + 16)) {
      break;
    }
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v20);
    unint64_t v21 = sub_10030CF14(v19, v18);
    uint64_t v22 = v1 + 288;
    if ((v23 & 1) != 0)
    {
      sub_10006A2C0(*(void *)(v20 + 56) + 48 * v21, (uint64_t)v134);
    }

    else
    {
      *(void *)(v1 + 320) = 0LL;
      uint64_t *v134 = 0u;
      *(_OWORD *)(v1 + 304) = 0u;
      *(_BYTE *)(v1 + 328) = -1;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10006A2FC((uint64_t)v134, v135);
    sub_10006A3E4((uint64_t)v3, v128);
    if (!*(_BYTE *)(v1 + 281))
    {
      unint64_t v54 = v1 + 528;
      sub_10006A2FC(v128, v129);
      goto LABEL_96;
    }

    if (*(_BYTE *)(v1 + 281) != 1)
    {
      unint64_t v55 = *(double *)(v1 + 240);
      uint64_t v25 = v1 + 432;
      sub_10006A2C0(v135, (uint64_t)v114);
      if (*(_BYTE *)(v1 + 472) != 3)
      {
LABEL_112:
        swift_bridgeObjectRelease();
        sub_100728A70(v25);
        int v103 = sub_100728AB0();
        id v104 = swift_allocError(&type metadata for AnalyticsEvent.AnalyticsEventError, v103, 0LL, 0LL);
        swift_willThrow(v104);
        sub_100728A70(v135);
        sub_10073AD08(v3);
        swift_release();
        id v102 = *(uint64_t (**)(void))(v1 + 8);
        return v102();
      }

      sub_100012EC0(v114, (uint64_t)v112);
      uint64_t v56 = *(void *)(v1 + 832);
      __int128 v57 = *(void *)(v1 + 840);
      uint64_t v58 = sub_100012ED8(v112, v56);
      uint64_t v59 = *(void *)(v56 - 8);
      __int128 v60 = swift_task_alloc((*(void *)(v59 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(uint64_t, void *, uint64_t))(v59 + 16))(v60, v58, v56);
      __int128 v61 = sub_1000156C8();
      BinaryFloatingPoint.init<A>(_:)(v60, &type metadata for Double, v56, v61, v57);
      swift_task_dealloc(v60);
      __int128 v62 = v55 + *(double *)(v1 + 944);
      *(void *)(v1 + 408) = &type metadata for Double;
      *(void *)(v1 + 4swift_weakDestroy(v0 + 16) = v61;
      *(double *)(v1 + 384) = v62;
      *(_BYTE *)(v1 + 424) = 3;
      unint64_t v54 = v1 + 528;
      sub_10006A2FC(v1 + 384, v129);
      __int128 v63 = (void *)(v1 + 808);
      goto LABEL_95;
    }

    uint64_t v24 = *(void *)(v1 + 240);
    uint64_t v25 = v1 + 672;
    sub_10006A2C0(v135, (uint64_t)v113);
    if (*(_BYTE *)(v1 + 712) != 2) {
      goto LABEL_112;
    }
    uint64_t v121 = v24;
    uint64_t v116 = v19;
    sub_100012EC0(v113, (uint64_t)v120);
    char isUniquelyReferenced_nonNull_native = *(void *)(v1 + 792);
    uint64_t v26 = *(void *)(v1 + 800);
    uint64_t v27 = sub_100012ED8(v120, isUniquelyReferenced_nonNull_native);
    unint64_t v28 = *(void **)(isUniquelyReferenced_nonNull_native - 8);
    uint64_t v29 = (v28[8] + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
    uint64_t v30 = swift_task_alloc(v29);
    uint64_t v31 = (void (*)(uint64_t, uint64_t, uint64_t))v28[2];
    v31(v30, (uint64_t)v27, isUniquelyReferenced_nonNull_native);
    LOBYTE(v27) = dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v26);
    uint64_t v123 = v29;
    uint64_t v32 = swift_task_alloc(v29);
    uint64_t v126 = v30;
    uint64_t v122 = v31;
    v31(v32, v30, isUniquelyReferenced_nonNull_native);
    uint64_t v118 = v32;
    uint64_t v111 = v28;
    if ((v27 & 1) == 0)
    {
      uint64_t v125 = (void (*)(uint64_t, uint64_t))v28[1];
      v125(v32, isUniquelyReferenced_nonNull_native);
LABEL_64:
      uint64_t v36 = v26;
      uint64_t v19 = v116;
      uint64_t v0 = v121;
      goto LABEL_80;
    }

    uint64_t v33 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v26);
    uint64_t v34 = (void (*)(uint64_t, uint64_t))v28[1];
    v34(v32, isUniquelyReferenced_nonNull_native);
    uint64_t v125 = v34;
    if (v33 <= 64) {
      goto LABEL_64;
    }
    unint64_t v35 = swift_task_alloc(v123);
    v31(v35, v126, isUniquelyReferenced_nonNull_native);
    *char v110 = 0x8000000000000000LL;
    uint64_t v36 = v26;
    uint64_t v19 = v116;
    if ((dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v26) & 1) != 0)
    {
      uint64_t v37 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v26);
      uint64_t v0 = v121;
      if (v37 >= 64)
      {
        __int128 v69 = swift_task_alloc(v123);
        __int128 v70 = sub_10001563C();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)( v110,  &type metadata for Int64,  v70,  isUniquelyReferenced_nonNull_native,  v36);
        __int128 v71 = dispatch thunk of static Comparable.< infix(_:_:)( v35,  v69,  isUniquelyReferenced_nonNull_native,  *(void *)(*(void *)(v36 + 32) + 8LL));
        v34(v69, isUniquelyReferenced_nonNull_native);
        v34(v35, isUniquelyReferenced_nonNull_native);
        uint64_t v72 = v69;
        uint64_t v0 = v121;
        uint64_t result = swift_task_dealloc(v72);
        if ((v71 & 1) != 0) {
          goto LABEL_123;
        }
      }

      else
      {
        uint64_t v38 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v36);
        uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v34)(v35, isUniquelyReferenced_nonNull_native);
        if (v38 < *v110) {
          goto LABEL_123;
        }
      }

      goto LABEL_79;
    }

    __int128 v64 = dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v26);
    __int128 v65 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v36);
    if ((v64 & 1) != 0)
    {
      if (v65 > 64)
      {
        __int128 v66 = swift_task_alloc(v123);
        __int128 v67 = sub_10001563C();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)( v110,  &type metadata for Int64,  v67,  isUniquelyReferenced_nonNull_native,  v36);
        __int128 v68 = dispatch thunk of static Comparable.< infix(_:_:)( v35,  v66,  isUniquelyReferenced_nonNull_native,  *(void *)(*(void *)(v36 + 32) + 8LL));
        v34(v66, isUniquelyReferenced_nonNull_native);
        v34(v35, isUniquelyReferenced_nonNull_native);
        uint64_t result = swift_task_dealloc(v66);
        uint64_t v0 = v121;
        if ((v68 & 1) != 0) {
          goto LABEL_123;
        }
        goto LABEL_79;
      }

      uint64_t v75 = *(void *)(*(void *)(v36 + 24) + 16LL);
      uint64_t v107 = v75;
      AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v75,  isUniquelyReferenced_nonNull_native,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
      uint64_t v77 = swift_task_alloc((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v75,  isUniquelyReferenced_nonNull_native,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      uint64_t v79 = v77;
      uint64_t v105 = v77;
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_100819D80,  256LL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
      unint64_t v80 = swift_task_alloc(v123);
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)( v79,  isUniquelyReferenced_nonNull_native,  v107);
      LOBYTE(v107) = dispatch thunk of static Comparable.< infix(_:_:)( v35,  v80,  isUniquelyReferenced_nonNull_native,  *(void *)(*(void *)(v36 + 32) + 8LL));
      uint64_t v0 = (unint64_t)v125;
      v125(v80, isUniquelyReferenced_nonNull_native);
      swift_task_dealloc(v80);
      swift_task_dealloc(v105);
      char v5 = swift_task_alloc(v123);
      ((void (*)(uint64_t, uint64_t, uint64_t))v111[4])(v5, v35, isUniquelyReferenced_nonNull_native);
      if ((v107 & 1) != 0) {
        goto LABEL_122;
      }
      unint64_t v108 = *v110;
      uint64_t v106 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v36);
      v125(v5, isUniquelyReferenced_nonNull_native);
      uint64_t result = swift_task_dealloc(v5);
      uint64_t v74 = v106 < v108;
LABEL_76:
      uint64_t v0 = v121;
      if (v74) {
        goto LABEL_123;
      }
      goto LABEL_79;
    }

    if (v65 < 64)
    {
      uint64_t v73 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v36);
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v34)(v35, isUniquelyReferenced_nonNull_native);
      uint64_t v74 = v73 < *v110;
      goto LABEL_76;
    }

    v34(v35, isUniquelyReferenced_nonNull_native);
    uint64_t v0 = v121;
LABEL_79:
    swift_task_dealloc(v35);
LABEL_80:
    uint64_t v81 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v36);
    id v82 = swift_task_alloc(v123);
    v122(v82, v126, isUniquelyReferenced_nonNull_native);
    if (v81 < 65)
    {
      uint64_t v83 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v36);
      v125(v82, isUniquelyReferenced_nonNull_native);
      uint64_t v84 = v118;
      if (v83 != 64
        || (dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v36) & 1) != 0)
      {
        goto LABEL_93;
      }
    }

    else
    {
      v125(v82, isUniquelyReferenced_nonNull_native);
    }

    uint64_t v0 = swift_task_alloc(v123);
    v122(v0, v126, isUniquelyReferenced_nonNull_native);
    *uint64_t v115 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v85 = dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v36);
    uint64_t v86 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v36);
    if ((v85 & 1) == 0)
    {
      if (v86 > 63)
      {
        *char v109 = 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v117 = swift_task_alloc(v123);
        ((void (*)(uint64_t, unint64_t, uint64_t))v111[4])( v117,  v0,  isUniquelyReferenced_nonNull_native);
        uint64_t v89 = swift_task_alloc(v123);
        uint64_t v90 = sub_10001563C();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)( v109,  &type metadata for Int64,  v90,  isUniquelyReferenced_nonNull_native,  v36);
        uint64_t v124 = dispatch thunk of static Comparable.< infix(_:_:)( v89,  v117,  isUniquelyReferenced_nonNull_native,  *(void *)(*(void *)(v36 + 32) + 8LL));
        v125(v89, isUniquelyReferenced_nonNull_native);
        char v5 = v117;
        v125(v117, isUniquelyReferenced_nonNull_native);
        swift_task_dealloc(v89);
        swift_task_dealloc(v117);
        uint64_t v84 = v118;
        if ((v124 & 1) != 0) {
          goto LABEL_120;
        }
        goto LABEL_92;
      }

    uint64_t v143 = 0LL;
    *(_OWORD *)(v0 + 122) = 0u;
    *(_OWORD *)(v0 + 96) = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
    char *v141 = 0u;
LABEL_29:
    sub_100015750((uint64_t)v141, isUniquelyReferenced_nonNull_native, &qword_1009BE0C0);
    unint64_t v20 = *(void *)(v0 + 24);
    if (!v20)
    {
      swift_release(*(void *)(v0 + 984));
      int v103 = *(uint64_t (**)(void))(v0 + 8);
      return v103();
    }

    unint64_t v21 = *(void *)isUniquelyReferenced_nonNull_native;
    sub_10006A420(v0 + 32, (uint64_t)v2);
    uint64_t v22 = *v8;
    uint64_t v144 = v21;
    if (!*(void *)(*v8 + 16))
    {
      *(void *)(v3 + 32) = 0LL;
      *(_OWORD *)uint64_t v3 = 0u;
      *(_OWORD *)(v3 + swift_weakDestroy(v0 + 16) = 0u;
      *(_BYTE *)(v0 + 328) = -1;
LABEL_45:
      sub_100015794(v3, &qword_1009BE048);
      sub_10006A3E4((uint64_t)v2, v135);
      if (*(_BYTE *)(v0 + 185))
      {
        if (*(_BYTE *)(v0 + 185) == 1)
        {
          uint64_t v39 = *(void *)(v0 + 144);
          *(void *)(v0 + 360) = &type metadata for Int64;
          *(void *)(v0 + 368) = sub_10001563C();
          *(void *)(v0 + 336) = v39;
          *(_BYTE *)(v0 + 376) = 2;
        }

        else
        {
          uint64_t v40 = *(void *)(v0 + 144);
          *(void *)(v0 + 360) = &type metadata for Double;
          *(void *)(v0 + 368) = sub_1000156C8();
          *(void *)(v0 + 336) = v40;
          *(_BYTE *)(v0 + 376) = 3;
        }
      }

      else
      {
        sub_10006A2FC(v135, v142);
      }

      swift_beginAccess(v8, v138, 33LL, 0LL);
      sub_10006A2C0(v142, v139);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
      char v5 = *v8;
      id v145 = *v8;
      *unint64_t v8 = 0x8000000000000000LL;
      uint64_t v42 = sub_10030CF14(v144, v20);
      unint64_t v43 = *(void *)(v5 + 16);
      __int128 v44 = (v41 & 1) == 0;
      __int128 v45 = v43 + v44;
      if (__OFADD__(v43, v44))
      {
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
        goto LABEL_119;
      }

      __int128 v46 = v41;
      if (*(void *)(v5 + 24) >= v45)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          char isUniquelyReferenced_nonNull_native = v0 + 16;
          if ((v41 & 1) == 0) {
            goto LABEL_57;
          }
        }

        else
        {
          sub_10006191C();
          char v5 = v145;
          char isUniquelyReferenced_nonNull_native = v0 + 16;
          if ((v46 & 1) == 0) {
            goto LABEL_57;
          }
        }
      }

      else
      {
        sub_100049A7C(v45, isUniquelyReferenced_nonNull_native);
        char v5 = v145;
        __int128 v47 = sub_10030CF14(v144, v20);
        if ((v46 & 1) != (v48 & 1)) {
          goto LABEL_109;
        }
        uint64_t v42 = v47;
        char isUniquelyReferenced_nonNull_native = v0 + 16;
        if ((v46 & 1) == 0)
        {
LABEL_57:
          *(void *)(v5 + 8 * (v42 >> 6) + 64) |= 1LL << v42;
          __int128 v49 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v42);
          *__int128 v49 = v144;
          v49[1] = v20;
          sub_10006A2FC(v139, *(void *)(v5 + 56) + 48 * v42);
          __int128 v50 = *(void *)(v5 + 16);
          __int128 v51 = __OFADD__(v50, 1LL);
          unint64_t v52 = v50 + 1;
          if (v51) {
            goto LABEL_115;
          }
          *(void *)(v5 + swift_weakDestroy(v0 + 16) = v52;
          swift_bridgeObjectRetain(v20);
          goto LABEL_6;
        }
      }

      sub_100728A3C(v139, *(void *)(v5 + 56) + 48 * v42);
LABEL_6:
      uint64_t v10 = *v8;
      *unint64_t v8 = v5;
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v20);
      swift_endAccess(v138);
      id v11 = v0 + 336;
      goto LABEL_7;
    }

    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v22);
    uint64_t v23 = sub_10030CF14(v21, v20);
    if ((v24 & 1) != 0)
    {
      sub_10006A2C0(*(void *)(v22 + 56) + 48 * v23, v3);
    }

    else
    {
      *(void *)(v3 + 32) = 0LL;
      *(_OWORD *)uint64_t v3 = 0u;
      *(_OWORD *)(v3 + swift_weakDestroy(v0 + 16) = 0u;
      *(_BYTE *)(v0 + 328) = -1;
    }

    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v20);
    sub_10006A2FC(v3, v137);
    sub_10006A3E4((uint64_t)v2, v131);
    if (!*(_BYTE *)(v0 + 281))
    {
      uint64_t v36 = v0 + 528;
      sub_10006A2FC(v131, v136);
      goto LABEL_94;
    }

    if (*(_BYTE *)(v0 + 281) == 1)
    {
      uint64_t v25 = *(void *)(v0 + 240);
      uint64_t v26 = v0 + 672;
      sub_10006A2C0(v137, (uint64_t)v116);
      if (*(_BYTE *)(v0 + 712) != 2) {
        goto LABEL_110;
      }
      uint64_t v124 = v25;
      sub_100012EC0(v116, (uint64_t)v126);
      char isUniquelyReferenced_nonNull_native = *(void *)(v0 + 792);
      uint64_t v27 = *(void *)(v0 + 800);
      unint64_t v28 = sub_100012ED8(v126, isUniquelyReferenced_nonNull_native);
      uint64_t v29 = *(void **)(isUniquelyReferenced_nonNull_native - 8);
      uint64_t v30 = (v29[8] + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
      uint64_t v31 = swift_task_alloc(v30);
      uint64_t v32 = (void (*)(uint64_t, void *, uint64_t))v29[2];
      v32(v31, v28, isUniquelyReferenced_nonNull_native);
      LOBYTE(v28) = dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v27);
      uint64_t v127 = v30;
      uint64_t v33 = swift_task_alloc(v30);
      v32(v33, (void *)v31, isUniquelyReferenced_nonNull_native);
      uint64_t v123 = v33;
      char v109 = v29;
      if ((v28 & 1) != 0)
      {
        uint64_t v34 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v27);
        unint64_t v35 = (void (*)(uint64_t, uint64_t))v29[1];
        v35(v33, isUniquelyReferenced_nonNull_native);
        uint64_t v36 = v0 + 528;
        uint64_t v129 = v35;
        if (v34 > 64)
        {
          uint64_t v37 = swift_task_alloc(v127);
          v32(v37, (void *)v31, isUniquelyReferenced_nonNull_native);
          *unint64_t v108 = 0x8000000000000000LL;
          if ((dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v27) & 1) != 0)
          {
            if (dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v27) >= 64)
            {
              __int128 v66 = swift_task_alloc(v127);
              __int128 v67 = sub_10001563C();
              dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)( v108,  &type metadata for Int64,  v67,  isUniquelyReferenced_nonNull_native,  v27);
              uint64_t v121 = dispatch thunk of static Comparable.< infix(_:_:)( v37,  v66,  isUniquelyReferenced_nonNull_native,  *(void *)(*(void *)(v27 + 32) + 8LL));
              v129(v66, isUniquelyReferenced_nonNull_native);
              v129(v37, isUniquelyReferenced_nonNull_native);
              __int128 v68 = v66;
              uint64_t v36 = v0 + 528;
              uint64_t result = swift_task_dealloc(v68);
              if ((v121 & 1) != 0) {
                goto LABEL_121;
              }
            }

            else
            {
              uint64_t v119 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v27);
              uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v129)(v37, isUniquelyReferenced_nonNull_native);
              if (v119 < *v108) {
                goto LABEL_121;
              }
            }
          }

          else
          {
            __int128 v62 = dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v27);
            char v120 = v37;
            __int128 v63 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v27);
            if ((v62 & 1) != 0)
            {
              if (v63 <= 64)
              {
                __int128 v69 = *(void *)(*(void *)(v27 + 24) + 16LL);
                id v112 = v69;
                AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v69,  isUniquelyReferenced_nonNull_native,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
                __int128 v71 = swift_task_alloc((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
                AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v69,  isUniquelyReferenced_nonNull_native,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                uint64_t v73 = v71;
                uint64_t v106 = v71;
                dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_100819D80,  256LL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
                uint64_t v74 = v27;
                uint64_t v75 = swift_task_alloc(v127);
                dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)( v73,  isUniquelyReferenced_nonNull_native,  v112);
                unsigned int v76 = v74;
                LOBYTE(v112) = dispatch thunk of static Comparable.< infix(_:_:)( v120,  v75,  isUniquelyReferenced_nonNull_native,  *(void *)(*(void *)(v74 + 32) + 8LL));
                uint64_t v9 = (uint64_t)v129;
                v129(v75, isUniquelyReferenced_nonNull_native);
                swift_task_dealloc(v75);
                swift_task_dealloc(v106);
                char v5 = swift_task_alloc(v127);
                ((void (*)(uint64_t, uint64_t, uint64_t))v109[4])(v5, v120, isUniquelyReferenced_nonNull_native);
                if ((v112 & 1) != 0) {
                  goto LABEL_120;
                }
                id v113 = *v108;
                uint64_t v27 = v76;
                uint64_t v77 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v76);
                v129(v5, isUniquelyReferenced_nonNull_native);
                uint64_t result = swift_task_dealloc(v5);
                uint64_t v78 = v77 < v113;
                uint64_t v36 = v0 + 528;
                uint64_t v37 = v120;
                if (v78) {
                  goto LABEL_121;
                }
              }

              else
              {
                __int128 v64 = swift_task_alloc(v127);
                __int128 v65 = sub_10001563C();
                dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)( v108,  &type metadata for Int64,  v65,  isUniquelyReferenced_nonNull_native,  v27);
                char v110 = dispatch thunk of static Comparable.< infix(_:_:)( v37,  v64,  isUniquelyReferenced_nonNull_native,  *(void *)(*(void *)(v27 + 32) + 8LL));
                v129(v64, isUniquelyReferenced_nonNull_native);
                v129(v37, isUniquelyReferenced_nonNull_native);
                uint64_t result = swift_task_dealloc(v64);
                uint64_t v36 = v0 + 528;
                if ((v110 & 1) != 0) {
                  goto LABEL_121;
                }
              }
            }

            else
            {
              uint64_t v36 = v0 + 528;
              if (v63 < 64)
              {
                uint64_t v111 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v27);
                uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v129)(v37, isUniquelyReferenced_nonNull_native);
                if (v111 < *v108) {
                  goto LABEL_121;
                }
              }

              else
              {
                v129(v37, isUniquelyReferenced_nonNull_native);
              }
            }
          }

          swift_task_dealloc(v37);
        }
      }

      else
      {
        uint64_t v129 = (void (*)(uint64_t, uint64_t))v29[1];
        v129(v33, isUniquelyReferenced_nonNull_native);
        uint64_t v36 = v0 + 528;
      }

      uint64_t v79 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v27);
      uint64_t v9 = v27;
      unint64_t v80 = swift_task_alloc(v127);
      v32(v80, (void *)v31, isUniquelyReferenced_nonNull_native);
      if (v79 >= 65)
      {
        v129(v80, isUniquelyReferenced_nonNull_native);
        goto LABEL_82;
      }

      uint64_t v81 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v9);
      v129(v80, isUniquelyReferenced_nonNull_native);
      if (v81 == 64
        && (dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v9) & 1) == 0)
      {
LABEL_82:
        id v82 = swift_task_alloc(v127);
        uint64_t v114 = v31;
        v32(v82, (void *)v31, isUniquelyReferenced_nonNull_native);
        *uint64_t v118 = 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v83 = dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v9);
        uint64_t v122 = v9;
        uint64_t v84 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v9);
        if ((v83 & 1) != 0)
        {
          if (v84 > 64)
          {
            uint64_t v85 = swift_task_alloc(v127);
            uint64_t v86 = sub_10001563C();
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)( v118,  &type metadata for Int64,  v86,  isUniquelyReferenced_nonNull_native,  v9);
            char v5 = dispatch thunk of static Comparable.< infix(_:_:)( v85,  v82,  isUniquelyReferenced_nonNull_native,  *(void *)(*(void *)(v9 + 32) + 8LL));
            uint64_t v9 = (uint64_t)v129;
            v129(v85, isUniquelyReferenced_nonNull_native);
            v129(v82, isUniquelyReferenced_nonNull_native);
            swift_task_dealloc(v85);
            if ((v5 & 1) != 0) {
              goto LABEL_118;
            }
            goto LABEL_91;
          }

    uint64_t v143 = 0LL;
    *(_OWORD *)(v0 + 122) = 0u;
    *(_OWORD *)(v0 + 96) = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
    char *v141 = 0u;
LABEL_29:
    sub_100015750((uint64_t)v141, isUniquelyReferenced_nonNull_native, &qword_1009BE0C0);
    unint64_t v20 = *(void *)(v0 + 24);
    if (!v20)
    {
      swift_release(*(void *)(v0 + 976));
      int v103 = *(uint64_t (**)(void))(v0 + 8);
      return v103();
    }

    unint64_t v21 = *(void *)isUniquelyReferenced_nonNull_native;
    sub_10006A420(v0 + 32, (uint64_t)v2);
    uint64_t v22 = *v8;
    uint64_t v144 = v21;
    if (!*(void *)(*v8 + 16))
    {
      *(void *)(v3 + 32) = 0LL;
      *(_OWORD *)uint64_t v3 = 0u;
      *(_OWORD *)(v3 + swift_weakDestroy(v0 + 16) = 0u;
      *(_BYTE *)(v0 + 328) = -1;
LABEL_45:
      sub_100015794(v3, &qword_1009BE048);
      sub_10006A3E4((uint64_t)v2, v135);
      if (*(_BYTE *)(v0 + 185))
      {
        if (*(_BYTE *)(v0 + 185) == 1)
        {
          uint64_t v39 = *(void *)(v0 + 144);
          *(void *)(v0 + 360) = &type metadata for Int64;
          *(void *)(v0 + 368) = sub_10001563C();
          *(void *)(v0 + 336) = v39;
          *(_BYTE *)(v0 + 376) = 2;
        }

        else
        {
          uint64_t v40 = *(void *)(v0 + 144);
          *(void *)(v0 + 360) = &type metadata for Double;
          *(void *)(v0 + 368) = sub_1000156C8();
          *(void *)(v0 + 336) = v40;
          *(_BYTE *)(v0 + 376) = 3;
        }
      }

      else
      {
        sub_10006A2FC(v135, v142);
      }

      swift_beginAccess(v8, v138, 33LL, 0LL);
      sub_10006A2C0(v142, v139);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
      char v5 = *v8;
      id v145 = *v8;
      *unint64_t v8 = 0x8000000000000000LL;
      uint64_t v42 = sub_10030CF14(v144, v20);
      unint64_t v43 = *(void *)(v5 + 16);
      __int128 v44 = (v41 & 1) == 0;
      __int128 v45 = v43 + v44;
      if (__OFADD__(v43, v44))
      {
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
        goto LABEL_119;
      }

      __int128 v46 = v41;
      if (*(void *)(v5 + 24) >= v45)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          char isUniquelyReferenced_nonNull_native = v0 + 16;
          if ((v41 & 1) == 0) {
            goto LABEL_57;
          }
        }

        else
        {
          sub_10006191C();
          char v5 = v145;
          char isUniquelyReferenced_nonNull_native = v0 + 16;
          if ((v46 & 1) == 0) {
            goto LABEL_57;
          }
        }
      }

      else
      {
        sub_100049A7C(v45, isUniquelyReferenced_nonNull_native);
        char v5 = v145;
        __int128 v47 = sub_10030CF14(v144, v20);
        if ((v46 & 1) != (v48 & 1)) {
          goto LABEL_109;
        }
        uint64_t v42 = v47;
        char isUniquelyReferenced_nonNull_native = v0 + 16;
        if ((v46 & 1) == 0)
        {
LABEL_57:
          *(void *)(v5 + 8 * (v42 >> 6) + 64) |= 1LL << v42;
          __int128 v49 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v42);
          *__int128 v49 = v144;
          v49[1] = v20;
          sub_10006A2FC(v139, *(void *)(v5 + 56) + 48 * v42);
          __int128 v50 = *(void *)(v5 + 16);
          __int128 v51 = __OFADD__(v50, 1LL);
          unint64_t v52 = v50 + 1;
          if (v51) {
            goto LABEL_115;
          }
          *(void *)(v5 + swift_weakDestroy(v0 + 16) = v52;
          swift_bridgeObjectRetain(v20);
          goto LABEL_6;
        }
      }

      sub_100728A3C(v139, *(void *)(v5 + 56) + 48 * v42);
LABEL_6:
      uint64_t v10 = *v8;
      *unint64_t v8 = v5;
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v20);
      swift_endAccess(v138);
      id v11 = v0 + 336;
      goto LABEL_7;
    }

    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v22);
    uint64_t v23 = sub_10030CF14(v21, v20);
    if ((v24 & 1) != 0)
    {
      sub_10006A2C0(*(void *)(v22 + 56) + 48 * v23, v3);
    }

    else
    {
      *(void *)(v3 + 32) = 0LL;
      *(_OWORD *)uint64_t v3 = 0u;
      *(_OWORD *)(v3 + swift_weakDestroy(v0 + 16) = 0u;
      *(_BYTE *)(v0 + 328) = -1;
    }

    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v20);
    sub_10006A2FC(v3, v137);
    sub_10006A3E4((uint64_t)v2, v131);
    if (!*(_BYTE *)(v0 + 281))
    {
      uint64_t v36 = v0 + 528;
      sub_10006A2FC(v131, v136);
      goto LABEL_94;
    }

    if (*(_BYTE *)(v0 + 281) == 1)
    {
      uint64_t v25 = *(void *)(v0 + 240);
      uint64_t v26 = v0 + 672;
      sub_10006A2C0(v137, (uint64_t)v116);
      if (*(_BYTE *)(v0 + 712) != 2) {
        goto LABEL_110;
      }
      uint64_t v124 = v25;
      sub_100012EC0(v116, (uint64_t)v126);
      char isUniquelyReferenced_nonNull_native = *(void *)(v0 + 792);
      uint64_t v27 = *(void *)(v0 + 800);
      unint64_t v28 = sub_100012ED8(v126, isUniquelyReferenced_nonNull_native);
      uint64_t v29 = *(void **)(isUniquelyReferenced_nonNull_native - 8);
      uint64_t v30 = (v29[8] + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
      uint64_t v31 = swift_task_alloc(v30);
      uint64_t v32 = (void (*)(uint64_t, void *, uint64_t))v29[2];
      v32(v31, v28, isUniquelyReferenced_nonNull_native);
      LOBYTE(v28) = dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v27);
      uint64_t v127 = v30;
      uint64_t v33 = swift_task_alloc(v30);
      v32(v33, (void *)v31, isUniquelyReferenced_nonNull_native);
      uint64_t v123 = v33;
      char v109 = v29;
      if ((v28 & 1) != 0)
      {
        uint64_t v34 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v27);
        unint64_t v35 = (void (*)(uint64_t, uint64_t))v29[1];
        v35(v33, isUniquelyReferenced_nonNull_native);
        uint64_t v36 = v0 + 528;
        uint64_t v129 = v35;
        if (v34 > 64)
        {
          uint64_t v37 = swift_task_alloc(v127);
          v32(v37, (void *)v31, isUniquelyReferenced_nonNull_native);
          *unint64_t v108 = 0x8000000000000000LL;
          if ((dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v27) & 1) != 0)
          {
            if (dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v27) >= 64)
            {
              __int128 v66 = swift_task_alloc(v127);
              __int128 v67 = sub_10001563C();
              dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)( v108,  &type metadata for Int64,  v67,  isUniquelyReferenced_nonNull_native,  v27);
              uint64_t v121 = dispatch thunk of static Comparable.< infix(_:_:)( v37,  v66,  isUniquelyReferenced_nonNull_native,  *(void *)(*(void *)(v27 + 32) + 8LL));
              v129(v66, isUniquelyReferenced_nonNull_native);
              v129(v37, isUniquelyReferenced_nonNull_native);
              __int128 v68 = v66;
              uint64_t v36 = v0 + 528;
              uint64_t result = swift_task_dealloc(v68);
              if ((v121 & 1) != 0) {
                goto LABEL_121;
              }
            }

            else
            {
              uint64_t v119 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v27);
              uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v129)(v37, isUniquelyReferenced_nonNull_native);
              if (v119 < *v108) {
                goto LABEL_121;
              }
            }
          }

          else
          {
            __int128 v62 = dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v27);
            char v120 = v37;
            __int128 v63 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v27);
            if ((v62 & 1) != 0)
            {
              if (v63 <= 64)
              {
                __int128 v69 = *(void *)(*(void *)(v27 + 24) + 16LL);
                id v112 = v69;
                AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v69,  isUniquelyReferenced_nonNull_native,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
                __int128 v71 = swift_task_alloc((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
                AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v69,  isUniquelyReferenced_nonNull_native,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                uint64_t v73 = v71;
                uint64_t v106 = v71;
                dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_100819D80,  256LL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
                uint64_t v74 = v27;
                uint64_t v75 = swift_task_alloc(v127);
                dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)( v73,  isUniquelyReferenced_nonNull_native,  v112);
                unsigned int v76 = v74;
                LOBYTE(v112) = dispatch thunk of static Comparable.< infix(_:_:)( v120,  v75,  isUniquelyReferenced_nonNull_native,  *(void *)(*(void *)(v74 + 32) + 8LL));
                uint64_t v9 = (uint64_t)v129;
                v129(v75, isUniquelyReferenced_nonNull_native);
                swift_task_dealloc(v75);
                swift_task_dealloc(v106);
                char v5 = swift_task_alloc(v127);
                ((void (*)(uint64_t, uint64_t, uint64_t))v109[4])(v5, v120, isUniquelyReferenced_nonNull_native);
                if ((v112 & 1) != 0) {
                  goto LABEL_120;
                }
                id v113 = *v108;
                uint64_t v27 = v76;
                uint64_t v77 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v76);
                v129(v5, isUniquelyReferenced_nonNull_native);
                uint64_t result = swift_task_dealloc(v5);
                uint64_t v78 = v77 < v113;
                uint64_t v36 = v0 + 528;
                uint64_t v37 = v120;
                if (v78) {
                  goto LABEL_121;
                }
              }

              else
              {
                __int128 v64 = swift_task_alloc(v127);
                __int128 v65 = sub_10001563C();
                dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)( v108,  &type metadata for Int64,  v65,  isUniquelyReferenced_nonNull_native,  v27);
                char v110 = dispatch thunk of static Comparable.< infix(_:_:)( v37,  v64,  isUniquelyReferenced_nonNull_native,  *(void *)(*(void *)(v27 + 32) + 8LL));
                v129(v64, isUniquelyReferenced_nonNull_native);
                v129(v37, isUniquelyReferenced_nonNull_native);
                uint64_t result = swift_task_dealloc(v64);
                uint64_t v36 = v0 + 528;
                if ((v110 & 1) != 0) {
                  goto LABEL_121;
                }
              }
            }

            else
            {
              uint64_t v36 = v0 + 528;
              if (v63 < 64)
              {
                uint64_t v111 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v27);
                uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v129)(v37, isUniquelyReferenced_nonNull_native);
                if (v111 < *v108) {
                  goto LABEL_121;
                }
              }

              else
              {
                v129(v37, isUniquelyReferenced_nonNull_native);
              }
            }
          }

          swift_task_dealloc(v37);
        }
      }

      else
      {
        uint64_t v129 = (void (*)(uint64_t, uint64_t))v29[1];
        v129(v33, isUniquelyReferenced_nonNull_native);
        uint64_t v36 = v0 + 528;
      }

      uint64_t v79 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v27);
      uint64_t v9 = v27;
      unint64_t v80 = swift_task_alloc(v127);
      v32(v80, (void *)v31, isUniquelyReferenced_nonNull_native);
      if (v79 >= 65)
      {
        v129(v80, isUniquelyReferenced_nonNull_native);
        goto LABEL_82;
      }

      uint64_t v81 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v9);
      v129(v80, isUniquelyReferenced_nonNull_native);
      if (v81 == 64
        && (dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v9) & 1) == 0)
      {
LABEL_82:
        id v82 = swift_task_alloc(v127);
        uint64_t v114 = v31;
        v32(v82, (void *)v31, isUniquelyReferenced_nonNull_native);
        *uint64_t v118 = 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v83 = dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v9);
        uint64_t v122 = v9;
        uint64_t v84 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v9);
        if ((v83 & 1) != 0)
        {
          if (v84 > 64)
          {
            uint64_t v85 = swift_task_alloc(v127);
            uint64_t v86 = sub_10001563C();
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)( v118,  &type metadata for Int64,  v86,  isUniquelyReferenced_nonNull_native,  v9);
            char v5 = dispatch thunk of static Comparable.< infix(_:_:)( v85,  v82,  isUniquelyReferenced_nonNull_native,  *(void *)(*(void *)(v9 + 32) + 8LL));
            uint64_t v9 = (uint64_t)v129;
            v129(v85, isUniquelyReferenced_nonNull_native);
            v129(v82, isUniquelyReferenced_nonNull_native);
            swift_task_dealloc(v85);
            if ((v5 & 1) != 0) {
              goto LABEL_118;
            }
            goto LABEL_91;
          }

    uint64_t v141 = 0LL;
    *(_OWORD *)(v0 + 122) = 0u;
    *(_OWORD *)(v0 + 96) = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
    *uint64_t v139 = 0u;
LABEL_29:
    sub_100015750((uint64_t)v139, isUniquelyReferenced_nonNull_native, &qword_1009BE0C0);
    uint64_t v19 = *(void *)(v0 + 24);
    if (!v19)
    {
      swift_release();
      id v101 = *(uint64_t (**)(void))(v0 + 8);
      return v101();
    }

    unint64_t v20 = *(void *)isUniquelyReferenced_nonNull_native;
    sub_10006A420(v0 + 32, (uint64_t)v2);
    unint64_t v21 = *v8;
    uint64_t v142 = v20;
    if (!*(void *)(*v8 + 16))
    {
      *(void *)(v3 + 32) = 0LL;
      *(_OWORD *)uint64_t v3 = 0u;
      *(_OWORD *)(v3 + swift_weakDestroy(v0 + 16) = 0u;
      *(_BYTE *)(v0 + 328) = -1;
LABEL_45:
      sub_100015794(v3, &qword_1009BE048);
      sub_10006A3E4((uint64_t)v2, v133);
      if (*(_BYTE *)(v0 + 185))
      {
        if (*(_BYTE *)(v0 + 185) == 1)
        {
          uint64_t v38 = *(void *)(v0 + 144);
          *(void *)(v0 + 360) = &type metadata for Int64;
          *(void *)(v0 + 368) = sub_10001563C();
          *(void *)(v0 + 336) = v38;
          *(_BYTE *)(v0 + 376) = 2;
        }

        else
        {
          uint64_t v39 = *(void *)(v0 + 144);
          *(void *)(v0 + 360) = &type metadata for Double;
          *(void *)(v0 + 368) = sub_1000156C8();
          *(void *)(v0 + 336) = v39;
          *(_BYTE *)(v0 + 376) = 3;
        }
      }

      else
      {
        sub_10006A2FC(v133, v140);
      }

      swift_beginAccess(v8, v136, 33LL, 0LL);
      sub_10006A2C0(v140, v137);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
      char v5 = *v8;
      uint64_t v143 = *v8;
      *unint64_t v8 = 0x8000000000000000LL;
      uint64_t v41 = sub_10030CF14(v142, v19);
      uint64_t v42 = *(void *)(v5 + 16);
      unint64_t v43 = (v40 & 1) == 0;
      __int128 v44 = v42 + v43;
      if (__OFADD__(v42, v43))
      {
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
        goto LABEL_119;
      }

      __int128 v45 = v40;
      if (*(void *)(v5 + 24) >= v44)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          char isUniquelyReferenced_nonNull_native = v0 + 16;
          if ((v40 & 1) == 0) {
            goto LABEL_57;
          }
        }

        else
        {
          sub_10006191C();
          char v5 = v143;
          char isUniquelyReferenced_nonNull_native = v0 + 16;
          if ((v45 & 1) == 0) {
            goto LABEL_57;
          }
        }
      }

      else
      {
        sub_100049A7C(v44, isUniquelyReferenced_nonNull_native);
        char v5 = v143;
        __int128 v46 = sub_10030CF14(v142, v19);
        if ((v45 & 1) != (v47 & 1)) {
          goto LABEL_109;
        }
        uint64_t v41 = v46;
        char isUniquelyReferenced_nonNull_native = v0 + 16;
        if ((v45 & 1) == 0)
        {
LABEL_57:
          *(void *)(v5 + 8 * (v41 >> 6) + 64) |= 1LL << v41;
          __int128 v48 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v41);
          *__int128 v48 = v142;
          v48[1] = v19;
          sub_10006A2FC(v137, *(void *)(v5 + 56) + 48 * v41);
          __int128 v49 = *(void *)(v5 + 16);
          __int128 v50 = __OFADD__(v49, 1LL);
          __int128 v51 = v49 + 1;
          if (v50) {
            goto LABEL_115;
          }
          *(void *)(v5 + swift_weakDestroy(v0 + 16) = v51;
          swift_bridgeObjectRetain(v19);
          goto LABEL_6;
        }
      }

      sub_100728A3C(v137, *(void *)(v5 + 56) + 48 * v41);
LABEL_6:
      *unint64_t v8 = v5;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess(v136);
      uint64_t v10 = v0 + 336;
      goto LABEL_7;
    }

    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v21);
    uint64_t v22 = sub_10030CF14(v20, v19);
    if ((v23 & 1) != 0)
    {
      sub_10006A2C0(*(void *)(v21 + 56) + 48 * v22, v3);
    }

    else
    {
      *(void *)(v3 + 32) = 0LL;
      *(_OWORD *)uint64_t v3 = 0u;
      *(_OWORD *)(v3 + swift_weakDestroy(v0 + 16) = 0u;
      *(_BYTE *)(v0 + 328) = -1;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10006A2FC(v3, v135);
    sub_10006A3E4((uint64_t)v2, v129);
    if (!*(_BYTE *)(v0 + 281))
    {
      unint64_t v35 = v0 + 528;
      sub_10006A2FC(v129, v134);
      goto LABEL_94;
    }

    if (*(_BYTE *)(v0 + 281) == 1)
    {
      uint64_t v24 = *(void *)(v0 + 240);
      uint64_t v25 = v0 + 672;
      sub_10006A2C0(v135, (uint64_t)v114);
      if (*(_BYTE *)(v0 + 712) != 2) {
        goto LABEL_110;
      }
      uint64_t v122 = v24;
      sub_100012EC0(v114, (uint64_t)v124);
      char isUniquelyReferenced_nonNull_native = *(void *)(v0 + 792);
      uint64_t v26 = *(void *)(v0 + 800);
      uint64_t v27 = sub_100012ED8(v124, isUniquelyReferenced_nonNull_native);
      unint64_t v28 = *(void **)(isUniquelyReferenced_nonNull_native - 8);
      uint64_t v29 = (v28[8] + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
      uint64_t v30 = swift_task_alloc(v29);
      uint64_t v31 = (void (*)(uint64_t, void *, uint64_t))v28[2];
      v31(v30, v27, isUniquelyReferenced_nonNull_native);
      LOBYTE(v27) = dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v26);
      uint64_t v125 = v29;
      uint64_t v32 = swift_task_alloc(v29);
      v31(v32, (void *)v30, isUniquelyReferenced_nonNull_native);
      uint64_t v121 = v32;
      uint64_t v107 = v28;
      if ((v27 & 1) != 0)
      {
        uint64_t v33 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v26);
        uint64_t v34 = (void (*)(uint64_t, uint64_t))v28[1];
        v34(v32, isUniquelyReferenced_nonNull_native);
        unint64_t v35 = v0 + 528;
        uint64_t v127 = v34;
        if (v33 > 64)
        {
          uint64_t v36 = swift_task_alloc(v125);
          v31(v36, (void *)v30, isUniquelyReferenced_nonNull_native);
          *uint64_t v106 = 0x8000000000000000LL;
          if ((dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v26) & 1) != 0)
          {
            if (dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v26) >= 64)
            {
              __int128 v65 = swift_task_alloc(v125);
              __int128 v66 = sub_10001563C();
              dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)( v106,  &type metadata for Int64,  v66,  isUniquelyReferenced_nonNull_native,  v26);
              uint64_t v119 = dispatch thunk of static Comparable.< infix(_:_:)( v36,  v65,  isUniquelyReferenced_nonNull_native,  *(void *)(*(void *)(v26 + 32) + 8LL));
              v127(v65, isUniquelyReferenced_nonNull_native);
              v127(v36, isUniquelyReferenced_nonNull_native);
              __int128 v67 = v65;
              unint64_t v35 = v0 + 528;
              uint64_t result = swift_task_dealloc(v67);
              if ((v119 & 1) != 0) {
                goto LABEL_121;
              }
            }

            else
            {
              uint64_t v117 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v26);
              uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v127)(v36, isUniquelyReferenced_nonNull_native);
              if (v117 < *v106) {
                goto LABEL_121;
              }
            }
          }

          else
          {
            __int128 v61 = dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v26);
            uint64_t v118 = v36;
            __int128 v62 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v26);
            if ((v61 & 1) != 0)
            {
              if (v62 <= 64)
              {
                __int128 v68 = *(void *)(*(void *)(v26 + 24) + 16LL);
                char v110 = v68;
                AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v68,  isUniquelyReferenced_nonNull_native,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
                __int128 v70 = swift_task_alloc((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
                AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v68,  isUniquelyReferenced_nonNull_native,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                uint64_t v72 = v70;
                id v104 = v70;
                dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_100819D80,  256LL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
                uint64_t v73 = v26;
                uint64_t v74 = swift_task_alloc(v125);
                dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)( v72,  isUniquelyReferenced_nonNull_native,  v110);
                uint64_t v75 = v73;
                LOBYTE(v110) = dispatch thunk of static Comparable.< infix(_:_:)( v118,  v74,  isUniquelyReferenced_nonNull_native,  *(void *)(*(void *)(v73 + 32) + 8LL));
                uint64_t v9 = (uint64_t)v127;
                v127(v74, isUniquelyReferenced_nonNull_native);
                swift_task_dealloc(v74);
                swift_task_dealloc(v104);
                char v5 = swift_task_alloc(v125);
                ((void (*)(uint64_t, uint64_t, uint64_t))v107[4])(v5, v118, isUniquelyReferenced_nonNull_native);
                if ((v110 & 1) != 0) {
                  goto LABEL_120;
                }
                uint64_t v111 = *v106;
                uint64_t v26 = v75;
                unsigned int v76 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v75);
                v127(v5, isUniquelyReferenced_nonNull_native);
                uint64_t result = swift_task_dealloc(v5);
                uint64_t v77 = v76 < v111;
                unint64_t v35 = v0 + 528;
                uint64_t v36 = v118;
                if (v77) {
                  goto LABEL_121;
                }
              }

              else
              {
                __int128 v63 = swift_task_alloc(v125);
                __int128 v64 = sub_10001563C();
                dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)( v106,  &type metadata for Int64,  v64,  isUniquelyReferenced_nonNull_native,  v26);
                unint64_t v108 = dispatch thunk of static Comparable.< infix(_:_:)( v36,  v63,  isUniquelyReferenced_nonNull_native,  *(void *)(*(void *)(v26 + 32) + 8LL));
                v127(v63, isUniquelyReferenced_nonNull_native);
                v127(v36, isUniquelyReferenced_nonNull_native);
                uint64_t result = swift_task_dealloc(v63);
                unint64_t v35 = v0 + 528;
                if ((v108 & 1) != 0) {
                  goto LABEL_121;
                }
              }
            }

            else
            {
              unint64_t v35 = v0 + 528;
              if (v62 < 64)
              {
                char v109 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v26);
                uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v127)(v36, isUniquelyReferenced_nonNull_native);
                if (v109 < *v106) {
                  goto LABEL_121;
                }
              }

              else
              {
                v127(v36, isUniquelyReferenced_nonNull_native);
              }
            }
          }

          swift_task_dealloc(v36);
        }
      }

      else
      {
        uint64_t v127 = (void (*)(uint64_t, uint64_t))v28[1];
        v127(v32, isUniquelyReferenced_nonNull_native);
        unint64_t v35 = v0 + 528;
      }

      uint64_t v78 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v26);
      uint64_t v9 = v26;
      uint64_t v79 = swift_task_alloc(v125);
      v31(v79, (void *)v30, isUniquelyReferenced_nonNull_native);
      if (v78 >= 65)
      {
        v127(v79, isUniquelyReferenced_nonNull_native);
        goto LABEL_82;
      }

      unint64_t v80 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v9);
      v127(v79, isUniquelyReferenced_nonNull_native);
      if (v80 == 64
        && (dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v9) & 1) == 0)
      {
LABEL_82:
        uint64_t v81 = swift_task_alloc(v125);
        id v112 = v30;
        v31(v81, (void *)v30, isUniquelyReferenced_nonNull_native);
        char *v116 = 0x7FFFFFFFFFFFFFFFLL;
        id v82 = dispatch thunk of static BinaryInteger.isSigned.getter(isUniquelyReferenced_nonNull_native, v9);
        char v120 = v9;
        uint64_t v83 = dispatch thunk of BinaryInteger.bitWidth.getter(isUniquelyReferenced_nonNull_native, v9);
        if ((v82 & 1) != 0)
        {
          if (v83 > 64)
          {
            uint64_t v84 = swift_task_alloc(v125);
            uint64_t v85 = sub_10001563C();
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)( v116,  &type metadata for Int64,  v85,  isUniquelyReferenced_nonNull_native,  v9);
            char v5 = dispatch thunk of static Comparable.< infix(_:_:)( v84,  v81,  isUniquelyReferenced_nonNull_native,  *(void *)(*(void *)(v9 + 32) + 8LL));
            uint64_t v9 = (uint64_t)v127;
            v127(v84, isUniquelyReferenced_nonNull_native);
            v127(v81, isUniquelyReferenced_nonNull_native);
            swift_task_dealloc(v84);
            if ((v5 & 1) != 0) {
              goto LABEL_118;
            }
            goto LABEL_91;
          }

        swift_bridgeObjectRelease_n(v64, 2LL);
        goto LABEL_29;
      }

      swift_bridgeObjectRelease();
    }

    v72(v54, v120, v75);
    swift_bridgeObjectRelease();
    uint64_t v86 = sub_100004AEC((uint64_t *)&unk_1009C0FA0);
    uint64_t inited = swift_initStackObject(v86, v126);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataDeviceAddress);
    *(void *)(inited + 32) = v88;
    *(void *)(inited + 40) = v89;
    uint64_t v90 = v115;
    id v91 = MACAddress.data.getter(v88);
    *(void *)(inited + 48) = v91;
    *(void *)(inited + 56) = v92;
    *(void *)(inited + 72) = &type metadata for Data;
    *(void *)(inited + 80) = 0xD000000000000018LL;
    *(void *)(inited + 88) = 0x8000000100863950LL;
    uint64_t v93 = v90;
    unint64_t v94 = MACAddress.type.getter(v91);
    *(void *)(inited + 120) = &type metadata for MACAddress.AddressType;
    *(_BYTE *)(inited + 96) = v94 & 1;
    uint64_t v95 = sub_100412CF8(inited);
    uint64_t v96 = v38;
    uint64_t v97 = [v38 delegate];
    if (v97)
    {
      NSString v98 = v97;
      id v99 = type metadata accessor for Peripheral(0LL);
      NSString v100 = swift_dynamicCastClass(v98, v99);
      if (v100)
      {
        id v101 = (id)v100;
        swift_bridgeObjectRelease();
        sub_1004A1EFC(v93);
        id v102 = v120;
LABEL_36:
        uint64_t v106 = [v96 identifier];
        uint64_t v107 = (uint64_t)v114;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v106);

        swift_beginAccess(v74, &v124, 33LL, 0LL);
        unint64_t v20 = v101;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v74);
        uint64_t v131 = *v74;
        *uint64_t v74 = 0x8000000000000000LL;
        sub_10005FEF0((uint64_t)v20, v107, isUniquelyReferenced_nonNull_native);
        *uint64_t v74 = v131;
        swift_bridgeObjectRelease();
        ((void (*)(uint64_t, void *))v72)(v107, v102);
        swift_endAccess(&v124);

        a3 = v112;
        goto LABEL_37;
      }

      swift_unknownObjectRelease(v98);
    }

    int v103 = v96;
    Date.init()(v103);
    id v104 = (uint64_t)v111;
    id v102 = v120;
    (*(void (**)(char *, uint64_t, uint64_t, void *))(v122 + 56))(v111, 1LL, 1LL, v120);
    uint64_t v105 = objc_allocWithZone((Class)type metadata accessor for Peripheral(0LL));
    id v101 = sub_1004A59CC(v103, v95, 0LL, v53, v104);

    [v103 setDelegate:v101];
    goto LABEL_36;
  }

  __break(1u);
}

uint64_t sub_100043F78()
{
  uint64_t v1 = *(void *)(v0 + 208);

  swift_task_dealloc(v1);
  *(void *)(v0 + 232) = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 192);
  swift_setDeallocating(v2);
  swift_arrayDestroy(v2 + 32, *(void *)(v2 + 16), &type metadata for MessagingDestination);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100043FFC, 0LL, 0LL);
}

uint64_t sub_100043FFC(uint64_t a1)
{
  uint64_t v2 = static os_log_type_t.error.getter(a1);
  if (qword_10099B728 != -1) {
    swift_once(&qword_10099B728, sub_1006512E8);
  }
  uint64_t v3 = *(void *)(v1 + 232);
  uint64_t v4 = qword_100A2B038;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v6 = swift_allocObject(v5, 72LL, 7LL);
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v7 = _convertErrorToNSError(_:)(v3);
  *(void *)(v6 + 56) = sub_100022898(0LL, (unint64_t *)&qword_10099DFA0, &OBJC_CLASS___NSError_ptr);
  *(void *)(v6 + 64) = sub_100044B18();
  *(void *)(v6 + 32) = v7;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v4, "Error getting correlationIdentifier: %@", 39LL, 2LL, v6);
  swift_bridgeObjectRelease();
  uint64_t result = swift_errorRelease(v3);
  int64_t v9 = *(void *)(v1 + 152);
  unint64_t v10 = *(void *)(v1 + 160);
  if (!v10)
  {
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
    }

    else
    {
      int64_t v18 = (unint64_t)((1LL << *(_BYTE *)(v1 + 256)) + 63) >> 6;
      uint64_t result = *(void *)(v1 + 104);
      if (v17 >= v18) {
        goto LABEL_22;
      }
      uint64_t v19 = result + 56;
      unint64_t v20 = *(void *)(result + 56 + 8 * v17);
      ++v9;
      if (v20)
      {
LABEL_11:
        uint64_t v11 = (v20 - 1) & v20;
        unint64_t v12 = __clz(__rbit64(v20)) + (v9 << 6);
        goto LABEL_5;
      }

      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v18) {
        goto LABEL_22;
      }
      unint64_t v20 = *(void *)(v19 + 8 * v9);
      if (v20) {
        goto LABEL_11;
      }
      int64_t v9 = v17 + 2;
      if (v17 + 2 >= v18) {
        goto LABEL_22;
      }
      unint64_t v20 = *(void *)(v19 + 8 * v9);
      if (v20) {
        goto LABEL_11;
      }
      int64_t v21 = v17 + 3;
      if (v21 >= v18)
      {
LABEL_22:
        swift_release();
        uint64_t v22 = *(void *)(v1 + 88);
        *(void *)(v1 + 128) = v22;
        uint64_t v23 = swift_allocObject(&unk_10093A9C0, 24LL, 7LL);
        *(void *)(v1 + 136) = v23;
        *(void *)(v23 + swift_weakDestroy(v0 + 16) = v22;
        uint64_t v24 = async function pointer to unsafeBlocking<A>(_:)[1];
        swift_bridgeObjectRetain(v22);
        uint64_t v25 = (void *)swift_task_alloc(v24);
        *(void *)(v1 + 144) = v25;
        *uint64_t v25 = v1;
        v25[1] = sub_100043AA0;
        return unsafeBlocking<A>(_:)(v25, sub_100044BE8, v23, (char *)&type metadata for () + 8);
      }

      unint64_t v20 = *(void *)(v19 + 8 * v21);
      if (v20)
      {
        int64_t v9 = v21;
        goto LABEL_11;
      }

      while (1)
      {
        int64_t v9 = v21 + 1;
        if (__OFADD__(v21, 1LL)) {
          break;
        }
        if (v9 >= v18) {
          goto LABEL_22;
        }
        unint64_t v20 = *(void *)(v19 + 8 * v9);
        ++v21;
        if (v20) {
          goto LABEL_11;
        }
      }
    }

    __break(1u);
    return result;
  }

  uint64_t v11 = (v10 - 1) & v10;
  unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
  uint64_t result = *(void *)(v1 + 104);
LABEL_5:
  *(void *)(v1 + 152) = v9;
  *(void *)(v1 + 160) = v11;
  uint64_t v13 = *(void *)(result + 48) + 24 * v12;
  *(_BYTE *)(v1 + 257) = *(_BYTE *)v13;
  *(void *)(v1 + 168) = *(void *)(v13 + 8);
  uint64_t v14 = *(void *)(v13 + 16);
  *(void *)(v1 + 176) = v14;
  uint64_t v15 = qword_10099B090;
  swift_bridgeObjectRetain(v14);
  if (v15 != -1) {
    swift_once(&qword_10099B090, sub_100043320);
  }
  uint64_t v16 = qword_10099DF78;
  *(void *)(v1 + 184) = qword_10099DF78;
  return swift_task_switch(sub_100043B40, v16, 0LL);
}

uint64_t sub_1000442D0()
{
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v1 = *(void *)(v0 + 248);
  swift_bridgeObjectRelease();
  sub_1000BD5BC((uint64_t *)(v0 + 72), v2, v1);
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v4 = *(void *)(v0 + 152);
  unint64_t v5 = *(void *)(v0 + 160);
  if (!v5)
  {
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
    }

    else
    {
      int64_t v13 = (unint64_t)((1LL << *(_BYTE *)(v0 + 256)) + 63) >> 6;
      uint64_t result = *(void *)(v0 + 104);
      if (v12 >= v13) {
        goto LABEL_20;
      }
      uint64_t v14 = result + 56;
      unint64_t v15 = *(void *)(result + 56 + 8 * v12);
      ++v4;
      if (v15)
      {
LABEL_9:
        uint64_t v6 = (v15 - 1) & v15;
        unint64_t v7 = __clz(__rbit64(v15)) + (v4 << 6);
        goto LABEL_3;
      }

      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v13) {
        goto LABEL_20;
      }
      unint64_t v15 = *(void *)(v14 + 8 * v4);
      if (v15) {
        goto LABEL_9;
      }
      int64_t v4 = v12 + 2;
      if (v12 + 2 >= v13) {
        goto LABEL_20;
      }
      unint64_t v15 = *(void *)(v14 + 8 * v4);
      if (v15) {
        goto LABEL_9;
      }
      int64_t v16 = v12 + 3;
      if (v16 >= v13)
      {
LABEL_20:
        swift_release();
        uint64_t v17 = *(void *)(v0 + 88);
        *(void *)(v0 + 128) = v17;
        uint64_t v18 = swift_allocObject(&unk_10093A9C0, 24LL, 7LL);
        *(void *)(v0 + 136) = v18;
        *(void *)(v18 + swift_weakDestroy(v0 + 16) = v17;
        uint64_t v19 = async function pointer to unsafeBlocking<A>(_:)[1];
        swift_bridgeObjectRetain(v17);
        unint64_t v20 = (void *)swift_task_alloc(v19);
        *(void *)(v0 + 144) = v20;
        *unint64_t v20 = v0;
        v20[1] = sub_100043AA0;
        return unsafeBlocking<A>(_:)(v20, sub_100044BE8, v18, (char *)&type metadata for () + 8);
      }

      unint64_t v15 = *(void *)(v14 + 8 * v16);
      if (v15)
      {
        int64_t v4 = v16;
        goto LABEL_9;
      }

      while (1)
      {
        int64_t v4 = v16 + 1;
        if (__OFADD__(v16, 1LL)) {
          break;
        }
        if (v4 >= v13) {
          goto LABEL_20;
        }
        unint64_t v15 = *(void *)(v14 + 8 * v4);
        ++v16;
        if (v15) {
          goto LABEL_9;
        }
      }
    }

    __break(1u);
    return result;
  }

  uint64_t v6 = (v5 - 1) & v5;
  unint64_t v7 = __clz(__rbit64(v5)) | (v4 << 6);
  uint64_t result = *(void *)(v0 + 104);
LABEL_3:
  *(void *)(v0 + 152) = v4;
  *(void *)(v0 + 160) = v6;
  uint64_t v8 = *(void *)(result + 48) + 24 * v7;
  *(_BYTE *)(v0 + 257) = *(_BYTE *)v8;
  *(void *)(v0 + 168) = *(void *)(v8 + 8);
  uint64_t v9 = *(void *)(v8 + 16);
  *(void *)(v0 + 176) = v9;
  uint64_t v10 = qword_10099B090;
  swift_bridgeObjectRetain(v9);
  if (v10 != -1) {
    swift_once(&qword_10099B090, sub_100043320);
  }
  uint64_t v11 = qword_10099DF78;
  *(void *)(v0 + 184) = qword_10099DF78;
  return swift_task_switch(sub_100043B40, v11, 0LL);
}

uint64_t sub_1000444F4(uint64_t a1)
{
  uint64_t v2 = static os_log_type_t.error.getter(a1);
  if (qword_10099B728 != -1) {
    swift_once(&qword_10099B728, sub_1006512E8);
  }
  uint64_t v4 = *(void *)(v1 + 168);
  uint64_t v3 = *(void *)(v1 + 176);
  uint64_t v5 = qword_100A2B038;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_1000226F4();
  *(void *)(v7 + 32) = v4;
  *(void *)(v7 + 40) = v3;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v5, "Could not get correlationIdentifier for: %@", 43LL, 2LL, v7);
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v9 = *(void *)(v1 + 152);
  unint64_t v10 = *(void *)(v1 + 160);
  if (!v10)
  {
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
    }

    else
    {
      int64_t v18 = (unint64_t)((1LL << *(_BYTE *)(v1 + 256)) + 63) >> 6;
      uint64_t result = *(void *)(v1 + 104);
      if (v17 >= v18) {
        goto LABEL_22;
      }
      uint64_t v19 = result + 56;
      unint64_t v20 = *(void *)(result + 56 + 8 * v17);
      ++v9;
      if (v20)
      {
LABEL_11:
        uint64_t v11 = (v20 - 1) & v20;
        unint64_t v12 = __clz(__rbit64(v20)) + (v9 << 6);
        goto LABEL_5;
      }

      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v18) {
        goto LABEL_22;
      }
      unint64_t v20 = *(void *)(v19 + 8 * v9);
      if (v20) {
        goto LABEL_11;
      }
      int64_t v9 = v17 + 2;
      if (v17 + 2 >= v18) {
        goto LABEL_22;
      }
      unint64_t v20 = *(void *)(v19 + 8 * v9);
      if (v20) {
        goto LABEL_11;
      }
      int64_t v21 = v17 + 3;
      if (v21 >= v18)
      {
LABEL_22:
        swift_release();
        uint64_t v22 = *(void *)(v1 + 88);
        *(void *)(v1 + 128) = v22;
        uint64_t v23 = swift_allocObject(&unk_10093A9C0, 24LL, 7LL);
        *(void *)(v1 + 136) = v23;
        *(void *)(v23 + swift_weakDestroy(v0 + 16) = v22;
        uint64_t v24 = async function pointer to unsafeBlocking<A>(_:)[1];
        swift_bridgeObjectRetain(v22);
        uint64_t v25 = (void *)swift_task_alloc(v24);
        *(void *)(v1 + 144) = v25;
        *uint64_t v25 = v1;
        v25[1] = sub_100043AA0;
        return unsafeBlocking<A>(_:)(v25, sub_100044BE8, v23, (char *)&type metadata for () + 8);
      }

      unint64_t v20 = *(void *)(v19 + 8 * v21);
      if (v20)
      {
        int64_t v9 = v21;
        goto LABEL_11;
      }

      while (1)
      {
        int64_t v9 = v21 + 1;
        if (__OFADD__(v21, 1LL)) {
          break;
        }
        if (v9 >= v18) {
          goto LABEL_22;
        }
        unint64_t v20 = *(void *)(v19 + 8 * v9);
        ++v21;
        if (v20) {
          goto LABEL_11;
        }
      }
    }

    __break(1u);
    return result;
  }

  uint64_t v11 = (v10 - 1) & v10;
  unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
  uint64_t result = *(void *)(v1 + 104);
LABEL_5:
  *(void *)(v1 + 152) = v9;
  *(void *)(v1 + 160) = v11;
  uint64_t v13 = *(void *)(result + 48) + 24 * v12;
  *(_BYTE *)(v1 + 257) = *(_BYTE *)v13;
  *(void *)(v1 + 168) = *(void *)(v13 + 8);
  uint64_t v14 = *(void *)(v13 + 16);
  *(void *)(v1 + 176) = v14;
  uint64_t v15 = qword_10099B090;
  swift_bridgeObjectRetain(v14);
  if (v15 != -1) {
    swift_once(&qword_10099B090, sub_100043320);
  }
  uint64_t v16 = qword_10099DF78;
  *(void *)(v1 + 184) = qword_10099DF78;
  return swift_task_switch(sub_100043B40, v16, 0LL);
}

uint64_t sub_1000447A4(uint64_t a1)
{
  uint64_t v1 = a1;
  if (qword_10099B088 != -1) {
    a1 = swift_once(&qword_10099B088, sub_1000432EC);
  }
  __chkstk_darwin(a1);
  v4[2] = v1;
  return OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_100044BF0,  v4,  v2,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
}

uint64_t sub_100044848( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 32) = a7;
  *(void *)(v8 + 40) = a8;
  *(_BYTE *)(v8 + 80) = a6;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = a4;
  *(void *)(v8 + 24) = a5;
  return swift_task_switch(sub_100044868, 0LL, 0LL);
}

uint64_t sub_100044868()
{
  if (qword_10099B090 != -1) {
    swift_once(&qword_10099B090, sub_100043320);
  }
  uint64_t v1 = (void *)swift_task_alloc(dword_1009BFBEC);
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000448E8;
  return sub_10078CC24(*(_BYTE *)(v0 + 80), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1000448E8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *(void *)(*v3 + 48);
  *(void *)(*v3 + 56) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    uint64_t v8 = sub_1000449A4;
  }

  else
  {
    *(void *)(v6 + 64) = a2;
    *(void *)(v6 + 72) = a1;
    uint64_t v8 = sub_100044960;
  }

  return swift_task_switch(v8, 0LL, 0LL);
}

uint64_t sub_100044960()
{
  uint64_t v1 = *(void *)(v0 + 64);
  (*(void (**)(void, uint64_t, void))(v0 + 16))(*(void *)(v0 + 72), v1, 0LL);
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000449A4()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void (**)(uint64_t, void, uint64_t))(v0 + 16);
  swift_errorRetain(v1);
  v2(v1, 0LL, 1LL);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100044A04()
{
  return swift_deallocObject(v0, 25LL, 7LL);
}

uint64_t sub_100044A2C(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRelease(a1);
  }
  else {
    return swift_bridgeObjectRelease(a1);
  }
}

unint64_t sub_100044A38()
{
  unint64_t result = qword_10099DF80;
  if (!qword_10099DF80)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E79B4, &type metadata for FamilyCircle.FamilyCircleError);
    atomic_store(result, (unint64_t *)&qword_10099DF80);
  }

  return result;
}

uint64_t sub_100044A7C()
{
  swift_release(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100044AA8(void *a1, uint64_t a2)
{
}

uint64_t sub_100044AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100044AC0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100044AC8(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRetain(a1);
  }
  else {
    return swift_bridgeObjectRetain(a1);
  }
}

unint64_t sub_100044AD4()
{
  unint64_t result = qword_10099DF98;
  if (!qword_10099DF98)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E9744, &type metadata for MessagingError);
    atomic_store(result, (unint64_t *)&qword_10099DF98);
  }

  return result;
}

unint64_t sub_100044B18()
{
  unint64_t result = qword_1009AC180;
  if (!qword_1009AC180)
  {
    uint64_t v1 = sub_100022898(255LL, (unint64_t *)&qword_10099DFA0, &OBJC_CLASS___NSError_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1009AC180);
  }

  return result;
}

unint64_t sub_100044B70()
{
  unint64_t result = qword_10099DFA8;
  if (!qword_10099DFA8)
  {
    uint64_t Controller = type metadata accessor for MessagingQueryController();
    unint64_t result = swift_getWitnessTable(&unk_10081BAFC, Controller);
    atomic_store(result, (unint64_t *)&qword_10099DFA8);
  }

  return result;
}

void sub_100044BB8(uint64_t a1)
{
}

uint64_t sub_100044BC4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100044BE8()
{
  return sub_1000447A4(*(void *)(v0 + 16));
}

uint64_t sub_100044BF0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = qword_10099DF70;
  qword_10099DF70 = v1;
  swift_bridgeObjectRelease(v2);
  return swift_bridgeObjectRetain(v1);
}

uint64_t getEnumTagSinglePayload for CurrentLocationMonitor.Mode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for FamilyCircle.FamilyCircleError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100044D08 + 4 * byte_1007E7915[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100044D3C + 4 * asc_1007E7910[v4]))();
}

uint64_t sub_100044D3C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100044D44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100044D4CLL);
  }
  return result;
}

uint64_t sub_100044D58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100044D60LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100044D64(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100044D6C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_100044D78(_BYTE *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for FamilyCircle.FamilyCircleError()
{
  return &type metadata for FamilyCircle.FamilyCircleError;
}

unint64_t sub_100044D98()
{
  unint64_t result = qword_10099DFC0;
  if (!qword_10099DFC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E798C, &type metadata for FamilyCircle.FamilyCircleError);
    atomic_store(result, (unint64_t *)&qword_10099DFC0);
  }

  return result;
}

uint64_t sub_100044DE0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100044E08(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_10006A358((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    uint64_t v8 = *v2;
    void *v2 = 0x8000000000000000LL;
    sub_10005BE38(v9, a2, isUniquelyReferenced_nonNull_native);
    void *v2 = v8;
    swift_bridgeObjectRelease();
    uint64_t v5 = type metadata accessor for CodingUserInfoKey(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(a2, v5);
  }

  else
  {
    sub_100015794(a1, &qword_10099E200);
    sub_100047BC0(a2, v9);
    uint64_t v7 = type metadata accessor for CodingUserInfoKey(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(a2, v7);
    return sub_100015794((uint64_t)v9, &qword_10099E200);
  }

uint64_t sub_100044EEC(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = sub_100004AEC(&qword_10099FB70);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for ObservedAdvertisement(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1LL) == 1)
  {
    sub_100015794(a1, &qword_10099FB70);
    sub_100047CD0(a2, (uint64_t)v8);
    sub_100018C68(a2, type metadata accessor for BeaconIdentifier);
    return sub_100015794((uint64_t)v8, &qword_10099FB70);
  }

  else
  {
    sub_10002218C(a1, (uint64_t)v11, type metadata accessor for ObservedAdvertisement);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v16 = *v3;
    *int v3 = 0x8000000000000000LL;
    sub_10005BFC0((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    *int v3 = v16;
    swift_bridgeObjectRelease();
    return sub_100018C68(a2, type metadata accessor for BeaconIdentifier);
  }

uint64_t sub_100045054(uint64_t a1, void *a2)
{
  int v3 = v2;
  uint64_t v6 = sub_100004AEC(&qword_10099E530);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1LL) == 1)
  {
    sub_100015794(a1, &qword_10099E530);
    sub_100047EF8((uint64_t)a2, (uint64_t)v8);

    return sub_100015794((uint64_t)v8, &qword_10099E530);
  }

  else
  {
    sub_10002218C(a1, (uint64_t)v11, type metadata accessor for CloudKitChangeSet.TombstoneInfo);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v16 = *v3;
    *int v3 = 0x8000000000000000LL;
    sub_10005C960((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    *int v3 = v16;

    return swift_bridgeObjectRelease();
  }

uint64_t sub_1000451A8(uint64_t a1, uint64_t a2)
{
  return sub_100045A88( a1,  a2,  &qword_10099E488,  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator,  &qword_10099E490);
}

uint64_t sub_1000451C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_10006A358((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v8 = *v3;
    *int v3 = 0x8000000000000000LL;
    sub_10005CAD4(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *int v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  else
  {
    sub_100015794(a1, &qword_10099E200);
    sub_100048034(a2, a3, v9);
    swift_bridgeObjectRelease();
    return sub_100015794((uint64_t)v9, &qword_10099E200);
  }

uint64_t sub_100045298(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_100012EC0((__int128 *)a1, (uint64_t)v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    uint64_t v8 = *v2;
    void *v2 = 0x8000000000000000LL;
    sub_10005CF30( (uint64_t)v9,  a2,  isUniquelyReferenced_nonNull_native,  &qword_10099E450,  (void (*)(unint64_t, _BYTE *))sub_100012EC0);
    void *v2 = v8;
    swift_bridgeObjectRelease();
    uint64_t v5 = type metadata accessor for UUID(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(a2, v5);
  }

  else
  {
    sub_100015794(a1, (uint64_t *)&unk_1009AA790);
    sub_100048164(a2, (uint64_t)v9);
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(a2, v7);
    return sub_100015794((uint64_t)v9, (uint64_t *)&unk_1009AA790);
  }

uint64_t sub_100045390(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1LL, v9) == 1)
  {
    sub_100015794(a1, (uint64_t *)&unk_10099D720);
    sub_100048278(a2, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(a2, v13);
    return sub_100015794((uint64_t)v8, (uint64_t *)&unk_10099D720);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v18 = *v3;
    *int v3 = 0x8000000000000000LL;
    sub_10005D0C8((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native);
    *int v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for UUID(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8LL))(a2, v16);
  }

uint64_t sub_10004551C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100004AEC(&qword_10099E310);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1LL) == 1)
  {
    sub_100015794(a1, &qword_10099E310);
    sub_1000483C0(a2, a3, (uint64_t)v10);
    sub_100016F9C(a2, a3);
    return sub_100015794((uint64_t)v10, &qword_10099E310);
  }

  else
  {
    sub_10002218C(a1, (uint64_t)v13, type metadata accessor for OwnedBeaconGroup.PairingState);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v18 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    sub_10005D3B8((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v18;
    swift_bridgeObjectRelease();
    return sub_100016F9C(a2, a3);
  }

uint64_t sub_100045688(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = sub_100004AEC(&qword_10099E4C0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_10099E4C8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1LL, v9) == 1)
  {
    sub_100015794(a1, &qword_10099E4C0);
    sub_100048608(a2, &qword_10099E4C8, &qword_10099E4D0, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(a2, v13);
    return sub_100015794((uint64_t)v8, &qword_10099E4C0);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v18 = *v3;
    *int v3 = 0x8000000000000000LL;
    sub_10005E01C((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native);
    *int v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for UUID(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8LL))(a2, v16);
  }

uint64_t sub_100045828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100004AEC(&qword_10099E468);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for SecureLocationsSubscription(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1LL) == 1)
  {
    sub_100015794(a1, &qword_10099E468);
    sub_10004884C(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease();
    return sub_100015794((uint64_t)v10, &qword_10099E468);
  }

  else
  {
    sub_10002218C(a1, (uint64_t)v13, type metadata accessor for SecureLocationsSubscription);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v18 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    sub_10005E47C((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v18;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

uint64_t sub_100045990(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v4 = v3;
  if (a1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v15 = *v3;
    *int v3 = 0x8000000000000000LL;
    sub_10005ED0C(a1, a2, isUniquelyReferenced_nonNull_native, v8);
    *int v3 = v15;
  }

  else
  {
    uint64_t result = sub_10030D384(a2, a3);
    if ((v10 & 1) == 0) {
      return result;
    }
    unint64_t v11 = result;
    int v12 = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v13 = *v3;
    uint64_t v16 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    if (!v12)
    {
      sub_100066E40();
      uint64_t v13 = v16;
    }

    uint64_t v14 = *(void **)(*(void *)(v13 + 56) + 8 * v11);
    sub_10005A62C(v11, v13);
    *uint64_t v4 = v13;
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100045A6C(uint64_t a1, uint64_t a2)
{
  return sub_100045A88( a1,  a2,  &qword_1009AE490,  type metadata accessor for BeaconNamingRecord,  (uint64_t *)&unk_10099E160);
}

uint64_t sub_100045A88(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t *a5)
{
  uint64_t v9 = v5;
  uint64_t v12 = sub_100004AEC(a3);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = a4(0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v23 - v16;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v18 + 48))(a1, 1LL) == 1)
  {
    sub_100015794(a1, a3);
    sub_10004897C(a2, a4, a5, (uint64_t)v14);
    uint64_t v19 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8LL))(a2, v19);
    return sub_100015794((uint64_t)v14, a3);
  }

  else
  {
    sub_10002218C(a1, (uint64_t)v17, a4);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
    uint64_t v24 = *v9;
    void *v9 = 0x8000000000000000LL;
    sub_10005F160((uint64_t)v17, a2, isUniquelyReferenced_nonNull_native, a4, a5);
    void *v9 = v24;
    swift_bridgeObjectRelease();
    uint64_t v22 = type metadata accessor for UUID(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8LL))(a2, v22);
  }

uint64_t sub_100045C18(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = sub_100004AEC(&qword_10099E378);
  __chkstk_darwin(v6);
  __n128 v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_10099E380);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1LL) == 1)
  {
    sub_100015794(a1, &qword_10099E378);
    sub_100048AC8(a2, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(a2, v13);
    return sub_100015794((uint64_t)v8, &qword_10099E378);
  }

  else
  {
    sub_10006A4A8(a1, (uint64_t)v11);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v18 = *v3;
    *int v3 = 0x8000000000000000LL;
    sub_10005EE44((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    *int v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for UUID(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8LL))(a2, v16);
  }

uint64_t sub_100045D94(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2 >> 60 == 15)
  {
    sub_100048C0C(a3, a4, &v11);
    sub_100016F9C(a3, a4);
    return sub_1000182F0(v11, *((unint64_t *)&v11 + 1));
  }

  else
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    *(void *)&__int128 v11 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    sub_10005EFC8(a1, a2, a3, a4, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
    return sub_100016F9C(a3, a4);
  }

uint64_t sub_100045E60(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = sub_100004AEC(&qword_10099E330);
  __chkstk_darwin(v6);
  __n128 v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for BeaconScanner.AISLookupState(0LL);
  __chkstk_darwin(v9);
  __int128 v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1LL) == 1)
  {
    sub_100015794(a1, &qword_10099E330);
    sub_100048D04(a2, (uint64_t)v8);
    uint64_t v13 = sub_100004AEC(&qword_10099E338);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(a2, v13);
    return sub_100015794((uint64_t)v8, &qword_10099E330);
  }

  else
  {
    sub_10002218C(a1, (uint64_t)v11, type metadata accessor for BeaconScanner.AISLookupState);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v18 = *v3;
    *int v3 = 0x8000000000000000LL;
    sub_10005F2E8((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    *int v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = sub_100004AEC(&qword_10099E338);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8LL))(a2, v16);
  }

unint64_t sub_100045FE8(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100932DE8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_100046034(char a1)
{
  return qword_1007E7D00[a1];
}

uint64_t sub_10004604C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1007E7C10, a3);
  return == infix<A>(_:_:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_1000460A0(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1007E7C10, a1);
  return RawRepresentable<>.hashValue.getter(a1, a2, WitnessTable, &protocol witness table for String);
}

uint64_t sub_1000460EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1007E7C10, a2);
  return RawRepresentable<>.hash(into:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_10004613C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1007E7C10, a2);
  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

unint64_t sub_10004618C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100045FE8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000461B8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100046034(*v1);
  *a1 = result;
  a1[1] = 0xE100000000000000LL;
  return result;
}

uint64_t sub_1000461E4()
{
  return sub_100046034(*v0);
}

uint64_t sub_100046200@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100046030(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100046224@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_10006A2B8();
  *a1 = result;
  return result;
}

uint64_t sub_10004624C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1007E7CB0, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_100046280(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1007E7CB0, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

BOOL static Message.MessageError.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void Message.MessageError.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int Message.MessageError.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL sub_10004632C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Message.MessageError.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_100046338()
{
  return Message.MessageError.hashValue.getter(*v0);
}

void sub_100046340(uint64_t a1)
{
}

Swift::Int sub_100046348(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t Message.type.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t Message.version.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 36));
}

uint64_t SessionMessage.identifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 40);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t SessionMessage.init<A>(type:version:payload:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v42 = a7;
  uint64_t v46 = a3;
  uint64_t v14 = type metadata accessor for CodingUserInfoKey(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = *(void *)(a4 - 8);
  uint64_t v45 = a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(a8, a1, a4);
  uint64_t v19 = (int *)type metadata accessor for SessionMessage(0LL, a4, a6, v18);
  *(void *)(a8 + v19[9]) = a2;
  uint64_t v41 = a8 + v19[10];
  UUID.init()(v19);
  uint64_t v20 = type metadata accessor for PropertyListEncoder(0LL);
  uint64_t v21 = swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  uint64_t v22 = PropertyListEncoder.init()(v21);
  if (qword_10099BA20 != -1) {
    swift_once(&qword_10099BA20, sub_100792B54);
  }
  uint64_t v23 = sub_10000A720(v14, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v23, v14);
  v48[3] = &type metadata for Bool;
  LOBYTE(v48[0]) = 1;
  uint64_t v24 = (void (*)(_BYTE *, void))dispatch thunk of PropertyListEncoder.userInfo.modify(v47);
  sub_100044E08((uint64_t)v48, (uint64_t)v17);
  v24(v47, 0LL);
  uint64_t v25 = sub_100047038(a5, a5);
  uint64_t v26 = *(void *)(a5 - 8);
  uint64_t v27 = swift_allocObject( v25,  ((*(unsigned __int8 *)(v26 + 80) + (unint64_t)*(unsigned int *)(v25 + 48)) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))
        + *(void *)(v26 + 72),
          *(unsigned __int8 *)(v26 + 80) | (unint64_t)*(unsigned __int16 *)(v25 + 52));
  uint64_t v28 = static Array._adoptStorage(_:count:)(v27, 1LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v29, v46, a5);
  uint64_t v30 = type metadata accessor for Array(0LL);
  v48[0] = v28;
  v48[5] = v42;
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v30);
  uint64_t v32 = v43;
  uint64_t v33 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v48, v30, WitnessTable);
  if (v32)
  {
    swift_release(v22);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v46, a5);
    unint64_t v35 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
    v35(v45, a4);
    swift_bridgeObjectRelease();
    v35(a8, a4);
    uint64_t v36 = type metadata accessor for UUID(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8LL))(v41, v36);
  }

  else
  {
    uint64_t v38 = v33;
    uint64_t v39 = v34;
    swift_release(v22);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v46, a5);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v45, a4);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v40 = (uint64_t *)(a8 + v19[11]);
    *uint64_t v40 = v38;
    v40[1] = v39;
  }

  return result;
}

uint64_t type metadata accessor for SessionMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006A624(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SessionMessage);
}

uint64_t SessionMessage.extract<A>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = v4;
  uint64_t v30 = a4;
  uint64_t v10 = type metadata accessor for Optional(0LL, a2);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v31 = (char *)&v29 - v12;
  uint64_t v13 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v14 = PropertyListDecoder.init()();
  uint64_t v15 = type metadata accessor for Array(0LL);
  uint64_t v29 = a1;
  uint64_t v16 = (uint64_t *)(v6 + *(int *)(a1 + 44));
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  uint64_t v32 = a3;
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v15);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(&v33, v15, v18, v17, v15, WitnessTable);
  uint64_t result = swift_release(v14);
  if (!v5)
  {
    uint64_t v21 = v30;
    uint64_t v22 = swift_getWitnessTable(&protocol conformance descriptor for [A], v15);
    uint64_t v23 = v31;
    Collection.first.getter(v15, v22);
    swift_bridgeObjectRelease();
    uint64_t v24 = *(void *)(a2 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v23, 1LL, a2) == 1)
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v23, v10);
      uint64_t v26 = type metadata accessor for SessionMessage.MessageError( 0LL,  *(void *)(v29 + 16),  *(void *)(v29 + 24),  v25);
      uint64_t v27 = swift_getWitnessTable(&protocol conformance descriptor for SessionMessage<A>.MessageError, v26);
      swift_allocError(v26, v27, 0LL, 0LL);
      *uint64_t v28 = 0;
      return swift_willThrow();
    }

    else
    {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v21, v23, a2);
    }
  }

  return result;
}

uint64_t SessionMessage.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v26 = a2;
  uint64_t v27 = v5;
  uint64_t v7 = type metadata accessor for SessionMessage.CodingKeys(255LL, v5, v6, a4);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1007E7CB0, v7);
  uint64_t v9 = type metadata accessor for KeyedEncodingContainer(0LL, v7, WitnessTable);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v26 - v11;
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_100012ED8(a1, v14);
  dispatch thunk of Encoder.container<A>(keyedBy:)(v7, v7, WitnessTable, v14, v13);
  LOBYTE(v30) = 0;
  uint64_t v15 = *(void *)(v6 + 16);
  uint64_t v16 = v28;
  uint64_t v17 = v29;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v28, &v30, v9, v27, v15);
  if (v17) {
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  uint64_t v19 = v10;
  uint64_t v20 = v26;
  uint64_t v21 = *(void *)(v16 + *(int *)(v26 + 36));
  LOBYTE(v30) = 1;
  KeyedEncodingContainer.encode(_:forKey:)(v21, &v30, v9);
  uint64_t v22 = v16 + *(int *)(v20 + 40);
  LOBYTE(v30) = 2;
  uint64_t v23 = type metadata accessor for UUID(0LL);
  uint64_t v24 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v22, &v30, v9, v23, v24);
  __int128 v30 = *(_OWORD *)(v16 + *(int *)(v20 + 44));
  char v31 = 3;
  unint64_t v25 = sub_1000170A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v30, &v31, v9, &type metadata for Data, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v12, v9);
}

uint64_t SessionMessage.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v32 = a4;
  uint64_t v36 = type metadata accessor for UUID(0LL);
  uint64_t v34 = *(void *)(v36 - 8);
  uint64_t v7 = __chkstk_darwin(v36);
  uint64_t v33 = (uint64_t *)((char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v39 = *(void *)(a2 - 8);
  __chkstk_darwin(v7);
  uint64_t v40 = (uint64_t *)((char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = type metadata accessor for SessionMessage.CodingKeys(255LL, a2, a3, v10);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1007E7CB0, v11);
  uint64_t v42 = type metadata accessor for KeyedDecodingContainer(0LL, v11, WitnessTable);
  uint64_t v35 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v14 = (char *)&v32 - v13;
  uint64_t v37 = a3;
  uint64_t v38 = a2;
  uint64_t v16 = (int *)type metadata accessor for SessionMessage(0LL, a2, a3, v15);
  uint64_t v17 = *((void *)v16 - 1);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v32 - v18;
  uint64_t v21 = a1[3];
  uint64_t v20 = a1[4];
  sub_100012ED8(a1, v21);
  uint64_t v41 = v14;
  uint64_t v22 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)(v11, v11, WitnessTable, v21, v20);
  if (v22) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v43 = v17;
  uint64_t v23 = v35;
  uint64_t v24 = v36;
  LOBYTE(v44) = 0;
  uint64_t v25 = v38;
  uint64_t v26 = v39;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v40, v38, &v44, v42, v38, *(void *)(v37 + 8));
  (*(void (**)(char *, void *, uint64_t))(v26 + 32))(v19, v40, v25);
  LOBYTE(v44) = 1;
  *(void *)&v19[v16[9]] = KeyedDecodingContainer.decode(_:forKey:)(&v44, v42);
  LOBYTE(v44) = 2;
  uint64_t v27 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v28 = v33;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v33, v24, &v44, v42, v24, v27);
  (*(void (**)(char *, void *, uint64_t))(v34 + 32))(&v19[v16[10]], v28, v24);
  char v45 = 3;
  unint64_t v29 = sub_100016FE0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, &type metadata for Data, &v45, v42, &type metadata for Data, v29);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v41, v42);
  *(_OWORD *)&v19[v16[11]] = v44;
  uint64_t v30 = v43;
  (*(void (**)(uint64_t, char *, int *))(v43 + 16))(v32, v19, v16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return (*(uint64_t (**)(char *, int *))(v30 + 8))(v19, v16);
}

uint64_t sub_100046E3C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SessionMessage.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t sub_100046E58(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return SessionMessage.encode(to:)(a1, a2, a3, a4);
}

uint64_t SessionMessage.description.getter(uint64_t a1)
{
  v3._object = (void *)0x8000000100851AD0LL;
  v3._countAndFlagsBits = 0xD000000000000015LL;
  String.append(_:)(v3);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v1, *(void *)(a1 + 16));
  v4._countAndFlagsBits = 0x6F6973726576202CLL;
  v4._object = (void *)0xEB00000000203A6ELL;
  String.append(_:)(v4);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x69746E656469202CLL;
  v6._object = (void *)0xEE00203A72656966LL;
  String.append(_:)(v6);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v8);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x64616F6C79617020LL;
  v10._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v10);
  uint64_t v11 = (uint64_t *)(v1 + *(int *)(a1 + 44));
  uint64_t v12 = *v11;
  unint64_t v13 = v11[1];
  sub_10001736C(*v11, v13);
  v14._countAndFlagsBits = Data.description.getter(v12, v13);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  sub_100016F9C(v12, v13);
  v15._countAndFlagsBits = 41LL;
  v15._object = (void *)0xE100000000000000LL;
  String.append(_:)(v15);
  return 0LL;
}

uint64_t sub_100047038(uint64_t a1, uint64_t a2)
{
  else {
    uint64_t v3 = 0LL;
  }
  if (v3) {
    return sub_100004AEC(&qword_1009B0610);
  }
  else {
    return type metadata accessor for _ContiguousArrayStorage(0LL, a2);
  }
}

uint64_t type metadata accessor for SessionMessage.MessageError( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006A624(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SessionMessage.MessageError);
}

uint64_t type metadata accessor for SessionMessage.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006A624(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SessionMessage.CodingKeys);
}

uint64_t sub_10004709C(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for SessionMessage<A>.MessageError, a1);
}

uint64_t sub_1000470AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32LL);
}

uint64_t sub_1000470B4(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    v5[1] = (char *)&value witness table for Builtin.Int64 + 64;
    uint64_t result = type metadata accessor for UUID(319LL);
    if (v4 <= 0x3F)
    {
      v5[2] = *(void *)(result - 8) + 64LL;
      v5[3] = &unk_1007E7B58;
      swift_initStructMetadata(a1, 0LL, 4LL, v5, a1 + 32);
      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_100047150(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 64) + 7LL;
  unsigned int v12 = v10 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v12 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || ((v11 + ((v10 + ((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8) & ~v10)) & 0xFFFFFFFFFFFFFFF8LL) + 16 > 0x18)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + (((v12 | 7) + 16LL) & ~(unint64_t)(v12 | 7)));
    swift_retain(v15);
  }

  else
  {
    uint64_t v16 = v8;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    uint64_t v17 = (void *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v18 = (void *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    *uint64_t v17 = *v18;
    uint64_t v19 = ((unint64_t)v17 + v10 + 8) & ~v10;
    uint64_t v20 = ((unint64_t)v18 + v10 + 8) & ~v10;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v19, v20, v16);
    uint64_t v21 = (void *)((v11 + v19) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v22 = (uint64_t *)((v11 + v20) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v23 = *v22;
    unint64_t v24 = v22[1];
    sub_10001736C(*v22, v24);
    void *v21 = v23;
    v21[1] = v24;
  }

  return a1;
}

uint64_t sub_1000472AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8LL);
  (*(void (**)(void))(v3 + 8))();
  unint64_t v4 = (a1 + *(void *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v7, v5);
  unint64_t v8 = (*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_100016F9C(*(void *)v8, *(void *)(v8 + 8));
}

uint64_t sub_100047328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *unint64_t v7 = *v8;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = ((unint64_t)v7 + v11 + 8) & ~v11;
  uint64_t v13 = ((unint64_t)v8 + v11 + 8) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v12, v13, v9);
  uint64_t v14 = *(void *)(v10 + 64) + 7LL;
  uint64_t v15 = (void *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v16 = (uint64_t *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v17 = *v16;
  unint64_t v18 = v16[1];
  sub_10001736C(*v16, v18);
  *uint64_t v15 = v17;
  v15[1] = v18;
  return a1;
}

uint64_t sub_1000473F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *unint64_t v7 = *v8;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = ((unint64_t)v7 + v11 + 8) & ~v11;
  uint64_t v13 = ((unint64_t)v8 + v11 + 8) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(v12, v13, v9);
  uint64_t v14 = *(void *)(v10 + 64) + 7LL;
  uint64_t v15 = (uint64_t *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v16 = (uint64_t *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v17 = *v16;
  unint64_t v18 = v16[1];
  sub_10001736C(*v16, v18);
  uint64_t v19 = *v15;
  unint64_t v20 = v15[1];
  *uint64_t v15 = v17;
  v15[1] = v18;
  sub_100016F9C(v19, v20);
  return a1;
}

uint64_t sub_1000474C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *unint64_t v7 = *v8;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = ((unint64_t)v7 + v11 + 8) & ~v11;
  uint64_t v13 = ((unint64_t)v8 + v11 + 8) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v12, v13, v9);
  *(_OWORD *)((*(void *)(v10 + 64) + 7LL + v12) & 0xFFFFFFFFFFFFF8LL) = *(_OWORD *)((*(void *)(v10 + 64) + 7LL + v13) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t sub_10004757C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *unint64_t v7 = *v8;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = ((unint64_t)v7 + v11 + 8) & ~v11;
  uint64_t v13 = ((unint64_t)v8 + v11 + 8) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40))(v12, v13, v9);
  uint64_t v14 = *(void *)(v10 + 64) + 7LL;
  uint64_t v15 = (uint64_t *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v16 = *v15;
  unint64_t v17 = v15[1];
  *(_OWORD *)uint64_t v15 = *(_OWORD *)((v14 + v13) & 0xFFFFFFFFFFFFF8LL);
  sub_100016F9C(v16, v17);
  return a1;
}

uint64_t sub_100047640(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  if (v11 <= 0xC) {
    unsigned int v11 = 12;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v12 = v8;
  uint64_t v13 = *(void *)(v6 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = *(void *)(v9 + 64) + 7LL;
  if (v11 < a2)
  {
    if (((((v15 + ((v14 + ((v13 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8) & ~v14)) & 0xFFFFFFFFFFFFFFF8LL) + 16) & 0xFFFFFFF8) != 0) {
      unsigned int v16 = 2;
    }
    else {
      unsigned int v16 = a2 - v11 + 1;
    }
    if (v16 >= 0x10000) {
      unsigned int v17 = 4;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v16 < 0x100) {
      unsigned int v17 = 1;
    }
    if (v16 >= 2) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0LL;
    }
    __asm { BR              X17 }
  }

  if ((_DWORD)v7 == v11)
  {
    unint64_t v20 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
    unint64_t v21 = a1;
    uint64_t v10 = v7;
    uint64_t v12 = v5;
    return v20(v21, v10, v12);
  }

  unint64_t v21 = (((a1 + v13 + 7) & 0xFFFFFFFFFFFFFFF8LL) + v14 + 8) & ~v14;
  if ((_DWORD)v10 == v11)
  {
    unint64_t v20 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
    return v20(v21, v10, v12);
  }

  uint64_t v22 = *(void *)(((v15 + v21) & 0xFFFFFFFFFFFFF8LL) + 8) >> 60;
  if (((4 * (_DWORD)v22) & 0xC) != 0) {
    return 16 - ((4 * (_DWORD)v22) & 0xC | (v22 >> 2));
  }
  else {
    return 0LL;
  }
}

void sub_1000477FC(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  if (*(_DWORD *)(v9 + 84) <= v8) {
    unsigned int v10 = v8;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v9 + 84);
  }
  if (v10 <= 0xC) {
    unsigned int v10 = 12;
  }
  if (v10 >= a3)
  {
    int v13 = 0;
    if (a2 <= v10) {
      goto LABEL_19;
    }
  }

  else
  {
    if (((*(_DWORD *)(v9 + 64) {
         + 7
    }
    else {
      unsigned int v11 = 2;
    }
    if (v11 >= 0x10000) {
      int v12 = 4;
    }
    else {
      int v12 = 2;
    }
    if (v11 < 0x100) {
      int v12 = 1;
    }
    if (v11 >= 2) {
      int v13 = v12;
    }
    else {
      int v13 = 0;
    }
    if (a2 <= v10) {
LABEL_19:
    }
      __asm { BR              X16 }
  }

  if (((*(_DWORD *)(v9 + 64)
       + 7
       + ((*(unsigned __int8 *)(v9 + 80) + ((*(_DWORD *)(v7 + 64) + 7) & 0xFFFFFFF8) + 8) & ~*(unsigned __int8 *)(v9 + 80))) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v14 = ~v10 + a2;
    bzero( a1,  ((*(void *)(v9 + 64)
      + 7LL
    *a1 = v14;
  }

  __asm { BR              X10 }

void sub_100047938()
{
  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x1000479F4LL);
}

void sub_100047940()
{
  *(_DWORD *)(v1 + v2) = 0;
  if (v0) {
    JUMPOUT(0x100047948LL);
  }
  JUMPOUT(0x1000479F4LL);
}

void sub_1000479A8()
{
  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x1000479F4LL);
}

void sub_1000479B0()
{
  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x1000479F4LL);
}

uint64_t sub_1000479B8@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  *(_WORD *)(v12 + v15) = 0;
  if (!(_DWORD)v11) {
    JUMPOUT(0x1000479F4LL);
  }
  if ((_DWORD)v14 == v7)
  {
    uint64_t v3 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    unint64_t v4 = v12;
    uint64_t v5 = v11;
    a1 = v14;
    a2 = v13;
  }

  else
  {
    unint64_t v4 = (((v12 + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL) + v8 + 8) & v10;
    if ((_DWORD)a1 != v7) {
      JUMPOUT(0x1000479C4LL);
    }
    uint64_t v3 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(a3 + 56);
    uint64_t v5 = v11;
  }

  return v3(v4, v5, a1, a2);
}

uint64_t sub_100047A10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16LL);
}

uint64_t sub_100047A18(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100047A64 + 4 * byte_1007E7A0C[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100047A98 + 4 * byte_1007E7A07[v4]))();
}

uint64_t sub_100047A98(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100047AA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100047AA8LL);
  }
  return result;
}

uint64_t sub_100047AB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100047ABCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100047AC0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100047AC8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100047AD4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100047B20 + 4 * byte_1007E7A16[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100047B54 + 4 * byte_1007E7A11[v4]))();
}

uint64_t sub_100047B54(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100047B5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100047B64LL);
  }
  return result;
}

uint64_t sub_100047B70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100047B78LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100047B7C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100047B84(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100047B90(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1007E7C88, a1);
}

uint64_t sub_100047BA0(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1007E7BC0, a1);
}

uint64_t sub_100047BB0(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1007E7BE8, a1);
}

double sub_100047BC0@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  int v3 = v2;
  swift_bridgeObjectRetain(*v3);
  unint64_t v6 = sub_10030D0D4(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v9 = *v3;
    uint64_t v13 = *v3;
    *int v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100061E7C();
      uint64_t v9 = v13;
    }

    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for CodingUserInfoKey(0LL);
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * v6,  v11);
    sub_10006A358((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    sub_1000586A8(v6, v9);
    *int v3 = v9;
    swift_bridgeObjectRelease();
  }

  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }

  return result;
}

uint64_t sub_100047CBC(uint64_t a1)
{
  return sub_1000491C4(a1, (uint64_t)&unk_10099E550, (void (*)(uint64_t))sub_100069858);
}

uint64_t sub_100047CD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = v2;
  swift_bridgeObjectRetain(*v3);
  unint64_t v6 = sub_10030D1C4(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v9 = *v3;
    uint64_t v17 = *v3;
    *int v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000624D4();
      uint64_t v9 = v17;
    }

    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for BeaconIdentifier(0LL);
    sub_100018C68(v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * v6, type metadata accessor for BeaconIdentifier);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for ObservedAdvertisement(0LL);
    uint64_t v14 = *(void *)(v13 - 8);
    sub_10002218C(v12 + *(void *)(v14 + 72) * v6, a2, type metadata accessor for ObservedAdvertisement);
    sub_10005A300(v6, v9, type metadata accessor for ObservedAdvertisement);
    *int v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(a2, 0LL, 1LL, v13);
  }

  else
  {
    uint64_t v16 = type metadata accessor for ObservedAdvertisement(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))( a2,  1LL,  1LL,  v16);
  }

uint64_t sub_100047E14(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  swift_bridgeObjectRetain(*v3);
  unint64_t v6 = sub_10030CF14(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *int v3 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100062930();
    uint64_t v9 = v12;
  }

  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 16 * v6);
  sub_10005892C(v6, v9);
  *int v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100047EF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = v2;
  swift_bridgeObjectRetain(*v3);
  unint64_t v6 = sub_10030D338(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v9 = *v3;
    uint64_t v15 = *v3;
    *int v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100067550(type metadata accessor for CloudKitChangeSet.TombstoneInfo, &qword_10099E538);
      uint64_t v9 = v15;
    }

    uint64_t v10 = *(void *)(v9 + 56);
    uint64_t v11 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0LL);
    uint64_t v12 = *(void *)(v11 - 8);
    sub_10002218C(v10 + *(void *)(v12 + 72) * v6, a2, type metadata accessor for CloudKitChangeSet.TombstoneInfo);
    sub_10005A7F0(v6, v9, type metadata accessor for CloudKitChangeSet.TombstoneInfo);
    *int v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(a2, 0LL, 1LL, v11);
  }

  else
  {
    uint64_t v14 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))( a2,  1LL,  1LL,  v14);
  }

double sub_100048034@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain(*v4);
  unint64_t v8 = sub_10030CF14(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100063500( &qword_10099E1F8,  (void (*)(unint64_t, _BYTE *))sub_10006A650,  (void (*)(_BYTE *, uint64_t))sub_10006A358);
      uint64_t v11 = v13;
    }

    swift_bridgeObjectRelease();
    sub_10006A358((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    sub_1000590A0(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }

  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }

  return result;
}

uint64_t sub_10004813C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100048608(a1, &qword_10099E4F8, &qword_10099E500, a2);
}

uint64_t sub_100048150(uint64_t a1)
{
  return sub_1000491C4(a1, (uint64_t)&unk_10099E440, (void (*)(uint64_t))sub_100069630);
}

double sub_100048164@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = v2;
  swift_bridgeObjectRetain(*v3);
  unint64_t v6 = sub_10030D124(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v9 = *v3;
    uint64_t v13 = *v3;
    *int v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100063A60(&qword_10099E450, (uint64_t (*)(_BYTE *, uint64_t))sub_100012EC0);
      uint64_t v9 = v13;
    }

    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for UUID(0LL);
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * v6,  v11);
    sub_100012EC0((__int128 *)(*(void *)(v9 + 56) + 40 * v6), a2);
    sub_100059514(v6, v9);
    *int v3 = v9;
    swift_bridgeObjectRelease();
  }

  else
  {
    *(void *)(a2 + 32) = 0LL;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = 0u;
  }

  return result;
}

uint64_t sub_100048278@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = v2;
  swift_bridgeObjectRetain(*v3);
  unint64_t v6 = sub_10030D124(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v9 = *v3;
    uint64_t v17 = *v3;
    *int v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100063CA8();
      uint64_t v9 = v17;
    }

    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for UUID(0LL);
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * v6,  v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for Date(0LL);
    uint64_t v14 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 32))(a2, v12 + *(void *)(v14 + 72) * v6, v13);
    sub_1000597CC(v6, v9, (uint64_t (*)(void))&type metadata accessor for Date);
    *int v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(a2, 0LL, 1LL, v13);
  }

  else
  {
    uint64_t v16 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))( a2,  1LL,  1LL,  v16);
  }

uint64_t sub_1000483C0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain(*v4);
  unint64_t v8 = sub_10030CFC0(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v11 = *v4;
    uint64_t v17 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100064144();
      uint64_t v11 = v17;
    }

    sub_100016F9C(*(void *)(*(void *)(v11 + 48) + 16 * v8), *(void *)(*(void *)(v11 + 48) + 16 * v8 + 8));
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
    uint64_t v14 = *(void *)(v13 - 8);
    sub_10002218C(v12 + *(void *)(v14 + 72) * v8, a3, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_100059A74(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(a3, 0LL, 1LL, v13);
  }

  else
  {
    uint64_t v16 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))( a3,  1LL,  1LL,  v16);
  }

unint64_t sub_1000484F0(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain(*v2);
  unint64_t v4 = sub_10030D124(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0xF000000000000007LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  uint64_t *v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10006438C();
    uint64_t v7 = v12;
  }

  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * v4,  v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_100059274(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1000485C8(uint64_t a1)
{
  return sub_100048764(a1, &qword_10099E3F8);
}

uint64_t sub_1000485D4(uint64_t a1)
{
  return sub_1000491C4(a1, (uint64_t)&qword_10099E4E0, (void (*)(uint64_t))sub_100069630);
}

uint64_t sub_1000485E8(uint64_t a1)
{
  return sub_1000491C4(a1, (uint64_t)&unk_10099E4A0, (void (*)(uint64_t))sub_100069858);
}

uint64_t sub_1000485FC(uint64_t a1)
{
  return sub_100048764(a1, &qword_10099E4B0);
}

uint64_t sub_100048608@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = v4;
  swift_bridgeObjectRetain(*v7);
  unint64_t v10 = sub_10030D124(a1);
  LOBYTE(a1) = v11;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    uint64_t v13 = *v7;
    uint64_t v21 = *v7;
    *uint64_t v7 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10006561C(a2, a3);
      uint64_t v13 = v21;
    }

    uint64_t v14 = *(void *)(v13 + 48);
    uint64_t v15 = type metadata accessor for UUID(0LL);
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))( v14 + *(void *)(*(void *)(v15 - 8) + 72LL) * v10,  v15);
    uint64_t v16 = *(void *)(v13 + 56);
    uint64_t v17 = sub_100004AEC(a2);
    uint64_t v18 = *(void *)(v17 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v18 + 32))(a4, v16 + *(void *)(v18 + 72) * v10, v17);
    sub_100059E54(v10, v13, a2);
    *uint64_t v7 = v13;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(a4, 0LL, 1LL, v17);
  }

  else
  {
    uint64_t v20 = sub_100004AEC(a2);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))( a4,  1LL,  1LL,  v20);
  }

uint64_t sub_100048758(uint64_t a1)
{
  return sub_100048764(a1, &qword_10099E1C0);
}

uint64_t sub_100048764(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = v2;
  swift_bridgeObjectRetain(*v4);
  unint64_t v6 = sub_10030D124(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  uint64_t v9 = *v4;
  uint64_t v14 = *v4;
  *unint64_t v4 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100068FFC(a2);
    uint64_t v9 = v14;
  }

  uint64_t v10 = *(void *)(v9 + 48);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * v6,  v11);
  uint64_t v12 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_100059274(v6, v9);
  *unint64_t v4 = v9;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_10004884C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = v3;
  swift_bridgeObjectRetain(*v4);
  unint64_t v8 = sub_10030CF14(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v11 = *v4;
    uint64_t v17 = *v4;
    *unint64_t v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100065AAC();
      uint64_t v11 = v17;
    }

    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = type metadata accessor for SecureLocationsSubscription(0LL);
    uint64_t v14 = *(void *)(v13 - 8);
    sub_10002218C(v12 + *(void *)(v14 + 72) * v8, a3, type metadata accessor for SecureLocationsSubscription);
    sub_10005A0F8(v8, v11);
    *unint64_t v4 = v11;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(a3, 0LL, 1LL, v13);
  }

  else
  {
    uint64_t v16 = type metadata accessor for SecureLocationsSubscription(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))( a3,  1LL,  1LL,  v16);
  }

uint64_t sub_10004897C@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  char v7 = v4;
  swift_bridgeObjectRetain(*v7);
  unint64_t v10 = sub_10030D124(a1);
  LOBYTE(a1) = v11;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    uint64_t v13 = *v7;
    uint64_t v21 = *v7;
    *char v7 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100066FE0(a2, a3);
      uint64_t v13 = v21;
    }

    uint64_t v14 = *(void *)(v13 + 48);
    uint64_t v15 = type metadata accessor for UUID(0LL);
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))( v14 + *(void *)(*(void *)(v15 - 8) + 72LL) * v10,  v15);
    uint64_t v16 = *(void *)(v13 + 56);
    uint64_t v17 = a2(0LL);
    uint64_t v18 = *(void *)(v17 - 8);
    sub_10002218C(v16 + *(void *)(v18 + 72) * v10, a4, a2);
    sub_1000597CC(v10, v13, a2);
    *char v7 = v13;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(a4, 0LL, 1LL, v17);
  }

  else
  {
    uint64_t v20 = a2(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))( a4,  1LL,  1LL,  v20);
  }

uint64_t sub_100048AC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = v2;
  swift_bridgeObjectRetain(*v3);
  unint64_t v6 = sub_10030D124(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v9 = *v3;
    uint64_t v17 = *v3;
    *int v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000672A4();
      uint64_t v9 = v17;
    }

    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for UUID(0LL);
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * v6,  v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = sub_100004AEC(&qword_10099E380);
    uint64_t v14 = *(void *)(v13 - 8);
    sub_10006A4A8(v12 + *(void *)(v14 + 72) * v6, a2);
    sub_100059E54(v6, v9, &qword_10099E380);
    *int v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(a2, 0LL, 1LL, v13);
  }

  else
  {
    uint64_t v16 = sub_100004AEC(&qword_10099E380);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))( a2,  1LL,  1LL,  v16);
  }

double sub_100048C0C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v4 = v3;
  swift_bridgeObjectRetain(*v4);
  unint64_t v8 = sub_10030D84C(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *unint64_t v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100067778();
      uint64_t v11 = v13;
    }

    sub_100016F9C(*(void *)(*(void *)(v11 + 48) + 16 * v8), *(void *)(*(void *)(v11 + 48) + 16 * v8 + 8));
    *a3 = *(_OWORD *)(*(void *)(v11 + 56) + 16 * v8);
    sub_10005A9D4(v8, v11);
    *unint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }

  else
  {
    double result = 0.0;
    *a3 = xmmword_1007E7660;
  }

  return result;
}

uint64_t sub_100048CF0(uint64_t a1)
{
  return sub_1000491C4(a1, (uint64_t)&unk_10099E358, (void (*)(uint64_t))sub_100069858);
}

uint64_t sub_100048D04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = v2;
  swift_bridgeObjectRetain(*v3);
  unint64_t v6 = sub_10030DAD8(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v9 = *v3;
    uint64_t v17 = *v3;
    *int v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10006795C();
      uint64_t v9 = v17;
    }

    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = sub_100004AEC(&qword_10099E338);
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * v6,  v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for BeaconScanner.AISLookupState(0LL);
    uint64_t v14 = *(void *)(v13 - 8);
    sub_10002218C(v12 + *(void *)(v14 + 72) * v6, a2, type metadata accessor for BeaconScanner.AISLookupState);
    sub_10005ABB8(v6, v9);
    *int v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(a2, 0LL, 1LL, v13);
  }

  else
  {
    uint64_t v16 = type metadata accessor for BeaconScanner.AISLookupState(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))( a2,  1LL,  1LL,  v16);
  }

uint64_t sub_100048E44(uint64_t a1)
{
  return sub_1000491C4(a1, (uint64_t)&qword_10099E2C8, (void (*)(uint64_t))sub_100069858);
}

uint64_t sub_100048E58(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain(*v2);
  unint64_t v4 = sub_10030DBD8(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v7 = *v2;
  uint64_t v10 = *v2;
  uint64_t *v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100068148();
    uint64_t v7 = v10;
  }

  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 16 * v4);
  sub_10005AE44(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_100048F2C(uint64_t a1)
{
  return sub_1000491C4(a1, (uint64_t)&unk_10099E2A0, (void (*)(uint64_t))sub_100069858);
}

uint64_t sub_100048F40@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = v2;
  swift_bridgeObjectRetain(*v3);
  unint64_t v6 = sub_10030DC24(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v9 = *v3;
    uint64_t v17 = *v3;
    *int v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100068B7C( (uint64_t (*)(void))&type metadata accessor for Date,  type metadata accessor for ShareAttemptTracker.AttemptKey,  &qword_10099E280);
      uint64_t v9 = v17;
    }

    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for ShareAttemptTracker.AttemptKey(0LL);
    sub_100018C68( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * v6,  type metadata accessor for ShareAttemptTracker.AttemptKey);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for Date(0LL);
    uint64_t v14 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 32))(a2, v12 + *(void *)(v14 + 72) * v6, v13);
    sub_10005B3B0(v6, v9);
    *int v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(a2, 0LL, 1LL, v13);
  }

  else
  {
    uint64_t v16 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))( a2,  1LL,  1LL,  v16);
  }

uint64_t sub_100049094(uint64_t a1)
{
  return sub_1000490AC(a1, &qword_10099E1E0);
}

uint64_t sub_1000490A0(uint64_t a1)
{
  return sub_1000490AC(a1, &qword_10099E1D8);
}

uint64_t sub_1000490AC(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = v2;
  swift_bridgeObjectRetain(*v4);
  unint64_t v6 = sub_10030D930(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  uint64_t v9 = *v4;
  uint64_t v14 = *v4;
  *unint64_t v4 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000693EC(type metadata accessor for BeaconKeyManager.FileKey, a2);
    uint64_t v9 = v14;
  }

  uint64_t v10 = *(void *)(v9 + 48);
  uint64_t v11 = type metadata accessor for BeaconKeyManager.FileKey(0LL);
  sub_100018C68( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * v6,  type metadata accessor for BeaconKeyManager.FileKey);
  uint64_t v12 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_10005B6CC(v6, v9);
  *unint64_t v4 = v9;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_10004919C(uint64_t a1)
{
  return sub_1000491C4(a1, (uint64_t)&qword_10099E230, (void (*)(uint64_t))sub_100069630);
}

uint64_t sub_1000491B0(uint64_t a1)
{
  return sub_1000491C4(a1, (uint64_t)&unk_10099E4B8, (void (*)(uint64_t))sub_100069858);
}

uint64_t sub_1000491C4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  unint64_t v6 = v3;
  swift_bridgeObjectRetain(*v6);
  unint64_t v8 = sub_10030D124(a1);
  LOBYTE(a1) = v9;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
  uint64_t v11 = *v6;
  uint64_t v16 = *v6;
  *unint64_t v6 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a3(a2);
    uint64_t v11 = v16;
  }

  uint64_t v12 = *(void *)(v11 + 48);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))( v12 + *(void *)(*(void *)(v13 - 8) + 72LL) * v8,  v13);
  uint64_t v14 = *(void *)(*(void *)(v11 + 56) + 8 * v8);
  sub_100059274(v8, v11);
  *unint64_t v6 = v11;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_1000492B0(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain(*v2);
  unint64_t v4 = sub_10030D124(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  uint64_t *v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100069C4C();
    uint64_t v7 = v12;
  }

  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * v4,  v9);
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v7 + 56) + 16 * v4);
  sub_10005BA0C(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1000493A0(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E218);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v9 = 0LL;
    uint64_t v10 = (uint64_t *)(v5 + 64);
    uint64_t v11 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v33 = -1LL << v11;
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v13 = v12 & *(void *)(v5 + 64);
    uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v35 = v3;
    int64_t v36 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v21 = v20 | (v9 << 6);
      }

      else
      {
        int64_t v22 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        if (v22 >= v36) {
          goto LABEL_36;
        }
        unint64_t v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          int64_t v9 = v22 + 1;
          if (v22 + 1 >= v36) {
            goto LABEL_36;
          }
          unint64_t v23 = v10[v9];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v36)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                int v3 = v35;
                goto LABEL_43;
              }

              if (v34 >= 64) {
                bzero((void *)(v5 + 64), 8 * v36);
              }
              else {
                *uint64_t v10 = v33;
              }
              int v3 = v35;
              *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v9 = v24 + 1;
                if (__OFADD__(v24, 1LL)) {
                  goto LABEL_45;
                }
                if (v9 >= v36) {
                  goto LABEL_36;
                }
                unint64_t v23 = v10[v9];
                ++v24;
                if (v23) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v9 = v24;
          }
        }

uint64_t sub_100049650(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E568);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (!*(void *)(v5 + 16)) {
    goto LABEL_31;
  }
  uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v19 = (unint64_t)(v8 + 63) >> 6;
  swift_retain(v5);
  if (v10)
  {
    unint64_t v11 = __clz(__rbit64(v10));
    goto LABEL_21;
  }

  if (v19 <= 1)
  {
    swift_release(v5);
    uint64_t v12 = (void *)(v5 + 64);
    if ((a2 & 1) == 0) {
      goto LABEL_31;
    }
    goto LABEL_27;
  }

  uint64_t v12 = (void *)(v5 + 64);
  unint64_t v13 = *(void *)(v5 + 72);
  uint64_t v14 = 1LL;
  if (v13) {
    goto LABEL_20;
  }
  uint64_t v14 = 2LL;
  if (v19 <= 2) {
    goto LABEL_24;
  }
  unint64_t v13 = *(void *)(v5 + 80);
  if (v13)
  {
LABEL_20:
    unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_21:
    uint64_t v16 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v11);
    if ((a2 & 1) == 0) {
      swift_retain(*(void *)(*(void *)(v5 + 56) + 8 * v11));
    }
    Hasher.init(_seed:)(v20, *(void *)(v7 + 40));
    __asm { BR              X8 }
  }

  uint64_t v15 = 3LL;
  if (v19 > 3)
  {
    unint64_t v13 = *(void *)(v5 + 88);
    if (v13)
    {
      uint64_t v14 = 3LL;
      goto LABEL_20;
    }

    while (1)
    {
      uint64_t v14 = v15 + 1;
      if (__OFADD__(v15, 1LL))
      {
        __break(1u);
        JUMPOUT(0x100049A58LL);
      }

      if (v14 >= v19) {
        break;
      }
      unint64_t v13 = *(void *)(v5 + 64 + 8 * v14);
      ++v15;
      if (v13) {
        goto LABEL_20;
      }
    }
  }

LABEL_24:
  swift_release(v5);
  if ((a2 & 1) == 0) {
    goto LABEL_31;
  }
LABEL_27:
  uint64_t v17 = 1LL << *(_BYTE *)(v5 + 32);
  if (v17 >= 64) {
    bzero(v12, ((unint64_t)(v17 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v12 = -1LL << v17;
  }
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_31:
  uint64_t result = swift_release(v5);
  *int v3 = v7;
  return result;
}

    unint64_t v11 = (v21 - 1) & v21;
    unint64_t v18 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_25:
    unint64_t v23 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
    char v25 = *v23;
    int64_t v24 = v23[1];
    unint64_t v26 = *(void *)(v5 + 56) + 48 * v18;
    if ((v38 & 1) != 0)
    {
      sub_10006A2FC(v26, (uint64_t)v40);
    }

    else
    {
      sub_10006A2C0(v26, (uint64_t)v40);
      swift_bridgeObjectRetain(v24);
    }

    Hasher.init(_seed:)(v39, *(void *)(v8 + 40));
    String.hash(into:)(v39, v25, v24);
    uint64_t result = Hasher._finalize()();
    BOOL v27 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v28 = result & ~v27;
    uint64_t v29 = v28 >> 6;
    if (((-1LL << v28) & ~*(void *)(v12 + 8 * (v28 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v30 = 0;
      char v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        id v32 = v29 == v31;
        if (v29 == v31) {
          uint64_t v29 = 0LL;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v12 + 8 * v29);
      }

      while (v33 == -1);
      uint64_t v15 = __clz(__rbit64(~v33)) + (v29 << 6);
    }

    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    uint64_t v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
    uint64_t *v16 = v25;
    v16[1] = v24;
    uint64_t result = sub_10006A2FC((uint64_t)v40, *(void *)(v8 + 56) + 48 * v15);
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  int v3 = v35;
  unint64_t v20 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v20, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *unint64_t v20 = -1LL << v34;
  }
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_44:
  uint64_t result = swift_release(v5);
  *int v3 = v8;
  return result;
}

        uint64_t v12 = (v21 - 1) & v21;
        int64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
      }

      unint64_t v23 = *(void **)(*(void *)(v5 + 48) + 8 * v19);
      int64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v19);
      if ((a2 & 1) != 0)
      {
        sub_10006A358(v24, v35);
      }

      else
      {
        sub_10006A538((uint64_t)v24, (uint64_t)v35);
        char v25 = v23;
      }

      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
      unint64_t v26 = -1LL << *(_BYTE *)(v8 + 32);
      BOOL v27 = result & ~v26;
      uint64_t v28 = v27 >> 6;
      if (((-1LL << v27) & ~*(void *)(v14 + 8 * (v27 >> 6))) != 0)
      {
        uint64_t v17 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v14 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v29 = 0;
        uint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }

          char v31 = v28 == v30;
          if (v28 == v30) {
            uint64_t v28 = 0LL;
          }
          v29 |= v31;
          id v32 = *(void *)(v14 + 8 * v28);
        }

        while (v32 == -1);
        uint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
      }

      *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      *(void *)(*(void *)(v8 + 48) + 8 * v17) = v23;
      uint64_t result = (uint64_t)sub_10006A358(v35, (_OWORD *)(*(void *)(v8 + 56) + 32 * v17));
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
LABEL_44:
  *int v3 = v8;
  return result;
}

    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_25:
    unint64_t v26 = *(void *)(v5 + 48) + 40 * v21;
    if ((a2 & 1) != 0)
    {
      BOOL v27 = *(_OWORD *)v26;
      uint64_t v28 = *(_OWORD *)(v26 + 16);
      uint64_t v41 = *(void *)(v26 + 32);
      uint64_t v39 = v27;
      uint64_t v40 = v28;
      sub_10006A358((_OWORD *)(*(void *)(v5 + 56) + 32 * v21), v38);
    }

    else
    {
      sub_10006A5E8(v26, (uint64_t)&v39);
      sub_10006A538(*(void *)(v5 + 56) + 32 * v21, (uint64_t)v38);
    }

    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v8 + 40));
    uint64_t v29 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v30 = result & ~v29;
    char v31 = v30 >> 6;
    if (((-1LL << v30) & ~*(void *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      uint64_t v16 = __clz(__rbit64((-1LL << v30) & ~*(void *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v32 = 0;
      uint64_t v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        uint64_t v34 = v31 == v33;
        if (v31 == v33) {
          char v31 = 0LL;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v13 + 8 * v31);
      }

      while (v35 == -1);
      uint64_t v16 = __clz(__rbit64(~v35)) + (v31 << 6);
    }

    *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
    uint64_t v17 = *(void *)(v8 + 48) + 40 * v16;
    unint64_t v18 = v39;
    int64_t v19 = v40;
    *(void *)(v17 + 32) = v41;
    *(_OWORD *)uint64_t v17 = v18;
    *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = v19;
    uint64_t result = (uint64_t)sub_10006A358(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v16));
    ++*(void *)(v8 + 16);
  }

  swift_release();
  unint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  int64_t v36 = 1LL << *(_BYTE *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    char *v23 = -1LL << v36;
  }
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_44:
  uint64_t result = swift_release();
  *int v3 = v8;
  return result;
}

        unint64_t v13 = (v21 - 1) & v21;
        int64_t v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }

      unint64_t v23 = 8 * v19;
      int64_t v24 = *(void *)(*(void *)(v5 + 48) + v23);
      char v25 = *(void *)(*(void *)(v5 + 56) + v23);
      uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v8 + 40), v24);
      unint64_t v26 = -1LL << *(_BYTE *)(v8 + 32);
      BOOL v27 = result & ~v26;
      uint64_t v28 = v27 >> 6;
      if (((-1LL << v27) & ~*(void *)(v15 + 8 * (v27 >> 6))) != 0)
      {
        uint64_t v16 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v15 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v29 = 0;
        uint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }

          char v31 = v28 == v30;
          if (v28 == v30) {
            uint64_t v28 = 0LL;
          }
          v29 |= v31;
          id v32 = *(void *)(v15 + 8 * v28);
        }

        while (v32 == -1);
        uint64_t v16 = __clz(__rbit64(~v32)) + (v28 << 6);
      }

      *(void *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
      uint64_t v17 = 8 * v16;
      *(void *)(*(void *)(v8 + 48) + v17) = v24;
      *(void *)(*(void *)(v8 + 56) + v17) = v25;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
LABEL_41:
  *int v3 = v8;
  return result;
}

    uint64_t v15 = (v25 - 1) & v25;
    int64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_25:
    BOOL v27 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v22);
    uint64_t v29 = *v27;
    uint64_t v28 = v27[1];
    uint64_t v30 = *(void *)(v9 + 56) + 32 * v22;
    if ((v43 & 1) != 0)
    {
      a4(v30, v45);
    }

    else
    {
      a5(v30, v45);
      swift_bridgeObjectRetain(v28);
    }

    Hasher.init(_seed:)(v44, *(void *)(v12 + 40));
    String.hash(into:)(v44, v29, v28);
    uint64_t result = Hasher._finalize()();
    char v31 = -1LL << *(_BYTE *)(v12 + 32);
    id v32 = result & ~v31;
    uint64_t v33 = v32 >> 6;
    if (((-1LL << v32) & ~*(void *)(v16 + 8 * (v32 >> 6))) != 0)
    {
      int64_t v19 = __clz(__rbit64((-1LL << v32) & ~*(void *)(v16 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v34 = 0;
      uint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        int64_t v36 = v33 == v35;
        if (v33 == v35) {
          uint64_t v33 = 0LL;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v16 + 8 * v33);
      }

      while (v37 == -1);
      int64_t v19 = __clz(__rbit64(~v37)) + (v33 << 6);
    }

    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    unint64_t v20 = (void *)(*(void *)(v12 + 48) + 16 * v19);
    *unint64_t v20 = v29;
    v20[1] = v28;
    uint64_t result = ((uint64_t (*)(_BYTE *, unint64_t))a4)(v45, *(void *)(v12 + 56) + 32 * v19);
    ++*(void *)(v12 + 16);
  }

  swift_release();
  uint64_t v7 = v39;
  int64_t v24 = (void *)(v9 + 64);
  if ((v43 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  uint64_t v38 = 1LL << *(_BYTE *)(v9 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *int64_t v24 = -1LL << v38;
  }
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_44:
  uint64_t result = swift_release();
  *uint64_t v7 = v12;
  return result;
}

        unint64_t v13 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v9 << 6);
      }

      int64_t v22 = *(_BYTE *)(*(void *)(v5 + 48) + v18);
      unint64_t v23 = *(_BYTE *)(*(void *)(v5 + 56) + v18);
      uint64_t result = static Hasher._hash(seed:bytes:count:)(*(void *)(v8 + 40), v22, 1LL);
      int64_t v24 = -1LL << *(_BYTE *)(v8 + 32);
      char v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v15 + 8 * (v25 >> 6))) != 0)
      {
        uint64_t v16 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v15 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        BOOL v27 = 0;
        uint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }

          uint64_t v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0LL;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v15 + 8 * v26);
        }

        while (v30 == -1);
        uint64_t v16 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
      *(_BYTE *)(*(void *)(v8 + 48) + vswift_weakDestroy(v0 + 16) = v22;
      *(_BYTE *)(*(void *)(v8 + 56) + vswift_weakDestroy(v0 + 16) = v23;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release();
LABEL_41:
  *int v3 = v8;
  return result;
}

    unint64_t v11 = (v21 - 1) & v21;
    unint64_t v18 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_25:
    unint64_t v23 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
    char v25 = *v23;
    int64_t v24 = v23[1];
    unint64_t v26 = *(void *)(v5 + 56) + 48 * v18;
    if ((v38 & 1) != 0)
    {
      sub_10006A420(v26, (uint64_t)v40);
    }

    else
    {
      sub_10006A3E4(v26, (uint64_t)v40);
      swift_bridgeObjectRetain(v24);
    }

    Hasher.init(_seed:)(v39, *(void *)(v8 + 40));
    String.hash(into:)(v39, v25, v24);
    uint64_t result = Hasher._finalize()();
    BOOL v27 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v28 = result & ~v27;
    uint64_t v29 = v28 >> 6;
    if (((-1LL << v28) & ~*(void *)(v12 + 8 * (v28 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v30 = 0;
      char v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        id v32 = v29 == v31;
        if (v29 == v31) {
          uint64_t v29 = 0LL;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v12 + 8 * v29);
      }

      while (v33 == -1);
      uint64_t v15 = __clz(__rbit64(~v33)) + (v29 << 6);
    }

    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    uint64_t v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
    uint64_t *v16 = v25;
    v16[1] = v24;
    uint64_t result = sub_10006A420((uint64_t)v40, *(void *)(v8 + 56) + 48 * v15);
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  int v3 = v35;
  unint64_t v20 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v20, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *unint64_t v20 = -1LL << v34;
  }
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_44:
  uint64_t result = swift_release(v5);
  *int v3 = v8;
  return result;
}

        uint64_t v12 = (v21 - 1) & v21;
        int64_t v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }

      unint64_t v23 = 16 * v19;
      int64_t v24 = *(void *)(v5 + 48) + v23;
      char v25 = *(void *)(v24 + 8);
      unint64_t v26 = *(_DWORD *)v24;
      BOOL v27 = (uint64_t *)(*(void *)(v5 + 56) + v23);
      uint64_t v29 = *v27;
      uint64_t v28 = v27[1];
      Hasher.init(_seed:)(v42, *(void *)(v8 + 40));
      Hasher._combine(_:)(v26);
      Hasher._combine(_:)(v25);
      uint64_t result = Hasher._finalize()();
      uint64_t v30 = -1LL << *(_BYTE *)(v8 + 32);
      char v31 = result & ~v30;
      id v32 = v31 >> 6;
      if (((-1LL << v31) & ~*(void *)(v13 + 8 * (v31 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v31) & ~*(void *)(v13 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v33 = 0;
        uint64_t v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }

          uint64_t v35 = v32 == v34;
          if (v32 == v34) {
            id v32 = 0LL;
          }
          v33 |= v35;
          int64_t v36 = *(void *)(v13 + 8 * v32);
        }

        while (v36 == -1);
        uint64_t v14 = __clz(__rbit64(~v36)) + (v32 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      uint64_t v15 = 16 * v14;
      uint64_t v16 = *(void *)(v8 + 48) + v15;
      *(_DWORD *)uint64_t v16 = v26;
      *(void *)(v16 + 8) = v25;
      uint64_t v17 = (void *)(*(void *)(v8 + 56) + v15);
      *uint64_t v17 = v29;
      v17[1] = v28;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release();
LABEL_41:
  *int v3 = v8;
  return result;
}

    unint64_t v11 = (v20 - 1) & v20;
    uint64_t v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_25:
    int64_t v22 = *(void **)(*(void *)(v5 + 48) + 8 * v17);
    unint64_t v23 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
    if ((v40 & 1) != 0)
    {
      sub_10006A358(v23, v42);
    }

    else
    {
      sub_10006A538((uint64_t)v23, (uint64_t)v42);
      int64_t v24 = v22;
    }

    char v25 = *(void *)(v8 + 40);
    unint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    uint64_t v28 = v27;
    Hasher.init(_seed:)(v41, v25);
    String.hash(into:)(v41, v26, v28);
    uint64_t v29 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v30 = -1LL << *(_BYTE *)(v8 + 32);
    char v31 = v29 & ~v30;
    id v32 = v31 >> 6;
    if (((-1LL << v31) & ~*(void *)(v12 + 8 * (v31 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1LL << v31) & ~*(void *)(v12 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v33 = 0;
      uint64_t v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        uint64_t v35 = v32 == v34;
        if (v32 == v34) {
          id v32 = 0LL;
        }
        v33 |= v35;
        int64_t v36 = *(void *)(v12 + 8 * v32);
      }

      while (v36 == -1);
      uint64_t v15 = __clz(__rbit64(~v36)) + (v32 << 6);
    }

    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    *(void *)(*(void *)(v8 + 48) + 8 * v15) = v22;
    uint64_t result = (uint64_t)sub_10006A358(v42, (_OWORD *)(*(void *)(v8 + 56) + 32 * v15));
    ++*(void *)(v8 + 16);
  }

  swift_release();
  int64_t v19 = (void *)(v5 + 64);
  if ((v40 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  uint64_t v37 = 1LL << *(_BYTE *)(v5 + 32);
  if (v37 >= 64) {
    bzero(v19, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *int64_t v19 = -1LL << v37;
  }
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_44:
  uint64_t result = swift_release();
  *int v3 = v8;
  return result;
}

    sub_100016F9C(v2, v0);
    sub_100016F9C(v2, v0);
    goto LABEL_25;
  }

  if (Data.subscript.getter(0LL, v2, v0) != 76 || Data.subscript.getter(1LL, v2, v0))
  {
    if (qword_10099B8C8 != -1) {
      swift_once(&qword_10099B8C8, sub_10073B768);
    }
    unint64_t v20 = type metadata accessor for Logger(0LL);
    sub_10000A720(v20, (uint64_t)qword_100A2B390);
    sub_10001736C(v2, v0);
    unint64_t v21 = sub_10001736C(v2, v0);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v21);
    uint64_t v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v8 = swift_slowAlloc(32LL, -1LL);
      v35[0] = v8;
      *(_DWORD *)uint64_t v7 = 136446210;
      int64_t v22 = Data.hexString.getter(v2, v0);
      uint64_t v34 = sub_1003F11D4(v22, v23, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v7 + 4, v7 + 12);
      swift_bridgeObjectRelease();
      sub_100016F9C(v2, v0);
      sub_100016F9C(v2, v0);
      unint64_t v11 = "Not parsing non-Apple TLV data: %{public}s";
      goto LABEL_23;
    }

    goto LABEL_24;
  }

  if (v1)
  {
    if (v1 == 1) {
      char v25 = v2 >> 32;
    }
    else {
      char v25 = *(void *)(v2 + 24);
    }
  }

  else
  {
    char v25 = BYTE6(v0);
  }

  if (v25 < 2)
  {
LABEL_38:
    __break(1u);
    JUMPOUT(0x1000B353CLL);
  }

  unint64_t v26 = ((uint64_t (*)(uint64_t))Data._Representation.subscript.getter)(2LL);
  uint64_t v28 = v27;
  sub_100605DDC(v26, v27);
  uint64_t v30 = v29;
  sub_100016F9C(v26, v28);
  char v31 = sub_1000AF3DC(v30, 0LL);
  swift_release(v30);
  id v32 = v31[2];
  if (v32)
  {
    sub_100004AEC(&qword_10099E238);
    uint64_t v33 = (void *)static _DictionaryStorage.allocate(capacity:)(v32);
  }

  else
  {
    uint64_t v33 = &_swiftEmptyDictionarySingleton;
  }

  v35[0] = (uint64_t)v33;
  sub_1000B2D1C((uint64_t)v31, 1, v35);
  swift_bridgeObjectRelease();
  return v35[0];
}

  if (qword_10099B8C8 != -1) {
    swift_once(&qword_10099B8C8, sub_10073B768);
  }
  sub_10000A720(v11, (uint64_t)qword_100A2B390);
  swift_bridgeObjectRetain(a1);
  uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
  unint64_t v54 = static os_log_type_t.error.getter(v53);
  if (os_log_type_enabled(v53, v54))
  {
    unint64_t v55 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v56 = swift_slowAlloc(32LL, -1LL);
    *(void *)&uint64_t v136 = v56;
    *(_DWORD *)unint64_t v55 = 136446210;
    swift_bridgeObjectRetain(a1);
    uint64_t v58 = Dictionary.description.getter( v57,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    __int128 v60 = v59;
    swift_bridgeObjectRelease();
    uint64_t v134 = sub_1003F11D4(v58, v60, (uint64_t *)&v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v55 + 4, v55 + 12);
    swift_bridgeObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "Missing critical data in %{public}s", v55, 0xCu);
    swift_arrayDestroy(v56, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1LL, -1LL);
    swift_slowDealloc(v55, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a1, 2LL);
  }

  swift_release(v3);
  uint64_t v2 = v18;
  uint64_t v16 = 1LL << *(_BYTE *)(v3 + 32);
  if (v16 > 63) {
    bzero((void *)(v3 + 56), ((unint64_t)(v16 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v7 = -1LL << v16;
  }
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_28:
  uint64_t result = swift_release(v3);
  uint64_t *v2 = v5;
  return result;
}

  swift_release(v3);
  uint64_t v16 = 1LL << *(_BYTE *)(v3 + 32);
  if (v16 > 63) {
    bzero((void *)(v3 + 56), ((unint64_t)(v16 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v7 = -1LL << v16;
  }
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_28:
  uint64_t result = swift_release(v3);
  uint64_t *v2 = v5;
  return result;
}

    uint64_t v14 = (v24 - 1) & v24;
    int64_t v19 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_9:
    unint64_t v20 = *(void *)(v5 + 72);
    sub_10002218C(*(void *)(v8 + 48) + v20 * v19, (uint64_t)v7, type metadata accessor for RawSearchResult);
    Hasher.init(_seed:)(v30, *(void *)(v10 + 40));
    sub_1005B93D0((uint64_t)v30);
    unint64_t v21 = Hasher._finalize()();
    int64_t v22 = _HashTable.nextHole(atOrAfter:)( v21 & ~(-1LL << *(_BYTE *)(v10 + 32)),  v10 + 56,  ~(-1LL << *(_BYTE *)(v10 + 32)));
    *(void *)(v15 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
    uint64_t result = sub_10002218C((uint64_t)v7, *(void *)(v10 + 48) + v22 * v20, type metadata accessor for RawSearchResult);
    ++*(void *)(v10 + 16);
  }

  char v25 = v23 + 3;
  if (v25 < v29)
  {
    int64_t v24 = v28[v25];
    if (!v24)
    {
      while (1)
      {
        uint64_t v17 = v25 + 1;
        if (__OFADD__(v25, 1LL)) {
          goto LABEL_31;
        }
        if (v17 >= v29) {
          goto LABEL_25;
        }
        int64_t v24 = v28[v17];
        ++v25;
        if (v24) {
          goto LABEL_24;
        }
      }
    }

    uint64_t v17 = v25;
    goto LABEL_24;
  }

  uint64_t result = swift_release_n(v3, 2LL);
  uint64_t v2 = v16;
LABEL_26:
  uint64_t *v2 = v5;
  return result;
}

  uint64_t result = swift_release_n(v3, 2LL);
LABEL_26:
  uint64_t *v2 = v5;
  return result;
}

    uint64_t v14 = (v24 - 1) & v24;
    int64_t v19 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_9:
    unint64_t v20 = *(void *)(v5 + 72);
    sub_10001DC4C(*(void *)(v8 + 48) + v20 * v19, (uint64_t)v7, type metadata accessor for RawSearchResult);
    Hasher.init(_seed:)(v29, *(void *)(v10 + 40));
    sub_1005B93D0((uint64_t)v29);
    unint64_t v21 = Hasher._finalize()();
    int64_t v22 = _HashTable.nextHole(atOrAfter:)( v21 & ~(-1LL << *(_BYTE *)(v10 + 32)),  v10 + 56,  ~(-1LL << *(_BYTE *)(v10 + 32)));
    *(void *)(v15 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
    uint64_t result = sub_10002218C((uint64_t)v7, *(void *)(v10 + 48) + v22 * v20, type metadata accessor for RawSearchResult);
    ++*(void *)(v10 + 16);
  }

  char v25 = v23 + 3;
  if (v25 >= v28)
  {
LABEL_25:
    uint64_t result = swift_release_n(v8, 2LL);
    uint64_t v2 = v26;
    goto LABEL_27;
  }

  int64_t v24 = *(void *)(v27 + 8 * v25);
  if (v24)
  {
    uint64_t v17 = v25;
    goto LABEL_24;
  }

  while (1)
  {
    uint64_t v17 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v17 >= v28) {
      goto LABEL_25;
    }
    int64_t v24 = *(void *)(v27 + 8 * v17);
    ++v25;
    if (v24) {
      goto LABEL_24;
    }
  }

    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_1000A6F30(a1);
    return swift_release(a3);
  }

  sub_10004B4C8(v21, a4 & 1);
  unint64_t v23 = sub_10030CF14(v12, v13);
  if ((v22 & 1) == (v24 & 1))
  {
    unint64_t v18 = v23;
    char v25 = (void *)*a5;
    if ((v22 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    unint64_t v26 = (void *)(v25[7] + 16 * v18);
    swift_bridgeObjectRelease();
    *unint64_t v26 = v14;
    v26[1] = v15;
    goto LABEL_13;
  }

  __break(1u);
LABEL_25:
  __int128 v64 = v22;
  uint64_t v38 = *(void *)(a1 + 16);
  __int128 v60 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  v60(v24, 1LL, 1LL, v13);
  uint64_t v39 = v65;
  uint64_t v40 = v71;
  sub_10001581C((uint64_t)v24, v65, v71);
  __int128 v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  for (i = v63(v39, 1LL, v13); i != 1; i = v63(v39, 1LL, v13))
  {
    sub_100015794(v39, v40);
    uint64_t v43 = *(void *)(*v8 + 24);
    __int128 v44 = v43 >> 1;
    if ((uint64_t)(v43 >> 1) < v38 + 1)
    {
      uint64_t v58 = ((uint64_t (*)(BOOL))v72)(v43 > 1);
      *uint64_t v8 = v58;
      __int128 v62 = v58;
      __int128 v44 = *(void *)(v58 + 24) >> 1;
    }

    else
    {
      __int128 v62 = *v8;
    }

    char v45 = *(unsigned __int8 *)(v14 + 80);
    uint64_t v46 = v70;
    sub_10001581C((uint64_t)v24, v70, v71);
    if (v63(v46, 1LL, v13) == 1)
    {
      uint64_t v16 = v74;
      __int128 v47 = v70;
LABEL_33:
      __int128 v48 = v47;
      uint64_t v40 = v71;
      sub_100015794(v48, v71);
      uint64_t v42 = v38;
      uint64_t v39 = v65;
    }

    else
    {
      __int128 v61 = v62 + ((v45 + 32) & ~v45);
      if (v38 <= v44) {
        __int128 v49 = v44;
      }
      else {
        __int128 v49 = v38;
      }
      __int128 v62 = v49;
      uint64_t v16 = v74;
      __int128 v50 = v68;
      __int128 v47 = v70;
      while (1)
      {
        unint64_t v52 = v47;
        uint64_t v53 = (uint64_t)v69;
        sub_10002218C(v52, (uint64_t)v69, v50);
        if (v62 == v38) {
          break;
        }
        sub_100015794((uint64_t)v24, v71);
        sub_10002218C(v53, v61 + *(void *)(v14 + 72) * v38, v50);
        if (v64 == v25)
        {
          __int128 v51 = 1LL;
          __int128 v64 = v25;
          __int128 v47 = v70;
        }

        else
        {
          unint64_t v54 = v67(v75, v64, v16, v73, a3, v66);
          unint64_t v55 = v50;
          uint64_t v56 = (void (*)(_BYTE *, void))v54;
          sub_10001DC4C(v57, (uint64_t)v24, v55);
          v56(v75, 0LL);
          __int128 v47 = v70;
          if (__OFADD__(v64, 1LL)) {
            goto LABEL_48;
          }
          __int128 v64 = (void (**)(char *, uint64_t, uint64_t, uint64_t))((char *)v64 + 1);
          __int128 v51 = 0LL;
          __int128 v50 = v68;
        }

        v60(v24, v51, 1LL, v13);
        sub_10001581C((uint64_t)v24, v47, v71);
        ++v38;
      }

      sub_100018C68(v53, v50);
      uint64_t v42 = v62;
      uint64_t v38 = v62;
      uint64_t v39 = v65;
      uint64_t v40 = v71;
    }

    *(void *)(*v8 + swift_weakDestroy(v0 + 16) = v42;
    sub_10001581C((uint64_t)v24, v39, v40);
  }

  sub_100015794((uint64_t)v24, v40);
  swift_unknownObjectRelease(v16);
  return sub_100015794(v39, v40);
}

    __int128 v70 = (v32 - 1) & v32;
    __int128 v71 = v33;
    uint64_t v30 = __clz(__rbit64(v32)) + (v33 << 6);
LABEL_25:
    uint64_t v35 = *(void *)(v11 + 72);
    int64_t v36 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
    v36(v28, v20[6] + v35 * v30, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v28, 0LL, 1LL, v10);
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v27, v28, v10);
    uint64_t v37 = *(void *)(a4 + v72);
    swift_bridgeObjectRetain_n(v37, 2LL);
    uint64_t v38 = sub_10030D124(v27);
    uint64_t v40 = v39;
    swift_bridgeObjectRelease();
    if ((v40 & 1) != 0)
    {
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v37);
      uint64_t v73 = (void *)v37;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100063CA8();
        uint64_t v37 = (uint64_t)v73;
      }

      (*(void (**)(unint64_t, uint64_t))(v11 + 8))(*(void *)(v37 + 48) + v38 * v35, v10);
      uint64_t v37 = (uint64_t)v73;
      uint64_t v42 = v73[7];
      uint64_t v43 = type metadata accessor for Date(0LL);
      __int128 v44 = *(void *)(v43 - 8);
      (*(void (**)(char *, unint64_t, uint64_t))(v44 + 32))(v9, v42 + *(void *)(v44 + 72) * v38, v43);
      sub_1000597C0(v38, v37);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v9, 0LL, 1LL, v43);
      uint64_t v14 = v63;
    }

    else
    {
      char v45 = type metadata accessor for Date(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56LL))(v9, 1LL, 1LL, v45);
    }

    sub_100015794((uint64_t)v9, (uint64_t *)&unk_10099D720);
    uint64_t v46 = *(void *)(a4 + v72);
    *(void *)(a4 + v72) = v37;
    swift_bridgeObjectRetain(v37);
    __int128 v47 = sub_1001D4D1C(v46, v37);
    swift_bridgeObjectRelease();
    if ((v47 & 1) == 0) {
      sub_1004E696C(0xDu);
    }
    swift_bridgeObjectRelease();
    if (qword_10099B188 != -1) {
      swift_once(&qword_10099B188, sub_100189D08);
    }
    __int128 v48 = type metadata accessor for Logger(0LL);
    sub_10000A720(v48, (uint64_t)qword_100A2A2B0);
    __int128 v49 = v69;
    __int128 v50 = ((uint64_t (*)(char *, char *, uint64_t))v36)(v14, v69, v10);
    __int128 v51 = (os_log_s *)Logger.logObject.getter(v50);
    unint64_t v52 = static os_log_type_t.default.getter(v51);
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = swift_slowAlloc(22LL, -1LL);
      unint64_t v54 = swift_slowAlloc(32LL, -1LL);
      uint64_t v73 = (void *)v54;
      *(_DWORD *)uint64_t v53 = v62.n128_u32[0];
      *(void *)(v53 + 4) = 1752392040LL;
      *(_WORD *)(v53 + 12) = 2081;
      unint64_t v55 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter(v10, v55);
      *(void *)(v53 + 14) = sub_1003F11D4(v56, v57, (uint64_t *)&v73);
      swift_bridgeObjectRelease();
      uint64_t v58 = *(void (**)(char *, uint64_t))(v11 + 8);
      v58(v14, v10);
      _os_log_impl( (void *)&_mh_execute_header,  v51,  v52,  "Removed ACSN locating state for beacon: %{private,mask.hash}s - online fetch.",  (uint8_t *)v53,  0x16u);
      swift_arrayDestroy(v54, 1LL, v61);
      swift_slowDealloc(v54, -1LL, -1LL);
      swift_slowDealloc(v53, -1LL, -1LL);

      v58(v49, v10);
    }

    else
    {

      uint64_t v29 = *(void (**)(char *, uint64_t))(v11 + 8);
      v29(v14, v10);
      v29(v49, v10);
    }

    BOOL v27 = (uint64_t)v49;
    unint64_t v20 = v67;
    uint64_t v28 = v68;
    uint64_t v9 = v66;
    int64_t v24 = v70;
    unint64_t v26 = v71;
  }

  uint64_t v34 = v26 + 4;
  if (v26 + 4 < v65)
  {
    id v32 = *(void *)&v64[8 * v34];
    if (!v32)
    {
      while (1)
      {
        uint64_t v33 = v34 + 1;
        if (__OFADD__(v34, 1LL)) {
          goto LABEL_42;
        }
        if (v33 >= v65) {
          goto LABEL_37;
        }
        id v32 = *(void *)&v64[8 * v33];
        ++v34;
        if (v32) {
          goto LABEL_24;
        }
      }
    }

    uint64_t v33 = v26 + 4;
    goto LABEL_24;
  }

          sub_1000182F0(v65, v64);
          sub_1000182F0(v62, v63);
          sub_100015794(v61, (uint64_t *)&unk_1009AE480);
          sub_100015794(v50, (uint64_t *)&unk_1009AE480);
          v107(v49, v131);
          goto LABEL_64;
        }

        (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v84, v59);
        __int128 v61 = v128;
      }

      sub_100015794(v123, &qword_1009A58F8);
      char v31 = v119;
      __int128 v62 = v120;
      __int128 v63 = v115;
      __int128 v64 = v130;
      __int128 v65 = (uint64_t)v132;
      goto LABEL_24;
    }

    sub_1000182F0(v120, v37);
    sub_100015794((uint64_t)v132, (uint64_t *)&unk_1009AE480);
    (*(void (**)(char *, uint64_t))(v130 + 8))(v25, v131);
    char v31 = v119;
  }

  else if (swift_getEnumCaseMultiPayload(v32, v22) == 2)
  {
    goto LABEL_11;
  }

        uint64_t v15 = (v23 - 1) & v23;
        int64_t v19 = __clz(__rbit64(v23)) + (v17 << 6);
      }

      unint64_t v20 = *(void *)(*(void *)(v11 + 56) + 8 * v19);
      swift_retain();
      unint64_t v21 = objc_autoreleasePoolPush();
      sub_1001F0624(a2, v5, v20);
      objc_autoreleasePoolPop(v21);
      swift_release();
    }
  }

  return result;
}

      __int128 v44 = (v19 - 1) & v19;
      char v45 = v20;
      uint64_t v17 = __clz(__rbit64(v19)) + (v20 << 6);
    }

    int64_t v22 = v42;
    unint64_t v23 = v43;
    int64_t v24 = *(void *)(v43 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))(v42, a4[6] + v24 * v17, v16);
    char v25 = *(void *)(a4[7] + 8 * v17);
    unint64_t v26 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v26(v46, v22, v16);
    BOOL v27 = *(void *)(v12 + 40);
    uint64_t v28 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    swift_bridgeObjectRetain(v25);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v27, v16, v28);
    uint64_t v29 = -1LL << *(_BYTE *)(v12 + 32);
    uint64_t v30 = result & ~v29;
    char v31 = v30 >> 6;
    if (((-1LL << v30) & ~*(void *)(v15 + 8 * (v30 >> 6))) != 0)
    {
      id v32 = __clz(__rbit64((-1LL << v30) & ~*(void *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v33 = 0;
      uint64_t v34 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v35 = v31 == v34;
        if (v31 == v34) {
          char v31 = 0LL;
        }
        v33 |= v35;
        int64_t v36 = *(void *)(v15 + 8 * v31);
      }

      while (v36 == -1);
      id v32 = __clz(__rbit64(~v36)) + (v31 << 6);
    }

    *(void *)(v15 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v32;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)( *(void *)(v12 + 48) + v32 * v24,  v46,  v47);
    *(void *)(*(void *)(v12 + 56) + 8 * v32) = v25;
    ++*(void *)(v12 + 16);
    if (__OFSUB__(a3--, 1LL)) {
      break;
    }
    a4 = v41;
    unint64_t v13 = v44;
    uint64_t v14 = v45;
    if (!a3) {
      return v12;
    }
  }

      swift_once(&qword_10099B220, sub_1002673AC);
      goto LABEL_7;
    }
  }

  else if (*(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    goto LABEL_3;
  }

  swift_bridgeObjectRelease();
  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v42 = *(void *)(v0 + 272);
  uint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 280);
  __int128 v44 = *(void *)(v0 + 264);
  char v45 = *(void *)(v0 + 240);
  uint64_t v46 = type metadata accessor for Logger(0LL);
  sub_10000A720(v46, (uint64_t)qword_100A2A470);
  __int128 v47 = v43(v44, v42, v45);
  __int128 v48 = (os_log_s *)Logger.logObject.getter(v47);
  __int128 v49 = static os_log_type_t.error.getter(v48);
  __int128 v50 = os_log_type_enabled(v48, v49);
  __int128 v51 = *(void *)(v0 + 264);
  unint64_t v52 = *(void *)(v0 + 240);
  uint64_t v53 = *(void *)(v0 + 248);
  if (v50)
  {
    unint64_t v54 = swift_slowAlloc(22LL, -1LL);
    unint64_t v55 = swift_slowAlloc(32LL, -1LL);
    uint64_t v87 = v55;
    *(_DWORD *)unint64_t v54 = 141558275;
    *(void *)(v0 + 96) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v54 + 4, v54 + 12);
    *(_WORD *)(v54 + 12) = 2081;
    uint64_t v56 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    __int128 v57 = dispatch thunk of CustomStringConvertible.description.getter(v52, v56);
    *(void *)(v0 + 104) = sub_1003F11D4(v57, v58, &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v54 + 14, v54 + 22);
    swift_bridgeObjectRelease();
    uint64_t v59 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
    v59(v51, v52);
    _os_log_impl( (void *)&_mh_execute_header,  v48,  v49,  "No peripheral for beacon %{private,mask.hash}s",  (uint8_t *)v54,  0x16u);
    swift_arrayDestroy(v55, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1LL, -1LL);
    swift_slowDealloc(v54, -1LL, -1LL);
  }

  else
  {
    uint64_t v59 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
    v59(*(void *)(v0 + 264), *(void *)(v0 + 240));
  }

  __int128 v60 = *(void *)(v0 + 272);
  __int128 v61 = *(void *)(v0 + 240);
  __int128 v62 = *(void *)(v0 + 144);
  __int128 v63 = *(void (**)(uint64_t))(v0 + 128);
  __int128 v64 = type metadata accessor for OwnerCommandManager.Error(0LL);
  swift_storeEnumTagMultiPayload(v62, v64, 16LL);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56LL))(v62, 0LL, 1LL, v64);
  v63(v62);
  sub_100015794(v62, &qword_1009A78B8);
  v59(v60, v61);
LABEL_21:
  __int128 v65 = *(void *)(v0 + 264);
  __int128 v66 = *(void *)(v0 + 256);
  __int128 v68 = *(void *)(v0 + 224);
  __int128 v67 = *(void *)(v0 + 232);
  __int128 v69 = *(void *)(v0 + 192);
  __int128 v70 = *(void *)(v0 + 168);
  __int128 v71 = *(void *)(v0 + 144);
  swift_task_dealloc(*(void *)(v0 + 272));
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

      __break(1u);
      JUMPOUT(0x1002C2B24LL);
    }

    __break(1u);
    goto LABEL_24;
  }

  sub_10050B884((uint64_t)v14 + *(int *)(v4 + 20), (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10) == 1)
  {
    sub_100015794((uint64_t)v9, &qword_1009AA870);
LABEL_18:
    char v31 = _swiftEmptyArrayStorage;
    goto LABEL_21;
  }

  sub_10002218C((uint64_t)v9, (uint64_t)v13, type metadata accessor for BeaconProductInfoRecord);
  int64_t v19 = sub_1006DA7F4(*(_DWORD *)&v13[*(int *)(v10 + 68)]);
  unint64_t v20 = sub_1006F15FC((uint64_t)v19);
  swift_bridgeObjectRelease();
  int64_t v36 = v20;
  sub_100013044((uint64_t)v37, (uint64_t)v35);
  swift_bridgeObjectRetain(v20);
  unint64_t v21 = sub_100004AEC(&qword_1009B0530);
  if ((swift_dynamicCast(v6, v35, v21, v4, 6LL) & 1) != 0)
  {
    sub_100018C68((uint64_t)v6, type metadata accessor for OwnedBeaconRecord);
    int64_t v22 = SPBeaconTaskNameBeginLeashing;
    unint64_t v23 = sub_1004E56A4((uint64_t)v22, v20);

    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      sub_1000BFD7C(v35, v22);
    }

    int64_t v24 = v36;
    char v25 = (void *)SPBeaconTaskNameEndLeashing;
    swift_bridgeObjectRetain(v36);
    unint64_t v26 = v25;
    BOOL v27 = sub_1004E56A4((uint64_t)v26, v24);

    swift_bridgeObjectRelease();
    if ((v27 & 1) == 0)
    {
      sub_1000BFD7C(v35, v26);

      int64_t v24 = v36;
    }

    uint64_t v28 = (void *)SPBeaconTaskNameUnpair;
    swift_bridgeObjectRetain(v24);
    uint64_t v29 = v28;
    uint64_t v30 = sub_1004E56A4((uint64_t)v29, v24);

    swift_bridgeObjectRelease();
    if ((v30 & 1) == 0)
    {
      sub_1000BFD7C(v35, v29);
    }
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  char v31 = sub_1002FE918(v36);
  swift_bridgeObjectRelease();
  sub_100018C68((uint64_t)v13, type metadata accessor for BeaconProductInfoRecord);
LABEL_21:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v37);
  return v31;
}

      __break(1u);
      JUMPOUT(0x1002C3280LL);
    }

    __break(1u);
    goto LABEL_24;
  }

  uint64_t v15 = (uint64_t)v5;
  sub_10050B884((uint64_t)v14 + *(int *)(v13 + 20), (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) == 1)
  {
    sub_100015794((uint64_t)v8, &qword_1009AA870);
LABEL_18:
    uint64_t v33 = _swiftEmptyArrayStorage;
    goto LABEL_21;
  }

  unint64_t v20 = (uint64_t)v12;
  sub_10002218C((uint64_t)v8, (uint64_t)v12, type metadata accessor for BeaconProductInfoRecord);
  unint64_t v21 = sub_1006DA7F4(*(_DWORD *)&v12[*(int *)(v9 + 68)]);
  int64_t v22 = sub_1006F15FC((uint64_t)v21);
  swift_bridgeObjectRelease();
  uint64_t v38 = v22;
  sub_100013044((uint64_t)v39, (uint64_t)v37);
  swift_bridgeObjectRetain(v22);
  unint64_t v23 = sub_100004AEC(&qword_1009B0530);
  if ((swift_dynamicCast(v15, v37, v23, v3, 6LL) & 1) != 0)
  {
    sub_100018C68(v15, type metadata accessor for OwnedBeaconRecord);
    int64_t v24 = SPBeaconTaskNameBeginLeashing;
    char v25 = sub_1004E56A4((uint64_t)v24, v22);

    swift_bridgeObjectRelease();
    if ((v25 & 1) == 0)
    {
      sub_1000BFD7C(v37, v24);
    }

    unint64_t v26 = v38;
    BOOL v27 = (void *)SPBeaconTaskNameEndLeashing;
    swift_bridgeObjectRetain(v38);
    uint64_t v28 = v27;
    uint64_t v29 = sub_1004E56A4((uint64_t)v28, v26);

    swift_bridgeObjectRelease();
    if ((v29 & 1) == 0)
    {
      sub_1000BFD7C(v37, v28);

      unint64_t v26 = v38;
    }

    uint64_t v30 = (void *)SPBeaconTaskNameUnpair;
    swift_bridgeObjectRetain(v26);
    char v31 = v30;
    id v32 = sub_1004E56A4((uint64_t)v31, v26);

    swift_bridgeObjectRelease();
    if ((v32 & 1) == 0)
    {
      sub_1000BFD7C(v37, v31);
    }
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v33 = sub_1002FE918(v38);
  swift_bridgeObjectRelease();
  sub_100018C68(v20, type metadata accessor for BeaconProductInfoRecord);
LABEL_21:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v39);
  return v33;
}

      __break(1u);
      JUMPOUT(0x1002C3A28LL);
    }

    __break(1u);
    goto LABEL_24;
  }

  uint64_t v41 = v8;
  char v45 = v18;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(a4 + 8) + 8LL) + 32LL))(a3);
  sub_10050B884((uint64_t)v11, (uint64_t)v14);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v11, v44);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15) == 1)
  {
    sub_100015794((uint64_t)v14, &qword_1009AA870);
LABEL_18:
    uint64_t v38 = _swiftEmptyArrayStorage;
    goto LABEL_21;
  }

  int64_t v24 = (uint64_t)v45;
  sub_10002218C((uint64_t)v14, (uint64_t)v45, type metadata accessor for BeaconProductInfoRecord);
  char v25 = sub_1006DA7F4(*(_DWORD *)(v24 + *(int *)(v15 + 68)));
  unint64_t v26 = sub_1006F15FC((uint64_t)v25);
  swift_bridgeObjectRelease();
  __int128 v47 = v26;
  sub_100013044((uint64_t)v48, (uint64_t)v46);
  swift_bridgeObjectRetain(v26);
  BOOL v27 = sub_100004AEC(&qword_1009B0530);
  uint64_t v28 = (uint64_t)v41;
  if ((swift_dynamicCast(v41, v46, v27, v42, 6LL) & 1) != 0)
  {
    sub_100018C68(v28, type metadata accessor for OwnedBeaconRecord);
    uint64_t v29 = SPBeaconTaskNameBeginLeashing;
    uint64_t v30 = sub_1004E56A4((uint64_t)v29, v26);

    swift_bridgeObjectRelease();
    if ((v30 & 1) == 0)
    {
      sub_1000BFD7C(v46, v29);
    }

    char v31 = v47;
    id v32 = (void *)SPBeaconTaskNameEndLeashing;
    swift_bridgeObjectRetain(v47);
    uint64_t v33 = v32;
    uint64_t v34 = sub_1004E56A4((uint64_t)v33, v31);

    swift_bridgeObjectRelease();
    if ((v34 & 1) == 0)
    {
      sub_1000BFD7C(v46, v33);

      char v31 = v47;
    }

    uint64_t v35 = (void *)SPBeaconTaskNameUnpair;
    swift_bridgeObjectRetain(v31);
    int64_t v36 = v35;
    uint64_t v37 = sub_1004E56A4((uint64_t)v36, v31);

    swift_bridgeObjectRelease();
    if ((v37 & 1) == 0)
    {
      sub_1000BFD7C(v46, v36);
    }
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v38 = sub_1002FE918(v47);
  swift_bridgeObjectRelease();
  sub_100018C68(v24, type metadata accessor for BeaconProductInfoRecord);
LABEL_21:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v48);
  return v38;
}

    uint64_t v40 = (v21 - 1) & v21;
    uint64_t v41 = v22;
  }

  unint64_t v23 = v20 + 4;
  if (v23 >= v39) {
    return 1LL;
  }
  unint64_t v21 = *(void *)(v38 + 8 * v23);
  if (v21)
  {
    int64_t v22 = v23;
    goto LABEL_24;
  }

  while (1)
  {
    int64_t v22 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v22 >= v39) {
      return 1LL;
    }
    unint64_t v21 = *(void *)(v38 + 8 * v22);
    ++v23;
    if (v21) {
      goto LABEL_24;
    }
  }

        __int128 v63 = [objc_allocWithZone(CLLocation) initWithLatitude:v44 longitude:v45];
        uint64_t v133 = [objc_allocWithZone(CLLocation) initWithLatitude:*(double *)(v138 + 24) longitude:*(double *)(v138 + 16)];
        objc_msgSend(v63, "distanceFromLocation:");
        __int128 v65 = v64;
        __int128 v66 = v143;
        swift_bridgeObjectRetain_n(v143, 2LL);
        swift_bridgeObjectRetain_n(v43, 2LL);
        __int128 v67 = v142;
        swift_bridgeObjectRetain_n(v142, 2LL);
        __int128 v68 = swift_bridgeObjectRetain_n(v47, 2LL);
        __int128 v69 = (os_log_s *)Logger.logObject.getter(v68);
        __int128 v70 = v43;
        __int128 v71 = static os_log_type_t.info.getter(v69);
        if (os_log_type_enabled(v69, v71))
        {
          uint64_t v72 = swift_slowAlloc(32LL, -1LL);
          uint64_t v131 = v63;
          uint64_t v73 = v72;
          id v130 = (id)swift_slowAlloc(64LL, -1LL);
          id v145 = (uint64_t)v130;
          *(_DWORD *)uint64_t v73 = v127.n128_u32[0];
          swift_bridgeObjectRetain(v70);
          *(void *)(v73 + 4) = sub_1003F11D4(v135, v70, &v145);
          swift_bridgeObjectRelease();
          *(_WORD *)(v73 + 12) = 2080;
          if (v47) {
            uint64_t v74 = v141;
          }
          else {
            uint64_t v74 = 0x206C696E20LL;
          }
          if (v47) {
            uint64_t v75 = v47;
          }
          else {
            uint64_t v75 = 0xE500000000000000LL;
          }
          swift_bridgeObjectRetain(v47);
          *(void *)(v73 + 14) = sub_1003F11D4(v74, v75, &v145);
          swift_bridgeObjectRelease_n(v47, 2LL);
          swift_bridgeObjectRelease_n(v67, 2LL);
          swift_bridgeObjectRelease_n(v70, 2LL);
          swift_bridgeObjectRelease_n(v66, 2LL);
          uint64_t v34 = (uint64_t)v132;
          swift_bridgeObjectRelease();
          *(_WORD *)(v73 + 22) = 2048;
          *(double *)(v73 + 24) = v65;
          _os_log_impl( (void *)&_mh_execute_header,  v69,  v71,  "LabelledLocations %s %s Label Distance %f",  (uint8_t *)v73,  0x20u);
          unsigned int v76 = v130;
          swift_arrayDestroy(v130, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v76, -1LL, -1LL);
          uint64_t v77 = v73;
          __int128 v63 = v131;
          swift_slowDealloc(v77, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v47, 2LL);
          swift_bridgeObjectRelease_n(v67, 2LL);
          swift_bridgeObjectRelease_n(v70, 2LL);
          swift_bridgeObjectRelease_n(v66, 2LL);
        }

        if (v65 > v29)
        {

          swift_bridgeObjectRelease();
          uint64_t v35 = v138;
          goto LABEL_9;
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        int64_t v24 = v118;
        swift_beginAccess(v118, &v148, 1LL, 0LL);
        uint64_t v79 = v116;
        unint64_t v80 = &v24[*(int *)(v116 + 64)];
        *(void *)unint64_t v80 = v135;
        *((void *)v80 + 1) = v70;
        swift_bridgeObjectRelease();
        uint64_t v81 = v115;
        id v82 = sub_10001DC4C(v138, (uint64_t)v115, type metadata accessor for SecureLocation);
        uint64_t v83 = (os_log_s *)Logger.logObject.getter(v82);
        uint64_t v84 = static os_log_type_t.default.getter(v83);
        if (os_log_type_enabled(v83, v84))
        {
          uint64_t v85 = swift_slowAlloc(22LL, -1LL);
          uint64_t v143 = swift_slowAlloc(64LL, -1LL);
          uint64_t v147 = v143;
          *(_DWORD *)uint64_t v85 = v106.n128_u32[0];
          uint64_t v86 = (uint64_t *)&v24[*(int *)(v79 + 64)];
          uint64_t v87 = v86[1];
          id v145 = *v86;
          uint64_t v146 = v87;
          swift_bridgeObjectRetain(v87);
          uint64_t v88 = sub_100004AEC(&qword_1009A34B0);
          uint64_t v89 = String.init<A>(describing:)(&v145, v88);
          id v145 = sub_1003F11D4(v89, v90, &v147);
          id v91 = v107;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v107, v85 + 4, v85 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v85 + 12) = 2080;
          id v92 = *v81;
          uint64_t v93 = v81[1];
          swift_bridgeObjectRetain(v93);
          id v145 = sub_1003F11D4(v92, v93, &v147);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v91, v85 + 14, v85 + 22);
          int64_t v24 = v118;
          swift_bridgeObjectRelease();
          sub_100018C68((uint64_t)v81, type metadata accessor for SecureLocation);
          _os_log_impl( (void *)&_mh_execute_header,  v83,  v84,  "LabelledLocations Adding label %s to location %s",  (uint8_t *)v85,  0x16u);
          unint64_t v94 = v143;
          swift_arrayDestroy(v143, 2LL, (char *)&type metadata for Any + 8);
          uint64_t v34 = (uint64_t)v132;
          swift_slowDealloc(v94, -1LL, -1LL);
          swift_slowDealloc(v85, -1LL, -1LL);
        }

        else
        {
          sub_100018C68((uint64_t)v81, type metadata accessor for SecureLocation);
        }

        unint64_t v21 = v117;
        uint64_t v33 = v124;
LABEL_48:
        swift_beginAccess(v24, v149, 0LL, 0LL);
        sub_10001DC4C((uint64_t)v24, (uint64_t)v21, type metadata accessor for SecureLocation);
        if ((swift_isUniquelyReferenced_nonNull_native(v33) & 1) == 0) {
          uint64_t v33 = (void *)sub_1004C6004(0, v33[2] + 1LL, 1, (unint64_t)v33);
        }
        uint64_t v96 = v33[2];
        uint64_t v95 = v33[3];
        uint64_t v97 = v33;
        uint64_t v30 = v121;
        if (v96 >= v95 >> 1)
        {
          id v99 = sub_1004C6004(v95 > 1, v96 + 1, 1, (unint64_t)v33);
          uint64_t v30 = v121;
          uint64_t v97 = (void *)v99;
        }

        NSString v98 = v126 + 1;
        v97[2] = v96 + 1;
        uint64_t v33 = v97;
        sub_10002218C((uint64_t)v21, (uint64_t)v97 + v120 + v96 * v30, type metadata accessor for SecureLocation);
        uint64_t v35 = v138;
        sub_100018C68(v138, type metadata accessor for SecureLocation);
        sub_100018C68((uint64_t)v24, type metadata accessor for SecureLocation);
        id v32 = v98;
        if (v98 == v122)
        {
          swift_bridgeObjectRelease();
          goto LABEL_60;
        }
      }
    }

    uint64_t v33 = _swiftEmptyArrayStorage;
LABEL_60:
    sub_100330E44((uint64_t)v33, v108, v109, v111, v112, v113, v110);
    return swift_bridgeObjectRelease();
  }

  else
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    NSString v100 = type metadata accessor for Logger(0LL);
    id v101 = sub_10000A720(v100, (uint64_t)qword_100A2AE08);
    id v102 = (os_log_s *)Logger.logObject.getter(v101);
    int v103 = static os_log_type_t.info.getter(v102);
    if (os_log_type_enabled(v102, v103))
    {
      id v104 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v104 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v102,  v103,  "LabelledLocations - No labels - nothing to resolve",  v104,  2u);
      swift_slowDealloc(v104, -1LL, -1LL);
    }

    return sub_100330E44(v114, v108, v109, v111, v112, v113, v110);
  }

    __break(1u);
    goto LABEL_25;
  }

  sub_10004D014(v26, v58 & 1);
  BOOL v27 = sub_10030D124((uint64_t)v10);
  if ((v8 & 1) == (v28 & 1))
  {
    unint64_t v23 = v27;
    if ((v8 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v30 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0LL, 0LL);
    swift_willThrow(v30);
    __int128 v65 = v30;
    swift_errorRetain(v30);
    char v31 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    id v32 = swift_dynamicCast(v31, &v65, v31, &type metadata for _MergeError, 0LL);
    uint64_t v8 = v61;
    if ((v32 & 1) == 0)
    {

      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v10, v8);
      swift_bridgeObjectRelease();
      return swift_errorRelease(v65);
    }

    goto LABEL_27;
  }

      if (v135 < v129)
      {
        if (v35 < v20) {
          goto LABEL_139;
        }
        if (v20 < v35)
        {
          uint64_t v122 = v19;
          uint64_t v119 = v2;
          int64_t v36 = 0LL;
          uint64_t v37 = v138;
          uint64_t v38 = v138 * (v35 - 1);
          uint64_t v39 = v35 * v138;
          uint64_t v40 = v20 * v138;
          do
          {
            if (v20 != v35 + v36 - 1)
            {
              uint64_t v41 = v123;
              if (!v123) {
                goto LABEL_144;
              }
              uint64_t v42 = v123 + v40;
              uint64_t v43 = v123 + v38;
              sub_10002218C(v123 + v40, v125, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
              if (v40 < v38 || v42 >= v41 + v39)
              {
                swift_arrayInitWithTakeFrontToBack(v41 + v40, v41 + v38, 1LL, v136);
                uint64_t v37 = v138;
              }

              else
              {
                uint64_t v37 = v138;
                if (v40 != v38) {
                  swift_arrayInitWithTakeBackToFront(v42, v43);
                }
              }

              sub_10002218C(v125, v43, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
              uint64_t v12 = v139;
            }

            ++v20;
            --v36;
            v38 -= v37;
            v39 -= v37;
            v40 += v37;
          }

          while (v20 < v35 + v36);
          uint64_t v2 = v119;
          a1 = v133;
          int64_t v19 = v122;
          unint64_t v4 = v128;
          unint64_t v20 = v126;
        }
      }
    }

    if (v35 < v12)
    {
      if (__OFSUB__(v35, v20)) {
        goto LABEL_137;
      }
      if (v35 - v20 < v121) {
        break;
      }
    }

        uint64_t v6 = (v13 - 1) & v13;
        unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
        uint64_t v43 = v14;
      }

      uint64_t v16 = (unsigned __int8 *)(*(void *)(v8 + 48) + 24 * v11);
      uint64_t v17 = *v16;
      int64_t v19 = *((void *)v16 + 1);
      unint64_t v18 = *((void *)v16 + 2);
      Hasher.init(_seed:)(v44, v2[5]);
      Hasher._combine(_:)(v17);
      swift_bridgeObjectRetain_n(v18, 2LL);
      String.hash(into:)(v44, v19, v18);
      swift_bridgeObjectRelease();
      unint64_t v20 = Hasher._finalize()();
      unint64_t v21 = (uint64_t)v2;
      int64_t v22 = -1LL << *((_BYTE *)v2 + 32);
      unint64_t v23 = v20 & ~v22;
      if (((*(void *)&v7[(v23 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v23) & 1) != 0) {
        break;
      }
LABEL_6:
      swift_bridgeObjectRelease();
      uint64_t v8 = v42;
      uint64_t v9 = v43;
      uint64_t v2 = (unint64_t *)v21;
    }

    int64_t v24 = ~v22;
    char v25 = v2[6];
    while (1)
    {
      unint64_t v26 = (unsigned __int8 *)(v25 + 24 * v23);
      if (*v26 == (_DWORD)v17)
      {
        BOOL v27 = *((void *)v26 + 1);
        uint64_t v28 = *((void *)v26 + 2);
        uint64_t v29 = v27 == v19 && v28 == v18;
        if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, v19, v18, 0LL) & 1) != 0) {
          break;
        }
      }

      unint64_t v23 = (v23 + 1) & v24;
      if (((*(void *)&v7[(v23 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v23) & 1) == 0) {
        goto LABEL_6;
      }
    }

    v45[0] = v42;
    v45[1] = v41;
    v45[2] = v39;
    v45[3] = v43;
    v45[4] = v6;
    isStackAllocationSafe = swift_bridgeObjectRelease();
    char v31 = *(_BYTE *)(v21 + 32);
    id v32 = v31 & 0x3F;
    uint64_t v33 = (1LL << v31) + 63;
    uint64_t v34 = v33 >> 6;
    uint64_t v35 = 8 * (v33 >> 6);
    if (v32 <= 0xD
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v33 >> 6), 8LL), (_DWORD)isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0LL), v7, v35);
      int64_t v36 = sub_1003D2038((unint64_t *)((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v34, v21, v23, v45);
      swift_release();
      sub_1000A6F30(v45[0]);
      return v36;
    }

    else
    {
      uint64_t v37 = (void *)swift_slowAlloc(v35, -1LL);
      memcpy(v37, v7, v35);
      uint64_t v2 = sub_1003D2038((unint64_t *)v37, v34, v21, v23, v45);
      swift_release();
      sub_1000A6F30(v45[0]);
      swift_slowDealloc(v37, -1LL, -1LL);
    }
  }

  else
  {
    swift_release();
    return (unint64_t *)&_swiftEmptySetSingleton;
  }

  return v2;
}

  uint64_t v14 = __CFADD__(a2, 1LL);
  uint64_t v17 = a2 + 1;
  if (v14)
  {
    __break(1u);
  }

  else
  {
    if (v17 <= a3) {
      uint64_t v6 = a3;
    }
    else {
      uint64_t v6 = v17;
    }
    if (v6 <= a4)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) != 0) {
        goto LABEL_30;
      }
      goto LABEL_43;
    }
  }

  __break(1u);
LABEL_43:
  unint64_t v4 = sub_1004C50C8(0LL, v4[2] + 1LL, 1, v4);
LABEL_30:
  int64_t v19 = v4[2];
  unint64_t v18 = v4[3];
  if (v19 >= v18 >> 1) {
    unint64_t v4 = sub_1004C50C8((void *)(v18 > 1), v19 + 1, 1, v4);
  }
  v4[2] = v19 + 1;
  unint64_t v20 = &v4[2 * v19];
  v20[4] = v6;
  v20[5] = a4;
  uint64_t result = swift_bridgeObjectRelease();
  if (v17 >= a3) {
    return 0LL;
  }
  if (a3 - 1 >= v17)
  {
    if (v17 <= 1) {
      return 0LL;
    }
    return v17;
  }

  __break(1u);
  return result;
}

  uint64_t v33 = v49[46];
  id v32 = v49[47];
  uint64_t v34 = (_OWORD *)v49[36];
  uint64_t v35 = swift_release();
  int64_t v36 = static os_log_type_t.debug.getter(v35);
  uint64_t v37 = qword_100A2B0A8;
  uint64_t v38 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v39 = swift_allocObject(v38, 72LL, 7LL);
  *(_OWORD *)(v39 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *((_OWORD *)v49 + 11) = *v34;
  uint64_t v40 = v34[4];
  uint64_t v42 = v34[1];
  uint64_t v41 = v34[2];
  *((_OWORD *)v49 + 14) = v34[3];
  *((_OWORD *)v49 + 15) = v40;
  *((_OWORD *)v49 + 12) = v42;
  *((_OWORD *)v49 + 13) = v41;
  uint64_t v43 = String.init<A>(describing:)(v49 + 22, &type metadata for AirPodsUnpairData);
  char v45 = v44;
  *(void *)(v39 + 56) = &type metadata for String;
  *(void *)(v39 + 64) = sub_1000226F4();
  *(void *)(v39 + 32) = v43;
  *(void *)(v39 + 40) = v45;
  os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v37, "Unpair body %@", 14LL, 2LL, v39);
  swift_release();
  swift_bridgeObjectRelease();
  sub_100016F9C(v33, v32);
  swift_release();
  __int128 v47 = v49[46];
  uint64_t v46 = v49[47];
  __int128 v48 = v49[40];
  swift_task_dealloc(v49[43]);
  swift_task_dealloc(v48);
  return ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v49[1])(v52, v47, v46);
}

  char v31 = v48[46];
  uint64_t v30 = v48[47];
  id v32 = (_OWORD *)v48[36];
  uint64_t v33 = swift_release();
  uint64_t v34 = static os_log_type_t.debug.getter(v33);
  uint64_t v35 = qword_100A2B0A8;
  int64_t v36 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v37 = swift_allocObject(v36, 72LL, 7LL);
  *(_OWORD *)(v37 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *((_OWORD *)v48 + 11) = *v32;
  uint64_t v38 = v32[4];
  uint64_t v40 = v32[1];
  uint64_t v39 = v32[2];
  *((_OWORD *)v48 + 14) = v32[3];
  *((_OWORD *)v48 + 15) = v38;
  *((_OWORD *)v48 + 12) = v40;
  *((_OWORD *)v48 + 13) = v39;
  uint64_t v41 = String.init<A>(describing:)(v48 + 22, &type metadata for AirPodsUnpairData);
  uint64_t v43 = v42;
  *(void *)(v37 + 56) = &type metadata for String;
  *(void *)(v37 + 64) = sub_1000226F4();
  *(void *)(v37 + 32) = v41;
  *(void *)(v37 + 40) = v43;
  os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v35, "Unpair body %@", 14LL, 2LL, v37);
  swift_release();
  swift_bridgeObjectRelease();
  sub_100016F9C(v31, v30);
  swift_release();
  char v45 = v48[46];
  __int128 v44 = v48[47];
  uint64_t v46 = v48[40];
  swift_task_dealloc(v48[43]);
  swift_task_dealloc(v46);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v48[1])(v51, v45, v44);
}

    sub_100015794((uint64_t)&v630[v629[57]], &qword_10099D8A0);
    if ((v23 & 0x40000000000000LL) == 0)
    {
LABEL_14:
      if ((v23 & 0x100000000000000LL) == 0) {
        goto LABEL_15;
      }
      goto LABEL_26;
    }

          uint64_t v34 = (uint64_t)v41;
          MACAddress.init(data:type:)(v28, v38, 1LL);
          v20(v13, v17, v9);
          if (v18((char *)v34, 1LL, v9) == 1)
          {
            int64_t v36 = v42;
            uint64_t v37 = v13;
            goto LABEL_26;
          }

          (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
          goto LABEL_28;
        }
      }

      else
      {
        char v45 = 0u;
        uint64_t v46 = 0u;
      }

      sub_100015794((uint64_t)&v45, &qword_10099E200);
      goto LABEL_24;
    }
  }

  else
  {
    sub_100015794((uint64_t)&v45, &qword_10099E200);
  }

  id v32 = v42;
  uint64_t v33 = v17;
  return ((uint64_t (*)(char *, char *, uint64_t))v20)(v32, v33, v9);
}

    swift_once(&qword_10099B798, sub_100651870);
    goto LABEL_10;
  }

  sub_1004D5994((uint64_t)&v68, (uint64_t)v76);
  unint64_t v13 = sub_1004D5994((uint64_t)v76, (uint64_t)v77);
  uint64_t v14 = (v79 >> 59) & 6 | ((v78 & 0x2000000000000000LL) != 0);
  if (v14 == 3)
  {
    v78 &= ~0x2000000000000000uLL;
    v79 &= 0xCFFFFFFFFFFFFFFFLL;
    uint64_t v30 = static os_log_type_t.default.getter(v13);
    if (qword_10099B798 != -1) {
      swift_once(&qword_10099B798, sub_100651870);
    }
    os_log(_:dso:log:_:_:)( v30,  &_mh_execute_header,  qword_100A2B0A8,  "Received pairing status.",  24LL,  2LL,  _swiftEmptyArrayStorage);
    char v31 = *(void *)(v3 + 72);
    *(_BYTE *)(v31 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) = 5;
    sub_10064F2B0();
    id v32 = sub_100004AEC(&qword_1009A12A0);
    uint64_t v17 = swift_dynamicCast(&v68, v75, v32, &type metadata for SendPairingStatusCommandPayload, 6LL);
    if ((_DWORD)v17)
    {
      uint64_t v33 = v68;
      uint64_t v34 = v70;
      __int128 v67 = v69;
      uint64_t v35 = *((void *)&v70 + 1);
      int64_t v36 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
      uint64_t v37 = *(void *)(v31 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
      swift_retain();
      sub_10001736C(v34, v35);
      sub_10017897C(v34, v35);
      __int128 v44 = *(void *)(v37 + 72);
      char v45 = *(void *)(v37 + 80);
      *(_OWORD *)(v37 + 72) = v68;
      sub_1000182F0(v44, v45);
      swift_release();
      uint64_t v46 = *(void *)(v31 + v36);
      *((void *)&v69 + 1) = &type metadata for CollaborativeKeyGen.v1.C3;
      *(void *)&__int128 v70 = sub_1004D6084();
      swift_retain();
      sub_10001736C(v33, *((unint64_t *)&v33 + 1));
      sub_100178A88(v33, *((uint64_t *)&v33 + 1));
      __int128 v65 = v34;
      __int128 v66 = v35;
      sub_100015750((uint64_t)&v68, (uint64_t)v75, &qword_10099F5B8);
      __int128 v47 = v46 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC3;
      swift_beginAccess(v46 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC3, v74, 33LL, 0LL);
      sub_1000D4D50((uint64_t)v75, v47, &qword_10099F5B8);
      swift_endAccess(v74);
      swift_release();
      __int128 v48 = (uint64_t *)(*(void *)(v31 + v36) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status);
      __int128 v49 = *v48;
      __int128 v50 = v48[1];
      __int128 v51 = v67;
      *(_OWORD *)__int128 v48 = v67;
      sub_10001736C(v51, *((unint64_t *)&v51 + 1));
      sub_1000182F0(v49, v50);
      unint64_t v52 = static Data.random(bytes:)(0LL);
      unint64_t v54 = v53;
      sub_1001C56F4();
      BinaryDecodable.init(data:)(v55, v52, v54);
      sub_100016F9C(v33, *((unint64_t *)&v33 + 1));
      sub_100016F9C(v51, *((unint64_t *)&v51 + 1));
      sub_100016F9C(v65, v66);
      sub_1004D59D0((uint64_t)v76, (void (*)(void))sub_100016F9C);
      uint64_t result = 0.0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(void *)(a2 + 64) = 0LL;
      *(void *)(a2 + 72) = 0x2000000000000000LL;
      *(_BYTE *)(a2 + 80) = 0;
      return result;
    }

    goto LABEL_17;
  }

  if (v14 != 1)
  {
    sub_1004D59D0((uint64_t)v76, (void (*)(void))sub_100016F9C);
    goto LABEL_16;
  }

  v78 &= ~0x2000000000000000uLL;
  v79 &= 0xCFFFFFFFFFFFFFFFLL;
  uint64_t v15 = static os_log_type_t.default.getter(v13);
  if (qword_10099B798 != -1) {
    swift_once(&qword_10099B798, sub_100651870);
  }
  os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  qword_100A2B0A8,  "Received pairing data.",  22LL,  2LL,  _swiftEmptyArrayStorage);
  sub_10064F2B0();
  uint64_t v16 = sub_100004AEC(&qword_1009A12A0);
  uint64_t v17 = swift_dynamicCast(v75, &v68, v16, &type metadata for SendPairingDataCommandPayload, 6LL);
  if (!(_DWORD)v17)
  {
LABEL_17:
    uint64_t v39 = static os_log_type_t.error.getter(v17);
    os_log(_:dso:log:_:_:)( v39,  &_mh_execute_header,  qword_100A2B0A8,  "Invalid sendPairingData payload.",  32LL,  2LL,  _swiftEmptyArrayStorage);
    sub_1004D59D0((uint64_t)v76, (void (*)(void))sub_100016F9C);
    uint64_t v38 = 9LL;
    goto LABEL_18;
  }

  unint64_t v18 = v75[1];
  *((void *)&v67 + 1) = v75[0];
  unint64_t v20 = v75[2];
  int64_t v19 = v75[3];
  unint64_t v21 = *(void *)(v3 + 72);
  *(_BYTE *)(v21 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) = 3;
  int64_t v22 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
  unint64_t v23 = *(void *)(v21 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
  swift_retain();
  sub_10001736C(v20, v19);
  __int128 v66 = v20;
  *(void *)&__int128 v67 = v19;
  sub_100178754(v20, v19);
  uint64_t v40 = *(void *)(v23 + 56);
  uint64_t v41 = *(void *)(v23 + 64);
  *(_OWORD *)(v23 + 56) = v68;
  sub_1000182F0(v40, v41);
  swift_release();
  uint64_t v42 = *(void *)(v21 + v22);
  swift_retain();
  uint64_t v43 = *((void *)&v67 + 1);
  sub_10001736C(*((uint64_t *)&v67 + 1), v18);
  sub_1001782BC(v43, v18);
  __int128 v57 = v66;
  uint64_t v56 = v67;
  uint64_t v58 = *(void *)(v42 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1);
  uint64_t v59 = *(void *)(v42 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1 + 8);
  *(_OWORD *)(v42 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1) = v68;
  sub_1000182F0(v58, v59);
  swift_release();
  sub_1004D2DF4((unint64_t *)&v68);
  if ((v73 & 1) != 0)
  {
    __int128 v60 = sub_100254338((uint64_t)&v68, a2);
    __int128 v61 = static os_log_type_t.error.getter(v60);
    os_log(_:dso:log:_:_:)( v61,  &_mh_execute_header,  qword_100A2B0A8,  "Unable to generate finalizeCommand payload.",  43LL,  2LL,  _swiftEmptyArrayStorage);
    sub_100016F9C(v43, v18);
    sub_100016F9C(v57, v56);
    sub_1004D59D0((uint64_t)v76, (void (*)(void))sub_100016F9C);
    goto LABEL_19;
  }

  sub_100016F9C(v43, v18);
  sub_100016F9C(v57, v56);
  sub_1004D59D0((uint64_t)v76, (void (*)(void))sub_100016F9C);
  __int128 v62 = v69;
  *(_OWORD *)a2 = v68;
  *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v62;
  __int128 v63 = v71;
  *(_OWORD *)(a2 + 32) = v70;
  *(_OWORD *)(a2 + 48) = v63;
  uint64_t result = *(double *)&v72;
  *(_OWORD *)(a2 + 64) = v72;
  *(_BYTE *)(a2 + 80) = 0;
  return result;
}

    __int128 v68 = (v24 - 1) & v24;
    int64_t v22 = __clz(__rbit64(v24)) + (v20 << 6);
LABEL_25:
    unint64_t v26 = *(void *)(v5 + 72);
    BOOL v27 = *(void (**)(_BYTE *, unint64_t, uint64_t))(v5 + 16);
    v27(v15, *(void *)(a1 + 48) + v26 * v22, v4);
    uint64_t v28 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v28(v15, 0LL, 1LL, v4);
    uint64_t v29 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48);
    if (v29(v15, 1LL, v4) == 1) {
      goto LABEL_36;
    }
    __int128 v67 = v20;
    uint64_t v30 = v69;
    __int128 v63 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32);
    v63(v69, v15, v4);
    char v31 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
    id v32 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v33 = (v32 + 32) & ~v32;
    uint64_t v72 = v26;
    uint64_t v34 = swift_allocObject(v31, v33 + v26, v32 | 7);
    *(_OWORD *)(v34 + swift_weakDestroy(v0 + 16) = v59;
    __int128 v66 = v34;
    uint64_t v35 = v34 + v33;
    int64_t v36 = v64;
    v27((_BYTE *)v35, (unint64_t)v30, v4);
    uint64_t v37 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v38 = Set.init(minimumCapacity:)(1LL);
    __int128 v65 = v35;
    v27(v36, v35, v4);
    v28(v36, 0LL, 1LL, v4);
    if (v29(v36, 1LL, v4) == 1)
    {
      uint64_t v5 = v73;
      uint64_t v15 = v60;
      unint64_t v20 = v67;
      a1 = v62;
    }

    else
    {
      __int128 v71 = v27;
      uint64_t v58 = v28;
      uint64_t v39 = v55;
      v63(v55, v36, v4);
      uint64_t v40 = *(void *)(v38 + 40);
      swift_bridgeObjectRetain(v38);
      uint64_t v41 = v39;
      uint64_t v42 = dispatch thunk of Hashable._rawHashValue(seed:)(v40, v4, v37);
      uint64_t v43 = -1LL << *(_BYTE *)(v38 + 32);
      __int128 v44 = v42 & ~v43;
      char v45 = v38;
      uint64_t v46 = v38 + 56;
      if (((*(void *)(v38 + 56 + ((v44 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v44) & 1) != 0)
      {
        __int128 v47 = ~v43;
        while (1)
        {
          __int128 v48 = v70;
          v71(v70, *(void *)(v45 + 48) + v44 * v72, v4);
          __int128 v49 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          __int128 v50 = dispatch thunk of static Equatable.== infix(_:_:)(v48, v41, v4, v49);
          __int128 v51 = *(void (**)(_BYTE *, uint64_t))(v73 + 8);
          v51(v48, v4);
          if ((v50 & 1) != 0) {
            break;
          }
          __int128 v44 = (v44 + 1) & v47;
          if (((*(void *)(v46 + ((v44 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v44) & 1) == 0) {
            goto LABEL_31;
          }
        }

        uint64_t v38 = v45;
        swift_bridgeObjectRelease();
        uint64_t v5 = v73;
        v51(v41, v4);
      }

      else
      {
LABEL_31:
        swift_bridgeObjectRelease();
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v45);
        uint64_t v53 = (uint64_t)v70;
        v71(v70, (unint64_t)v41, v4);
        uint64_t v74 = v45;
        sub_1000C9164(v53, v44, isUniquelyReferenced_nonNull_native);
        uint64_t v38 = v74;
        swift_bridgeObjectRelease();
        uint64_t v5 = v73;
        (*(void (**)(_BYTE *, uint64_t))(v73 + 8))(v41, v4);
      }

      v58(v64, 1LL, 1LL, v4);
      a1 = v62;
      uint64_t v15 = v60;
      unint64_t v20 = v67;
    }

    unint64_t v21 = v66;
    swift_setDeallocating(v66);
    swift_arrayDestroy(v65, 1LL, v4);
    swift_deallocClassInstance(v21, 32LL, 7LL);
    sub_1000BF79C(&v74, v38);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v69, v4);
    int64_t v19 = v68;
  }

  char v25 = v23 + 4;
  if (v25 >= v57)
  {
LABEL_35:
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v15, 1LL, 1LL, v4);
LABEL_36:
    swift_release();
    return;
  }

  int64_t v24 = *(void *)(v56 + 8 * v25);
  if (v24)
  {
    unint64_t v20 = v25;
    goto LABEL_24;
  }

  while (1)
  {
    unint64_t v20 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v20 >= v57) {
      goto LABEL_35;
    }
    int64_t v24 = *(void *)(v56 + 8 * v20);
    ++v25;
    if (v24) {
      goto LABEL_24;
    }
  }

      unint64_t v18 = (v24 - 1) & v24;
      int64_t v22 = __clz(__rbit64(v24)) + (v19 << 6);
    }

    unint64_t v26 = a4;
    BOOL v27 = *(void *)(a4 + 48);
    uint64_t v28 = *(void *)(v45 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v45 + 16))(v15, v27 + v28 * v22, v13);
    uint64_t v29 = *(void *)(v16 + 40);
    uint64_t v30 = sub_100007864(v43, v42, v44);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v13, v30);
    char v31 = -1LL << *(_BYTE *)(v16 + 32);
    id v32 = result & ~v31;
    uint64_t v33 = v32 >> 6;
    if (((-1LL << v32) & ~*(void *)(v20 + 8 * (v32 >> 6))) != 0)
    {
      uint64_t v34 = __clz(__rbit64((-1LL << v32) & ~*(void *)(v20 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v35 = 0;
      int64_t v36 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v37 = v33 == v36;
        if (v33 == v36) {
          uint64_t v33 = 0LL;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v20 + 8 * v33);
      }

      while (v38 == -1);
      uint64_t v34 = __clz(__rbit64(~v38)) + (v33 << 6);
    }

    *(void *)(v20 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v34;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v45 + 32))( *(void *)(v16 + 48) + v34 * v28,  v15,  v13);
    ++*(void *)(v16 + 16);
    if (__OFSUB__(a3--, 1LL)) {
      break;
    }
    a4 = v26;
    if (!a3) {
      goto LABEL_37;
    }
  }

      uint64_t v12 = (v18 - 1) & v18;
      uint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
    }

    unint64_t v20 = *(void *)(v26 + 72);
    sub_10001DC4C(*(void *)(a4 + 48) + v20 * v16, (uint64_t)v9, type metadata accessor for RawSearchResult);
    Hasher.init(_seed:)(v27, *((void *)v10 + 5));
    sub_1005B93D0((uint64_t)v27);
    unint64_t v21 = Hasher._finalize()();
    int64_t v22 = _HashTable.nextHole(atOrAfter:)(v21 & ~(-1LL << v10[32]), v10 + 56, ~(-1LL << v10[32]));
    *(void *)&v14[(v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v22;
    uint64_t result = (char *)sub_10002218C( (uint64_t)v9,  *((void *)v10 + 6) + v22 * v20,  type metadata accessor for RawSearchResult);
    ++*((void *)v10 + 2);
    if (__OFSUB__(a3--, 1LL)) {
      break;
    }
    if (!a3) {
      goto LABEL_27;
    }
  }

  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

      unint64_t v13 = (v19 - 1) & v19;
      uint64_t v41 = v20;
      uint64_t v17 = __clz(__rbit64(v19)) + (v20 << 6);
    }

    int64_t v22 = *(void *)(a4 + 48);
    unint64_t v23 = *(void *)(v39 + 72);
    sub_10001DC4C(v22 + v23 * v17, (uint64_t)v10, type metadata accessor for BeaconIdentifier);
    Hasher.init(_seed:)(v42, *(void *)(v11 + 40));
    int64_t v24 = type metadata accessor for UUID(0LL);
    char v25 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v42, v24, v25);
    dispatch thunk of Hashable.hash(into:)(v42, v24, v25);
    uint64_t result = Hasher._finalize()();
    unint64_t v26 = -1LL << *(_BYTE *)(v11 + 32);
    BOOL v27 = result & ~v26;
    uint64_t v28 = v27 >> 6;
    if (((-1LL << v27) & ~*(void *)(v15 + 8 * (v27 >> 6))) != 0)
    {
      uint64_t v29 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v15 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v30 = 0;
      char v31 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        id v32 = v28 == v31;
        if (v28 == v31) {
          uint64_t v28 = 0LL;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v15 + 8 * v28);
      }

      while (v33 == -1);
      uint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
    }

    *(void *)(v15 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v29;
    uint64_t result = sub_10002218C((uint64_t)v10, *(void *)(v11 + 48) + v29 * v23, type metadata accessor for BeaconIdentifier);
    ++*(void *)(v11 + 16);
    if (__OFSUB__(a3--, 1LL)) {
      break;
    }
    a4 = v38;
    uint64_t v14 = v41;
    if (!a3) {
      goto LABEL_37;
    }
  }

    double v159 = 0LL;
    __int128 v48 = v143;
    if ((v148 & 1) != 0)
    {
      if (v44 < v32) {
        goto LABEL_155;
      }
      __int128 v49 = v44;
      __int128 v50 = (uint64_t)v153;
      if (v32 >= v44)
      {
        uint64_t v33 = v44;
      }

      else
      {
        id v145 = v31;
        __int128 v51 = 0LL;
        unint64_t v52 = v154 * (v44 - 1);
        uint64_t v53 = v44 * v154;
        uint64_t v139 = v32;
        unint64_t v54 = v32 * v154;
        do
        {
          if (v32 != v49 + v51 - 1)
          {
            unint64_t v55 = v144;
            if (!v144) {
              goto LABEL_158;
            }
            uint64_t v56 = v144 + v54;
            sub_10002218C(v144 + v54, v151, type metadata accessor for BeaconStatus);
            if (v54 < v52 || v56 >= v55 + v53)
            {
              swift_arrayInitWithTakeFrontToBack(v55 + v54, v55 + v52, 1LL, v150);
            }

            else if (v54 != v52)
            {
              swift_arrayInitWithTakeBackToFront(v55 + v54, v55 + v52);
            }

            sub_10002218C(v151, v55 + v52, type metadata accessor for BeaconStatus);
            a2 = v157;
            __int128 v50 = (uint64_t)v153;
          }

          ++v32;
          --v51;
          __int128 v49 = v44;
          v52 -= v154;
          v53 -= v154;
          v54 += v154;
        }

        while (v32 < v44 + v51);
        char v31 = v145;
        __int128 v48 = v143;
        uint64_t v33 = v44;
        id v32 = v139;
      }

      uint64_t v42 = v152;
      if (v33 >= v152) {
        goto LABEL_50;
      }
    }

    else
    {
      __int128 v50 = (uint64_t)v153;
      uint64_t v33 = v44;
      if (v44 >= v42) {
        goto LABEL_50;
      }
    }

    if (__OFSUB__(v33, v32)) {
      goto LABEL_152;
    }
    if (v33 - v32 >= v48) {
      goto LABEL_50;
    }
    if (__OFADD__(v32, v48)) {
      goto LABEL_153;
    }
    __int128 v57 = v32 + v48 >= v42 ? v42 : v32 + v48;
    if (v57 < v32) {
      break;
    }
    if (v33 == v57) {
      goto LABEL_50;
    }
    id v145 = v31;
    id v112 = *(void *)(v158 + 72);
    uint64_t v154 = v112 * (v33 - 1);
    uint64_t v148 = v112;
    id v113 = v33 * v112;
    uint64_t v139 = v32;
    uint64_t v144 = v57;
    do
    {
      uint64_t v152 = v33;
      uint64_t v114 = 0LL;
      uint64_t v115 = v32;
      uint64_t v116 = v50;
      while (1)
      {
        uint64_t v117 = *v160;
        uint64_t v118 = v113;
        uint64_t v119 = v113 + v114 + *v160;
        char v120 = (uint64_t)v149;
        sub_10001DC4C(v119, (uint64_t)v149, type metadata accessor for BeaconStatus);
        sub_10001DC4C(v154 + v114 + v117, v116, type metadata accessor for BeaconStatus);
        uint64_t v121 = v159;
        uint64_t v122 = v161(v120, v116);
        uint64_t v123 = v116;
        double v159 = v121;
        if (v121)
        {
          sub_100018C68(v116, type metadata accessor for BeaconStatus);
          sub_100018C68(v120, type metadata accessor for BeaconStatus);
LABEL_128:
          swift_bridgeObjectRelease();
          uint64_t v137 = v142;
          goto LABEL_129;
        }

        uint64_t v124 = v122;
        sub_100018C68(v123, type metadata accessor for BeaconStatus);
        sub_100018C68(v120, type metadata accessor for BeaconStatus);
        if ((v124 & 1) == 0) {
          break;
        }
        uint64_t v125 = *v160;
        if (!*v160) {
          goto LABEL_157;
        }
        id v113 = v118;
        uint64_t v126 = v125 + v118 + v114;
        uint64_t v127 = v125 + v154 + v114;
        sub_10002218C(v126, v155, type metadata accessor for BeaconStatus);
        swift_arrayInitWithTakeFrontToBack(v126, v127, 1LL, v150);
        sub_10002218C(v155, v127, type metadata accessor for BeaconStatus);
        v114 -= v148;
        ++v115;
        uint64_t v116 = (uint64_t)v153;
        if (v152 == v115) {
          goto LABEL_109;
        }
      }

      id v113 = v118;
      uint64_t v116 = v123;
LABEL_109:
      __int128 v50 = v116;
      uint64_t v33 = v152 + 1;
      v154 += v148;
      v113 += v148;
      id v32 = v139;
    }

    while (v152 + 1 != v144);
    uint64_t v33 = v144;
    a2 = v157;
    char v31 = v145;
    if (v144 < v139) {
      goto LABEL_150;
    }
LABEL_51:
    if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0) {
      char v31 = sub_1003CB1DC(0LL, *((void *)v31 + 2) + 1LL, 1, v31);
    }
    uint64_t v59 = *((void *)v31 + 2);
    uint64_t v58 = *((void *)v31 + 3);
    __int128 v60 = v59 + 1;
    if (v59 >= v58 >> 1) {
      char v31 = sub_1003CB1DC((char *)(v58 > 1), v59 + 1, 1, v31);
    }
    *((void *)v31 + 2) = v60;
    uint64_t v154 = (uint64_t)(v31 + 32);
    __int128 v61 = &v31[16 * v59 + 32];
    *(void *)__int128 v61 = v32;
    *((void *)v61 + 1) = v33;
    uint64_t v152 = v33;
    if (v59)
    {
      __int128 v62 = v154;
      __int128 v63 = v159;
      while (1)
      {
        __int128 v64 = v60 - 1;
        if (v60 >= 4)
        {
          __int128 v69 = v62 + 16 * v60;
          __int128 v70 = *(void *)(v69 - 64);
          __int128 v71 = *(void *)(v69 - 56);
          uint64_t v75 = __OFSUB__(v71, v70);
          uint64_t v72 = v71 - v70;
          if (v75) {
            goto LABEL_135;
          }
          uint64_t v74 = *(void *)(v69 - 48);
          uint64_t v73 = *(void *)(v69 - 40);
          uint64_t v75 = __OFSUB__(v73, v74);
          __int128 v67 = v73 - v74;
          __int128 v68 = v75;
          if (v75) {
            goto LABEL_136;
          }
          unsigned int v76 = v60 - 2;
          uint64_t v77 = (uint64_t *)(v62 + 16 * (v60 - 2));
          uint64_t v79 = *v77;
          uint64_t v78 = v77[1];
          uint64_t v75 = __OFSUB__(v78, v79);
          unint64_t v80 = v78 - v79;
          if (v75) {
            goto LABEL_138;
          }
          uint64_t v75 = __OFADD__(v67, v80);
          uint64_t v81 = v67 + v80;
          if (v75) {
            goto LABEL_141;
          }
          if (v81 >= v72)
          {
            id v99 = (uint64_t *)(v62 + 16 * v64);
            id v101 = *v99;
            NSString v100 = v99[1];
            uint64_t v75 = __OFSUB__(v100, v101);
            id v102 = v100 - v101;
            if (v75) {
              goto LABEL_145;
            }
            id v92 = v67 < v102;
            goto LABEL_88;
          }
        }

        else
        {
          if (v60 != 3)
          {
            uint64_t v93 = *((void *)v31 + 4);
            unint64_t v94 = *((void *)v31 + 5);
            uint64_t v75 = __OFSUB__(v94, v93);
            uint64_t v86 = v94 - v93;
            uint64_t v87 = v75;
            goto LABEL_82;
          }

          __int128 v66 = *((void *)v31 + 4);
          __int128 v65 = *((void *)v31 + 5);
          uint64_t v75 = __OFSUB__(v65, v66);
          __int128 v67 = v65 - v66;
          __int128 v68 = v75;
        }

        if ((v68 & 1) != 0) {
          goto LABEL_137;
        }
        unsigned int v76 = v60 - 2;
        id v82 = (uint64_t *)(v62 + 16 * (v60 - 2));
        uint64_t v84 = *v82;
        uint64_t v83 = v82[1];
        uint64_t v85 = __OFSUB__(v83, v84);
        uint64_t v86 = v83 - v84;
        uint64_t v87 = v85;
        if (v85) {
          goto LABEL_140;
        }
        uint64_t v88 = (uint64_t *)(v62 + 16 * v64);
        uint64_t v90 = *v88;
        uint64_t v89 = v88[1];
        uint64_t v75 = __OFSUB__(v89, v90);
        id v91 = v89 - v90;
        if (v75) {
          goto LABEL_143;
        }
        if (__OFADD__(v86, v91)) {
          goto LABEL_144;
        }
        if (v86 + v91 >= v67)
        {
          id v92 = v67 < v91;
LABEL_88:
          if (v92) {
            __int128 v64 = v76;
          }
          goto LABEL_90;
        }

    uint64_t v33 = sub_100004AEC(&qword_1009B3100);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56LL))(v13, 1LL, 1LL, v33);
    unint64_t v21 = 0LL;
LABEL_25:
    sub_100015750((uint64_t)v13, (uint64_t)v9, &qword_1009B30F8);
    uint64_t v34 = sub_100004AEC(&qword_1009B3100);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 48LL))(v9, 1LL, v34) == 1)
    {
      swift_release(v50);
      return (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v47, 1LL, 1LL, found);
    }

    uint64_t v35 = v13;
    int64_t v36 = *(void *)&v9[*(int *)(v34 + 48)];
    uint64_t v37 = *(void *)(v36 + 16);
    if (v37)
    {
      uint64_t v38 = v36 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
      swift_bridgeObjectRetain(v36);
      uint64_t v39 = *(void *)(v4 + 72);
      while (1)
      {
        sub_10001DC4C(v38, (uint64_t)v6, type metadata accessor for NotifyWhenFoundRecord);
        sub_100018C68((uint64_t)v6, type metadata accessor for NotifyWhenFoundRecord);
        v38 += v39;
        if (!--v37)
        {
          swift_bridgeObjectRelease();
          unint64_t v4 = v53;
          goto LABEL_31;
        }
      }

      swift_bridgeObjectRelease();
      uint64_t v41 = (uint64_t)v51;
      sub_10002218C((uint64_t)v6, (uint64_t)v51, type metadata accessor for NotifyWhenFoundRecord);
      unint64_t v4 = v53;
      uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56);
      v40(v41, 0LL, 1LL, found);
    }

    else
    {
LABEL_31:
      uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
      uint64_t v41 = (uint64_t)v51;
      v40((uint64_t)v51, 1LL, 1LL, found);
    }

    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v41, 1LL, found) != 1)
    {
      swift_release(v50);
      uint64_t v43 = v47;
      sub_10002218C(v41, v47, type metadata accessor for NotifyWhenFoundRecord);
      v40(v43, 0LL, 1LL, found);
      __int128 v44 = type metadata accessor for UUID(0LL);
      return (void *)(*(uint64_t (**)(char *, uint64_t))(*(void *)(v44 - 8) + 8LL))(v54, v44);
    }

    sub_100015794(v41, &qword_1009AA900);
    uint64_t v42 = type metadata accessor for UUID(0LL);
    uint64_t v9 = v54;
    uint64_t result = (void *)(*(uint64_t (**)(char *, uint64_t))(*(void *)(v42 - 8) + 8LL))(v54, v42);
    unint64_t v13 = v35;
    if (v21) {
      goto LABEL_5;
    }
  }

  char v31 = v48[v32];
  if (v31)
  {
LABEL_13:
    uint64_t v30 = v32;
LABEL_10:
    unint64_t v21 = (v31 - 1) & v31;
    unint64_t v23 = __clz(__rbit64(v31)) + (v30 << 6);
    unint64_t v52 = v30;
    goto LABEL_6;
  }

  while (1)
  {
    uint64_t v30 = v32 + 1;
    if (__OFADD__(v32, 1LL)) {
      break;
    }
    if (v30 >= v49)
    {
      unint64_t v52 = v46;
      goto LABEL_24;
    }

    char v31 = v48[v30];
    ++v32;
    if (v31) {
      goto LABEL_10;
    }
  }

  __break(1u);
  return result;
}

    __break(1u);
    goto LABEL_25;
  }

  sub_1000493A0(v13, a2 & 1);
  unint64_t v18 = sub_10030CE48(v7);
  if ((v15 & 1) == (v19 & 1))
  {
    uint64_t v14 = v18;
    if ((v15 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    unint64_t v21 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0LL, 0LL);
    swift_willThrow(v21);
    unint64_t v52 = v21;
    swift_errorRetain(v21);
    int64_t v22 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    if ((swift_dynamicCast(v22, &v52, v22, &type metadata for _MergeError, 0LL) & 1) == 0)
    {

      swift_bridgeObjectRelease_n(a1, 2LL);
      return swift_errorRelease(v52);
    }

    goto LABEL_27;
  }

  if (!v30)
  {
LABEL_13:
    if (v31) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }

      __break(1u);
      goto LABEL_25;
    }

    __break(1u);
    goto LABEL_24;
  }

  unint64_t v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 0LL);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if ((v10 & 1) != 0) {
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  if (qword_10099B678 != -1) {
LABEL_27:
  }
    swift_once(&qword_10099B678, sub_100615754);
  unint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = sub_10000A720(v11, (uint64_t)qword_100A2AF40);
  unint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  uint64_t v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "Service disabled, not registering own device publish activity.",  v15,  2u);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  uint64_t v16 = 1LL;
LABEL_21:
  __int128 v44 = *(void *)(v0 + 120);
  char v45 = *(void *)(v0 + 96);
  uint64_t v46 = *(void *)(v0 + 88);
  __int128 v47 = *(void *)(v0 + 64);
  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 112) + 56LL))( *(void *)(v0 + 32),  v16,  1LL,  *(void *)(v0 + 104));
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

        __int128 v47 = v39;
        __int128 v57 = v67;
        uint64_t v56 = v68;
        uint64_t result = sub_1002DDE20(v67, v68);
        __int128 v48 = v37;
LABEL_25:
        uint64_t v58 = 0LL;
        uint64_t v59 = 0xF000000000000000LL;
LABEL_26:
        *__int128 v69 = v57;
        v69[1] = v56;
        v69[2] = v48;
        v69[3] = v47;
        v69[4] = v58;
        v69[5] = v59;
        return result;
      }

      __int128 v48 = v37;
      sub_10001736C(v37, v39);
      __int128 v60 = (id)sp_key_record_copy_private_key(record_for_index);
      if (v60)
      {
        __int128 v61 = v60;
        __int128 v62 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v60);
        __int128 v64 = v63;

        uint64_t v58 = sub_10017D280(v62, v64);
        uint64_t v59 = v65;
        sub_100016F9C(v48, v39);
        __int128 v47 = v39;
        __int128 v57 = v67;
        uint64_t v56 = v68;
        uint64_t result = sub_1002DDE20(v67, v68);
        goto LABEL_26;
      }

    unint64_t v4 = (v21 - 1) & v21;
    uint64_t v8 = __clz(__rbit64(v21)) + (v6 << 6);
LABEL_5:
    uint64_t v9 = *(void *)(*(void *)(v1 + 56) + 16 * v8 + 8);
    id v101 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
    char v109 = v10;
    v11._countAndFlagsBits = 118LL;
    v11._object = (void *)0xE100000000000000LL;
    String.append(_:)(v11);
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    unint64_t v13 = v101;
    uint64_t v14 = v109;
    id v102 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    char v110 = v15;
    v16._countAndFlagsBits = 23328LL;
    v16._object = (void *)0xE200000000000000LL;
    String.append(_:)(v16);
    uint64_t v119 = v9;
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 0x5D736574796220LL;
    v18._object = (void *)0xE700000000000000LL;
    String.append(_:)(v18);
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_10005C260(v102, v110, v13, v14, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }

  int64_t v22 = v20 + 5;
  if (v22 < v100)
  {
    unint64_t v21 = *(void *)(v96 + 8 * v22);
    if (!v21)
    {
      while (1)
      {
        uint64_t v6 = v22 + 1;
        if (__OFADD__(v22, 1LL)) {
          break;
        }
        if (v6 >= v100) {
          goto LABEL_25;
        }
        unint64_t v21 = *(void *)(v96 + 8 * v6);
        ++v22;
        if (v21) {
          goto LABEL_24;
        }
      }

        uint64_t v38 = v131;
        uint64_t v29 = v144;
        if (v146 >= 0)
        {
          uint64_t v28 = v34;
          a2 = v139;
        }

        else
        {
          a2 = v139;
          if (v34 < v144) {
            goto LABEL_146;
          }
          if (v144 < v34)
          {
            uint64_t v39 = 0LL;
            a2 = v36 * (v34 - 1);
            uint64_t v40 = v34 * v36;
            uint64_t v41 = v144;
            uint64_t v42 = v144 * v36;
            do
            {
              if (v41 != v34 + v39 - 1)
              {
                if (!v30) {
                  goto LABEL_148;
                }
                char v45 = v17;
                uint64_t v46 = v30 + v42;
                uint64_t v146 = v30 + a2;
                sub_1006A30E0(v30 + v42, v132);
                if (v42 < (uint64_t)a2 || v46 >= v30 + v40)
                {
                  uint64_t v43 = v30 + v42;
                  __int128 v44 = v146;
                  swift_arrayInitWithTakeFrontToBack(v43, v146, 1LL, v140);
                }

                else
                {
                  __int128 v44 = v146;
                  if (v42 != a2) {
                    swift_arrayInitWithTakeBackToFront(v46, v146);
                  }
                }

                sub_1006A30E0(v132, v44);
                uint64_t v30 = v137;
                uint64_t v17 = v45;
                int64_t v36 = v130;
                uint64_t v38 = v131;
              }

              ++v41;
              --v39;
              a2 -= v36;
              v40 -= v36;
              v42 += v36;
            }

            while (v41 < v34 + v39);
            uint64_t v28 = v34;
            a2 = v139;
            a1 = v143;
            uint64_t v29 = v144;
            uint64_t v35 = v133;
            if (v34 >= v133) {
              goto LABEL_56;
            }
            goto LABEL_42;
          }

          uint64_t v28 = v34;
        }

        a1 = v143;
        if (v28 >= v35) {
          goto LABEL_56;
        }
LABEL_42:
        if (__OFSUB__(v28, v29)) {
          goto LABEL_142;
        }
        if (v28 - v29 < v38)
        {
          if (__OFADD__(v29, v38)) {
            goto LABEL_144;
          }
          if (v29 + v38 >= v35) {
            __int128 v47 = v35;
          }
          else {
            __int128 v47 = v29 + v38;
          }
          if (v47 < v29) {
            goto LABEL_145;
          }
          if (v28 != v47)
          {
            a2 = *(void *)(a2 + 16);
            id v145 = *(void *)(v136 + 72);
            uint64_t v133 = v47;
            do
            {
              uint64_t v137 = v28;
              __int128 v48 = *a1;
              __int128 v49 = v145;
              sub_10042811C(*a1 + v145 * v28, v148);
              uint64_t v146 = v28 - 1;
              sub_10042811C(v48 + v49 * (v28 - 1), v149);
              if (a2) {
                __asm { BR              X9 }
              }

              sub_100428160(v149);
              sub_100428160(v148);
              uint64_t v29 = v144;
              uint64_t v28 = v137 + 1;
            }

            while (v137 + 1 != v133);
            uint64_t v28 = v133;
            uint64_t v17 = v135;
          }
        }

      if ((a1 & 0x20) != 0) {
        goto LABEL_34;
      }
      goto LABEL_25;
    }

        __break(1u);
        goto LABEL_25;
      }

      __break(1u);
      return result;
    }

        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
        goto LABEL_26;
      }
    }

    __break(1u);
    goto LABEL_24;
  }

  uint64_t v5 = Data.subscript.getter(0LL);
  if (v5 == 2)
  {
    uint64_t v9 = Data.subdata(in:)(1LL);
    sub_10017DC5C(v9, v10);
    if (!v3) {
      goto LABEL_15;
    }
    goto LABEL_20;
  }

  if (v5 == 1)
  {
    uint64_t v6 = Data.subdata(in:)(1LL);
    uint64_t v8 = sub_10017D280(v6, v7);
    if (!v3) {
      goto LABEL_15;
    }
LABEL_20:
    sub_100016F9C(v2, v1);
    return v4;
  }

  if (v5)
  {
LABEL_27:
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000043LL,  0x8000000100873120LL,  "searchpartyd/KeyMapGenerator.swift",  34LL,  2LL,  423LL,  0);
    __break(1u);
    JUMPOUT(0x100790558LL);
  }

  unint64_t v11 = Data.subdata(in:)(1LL);
  uint64_t v8 = sub_10017D59C(v11, v12);
  if (v3) {
    goto LABEL_20;
  }
LABEL_15:
  unint64_t v4 = v8;
  sub_100016F9C(v2, v1);
  return v4;
}

Swift::Int sub_100049A7C(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E170);
  char v38 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_44;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v35 = v3;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v18 = v17 | (v14 << 6);
      goto LABEL_25;
    }

    int64_t v19 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }

    if (v19 >= v36) {
      break;
    }
    unint64_t v20 = (void *)(v5 + 64);
    unint64_t v21 = *(void *)(v37 + 8 * v19);
    ++v14;
    if (!v21)
    {
      int64_t v14 = v19 + 1;
      if (v19 + 1 >= v36) {
        goto LABEL_37;
      }
      unint64_t v21 = *(void *)(v37 + 8 * v14);
      if (!v21)
      {
        int64_t v22 = v19 + 2;
        if (v22 >= v36)
        {
LABEL_37:
          swift_release(v5);
          int v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }

        unint64_t v21 = *(void *)(v37 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            int64_t v14 = v22 + 1;
            if (__OFADD__(v22, 1LL)) {
              goto LABEL_46;
            }
            if (v14 >= v36) {
              goto LABEL_37;
            }
            unint64_t v21 = *(void *)(v37 + 8 * v14);
            ++v22;
            if (v21) {
              goto LABEL_24;
            }
          }
        }

        int64_t v14 = v22;
      }
    }

Swift::Int sub_100049DA0(uint64_t a1, uint64_t a2)
{
  return sub_10004EE04(a1, a2, &qword_10099E270);
}

Swift::Int sub_100049DAC(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E1D0);
  char v38 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v35 = v3;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v36) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v36) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          int v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v36) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

uint64_t sub_10004A0B4(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E458);
  char v7 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v9 = v8;
  if (*(void *)(v5 + 16))
  {
    int64_t v36 = v3;
    uint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    char v38 = (void *)(v5 + 64);
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v37 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = v8 + 64;
    uint64_t result = swift_retain();
    int64_t v15 = 0LL;
    while (1)
    {
      if (v12)
      {
        unint64_t v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v23 = v22 | (v15 << 6);
      }

      else
      {
        int64_t v24 = v15 + 1;
        if (__OFADD__(v15, 1LL))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }

        if (v24 >= v37) {
          goto LABEL_36;
        }
        unint64_t v25 = v38[v24];
        ++v15;
        if (!v25)
        {
          int64_t v15 = v24 + 1;
          if (v24 + 1 >= v37) {
            goto LABEL_36;
          }
          unint64_t v25 = v38[v15];
          if (!v25)
          {
            int64_t v26 = v24 + 2;
            if (v26 >= v37)
            {
LABEL_36:
              swift_release();
              int v3 = v36;
              if ((v7 & 1) != 0)
              {
                uint64_t v35 = 1LL << *(_BYTE *)(v5 + 32);
                if (v35 >= 64) {
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *char v38 = -1LL << v35;
                }
                *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
              }

              break;
            }

            unint64_t v25 = v38[v26];
            if (!v25)
            {
              while (1)
              {
                int64_t v15 = v26 + 1;
                if (__OFADD__(v26, 1LL)) {
                  goto LABEL_43;
                }
                if (v15 >= v37) {
                  goto LABEL_36;
                }
                unint64_t v25 = v38[v15];
                ++v26;
                if (v25) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v15 = v26;
          }
        }

uint64_t sub_10004A3BC(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = type metadata accessor for CodingUserInfoKey(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_100004AEC((uint64_t *)&unk_10099E580);
  int v40 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_43;
  }
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  __int128 v39 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  int64_t v37 = v3;
  int64_t v38 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  uint64_t result = swift_retain(v10);
  int64_t v19 = 0LL;
  while (1)
  {
    if (v16)
    {
      unint64_t v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v38) {
      break;
    }
    int64_t v24 = v39;
    unint64_t v25 = v39[v23];
    ++v19;
    if (!v25)
    {
      int64_t v19 = v23 + 1;
      if (v23 + 1 >= v38) {
        goto LABEL_36;
      }
      unint64_t v25 = v39[v19];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_36:
          swift_release(v10);
          int v3 = v37;
          if ((v40 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v39[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v19 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v19 >= v38) {
              goto LABEL_36;
            }
            unint64_t v25 = v39[v19];
            ++v26;
            if (v25) {
              goto LABEL_23;
            }
          }
        }

        int64_t v19 = v26;
      }
    }

LABEL_23:
    unint64_t v16 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    uint64_t v27 = *(void *)(v7 + 72);
    unint64_t v28 = *(void *)(v10 + 48) + v27 * v22;
    if ((v40 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      sub_10006A358((_OWORD *)(*(void *)(v10 + 56) + 32 * v22), v41);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      sub_10006A538(*(void *)(v10 + 56) + 32 * v22, (uint64_t)v41);
    }

    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)( *(void *)(v12 + 40),  v6,  &protocol witness table for CodingUserInfoKey);
    uint64_t v29 = -1LL << *(_BYTE *)(v12 + 32);
    unint64_t v30 = result & ~v29;
    unint64_t v31 = v30 >> 6;
    if (((-1LL << v30) & ~*(void *)(v17 + 8 * (v30 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1LL << v30) & ~*(void *)(v17 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v32 = 0;
      unint64_t v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        BOOL v34 = v31 == v33;
        if (v31 == v33) {
          unint64_t v31 = 0LL;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v17 + 8 * v31);
      }

      while (v35 == -1);
      unint64_t v20 = __clz(__rbit64(~v35)) + (v31 << 6);
    }

    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(void *)(v12 + 48) + v27 * v20, v9, v6);
    uint64_t result = (uint64_t)sub_10006A358(v41, (_OWORD *)(*(void *)(v12 + 56) + 32 * v20));
    ++*(void *)(v12 + 16);
  }

  swift_release(v10);
  int v3 = v37;
  int64_t v24 = v39;
  if ((v40 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v36 = 1LL << *(_BYTE *)(v10 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *int64_t v24 = -1LL << v36;
  }
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v10);
  *int v3 = v12;
  return result;
}

    unint64_t v16 = (v26 - 1) & v26;
    int64_t v24 = __clz(__rbit64(v26)) + (v19 << 6);
LABEL_24:
    unint64_t v28 = v7;
    uint64_t v29 = *(void *)(v7 + 72);
    unint64_t v30 = *(void *)(v10 + 48) + v29 * v24;
    if ((v50 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v28 + 32))(v9, v30, v6);
      unint64_t v31 = (uint64_t *)(*(void *)(v10 + 56) + 16 * v24);
      char v32 = *v31;
      unint64_t v33 = v31[1];
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v28 + 16))(v9, v30, v6);
      BOOL v34 = (uint64_t *)(*(void *)(v10 + 56) + 16 * v24);
      char v32 = *v34;
      unint64_t v33 = v34[1];
      sub_10001736C(*v34, v33);
    }

    uint64_t v35 = *(void *)(v12 + 40);
    uint64_t v36 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v35, v6, v36);
    int64_t v37 = -1LL << *(_BYTE *)(v12 + 32);
    int64_t v38 = result & ~v37;
    __int128 v39 = v38 >> 6;
    if (((-1LL << v38) & ~*(void *)(v17 + 8 * (v38 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1LL << v38) & ~*(void *)(v17 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int v40 = 0;
      uint64_t v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }

        uint64_t v42 = v39 == v41;
        if (v39 == v41) {
          __int128 v39 = 0LL;
        }
        v40 |= v42;
        uint64_t v43 = *(void *)(v17 + 8 * v39);
      }

      while (v43 == -1);
      unint64_t v20 = __clz(__rbit64(~v43)) + (v39 << 6);
    }

    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    unint64_t v21 = *(void *)(v12 + 48) + v29 * v20;
    uint64_t v7 = v48;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v48 + 32))(v21, v9, v6);
    unint64_t v22 = (uint64_t *)(*(void *)(v12 + 56) + 16 * v20);
    *unint64_t v22 = v32;
    v22[1] = v33;
    ++*(void *)(v12 + 16);
  }

  uint64_t v27 = v25 + 2;
  if (v27 < v46)
  {
    int64_t v26 = v47[v27];
    if (!v26)
    {
      while (1)
      {
        int64_t v19 = v27 + 1;
        if (__OFADD__(v27, 1LL)) {
          goto LABEL_43;
        }
        if (v19 >= v46) {
          goto LABEL_36;
        }
        int64_t v26 = v47[v19];
        ++v27;
        if (v26) {
          goto LABEL_23;
        }
      }
    }

    int64_t v19 = v27;
    goto LABEL_23;
  }

    uint64_t v17 = (v26 - 1) & v26;
    int64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_24:
    unint64_t v28 = *(void *)(v46 + 72);
    uint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if ((v48 & 1) != 0)
    {
      sub_10002218C(v29, (uint64_t)v10, type metadata accessor for BeaconIdentifier);
      unint64_t v30 = *(void *)(v45 + 72);
      sub_10002218C(*(void *)(v11 + 56) + v30 * v23, v49, type metadata accessor for ObservedAdvertisement);
    }

    else
    {
      sub_10001DC4C(v29, (uint64_t)v10, type metadata accessor for BeaconIdentifier);
      unint64_t v30 = *(void *)(v45 + 72);
      sub_10001DC4C(*(void *)(v11 + 56) + v30 * v23, v49, type metadata accessor for ObservedAdvertisement);
    }

    Hasher.init(_seed:)(v50, *(void *)(v13 + 40));
    unint64_t v31 = type metadata accessor for UUID(0LL);
    char v32 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v50, v31, v32);
    dispatch thunk of Hashable.hash(into:)(v50, v31, v32);
    uint64_t result = Hasher._finalize()();
    unint64_t v33 = -1LL << *(_BYTE *)(v13 + 32);
    BOOL v34 = result & ~v33;
    uint64_t v35 = v34 >> 6;
    if (((-1LL << v34) & ~*(void *)(v18 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1LL << v34) & ~*(void *)(v18 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0LL;
      uint64_t v11 = v44;
    }

    else
    {
      uint64_t v36 = 0;
      int64_t v37 = (unint64_t)(63 - v33) >> 6;
      uint64_t v11 = v44;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        int64_t v38 = v35 == v37;
        if (v35 == v37) {
          uint64_t v35 = 0LL;
        }
        v36 |= v38;
        __int128 v39 = *(void *)(v18 + 8 * v35);
      }

      while (v39 == -1);
      unint64_t v21 = __clz(__rbit64(~v39)) + (v35 << 6);
    }

    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
    sub_10002218C((uint64_t)v10, *(void *)(v13 + 48) + v28 * v21, type metadata accessor for BeaconIdentifier);
    uint64_t result = sub_10002218C(v49, *(void *)(v13 + 56) + v30 * v21, type metadata accessor for ObservedAdvertisement);
    ++*(void *)(v13 + 16);
  }

  swift_release(v11);
  int v3 = v41;
  unint64_t v25 = v43;
  if ((v48 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  int v40 = 1LL << *(_BYTE *)(v11 + 32);
  if (v40 >= 64) {
    bzero(v25, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *unint64_t v25 = -1LL << v40;
  }
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v11);
  *int v3 = v13;
  return result;
}

        swift_release();
        int v3 = v26;
        if ((v25 & 1) == 0) {
          goto LABEL_30;
        }
LABEL_26:
        unint64_t v22 = 1LL << *(_BYTE *)(v9 + 32);
        if (v22 >= 64) {
          bzero(v17, ((unint64_t)(v22 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
        }
        else {
          *uint64_t v17 = -1LL << v22;
        }
        *(void *)(v9 + swift_weakDestroy(v0 + 16) = 0LL;
        goto LABEL_30;
      }
    }

    unint64_t v18 = (v27 - 1) & v27;
    int64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_24:
    uint64_t v29 = *(void *)(v9 + 72);
    unint64_t v30 = *(void *)(v12 + 48) + v29 * v24;
    if ((v47 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 32))(v11, v30, v8);
      unint64_t v31 = *(void *)(*(void *)(v12 + 56) + 8 * v24);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, v30, v8);
      unint64_t v31 = *(void *)(*(void *)(v12 + 56) + 8 * v24);
      swift_bridgeObjectRetain(v31);
    }

    char v32 = *(void *)(v14 + 40);
    unint64_t v33 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v8, v33);
    BOOL v34 = -1LL << *(_BYTE *)(v14 + 32);
    uint64_t v35 = result & ~v34;
    uint64_t v36 = v35 >> 6;
    if (((-1LL << v35) & ~*(void *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1LL << v35) & ~*(void *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v37 = 0;
      int64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        __int128 v39 = v36 == v38;
        if (v36 == v38) {
          uint64_t v36 = 0LL;
        }
        v37 |= v39;
        int v40 = *(void *)(v19 + 8 * v36);
      }

      while (v40 == -1);
      unint64_t v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }

    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))( *(void *)(v14 + 48) + v29 * v22,  v11,  v8);
    *(void *)(*(void *)(v14 + 56) + 8 * v22) = v31;
    ++*(void *)(v14 + 16);
  }

  swift_release(v12);
  uint64_t v5 = v43;
  int64_t v26 = v45;
  if ((v47 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v41 = 1LL << *(_BYTE *)(v12 + 32);
  if (v41 >= 64) {
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *int64_t v26 = -1LL << v41;
  }
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v12);
  void *v5 = v14;
  return result;
}

    unint64_t v16 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v19 << 6);
LABEL_24:
    unint64_t v30 = v7[9];
    unint64_t v31 = *(void *)(v10 + 48) + v30 * v25;
    char v32 = 104 * v25;
    id v82 = v19;
    if ((v70 & 1) != 0)
    {
      unint64_t v33 = (void (*)(char *, unint64_t, uint64_t))v7[4];
      BOOL v34 = v84;
      v33(v83, v31, v84);
      uint64_t v35 = *(void *)(v10 + 56) + v32;
      uint64_t v81 = *(void *)v35;
      unint64_t v80 = *(unsigned __int8 *)(v35 + 8);
      uint64_t v36 = *(void *)(v35 + 16);
      int64_t v37 = *(void *)(v35 + 24);
      int64_t v38 = *(void *)(v35 + 32);
      __int128 v39 = *(void *)(v35 + 40);
      uint64_t v78 = *(void *)(v35 + 48);
      uint64_t v79 = v36;
      uint64_t v77 = *(void *)(v35 + 56);
      LODWORD(v36) = *(unsigned __int8 *)(v35 + 64);
      uint64_t v75 = *(unsigned __int8 *)(v35 + 65);
      unsigned int v76 = v36;
      int v40 = *(void *)(v35 + 72);
      uint64_t v73 = *(void *)(v35 + 80);
      uint64_t v74 = v40;
      uint64_t v72 = *(void *)(v35 + 88);
      __int128 v71 = *(unsigned __int8 *)(v35 + 96);
    }

    else
    {
      uint64_t v41 = (void (*)(char *, unint64_t, uint64_t))v7[2];
      BOOL v34 = v84;
      v41(v83, v31, v84);
      uint64_t v42 = *(void *)(v10 + 56) + v32;
      uint64_t v43 = *(void *)v42;
      unint64_t v80 = *(unsigned __int8 *)(v42 + 8);
      __int128 v67 = v16;
      __int128 v44 = v30;
      uint64_t v46 = *(void *)(v42 + 16);
      char v45 = *(void *)(v42 + 24);
      int64_t v38 = *(void *)(v42 + 32);
      __int128 v39 = *(void *)(v42 + 40);
      __int128 v47 = *(void *)(v42 + 48);
      uint64_t v77 = *(void *)(v42 + 56);
      uint64_t v78 = v47;
      __int128 v48 = *(unsigned __int8 *)(v42 + 64);
      uint64_t v75 = *(unsigned __int8 *)(v42 + 65);
      unsigned int v76 = v48;
      __int128 v50 = *(void *)(v42 + 72);
      __int128 v49 = *(void *)(v42 + 80);
      uint64_t v72 = *(void *)(v42 + 88);
      uint64_t v73 = v49;
      __int128 v71 = *(unsigned __int8 *)(v42 + 96);
      swift_bridgeObjectRetain(v77);
      uint64_t v74 = v50;
      swift_bridgeObjectRetain(v50);
      uint64_t v81 = v43;
      swift_retain();
      uint64_t v79 = v46;
      __int128 v51 = v46;
      int64_t v37 = v45;
      unint64_t v30 = v44;
      uint64_t v12 = v66;
      unint64_t v16 = v67;
      swift_bridgeObjectRetain(v51);
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v39);
    }

    unint64_t v52 = *(void *)(v12 + 40);
    uint64_t v53 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v52, v34, v53);
    unint64_t v54 = -1LL << *(_BYTE *)(v12 + 32);
    unint64_t v55 = result & ~v54;
    uint64_t v56 = v55 >> 6;
    if (((-1LL << v55) & ~*(void *)(v17 + 8 * (v55 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1LL << v55) & ~*(void *)(v17 + 8 * (v55 >> 6)))) | v55 & 0x7FFFFFFFFFFFFFC0LL;
      uint64_t v7 = v69;
    }

    else
    {
      __int128 v57 = 0;
      uint64_t v58 = (unint64_t)(63 - v54) >> 6;
      uint64_t v7 = v69;
      do
      {
        if (++v56 == v58 && (v57 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v59 = v56 == v58;
        if (v56 == v58) {
          uint64_t v56 = 0LL;
        }
        v57 |= v59;
        __int128 v60 = *(void *)(v17 + 8 * v56);
      }

      while (v60 == -1);
      unint64_t v20 = __clz(__rbit64(~v60)) + (v56 << 6);
    }

    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v7[4])( *(void *)(v12 + 48) + v30 * v20,  v83,  v84);
    unint64_t v21 = *(void *)(v12 + 56) + 104 * v20;
    *(void *)unint64_t v21 = v81;
    *(_BYTE *)(v21 + 8) = v80;
    *(void *)(v21 + swift_weakDestroy(v0 + 16) = v79;
    *(void *)(v21 + 24) = v37;
    *(void *)(v21 + 32) = v38;
    *(void *)(v21 + 40) = v39;
    unint64_t v22 = v77;
    *(void *)(v21 + 48) = v78;
    *(void *)(v21 + 56) = v22;
    *(_BYTE *)(v21 + 64) = v76;
    *(_BYTE *)(v21 + 65) = v75;
    int64_t v23 = v73;
    *(void *)(v21 + 72) = v74;
    *(void *)(v21 + 80) = v23;
    *(void *)(v21 + 88) = v72;
    *(_BYTE *)(v21 + 96) = v71;
    ++*(void *)(v12 + 16);
    uint64_t v10 = v68;
    int64_t v19 = v82;
  }

  swift_release();
  int v3 = v63;
  uint64_t v27 = v65;
  if ((v70 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  __int128 v61 = 1LL << *(_BYTE *)(v10 + 32);
  if (v61 >= 64) {
    bzero(v27, ((unint64_t)(v61 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    char *v27 = -1LL << v61;
  }
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release();
  *int v3 = v12;
  return result;
}

    int64_t v19 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_24:
    unint64_t v30 = *(void *)(v10 + 72);
    unint64_t v31 = *(void *)(v13 + 48) + v30 * v25;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 32))(v12, v31, v9);
      v46(*(void *)(v13 + 56) + 40 * v25, v47);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v12, v31, v9);
      sub_100013044(*(void *)(v13 + 56) + 40 * v25, (uint64_t)v47);
    }

    char v32 = *(void *)(v15 + 40);
    unint64_t v33 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v9, v33);
    BOOL v34 = -1LL << *(_BYTE *)(v15 + 32);
    uint64_t v35 = result & ~v34;
    uint64_t v36 = v35 >> 6;
    if (((-1LL << v35) & ~*(void *)(v20 + 8 * (v35 >> 6))) != 0)
    {
      int64_t v23 = __clz(__rbit64((-1LL << v35) & ~*(void *)(v20 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v37 = 0;
      int64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        __int128 v39 = v36 == v38;
        if (v36 == v38) {
          uint64_t v36 = 0LL;
        }
        v37 |= v39;
        int v40 = *(void *)(v20 + 8 * v36);
      }

      while (v40 == -1);
      int64_t v23 = __clz(__rbit64(~v40)) + (v36 << 6);
    }

    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(*(void *)(v15 + 48) + v30 * v23, v12, v9);
    uint64_t result = ((uint64_t (*)(_BYTE *, unint64_t))v46)(v47, *(void *)(v15 + 56) + 40 * v23);
    ++*(void *)(v15 + 16);
  }

  swift_release(v13);
  uint64_t v6 = v42;
  uint64_t v27 = v44;
  if ((v45 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v41 = 1LL << *(_BYTE *)(v13 + 32);
  if (v41 >= 64) {
    bzero(v27, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    char *v27 = -1LL << v41;
  }
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v13);
  *uint64_t v6 = v15;
  return result;
}

    unint64_t v18 = (v27 - 1) & v27;
    int64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_24:
    uint64_t v29 = *(void *)(v9 + 72);
    unint64_t v30 = *(void *)(v12 + 48) + v29 * v24;
    if ((v47 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 32))(v11, v30, v8);
      unint64_t v31 = *(void *)(*(void *)(v12 + 56) + 8 * v24);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, v30, v8);
      unint64_t v31 = *(void *)(*(void *)(v12 + 56) + 8 * v24);
      swift_retain();
    }

    char v32 = *(void *)(v14 + 40);
    unint64_t v33 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v8, v33);
    BOOL v34 = -1LL << *(_BYTE *)(v14 + 32);
    uint64_t v35 = result & ~v34;
    uint64_t v36 = v35 >> 6;
    if (((-1LL << v35) & ~*(void *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1LL << v35) & ~*(void *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v37 = 0;
      int64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        __int128 v39 = v36 == v38;
        if (v36 == v38) {
          uint64_t v36 = 0LL;
        }
        v37 |= v39;
        int v40 = *(void *)(v19 + 8 * v36);
      }

      while (v40 == -1);
      unint64_t v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }

    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))( *(void *)(v14 + 48) + v29 * v22,  v11,  v8);
    *(void *)(*(void *)(v14 + 56) + 8 * v22) = v31;
    ++*(void *)(v14 + 16);
  }

  swift_release(v12);
  uint64_t v5 = v43;
  int64_t v26 = v45;
  if ((v47 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v41 = 1LL << *(_BYTE *)(v12 + 32);
  if (v41 >= 64) {
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *int64_t v26 = -1LL << v41;
  }
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v12);
  void *v5 = v14;
  return result;
}

    uint64_t v15 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_24:
    uint64_t v27 = *(void *)(v43 + 72);
    unint64_t v28 = *(void *)(v9 + 56) + v27 * v22;
    uint64_t v29 = *(void *)(*(void *)(v9 + 48) + 16 * v22 + 8);
    char v45 = *(_OWORD *)(*(void *)(v9 + 48) + 16 * v22);
    if ((v44 & 1) != 0)
    {
      sub_10002218C(v28, (uint64_t)v8, type metadata accessor for OwnedBeaconGroup.PairingState);
    }

    else
    {
      sub_10001DC4C(v28, (uint64_t)v8, type metadata accessor for OwnedBeaconGroup.PairingState);
      sub_10001736C(v45, v29);
    }

    Hasher.init(_seed:)(v46, *(void *)(v11 + 40));
    unint64_t v30 = v45;
    sub_10001736C(v45, v29);
    Data.hash(into:)(v46, v30, v29);
    sub_100016F9C(v30, v29);
    uint64_t result = Hasher._finalize()();
    unint64_t v31 = -1LL << *(_BYTE *)(v11 + 32);
    char v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1LL << v32) & ~*(void *)(v16 + 8 * (v32 >> 6))) != 0)
    {
      int64_t v19 = __clz(__rbit64((-1LL << v32) & ~*(void *)(v16 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0LL;
      unint64_t v20 = v45;
    }

    else
    {
      BOOL v34 = 0;
      uint64_t v35 = (unint64_t)(63 - v31) >> 6;
      unint64_t v20 = v45;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0LL;
        }
        v34 |= v36;
        int64_t v37 = *(void *)(v16 + 8 * v33);
      }

      while (v37 == -1);
      int64_t v19 = __clz(__rbit64(~v37)) + (v33 << 6);
    }

    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    *(_OWORD *)(*(void *)(v11 + 48) + 16 * v19) = v20;
    uint64_t result = sub_10002218C( (uint64_t)v8,  *(void *)(v11 + 56) + v27 * v19,  type metadata accessor for OwnedBeaconGroup.PairingState);
    ++*(void *)(v11 + 16);
  }

  swift_release();
  int v3 = v40;
  int64_t v24 = v42;
  if ((v44 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  int64_t v38 = 1LL << *(_BYTE *)(v9 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *int64_t v24 = -1LL << v38;
  }
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release();
  *int v3 = v11;
  return result;
}

    unint64_t v16 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    uint64_t v27 = *(void *)(v7 + 72);
    unint64_t v28 = *(void *)(v10 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      uint64_t v29 = *(void *)(*(void *)(v10 + 56) + 8 * v22);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      uint64_t v29 = *(void *)(*(void *)(v10 + 56) + 8 * v22);
      sub_10006A368(v29);
    }

    unint64_t v30 = *(void *)(v12 + 40);
    unint64_t v31 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    char v32 = -1LL << *(_BYTE *)(v12 + 32);
    unint64_t v33 = result & ~v32;
    BOOL v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v35 = 0;
      uint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        int64_t v37 = v34 == v36;
        if (v34 == v36) {
          BOOL v34 = 0LL;
        }
        v35 |= v37;
        int64_t v38 = *(void *)(v17 + 8 * v34);
      }

      while (v38 == -1);
      unint64_t v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))( *(void *)(v12 + 48) + v27 * v20,  v9,  v6);
    *(void *)(*(void *)(v12 + 56) + 8 * v20) = v29;
    ++*(void *)(v12 + 16);
  }

  swift_release();
  int v3 = v41;
  int64_t v24 = v43;
  if ((v45 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  __int128 v39 = 1LL << *(_BYTE *)(v10 + 32);
  if (v39 >= 64) {
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *int64_t v24 = -1LL << v39;
  }
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release();
  *int v3 = v12;
  return result;
}

        uint64_t v15 = (v26 - 1) & v26;
        int64_t v23 = __clz(__rbit64(v26)) + (v18 << 6);
      }

      unint64_t v28 = *(void *)(v34 + 72);
      uint64_t v29 = *(void *)(v9 + 48) + v28 * v23;
      if ((v35 & 1) != 0)
      {
        sub_10002218C(v29, (uint64_t)v8, type metadata accessor for OwnedBeaconRecord);
        int64_t v19 = *(void *)(*(void *)(v9 + 56) + 8 * v23);
      }

      else
      {
        sub_10001DC4C(v29, (uint64_t)v8, type metadata accessor for OwnedBeaconRecord);
        int64_t v19 = *(void *)(*(void *)(v9 + 56) + 8 * v23);
        swift_bridgeObjectRetain(v19);
      }

      Hasher.init(_seed:)(v36, *(void *)(v11 + 40));
      sub_1005D3D98((uint64_t)v36);
      unint64_t v20 = Hasher._finalize()();
      unint64_t v21 = _HashTable.nextHole(atOrAfter:)( v20 & ~(-1LL << *(_BYTE *)(v11 + 32)),  v11 + 64,  ~(-1LL << *(_BYTE *)(v11 + 32)));
      *(void *)(v16 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
      uint64_t result = sub_10002218C( (uint64_t)v8,  *(void *)(v11 + 48) + v28 * v21,  type metadata accessor for OwnedBeaconRecord);
      *(void *)(*(void *)(v11 + 56) + 8 * v21) = v19;
      ++*(void *)(v11 + 16);
    }
  }

  uint64_t result = swift_release();
LABEL_33:
  *int v3 = v11;
  return result;
}

    uint64_t v15 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_24:
    int64_t v26 = *(void *)(v45 + 72);
    uint64_t v27 = *(void *)(v9 + 48) + v26 * v21;
    if ((v47 & 1) != 0)
    {
      sub_10002218C(v27, (uint64_t)v8, type metadata accessor for BeaconKeyServiceBuilder.FileKey);
      unint64_t v28 = *(void *)(*(void *)(v9 + 56) + 8 * v21);
    }

    else
    {
      sub_10001DC4C(v27, (uint64_t)v8, type metadata accessor for BeaconKeyServiceBuilder.FileKey);
      unint64_t v28 = *(void *)(*(void *)(v9 + 56) + 8 * v21);
      swift_retain();
    }

    Hasher.init(_seed:)(v48, *(void *)(v11 + 40));
    uint64_t v29 = type metadata accessor for UUID(0LL);
    unint64_t v30 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v48, v29, v30);
    type metadata accessor for BeaconIdentifier(0LL);
    dispatch thunk of Hashable.hash(into:)(v48, v29, v30);
    if (v8[*(int *)(v46 + 20)])
    {
      if (v8[*(int *)(v46 + 20)] == 1)
      {
        unint64_t v31 = 0xE900000000000079LL;
        char v32 = 0x7261646E6F636553LL;
      }

      else
      {
        unint64_t v31 = 0xEF736E6F69746163LL;
        char v32 = 0x6F4C657275636553LL;
      }
    }

    else
    {
      unint64_t v31 = 0xE700000000000000LL;
      char v32 = 0x7972616D697250LL;
    }

    uint64_t v9 = v44;
    String.hash(into:)(v48, v32, v31);
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    unint64_t v33 = -1LL << *(_BYTE *)(v11 + 32);
    BOOL v34 = result & ~v33;
    uint64_t v35 = v34 >> 6;
    if (((-1LL << v34) & ~*(void *)(v16 + 8 * (v34 >> 6))) != 0)
    {
      int64_t v19 = __clz(__rbit64((-1LL << v34) & ~*(void *)(v16 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v36 = 0;
      int64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_49;
        }

        int64_t v38 = v35 == v37;
        if (v35 == v37) {
          uint64_t v35 = 0LL;
        }
        v36 |= v38;
        __int128 v39 = *(void *)(v16 + 8 * v35);
      }

      while (v39 == -1);
      int64_t v19 = __clz(__rbit64(~v39)) + (v35 << 6);
    }

    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    uint64_t result = sub_10002218C( (uint64_t)v8,  *(void *)(v11 + 48) + v26 * v19,  type metadata accessor for BeaconKeyServiceBuilder.FileKey);
    *(void *)(*(void *)(v11 + 56) + 8 * v19) = v28;
    ++*(void *)(v11 + 16);
  }

  swift_release();
  int v3 = v41;
  int64_t v23 = v43;
  if ((v47 & 1) == 0) {
    goto LABEL_48;
  }
LABEL_44:
  int v40 = 1LL << *(_BYTE *)(v9 + 32);
  if (v40 >= 64) {
    bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v23 = -1LL << v40;
  }
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_48:
  uint64_t result = swift_release();
  *int v3 = v11;
  return result;
}

    unint64_t v18 = (v27 - 1) & v27;
    int64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_24:
    uint64_t v29 = *(void *)(v9 + 72);
    unint64_t v30 = *(void *)(v12 + 48) + v29 * v24;
    if ((v47 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 32))(v11, v30, v8);
      unint64_t v31 = *(id *)(*(void *)(v12 + 56) + 8 * v24);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, v30, v8);
      unint64_t v31 = *(id *)(*(void *)(v12 + 56) + 8 * v24);
    }

    char v32 = *(void *)(v14 + 40);
    unint64_t v33 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v8, v33);
    BOOL v34 = -1LL << *(_BYTE *)(v14 + 32);
    uint64_t v35 = result & ~v34;
    uint64_t v36 = v35 >> 6;
    if (((-1LL << v35) & ~*(void *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1LL << v35) & ~*(void *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v37 = 0;
      int64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        __int128 v39 = v36 == v38;
        if (v36 == v38) {
          uint64_t v36 = 0LL;
        }
        v37 |= v39;
        int v40 = *(void *)(v19 + 8 * v36);
      }

      while (v40 == -1);
      unint64_t v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }

    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))( *(void *)(v14 + 48) + v29 * v22,  v11,  v8);
    *(void *)(*(void *)(v14 + 56) + 8 * v22) = v31;
    ++*(void *)(v14 + 16);
  }

  swift_release();
  uint64_t v5 = v43;
  int64_t v26 = v45;
  if ((v47 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v41 = 1LL << *(_BYTE *)(v12 + 32);
  if (v41 >= 64) {
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *int64_t v26 = -1LL << v41;
  }
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release();
  void *v5 = v14;
  return result;
}

    uint64_t v15 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_24:
    uint64_t v27 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v22);
    uint64_t v29 = *v27;
    unint64_t v28 = v27[1];
    unint64_t v30 = *(void *)(v43 + 72);
    unint64_t v31 = *(void *)(v9 + 56) + v30 * v22;
    if ((v44 & 1) != 0)
    {
      sub_10002218C(v31, (uint64_t)v8, type metadata accessor for SecureLocationsSubscription);
    }

    else
    {
      sub_10001DC4C(v31, (uint64_t)v8, type metadata accessor for SecureLocationsSubscription);
      swift_bridgeObjectRetain(v28);
    }

    Hasher.init(_seed:)(v45, *(void *)(v11 + 40));
    String.hash(into:)(v45, v29, v28);
    uint64_t result = Hasher._finalize()();
    char v32 = -1LL << *(_BYTE *)(v11 + 32);
    unint64_t v33 = result & ~v32;
    BOOL v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v16 + 8 * (v33 >> 6))) != 0)
    {
      int64_t v19 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v16 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v35 = 0;
      uint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        int64_t v37 = v34 == v36;
        if (v34 == v36) {
          BOOL v34 = 0LL;
        }
        v35 |= v37;
        int64_t v38 = *(void *)(v16 + 8 * v34);
      }

      while (v38 == -1);
      int64_t v19 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    unint64_t v20 = (void *)(*(void *)(v11 + 48) + 16 * v19);
    *unint64_t v20 = v29;
    v20[1] = v28;
    uint64_t result = sub_10002218C( (uint64_t)v8,  *(void *)(v11 + 56) + v30 * v19,  type metadata accessor for SecureLocationsSubscription);
    ++*(void *)(v11 + 16);
  }

  swift_release();
  int v3 = v40;
  int64_t v24 = v42;
  if ((v44 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  __int128 v39 = 1LL << *(_BYTE *)(v9 + 32);
  if (v39 >= 64) {
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *int64_t v24 = -1LL << v39;
  }
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release();
  *int v3 = v11;
  return result;
}

    int64_t v23 = (v27 - 1) & v27;
    int64_t v24 = __clz(__rbit64(v27)) + (v20 << 6);
LABEL_24:
    uint64_t v29 = *(void *)(v54 + 72);
    unint64_t v30 = *(void *)(v11 + 48) + v29 * v24;
    uint64_t v58 = v23;
    uint64_t v59 = v20;
    if ((v56 & 1) != 0)
    {
      sub_10002218C(v30, (uint64_t)v10, type metadata accessor for BeaconIdentifier);
      unint64_t v31 = (void (**)(char *, unint64_t, uint64_t))v57;
    }

    else
    {
      sub_10001DC4C(v30, (uint64_t)v10, type metadata accessor for BeaconIdentifier);
      unint64_t v31 = v51;
    }

    char v32 = *(void *)(v11 + 56);
    unint64_t v33 = v6;
    BOOL v34 = *(void *)(v6 + 72);
    uint64_t v35 = v5;
    (*v31)(v60, v32 + v34 * v24, v5);
    uint64_t v13 = v53;
    Hasher.init(_seed:)(v61, *(void *)(v53 + 40));
    uint64_t v36 = type metadata accessor for UUID(0LL);
    int64_t v37 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v61, v36, v37);
    dispatch thunk of Hashable.hash(into:)(v61, v36, v37);
    uint64_t result = Hasher._finalize()();
    int64_t v38 = -1LL << *(_BYTE *)(v13 + 32);
    __int128 v39 = result & ~v38;
    int v40 = v39 >> 6;
    if (((-1LL << v39) & ~*(void *)(v18 + 8 * (v39 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1LL << v39) & ~*(void *)(v18 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0LL;
      uint64_t v5 = v35;
      uint64_t v6 = v33;
    }

    else
    {
      uint64_t v41 = 0;
      uint64_t v42 = (unint64_t)(63 - v38) >> 6;
      uint64_t v5 = v35;
      uint64_t v6 = v33;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_46;
        }

        uint64_t v43 = v40 == v42;
        if (v40 == v42) {
          int v40 = 0LL;
        }
        v41 |= v43;
        __int128 v44 = *(void *)(v18 + 8 * v40);
      }

      while (v44 == -1);
      unint64_t v21 = __clz(__rbit64(~v44)) + (v40 << 6);
    }

    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
    sub_10002218C((uint64_t)v10, *(void *)(v13 + 48) + v29 * v21, type metadata accessor for BeaconIdentifier);
    uint64_t result = (*v57)(*(void *)(v13 + 56) + v34 * v21, v60, v5);
    ++*(void *)(v13 + 16);
    uint64_t v11 = v52;
    uint64_t v17 = v58;
    unint64_t v20 = v59;
  }

  unint64_t v28 = v25 + 2;
  if (v28 >= v49)
  {
LABEL_37:
    swift_release();
    char v45 = v48;
    if ((v56 & 1) != 0) {
      goto LABEL_40;
    }
    goto LABEL_44;
  }

  uint64_t v27 = v50[v28];
  if (v27)
  {
    unint64_t v20 = v28;
    goto LABEL_23;
  }

  while (1)
  {
    unint64_t v20 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v20 >= v49) {
      goto LABEL_37;
    }
    uint64_t v27 = v50[v20];
    ++v28;
    if (v27) {
      goto LABEL_23;
    }
  }

    unint64_t v16 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    uint64_t v27 = *(void *)(v7 + 72);
    unint64_t v28 = *(void *)(v10 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      uint64_t v29 = *(void *)(*(void *)(v10 + 56) + 8 * v22);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      uint64_t v29 = *(void *)(*(void *)(v10 + 56) + 8 * v22);
      swift_retain();
    }

    unint64_t v30 = *(void *)(v12 + 40);
    unint64_t v31 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    char v32 = -1LL << *(_BYTE *)(v12 + 32);
    unint64_t v33 = result & ~v32;
    BOOL v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v35 = 0;
      uint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        int64_t v37 = v34 == v36;
        if (v34 == v36) {
          BOOL v34 = 0LL;
        }
        v35 |= v37;
        int64_t v38 = *(void *)(v17 + 8 * v34);
      }

      while (v38 == -1);
      unint64_t v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))( *(void *)(v12 + 48) + v27 * v20,  v9,  v6);
    *(void *)(*(void *)(v12 + 56) + 8 * v20) = v29;
    ++*(void *)(v12 + 16);
  }

  swift_release();
  int v3 = v41;
  int64_t v24 = v43;
  if ((v45 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  __int128 v39 = 1LL << *(_BYTE *)(v10 + 32);
  if (v39 >= 64) {
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *int64_t v24 = -1LL << v39;
  }
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release();
  *int v3 = v12;
  return result;
}

    unint64_t v16 = (v27 - 1) & v27;
    int64_t v24 = __clz(__rbit64(v27)) + (v19 << 6);
LABEL_24:
    uint64_t v29 = v7[9];
    unint64_t v30 = *(void *)(v10 + 48) + v29 * v24;
    __int128 v61 = v19;
    if ((v57 & 1) != 0)
    {
      unint64_t v31 = (void (*)(char *, unint64_t, uint64_t))v7[4];
      char v32 = v63;
      v31(v62, v30, v63);
      unint64_t v33 = *(void *)(v10 + 56) + 48 * v24;
      uint64_t v35 = *(void *)v33;
      BOOL v34 = *(void *)(v33 + 8);
      uint64_t v36 = *(void *)(v33 + 24);
      uint64_t v59 = *(void *)(v33 + 16);
      __int128 v60 = v34;
      uint64_t v58 = *(unsigned __int8 *)(v33 + 32);
      int64_t v37 = *(void *)(v33 + 40);
    }

    else
    {
      int64_t v38 = (void (*)(char *, unint64_t, uint64_t))v7[2];
      char v32 = v63;
      v38(v62, v30, v63);
      __int128 v39 = *(void *)(v10 + 56) + 48 * v24;
      uint64_t v35 = *(void *)v39;
      int v40 = *(void *)(v39 + 8);
      uint64_t v36 = *(void *)(v39 + 24);
      uint64_t v59 = *(void *)(v39 + 16);
      __int128 v60 = v40;
      uint64_t v58 = *(unsigned __int8 *)(v39 + 32);
      int64_t v37 = *(void *)(v39 + 40);
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v37);
      swift_retain();
    }

    uint64_t v41 = *(void *)(v12 + 40);
    uint64_t v42 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v41, v32, v42);
    uint64_t v43 = -1LL << *(_BYTE *)(v12 + 32);
    __int128 v44 = result & ~v43;
    char v45 = v44 >> 6;
    if (((-1LL << v44) & ~*(void *)(v17 + 8 * (v44 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1LL << v44) & ~*(void *)(v17 + 8 * (v44 >> 6)))) | v44 & 0x7FFFFFFFFFFFFFC0LL;
      uint64_t v7 = v56;
    }

    else
    {
      uint64_t v46 = 0;
      __int128 v47 = (unint64_t)(63 - v43) >> 6;
      uint64_t v7 = v56;
      do
      {
        if (++v45 == v47 && (v46 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        __int128 v48 = v45 == v47;
        if (v45 == v47) {
          char v45 = 0LL;
        }
        v46 |= v48;
        __int128 v49 = *(void *)(v17 + 8 * v45);
      }

      while (v49 == -1);
      unint64_t v20 = __clz(__rbit64(~v49)) + (v45 << 6);
    }

    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v7[4])( *(void *)(v12 + 48) + v29 * v20,  v62,  v63);
    unint64_t v21 = *(void *)(v12 + 56) + 48 * v20;
    unint64_t v22 = v60;
    int64_t v19 = v61;
    *(void *)unint64_t v21 = v35;
    *(void *)(v21 + 8) = v22;
    *(void *)(v21 + swift_weakDestroy(v0 + 16) = v59;
    *(void *)(v21 + 24) = v36;
    *(_BYTE *)(v21 + 32) = v58;
    *(void *)(v21 + 40) = v37;
    ++*(void *)(v12 + 16);
    uint64_t v10 = v55;
  }

  swift_release();
  int v3 = v52;
  int64_t v26 = v54;
  if ((v57 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  __int128 v50 = 1LL << *(_BYTE *)(v10 + 32);
  if (v50 >= 64) {
    bzero(v26, ((unint64_t)(v50 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *int64_t v26 = -1LL << v50;
  }
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release();
  *int v3 = v12;
  return result;
}

    uint64_t v15 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_24:
    int64_t v26 = *(void *)(v43 + 72);
    uint64_t v27 = *(void *)(v9 + 48) + v26 * v21;
    if ((v45 & 1) != 0)
    {
      sub_10002218C(v27, (uint64_t)v8, type metadata accessor for ManagedCBPeripheralManager.KeyType);
      unint64_t v28 = *(id *)(*(void *)(v9 + 56) + 8 * v21);
    }

    else
    {
      sub_10001DC4C(v27, (uint64_t)v8, type metadata accessor for ManagedCBPeripheralManager.KeyType);
      unint64_t v28 = *(id *)(*(void *)(v9 + 56) + 8 * v21);
    }

    Hasher.init(_seed:)(v46, *(void *)(v11 + 40));
    uint64_t v29 = type metadata accessor for UUID(0LL);
    unint64_t v30 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v46, v29, v30);
    dispatch thunk of Hashable.hash(into:)(v46, v29, v30);
    uint64_t result = Hasher._finalize()();
    unint64_t v31 = -1LL << *(_BYTE *)(v11 + 32);
    char v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1LL << v32) & ~*(void *)(v16 + 8 * (v32 >> 6))) != 0)
    {
      int64_t v19 = __clz(__rbit64((-1LL << v32) & ~*(void *)(v16 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0LL;
      uint64_t v9 = v42;
    }

    else
    {
      BOOL v34 = 0;
      uint64_t v35 = (unint64_t)(63 - v31) >> 6;
      uint64_t v9 = v42;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0LL;
        }
        v34 |= v36;
        int64_t v37 = *(void *)(v16 + 8 * v33);
      }

      while (v37 == -1);
      int64_t v19 = __clz(__rbit64(~v37)) + (v33 << 6);
    }

    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    uint64_t result = sub_10002218C( (uint64_t)v8,  *(void *)(v11 + 48) + v26 * v19,  type metadata accessor for ManagedCBPeripheralManager.KeyType);
    *(void *)(*(void *)(v11 + 56) + 8 * v19) = v28;
    ++*(void *)(v11 + 16);
  }

  swift_release();
  int v3 = v39;
  int64_t v23 = v41;
  if ((v45 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  int64_t v38 = 1LL << *(_BYTE *)(v9 + 32);
  if (v38 >= 64) {
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v23 = -1LL << v38;
  }
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release();
  *int v3 = v11;
  return result;
}

        unint64_t v20 = (v41 - 1) & v41;
        int64_t v38 = __clz(__rbit64(v41)) + (v22 << 6);
      }

      uint64_t v43 = *(void *)(v63 + 72);
      __int128 v44 = *(void *)(v14 + 48) + v43 * v38;
      char v45 = 24 * v38;
      __int128 v69 = v22;
      if ((v65 & 1) != 0)
      {
        sub_10002218C(v44, (uint64_t)v13, type metadata accessor for ManagedCBPeripheralBeaconInfo);
        uint64_t v46 = *(void *)(v14 + 56) + v45;
        __int128 v47 = *(void *)v46;
        __int128 v67 = *(void *)(v46 + 8);
        __int128 v68 = v47;
        __int128 v66 = *(unsigned __int8 *)(v46 + 16);
      }

      else
      {
        sub_10001DC4C(v44, (uint64_t)v13, type metadata accessor for ManagedCBPeripheralBeaconInfo);
        __int128 v48 = *(void *)(v14 + 56) + v45;
        __int128 v49 = *(void *)v48;
        __int128 v67 = *(void *)(v48 + 8);
        __int128 v68 = v49;
        __int128 v66 = *(unsigned __int8 *)(v48 + 16);
        swift_bridgeObjectRetain(v67);
      }

      Hasher.init(_seed:)(v70, *(void *)(v16 + 40));
      __int128 v50 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      __int128 v51 = v61;
      dispatch thunk of Hashable.hash(into:)(v70, v61, v50);
      dispatch thunk of Hashable.hash(into:)(v70, v51, v50);
      unint64_t v52 = v64;
      sub_10001581C((uint64_t)&v13[v11[6]], v64, &qword_10099D8A0);
      uint64_t v53 = v62;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v52, 1LL, v51) == 1)
      {
        Hasher._combine(_:)(0);
      }

      else
      {
        int64_t v23 = v58;
        (*(void (**)(char *, uint64_t, uint64_t))(v53 + 32))(v58, v52, v51);
        Hasher._combine(_:)(1u);
        dispatch thunk of Hashable.hash(into:)(v70, v51, v50);
        (*(void (**)(char *, uint64_t))(v53 + 8))(v23, v51);
      }

      uint64_t v14 = v59;
      int64_t v24 = type metadata accessor for Date(0LL);
      unint64_t v25 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      dispatch thunk of Hashable.hash(into:)(v70, v24, v25);
      int64_t v26 = &v13[v11[8]];
      uint64_t v27 = *(void *)v26;
      unint64_t v28 = *((void *)v26 + 1);
      swift_bridgeObjectRetain(v28);
      String.hash(into:)(v70, v27, v28);
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(*(_DWORD *)&v13[v11[9]]);
      uint64_t v29 = &v13[v11[10]];
      unint64_t v30 = *(void *)v29;
      unint64_t v31 = *((void *)v29 + 1);
      swift_bridgeObjectRetain(v31);
      String.hash(into:)(v70, v30, v31);
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v13[v11[11]]);
      Hasher._combine(_:)(v13[v11[12]]);
      char v32 = Hasher._finalize()();
      unint64_t v33 = v60;
      BOOL v34 = _HashTable.nextHole(atOrAfter:)(v32 & ~(-1LL << *(_BYTE *)(v16 + 32)), v60, ~(-1LL << *(_BYTE *)(v16 + 32)));
      *(void *)(v33 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v34;
      uint64_t result = sub_10002218C( (uint64_t)v13,  *(void *)(v16 + 48) + v43 * v34,  type metadata accessor for ManagedCBPeripheralBeaconInfo);
      uint64_t v35 = *(void *)(v16 + 56) + 24 * v34;
      unint64_t v22 = v69;
      uint64_t v36 = v67;
      *(void *)uint64_t v35 = v68;
      *(void *)(v35 + 8) = v36;
      *(_BYTE *)(v35 + swift_weakDestroy(v0 + 16) = v66;
      ++*(void *)(v16 + 16);
    }
  }

  uint64_t result = swift_release();
LABEL_36:
  *int v3 = v16;
  return result;
}

        unint64_t v20 = (v39 - 1) & v39;
        uint64_t v36 = __clz(__rbit64(v39)) + (v22 << 6);
      }

      uint64_t v41 = *(void *)(v57 + 72);
      uint64_t v42 = *(void *)(v14 + 48) + v41 * v36;
      __int128 v61 = v22;
      if ((v59 & 1) != 0)
      {
        sub_10002218C(v42, (uint64_t)v13, type metadata accessor for ManagedCBPeripheralBeaconInfo);
        __int128 v60 = *(void *)(*(void *)(v14 + 56) + 8 * v36);
      }

      else
      {
        sub_10001DC4C(v42, (uint64_t)v13, type metadata accessor for ManagedCBPeripheralBeaconInfo);
        __int128 v60 = *(void *)(*(void *)(v14 + 56) + 8 * v36);
        swift_bridgeObjectRetain(v60);
      }

      Hasher.init(_seed:)(v62, *(void *)(v16 + 40));
      uint64_t v43 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      __int128 v44 = v55;
      dispatch thunk of Hashable.hash(into:)(v62, v55, v43);
      dispatch thunk of Hashable.hash(into:)(v62, v44, v43);
      char v45 = v58;
      sub_10001581C((uint64_t)&v13[v11[6]], v58, &qword_10099D8A0);
      uint64_t v46 = v56;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v45, 1LL, v44) == 1)
      {
        Hasher._combine(_:)(0);
      }

      else
      {
        int64_t v23 = v52;
        (*(void (**)(char *, uint64_t, uint64_t))(v46 + 32))(v52, v45, v44);
        Hasher._combine(_:)(1u);
        dispatch thunk of Hashable.hash(into:)(v62, v44, v43);
        (*(void (**)(char *, uint64_t))(v46 + 8))(v23, v44);
      }

      uint64_t v14 = v53;
      int64_t v24 = type metadata accessor for Date(0LL);
      unint64_t v25 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      dispatch thunk of Hashable.hash(into:)(v62, v24, v25);
      int64_t v26 = &v13[v11[8]];
      uint64_t v27 = *(void *)v26;
      unint64_t v28 = *((void *)v26 + 1);
      swift_bridgeObjectRetain(v28);
      String.hash(into:)(v62, v27, v28);
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(*(_DWORD *)&v13[v11[9]]);
      uint64_t v29 = &v13[v11[10]];
      unint64_t v30 = *(void *)v29;
      unint64_t v31 = *((void *)v29 + 1);
      swift_bridgeObjectRetain(v31);
      String.hash(into:)(v62, v30, v31);
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v13[v11[11]]);
      Hasher._combine(_:)(v13[v11[12]]);
      char v32 = Hasher._finalize()();
      unint64_t v33 = v54;
      BOOL v34 = _HashTable.nextHole(atOrAfter:)(v32 & ~(-1LL << *(_BYTE *)(v16 + 32)), v54, ~(-1LL << *(_BYTE *)(v16 + 32)));
      *(void *)(v33 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v34;
      uint64_t result = sub_10002218C( (uint64_t)v13,  *(void *)(v16 + 48) + v41 * v34,  type metadata accessor for ManagedCBPeripheralBeaconInfo);
      unint64_t v22 = v61;
      *(void *)(*(void *)(v16 + 56) + 8 * v34) = v60;
      ++*(void *)(v16 + 16);
    }
  }

  uint64_t result = swift_release();
LABEL_36:
  *int v3 = v16;
  return result;
}

    unint64_t v21 = (v30 - 1) & v30;
    uint64_t v27 = __clz(__rbit64(v30)) + (v24 << 6);
LABEL_24:
    char v32 = *(void *)(v12 + 72);
    unint64_t v33 = *(void *)(v15 + 48) + v32 * v27;
    if ((v52 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v12 + 32))(v14, v33, v11);
      BOOL v34 = *(void *)(v15 + 56);
      uint64_t v35 = *(void *)(v51 + 72);
      sub_10002218C(v34 + v35 * v27, v53, v54);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v14, v33, v11);
      uint64_t v36 = *(void *)(v15 + 56);
      uint64_t v35 = *(void *)(v51 + 72);
      sub_10001DC4C(v36 + v35 * v27, v53, v54);
    }

    int64_t v37 = *(void *)(v17 + 40);
    int64_t v38 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v37, v11, v38);
    __int128 v39 = -1LL << *(_BYTE *)(v17 + 32);
    int v40 = result & ~v39;
    uint64_t v41 = v40 >> 6;
    if (((-1LL << v40) & ~*(void *)(v22 + 8 * (v40 >> 6))) != 0)
    {
      unint64_t v25 = __clz(__rbit64((-1LL << v40) & ~*(void *)(v22 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v42 = 0;
      uint64_t v43 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        __int128 v44 = v41 == v43;
        if (v41 == v43) {
          uint64_t v41 = 0LL;
        }
        v42 |= v44;
        char v45 = *(void *)(v22 + 8 * v41);
      }

      while (v45 == -1);
      unint64_t v25 = __clz(__rbit64(~v45)) + (v41 << 6);
    }

    *(void *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(*(void *)(v17 + 48) + v32 * v25, v14, v11);
    uint64_t result = sub_10002218C(v53, *(void *)(v17 + 56) + v35 * v25, v54);
    ++*(void *)(v17 + 16);
  }

  swift_release(v15);
  uint64_t v6 = v47;
  uint64_t v29 = v49;
  if ((v52 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v46 = 1LL << *(_BYTE *)(v15 + 32);
  if (v46 >= 64) {
    bzero(v29, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v29 = -1LL << v46;
  }
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v15);
  *uint64_t v6 = v17;
  return result;
}

    unint64_t v20 = (v29 - 1) & v29;
    int64_t v26 = __clz(__rbit64(v29)) + (v23 << 6);
LABEL_24:
    unint64_t v31 = *(void *)(v9 + 72);
    char v32 = *(void *)(v14 + 48) + v31 * v26;
    if ((v52 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 32))(v11, v32, v8);
      unint64_t v33 = *(void *)(v14 + 56);
      BOOL v34 = *(void *)(v51 + 72);
      sub_10006A4A8(v33 + v34 * v26, v53);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, v32, v8);
      uint64_t v35 = *(void *)(v14 + 56);
      BOOL v34 = *(void *)(v51 + 72);
      sub_10001581C(v35 + v34 * v26, v53, &qword_10099E380);
    }

    uint64_t v36 = *(void *)(v16 + 40);
    int64_t v37 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v36, v8, v37);
    int64_t v38 = -1LL << *(_BYTE *)(v16 + 32);
    __int128 v39 = result & ~v38;
    int v40 = v39 >> 6;
    if (((-1LL << v39) & ~*(void *)(v21 + 8 * (v39 >> 6))) != 0)
    {
      int64_t v24 = __clz(__rbit64((-1LL << v39) & ~*(void *)(v21 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v41 = 0;
      uint64_t v42 = (unint64_t)(63 - v38) >> 6;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v43 = v40 == v42;
        if (v40 == v42) {
          int v40 = 0LL;
        }
        v41 |= v43;
        __int128 v44 = *(void *)(v21 + 8 * v40);
      }

      while (v44 == -1);
      int64_t v24 = __clz(__rbit64(~v44)) + (v40 << 6);
    }

    *(void *)(v21 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v24;
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(void *)(v16 + 48) + v31 * v24, v11, v8);
    uint64_t result = sub_10006A4A8(v53, *(void *)(v16 + 56) + v34 * v24);
    ++*(void *)(v16 + 16);
  }

  swift_release();
  int v3 = v47;
  unint64_t v28 = v49;
  if ((v52 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  char v45 = 1LL << *(_BYTE *)(v14 + 32);
  if (v45 >= 64) {
    bzero(v28, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *unint64_t v28 = -1LL << v45;
  }
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release();
  *int v3 = v16;
  return result;
}

    uint64_t v15 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_24:
    int64_t v26 = *(void *)(v40 + 72);
    uint64_t v27 = *(void *)(v9 + 48) + v26 * v21;
    if ((v41 & 1) != 0)
    {
      sub_10002218C(v27, (uint64_t)v8, type metadata accessor for StableIdentifier);
      unint64_t v28 = *(void *)(*(void *)(v9 + 56) + 8 * v21);
    }

    else
    {
      sub_10001DC4C(v27, (uint64_t)v8, type metadata accessor for StableIdentifier);
      unint64_t v28 = *(void *)(*(void *)(v9 + 56) + 8 * v21);
      swift_bridgeObjectRetain(v28);
    }

    Hasher.init(_seed:)(v42, *(void *)(v11 + 40));
    sub_1006DEAF0();
    uint64_t result = Hasher._finalize()();
    uint64_t v29 = -1LL << *(_BYTE *)(v11 + 32);
    unint64_t v30 = result & ~v29;
    unint64_t v31 = v30 >> 6;
    if (((-1LL << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
    {
      int64_t v19 = __clz(__rbit64((-1LL << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v32 = 0;
      unint64_t v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        BOOL v34 = v31 == v33;
        if (v31 == v33) {
          unint64_t v31 = 0LL;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v16 + 8 * v31);
      }

      while (v35 == -1);
      int64_t v19 = __clz(__rbit64(~v35)) + (v31 << 6);
    }

    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    uint64_t result = sub_10002218C((uint64_t)v8, *(void *)(v11 + 48) + v26 * v19, type metadata accessor for StableIdentifier);
    *(void *)(*(void *)(v11 + 56) + 8 * v19) = v28;
    ++*(void *)(v11 + 16);
  }

  swift_release();
  int v3 = v37;
  int64_t v23 = v39;
  if ((v41 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v36 = 1LL << *(_BYTE *)(v9 + 32);
  if (v36 >= 64) {
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v23 = -1LL << v36;
  }
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release();
  *int v3 = v11;
  return result;
}

    int64_t v19 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_24:
    unint64_t v30 = *(void **)(*(void *)(v13 + 48) + 8 * v25);
    unint64_t v31 = *(void *)(v46 + 72);
    char v32 = *(void *)(v13 + 56) + v31 * v25;
    if ((v47 & 1) != 0)
    {
      sub_10002218C(v32, (uint64_t)v12, a3);
    }

    else
    {
      sub_10001DC4C(v32, (uint64_t)v12, a3);
      unint64_t v33 = v30;
    }

    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v15 + 40));
    BOOL v34 = -1LL << *(_BYTE *)(v15 + 32);
    uint64_t v35 = result & ~v34;
    uint64_t v36 = v35 >> 6;
    if (((-1LL << v35) & ~*(void *)(v20 + 8 * (v35 >> 6))) != 0)
    {
      int64_t v23 = __clz(__rbit64((-1LL << v35) & ~*(void *)(v20 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v37 = 0;
      int64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        __int128 v39 = v36 == v38;
        if (v36 == v38) {
          uint64_t v36 = 0LL;
        }
        v37 |= v39;
        int v40 = *(void *)(v20 + 8 * v36);
      }

      while (v40 == -1);
      int64_t v23 = __clz(__rbit64(~v40)) + (v36 << 6);
    }

    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    *(void *)(*(void *)(v15 + 48) + 8 * v23) = v30;
    uint64_t result = sub_10002218C((uint64_t)v12, *(void *)(v15 + 56) + v31 * v23, a3);
    ++*(void *)(v15 + 16);
  }

  swift_release(v13);
  uint64_t v7 = v43;
  uint64_t v27 = v45;
  if ((v47 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v41 = 1LL << *(_BYTE *)(v13 + 32);
  if (v41 >= 64) {
    bzero(v27, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    char *v27 = -1LL << v41;
  }
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v13);
  *uint64_t v7 = v15;
  return result;
}

    unint64_t v18 = (v27 - 1) & v27;
    int64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_24:
    uint64_t v29 = *(void *)(v9 + 72);
    unint64_t v30 = *(void *)(v12 + 48) + v29 * v24;
    if ((v50 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 32))(v11, v30, v8);
      unint64_t v31 = *(void *)(v12 + 56);
      char v32 = *(void *)(v49 + 72);
      sub_10002218C(v31 + v32 * v24, v51, type metadata accessor for BeaconScanner.AISLookupState);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, v30, v8);
      unint64_t v33 = *(void *)(v12 + 56);
      char v32 = *(void *)(v49 + 72);
      sub_10001DC4C(v33 + v32 * v24, v51, type metadata accessor for BeaconScanner.AISLookupState);
    }

    BOOL v34 = *(void *)(v14 + 40);
    uint64_t v35 = sub_10006A45C();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v34, v8, v35);
    uint64_t v36 = -1LL << *(_BYTE *)(v14 + 32);
    int64_t v37 = result & ~v36;
    int64_t v38 = v37 >> 6;
    if (((-1LL << v37) & ~*(void *)(v19 + 8 * (v37 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1LL << v37) & ~*(void *)(v19 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      __int128 v39 = 0;
      int v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v41 = v38 == v40;
        if (v38 == v40) {
          int64_t v38 = 0LL;
        }
        v39 |= v41;
        uint64_t v42 = *(void *)(v19 + 8 * v38);
      }

      while (v42 == -1);
      unint64_t v22 = __clz(__rbit64(~v42)) + (v38 << 6);
    }

    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(void *)(v14 + 48) + v29 * v22, v11, v8);
    uint64_t result = sub_10002218C( v51,  *(void *)(v14 + 56) + v32 * v22,  type metadata accessor for BeaconScanner.AISLookupState);
    ++*(void *)(v14 + 16);
  }

  swift_release();
  int v3 = v45;
  int64_t v26 = v47;
  if ((v50 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v43 = 1LL << *(_BYTE *)(v12 + 32);
  if (v43 >= 64) {
    bzero(v26, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *int64_t v26 = -1LL << v43;
  }
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release();
  *int v3 = v14;
  return result;
}

        uint64_t v11 = (v21 - 1) & v21;
        int64_t v19 = __clz(__rbit64(v21)) + (v15 << 6);
      }

      int64_t v23 = 8 * v19;
      int64_t v24 = *(void *)(v5 + 48);
      unint64_t v25 = *(void *)(v24 + v23);
      int64_t v26 = *(void *)(*(void *)(v5 + 56) + v23);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain(*(void *)(v24 + v23));
      }
      Hasher.init(_seed:)(v30, *(void *)(v8 + 40));
      sub_10006A150(v30, v25);
      unint64_t v16 = Hasher._finalize()();
      uint64_t result = _HashTable.nextHole(atOrAfter:)( v16 & ~(-1LL << *(_BYTE *)(v8 + 32)),  v8 + 64,  ~(-1LL << *(_BYTE *)(v8 + 32)));
      *(void *)(v13 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
      uint64_t v17 = 8 * result;
      *(void *)(*(void *)(v8 + 48) + v17) = v25;
      *(void *)(*(void *)(v8 + 56) + v17) = v26;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release();
  *int v3 = v8;
  return result;
}

    unint64_t v18 = (v26 - 1) & v26;
    int64_t v24 = __clz(__rbit64(v26)) + (v21 << 6);
LABEL_24:
    unint64_t v28 = *(void *)(v51 + 72);
    uint64_t v29 = *(void *)(v12 + 48) + v28 * v24;
    unint64_t v30 = v55;
    if ((v53 & 1) != 0)
    {
      sub_10002218C(v29, (uint64_t)v55, type metadata accessor for ShareAttemptTracker.AttemptKey);
      unint64_t v31 = (void (**)(char *, unint64_t, uint64_t))v54;
    }

    else
    {
      sub_10001DC4C(v29, (uint64_t)v55, type metadata accessor for ShareAttemptTracker.AttemptKey);
      unint64_t v31 = v48;
    }

    char v32 = *(void *)(v7 + 72);
    unint64_t v33 = *(void *)(v12 + 56) + v32 * v24;
    BOOL v34 = v6;
    (*v31)(v56, v33, v6);
    Hasher.init(_seed:)(v57, *(void *)(v14 + 40));
    Hasher._combine(_:)(dword_1007E7E78[*v30]);
    uint64_t v35 = type metadata accessor for UUID(0LL);
    uint64_t v36 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v57, v35, v36);
    uint64_t result = Hasher._finalize()();
    int64_t v37 = -1LL << *(_BYTE *)(v14 + 32);
    int64_t v38 = result & ~v37;
    __int128 v39 = v38 >> 6;
    if (((-1LL << v38) & ~*(void *)(v19 + 8 * (v38 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1LL << v38) & ~*(void *)(v19 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0LL;
      uint64_t v6 = v34;
    }

    else
    {
      int v40 = 0;
      uint64_t v41 = (unint64_t)(63 - v37) >> 6;
      uint64_t v6 = v34;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }

        uint64_t v42 = v39 == v41;
        if (v39 == v41) {
          __int128 v39 = 0LL;
        }
        v40 |= v42;
        uint64_t v43 = *(void *)(v19 + 8 * v39);
      }

      while (v43 == -1);
      unint64_t v22 = __clz(__rbit64(~v43)) + (v39 << 6);
    }

    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
    sub_10002218C( (uint64_t)v55,  *(void *)(v14 + 48) + v28 * v22,  type metadata accessor for ShareAttemptTracker.AttemptKey);
    uint64_t result = (*v54)(*(void *)(v14 + 56) + v32 * v22, v56, v6);
    ++*(void *)(v14 + 16);
    uint64_t v7 = v49;
  }

  uint64_t v27 = v25 + 2;
  if (v27 < v46)
  {
    int64_t v26 = v47[v27];
    if (!v26)
    {
      while (1)
      {
        unint64_t v21 = v27 + 1;
        if (__OFADD__(v27, 1LL)) {
          goto LABEL_43;
        }
        if (v21 >= v46) {
          goto LABEL_36;
        }
        int64_t v26 = v47[v21];
        ++v27;
        if (v26) {
          goto LABEL_23;
        }
      }
    }

    unint64_t v21 = v27;
    goto LABEL_23;
  }

    uint64_t v17 = (v25 - 1) & v25;
    int64_t v23 = __clz(__rbit64(v25)) + (v20 << 6);
LABEL_24:
    uint64_t v27 = *(void *)(v46 + 72);
    unint64_t v28 = *(void *)(v11 + 48) + v27 * v23;
    if ((v48 & 1) != 0)
    {
      sub_10002218C(v28, (uint64_t)v10, type metadata accessor for BeaconKeyManager.FileKey);
      uint64_t v29 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }

    else
    {
      sub_10001DC4C(v28, (uint64_t)v10, type metadata accessor for BeaconKeyManager.FileKey);
      uint64_t v29 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_retain();
    }

    Hasher.init(_seed:)(v49, *(void *)(v13 + 40));
    unint64_t v30 = type metadata accessor for UUID(0LL);
    unint64_t v31 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v49, v30, v31);
    if (v10[*(int *)(v47 + 20)])
    {
      if (v10[*(int *)(v47 + 20)] == 1)
      {
        char v32 = 0xE900000000000079LL;
        unint64_t v33 = 0x7261646E6F636553LL;
      }

      else
      {
        char v32 = 0xEF736E6F69746163LL;
        unint64_t v33 = 0x6F4C657275636553LL;
      }
    }

    else
    {
      char v32 = 0xE700000000000000LL;
      unint64_t v33 = 0x7972616D697250LL;
    }

    String.hash(into:)(v49, v33, v32);
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    BOOL v34 = -1LL << *(_BYTE *)(v13 + 32);
    uint64_t v35 = result & ~v34;
    uint64_t v36 = v35 >> 6;
    if (((-1LL << v35) & ~*(void *)(v18 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1LL << v35) & ~*(void *)(v18 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v37 = 0;
      int64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_47;
        }

        __int128 v39 = v36 == v38;
        if (v36 == v38) {
          uint64_t v36 = 0LL;
        }
        v37 |= v39;
        int v40 = *(void *)(v18 + 8 * v36);
      }

      while (v40 == -1);
      unint64_t v21 = __clz(__rbit64(~v40)) + (v36 << 6);
    }

    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
    uint64_t result = sub_10002218C( (uint64_t)v10,  *(void *)(v13 + 48) + v27 * v21,  type metadata accessor for BeaconKeyManager.FileKey);
    *(void *)(*(void *)(v13 + 56) + 8 * v21) = v29;
    ++*(void *)(v13 + 16);
  }

  int64_t v26 = v24 + 2;
  if (v26 < v44)
  {
    unint64_t v25 = v45[v26];
    if (!v25)
    {
      while (1)
      {
        unint64_t v20 = v26 + 1;
        if (__OFADD__(v26, 1LL)) {
          goto LABEL_48;
        }
        if (v20 >= v44) {
          goto LABEL_41;
        }
        unint64_t v25 = v45[v20];
        ++v26;
        if (v25) {
          goto LABEL_23;
        }
      }
    }

    unint64_t v20 = v26;
    goto LABEL_23;
  }

    uint64_t v15 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_24:
    uint64_t v27 = *(void *)(v48 + 72);
    unint64_t v28 = *(void *)(v9 + 48) + v27 * v22;
    if ((v47 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 32))(v8, v28, v6);
      uint64_t v29 = *(void *)(v9 + 56) + 16 * v22;
      unint64_t v30 = *(_BYTE *)v29;
      unint64_t v31 = *(void *)(v29 + 8);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(v8, v28, v6);
      char v32 = *(void *)(v9 + 56) + 16 * v22;
      unint64_t v30 = *(_BYTE *)v32;
      unint64_t v31 = *(void *)(v32 + 8);
      swift_retain();
    }

    unint64_t v33 = *(void *)(v11 + 40);
    BOOL v34 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v6, v34);
    uint64_t v35 = -1LL << *(_BYTE *)(v11 + 32);
    uint64_t v36 = result & ~v35;
    int64_t v37 = v36 >> 6;
    if (((-1LL << v36) & ~*(void *)(v16 + 8 * (v36 >> 6))) != 0)
    {
      int64_t v19 = __clz(__rbit64((-1LL << v36) & ~*(void *)(v16 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v38 = 0;
      __int128 v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        int v40 = v37 == v39;
        if (v37 == v39) {
          int64_t v37 = 0LL;
        }
        v38 |= v40;
        uint64_t v41 = *(void *)(v16 + 8 * v37);
      }

      while (v41 == -1);
      int64_t v19 = __clz(__rbit64(~v41)) + (v37 << 6);
    }

    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v48 + 32))( *(void *)(v11 + 48) + v27 * v19,  v8,  v6);
    unint64_t v20 = *(void *)(v11 + 56) + 16 * v19;
    *(_BYTE *)unint64_t v20 = v30;
    *(void *)(v20 + 8) = v31;
    ++*(void *)(v11 + 16);
  }

  swift_release();
  int v3 = v43;
  int64_t v24 = v45;
  if ((v47 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v42 = 1LL << *(_BYTE *)(v9 + 32);
  if (v42 >= 64) {
    bzero(v24, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *int64_t v24 = -1LL << v42;
  }
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release();
  *int v3 = v11;
  return result;
}

      uint64_t v2 = v131;
      unint64_t v18 = v130;
      int64_t v38 = v134;
      if (v138 == 1)
      {
        if (v29 < v134) {
          goto LABEL_139;
        }
        if (v134 < v29)
        {
          __int128 v39 = 0LL;
          int v40 = v145;
          uint64_t v41 = v145 * (v29 - 1);
          uint64_t v42 = v29 * v145;
          uint64_t v43 = v134;
          __int128 v44 = v134 * v145;
          do
          {
            if (v43 != v29 + v39 - 1)
            {
              char v45 = v132;
              if (!v132) {
                goto LABEL_144;
              }
              uint64_t v46 = v29;
              __int128 v47 = v132 + v44;
              __int128 v48 = v132 + v41;
              sub_100090240(v132 + v44, v133);
              if (v44 < v41 || v47 >= v45 + v42)
              {
                swift_arrayInitWithTakeFrontToBack(v45 + v44, v45 + v41, 1LL, v143);
                int v40 = v145;
              }

              else
              {
                int v40 = v145;
                if (v44 != v41) {
                  swift_arrayInitWithTakeBackToFront(v47, v48);
                }
              }

              sub_100090240(v133, v48);
              uint64_t v29 = v46;
            }

            ++v43;
            --v39;
            v41 -= v40;
            v42 -= v40;
            v44 += v40;
          }

          while (v43 < v29 + v39);
          uint64_t v12 = v141;
          a1 = v142;
          unint64_t v18 = v130;
          uint64_t v2 = v131;
          int64_t v38 = v134;
        }
      }
    }

    if (v29 < v12)
    {
      if (__OFSUB__(v29, v38)) {
        goto LABEL_137;
      }
      if (v29 - v38 < v129) {
        break;
      }
    }

      unint64_t v4 = (v11 - 1) & v11;
      uint64_t v9 = __clz(__rbit64(v11)) + (v6 << 6);
    }

    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8 * v9);
    uint64_t v14 = *(void *)(v13 + 16);
    uint64_t v15 = v7[2];
    unint64_t v16 = v15 + v14;
    if (__OFADD__(v15, v14)) {
      break;
    }
    swift_bridgeObjectRetain(*(void *)(*(void *)(a1 + 56) + 8 * v9));
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
    if (isUniquelyReferenced_nonNull_native && v16 <= v7[3] >> 1)
    {
      if (!*(void *)(v13 + 16)) {
        goto LABEL_4;
      }
    }

    else
    {
      if (v15 <= v16) {
        unint64_t v18 = v15 + v14;
      }
      else {
        unint64_t v18 = v15;
      }
      uint64_t v7 = (void *)sub_1004C44A8(isUniquelyReferenced_nonNull_native, v18, 1, (unint64_t)v7);
      if (!*(void *)(v13 + 16))
      {
LABEL_4:
        if (v14) {
          goto LABEL_44;
        }
        goto LABEL_5;
      }
    }

    int64_t v19 = v7[2];
    unint64_t v20 = (v7[3] >> 1) - v19;
    unint64_t v21 = type metadata accessor for Date(0LL);
    if (v20 < v14) {
      goto LABEL_45;
    }
    unint64_t v22 = *(void *)(v21 - 8);
    int64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
    int64_t v24 = *(void *)(v22 + 72);
    unint64_t v25 = (char *)v7 + v23 + v24 * v19;
    int64_t v26 = v13 + v23;
    uint64_t v27 = v24 * v14;
    unint64_t v28 = &v25[v27];
    uint64_t v29 = v26 + v27;
    swift_arrayInitWithCopy(v25);
    if (v14)
    {
      unint64_t v31 = v7[2];
      char v32 = __OFADD__(v31, v14);
      unint64_t v33 = v31 + v14;
      if (v32) {
        goto LABEL_46;
      }
      v7[2] = v33;
    }

    v39(v53, v8);
    goto LABEL_24;
  }

  swift_bridgeObjectRetain(v65);
  __int128 v66 = sub_10030D124(a1);
  if ((v67 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }

  __int128 v68 = *(void *)(*(void *)(v65 + 56) + 8 * v66);
  swift_retain();
  swift_bridgeObjectRelease();
  if (a2)
  {
    __int128 v69 = v97;
    v100(v97, a1, v8);
    swift_errorRetain(a2);
    swift_errorRetain(a2);
    __int128 v70 = swift_errorRetain(a2);
    __int128 v71 = (os_log_s *)Logger.logObject.getter(v70);
    uint64_t v72 = static os_log_type_t.error.getter(v71);
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v73 = swift_slowAlloc(22LL, -1LL);
      int v103 = (void (*)(char *, uint64_t))swift_slowAlloc(64LL, -1LL);
      uint64_t v107 = (uint64_t)v103;
      *(_DWORD *)uint64_t v73 = 136315394;
      uint64_t v74 = sub_1000F620C();
      uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter(v8, v74);
      id v104 = sub_1003F11D4(v75, v76, &v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v73 + 4, v73 + 12);
      swift_bridgeObjectRelease();
      v39(v69, v8);
      *(_WORD *)(v73 + 12) = 2080;
      id v104 = a2;
      swift_errorRetain(a2);
      uint64_t v77 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v78 = String.init<A>(describing:)(&v104, v77);
      id v104 = sub_1003F11D4(v78, v79, &v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v73 + 14, v73 + 22);
      swift_bridgeObjectRelease();
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl( (void *)&_mh_execute_header,  v71,  v72,  "didStartPlayingUnauthorizedSoundOnDevice %s failed due to %s",  (uint8_t *)v73,  0x16u);
      unint64_t v80 = v103;
      swift_arrayDestroy(v103, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v80, -1LL, -1LL);
      swift_slowDealloc(v73, -1LL, -1LL);
    }

    else
    {
      v39(v69, v8);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    uint64_t v107 = a2;
    swift_errorRetain(a2);
    PassthroughSubject.send(completion:)(&v107);
    swift_release(v68);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }

  else
  {
    uint64_t v85 = v96;
    uint64_t v86 = v100(v96, a1, v8);
    uint64_t v87 = (os_log_s *)Logger.logObject.getter(v86);
    uint64_t v88 = static os_log_type_t.default.getter(v87);
    if (os_log_type_enabled(v87, v88))
    {
      uint64_t v89 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v90 = swift_slowAlloc(32LL, -1LL);
      uint64_t v107 = v90;
      int v103 = v39;
      *(_DWORD *)uint64_t v89 = 136315138;
      id v91 = sub_1000F620C();
      id v92 = dispatch thunk of CustomStringConvertible.description.getter(v8, v91);
      id v104 = sub_1003F11D4(v92, v93, &v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v89 + 4, v89 + 12);
      swift_bridgeObjectRelease();
      v103(v96, v8);
      _os_log_impl( (void *)&_mh_execute_header,  v87,  v88,  "didStartPlayingUnauthorizedSoundOnDevice %s succeeded",  v89,  0xCu);
      swift_arrayDestroy(v90, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v90, -1LL, -1LL);
      swift_slowDealloc(v89, -1LL, -1LL);
    }

    else
    {
      v39(v85, v8);
    }

    PassthroughSubject.send(_:)(a1);
    uint64_t v107 = 4LL;
    PassthroughSubject.send(completion:)(&v107);
    swift_release(v68);
  }

      uint64_t result = swift_bridgeObjectRelease();
    }

    if (++v4 == a2) {
      goto LABEL_36;
    }
  }

  __break(1u);
  return result;
}

    int64_t v23 = (v29 - 1) & v29;
    uint64_t v27 = __clz(__rbit64(v29)) + (v25 << 6);
LABEL_24:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v15 + 16))( v19,  *(void *)(a1 + 48) + *(void *)(v15 + 72) * v27,  v14,  v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v19, 0LL, 1LL, v14);
    __int128 v65 = v25;
    unint64_t v31 = a1;
    char v32 = v19;
    unint64_t v33 = (uint64_t)v66;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v66, v32, v14);
    BOOL v34 = v9;
    uint64_t v35 = v63;
    sub_100504F30(v33, (uint64_t)v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1LL, v64) == 1)
    {
      sub_100015794((uint64_t)v8, (uint64_t *)&unk_1009A9C30);
      int64_t v19 = v61;
      a1 = v31;
    }

    else
    {
      sub_10002218C((uint64_t)v8, (uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
      uint64_t v36 = (uint64_t)v13;
      int64_t v37 = v55;
      sub_10001DC4C(v36, v55, type metadata accessor for OwnedBeaconRecord);
      int64_t v38 = *(unsigned __int8 *)(v9 + 80);
      __int128 v39 = (v38 + 24) & ~v38;
      int v40 = v35;
      uint64_t v41 = v54;
      uint64_t v42 = v39 + v56;
      uint64_t v43 = swift_allocObject(&unk_10093FF10, v39 + v56 + 1, v38 | 7);
      *(void *)(v43 + swift_weakDestroy(v0 + 16) = v40;
      sub_10002218C(v37, v43 + v39, type metadata accessor for OwnedBeaconRecord);
      *(_BYTE *)(v43 + v42) = v53;
      __int128 v44 = sub_100004AEC(&qword_1009A2598);
      swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
      swift_retain();
      char v45 = Future.init(_:)(sub_100153404, v43);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v45);
      __int128 v47 = *(void *)((*v41 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      uint64_t v46 = *(void *)((*v41 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v47 >= v46 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1LL);
      }
      __int128 v48 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v47, v45);
      specialized Array._endMutation()(v48);
      __int128 v49 = (uint64_t)v51;
      sub_100018C68((uint64_t)v51, type metadata accessor for OwnedBeaconRecord);
      uint64_t v8 = v57;
      a1 = v58;
      uint64_t v9 = v34;
      uint64_t v13 = (char *)v49;
      int64_t v19 = v61;
      uint64_t v15 = v52;
    }

    uint64_t v14 = v62;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v66, v62);
    unint64_t v25 = v65;
  }

  unint64_t v30 = v28 + 4;
  if (v30 >= v60)
  {
LABEL_29:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v15 + 56))(v19, 1LL, 1LL, v14, v24);
LABEL_30:
    swift_release();
    return;
  }

  uint64_t v29 = *(void *)(v59 + 8 * v30);
  if (v29)
  {
    unint64_t v25 = v30;
    goto LABEL_23;
  }

  while (1)
  {
    unint64_t v25 = v30 + 1;
    if (__OFADD__(v30, 1LL)) {
      break;
    }
    if (v25 >= v60) {
      goto LABEL_29;
    }
    uint64_t v29 = *(void *)(v59 + 8 * v25);
    ++v30;
    if (v29) {
      goto LABEL_23;
    }
  }

    __break(1u);
    goto LABEL_24;
  }

  sub_10004C92C(v14, a2 & 1);
  unint64_t v16 = sub_10030CF14(v7, v8);
  if ((v15 & 1) == (v17 & 1))
  {
    uint64_t v11 = v16;
    if ((v15 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    int64_t v19 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0LL, 0LL);
    swift_willThrow(v19);
    unint64_t v52 = v19;
    swift_errorRetain(v19);
    unint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    if ((swift_dynamicCast(v20, &v52, v20, &type metadata for _MergeError, 0LL) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v46);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_errorRelease(v52);
    }

    goto LABEL_26;
  }

  __break(1u);
LABEL_24:
  unint64_t v16 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v16,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_24:
  uint64_t v17 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v17,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_24:
  unint64_t v16 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v16,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_24:
  unint64_t v25 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v25,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_24:
  unint64_t v16 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v16,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_24:
  unint64_t v16 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v16,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_24:
  unint64_t v16 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v16,  1092LL,  0);
  __break(1u);
  return result;
}

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100022898(0LL, (unint64_t *)&qword_1009A5510, &OBJC_CLASS___CLLocation_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100022898(0LL, (unint64_t *)&unk_1009A0B20, &OBJC_CLASS___SPBeacon_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100022898(0LL, &qword_1009A4790, &OBJC_CLASS___SPCommandKeys_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100022898(0LL, &qword_1009A47B8, &OBJC_CLASS___SPCommandKey_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

    a1 = v135;
    if ((v129 & 1) == 0) {
      break;
    }
    if (v13 < v16) {
      goto LABEL_138;
    }
    if (v16 >= v13) {
      break;
    }
    uint64_t v35 = v16;
    uint64_t v36 = v13;
    int64_t v37 = v14;
    int64_t v38 = 40 * v36 - 40;
    __int128 v39 = 40 * v35;
    int v40 = v36;
    uint64_t v41 = v35;
    do
    {
      if (v41 != --v36)
      {
        if (!v127) {
          goto LABEL_143;
        }
        uint64_t v42 = v127 + v39;
        uint64_t v43 = v127 + v38;
        sub_100012EC0((__int128 *)(v127 + v39), (uint64_t)&v141);
        __int128 v44 = *(void *)(v43 + 32);
        char v45 = *(_OWORD *)(v43 + 16);
        *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
        *(_OWORD *)(v42 + swift_weakDestroy(v0 + 16) = v45;
        *(void *)(v42 + 32) = v44;
        sub_100012EC0(&v141, v43);
      }

      ++v41;
      v38 -= 40LL;
      v39 += 40LL;
    }

    while (v41 < v36);
    uint64_t v14 = v37;
    a1 = v135;
    uint64_t v13 = v40;
    unint64_t v4 = v132;
    uint64_t v7 = v133;
    unint64_t v16 = v130;
    if (v13 < v133) {
      goto LABEL_33;
    }
LABEL_52:
    if (v13 < v16) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0) {
      uint64_t v14 = sub_1003CB1DC(0LL, *((void *)v14 + 2) + 1LL, 1, v14);
    }
    __int128 v61 = *((void *)v14 + 2);
    __int128 v60 = *((void *)v14 + 3);
    uint64_t v15 = v61 + 1;
    if (v61 >= v60 >> 1) {
      uint64_t v14 = sub_1003CB1DC((char *)(v60 > 1), v61 + 1, 1, v14);
    }
    *((void *)v14 + 2) = v15;
    __int128 v62 = v14 + 32;
    __int128 v63 = &v14[16 * v61 + 32];
    *(void *)__int128 v63 = v16;
    *((void *)v63 + 1) = v13;
    if (v61)
    {
      a1 = v135;
      while (1)
      {
        __int128 v64 = v15 - 1;
        if (v15 >= 4)
        {
          __int128 v69 = &v62[16 * v15];
          __int128 v70 = *((void *)v69 - 8);
          __int128 v71 = *((void *)v69 - 7);
          uint64_t v75 = __OFSUB__(v71, v70);
          uint64_t v72 = v71 - v70;
          if (v75) {
            goto LABEL_120;
          }
          uint64_t v74 = *((void *)v69 - 6);
          uint64_t v73 = *((void *)v69 - 5);
          uint64_t v75 = __OFSUB__(v73, v74);
          __int128 v67 = v73 - v74;
          __int128 v68 = v75;
          if (v75) {
            goto LABEL_121;
          }
          unsigned int v76 = v15 - 2;
          uint64_t v77 = &v62[16 * v15 - 32];
          uint64_t v79 = *(void *)v77;
          uint64_t v78 = *((void *)v77 + 1);
          uint64_t v75 = __OFSUB__(v78, v79);
          unint64_t v80 = v78 - v79;
          if (v75) {
            goto LABEL_123;
          }
          uint64_t v75 = __OFADD__(v67, v80);
          uint64_t v81 = v67 + v80;
          if (v75) {
            goto LABEL_126;
          }
          if (v81 >= v72)
          {
            id v99 = &v62[16 * v64];
            id v101 = *(void *)v99;
            NSString v100 = *((void *)v99 + 1);
            uint64_t v75 = __OFSUB__(v100, v101);
            id v102 = v100 - v101;
            if (v75) {
              goto LABEL_130;
            }
            id v92 = v67 < v102;
            goto LABEL_90;
          }
        }

        else
        {
          if (v15 != 3)
          {
            uint64_t v93 = *((void *)v14 + 4);
            unint64_t v94 = *((void *)v14 + 5);
            uint64_t v75 = __OFSUB__(v94, v93);
            uint64_t v86 = v94 - v93;
            uint64_t v87 = v75;
            goto LABEL_84;
          }

          __int128 v66 = *((void *)v14 + 4);
          __int128 v65 = *((void *)v14 + 5);
          uint64_t v75 = __OFSUB__(v65, v66);
          __int128 v67 = v65 - v66;
          __int128 v68 = v75;
        }

        if ((v68 & 1) != 0) {
          goto LABEL_122;
        }
        unsigned int v76 = v15 - 2;
        id v82 = &v62[16 * v15 - 32];
        uint64_t v84 = *(void *)v82;
        uint64_t v83 = *((void *)v82 + 1);
        uint64_t v85 = __OFSUB__(v83, v84);
        uint64_t v86 = v83 - v84;
        uint64_t v87 = v85;
        if (v85) {
          goto LABEL_125;
        }
        uint64_t v88 = &v62[16 * v64];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        uint64_t v75 = __OFSUB__(v89, v90);
        id v91 = v89 - v90;
        if (v75) {
          goto LABEL_128;
        }
        if (__OFADD__(v86, v91)) {
          goto LABEL_129;
        }
        if (v86 + v91 >= v67)
        {
          id v92 = v67 < v91;
LABEL_90:
          if (v92) {
            __int128 v64 = v76;
          }
          goto LABEL_92;
        }

    unint64_t v21 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v23 << 6);
LABEL_24:
    uint64_t v29 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v10 + 16);
    v29(v17, *(void *)(v50 + 48) + *(void *)(v10 + 72) * v25, v9, v22);
    unint64_t v30 = *(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56);
    v30(v17, 0LL, 1LL, v9);
    __int128 v51 = v23;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v17, v9);
    unint64_t v31 = sub_100577F1C((uint64_t)v12);
    if (v31[2])
    {
      char v32 = v45;
      sub_10001DC4C( (uint64_t)v31 + ((*(unsigned __int8 *)(v45 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80)),  (uint64_t)v7,  type metadata accessor for NotifyWhenFoundRecord);
      unint64_t v33 = 0LL;
    }

    else
    {
      unint64_t v33 = 1LL;
      char v32 = v45;
    }

    BOOL v34 = found;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v7, v33, 1LL, found);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v7, 1LL, v34) == 1)
    {
      sub_100015794((uint64_t)v7, &qword_1009AA900);
    }

    else
    {
      uint64_t v35 = v40;
      sub_10002218C((uint64_t)v7, v40, type metadata accessor for NotifyWhenFoundRecord);
      uint64_t v36 = v35 + *(int *)(v34 + 20);
      int64_t v37 = (uint64_t)v39;
      ((void (*)(char *, uint64_t, uint64_t))v29)(v39, v36, v9);
      sub_100018C68(v35, type metadata accessor for NotifyWhenFoundRecord);
      v30((char *)v37, 0LL, 1LL, v9);
      sub_1000D4D50(v37, v41, &qword_10099D8A0);
      *uint64_t v42 = 0LL;
    }

    uint64_t v17 = v46;
    uint64_t v12 = i;
    int64_t v23 = v51;
  }

  unint64_t v28 = v26 + 4;
  if (v28 >= v44)
  {
LABEL_30:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))(v17, 1LL, 1LL, v9, v22);
LABEL_31:
    swift_release();
    return;
  }

  uint64_t v27 = *(void *)(v43 + 8 * v28);
  if (v27)
  {
    int64_t v23 = v28;
    goto LABEL_23;
  }

  while (1)
  {
    int64_t v23 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v23 >= v44) {
      goto LABEL_30;
    }
    uint64_t v27 = *(void *)(v43 + 8 * v23);
    ++v28;
    if (v27) {
      goto LABEL_23;
    }
  }

      if ((v32 & 0x8000000000000000LL) != 0) {
        goto LABEL_40;
      }
      unint64_t v54 = v32 - v40;
      if (__OFSUB__(v32, v40)) {
        goto LABEL_42;
      }
      if ((v54 & 0x8000000000000000LL) != 0) {
        goto LABEL_43;
      }
      if (v11 <= v54) {
        unint64_t v16 = v32 - v40;
      }
      else {
        unint64_t v16 = v11;
      }
LABEL_29:
      uint64_t v78 = (void (**)(char *, uint64_t))v40;
      if (qword_10099B3E0 != -1) {
LABEL_36:
      }
        swift_once(&qword_10099B3E0, sub_1003DCC84);
      unint64_t v55 = type metadata accessor for Logger(0LL);
      sub_10000A720(v55, (uint64_t)qword_100A2A8D8);
      uint64_t v56 = ((uint64_t (*)(char *, char *, uint64_t))v14[2])(a4, v80, a2);
      uint64_t v36 = Logger.logObject.getter(v56);
      __int128 v57 = static os_log_type_t.default.getter(v36);
      int v40 = v57;
      if (os_log_type_enabled((os_log_t)v36, v57))
      {
        uint64_t v58 = swift_slowAlloc(52LL, -1LL);
        uint64_t v59 = swift_slowAlloc(32LL, -1LL);
        uint64_t v77 = (char *)v59;
        *(_DWORD *)uint64_t v58 = 141559043;
        uint64_t v81 = 1752392040LL;
        id v82 = v59;
        __int128 v69 = v10;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v58 + 4, v58 + 12);
        *(_WORD *)(v58 + 12) = 2081;
        char v32 = v58 + 14;
        __int128 v60 = sub_1000F620C();
        __int128 v61 = dispatch thunk of CustomStringConvertible.description.getter(v79, v60);
        uint64_t v81 = sub_1003F11D4(v61, v62, &v82);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v58 + 14, v58 + 22);
        swift_bridgeObjectRelease();
        __int128 v63 = v14[1];
        v63(a4, v79);
        *(_WORD *)(v58 + 22) = 2048;
        uint64_t v81 = v11;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v58 + 24, v58 + 32);
        *(_WORD *)(v58 + 32) = 2048;
        uint64_t v81 = v16;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v58 + 34, v58 + 42);
        *(_WORD *)(v58 + 42) = 2048;
        uint64_t v81 = (uint64_t)v78;
        uint64_t v10 = v69;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v58 + 44, v58 + 52);
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v36,  (os_log_type_t)v40,  "        Buckets for beacon %{private,mask.hash}s,secondary index %llu - %llu (factor %lld).",  (uint8_t *)v58,  0x34u);
        __int128 v64 = v77;
        swift_arrayDestroy(v77, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v64, -1LL, -1LL);
        __int128 v65 = v58;
        a2 = v79;
        swift_slowDealloc(v65, -1LL, -1LL);
      }

      else
      {
        __int128 v63 = v14[1];
        v63(a4, a2);
      }

      v72(v73, v10);
      v63(v80, a2);
      if (v16 >= v11)
      {
        (*(void (**)(char *, char *))(v75 + 8))(v74, v76);
        return v11;
      }

      __break(1u);
LABEL_38:
      swift_once(&qword_10099B3E0, sub_1003DCC84);
    }
  }

  uint64_t v14 = v78;
  a2 = v79;
  if ((v36 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }

  uint64_t v11 = v36 - v34;
  if (__OFSUB__(v36, v34)) {
    goto LABEL_41;
  }
  if ((v11 & 0x8000000000000000LL) == 0)
  {
    a4 = v77;
    if (v40 >= 1 && v32 < v40)
    {
      if (v11 <= v32) {
        unint64_t v16 = v32;
      }
      else {
        unint64_t v16 = v36 - v40;
      }
      goto LABEL_29;
    }

    goto LABEL_23;
  }

      uint64_t v81 = *(void *)(v30 + 16);
      if (!v81)
      {
LABEL_28:
        uint64_t v88 = FMNServerInteractionController.FMNResponseFields.data.getter(v73);
        uint64_t v90 = v89;
        sub_100319064(v30, v88, v89, 0LL, v31, v103, v104);
        sub_100016F9C(v88, v90);
        return;
      }

      uint64_t v12 = *(void *)(v105 + 48);
      swift_bridgeObjectRetain(v30);
      id v82 = (char **)(v30 + 40);
      uint64_t v83 = v108;
      while (1)
      {
        uint64_t v84 = (uint64_t)*(v82 - 1);
        int64_t v19 = *v82;
        uint64_t v85 = *(dispatch_queue_s **)(v12 + 16);
        uint64_t v86 = swift_allocObject(&unk_1009509E8, 49LL, 7LL);
        *(void *)(v86 + swift_weakDestroy(v0 + 16) = v12;
        *(void *)(v86 + 24) = v84;
        *(void *)(v86 + 32) = v19;
        *(void *)(v86 + 40) = v83;
        *(_BYTE *)(v86 + 48) = 1;
        uint64_t v11 = (char *)swift_allocObject(&unk_100950A10, 32LL, 7LL);
        *((void *)v11 + 2) = sub_100338CE4;
        *((void *)v11 + 3) = v86;
        uint64_t v115 = sub_100154688;
        uint64_t v116 = v11;
        double aBlock = _NSConcreteStackBlock;
        id v112 = 1107296256LL;
        id v113 = sub_100025BD4;
        uint64_t v114 = &unk_100950A28;
        int64_t v26 = (void (*)(char *, uint64_t))_Block_copy(&aBlock);
        a3 = v116;
        swift_bridgeObjectRetain_n(v19, 2LL);
        uint64_t v87 = v83;
        swift_retain();
        swift_retain();
        swift_release();
        dispatch_sync(v85, v26);
        _Block_release(v26);
        char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v11, "", 120LL, 101LL, 35LL, 1LL);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        if ((isEscapingClosureAtFileLocation & 1) != 0) {
          break;
        }
        v82 += 2;
        if (!--v81)
        {
          unint64_t v30 = v107;
          uint64_t v73 = (id)swift_bridgeObjectRelease();
          unint64_t v31 = v108;
          goto LABEL_28;
        }
      }

      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
  }

  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  __int128 v61 = type metadata accessor for Logger(0LL);
  sub_10000A720(v61, (uint64_t)qword_100A2AE08);
  ((void (*)(char *, uint64_t, uint64_t))isEscapingClosureAtFileLocation)(v16, v106, v12);
  __int128 v62 = v107;
  __int128 v63 = swift_bridgeObjectRetain_n(v107, 2LL);
  __int128 v64 = (os_log_s *)Logger.logObject.getter(v63);
  __int128 v65 = static os_log_type_t.error.getter(v64);
  if (os_log_type_enabled(v64, v65))
  {
    __int128 v66 = swift_slowAlloc(32LL, -1LL);
    __int128 v67 = (void **)swift_slowAlloc(32LL, -1LL);
    double aBlock = v67;
    *(_DWORD *)__int128 v66 = 134218498;
    __int128 v68 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v67);
    v26(v16, v12);
    char v109 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v66 + 4, v66 + 12);
    *(_WORD *)(v66 + 12) = 2048;
    char v109 = *(void *)(v107 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v66 + 14, v66 + 22);
    *(_WORD *)(v66 + 22) = 2080;
    swift_bridgeObjectRetain(v107);
    __int128 v69 = Array.description.getter(v107, &type metadata for String);
    __int128 v71 = v70;
    swift_bridgeObjectRelease();
    char v109 = sub_1003F11D4(v69, v71, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v66 + 24, v66 + 32);
    swift_bridgeObjectRelease_n(v107, 2LL);
    __int128 v62 = v107;
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v64,  v65,  "Error during SubscribeAndFetch %ld. %ld IDs. ForIds %s",  (uint8_t *)v66,  0x20u);
    swift_arrayDestroy(v67, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1LL, -1LL);
    swift_slowDealloc(v66, -1LL, -1LL);

    uint64_t v72 = *(void *)(v62 + 16);
    if (!v72) {
      goto LABEL_34;
    }
LABEL_30:
    uint64_t v12 = *(void *)(v105 + 48);
    swift_bridgeObjectRetain(v62);
    id v91 = (char **)(v62 + 40);
    do
    {
      id v92 = (uint64_t)*(v91 - 1);
      int64_t v19 = *v91;
      char isEscapingClosureAtFileLocation = *(void *)(v12 + 16);
      uint64_t v93 = swift_allocObject(&unk_100950970, 49LL, 7LL);
      *(void *)(v93 + swift_weakDestroy(v0 + 16) = v12;
      *(void *)(v93 + 24) = v92;
      *(void *)(v93 + 32) = v19;
      *(void *)(v93 + 40) = a3;
      *(_BYTE *)(v93 + 48) = 2;
      uint64_t v11 = (char *)swift_allocObject(&unk_100950998, 32LL, 7LL);
      *((void *)v11 + 2) = sub_100338CE4;
      *((void *)v11 + 3) = v93;
      uint64_t v115 = sub_100154688;
      uint64_t v116 = v11;
      double aBlock = _NSConcreteStackBlock;
      id v112 = 1107296256LL;
      id v113 = sub_100025BD4;
      uint64_t v114 = &unk_1009509B0;
      int64_t v26 = (void (*)(char *, uint64_t))_Block_copy(&aBlock);
      swift_bridgeObjectRetain_n(v19, 2LL);
      unint64_t v94 = a3;
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync((dispatch_queue_t)isEscapingClosureAtFileLocation, v26);
      _Block_release(v26);
      LOBYTE(v92) = swift_isEscapingClosureAtFileLocation(v11, "", 120LL, 101LL, 35LL, 1LL);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      if ((v92 & 1) != 0) {
        goto LABEL_36;
      }
      v91 += 2;
      --v72;
    }

    while (v72);
    __int128 v62 = v107;
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }

  v26(v16, v12);

  swift_bridgeObjectRelease_n(v62, 2LL);
  uint64_t v72 = *(void *)(v62 + 16);
  if (v72) {
    goto LABEL_30;
  }
LABEL_34:
  static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
  uint64_t v95 = objc_allocWithZone(&OBJC_CLASS___NSError);
  uint64_t v96 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v97 = [v95 initWithDomain:v96 code:0 userInfo:0];

  NSString v98 = v97;
  sub_100319064(v62, 0LL, 0xF000000000000000LL, (uint64_t)v97, a3, v103, v104);
}

  __break(1u);
  return result;
}

    unint64_t v31 = sub_100004AEC(&qword_1009AAB18);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))(v12, 1LL, 1LL, v31);
    int64_t v19 = 0LL;
  }

  __break(1u);
LABEL_40:
  swift_once(&qword_10099B5E0, sub_1005C6624);
LABEL_36:
  __int128 v50 = type metadata accessor for Logger(0LL);
  __int128 v51 = sub_10000A720(v50, (uint64_t)qword_100A2AE08);
  unint64_t v52 = v69;
  uint64_t v53 = (os_log_s *)Logger.logObject.getter(v51);
  unint64_t v54 = static os_log_type_t.default.getter(v53);
  if (os_log_type_enabled(v53, v54))
  {
    unint64_t v55 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)unint64_t v55 = 67109120;
    LODWORD(v67[0]) = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v67, (char *)v67 + 4, v55 + 4, v55 + 8);
    _os_log_impl( (void *)&_mh_execute_header,  v53,  v54,  "SubscribeAndFetch - hasActiveShallowSubscriptions %{BOOL}d",  v55,  8u);
    swift_slowDealloc(v55, -1LL, -1LL);
  }

  swift_beginAccess(&v69, v67, 0LL, 0LL);
  char *v60 = v69;
}

  *int64_t v37 = v17;
  return result;
}

    uint64_t v58 = (v29 - 1) & v29;
    uint64_t v27 = __clz(__rbit64(v29)) + (v24 << 6);
LABEL_24:
    unint64_t v31 = *(void *)(v10 + 72);
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v10 + 16))( v15,  *(void *)(v54 + 48) + v31 * v27,  v9,  v23);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v15, 0LL, 1LL, v9);
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v22, v15, v9);
    char v32 = *v20;
    unint64_t v33 = *(void *)(*v20 + 16);
    __int128 v57 = v24;
    if (v33)
    {
      swift_bridgeObjectRetain(v32);
      BOOL v34 = sub_10030D124(v22);
      if ((v35 & 1) != 0)
      {
        uint64_t v36 = v34;
        int64_t v37 = *(void *)(v32 + 56);
        int64_t v38 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
        __int128 v39 = *(void *)(v38 - 8);
        int v40 = v37 + *(void *)(v39 + 72) * v36;
        uint64_t v8 = v55;
        sub_10001DC4C(v40, (uint64_t)v55, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v8, 0LL, 1LL, v38);
      }

      else
      {
        int64_t v38 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56LL))(v8, 1LL, 1LL, v38);
      }

      swift_bridgeObjectRelease();
      unint64_t v22 = v56;
    }

    else
    {
      int64_t v38 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56LL))(v8, 1LL, 1LL, v38);
    }

    type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
    uint64_t v41 = *(void *)(v38 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v8, 1LL, v38))
    {
      sub_100015794((uint64_t)v8, &qword_10099E488);
    }

    else
    {
      swift_retain();
      uint64_t v42 = sub_100015794((uint64_t)v8, &qword_10099E488);
      dispatch thunk of DispatchWorkItem.cancel()(v42);
      swift_release();
    }

    swift_beginAccess(v20, v59, 33LL, 0LL);
    swift_bridgeObjectRetain(*v20);
    uint64_t v43 = sub_10030D124(v22);
    char v45 = v44;
    swift_bridgeObjectRelease();
    if ((v45 & 1) != 0)
    {
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v20);
      __int128 v47 = *v20;
      __int128 v61 = *v20;
      *unint64_t v20 = 0x8000000000000000LL;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10006324C();
        __int128 v47 = v61;
      }

      (*(void (**)(unint64_t, uint64_t))(v10 + 8))(*(void *)(v47 + 48) + v43 * v31, v9);
      __int128 v48 = v61;
      int64_t v26 = v53;
      sub_10002218C( *(void *)(v61 + 56) + *(void *)(v41 + 72) * v43,  v53,  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      sub_100058DD8(v43, v48);
      *unint64_t v20 = v48;
      swift_bridgeObjectRelease();
      unint64_t v25 = 0LL;
    }

    else
    {
      unint64_t v25 = 1LL;
      int64_t v26 = v53;
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v26, v25, 1LL, v38);
    sub_100015794(v26, &qword_10099E488);
    swift_endAccess(v59);
    unint64_t v22 = v56;
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v56, v9);
    uint64_t v8 = v55;
    uint64_t v15 = v52;
    int64_t v24 = v57;
    int64_t v19 = v58;
  }

  unint64_t v30 = v28 + 4;
  if (v30 >= v51)
  {
LABEL_38:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))(v15, 1LL, 1LL, v9, v23);
LABEL_39:
    swift_release();
    return;
  }

  uint64_t v29 = *(void *)(v50 + 8 * v30);
  if (v29)
  {
    int64_t v24 = v30;
    goto LABEL_23;
  }

  while (1)
  {
    int64_t v24 = v30 + 1;
    if (__OFADD__(v30, 1LL)) {
      break;
    }
    if (v24 >= v51) {
      goto LABEL_38;
    }
    uint64_t v29 = *(void *)(v50 + 8 * v24);
    ++v30;
    if (v29) {
      goto LABEL_23;
    }
  }

    uint64_t v14 = (v21 - 1) & v21;
    uint64_t v29 = v22;
    int64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
LABEL_24:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16))( v10,  *(void *)(a1 + 48) + *(void *)(v5 + 72) * v19,  v4,  v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v10, 0LL, 1LL, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    if (*(void *)(*v28 + 16LL))
    {
      swift_bridgeObjectRetain(*v28);
      sub_10030D124((uint64_t)v7);
      if ((v24 & 1) != 0)
      {
        swift_retain();
        swift_bridgeObjectRelease();
        unint64_t v31 = 4LL;
        PassthroughSubject.send(completion:)(&v31);
        uint64_t v10 = v26;
        swift_release();
      }

      else
      {
        swift_bridgeObjectRelease();
      }
    }

    sub_100381A9C((uint64_t)v7, 0, 0LL);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v17 = v29;
  }

  int64_t v23 = v17 + 5;
  if (v17 + 5 >= v27)
  {
LABEL_28:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56))(v10, 1LL, 1LL, v4, v16);
LABEL_29:
    swift_release();
    return;
  }

  unint64_t v21 = *(void *)(v11 + 8 * v23);
  if (v21)
  {
    unint64_t v22 = v17 + 5;
    goto LABEL_23;
  }

  while (1)
  {
    unint64_t v22 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v22 >= v27) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v11 + 8 * v22);
    ++v23;
    if (v21) {
      goto LABEL_23;
    }
  }

    uint64_t v13 = (v24 - 1) & v24;
    unint64_t v20 = v25;
    unint64_t v21 = __clz(__rbit64(v24)) + (v25 << 6);
LABEL_24:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16))( v22,  *(void *)(v18 + 48) + *(void *)(v5 + 72) * v21,  v4,  v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v22, 0LL, 1LL, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v22, v4);
    if (*(void *)(*v14 + 16LL))
    {
      swift_bridgeObjectRetain(*v14);
      sub_10030D124((uint64_t)v7);
      if ((v27 & 1) != 0)
      {
        swift_retain();
        swift_bridgeObjectRelease();
        unint64_t v33 = 4LL;
        PassthroughSubject.send(completion:)(&v33);
        uint64_t v14 = v29;
        swift_release();
      }

      else
      {
        swift_bridgeObjectRelease();
      }
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    unint64_t v16 = v20;
  }

  int64_t v26 = v16 + 5;
  if (v16 + 5 >= v30)
  {
LABEL_28:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56))(v31, 1LL, 1LL, v4, v15);
LABEL_29:
    swift_release();
    return;
  }

  int64_t v24 = *(void *)(v10 + 8 * v26);
  if (v24)
  {
    unint64_t v25 = v16 + 5;
    goto LABEL_23;
  }

  while (1)
  {
    unint64_t v25 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v25 >= v30) {
      goto LABEL_28;
    }
    int64_t v24 = *(void *)(v10 + 8 * v25);
    ++v26;
    if (v24) {
      goto LABEL_23;
    }
  }

    uint64_t v6 = (v12 - 1) & v12;
    uint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_6:
    sub_1003CF378(*(_BYTE *)(*(void *)(a1 + 48) + v10));
  }

  uint64_t v13 = v11 + 4;
  if (v13 >= v7)
  {
LABEL_24:
    swift_release(a1);
    return;
  }

  uint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12)
  {
    uint64_t v8 = v13;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v8 >= v7) {
      goto LABEL_24;
    }
    uint64_t v12 = *(void *)(v3 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_23;
    }
  }

    uint64_t v6 = (v16 - 1) & v16;
    uint64_t v10 = __clz(__rbit64(v16)) + (v8 << 6);
LABEL_6:
    uint64_t v11 = *(void *)(a1 + 48) + 24 * v10;
    uint64_t v12 = *(void *)(v11 + 8);
    uint64_t v13 = *(void *)(v11 + 16);
    uint64_t v14 = *(_BYTE *)v11;
    swift_bridgeObjectRetain(v13);
    sub_1003CFC7C(v14, v12, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  uint64_t v17 = v15 + 4;
  if (v17 >= v7)
  {
LABEL_24:
    swift_release();
    return;
  }

  unint64_t v16 = *(void *)(v3 + 8 * v17);
  if (v16)
  {
    uint64_t v8 = v17;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v8 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v8 >= v7) {
      goto LABEL_24;
    }
    unint64_t v16 = *(void *)(v3 + 8 * v8);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }

    unint64_t v16 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v18 << 6);
LABEL_6:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))( v12,  *(void *)(a1 + 48) + *(void *)(v7 + 72) * v20,  v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
    sub_1003CFE2C((uint64_t)v10, (uint64_t)v5);
    sub_100015794((uint64_t)v5, &qword_1009AC300);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }

  int64_t v23 = v21 + 4;
  if (v23 >= v17)
  {
LABEL_24:
    swift_release();
    return;
  }

  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    unint64_t v18 = v23;
    goto LABEL_23;
  }

  while (1)
  {
    unint64_t v18 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v18 >= v17) {
      goto LABEL_24;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v18);
    ++v23;
    if (v22) {
      goto LABEL_23;
    }
  }

    uint64_t v13 = (v30 - 1) & v30;
    unint64_t v16 = __clz(__rbit64(v30)) + (v14 << 6);
LABEL_8:
    uint64_t v17 = 16 * v16;
    unint64_t v18 = (uint64_t *)(*((void *)v52 + 6) + v17);
    uint64_t v10 = *v18;
    int64_t v19 = v18[1];
    unint64_t v20 = (uint64_t *)(*((void *)v52 + 7) + v17);
    unint64_t v21 = *v20;
    unint64_t v22 = v20[1];
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v22);
    int64_t v24 = static os_log_type_t.debug.getter(v23);
    unint64_t v25 = qword_100A2B0A8;
    int64_t v26 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v27 = swift_allocObject(v26, 112LL, 7LL);
    *(_OWORD *)(v27 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    *(void *)(v27 + 56) = &type metadata for String;
    unint64_t v28 = sub_1000226F4();
    *(void *)(v27 + 32) = v10;
    *(void *)(v27 + 40) = v19;
    *(void *)(v27 + 96) = &type metadata for String;
    *(void *)(v27 + 104) = v28;
    *(void *)(v27 + 64) = v28;
    *(void *)(v27 + 72) = v21;
    *(void *)(v27 + 80) = v22;
    os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "%@: %@", 6LL, 2LL, v27);
    swift_bridgeObjectRelease();
  }

  unint64_t v31 = v29 + 3;
  if (v31 < v51)
  {
    unint64_t v30 = *(void *)&v50[8 * v31];
    if (!v30)
    {
      while (1)
      {
        uint64_t v14 = v31 + 1;
        if (__OFADD__(v31, 1LL)) {
          goto LABEL_26;
        }
        if (v14 >= v51) {
          goto LABEL_24;
        }
        unint64_t v30 = *(void *)&v50[8 * v14];
        ++v31;
        if (v30) {
          goto LABEL_23;
        }
      }
    }

    uint64_t v14 = v31;
    goto LABEL_23;
  }

    uint64_t v12 = (v28 - 1) & v28;
    uint64_t v14 = __clz(__rbit64(v28)) + (v5 << 6);
LABEL_8:
    uint64_t v15 = 16 * v14;
    unint64_t v16 = (uint64_t *)(*(void *)(v51 + 48) + v15);
    uint64_t v17 = *v16;
    unint64_t v18 = v16[1];
    int64_t v19 = (void *)(*(void *)(v51 + 56) + v15);
    uint64_t v0 = (void *)*v19;
    unint64_t v20 = v19[1];
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v20);
    unint64_t v22 = static os_log_type_t.debug.getter(v21);
    int64_t v23 = qword_100A2B0A8;
    int64_t v24 = sub_100004AEC((uint64_t *)&unk_10099D740);
    unint64_t v25 = swift_allocObject(v24, 112LL, 7LL);
    *(_OWORD *)(v25 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    *(void *)(v25 + 56) = &type metadata for String;
    int64_t v26 = sub_1000226F4();
    *(void *)(v25 + 32) = v17;
    *(void *)(v25 + 40) = v18;
    *(void *)(v25 + 96) = &type metadata for String;
    *(void *)(v25 + 104) = v26;
    *(void *)(v25 + 64) = v26;
    *(void *)(v25 + 72) = v0;
    *(void *)(v25 + 80) = v20;
    os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v23, "%@: %@", 6LL, 2LL, v25);
    swift_bridgeObjectRelease();
  }

  uint64_t v29 = v27 + 3;
  if (v29 < v50)
  {
    unint64_t v28 = *(void *)(v49 + 8 * v29);
    if (!v28)
    {
      while (1)
      {
        uint64_t v5 = v29 + 1;
        if (__OFADD__(v29, 1LL)) {
          goto LABEL_26;
        }
        if (v5 >= v50) {
          goto LABEL_24;
        }
        unint64_t v28 = *(void *)(v49 + 8 * v5);
        ++v29;
        if (v28) {
          goto LABEL_23;
        }
      }
    }

    uint64_t v5 = v29;
    goto LABEL_23;
  }

    swift_bridgeObjectRelease();
    if ((v23 & 0x20000000000000LL) == 0)
    {
LABEL_13:
      if ((v23 & 0x40000000000000LL) == 0) {
        goto LABEL_14;
      }
      goto LABEL_25;
    }

    swift_once(&qword_10099B798, sub_100651870);
    goto LABEL_4;
  }

  unint64_t v28 = *(void *)v24;
  sub_10001736C(*(void *)v24, *(void *)(v24 + 8));
  sub_10001736C(v28, v25);
  uint64_t v29 = sub_1004D92F0(v28, v25);
  id v99 = v30;
  uint64_t v96 = v8;
  char v32 = v31;
  sub_1000182F0(v28, v25);
  sub_10001736C(v29, v32);
  sub_100178638(v29, v32);
  uint64_t v97 = v29;
  NSString v98 = v32;
  uint64_t v36 = v113;
  int64_t v37 = v23;
  int64_t v38 = v112;
  uint64_t v93 = v37;
  __int128 v39 = *(void *)(v22 + v37);
  uint64_t v114 = &type metadata for CollaborativeKeyGen.v1.C2;
  uint64_t v115 = (_UNKNOWN **)sub_1004D5B90();
  id v112 = v38;
  id v113 = v36;
  sub_100015750((uint64_t)&v112, (uint64_t)v108, &qword_10099F5B0);
  int v40 = v39 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC2;
  swift_beginAccess(v39 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC2, v111, 33LL, 0LL);
  swift_retain();
  sub_10001736C(v38, v36);
  sub_1000D4D50((uint64_t)v108, v40, &qword_10099F5B0);
  swift_endAccess(v111);
  swift_release();
  uint64_t v114 = (ValueMetadata *)type metadata accessor for CollaborativeKeyGen.v1.OwnerContext();
  uint64_t v115 = &off_1009602C8;
  id v112 = v99;
  sub_100015750((uint64_t)&v112, (uint64_t)v108, &qword_10099CE58);
  unint64_t v94 = v22;
  uint64_t v41 = v22 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingOwnerContext;
  swift_beginAccess( v22 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingOwnerContext,  v111,  33LL,  0LL);
  swift_retain();
  sub_1000D4D50((uint64_t)v108, v41, &qword_10099CE58);
  uint64_t v42 = swift_endAccess(v111);
  uint64_t v43 = static os_log_type_t.debug.getter(v42);
  if (qword_10099B798 != -1) {
    swift_once(&qword_10099B798, sub_100651870);
  }
  __int128 v44 = qword_100A2B0A8;
  uint64_t v90 = sub_100004AEC((uint64_t *)&unk_10099D740);
  char v45 = swift_allocObject(v90, 72LL, 7LL);
  uint64_t v89 = xmmword_1007E67D0;
  *(_OWORD *)(v45 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v95 = Data.hexString.getter(v97, v98);
  id v92 = v46;
  *(void *)(v45 + 56) = &type metadata for String;
  id v91 = sub_1000226F4();
  *(void *)(v45 + 64) = v91;
  __int128 v47 = v92;
  *(void *)(v45 + 32) = v95;
  *(void *)(v45 + 40) = v47;
  os_log(_:dso:log:_:_:)(v43, &_mh_execute_header, v44, "C2: %@.", 7LL, 2LL, v45);
  swift_bridgeObjectRelease();
  __int128 v49 = v105;
  __int128 v48 = v106;
  (*(void (**)(char *, void, uint64_t))(v105 + 104))(v14, enum case for HashAlgorithm.sha256(_:), v106);
  sub_10001736C(v38, v36);
  __int128 v50 = Data.hash(algorithm:)(v14, v38, v36);
  uint64_t v95 = v51;
  sub_100016F9C(v38, v36);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v14, v48);
  unint64_t v52 = v93;
  uint64_t v53 = v94;
  swift_retain();
  uint64_t v106 = v50;
  unint64_t v54 = v50;
  unint64_t v55 = v95;
  sub_100092A74(v54, v95, (uint64_t)v108);
  swift_release();
  sub_100015750((uint64_t)v108, (uint64_t)&v112, &qword_10099F5C8);
  uint64_t v56 = sub_1004D5BD4((uint64_t)&v112);
  if ((_DWORD)v56 == 1)
  {
    __int128 v57 = static os_log_type_t.error.getter(v56);
    os_log(_:dso:log:_:_:)( v57,  &_mh_execute_header,  qword_100A2B0A8,  "Unable to create pairing check data.",  36LL,  2LL,  _swiftEmptyArrayStorage);
    swift_release();
    sub_100016F9C(v38, v36);
    sub_1000182F0(v28, v25);
    sub_100016F9C(v97, v98);
    sub_100016F9C(v106, v55);
    int64_t v26 = 0xD00000000000001ALL;
    uint64_t v58 = "Invalid E2 from accessory!";
LABEL_6:
    uint64_t v27 = (char *)(v58 - 32);
    goto LABEL_7;
  }

  id v92 = v38;
  uint64_t v105 = v28;
  uint64_t v59 = v104;
  sub_1004D38B4((uint64_t)v104);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v59, v103);
  if ((_DWORD)EnumCaseMultiPayload != 1)
  {
    int v103 = v36;
    uint64_t v73 = (uint64_t)v96;
    uint64_t v74 = sub_10002218C((uint64_t)v59, (uint64_t)v96, type metadata accessor for AccessoryPairingLockCheckResponse);
    uint64_t v75 = static os_log_type_t.default.getter(v74);
    os_log(_:dso:log:_:_:)( v75,  &_mh_execute_header,  qword_100A2B0A8,  "Received Seed, S2, and C3 from server.",  38LL,  2LL,  _swiftEmptyArrayStorage);
    unsigned int v76 = *(void *)(v53 + v52);
    uint64_t v77 = v53;
    uint64_t v78 = v52;
    uint64_t v79 = v73 + *(int *)(v100 + 32);
    unint64_t v80 = type metadata accessor for UUID(0LL);
    uint64_t v81 = *(void *)(v80 - 8);
    id v82 = (uint64_t)v101;
    (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v101, v79, v80);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v81 + 56))(v82, 0LL, 1LL, v80);
    uint64_t v83 = v102;
    sub_100015750(v82, v102, &qword_10099D8A0);
    uint64_t v84 = v76 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId;
    swift_beginAccess(v76 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId, v111, 33LL, 0LL);
    swift_retain();
    sub_1000D4D50(v83, v84, &qword_10099D8A0);
    swift_endAccess(v111);
    swift_release();
    uint64_t v85 = *(void *)(v77 + v78);
    uint64_t v86 = *(void *)(v73 + 56);
    *(void *)(v85 + 120) = *(void *)(v73 + 48);
    *(void *)(v85 + 128) = v86;
    swift_bridgeObjectRetain(v86);
    swift_bridgeObjectRelease();
    uint64_t v88 = v97;
    uint64_t v87 = v98;
    sub_1004D5BEC(v73, (uint64_t)v109);
    sub_100015750((uint64_t)v109, (uint64_t)v110, &qword_1009B1898);
    if ((~(v110[1] & v110[3] & v110[5] & v110[7] & v110[9]) & 0x3000000000000000LL) != 0)
    {
      sub_1004D5994((uint64_t)v110, (uint64_t)v111);
      sub_100018C68(v73, type metadata accessor for AccessoryPairingLockCheckResponse);
      swift_release();
      sub_100016F9C(v92, v103);
      sub_1000182F0(v105, v25);
      sub_100016F9C(v88, v87);
      sub_1004D5F68((uint64_t)v108);
      sub_100016F9C(v106, v95);
      unint64_t v33 = v107;
      sub_1004D5994((uint64_t)v111, (uint64_t)v107);
      uint64_t v35 = 0;
      goto LABEL_10;
    }

    sub_1000182F0(v105, v25);
    sub_1004D5F68((uint64_t)v108);
    sub_100016F9C(v106, v95);
    swift_release();
    sub_100016F9C(v92, v103);
    sub_100016F9C(v88, v87);
    sub_100018C68(v73, type metadata accessor for AccessoryPairingLockCheckResponse);
    int64_t v26 = 0xD000000000000019LL;
    uint64_t v58 = "Invalid token from server";
    goto LABEL_6;
  }

  __int128 v61 = *v59;
  __int128 v62 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
  __int128 v63 = qword_100A2B0A8;
  __int128 v64 = swift_allocObject(v90, 72LL, 7LL);
  *(_OWORD *)(v64 + swift_weakDestroy(v0 + 16) = v89;
  v111[0] = v61;
  type metadata accessor for SPPairingSessionError(0LL);
  __int128 v66 = v65;
  __int128 v67 = v61;
  __int128 v68 = String.init<A>(describing:)(v111, v66);
  __int128 v69 = v91;
  *(void *)(v64 + 56) = &type metadata for String;
  *(void *)(v64 + 64) = v69;
  *(void *)(v64 + 32) = v68;
  *(void *)(v64 + 40) = v70;
  os_log(_:dso:log:_:_:)(v62, &_mh_execute_header, v63, "Pairing lock check failed. Error %@", 35LL, 2LL, v64);
  swift_bridgeObjectRelease();
  v110[0] = v67;
  __int128 v71 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
  uint64_t v72 = v67;
  _BridgedStoredNSError.code.getter(v111, v66, v71);
  sub_100016F9C(v97, v98);
  swift_release();
  sub_100016F9C(v92, v36);
  sub_1000182F0(v105, v25);
  sub_1004D5F68((uint64_t)v108);
  sub_100016F9C(v106, v95);

  if (v111[0] != 18LL)
  {
    unint64_t v33 = v107;
    *uint64_t v107 = (unint64_t)v72;
    *((_BYTE *)v33 + 40) = 0;
    goto LABEL_9;
  }

  unint64_t v33 = v107;
  *uint64_t v107 = 8LL;
  *(_OWORD *)(v33 + 1) = 0u;
  *(_OWORD *)(v33 + 3) = 0u;
  BOOL v34 = 11;
LABEL_8:
  *((_BYTE *)v33 + 40) = v34;
LABEL_9:
  uint64_t v35 = 1;
LABEL_10:
  *((_BYTE *)v33 + 80) = v35;
}

    uint64_t v15 = (v19 - 1) & v19;
    uint64_t v17 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_24:
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v6, v10[6] + *(void *)(v1 + 72) * v17, v0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v1 + 56))(v6, 0LL, 1LL, v0);
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v3, v6, v0);
    sub_100514F28();
    uint64_t result = (void *)(*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    if (v15) {
      goto LABEL_5;
    }
  }

  unint64_t v20 = v18 + 5;
  if (v20 >= v22)
  {
LABEL_27:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v6, 1LL, 1LL, v0);
    return (void *)swift_release();
  }

  int64_t v19 = v12[v20];
  if (v19)
  {
    uint64_t v11 = v20;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v11 >= v22) {
      goto LABEL_27;
    }
    int64_t v19 = v12[v11];
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }

  __break(1u);
  return result;
}

    uint64_t v15 = (v19 - 1) & v19;
    uint64_t v17 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_24:
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v6, v10[6] + *(void *)(v1 + 72) * v17, v0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v1 + 56))(v6, 0LL, 1LL, v0);
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v3, v6, v0);
    sub_100515708((uint64_t)v3);
    uint64_t result = (void *)(*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    if (v15) {
      goto LABEL_5;
    }
  }

  unint64_t v20 = v18 + 5;
  if (v20 >= v22)
  {
LABEL_27:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v6, 1LL, 1LL, v0);
    return (void *)swift_release();
  }

  int64_t v19 = v12[v20];
  if (v19)
  {
    uint64_t v11 = v20;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v11 >= v22) {
      goto LABEL_27;
    }
    int64_t v19 = v12[v11];
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }

  __break(1u);
  return result;
}

    swift_release(v4);
    return v9;
  }

  return (void *)v4;
}

    uint64_t v9 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = (unsigned __int8 *)(*(void *)(v4 + 48) + 24 * v13);
    unint64_t v18 = *v17;
    int64_t v19 = *((void *)v17 + 1);
    unint64_t v20 = *((void *)v17 + 2);
    Hasher.init(_seed:)(v33, v8[5]);
    Hasher._combine(_:)(v18);
    swift_bridgeObjectRetain_n(v20, 2LL);
    String.hash(into:)(v33, v19, v20);
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    unint64_t v21 = -1LL << *((_BYTE *)v8 + 32);
    unint64_t v22 = result & ~v21;
    int64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v11 + 8 * (v22 >> 6))) != 0)
    {
      int64_t v24 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v11 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v25 = 0;
      int64_t v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        uint64_t v27 = v23 == v26;
        if (v23 == v26) {
          int64_t v23 = 0LL;
        }
        v25 |= v27;
        unint64_t v28 = *(void *)(v11 + 8 * v23);
      }

      while (v28 == -1);
      int64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }

    *(void *)(v11 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v24;
    uint64_t v29 = v8[6] + 24 * v24;
    *(_BYTE *)uint64_t v29 = v18;
    *(void *)(v29 + 8) = v19;
    *(void *)(v29 + swift_weakDestroy(v0 + 16) = v20;
    ++v8[2];
    if (__OFSUB__(v5--, 1LL))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (!v5) {
      goto LABEL_36;
    }
  }

  unint64_t v16 = v14 + 3;
  if (v16 >= v31) {
    goto LABEL_36;
  }
  uint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v10 >= v31) {
      goto LABEL_36;
    }
    uint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }

    uint64_t v10 = (v16 - 1) & v16;
    uint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    unint64_t v18 = v9[5];
    int64_t v19 = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    uint64_t result = NSObject._rawHashValue(seed:)(v18);
    unint64_t v20 = -1LL << *((_BYTE *)v9 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      int64_t v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        int64_t v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v12 + 8 * v22);
      }

      while (v27 == -1);
      int64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }

    *(void *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    *(void *)(v9[6] + 8 * v23) = v19;
    ++v9[2];
    if (__OFSUB__(v5--, 1LL))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (!v5) {
      goto LABEL_36;
    }
  }

  uint64_t v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_36;
  }
  unint64_t v16 = v29[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v29[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }

    uint64_t v11 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    *(void *)&uint64_t v9 = *(void *)(*(void *)(v4 + 48) + 8 * v15);
    unint64_t v28 = v9;
    Hasher.init(_seed:)(v29, v10[5]);
    Hasher._combine(_:)(v28);
    Hasher._combine(_:)(DWORD1(v28));
    uint64_t result = Hasher._finalize()();
    int64_t v19 = -1LL << *((_BYTE *)v10 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1LL << v20) & ~*(void *)(v13 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1LL << v20) & ~*(void *)(v13 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v23 = 0;
      int64_t v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        unint64_t v25 = v21 == v24;
        if (v21 == v24) {
          unint64_t v21 = 0LL;
        }
        v23 |= v25;
        int64_t v26 = *(void *)(v13 + 8 * v21);
      }

      while (v26 == -1);
      unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }

    *(void *)(v13 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
    *((void *)&v9 + 1) = *((void *)&v28 + 1);
    *(void *)(v10[6] + 8 * v22) = v28;
    ++v10[2];
    if (__OFSUB__(v5--, 1LL))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (!v5) {
      goto LABEL_36;
    }
  }

  unint64_t v18 = v16 + 3;
  if (v18 >= a2) {
    goto LABEL_36;
  }
  uint64_t v17 = a1[v18];
  if (v17)
  {
    uint64_t v12 = v18;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v12 >= a2) {
      goto LABEL_36;
    }
    uint64_t v17 = a1[v12];
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }

    __break(1u);
    goto LABEL_24;
  }

  sub_10004C920(v14, a2 & 1);
  unint64_t v16 = sub_10030CF14(v7, v6);
  if ((v15 & 1) == (v17 & 1))
  {
    uint64_t v11 = v16;
    if ((v15 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    int64_t v19 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0LL, 0LL);
    swift_willThrow(v19);
    __int128 v50 = v19;
    swift_errorRetain(v19);
    unint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    if ((swift_dynamicCast(v20, &v50, v20, &type metadata for _MergeError, 0LL) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n(a1, 2LL);
      return swift_errorRelease(v50);
    }

    goto LABEL_26;
  }

  __break(1u);
  return result;
}

  unint64_t v33 = 0;
  if ((v25 & 0x40) != 0)
  {
LABEL_12:
    uint64_t result = sub_1000182F0(*(void *)&v26[v27[10]], *(void *)&v26[v27[10] + 8]);
    if ((v30 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }

          *(void *)(v0 + 24) = v10;
          *(void *)(v0 + 32) = 0LL;
          return;
        }

        goto LABEL_14;
      }
    }

    uint64_t v8 = v13;
LABEL_14:
    __int16 v1 = (v12 - 1) & v12;
    uint64_t v2 = __clz(__rbit64(v12)) + (v8 << 6);
    uint64_t v6 = v8;
    goto LABEL_3;
  }

  __break(1u);
}

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003FLL,  0x800000010086B6C0LL,  "Foundation/arm64-apple-tvos.private.swiftinterface",  50LL,  2LL,  11704LL,  0);
  __break(1u);
  return result;
}

      if ((v35 & 0x8000000000000000LL) != 0) {
        goto LABEL_40;
      }
      __int128 v49 = v35 - v34;
      if (__OFSUB__(v35, v34)) {
        goto LABEL_42;
      }
      if ((v49 & 0x8000000000000000LL) != 0) {
        goto LABEL_43;
      }
      if (v11 <= v49) {
        uint64_t v10 = v35 - v34;
      }
      else {
        uint64_t v10 = v11;
      }
LABEL_29:
      if (v18[124] != -1) {
LABEL_36:
      }
        swift_once(&qword_10099B3E0, sub_1003DCC84);
      __int128 v50 = type metadata accessor for Logger(0LL);
      sub_10000A720(v50, (uint64_t)qword_100A2A8D8);
      __int128 v51 = ((uint64_t (*)(char *, char *, char *))v73)(v21, v76, v8);
      unint64_t v31 = Logger.logObject.getter(v51);
      unint64_t v52 = static os_log_type_t.default.getter(v31);
      uint64_t v35 = v52;
      if (os_log_type_enabled((os_log_t)v31, v52))
      {
        uint64_t v53 = swift_slowAlloc(52LL, -1LL);
        unint64_t v54 = swift_slowAlloc(32LL, -1LL);
        __int128 v65 = v27;
        unint64_t v55 = v54;
        *(_DWORD *)uint64_t v53 = 141559043;
        uint64_t v77 = 1752392040LL;
        uint64_t v78 = v54;
        uint64_t v72 = v4;
        unint64_t v18 = &v78;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v53 + 4, v53 + 12);
        *(_WORD *)(v53 + 12) = 2081;
        uint64_t v56 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        __int128 v57 = dispatch thunk of CustomStringConvertible.description.getter(v75, v56);
        uint64_t v77 = sub_1003F11D4(v57, v58, &v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v53 + 14, v53 + 22);
        swift_bridgeObjectRelease();
        uint64_t v59 = *(void (**)(char *, char *))(v74 + 8);
        v59(v21, v75);
        *(_WORD *)(v53 + 22) = 2048;
        uint64_t v77 = v11;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v53 + 24, v53 + 32);
        *(_WORD *)(v53 + 32) = 2048;
        uint64_t v77 = v10;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v53 + 34, v53 + 42);
        *(_WORD *)(v53 + 42) = 2048;
        uint64_t v77 = v70;
        unint64_t v4 = v72;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v53 + 44, v53 + 52);
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v31,  (os_log_type_t)v35,  "        Buckets for beacon %{private,mask.hash}s,secondary index %llu - %llu (factor %lld).",  (uint8_t *)v53,  0x34u);
        swift_arrayDestroy(v55, 1LL, (char *)&type metadata for Any + 8);
        __int128 v60 = v55;
        uint64_t v27 = v65;
        swift_slowDealloc(v60, -1LL, -1LL);
        __int128 v61 = v53;
        uint64_t v8 = v75;
        swift_slowDealloc(v61, -1LL, -1LL);
      }

      else
      {
        uint64_t v59 = *(void (**)(char *, char *))(v74 + 8);
        v59(v21, v8);
      }

      v68(v27, v4);
      v59(v76, v8);
      if (v10 >= v11)
      {
        sub_100018C68((uint64_t)v69, type metadata accessor for OwnedBeaconRecord);
        return v11;
      }

      __break(1u);
LABEL_38:
      swift_once(&qword_10099B3E0, sub_1003DCC84);
    }
  }

  uint64_t v8 = v75;
  if ((v31 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }

  uint64_t v11 = v31 - v29;
  if (__OFSUB__(v31, v29)) {
    goto LABEL_41;
  }
  if ((v11 & 0x8000000000000000LL) == 0)
  {
    unint64_t v21 = v71;
    if (v34 >= 1 && v35 < v34)
    {
      if (v11 <= v35) {
        uint64_t v10 = v35;
      }
      else {
        uint64_t v10 = v31 - v34;
      }
      goto LABEL_29;
    }

    goto LABEL_23;
  }

    uint64_t v5 = (v11 - 1) & v11;
    uint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_24:
    sub_10006A5E8(*(void *)(a1 + 48) + 40 * v9, (uint64_t)v31);
    sub_10006A650(*(void *)(a1 + 56) + 32 * v9, (uint64_t)v32 + 8);
    unint64_t v28 = v32[0];
    uint64_t v29 = v32[1];
    unint64_t v30 = v33;
    int64_t v26 = v31[0];
    uint64_t v27 = v31[1];
    sub_10006A5E8((uint64_t)&v26, (uint64_t)v24);
    sub_10006A650((uint64_t)v6, (uint64_t)v25);
    type metadata accessor for CKError(0LL);
    uint64_t v14 = v13;
    if (swift_dynamicCast(&v23, v25, v34, v13, 6LL))
    {
      uint64_t v15 = v6;
      unint64_t v16 = v23;
      sub_10016C77C((uint64_t)v24);
      int64_t v23 = v16;
      uint64_t v17 = sub_100007864( &qword_10099C270,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1007E3760);
      _BridgedStoredNSError.code.getter(v24, v14, v17);

      uint64_t v6 = v15;
      if (v24[0] == 26LL)
      {
        swift_release();
        unint64_t v18 = v29;
        *(_OWORD *)(a2 + 32) = v28;
        *(_OWORD *)(a2 + 48) = v18;
        *(void *)(a2 + 64) = v30;
        int64_t v19 = v27;
        *(_OWORD *)a2 = v26;
        *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v19;
        return;
      }
    }

    else
    {
      sub_10016C77C((uint64_t)v24);
    }

    sub_100015794((uint64_t)&v26, &qword_1009A34F0);
  }

  uint64_t v12 = v10 + 4;
  if (v12 >= v22)
  {
LABEL_27:
    swift_release();
    *(void *)(a2 + 64) = 0LL;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = 0u;
    return;
  }

  uint64_t v11 = *(void *)(v21 + 8 * v12);
  if (v11)
  {
    uint64_t v7 = v12;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      break;
    }
    if (v7 >= v22) {
      goto LABEL_27;
    }
    uint64_t v11 = *(void *)(v21 + 8 * v7);
    ++v12;
    if (v11) {
      goto LABEL_23;
    }
  }

      __break(1u);
      goto LABEL_24;
    }

    __break(1u);
    goto LABEL_23;
  }

  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }

  if (a4 < 0) {
    uint64_t v11 = a4;
  }
  else {
    uint64_t v11 = a4 & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t v12 = __CocoaSet.element(at:)(a1, a2, v11);
  int64_t v24 = v12;
  uint64_t v13 = sub_100022898(0LL, a5, a6);
  swift_unknownObjectRetain(v12);
  swift_dynamicCast(&v25, &v24, (char *)&type metadata for Swift.AnyObject + 8, v13, 7LL);
  swift_unknownObjectRelease(v12);
}

            int64_t v19 = __clz(__rbit64(v20)) + (i << 6);
LABEL_24:
            int64_t v23 = 16 * v19;
            int64_t v24 = (uint64_t *)(*(void *)(v34 + 48) + v23);
            unint64_t v25 = *v24;
            int64_t v26 = v24[1];
            uint64_t v27 = *(void *)(v34 + 56) + v23;
            unint64_t v28 = *(void **)v27;
            uint64_t v29 = *(unsigned __int8 *)(v27 + 8);
            unint64_t v30 = *v18;
            if (*(void *)(*v18 + 16))
            {
              swift_bridgeObjectRetain_n(v24[1], 2LL);
              sub_10006A348(v28, v29);
              swift_bridgeObjectRetain(v30);
              unint64_t v31 = sub_10030CF14(v25, v26);
              if ((v32 & 1) != 0)
              {
                sub_10006A2C0(*(void *)(v30 + 56) + 48 * v31, (uint64_t)&v35);
              }

              else
              {
                int64_t v37 = 0LL;
                uint64_t v35 = 0u;
                uint64_t v36 = 0u;
                int64_t v38 = -1;
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }

            else
            {
              int64_t v37 = 0LL;
              uint64_t v35 = 0u;
              uint64_t v36 = 0u;
              int64_t v38 = -1;
              swift_bridgeObjectRetain(v26);
              sub_10006A348(v28, v29);
            }

            if (v38 != 255)
            {
              sub_10006A2FC((uint64_t)&v35, (uint64_t)&v39);
              __asm { BR              X8 }
            }

            sub_100015794((uint64_t)&v35, &qword_1009BE048);
            __asm { BR              X8 }
          }
        }
      }
    }

            unint64_t v21 = __clz(__rbit64(v22)) + (i << 6);
LABEL_24:
            unint64_t v25 = 16 * v21;
            int64_t v26 = (uint64_t *)(*(void *)(v36 + 48) + v25);
            uint64_t v27 = *v26;
            unint64_t v28 = v26[1];
            uint64_t v29 = *(void *)(v36 + 56) + v25;
            unint64_t v30 = *(void **)v29;
            unint64_t v31 = *(unsigned __int8 *)(v29 + 8);
            char v32 = *v20;
            if (*(void *)(*v20 + 16))
            {
              swift_bridgeObjectRetain_n(v26[1], 2LL);
              sub_10006A348(v30, v31);
              swift_bridgeObjectRetain(v32);
              unint64_t v33 = sub_10030CF14(v27, v28);
              if ((v34 & 1) != 0)
              {
                sub_10006A2C0(*(void *)(v32 + 56) + 48 * v33, (uint64_t)&v37);
              }

              else
              {
                __int128 v39 = 0LL;
                int64_t v37 = 0u;
                int64_t v38 = 0u;
                int v40 = -1;
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }

            else
            {
              __int128 v39 = 0LL;
              int64_t v37 = 0u;
              int64_t v38 = 0u;
              int v40 = -1;
              swift_bridgeObjectRetain(v28);
              sub_10006A348(v30, v31);
            }

            if (v40 != 255)
            {
              sub_10006A2FC((uint64_t)&v37, (uint64_t)&v41);
              __asm { BR              X8 }
            }

            sub_100015794((uint64_t)&v37, &qword_1009BE048);
            __asm { BR              X8 }
          }
        }
      }
    }

            uint64_t v27 = __clz(__rbit64(v28)) + (i << 6);
LABEL_24:
            unint64_t v31 = 16 * v27;
            char v32 = (uint64_t *)(*(void *)(v42 + 48) + v31);
            unint64_t v33 = *v32;
            BOOL v34 = v32[1];
            uint64_t v35 = *(void *)(v42 + 56) + v31;
            uint64_t v36 = *(void **)v35;
            int64_t v37 = *(unsigned __int8 *)(v35 + 8);
            int64_t v38 = *v26;
            if (*(void *)(*v26 + 16))
            {
              swift_bridgeObjectRetain_n(v32[1], 2LL);
              sub_10006A348(v36, v37);
              swift_bridgeObjectRetain(v38);
              __int128 v39 = sub_10030CF14(v33, v34);
              if ((v40 & 1) != 0)
              {
                sub_10006A2C0(*(void *)(v38 + 56) + 48 * v39, (uint64_t)&v43);
              }

              else
              {
                char v45 = 0LL;
                uint64_t v43 = 0u;
                __int128 v44 = 0u;
                uint64_t v46 = -1;
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }

            else
            {
              char v45 = 0LL;
              uint64_t v43 = 0u;
              __int128 v44 = 0u;
              uint64_t v46 = -1;
              swift_bridgeObjectRetain(v34);
              sub_10006A348(v36, v37);
            }

            if (v46 != 255)
            {
              sub_10006A2FC((uint64_t)&v43, (uint64_t)&v47);
              __asm { BR              X8 }
            }

            sub_100015794((uint64_t)&v43, &qword_1009BE048);
            __asm { BR              X8 }
          }
        }
      }
    }

            int64_t v19 = __clz(__rbit64(v20)) + (i << 6);
LABEL_24:
            int64_t v23 = 16 * v19;
            int64_t v24 = (uint64_t *)(*(void *)(v34 + 48) + v23);
            unint64_t v25 = *v24;
            int64_t v26 = v24[1];
            uint64_t v27 = *(void *)(v34 + 56) + v23;
            unint64_t v28 = *(void **)v27;
            uint64_t v29 = *(unsigned __int8 *)(v27 + 8);
            unint64_t v30 = *v18;
            if (*(void *)(*v18 + 16))
            {
              swift_bridgeObjectRetain_n(v24[1], 2LL);
              sub_10006A348(v28, v29);
              swift_bridgeObjectRetain(v30);
              unint64_t v31 = sub_10030CF14(v25, v26);
              if ((v32 & 1) != 0)
              {
                sub_10006A2C0(*(void *)(v30 + 56) + 48 * v31, (uint64_t)&v35);
              }

              else
              {
                int64_t v37 = 0LL;
                uint64_t v35 = 0u;
                uint64_t v36 = 0u;
                int64_t v38 = -1;
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }

            else
            {
              int64_t v37 = 0LL;
              uint64_t v35 = 0u;
              uint64_t v36 = 0u;
              int64_t v38 = -1;
              swift_bridgeObjectRetain(v26);
              sub_10006A348(v28, v29);
            }

            if (v38 != 255)
            {
              sub_10006A2FC((uint64_t)&v35, (uint64_t)&v39);
              __asm { BR              X8 }
            }

            sub_100015794((uint64_t)&v35, &qword_1009BE048);
            __asm { BR              X8 }
          }
        }
      }
    }

            int64_t v23 = __clz(__rbit64(v24)) + (i << 6);
LABEL_24:
            uint64_t v27 = 16 * v23;
            unint64_t v28 = (uint64_t *)(*(void *)(v40 + 48) + v27);
            uint64_t v29 = *v28;
            unint64_t v30 = v28[1];
            unint64_t v31 = *(void *)(v40 + 56) + v27;
            char v32 = *(void **)v31;
            unint64_t v33 = *(unsigned __int8 *)(v31 + 8);
            BOOL v34 = *v22;
            if (*(void *)(*v22 + 16))
            {
              swift_bridgeObjectRetain_n(v28[1], 2LL);
              sub_10006A348(v32, v33);
              swift_bridgeObjectRetain(v34);
              uint64_t v35 = sub_10030CF14(v29, v30);
              if ((v36 & 1) != 0)
              {
                sub_10006A2C0(*(void *)(v34 + 56) + 48 * v35, (uint64_t)&v41);
              }

              else
              {
                uint64_t v43 = 0LL;
                uint64_t v41 = 0u;
                uint64_t v42 = 0u;
                __int128 v44 = -1;
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }

            else
            {
              uint64_t v43 = 0LL;
              uint64_t v41 = 0u;
              uint64_t v42 = 0u;
              __int128 v44 = -1;
              swift_bridgeObjectRetain(v30);
              sub_10006A348(v32, v33);
            }

            if (v44 != 255)
            {
              sub_10006A2FC((uint64_t)&v41, (uint64_t)&v45);
              __asm { BR              X8 }
            }

            sub_100015794((uint64_t)&v41, &qword_1009BE048);
            __asm { BR              X8 }
          }
        }
      }
    }

            uint64_t v17 = __clz(__rbit64(v18)) + (i << 6);
LABEL_24:
            unint64_t v21 = 16 * v17;
            unint64_t v22 = (uint64_t *)(*(void *)(v32 + 48) + v21);
            int64_t v24 = *v22;
            int64_t v23 = v22[1];
            unint64_t v25 = *(void *)(v32 + 56) + v21;
            int64_t v26 = *(void **)v25;
            uint64_t v27 = *(unsigned __int8 *)(v25 + 8);
            unint64_t v28 = *v16;
            if (*(void *)(*v16 + 16))
            {
              swift_bridgeObjectRetain_n(v22[1], 2LL);
              sub_10006A348(v26, v27);
              swift_bridgeObjectRetain(v28);
              uint64_t v29 = sub_10030CF14(v24, v23);
              if ((v30 & 1) != 0)
              {
                sub_10006A2C0(*(void *)(v28 + 56) + 48 * v29, (uint64_t)&v33);
              }

              else
              {
                uint64_t v35 = 0LL;
                unint64_t v33 = 0u;
                BOOL v34 = 0u;
                uint64_t v36 = -1;
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }

            else
            {
              uint64_t v35 = 0LL;
              unint64_t v33 = 0u;
              BOOL v34 = 0u;
              uint64_t v36 = -1;
              swift_bridgeObjectRetain(v23);
              sub_10006A348(v26, v27);
            }

            if (v36 != 255)
            {
              sub_10006A2FC((uint64_t)&v33, (uint64_t)&v37);
              __asm { BR              X8 }
            }

            sub_100015794((uint64_t)&v33, &qword_1009BE048);
            __asm { BR              X8 }
          }
        }
      }
    }

            unint64_t v20 = __clz(__rbit64(v21)) + (i << 6);
LABEL_24:
            int64_t v24 = 16 * v20;
            unint64_t v25 = (uint64_t *)(*((void *)v36 + 6) + v24);
            int64_t v26 = *v25;
            uint64_t v27 = v25[1];
            unint64_t v28 = *((void *)v36 + 7) + v24;
            uint64_t v29 = *(void **)v28;
            unint64_t v30 = *(unsigned __int8 *)(v28 + 8);
            unint64_t v31 = *v19;
            if (*(void *)(*v19 + 16))
            {
              swift_bridgeObjectRetain_n(v25[1], 2LL);
              sub_10006A348(v29, v30);
              swift_bridgeObjectRetain(v31);
              char v32 = sub_10030CF14(v26, v27);
              if ((v33 & 1) != 0)
              {
                sub_10006A2C0(*(void *)(v31 + 56) + 48 * v32, (uint64_t)&v37);
              }

              else
              {
                __int128 v39 = 0LL;
                int64_t v37 = 0u;
                int64_t v38 = 0u;
                int v40 = -1;
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }

            else
            {
              __int128 v39 = 0LL;
              int64_t v37 = 0u;
              int64_t v38 = 0u;
              int v40 = -1;
              swift_bridgeObjectRetain(v27);
              sub_10006A348(v29, v30);
            }

            if (v40 != 255)
            {
              sub_10006A2FC((uint64_t)&v37, (uint64_t)&v41);
              __asm { BR              X8 }
            }

            sub_100015794((uint64_t)&v37, &qword_1009BE048);
            __asm { BR              X8 }
          }
        }
      }
    }

            int64_t v19 = __clz(__rbit64(v20)) + (i << 6);
LABEL_24:
            int64_t v23 = 16 * v19;
            int64_t v24 = (uint64_t *)(*(void *)(v34 + 48) + v23);
            unint64_t v25 = *v24;
            int64_t v26 = v24[1];
            uint64_t v27 = *(void *)(v34 + 56) + v23;
            unint64_t v28 = *(void **)v27;
            uint64_t v29 = *(unsigned __int8 *)(v27 + 8);
            unint64_t v30 = *v18;
            if (*(void *)(*v18 + 16))
            {
              swift_bridgeObjectRetain_n(v24[1], 2LL);
              sub_10006A348(v28, v29);
              swift_bridgeObjectRetain(v30);
              unint64_t v31 = sub_10030CF14(v25, v26);
              if ((v32 & 1) != 0)
              {
                sub_10006A2C0(*(void *)(v30 + 56) + 48 * v31, (uint64_t)&v35);
              }

              else
              {
                int64_t v37 = 0LL;
                uint64_t v35 = 0u;
                uint64_t v36 = 0u;
                int64_t v38 = -1;
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }

            else
            {
              int64_t v37 = 0LL;
              uint64_t v35 = 0u;
              uint64_t v36 = 0u;
              int64_t v38 = -1;
              swift_bridgeObjectRetain(v26);
              sub_10006A348(v28, v29);
            }

            if (v38 != 255)
            {
              sub_10006A2FC((uint64_t)&v35, (uint64_t)&v39);
              __asm { BR              X8 }
            }

            sub_100015794((uint64_t)&v35, &qword_1009BE048);
            __asm { BR              X8 }
          }
        }
      }
    }

            unint64_t v20 = __clz(__rbit64(v21)) + (i << 6);
LABEL_24:
            int64_t v24 = 16 * v20;
            unint64_t v25 = (uint64_t *)(*((void *)v36 + 6) + v24);
            int64_t v26 = *v25;
            uint64_t v27 = v25[1];
            unint64_t v28 = *((void *)v36 + 7) + v24;
            uint64_t v29 = *(void **)v28;
            unint64_t v30 = *(unsigned __int8 *)(v28 + 8);
            unint64_t v31 = *v19;
            if (*(void *)(*v19 + 16))
            {
              swift_bridgeObjectRetain_n(v25[1], 2LL);
              sub_10006A348(v29, v30);
              swift_bridgeObjectRetain(v31);
              char v32 = sub_10030CF14(v26, v27);
              if ((v33 & 1) != 0)
              {
                sub_10006A2C0(*(void *)(v31 + 56) + 48 * v32, (uint64_t)&v37);
              }

              else
              {
                __int128 v39 = 0LL;
                int64_t v37 = 0u;
                int64_t v38 = 0u;
                int v40 = -1;
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }

            else
            {
              __int128 v39 = 0LL;
              int64_t v37 = 0u;
              int64_t v38 = 0u;
              int v40 = -1;
              swift_bridgeObjectRetain(v27);
              sub_10006A348(v29, v30);
            }

            if (v40 != 255)
            {
              sub_10006A2FC((uint64_t)&v37, (uint64_t)&v41);
              __asm { BR              X8 }
            }

            sub_100015794((uint64_t)&v37, &qword_1009BE048);
            __asm { BR              X8 }
          }
        }
      }
    }

            unint64_t v18 = __clz(__rbit64(v19)) + (i << 6);
LABEL_24:
            unint64_t v22 = 16 * v18;
            int64_t v23 = (uint64_t *)(*((void *)v34 + 6) + v22);
            int64_t v24 = *v23;
            unint64_t v25 = v23[1];
            int64_t v26 = *((void *)v34 + 7) + v22;
            uint64_t v27 = *(void **)v26;
            unint64_t v28 = *(unsigned __int8 *)(v26 + 8);
            uint64_t v29 = *v17;
            if (*(void *)(*v17 + 16))
            {
              swift_bridgeObjectRetain_n(v23[1], 2LL);
              sub_10006A348(v27, v28);
              swift_bridgeObjectRetain(v29);
              unint64_t v30 = sub_10030CF14(v24, v25);
              if ((v31 & 1) != 0)
              {
                sub_10006A2C0(*(void *)(v29 + 56) + 48 * v30, (uint64_t)&v35);
              }

              else
              {
                int64_t v37 = 0LL;
                uint64_t v35 = 0u;
                uint64_t v36 = 0u;
                int64_t v38 = -1;
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }

            else
            {
              int64_t v37 = 0LL;
              uint64_t v35 = 0u;
              uint64_t v36 = 0u;
              int64_t v38 = -1;
              swift_bridgeObjectRetain(v25);
              sub_10006A348(v27, v28);
            }

            if (v38 != 255)
            {
              sub_10006A2FC((uint64_t)&v35, (uint64_t)&v39);
              __asm { BR              X8 }
            }

            sub_100015794((uint64_t)&v35, &qword_1009BE048);
            __asm { BR              X8 }
          }
        }
      }
    }

            unint64_t v30 = __clz(__rbit64(v31)) + (i << 6);
LABEL_24:
            BOOL v34 = 16 * v30;
            uint64_t v35 = (uint64_t *)(*((void *)v48 + 6) + v34);
            int64_t v37 = *v35;
            uint64_t v36 = v35[1];
            int64_t v38 = *((void *)v48 + 7) + v34;
            __int128 v39 = *(void **)v38;
            int v40 = *(unsigned __int8 *)(v38 + 8);
            uint64_t v41 = *v29;
            if (*(void *)(*v29 + 16))
            {
              swift_bridgeObjectRetain_n(v35[1], 2LL);
              sub_10006A348(v39, v40);
              swift_bridgeObjectRetain(v41);
              uint64_t v42 = sub_10030CF14(v37, v36);
              if ((v43 & 1) != 0)
              {
                sub_10006A2C0(*(void *)(v41 + 56) + 48 * v42, (uint64_t)&v49);
              }

              else
              {
                __int128 v51 = 0LL;
                __int128 v49 = 0u;
                __int128 v50 = 0u;
                unint64_t v52 = -1;
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }

            else
            {
              __int128 v51 = 0LL;
              __int128 v49 = 0u;
              __int128 v50 = 0u;
              unint64_t v52 = -1;
              swift_bridgeObjectRetain(v36);
              sub_10006A348(v39, v40);
            }

            if (v52 != 255)
            {
              sub_10006A2FC((uint64_t)&v49, (uint64_t)&v53);
              __asm { BR              X8 }
            }

            sub_100015794((uint64_t)&v49, &qword_1009BE048);
            __asm { BR              X8 }
          }
        }
      }
    }

            int64_t v23 = __clz(__rbit64(v24)) + (i << 6);
LABEL_24:
            uint64_t v27 = 16 * v23;
            unint64_t v28 = (uint64_t *)(*(void *)(v18 + 48) + v27);
            unint64_t v30 = *v28;
            uint64_t v29 = v28[1];
            unint64_t v31 = *(void *)(v18 + 56) + v27;
            char v32 = *(void **)v31;
            unint64_t v33 = *(unsigned __int8 *)(v31 + 8);
            BOOL v34 = *v22;
            if (*(void *)(*v22 + 16))
            {
              swift_bridgeObjectRetain_n(v28[1], 2LL);
              sub_10006A348(v32, v33);
              swift_bridgeObjectRetain(v34);
              uint64_t v35 = sub_10030CF14(v30, v29);
              if ((v36 & 1) != 0)
              {
                sub_10006A2C0(*(void *)(v34 + 56) + 48 * v35, (uint64_t)&v37);
              }

              else
              {
                __int128 v39 = 0LL;
                int64_t v37 = 0u;
                int64_t v38 = 0u;
                int v40 = -1;
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }

            else
            {
              __int128 v39 = 0LL;
              int64_t v37 = 0u;
              int64_t v38 = 0u;
              int v40 = -1;
              swift_bridgeObjectRetain(v29);
              sub_10006A348(v32, v33);
            }

            if (v40 != 255)
            {
              sub_10006A2FC((uint64_t)&v37, (uint64_t)&v41);
              __asm { BR              X8 }
            }

            sub_100015794((uint64_t)&v37, &qword_1009BE048);
            __asm { BR              X8 }
          }
        }
      }
    }

            unint64_t v18 = __clz(__rbit64(v19)) + (i << 6);
LABEL_24:
            unint64_t v22 = 16 * v18;
            int64_t v23 = (uint64_t *)(*((void *)v34 + 6) + v22);
            int64_t v24 = *v23;
            unint64_t v25 = v23[1];
            int64_t v26 = *((void *)v34 + 7) + v22;
            uint64_t v27 = *(void **)v26;
            unint64_t v28 = *(unsigned __int8 *)(v26 + 8);
            uint64_t v29 = *v17;
            if (*(void *)(*v17 + 16))
            {
              swift_bridgeObjectRetain_n(v23[1], 2LL);
              sub_10006A348(v27, v28);
              swift_bridgeObjectRetain(v29);
              unint64_t v30 = sub_10030CF14(v24, v25);
              if ((v31 & 1) != 0)
              {
                sub_10006A2C0(*(void *)(v29 + 56) + 48 * v30, (uint64_t)&v35);
              }

              else
              {
                int64_t v37 = 0LL;
                uint64_t v35 = 0u;
                uint64_t v36 = 0u;
                int64_t v38 = -1;
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }

            else
            {
              int64_t v37 = 0LL;
              uint64_t v35 = 0u;
              uint64_t v36 = 0u;
              int64_t v38 = -1;
              swift_bridgeObjectRetain(v25);
              sub_10006A348(v27, v28);
            }

            if (v38 != 255)
            {
              sub_10006A2FC((uint64_t)&v35, (uint64_t)&v39);
              __asm { BR              X8 }
            }

            sub_100015794((uint64_t)&v35, &qword_1009BE048);
            __asm { BR              X8 }
          }
        }
      }
    }

            unint64_t v22 = __clz(__rbit64(v23)) + (i << 6);
LABEL_24:
            int64_t v26 = 16 * v22;
            uint64_t v27 = (uint64_t *)(*((void *)v38 + 6) + v26);
            unint64_t v28 = *v27;
            uint64_t v29 = v27[1];
            unint64_t v30 = *((void *)v38 + 7) + v26;
            unint64_t v31 = *(void **)v30;
            char v32 = *(unsigned __int8 *)(v30 + 8);
            unint64_t v33 = *v21;
            if (*(void *)(*v21 + 16))
            {
              swift_bridgeObjectRetain_n(v27[1], 2LL);
              sub_10006A348(v31, v32);
              swift_bridgeObjectRetain(v33);
              BOOL v34 = sub_10030CF14(v28, v29);
              if ((v35 & 1) != 0)
              {
                sub_10006A2C0(*(void *)(v33 + 56) + 48 * v34, (uint64_t)&v39);
              }

              else
              {
                uint64_t v41 = 0LL;
                __int128 v39 = 0u;
                int v40 = 0u;
                uint64_t v42 = -1;
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }

            else
            {
              uint64_t v41 = 0LL;
              __int128 v39 = 0u;
              int v40 = 0u;
              uint64_t v42 = -1;
              swift_bridgeObjectRetain(v29);
              sub_10006A348(v31, v32);
            }

            if (v42 != 255)
            {
              sub_10006A2FC((uint64_t)&v39, (uint64_t)&v43);
              __asm { BR              X8 }
            }

            sub_100015794((uint64_t)&v39, &qword_1009BE048);
            __asm { BR              X8 }
          }
        }
      }
    }

            unint64_t v25 = __clz(__rbit64(v26)) + (i << 6);
LABEL_24:
            uint64_t v29 = 16 * v25;
            unint64_t v30 = (uint64_t *)(*(void *)(v42 + 48) + v29);
            unint64_t v31 = *v30;
            char v32 = v30[1];
            unint64_t v33 = *(void *)(v42 + 56) + v29;
            BOOL v34 = *(void **)v33;
            uint64_t v35 = *(unsigned __int8 *)(v33 + 8);
            uint64_t v36 = *v24;
            if (*(void *)(*v24 + 16))
            {
              swift_bridgeObjectRetain_n(v30[1], 2LL);
              sub_10006A348(v34, v35);
              swift_bridgeObjectRetain(v36);
              int64_t v37 = sub_10030CF14(v31, v32);
              if ((v38 & 1) != 0)
              {
                sub_10006A2C0(*(void *)(v36 + 56) + 48 * v37, (uint64_t)&v43);
              }

              else
              {
                char v45 = 0LL;
                uint64_t v43 = 0u;
                __int128 v44 = 0u;
                uint64_t v46 = -1;
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }

            else
            {
              char v45 = 0LL;
              uint64_t v43 = 0u;
              __int128 v44 = 0u;
              uint64_t v46 = -1;
              swift_bridgeObjectRetain(v32);
              sub_10006A348(v34, v35);
            }

            if (v46 != 255)
            {
              sub_10006A2FC((uint64_t)&v43, (uint64_t)&v47);
              __asm { BR              X8 }
            }

            sub_100015794((uint64_t)&v43, &qword_1009BE048);
            __asm { BR              X8 }
          }
        }
      }
    }

            int64_t v19 = __clz(__rbit64(v20)) + (i << 6);
LABEL_24:
            int64_t v23 = 16 * v19;
            int64_t v24 = (uint64_t *)(*(void *)(v34 + 48) + v23);
            int64_t v26 = *v24;
            unint64_t v25 = v24[1];
            uint64_t v27 = *(void *)(v34 + 56) + v23;
            unint64_t v28 = *(void **)v27;
            uint64_t v29 = *(unsigned __int8 *)(v27 + 8);
            unint64_t v30 = *v18;
            if (*(void *)(*v18 + 16))
            {
              swift_bridgeObjectRetain_n(v24[1], 2LL);
              sub_10006A348(v28, v29);
              swift_bridgeObjectRetain(v30);
              unint64_t v31 = sub_10030CF14(v26, v25);
              if ((v32 & 1) != 0)
              {
                sub_10006A2C0(*(void *)(v30 + 56) + 48 * v31, (uint64_t)&v35);
              }

              else
              {
                int64_t v37 = 0LL;
                uint64_t v35 = 0u;
                uint64_t v36 = 0u;
                int64_t v38 = -1;
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }

            else
            {
              int64_t v37 = 0LL;
              uint64_t v35 = 0u;
              uint64_t v36 = 0u;
              int64_t v38 = -1;
              swift_bridgeObjectRetain(v25);
              sub_10006A348(v28, v29);
            }

            if (v38 != 255)
            {
              sub_10006A2FC((uint64_t)&v35, (uint64_t)&v39);
              __asm { BR              X8 }
            }

            sub_100015794((uint64_t)&v35, &qword_1009BE048);
            __asm { BR              X8 }
          }
        }
      }
    }

            int64_t v19 = __clz(__rbit64(v20)) + (i << 6);
LABEL_24:
            int64_t v23 = 16 * v19;
            int64_t v24 = (uint64_t *)(*(void *)(v34 + 48) + v23);
            int64_t v26 = *v24;
            unint64_t v25 = v24[1];
            uint64_t v27 = *(void *)(v34 + 56) + v23;
            unint64_t v28 = *(void **)v27;
            uint64_t v29 = *(unsigned __int8 *)(v27 + 8);
            unint64_t v30 = *v18;
            if (*(void *)(*v18 + 16))
            {
              swift_bridgeObjectRetain_n(v24[1], 2LL);
              sub_10006A348(v28, v29);
              swift_bridgeObjectRetain(v30);
              unint64_t v31 = sub_10030CF14(v26, v25);
              if ((v32 & 1) != 0)
              {
                sub_10006A2C0(*(void *)(v30 + 56) + 48 * v31, (uint64_t)&v35);
              }

              else
              {
                int64_t v37 = 0LL;
                uint64_t v35 = 0u;
                uint64_t v36 = 0u;
                int64_t v38 = -1;
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }

            else
            {
              int64_t v37 = 0LL;
              uint64_t v35 = 0u;
              uint64_t v36 = 0u;
              int64_t v38 = -1;
              swift_bridgeObjectRetain(v25);
              sub_10006A348(v28, v29);
            }

            if (v38 != 255)
            {
              sub_10006A2FC((uint64_t)&v35, (uint64_t)&v39);
              __asm { BR              X8 }
            }

            sub_100015794((uint64_t)&v35, &qword_1009BE048);
            __asm { BR              X8 }
          }
        }
      }
    }

            uint64_t v17 = __clz(__rbit64(v18)) + (i << 6);
LABEL_24:
            unint64_t v21 = 16 * v17;
            unint64_t v22 = (uint64_t *)(*(void *)(v32 + 48) + v21);
            int64_t v23 = *v22;
            int64_t v24 = v22[1];
            unint64_t v25 = *(void *)(v32 + 56) + v21;
            int64_t v26 = *(void **)v25;
            uint64_t v27 = *(unsigned __int8 *)(v25 + 8);
            unint64_t v28 = *v16;
            if (*(void *)(*v16 + 16))
            {
              swift_bridgeObjectRetain_n(v22[1], 2LL);
              sub_10006A348(v26, v27);
              swift_bridgeObjectRetain(v28);
              uint64_t v29 = sub_10030CF14(v23, v24);
              if ((v30 & 1) != 0)
              {
                sub_10006A2C0(*(void *)(v28 + 56) + 48 * v29, (uint64_t)&v33);
              }

              else
              {
                uint64_t v35 = 0LL;
                unint64_t v33 = 0u;
                BOOL v34 = 0u;
                uint64_t v36 = -1;
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }

            else
            {
              uint64_t v35 = 0LL;
              unint64_t v33 = 0u;
              BOOL v34 = 0u;
              uint64_t v36 = -1;
              swift_bridgeObjectRetain(v24);
              sub_10006A348(v26, v27);
            }

            if (v36 != 255)
            {
              sub_10006A2FC((uint64_t)&v33, (uint64_t)&v37);
              __asm { BR              X8 }
            }

            sub_100015794((uint64_t)&v33, &qword_1009BE048);
            __asm { BR              X8 }
          }
        }
      }
    }

            int64_t v26 = __clz(__rbit64(v27)) + (i << 6);
LABEL_24:
            unint64_t v30 = 16 * v26;
            unint64_t v31 = (uint64_t *)(*(void *)(v42 + 48) + v30);
            char v32 = *v31;
            unint64_t v33 = v31[1];
            BOOL v34 = *(void *)(v42 + 56) + v30;
            uint64_t v35 = *(void **)v34;
            uint64_t v36 = *(unsigned __int8 *)(v34 + 8);
            int64_t v37 = *v25;
            if (*(void *)(*v25 + 16))
            {
              swift_bridgeObjectRetain_n(v31[1], 2LL);
              sub_10006A348(v35, v36);
              swift_bridgeObjectRetain(v37);
              int64_t v38 = sub_10030CF14(v32, v33);
              if ((v39 & 1) != 0)
              {
                sub_10006A2C0(*(void *)(v37 + 56) + 48 * v38, (uint64_t)&v43);
              }

              else
              {
                char v45 = 0LL;
                uint64_t v43 = 0u;
                __int128 v44 = 0u;
                uint64_t v46 = -1;
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }

            else
            {
              char v45 = 0LL;
              uint64_t v43 = 0u;
              __int128 v44 = 0u;
              uint64_t v46 = -1;
              swift_bridgeObjectRetain(v33);
              sub_10006A348(v35, v36);
            }

            if (v46 != 255)
            {
              sub_10006A2FC((uint64_t)&v43, (uint64_t)&v47);
              __asm { BR              X8 }
            }

            sub_100015794((uint64_t)&v43, &qword_1009BE048);
            __asm { BR              X8 }
          }
        }
      }
    }

            unint64_t v21 = __clz(__rbit64(v22)) + (i << 6);
LABEL_24:
            unint64_t v25 = 16 * v21;
            int64_t v26 = (uint64_t *)(*(void *)(v38 + 48) + v25);
            uint64_t v27 = *v26;
            unint64_t v28 = v26[1];
            uint64_t v29 = *(void *)(v38 + 56) + v25;
            unint64_t v30 = *(void **)v29;
            unint64_t v31 = *(unsigned __int8 *)(v29 + 8);
            char v32 = *v20;
            if (*(void *)(*v20 + 16))
            {
              swift_bridgeObjectRetain_n(v26[1], 2LL);
              sub_10006A348(v30, v31);
              swift_bridgeObjectRetain(v32);
              unint64_t v33 = sub_10030CF14(v27, v28);
              if ((v34 & 1) != 0)
              {
                sub_10006A2C0(*(void *)(v32 + 56) + 48 * v33, (uint64_t)&v39);
              }

              else
              {
                uint64_t v41 = 0LL;
                __int128 v39 = 0u;
                int v40 = 0u;
                uint64_t v42 = -1;
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }

            else
            {
              uint64_t v41 = 0LL;
              __int128 v39 = 0u;
              int v40 = 0u;
              uint64_t v42 = -1;
              swift_bridgeObjectRetain(v28);
              sub_10006A348(v30, v31);
            }

            if (v42 != 255)
            {
              sub_10006A2FC((uint64_t)&v39, (uint64_t)&v43);
              __asm { BR              X8 }
            }

            sub_100015794((uint64_t)&v39, &qword_1009BE048);
            __asm { BR              X8 }
          }
        }
      }
    }

        (*(void (**)(uint64_t, uint64_t))(v228 + 8))((uint64_t)v231 + v230[29], v229);
        goto LABEL_24;
      }

    uint64_t v7 = (v14 - 1) & v14;
  }

  uint64_t v15 = v13 + 3;
  if (v15 >= v8)
  {
LABEL_47:
    swift_release();
    __int128 v50 = v9;
    uint64_t v46 = sub_100004AEC(&qword_1009BFCA0);
    return CheckedContinuation.resume(returning:)(&v50, v46);
  }

  uint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
    int v3 = v15;
    goto LABEL_23;
  }

  while (1)
  {
    int v3 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_47;
    }
    uint64_t v14 = *(void *)(v4 + 8 * v3);
    ++v15;
    if (v14) {
      goto LABEL_23;
    }
  }

    __break(1u);
    goto LABEL_24;
  }

  return result;
}

uint64_t sub_10004A740(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E240);
  int v50 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_41;
  }
  char v45 = v2;
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  __int128 v47 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  int64_t v46 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v19 = 0LL;
  uint64_t v48 = v7;
  for (i = v10; ; uint64_t v10 = i)
  {
    if (v16)
    {
      unint64_t v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v24 = v23 | (v19 << 6);
      goto LABEL_24;
    }

    int64_t v25 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }

    if (v25 >= v46) {
      goto LABEL_36;
    }
    unint64_t v26 = v47[v25];
    ++v19;
    if (!v26)
    {
      int64_t v19 = v25 + 1;
      if (v25 + 1 >= v46) {
        goto LABEL_36;
      }
      unint64_t v26 = v47[v19];
      if (!v26) {
        break;
      }
    }

LABEL_41:
  uint64_t result = swift_release();
  *int v3 = v12;
  return result;
}

  uint64_t result = swift_release();
  *int v3 = v14;
  return result;
}

  swift_release(v11);
  uint64_t v5 = v43;
  if ((v48 & 1) != 0)
  {
    unint64_t v41 = 1LL << *(_BYTE *)(v11 + 32);
    if (v41 >= 64) {
      bzero(v45, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
    }
    else {
      *char v45 = -1LL << v41;
    }
    *(void *)(v11 + swift_weakDestroy(v0 + 16) = 0LL;
  }

    int64_t v19 = (v28 - 1) & v28;
    unint64_t v26 = __clz(__rbit64(v28)) + (v29 << 6);
    uint64_t v6 = v29;
LABEL_42:
    unint64_t v22 = *(void *)(*(void *)(v3 + 56) + 8 * v26);
    if (v2 >= v24)
    {
      swift_bridgeObjectRetain(v22);
      goto LABEL_21;
    }

    swift_bridgeObjectRetain(v22);
  }

  __break(1u);
LABEL_68:
  __break(1u);
}

    swift_release();
    return;
  }

  __break(1u);
LABEL_43:
  __break(1u);
}

    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
  }

  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  uint64_t v44 = (uint64_t)v55;
  uint64_t v43 = v56;
  swift_release(v19);
  int64_t v46 = v51;
  char v45 = v52;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v44, v52, v51);
  __int128 v47 = v57;
  swift_bridgeObjectRetain(v57);
  uint64_t v48 = v61;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v61);
  __int128 v60 = v48;
  __int128 v61 = (void *)0x8000000000000000LL;
  sub_10005E334(v47, v44, isUniquelyReferenced_nonNull_native);
  __int128 v61 = v60;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v44, v46);
  int v50 = *(void *)(v47 + 16);
  swift_bridgeObjectRelease();
  if (!v50)
  {
    sub_100048758(v45);
    swift_bridgeObjectRelease();
  }

  sub_100348FD0((uint64_t)v61);
LABEL_44:
  swift_bridgeObjectRelease();
}

    swift_once(&qword_10099B330, sub_100374304);
    goto LABEL_10;
  }

  BOOL v34 = v137;
  sub_100012ED8(v135, v136);
  uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v34 + 192);
  uint64_t v36 = v34;
  uint64_t v32 = a1;
  v35(v33, v36);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v135);
  uint64_t v29 = (void *)v10;
  int64_t v27 = v131;
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  unint64_t v38 = v25;
  v37(v25, v9, v27);
  if (qword_10099B330 != -1) {
    swift_once(&qword_10099B330, sub_100374304);
  }
  unint64_t v39 = type metadata accessor for Logger(0LL);
  sub_10000A720(v39, (uint64_t)qword_100A2A748);
  char v40 = (uint64_t (*)(char *, uint64_t, uint64_t))v29[2];
  unint64_t v41 = (char *)v128;
  v40((char *)v128, a1, v27);
  BOOL v42 = v125;
  uint64_t v43 = v40(v125, (uint64_t)v38, v27);
  uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
  char v45 = static os_log_type_t.default.getter(v44);
  uint64_t v122 = v45;
  if (os_log_type_enabled(v44, v45))
  {
    int64_t v46 = swift_slowAlloc(32LL, -1LL);
    __int128 v47 = swift_slowAlloc(64LL, -1LL);
    char v120 = v47;
    *(_DWORD *)int64_t v46 = 141558531;
    uint64_t v134 = 1752392040LL;
    v135[0] = v47;
    uint64_t v121 = v38;
    uint64_t v118 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, v135, v46 + 4, v46 + 12);
    *(_WORD *)(v46 + 12) = 2081;
    uint64_t v48 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v123 = v40;
    __int128 v49 = v48;
    uint64_t v119 = v44;
    int v50 = (char *)v128;
    __int128 v51 = dispatch thunk of CustomStringConvertible.description.getter(v27, v48);
    uint64_t v134 = sub_1003F11D4(v51, v52, v135);
    uint64_t v32 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, v135, v46 + 14, v46 + 22);
    swift_bridgeObjectRelease();
    uint64_t v53 = (void (*)(char *, uint64_t))v118[1];
    v53(v50, v27);
    *(_WORD *)(v46 + 22) = 2082;
    unint64_t v54 = v49;
    char v40 = v123;
    unint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter(v27, v54);
    uint64_t v134 = sub_1003F11D4(v55, v56, v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, v135, v46 + 24, v46 + 32);
    swift_bridgeObjectRelease();
    v53(v42, v27);
    __int128 v57 = v119;
    _os_log_impl( (void *)&_mh_execute_header,  v119,  (os_log_type_t)v122,  "didCompletePlayingSoundOnDevice %{private,mask.hash}s. groupId %{public}s",  (uint8_t *)v46,  0x20u);
    uint64_t v58 = v120;
    swift_arrayDestroy(v120, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1LL, -1LL);
    swift_slowDealloc(v46, -1LL, -1LL);

    uint64_t v128 = v53;
    v53(v121, v27);
  }

  else
  {

    char v110 = (void (*)(char *, uint64_t))v29[1];
    v110(v42, v27);
    v110(v41, v27);
    uint64_t v128 = v110;
    v110(v38, v27);
  }

  __break(1u);
}

            int64_t v27 = (v35 - 1) & v35;
            unint64_t v30 = __clz(__rbit64(v35)) + (v23 << 6);
          }

          *(void *)(v0 + 272) = v23;
          *(void *)(v0 + 280) = v27;
          uint64_t v37 = *(void *)(v0 + 144);
          unint64_t v38 = *(void *)(v0 + 152);
          unint64_t v39 = *(void *)(v0 + 120);
          sub_10001DC4C( *(void *)(v31 + 48) + *(void *)(v38 + 72) * v30,  v39,  type metadata accessor for BeaconIdentifier);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v39, 0LL, 1LL, v37);
          char v40 = *(void *)(v0 + 248);
          sub_10002218C(*(void *)(v0 + 120), *(void *)(v0 + 176), type metadata accessor for BeaconIdentifier);
          if (*(void *)(v40 + 16) && (unint64_t v41 = sub_10030D1C4(*(void *)(v0 + 176)), (v42 & 1) != 0))
          {
            uint64_t v43 = *(void *)(v0 + 80);
            uint64_t v44 = *(void *)(v0 + 88);
            char v45 = *(void *)(v0 + 72);
            int64_t v46 = *(void (**)(uint64_t, unint64_t, uint64_t))(v44 + 16);
            v46(v45, *(void *)(*(void *)(v0 + 248) + 56LL) + *(void *)(v44 + 72) * v41, v43);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v44 + 56))(v45, 0LL, 1LL, v43);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v45, 1LL, v43) != 1)
            {
              uint64_t v48 = *(void *)(v0 + 168);
              __int128 v47 = *(void *)(v0 + 176);
              uint64_t v73 = *(void *)(v0 + 152);
              uint64_t v74 = *(void *)(v0 + 160);
              int v50 = *(void *)(v0 + 104);
              __int128 v49 = *(void *)(v0 + 112);
              __int128 v51 = *(void *)(v0 + 88);
              unint64_t v52 = *(void *)(v0 + 96);
              uint64_t v53 = *(void *)(v0 + 80);
              uint64_t v75 = *(void *)(v0 + 40);
              unsigned int v76 = *(void *)(v0 + 64);
              uint64_t v78 = *(void *)(v0 + 32);
              unint64_t v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 32);
              v54(v49, *(void *)(v0 + 72), v53);
              v46(v50, v49, v53);
              unint64_t v55 = v47;
              uint64_t v56 = v48;
              sub_10001DC4C(v47, v48, type metadata accessor for BeaconIdentifier);
              __int128 v57 = *(unsigned __int8 *)(v51 + 80);
              uint64_t v58 = (v57 + 16) & ~v57;
              uint64_t v59 = *(unsigned __int8 *)(v73 + 80);
              __int128 v60 = (v52 + v59 + v58) & ~v59;
              __int128 v61 = (v74 + v60 + 7) & 0xFFFFFFFFFFFFFFF8LL;
              __int128 v62 = swift_allocObject(&unk_100956098, v61 + 8, v57 | v59 | 7);
              *(void *)(v0 + 288) = v62;
              v54(v62 + v58, v50, v53);
              __int128 v63 = sub_10002218C(v56, v62 + v60, type metadata accessor for BeaconIdentifier);
              *(void *)(v62 + v61) = v75;
              UUID.init()(v63);
              __int128 v64 = (void *)swift_task_alloc(64LL);
              *(void *)(v0 + 296) = v64;
              v64[2] = v76;
              v64[3] = &unk_1009AC088;
              v64[4] = v62;
              v64[5] = v78;
              v64[6] = v55;
              __int128 v65 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
              *(void *)(v0 + 304) = v65;
              *__int128 v65 = v0;
              v65[1] = sub_1003B97A8;
              return withCheckedContinuation<A>(isolation:function:_:)( v65,  0LL,  0LL,  0xD000000000000027LL,  0x80000001008602E0LL,  sub_1003D51D0,  v64,  (char *)&type metadata for () + 8);
            }
          }

          else
          {
            (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 88) + 56LL))( *(void *)(v0 + 72),  1LL,  1LL,  *(void *)(v0 + 80));
          }

          uint64_t v28 = *(void *)(v0 + 72);
          sub_100018C68(*(void *)(v0 + 176), type metadata accessor for BeaconIdentifier);
          uint64_t result = sub_100015794(v28, (uint64_t *)&unk_1009A34D0);
        }
      }

      goto LABEL_54;
    }

    return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
  }

  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
  }
  unint64_t v22 = v2[2];
  unint64_t v21 = v2[3];
  if (v22 >= v21 >> 1) {
    uint64_t v2 = sub_1004C4120((void *)(v21 > 1), v22 + 1, 1, v2);
  }
  v2[2] = v22 + 1;
  unint64_t v23 = &v2[2 * v22];
  v23[4] = 0xD00000000000001ALL;
  v23[5] = 0x8000000100864EE0LL;
  if ((a1 & 0x80) == 0)
  {
LABEL_18:
    if ((a1 & 0x100) == 0) {
      goto LABEL_19;
    }
    goto LABEL_51;
  }

  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v23[7])(v85, 1LL, 1LL, v5);
  uint64_t result = swift_release();
LABEL_42:
  void *v77 = v17;
  return result;
}

    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }

  sub_100049DAC(v57, isUniquelyReferenced_nonNull_native);
  unint64_t v52 = v141;
  uint64_t v58 = sub_10030CF14(v129, (uint64_t)v50);
  if ((v11 & 1) == (v59 & 1))
  {
    unint64_t v54 = v58;
    goto LABEL_15;
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
LABEL_47:
  __break(1u);
  return result;
}

              sub_1000A6F30(v1);
              return;
            }
          }
        }
      }
    }

      if (++v1 == v115) {
        goto LABEL_52;
      }
    }

    __break(1u);
LABEL_56:
    swift_once(&qword_10099B670, sub_100605974);
  }

  if (qword_10099B840 != -1) {
    swift_once(&qword_10099B840, sub_1006B4000);
  }
  id v102 = type metadata accessor for Logger(0LL);
  int v103 = sub_10000A720(v102, (uint64_t)qword_100A2B1F8);
  id v104 = (os_log_s *)Logger.logObject.getter(v103);
  uint64_t v105 = static os_log_type_t.default.getter(v104);
  if (os_log_type_enabled(v104, v105))
  {
    uint64_t v106 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v106 = 0;
    _os_log_impl((void *)&_mh_execute_header, v104, v105, "No defaultRole provided. Fallback to custom role.", v106, 2u);
    swift_slowDealloc(v106, -1LL, -1LL);
  }

  unint64_t v108 = v128;
  uint64_t v107 = v129;
  char v109 = v130;
  (*(void (**)(char *, void, uint64_t))(v129 + 104))( v128,  enum case for LocalizationUtility.Table.default(_:),  v130);
  static LocalizationUtility.localizedString(key:table:)(0xD000000000000010LL, 0x800000010085ADB0LL, v108);
  (*(void (**)(char *, uint64_t))(v107 + 8))(v108, v109);
  char v110 = objc_allocWithZone(&OBJC_CLASS___SPBeaconRole);
  uint64_t v111 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v112 = String._bridgeToObjectiveC()();
  id v113 = [v110 initWithRoleId:999 role:v111 roleEmoji:v112];

  [v84 setDefaultRole:v113];
  return v84;
}

              uint64_t v29 = 0;
              goto LABEL_42;
            }
          }
        }

        goto LABEL_38;
      }

      __break(1u);
    }

    __break(1u);
LABEL_71:
    swift_once(&qword_10099B780, sub_100651738);
LABEL_46:
    v44[1] = qword_100A2B090;
    uint64_t v37 = sub_100004AEC((uint64_t *)&unk_10099D740);
    *(_OWORD *)(swift_allocObject(v37, 112LL, 7LL) + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    __asm { BR              X10 }
  }

  uint64_t v28 = sub_1001B91F0(v21, v23, 10LL);
  swift_bridgeObjectRelease();
  if ((v28 & 0x100) != 0) {
    return 4LL;
  }
LABEL_43:
  BOOL v34 = a1[3];
  uint64_t v35 = a1[4];
  sub_100012ED8(a1, v34);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v35 + 112))(v34, v35) & 1) != 0)
  {
    uint64_t v36 = sub_100041994(v28);
    if (v36 != 4)
    {
      uint64_t v15 = v36;
      char v45 = static os_log_type_t.debug.getter(v36);
      if (qword_10099B780 == -1) {
        goto LABEL_46;
      }
      goto LABEL_71;
    }
  }

  return 4LL;
}

uint64_t sub_10004AAD8(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E238);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = result;
  if (*(void *)(v5 + 16))
  {
    unint64_t v31 = v3;
    int64_t v9 = 0LL;
    uint64_t v10 = (void *)(v5 + 64);
    uint64_t v11 = 1LL << *(_BYTE *)(v5 + 32);
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v13 = v12 & *(void *)(v5 + 64);
    int64_t v14 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v21 = v20 | (v9 << 6);
      }

      else
      {
        int64_t v22 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        if (v22 >= v14) {
          goto LABEL_36;
        }
        unint64_t v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          int64_t v9 = v22 + 1;
          if (v22 + 1 >= v14) {
            goto LABEL_36;
          }
          unint64_t v23 = v10[v9];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v14)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release(v5);
                int v3 = v31;
                goto LABEL_43;
              }

              uint64_t v30 = 1LL << *(_BYTE *)(v5 + 32);
              if (v30 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v10 = -1LL << v30;
              }
              int v3 = v31;
              *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v9 = v24 + 1;
                if (__OFADD__(v24, 1LL)) {
                  goto LABEL_45;
                }
                if (v9 >= v14) {
                  goto LABEL_36;
                }
                unint64_t v23 = v10[v9];
                ++v24;
                if (v23) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v9 = v24;
          }
        }

uint64_t sub_10004ADA0(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = type metadata accessor for ObservedAdvertisement(0LL);
  uint64_t v45 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v49 = (uint64_t)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v46 = *(void *)(v8 - 8);
  uint64_t v47 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E560);
  int v48 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)(v11, a1, a2);
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_43;
  }
  uint64_t v14 = 1LL << *(_BYTE *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v43 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1LL << v14);
  }
  else {
    uint64_t v16 = -1LL;
  }
  unint64_t v17 = v16 & v15;
  unint64_t v41 = v2;
  int64_t v42 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v18 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0LL;
  uint64_t v44 = v11;
  while (1)
  {
    if (v17)
    {
      unint64_t v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_24;
    }

    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v24 >= v42) {
      break;
    }
    char v25 = v43;
    unint64_t v26 = v43[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v42) {
        goto LABEL_36;
      }
      unint64_t v26 = v43[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v42)
        {
LABEL_36:
          swift_release(v11);
          int v3 = v41;
          if ((v48 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v26 = v43[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v20 >= v42) {
              goto LABEL_36;
            }
            unint64_t v26 = v43[v20];
            ++v27;
            if (v26) {
              goto LABEL_23;
            }
          }
        }

        int64_t v20 = v27;
      }
    }

uint64_t sub_10004B1F8(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E408);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    unint64_t v34 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v10 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v11 = ~(-1LL << v9);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v14 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v16 = 0LL;
    while (1)
    {
      if (v12)
      {
        unint64_t v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v19 = v18 | (v16 << 6);
      }

      else
      {
        int64_t v20 = v16 + 1;
        if (__OFADD__(v16, 1LL))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return result;
        }

        if (v20 >= v13) {
          goto LABEL_37;
        }
        unint64_t v21 = v10[v20];
        ++v16;
        if (!v21)
        {
          int64_t v16 = v20 + 1;
          if (v20 + 1 >= v13) {
            goto LABEL_37;
          }
          unint64_t v21 = v10[v16];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v13)
            {
LABEL_37:
              swift_release(v5);
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release(v5);
                int v3 = v34;
                goto LABEL_44;
              }

              uint64_t v33 = 1LL << *(_BYTE *)(v5 + 32);
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v10 = -1LL << v33;
              }
              int v3 = v34;
              *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v21 = v10[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v16 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_46;
                }
                if (v16 >= v13) {
                  goto LABEL_37;
                }
                unint64_t v21 = v10[v16];
                ++v22;
                if (v21) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v16 = v22;
          }
        }

uint64_t sub_10004B4C8(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E210);
  char v43 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v42 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v24 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v24 >= v41) {
      break;
    }
    id v25 = (void *)(v5 + 64);
    unint64_t v26 = *(void *)(v42 + 8 * v24);
    ++v14;
    if (!v26)
    {
      int64_t v14 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_36;
      }
      unint64_t v26 = *(void *)(v42 + 8 * v14);
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          int v3 = v40;
          if ((v43 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v26 = *(void *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            int64_t v14 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v41) {
              goto LABEL_36;
            }
            unint64_t v26 = *(void *)(v42 + 8 * v14);
            ++v27;
            if (v26) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v27;
      }
    }

uint64_t sub_10004B7EC(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC((uint64_t *)&unk_10099E570);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_44;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v15 << 6);
      goto LABEL_25;
    }

    int64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }

    if (v22 >= v12) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v15;
    if (!v24)
    {
      int64_t v15 = v22 + 1;
      if (v22 + 1 >= v12) {
        goto LABEL_37;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v15);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v12)
        {
LABEL_37:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }

        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v15 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_46;
            }
            if (v15 >= v12) {
              goto LABEL_37;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v15);
            ++v25;
            if (v24) {
              goto LABEL_24;
            }
          }
        }

        int64_t v15 = v25;
      }
    }

uint64_t sub_10004BB00(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E390);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = result;
  if (*(void *)(v5 + 16))
  {
    char v36 = a2;
    uint64_t v35 = v3;
    int64_t v9 = 0LL;
    uint64_t v10 = (uint64_t *)(v5 + 64);
    uint64_t v11 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v33 = -1LL << v11;
    uint64_t v34 = v11;
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v13 = v12 & *(void *)(v5 + 64);
    int64_t v14 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v18 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v19 = v18 | (v9 << 6);
      }

      else
      {
        int64_t v20 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }

        if (v20 >= v14) {
          goto LABEL_34;
        }
        unint64_t v21 = v10[v20];
        ++v9;
        if (!v21)
        {
          int64_t v9 = v20 + 1;
          if (v20 + 1 >= v14) {
            goto LABEL_34;
          }
          unint64_t v21 = v10[v9];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v14)
            {
LABEL_34:
              if ((v36 & 1) == 0)
              {
                uint64_t result = swift_release(v5);
                int v3 = v35;
                goto LABEL_41;
              }

              if (v34 >= 64) {
                bzero((void *)(v5 + 64), 8 * v14);
              }
              else {
                *uint64_t v10 = v33;
              }
              int v3 = v35;
              *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v21 = v10[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v9 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_43;
                }
                if (v9 >= v14) {
                  goto LABEL_34;
                }
                unint64_t v21 = v10[v9];
                ++v22;
                if (v21) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v9 = v22;
          }
        }

uint64_t sub_10004BDA4(uint64_t a1, uint64_t a2)
{
  return sub_10004CC7C(a1, a2, &qword_10099E548);
}

uint64_t sub_10004BDB0(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E178);
  char v42 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    __int128 v39 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v41 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v40 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v22 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v23 = v22 | (v14 << 6);
      }

      else
      {
        int64_t v24 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }

        if (v24 >= v40) {
          goto LABEL_36;
        }
        unint64_t v25 = v41[v24];
        ++v14;
        if (!v25)
        {
          int64_t v14 = v24 + 1;
          if (v24 + 1 >= v40) {
            goto LABEL_36;
          }
          unint64_t v25 = v41[v14];
          if (!v25)
          {
            int64_t v26 = v24 + 2;
            if (v26 >= v40)
            {
LABEL_36:
              swift_release(v5);
              int v3 = v39;
              if ((v42 & 1) != 0)
              {
                uint64_t v38 = 1LL << *(_BYTE *)(v5 + 32);
                if (v38 >= 64) {
                  bzero(v41, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v41 = -1LL << v38;
                }
                *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
              }

              break;
            }

            unint64_t v25 = v41[v26];
            if (!v25)
            {
              while (1)
              {
                int64_t v14 = v26 + 1;
                if (__OFADD__(v26, 1LL)) {
                  goto LABEL_43;
                }
                if (v14 >= v40) {
                  goto LABEL_36;
                }
                unint64_t v25 = v41[v14];
                ++v26;
                if (v25) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v14 = v26;
          }
        }

uint64_t sub_10004C0CC(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v30 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_100004AEC(&qword_10099E4A8);
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  if (*(void *)(v9 + 16))
  {
    int64_t v26 = v3;
    uint64_t v11 = 1LL << *(_BYTE *)(v9 + 32);
    uint64_t v12 = *(void *)(v9 + 64);
    unint64_t v28 = (void *)(v9 + 64);
    if (v11 < 64) {
      uint64_t v13 = ~(-1LL << v11);
    }
    else {
      uint64_t v13 = -1LL;
    }
    unint64_t v14 = v13 & v12;
    int64_t v27 = (unint64_t)(v11 + 63) >> 6;
    swift_retain();
    int v25 = a2;
    uint64_t v15 = 16LL;
    if ((a2 & 1) != 0) {
      uint64_t v15 = 32LL;
    }
    uint64_t v29 = v15;
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      goto LABEL_22;
    }

    if (v27 <= 1)
    {
      swift_release();
      int v3 = v26;
      unint64_t v17 = v28;
      if ((v25 & 1) == 0) {
        goto LABEL_30;
      }
      goto LABEL_26;
    }

    unint64_t v17 = v28;
    unint64_t v18 = v28[1];
    uint64_t v19 = 1LL;
    if (!v18)
    {
      uint64_t v19 = 2LL;
      if (v27 <= 2) {
        goto LABEL_23;
      }
      unint64_t v18 = v28[2];
      if (!v18)
      {
        uint64_t v20 = 3LL;
        if (v27 > 3)
        {
          unint64_t v18 = v28[3];
          if (v18)
          {
            uint64_t v19 = 3LL;
            goto LABEL_21;
          }

          while (1)
          {
            uint64_t v19 = v20 + 1;
            if (__OFADD__(v20, 1LL))
            {
              __break(1u);
              JUMPOUT(0x10004C500LL);
            }

            if (v19 >= v27) {
              break;
            }
            unint64_t v18 = v28[v19];
            ++v20;
            if (v18) {
              goto LABEL_21;
            }
          }
        }

LABEL_21:
    unint64_t v16 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_22:
    uint64_t v21 = *(unsigned __int8 *)(*(void *)(v9 + 48) + v16);
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + v29))( v8,  *(void *)(v9 + 56) + *(void *)(v6 + 72) * v16,  v30);
    Hasher.init(_seed:)(v31, *(void *)(v10 + 40));
    __asm { BR              X8 }
  }

    int v25 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    int64_t v26 = *v25;
    int64_t v27 = (-1LL << v3) - 1;
  }

  else
  {
    int v25 = (uint64_t *)(v4 + 8 * (result >> 6));
    int64_t v27 = *v25;
    int64_t v26 = (-1LL << result) - 1;
  }

  *int v25 = v27 & v26;
  unint64_t v28 = *(void *)(a2 + 16);
  uint64_t v29 = __OFSUB__(v28, 1LL);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_weakDestroy(v0 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

    int v25 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    int64_t v26 = *v25;
    int64_t v27 = (-1LL << v3) - 1;
  }

  else
  {
    int v25 = (uint64_t *)(v4 + 8 * (result >> 6));
    int64_t v27 = *v25;
    int64_t v26 = (-1LL << result) - 1;
  }

  *int v25 = v27 & v26;
  unint64_t v28 = *(void *)(a2 + 16);
  uint64_t v29 = __OFSUB__(v28, 1LL);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_weakDestroy(v0 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

    char v42 = type metadata accessor for AccessoryMetadata;
    char v43 = (uint64_t)v8;
LABEL_22:
    sub_100018C68(v43, v42);
    __int128 v60 = v1 + v17[12];
    uint64_t v20 = *(void **)(v60 + 16);
    if (v20)
    {
      uint64_t v21 = *(void *)(v60 + 8);
      uint64_t v22 = *(_BYTE *)v60;
      if (!v41) {
        goto LABEL_25;
      }
      __int128 v61 = sub_100004AEC((uint64_t *)&unk_10099D740);
      unint64_t v28 = (void *)swift_allocObject(v61, 112LL, 7LL);
      *((_OWORD *)v28 + 1) = xmmword_1007E4750;
      __int128 v62 = (void *)sub_1006054A8(v22, v21, v20);
      __int128 v63 = [v62 description];

      __int128 v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
      __int128 v66 = v65;

      __int128 v67 = sub_1006E0A6C(v64, v66);
      __int128 v69 = v68;
      swift_bridgeObjectRelease();
      v28[7] = &type metadata for String;
      __int128 v70 = sub_1000226F4();
      v28[4] = v67;
      v28[5] = v69;
      v28[12] = &type metadata for String;
      v28[13] = v70;
      v28[8] = v70;
      v28[9] = v40;
      v28[10] = v41;
      __int128 v71 = 0xD00000000000002DLL;
      uint64_t v72 = "ALERT_ITEM_FOLLOWING_WITH_HANDLE_NAME_HAWKEYE";
    }

    else
    {
      if (!v41)
      {
LABEL_29:
        __int128 v71 = 0xD000000000000029LL;
        uint64_t v83 = 0x8000000100854150LL;
        unint64_t v28 = _swiftEmptyArrayStorage;
        goto LABEL_30;
      }

      uint64_t v84 = sub_100004AEC((uint64_t *)&unk_10099D740);
      unint64_t v28 = (void *)swift_allocObject(v84, 72LL, 7LL);
      *((_OWORD *)v28 + 1) = xmmword_1007E67D0;
      v28[7] = &type metadata for String;
      v28[8] = sub_1000226F4();
      v28[4] = v40;
      v28[5] = v41;
      __int128 v71 = 0xD000000000000021LL;
      uint64_t v72 = "ALERT_ITEM_FOLLOWING_NAME_HAWKEYE";
    }

    uint64_t v83 = (unint64_t)(v72 - 32) | 0x8000000000000000LL;
LABEL_30:
    uint64_t v73 = v92;
    goto LABEL_31;
  }

  unint64_t v23 = v1 + v16[12];
  uint64_t v24 = *(void **)(v23 + 16);
  if (v24)
  {
    int v25 = *(void *)(v23 + 8);
    int64_t v26 = *(_BYTE *)v23;
    int64_t v27 = sub_100004AEC((uint64_t *)&unk_10099D740);
    unint64_t v28 = (void *)swift_allocObject(v27, 72LL, 7LL);
    *((_OWORD *)v28 + 1) = xmmword_1007E67D0;
    uint64_t v29 = (void *)sub_1006054A8(v26, v25, v24);
    uint64_t v30 = [v29 description];

    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    uint64_t v33 = v32;

    uint64_t v34 = sub_1006E0A6C(v31, v33);
    char v36 = v35;
    swift_bridgeObjectRelease();
    v28[7] = &type metadata for String;
    v28[8] = sub_1000226F4();
    v28[4] = v34;
    v28[5] = v36;
    char v37 = 0xD000000000000025LL;
    uint64_t v38 = 0x8000000100854240LL;
  }

  else
  {
    char v37 = 0xD000000000000019LL;
    uint64_t v38 = 0x8000000100854220LL;
    unint64_t v28 = _swiftEmptyArrayStorage;
  }

  (*(void (**)(_BYTE *, void, uint64_t))(v13 + 104))( v15,  enum case for LocalizationUtility.Table.default(_:),  v12);
  uint64_t v44 = static LocalizationUtility.localizedString(key:table:)(v37, v38, v15);
  uint64_t v46 = v45;
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v15, v12);
LABEL_32:
  uint64_t v86 = String.init(format:arguments:)(v44, v46, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v86;
}

    unint64_t v18 = (v24 - 1) & v24;
    uint64_t v22 = __clz(__rbit64(v24)) + (v20 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v9 + 16))( v14,  *(void *)(a1 + 48) + *(void *)(v9 + 72) * v22,  v8,  v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v14, 0LL, 1LL, v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v14, v8);
    sub_100504F30((uint64_t)v11, (uint64_t)v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v4, 1LL, v41) == 1)
    {
      sub_100015794((uint64_t)v4, (uint64_t *)&unk_1009A9C30);
    }

    else
    {
      uint64_t v35 = a1;
      int64_t v26 = v36;
      sub_10002218C((uint64_t)v4, v36, type metadata accessor for OwnedBeaconRecord);
      sub_10002218C(v26, v37, type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0) {
        uint64_t v38 = (void *)sub_1004C46DC(0, v38[2] + 1LL, 1, (unint64_t)v38);
      }
      unint64_t v28 = v38[2];
      int64_t v27 = v38[3];
      uint64_t v29 = v28 + 1;
      a1 = v35;
      if (v28 >= v27 >> 1)
      {
        uint64_t v33 = v38[2];
        uint64_t v34 = v28 + 1;
        uint64_t v32 = (void *)sub_1004C46DC(v27 > 1, v28 + 1, 1, (unint64_t)v38);
        unint64_t v28 = v33;
        uint64_t v29 = v34;
        uint64_t v38 = v32;
      }

      uint64_t v30 = v37;
      uint64_t v31 = v38;
      _OWORD v38[2] = v29;
      sub_10002218C( v30,  (uint64_t)v31 + ((*(unsigned __int8 *)(v42 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80))
      + *(void *)(v42 + 72) * v28,
        type metadata accessor for OwnedBeaconRecord);
    }
  }

  int v25 = v23 + 4;
  if (v25 >= v40)
  {
LABEL_30:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v9 + 56))(v14, 1LL, 1LL, v8, v19);
LABEL_31:
    swift_release();
    return;
  }

  uint64_t v24 = *(void *)(v39 + 8 * v25);
  if (v24)
  {
    uint64_t v20 = v25;
    goto LABEL_21;
  }

  while (1)
  {
    uint64_t v20 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v20 >= v40) {
      goto LABEL_30;
    }
    uint64_t v24 = *(void *)(v39 + 8 * v20);
    ++v25;
    if (v24) {
      goto LABEL_21;
    }
  }

    int v3 = (v8 - 1) & v8;
    uint64_t v6 = __clz(__rbit64(v8)) + (v4 << 6);
LABEL_22:
    uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8 * v6);
    uint64_t v11 = *(void *)(v10 + 16);
    if (v11)
    {
      int v25 = v3;
      swift_bridgeObjectRetain(v10);
      sub_100032800(0, v11, 0);
      uint64_t v12 = type metadata accessor for UUID(0LL);
      uint64_t v13 = *(void *)(v12 - 8);
      unint64_t v14 = v10 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
      uint64_t v15 = *(void *)(v13 + 72);
      do
      {
        uint64_t v12 = UUID.uuidString.getter(v12);
        unint64_t v16 = v12;
        unint64_t v18 = v17;
        uint64_t v20 = _swiftEmptyArrayStorage[2];
        uint64_t v19 = _swiftEmptyArrayStorage[3];
        if (v20 >= v19 >> 1) {
          uint64_t v12 = sub_100032800(v19 > 1, v20 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v20 + 1;
        uint64_t v21 = &_swiftEmptyArrayStorage[2 * v20];
        v21[4] = v16;
        v21[5] = v18;
        v14 += v15;
        --v11;
      }

      while (v11);
      swift_bridgeObjectRelease();
      int v3 = v25;
    }

    sub_1001840C0((uint64_t)_swiftEmptyArrayStorage);
  }

  while (1)
  {
    unint64_t v4 = v9 + 1;
    if (__OFADD__(v9, 1LL)) {
      break;
    }
    if (v4 >= v23) {
      goto LABEL_29;
    }
    uint64_t v8 = *(void *)(v22 + 8 * v4);
    ++v9;
    if (v8) {
      goto LABEL_21;
    }
  }

    __int128 v67 = (v26 - 1) & v26;
    uint64_t v24 = __clz(__rbit64(v26)) + (v22 << 6);
LABEL_22:
    unint64_t v28 = *(void *)(v9 + 72);
    uint64_t v29 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    v29(v16, *(void *)(a3 + 48) + v28 * v24, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v16, 0LL, 1LL, v8);
    __int128 v66 = v22;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v13, v16, v8);
    uint64_t v30 = *(void *)(a4 + v68);
    swift_bridgeObjectRetain_n(v30, 2LL);
    uint64_t v31 = sub_10030D124((uint64_t)v13);
    uint64_t v33 = v32;
    swift_bridgeObjectRelease();
    if ((v33 & 1) != 0)
    {
      uint64_t v34 = a4;
      uint64_t v35 = a3;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v30);
      __int128 v70 = v30;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100063CA8();
        uint64_t v30 = v70;
      }

      (*(void (**)(unint64_t, uint64_t))(v9 + 8))(*(void *)(v30 + 48) + v31 * v28, v8);
      uint64_t v30 = v70;
      char v37 = *(void *)(v70 + 56);
      uint64_t v38 = type metadata accessor for Date(0LL);
      __int128 v39 = *(void *)(v38 - 8);
      int64_t v40 = v37 + *(void *)(v39 + 72) * v31;
      uint64_t v41 = (uint64_t)v65;
      (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v65, v40, v38);
      sub_1000597C0(v31, v30);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v41, 0LL, 1LL, v38);
      a3 = v35;
      a4 = v34;
    }

    else
    {
      char v42 = type metadata accessor for Date(0LL);
      uint64_t v41 = (uint64_t)v65;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56LL))(v65, 1LL, 1LL, v42);
    }

    sub_100015794(v41, (uint64_t *)&unk_10099D720);
    char v43 = *(void *)(a4 + v68);
    *(void *)(a4 + v68) = v30;
    swift_bridgeObjectRetain(v30);
    uint64_t v44 = sub_1001D4D1C(v43, v30);
    swift_bridgeObjectRelease();
    if ((v44 & 1) == 0) {
      sub_1004E696C(0xDu);
    }
    swift_bridgeObjectRelease();
    uint64_t v45 = v69;
    if (qword_10099B188 != -1) {
      swift_once(&qword_10099B188, sub_100189D08);
    }
    uint64_t v46 = type metadata accessor for Logger(0LL);
    sub_10000A720(v46, (uint64_t)qword_100A2A2B0);
    uint64_t v47 = v64;
    int v48 = ((uint64_t (*)(char *, char *, uint64_t))v29)(v45, v64, v8);
    uint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
    int v50 = static os_log_type_t.default.getter(v49);
    if (os_log_type_enabled(v49, v50))
    {
      __int128 v51 = swift_slowAlloc(22LL, -1LL);
      unint64_t v52 = swift_slowAlloc(32LL, -1LL);
      __int128 v70 = v52;
      *(_DWORD *)__int128 v51 = v60.n128_u32[0];
      *(void *)(v51 + 4) = 1752392040LL;
      *(_WORD *)(v51 + 12) = 2081;
      uint64_t v53 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      unint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter(v8, v53);
      *(void *)(v51 + 14) = sub_1003F11D4(v54, v55, &v70);
      swift_bridgeObjectRelease();
      uint64_t v56 = *(void (**)(char *, uint64_t))(v9 + 8);
      v56(v69, v8);
      _os_log_impl( (void *)&_mh_execute_header,  v49,  v50,  "Removed ACSN locating state for beacon: %{private,mask.hash}s - exhaustive fetch.",  (uint8_t *)v51,  0x16u);
      swift_arrayDestroy(v52, 1LL, v59);
      swift_slowDealloc(v52, -1LL, -1LL);
      swift_slowDealloc(v51, -1LL, -1LL);

      v56(v47, v8);
    }

    else
    {

      unint64_t v23 = *(void (**)(char *, uint64_t))(v9 + 8);
      v23(v45, v8);
      v23(v47, v8);
    }

    uint64_t v13 = v47;
    unint64_t v16 = v63;
    uint64_t v22 = v66;
    uint64_t v20 = v67;
  }

  int64_t v27 = v25 + 3;
  if (v27 < v62)
  {
    int64_t v26 = *(void *)(v61 + 8 * v27);
    if (!v26)
    {
      while (1)
      {
        uint64_t v22 = v27 + 1;
        if (__OFADD__(v27, 1LL)) {
          goto LABEL_39;
        }
        if (v22 >= v62) {
          goto LABEL_34;
        }
        int64_t v26 = *(void *)(v61 + 8 * v22);
        ++v27;
        if (v26) {
          goto LABEL_21;
        }
      }
    }

    uint64_t v22 = v27;
    goto LABEL_21;
  }

    uint64_t v8 = (v13 - 1) & v13;
    uint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v11);
    unint64_t v16 = *v15;
    unint64_t v17 = v15[1];
    unint64_t v18 = *(double *)(*(void *)(v3 + 56) + 8 * v11);
    swift_bridgeObjectRetain(v17);
    uint64_t v19 = sub_10030CF14(v16, v17);
    uint64_t v21 = v20;
    uint64_t result = swift_bridgeObjectRelease();
  }

  unint64_t v14 = v12 + 3;
  if (v14 >= v9) {
    return 1LL;
  }
  uint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    unint64_t v4 = v14;
    goto LABEL_21;
  }

  while (1)
  {
    unint64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v4 >= v9) {
      return 1LL;
    }
    uint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }

    uint64_t v8 = (v13 - 1) & v13;
    uint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v11);
    unint64_t v16 = *v15;
    unint64_t v17 = v15[1];
    unint64_t v18 = *(void *)(*(void *)(v3 + 56) + 8 * v11);
    swift_bridgeObjectRetain(v17);
    uint64_t v19 = sub_10030CF14(v16, v17);
    uint64_t v21 = v20;
    uint64_t result = swift_bridgeObjectRelease();
    if ((v21 & 1) == 0 || *(void *)(*(void *)(a2 + 56) + 8 * v19) != v18) {
      return 0LL;
    }
  }

  unint64_t v14 = v12 + 3;
  if (v14 >= v9) {
    return 1LL;
  }
  uint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    unint64_t v4 = v14;
    goto LABEL_21;
  }

  while (1)
  {
    unint64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v4 >= v9) {
      return 1LL;
    }
    uint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }

        return;
      }

      sub_1000182F0(v26, v27);
    }

    swift_beginAccess(a2 + 16, &v48, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(a2 + 16);
    if (Strong)
    {
      v45[-2] = (os_log_t)__chkstk_darwin(Strong);
      v45[-1] = v18;
      char v42 = sub_100004AEC((uint64_t *)&unk_1009A6AF0);
      char v43 = OS_dispatch_queue.sync<A>(execute:)(sub_100254768, &v45[-4], v42);
      uint64_t v44 = (os_log_s *)v47[0];
      __chkstk_darwin(v43);
      v45[-2] = v44;
      v45[-1] = v18;
      os_activity(name:block:)("DiscoveredAccessory", 19LL, 2LL, sub_100254780);
      swift_release();

      swift_bridgeObjectRelease();
      return;
    }

    goto LABEL_21;
  }

  sub_100254338((uint64_t)v50, (uint64_t)&v48);
  if (qword_10099B628 != -1) {
    swift_once(&qword_10099B628, sub_1005E2E30);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_10000A720(v7, (uint64_t)qword_100A2AEB8);
  uint64_t v8 = sub_100254374(&v48, (uint64_t)v47);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  uint64_t v10 = static os_log_type_t.error.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v11 = 138412290;
    uint64_t v13 = sub_100122CD4();
    unint64_t v14 = swift_allocError(&type metadata for CentralManager.Error, v13, 0LL, 0LL);
    sub_100254374(v47, v15);
    unint64_t v16 = _swift_stdlib_bridgeErrorToNSError(v14);
    uint64_t v46 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v11 + 4, v11 + 12);
    *uint64_t v12 = v16;
    sub_1002543B0(v47);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Peripheral discovery error: %@", v11, 0xCu);
    unint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v12, 1LL, v17);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {

    sub_1002543B0(v47);
  }

  sub_1002543B0((uint64_t *)&v48);
}

    uint64_t v19 = (v25 - 1) & v25;
    unint64_t v23 = __clz(__rbit64(v25)) + (v21 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v10 + 16))( v15,  *(void *)(a1 + 48) + *(void *)(v10 + 72) * v23,  v9,  v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v15, 0LL, 1LL, v9);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
    sub_100504F30((uint64_t)v12, (uint64_t)v5);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v5, 1LL, v41) == 1)
    {
      sub_100015794((uint64_t)v5, (uint64_t *)&unk_1009A9C30);
    }

    else
    {
      int64_t v27 = v36;
      sub_10002218C((uint64_t)v5, v36, type metadata accessor for OwnedBeaconRecord);
      sub_10002218C(v27, v37, type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0) {
        uint64_t v38 = (void *)sub_1004C46DC(0, v38[2] + 1LL, 1, (unint64_t)v38);
      }
      uint64_t v29 = v38[2];
      unint64_t v28 = v38[3];
      uint64_t v30 = v29 + 1;
      if (v29 >= v28 >> 1)
      {
        uint64_t v35 = v29 + 1;
        uint64_t v33 = (void *)sub_1004C46DC(v28 > 1, v29 + 1, 1, (unint64_t)v38);
        uint64_t v30 = v35;
        uint64_t v38 = v33;
      }

      uint64_t v31 = v37;
      uint64_t v32 = v38;
      _OWORD v38[2] = v30;
      sub_10002218C( v31,  (uint64_t)v32 + ((*(unsigned __int8 *)(v43 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))
      + *(void *)(v43 + 72) * v29,
        type metadata accessor for OwnedBeaconRecord);
    }
  }

  int64_t v26 = v24 + 4;
  if (v26 >= v40)
  {
LABEL_30:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))(v15, 1LL, 1LL, v9, v20);
LABEL_31:
    swift_release();
    return;
  }

  int v25 = *(void *)(v39 + 8 * v26);
  if (v25)
  {
    uint64_t v21 = v26;
    goto LABEL_21;
  }

  while (1)
  {
    uint64_t v21 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v21 >= v40) {
      goto LABEL_30;
    }
    int v25 = *(void *)(v39 + 8 * v21);
    ++v26;
    if (v25) {
      goto LABEL_21;
    }
  }

    uint64_t v19 = (v27 - 1) & v27;
    int v25 = __clz(__rbit64(v27)) + (v26 << 6);
    uint64_t v20 = v26;
  }

  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

    uint64_t v19 = (v27 - 1) & v27;
    int v25 = __clz(__rbit64(v27)) + (v26 << 6);
    uint64_t v20 = v26;
  }

  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

  v68((char *)a1 + *(int *)(v52 + 20), (char *)a2 + *(int *)(v52 + 20), v53);
  return a1;
}

  v70((char *)a1 + *(int *)(v54 + 20), &a2[*(int *)(v54 + 20)], v55);
  return a1;
}

    swift_release();
    uint64_t v29 = v100;
    uint64_t v41 = (uint64_t)v112;
  }

  else
  {
    swift_bridgeObjectRelease();
    unint64_t v54 = _swiftEmptyArrayStorage;
  }

  objc_autoreleasePoolPop(v43);
  sub_1000F0A44((uint64_t)v54, v47);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v117 + 48))(v47, 1LL, v46) == 1)
  {
    (*(void (**)(uint64_t, unint64_t))(v29 + 8))(v41, v28);
    uint64_t v38 = (uint64_t *)&unk_1009A5990;
    __int128 v39 = v47;
LABEL_24:
    sub_100015794(v39, v38);
    if (qword_10099B330 == -1)
    {
LABEL_25:
      uint64_t v59 = type metadata accessor for Logger(0LL);
      __int128 v60 = sub_10000A720(v59, (uint64_t)qword_100A2A748);
      __int128 v61 = (os_log_s *)Logger.logObject.getter(v60);
      __int128 v62 = static os_log_type_t.error.getter(v61);
      if (os_log_type_enabled(v61, v62))
      {
        __int128 v63 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)__int128 v63 = 0;
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "No playback observation found. Cannot retry", v63, 2u);
        swift_slowDealloc(v63, -1LL, -1LL);
      }

      return (*(uint64_t (**)(unint64_t, unint64_t))(v29 + 8))(v32, v28);
    }

    uint64_t v20 = (v27 - 1) & v27;
    int v25 = __clz(__rbit64(v27)) + (v23 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v11 + 16))( v16,  *(void *)(v55 + 48) + *(void *)(v11 + 72) * v25,  v10,  v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0LL, 1LL, v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v16, v10);
    uint64_t v29 = *v52;
    if (*(void *)(*v52 + 16LL))
    {
      swift_bridgeObjectRetain(*v52);
      uint64_t v30 = sub_10030D124((uint64_t)v13);
      if ((v31 & 1) != 0)
      {
        sub_10001DC4C( *(void *)(v29 + 56) + *(void *)(v6 + 72) * v30,  (uint64_t)v5,  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
        uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
        uint64_t v33 = v5;
        uint64_t v34 = 0LL;
      }

      else
      {
        uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
        uint64_t v33 = v5;
        uint64_t v34 = 1LL;
      }

      char v36 = v53;
      v32(v33, v34, 1LL, v53);
      uint64_t v35 = v36;
      uint64_t v6 = v49;
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v35 = v53;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v5, 1LL, 1LL, v53);
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v5, 1LL, v35) == 1)
    {
      sub_100015794((uint64_t)v5, &qword_10099E488);
    }

    else
    {
      char v37 = v46;
      sub_10002218C((uint64_t)v5, v46, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      sub_10002218C(v37, v47, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      if ((swift_isUniquelyReferenced_nonNull_native(v48) & 1) == 0) {
        int v48 = (void *)sub_1004C6348(0, v48[2] + 1LL, 1, (unint64_t)v48);
      }
      __int128 v39 = v48[2];
      uint64_t v38 = v48[3];
      int64_t v40 = v39 + 1;
      if (v39 >= v38 >> 1)
      {
        uint64_t v45 = v39 + 1;
        char v43 = (void *)sub_1004C6348(v38 > 1, v39 + 1, 1, (unint64_t)v48);
        int64_t v40 = v45;
        int v48 = v43;
      }

      uint64_t v41 = v47;
      char v42 = v48;
      v48[2] = v40;
      sub_10002218C( v41,  (uint64_t)v42 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
      + *(void *)(v6 + 72) * v39,
        type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    }
  }

  unint64_t v28 = v26 + 4;
  if (v28 >= v51)
  {
LABEL_36:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v11 + 56))(v16, 1LL, 1LL, v10, v22);
LABEL_37:
    swift_release();
    return;
  }

  int64_t v27 = *(void *)(v50 + 8 * v28);
  if (v27)
  {
    unint64_t v23 = v28;
    goto LABEL_21;
  }

  while (1)
  {
    unint64_t v23 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v23 >= v51) {
      goto LABEL_36;
    }
    int64_t v27 = *(void *)(v50 + 8 * v23);
    ++v28;
    if (v27) {
      goto LABEL_21;
    }
  }

    unint64_t v16 = (v22 - 1) & v22;
  }

  unint64_t v23 = v21 + 4;
  if (v23 >= v25)
  {
LABEL_25:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56))(v12, 1LL, 1LL, v3, v17);
LABEL_26:
    swift_release(a1);
    return;
  }

  uint64_t v22 = *(void *)(v13 + 8 * v23);
  if (v22)
  {
    unint64_t v18 = v23;
    goto LABEL_21;
  }

  while (1)
  {
    unint64_t v18 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v18 >= v25) {
      goto LABEL_25;
    }
    uint64_t v22 = *(void *)(v13 + 8 * v18);
    ++v23;
    if (v22) {
      goto LABEL_21;
    }
  }

    unint64_t v16 = (v22 - 1) & v22;
  }

  unint64_t v23 = v21 + 4;
  if (v23 >= v25)
  {
LABEL_25:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56))(v12, 1LL, 1LL, v3, v17);
LABEL_26:
    swift_release();
    return;
  }

  uint64_t v22 = *(void *)(v24 + 8 * v23);
  if (v22)
  {
    unint64_t v18 = v23;
    goto LABEL_21;
  }

  while (1)
  {
    unint64_t v18 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v18 >= v25) {
      goto LABEL_25;
    }
    uint64_t v22 = *(void *)(v24 + 8 * v18);
    ++v23;
    if (v22) {
      goto LABEL_21;
    }
  }

            uint64_t v8 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_22:
            uint64_t v12 = *(unsigned __int8 *)(*(void *)(a1 + 48) + v8);
            Hasher.init(_seed:)(v15, *(void *)(v2 + 40));
            __asm { BR              X8 }
          }
        }
      }
    }

  a5[3] = v11;
  a5[4] = 0LL;
  swift_retain();
  return sub_100545C64(a1, a2, v19, a3);
}

        unint64_t v52 = *(void *)(v0 + 152);
        sub_100018C68(*(void *)(v0 + 144), type metadata accessor for ObservedAdvertisement);
        sub_100018C68(v52, type metadata accessor for ObservedAdvertisement);
        goto LABEL_22;
      }
    }

    else if ((v26 & 0x2000000000000000LL) == 0)
    {
      uint64_t v89 = v0 + 32;
      sub_10008699C(v23, v24);
      sub_10008699C(v25, v26);
      int64_t v27 = v23;
      unint64_t v28 = v24;
      goto LABEL_17;
    }

    uint64_t v29 = *(void *)(v0 + 144);
    uint64_t v30 = *(void *)(v0 + 56);
    sub_10001DC4C(*(void *)(v0 + 160), *(void *)(v0 + 152), type metadata accessor for ObservedAdvertisement);
    sub_10001DC4C(v30, v29, type metadata accessor for ObservedAdvertisement);
    goto LABEL_21;
  }

  sub_100015794(*(void *)(v0 + 104), &qword_10099FB70);
  if (qword_10099B4F0 != -1) {
    swift_once(&qword_10099B4F0, sub_1004B82C0);
  }
  uint64_t v5 = *(void *)(v0 + 128);
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_10000A720(v7, (uint64_t)qword_100A2AB30);
  uint64_t v8 = sub_10001DC4C(v6, v5, type metadata accessor for ObservedAdvertisement);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  uint64_t v10 = static os_log_type_t.default.getter(v9);
  uint64_t v11 = os_log_type_enabled(v9, v10);
  uint64_t v12 = *(void *)(v0 + 128);
  if (v11)
  {
    uint64_t v13 = *(void *)(v0 + 112);
    unint64_t v14 = *(void *)(v0 + 88);
    uint64_t v15 = swift_slowAlloc(22LL, -1LL);
    uint64_t v87 = swift_slowAlloc(32LL, -1LL);
    v91[0] = v87;
    *(_DWORD *)uint64_t v15 = 141558275;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2081;
    sub_10001581C(v12 + *(int *)(v13 + 52), v14, &qword_1009AA730);
    unint64_t v16 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
    unint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48LL))(v14, 1LL, v16);
    unint64_t v18 = *(void *)(v0 + 88);
    if (v17 == 1)
    {
      uint64_t v19 = 0x6E776F6E6B6E55LL;
      sub_100015794(*(void *)(v0 + 88), &qword_1009AA730);
      uint64_t v20 = 0xE700000000000000LL;
    }

    else
    {
      uint64_t v32 = *(void *)(v0 + 72);
      uint64_t v31 = *(void *)(v0 + 80);
      uint64_t v33 = *(void *)(v0 + 64);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v31, v18, v33);
      uint64_t v34 = sub_100018C68(v18, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      uint64_t v19 = UUID.uuidString.getter(v34);
      uint64_t v20 = v35;
      char v36 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
      __int16 v1 = v0 + 32;
      v36(v31, v33);
    }

    char v37 = *(void *)(v0 + 128);
    *(void *)(v0 + 24) = sub_1003F11D4(v19, v20, v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v1, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68(v37, type metadata accessor for ObservedAdvertisement);
    _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "First time we get an advertisement for %{private,mask.hash}s",  (uint8_t *)v15,  0x16u);
    swift_arrayDestroy(v87, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v87, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {
    sub_100018C68(*(void *)(v0 + 128), type metadata accessor for ObservedAdvertisement);
  }

  uint64_t v38 = (void *)SPManagedCBPeripheralChangedNotification;
  __int128 v39 = type metadata accessor for DarwinNotificationHelper(0LL);
  swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
  int64_t v40 = DarwinNotificationHelper.init(notificationName:rateLimit:)(v38, 0.0);
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0LL);
LABEL_31:
  swift_release(v40);
LABEL_32:
  uint64_t v77 = *(void *)(v0 + 152);
  uint64_t v79 = *(void *)(v0 + 136);
  uint64_t v78 = *(void *)(v0 + 144);
  unint64_t v80 = *(void *)(v0 + 128);
  id v82 = *(void *)(v0 + 96);
  uint64_t v81 = *(void *)(v0 + 104);
  uint64_t v84 = *(void *)(v0 + 80);
  uint64_t v83 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 160));
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

    swift_bridgeObjectRelease();
    if ((v23 & 0x200000000000LL) == 0)
    {
LABEL_11:
      if ((v23 & 0x400000000000LL) == 0) {
        goto LABEL_12;
      }
      goto LABEL_23;
    }

    uint64_t v21 = 5LL;
    while (1)
    {
      uint64_t v22 = v21 - 3;
      if (__OFADD__(v21 - 4, 1LL)) {
        break;
      }
      unint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(v9 + 8 * v21));
      int v25 = v24;
      int64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      if (v23 == v26 && v25 == v27)
      {
        swift_bridgeObjectRelease_n(v25, 2LL);
      }

      else
      {
        uint64_t v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v26, v27, 0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v29 & 1) == 0) {
          goto LABEL_30;
        }
      }

      ++v21;
      if (v22 == v10) {
        goto LABEL_17;
      }
    }

    __break(1u);
LABEL_34:
    swift_once(&qword_10099B318, sub_100352F58);
  }

  unint64_t v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v15, v16, 0LL);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
  {
    if (v10 == 1) {
      goto LABEL_17;
    }
    goto LABEL_21;
  }

      unint64_t v4 = (v10 - 1) & v10;
      uint64_t v8 = __clz(__rbit64(v10)) + (v5 << 6);
    }

    uint64_t v12 = *(void *)(*(void *)(v35 + 56) + 8 * v8);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    uint64_t v15 = v14;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
    char v37 = v6;
    unint64_t v18 = sub_10030CF14(v13, v15);
    uint64_t v19 = v6[2];
    uint64_t v20 = (v17 & 1) == 0;
    uint64_t v21 = v19 + v20;
    if (__OFADD__(v19, v20)) {
      break;
    }
    uint64_t v22 = v17;
    if (v6[3] >= v21)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v6 = v37;
        if ((v17 & 1) != 0) {
          goto LABEL_4;
        }
      }

      else
      {
        sub_100061B10();
        uint64_t v6 = v37;
        if ((v22 & 1) != 0) {
          goto LABEL_4;
        }
      }
    }

    else
    {
      sub_100049DAC(v21, isUniquelyReferenced_nonNull_native);
      unint64_t v23 = sub_10030CF14(v13, v15);
      if ((v22 & 1) != (v24 & 1)) {
        goto LABEL_38;
      }
      unint64_t v18 = v23;
      uint64_t v6 = v37;
      if ((v22 & 1) != 0)
      {
LABEL_4:
        *(void *)(v6[7] + 8 * v18) = v12;
        goto LABEL_5;
      }
    }

    v6[(v18 >> 6) + 8] |= 1LL << v18;
    int v25 = (uint64_t *)(v6[6] + 16 * v18);
    *int v25 = v13;
    v25[1] = v15;
    *(void *)(v6[7] + 8 * v18) = v12;
    int64_t v26 = v6[2];
    int64_t v27 = __OFADD__(v26, 1LL);
    unint64_t v28 = v26 + 1;
    if (v27) {
      goto LABEL_35;
    }
    v6[2] = v28;
    swift_bridgeObjectRetain(v15);
LABEL_5:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

          uint64_t v11 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_22:
          uint64_t v15 = *(unsigned __int8 *)(*(void *)(v4 + 48) + v11);
          Hasher.init(_seed:)(v17, *(void *)(v8 + 40));
          __asm { BR              X8 }
        }
      }
    }

    uint64_t v24 = (v30 - 1) & v30;
    unint64_t v28 = __clz(__rbit64(v30)) + (v26 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v15 + 16))( v20,  *(void *)(a1 + 48) + *(void *)(v15 + 72) * v28,  v14,  v25);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v20, 0LL, 1LL, v14);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v20, v14);
    v51(v17);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v10, 1LL, v49) == 1)
    {
      sub_100015794((uint64_t)v10, v48);
    }

    else
    {
      uint64_t v32 = v42;
      sub_10002218C((uint64_t)v10, v42, v44);
      sub_10002218C(v32, v43, v44);
      if ((swift_isUniquelyReferenced_nonNull_native(v45) & 1) == 0) {
        uint64_t v45 = (void *)v41(0LL, v45[2] + 1LL, 1LL);
      }
      uint64_t v34 = v45[2];
      uint64_t v33 = v45[3];
      uint64_t v35 = v34 + 1;
      if (v34 >= v33 >> 1)
      {
        int64_t v40 = v34 + 1;
        uint64_t v38 = ((uint64_t (*)(BOOL, unint64_t, uint64_t, void *))v41)(v33 > 1, v34 + 1, 1LL, v45);
        uint64_t v35 = v40;
        uint64_t v45 = (void *)v38;
      }

      char v36 = v44;
      char v37 = v45;
      v45[2] = v35;
      sub_10002218C( v43,  (uint64_t)v37 + ((*(unsigned __int8 *)(v52 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))
      + *(void *)(v52 + 72) * v34,
        v36);
    }
  }

  uint64_t v31 = v29 + 4;
  if (v31 >= v47)
  {
LABEL_30:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v15 + 56))(v20, 1LL, 1LL, v14, v25);
LABEL_31:
    swift_release(a1);
    return;
  }

  uint64_t v30 = *(void *)(v46 + 8 * v31);
  if (v30)
  {
    int64_t v26 = v31;
    goto LABEL_21;
  }

  while (1)
  {
    int64_t v26 = v31 + 1;
    if (__OFADD__(v31, 1LL)) {
      break;
    }
    if (v26 >= v47) {
      goto LABEL_30;
    }
    uint64_t v30 = *(void *)(v46 + 8 * v26);
    ++v31;
    if (v30) {
      goto LABEL_21;
    }
  }

  uint64_t result = sub_100015794((uint64_t)&v26[v27[7]], &qword_10099D8A0);
  if ((v25 & 0x10) != 0) {
    goto LABEL_22;
  }
LABEL_9:
  if ((v25 & 0x20) != 0)
  {
LABEL_10:
    uint64_t v33 = 0;
    goto LABEL_11;
  }

  CKRecordKeyValueSetting.subscript.getter( &v28,  0x6D754E656E6F6870LL,  0xEB00000000726562LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  uint64_t v19 = (unint64_t *)(v2 + v7[8]);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  if (*((void *)&v28 + 1))
  {
    if (!v20)
    {
      swift_bridgeObjectRelease();
      uint64_t v30 = 0LL;
      unint64_t v28 = 0u;
      uint64_t v29 = 0u;
LABEL_30:
      swift_bridgeObjectRetain(v20);
      CKRecordKeyValueSetting.subscript.setter(&v28, 0x6D754E656E6F6870LL, 0xEB00000000726562LL, ObjectType);
      goto LABEL_31;
    }

    if (v28 == __PAIR128__(v20, v21))
    {
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }

    uint64_t v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, *((void *)&v28 + 1), *v19, v19[1], 0LL);
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {
LABEL_29:
      *((void *)&v29 + 1) = &type metadata for String;
      uint64_t v30 = &protocol witness table for String;
      *(void *)&unint64_t v28 = v21;
      *((void *)&v28 + 1) = v20;
      goto LABEL_30;
    }
  }

  else if (v20)
  {
    goto LABEL_29;
  }

    uint64_t v24 = (v30 - 1) & v30;
    unint64_t v28 = __clz(__rbit64(v30)) + (v26 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v15 + 16))( v20,  *(void *)(v61 + 48) + *(void *)(v15 + 72) * v28,  v14,  v25);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v20, 0LL, 1LL, v14);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v20, v14);
    uint64_t v32 = *v59;
    if (*(void *)(*v59 + 16) && (uint64_t v33 = sub_10030D124((uint64_t)v17), (v34 & 1) != 0))
    {
      uint64_t v35 = *(void *)(v32 + 56);
      char v36 = v55;
      sub_10001DC4C(v35 + *(void *)(v56 + 72) * v33, v55, type metadata accessor for SafeLocation);
      char v37 = v36;
      uint64_t v38 = v54;
      sub_10002218C(v37, v54, type metadata accessor for SafeLocation);
      unint64_t v17 = v53;
      sub_10002218C(v38, (uint64_t)v9, type metadata accessor for SafeLocation);
      swift_storeEnumTagMultiPayload(v9, v10, 2LL);
      __int128 v39 = 0LL;
    }

    else
    {
      __int128 v39 = 1LL;
    }

    int64_t v40 = v60;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v60 + 56))(v9, v39, 1LL, v10);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v9, 1LL, v10) == 1)
    {
      sub_100015794((uint64_t)v9, &qword_1009B73B8);
    }

    else
    {
      uint64_t v49 = v26;
      uint64_t v41 = v50;
      sub_10002218C((uint64_t)v9, v50, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      sub_10002218C(v41, v51, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0) {
        unint64_t v52 = (void *)sub_1004C6BD0(0, v52[2] + 1LL, 1, (unint64_t)v52);
      }
      char v43 = v52[2];
      char v42 = v52[3];
      uint64_t v44 = v43 + 1;
      int64_t v26 = v49;
      if (v43 >= v42 >> 1)
      {
        int v48 = v43 + 1;
        uint64_t v47 = (void *)sub_1004C6BD0(v42 > 1, v43 + 1, 1, (unint64_t)v52);
        uint64_t v44 = v48;
        unint64_t v52 = v47;
      }

      uint64_t v45 = v51;
      uint64_t v46 = v52;
      v52[2] = v44;
      sub_10002218C( v45,  (uint64_t)v46 + ((*(unsigned __int8 *)(v60 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))
      + *(void *)(v60 + 72) * v43,
        type metadata accessor for LocationOfInterestProvider.RemappingOperation);
    }
  }

  uint64_t v31 = v29 + 4;
  if (v31 >= v58)
  {
LABEL_34:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v15 + 56))(v20, 1LL, 1LL, v14, v25);
LABEL_35:
    swift_release();
    return;
  }

  uint64_t v30 = *(void *)(v57 + 8 * v31);
  if (v30)
  {
    int64_t v26 = v31;
    goto LABEL_21;
  }

  while (1)
  {
    int64_t v26 = v31 + 1;
    if (__OFADD__(v31, 1LL)) {
      break;
    }
    if (v26 >= v58) {
      goto LABEL_34;
    }
    uint64_t v30 = *(void *)(v57 + 8 * v26);
    ++v31;
    if (v30) {
      goto LABEL_21;
    }
  }

    __int128 v63 = (v30 - 1) & v30;
    int64_t v27 = __clz(__rbit64(v30)) + (v25 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v28 + 16))( v19,  *(void *)(v60 + 48) + *(void *)(v28 + 72) * v27,  v14,  v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v19, 0LL, 1LL, v14);
    uint64_t v32 = v19;
    uint64_t v33 = v14;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v16, v32, v14);
    uint64_t v34 = *(void *)(v26 + 16);
    __int128 v62 = v25;
    if (v34)
    {
      uint64_t v35 = v53;
      char v36 = v26 + ((*(unsigned __int8 *)(v53 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80));
      swift_bridgeObjectRetain(v26);
      char v37 = *(void *)(v35 + 72);
      while (1)
      {
        sub_10001DC4C(v36, (uint64_t)v6, type metadata accessor for SafeLocation);
        sub_100018C68((uint64_t)v6, type metadata accessor for SafeLocation);
        v36 += v37;
        if (!--v34)
        {
          int64_t v26 = v56;
          swift_bridgeObjectRelease();
          goto LABEL_28;
        }
      }

      int64_t v26 = v56;
      swift_bridgeObjectRelease();
      int64_t v40 = v52;
      sub_10002218C((uint64_t)v6, v52, type metadata accessor for SafeLocation);
      __int128 v39 = (uint64_t)v57;
      sub_10002218C(v40, (uint64_t)v57, type metadata accessor for SafeLocation);
      swift_storeEnumTagMultiPayload(v39, v61, 1LL);
      uint64_t v38 = 0LL;
    }

    else
    {
LABEL_28:
      uint64_t v38 = 1LL;
      __int128 v39 = (uint64_t)v57;
    }

    uint64_t v41 = v59;
    char v42 = v61;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56))(v39, v38, 1LL, v61);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v16, v33);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v39, 1LL, v42) != 1)
    {
      char v43 = v39;
      uint64_t v44 = v49;
      sub_10002218C(v43, v49, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      sub_10002218C(v44, v50, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) == 0) {
        __int128 v51 = (void *)sub_1004C6BD0(0, v51[2] + 1LL, 1, (unint64_t)v51);
      }
      unint64_t v14 = v33;
      uint64_t v46 = v51[2];
      uint64_t v45 = v51[3];
      uint64_t v19 = v58;
      if (v46 >= v45 >> 1) {
        __int128 v51 = (void *)sub_1004C6BD0(v45 > 1, v46 + 1, 1, (unint64_t)v51);
      }
      uint64_t v47 = v50;
      int v48 = v51;
      v51[2] = v46 + 1;
      sub_10002218C( v47,  (uint64_t)v48 + ((*(unsigned __int8 *)(v59 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80))
      + *(void *)(v59 + 72) * v46,
        type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      int v25 = v62;
      unint64_t v23 = v63;
      goto LABEL_4;
    }

    sub_100015794(v39, &qword_1009B73B8);
    unint64_t v14 = v33;
    uint64_t v19 = v58;
    int v25 = v62;
    unint64_t v23 = v63;
    if (v63) {
      goto LABEL_5;
    }
  }

  uint64_t v31 = v29 + 4;
  if (v31 >= v55)
  {
LABEL_38:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v64 + 56))(v19, 1LL, 1LL, v14, v24);
LABEL_39:
    swift_release();
    return;
  }

  uint64_t v30 = *(void *)(v54 + 8 * v31);
  if (v30)
  {
    int v25 = v31;
    goto LABEL_21;
  }

  while (1)
  {
    int v25 = v31 + 1;
    if (__OFADD__(v31, 1LL)) {
      break;
    }
    if (v25 >= v55) {
      goto LABEL_38;
    }
    uint64_t v30 = *(void *)(v54 + 8 * v25);
    ++v31;
    if (v30) {
      goto LABEL_21;
    }
  }

      swift_bridgeObjectRelease();
      goto LABEL_12;
    }

    swift_bridgeObjectRelease();
  }

  swift_beginAccess(v11, v36, 0LL, 0LL);
  int64_t v27 = swift_bridgeObjectRetain(*v11);
  a6(v27);
  return swift_bridgeObjectRelease();
}

    __break(1u);
    goto LABEL_22;
  }

          v8[(v18 >> 6) + 8] |= 1LL << v18;
          uint64_t v29 = (uint64_t *)(v8[6] + 16 * v18);
          *uint64_t v29 = v10;
          v29[1] = v9;
          uint64_t v30 = (_BYTE *)(v8[7] + 2 * v18);
          *uint64_t v30 = v46;
          v30[1] = v47;
          uint64_t v31 = v8[2];
          uint64_t v32 = __OFADD__(v31, 1LL);
          uint64_t v33 = v31 + 1;
          if (v32) {
            goto LABEL_36;
          }
          v8[2] = v33;
          swift_bridgeObjectRetain(v9);
          goto LABEL_23;
        }

        swift_bridgeObjectRelease();
      }

      swift_bridgeObjectRetain(v8);
      int v25 = sub_10030CF14(v10, v9);
      int64_t v27 = v26;
      swift_bridgeObjectRelease();
      if ((v27 & 1) != 0)
      {
        v49[0] = v8;
        if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        {
          sub_1000687EC();
          uint64_t v8 = (void *)v49[0];
        }

        swift_bridgeObjectRelease();
        sub_10005AFF4(v25, (uint64_t)v8);
        goto LABEL_23;
      }

      swift_bridgeObjectRelease_n(v9, 2LL);
LABEL_4:
      v7 += 2;
      if (!--v4)
      {
        uint64_t result = swift_bridgeObjectRelease();
        if ((a3 & 1) != 0)
        {
          swift_bridgeObjectRetain(v44);
          uint64_t v34 = (uint64_t *)(v44 + 40);
          do
          {
            uint64_t v35 = *(v34 - 1);
            char v36 = *v34;
            swift_beginAccess(v6, v49, 33LL, 0LL);
            char v37 = *v6;
            swift_bridgeObjectRetain(v36);
            swift_bridgeObjectRetain(v37);
            uint64_t v38 = sub_10030CF14(v35, v36);
            int64_t v40 = v39;
            swift_bridgeObjectRelease();
            if ((v40 & 1) != 0)
            {
              uint64_t v41 = swift_isUniquelyReferenced_nonNull_native(*v6);
              char v42 = *v6;
              __int128 v51 = *v6;
              *uint64_t v6 = 0x8000000000000000LL;
              if (!v41)
              {
                sub_1000687EC();
                char v42 = v51;
              }

              swift_bridgeObjectRelease();
              sub_10005AFF4(v38, v42);
              *uint64_t v6 = v42;
              swift_bridgeObjectRelease();
            }

            v34 += 2;
            swift_endAccess(v49);
            swift_bridgeObjectRelease();
            --v48;
          }

          while (v48);
          uint64_t result = swift_bridgeObjectRelease();
        }

        a4 = v45;
        goto LABEL_34;
      }
    }
  }

  uint64_t v8 = _swiftEmptyDictionarySingleton;
LABEL_34:
  *a4 = v8;
  return result;
}

    __int16 v1 = v1 | 4;
    goto LABEL_22;
  }

  __int16 v1 = 0LL;
  if ((a1 & 4) != 0) {
    goto LABEL_21;
  }
  if ((a1 & 8) != 0) {
    goto LABEL_32;
  }
LABEL_9:
  if ((a1 & 0x10) != 0) {
    goto LABEL_33;
  }
  if ((a1 & 0x20) != 0) {
    goto LABEL_34;
  }
  if ((a1 & 0x40) != 0) {
    goto LABEL_35;
  }
  if ((a1 & 0x80) != 0) {
    goto LABEL_36;
  }
  if ((a1 & 0x100) != 0) {
    goto LABEL_37;
  }
  if ((a1 & 0x400) == 0)
  {
    if ((a1 & 0x800) == 0)
    {
      if ((a1 & 0x200) == 0) {
        goto LABEL_42;
      }
LABEL_41:
      __int16 v1 = v1 | 0x200;
      goto LABEL_42;
    }

    goto LABEL_39;
  }

    swift_once(&qword_10099B6F0, sub_100651034);
    goto LABEL_9;
  }

  uint64_t v53 = v69;
  _convertNSErrorToError(_:)(v36);

  swift_willThrow(v54);
  return (*((uint64_t (**)(char *, uint64_t))v10 + 1))(v15, v68);
}

uint64_t sub_10004C520(uint64_t a1, uint64_t a2)
{
  return sub_100055C58(a1, a2, &qword_10099E540);
}

uint64_t sub_10004C52C(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v59 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = &v51[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v7);
  uint64_t v11 = &v51[-v10];
  uint64_t v12 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E300);
  uint64_t v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  if (!*(void *)(v12 + 16))
  {
    uint64_t v48 = v12;
LABEL_44:
    uint64_t result = swift_release(v48);
    *int v3 = v13;
    return result;
  }

  uint64_t v14 = 1LL << *(_BYTE *)(v12 + 32);
  uint64_t v15 = *(void *)(v12 + 64);
  unint64_t v55 = (void *)(v12 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1LL << v14);
  }
  else {
    uint64_t v16 = -1LL;
  }
  unint64_t v17 = v16 & v15;
  uint64_t v53 = v2;
  int64_t v54 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v18 = v12;
  uint64_t v19 = v13 + 64;
  uint64_t v58 = v18;
  uint64_t result = swift_retain();
  int64_t v21 = 0LL;
  int v52 = a2;
  uint64_t v22 = 16LL;
  if ((a2 & 1) != 0) {
    uint64_t v22 = 32LL;
  }
  uint64_t v56 = v22;
  __int128 v57 = v9;
  while (1)
  {
    if (v17)
    {
      unint64_t v27 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v28 = v27 | (v21 << 6);
      goto LABEL_26;
    }

    int64_t v29 = v21 + 1;
    if (__OFADD__(v21, 1LL))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }

    if (v29 >= v54)
    {
      uint64_t v49 = v58;
      swift_release(v58);
      int v3 = v53;
      uint64_t v30 = v55;
      if ((v52 & 1) != 0)
      {
LABEL_39:
        uint64_t v50 = 1LL << *(_BYTE *)(v49 + 32);
        if (v50 >= 64) {
          bzero(v30, ((unint64_t)(v50 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
        }
        else {
          *uint64_t v30 = -1LL << v50;
        }
        *(void *)(v49 + swift_weakDestroy(v0 + 16) = 0LL;
      }

LABEL_43:
      uint64_t v48 = v49;
      goto LABEL_44;
    }

    uint64_t v30 = v55;
    unint64_t v31 = v55[v29];
    ++v21;
    if (!v31)
    {
      int64_t v21 = v29 + 1;
      if (v29 + 1 >= v54) {
        goto LABEL_36;
      }
      unint64_t v31 = v55[v21];
      if (!v31) {
        break;
      }
    }

      uint64_t result = swift_release();
      goto LABEL_44;
    }

    unint64_t v23 = v43;
    unint64_t v24 = v43[v22];
    ++v17;
    if (!v24)
    {
      unint64_t v17 = v22 + 1;
      if (v22 + 1 >= v42) {
        goto LABEL_36;
      }
      unint64_t v24 = v43[v17];
      if (!v24) {
        break;
      }
    }

      uint64_t result = swift_release();
      goto LABEL_44;
    }

    unint64_t v23 = v43;
    unint64_t v24 = v43[v22];
    ++v17;
    if (!v24)
    {
      unint64_t v17 = v22 + 1;
      if (v22 + 1 >= v42) {
        goto LABEL_36;
      }
      unint64_t v24 = v43[v17];
      if (!v24) {
        break;
      }
    }

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v37);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
LABEL_44:
    sub_1003CB57C((void **)&v41, (const void **)&v40, &v39);
    swift_release();
    return 1LL;
  }

  swift_release();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_44:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  __break(1u);
}

            swift_bridgeObjectRelease();
            unint64_t v24 = v110;
          }

          __int128 v65 = v0[34];
          __int128 v64 = v0[35];
          __int128 v66 = (char *)v0[33];
          __int128 v67 = v0[31];
          (*(void (**)(char *, uint64_t, uint64_t))(v117 + 16))(v66, v64, v67);
          sub_1000BD768(v65, v66);
          v127(v65, v67);
          v127(v64, v67);
        }

        __int128 v69 = v0[42];
        __int128 v68 = v0[43];
        __int128 v70 = v0[36];
        __int128 v71 = type metadata accessor for StableIdentifier;
        sub_10001DC4C(v129, v68, type metadata accessor for StableIdentifier);
        LODWORD(v70) = swift_getEnumCaseMultiPayload(v68, v70);
        sub_100018C68(v68, type metadata accessor for StableIdentifier);
        sub_10001DC4C(v129, v69, type metadata accessor for StableIdentifier);
        unint64_t v23 = v125;
        if ((_DWORD)v70 != 1)
        {
          uint64_t v72 = v0[41];
          uint64_t v73 = v0[36];
          sub_10001DC4C(v0[42], v72, type metadata accessor for StableIdentifier);
          uint64_t v74 = swift_getEnumCaseMultiPayload(v72, v73);
          if (v74 == 2)
          {
            sub_100004AEC((uint64_t *)&unk_1009B0520);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }

          else
          {
            if (v74 != 3)
            {
              NSString v98 = v0[42];
              sub_100018C68(v0[41], type metadata accessor for StableIdentifier);
LABEL_87:
              sub_100018C68(v98, v71);
              uint64_t v22 = v118;
LABEL_88:
              unint64_t v25 = __OFADD__(v24++, 1LL);
              if (v25) {
                goto LABEL_98;
              }
              goto LABEL_22;
            }

            sub_100004AEC((uint64_t *)&unk_1009AF840);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }

          uint64_t v93 = v0[41];
          unint64_t v94 = v0[31];
          swift_bridgeObjectRelease();
          v127(v93, v94);
        }

        uint64_t v95 = v0[56];
        uint64_t v96 = v0[40];
        uint64_t v97 = v0[36];
        sub_100018C68(v0[42], type metadata accessor for StableIdentifier);
        sub_10001DC4C(v129, v96, type metadata accessor for StableIdentifier);
        LODWORD(v97) = swift_getEnumCaseMultiPayload(v96, v97);
        sub_100018C68(v96, type metadata accessor for StableIdentifier);
        __int128 v71 = type metadata accessor for OwnedBeaconRecord;
        sub_10001DC4C(v116, v95, type metadata accessor for OwnedBeaconRecord);
        NSString v98 = v0[56];
        if ((_DWORD)v97 != 1) {
          goto LABEL_87;
        }
        uint64_t v22 = v118;
        id v99 = (void *)(v98 + v118[15]);
        NSString v100 = v99[1];
        if (*v99 == 0x3830332E302E32LL && v100 == 0xE700000000000000LL)
        {
          sub_100018C68(v0[56], type metadata accessor for OwnedBeaconRecord);
        }

        else
        {
          id v101 = _stringCompareWithSmolCheck(_:_:expecting:)(*v99, v100, 0x3830332E302E32LL, 0xE700000000000000LL, 0LL);
          sub_100018C68(v98, type metadata accessor for OwnedBeaconRecord);
          if ((v101 & 1) == 0) {
            goto LABEL_88;
          }
        }

        unint64_t v25 = __OFADD__(v111++, 1LL);
        if (v25) {
          goto LABEL_101;
        }
      }

      else
      {
        unint64_t v43 = v0[46];
        unint64_t v42 = v0[47];
        char v44 = v0[36];
        unint64_t v45 = v129;
        BOOL v46 = type metadata accessor for StableIdentifier;
        sub_10001DC4C(v129, v42, type metadata accessor for StableIdentifier);
        LODWORD(v44) = swift_getEnumCaseMultiPayload(v42, v44);
        sub_100018C68(v42, type metadata accessor for StableIdentifier);
        sub_10001DC4C(v129, v43, type metadata accessor for StableIdentifier);
        unint64_t v23 = v125;
        if ((_DWORD)v44 != 1)
        {
          uint64_t v47 = v0[45];
          uint64_t v48 = v0[36];
          sub_10001DC4C(v0[46], v47, type metadata accessor for StableIdentifier);
          uint64_t v49 = swift_getEnumCaseMultiPayload(v47, v48);
          if (v49 == 2)
          {
            sub_100004AEC((uint64_t *)&unk_1009B0520);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }

          else
          {
            if (v49 != 3)
            {
              uint64_t v89 = v0[46];
              sub_100018C68(v0[45], type metadata accessor for StableIdentifier);
LABEL_72:
              sub_100018C68(v89, v46);
              uint64_t v22 = v118;
LABEL_73:
              unint64_t v25 = __OFADD__(v115++, 1LL);
              if (v25) {
                goto LABEL_97;
              }
              goto LABEL_22;
            }

            sub_100004AEC((uint64_t *)&unk_1009AF840);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }

          uint64_t v84 = v0[45];
          uint64_t v85 = v0[31];
          swift_bridgeObjectRelease();
          v127(v84, v85);
          unint64_t v45 = v129;
        }

        uint64_t v86 = v0[57];
        uint64_t v87 = v0[44];
        uint64_t v88 = v0[36];
        sub_100018C68(v0[46], type metadata accessor for StableIdentifier);
        sub_10001DC4C(v45, v87, type metadata accessor for StableIdentifier);
        LODWORD(v88) = swift_getEnumCaseMultiPayload(v87, v88);
        sub_100018C68(v87, type metadata accessor for StableIdentifier);
        BOOL v46 = type metadata accessor for OwnedBeaconRecord;
        sub_10001DC4C(v28, v86, type metadata accessor for OwnedBeaconRecord);
        uint64_t v89 = v0[57];
        if ((_DWORD)v88 != 1) {
          goto LABEL_72;
        }
        uint64_t v22 = v118;
        uint64_t v90 = (void *)(v89 + v118[15]);
        id v91 = v90[1];
        if (*v90 == 0x3830332E302E32LL && v91 == 0xE700000000000000LL)
        {
          sub_100018C68(v0[57], type metadata accessor for OwnedBeaconRecord);
        }

        else
        {
          id v92 = _stringCompareWithSmolCheck(_:_:expecting:)(*v90, v91, 0x3830332E302E32LL, 0xE700000000000000LL, 0LL);
          sub_100018C68(v89, type metadata accessor for OwnedBeaconRecord);
          if ((v92 & 1) == 0) {
            goto LABEL_73;
          }
        }

        unint64_t v25 = __OFADD__(v113++, 1LL);
        if (v25) {
          goto LABEL_99;
        }
      }

    double v494 = (v137 - 1) & v137;
    *(void *)&double v495 = v136;
    uint64_t v131 = __clz(__rbit64(v137)) + (v136 << 6);
LABEL_39:
    uint64_t v132 = v476;
    sub_10001DC4C( *(void *)(v476 + 48) + *(void *)(v470 + 72) * v131,  v129,  type metadata accessor for StableIdentifier);
    uint64_t v133 = *(void *)(v132 + 56);
    uint64_t v134 = sub_100004AEC(&qword_1009B28B8);
    uint64_t v135 = *(void *)(v133 + 8 * v131);
    uint64_t v129 = v486;
    *(void *)(v486 + *(int *)(v134 + 48)) = v135;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v134 - 8) + 56LL))(v129, 0LL, 1LL, v134);
    swift_bridgeObjectRetain(v135);
    id v130 = v481;
LABEL_46:
    sub_100015750(v129, v130, &qword_1009B28B0);
    uint64_t v139 = sub_100004AEC(&qword_1009B28B8);
    uint64_t v140 = *(unint64_t **)(v139 - 8);
    uint64_t v141 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v140[6];
    if (v141(v130, 1LL, v139) != 1)
    {
      uint64_t v142 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v130 + *(int *)(v139 + 48));
      sub_10002218C(v130, v121, type metadata accessor for StableIdentifier);
      if (*((void *)v142 + 2) < 2uLL)
      {
        sub_100018C68(v121, type metadata accessor for StableIdentifier);
        swift_bridgeObjectRelease();
      }

      else
      {
        double v485 = v142;
        sub_10052CB80();
        uint64_t v475 = v143;
        id v145 = v144;
        if (qword_10099B528 != -1) {
          swift_once(&qword_10099B528, sub_1004F3B00);
        }
        uint64_t v146 = type metadata accessor for Logger(0LL);
        sub_10000A720(v146, (uint64_t)qword_100A2AC98);
        uint64_t v147 = v467;
        uint64_t v148 = sub_10001DC4C(v121, v467, type metadata accessor for StableIdentifier);
        uint64_t v149 = (os_log_s *)Logger.logObject.getter(v148);
        uint64_t v150 = static os_log_type_t.error.getter(v149);
        if (os_log_type_enabled(v149, v150))
        {
          uint64_t v151 = swift_slowAlloc(22LL, -1LL);
          double v444 = (unint64_t)v145;
          uint64_t v152 = v151;
          uint64_t v153 = swift_slowAlloc(32LL, -1LL);
          double aBlock = v153;
          *(_DWORD *)uint64_t v152 = v465;
          uint64_t v506 = 1752392040LL;
          uint64_t v154 = v463;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v506, v463, v152 + 4, v152 + 12);
          *(_WORD *)(v152 + 12) = 2081;
          uint64_t v443 = (char *)(v152 + 14);
          uint64_t v155 = v147;
          uint64_t v156 = v457;
          sub_10001DC4C(v155, v457, type metadata accessor for StableIdentifier);
          uint64_t v157 = String.init<A>(describing:)(v156, v458);
          uint64_t v506 = sub_1003F11D4(v157, v158, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v506, v154, v443, v152 + 22);
          swift_bridgeObjectRelease();
          sub_100018C68(v467, type metadata accessor for StableIdentifier);
          _os_log_impl( (void *)&_mh_execute_header,  v149,  v150,  "Duplicates for %{private,mask.hash}s",  (uint8_t *)v152,  0x16u);
          swift_arrayDestroy(v153, 1LL, v440);
          swift_slowDealloc(v153, -1LL, -1LL);
          double v159 = v152;
          id v145 = (void *)v444;
          swift_slowDealloc(v159, -1LL, -1LL);
        }

        else
        {
          sub_100018C68(v147, type metadata accessor for StableIdentifier);
        }

        double v160 = (uint64_t)v466;
        if (*v117)
        {
          double aBlock = 0LL;
          uint64_t v501 = 0xE000000000000000LL;
          _StringGuts.grow(_:)(30LL);
          swift_bridgeObjectRelease();
          double aBlock = 0xD00000000000001CLL;
          uint64_t v501 = v441;
          v161._countAndFlagsBits = v475;
          v161._object = v145;
          String.append(_:)(v161);
          swift_bridgeObjectRelease();
          double v162 = aBlock;
          double v163 = v501;
          double v164 = (void *)*v117;
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v117);
          uint64_t *v117 = v164;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            double v164 = sub_1004C4120(0LL, v164[2] + 1LL, 1, v164);
            uint64_t *v117 = v164;
          }

          v167 = v164[2];
          v166 = v164[3];
          if (v167 >= v166 >> 1)
          {
            double v164 = sub_1004C4120((void *)(v166 > 1), v167 + 1, 1, v164);
            uint64_t *v117 = v164;
          }

          v164[2] = v167 + 1;
          char v168 = &v164[2 * v167];
          v168[4] = v162;
          v168[5] = v163;
        }

        else
        {
          swift_bridgeObjectRelease();
        }

        uint64_t v169 = v480;
        if (qword_10099B4D8 != -1) {
          swift_once(&qword_10099B4D8, sub_1004AB71C);
        }
        sub_10000A720(v146, (uint64_t)qword_100A2AB18);
        uint64_t v170 = sub_10001DC4C(v169, v160, type metadata accessor for StableIdentifier);
        uint64_t v171 = (os_log_s *)Logger.logObject.getter(v170);
        char v172 = static os_log_type_t.default.getter(v171);
        if (os_log_type_enabled(v171, v172))
        {
          uint64_t v173 = swift_slowAlloc(22LL, -1LL);
          uint64_t v475 = swift_slowAlloc(32LL, -1LL);
          double aBlock = v475;
          *(_DWORD *)uint64_t v173 = v465;
          uint64_t v506 = 1752392040LL;
          uint64_t v174 = v463;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v506, v463, v173 + 4, v173 + 12);
          *(_WORD *)(v173 + 12) = 2081;
          double v444 = v173 + 14;
          uint64_t v175 = v457;
          sub_10001DC4C(v160, v457, type metadata accessor for StableIdentifier);
          uint64_t v176 = String.init<A>(describing:)(v175, v458);
          uint64_t v506 = sub_1003F11D4(v176, v177, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v506, v174, v444, v173 + 22);
          swift_bridgeObjectRelease();
          sub_100018C68(v160, type metadata accessor for StableIdentifier);
          _os_log_impl( (void *)&_mh_execute_header,  v171,  v172,  "Duplicates for %{private,mask.hash}s",  (uint8_t *)v173,  0x16u);
          v178 = v475;
          swift_arrayDestroy(v475, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v178, -1LL, -1LL);
          swift_slowDealloc(v173, -1LL, -1LL);
        }

        else
        {
          sub_100018C68(v160, type metadata accessor for StableIdentifier);
        }

        uint64_t v119 = v497;
        char v120 = (uint64_t)v487;
        uint64_t v179 = *((void *)v485 + 2);
        uint64_t v180 = v473;
        uint64_t v181 = (*(unsigned __int8 *)(v473 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v473 + 80);
        if (v179)
        {
          uint64_t v475 = (*(unsigned __int8 *)(v473 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v473 + 80);
          uint64_t v182 = (uint64_t)v485 + v181;
          swift_bridgeObjectRetain(v485);
          uint64_t v183 = *(void *)(v180 + 72);
          uint64_t v184 = (uint64_t)v496;
          do
          {
            sub_10001DC4C(v182, (uint64_t)v76, type metadata accessor for OwnedBeaconRecord);
            if (*v117)
            {
              double aBlock = 8224LL;
              uint64_t v501 = 0xE200000000000000LL;
              uint64_t v185 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
              v186._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v497, v185);
              String.append(_:)(v186);
              swift_bridgeObjectRelease();
              uint64_t v187 = aBlock;
              uint64_t v188 = v501;
              uint64_t v189 = (void *)*v117;
              uint64_t v190 = swift_isUniquelyReferenced_nonNull_native(*v117);
              uint64_t *v117 = v189;
              if ((v190 & 1) == 0)
              {
                uint64_t v189 = sub_1004C4120(0LL, v189[2] + 1LL, 1, v189);
                uint64_t *v117 = v189;
              }

              v192 = v189[2];
              uint64_t v191 = v189[3];
              if (v192 >= v191 >> 1)
              {
                uint64_t v189 = sub_1004C4120((void *)(v191 > 1), v192 + 1, 1, v189);
                *double v498 = v189;
              }

              v189[2] = v192 + 1;
              int v193 = &v189[2 * v192];
              v193[4] = v187;
              v193[5] = v188;
              uint64_t v117 = v498;
              uint64_t v184 = (uint64_t)v496;
            }

            uint64_t v194 = sub_10001DC4C((uint64_t)v76, v184, type metadata accessor for OwnedBeaconRecord);
            v195 = (os_log_s *)Logger.logObject.getter(v194);
            v196 = static os_log_type_t.error.getter(v195);
            if (os_log_type_enabled(v195, v196))
            {
              uint64_t v197 = swift_slowAlloc(12LL, -1LL);
              uint64_t v198 = swift_slowAlloc(32LL, -1LL);
              double aBlock = v198;
              *(_DWORD *)uint64_t v197 = v484;
              uint64_t v199 = v184;
              uint64_t v200 = v490;
              sub_10001DC4C(v199, v490, type metadata accessor for OwnedBeaconRecord);
              uint64_t v201 = String.init<A>(describing:)(v200, v499);
              *(void *)(v197 + 4) = sub_1003F11D4(v201, v202, &aBlock);
              uint64_t v184 = (uint64_t)v496;
              swift_bridgeObjectRelease();
              sub_100018C68(v184, type metadata accessor for OwnedBeaconRecord);
              _os_log_impl((void *)&_mh_execute_header, v195, v196, "DUPE: %{public}s", (uint8_t *)v197, 0xCu);
              swift_arrayDestroy(v198, 1LL, (char *)&type metadata for Any + 8);
              uint64_t v203 = v198;
              uint64_t v117 = v498;
              swift_slowDealloc(v203, -1LL, -1LL);
              swift_slowDealloc(v197, -1LL, -1LL);
            }

            else
            {

              sub_100018C68(v184, type metadata accessor for OwnedBeaconRecord);
            }

            sub_100018C68((uint64_t)v76, type metadata accessor for OwnedBeaconRecord);
            v182 += v183;
            --v179;
          }

          while (v179);
          uint64_t v204 = (uint64_t)v485;
          swift_bridgeObjectRelease();
          uint64_t v205 = *(void *)(v204 + 16);
          if (v205 >= 2) {
            uint64_t v206 = v205 - 1;
          }
          else {
            uint64_t v206 = 0LL;
          }
          uint64_t v119 = v497;
          char v120 = (uint64_t)v487;
          id v130 = v481;
          uint64_t v181 = v475;
        }

        else
        {
          uint64_t v206 = 0LL;
          id v130 = v481;
          uint64_t v204 = (uint64_t)v485;
        }

        sub_1001863CC(v204, v204 + v181, 0LL, (2 * v206) | 1);
        uint64_t v121 = v480;
        sub_100018C68(v480, type metadata accessor for StableIdentifier);
        uint64_t v129 = v486;
      }

      uint64_t v128 = v494;
      uint64_t v124 = v495;
      continue;
    }

    break;
  }

  uint64_t v463 = v140;
  uint64_t v466 = (char *)v139;
  swift_release();
  uint64_t v209 = 0LL;
  char v210 = *(void *)(v460 + 64);
  double v441 = v460 + 64;
  uint64_t v211 = 1LL << *(_BYTE *)(v460 + 32);
  v212 = -1LL;
  if (v211 < 64) {
    v212 = ~(-1LL << v211);
  }
  v213 = v212 & v210;
  double v445 = (unint64_t)(v211 + 63) >> 6;
  double v440 = (char *)(v445 - 1);
  uint64_t v443 = (char *)&type metadata for Any + 8;
  *(void *)&char v208 = 141558531LL;
  uint64_t v480 = v208;
  double v444 = 0x8000000100867390LL;
  uint64_t v214 = (uint64_t)v447;
  uint64_t v215 = (uint64_t)v446;
  uint64_t v216 = (unsigned int (*)(uint64_t, uint64_t, char *))v141;
  double v485 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v141;
  while (2)
  {
    uint64_t v217 = v464;
    if (v213)
    {
      uint64_t v218 = v215;
      uint64_t v475 = (v213 - 1) & v213;
      uint64_t v476 = v209;
      uint64_t v219 = __clz(__rbit64(v213)) | (v209 << 6);
      goto LABEL_106;
    }

    double v224 = v209 + 1;
    if (__OFADD__(v209, 1LL)) {
      goto LABEL_210;
    }
    if (v224 >= v445)
    {
      uint64_t v476 = v209;
      goto LABEL_112;
    }

    double v225 = *(void *)(v441 + 8 * v224);
    uint64_t v222 = v466;
    if (!v225)
    {
      double v340 = v209 + 2;
      if (v209 + 2 >= v445)
      {
LABEL_187:
        uint64_t v476 = v224;
        goto LABEL_113;
      }

      double v225 = *(void *)(v441 + 8 * v340);
      if (v225)
      {
LABEL_173:
        double v224 = v340;
        goto LABEL_110;
      }

      if (v209 + 3 >= v445)
      {
        uint64_t v476 = v209 + 2;
      }

      else
      {
        double v225 = *(void *)(v441 + 8 * (v209 + 3));
        if (v225)
        {
          double v224 = v209 + 3;
          goto LABEL_110;
        }

        double v340 = v209 + 4;
        if (v209 + 4 < v445)
        {
          double v225 = *(void *)(v441 + 8 * v340);
          if (v225) {
            goto LABEL_173;
          }
          uint64_t v222 = v466;
          while (1)
          {
            double v224 = v340 + 1;
            if (__OFADD__(v340, 1LL)) {
              goto LABEL_212;
            }
            if (v224 >= v445) {
              break;
            }
            double v225 = *(void *)(v441 + 8 * v224);
            ++v340;
            if (v225) {
              goto LABEL_110;
            }
          }

          double v224 = (uint64_t)v440;
          goto LABEL_187;
        }

        uint64_t v476 = v209 + 3;
      }

      __break(1u);
LABEL_44:
      sub_100061B10();
      int v52 = v141;
    }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
  __break(1u);
  return result;
}

            sub_1000A6F30(v6);
            return;
          }
        }
      }
    }

  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

        if (!(_DWORD)v76)
        {
LABEL_22:
          if (!(_DWORD)v77) {
            goto LABEL_24;
          }
          goto LABEL_23;
        }

  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
}

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
  __break(1u);
  return result;
}

        __break(1u);
LABEL_44:
        uint64_t v16 = sub_1004C50C8((void *)(v13 > 1), v5, 1, v4);
        unint64_t v4 = v16;
LABEL_19:
        v4[2] = v5;
        unint64_t v17 = &v4[2 * v8];
        v17[4] = v10;
        v17[5] = v7;
        if (v6 > a4)
        {
          uint64_t v38 = static os_log_type_t.default.getter(v16);
          if (qword_10099B3E8 != -1) {
            swift_once(&qword_10099B3E8, sub_1003E02E8);
          }
          unint64_t v37 = qword_100A2A8F0;
          uint64_t v18 = sub_100004AEC((uint64_t *)&unk_10099D740);
          uint64_t v19 = swift_allocObject(v18, 72LL, 7LL);
          *(_OWORD *)(v19 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
          uint64_t v41 = v6;
          unint64_t v42 = a4 + 1;
          uint64_t v39 = 0LL;
          uint64_t v40 = 0xE000000000000000LL;
          _print_unlocked<A, B>(_:_:)( &v42,  &v39,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
          v20._countAndFlagsBits = 3026478LL;
          v20._object = (void *)0xE300000000000000LL;
          String.append(_:)(v20);
          _print_unlocked<A, B>(_:_:)( &v41,  &v39,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
          int64_t v21 = v39;
          uint64_t v22 = v40;
          *(void *)(v19 + 56) = &type metadata for String;
          *(void *)(v19 + 64) = sub_1000226F4();
          *(void *)(v19 + 32) = v21;
          *(void *)(v19 + 40) = v22;
          os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, v37, "Hole created %@", 15LL, 2LL, v19);
          swift_bridgeObjectRelease();
        }

        if (!v15) {
          return v4;
        }
        unint64_t v23 = a2 + 1;
        if (a2 != -1LL)
        {
LABEL_25:
          if (v23 <= v10) {
            unint64_t v24 = v10;
          }
          else {
            unint64_t v24 = v23;
          }
          if (v24 > a4)
          {
            __break(1u);
          }

          else
          {
            int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
            if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
              goto LABEL_30;
            }
          }

          int isUniquelyReferenced_nonNull_native = (uint64_t)sub_1004C50C8(0LL, v4[2] + 1LL, 1, v4);
          unint64_t v4 = (void *)isUniquelyReferenced_nonNull_native;
LABEL_30:
          unint64_t v27 = v4[2];
          int64_t v26 = v4[3];
          if (v27 >= v26 >> 1)
          {
            int isUniquelyReferenced_nonNull_native = (uint64_t)sub_1004C50C8((void *)(v26 > 1), v27 + 1, 1, v4);
            unint64_t v4 = (void *)isUniquelyReferenced_nonNull_native;
          }

          v4[2] = v27 + 1;
          unint64_t v28 = &v4[2 * v27];
          v28[4] = v24;
          v28[5] = a4;
          if (v23 >= v10) {
            return v4;
          }
          int64_t v29 = v10 - 1;
          if (v10 - 1 < v23)
          {
            __break(1u);
          }

          else
          {
            if (v23 < 2) {
              return v4;
            }
            uint64_t v10 = static os_log_type_t.default.getter(isUniquelyReferenced_nonNull_native);
            if (qword_10099B3E8 == -1) {
              goto LABEL_36;
            }
          }

          swift_once(&qword_10099B3E8, sub_1003E02E8);
LABEL_36:
          uint64_t v30 = qword_100A2A8F0;
          unint64_t v31 = sub_100004AEC((uint64_t *)&unk_10099D740);
          int64_t v32 = swift_allocObject(v31, 72LL, 7LL);
          *(_OWORD *)(v32 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
          uint64_t v41 = v29;
          unint64_t v42 = v23;
          uint64_t v39 = 0LL;
          uint64_t v40 = 0xE000000000000000LL;
          _print_unlocked<A, B>(_:_:)( &v42,  &v39,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
          v33._countAndFlagsBits = 3026478LL;
          v33._object = (void *)0xE300000000000000LL;
          String.append(_:)(v33);
          _print_unlocked<A, B>(_:_:)( &v41,  &v39,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
          uint64_t v34 = v39;
          unint64_t v35 = v40;
          *(void *)(v32 + 56) = &type metadata for String;
          *(void *)(v32 + 64) = sub_1000226F4();
          *(void *)(v32 + 32) = v34;
          *(void *)(v32 + 40) = v35;
          os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v30, "Hole created %@", 15LL, 2LL, v32);
          swift_bridgeObjectRelease();
          return v4;
        }

LABEL_25:
    unint64_t v17 = (v31 - 1) & v31;
    unint64_t v28 = __clz(__rbit64(v31)) + (v21 << 6);
LABEL_26:
    uint64_t v33 = v58;
    uint64_t v34 = *(void *)(v59 + 72);
    unint64_t v35 = v34 * v28;
    char v36 = *(void (**)(_BYTE *, unint64_t, uint64_t))(v59 + v56);
    v36(v11, *(void *)(v58 + 48) + v34 * v28, v6);
    unint64_t v37 = *(void *)(v33 + 56) + v35;
    uint64_t v38 = v57;
    v36(v57, v37, v6);
    uint64_t v39 = *(void *)(v13 + 40);
    uint64_t v40 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v39, v6, v40);
    uint64_t v41 = -1LL << *(_BYTE *)(v13 + 32);
    unint64_t v42 = result & ~v41;
    unint64_t v43 = v42 >> 6;
    if (((-1LL << v42) & ~*(void *)(v19 + 8 * (v42 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1LL << v42) & ~*(void *)(v19 + 8 * (v42 >> 6)))) | v42 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v44 = 0;
      unint64_t v45 = (unint64_t)(63 - v41) >> 6;
      do
      {
        if (++v43 == v45 && (v44 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        BOOL v46 = v43 == v45;
        if (v43 == v45) {
          unint64_t v43 = 0LL;
        }
        v44 |= v46;
        uint64_t v47 = *(void *)(v19 + 8 * v43);
      }

      while (v47 == -1);
      unint64_t v23 = __clz(__rbit64(~v47)) + (v43 << 6);
    }

    *(void *)(v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    unint64_t v24 = v34 * v23;
    unint64_t v25 = *(void *)(v13 + 48) + v34 * v23;
    int64_t v26 = *(void (**)(unint64_t, _BYTE *, uint64_t))(v59 + 32);
    v26(v25, v11, v6);
    uint64_t result = ((uint64_t (*)(unint64_t, _BYTE *, uint64_t))v26)(*(void *)(v13 + 56) + v24, v38, v6);
    ++*(void *)(v13 + 16);
  }

  int64_t v32 = v29 + 2;
  if (v32 >= v54)
  {
LABEL_36:
    uint64_t v49 = v58;
    swift_release(v58);
    int v3 = v53;
    if ((v52 & 1) != 0) {
      goto LABEL_39;
    }
    goto LABEL_43;
  }

  unint64_t v31 = v55[v32];
  if (v31)
  {
    int64_t v21 = v32;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v21 = v32 + 1;
    if (__OFADD__(v32, 1LL)) {
      break;
    }
    if (v21 >= v54) {
      goto LABEL_36;
    }
    unint64_t v31 = v55[v21];
    ++v32;
    if (v31) {
      goto LABEL_25;
    }
  }

    uint64_t v14 = (v24 - 1) & v24;
    int64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_26:
    int64_t v26 = *(void *)(v45 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v45 + v44))(v7, *(void *)(v8 + 48) + v26 * v21, v5);
    unint64_t v27 = v8;
    unint64_t v28 = *(void *)(*(void *)(v8 + 56) + 8 * v21);
    int64_t v29 = *(void *)(v10 + 40);
    uint64_t v30 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v5, v30);
    unint64_t v31 = -1LL << *(_BYTE *)(v10 + 32);
    int64_t v32 = result & ~v31;
    uint64_t v33 = v32 >> 6;
    if (((-1LL << v32) & ~*(void *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      uint64_t v19 = __clz(__rbit64((-1LL << v32) & ~*(void *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        char v36 = v33 == v35;
        if (v33 == v35) {
          uint64_t v33 = 0LL;
        }
        v34 |= v36;
        unint64_t v37 = *(void *)(v15 + 8 * v33);
      }

      while (v37 == -1);
      uint64_t v19 = __clz(__rbit64(~v37)) + (v33 << 6);
    }

    *(void *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v45 + 32))( *(void *)(v10 + 48) + v26 * v19,  v7,  v5);
    *(void *)(*(void *)(v10 + 56) + 8 * v19) = v28;
    ++*(void *)(v10 + 16);
    uint64_t v8 = v27;
  }

  unint64_t v25 = v22 + 2;
  if (v25 >= v42)
  {
LABEL_36:
    swift_release();
    uint64_t v38 = v41;
    if ((v40 & 0x100000000LL) != 0) {
      goto LABEL_39;
    }
    goto LABEL_43;
  }

  unint64_t v24 = v43[v25];
  if (v24)
  {
    unint64_t v17 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v17 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v17 >= v42) {
      goto LABEL_36;
    }
    unint64_t v24 = v43[v17];
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

    uint64_t v14 = (v24 - 1) & v24;
    int64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_26:
    int64_t v26 = *(void *)(v45 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v45 + v44))(v7, *(void *)(v8 + 48) + v26 * v21, v5);
    unint64_t v27 = v8;
    unint64_t v28 = *(_BYTE *)(*(void *)(v8 + 56) + v21);
    int64_t v29 = *(void *)(v10 + 40);
    uint64_t v30 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v5, v30);
    unint64_t v31 = -1LL << *(_BYTE *)(v10 + 32);
    int64_t v32 = result & ~v31;
    uint64_t v33 = v32 >> 6;
    if (((-1LL << v32) & ~*(void *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      uint64_t v19 = __clz(__rbit64((-1LL << v32) & ~*(void *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        char v36 = v33 == v35;
        if (v33 == v35) {
          uint64_t v33 = 0LL;
        }
        v34 |= v36;
        unint64_t v37 = *(void *)(v15 + 8 * v33);
      }

      while (v37 == -1);
      uint64_t v19 = __clz(__rbit64(~v37)) + (v33 << 6);
    }

    *(void *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v45 + 32))( *(void *)(v10 + 48) + v26 * v19,  v7,  v5);
    *(_BYTE *)(*(void *)(v10 + 56) + v19) = v28;
    ++*(void *)(v10 + 16);
    uint64_t v8 = v27;
  }

  unint64_t v25 = v22 + 2;
  if (v25 >= v42)
  {
LABEL_36:
    swift_release();
    uint64_t v38 = v41;
    if ((v40 & 0x100000000LL) != 0) {
      goto LABEL_39;
    }
    goto LABEL_43;
  }

  unint64_t v24 = v43[v25];
  if (v24)
  {
    unint64_t v17 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v17 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v17 >= v42) {
      goto LABEL_36;
    }
    unint64_t v24 = v43[v17];
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v19 - 1) & v19;
    uint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + vswift_weakDestroy(v0 + 16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + vswift_weakDestroy(v0 + 16) = v17;
    uint64_t result = v17;
  }

  uint64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    uint64_t v9 = v20;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v18 - 1) & v18;
    uint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(void *)(v4 + 48) + v15) = *(_BYTE *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    uint64_t result = (void *)swift_retain(v16);
  }

  uint64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  uint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    uint64_t v9 = v19;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 48 * v15;
    sub_10006A2C0(*(void *)(v2 + 56) + 48 * v15, (uint64_t)v26);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = v19;
    v21[1] = v18;
    sub_10006A2FC((uint64_t)v26, *(void *)(v4 + 56) + v20);
    uint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    __int16 v1 = v25;
    goto LABEL_28;
  }

  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v24 - 1) & v24;
    uint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 8 * v15;
    int64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  unint64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    uint64_t v9 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = v19;
    v21[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + vswift_weakDestroy(v0 + 16) = v20;
    swift_bridgeObjectRetain(v18);
    uint64_t result = (void *)swift_retain();
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v15 = (v22 - 1) & v22;
    uint64_t v18 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    uint64_t v19 = *(void *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v19, v2);
    uint64_t v20 = 32 * v18;
    sub_10006A538(*(void *)(v6 + 56) + v20, (uint64_t)v26);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v19, v5, v2);
    uint64_t result = sub_10006A358(v26, (_OWORD *)(*(void *)(v8 + 56) + v20));
  }

  unint64_t v23 = v21 + 2;
  if (v23 >= v16)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v6);
    __int16 v1 = v24;
    goto LABEL_28;
  }

  uint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    uint64_t v12 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v12 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v25 + 8 * v12);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    uint64_t v13 = (v28 - 1) & v28;
    uint64_t v18 = __clz(__rbit64(v28)) + (v10 << 6);
LABEL_12:
    uint64_t v20 = *(void *)(v1 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v15, *(void *)(v19 + 48) + v20, v14);
    int64_t v21 = *(void *)(v19 + 56);
    uint64_t v22 = 16 * v18;
    unint64_t v23 = (uint64_t *)(v21 + 16 * v18);
    unint64_t v24 = *v23;
    unint64_t v25 = v23[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v16 + 48) + v20, v15, v14);
    int64_t v26 = (uint64_t *)(*(void *)(v16 + 56) + v22);
    *int64_t v26 = v24;
    v26[1] = v25;
    uint64_t result = (void *)sub_10001736C(v24, v25);
  }

  int64_t v29 = v27 + 2;
  if (v29 >= v35)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v30 = v33;
    unint64_t v31 = v39;
    goto LABEL_28;
  }

  unint64_t v28 = *(void *)(v34 + 8 * v29);
  if (v28)
  {
    uint64_t v10 = v29;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v10 = v29 + 1;
    if (__OFADD__(v29, 1LL)) {
      break;
    }
    if (v10 >= v35) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v34 + 8 * v10);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v18 - 1) & v18;
    uint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(_OWORD *)(*(void *)(v2 + 56) + 16 * v15);
    *(_BYTE *)(*(void *)(v4 + 48) + v15) = *(_BYTE *)(*(void *)(v2 + 48) + v15);
    *(_OWORD *)(*(void *)(v4 + 56) + 16 * v15) = v16;
    uint64_t result = (void *)sub_10001736C(v16, *((unint64_t *)&v16 + 1));
  }

  uint64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  uint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    uint64_t v9 = v19;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v20 - 1) & v20;
    uint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    sub_10006A538(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + vswift_weakDestroy(v0 + 16) = v17;
    sub_10006A358(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
    uint64_t result = v17;
  }

  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  uint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    uint64_t v9 = v21;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v26 - 1) & v26;
    uint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    int64_t v21 = *v20;
    uint64_t v22 = v20[1];
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    void *v23 = v19;
    v23[1] = v18;
    unint64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *unint64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v22);
  }

  unint64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  int64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    uint64_t v9 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v22 - 1) & v22;
    uint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_10006A5E8(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    unint64_t v17 = 32 * v15;
    sub_10006A538(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    uint64_t v19 = v25[0];
    uint64_t v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + swift_weakDestroy(v0 + 16) = v20;
    uint64_t result = sub_10006A358(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }

  unint64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  uint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    uint64_t v9 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    int64_t v21 = __clz(__rbit64(v19));
    uint64_t v12 = (v19 - 1) & v19;
    uint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + vswift_weakDestroy(v0 + 16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + vswift_weakDestroy(v0 + 16) = v17;
  }

  uint64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    uint64_t v9 = v20;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v26 - 1) & v26;
    uint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = *(void *)(v2 + 56) + v16;
    int64_t v21 = *(void **)v20;
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    unint64_t v23 = *(_BYTE *)(v20 + 8);
    *uint64_t v22 = v19;
    v22[1] = v18;
    unint64_t v24 = *(void *)(v4 + 56) + v16;
    *(void *)unint64_t v24 = v21;
    *(_BYTE *)(v24 + 8) = v23;
    swift_bridgeObjectRetain(v18);
    uint64_t result = sub_10006A348(v21, v23);
  }

  unint64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  int64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    uint64_t v9 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    uint64_t v14 = (v20 - 1) & v20;
    uint64_t v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_12:
    unint64_t v17 = *(_BYTE *)(*(void *)(v5 + 48) + v16);
    uint64_t v18 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 56) + v18, v1);
    *(_BYTE *)(*(void *)(v7 + 48) + vswift_weakDestroy(v0 + 16) = v17;
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))( *(void *)(v7 + 56) + v18,  v4,  v1);
  }

  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_26;
  }
  uint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    uint64_t v11 = v21;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v11 >= v25) {
      goto LABEL_26;
    }
    uint64_t v20 = *(void *)(v24 + 8 * v11);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }

  __break(1u);
  return result;
}

    uint64_t v15 = (v26 - 1) & v26;
    uint64_t v18 = __clz(__rbit64(v26)) + (v12 << 6);
LABEL_12:
    uint64_t v19 = 16 * v18;
    uint64_t v20 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v18);
    int64_t v21 = *v20;
    uint64_t v22 = v20[1];
    unint64_t v23 = 32 * v18;
    a2(*(void *)(v6 + 56) + 32 * v18, v31);
    unint64_t v24 = (void *)(*(void *)(v8 + 48) + v19);
    *unint64_t v24 = v21;
    v24[1] = v22;
    a3(v31, *(void *)(v8 + 56) + v23);
    swift_bridgeObjectRetain(v22);
  }

  unint64_t v27 = v25 + 2;
  if (v27 >= v16)
  {
LABEL_26:
    swift_release();
    uint64_t v5 = v28;
    goto LABEL_28;
  }

  int64_t v26 = *(void *)(v29 + 8 * v27);
  if (v26)
  {
    uint64_t v12 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v12 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_26;
    }
    int64_t v26 = *(void *)(v29 + 8 * v12);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    uint64_t v50 = (v37 - 1) & v37;
    __int128 v51 = v38;
    uint64_t v16 = __clz(__rbit64(v37)) + (v38 << 6);
LABEL_12:
    uint64_t v18 = *(void *)(v14 + 72) * v16;
    uint64_t v19 = v47;
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v15, *(void *)(v17 + 48) + v18, v47);
    uint64_t v20 = *(void *)(v17 + 56);
    int64_t v21 = 104 * v16;
    uint64_t v22 = (uint64_t *)(v20 + 104 * v16);
    unint64_t v23 = *v22;
    __int128 v61 = *((unsigned __int8 *)v22 + 8);
    unint64_t v24 = v22[3];
    int v52 = v22[2];
    uint64_t v53 = v24;
    unint64_t v25 = v22[5];
    int64_t v54 = v22[4];
    int64_t v26 = v22[7];
    __int128 v60 = v22[6];
    unint64_t v27 = *((unsigned __int8 *)v22 + 64);
    uint64_t v58 = *((unsigned __int8 *)v22 + 65);
    uint64_t v59 = v27;
    int64_t v29 = v22[9];
    unint64_t v28 = v22[10];
    uint64_t v56 = v22[11];
    __int128 v57 = v28;
    unint64_t v55 = *((unsigned __int8 *)v22 + 96);
    uint64_t v30 = v49;
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(*(void *)(v49 + 48) + v18, v15, v19);
    unint64_t v31 = *(void *)(v30 + 56) + v21;
    *(void *)unint64_t v31 = v23;
    *(_BYTE *)(v31 + 8) = v61;
    uint64_t v33 = v52;
    int64_t v32 = v53;
    *(void *)(v31 + swift_weakDestroy(v0 + 16) = v52;
    *(void *)(v31 + 24) = v32;
    uint64_t v34 = v54;
    *(void *)(v31 + 32) = v54;
    *(void *)(v31 + 40) = v25;
    *(void *)(v31 + 48) = v60;
    *(void *)(v31 + 56) = v26;
    *(_BYTE *)(v31 + 64) = v59;
    *(_BYTE *)(v31 + 65) = v58;
    unint64_t v35 = v57;
    *(void *)(v31 + 72) = v29;
    *(void *)(v31 + 80) = v35;
    *(void *)(v31 + 88) = v56;
    *(_BYTE *)(v31 + 96) = v55;
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v29);
    swift_retain();
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v25);
    uint64_t v13 = v50;
    uint64_t v10 = v51;
  }

  uint64_t v39 = v36 + 2;
  if (v39 >= v44)
  {
LABEL_26:
    swift_release();
    uint64_t v40 = v42;
    uint64_t v41 = v49;
    goto LABEL_28;
  }

  unint64_t v37 = *((void *)v43 + v39);
  if (v37)
  {
    uint64_t v38 = v39;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v38 = v39 + 1;
    if (__OFADD__(v39, 1LL)) {
      break;
    }
    if (v38 >= v44) {
      goto LABEL_26;
    }
    unint64_t v37 = *((void *)v43 + v38);
    ++v39;
    if (v37) {
      goto LABEL_25;
    }
  }

    uint64_t v18 = (v25 - 1) & v25;
    int64_t v21 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_12:
    uint64_t v22 = *(void *)(v6 + 72) * v21;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(void *)(v9 + 48) + v22, v5);
    unint64_t v23 = 40 * v21;
    sub_100013044(*(void *)(v9 + 56) + v23, (uint64_t)v30);
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v11 + 48) + v22, v8, v5);
    uint64_t result = (void *)v29(v30, *(void *)(v11 + 56) + v23);
  }

  int64_t v26 = v24 + 2;
  if (v26 >= v19)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v9);
    unint64_t v4 = v27;
    goto LABEL_28;
  }

  unint64_t v25 = *(void *)(v28 + 8 * v26);
  if (v25)
  {
    uint64_t v15 = v26;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v15 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v15 >= v19) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v28 + 8 * v15);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + vswift_weakDestroy(v0 + 16) = v17;
    *(void *)(*(void *)(v4 + 56) + vswift_weakDestroy(v0 + 16) = v18;
    uint64_t v19 = v17;
    uint64_t result = v18;
  }

  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  int64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v14 = (v24 - 1) & v24;
    uint64_t v16 = __clz(__rbit64(v24)) + (v11 << 6);
LABEL_12:
    unint64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    int64_t v21 = *(void *)(v29 + 72) * v16;
    sub_10001DC4C(*(void *)(v5 + 56) + v21, (uint64_t)v4, type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v22 = (uint64_t *)(*(void *)(v7 + 48) + v17);
    *uint64_t v22 = v19;
    v22[1] = v20;
    sub_10002218C((uint64_t)v4, *(void *)(v7 + 56) + v21, type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t result = (void *)sub_10001736C(v19, v20);
  }

  unint64_t v25 = v23 + 2;
  if (v25 >= v28)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    __int16 v1 = v26;
    goto LABEL_28;
  }

  unint64_t v24 = *(void *)(v27 + 8 * v25);
  if (v24)
  {
    uint64_t v11 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v11 >= v28) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v27 + 8 * v11);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

    uint64_t v14 = (v21 - 1) & v21;
    uint64_t v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    unint64_t v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v17, v1);
    uint64_t v18 = 8 * v16;
    uint64_t v19 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v17, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v18) = v19;
    uint64_t result = (void *)sub_10006A368(v19);
  }

  uint64_t v22 = v20 + 2;
  if (v22 >= v26) {
    goto LABEL_26;
  }
  int64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    uint64_t v11 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_26;
    }
    int64_t v21 = *(void *)(v25 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    unint64_t v17 = *(void *)(v2 + 48) + 24 * v15;
    uint64_t v19 = *(void *)(v17 + 8);
    uint64_t v18 = *(void *)(v17 + 16);
    uint64_t v20 = 16 * v15;
    int64_t v21 = *(void *)(v4 + 48) + v16;
    unint64_t v25 = *(_OWORD *)(*(void *)(v2 + 56) + v20);
    *(_BYTE *)int64_t v21 = *(_BYTE *)v17;
    *(void *)(v21 + 8) = v19;
    *(void *)(v21 + swift_weakDestroy(v0 + 16) = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v20) = v25;
    swift_bridgeObjectRetain(v18);
    uint64_t result = (void *)sub_10001736C(v25, *((unint64_t *)&v25 + 1));
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v13 = (v24 - 1) & v24;
    uint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    unint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    int64_t v21 = *(void **)(*(void *)(v3 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *uint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    uint64_t result = v21;
  }

  unint64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    uint64_t v10 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    uint64_t result = (void *)swift_retain();
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v19 - 1) & v19;
    uint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + vswift_weakDestroy(v0 + 16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + vswift_weakDestroy(v0 + 16) = v17;
    swift_bridgeObjectRetain(v17);
  }

  uint64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    uint64_t v9 = v20;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }

    uint64_t v20 = __clz(__rbit64(v18));
    uint64_t v12 = (v18 - 1) & v18;
    uint64_t v15 = v20 + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(_BYTE *)(*(void *)(v2 + 56) + v15);
    *(_BYTE *)(*(void *)(v4 + 48) + v15) = *(_BYTE *)(*(void *)(v2 + 48) + v15);
    *(_BYTE *)(*(void *)(v4 + 56) + v15) = v16;
  }

  uint64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  uint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    uint64_t v9 = v19;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }

    uint64_t v14 = (v21 - 1) & v21;
    uint64_t v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    unint64_t v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v17, v1);
    uint64_t v18 = 8 * v16;
    uint64_t v19 = *(void *)(*(void *)(v5 + 56) + v18);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))( *(void *)(v7 + 48) + v17,  v4,  v1);
    *(void *)(*(void *)(v7 + 56) + v18) = v19;
  }

  uint64_t v22 = v20 + 2;
  if (v22 >= v26) {
    goto LABEL_26;
  }
  int64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    uint64_t v11 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_26;
    }
    int64_t v21 = *(void *)(v25 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v11 = (v25 - 1) & v25;
    uint64_t v14 = __clz(__rbit64(v25)) + (v8 << 6);
LABEL_12:
    uint64_t v15 = 16 * v14;
    uint64_t v16 = 32 * v14;
    unint64_t v17 = (uint64_t *)(*(void *)(v1 + 56) + v16);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = v17[2];
    int64_t v21 = v17[3];
    uint64_t v22 = *(_OWORD *)(*(void *)(v1 + 48) + v15);
    *(_OWORD *)(*(void *)(v3 + 48) + v15) = v22;
    unint64_t v23 = (uint64_t *)(*(void *)(v3 + 56) + v16);
    void *v23 = v18;
    v23[1] = v19;
    v23[2] = v20;
    v23[3] = v21;
    sub_10001736C(v22, *((unint64_t *)&v22 + 1));
    sub_10001736C(v18, v19);
    uint64_t result = (void *)sub_10001736C(v20, v21);
  }

  int64_t v26 = v24 + 2;
  if (v26 >= v12) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v5 + 8 * v26);
  if (v25)
  {
    uint64_t v8 = v26;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v8 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v8 >= v12) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v5 + 8 * v8);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v22 - 1) & v22;
    uint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = *(void *)(v2 + 56) + v16;
    uint64_t v18 = *(void *)v17;
    LOBYTE(v17) = *(_BYTE *)(v17 + 8);
    uint64_t v19 = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    *(_OWORD *)(*(void *)(v4 + 48) + vswift_weakDestroy(v0 + 16) = v19;
    uint64_t v20 = *(void *)(v4 + 56) + v16;
    *(void *)uint64_t v20 = v18;
    *(_BYTE *)(v20 + 8) = v17;
    uint64_t result = (void *)sub_10001736C(v19, *((unint64_t *)&v19 + 1));
  }

  unint64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  uint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    uint64_t v9 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    uint64_t v14 = (v20 - 1) & v20;
    uint64_t v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_12:
    unint64_t v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v17, v1);
    uint64_t v18 = *(_BYTE *)(*(void *)(v5 + 56) + v16);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))( *(void *)(v7 + 48) + v17,  v4,  v1);
    *(_BYTE *)(*(void *)(v7 + 56) + vswift_weakDestroy(v0 + 16) = v18;
  }

  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_26;
  }
  uint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    uint64_t v11 = v21;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v11 >= v25) {
      goto LABEL_26;
    }
    uint64_t v20 = *(void *)(v24 + 8 * v11);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v16;
    unint64_t v17 = v16[1];
    LOBYTE(vswift_weakDestroy(v0 + 16) = *(_BYTE *)(*(void *)(v2 + 56) + v15);
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + 16 * v15);
    *uint64_t v19 = v18;
    v19[1] = v17;
    *(_BYTE *)(*(void *)(v4 + 56) + v15) = (_BYTE)v16;
    swift_bridgeObjectRetain(v17);
  }

  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  int64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v14 = (v24 - 1) & v24;
    uint64_t v16 = __clz(__rbit64(v24)) + (v11 << 6);
LABEL_12:
    unint64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    int64_t v21 = *(void *)(v29 + 72) * v16;
    sub_10001DC4C(*(void *)(v5 + 56) + v21, (uint64_t)v4, type metadata accessor for SecureLocationsSubscription);
    uint64_t v22 = (void *)(*(void *)(v7 + 48) + v17);
    *uint64_t v22 = v19;
    v22[1] = v20;
    sub_10002218C((uint64_t)v4, *(void *)(v7 + 56) + v21, type metadata accessor for SecureLocationsSubscription);
    swift_bridgeObjectRetain(v20);
  }

  unint64_t v25 = v23 + 2;
  if (v25 >= v28)
  {
LABEL_26:
    swift_release();
    __int16 v1 = v26;
    goto LABEL_28;
  }

  unint64_t v24 = *(void *)(v27 + 8 * v25);
  if (v24)
  {
    uint64_t v11 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v11 >= v28) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v27 + 8 * v11);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 48 * v15;
    sub_10006A3E4(*(void *)(v2 + 56) + 48 * v15, (uint64_t)v26);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = v19;
    v21[1] = v18;
    sub_10006A420((uint64_t)v26, *(void *)(v4 + 56) + v20);
    uint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    __int16 v1 = v25;
    goto LABEL_28;
  }

  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v14 = (v21 - 1) & v21;
    uint64_t v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    unint64_t v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v17, v1);
    uint64_t v18 = 8 * v16;
    uint64_t v19 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v17, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v18) = v19;
    uint64_t result = (void *)swift_retain();
  }

  uint64_t v22 = v20 + 2;
  if (v22 >= v26) {
    goto LABEL_26;
  }
  int64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    uint64_t v11 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_26;
    }
    int64_t v21 = *(void *)(v25 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    unint64_t v45 = (v32 - 1) & v32;
    BOOL v46 = v33;
    uint64_t v18 = __clz(__rbit64(v32)) + (v33 << 6);
LABEL_12:
    uint64_t v20 = *(void *)(v14 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v15, *(void *)(v19 + 48) + v20, v16);
    int64_t v21 = *(void *)(v19 + 56);
    uint64_t v22 = 48 * v18;
    unint64_t v23 = (uint64_t *)(v21 + 48 * v18);
    unint64_t v25 = *v23;
    unint64_t v24 = v23[1];
    int64_t v26 = v23[3];
    uint64_t v47 = v23[2];
    uint64_t v48 = v24;
    unint64_t v27 = *((_BYTE *)v23 + 32);
    unint64_t v28 = v23[5];
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(*(void *)(v17 + 48) + v20, v15, v16);
    int64_t v29 = *(void *)(v17 + 56) + v22;
    uint64_t v30 = v48;
    *(void *)int64_t v29 = v25;
    *(void *)(v29 + 8) = v30;
    *(void *)(v29 + swift_weakDestroy(v0 + 16) = v47;
    *(void *)(v29 + 24) = v26;
    *(_BYTE *)(v29 + 32) = v27;
    *(void *)(v29 + 40) = v28;
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v28);
    uint64_t result = (void *)swift_retain();
    uint64_t v13 = v45;
    uint64_t v10 = v46;
  }

  uint64_t v34 = v10 + 3;
  if (v10 + 3 >= v39)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    unint64_t v35 = v37;
    char v36 = v44;
    goto LABEL_28;
  }

  int64_t v32 = *((void *)v38 + v34);
  if (v32)
  {
    uint64_t v33 = v10 + 3;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v33 = v34 + 1;
    if (__OFADD__(v34, 1LL)) {
      break;
    }
    if (v33 >= v39) {
      goto LABEL_26;
    }
    int64_t v32 = *((void *)v38 + v33);
    ++v34;
    if (v32) {
      goto LABEL_25;
    }
  }

    uint64_t v14 = (v22 - 1) & v22;
    unint64_t v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_12:
    uint64_t v18 = *(void *)(v27 + 72) * v17;
    sub_10001DC4C( *(void *)(v5 + 48) + v18,  (uint64_t)v4,  type metadata accessor for ManagedCBPeripheralManager.KeyType);
    uint64_t v19 = 8 * v17;
    uint64_t v20 = *(void **)(*(void *)(v5 + 56) + v19);
    sub_10002218C( (uint64_t)v4,  *(void *)(v7 + 48) + v18,  type metadata accessor for ManagedCBPeripheralManager.KeyType);
    *(void *)(*(void *)(v7 + 56) + v19) = v20;
    uint64_t result = v20;
  }

  unint64_t v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_26:
    uint64_t result = (id)swift_release();
    __int16 v1 = v25;
    goto LABEL_28;
  }

  uint64_t v22 = *(void *)(v26 + 8 * v23);
  if (v22)
  {
    uint64_t v11 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v26 + 8 * v11);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    uint64_t v13 = (v27 - 1) & v27;
    uint64_t v16 = __clz(__rbit64(v27)) + (v10 << 6);
LABEL_12:
    uint64_t v18 = *(void *)(v36 + 72) * v16;
    sub_10001DC4C(*(void *)(v17 + 48) + v18, v14, type metadata accessor for ManagedCBPeripheralBeaconInfo);
    uint64_t v19 = 24 * v16;
    uint64_t v20 = *(void *)(v17 + 56) + 24 * v16;
    uint64_t v22 = *(void *)v20;
    int64_t v21 = *(void *)(v20 + 8);
    unint64_t v23 = *(_BYTE *)(v20 + 16);
    unint64_t v24 = v38;
    sub_10002218C(v14, *(void *)(v38 + 48) + v18, type metadata accessor for ManagedCBPeripheralBeaconInfo);
    unint64_t v25 = *(void *)(v24 + 56) + v19;
    *(void *)unint64_t v25 = v22;
    *(void *)(v25 + 8) = v21;
    *(_BYTE *)(v25 + swift_weakDestroy(v0 + 16) = v23;
    swift_bridgeObjectRetain(v21);
  }

  unint64_t v28 = v26 + 2;
  if (v28 >= v34)
  {
LABEL_26:
    swift_release();
    int64_t v29 = v32;
    uint64_t v30 = v38;
    goto LABEL_28;
  }

  unint64_t v27 = *(void *)(v33 + 8 * v28);
  if (v27)
  {
    uint64_t v10 = v28;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v10 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v10 >= v34) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v10);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }

    uint64_t v18 = (v26 - 1) & v26;
    int64_t v21 = __clz(__rbit64(v26)) + (v15 << 6);
LABEL_12:
    uint64_t v22 = *(void *)(v31 + 72) * v21;
    sub_10001DC4C(*(void *)(v9 + 48) + v22, (uint64_t)v8, a1);
    unint64_t v23 = 8 * v21;
    unint64_t v24 = *(void *)(*(void *)(v9 + 56) + 8 * v21);
    sub_10002218C((uint64_t)v8, *(void *)(v11 + 48) + v22, a1);
    *(void *)(*(void *)(v11 + 56) + v23) = v24;
    swift_bridgeObjectRetain(v24);
  }

  unint64_t v27 = v25 + 2;
  if (v27 >= v19)
  {
LABEL_26:
    swift_release();
    uint64_t v5 = v29;
    goto LABEL_28;
  }

  int64_t v26 = *(void *)(v30 + 8 * v27);
  if (v26)
  {
    uint64_t v15 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v15 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v15 >= v19) {
      goto LABEL_26;
    }
    int64_t v26 = *(void *)(v30 + 8 * v15);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 56) + 8 * v15);
    uint64_t v18 = 16 * v15;
    uint64_t v19 = *(_OWORD *)(*(void *)(v2 + 48) + v18);
    *(_OWORD *)(*(void *)(v4 + 48) + v18) = v19;
    *(void *)(*(void *)(v4 + 56) + vswift_weakDestroy(v0 + 16) = v17;
    sub_10001736C(v19, *((unint64_t *)&v19 + 1));
    uint64_t result = v17;
  }

  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  int64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v13 = (v19 - 1) & v19;
    uint64_t v16 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_12:
    unint64_t v17 = *(void *)(*(void *)(v3 + 56) + 8 * v16);
    *(_BYTE *)(*(void *)(v5 + 48) + vswift_weakDestroy(v0 + 16) = *(_BYTE *)(*(void *)(v3 + 48) + v16);
    *(void *)(*(void *)(v5 + 56) + 8 * vswift_weakDestroy(v0 + 16) = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain(v17);
  }

  uint64_t v20 = v18 + 2;
  if (v20 >= v14) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v7 + 8 * v20);
  if (v19)
  {
    uint64_t v10 = v20;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v7 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v19 - 1) & v19;
    uint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + vswift_weakDestroy(v0 + 16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + vswift_weakDestroy(v0 + 16) = v17;
    uint64_t result = v17;
  }

  uint64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    uint64_t v9 = v20;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }

  __break(1u);
  return result;
}

    uint64_t v18 = (v26 - 1) & v26;
    int64_t v21 = __clz(__rbit64(v26)) + (v15 << 6);
LABEL_12:
    uint64_t v22 = 8 * v21;
    unint64_t v23 = *(void **)(*(void *)(v9 + 48) + 8 * v21);
    unint64_t v24 = *(void *)(v31 + 72) * v21;
    sub_10001DC4C(*(void *)(v9 + 56) + v24, (uint64_t)v8, a1);
    *(void *)(*(void *)(v11 + 48) + v22) = v23;
    sub_10002218C((uint64_t)v8, *(void *)(v11 + 56) + v24, a1);
    uint64_t result = v23;
  }

  unint64_t v27 = v25 + 2;
  if (v27 >= v19)
  {
LABEL_26:
    uint64_t result = (id)swift_release(v9);
    uint64_t v5 = v29;
    goto LABEL_28;
  }

  int64_t v26 = *(void *)(v30 + 8 * v27);
  if (v26)
  {
    uint64_t v15 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v15 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v15 >= v19) {
      goto LABEL_26;
    }
    int64_t v26 = *(void *)(v30 + 8 * v15);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v19 - 1) & v19;
    uint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    int64_t v21 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    *(_OWORD *)(*(void *)(v4 + 48) + vswift_weakDestroy(v0 + 16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + vswift_weakDestroy(v0 + 16) = v21;
    sub_10001736C(v17, *((unint64_t *)&v17 + 1));
    uint64_t result = (void *)sub_10001736C(v21, *((unint64_t *)&v21 + 1));
  }

  uint64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    uint64_t v9 = v20;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    unint64_t v23 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + vswift_weakDestroy(v0 + 16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v23;
    uint64_t v19 = v17;
    uint64_t result = (void *)sub_10001736C(v23, *((unint64_t *)&v23 + 1));
  }

  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  int64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v13 = (v22 - 1) & v22;
    uint64_t v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    unint64_t v17 = 8 * v16;
    uint64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    uint64_t v19 = *(void **)(*(void *)(v3 + 56) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    *(void *)(*(void *)(v5 + 56) + v17) = v19;
    uint64_t v20 = v18;
    uint64_t result = v19;
  }

  unint64_t v23 = v21 + 2;
  if (v23 >= v14) {
    goto LABEL_26;
  }
  uint64_t v22 = *(void *)(v7 + 8 * v23);
  if (v22)
  {
    uint64_t v10 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v10 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v7 + 8 * v10);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    uint64_t v15 = (v28 - 1) & v28;
    uint64_t v18 = __clz(__rbit64(v28)) + (v12 << 6);
LABEL_12:
    uint64_t v19 = 8 * v18;
    uint64_t v20 = *(void **)(*(void *)(v5 + 48) + 8 * v18);
    int64_t v21 = 16 * v18;
    uint64_t v22 = *(void *)(v5 + 56) + v21;
    unint64_t v23 = *(void *)v22;
    unint64_t v24 = *(unsigned __int8 *)(v22 + 8);
    *(void *)(*(void *)(v7 + 48) + v19) = v20;
    unint64_t v25 = *(void *)(v7 + 56) + v21;
    *(void *)unint64_t v25 = v23;
    *(_BYTE *)(v25 + 8) = v24;
    int64_t v26 = v20;
    uint64_t result = (void *)a2(v23, v24);
  }

  int64_t v29 = v27 + 2;
  if (v29 >= v16) {
    goto LABEL_26;
  }
  unint64_t v28 = *(void *)(v9 + 8 * v29);
  if (v28)
  {
    uint64_t v12 = v29;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v12 = v29 + 1;
    if (__OFADD__(v29, 1LL)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v9 + 8 * v12);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v25 - 1) & v25;
    uint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 56) + v18);
    uint64_t v20 = *v19;
    int64_t v21 = v19[1];
    *(void *)(*(void *)(v4 + 48) + vswift_weakDestroy(v0 + 16) = v17;
    uint64_t v22 = (void *)(*(void *)(v4 + 56) + v18);
    *uint64_t v22 = v20;
    v22[1] = v21;
    unint64_t v23 = v17;
    swift_bridgeObjectRetain(v21);
  }

  int64_t v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    uint64_t v9 = v26;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v20 - 1) & v20;
    uint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + vswift_weakDestroy(v0 + 16) = v17;
    *(void *)(*(void *)(v4 + 56) + vswift_weakDestroy(v0 + 16) = v18;
    swift_bridgeObjectRetain(v17);
  }

  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  uint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    uint64_t v9 = v21;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v22 - 1) & v22;
    uint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(v2 + 48) + 24 * v15;
    unint64_t v17 = *(_BYTE *)v16;
    uint64_t v19 = *(void *)(v16 + 8);
    uint64_t v18 = *(void *)(v16 + 16);
    LOBYTE(vswift_weakDestroy(v0 + 16) = *(_BYTE *)(*(void *)(v2 + 56) + v15);
    uint64_t v20 = *(void *)(v4 + 48) + 24 * v15;
    *(_BYTE *)uint64_t v20 = v17;
    *(void *)(v20 + 8) = v19;
    *(void *)(v20 + swift_weakDestroy(v0 + 16) = v18;
    *(_BYTE *)(*(void *)(v4 + 56) + v15) = v16;
    swift_bridgeObjectRetain(v18);
  }

  unint64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  uint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    uint64_t v9 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    unint64_t v25 = __clz(__rbit64(v23));
    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = v25 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v18 = *(_DWORD *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    uint64_t v20 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    int64_t v21 = *(void *)(v4 + 48) + v16;
    *(_DWORD *)int64_t v21 = v18;
    *(void *)(v21 + 8) = v19;
    *(_OWORD *)(*(void *)(v4 + 56) + vswift_weakDestroy(v0 + 16) = v20;
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 2 * v15;
    LOWORD(v17) = *(_WORD *)(*(void *)(v2 + 56) + v20);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = v19;
    v21[1] = v18;
    *(_WORD *)(*(void *)(v4 + 56) + v20) = (_WORD)v17;
    swift_bridgeObjectRetain(v18);
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v26 - 1) & v26;
    uint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 24 * v15;
    int64_t v21 = *(void *)(v2 + 56) + v20;
    uint64_t v22 = *(void *)v21;
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    unint64_t v28 = *(_OWORD *)(v21 + 8);
    void *v23 = v19;
    v23[1] = v18;
    unint64_t v24 = *(void *)(v4 + 56) + v20;
    *(void *)unint64_t v24 = v22;
    *(_OWORD *)(v24 + 8) = v28;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(*((void *)&v28 + 1));
  }

  unint64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  int64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    uint64_t v9 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    uint64_t v13 = (v24 - 1) & v24;
    uint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    unint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    int64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *uint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v21);
  }

  unint64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    uint64_t v10 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

    uint64_t v16 = (v23 - 1) & v23;
    uint64_t v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    uint64_t v19 = *(void *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v7 + 48) + v19, v3);
    uint64_t v20 = 8 * v18;
    int64_t v21 = *(void *)(*(void *)(v7 + 56) + 8 * v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v9 + 48) + v19, v6, v3);
    *(void *)(*(void *)(v9 + 56) + v20) = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain(v21);
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v28) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v27 + 8 * v24);
  if (v23)
  {
    uint64_t v13 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v13 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v24 - 1) & v24;
    uint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    unint64_t v17 = *(void *)(v2 + 48) + 24 * v15;
    uint64_t v19 = *(void *)(v17 + 8);
    uint64_t v18 = *(void *)(v17 + 16);
    uint64_t v20 = 8 * v15;
    int64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    uint64_t v22 = *(void *)(v4 + 48) + v16;
    *(_BYTE *)uint64_t v22 = *(_BYTE *)v17;
    *(void *)(v22 + 8) = v19;
    *(void *)(v22 + swift_weakDestroy(v0 + 16) = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v21);
  }

  unint64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    uint64_t v9 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

    uint64_t v18 = (v26 - 1) & v26;
    int64_t v21 = __clz(__rbit64(v26)) + (v15 << 6);
LABEL_12:
    uint64_t v22 = *(void *)(v31 + 72) * v21;
    sub_10001DC4C(*(void *)(v9 + 48) + v22, (uint64_t)v8, a1);
    unint64_t v23 = 8 * v21;
    unint64_t v24 = *(void *)(*(void *)(v9 + 56) + 8 * v21);
    sub_10002218C((uint64_t)v8, *(void *)(v11 + 48) + v22, a1);
    *(void *)(*(void *)(v11 + 56) + v23) = v24;
    uint64_t result = (void *)swift_retain();
  }

  unint64_t v27 = v25 + 2;
  if (v27 >= v19)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v9);
    uint64_t v5 = v29;
    goto LABEL_28;
  }

  int64_t v26 = *(void *)(v30 + 8 * v27);
  if (v26)
  {
    uint64_t v15 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v15 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v15 >= v19) {
      goto LABEL_26;
    }
    int64_t v26 = *(void *)(v30 + 8 * v15);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    uint64_t v16 = (v23 - 1) & v23;
    uint64_t v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    uint64_t v19 = *(void *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v7 + 48) + v19, v3);
    uint64_t v20 = 8 * v18;
    int64_t v21 = *(void **)(*(void *)(v7 + 56) + v20);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v9 + 48) + v19, v6, v3);
    *(void *)(*(void *)(v9 + 56) + v20) = v21;
    uint64_t result = v21;
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v28) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v27 + 8 * v24);
  if (v23)
  {
    uint64_t v13 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v13 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v16 = (v23 - 1) & v23;
    uint64_t v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    uint64_t v19 = *(void *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v7 + 48) + v19, v3);
    uint64_t v20 = 8 * v18;
    int64_t v21 = *(void *)(*(void *)(v7 + 56) + 8 * v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v9 + 48) + v19, v6, v3);
    *(void *)(*(void *)(v9 + 56) + v20) = v21;
    uint64_t result = (void *)swift_retain();
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v28) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v27 + 8 * v24);
  if (v23)
  {
    uint64_t v13 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v13 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v20 - 1) & v20;
    uint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    sub_10006A538(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + vswift_weakDestroy(v0 + 16) = v17;
    sub_10006A358(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
    uint64_t result = v17;
  }

  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  uint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    uint64_t v9 = v21;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }

    uint64_t v13 = (v27 - 1) & v27;
    uint64_t v18 = __clz(__rbit64(v27)) + (v10 << 6);
LABEL_12:
    uint64_t v20 = *(void *)(v1 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v15, *(void *)(v19 + 48) + v20, v14);
    int64_t v21 = 16 * v18;
    uint64_t v22 = *(void *)(v19 + 56) + 16 * v18;
    unint64_t v23 = *(_BYTE *)v22;
    unint64_t v24 = *(void *)(v22 + 8);
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v16 + 48) + v20, v15, v14);
    unint64_t v25 = *(void *)(v16 + 56) + v21;
    *(_BYTE *)unint64_t v25 = v23;
    *(void *)(v25 + 8) = v24;
    uint64_t result = (void *)swift_retain();
  }

  unint64_t v28 = v26 + 2;
  if (v28 >= v33)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    int64_t v29 = v32;
    uint64_t v30 = v38;
    goto LABEL_28;
  }

  unint64_t v27 = *((void *)v34 + v28);
  if (v27)
  {
    uint64_t v10 = v28;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v10 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v10 >= v33) {
      goto LABEL_26;
    }
    unint64_t v27 = *((void *)v34 + v10);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }

        uint64_t v9 = (v29 - 1) & v29;
        uint64_t v14 = __clz(__rbit64(v29)) + (v12 << 6);
      }

      uint64_t v15 = (__int128 *)(*(void *)(v3 + 48) + 160 * v14);
      uint64_t v16 = v15[7];
      uint64_t v39 = v15[6];
      uint64_t v40 = v16;
      unint64_t v17 = v15[9];
      uint64_t v41 = v15[8];
      unint64_t v42 = v17;
      uint64_t v18 = v15[3];
      unint64_t v35 = v15[2];
      char v36 = v18;
      uint64_t v19 = v15[5];
      unint64_t v37 = v15[4];
      uint64_t v38 = v19;
      uint64_t v20 = v15[1];
      uint64_t v33 = *v15;
      uint64_t v34 = v20;
      Hasher.init(_seed:)(v32, *(void *)(v5 + 40));
      sub_1005EDAB4((uint64_t)v32);
      int64_t v21 = Hasher._finalize()();
      uint64_t result = _HashTable.nextHole(atOrAfter:)( v21 & ~(-1LL << *(_BYTE *)(v5 + 32)),  v5 + 56,  ~(-1LL << *(_BYTE *)(v5 + 32)));
      *(void *)(v5 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
      uint64_t v22 = (_OWORD *)(*(void *)(v5 + 48) + 160 * result);
      unint64_t v23 = v40;
      v22[6] = v39;
      v22[7] = v23;
      unint64_t v24 = v42;
      v22[8] = v41;
      v22[9] = v24;
      unint64_t v25 = v36;
      v22[2] = v35;
      v22[3] = v25;
      int64_t v26 = v38;
      _BYTE v22[4] = v37;
      v22[5] = v26;
      unint64_t v27 = v34;
      *uint64_t v22 = v33;
      v22[1] = v27;
      ++*(void *)(v5 + 16);
    }
  }

  uint64_t result = swift_release();
  uint64_t *v2 = v5;
  return result;
}

    uint64_t v13 = (v21 - 1) & v21;
    uint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    unint64_t v23 = v7;
    unint64_t v24 = *(void *)(v38 + 72);
    sub_10002218C(*(void *)(v7 + 48) + v24 * v19, (uint64_t)v6, type metadata accessor for OwnedBeaconGroup);
    Hasher.init(_seed:)(v40, *(void *)(v9 + 40));
    unint64_t v25 = type metadata accessor for UUID(0LL);
    int64_t v26 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v40, v25, v26);
    uint64_t result = Hasher._finalize()();
    unint64_t v27 = -1LL << *(_BYTE *)(v9 + 32);
    unint64_t v28 = result & ~v27;
    int64_t v29 = v28 >> 6;
    if (((-1LL << v28) & ~*(void *)(v14 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v14 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
      uint64_t v7 = v23;
    }

    else
    {
      uint64_t v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v27) >> 6;
      uint64_t v7 = v23;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }

        int64_t v32 = v29 == v31;
        if (v29 == v31) {
          int64_t v29 = 0LL;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v14 + 8 * v29);
      }

      while (v33 == -1);
      unint64_t v17 = __clz(__rbit64(~v33)) + (v29 << 6);
    }

    *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
    uint64_t result = sub_10002218C((uint64_t)v6, *(void *)(v9 + 48) + v17 * v24, type metadata accessor for OwnedBeaconGroup);
    ++*(void *)(v9 + 16);
  }

  uint64_t v22 = v20 + 3;
  if (v22 < v36)
  {
    int64_t v21 = v37[v22];
    if (!v21)
    {
      while (1)
      {
        uint64_t v16 = v22 + 1;
        if (__OFADD__(v22, 1LL)) {
          goto LABEL_41;
        }
        if (v16 >= v36) {
          goto LABEL_35;
        }
        int64_t v21 = v37[v16];
        ++v22;
        if (v21) {
          goto LABEL_25;
        }
      }
    }

    uint64_t v16 = v22;
    goto LABEL_25;
  }

        uint64_t v10 = (v20 - 1) & v20;
        uint64_t v16 = __clz(__rbit64(v20)) + (v14 << 6);
      }

      unint64_t v17 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
      Hasher.init(_seed:)(v24, *(void *)(v6 + 40));
      sub_100069EC4(v24, v17);
      uint64_t v18 = Hasher._finalize()();
      uint64_t result = _HashTable.nextHole(atOrAfter:)( v18 & ~(-1LL << *(_BYTE *)(v6 + 32)),  v6 + 56,  ~(-1LL << *(_BYTE *)(v6 + 32)));
      *(void *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
      *(void *)(*(void *)(v6 + 48) + 8 * result) = v17;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release();
  uint64_t *v2 = v6;
  return result;
}

    uint64_t v13 = (v21 - 1) & v21;
    uint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    unint64_t v23 = v7;
    unint64_t v24 = *(void *)(v40 + 72);
    sub_10002218C(*(void *)(v7 + 48) + v24 * v19, (uint64_t)v6, type metadata accessor for BeaconStatus);
    Hasher.init(_seed:)(v42, *(void *)(v9 + 40));
    unint64_t v25 = type metadata accessor for UUID(0LL);
    int64_t v26 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v42, v25, v26);
    unint64_t v27 = type metadata accessor for Date(0LL);
    unint64_t v28 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(v42, v27, v28);
    uint64_t result = Hasher._finalize()();
    int64_t v29 = -1LL << *(_BYTE *)(v9 + 32);
    uint64_t v30 = result & ~v29;
    unint64_t v31 = v30 >> 6;
    if (((-1LL << v30) & ~*(void *)(v14 + 8 * (v30 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1LL << v30) & ~*(void *)(v14 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0LL;
      uint64_t v7 = v23;
    }

    else
    {
      int64_t v32 = 0;
      uint64_t v33 = (unint64_t)(63 - v29) >> 6;
      uint64_t v7 = v23;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }

        uint64_t v34 = v31 == v33;
        if (v31 == v33) {
          unint64_t v31 = 0LL;
        }
        v32 |= v34;
        unint64_t v35 = *(void *)(v14 + 8 * v31);
      }

      while (v35 == -1);
      unint64_t v17 = __clz(__rbit64(~v35)) + (v31 << 6);
    }

    *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
    uint64_t result = sub_10002218C((uint64_t)v6, *(void *)(v9 + 48) + v17 * v24, type metadata accessor for BeaconStatus);
    ++*(void *)(v9 + 16);
  }

  uint64_t v22 = v20 + 3;
  if (v22 < v38)
  {
    int64_t v21 = v39[v22];
    if (!v21)
    {
      while (1)
      {
        uint64_t v16 = v22 + 1;
        if (__OFADD__(v22, 1LL)) {
          goto LABEL_41;
        }
        if (v16 >= v38) {
          goto LABEL_35;
        }
        int64_t v21 = v39[v16];
        ++v22;
        if (v21) {
          goto LABEL_25;
        }
      }
    }

    uint64_t v16 = v22;
    goto LABEL_25;
  }

    uint64_t v18 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v21 << 6);
LABEL_26:
    unint64_t v28 = v12;
    int64_t v29 = *(void *)(v12 + 48);
    uint64_t v30 = *(void *)(v46 + 72);
    unint64_t v31 = *(void (**)(char *, unint64_t, uint64_t))(v46 + 32);
    v31(v11, v29 + v30 * v24, v9);
    int64_t v32 = *(void *)(v14 + 40);
    uint64_t v33 = sub_100007864(v48, v47, v49);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v9, v33);
    uint64_t v34 = -1LL << *(_BYTE *)(v14 + 32);
    unint64_t v35 = result & ~v34;
    char v36 = v35 >> 6;
    if (((-1LL << v35) & ~*(void *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      uint64_t v22 = __clz(__rbit64((-1LL << v35) & ~*(void *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v37 = 0;
      uint64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }

        uint64_t v39 = v36 == v38;
        if (v36 == v38) {
          char v36 = 0LL;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v19 + 8 * v36);
      }

      while (v40 == -1);
      uint64_t v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }

    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v31)( *(void *)(v14 + 48) + v22 * v30,  v11,  v9);
    ++*(void *)(v14 + 16);
    uint64_t v12 = v28;
  }

  unint64_t v27 = v25 + 3;
  if (v27 < v44)
  {
    int64_t v26 = v45[v27];
    if (!v26)
    {
      while (1)
      {
        int64_t v21 = v27 + 1;
        if (__OFADD__(v27, 1LL)) {
          goto LABEL_41;
        }
        if (v21 >= v44) {
          goto LABEL_35;
        }
        int64_t v26 = v45[v21];
        ++v27;
        if (v26) {
          goto LABEL_25;
        }
      }
    }

    int64_t v21 = v27;
    goto LABEL_25;
  }

  swift_release();
  int64_t v26 = 1LL << *(_BYTE *)(v8 + 32);
  if (v26 > 63) {
    bzero(v28, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *unint64_t v28 = -1LL << v26;
  }
  uint64_t v2 = v27;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_29:
  uint64_t result = swift_release();
  uint64_t *v2 = v10;
  return result;
}

    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v19 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_26:
    unint64_t v23 = v6;
    unint64_t v24 = *(void *)(v40 + 72);
    unint64_t v25 = v16;
    sub_10002218C(*(void *)(v6 + 48) + v24 * v19, v42, v16);
    Hasher.init(_seed:)(v43, *(void *)(v8 + 40));
    int64_t v26 = type metadata accessor for UUID(0LL);
    unint64_t v27 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v43, v26, v27);
    dispatch thunk of Hashable.hash(into:)(v43, v26, v27);
    uint64_t result = Hasher._finalize()();
    unint64_t v28 = -1LL << *(_BYTE *)(v8 + 32);
    int64_t v29 = result & ~v28;
    uint64_t v30 = v29 >> 6;
    if (((-1LL << v29) & ~*(void *)(v13 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1LL << v29) & ~*(void *)(v13 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0LL;
      uint64_t v6 = v23;
      uint64_t v16 = v25;
    }

    else
    {
      unint64_t v31 = 0;
      int64_t v32 = (unint64_t)(63 - v28) >> 6;
      uint64_t v6 = v23;
      uint64_t v16 = v25;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }

        uint64_t v33 = v30 == v32;
        if (v30 == v32) {
          uint64_t v30 = 0LL;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v13 + 8 * v30);
      }

      while (v34 == -1);
      unint64_t v17 = __clz(__rbit64(~v34)) + (v30 << 6);
    }

    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
    uint64_t result = sub_10002218C(v42, *(void *)(v8 + 48) + v17 * v24, v16);
    ++*(void *)(v8 + 16);
  }

  uint64_t v22 = v20 + 3;
  if (v22 < v38)
  {
    int64_t v21 = v39[v22];
    if (!v21)
    {
      while (1)
      {
        uint64_t v15 = v22 + 1;
        if (__OFADD__(v22, 1LL)) {
          goto LABEL_41;
        }
        if (v15 >= v38) {
          goto LABEL_35;
        }
        int64_t v21 = v39[v15];
        ++v22;
        if (v21) {
          goto LABEL_25;
        }
      }
    }

    uint64_t v15 = v22;
    goto LABEL_25;
  }

    uint64_t v9 = (v33 - 1) & v33;
    uint64_t v14 = __clz(__rbit64(v33)) + (v12 << 6);
LABEL_10:
    uint64_t v15 = (__int128 *)(*(void *)(v3 + 48) + 160 * v14);
    uint64_t v16 = v15[5];
    uint64_t v18 = v15[2];
    unint64_t v17 = v15[3];
    uint64_t v40 = v15[4];
    uint64_t v41 = v16;
    uint64_t v38 = v18;
    uint64_t v39 = v17;
    uint64_t v19 = v15[6];
    uint64_t v20 = v15[7];
    int64_t v21 = v15[9];
    char v44 = v15[8];
    unint64_t v45 = v21;
    unint64_t v42 = v19;
    unint64_t v43 = v20;
    uint64_t v22 = v15[1];
    char v36 = *v15;
    unint64_t v37 = v22;
    Hasher.init(_seed:)(v35, *(void *)(v5 + 40));
    sub_1000D4DD8(&v36);
    sub_1005EDAB4((uint64_t)v35);
    unint64_t v23 = Hasher._finalize()();
    uint64_t result = _HashTable.nextHole(atOrAfter:)( v23 & ~(-1LL << *(_BYTE *)(v5 + 32)),  v5 + 56,  ~(-1LL << *(_BYTE *)(v5 + 32)));
    *(void *)(v5 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    unint64_t v24 = (_OWORD *)(*(void *)(v5 + 48) + 160 * result);
    unint64_t v25 = v37;
    *unint64_t v24 = v36;
    v24[1] = v25;
    int64_t v26 = v41;
    unint64_t v28 = v38;
    unint64_t v27 = v39;
    v24[4] = v40;
    v24[5] = v26;
    v24[2] = v28;
    v24[3] = v27;
    int64_t v29 = v42;
    uint64_t v30 = v43;
    unint64_t v31 = v45;
    v24[8] = v44;
    v24[9] = v31;
    v24[6] = v29;
    v24[7] = v30;
    ++*(void *)(v5 + 16);
  }

  uint64_t v34 = v32 + 3;
  if (v34 >= v10)
  {
LABEL_26:
    uint64_t result = swift_release_n(v3, 2LL);
    goto LABEL_28;
  }

  uint64_t v33 = *(void *)(v7 + 8 * v34);
  if (v33)
  {
    uint64_t v12 = v34;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v12 = v34 + 1;
    if (__OFADD__(v34, 1LL)) {
      break;
    }
    if (v12 >= v10) {
      goto LABEL_26;
    }
    uint64_t v33 = *(void *)(v7 + 8 * v12);
    ++v34;
    if (v33) {
      goto LABEL_25;
    }
  }

    uint64_t v13 = (v21 - 1) & v21;
    uint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    unint64_t v23 = *(void *)(v36 + 72);
    sub_10001DC4C(*(void *)(v7 + 48) + v23 * v19, (uint64_t)v6, type metadata accessor for OwnedBeaconGroup);
    Hasher.init(_seed:)(v38, *(void *)(v9 + 40));
    unint64_t v24 = type metadata accessor for UUID(0LL);
    unint64_t v25 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v38, v24, v25);
    uint64_t result = Hasher._finalize()();
    int64_t v26 = -1LL << *(_BYTE *)(v9 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1LL << v27) & ~*(void *)(v14 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v14 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v29 = 0;
      uint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        unint64_t v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0LL;
        }
        v29 |= v31;
        int64_t v32 = *(void *)(v14 + 8 * v28);
      }

      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }

    *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
    uint64_t result = sub_10002218C((uint64_t)v6, *(void *)(v9 + 48) + v17 * v23, type metadata accessor for OwnedBeaconGroup);
    ++*(void *)(v9 + 16);
  }

  uint64_t v22 = v20 + 3;
  if (v22 >= v35)
  {
LABEL_35:
    uint64_t result = swift_release_n(v7, 2LL);
    uint64_t v2 = v33;
    goto LABEL_37;
  }

  int64_t v21 = *(void *)(v34 + 8 * v22);
  if (v21)
  {
    uint64_t v16 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v16 >= v35) {
      goto LABEL_35;
    }
    int64_t v21 = *(void *)(v34 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v10 = (v20 - 1) & v20;
    uint64_t v16 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_10:
    unint64_t v17 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    Hasher.init(_seed:)(v23, *(void *)(v6 + 40));
    swift_bridgeObjectRetain(v17);
    sub_100069EC4(v23, v17);
    uint64_t v18 = Hasher._finalize()();
    uint64_t result = _HashTable.nextHole(atOrAfter:)( v18 & ~(-1LL << *(_BYTE *)(v6 + 32)),  v6 + 56,  ~(-1LL << *(_BYTE *)(v6 + 32)));
    *(void *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    *(void *)(*(void *)(v6 + 48) + 8 * result) = v17;
    ++*(void *)(v6 + 16);
  }

  int64_t v21 = v19 + 3;
  if (v21 >= v11)
  {
LABEL_26:
    swift_release();
    uint64_t v2 = v22;
    goto LABEL_27;
  }

  uint64_t v20 = *(void *)(v8 + 8 * v21);
  if (v20)
  {
    uint64_t v14 = v21;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v14 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_26;
    }
    uint64_t v20 = *(void *)(v8 + 8 * v14);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }

    uint64_t v13 = (v21 - 1) & v21;
    uint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    unint64_t v23 = *(void *)(v38 + 72);
    sub_10001DC4C(*(void *)(v7 + 48) + v23 * v19, (uint64_t)v6, type metadata accessor for BeaconStatus);
    Hasher.init(_seed:)(v40, *(void *)(v9 + 40));
    unint64_t v24 = type metadata accessor for UUID(0LL);
    unint64_t v25 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v40, v24, v25);
    int64_t v26 = type metadata accessor for Date(0LL);
    unint64_t v27 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(v40, v26, v27);
    uint64_t result = Hasher._finalize()();
    unint64_t v28 = -1LL << *(_BYTE *)(v9 + 32);
    int64_t v29 = result & ~v28;
    uint64_t v30 = v29 >> 6;
    if (((-1LL << v29) & ~*(void *)(v14 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1LL << v29) & ~*(void *)(v14 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v31 = 0;
      int64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        uint64_t v33 = v30 == v32;
        if (v30 == v32) {
          uint64_t v30 = 0LL;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v14 + 8 * v30);
      }

      while (v34 == -1);
      unint64_t v17 = __clz(__rbit64(~v34)) + (v30 << 6);
    }

    *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
    uint64_t result = sub_10002218C((uint64_t)v6, *(void *)(v9 + 48) + v17 * v23, type metadata accessor for BeaconStatus);
    ++*(void *)(v9 + 16);
  }

  uint64_t v22 = v20 + 3;
  if (v22 >= v37)
  {
LABEL_35:
    uint64_t result = swift_release_n(v7, 2LL);
    uint64_t v2 = v35;
    goto LABEL_37;
  }

  int64_t v21 = *(void *)(v36 + 8 * v22);
  if (v21)
  {
    uint64_t v16 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v16 >= v37) {
      goto LABEL_35;
    }
    int64_t v21 = *(void *)(v36 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v19 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v22 << 6);
LABEL_26:
    int64_t v29 = *(void *)(v10 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v12, *(void *)(v13 + 48) + v29 * v25, v9);
    uint64_t v30 = *(void *)(v15 + 40);
    unint64_t v31 = sub_100007864(v43, v42, v44);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v9, v31);
    int64_t v32 = -1LL << *(_BYTE *)(v15 + 32);
    uint64_t v33 = result & ~v32;
    uint64_t v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v20 + 8 * (v33 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v20 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v35 = 0;
      char v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        unint64_t v37 = v34 == v36;
        if (v34 == v36) {
          uint64_t v34 = 0LL;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v20 + 8 * v34);
      }

      while (v38 == -1);
      unint64_t v23 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v10 + 32))( *(void *)(v15 + 48) + v23 * v29,  v12,  v9);
    ++*(void *)(v15 + 16);
  }

  unint64_t v28 = v26 + 3;
  if (v28 >= v41)
  {
LABEL_35:
    uint64_t result = swift_release_n(v13, 2LL);
    uint64_t v7 = v39;
    goto LABEL_37;
  }

  unint64_t v27 = *(void *)(v40 + 8 * v28);
  if (v27)
  {
    uint64_t v22 = v28;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v22 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v22 >= v41) {
      goto LABEL_35;
    }
    unint64_t v27 = *(void *)(v40 + 8 * v22);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v19 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_26:
    unint64_t v23 = v6;
    unint64_t v24 = *(void *)(v40 + 72);
    unint64_t v25 = *(void *)(v6 + 48) + v24 * v19;
    int64_t v26 = v16;
    sub_10001DC4C(v25, v42, v16);
    Hasher.init(_seed:)(v43, *(void *)(v8 + 40));
    unint64_t v27 = type metadata accessor for UUID(0LL);
    unint64_t v28 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v43, v27, v28);
    dispatch thunk of Hashable.hash(into:)(v43, v27, v28);
    uint64_t result = Hasher._finalize()();
    int64_t v29 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v30 = result & ~v29;
    unint64_t v31 = v30 >> 6;
    if (((-1LL << v30) & ~*(void *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1LL << v30) & ~*(void *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0LL;
      uint64_t v16 = v26;
    }

    else
    {
      int64_t v32 = 0;
      uint64_t v33 = (unint64_t)(63 - v29) >> 6;
      uint64_t v16 = v26;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        uint64_t v34 = v31 == v33;
        if (v31 == v33) {
          unint64_t v31 = 0LL;
        }
        v32 |= v34;
        unint64_t v35 = *(void *)(v13 + 8 * v31);
      }

      while (v35 == -1);
      unint64_t v17 = __clz(__rbit64(~v35)) + (v31 << 6);
    }

    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
    uint64_t result = sub_10002218C(v42, *(void *)(v8 + 48) + v17 * v24, v16);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }

  uint64_t v22 = v20 + 3;
  if (v22 >= v39)
  {
LABEL_35:
    uint64_t result = swift_release_n(v6, 2LL);
    uint64_t v2 = v37;
    goto LABEL_37;
  }

  int64_t v21 = *(void *)(v38 + 8 * v22);
  if (v21)
  {
    uint64_t v15 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v15 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v15 >= v39) {
      goto LABEL_35;
    }
    int64_t v21 = *(void *)(v38 + 8 * v15);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v84 = sub_100004AEC(&qword_10099CE68);
    memcpy(v64, v65, *(void *)(*(void *)(v84 - 8) + 64LL));
    goto LABEL_98;
  }

  if (v70)
  {
    sub_100018C68((uint64_t)v64, type metadata accessor for AccessoryProductInfo);
    goto LABEL_25;
  }

  *(void *)__int128 v64 = *(void *)v65;
  v64[8] = v65[8];
  uint64_t v115 = v66[5];
  uint64_t v116 = &v64[v115];
  uint64_t v117 = &v65[v115];
  uint64_t v118 = type metadata accessor for ServerStatusCode(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v118 - 8) + 40LL))(v116, v117, v118);
  v64[v66[6]] = v65[v66[6]];
  v64[v66[7]] = v65[v66[7]];
  uint64_t v119 = v66[8];
  char v120 = &v64[v119];
  uint64_t v121 = (uint64_t *)&v65[v119];
  uint64_t v123 = *v121;
  uint64_t v122 = v121[1];
  *char v120 = v123;
  v120[1] = v122;
  swift_bridgeObjectRelease();
  v64[v66[9]] = v65[v66[9]];
  v64[v66[10]] = v65[v66[10]];
  v64[v66[11]] = v65[v66[11]];
  uint64_t v124 = v66[12];
  uint64_t v125 = &v64[v124];
  uint64_t v126 = (uint64_t *)&v65[v124];
  uint64_t v128 = *v126;
  uint64_t v127 = v126[1];
  char *v125 = v128;
  v125[1] = v127;
  swift_bridgeObjectRelease();
  uint64_t v129 = v66[13];
  id v130 = &v64[v129];
  uint64_t v131 = (uint64_t *)&v65[v129];
  uint64_t v133 = *v131;
  uint64_t v132 = v131[1];
  char *v130 = v133;
  v130[1] = v132;
  swift_bridgeObjectRelease();
  uint64_t v134 = v66[14];
  uint64_t v135 = &v64[v134];
  uint64_t v136 = &v65[v134];
  *(void *)uint64_t v135 = *(void *)v136;
  v135[8] = v136[8];
  uint64_t v137 = v66[15];
  uint64_t v138 = &v64[v137];
  uint64_t v139 = (uint64_t *)&v65[v137];
  uint64_t v141 = *v139;
  uint64_t v140 = v139[1];
  *uint64_t v138 = v141;
  v138[1] = v140;
  swift_bridgeObjectRelease();
  uint64_t v142 = v66[16];
  uint64_t v143 = &v64[v142];
  uint64_t v144 = &v65[v142];
  id v145 = type metadata accessor for URL(0LL);
  uint64_t v337 = *(void *)(v145 - 8);
  uint64_t v146 = *(uint64_t (**)(void))(v337 + 48);
  uint64_t v147 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v146)(v143, 1LL, v145);
  uint64_t v329 = v146;
  double v332 = v145;
  uint64_t v148 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v146)(v144, 1LL, v145);
  if (v147)
  {
    if (v148)
    {
      uint64_t v149 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(v143, v144, *(void *)(*(void *)(v149 - 8) + 64LL));
      uint64_t v150 = v145;
    }

    else
    {
      uint64_t v150 = v145;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v337 + 32))(v143, v144, v145);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v337 + 56))(v143, 0LL, 1LL, v145);
    }
  }

  else
  {
    uint64_t v150 = v145;
    if (v148)
    {
      (*(void (**)(_BYTE *, uint64_t))(v337 + 8))(v143, v145);
      uint64_t v165 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(v143, v144, *(void *)(*(void *)(v165 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v337 + 40))(v143, v144, v145);
    }
  }

  uint64_t v184 = v66[17];
  uint64_t v185 = &v64[v184];
  int v186 = &v65[v184];
  uint64_t v187 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v329)(&v64[v184], 1LL, v150);
  uint64_t v188 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v329)(v186, 1LL, v150);
  if (v187)
  {
    if (!v188)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v337 + 32))(v185, v186, v145);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v337 + 56))(v185, 0LL, 1LL, v145);
      goto LABEL_56;
    }

    goto LABEL_55;
  }

  if (v188)
  {
    (*(void (**)(_BYTE *, uint64_t))(v337 + 8))(v185, v145);
LABEL_55:
    uint64_t v189 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v185, v186, *(void *)(*(void *)(v189 - 8) + 64LL));
    goto LABEL_56;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v337 + 40))(v185, v186, v145);
LABEL_56:
  uint64_t v190 = v66[18];
  uint64_t v191 = &v64[v190];
  v192 = (uint64_t *)&v65[v190];
  uint64_t v194 = *v192;
  int v193 = v192[1];
  *uint64_t v191 = v194;
  v191[1] = v193;
  swift_bridgeObjectRelease();
  *(void *)&v64[v66[19]] = *(void *)&v65[v66[19]];
  v195 = v66[20];
  v196 = &v64[v195];
  uint64_t v197 = &v65[v195];
  uint64_t v198 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
  uint64_t v320 = *((void *)v198 - 1);
  uint64_t v199 = *(uint64_t (**)(char *, uint64_t, int *))(v320 + 48);
  uint64_t v200 = (uint64_t)v196;
  LODWORD(v196) = v199(v196, 1LL, v198);
  uint64_t v325 = v198;
  __srcb = v197;
  uint64_t v201 = v199(v197, 1LL, v198);
  if (!(_DWORD)v196)
  {
    if (v201)
    {
      sub_100018C68(v200, type metadata accessor for AccessoryInfoResponseContent.Configuration);
      goto LABEL_62;
    }

    char v210 = *((void *)v197 + 1);
    *(void *)uint64_t v200 = *(void *)v197;
    *(void *)(v200 + 8) = v210;
    swift_bridgeObjectRelease();
    uint64_t v211 = *((void *)v197 + 3);
    *(void *)(v200 + swift_weakDestroy(v0 + 16) = *((void *)v197 + 2);
    *(void *)(v200 + 24) = v211;
    swift_bridgeObjectRelease();
    v212 = *((void *)v197 + 5);
    *(void *)(v200 + 32) = *((void *)v197 + 4);
    *(void *)(v200 + 40) = v212;
    swift_bridgeObjectRelease();
    *(_WORD *)(v200 + 48) = *((_WORD *)v197 + 24);
    v213 = *((void *)v197 + 8);
    *(void *)(v200 + 56) = *((void *)v197 + 7);
    *(void *)(v200 + 64) = v213;
    *(_BYTE *)(v200 + 72) = v197[72];
    uint64_t v214 = v198[10];
    uint64_t v215 = &v197[v214];
    uint64_t v321 = (void *)(v200 + v214);
    int v316 = v329();
    uint64_t v216 = ((uint64_t (*)(char *, uint64_t, uint64_t))v329)(v215, 1LL, v332);
    if (v316)
    {
      if (!v216)
      {
        (*(void (**)(void *, char *, uint64_t))(v337 + 32))(v321, v215, v332);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v337 + 56))(v321, 0LL, 1LL, v332);
        goto LABEL_77;
      }

      uint64_t v217 = *(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A34D0) - 8) + 64LL);
      uint64_t v218 = v321;
    }

    else
    {
      if (!v216)
      {
        (*(void (**)(void *, char *, uint64_t))(v337 + 40))(v321, v215, v332);
        goto LABEL_77;
      }

      (*(void (**)(void *, uint64_t))(v337 + 8))(v321, v332);
      uint64_t v217 = *(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A34D0) - 8) + 64LL);
      uint64_t v218 = v321;
    }

    memcpy(v218, v215, v217);
LABEL_77:
    double v231 = v198[11];
    double v232 = &v197[v231];
    uint64_t v322 = (void *)(v200 + v231);
    uint64_t v317 = v329();
    double v233 = ((uint64_t (*)(char *, uint64_t, uint64_t))v329)(v232, 1LL, v332);
    if (v317)
    {
      if (v233)
      {
        uint64_t v234 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(v322, v232, *(void *)(*(void *)(v234 - 8) + 64LL));
        uint64_t v206 = v332;
      }

      else
      {
        uint64_t v206 = v332;
        (*(void (**)(void *, char *, uint64_t))(v337 + 32))(v322, v232, v332);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v337 + 56))(v322, 0LL, 1LL, v332);
      }
    }

    else
    {
      uint64_t v206 = v332;
      if (v233)
      {
        (*(void (**)(void *, uint64_t))(v337 + 8))(v322, v332);
        double v235 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(v322, v232, *(void *)(*(void *)(v235 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(void *, char *, uint64_t))(v337 + 40))(v322, v232, v332);
      }
    }

    double v236 = v198[12];
    double v237 = v200 + v236;
    uint64_t v238 = &__srcb[v236];
    *(void *)double v237 = *(void *)v238;
    *(_BYTE *)(v237 + 8) = v238[8];
    char v239 = v198[13];
    uint64_t v240 = (void *)(v200 + v239);
    int v241 = &__srcb[v239];
    int v243 = *(void *)v241;
    uint64_t v242 = *((void *)v241 + 1);
    *uint64_t v240 = v243;
    v240[1] = v242;
    swift_bridgeObjectRelease();
    *(void *)(v200 + v198[14]) = *(void *)&__srcb[v198[14]];
    swift_bridgeObjectRelease();
    uint64_t v244 = v198[15];
    int v245 = (void *)(v200 + v244);
    uint64_t v246 = &__srcb[v244];
    double v248 = *(void *)v246;
    double v247 = *((void *)v246 + 1);
    *int v245 = v248;
    v245[1] = v247;
    swift_bridgeObjectRelease();
    *(void *)(v200 + v198[16]) = *(void *)&__srcb[v198[16]];
    swift_bridgeObjectRelease();
    double v249 = v198[17];
    uint64_t v250 = v200 + v249;
    double v251 = &__srcb[v249];
    *(_OWORD *)uint64_t v250 = *(_OWORD *)v251;
    *(_BYTE *)(v250 + swift_weakDestroy(v0 + 16) = v251[16];
    double v252 = v198[18];
    double v253 = v200 + v252;
    uint64_t v254 = &__srcb[v252];
    *(_BYTE *)(v253 + swift_weakDestroy(v0 + 16) = v254[16];
    *(_OWORD *)double v253 = *(_OWORD *)v254;
    goto LABEL_85;
  }

  if (v201)
  {
LABEL_62:
    char v208 = sub_100004AEC(&qword_1009A6DD0);
    memcpy((void *)v200, v197, *(void *)(*(void *)(v208 - 8) + 64LL));
    uint64_t v209 = v337;
    uint64_t v206 = v332;
    goto LABEL_86;
  }

  v202 = *((_OWORD *)v197 + 1);
  uint64_t v203 = v200;
  *(_OWORD *)uint64_t v200 = *(_OWORD *)v197;
  *(_OWORD *)(v200 + swift_weakDestroy(v0 + 16) = v202;
  *(_OWORD *)(v200 + 32) = *((_OWORD *)v197 + 2);
  *(_WORD *)(v200 + 48) = *((_WORD *)v197 + 24);
  uint64_t v204 = *((void *)v197 + 8);
  *(void *)(v200 + 56) = *((void *)v197 + 7);
  *(void *)(v200 + 64) = v204;
  *(_BYTE *)(v200 + 72) = v197[72];
  uint64_t v205 = v325[10];
  uint64_t v315 = &v197[v205];
  __dst = (void *)(v200 + v205);
  uint64_t v206 = v332;
  if (v329())
  {
    char v207 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(__dst, v315, *(void *)(*(void *)(v207 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, char *, uint64_t))(v337 + 32))(__dst, v315, v332);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v337 + 56))(__dst, 0LL, 1LL, v332);
  }

  uint64_t v219 = v325[11];
  __dsta = (void *)(v200 + v219);
  uint64_t v220 = &__srcb[v219];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v329)(&__srcb[v219], 1LL, v332))
  {
    uint64_t v221 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(__dsta, v220, *(void *)(*(void *)(v221 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, char *, uint64_t))(v337 + 32))(__dsta, v220, v332);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v337 + 56))(__dsta, 0LL, 1LL, v332);
  }

  uint64_t v222 = v325[12];
  double v223 = v203 + v222;
  double v224 = &__srcb[v222];
  *(void *)double v223 = *(void *)v224;
  *(_BYTE *)(v223 + 8) = v224[8];
  *(_OWORD *)(v203 + v325[13]) = *(_OWORD *)&__srcb[v325[13]];
  *(void *)(v203 + v325[14]) = *(void *)&__srcb[v325[14]];
  *(_OWORD *)(v203 + v325[15]) = *(_OWORD *)&__srcb[v325[15]];
  *(void *)(v203 + v325[16]) = *(void *)&__srcb[v325[16]];
  double v225 = v325[17];
  uint64_t v226 = v203 + v225;
  double v227 = &__srcb[v225];
  *(_BYTE *)(v226 + swift_weakDestroy(v0 + 16) = v227[16];
  *(_OWORD *)uint64_t v226 = *(_OWORD *)v227;
  double v228 = v325[18];
  double v229 = v203 + v228;
  uint64_t v230 = &__srcb[v228];
  *(_BYTE *)(v229 + swift_weakDestroy(v0 + 16) = v230[16];
  *(_OWORD *)double v229 = *(_OWORD *)v230;
  (*(void (**)(uint64_t, void, uint64_t, int *))(v320 + 56))(v203, 0LL, 1LL, v325);
LABEL_85:
  uint64_t v209 = v337;
LABEL_86:
  *(_DWORD *)&v64[v66[21]] = *(_DWORD *)&v65[v66[21]];
  *(void *)&v64[v66[22]] = *(void *)&v65[v66[22]];
  swift_bridgeObjectRelease();
  double v255 = v66[23];
  double v256 = (uint64_t)&v64[v255];
  double v257 = &v65[v255];
  uint64_t v258 = *(void *)&v64[v255 + 8];
  if (v258 >> 60 == 15)
  {
LABEL_89:
    *(_OWORD *)double v256 = *(_OWORD *)v257;
    goto LABEL_91;
  }

  double v259 = *((void *)v257 + 1);
  if (v259 >> 60 == 15)
  {
    sub_100041D4C(v256);
    goto LABEL_89;
  }

  double v260 = *(void *)v256;
  *(void *)double v256 = *(void *)v257;
  *(void *)(v256 + 8) = v259;
  sub_100016F9C(v260, v258);
LABEL_91:
  double v261 = v66[24];
  uint64_t v262 = (uint64_t *)&v64[v261];
  double v263 = (uint64_t *)&v65[v261];
  double v264 = *(void *)&v64[v261 + 8];
  if (v264 >> 60 != 15)
  {
    double v265 = v263[1];
    if (v265 >> 60 != 15)
    {
      uint64_t v266 = *v262;
      *uint64_t v262 = *v263;
      v262[1] = v265;
      sub_100016F9C(v266, v264);
      goto LABEL_96;
    }

    sub_100041D4C((uint64_t)v262);
  }

  *(_OWORD *)uint64_t v262 = *(_OWORD *)v263;
LABEL_96:
  double v267 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v209 + 40);
  v267(&v64[v66[25]], &v65[v66[25]], v206);
  v267(&v64[v66[26]], &v65[v66[26]], v206);
  v267(&v64[v66[27]], &v65[v66[27]], v206);
  v267(&v64[v66[28]], &v65[v66[28]], v206);
  v267(&v64[v66[29]], &v65[v66[29]], v206);
  v267(&v64[v66[30]], &v65[v66[30]], v206);
  double v268 = v66[31];
  double v269 = &v64[v268];
  uint64_t v270 = (uint64_t *)&v65[v268];
  double v272 = *v270;
  double v271 = v270[1];
  *double v269 = v272;
  v269[1] = v271;
  swift_bridgeObjectRelease();
  *(void *)&v64[v66[32]] = *(void *)&v65[v66[32]];
  swift_bridgeObjectRelease();
  double v273 = v66[33];
  uint64_t v274 = &v64[v273];
  double v275 = (uint64_t *)&v65[v273];
  double v277 = *v275;
  double v276 = v275[1];
  *uint64_t v274 = v277;
  v274[1] = v276;
  swift_bridgeObjectRelease();
  *(void *)&v64[v66[34]] = *(void *)&v65[v66[34]];
  swift_bridgeObjectRelease();
  uint64_t v278 = v66[35];
  uint64_t v279 = &v64[v278];
  uint64_t v280 = &v65[v278];
  *(_OWORD *)uint64_t v279 = *(_OWORD *)v280;
  v279[16] = v280[16];
  uint64_t v281 = v66[36];
  uint64_t v282 = &v64[v281];
  uint64_t v283 = &v65[v281];
  v282[16] = v283[16];
  *(_OWORD *)uint64_t v282 = *(_OWORD *)v283;
  v267(&v64[v66[37]], &v65[v66[37]], v206);
  v267(&v64[v66[38]], &v65[v66[38]], v206);
  v267(&v64[v66[39]], &v65[v66[39]], v206);
  v267(&v64[v66[40]], &v65[v66[40]], v206);
  v267(&v64[v66[41]], &v65[v66[41]], v206);
  v267(&v64[v66[42]], &v65[v66[42]], v206);
  v64[v66[43]] = v65[v66[43]];
  v64[v66[44]] = v65[v66[44]];
  v64[v66[45]] = v65[v66[45]];
  char v284 = v66[46];
  uint64_t v285 = &v64[v284];
  uint64_t v286 = (uint64_t *)&v65[v284];
  uint64_t v288 = *v286;
  uint64_t v287 = v286[1];
  *uint64_t v285 = v288;
  v285[1] = v287;
  swift_bridgeObjectRelease();
  uint64_t v289 = v66[47];
  uint64_t v290 = &v64[v289];
  uint64_t v291 = (uint64_t *)&v65[v289];
  char v293 = *v291;
  uint64_t v292 = v291[1];
  *uint64_t v290 = v293;
  v290[1] = v292;
  swift_bridgeObjectRelease();
  __int128 v61 = v340;
LABEL_97:
  __int128 v62 = v341;
LABEL_98:
  uint64_t v294 = v61[17];
  *(_BYTE *)(v34 + v61[16]) = *(_BYTE *)(v33 + v61[16]);
  *(void *)(v34 + v294) = *(void *)(v33 + v294);
  swift_bridgeObjectRelease();
  uint64_t v295 = v61[18];
  uint64_t v296 = (void *)(v34 + v295);
  v297 = (const void *)(v33 + v295);
  v298 = v339(v34 + v295, 1LL, v62);
  BOOL v299 = v339((uint64_t)v297, 1LL, v62);
  if (v298)
  {
    if (!v299)
    {
      (*(void (**)(void *, const void *, uint64_t))(v338 + 32))(v296, v297, v62);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v338 + 56))(v296, 0LL, 1LL, v62);
      goto LABEL_104;
    }

    goto LABEL_103;
  }

  if (v299)
  {
    (*(void (**)(void *, uint64_t))(v338 + 8))(v296, v62);
LABEL_103:
    uint64_t v300 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v296, v297, *(void *)(*(void *)(v300 - 8) + 64LL));
    goto LABEL_104;
  }

  v334((uint64_t)v296, (uint64_t)v297, v62);
LABEL_104:
  uint64_t v301 = v61[19];
  uint64_t v302 = (void *)(v34 + v301);
  uint64_t v303 = (const void *)(v33 + v301);
  uint64_t v304 = v339(v34 + v301, 1LL, v62);
  uint64_t v305 = v339((uint64_t)v303, 1LL, v62);
  if (v304)
  {
    if (!v305)
    {
      (*(void (**)(void *, const void *, uint64_t))(v338 + 32))(v302, v303, v62);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v338 + 56))(v302, 0LL, 1LL, v62);
      goto LABEL_110;
    }

    goto LABEL_109;
  }

  if (v305)
  {
    (*(void (**)(void *, uint64_t))(v338 + 8))(v302, v62);
LABEL_109:
    char v306 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v302, v303, *(void *)(*(void *)(v306 - 8) + 64LL));
    goto LABEL_110;
  }

  v334((uint64_t)v302, (uint64_t)v303, v62);
LABEL_110:
  uint64_t v307 = v61[20];
  double v308 = (uint64_t *)(v34 + v307);
  double v309 = (uint64_t *)(v33 + v307);
  double v310 = *(void *)(v34 + v307 + 8);
  if (((v310 >> 60) | 4) != 0xF)
  {
    uint64_t v311 = v309[1];
    if (((v311 >> 60) | 4) != 0xF)
    {
      int v314 = *v308;
      *double v308 = *v309;
      v308[1] = v311;
      sub_100016F9C(v314, v310);
      goto LABEL_114;
    }

    sub_1000A236C((uint64_t)v308);
  }

  *(_OWORD *)double v308 = *(_OWORD *)v309;
LABEL_114:
  int v312 = v61[22];
  *(_BYTE *)(v34 + v61[21]) = *(_BYTE *)(v33 + v61[21]);
  *(_WORD *)(v34 + v312) = *(_WORD *)(v33 + v312);
  return v34;
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
LABEL_26:
  char v44 = 0LL;
  unint64_t v45 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  v42._object = (void *)0x8000000100856440LL;
  v42._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v42);
  _print_unlocked<A, B>(_:_:)( &v47,  &v44,  &type metadata for String,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v43._countAndFlagsBits = 39LL;
  v43._object = (void *)0xE100000000000000LL;
  String.append(_:)(v43);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v44,  v45,  "Swift/NativeDictionary.swift",  28LL,  2LL,  783LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
}

    uint64_t v6 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v9 << 6);
LABEL_26:
    unint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v13);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_10006A538(*(void *)(a1 + 56) + 32 * v13, (uint64_t)v40);
    *(void *)&uint64_t v39 = v19;
    *((void *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(void *)&v37[0] = v19;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain(v18);
    swift_dynamicCast(&v29, v37, &type metadata for String, &type metadata for AnyHashable, 7LL);
    sub_10006A358(v38, v32);
    uint64_t v33 = v29;
    uint64_t v34 = v30;
    unint64_t v35 = v31;
    sub_10006A358(v32, v36);
    int64_t v29 = v33;
    uint64_t v30 = v34;
    unint64_t v31 = v35;
    sub_10006A358(v36, v37);
    sub_10006A358(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v3[5]);
    uint64_t v20 = -1LL << *((_BYTE *)v3 + 32);
    int64_t v21 = result & ~v20;
    uint64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)&v7[8 * (v21 >> 6)]) != 0)
    {
      uint64_t v10 = __clz(__rbit64((-1LL << v21) & ~*(void *)&v7[8 * (v21 >> 6)])) | v21 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }

        unint64_t v25 = v22 == v24;
        if (v22 == v24) {
          uint64_t v22 = 0LL;
        }
        v23 |= v25;
        int64_t v26 = *(void *)&v7[8 * v22];
      }

      while (v26 == -1);
      uint64_t v10 = __clz(__rbit64(~v26)) + (v22 << 6);
    }

    *(void *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v10;
    uint64_t v11 = v3[6] + 40 * v10;
    *(_OWORD *)uint64_t v11 = v29;
    *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = v30;
    *(void *)(v11 + 32) = v31;
    uint64_t result = (uint64_t)sub_10006A358(&v33, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }

  uint64_t v16 = v14 + 3;
  if (v16 >= v28)
  {
LABEL_35:
    swift_release(a1);
    swift_release(v3);
    return (uint64_t)v3;
  }

  uint64_t v15 = *(void *)(v27 + 8 * v16);
  if (v15)
  {
    uint64_t v9 = v16;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v9 >= v28) {
      goto LABEL_35;
    }
    uint64_t v15 = *(void *)(v27 + 8 * v9);
    ++v16;
    if (v15) {
      goto LABEL_25;
    }
  }

    uint64_t v5 = (v13 - 1) & v13;
    uint64_t v11 = __clz(__rbit64(v13)) + (v8 << 6);
LABEL_26:
    uint64_t v15 = 8 * v11;
    unint64_t v17 = *(void **)(*(void *)(a1 + 56) + v15);
    *(void *)&v41[0] = *(void *)(*(void *)(a1 + 48) + v15);
    uint64_t v16 = *(void **)&v41[0];
    *(void *)&v40[0] = v17;
    type metadata accessor for FileProtectionType(0LL);
    uint64_t v19 = v18;
    uint64_t v20 = v16;
    int64_t v21 = v17;
    swift_dynamicCast((char *)v41 + 8, v40, v19, (char *)&type metadata for Any + 8, 7LL);
    uint64_t v22 = *(void *)&v41[0];
    sub_10006A358((_OWORD *)((char *)v41 + 8), v39);
    sub_10006A358(v39, v41);
    sub_10006A358(v41, v40);
    unint64_t v23 = v2[5];
    unint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    int64_t v26 = v25;
    Hasher.init(_seed:)(&v38, v23);
    String.hash(into:)(&v38, v24, v26);
    unint64_t v27 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v28 = -1LL << *((_BYTE *)v2 + 32);
    int64_t v29 = v27 & ~v28;
    uint64_t v30 = v29 >> 6;
    if (((-1LL << v29) & ~*(void *)&v6[8 * (v29 >> 6)]) != 0)
    {
      uint64_t v9 = __clz(__rbit64((-1LL << v29) & ~*(void *)&v6[8 * (v29 >> 6)])) | v29 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v31 = 0;
      int64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }

        uint64_t v33 = v30 == v32;
        if (v30 == v32) {
          uint64_t v30 = 0LL;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)&v6[8 * v30];
      }

      while (v34 == -1);
      uint64_t v9 = __clz(__rbit64(~v34)) + (v30 << 6);
    }

    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v9;
    *(void *)(v2[6] + 8 * v9) = v22;
    uint64_t result = (uint64_t)sub_10006A358(v40, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }

  uint64_t v14 = v12 + 3;
  if (v14 >= v36)
  {
LABEL_35:
    swift_release(a1);
    swift_release(v2);
    return (uint64_t)v2;
  }

  uint64_t v13 = *(void *)(v35 + 8 * v14);
  if (v13)
  {
    uint64_t v8 = v14;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v8 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v8 >= v36) {
      goto LABEL_35;
    }
    uint64_t v13 = *(void *)(v35 + 8 * v8);
    ++v14;
    if (v13) {
      goto LABEL_25;
    }
  }

      sub_100018C68(v28, type metadata accessor for OwnedBeaconRecord);
      swift_bridgeObjectRelease_n(v52, 2LL);
      uint64_t v50 = v53[*(int *)(v54 + 32)];
      sub_100018C68((uint64_t)v53, type metadata accessor for OwnedBeaconGroup);
      LOBYTE(a3) = v55;
      if ((v50 & 1) == 0) {
        return a3 & 1;
      }
      goto LABEL_22;
    }

    swift_bridgeObjectRelease();
    uint64_t My = type metadata accessor for Feature.FindMy(0LL);
    v67[3] = My;
    v67[4] = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
    BOOL v46 = sub_10000A7C8(v67);
    (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v46,  enum case for Feature.FindMy.alphaWasp(_:),  My);
    uint64_t v47 = isFeatureEnabled(_:)(v67);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v67);
    uint64_t v48 = v17[*(int *)(v14 + 32)];
    sub_100018C68((uint64_t)v17, type metadata accessor for OwnedBeaconGroup);
    if (v48 == 1 && (v47 & 1) != 0) {
LABEL_22:
    }
      LOBYTE(a3) = 1;
  }

  else
  {
    LOBYTE(a3) = 1;
    v20(v13, 1LL, 1LL, v14);
    sub_100015794((uint64_t)v13, &qword_1009AA830);
  }

  return a3 & 1;
}

        __int128 v60 = [objc_allocWithZone(CLLocation) initWithLatitude:v36 longitude:v37];
        uint64_t v134 = [objc_allocWithZone(CLLocation) initWithLatitude:v21[3] longitude:v21[2]];
        objc_msgSend(v60, "distanceFromLocation:");
        __int128 v62 = v61;
        __int128 v63 = v145;
        swift_bridgeObjectRetain_n(v145, 2LL);
        swift_bridgeObjectRetain_n(v35, 2LL);
        __int128 v64 = v138;
        swift_bridgeObjectRetain_n(v138, 2LL);
        __int128 v65 = v144;
        __int128 v66 = swift_bridgeObjectRetain_n(v144, 2LL);
        __int128 v67 = (os_log_s *)Logger.logObject.getter(v66);
        __int128 v68 = static os_log_type_t.info.getter(v67);
        __int128 v69 = v68;
        if (os_log_type_enabled(v67, v68))
        {
          __int128 v70 = swift_slowAlloc(32LL, -1LL);
          __int128 v71 = v64;
          uint64_t v132 = v60;
          uint64_t v72 = v70;
          uint64_t v73 = swift_slowAlloc(64LL, -1LL);
          uint64_t v131 = v69;
          uint64_t v74 = v35;
          uint64_t v75 = v73;
          uint64_t v146 = v73;
          *(_DWORD *)uint64_t v72 = v128.n128_u32[0];
          swift_bridgeObjectRetain(v74);
          *(void *)(v72 + 4) = sub_1003F11D4(v136, v74, &v146);
          swift_bridgeObjectRelease();
          *(_WORD *)(v72 + 12) = 2080;
          if (v65) {
            unsigned int v76 = v142;
          }
          else {
            unsigned int v76 = 0x206C696E20LL;
          }
          if (v65) {
            uint64_t v77 = v65;
          }
          else {
            uint64_t v77 = 0xE500000000000000LL;
          }
          swift_bridgeObjectRetain(v65);
          *(void *)(v72 + 14) = sub_1003F11D4(v76, v77, &v146);
          swift_bridgeObjectRelease_n(v65, 2LL);
          swift_bridgeObjectRelease_n(v71, 2LL);
          swift_bridgeObjectRelease_n(v74, 2LL);
          swift_bridgeObjectRelease_n(v145, 2LL);
          swift_bridgeObjectRelease();
          *(_WORD *)(v72 + 22) = 2048;
          *(double *)(v72 + 24) = v62;
          _os_log_impl( (void *)&_mh_execute_header,  v67,  (os_log_type_t)v131,  "LabelledLocations %s %s Label Distance %f",  (uint8_t *)v72,  0x20u);
          swift_arrayDestroy(v75, 2LL, (char *)&type metadata for Any + 8);
          uint64_t v78 = v75;
          unint64_t v35 = v74;
          swift_slowDealloc(v78, -1LL, -1LL);
          uint64_t v79 = v72;
          __int128 v60 = v132;
          swift_slowDealloc(v79, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v65, 2LL);
          swift_bridgeObjectRelease_n(v64, 2LL);
          swift_bridgeObjectRelease_n(v35, 2LL);
          swift_bridgeObjectRelease_n(v63, 2LL);
        }

        int64_t v21 = v139;
        if (v62 > v23)
        {

          goto LABEL_9;
        }

        uint64_t v132 = v60;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        int64_t v29 = (uint64_t)v119;
        swift_beginAccess(v119, &v149, 1LL, 0LL);
        uint64_t v84 = v116;
        uint64_t v85 = (void *)(v29 + *(int *)(v116 + 64));
        *uint64_t v85 = v136;
        v85[1] = v35;
        swift_bridgeObjectRelease();
        uint64_t v86 = v117;
        uint64_t v87 = sub_10001DC4C((uint64_t)v21, (uint64_t)v117, type metadata accessor for SecureLocation);
        uint64_t v88 = (os_log_s *)Logger.logObject.getter(v87);
        uint64_t v89 = static os_log_type_t.default.getter(v88);
        if (os_log_type_enabled(v88, v89))
        {
          uint64_t v90 = swift_slowAlloc(22LL, -1LL);
          id v145 = swift_slowAlloc(64LL, -1LL);
          uint64_t v148 = v145;
          *(_DWORD *)uint64_t v90 = v111.n128_u32[0];
          id v91 = (uint64_t *)&v119[*(int *)(v84 + 64)];
          id v92 = v91[1];
          uint64_t v146 = *v91;
          uint64_t v147 = v92;
          swift_bridgeObjectRetain(v92);
          uint64_t v93 = sub_100004AEC(&qword_1009A34B0);
          unint64_t v94 = String.init<A>(describing:)(&v146, v93);
          uint64_t v146 = sub_1003F11D4(v94, v95, &v148);
          uint64_t v96 = v112;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v112, v90 + 4, v90 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v90 + 12) = 2080;
          uint64_t v97 = *v86;
          NSString v98 = v86[1];
          swift_bridgeObjectRetain(v98);
          uint64_t v146 = sub_1003F11D4(v97, v98, &v148);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v96, v90 + 14, v90 + 22);
          swift_bridgeObjectRelease();
          sub_100018C68((uint64_t)v86, type metadata accessor for SecureLocation);
          _os_log_impl( (void *)&_mh_execute_header,  v88,  v89,  "LabelledLocations Adding label %s to location %s",  (uint8_t *)v90,  0x16u);
          id v99 = v145;
          swift_arrayDestroy(v145, 2LL, (char *)&type metadata for Any + 8);
          int64_t v29 = (uint64_t)v119;
          swift_slowDealloc(v99, -1LL, -1LL);
          swift_slowDealloc(v90, -1LL, -1LL);
        }

        else
        {
          sub_100018C68((uint64_t)v86, type metadata accessor for SecureLocation);
        }

        unint64_t v28 = v118;
LABEL_49:
        unint64_t v27 = v125;
LABEL_50:
        swift_beginAccess(v29, v150, 0LL, 0LL);
        sub_10001DC4C(v29, v28, type metadata accessor for SecureLocation);
        if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0) {
          unint64_t v27 = (void *)sub_1004C6004(0, v27[2] + 1LL, 1, (unint64_t)v27);
        }
        id v101 = v27[2];
        NSString v100 = v27[3];
        id v102 = (uint64_t)v27;
        if (v101 >= v100 >> 1) {
          id v102 = sub_1004C6004(v100 > 1, v101 + 1, 1, (unint64_t)v27);
        }
        int v103 = v127 + 1;
        *(void *)(v102 + swift_weakDestroy(v0 + 16) = v101 + 1;
        unint64_t v27 = (void *)v102;
        id v104 = v102 + v122 + v101 * v120;
        unint64_t v24 = v120;
        sub_10002218C(v28, v104, type metadata accessor for SecureLocation);
        sub_100018C68((uint64_t)v21, type metadata accessor for SecureLocation);
        sub_100018C68(v29, type metadata accessor for SecureLocation);
        int64_t v26 = v103;
        if (v103 == v123)
        {
          swift_bridgeObjectRelease();
          goto LABEL_62;
        }
      }
    }

    unint64_t v27 = _swiftEmptyArrayStorage;
LABEL_62:
    v114((uint64_t)v27, 0LL);
    return swift_bridgeObjectRelease();
  }

  else
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v105 = type metadata accessor for Logger(0LL);
    uint64_t v106 = sub_10000A720(v105, (uint64_t)qword_100A2AE08);
    uint64_t v107 = (os_log_s *)Logger.logObject.getter(v106);
    unint64_t v108 = static os_log_type_t.info.getter(v107);
    if (os_log_type_enabled(v107, v108))
    {
      char v109 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)char v109 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v107,  v108,  "LabelledLocations - No labels - nothing to resolve",  v109,  2u);
      swift_slowDealloc(v109, -1LL, -1LL);
    }

    return v114(v115, 0LL);
  }

        __int128 v64 = [objc_allocWithZone(CLLocation) initWithLatitude:v38 longitude:v39];
        uint64_t v133 = [objc_allocWithZone(CLLocation) initWithLatitude:v24[3] longitude:v24[2]];
        objc_msgSend(v64, "distanceFromLocation:");
        __int128 v66 = v65;
        __int128 v67 = v142;
        swift_bridgeObjectRetain_n(v142, 2LL);
        swift_bridgeObjectRetain_n(v37, 2LL);
        swift_bridgeObjectRetain_n(v58, 2LL);
        swift_bridgeObjectRetain_n(v41, 2LL);
        __int128 v69 = (os_log_s *)Logger.logObject.getter(v68);
        __int128 v70 = static os_log_type_t.info.getter(v69);
        if (os_log_type_enabled(v69, v70))
        {
          __int128 v71 = swift_slowAlloc(32LL, -1LL);
          id v130 = v64;
          uint64_t v72 = v58;
          uint64_t v73 = v71;
          uint64_t v74 = v37;
          uint64_t v75 = (id)swift_slowAlloc(64LL, -1LL);
          uint64_t v143 = (uint64_t)v75;
          *(_DWORD *)uint64_t v73 = v127.n128_u32[0];
          swift_bridgeObjectRetain(v74);
          *(void *)(v73 + 4) = sub_1003F11D4(v135, v74, &v143);
          swift_bridgeObjectRelease();
          *(_WORD *)(v73 + 12) = 2080;
          if (v41) {
            unsigned int v76 = v140;
          }
          else {
            unsigned int v76 = 0x206C696E20LL;
          }
          if (v41) {
            uint64_t v77 = v41;
          }
          else {
            uint64_t v77 = 0xE500000000000000LL;
          }
          swift_bridgeObjectRetain(v41);
          *(void *)(v73 + 14) = sub_1003F11D4(v76, v77, &v143);
          swift_bridgeObjectRelease_n(v41, 2LL);
          swift_bridgeObjectRelease_n(v72, 2LL);
          swift_bridgeObjectRelease_n(v74, 2LL);
          swift_bridgeObjectRelease_n(v142, 2LL);
          swift_bridgeObjectRelease();
          *(_WORD *)(v73 + 22) = 2048;
          *(double *)(v73 + 24) = v66;
          _os_log_impl( (void *)&_mh_execute_header,  v69,  v70,  "LabelledLocations %s %s Label Distance %f",  (uint8_t *)v73,  0x20u);
          swift_arrayDestroy(v75, 2LL, (char *)&type metadata for Any + 8);
          uint64_t v78 = v75;
          unint64_t v37 = v74;
          swift_slowDealloc(v78, -1LL, -1LL);
          __int128 v64 = v130;
          swift_slowDealloc(v73, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v41, 2LL);
          swift_bridgeObjectRelease_n(v58, 2LL);
          swift_bridgeObjectRelease_n(v37, 2LL);
          swift_bridgeObjectRelease_n(v67, 2LL);
        }

        int64_t v32 = (uint64_t)v141;
        unint64_t v24 = v132;
        if (v66 > v26)
        {

          goto LABEL_9;
        }

        id v130 = v64;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v18 = v117;
        swift_beginAccess(v117, &v146, 1LL, 0LL);
        id v82 = v116;
        uint64_t v83 = &v18[*(int *)(v116 + 64)];
        *(void *)uint64_t v83 = v135;
        *((void *)v83 + 1) = v37;
        swift_bridgeObjectRelease();
        uint64_t v84 = (uint64_t)v24;
        uint64_t v85 = v115;
        uint64_t v86 = sub_10001DC4C(v84, (uint64_t)v115, type metadata accessor for SecureLocation);
        uint64_t v87 = (os_log_s *)Logger.logObject.getter(v86);
        uint64_t v88 = static os_log_type_t.default.getter(v87);
        uint64_t v89 = v88;
        if (os_log_type_enabled(v87, v88))
        {
          uint64_t v90 = swift_slowAlloc(22LL, -1LL);
          LODWORD(v142) = v89;
          id v91 = v90;
          uint64_t v140 = swift_slowAlloc(64LL, -1LL);
          id v145 = v140;
          *(_DWORD *)id v91 = v110.n128_u32[0];
          id v92 = (uint64_t *)&v18[*(int *)(v82 + 64)];
          uint64_t v93 = v92[1];
          uint64_t v143 = *v92;
          uint64_t v144 = v93;
          swift_bridgeObjectRetain(v93);
          unint64_t v94 = sub_100004AEC(&qword_1009A34B0);
          uint64_t v95 = String.init<A>(describing:)(&v143, v94);
          uint64_t v143 = sub_1003F11D4(v95, v96, &v145);
          uint64_t v97 = v111;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v111, v91 + 4, v91 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v91 + 12) = 2080;
          NSString v98 = *v85;
          id v99 = v85[1];
          swift_bridgeObjectRetain(v99);
          uint64_t v143 = sub_1003F11D4(v98, v99, &v145);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v97, v91 + 14, v91 + 22);
          swift_bridgeObjectRelease();
          sub_100018C68((uint64_t)v85, type metadata accessor for SecureLocation);
          _os_log_impl( (void *)&_mh_execute_header,  v87,  (os_log_type_t)v142,  "LabelledLocations Adding label %s to location %s",  (uint8_t *)v91,  0x16u);
          NSString v100 = v140;
          swift_arrayDestroy(v140, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v100, -1LL, -1LL);
          swift_slowDealloc(v91, -1LL, -1LL);
        }

        else
        {
          sub_100018C68((uint64_t)v85, type metadata accessor for SecureLocation);
        }

        uint64_t v15 = v118;
        unint64_t v24 = v132;
LABEL_49:
        uint64_t v30 = v124;
LABEL_50:
        swift_beginAccess(v18, v147, 0LL, 0LL);
        sub_10001DC4C((uint64_t)v18, (uint64_t)v15, type metadata accessor for SecureLocation);
        if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0) {
          uint64_t v30 = (os_log_s *)sub_1004C6004(0, *((void *)v30 + 2) + 1LL, 1, (unint64_t)v30);
        }
        id v102 = *((void *)v30 + 2);
        id v101 = *((void *)v30 + 3);
        if (v102 >= v101 >> 1) {
          uint64_t v30 = (os_log_s *)sub_1004C6004(v101 > 1, v102 + 1, 1, (unint64_t)v30);
        }
        int v103 = v126 + 1;
        *((void *)v30 + 2) = v102 + 1;
        unint64_t v27 = v119;
        id v104 = (uint64_t)v30 + v121 + v102 * v119;
        int64_t v29 = v103;
        sub_10002218C((uint64_t)v15, v104, type metadata accessor for SecureLocation);
        sub_100018C68((uint64_t)v24, type metadata accessor for SecureLocation);
        sub_100018C68((uint64_t)v18, type metadata accessor for SecureLocation);
        if (v29 == v122)
        {
          swift_bridgeObjectRelease();
          goto LABEL_62;
        }
      }
    }

    uint64_t v30 = (os_log_s *)_swiftEmptyArrayStorage;
LABEL_62:
    sub_100333FCC(v30, v112, v113);
    swift_bridgeObjectRelease();
  }

  else
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v105 = type metadata accessor for Logger(0LL);
    uint64_t v106 = sub_10000A720(v105, (uint64_t)qword_100A2AE08);
    uint64_t v107 = (os_log_s *)Logger.logObject.getter(v106);
    unint64_t v108 = static os_log_type_t.info.getter(v107);
    if (os_log_type_enabled(v107, v108))
    {
      char v109 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)char v109 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v107,  v108,  "LabelledLocations - No labels - nothing to resolve",  v109,  2u);
      swift_slowDealloc(v109, -1LL, -1LL);
    }

    sub_100333FCC(v114, v112, v113);
  }

        __int128 v64 = [objc_allocWithZone(CLLocation) initWithLatitude:v38 longitude:v39];
        uint64_t v142 = [objc_allocWithZone(CLLocation) initWithLatitude:v24[3] longitude:v24[2]];
        objc_msgSend(v64, "distanceFromLocation:");
        __int128 v66 = v65;
        __int128 v67 = v151;
        swift_bridgeObjectRetain_n(v151, 2LL);
        swift_bridgeObjectRetain_n(v37, 2LL);
        swift_bridgeObjectRetain_n(v58, 2LL);
        swift_bridgeObjectRetain_n(v41, 2LL);
        __int128 v69 = (os_log_s *)Logger.logObject.getter(v68);
        __int128 v70 = static os_log_type_t.info.getter(v69);
        if (os_log_type_enabled(v69, v70))
        {
          __int128 v71 = swift_slowAlloc(32LL, -1LL);
          uint64_t v139 = v64;
          uint64_t v72 = v58;
          uint64_t v73 = v71;
          uint64_t v74 = v37;
          uint64_t v75 = (id)swift_slowAlloc(64LL, -1LL);
          uint64_t v152 = (uint64_t)v75;
          *(_DWORD *)uint64_t v73 = v136.n128_u32[0];
          swift_bridgeObjectRetain(v74);
          *(void *)(v73 + 4) = sub_1003F11D4(v144, v74, &v152);
          swift_bridgeObjectRelease();
          *(_WORD *)(v73 + 12) = 2080;
          if (v41) {
            unsigned int v76 = v149;
          }
          else {
            unsigned int v76 = 0x206C696E20LL;
          }
          if (v41) {
            uint64_t v77 = v41;
          }
          else {
            uint64_t v77 = 0xE500000000000000LL;
          }
          swift_bridgeObjectRetain(v41);
          *(void *)(v73 + 14) = sub_1003F11D4(v76, v77, &v152);
          swift_bridgeObjectRelease_n(v41, 2LL);
          swift_bridgeObjectRelease_n(v72, 2LL);
          swift_bridgeObjectRelease_n(v74, 2LL);
          swift_bridgeObjectRelease_n(v151, 2LL);
          swift_bridgeObjectRelease();
          *(_WORD *)(v73 + 22) = 2048;
          *(double *)(v73 + 24) = v66;
          _os_log_impl( (void *)&_mh_execute_header,  v69,  v70,  "LabelledLocations %s %s Label Distance %f",  (uint8_t *)v73,  0x20u);
          swift_arrayDestroy(v75, 2LL, (char *)&type metadata for Any + 8);
          uint64_t v78 = v75;
          unint64_t v37 = v74;
          swift_slowDealloc(v78, -1LL, -1LL);
          __int128 v64 = v139;
          swift_slowDealloc(v73, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v41, 2LL);
          swift_bridgeObjectRelease_n(v58, 2LL);
          swift_bridgeObjectRelease_n(v37, 2LL);
          swift_bridgeObjectRelease_n(v67, 2LL);
        }

        int64_t v32 = (uint64_t)v150;
        unint64_t v24 = v141;
        if (v66 > v26)
        {

          goto LABEL_9;
        }

        uint64_t v139 = v64;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v18 = v126;
        swift_beginAccess(v126, &v155, 1LL, 0LL);
        id v82 = v125;
        uint64_t v83 = &v18[*(int *)(v125 + 64)];
        *(void *)uint64_t v83 = v144;
        *((void *)v83 + 1) = v37;
        swift_bridgeObjectRelease();
        uint64_t v84 = (uint64_t)v24;
        uint64_t v85 = v124;
        uint64_t v86 = sub_10001DC4C(v84, (uint64_t)v124, type metadata accessor for SecureLocation);
        uint64_t v87 = (os_log_s *)Logger.logObject.getter(v86);
        uint64_t v88 = static os_log_type_t.default.getter(v87);
        uint64_t v89 = v88;
        if (os_log_type_enabled(v87, v88))
        {
          uint64_t v90 = swift_slowAlloc(22LL, -1LL);
          LODWORD(v151) = v89;
          id v91 = v90;
          uint64_t v149 = swift_slowAlloc(64LL, -1LL);
          uint64_t v154 = v149;
          *(_DWORD *)id v91 = v119.n128_u32[0];
          id v92 = (uint64_t *)&v18[*(int *)(v82 + 64)];
          uint64_t v93 = v92[1];
          uint64_t v152 = *v92;
          uint64_t v153 = v93;
          swift_bridgeObjectRetain(v93);
          unint64_t v94 = sub_100004AEC(&qword_1009A34B0);
          uint64_t v95 = String.init<A>(describing:)(&v152, v94);
          uint64_t v152 = sub_1003F11D4(v95, v96, &v154);
          uint64_t v97 = v120;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v120, v91 + 4, v91 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v91 + 12) = 2080;
          NSString v98 = *v85;
          id v99 = v85[1];
          swift_bridgeObjectRetain(v99);
          uint64_t v152 = sub_1003F11D4(v98, v99, &v154);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v97, v91 + 14, v91 + 22);
          swift_bridgeObjectRelease();
          sub_100018C68((uint64_t)v85, type metadata accessor for SecureLocation);
          _os_log_impl( (void *)&_mh_execute_header,  v87,  (os_log_type_t)v151,  "LabelledLocations Adding label %s to location %s",  (uint8_t *)v91,  0x16u);
          NSString v100 = v149;
          swift_arrayDestroy(v149, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v100, -1LL, -1LL);
          swift_slowDealloc(v91, -1LL, -1LL);
        }

        else
        {
          sub_100018C68((uint64_t)v85, type metadata accessor for SecureLocation);
        }

        uint64_t v15 = v127;
        unint64_t v24 = v141;
LABEL_49:
        uint64_t v30 = v133;
LABEL_50:
        swift_beginAccess(v18, v156, 0LL, 0LL);
        sub_10001DC4C((uint64_t)v18, (uint64_t)v15, type metadata accessor for SecureLocation);
        if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0) {
          uint64_t v30 = (void *)sub_1004C6004(0, v30[2] + 1LL, 1, (unint64_t)v30);
        }
        id v102 = v30[2];
        id v101 = v30[3];
        if (v102 >= v101 >> 1) {
          uint64_t v30 = (void *)sub_1004C6004(v101 > 1, v102 + 1, 1, (unint64_t)v30);
        }
        int v103 = v135 + 1;
        void v30[2] = v102 + 1;
        unint64_t v27 = v128;
        id v104 = (uint64_t)v30 + v130 + v102 * v128;
        int64_t v29 = v103;
        sub_10002218C((uint64_t)v15, v104, type metadata accessor for SecureLocation);
        sub_100018C68((uint64_t)v24, type metadata accessor for SecureLocation);
        sub_100018C68((uint64_t)v18, type metadata accessor for SecureLocation);
        if (v29 == v131)
        {
          swift_bridgeObjectRelease();
          goto LABEL_64;
        }
      }
    }

    uint64_t v30 = _swiftEmptyArrayStorage;
LABEL_64:
    sub_1003221C4((uint64_t)v30, 1);
    sub_10031E6C4();
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v114 = type metadata accessor for Logger(0LL);
    uint64_t v115 = sub_10000A720(v114, (uint64_t)qword_100A2AE08);
    uint64_t v116 = (os_log_s *)Logger.logObject.getter(v115);
    uint64_t v117 = static os_log_type_t.default.getter(v116);
    if (os_log_type_enabled(v116, v117))
    {
      uint64_t v118 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v118 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v116,  v117,  "LabelledLocations: Completed updating locations with updated labels",  v118,  2u);
      swift_slowDealloc(v118, -1LL, -1LL);
    }

    Transaction.capture()();
    swift_bridgeObjectRelease();
  }

  else
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v105 = type metadata accessor for Logger(0LL);
    uint64_t v106 = sub_10000A720(v105, (uint64_t)qword_100A2AE08);
    uint64_t v107 = (os_log_s *)Logger.logObject.getter(v106);
    unint64_t v108 = static os_log_type_t.info.getter(v107);
    if (os_log_type_enabled(v107, v108))
    {
      char v109 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)char v109 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v107,  v108,  "LabelledLocations - No labels - nothing to resolve",  v109,  2u);
      swift_slowDealloc(v109, -1LL, -1LL);
    }

    sub_1003221C4(v123, 1);
    sub_10031E6C4();
    uint64_t v111 = (os_log_s *)Logger.logObject.getter(v110);
    id v112 = static os_log_type_t.default.getter(v111);
    if (os_log_type_enabled(v111, v112))
    {
      id v113 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v113 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v111,  v112,  "LabelledLocations: Completed updating locations with updated labels",  v113,  2u);
      swift_slowDealloc(v113, -1LL, -1LL);
    }

    Transaction.capture()();
  }

  __break(1u);
}

      __break(1u);
LABEL_26:
      if (v21 < 0) {
        uint64_t v33 = v21;
      }
      else {
        uint64_t v33 = v21 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v21);
    }

    sub_1000A6F30(a1);
    return (void *)v2;
  }

  swift_release(a2);
  return &_swiftEmptySetSingleton;
}

      int v3 = (v9 - 1) & v9;
      uint64_t v7 = __clz(__rbit64(v9)) + (v4 << 6);
    }

    uint64_t v11 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v7);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    uint64_t v14 = String.lowercased()();
    swift_bridgeObjectRetain(v13);
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    unint64_t v17 = sub_10030CF14(v14._countAndFlagsBits, (uint64_t)v14._object);
    uint64_t v18 = _swiftEmptyDictionarySingleton[2];
    uint64_t v19 = (v16 & 1) == 0;
    uint64_t v20 = v18 + v19;
    if (__OFADD__(v18, v19)) {
      break;
    }
    int64_t v21 = v16;
    if (_swiftEmptyDictionarySingleton[3] >= v20)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v16 & 1) != 0) {
          goto LABEL_4;
        }
      }

      else
      {
        sub_100062930();
        if ((v21 & 1) != 0) {
          goto LABEL_4;
        }
      }
    }

    else
    {
      sub_10004B4C8(v20, isUniquelyReferenced_nonNull_native);
      uint64_t v22 = sub_10030CF14(v14._countAndFlagsBits, (uint64_t)v14._object);
      if ((v21 & 1) != (v23 & 1)) {
        goto LABEL_42;
      }
      unint64_t v17 = v22;
      if ((v21 & 1) != 0)
      {
LABEL_4:
        uint64_t v5 = (void *)(_swiftEmptyDictionarySingleton[7] + 16 * v17);
        swift_bridgeObjectRelease();
        void *v5 = v12;
        v5[1] = v13;
        goto LABEL_5;
      }
    }

    _swiftEmptyDictionarySingleton[(v17 >> 6) + 8] |= 1LL << v17;
    *(Swift::String *)(_swiftEmptyDictionarySingleton[6] + 16 * v17) = v14;
    unint64_t v24 = (void *)(_swiftEmptyDictionarySingleton[7] + 16 * v17);
    *unint64_t v24 = v12;
    v24[1] = v13;
    unint64_t v25 = _swiftEmptyDictionarySingleton[2];
    int64_t v26 = __OFADD__(v25, 1LL);
    unint64_t v27 = v25 + 1;
    if (v26) {
      goto LABEL_39;
    }
    _swiftEmptyDictionarySingleton[2] = v27;
    swift_bridgeObjectRetain(v14._object);
LABEL_5:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

    sub_100015794((uint64_t)&v630[v629[58]], (uint64_t *)&unk_10099D720);
    if ((v23 & 0x100000000000000LL) == 0)
    {
LABEL_15:
      if ((v23 & 0x8000000000000000LL) != 0) {
        goto LABEL_212;
      }
LABEL_27:
      if ((v29 & 0x1000) == 0) {
        goto LABEL_213;
      }
LABEL_28:
      swift_bridgeObjectRelease();
      if ((v26 & 1) != 0) {
        goto LABEL_214;
      }
LABEL_29:
      if (!(_DWORD)v27) {
        goto LABEL_215;
      }
LABEL_30:
      swift_bridgeObjectRelease();
      if ((v28 & 1) != 0) {
        goto LABEL_216;
      }
LABEL_31:
      if (!(_DWORD)v30) {
        goto LABEL_217;
      }
LABEL_32:
      swift_bridgeObjectRelease();
      if ((v31 & 1) != 0) {
        goto LABEL_218;
      }
      goto LABEL_33;
    }

      id v104 = *(void *)&v161[0];
      type metadata accessor for Transaction(0LL);
      uint64_t v105 = (void *)swift_allocObject(&unk_10095ABD0, 40LL, 7LL);
      v105[2] = v104;
      v105[3] = v55;
      v105[4] = v156;
      swift_bridgeObjectRetain(v104);
      swift_retain();
      swift_retain();
      static Transaction.asyncTask(name:block:)( "SimpleBeaconUpdate-receivedSimpleBeaconRemovals",  47LL,  2LL,  &unk_1009AE638,  v105);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v164);
    }

    double v162 = 0LL;
    memset(v161, 0, sizeof(v161));
    sub_100015794((uint64_t)v161, (uint64_t *)&unk_1009A9C40);
    __int128 v57 = v157;
    if ((v157 & 0x280) != 0)
    {
      sub_100013044(v39, (uint64_t)&v164);
      uint64_t v58 = v155;
      uint64_t v59 = swift_dynamicCast(v18, &v164, v40, v155, 6LL);
      __int128 v60 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
      if ((v59 & 1) != 0)
      {
        v60(v18, 0LL, 1LL, v58);
        __int128 v61 = v153;
        sub_10002218C((uint64_t)v18, v153, type metadata accessor for BeaconNamingRecord);
        __int128 v62 = v159;
        if (qword_10099B490 != -1) {
          swift_once(&qword_10099B490, sub_10043B5F4);
        }
        __int128 v63 = type metadata accessor for Logger(0LL);
        __int128 v64 = sub_10000A720(v63, (uint64_t)qword_100A2AA68);
        __int128 v65 = (os_log_s *)Logger.logObject.getter(v64);
        __int128 v66 = static os_log_type_t.default.getter(v65);
        if (os_log_type_enabled(v65, v66))
        {
          __int128 v67 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)__int128 v67 = 0;
          _os_log_impl((void *)&_mh_execute_header, v65, v66, "Updating sessions for name record changes.", v67, 2u);
          swift_slowDealloc(v67, -1LL, -1LL);
        }

        __int128 v68 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
        __int128 v69 = v160;
        __int128 v70 = *(unsigned __int8 *)(v160 + 80);
        __int128 v71 = (v70 + 32) & ~v70;
        uint64_t v72 = swift_allocObject(v68, v71 + *(void *)(v160 + 72), v70 | 7);
        *(_OWORD *)(v72 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
        uint64_t v73 = v72 + v71;
        uint64_t v74 = *(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 16);
        uint64_t v75 = v158;
        v74(v72 + v71, v61 + *(int *)(v58 + 24), v158);
        unsigned int v76 = sub_100768C98(v72);
        swift_setDeallocating(v72);
        swift_arrayDestroy(v73, 1LL, v75);
        swift_deallocClassInstance(v72, 32LL, 7LL);
        type metadata accessor for Transaction(0LL);
        uint64_t v77 = (void *)swift_allocObject(&unk_10095ABA8, 48LL, 7LL);
        v77[2] = v156;
        v77[3] = v76;
        v77[4] = 0LL;
        v77[5] = v62;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain(v76);
        static Transaction.asyncTask(name:block:)( "SimpleBeaconUpdate-receivedSimpleBeacons",  40LL,  2LL,  &unk_1009AE628,  v77);
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v78 = type metadata accessor for BeaconNamingRecord;
        return sub_100018C68(v61, v78);
      }

      v60(v18, 1LL, 1LL, v58);
      sub_100015794((uint64_t)v18, &qword_1009AE490);
      uint64_t v79 = v159;
      if ((v57 & 0x200) != 0)
      {
        sub_100013044(v39, (uint64_t)&v164);
        uint64_t v81 = (uint64_t)v151;
        id v82 = v152;
        uint64_t v83 = swift_dynamicCast(v151, &v164, v40, v152, 6LL);
        uint64_t v84 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v150 + 56);
        if (v83)
        {
          v84(v81, 0LL, 1LL, v82);
          __int128 v61 = v146;
          sub_10002218C(v81, v146, type metadata accessor for LostModeRecord);
          if (qword_10099B490 != -1) {
            swift_once(&qword_10099B490, sub_10043B5F4);
          }
          uint64_t v85 = type metadata accessor for Logger(0LL);
          uint64_t v86 = sub_10000A720(v85, (uint64_t)qword_100A2AA68);
          uint64_t v87 = (os_log_s *)Logger.logObject.getter(v86);
          uint64_t v88 = static os_log_type_t.default.getter(v87);
          if (os_log_type_enabled(v87, v88))
          {
            uint64_t v89 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v89 = 0;
            _os_log_impl((void *)&_mh_execute_header, v87, v88, "Updating sessions for Lost Mode changes.", v89, 2u);
            swift_slowDealloc(v89, -1LL, -1LL);
          }

          uint64_t v90 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
          id v91 = v160;
          id v92 = *(unsigned __int8 *)(v160 + 80);
          uint64_t v93 = (v92 + 32) & ~v92;
          unint64_t v94 = swift_allocObject(v90, v93 + *(void *)(v160 + 72), v92 | 7);
          *(_OWORD *)(v94 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
          uint64_t v95 = v94 + v93;
          uint64_t v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 16);
          uint64_t v97 = v158;
          v96(v94 + v93, v61 + *(int *)(v82 + 24), v158);
          NSString v98 = sub_100768C98(v94);
          swift_setDeallocating(v94);
          swift_arrayDestroy(v95, 1LL, v97);
          swift_deallocClassInstance(v94, 32LL, 7LL);
          type metadata accessor for Transaction(0LL);
          id v99 = (void *)swift_allocObject(&unk_10095AB80, 48LL, 7LL);
          v99[2] = v156;
          v99[3] = v98;
          v99[4] = 0LL;
          v99[5] = v79;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain(v98);
          static Transaction.asyncTask(name:block:)( "SimpleBeaconUpdate-receivedSimpleBeacons",  40LL,  2LL,  &unk_1009AE620,  v99);
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t v78 = type metadata accessor for LostModeRecord;
        }

        else
        {
          v84(v81, 1LL, 1LL, v82);
          sub_100015794(v81, &qword_1009AA840);
          sub_100013044(v39, (uint64_t)&v164);
          uint64_t v106 = (uint64_t)v144;
          uint64_t v107 = v145;
          unint64_t v108 = swift_dynamicCast(v144, &v164, v40, v145, 6LL);
          char v109 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v143 + 56);
          if (v108)
          {
            v109(v106, 0LL, 1LL, v107);
            __int128 v61 = v141;
            sub_10002218C(v106, v141, type metadata accessor for SafeLocation);
            if (qword_10099B490 != -1) {
              swift_once(&qword_10099B490, sub_10043B5F4);
            }
            char v110 = type metadata accessor for Logger(0LL);
            uint64_t v111 = sub_10000A720(v110, (uint64_t)qword_100A2AA68);
            id v112 = (os_log_s *)Logger.logObject.getter(v111);
            id v113 = static os_log_type_t.default.getter(v112);
            if (os_log_type_enabled(v112, v113))
            {
              uint64_t v114 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
              *(_WORD *)uint64_t v114 = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v112,  v113,  "Updating sessions for Safe Location changes.",  v114,  2u);
              swift_slowDealloc(v114, -1LL, -1LL);
            }

            swift_bridgeObjectRetain(*(void *)(v61 + *(int *)(v107 + 52)));
            uint64_t v116 = sub_1006F1060(v115);
            swift_bridgeObjectRelease();
            type metadata accessor for Transaction(0LL);
            uint64_t v117 = (void *)swift_allocObject(&unk_10095AB58, 48LL, 7LL);
            v117[2] = v156;
            v117[3] = v116;
            v117[4] = 0LL;
            v117[5] = v79;
            swift_retain();
            swift_retain();
            swift_bridgeObjectRetain(v116);
            static Transaction.asyncTask(name:block:)( "SimpleBeaconUpdate-receivedSimpleBeacons",  40LL,  2LL,  &unk_1009AE618,  v117);
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            uint64_t v78 = type metadata accessor for SafeLocation;
          }

          else
          {
            v109(v106, 1LL, 1LL, v107);
            sub_100015794(v106, (uint64_t *)&unk_1009AF740);
            sub_100013044(v39, (uint64_t)&v164);
            uint64_t v118 = (uint64_t)v140;
            uint64_t v119 = found;
            char v120 = swift_dynamicCast(v140, &v164, v40, found, 6LL);
            uint64_t v121 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v138 + 56);
            if ((v120 & 1) == 0)
            {
              v121(v118, 1LL, 1LL, v119);
              swift_release();
              return sub_100015794(v118, &qword_1009AA900);
            }

            v121(v118, 0LL, 1LL, v119);
            __int128 v61 = v139;
            sub_10002218C(v118, v139, type metadata accessor for NotifyWhenFoundRecord);
            if (qword_10099B490 != -1) {
              swift_once(&qword_10099B490, sub_10043B5F4);
            }
            uint64_t v122 = type metadata accessor for Logger(0LL);
            uint64_t v123 = sub_10000A720(v122, (uint64_t)qword_100A2AA68);
            uint64_t v124 = (os_log_s *)Logger.logObject.getter(v123);
            uint64_t v125 = static os_log_type_t.default.getter(v124);
            if (os_log_type_enabled(v124, v125))
            {
              uint64_t v126 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
              *(_WORD *)uint64_t v126 = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v124,  v125,  "Updating sessions for NotifyWhenFound deleted.",  v126,  2u);
              swift_slowDealloc(v126, -1LL, -1LL);
            }

            uint64_t v127 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
            uint64_t v128 = v160;
            uint64_t v129 = *(unsigned __int8 *)(v160 + 80);
            id v130 = (v129 + 32) & ~v129;
            uint64_t v131 = swift_allocObject(v127, v130 + *(void *)(v160 + 72), v129 | 7);
            *(_OWORD *)(v131 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
            uint64_t v132 = v131 + v130;
            uint64_t v133 = *(void (**)(uint64_t, uint64_t, uint64_t))(v128 + 16);
            uint64_t v134 = v158;
            v133(v131 + v130, v61 + *(int *)(v119 + 24), v158);
            uint64_t v135 = sub_100768C98(v131);
            swift_setDeallocating(v131);
            swift_arrayDestroy(v132, 1LL, v134);
            swift_deallocClassInstance(v131, 32LL, 7LL);
            type metadata accessor for Transaction(0LL);
            uint64_t v136 = (void *)swift_allocObject(&unk_10095AB30, 48LL, 7LL);
            v136[2] = v156;
            v136[3] = v135;
            v136[4] = 0LL;
            v136[5] = v79;
            swift_retain();
            swift_retain();
            swift_bridgeObjectRetain(v135);
            static Transaction.asyncTask(name:block:)( "SimpleBeaconUpdate-receivedSimpleBeacons",  40LL,  2LL,  &unk_1009AE610,  v136);
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            uint64_t v78 = type metadata accessor for NotifyWhenFoundRecord;
          }
        }

        return sub_100018C68(v61, v78);
      }
    }

    return swift_release();
  }

  return result;
}

  uint64_t v2 = (void *)v219;
  uint64_t v81 = v248;
  while (1)
  {
    id v82 = v0[136];
    uint64_t v83 = v0[143] + 1LL;
    uint64_t v5 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2);
    if (v83 == v82)
    {
      swift_bridgeObjectRelease();
      while (1)
      {
        uint64_t v84 = v0[142];
        uint64_t v85 = v0[141];
        swift_retain_n(v0[138], 2LL);
        swift_bridgeObjectRetain_n(v85, 2LL);
        uint64_t v86 = swift_bridgeObjectRetain_n(v84, 2LL);
        uint64_t v87 = (os_log_s *)Logger.logObject.getter(v86);
        uint64_t v88 = static os_log_type_t.default.getter(v87);
        if (os_log_type_enabled(v87, v88))
        {
          uint64_t v89 = swift_slowAlloc(22LL, -1LL);
          uint64_t v90 = swift_slowAlloc(32LL, -1LL);
          *uint64_t v244 = v90;
          *(_DWORD *)uint64_t v89 = 134218242;
          swift_beginAccess(v81, v220, 0LL, 0LL);
          id v91 = *v81;
          if ((unint64_t)*v81 >> 62)
          {
            if (v91 < 0) {
              uint64_t v140 = *v81;
            }
            else {
              uint64_t v140 = v91 & 0xFFFFFFFFFFFFFF8LL;
            }
            swift_bridgeObjectRetain(v91);
            id v92 = _CocoaArrayWrapper.endIndex.getter(v140);
            swift_bridgeObjectRelease();
          }

          else
          {
            id v92 = *(void *)((v91 & 0xFFFFFFFFFFFFF8LL) + 0x10);
          }

          uint64_t v93 = v0[142];
          unint64_t v94 = v0[141];
          uint64_t v95 = v0[140];
          uint64_t v96 = v0[138];
          *(void *)(v89 + 4) = v92;
          *(_WORD *)(v89 + 12) = 2082;
          if (v94) {
            uint64_t v97 = v95;
          }
          else {
            uint64_t v97 = 0x6E776F6E6B6E75LL;
          }
          if (v94) {
            NSString v98 = v94;
          }
          else {
            NSString v98 = 0xE700000000000000LL;
          }
          swift_bridgeObjectRetain(v94);
          *(void *)(v89 + 14) = sub_1003F11D4(v97, v98, v244);
          swift_bridgeObjectRelease_n(v93, 2LL);
          swift_bridgeObjectRelease_n(v94, 2LL);
          swift_release_n(v96, 2LL);
          swift_bridgeObjectRelease();
          _os_log_impl( (void *)&_mh_execute_header,  v87,  v88,  "receivedSimpleBeaconUpdates - updating beacons (count) %ld to bundle: %{public}s.",  (uint8_t *)v89,  0x16u);
          swift_arrayDestroy(v90, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v90, -1LL, -1LL);
          swift_slowDealloc(v89, -1LL, -1LL);

          uint64_t v81 = v248;
        }

        else
        {
          id v99 = v0[142];
          NSString v100 = v0[141];
          id v101 = v0[138];

          swift_bridgeObjectRelease_n(v99, 2LL);
          swift_release_n(v101, 2LL);
          swift_bridgeObjectRelease_n(v100, 2LL);
        }

        id v102 = swift_retain();
        XPCSession.proxy.getter(v102);
        int v103 = swift_release();
        id v104 = (void *)v0[63];
        if (v104)
        {
          swift_beginAccess(v81, v223, 0LL, 0LL);
          uint64_t v105 = *v81;
          sub_100022898(0LL, &qword_1009AE528, &OBJC_CLASS___SPInternalSimpleBeacon_ptr);
          swift_bridgeObjectRetain(v105);
          isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v104 receivedSimpleBeaconUpdates:isa];

          int v103 = swift_unknownObjectRelease(v104);
        }

        uint64_t v107 = v0[125];
        unint64_t v108 = v0[105];
        char v109 = v0[100];
        char v110 = v0[99];
        double v269 = v0[98];
        uint64_t v111 = v0[97];
        id v112 = v0[96];
        id v113 = v0[87];
        uint64_t v114 = v272[86];
        uint64_t v115 = v272[85];
        ContinuousClock.now.getter(v103);
        uint64_t v116 = *(void (**)(uint64_t, uint64_t, uint64_t))(v114 + 16);
        uint64_t v0 = v272;
        v116(v113, v107, v115);
        uint64_t v117 = *(void (**)(uint64_t, uint64_t, uint64_t))(v111 + 16);
        v117(v110, v108, v112);
        uint64_t v118 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v117)(v269, v109, v112);
        uint64_t v119 = (os_log_s *)Logger.logObject.getter(v118);
        char v120 = static os_log_type_t.default.getter(v119);
        uint64_t v121 = os_log_type_enabled(v119, v120);
        uint64_t v122 = v272[105];
        uint64_t v2 = (void *)v272[100];
        uint64_t v123 = v272[99];
        uint64_t v124 = v272[98];
        double v252 = v272[97];
        uint64_t v125 = v272[96];
        __int16 v1 = v272[87];
        double v261 = v272[86];
        uint64_t v270 = v272[85];
        if (v121)
        {
          uint64_t v242 = v272[105];
          uint64_t v126 = v272[84];
          uint64_t v127 = v272[83];
          uint64_t v230 = v272[82];
          char v239 = v272[87];
          __int16 v1 = swift_slowAlloc(12LL, -1LL);
          double v236 = v2;
          uint64_t v2 = (void *)swift_slowAlloc(32LL, -1LL);
          v273[0] = (uint64_t)v2;
          *(_DWORD *)__int16 v1 = 136446210;
          static Duration.UnitsFormatStyle.Unit.milliseconds.getter(v2);
          uint64_t v128 = sub_100015C48( &qword_1009AE520,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant,  (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
          uint64_t v129 = static Duration.description<A>(_:_:units:)(v123, v124, v126, v125, v128);
          uint64_t v226 = v120;
          uint64_t v131 = v130;
          uint64_t v132 = *(void (**)(uint64_t, uint64_t))(v127 + 8);
          uint64_t v0 = v272;
          v132(v126, v230);
          *(void *)(v1 + 4) = sub_1003F11D4(v129, v131, v273);
          swift_bridgeObjectRelease();
          uint64_t v9 = *(void **)(v252 + 8);
          ((void (*)(uint64_t, uint64_t))v9)(v123, v125);
          ((void (*)(uint64_t, uint64_t))v9)(v124, v125);
          _os_log_impl( (void *)&_mh_execute_header,  v119,  v226,  "session processing time: %{public}s",  (uint8_t *)v1,  0xCu);
          swift_arrayDestroy(v2, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v2, -1LL, -1LL);
          swift_slowDealloc(v1, -1LL, -1LL);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();

          (*(void (**)(uint64_t, uint64_t))(v261 + 8))(v239, v270);
          ((void (*)(void *, uint64_t))v9)(v236, v125);
          ((void (*)(uint64_t, uint64_t))v9)(v242, v125);
          swift_bridgeObjectRelease();
          uint64_t v81 = v248;
        }

        else
        {

          uint64_t v9 = *(void **)(v252 + 8);
          ((void (*)(uint64_t, uint64_t))v9)(v123, v125);
          ((void (*)(uint64_t, uint64_t))v9)(v124, v125);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v261 + 8))(v1, v270);
          ((void (*)(void *, uint64_t))v9)(v2, v125);
          ((void (*)(uint64_t, uint64_t))v9)(v122, v125);
          uint64_t v81 = v248;
          swift_bridgeObjectRelease();
        }

        uint64_t v133 = v0[137] + 1LL;
        if (v133 == v0[131])
        {
          swift_bridgeObjectRelease();
          v196 = v0[115];
          uint64_t v197 = v0[114];
          uint64_t v198 = v0[113];
          uint64_t v199 = v0[112];
          uint64_t v200 = v0[111];
          uint64_t v201 = v0[110];
          v202 = v0[109];
          uint64_t v203 = v0[108];
          uint64_t v204 = v0[105];
          double v224 = v0[104];
          *(void *)double v227 = v0[103];
          double v231 = v0[102];
          *(void *)typea = v0[101];
          double v237 = v0[100];
          uint64_t v240 = v0[99];
          int v243 = v0[98];
          int v245 = v0[95];
          double v247 = v0[94];
          double v249 = v0[91];
          double v253 = v0[90];
          double v257 = v0[89];
          uint64_t v262 = v0[88];
          double v265 = v0[87];
          double v271 = v0[84];
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v197 + 8))(v196, v198);
          swift_task_dealloc(v196);
          swift_task_dealloc(v199);
          swift_task_dealloc(v200);
          swift_task_dealloc(v201);
          swift_task_dealloc(v202);
          swift_task_dealloc(v203);
          swift_task_dealloc(v204);
          swift_task_dealloc(v224);
          swift_task_dealloc(*(void *)v227);
          swift_task_dealloc(v231);
          swift_task_dealloc(*(void *)typea);
          swift_task_dealloc(v237);
          swift_task_dealloc(v240);
          swift_task_dealloc(v243);
          swift_task_dealloc(v245);
          swift_task_dealloc(v247);
          swift_task_dealloc(v249);
          swift_task_dealloc(v253);
          swift_task_dealloc(v257);
          swift_task_dealloc(v262);
          swift_task_dealloc(v265);
          swift_task_dealloc(v271);
          return ((uint64_t (*)(void))v0[1])();
        }

        v0[137] = v133;
        uint64_t v134 = v0[121];
        if (v133 >= *(void *)(v134 + 16)) {
          break;
        }
        uint64_t v135 = v0[136];
        uint64_t v136 = (void *)(v134 + 48 * v133);
        int v3 = v136[4];
        v0[138] = v3;
        v0[139] = v136[5];
        v0[140] = v136[6];
        uint64_t v137 = v136[7];
        v0[141] = v137;
        uint64_t v138 = v136[9];
        v0[142] = v138;
        v0[64] = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain(v137);
        swift_bridgeObjectRetain(v138);
        uint64_t v139 = swift_retain();
        ContinuousClock.now.getter(v139);
        if (v135)
        {
          swift_bridgeObjectRetain(v0[130]);
          swift_beginAccess(v81, v217, 0LL, 0LL);
          uint64_t v141 = 0LL;
          uint64_t v2 = (void *)v219;
          goto LABEL_56;
        }
      }

      __break(1u);
      goto LABEL_86;
    }

    uint64_t v141 = v0[143] + 1LL;
LABEL_56:
    v0[143] = v141;
    uint64_t v142 = v0[130];
    if (v141 >= *(void *)(v142 + 16))
    {
      __break(1u);
      goto LABEL_89;
    }

    uint64_t v143 = sub_100013044(v142 + 40 * v141 + 32, (uint64_t)v2);
    ContinuousClock.now.getter(v143);
    uint64_t v144 = v0[35];
    id v145 = v0[36];
    sub_100012ED8(v2, v144);
    uint64_t v146 = v0[93];
    uint64_t v147 = v0[92];
    uint64_t v148 = v0[91];
    sub_100013044((uint64_t)v2, v218);
    uint64_t v149 = sub_100004AEC(&qword_1009B0530);
    uint64_t v150 = swift_dynamicCast(v148, v218, v149, v147, 6LL);
    uint64_t v151 = *(void (**)(uint64_t, uint64_t, uint64_t, void))(v146 + 56);
    if (!v150)
    {
      double v160 = v0[91];
      v151(v160, 1LL, 1LL, v0[92]);
      sub_100015794(v160, (uint64_t *)&unk_1009AE470);
      break;
    }

    uint64_t v152 = *((unsigned int *)v0 + 294);
    uint64_t v153 = v0[95];
    uint64_t v154 = v0[91];
    v151(v154, 0LL, 1LL, v0[92]);
    sub_10002218C(v154, v153, type metadata accessor for SharedBeaconRecord);
    uint64_t My = type metadata accessor for Feature.FindMy(0LL);
    v0[15] = My;
    v0[16] = sub_100015C48( (unint64_t *)&qword_1009B04D0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
    int v3 = (unint64_t)v216;
    uint64_t v156 = sub_10000A7C8(v216);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(My - 8) + 104LL))(v156, v152, My);
    LOBYTE(My) = isFeatureEnabled(_:)(v216);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v216);
    uint64_t v157 = v0[95];
    if ((My & 1) == 0) {
      goto LABEL_27;
    }
    double v158 = *(unsigned __int8 *)(v157 + *(int *)(v0[92] + 64LL));
    sub_10001DC4C(v0[95], v0[94], type metadata accessor for SharedBeaconRecord);
    uint64_t v157 = v0[95];
    double v159 = v0[94];
    if (v158 >= 3)
    {
      sub_100018C68(v159, type metadata accessor for SharedBeaconRecord);
LABEL_27:
      sub_100018C68(v157, type metadata accessor for SharedBeaconRecord);
      goto LABEL_28;
    }

    int v3 = *(unsigned __int8 *)(v159 + *(int *)(v0[92] + 64LL));
    sub_100018C68(v159, type metadata accessor for SharedBeaconRecord);
    sub_100018C68(v157, type metadata accessor for SharedBeaconRecord);
    if ((_DWORD)v3 != 1) {
      break;
    }
LABEL_28:
    (*(void (**)(void, void))(v0[97] + 8LL))(v0[104], v0[96]);
  }

  uint64_t v161 = v0[35];
  int v3 = v0[36];
  sub_100012ED8(v2, v161);
  double v162 = v0[139];
  double v163 = v0[35];
  int v3 = v0[36];
  sub_100012ED8(v2, v163);
  if ((v162 & 0x200) == 0)
  {
    goto LABEL_28;
  }

  double v164 = (*(uint64_t (**)(uint64_t, unint64_t))(v3 + 88))(v163, v3);
  sub_100013044((uint64_t)v2, (uint64_t)v215);
  if ((v164 & 1) == 0)
  {
    uint64_t v165 = v0[40];
    v166 = v0[41];
    sub_100012ED8(v215, v165);
    v167 = (*(uint64_t (**)(uint64_t, uint64_t))(v166 + 112))(v165, v166);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v215);
    char v168 = v214;
    sub_100013044((uint64_t)v2, (uint64_t)v214);
    if ((v167 & 1) != 0) {
      goto LABEL_73;
    }
    uint64_t v169 = v0[25];
    int v3 = v0[26];
    sub_100012ED8(v214, v169);
    uint64_t v170 = (*(uint64_t (**)(uint64_t, unint64_t))(v3 + 96))(v169, v3);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v214);
    if ((v170 & 1) != 0) {
      goto LABEL_74;
    }
    goto LABEL_28;
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v215);
  char v168 = v214;
  sub_100013044((uint64_t)v2, (uint64_t)v214);
LABEL_73:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v168);
LABEL_74:
  uint64_t v171 = v0[142];
  __int16 v1 = v0[64];
  v0[144] = v1;
  char v172 = *(void *)(v171 + 16);
  uint64_t v9 = v213;
  sub_100013044((uint64_t)v2, (uint64_t)v213);
  if (!v172) {
    goto LABEL_87;
  }
  uint64_t v173 = v0[142];
  uint64_t v174 = v0[107];
  uint64_t v176 = v0[10];
  uint64_t v175 = v0[11];
  sub_100012ED8(v213, v176);
  uint64_t v177 = *(void *)(*(void *)(v175 + 8) + 8LL);
  v178 = *(void (**)(uint64_t, uint64_t, __n128))(v177 + 32);
  swift_bridgeObjectRetain(v173);
  uint64_t v179 = swift_bridgeObjectRetain(v1);
  v178(v176, v177, v179);
  uint64_t v180 = v173 + ((*(unsigned __int8 *)(v174 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v174 + 80));
  uint64_t v181 = *(void *)(v174 + 72);
  uint64_t v182 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v174 + 16);
  uint64_t v183 = swift_bridgeObjectRetain(v173);
  while (1)
  {
    uint64_t v184 = v0[107];
    uint64_t v185 = v0[106];
    int v186 = v0[90];
    v182(v186, v180, v185, v183);
    uint64_t v187 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v184 + 56);
    v187(v186, 0LL, 1LL, v185);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v184 + 48))(v186, 1LL, v185) == 1)
    {
      int v193 = v0[107];
      swift_bridgeObjectRelease();
      v192 = *(void (**)(uint64_t, uint64_t))(v193 + 8);
      goto LABEL_81;
    }

    uint64_t v188 = v0[111];
    uint64_t v189 = v0[110];
    uint64_t v190 = v0[107];
    __int16 v1 = v0[106];
    (*(void (**)(uint64_t, void, uint64_t))(v190 + 32))(v189, v0[90], v1);
    uint64_t v191 = sub_100015C48( (unint64_t *)&qword_1009A0A40,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    LOBYTE(v188) = dispatch thunk of static Equatable.== infix(_:_:)(v189, v188, v1, v191);
    v192 = *(void (**)(uint64_t, uint64_t))(v190 + 8);
    v192(v189, v1);
    if ((v188 & 1) != 0) {
      break;
    }
    v180 += v181;
    if (!--v172)
    {
      v187(v0[90], 1LL, 1LL, v0[106]);
      swift_bridgeObjectRelease();
LABEL_81:
      int v3 = v0[104];
      uint64_t v194 = v0[97];
      v195 = v0[96];
      v192(v0[111], v0[106]);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v213);
      (*(void (**)(unint64_t, uint64_t))(v194 + 8))(v3, v195);
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
  }

  uint64_t v206 = v0[111];
  char v207 = v0[106];
  swift_bridgeObjectRelease();
  v192(v206, v207);
  swift_bridgeObjectRelease();
  uint64_t v2 = (void *)v219;
  uint64_t v9 = v213;
LABEL_84:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v9);
  char v208 = (void *)swift_task_alloc(dword_1009AE204);
  v0[145] = v208;
  *char v208 = v0;
  v208[1] = sub_100446C68;
  return sub_100448C50((uint64_t)v2, v0[80], v0[139]);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    unint64_t v27 = sub_100004AEC(&qword_1009B0D28);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(v7, 1LL, 1LL, v27);
    uint64_t v18 = 0LL;
LABEL_26:
    sub_100015750((uint64_t)v7, (uint64_t)v9, &qword_1009B0D20);
    unint64_t v28 = sub_100004AEC(&qword_1009B0D28);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48LL))(v9, 1LL, v28) == 1)
    {
      swift_release(v48);
      uint64_t v40 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
      sub_100004AEC(&qword_1009B0D30);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      unint64_t v42 = String._bridgeToObjectiveC()();
      [v40 setObject:isa forKey:v42];

      return;
    }

    int64_t v29 = *(void *)&v9[*(int *)(v28 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v55, v9, v1);
    if ((unint64_t)v29 >> 62)
    {
      if (v29 < 0) {
        uint64_t v39 = v29;
      }
      else {
        uint64_t v39 = v29 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v29);
      uint64_t v30 = _CocoaArrayWrapper.endIndex.getter(v39);
      swift_bridgeObjectRelease();
      int64_t v54 = v18;
      if (!v30) {
        goto LABEL_4;
      }
    }

    else
    {
      uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      int64_t v54 = v18;
      if (!v30) {
        goto LABEL_4;
      }
    }

    if (v30 < 1)
    {
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }

    unint64_t v31 = 0LL;
    do
    {
      if ((v29 & 0xC000000000000001LL) != 0)
      {
        int64_t v32 = specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v29);
        uint64_t v33 = v32;
      }

      else
      {
        uint64_t v33 = *(void *)(v29 + 8 * v31 + 32);
        int64_t v32 = swift_retain();
      }

      ++v31;
      uint64_t v34 = UUID.uuidString.getter(v32);
      char v36 = v35;
      unint64_t v37 = sub_1004C0C70();
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
      uint64_t v56 = v10;
      sub_10005C518(v37, v34, v36, isUniquelyReferenced_nonNull_native);
      uint64_t v10 = v56;
      swift_release(v33);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    while (v30 != v31);
LABEL_4:
    swift_bridgeObjectRelease();
    uint64_t v2 = v51;
    __int16 v1 = v52;
    (*(void (**)(char *, uint64_t))(v51 + 8))(v55, v52);
    uint64_t v9 = v49;
    uint64_t v7 = v50;
    uint64_t v15 = v54;
  }

  unint64_t v25 = *(void *)(v46 + 8 * v26);
  if (v25)
  {
LABEL_14:
    unint64_t v24 = v26;
LABEL_11:
    uint64_t v18 = (v25 - 1) & v25;
    uint64_t v19 = __clz(__rbit64(v25)) + (v24 << 6);
    uint64_t v53 = v24;
    goto LABEL_7;
  }

  while (1)
  {
    unint64_t v24 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v24 >= v47)
    {
      uint64_t v53 = v44;
      goto LABEL_25;
    }

    unint64_t v25 = *(void *)(v46 + 8 * v24);
    ++v26;
    if (v25) {
      goto LABEL_11;
    }
  }

  __break(1u);
LABEL_26:
  swift_once(&qword_10099B538, sub_1004F3B48);
LABEL_20:
  uint64_t v48 = type metadata accessor for Logger(0LL);
  sub_10000A720(v48, (uint64_t)qword_100A2ACC8);
  uint64_t v49 = v70;
  sub_10001DC4C(v71, v70, type metadata accessor for OwnedBeaconGroup);
  swift_bridgeObjectRetain(v3);
  __int128 v51 = (os_log_s *)Logger.logObject.getter(v50);
  int v52 = static os_log_type_t.default.getter(v51);
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v53 = swift_slowAlloc(32LL, -1LL);
    int64_t v54 = swift_slowAlloc(64LL, -1LL);
    id v91 = v54;
    *(_DWORD *)uint64_t v53 = 141558531;
    id v92 = 1752392040LL;
    v93[0] = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93, v53 + 4, v53 + 12);
    *(_WORD *)(v53 + 12) = 2081;
    unint64_t v55 = type metadata accessor for UUID(0LL);
    uint64_t v56 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    __int128 v57 = dispatch thunk of CustomStringConvertible.description.getter(v55, v56);
    id v92 = sub_1003F11D4(v57, v58, v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93, v53 + 14, v53 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68(v49, type metadata accessor for OwnedBeaconGroup);
    *(_WORD *)(v53 + 22) = 2080;
    swift_bridgeObjectRetain(v3);
    __int128 v60 = Array.description.getter(v59, &type metadata for AccessoryLayoutTemplate);
    __int128 v62 = v61;
    swift_bridgeObjectRelease();
    id v92 = sub_1003F11D4(v60, v62, v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93, v53 + 24, v53 + 32);
    swift_bridgeObjectRelease_n(v3, 2LL);
    uint64_t v19 = v83;
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v51,  v52,  "Group %{private,mask.hash}s multipart layout template: %s",  (uint8_t *)v53,  0x20u);
    __int128 v63 = v91;
    swift_arrayDestroy(v91, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v63, -1LL, -1LL);
    swift_slowDealloc(v53, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v3, 2LL);

    sub_100018C68(v49, type metadata accessor for OwnedBeaconGroup);
  }

  sub_100018C68(v73, type metadata accessor for BeaconProductInfoRecord);
  __int128 v64 = v76;
  __int128 v65 = v69;
  sub_10002218C((uint64_t)v19, v69, type metadata accessor for OwnedBeaconRecord);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v64 + 56))(v65, 0LL, 1LL, v16);
}

    uint64_t v22 = (v30 - 1) & v30;
    int64_t v26 = __clz(__rbit64(v30)) + (v17 << 6);
    goto LABEL_6;
  }

  __break(1u);
  return result;
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
LABEL_26:
  BOOL v46 = 0LL;
  uint64_t v47 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  v43._object = (void *)0x8000000100856440LL;
  v43._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v43);
  _print_unlocked<A, B>(_:_:)( &v48,  &v46,  &type metadata for String,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v44._countAndFlagsBits = 39LL;
  v44._object = (void *)0xE100000000000000LL;
  String.append(_:)(v44);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v46,  v47,  "Swift/NativeDictionary.swift",  28LL,  2LL,  783LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = sub_1000182F0(*(void *)&v26[v27[11]], *(void *)&v26[v27[11] + 8]);
  if ((v31 & 1) != 0)
  {
LABEL_14:
    uint64_t result = sub_100016F9C(*(void *)&v26[v27[12]], *(void *)&v26[v27[12] + 8]);
    if ((v32 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }

  __break(1u);
}

        __break(1u);
        goto LABEL_26;
      }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  swift_release();
  sub_1001B19C0(&v120);
  unint64_t v23 = v90[3];
  uint64_t v119 = v23;
  unint64_t v94 = v23 + 64;
  unint64_t v24 = 1LL << *(_BYTE *)(v23 + 32);
  unint64_t v25 = -1LL;
  if (v24 < 64) {
    unint64_t v25 = ~(-1LL << v24);
  }
  int64_t v26 = v25 & *(void *)(v23 + 64);
  uint64_t v97 = (unint64_t)(v24 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n(v23, 2LL);
  unint64_t v27 = 0LL;
  while (2)
  {
    if (v26)
    {
      unint64_t v28 = __clz(__rbit64(v26));
      v26 &= v26 - 1;
      int64_t v29 = v28 | (v27 << 6);
LABEL_29:
      uint64_t v30 = *(void *)(*(void *)(v23 + 56) + 16 * v29 + 8);
      int v103 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
      uint64_t v111 = v31;
      v32._countAndFlagsBits = 118LL;
      v32._object = (void *)0xE100000000000000LL;
      String.append(_:)(v32);
      v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      unint64_t v35 = v103;
      uint64_t v34 = v111;
      id v104 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      id v112 = v36;
      v37._countAndFlagsBits = 23328LL;
      v37._object = (void *)0xE200000000000000LL;
      String.append(_:)(v37);
      uint64_t v118 = v30;
      v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      v39._countAndFlagsBits = 0x5D736574796220LL;
      v39._object = (void *)0xE700000000000000LL;
      String.append(_:)(v39);
      uint64_t v40 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
      sub_10005C260(v104, v112, v35, v34, v40);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      continue;
    }

    break;
  }

  uint64_t v41 = v27 + 1;
  if (__OFADD__(v27, 1LL)) {
    goto LABEL_99;
  }
  if (v41 < v97)
  {
    unint64_t v42 = *(void *)(v94 + 8 * v41);
    ++v27;
    if (!v42)
    {
      unint64_t v27 = v41 + 1;
      if (v41 + 1 >= v97) {
        goto LABEL_49;
      }
      unint64_t v42 = *(void *)(v94 + 8 * v27);
      if (!v42)
      {
        unint64_t v27 = v41 + 2;
        if (v41 + 2 >= v97) {
          goto LABEL_49;
        }
        unint64_t v42 = *(void *)(v94 + 8 * v27);
        if (!v42)
        {
          unint64_t v27 = v41 + 3;
          if (v41 + 3 >= v97) {
            goto LABEL_49;
          }
          unint64_t v42 = *(void *)(v94 + 8 * v27);
          if (!v42)
          {
            unint64_t v27 = v41 + 4;
            if (v41 + 4 >= v97) {
              goto LABEL_49;
            }
            unint64_t v42 = *(void *)(v94 + 8 * v27);
            if (!v42)
            {
              unint64_t v43 = v41 + 5;
              if (v43 >= v97) {
                goto LABEL_49;
              }
              unint64_t v42 = *(void *)(v94 + 8 * v43);
              if (!v42)
              {
                while (1)
                {
                  unint64_t v27 = v43 + 1;
                  if (__OFADD__(v43, 1LL)) {
                    break;
                  }
                  if (v27 >= v97) {
                    goto LABEL_49;
                  }
                  unint64_t v42 = *(void *)(v94 + 8 * v27);
                  ++v43;
                  if (v42) {
                    goto LABEL_48;
                  }
                }

  __break(1u);
  return result;
}

      if ((a1 & 0x20) != 0) {
        goto LABEL_35;
      }
      goto LABEL_26;
    }

        if ((a1 & 0x40) != 0) {
          goto LABEL_35;
        }
        goto LABEL_26;
      }

  __break(1u);
}

      sub_100018C68(v177, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
      uint64_t v41 = (uint64_t)v173;
      sub_100018C68((uint64_t)v173, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
      if (((v42 ^ v48) & 1) != 0) {
        break;
      }
      int64_t v21 = v185;
      v38 += v186;
      if (v185 == ++v39)
      {
        unint64_t v37 = v185;
        a1 = v178;
        unint64_t v27 = v170;
        int64_t v29 = v172;
        if ((v171 & 1) == 0) {
          goto LABEL_62;
        }
LABEL_48:
        if (v37 >= v29)
        {
          if (v29 < v37)
          {
            uint64_t v170 = v27;
            __int128 v64 = 0LL;
            __int128 v65 = v37;
            __int128 v66 = v186 * (v37 - 1);
            __int128 v67 = v29;
            __int128 v68 = v65 * v186;
            __int128 v69 = v67;
            char v172 = v67;
            __int128 v70 = v67 * v186;
            do
            {
              uint64_t v73 = v65;
              if (v69 != v65 + v64 - 1)
              {
                uint64_t v74 = v180;
                if (!v180) {
                  goto LABEL_209;
                }
                uint64_t v75 = v180 + v70;
                uint64_t v181 = v180 + v66;
                sub_10002218C(v180 + v70, v174, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
                if (v70 < v66 || v75 >= v74 + v68)
                {
                  __int128 v71 = v74 + v70;
                  uint64_t v72 = v181;
                  swift_arrayInitWithTakeFrontToBack(v71, v181, 1LL, v183);
                }

                else
                {
                  uint64_t v72 = v181;
                  if (v70 != v66) {
                    swift_arrayInitWithTakeBackToFront(v75, v181);
                  }
                }

                sub_10002218C(v174, v72, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
              }

              ++v69;
              --v64;
              __int128 v65 = v73;
              v66 -= v186;
              v68 -= v186;
              v70 += v186;
            }

            while (v69 < v73 + v64);
            unint64_t v27 = v170;
            unint64_t v37 = v73;
            int64_t v29 = v172;
            int64_t v21 = v185;
          }

          goto LABEL_62;
        }

    if (v146 >= v138)
    {
      uint64_t v22 = v129;
      goto LABEL_39;
    }

    uint64_t v22 = v129;
    if (v25 < v24) {
      goto LABEL_142;
    }
    if (v24 < v25) {
      break;
    }
LABEL_39:
    if (v25 < v34) {
      goto LABEL_40;
    }
LABEL_59:
    if (v25 < v24) {
      goto LABEL_136;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0) {
      uint64_t v22 = sub_1003CB1DC(0LL, *((void *)v22 + 2) + 1LL, 1, v22);
    }
    __int128 v67 = *((void *)v22 + 2);
    __int128 v66 = *((void *)v22 + 3);
    unint64_t v23 = v67 + 1;
    if (v67 >= v66 >> 1) {
      uint64_t v22 = sub_1003CB1DC((char *)(v66 > 1), v67 + 1, 1, v22);
    }
    *((void *)v22 + 2) = v23;
    __int128 v68 = v22 + 32;
    __int128 v69 = &v22[16 * v67 + 32];
    *(void *)__int128 v69 = v24;
    *((void *)v69 + 1) = v25;
    uint64_t v143 = v25;
    if (v67)
    {
      while (1)
      {
        __int128 v70 = v23 - 1;
        if (v23 >= 4)
        {
          uint64_t v75 = &v68[16 * v23];
          unsigned int v76 = *((void *)v75 - 8);
          uint64_t v77 = *((void *)v75 - 7);
          uint64_t v81 = __OFSUB__(v77, v76);
          uint64_t v78 = v77 - v76;
          if (v81) {
            goto LABEL_125;
          }
          unint64_t v80 = *((void *)v75 - 6);
          uint64_t v79 = *((void *)v75 - 5);
          uint64_t v81 = __OFSUB__(v79, v80);
          uint64_t v73 = v79 - v80;
          uint64_t v74 = v81;
          if (v81) {
            goto LABEL_126;
          }
          id v82 = v23 - 2;
          uint64_t v83 = &v68[16 * v23 - 32];
          uint64_t v85 = *(void *)v83;
          uint64_t v84 = *((void *)v83 + 1);
          uint64_t v81 = __OFSUB__(v84, v85);
          uint64_t v86 = v84 - v85;
          if (v81) {
            goto LABEL_128;
          }
          uint64_t v81 = __OFADD__(v73, v86);
          uint64_t v87 = v73 + v86;
          if (v81) {
            goto LABEL_131;
          }
          if (v87 >= v78)
          {
            uint64_t v105 = &v68[16 * v70];
            uint64_t v107 = *(void *)v105;
            uint64_t v106 = *((void *)v105 + 1);
            uint64_t v81 = __OFSUB__(v106, v107);
            unint64_t v108 = v106 - v107;
            if (v81) {
              goto LABEL_135;
            }
            NSString v98 = v73 < v108;
            goto LABEL_96;
          }
        }

        else
        {
          if (v23 != 3)
          {
            id v99 = *((void *)v22 + 4);
            NSString v100 = *((void *)v22 + 5);
            uint64_t v81 = __OFSUB__(v100, v99);
            id v92 = v100 - v99;
            uint64_t v93 = v81;
            goto LABEL_90;
          }

          uint64_t v72 = *((void *)v22 + 4);
          __int128 v71 = *((void *)v22 + 5);
          uint64_t v81 = __OFSUB__(v71, v72);
          uint64_t v73 = v71 - v72;
          uint64_t v74 = v81;
        }

        if ((v74 & 1) != 0) {
          goto LABEL_127;
        }
        id v82 = v23 - 2;
        uint64_t v88 = &v68[16 * v23 - 32];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        id v91 = __OFSUB__(v89, v90);
        id v92 = v89 - v90;
        uint64_t v93 = v91;
        if (v91) {
          goto LABEL_130;
        }
        unint64_t v94 = &v68[16 * v70];
        uint64_t v96 = *(void *)v94;
        uint64_t v95 = *((void *)v94 + 1);
        uint64_t v81 = __OFSUB__(v95, v96);
        uint64_t v97 = v95 - v96;
        if (v81) {
          goto LABEL_133;
        }
        if (__OFADD__(v92, v97)) {
          goto LABEL_134;
        }
        if (v92 + v97 >= v73)
        {
          NSString v98 = v73 < v97;
LABEL_96:
          if (v98) {
            __int128 v70 = v82;
          }
          goto LABEL_98;
        }

LABEL_46:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  uint64_t result = swift_release(v11);
  void *v5 = v13;
  return result;
}

  char v36 = *v50;
  *(void *)(*v50 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  unint64_t v37 = (_OWORD *)(*(void *)(v36 + 48) + 160 * a2);
  uint64_t v38 = *(_OWORD *)(v5 + 80);
  v37[4] = *(_OWORD *)(v5 + 64);
  v37[5] = v38;
  uint64_t v39 = *(_OWORD *)(v5 + 48);
  v37[2] = *(_OWORD *)(v5 + 32);
  v37[3] = v39;
  uint64_t v40 = *(_OWORD *)(v5 + 144);
  v37[8] = *(_OWORD *)(v5 + 128);
  v37[9] = v40;
  uint64_t v41 = *(_OWORD *)(v5 + 112);
  v37[6] = *(_OWORD *)(v5 + 96);
  v37[7] = v41;
  unint64_t v42 = *(_OWORD *)(v5 + 16);
  *unint64_t v37 = *(_OWORD *)v5;
  v37[1] = v42;
  unint64_t v43 = *(void *)(v36 + 16);
  char v44 = __OFADD__(v43, 1LL);
  unint64_t v45 = v43 + 1;
  if (v44) {
    __break(1u);
  }
  else {
    *(void *)(v36 + swift_weakDestroy(v0 + 16) = v45;
  }
  return result;
}

              v4[2] = v2;
              goto LABEL_47;
            }
          }
        }
      }
    }

              sub_1000A6F30(v3);
              return;
            }
          }
        }
      }
    }

              sub_1000A6F30(v3);
              return;
            }
          }
        }
      }
    }

          uint64_t v73 = (v81 - 1) & v81;
          uint64_t v74 = __clz(__rbit64(v81)) + (v75 << 6);
        }

        uint64_t v79 = *(id *)(*(void *)(v59 + 48) + 8 * v74);
        if (!v79) {
          goto LABEL_60;
        }
      }

      uint64_t v116 = v73;
      uint64_t v83 = [v79 appleID];
      if (v83) {
        break;
      }
      uint64_t v39 = static os_log_type_t.error.getter(0LL);
      uint64_t v19 = (unint64_t *)v69[7];
      __int128 v70 = v75;
      __int128 v71 = swift_allocObject(v112, 72LL, 7LL);
      *(_OWORD *)(v71 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      *(void *)(v71 + 56) = sub_100022898(0LL, &qword_10099DF88, &OBJC_CLASS___FAFamilyMember_ptr);
      *(void *)(v71 + 64) = sub_10020EB64( &qword_1009A6180,  &qword_10099DF88,  &OBJC_CLASS___FAFamilyMember_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
      *(void *)(v71 + 32) = v79;
      uint64_t v72 = v79;
      os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, v19, "FAFamilyMember has nil appleID!: %@", 35LL, 2LL, v71);

      uint64_t v58 = (void *)swift_bridgeObjectRelease();
      __int128 v64 = v70;
      __int128 v65 = v116;
    }

    uint64_t v84 = v83;
    uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
    uint64_t v87 = v86;

    v118[0] = v85;
    v118[1] = v87;
    v117[0] = 64LL;
    v117[1] = 0xE100000000000000LL;
    uint64_t v88 = sub_1000155F8();
    swift_bridgeObjectRetain(v87);
    uint64_t v89 = StringProtocol.contains<A>(_:)(v117, &type metadata for String, &type metadata for String, v88, v88);
    uint64_t v90 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if ((v89 & 1) != 0) {
      break;
    }
    uint64_t v19 = (unint64_t *)IDSCopyIDForPhoneNumber(v90);

    if (!v19) {
      goto LABEL_64;
    }
    id v91 = 1;
LABEL_54:
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    uint64_t v93 = v92;
    swift_bridgeObjectRelease();

    if ((sub_1004E57AC(v91, v39, v93, v115) & 1) != 0)
    {
      uint64_t v114 = v75;
      unint64_t v94 = [v79 altDSID];
      if (v94)
      {
        uint64_t v95 = v94;
        uint64_t v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
        NSString v98 = v97;

        id v99 = String.utf8Data.getter(v96, v98);
        NSString v100 = v59;
        id v102 = v101;
        swift_bridgeObjectRelease();
        int v103 = v121;
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v121);
        v118[0] = v103;
        uint64_t v121 = (void *)0x8000000000000000LL;
        uint64_t v19 = v118;
        uint64_t v105 = v102;
        uint64_t v59 = v100;
        __int128 v69 = &qword_100A2B000;
        sub_10005D658(v99, v105, v91, v39, v93, isUniquelyReferenced_nonNull_native);
        uint64_t v39 = (uint64_t)v121;
        uint64_t v121 = (void *)v118[0];

        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v106 = swift_bridgeObjectRelease();
        uint64_t v39 = static os_log_type_t.error.getter(v106);
        uint64_t v19 = (unint64_t *)v69[7];
        uint64_t v107 = swift_allocObject(v112, 72LL, 7LL);
        *(_OWORD *)(v107 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
        *(void *)(v107 + 56) = sub_100022898(0LL, &qword_10099DF88, &OBJC_CLASS___FAFamilyMember_ptr);
        *(void *)(v107 + 64) = sub_10020EB64( &qword_1009A6180,  &qword_10099DF88,  &OBJC_CLASS___FAFamilyMember_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
        *(void *)(v107 + 32) = v79;
        unint64_t v108 = v79;
        os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, v19, "FAFamilyMember has nil altDSID!: %@", 35LL, 2LL, v107);
      }

      uint64_t v58 = (void *)swift_bridgeObjectRelease();
      __int128 v64 = v114;
      __int128 v65 = v116;
    }

    else
    {
      swift_bridgeObjectRelease();

      __int128 v64 = v75;
      __int128 v65 = v116;
    }
  }

  uint64_t v19 = (unint64_t *)IDSCopyIDForEmailAddress(v90);

  if (v19)
  {
    id v91 = 0;
    goto LABEL_54;
  }

  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
}

    if (v11 < v15) {
      goto LABEL_124;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0) {
      uint64_t v13 = sub_1003CB1DC(0LL, *((void *)v13 + 2) + 1LL, 1, v13);
    }
    uint64_t v34 = *((void *)v13 + 2);
    uint64_t v33 = *((void *)v13 + 3);
    uint64_t v14 = v34 + 1;
    uint64_t v12 = v97;
    if (v34 >= v33 >> 1)
    {
      id v82 = sub_1003CB1DC((char *)(v33 > 1), v34 + 1, 1, v13);
      uint64_t v12 = v97;
      uint64_t v13 = v82;
    }

    *((void *)v13 + 2) = v14;
    unint64_t v35 = v13 + 32;
    char v36 = &v13[16 * v34 + 32];
    *(void *)char v36 = v15;
    *((void *)v36 + 1) = v11;
    if (v34)
    {
      while (1)
      {
        unint64_t v37 = v14 - 1;
        if (v14 >= 4)
        {
          unint64_t v42 = &v35[16 * v14];
          unint64_t v43 = *((void *)v42 - 8);
          char v44 = *((void *)v42 - 7);
          uint64_t v48 = __OFSUB__(v44, v43);
          unint64_t v45 = v44 - v43;
          if (v48) {
            goto LABEL_113;
          }
          uint64_t v47 = *((void *)v42 - 6);
          BOOL v46 = *((void *)v42 - 5);
          uint64_t v48 = __OFSUB__(v46, v47);
          uint64_t v40 = v46 - v47;
          uint64_t v41 = v48;
          if (v48) {
            goto LABEL_114;
          }
          uint64_t v49 = v14 - 2;
          uint64_t v50 = &v35[16 * v14 - 32];
          int v52 = *(void *)v50;
          __int128 v51 = *((void *)v50 + 1);
          uint64_t v48 = __OFSUB__(v51, v52);
          uint64_t v53 = v51 - v52;
          if (v48) {
            goto LABEL_116;
          }
          uint64_t v48 = __OFADD__(v40, v53);
          int64_t v54 = v40 + v53;
          if (v48) {
            goto LABEL_119;
          }
          if (v54 >= v45)
          {
            uint64_t v72 = &v35[16 * v37];
            uint64_t v74 = *(void *)v72;
            uint64_t v73 = *((void *)v72 + 1);
            uint64_t v48 = __OFSUB__(v73, v74);
            uint64_t v75 = v73 - v74;
            if (v48) {
              goto LABEL_123;
            }
            __int128 v65 = v40 < v75;
            goto LABEL_83;
          }
        }

        else
        {
          if (v14 != 3)
          {
            __int128 v66 = *((void *)v13 + 4);
            __int128 v67 = *((void *)v13 + 5);
            uint64_t v48 = __OFSUB__(v67, v66);
            uint64_t v59 = v67 - v66;
            __int128 v60 = v48;
            goto LABEL_77;
          }

          uint64_t v39 = *((void *)v13 + 4);
          uint64_t v38 = *((void *)v13 + 5);
          uint64_t v48 = __OFSUB__(v38, v39);
          uint64_t v40 = v38 - v39;
          uint64_t v41 = v48;
        }

        if ((v41 & 1) != 0) {
          goto LABEL_115;
        }
        uint64_t v49 = v14 - 2;
        unint64_t v55 = &v35[16 * v14 - 32];
        __int128 v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        uint64_t v58 = __OFSUB__(v56, v57);
        uint64_t v59 = v56 - v57;
        __int128 v60 = v58;
        if (v58) {
          goto LABEL_118;
        }
        __int128 v61 = &v35[16 * v37];
        __int128 v63 = *(void *)v61;
        __int128 v62 = *((void *)v61 + 1);
        uint64_t v48 = __OFSUB__(v62, v63);
        __int128 v64 = v62 - v63;
        if (v48) {
          goto LABEL_121;
        }
        if (__OFADD__(v59, v64)) {
          goto LABEL_122;
        }
        if (v59 + v64 >= v40)
        {
          __int128 v65 = v40 < v64;
LABEL_83:
          if (v65) {
            unint64_t v37 = v49;
          }
          goto LABEL_85;
        }

  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
  }
  uint64_t v22 = v2[2];
  int64_t v21 = v2[3];
  if (v22 >= v21 >> 1) {
    uint64_t v2 = sub_1004C4120((void *)(v21 > 1), v22 + 1, 1, v2);
  }
  v2[2] = v22 + 1;
  unint64_t v23 = &v2[2 * v22];
  v23[4] = 0x657269757165722ELL;
  v23[5] = 0xEF437373616C4373LL;
  if ((a1 & 0x80) == 0)
  {
LABEL_28:
    if ((a1 & 0x100) == 0) {
      goto LABEL_29;
    }
    goto LABEL_56;
  }

          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          return result;
        }

  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
  }
  unint64_t v25 = v2[2];
  unint64_t v24 = v2[3];
  if (v25 >= v24 >> 1) {
    uint64_t v2 = sub_1004C4120((void *)(v24 > 1), v25 + 1, 1, v2);
  }
  v2[2] = v25 + 1;
  int64_t v26 = &v2[2 * v25];
  v26[4] = 0xD000000000000013LL;
  v26[5] = 0x8000000100864EC0LL;
  if ((a1 & 0x100) == 0)
  {
LABEL_19:
    if ((a1 & 0x200) == 0) {
      goto LABEL_61;
    }
    goto LABEL_56;
  }

        sub_100018C68(v121, type metadata accessor for BeaconProductInfoRecord);
      }

      sub_1005D36FC();
      uint64_t v128 = (uint64_t)v339;
      if ((v127 & 0x1FF) == 2)
      {
        if (qword_10099B538 != -1) {
          swift_once(&qword_10099B538, sub_1004F3B48);
        }
        uint64_t v129 = type metadata accessor for Logger(0LL);
        sub_10000A720(v129, (uint64_t)qword_100A2ACC8);
        id v130 = (uint64_t)v318;
        uint64_t v131 = sub_10001DC4C(v335, (uint64_t)v318, type metadata accessor for OwnedBeaconGroup);
        uint64_t v132 = (os_log_s *)Logger.logObject.getter(v131);
        uint64_t v133 = static os_log_type_t.default.getter(v132);
        uint64_t v134 = v133;
        if (os_log_type_enabled(v132, v133))
        {
          uint64_t v135 = swift_slowAlloc(25LL, -1LL);
          int v314 = swift_slowAlloc(32LL, -1LL);
          uint64_t v360 = (uint64_t (*)(void, void, void))v314;
          *(_DWORD *)uint64_t v135 = v309;
          LOBYTE(v363) = 2;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v363, v310, v135 + 4, v135 + 5);
          *(_WORD *)(v135 + 5) = 2160;
          uint64_t v363 = 1752392040LL;
          uint64_t v136 = v334;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v363, v334, v135 + 7, v135 + 15);
          *(_WORD *)(v135 + 15) = 2081;
          LODWORD(v313) = v134;
          uint64_t v137 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v138 = dispatch thunk of CustomStringConvertible.description.getter(v358, v137);
          uint64_t v363 = sub_1003F11D4(v138, v139, (uint64_t *)&v360);
          uint64_t v140 = v329;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v363, v136, v135 + 17, v135 + 25);
          uint64_t v141 = v140;
          swift_bridgeObjectRelease();
          sub_100018C68(v130, type metadata accessor for OwnedBeaconGroup);
          _os_log_impl( (void *)&_mh_execute_header,  v132,  (os_log_type_t)v313,  "AlphaWasp: hardcoding primary part %hhu for group %{private,mask.hash}s.",  (uint8_t *)v135,  0x19u);
          uint64_t v142 = v314;
          swift_arrayDestroy(v314, 1LL, (char *)&type metadata for Any + 8);
          uint64_t v143 = v142;
          uint64_t v2 = v342;
          swift_slowDealloc(v143, -1LL, -1LL);
          uint64_t v144 = v135;
          unint64_t v43 = v358;
          swift_slowDealloc(v144, -1LL, -1LL);

          uint64_t v128 = (uint64_t)v339;
          sub_100015794(v140, &qword_10099D8A0);
          uint64_t v56 = v350;
        }

        else
        {

          sub_100018C68(v130, type metadata accessor for OwnedBeaconGroup);
          uint64_t v141 = v329;
          sub_100015794(v329, &qword_10099D8A0);
          uint64_t v56 = v350;
          uint64_t v2 = v342;
          uint64_t v128 = (uint64_t)v339;
        }

        id v145 = (void (*)(uint64_t, char *, uint64_t))v356;
LABEL_54:
        v145(v141, v56, v43);
        v351(v141, 0LL, 1LL, v43);
      }

      sub_10050FF80((uint64_t)v56, v128);
      uint64_t v146 = sub_100004AEC(&qword_1009A7D40);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v146 - 8) + 48LL))(v128, 1LL, v146) == 1)
      {
        uint64_t v147 = v2;
        sub_100015794(v128, &qword_1009A7D38);
        if (qword_10099B538 != -1) {
          swift_once(&qword_10099B538, sub_1004F3B48);
        }
        uint64_t v148 = type metadata accessor for Logger(0LL);
        sub_10000A720(v148, (uint64_t)qword_100A2ACC8);
        uint64_t v149 = v321;
        uint64_t v150 = v356(v321, v56, v43);
        uint64_t v151 = (os_log_s *)Logger.logObject.getter(v150);
        uint64_t v152 = static os_log_type_t.default.getter(v151);
        uint64_t v153 = os_log_type_enabled(v151, v152);
        uint64_t v154 = v357;
        if (v153)
        {
          uint64_t v155 = swift_slowAlloc(22LL, -1LL);
          uint64_t v156 = swift_slowAlloc(32LL, -1LL);
          uint64_t v360 = (uint64_t (*)(void, void, void))v156;
          *(_DWORD *)uint64_t v155 = v328;
          uint64_t v363 = 1752392040LL;
          uint64_t v157 = v334;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v363, v334, v155 + 4, v155 + 12);
          *(_WORD *)(v155 + 12) = 2081;
          double v158 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          double v159 = dispatch thunk of CustomStringConvertible.description.getter(v358, v158);
          uint64_t v363 = sub_1003F11D4(v159, v160, (uint64_t *)&v360);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v363, v157, v155 + 14, v155 + 22);
          swift_bridgeObjectRelease();
          uint64_t v161 = v149;
          double v162 = v154;
          double v163 = *(void (**)(char *, uint64_t))(v154 + 8);
          v163(v161, v358);
          _os_log_impl( (void *)&_mh_execute_header,  v151,  v152,  "No beacon status for %{private,mask.hash}s",  (uint8_t *)v155,  0x16u);
          swift_arrayDestroy(v156, 1LL, (char *)&type metadata for Any + 8);
          double v164 = v156;
          uint64_t v56 = v350;
          uint64_t v147 = v342;
          swift_slowDealloc(v164, -1LL, -1LL);
          uint64_t v165 = v155;
          unint64_t v43 = v358;
          swift_slowDealloc(v165, -1LL, -1LL);
        }

        else
        {
          uint64_t v185 = v149;
          double v162 = v357;
          double v163 = *(void (**)(char *, uint64_t))(v357 + 8);
          v163(v185, v43);
        }

        unint64_t v42 = v340;
        int v186 = v344;
        sub_10001DC4C((uint64_t)v340, v344, type metadata accessor for BeaconStatus);
        uint64_t v187 = v343;
        sub_1000BF92C(v343, v186);
        sub_100018C68(v187, type metadata accessor for BeaconStatus);
        sub_100018C68(v353, type metadata accessor for OwnedBeaconRecord);
        sub_100018C68((uint64_t)v42, type metadata accessor for BeaconStatus);
        v163(v56, v43);
        uint64_t v12 = v349;
        uint64_t v2 = v147;
        char v44 = v162;
        uint64_t v83 = v354;
        uint64_t v78 = v355;
      }

      else
      {
        v166 = v322;
        sub_10002218C(v128, v322, type metadata accessor for BeaconStatus);
        v167 = v336;
        char v168 = sub_10002218C(v166, v336, type metadata accessor for BeaconStatus);
        uint64_t v169 = v352;
        uint64_t v170 = v323;
        Date.addingTimeInterval(_:)(v168, v77);
        uint64_t v171 = v324;
        static Date.trustedNow.getter(v324);
        LOBYTE(v166) = static Date.> infix(_:_:)(v170, v171);
        char v172 = *(void (**)(uint64_t, uint64_t))(v325 + 8);
        uint64_t v173 = v171;
        uint64_t v174 = v326;
        v172(v173, v326);
        v172((uint64_t)v170, v174);
        if ((v166 & 1) != 0)
        {
          uint64_t v175 = sub_100041014(*(_BYTE *)(v167 + *(int *)(v169 + 20)) & 0xB);
          uint64_t v176 = sub_1005508C8(v353, (v175 >> 8) & 1, HIWORD(v175) & 1, HIBYTE(v175) & 1, v342);
          uint64_t v177 = v176[2];
          if (v177)
          {
            uint64_t v363 = (uint64_t)_swiftEmptyArrayStorage;
            sub_1000328D0(0, v177, 0);
            v178 = (uint64_t)(v176 + 4);
            uint64_t v179 = (char *)v363;
            uint64_t v180 = v312;
            do
            {
              sub_100013044(v178, (uint64_t)&v360);
              uint64_t v182 = v361;
              uint64_t v181 = v362;
              sub_100012ED8(&v360, v361);
              (*(void (**)(uint64_t))(*(void *)(*(void *)(v181 + 8) + 8LL) + 32LL))(v182);
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v360);
              if ((swift_isUniquelyReferenced_nonNull_native(v179) & 1) == 0)
              {
                sub_1000328D0(0, *((void *)v179 + 2) + 1LL, 1);
                uint64_t v179 = (char *)v363;
              }

              uint64_t v184 = *((void *)v179 + 2);
              uint64_t v183 = *((void *)v179 + 3);
              if (v184 >= v183 >> 1)
              {
                sub_1000328D0(v183 > 1, v184 + 1, 1);
                uint64_t v179 = (char *)v363;
              }

              *((void *)v179 + 2) = v184 + 1;
              v98( &v179[((*(unsigned __int8 *)(v357 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v357 + 80))
                    + v184 * v96],
                v180,
                v358);
              uint64_t v363 = (uint64_t)v179;
              v178 += 40LL;
              --v177;
            }

            while (v177);
            swift_bridgeObjectRelease();
            uint64_t v169 = v352;
            v167 = v336;
          }

          else
          {
            swift_bridgeObjectRelease();
            uint64_t v179 = (char *)_swiftEmptyArrayStorage;
          }

          uint64_t v211 = v343;
          sub_10001DC4C(v167, v343, type metadata accessor for BeaconStatus);
          v212 = sub_1006F1060((uint64_t)v179);
          swift_bridgeObjectRelease();
          v213 = *(int *)(v169 + 36);
          swift_bridgeObjectRelease();
          *(void *)(v211 + v213) = v212;
          uint64_t v214 = v316;
          sub_10001DC4C(v211, v316, type metadata accessor for BeaconStatus);
          uint64_t v215 = v344;
          sub_1000BF92C(v344, v214);
          sub_100018C68(v215, type metadata accessor for BeaconStatus);
          sub_100018C68(v167, type metadata accessor for BeaconStatus);
          sub_100018C68(v353, type metadata accessor for OwnedBeaconRecord);
          unint64_t v42 = v340;
          sub_100018C68((uint64_t)v340, type metadata accessor for BeaconStatus);
          char v44 = v357;
          unint64_t v43 = v358;
          uint64_t v56 = v350;
          (*(void (**)(char *, uint64_t))(v357 + 8))(v350, v358);
          sub_100018C68(v211, type metadata accessor for BeaconStatus);
          uint64_t v12 = v349;
          uint64_t v83 = v354;
          uint64_t v78 = v355;
          uint64_t v2 = v342;
        }

        else
        {
          char v44 = v357;
          uint64_t v188 = (uint64_t)v317;
          uint64_t v83 = v354;
          if (qword_10099B538 != -1) {
            swift_once(&qword_10099B538, sub_1004F3B48);
          }
          uint64_t v189 = type metadata accessor for Logger(0LL);
          sub_10000A720(v189, (uint64_t)qword_100A2ACC8);
          uint64_t v190 = v315;
          v356(v315, v350, v43);
          uint64_t v191 = sub_10001DC4C(v336, v188, type metadata accessor for BeaconStatus);
          v192 = (os_log_s *)Logger.logObject.getter(v191);
          int v193 = static os_log_type_t.default.getter(v192);
          if (os_log_type_enabled(v192, v193))
          {
            uint64_t v194 = swift_slowAlloc(32LL, -1LL);
            double v356 = (uint64_t (*)(char *, char *, uint64_t))swift_slowAlloc(64LL, -1LL);
            uint64_t v360 = (uint64_t (*)(void, void, void))v356;
            *(_DWORD *)uint64_t v194 = v306;
            uint64_t v363 = 1752392040LL;
            v195 = v334;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v363, v334, v194 + 4, v194 + 12);
            *(_WORD *)(v194 + 12) = 2081;
            v196 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            uint64_t v197 = dispatch thunk of CustomStringConvertible.description.getter(v358, v196);
            uint64_t v363 = sub_1003F11D4(v197, v198, (uint64_t *)&v360);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v363, v195, v194 + 14, v194 + 22);
            swift_bridgeObjectRelease();
            uint64_t v199 = v190;
            uint64_t v200 = *(void (**)(char *, uint64_t))(v44 + 8);
            v200(v199, v358);
            *(_WORD *)(v194 + 22) = 2080;
            uint64_t v201 = sub_100041014(*(_BYTE *)(v188 + *(int *)(v352 + 20)) & 0xB);
            v202 = sub_1000409B4(v201 & 0x10101FF);
            uint64_t v363 = sub_1003F11D4(v202, v203, (uint64_t *)&v360);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v363, v195, v194 + 24, v194 + 32);
            uint64_t v204 = v342;
            swift_bridgeObjectRelease();
            sub_100018C68(v188, type metadata accessor for BeaconStatus);
            uint64_t v205 = v193;
            uint64_t v2 = v204;
            _os_log_impl( (void *)&_mh_execute_header,  v192,  v205,  "Beacon status for %{private,mask.hash}s expired. %s",  (uint8_t *)v194,  0x20u);
            uint64_t v206 = v356;
            swift_arrayDestroy(v356, 2LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v206, -1LL, -1LL);
            char v207 = v194;
            unint64_t v43 = v358;
            swift_slowDealloc(v207, -1LL, -1LL);
          }

          else
          {
            char v208 = v190;
            uint64_t v200 = *(void (**)(char *, uint64_t))(v44 + 8);
            v200(v208, v43);
            sub_100018C68(v188, type metadata accessor for BeaconStatus);

            uint64_t v2 = v342;
          }

          unint64_t v42 = v340;
          uint64_t v209 = v344;
          sub_10001DC4C((uint64_t)v340, v344, type metadata accessor for BeaconStatus);
          char v210 = v343;
          sub_1000BF92C(v343, v209);
          sub_100018C68(v210, type metadata accessor for BeaconStatus);
          sub_100018C68(v336, type metadata accessor for BeaconStatus);
          sub_100018C68(v353, type metadata accessor for OwnedBeaconRecord);
          sub_100018C68((uint64_t)v42, type metadata accessor for BeaconStatus);
          uint64_t v56 = v350;
          v200(v350, v43);
          uint64_t v12 = v349;
          uint64_t v78 = v355;
        }
      }
    }
  }

  id v92 = v78 + 1;
  if (__OFADD__(v78, 1LL))
  {
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
    goto LABEL_111;
  }

  if (v92 >= v338) {
    goto LABEL_86;
  }
  uint64_t v93 = *(void *)(v337 + 8 * v92);
  unint64_t v94 = v78 + 1;
  if (v93) {
    goto LABEL_28;
  }
  unint64_t v94 = v78 + 2;
  if (v78 + 2 >= v338) {
    goto LABEL_86;
  }
  uint64_t v93 = *(void *)(v337 + 8 * v94);
  if (v93) {
    goto LABEL_28;
  }
  unint64_t v94 = v78 + 3;
  if (v78 + 3 >= v338) {
    goto LABEL_86;
  }
  uint64_t v93 = *(void *)(v337 + 8 * v94);
  if (v93)
  {
LABEL_28:
    uint64_t v90 = (v93 - 1) & v93;
    double v355 = v94;
    id v91 = __clz(__rbit64(v93)) + (v94 << 6);
    goto LABEL_29;
  }

  uint64_t v95 = v78 + 4;
  if (v78 + 4 < v338)
  {
    uint64_t v93 = *(void *)(v337 + 8 * v95);
    if (!v93)
    {
      while (1)
      {
        unint64_t v94 = v95 + 1;
        if (__OFADD__(v95, 1LL)) {
          goto LABEL_110;
        }
        if (v94 >= v338) {
          goto LABEL_86;
        }
        uint64_t v93 = *(void *)(v337 + 8 * v94);
        ++v95;
        if (v93) {
          goto LABEL_28;
        }
      }
    }

    unint64_t v94 = v78 + 4;
    goto LABEL_28;
  }

  uint64_t v20 = a2;
  uint64_t v111 = v124;
  id v112 = *(void **)(v124 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedBeaconRecordsQueue);
  id v113 = v121;
  char *v121 = v112;
  uint64_t v114 = v122;
  uint64_t v115 = v123;
  (*(void (**)(void *, void, uint64_t))(v122 + 104))( v113,  enum case for DispatchPredicate.onQueue(_:),  v123);
  uint64_t v116 = v112;
  LOBYTE(v112) = _dispatchPreconditionTest(_:)(v113);
  (*(void (**)(void *, uint64_t))(v114 + 8))(v113, v115);
  swift_bridgeObjectRetain(v20);
  swift_retain();
  uint64_t v117 = sub_100550124(v20, v111);
  swift_bridgeObjectRelease();
  swift_release(v111);
  *(void *)(v111 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedSharedBeaconRecords) = v117;
  swift_bridgeObjectRetain(v117);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v117;
  return result;
}

    if (v11 < v15) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0) {
      uint64_t v13 = sub_1003CB1DC(0LL, *((void *)v13 + 2) + 1LL, 1, v13);
    }
    uint64_t v41 = *((void *)v13 + 2);
    uint64_t v40 = *((void *)v13 + 3);
    uint64_t v14 = v41 + 1;
    uint64_t v12 = v114;
    if (v41 >= v40 >> 1)
    {
      uint64_t v90 = sub_1003CB1DC((char *)(v40 > 1), v41 + 1, 1, v13);
      uint64_t v12 = v114;
      uint64_t v13 = v90;
    }

    *((void *)v13 + 2) = v14;
    unint64_t v42 = v13 + 32;
    unint64_t v43 = &v13[16 * v41 + 32];
    *(void *)unint64_t v43 = v15;
    *((void *)v43 + 1) = v11;
    if (v41)
    {
      while (1)
      {
        char v44 = v14 - 1;
        if (v14 >= 4)
        {
          uint64_t v49 = &v42[16 * v14];
          uint64_t v50 = *((void *)v49 - 8);
          __int128 v51 = *((void *)v49 - 7);
          unint64_t v55 = __OFSUB__(v51, v50);
          int v52 = v51 - v50;
          if (v55) {
            goto LABEL_119;
          }
          int64_t v54 = *((void *)v49 - 6);
          uint64_t v53 = *((void *)v49 - 5);
          unint64_t v55 = __OFSUB__(v53, v54);
          uint64_t v47 = v53 - v54;
          uint64_t v48 = v55;
          if (v55) {
            goto LABEL_120;
          }
          uint64_t v56 = v14 - 2;
          __int128 v57 = &v42[16 * v14 - 32];
          uint64_t v59 = *(void *)v57;
          uint64_t v58 = *((void *)v57 + 1);
          unint64_t v55 = __OFSUB__(v58, v59);
          __int128 v60 = v58 - v59;
          if (v55) {
            goto LABEL_122;
          }
          unint64_t v55 = __OFADD__(v47, v60);
          __int128 v61 = v47 + v60;
          if (v55) {
            goto LABEL_125;
          }
          if (v61 >= v52)
          {
            uint64_t v79 = &v42[16 * v44];
            uint64_t v81 = *(void *)v79;
            unint64_t v80 = *((void *)v79 + 1);
            unint64_t v55 = __OFSUB__(v80, v81);
            id v82 = v80 - v81;
            if (v55) {
              goto LABEL_129;
            }
            uint64_t v72 = v47 < v82;
            goto LABEL_83;
          }
        }

        else
        {
          if (v14 != 3)
          {
            uint64_t v73 = *((void *)v13 + 4);
            uint64_t v74 = *((void *)v13 + 5);
            unint64_t v55 = __OFSUB__(v74, v73);
            __int128 v66 = v74 - v73;
            __int128 v67 = v55;
            goto LABEL_77;
          }

          BOOL v46 = *((void *)v13 + 4);
          unint64_t v45 = *((void *)v13 + 5);
          unint64_t v55 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          uint64_t v48 = v55;
        }

        if ((v48 & 1) != 0) {
          goto LABEL_121;
        }
        uint64_t v56 = v14 - 2;
        __int128 v62 = &v42[16 * v14 - 32];
        __int128 v64 = *(void *)v62;
        __int128 v63 = *((void *)v62 + 1);
        __int128 v65 = __OFSUB__(v63, v64);
        __int128 v66 = v63 - v64;
        __int128 v67 = v65;
        if (v65) {
          goto LABEL_124;
        }
        __int128 v68 = &v42[16 * v44];
        __int128 v70 = *(void *)v68;
        __int128 v69 = *((void *)v68 + 1);
        unint64_t v55 = __OFSUB__(v69, v70);
        __int128 v71 = v69 - v70;
        if (v55) {
          goto LABEL_127;
        }
        if (__OFADD__(v66, v71)) {
          goto LABEL_128;
        }
        if (v66 + v71 >= v47)
        {
          uint64_t v72 = v47 < v71;
LABEL_83:
          if (v72) {
            char v44 = v56;
          }
          goto LABEL_85;
        }

    if (v11 < v15) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0) {
      uint64_t v13 = sub_1003CB1DC(0LL, *((void *)v13 + 2) + 1LL, 1, v13);
    }
    uint64_t v39 = *((void *)v13 + 2);
    uint64_t v38 = *((void *)v13 + 3);
    uint64_t v14 = v39 + 1;
    uint64_t v12 = v111;
    if (v39 >= v38 >> 1)
    {
      uint64_t v88 = sub_1003CB1DC((char *)(v38 > 1), v39 + 1, 1, v13);
      uint64_t v12 = v111;
      uint64_t v13 = v88;
    }

    *((void *)v13 + 2) = v14;
    uint64_t v40 = v13 + 32;
    uint64_t v41 = &v13[16 * v39 + 32];
    *(void *)uint64_t v41 = v15;
    *((void *)v41 + 1) = v11;
    if (v39)
    {
      while (1)
      {
        unint64_t v42 = v14 - 1;
        if (v14 >= 4)
        {
          uint64_t v47 = &v40[16 * v14];
          uint64_t v48 = *((void *)v47 - 8);
          uint64_t v49 = *((void *)v47 - 7);
          uint64_t v53 = __OFSUB__(v49, v48);
          uint64_t v50 = v49 - v48;
          if (v53) {
            goto LABEL_119;
          }
          int v52 = *((void *)v47 - 6);
          __int128 v51 = *((void *)v47 - 5);
          uint64_t v53 = __OFSUB__(v51, v52);
          unint64_t v45 = v51 - v52;
          BOOL v46 = v53;
          if (v53) {
            goto LABEL_120;
          }
          int64_t v54 = v14 - 2;
          unint64_t v55 = &v40[16 * v14 - 32];
          __int128 v57 = *(void *)v55;
          uint64_t v56 = *((void *)v55 + 1);
          uint64_t v53 = __OFSUB__(v56, v57);
          uint64_t v58 = v56 - v57;
          if (v53) {
            goto LABEL_122;
          }
          uint64_t v53 = __OFADD__(v45, v58);
          uint64_t v59 = v45 + v58;
          if (v53) {
            goto LABEL_125;
          }
          if (v59 >= v50)
          {
            uint64_t v77 = &v40[16 * v42];
            uint64_t v79 = *(void *)v77;
            uint64_t v78 = *((void *)v77 + 1);
            uint64_t v53 = __OFSUB__(v78, v79);
            unint64_t v80 = v78 - v79;
            if (v53) {
              goto LABEL_129;
            }
            __int128 v70 = v45 < v80;
            goto LABEL_83;
          }
        }

        else
        {
          if (v14 != 3)
          {
            __int128 v71 = *((void *)v13 + 4);
            uint64_t v72 = *((void *)v13 + 5);
            uint64_t v53 = __OFSUB__(v72, v71);
            __int128 v64 = v72 - v71;
            __int128 v65 = v53;
            goto LABEL_77;
          }

          char v44 = *((void *)v13 + 4);
          unint64_t v43 = *((void *)v13 + 5);
          uint64_t v53 = __OFSUB__(v43, v44);
          unint64_t v45 = v43 - v44;
          BOOL v46 = v53;
        }

        if ((v46 & 1) != 0) {
          goto LABEL_121;
        }
        int64_t v54 = v14 - 2;
        __int128 v60 = &v40[16 * v14 - 32];
        __int128 v62 = *(void *)v60;
        __int128 v61 = *((void *)v60 + 1);
        __int128 v63 = __OFSUB__(v61, v62);
        __int128 v64 = v61 - v62;
        __int128 v65 = v63;
        if (v63) {
          goto LABEL_124;
        }
        __int128 v66 = &v40[16 * v42];
        __int128 v68 = *(void *)v66;
        __int128 v67 = *((void *)v66 + 1);
        uint64_t v53 = __OFSUB__(v67, v68);
        __int128 v69 = v67 - v68;
        if (v53) {
          goto LABEL_127;
        }
        if (__OFADD__(v64, v69)) {
          goto LABEL_128;
        }
        if (v64 + v69 >= v45)
        {
          __int128 v70 = v45 < v69;
LABEL_83:
          if (v70) {
            unint64_t v42 = v54;
          }
          goto LABEL_85;
        }

    sub_1003CB2D4((void **)&v28, (const void **)&v27, &v26);
    return 1LL;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

    LOBYTE(v7) = 1;
    goto LABEL_15;
  }

  uint64_t v7 = v40 - v39;
  if (v40 >= v39)
  {
    uint64_t result = v63;
LABEL_45:
    sub_100018C68(result, type metadata accessor for KeySyncMetadata);
    if ((v55 & 1) == 0)
    {
      LOBYTE(v7) = v7 == 0;
      goto LABEL_15;
    }

    goto LABEL_46;
  }

  uint64_t result = v63;
  if ((uint64_t)(v39 - v40) >= 0)
  {
    uint64_t v7 = v40 - v39;
    goto LABEL_45;
  }

    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v111) {
        break;
      }
    }

uint64_t sub_10004C904(uint64_t a1, uint64_t a2)
{
  return sub_10004C948( a1,  a2,  &qword_10099E1F8,  (void (*)(uint64_t, _BYTE *))sub_10006A358,  (void (*)(uint64_t, _BYTE *))sub_10006A650);
}

uint64_t sub_10004C920(uint64_t a1, uint64_t a2)
{
  return sub_10005753C(a1, a2, &qword_10099E2F8);
}

uint64_t sub_10004C92C(uint64_t a1, uint64_t a2)
{
  return sub_10004C948( a1,  a2,  &qword_10099E4F0,  (void (*)(uint64_t, _BYTE *))sub_10006A358,  (void (*)(uint64_t, _BYTE *))sub_10006A538);
}

uint64_t sub_10004C948( uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t, _BYTE *), void (*a5)(uint64_t, _BYTE *))
{
  uint64_t v7 = v5;
  uint64_t v9 = *v5;
  if (*(void *)(*v5 + 24) <= a1) {
    uint64_t v10 = a1;
  }
  else {
    uint64_t v10 = *(void *)(*v5 + 24);
  }
  sub_100004AEC(a3);
  char v43 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v9, v10, a2);
  uint64_t v12 = v11;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_44;
  }
  uint64_t v13 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v41 = v9 + 64;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & *(void *)(v9 + 64);
  uint64_t v39 = v7;
  int64_t v40 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v16 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0LL;
  while (1)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_25;
    }

    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }

    if (v23 >= v40) {
      break;
    }
    unint64_t v24 = (void *)(v9 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_37;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v18);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_37:
          swift_release();
          uint64_t v7 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }

        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_46;
            }
            if (v18 >= v40) {
              goto LABEL_37;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v18);
            ++v26;
            if (v25) {
              goto LABEL_24;
            }
          }
        }

        int64_t v18 = v26;
      }
    }

uint64_t sub_10004CC70(uint64_t a1, uint64_t a2)
{
  return sub_10004CC7C(a1, a2, &qword_10099E260);
}

uint64_t sub_10004CC7C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *v5;
  if (*(void *)(*v5 + 24) > a1) {
    a1 = *(void *)(*v5 + 24);
  }
  sub_100004AEC(a3);
  int v47 = a2;
  uint64_t v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  uint64_t v14 = v13;
  if (!*(void *)(v12 + 16)) {
    goto LABEL_43;
  }
  uint64_t v15 = 1LL << *(_BYTE *)(v12 + 32);
  uint64_t v16 = *(void *)(v12 + 64);
  unint64_t v45 = (void *)(v12 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1LL << v15);
  }
  else {
    uint64_t v17 = -1LL;
  }
  unint64_t v18 = v17 & v16;
  char v43 = v5;
  int64_t v44 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v19 = v13 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0LL;
  for (i = v12; ; uint64_t v12 = i)
  {
    if (v18)
    {
      unint64_t v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }

    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v25 >= v44) {
      break;
    }
    int64_t v26 = v45;
    unint64_t v27 = v45[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v44) {
        goto LABEL_36;
      }
      unint64_t v27 = v45[v21];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v44)
        {
LABEL_36:
          swift_release(v12);
          uint64_t v5 = v43;
          if ((v47 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v27 = v45[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1LL)) {
              goto LABEL_45;
            }
            if (v21 >= v44) {
              goto LABEL_36;
            }
            unint64_t v27 = v45[v21];
            ++v28;
            if (v27) {
              goto LABEL_23;
            }
          }
        }

        int64_t v21 = v28;
      }
    }

uint64_t sub_10004D014(uint64_t a1, uint64_t a2)
{
  return sub_100050BF0(a1, a2, (uint64_t *)&unk_10099E440);
}

uint64_t sub_10004D020(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void **)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E438);
  int v70 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_43;
  }
  uint64_t v83 = v9;
  uint64_t v84 = v6;
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  __int128 v65 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  __int128 v63 = v2;
  int64_t v64 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v19 = 0LL;
  uint64_t v68 = v10;
  __int128 v69 = v7;
  uint64_t v66 = v12;
  while (1)
  {
    if (v16)
    {
      unint64_t v24 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v25 = v24 | (v19 << 6);
      goto LABEL_24;
    }

    int64_t v26 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v26 >= v64) {
      break;
    }
    unint64_t v27 = v65;
    unint64_t v28 = v65[v26];
    ++v19;
    if (!v28)
    {
      int64_t v19 = v26 + 1;
      if (v26 + 1 >= v64) {
        goto LABEL_36;
      }
      unint64_t v28 = v65[v19];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v64)
        {
LABEL_36:
          swift_release();
          int v3 = v63;
          if ((v70 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v28 = v65[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v19 = v29 + 1;
            if (__OFADD__(v29, 1LL)) {
              goto LABEL_45;
            }
            if (v19 >= v64) {
              goto LABEL_36;
            }
            unint64_t v28 = v65[v19];
            ++v29;
            if (v28) {
              goto LABEL_23;
            }
          }
        }

        int64_t v19 = v29;
      }
    }

uint64_t sub_10004D508(uint64_t a1, uint64_t a2)
{
  return sub_10004CC7C(a1, a2, &qword_10099E1E8);
}

uint64_t sub_10004D514(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(unint64_t, _BYTE *))
{
  uint64_t v46 = a4;
  uint64_t v6 = v4;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *v6;
  if (*(void *)(*v6 + 24) > a1) {
    a1 = *(void *)(*v6 + 24);
  }
  sub_100004AEC(a3);
  int v45 = a2;
  uint64_t v14 = static _DictionaryStorage.resize(original:capacity:move:)(v13, a1, a2);
  uint64_t v15 = v14;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_43;
  }
  uint64_t v16 = 1LL << *(_BYTE *)(v13 + 32);
  uint64_t v17 = *(void *)(v13 + 64);
  uint64_t v44 = (void *)(v13 + 64);
  if (v16 < 64) {
    uint64_t v18 = ~(-1LL << v16);
  }
  else {
    uint64_t v18 = -1LL;
  }
  unint64_t v19 = v18 & v17;
  uint64_t v42 = v6;
  int64_t v43 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v20 = v14 + 64;
  uint64_t result = swift_retain();
  int64_t v22 = 0LL;
  while (1)
  {
    if (v19)
    {
      unint64_t v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_24;
    }

    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v26 >= v43) {
      break;
    }
    unint64_t v27 = v44;
    unint64_t v28 = v44[v26];
    ++v22;
    if (!v28)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v43) {
        goto LABEL_36;
      }
      unint64_t v28 = v44[v22];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v43)
        {
LABEL_36:
          swift_release(v13);
          uint64_t v6 = v42;
          if ((v45 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v28 = v44[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v22 = v29 + 1;
            if (__OFADD__(v29, 1LL)) {
              goto LABEL_45;
            }
            if (v22 >= v43) {
              goto LABEL_36;
            }
            unint64_t v28 = v44[v22];
            ++v29;
            if (v28) {
              goto LABEL_23;
            }
          }
        }

        int64_t v22 = v29;
      }
    }

uint64_t sub_10004D8CC(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v55 = *(void *)(v6 - 8);
  uint64_t v56 = v6;
  __chkstk_darwin(v6);
  uint64_t v54 = &v46[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v53 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = &v46[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = *v3;
  if (*(void *)(*v3 + 24) <= a1) {
    uint64_t v12 = a1;
  }
  else {
    uint64_t v12 = *(void *)(*v3 + 24);
  }
  sub_100004AEC(&qword_10099E420);
  uint64_t v13 = static _DictionaryStorage.resize(original:capacity:move:)(v11, v12, a2);
  uint64_t v14 = v13;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_44;
  }
  uint64_t v15 = 1LL << *(_BYTE *)(v11 + 32);
  uint64_t v16 = *(void *)(v11 + 64);
  uint64_t v50 = (void *)(v11 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1LL << v15);
  }
  else {
    uint64_t v17 = -1LL;
  }
  unint64_t v18 = v17 & v16;
  int v48 = v3;
  int64_t v49 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v19 = v13 + 64;
  uint64_t v52 = v11;
  uint64_t result = swift_retain();
  int64_t v21 = 0LL;
  int v47 = a2;
  uint64_t v22 = 16LL;
  if ((a2 & 1) != 0) {
    uint64_t v22 = 32LL;
  }
  uint64_t v51 = v22;
  uint64_t v23 = v22;
  while (1)
  {
    if (v18)
    {
      unint64_t v25 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v26 = v25 | (v21 << 6);
      goto LABEL_27;
    }

    int64_t v27 = v21 + 1;
    if (__OFADD__(v21, 1LL))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }

    if (v27 >= v49) {
      break;
    }
    unint64_t v28 = v50;
    unint64_t v29 = v50[v27];
    ++v21;
    if (!v29)
    {
      int64_t v21 = v27 + 1;
      if (v27 + 1 >= v49) {
        goto LABEL_37;
      }
      unint64_t v29 = v50[v21];
      if (!v29)
      {
        int64_t v30 = v27 + 2;
        if (v30 >= v49)
        {
LABEL_37:
          uint64_t v44 = v52;
          swift_release();
          int v3 = v48;
          if ((v47 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }

        unint64_t v29 = v50[v30];
        if (!v29)
        {
          while (1)
          {
            int64_t v21 = v30 + 1;
            if (__OFADD__(v30, 1LL)) {
              goto LABEL_46;
            }
            if (v21 >= v49) {
              goto LABEL_37;
            }
            unint64_t v29 = v50[v21];
            ++v30;
            if (v29) {
              goto LABEL_26;
            }
          }
        }

        int64_t v21 = v30;
      }
    }

LABEL_26:
    unint64_t v18 = (v29 - 1) & v29;
    unint64_t v26 = __clz(__rbit64(v29)) + (v21 << 6);
LABEL_27:
    uint64_t v31 = v52;
    uint64_t v32 = *(void *)(v53 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v53 + v23))(v10, *(void *)(v52 + 48) + v32 * v26, v8);
    uint64_t v33 = *(void *)(v31 + 56);
    uint64_t v34 = *(void *)(v55 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v55 + v23))(v54, v33 + v34 * v26, v56);
    uint64_t v35 = *(void *)(v14 + 40);
    uint64_t v36 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v35, v8, v36);
    uint64_t v37 = -1LL << *(_BYTE *)(v14 + 32);
    unint64_t v38 = result & ~v37;
    unint64_t v39 = v38 >> 6;
    if (((-1LL << v38) & ~*(void *)(v19 + 8 * (v38 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1LL << v38) & ~*(void *)(v19 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v40 = 0;
      unint64_t v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        BOOL v42 = v39 == v41;
        if (v39 == v41) {
          unint64_t v39 = 0LL;
        }
        v40 |= v42;
        uint64_t v43 = *(void *)(v19 + 8 * v39);
      }

      while (v43 == -1);
      unint64_t v24 = __clz(__rbit64(~v43)) + (v39 << 6);
    }

    *(void *)(v19 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v24;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v53 + 32))(*(void *)(v14 + 48) + v32 * v24, v10, v8);
    uint64_t result = (*(uint64_t (**)(unint64_t, _BYTE *, uint64_t))(v55 + 32))( *(void *)(v14 + 56) + v34 * v24,  v54,  v56);
    ++*(void *)(v14 + 16);
  }

  uint64_t v44 = v52;
  swift_release();
  int v3 = v48;
  unint64_t v28 = v50;
  if ((v47 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  uint64_t v45 = 1LL << *(_BYTE *)(v44 + 32);
  if (v45 >= 64) {
    bzero(v28, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *unint64_t v28 = -1LL << v45;
  }
  *(void *)(v44 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_44:
  uint64_t result = swift_release();
  *int v3 = v14;
  return result;
}

    unint64_t v18 = (v29 - 1) & v29;
    unint64_t v26 = __clz(__rbit64(v29)) + (v21 << 6);
LABEL_27:
    uint64_t v31 = v52;
    uint64_t v32 = *(void *)(v53 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v53 + v23))(v10, *(void *)(v52 + 48) + v32 * v26, v8);
    uint64_t v33 = *(void *)(v31 + 56);
    uint64_t v34 = *(void *)(v55 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v55 + v23))(v54, v33 + v34 * v26, v56);
    uint64_t v35 = *(void *)(v14 + 40);
    uint64_t v36 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v35, v8, v36);
    uint64_t v37 = -1LL << *(_BYTE *)(v14 + 32);
    unint64_t v38 = result & ~v37;
    unint64_t v39 = v38 >> 6;
    if (((-1LL << v38) & ~*(void *)(v19 + 8 * (v38 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1LL << v38) & ~*(void *)(v19 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v40 = 0;
      unint64_t v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        BOOL v42 = v39 == v41;
        if (v39 == v41) {
          unint64_t v39 = 0LL;
        }
        v40 |= v42;
        uint64_t v43 = *(void *)(v19 + 8 * v39);
      }

      while (v43 == -1);
      unint64_t v24 = __clz(__rbit64(~v43)) + (v39 << 6);
    }

    *(void *)(v19 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v24;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v53 + 32))(*(void *)(v14 + 48) + v32 * v24, v10, v8);
    uint64_t result = (*(uint64_t (**)(unint64_t, _BYTE *, uint64_t))(v55 + 32))( *(void *)(v14 + 56) + v34 * v24,  v54,  v56);
    ++*(void *)(v14 + 16);
  }

  uint64_t v44 = v52;
  swift_release();
  int v3 = v48;
  unint64_t v28 = v50;
  if ((v47 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  uint64_t v45 = 1LL << *(_BYTE *)(v44 + 32);
  if (v45 >= 64) {
    bzero(v28, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *unint64_t v28 = -1LL << v45;
  }
  *(void *)(v44 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_44:
  uint64_t result = swift_release();
  *int v3 = v14;
  return result;
}

    if (v32 < v20) {
      goto LABEL_142;
    }
    if (v20 >= v32) {
      break;
    }
    uint64_t v131 = v17;
    BOOL v42 = 0LL;
    uint64_t v43 = v39 * (v32 - 1);
    uint64_t v44 = v32 * v39;
    uint64_t v45 = v20;
    uint64_t v46 = v20 * v39;
    int v47 = v143;
    uint64_t v142 = v32;
    do
    {
      if (v45 != v32 + v42 - 1)
      {
        if (!v137) {
          goto LABEL_147;
        }
        int v48 = v41;
        int64_t v49 = &v137[v46];
        uint64_t v50 = &v137[v43];
        uint64_t v139 = *(char **)(v147 + 32);
        ((void (*)(char *, char *, uint64_t))v139)(v133, &v137[v46], v3);
        if (v46 < v43 || v49 >= &v137[v44])
        {
          swift_arrayInitWithTakeFrontToBack(v49, v50, 1LL, v3);
        }

        else if (v46 != v43)
        {
          swift_arrayInitWithTakeBackToFront(v49, v50);
        }

        ((void (*)(char *, char *, uint64_t))v139)(v50, v133, v3);
        unint64_t v41 = v48;
        uint64_t v32 = v142;
        int v47 = v143;
        unint64_t v39 = v146;
      }

      ++v45;
      --v42;
      v43 -= v39;
      v44 -= v39;
      v46 += v39;
    }

    while (v45 < v32 + v42);
    uint64_t v17 = v131;
    uint64_t v20 = v134;
    char v40 = v145;
    if (v32 < v145) {
      goto LABEL_41;
    }
LABEL_58:
    if (v32 < v20) {
      goto LABEL_135;
    }
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
    uint64_t v136 = v41;
    uint64_t v142 = v32;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v17 = sub_1003CB1DC(0LL, *((void *)v17 + 2) + 1LL, 1, v17);
    }
    int v71 = *((void *)v17 + 2);
    int v70 = *((void *)v17 + 3);
    uint64_t v19 = v71 + 1;
    if (v71 >= v70 >> 1) {
      uint64_t v17 = sub_1003CB1DC((char *)(v70 > 1), v71 + 1, 1, v17);
    }
    *((void *)v17 + 2) = v19;
    uint64_t v72 = v17 + 32;
    uint64_t v73 = &v17[16 * v71 + 32];
    uint64_t v74 = v142;
    *(void *)uint64_t v73 = v20;
    *((void *)v73 + 1) = v74;
    if (v71)
    {
      while (1)
      {
        int v75 = v19 - 1;
        if (v19 >= 4)
        {
          int v80 = &v72[16 * v19];
          uint64_t v81 = *((void *)v80 - 8);
          int64_t v82 = *((void *)v80 - 7);
          uint64_t v86 = __OFSUB__(v82, v81);
          uint64_t v83 = v82 - v81;
          if (v86) {
            goto LABEL_124;
          }
          uint64_t v85 = *((void *)v80 - 6);
          uint64_t v84 = *((void *)v80 - 5);
          uint64_t v86 = __OFSUB__(v84, v85);
          uint64_t v78 = v84 - v85;
          uint64_t v79 = v86;
          if (v86) {
            goto LABEL_125;
          }
          uint64_t v87 = v19 - 2;
          uint64_t v88 = &v72[16 * v19 - 32];
          uint64_t v90 = *(void *)v88;
          uint64_t v89 = *((void *)v88 + 1);
          uint64_t v86 = __OFSUB__(v89, v90);
          id v91 = v89 - v90;
          if (v86) {
            goto LABEL_127;
          }
          uint64_t v86 = __OFADD__(v78, v91);
          id v92 = v78 + v91;
          if (v86) {
            goto LABEL_130;
          }
          if (v92 >= v83)
          {
            char v110 = &v72[16 * v75];
            id v112 = *(void *)v110;
            uint64_t v111 = *((void *)v110 + 1);
            uint64_t v86 = __OFSUB__(v111, v112);
            id v113 = v111 - v112;
            if (v86) {
              goto LABEL_134;
            }
            int v103 = v78 < v113;
            goto LABEL_95;
          }
        }

        else
        {
          if (v19 != 3)
          {
            id v104 = *((void *)v17 + 4);
            uint64_t v105 = *((void *)v17 + 5);
            uint64_t v86 = __OFSUB__(v105, v104);
            uint64_t v97 = v105 - v104;
            NSString v98 = v86;
            goto LABEL_89;
          }

          uint64_t v77 = *((void *)v17 + 4);
          int v76 = *((void *)v17 + 5);
          uint64_t v86 = __OFSUB__(v76, v77);
          uint64_t v78 = v76 - v77;
          uint64_t v79 = v86;
        }

        if ((v79 & 1) != 0) {
          goto LABEL_126;
        }
        uint64_t v87 = v19 - 2;
        uint64_t v93 = &v72[16 * v19 - 32];
        uint64_t v95 = *(void *)v93;
        unint64_t v94 = *((void *)v93 + 1);
        uint64_t v96 = __OFSUB__(v94, v95);
        uint64_t v97 = v94 - v95;
        NSString v98 = v96;
        if (v96) {
          goto LABEL_129;
        }
        id v99 = &v72[16 * v75];
        id v101 = *(void *)v99;
        NSString v100 = *((void *)v99 + 1);
        uint64_t v86 = __OFSUB__(v100, v101);
        id v102 = v100 - v101;
        if (v86) {
          goto LABEL_132;
        }
        if (__OFADD__(v97, v102)) {
          goto LABEL_133;
        }
        if (v97 + v102 >= v78)
        {
          int v103 = v78 < v102;
LABEL_95:
          if (v103) {
            int v75 = v87;
          }
          goto LABEL_97;
        }

  __break(1u);
  return result;
}

        uint64_t v9 = (v19 - 1) & v19;
        uint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      int64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
      uint64_t v22 = *v21;
      uint64_t v23 = v21[1];
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      uint64_t result = Hasher._finalize()();
      unint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        int64_t v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          unint64_t v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0LL;
          }
          v27 |= v29;
          int64_t v30 = *(void *)(v11 + 8 * v26);
        }

        while (v30 == -1);
        uint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      uint64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
      *uint64_t v15 = v22;
      v15[1] = v23;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  uint64_t *v2 = v6;
  return result;
}

        uint64_t v11 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }

      uint64_t v20 = *(_BYTE *)(*(void *)(v3 + 48) + v16);
      uint64_t result = static Hasher._hash(seed:bytes:count:)(*(void *)(v6 + 40), v20, 1LL);
      int64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v22 = result & ~v21;
      uint64_t v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          unint64_t v26 = v23 == v25;
          if (v23 == v25) {
            uint64_t v23 = 0LL;
          }
          v24 |= v26;
          int64_t v27 = *(void *)(v13 + 8 * v23);
        }

        while (v27 == -1);
        uint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(_BYTE *)(*(void *)(v6 + 48) + v14) = v20;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  uint64_t *v2 = v6;
  return result;
}

        uint64_t v9 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }

      uint64_t v20 = v3;
      int64_t v21 = (unsigned __int8 *)(*(void *)(v3 + 48) + 24 * v16);
      uint64_t v22 = *v21;
      uint64_t v23 = *((void *)v21 + 1);
      unint64_t v24 = *((void *)v21 + 2);
      Hasher.init(_seed:)(v36, *(void *)(v6 + 40));
      Hasher._combine(_:)(v22);
      swift_bridgeObjectRetain(v24);
      String.hash(into:)(v36, v23, v24);
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      unint64_t v25 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v26 = result & ~v25;
      int64_t v27 = v26 >> 6;
      if (((-1LL << v26) & ~*(void *)(v10 + 8 * (v26 >> 6))) != 0)
      {
        uint64_t v13 = __clz(__rbit64((-1LL << v26) & ~*(void *)(v10 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          int64_t v30 = v27 == v29;
          if (v27 == v29) {
            int64_t v27 = 0LL;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v10 + 8 * v27);
        }

        while (v31 == -1);
        uint64_t v13 = __clz(__rbit64(~v31)) + (v27 << 6);
      }

      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      uint64_t v14 = *(void *)(v6 + 48) + 24 * v13;
      *(_BYTE *)uint64_t v14 = v22;
      *(void *)(v14 + 8) = v23;
      *(void *)(v14 + swift_weakDestroy(v0 + 16) = v24;
      ++*(void *)(v6 + 16);
      int v3 = v20;
    }
  }

  uint64_t result = swift_release();
  uint64_t *v2 = v6;
  return result;
}

        uint64_t v11 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }

      uint64_t v20 = *(char *)(*(void *)(v3 + 48) + v16);
      Hasher.init(_seed:)(v30, *(void *)(v6 + 40));
      Hasher._combine(_:)(qword_1007EB0E0[v20]);
      uint64_t result = Hasher._finalize()();
      int64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v22 = result & ~v21;
      uint64_t v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          unint64_t v26 = v23 == v25;
          if (v23 == v25) {
            uint64_t v23 = 0LL;
          }
          v24 |= v26;
          int64_t v27 = *(void *)(v13 + 8 * v23);
        }

        while (v27 == -1);
        uint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(_BYTE *)(*(void *)(v6 + 48) + v14) = v20;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  uint64_t *v2 = v6;
  return result;
}

        uint64_t v9 = (v19 - 1) & v19;
        uint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      int64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
      uint64_t v22 = *v21;
      uint64_t v23 = v21[1];
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      uint64_t result = Hasher._finalize()();
      unint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        int64_t v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          unint64_t v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0LL;
          }
          v27 |= v29;
          int64_t v30 = *(void *)(v11 + 8 * v26);
        }

        while (v30 == -1);
        uint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      uint64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
      *uint64_t v15 = v22;
      v15[1] = v23;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release();
  uint64_t *v2 = v6;
  return result;
}

        uint64_t v10 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
      }

      uint64_t v20 = *(void *)(*(void *)(v4 + 48) + 8 * v16);
      int64_t v21 = *(void *)(v7 + 40);
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      unint64_t v24 = v23;
      Hasher.init(_seed:)(v37, v21);
      String.hash(into:)(v37, v22, v24);
      unint64_t v25 = Hasher._finalize()();
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v26 = -1LL << *(_BYTE *)(v7 + 32);
      int64_t v27 = v25 & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1LL << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v29 = 0;
        int64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v31 = v28 == v30;
          if (v28 == v30) {
            unint64_t v28 = 0LL;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v11 + 8 * v28);
        }

        while (v32 == -1);
        uint64_t v14 = __clz(__rbit64(~v32)) + (v28 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(void *)(*(void *)(v7 + 48) + 8 * v14) = v20;
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release(v4);
  *int v3 = v7;
  return result;
}

        uint64_t v11 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }

      uint64_t v20 = *(char *)(*(void *)(v3 + 48) + v16);
      Hasher.init(_seed:)(v30, *(void *)(v6 + 40));
      Hasher._combine(_:)(dword_1007EB238[v20]);
      uint64_t result = Hasher._finalize()();
      int64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v22 = result & ~v21;
      uint64_t v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          unint64_t v26 = v23 == v25;
          if (v23 == v25) {
            uint64_t v23 = 0LL;
          }
          v24 |= v26;
          int64_t v27 = *(void *)(v13 + 8 * v23);
        }

        while (v27 == -1);
        uint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(_BYTE *)(*(void *)(v6 + 48) + v14) = v20;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release();
  uint64_t *v2 = v6;
  return result;
}

        uint64_t v9 = (v17 - 1) & v17;
        uint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }

      uint64_t v19 = *(void *)(*(void *)(v3 + 48) + 8 * v15);
      uint64_t v20 = *(void *)(v6 + 40);
      int64_t v21 = type metadata accessor for AnyCancellable(0LL);
      uint64_t v22 = sub_100007864( (unint64_t *)&unk_1009AC370,  (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable,  (uint64_t)&protocol conformance descriptor for AnyCancellable);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v20, v21, v22);
      uint64_t v23 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1LL << v24) & ~*(void *)(v10 + 8 * (v24 >> 6))) != 0)
      {
        uint64_t v13 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v10 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v26 = 0;
        int64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          unint64_t v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0LL;
          }
          v26 |= v28;
          unint64_t v29 = *(void *)(v10 + 8 * v25);
        }

        while (v29 == -1);
        uint64_t v13 = __clz(__rbit64(~v29)) + (v25 << 6);
      }

      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      *(void *)(*(void *)(v6 + 48) + 8 * v13) = v19;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release();
  uint64_t *v2 = v6;
  return result;
}

        uint64_t v12 = (v19 - 1) & v19;
        uint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }

      int64_t v21 = *(void *)(*(void *)(v4 + 48) + 8 * v17);
      uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v7 + 40), v21);
      uint64_t v22 = -1LL << *(_BYTE *)(v7 + 32);
      uint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v14 + 8 * (v23 >> 6))) != 0)
      {
        uint64_t v15 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          int64_t v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0LL;
          }
          v25 |= v27;
          unint64_t v28 = *(void *)(v14 + 8 * v24);
        }

        while (v28 == -1);
        uint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }

      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      *(void *)(*(void *)(v7 + 48) + 8 * v15) = v21;
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release(v4);
  *int v3 = v7;
  return result;
}

        uint64_t v12 = (v19 - 1) & v19;
        uint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }

      int64_t v21 = *(unsigned __int8 *)(*(void *)(v4 + 48) + v17);
      Hasher.init(_seed:)(v31, *(void *)(v7 + 40));
      Hasher._combine(_:)(v21);
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1LL << *(_BYTE *)(v7 + 32);
      uint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v14 + 8 * (v23 >> 6))) != 0)
      {
        uint64_t v15 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          int64_t v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0LL;
          }
          v25 |= v27;
          unint64_t v28 = *(void *)(v14 + 8 * v24);
        }

        while (v28 == -1);
        uint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }

      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      *(_BYTE *)(*(void *)(v7 + 48) + v15) = v21;
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release(v4);
  *int v3 = v7;
  return result;
}

        uint64_t v13 = (v21 - 1) & v21;
        uint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
      }

      uint64_t v23 = v7;
      unint64_t v24 = *(void *)(*(void *)(v7 + 48) + 8 * v19);
      unint64_t v25 = *(void *)(v10 + 40);
      unint64_t v26 = sub_100004AEC(a3);
      int64_t v27 = sub_1000372EC(a4, a3, (uint64_t)&protocol conformance descriptor for XPCSession<A>);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v25, v26, v27);
      unint64_t v28 = -1LL << *(_BYTE *)(v10 + 32);
      unint64_t v29 = result & ~v28;
      int64_t v30 = v29 >> 6;
      if (((-1LL << v29) & ~*(void *)(v14 + 8 * (v29 >> 6))) != 0)
      {
        uint64_t v17 = __clz(__rbit64((-1LL << v29) & ~*(void *)(v14 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v31 = 0;
        uint64_t v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v33 = v30 == v32;
          if (v30 == v32) {
            int64_t v30 = 0LL;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v14 + 8 * v30);
        }

        while (v34 == -1);
        uint64_t v17 = __clz(__rbit64(~v34)) + (v30 << 6);
      }

      *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      *(void *)(*(void *)(v10 + 48) + 8 * v17) = v24;
      ++*(void *)(v10 + 16);
      uint64_t v7 = v23;
    }
  }

  uint64_t result = swift_release();
  *uint64_t v6 = v10;
  return result;
}

        uint64_t v11 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }

      uint64_t v20 = *(_DWORD *)(*(void *)(v3 + 48) + 4 * v16);
      uint64_t result = static Hasher._hash(seed:bytes:count:)(*(void *)(v6 + 40), v20, 4LL);
      int64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v22 = result & ~v21;
      uint64_t v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          unint64_t v26 = v23 == v25;
          if (v23 == v25) {
            uint64_t v23 = 0LL;
          }
          v24 |= v26;
          int64_t v27 = *(void *)(v13 + 8 * v23);
        }

        while (v27 == -1);
        uint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(_DWORD *)(*(void *)(v6 + 48) + 4 * v14) = v20;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release();
  uint64_t *v2 = v6;
  return result;
}

        uint64_t v10 = (v19 - 1) & v19;
        uint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }

      int64_t v21 = *(void *)(*(void *)(v3 + 48) + 8 * v17);
      Hasher.init(_seed:)(v32, *(void *)(v6 + 40));
      uint64_t v22 = *(id *)(v21 + 32);
      NSObject.hash(into:)(v32);

      uint64_t result = Hasher._finalize()();
      uint64_t v23 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
      {
        uint64_t v15 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v26 = 0;
        int64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          unint64_t v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0LL;
          }
          v26 |= v28;
          unint64_t v29 = *(void *)(v12 + 8 * v25);
        }

        while (v29 == -1);
        uint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release();
  uint64_t *v2 = v6;
  return result;
}

        uint64_t v10 = (v19 - 1) & v19;
        uint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }

      int64_t v21 = *(void *)(*(void *)(v3 + 48) + 8 * v17);
      Hasher.init(_seed:)(v32, *(void *)(v6 + 40));
      uint64_t v22 = *(id *)(v21 + 40);
      NSObject.hash(into:)(v32);

      uint64_t result = Hasher._finalize()();
      uint64_t v23 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
      {
        uint64_t v15 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v26 = 0;
        int64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          unint64_t v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0LL;
          }
          v26 |= v28;
          unint64_t v29 = *(void *)(v12 + 8 * v25);
        }

        while (v29 == -1);
        uint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release();
  uint64_t *v2 = v6;
  return result;
}

        uint64_t v9 = (v18 - 1) & v18;
        uint64_t v45 = v19;
        uint64_t v16 = __clz(__rbit64(v18)) + (v19 << 6);
      }

      int64_t v21 = *(void *)(v3 + 48) + 88 * v16;
      uint64_t v22 = *(void *)v21;
      uint64_t v23 = *(void *)(v21 + 8);
      unint64_t v24 = *(void *)(v21 + 24);
      unint64_t v25 = *(_BYTE *)(v21 + 32);
      int64_t v27 = *(void *)(v21 + 40);
      unint64_t v26 = *(void *)(v21 + 48);
      uint64_t v43 = *(void *)(v21 + 56);
      uint64_t v44 = *(void *)(v21 + 16);
      unint64_t v41 = *(void *)(v21 + 72);
      BOOL v42 = *(void *)(v21 + 64);
      char v40 = *(void *)(v21 + 80);
      Hasher.init(_seed:)(v46, *(void *)(v6 + 40));
      String.hash(into:)(v46, v22, v23);
      uint64_t result = Hasher._finalize()();
      unint64_t v28 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v29 = result & ~v28;
      int64_t v30 = v29 >> 6;
      if (((-1LL << v29) & ~*(void *)(v10 + 8 * (v29 >> 6))) != 0)
      {
        uint64_t v13 = __clz(__rbit64((-1LL << v29) & ~*(void *)(v10 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v31 = 0;
        uint64_t v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v33 = v30 == v32;
          if (v30 == v32) {
            int64_t v30 = 0LL;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v10 + 8 * v30);
        }

        while (v34 == -1);
        uint64_t v13 = __clz(__rbit64(~v34)) + (v30 << 6);
      }

      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      uint64_t v14 = *(void *)(v6 + 48) + 88 * v13;
      *(void *)uint64_t v14 = v22;
      *(void *)(v14 + 8) = v23;
      uint64_t v12 = v45;
      *(void *)(v14 + swift_weakDestroy(v0 + 16) = v44;
      *(void *)(v14 + 24) = v24;
      *(_BYTE *)(v14 + 32) = v25;
      *(void *)(v14 + 40) = v27;
      *(void *)(v14 + 48) = v26;
      *(void *)(v14 + 56) = v43;
      *(void *)(v14 + 64) = v42;
      *(void *)(v14 + 72) = v41;
      int v3 = v39;
      *(void *)(v14 + 80) = v40;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release();
  uint64_t *v2 = v6;
  return result;
}

        uint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }

      uint64_t v22 = *(void *)(*(void *)(v4 + 48) + 8 * v18);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
      uint64_t v23 = -1LL << *(_BYTE *)(v7 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1LL << v24) & ~*(void *)(v13 + 8 * (v24 >> 6))) != 0)
      {
        uint64_t v16 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v26 = 0;
        int64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          unint64_t v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0LL;
          }
          v26 |= v28;
          unint64_t v29 = *(void *)(v13 + 8 * v25);
        }

        while (v29 == -1);
        uint64_t v16 = __clz(__rbit64(~v29)) + (v25 << 6);
      }

      *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * vswift_weakDestroy(v0 + 16) = v22;
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release(v4);
  *int v3 = v7;
  return result;
}

        uint64_t v12 = (v19 - 1) & v19;
        uint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }

      *(void *)&uint64_t v6 = *(void *)(*(void *)(v3 + 48) + 8 * v17);
      int64_t v30 = v6;
      Hasher.init(_seed:)(v31, *(void *)(v7 + 40));
      Hasher._combine(_:)(v30);
      Hasher._combine(_:)(DWORD1(v30));
      uint64_t result = Hasher._finalize()();
      int64_t v21 = -1LL << *(_BYTE *)(v7 + 32);
      uint64_t v22 = result & ~v21;
      uint64_t v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v14 + 8 * (v22 >> 6))) != 0)
      {
        uint64_t v15 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v14 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          unint64_t v26 = v23 == v25;
          if (v23 == v25) {
            uint64_t v23 = 0LL;
          }
          v24 |= v26;
          int64_t v27 = *(void *)(v14 + 8 * v23);
        }

        while (v27 == -1);
        uint64_t v15 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      *((void *)&v6 + 1) = *((void *)&v30 + 1);
      *(void *)(*(void *)(v7 + 48) + 8 * v15) = v30;
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  uint64_t *v2 = v7;
  return result;
}

        uint64_t v10 = (v19 - 1) & v19;
        uint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      int64_t v21 = v4;
      uint64_t v22 = *(void *)(v4 + 48) + 24 * v17;
      uint64_t v23 = *(void *)v22;
      unint64_t v24 = *(void *)(v22 + 8);
      unint64_t v25 = *(_DWORD *)(v22 + 16);
      Hasher.init(_seed:)(v37, *(void *)(v7 + 40));
      sub_10001736C(v23, v24);
      Data.hash(into:)(v37, v23, v24);
      sub_100016F9C(v23, v24);
      Hasher._combine(_:)(v25);
      uint64_t result = Hasher._finalize()();
      unint64_t v26 = -1LL << *(_BYTE *)(v7 + 32);
      int64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1LL << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v29 = 0;
        int64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v31 = v28 == v30;
          if (v28 == v30) {
            unint64_t v28 = 0LL;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v11 + 8 * v28);
        }

        while (v32 == -1);
        uint64_t v14 = __clz(__rbit64(~v32)) + (v28 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      uint64_t v15 = *(void *)(v7 + 48) + 24 * v14;
      *(void *)uint64_t v15 = v23;
      *(void *)(v15 + 8) = v24;
      *(_DWORD *)(v15 + swift_weakDestroy(v0 + 16) = v25;
      ++*(void *)(v7 + 16);
      unint64_t v4 = v21;
    }
  }

  uint64_t result = swift_release(v4);
  *int v3 = v7;
  return result;
}

  uint64_t v36 = a5(0LL);
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v36);
  __break(1u);
  return result;
}

    uint64_t v10 = (v19 - 1) & v19;
    uint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    int64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    uint64_t result = Hasher._finalize()();
    unint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        unint64_t v29 = v26 == v28;
        if (v26 == v28) {
          unint64_t v26 = 0LL;
        }
        v27 |= v29;
        int64_t v30 = *(void *)(v11 + 8 * v26);
      }

      while (v30 == -1);
      uint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    uint64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
    *uint64_t v15 = v22;
    v15[1] = v23;
    ++*(void *)(v6 + 16);
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_38;
  }

  uint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    uint64_t v13 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v13 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_36;
    }
    uint64_t v19 = *(void *)(v8 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

    uint64_t v11 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    uint64_t v20 = *(_BYTE *)(*(void *)(v3 + 48) + v16);
    uint64_t result = static Hasher._hash(seed:bytes:count:)(*(void *)(v6 + 40), v20, 1LL);
    int64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v22 = result & ~v21;
    uint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        unint64_t v26 = v23 == v25;
        if (v23 == v25) {
          uint64_t v23 = 0LL;
        }
        v24 |= v26;
        int64_t v27 = *(void *)(v13 + 8 * v23);
      }

      while (v27 == -1);
      uint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(_BYTE *)(*(void *)(v6 + 48) + v14) = v20;
    ++*(void *)(v6 + 16);
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    uint64_t result = swift_release(v3);
    uint64_t v2 = v28;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    uint64_t v7 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

    uint64_t v9 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    uint64_t v20 = (unsigned __int8 *)(*(void *)(v3 + 48) + 24 * v16);
    int64_t v21 = *v20;
    uint64_t v22 = *((void *)v20 + 1);
    uint64_t v23 = *((void *)v20 + 2);
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    Hasher._combine(_:)(v21);
    swift_bridgeObjectRetain_n(v23, 2LL);
    String.hash(into:)(v33, v22, v23);
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    unint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v10 + 8 * (v25 >> 6))) != 0)
    {
      uint64_t v13 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v10 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        unint64_t v29 = v26 == v28;
        if (v26 == v28) {
          unint64_t v26 = 0LL;
        }
        v27 |= v29;
        int64_t v30 = *(void *)(v10 + 8 * v26);
      }

      while (v30 == -1);
      uint64_t v13 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
    uint64_t v14 = *(void *)(v6 + 48) + 24 * v13;
    *(_BYTE *)uint64_t v14 = v21;
    *(void *)(v14 + 8) = v22;
    *(void *)(v14 + swift_weakDestroy(v0 + 16) = v23;
    ++*(void *)(v6 + 16);
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v32)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3, 2LL);
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v31 + 8 * v19);
  if (v18)
  {
    uint64_t v12 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v12 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v12 >= v32) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v31 + 8 * v12);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

    uint64_t v11 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    uint64_t v20 = *(char *)(*(void *)(v3 + 48) + v16);
    Hasher.init(_seed:)(v29, *(void *)(v6 + 40));
    Hasher._combine(_:)(qword_1007EB0E0[v20]);
    uint64_t result = Hasher._finalize()();
    int64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v22 = result & ~v21;
    uint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        unint64_t v26 = v23 == v25;
        if (v23 == v25) {
          uint64_t v23 = 0LL;
        }
        v24 |= v26;
        int64_t v27 = *(void *)(v13 + 8 * v23);
      }

      while (v27 == -1);
      uint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(_BYTE *)(*(void *)(v6 + 48) + v14) = v20;
    ++*(void *)(v6 + 16);
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    uint64_t result = swift_release(v3);
    uint64_t v2 = v28;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    uint64_t v7 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

    uint64_t v10 = (v19 - 1) & v19;
    uint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    int64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    uint64_t result = Hasher._finalize()();
    unint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        unint64_t v29 = v26 == v28;
        if (v26 == v28) {
          unint64_t v26 = 0LL;
        }
        v27 |= v29;
        int64_t v30 = *(void *)(v11 + 8 * v26);
      }

      while (v30 == -1);
      uint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    uint64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
    *uint64_t v15 = v22;
    v15[1] = v23;
    ++*(void *)(v6 + 16);
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_38;
  }

  uint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    uint64_t v13 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v13 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_36;
    }
    uint64_t v19 = *(void *)(v8 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

    uint64_t v10 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
LABEL_27:
    uint64_t v20 = *(void **)(*(void *)(v4 + 48) + 8 * v16);
    int64_t v21 = *(void *)(v7 + 40);
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    unint64_t v24 = v23;
    Hasher.init(_seed:)(v37, v21);
    unint64_t v25 = v20;
    String.hash(into:)(v37, v22, v24);
    unint64_t v26 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    int64_t v27 = -1LL << *(_BYTE *)(v7 + 32);
    unint64_t v28 = v26 & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1LL << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v30 = 0;
      uint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v32 = v29 == v31;
        if (v29 == v31) {
          unint64_t v29 = 0LL;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v11 + 8 * v29);
      }

      while (v33 == -1);
      uint64_t v14 = __clz(__rbit64(~v33)) + (v29 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(void *)(*(void *)(v7 + 48) + 8 * v14) = v25;
    ++*(void *)(v7 + 16);
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v36)
  {
LABEL_36:
    uint64_t result = swift_release_n(v4, 2LL);
    int v3 = v34;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v35 + 8 * v19);
  if (v18)
  {
    uint64_t v13 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v13 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v13 >= v36) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v35 + 8 * v13);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

    uint64_t v11 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    uint64_t v20 = *(char *)(*(void *)(v3 + 48) + v16);
    Hasher.init(_seed:)(v29, *(void *)(v6 + 40));
    Hasher._combine(_:)(dword_1007EB238[v20]);
    uint64_t result = Hasher._finalize()();
    int64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v22 = result & ~v21;
    uint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        unint64_t v26 = v23 == v25;
        if (v23 == v25) {
          uint64_t v23 = 0LL;
        }
        v24 |= v26;
        int64_t v27 = *(void *)(v13 + 8 * v23);
      }

      while (v27 == -1);
      uint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(_BYTE *)(*(void *)(v6 + 48) + v14) = v20;
    ++*(void *)(v6 + 16);
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    uint64_t result = swift_release();
    uint64_t v2 = v28;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    uint64_t v7 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

    uint64_t v9 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_27:
    uint64_t v19 = *(void *)(*(void *)(v3 + 48) + 8 * v15);
    uint64_t v20 = *(void *)(v6 + 40);
    int64_t v21 = type metadata accessor for AnyCancellable(0LL);
    uint64_t v22 = sub_100007864( (unint64_t *)&unk_1009AC370,  (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable,  (uint64_t)&protocol conformance descriptor for AnyCancellable);
    swift_retain();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v20, v21, v22);
    uint64_t v23 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1LL << v24) & ~*(void *)(v10 + 8 * (v24 >> 6))) != 0)
    {
      uint64_t v13 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v10 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v26 = 0;
      int64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        unint64_t v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0LL;
        }
        v26 |= v28;
        unint64_t v29 = *(void *)(v10 + 8 * v25);
      }

      while (v29 == -1);
      uint64_t v13 = __clz(__rbit64(~v29)) + (v25 << 6);
    }

    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
    *(void *)(*(void *)(v6 + 48) + 8 * v13) = v19;
    ++*(void *)(v6 + 16);
  }

  unint64_t v18 = v16 + 3;
  if (v18 >= v32)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3, 2LL);
    uint64_t v2 = v30;
    goto LABEL_38;
  }

  uint64_t v17 = *(void *)(v31 + 8 * v18);
  if (v17)
  {
    uint64_t v12 = v18;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v12 >= v32) {
      goto LABEL_36;
    }
    uint64_t v17 = *(void *)(v31 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_26;
    }
  }

    uint64_t v12 = (v19 - 1) & v19;
    uint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_27:
    int64_t v21 = *(void *)(*(void *)(v4 + 48) + 8 * v17);
    uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v7 + 40), v21);
    uint64_t v22 = -1LL << *(_BYTE *)(v7 + 32);
    uint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)(v14 + 8 * (v23 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        int64_t v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0LL;
        }
        v25 |= v27;
        unint64_t v28 = *(void *)(v14 + 8 * v24);
      }

      while (v28 == -1);
      uint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
    }

    *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    *(void *)(*(void *)(v7 + 48) + 8 * v15) = v21;
    ++*(void *)(v7 + 16);
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v13)
  {
LABEL_36:
    uint64_t result = swift_release(v4);
    int v3 = v29;
    goto LABEL_38;
  }

  uint64_t v19 = *(void *)(v9 + 8 * v20);
  if (v19)
  {
    uint64_t v8 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v8 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v8 >= v13) {
      goto LABEL_36;
    }
    uint64_t v19 = *(void *)(v9 + 8 * v8);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

    uint64_t v12 = (v19 - 1) & v19;
    uint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_27:
    int64_t v21 = *(unsigned __int8 *)(*(void *)(v4 + 48) + v17);
    Hasher.init(_seed:)(v30, *(void *)(v7 + 40));
    Hasher._combine(_:)(v21);
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1LL << *(_BYTE *)(v7 + 32);
    uint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)(v14 + 8 * (v23 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        int64_t v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0LL;
        }
        v25 |= v27;
        unint64_t v28 = *(void *)(v14 + 8 * v24);
      }

      while (v28 == -1);
      uint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
    }

    *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    *(_BYTE *)(*(void *)(v7 + 48) + v15) = v21;
    ++*(void *)(v7 + 16);
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v13)
  {
LABEL_36:
    uint64_t result = swift_release(v4);
    int v3 = v29;
    goto LABEL_38;
  }

  uint64_t v19 = *(void *)(v9 + 8 * v20);
  if (v19)
  {
    uint64_t v8 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v8 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v8 >= v13) {
      goto LABEL_36;
    }
    uint64_t v19 = *(void *)(v9 + 8 * v8);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

    uint64_t v13 = (v21 - 1) & v21;
    uint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_27:
    uint64_t v23 = *(void *)(*(void *)(v7 + 48) + 8 * v19);
    unint64_t v24 = *(void *)(v10 + 40);
    swift_retain();
    unint64_t v25 = sub_100004AEC(a3);
    unint64_t v26 = sub_1000372EC(a4, a3, (uint64_t)&protocol conformance descriptor for XPCSession<A>);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v24, v25, v26);
    int64_t v27 = -1LL << *(_BYTE *)(v10 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1LL << v28) & ~*(void *)(v14 + 8 * (v28 >> 6))) != 0)
    {
      uint64_t v17 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v14 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v30 = 0;
      uint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v32 = v29 == v31;
        if (v29 == v31) {
          unint64_t v29 = 0LL;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v14 + 8 * v29);
      }

      while (v33 == -1);
      uint64_t v17 = __clz(__rbit64(~v33)) + (v29 << 6);
    }

    *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
    *(void *)(*(void *)(v10 + 48) + 8 * v17) = v23;
    ++*(void *)(v10 + 16);
  }

  uint64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_36:
    uint64_t result = swift_release_n(v7, 2LL);
    uint64_t v6 = v34;
    goto LABEL_38;
  }

  int64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    uint64_t v16 = v22;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_36;
    }
    int64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_26;
    }
  }

    uint64_t v11 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    uint64_t v20 = *(_DWORD *)(*(void *)(v3 + 48) + 4 * v16);
    uint64_t result = static Hasher._hash(seed:bytes:count:)(*(void *)(v6 + 40), v20, 4LL);
    int64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v22 = result & ~v21;
    uint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        unint64_t v26 = v23 == v25;
        if (v23 == v25) {
          uint64_t v23 = 0LL;
        }
        v24 |= v26;
        int64_t v27 = *(void *)(v13 + 8 * v23);
      }

      while (v27 == -1);
      uint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(_DWORD *)(*(void *)(v6 + 48) + 4 * v14) = v20;
    ++*(void *)(v6 + 16);
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    uint64_t result = swift_release();
    uint64_t v2 = v28;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    uint64_t v7 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

    uint64_t v10 = (v19 - 1) & v19;
    uint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_27:
    int64_t v21 = *(void *)(*(void *)(v3 + 48) + 8 * v17);
    Hasher.init(_seed:)(v32, *(void *)(v6 + 40));
    uint64_t v22 = *(void **)(v21 + 32);
    swift_retain();
    uint64_t v23 = v22;
    NSObject.hash(into:)(v32);

    uint64_t result = Hasher._finalize()();
    unint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v12 + 8 * (v25 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        unint64_t v29 = v26 == v28;
        if (v26 == v28) {
          unint64_t v26 = 0LL;
        }
        v27 |= v29;
        int64_t v30 = *(void *)(v12 + 8 * v26);
      }

      while (v30 == -1);
      uint64_t v15 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
    ++*(void *)(v6 + 16);
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_38;
  }

  uint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    uint64_t v14 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_36;
    }
    uint64_t v19 = *(void *)(v8 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

    uint64_t v10 = (v19 - 1) & v19;
    uint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_27:
    int64_t v21 = *(void *)(*(void *)(v3 + 48) + 8 * v17);
    Hasher.init(_seed:)(v32, *(void *)(v6 + 40));
    uint64_t v22 = *(void **)(v21 + 40);
    swift_retain();
    uint64_t v23 = v22;
    NSObject.hash(into:)(v32);

    uint64_t result = Hasher._finalize()();
    unint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v12 + 8 * (v25 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        unint64_t v29 = v26 == v28;
        if (v26 == v28) {
          unint64_t v26 = 0LL;
        }
        v27 |= v29;
        int64_t v30 = *(void *)(v12 + 8 * v26);
      }

      while (v30 == -1);
      uint64_t v15 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
    ++*(void *)(v6 + 16);
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_38;
  }

  uint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    uint64_t v14 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_36;
    }
    uint64_t v19 = *(void *)(v8 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

    uint64_t v9 = (v18 - 1) & v18;
    uint64_t v44 = v19;
    uint64_t v16 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_27:
    int64_t v21 = *(void *)(v3 + 48) + 88 * v16;
    uint64_t v22 = *(void *)v21;
    uint64_t v23 = *(void *)(v21 + 8);
    unint64_t v24 = *(void *)(v21 + 24);
    uint64_t v43 = *(void *)(v21 + 16);
    BOOL v42 = *(_BYTE *)(v21 + 32);
    unint64_t v25 = *(void *)(v21 + 48);
    unint64_t v26 = *(void *)(v21 + 64);
    char v40 = *(void *)(v21 + 56);
    unint64_t v41 = *(void *)(v21 + 40);
    int64_t v27 = *(void *)(v21 + 80);
    unint64_t v39 = *(void *)(v21 + 72);
    Hasher.init(_seed:)(v45, *(void *)(v6 + 40));
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
    String.hash(into:)(v45, v22, v23);
    uint64_t result = Hasher._finalize()();
    unint64_t v28 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v29 = result & ~v28;
    int64_t v30 = v29 >> 6;
    if (((-1LL << v29) & ~*(void *)(v10 + 8 * (v29 >> 6))) != 0)
    {
      uint64_t v13 = __clz(__rbit64((-1LL << v29) & ~*(void *)(v10 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v31 = 0;
      uint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v33 = v30 == v32;
        if (v30 == v32) {
          int64_t v30 = 0LL;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v10 + 8 * v30);
      }

      while (v34 == -1);
      uint64_t v13 = __clz(__rbit64(~v34)) + (v30 << 6);
    }

    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
    uint64_t v14 = *(void *)(v6 + 48) + 88 * v13;
    *(void *)uint64_t v14 = v22;
    *(void *)(v14 + 8) = v23;
    uint64_t v12 = v44;
    *(void *)(v14 + swift_weakDestroy(v0 + 16) = v43;
    *(void *)(v14 + 24) = v24;
    *(_BYTE *)(v14 + 32) = v42;
    *(void *)(v14 + 40) = v41;
    *(void *)(v14 + 48) = v25;
    *(void *)(v14 + 56) = v40;
    *(void *)(v14 + 64) = v26;
    int v3 = v38;
    *(void *)(v14 + 72) = v39;
    *(void *)(v14 + 80) = v27;
    ++*(void *)(v6 + 16);
  }

  uint64_t v20 = v12 + 4;
  if (v12 + 4 >= v37)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3, 2LL);
    uint64_t v2 = v35;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v36 + 8 * v20);
  if (v18)
  {
    uint64_t v19 = v12 + 4;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v19 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v19 >= v37) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v36 + 8 * v19);
    ++v20;
    if (v18) {
      goto LABEL_26;
    }
  }

    uint64_t v11 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_27:
    uint64_t v22 = *(void *)(v7 + 40);
    uint64_t v23 = *(id *)(*(void *)(v4 + 48) + 8 * v18);
    uint64_t result = NSObject._rawHashValue(seed:)(v22);
    unint64_t v24 = -1LL << *(_BYTE *)(v7 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v13 + 8 * (v25 >> 6))) != 0)
    {
      uint64_t v16 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        unint64_t v29 = v26 == v28;
        if (v26 == v28) {
          unint64_t v26 = 0LL;
        }
        v27 |= v29;
        int64_t v30 = *(void *)(v13 + 8 * v26);
      }

      while (v30 == -1);
      uint64_t v16 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
    *(void *)(*(void *)(v7 + 48) + 8 * vswift_weakDestroy(v0 + 16) = v23;
    ++*(void *)(v7 + 16);
  }

  int64_t v21 = v19 + 3;
  if (v21 >= v12)
  {
LABEL_36:
    uint64_t result = swift_release_n(v4, 2LL);
    int v3 = v31;
    goto LABEL_38;
  }

  uint64_t v20 = *(void *)(v9 + 8 * v21);
  if (v20)
  {
    uint64_t v15 = v21;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v15 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v15 >= v12) {
      goto LABEL_36;
    }
    uint64_t v20 = *(void *)(v9 + 8 * v15);
    ++v21;
    if (v20) {
      goto LABEL_26;
    }
  }

    uint64_t v12 = (v19 - 1) & v19;
    uint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_27:
    *(void *)&uint64_t v6 = *(void *)(*(void *)(v3 + 48) + 8 * v17);
    unint64_t v29 = v6;
    Hasher.init(_seed:)(v30, *(void *)(v7 + 40));
    Hasher._combine(_:)(v29);
    Hasher._combine(_:)(DWORD1(v29));
    uint64_t result = Hasher._finalize()();
    int64_t v21 = -1LL << *(_BYTE *)(v7 + 32);
    uint64_t v22 = result & ~v21;
    uint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v14 + 8 * (v22 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v14 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        unint64_t v26 = v23 == v25;
        if (v23 == v25) {
          uint64_t v23 = 0LL;
        }
        v24 |= v26;
        int64_t v27 = *(void *)(v14 + 8 * v23);
      }

      while (v27 == -1);
      uint64_t v15 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    *((void *)&v6 + 1) = *((void *)&v29 + 1);
    *(void *)(*(void *)(v7 + 48) + 8 * v15) = v29;
    ++*(void *)(v7 + 16);
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v13)
  {
LABEL_36:
    uint64_t result = swift_release(v3);
    uint64_t v2 = v28;
    goto LABEL_38;
  }

  uint64_t v19 = *(void *)(v9 + 8 * v20);
  if (v19)
  {
    uint64_t v8 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v8 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v8 >= v13) {
      goto LABEL_36;
    }
    uint64_t v19 = *(void *)(v9 + 8 * v8);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

    uint64_t v10 = (v19 - 1) & v19;
    uint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    int64_t v21 = *(void *)(v4 + 48) + 24 * v17;
    uint64_t v22 = *(void *)v21;
    uint64_t v23 = *(void *)(v21 + 8);
    unint64_t v24 = *(_DWORD *)(v21 + 16);
    Hasher.init(_seed:)(v34, *(void *)(v7 + 40));
    sub_10001736C(v22, v23);
    sub_10001736C(v22, v23);
    Data.hash(into:)(v34, v22, v23);
    sub_100016F9C(v22, v23);
    Hasher._combine(_:)(v24);
    uint64_t result = Hasher._finalize()();
    unint64_t v25 = -1LL << *(_BYTE *)(v7 + 32);
    unint64_t v26 = result & ~v25;
    int64_t v27 = v26 >> 6;
    if (((-1LL << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        int64_t v30 = v27 == v29;
        if (v27 == v29) {
          int64_t v27 = 0LL;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v11 + 8 * v27);
      }

      while (v31 == -1);
      uint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    uint64_t v15 = *(void *)(v7 + 48) + 24 * v14;
    *(void *)uint64_t v15 = v22;
    *(void *)(v15 + 8) = v23;
    *(_DWORD *)(v15 + swift_weakDestroy(v0 + 16) = v24;
    ++*(void *)(v7 + 16);
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v33)
  {
LABEL_36:
    uint64_t result = swift_release_n(v4, 2LL);
    goto LABEL_38;
  }

  uint64_t v19 = *(void *)(v32 + 8 * v20);
  if (v19)
  {
    uint64_t v13 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v13 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v13 >= v33) {
      goto LABEL_36;
    }
    uint64_t v19 = *(void *)(v32 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

  unint64_t v28 = type metadata accessor for BluetoothCommunicationCoordinator.Error(0LL);
  unint64_t v29 = v12;
  int64_t v30 = 10LL;
LABEL_27:
  swift_storeEnumTagMultiPayload(v29, v28, v30);
  swift_storeEnumTagMultiPayload(v12, v10, 1LL);
  a1(v12);
  return sub_100015794((uint64_t)v12, &qword_1009A1B70);
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

    swift_bridgeObjectRelease();
    int v47 = _swiftEmptyArrayStorage;
    goto LABEL_27;
  }

  unint64_t v38 = v232;
  swift_retain();
  swift_bridgeObjectRetain(v37);
  char v40 = sub_1001AB69C(v39, v38);
  swift_bridgeObjectRelease();
  swift_release();
  swift_retain();
  unint64_t v41 = sub_1001A9B2C((uint64_t)v40, v38);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRetain(*((void *)a1 + 3));
  uint64_t v43 = sub_1006F1530(v42);
  swift_bridgeObjectRelease();
  uint64_t v44 = sub_10028E698((uint64_t)v41, v43, 0, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v45 = v44[2];
  if (!v45) {
    goto LABEL_26;
  }
  uint64_t v254 = (uint64_t)_swiftEmptyArrayStorage;
  sub_1000328D0(0, v45, 0);
  uint64_t v46 = (uint64_t)(v44 + 4);
  int v47 = (void *)v254;
  do
  {
    sub_100013044(v46, (uint64_t)&aBlock);
    int v48 = v248;
    int64_t v49 = v249;
    sub_100012ED8(&aBlock, (uint64_t)v248);
    (*(void (**)(void *))(*(void *)(*((void *)v49 + 1) + 8LL) + 32LL))(v48);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
    if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
    {
      sub_1000328D0(0, v47[2] + 1LL, 1);
      int v47 = (void *)v254;
    }

    uint64_t v51 = v47[2];
    uint64_t v50 = v47[3];
    if (v51 >= v50 >> 1)
    {
      sub_1000328D0(v50 > 1, v51 + 1, 1);
      int v47 = (void *)v254;
    }

    v47[2] = v51 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v244 + 32))( (unint64_t)v47 + ((*(unsigned __int8 *)(v244 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v244 + 80))
    + *(void *)(v244 + 72) * v51,
      v5,
      v245);
    uint64_t v254 = (uint64_t)v47;
    v46 += 40LL;
    --v45;
  }

  while (v45);
LABEL_17:
  swift_bridgeObjectRelease();
  uint64_t v14 = v234;
LABEL_27:
  uint64_t v226 = *((void *)a1 + 4);
  uint64_t v62 = v232;
  swift_retain();
  swift_bridgeObjectRetain(v47);
  uint64_t v8 = 0LL;
  int64_t v64 = sub_1001A9DB0(v63, v62);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v5 = (uint64_t)sub_1001ABA6C((uint64_t)v64);
  swift_bridgeObjectRelease();
  __int128 v65 = v228;
  sub_1006E5460((char)v229);
  unint64_t v67 = v65[1] == 1;
  double v235 = a1;
  if (!v67) {
    goto LABEL_45;
  }
  uint64_t v68 = _swiftEmptyArrayStorage;
  v253[0] = (uint64_t)_swiftEmptyArrayStorage;
  __int128 v69 = *(unsigned __int8 **)(v5 + 16);
  swift_bridgeObjectRetain(v5);
  if (!v69) {
    goto LABEL_44;
  }
  uint64_t v222 = 0LL;
  a1 = 0LL;
  int v70 = v5 + 32;
  uint64_t v8 = (char *)v240;
  char v239 = v5;
  int v71 = v242.n128_u64[0];
  do
  {
    sub_100013044(v70, (uint64_t)&aBlock);
    sub_100013044((uint64_t)&aBlock, (uint64_t)&v254);
    uint64_t v72 = sub_100004AEC(&qword_1009B0530);
    uint64_t v73 = swift_dynamicCast(v71, &v254, v72, v8, 6LL);
    uint64_t v74 = (void (*)(uint64_t, uint64_t, uint64_t, char *))*((void *)v241 + 7);
    if ((v73 & 1) != 0)
    {
      v74(v71, 0LL, 1LL, v8);
      int v75 = v231;
      sub_10002218C(v71, v231, type metadata accessor for SharedBeaconRecord);
      int v76 = *(unsigned __int8 *)(v75 + *((int *)v8 + 16));
      sub_100018C68(v75, type metadata accessor for SharedBeaconRecord);
      if (v76 != 1)
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
        goto LABEL_32;
      }
    }

    else
    {
      v74(v71, 1LL, 1LL, v8);
      sub_100015794(v71, (uint64_t *)&unk_1009AE470);
    }

    sub_100012EC0(&aBlock, (uint64_t)&v254);
    uint64_t v77 = v253[0];
    if ((swift_isUniquelyReferenced_nonNull_native(v253[0]) & 1) == 0)
    {
      sub_100032928(0, *(void *)(v77 + 16) + 1LL, 1);
      uint64_t v77 = v253[0];
    }

    uint64_t v79 = *(void *)(v77 + 16);
    uint64_t v78 = *(void *)(v77 + 24);
    if (v79 >= v78 >> 1) {
      sub_100032928(v78 > 1, v79 + 1, 1);
    }
    int v80 = v256;
    uint64_t v81 = (uint64_t)v257;
    int64_t v82 = sub_100037298((uint64_t)&v254, v256);
    __chkstk_darwin(v82);
    uint64_t v84 = (char *)&Configuration - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *))(v85 + 16))(v84);
    sub_1002BBA60(v79, (uint64_t)v84, v253, v80, v81);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v254);
    uint64_t v14 = v234;
    uint64_t v8 = (char *)v240;
    uint64_t v5 = v239;
LABEL_32:
    ++a1;
    v70 += 40LL;
    int v71 = v242.n128_u64[0];
  }

  while (v69 != a1);
  uint64_t v68 = (void *)v253[0];
  a1 = v235;
  uint64_t v8 = v222;
LABEL_44:
  swift_bridgeObjectRelease();
  sub_10018C088((uint64_t)v68);
  uint64_t v66 = swift_release();
  __int128 v65 = v228;
LABEL_45:
  uint64_t v240 = (uint64_t)v47;
  if (*v65 != 1)
  {
    uint64_t result = swift_bridgeObjectRelease();
    double v223 = 0LL;
    double v224 = 0LL;
LABEL_59:
    uint64_t v119 = v237;
    char v120 = static Date.distantPast.getter(result);
    __chkstk_darwin(v120);
    uint64_t v121 = v232;
    uint64_t v122 = v226;
    *(&Configuration - 4) = v232;
    *(&Configuration - 3) = v122;
    *(&Configuration - 2) = (uint64_t)v119;
    uint64_t v123 = v240;
    swift_bridgeObjectRetain(v240);
    uint64_t v124 = sub_100188E54( (uint64_t)_swiftEmptyDictionarySingleton,  (void (*)(uint64_t *, char *))sub_1001B1504,  (uint64_t)(&Configuration - 6),  v123);
    swift_bridgeObjectRelease_n(v123, 2LL);
    double v235 = *(unsigned __int8 **)(v225 + 8);
    ((void (*)(char *, uint64_t))v235)(v119, v238);
    double v259 = _swiftEmptyDictionarySingleton;
    swift_retain();
    sub_1001A988C((uint64_t)_swiftEmptyDictionarySingleton, v124, v121, (uint64_t *)&v259);
    uint64_t v126 = v125;
    swift_release();
    uint64_t v258 = v126;
    swift_bridgeObjectRelease();
    uint64_t v127 = (uint64_t)v233;
    if ((a1[56] & 1) != 0 || (a1[57] & 1) != 0)
    {
      sub_1001B142C(a1);
      uint64_t v128 = sub_1001B142C(a1);
      if (v227)
      {
        uint64_t v129 = v227;
        id v130 = (os_log_s *)Logger.logObject.getter(v129);
        uint64_t v131 = static os_log_type_t.default.getter(v130);
        if (os_log_type_enabled(v130, v131))
        {
          int v243 = v129;
          uint64_t v132 = swift_slowAlloc(22LL, -1LL);
          uint64_t v133 = swift_slowAlloc(32LL, -1LL);
          *(void *)&double aBlock = v133;
          *(_DWORD *)uint64_t v132 = 141558275;
          uint64_t v254 = 1752392040LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v254, v255, v132 + 4, v132 + 12);
          *(_WORD *)(v132 + 12) = 2081;
          uint64_t v134 = *((void *)a1 + 6);
          if (v134)
          {
            uint64_t v135 = *((void *)a1 + 5);
            uint64_t v136 = *((void *)a1 + 6);
          }

          else
          {
            uint64_t v135 = 0x6E776F6E6B6E75LL;
            uint64_t v136 = 0xE700000000000000LL;
          }

          swift_bridgeObjectRetain(v134);
          uint64_t v254 = sub_1003F11D4(v135, v136, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v254, v255, v132 + 14, v132 + 22);
          swift_bridgeObjectRelease();
          sub_1001B1498(a1);
          sub_1001B1498(a1);
          _os_log_impl( (void *)&_mh_execute_header,  v130,  v131,  "Subscribing context for %{private,mask.hash}s.",  (uint8_t *)v132,  0x16u);
          swift_arrayDestroy(v133, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v133, -1LL, -1LL);
          swift_slowDealloc(v132, -1LL, -1LL);

          uint64_t v14 = v234;
          uint64_t v144 = v232;
          uint64_t v129 = v243;
        }

        else
        {
          sub_1001B1498(a1);
          sub_1001B1498(a1);

          uint64_t v144 = v232;
        }

        id v145 = *(void *)(v144 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_locationFetchService);
        sub_1001A6900(v129, a1);
        type metadata accessor for Transaction(0LL);
        uint64_t v146 = swift_allocObject(&unk_1009456A0, 113LL, 7LL);
        *(void *)(v146 + swift_weakDestroy(v0 + 16) = v145;
        uint64_t v147 = *((_OWORD *)a1 + 3);
        *(_OWORD *)(v146 + 56) = *((_OWORD *)a1 + 2);
        *(_OWORD *)(v146 + 72) = v147;
        *(_OWORD *)(v146 + 88) = *((_OWORD *)a1 + 4);
        *(_OWORD *)(v146 + 97) = *(_OWORD *)(a1 + 73);
        uint64_t v148 = *((_OWORD *)a1 + 1);
        *(_OWORD *)(v146 + 24) = *(_OWORD *)a1;
        *(_OWORD *)(v146 + 40) = v148;
        sub_1001B142C(a1);
        swift_retain();
        static Transaction.asyncTask(name:block:)("LocationFetchService.addConnection", 34LL, 2LL, &unk_1009A48B0, v146);

        swift_release();
      }

      else
      {
        uint64_t v137 = (os_log_s *)Logger.logObject.getter(v128);
        uint64_t v138 = static os_log_type_t.default.getter(v137);
        if (os_log_type_enabled(v137, v138))
        {
          v242.n128_u64[0] = (unint64_t)v8;
          uint64_t v139 = swift_slowAlloc(32LL, -1LL);
          uint64_t v140 = swift_slowAlloc(64LL, -1LL);
          *(void *)&double aBlock = v140;
          *(_DWORD *)uint64_t v139 = 141558531;
          uint64_t v254 = 1752392040LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v254, v255, v139 + 4, v139 + 12);
          *(_WORD *)(v139 + 12) = 2081;
          uint64_t v141 = *((void *)a1 + 6);
          if (v141)
          {
            uint64_t v142 = *((void *)a1 + 5);
            uint64_t v143 = *((void *)a1 + 6);
          }

          else
          {
            uint64_t v142 = 0x6E776F6E6B6E75LL;
            uint64_t v143 = 0xE700000000000000LL;
          }

          swift_bridgeObjectRetain(v141);
          uint64_t v254 = sub_1003F11D4(v142, v143, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v254, v255, v139 + 14, v139 + 22);
          swift_bridgeObjectRelease();
          sub_1001B1498(a1);
          sub_1001B1498(a1);
          *(_WORD *)(v139 + 22) = 2080;
          uint64_t v254 = 0LL;
          uint64_t v149 = sub_100004AEC(&qword_1009A48A8);
          uint64_t v150 = String.init<A>(describing:)(&v254, v149);
          uint64_t v254 = sub_1003F11D4(v150, v151, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v254, v255, v139 + 24, v139 + 32);
          swift_bridgeObjectRelease();
          _os_log_impl( (void *)&_mh_execute_header,  v137,  v138,  "Did not subscribe context for %{private,mask.hash}s,\nconnection: %s. No connection.",  (uint8_t *)v139,  0x20u);
          swift_arrayDestroy(v140, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v140, -1LL, -1LL);
          swift_slowDealloc(v139, -1LL, -1LL);

          uint64_t v127 = (uint64_t)v233;
          uint64_t v14 = v234;
          uint64_t v8 = (char *)v242.n128_u64[0];
        }

        else
        {
          sub_1001B1498(a1);
          sub_1001B1498(a1);
        }
      }
    }

    uint64_t v152 = v259[8];
    double v229 = v259 + 8;
    uint64_t v153 = 1LL << *((_BYTE *)v259 + 32);
    uint64_t v154 = -1LL;
    if (v153 < 64) {
      uint64_t v154 = ~(-1LL << v153);
    }
    uint64_t v5 = v154 & v152;
    uint64_t v155 = (unint64_t)(v153 + 63) >> 6;
    uint64_t v222 = (char *)(v155 - 1);
    uint64_t v156 = swift_bridgeObjectRetain(v259);
    uint64_t v157 = 0LL;
    double v231 = v155;
    double v225 = v155 - 5;
    double v232 = v158;
    uint64_t v226 = v158 + 104;
    while (!v5)
    {
      uint64_t v165 = v157 + 1;
      if (__OFADD__(v157, 1LL)) {
        goto LABEL_150;
      }
      if (v165 < v231)
      {
        v166 = v229[v165];
        if (v166) {
          goto LABEL_87;
        }
        if (v157 + 2 >= v231)
        {
          ++v157;
        }

        else
        {
          v166 = v229[v157 + 2];
          if (v166)
          {
            uint64_t v165 = v157 + 2;
            goto LABEL_87;
          }

          if (v157 + 3 >= v231)
          {
            v157 += 2LL;
          }

          else
          {
            v166 = v229[v157 + 3];
            if (v166)
            {
              uint64_t v165 = v157 + 3;
LABEL_87:
              double v160 = (v166 - 1) & v166;
              uint64_t v161 = __clz(__rbit64(v166)) + (v165 << 6);
              uint64_t v157 = v165;
LABEL_83:
              double v162 = v232;
              (*(void (**)(uint64_t, unint64_t, uint64_t, __n128))(v244 + 16))( v127,  *(void *)(v232 + 48) + *(void *)(v244 + 72) * v161,  v245,  v156);
              double v163 = *(void *)(v162 + 56) + 40 * v161;
              double v164 = sub_100004AEC(&qword_1009A48A0);
              sub_100013044(v163, v127 + *(int *)(v164 + 48));
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v164 - 8) + 56LL))( v127,  0LL,  1LL,  v164);
              goto LABEL_93;
            }

            uint64_t v165 = v157 + 4;
            if (v157 + 4 >= v231)
            {
              v157 += 3LL;
            }

            else
            {
              v166 = v229[v165];
              if (v166) {
                goto LABEL_87;
              }
              while (v225 != v157)
              {
                v166 = *(void *)(v226 + 8 * v157++);
                if (v166)
                {
                  uint64_t v165 = v157 + 4;
                  goto LABEL_87;
                }
              }

              uint64_t v157 = (uint64_t)v222;
            }
          }
        }
      }

      v167 = sub_100004AEC(&qword_1009A48A0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v167 - 8) + 56LL))(v127, 1LL, 1LL, v167);
      double v160 = 0LL;
LABEL_93:
      sub_100015750(v127, (uint64_t)v14, &qword_1009A4898);
      char v168 = sub_100004AEC(&qword_1009A48A0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v168 - 8) + 48LL))(v14, 1LL, v168) == 1)
      {

        swift_release();
        sub_100018C68((uint64_t)v228, type metadata accessor for LocationFetchConfiguration);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return sub_10002214C((uint64_t)v223, v224);
      }

      uint64_t v240 = v160;
      int v241 = (char *)v157;
      sub_100012EC0((__int128 *)&v14[*(int *)(v168 + 48)], (uint64_t)&aBlock);
      uint64_t v169 = v248;
      uint64_t v170 = v249;
      sub_100012ED8(&aBlock, (uint64_t)v248);
      uint64_t v171 = (*((uint64_t (**)(void *, uint64_t (*)()))v170 + 2))(v169, v170);
      sub_100189694(v171, &v258);
      uint64_t v5 = v172;
      v242.n128_u64[0] = (unint64_t)v8;
      swift_bridgeObjectRelease();
      uint64_t v173 = (unint64_t)v5 >> 62;
      if ((unint64_t)v5 >> 62)
      {
        if (v5 < 0) {
          uint64_t v219 = v5;
        }
        else {
          uint64_t v219 = v5 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v5);
        if (!_CocoaArrayWrapper.endIndex.getter(v219))
        {
LABEL_143:
          swift_bridgeObjectRelease();
LABEL_144:
          uint64_t v127 = (uint64_t)v233;
          goto LABEL_79;
        }
      }

      else
      {
        uint64_t v174 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        swift_bridgeObjectRetain(v5);
        if (!v174) {
          goto LABEL_143;
        }
      }

      char v239 = v5 & 0xC000000000000001LL;
      if ((v5 & 0xC000000000000001LL) != 0)
      {
        uint64_t v175 = (unsigned __int8 *)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v5);
      }

      else
      {
        if (!*(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
          goto LABEL_149;
        }
        uint64_t v175 = (unsigned __int8 *)*(id *)(v5 + 32);
      }

      uint64_t v176 = v175;
      swift_bridgeObjectRelease();
      if (v173)
      {
        if (v5 < 0) {
          v178 = v5;
        }
        else {
          v178 = v5 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v5);
        uint64_t v177 = _CocoaArrayWrapper.endIndex.getter(v178);
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v177 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }

      uint64_t v179 = v248;
      uint64_t v180 = v249;
      sub_100012ED8(&aBlock, (uint64_t)v248);
      if (v177 != (*((unsigned __int8 (**)(void *, uint64_t (*)()))v180 + 3))(v179, v180))
      {

        uint64_t v127 = (uint64_t)v233;
        uint64_t v14 = v234;
LABEL_79:
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v244 + 8))(v14, v245);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
        uint64_t v8 = (char *)v242.n128_u64[0];
        goto LABEL_80;
      }

      if (v173)
      {
        if (v5 < 0) {
          uint64_t v183 = v5;
        }
        else {
          uint64_t v183 = v5 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v5);
        uint64_t v184 = v176;
        uint64_t v181 = _CocoaArrayWrapper.endIndex.getter(v183);
        if (v181)
        {
LABEL_113:
          uint64_t v185 = 4LL;
          while (1)
          {
            uint64_t v14 = (char *)(v185 - 4);
            int v186 = v239
                 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v185 - 4, v5)
                 : *(id *)(v5 + 8 * v185);
            uint64_t v187 = v186;
            if (__OFADD__(v14, 1LL)) {
              break;
            }
            int v243 = (id)(v185 - 3);
            double v256 = sub_100022898(0LL, (unint64_t *)&qword_1009A9C60, &OBJC_CLASS___SPBeaconLocation_ptr);
            double v257 = &off_100974788;
            uint64_t v254 = (uint64_t)v176;
            a1 = v176;
            uint64_t v188 = v176;
            uint64_t v189 = [v187 timestamp];
            uint64_t v190 = v237;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v189);

            uint64_t v191 = [v188 timestamp];
            v192 = v236;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v191);

            LOBYTE(v191) = static Date.== infix(_:_:)(v190, v192);
            int v193 = v192;
            uint64_t v8 = (char *)v238;
            uint64_t v194 = v235;
            ((void (*)(char *, uint64_t))v235)(v193, v238);
            ((void (*)(char *, char *))v194)(v190, v8);
            sub_100013044((uint64_t)&v254, (uint64_t)v253);
            if ((v191 & 1) == 0)
            {
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v253);
              sub_100013044((uint64_t)&v254, (uint64_t)v252);
LABEL_125:
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v252);
              sub_100013044((uint64_t)&v254, (uint64_t)v251);
LABEL_126:
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v251);
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v254);
              swift_bridgeObjectRelease();

LABEL_128:
              uint64_t v14 = v234;

              goto LABEL_144;
            }

            v195 = v187;
            [v195 longitude];
            uint64_t v197 = v196;
            objc_msgSend((id)*sub_100012ED8(v253, v253[3]), "longitude");
            uint64_t v199 = v198;

            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v253);
            sub_100013044((uint64_t)&v254, (uint64_t)v252);
            if (v197 != v199) {
              goto LABEL_125;
            }
            uint64_t v200 = v195;
            [v200 latitude];
            v202 = v201;
            objc_msgSend((id)*sub_100012ED8(v252, v252[3]), "latitude");
            uint64_t v204 = v203;

            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v252);
            sub_100013044((uint64_t)&v254, (uint64_t)v251);
            if (v202 != v204) {
              goto LABEL_126;
            }
            uint64_t v205 = v200;
            [v205 horizontalAccuracy];
            char v207 = v206;
            objc_msgSend((id)*sub_100012ED8(v251, v251[3]), "horizontalAccuracy");
            uint64_t v209 = v208;

            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v251);
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v254);

            if (v207 != v209)
            {

              swift_bridgeObjectRelease();
              goto LABEL_128;
            }

            ++v185;
            uint64_t v176 = a1;
            if (v243 == (id)v181) {
              goto LABEL_123;
            }
          }

          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          swift_once(&qword_10099B188, sub_100189D08);
          goto LABEL_2;
        }
      }

      else
      {
        uint64_t v181 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        swift_bridgeObjectRetain(v5);
        uint64_t v182 = v176;
        if (v181) {
          goto LABEL_113;
        }
      }

    swift_bridgeObjectRelease();
    int64_t v49 = _swiftEmptyArrayStorage;
    goto LABEL_27;
  }

  swift_retain();
  swift_bridgeObjectRetain(v40);
  BOOL v42 = sub_1001AB69C(v41, v37);
  swift_bridgeObjectRelease();
  swift_release();
  swift_retain();
  uint64_t v43 = sub_1001A9B2C((uint64_t)v42, v37);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRetain(*(void *)(a1 + 24));
  uint64_t v45 = sub_1006F1530(v44);
  swift_bridgeObjectRelease();
  uint64_t v46 = sub_10028E698((uint64_t)v43, v45, 0, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v47 = v46[2];
  if (!v47) {
    goto LABEL_26;
  }
  double v251 = (uint64_t)_swiftEmptyArrayStorage;
  sub_1000328D0(0, v47, 0);
  int v48 = (uint64_t)(v46 + 4);
  int64_t v49 = (void *)v251;
  do
  {
    sub_100013044(v48, (uint64_t)&aBlock);
    uint64_t v50 = v245;
    uint64_t v51 = v246;
    sub_100012ED8(&aBlock, (uint64_t)v245);
    (*(void (**)(void *))(*(void *)(*((void *)v51 + 1) + 8LL) + 32LL))(v50);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
    if ((swift_isUniquelyReferenced_nonNull_native(v49) & 1) == 0)
    {
      sub_1000328D0(0, v49[2] + 1LL, 1);
      int64_t v49 = (void *)v251;
    }

    uint64_t v53 = v49[2];
    uint64_t v52 = v49[3];
    if (v53 >= v52 >> 1)
    {
      sub_1000328D0(v52 > 1, v53 + 1, 1);
      int64_t v49 = (void *)v251;
    }

    v49[2] = v53 + 1;
    (*(void (**)(unint64_t, uint64_t, unint64_t))(v242 + 32))( (unint64_t)v49 + ((*(unsigned __int8 *)(v242 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v242 + 80))
    + *(void *)(v242 + 72) * v53,
      v8,
      v232);
    double v251 = (uint64_t)v49;
    v48 += 40LL;
    --v47;
  }

  while (v47);
LABEL_17:
  swift_bridgeObjectRelease();
LABEL_27:
  uint64_t v222 = *(void *)(a1 + 32);
  int64_t v64 = v228;
  swift_retain();
  swift_bridgeObjectRetain(v49);
  uint64_t v11 = 0LL;
  uint64_t v66 = sub_1001A9DB0(v65, v64);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v8 = (uint64_t)sub_1001ABA6C((uint64_t)v66);
  swift_bridgeObjectRelease();
  unint64_t v67 = v225;
  sub_1006E5460((char)v223);
  __int128 v69 = v67[1] == 1;
  int v70 = (uint64_t)v231;
  double v233 = (void (*)(char *, uint64_t))a1;
  if (!v69) {
    goto LABEL_45;
  }
  int v71 = _swiftEmptyArrayStorage;
  v250[0] = (uint64_t)_swiftEmptyArrayStorage;
  a1 = *(void *)(v8 + 16);
  swift_bridgeObjectRetain(v8);
  if (!a1) {
    goto LABEL_44;
  }
  uint64_t v226 = 0LL;
  uint64_t v72 = 0LL;
  uint64_t v73 = v8 + 32;
  uint64_t v74 = v238;
  double v237 = v8;
  uint64_t v5 = v240.n128_u64[0];
  do
  {
    if (v72 >= *(void *)(v8 + 16)) {
      goto LABEL_152;
    }
    sub_100013044(v73, (uint64_t)&aBlock);
    sub_100013044((uint64_t)&aBlock, (uint64_t)&v251);
    int v75 = sub_100004AEC(&qword_1009B0530);
    int v76 = swift_dynamicCast(v5, &v251, v75, v74, 6LL);
    uint64_t v77 = (void (*)(unint64_t, uint64_t, uint64_t, uint64_t))*((void *)v239 + 7);
    if ((v76 & 1) != 0)
    {
      v77(v5, 0LL, 1LL, v74);
      uint64_t v11 = v229;
      sub_10002218C(v5, (uint64_t)v229, type metadata accessor for SharedBeaconRecord);
      uint64_t v78 = v11[*(int *)(v74 + 64)];
      sub_100018C68((uint64_t)v11, type metadata accessor for SharedBeaconRecord);
      if (v78 != 1)
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
        goto LABEL_32;
      }
    }

    else
    {
      v77(v5, 1LL, 1LL, v74);
      sub_100015794(v5, (uint64_t *)&unk_1009AE470);
    }

    sub_100012EC0(&aBlock, (uint64_t)&v251);
    uint64_t v79 = v250[0];
    if ((swift_isUniquelyReferenced_nonNull_native(v250[0]) & 1) == 0)
    {
      sub_100032928(0, *(void *)(v79 + 16) + 1LL, 1);
      uint64_t v79 = v250[0];
    }

    uint64_t v81 = *(void *)(v79 + 16);
    int v80 = *(void *)(v79 + 24);
    if (v81 >= v80 >> 1) {
      sub_100032928(v80 > 1, v81 + 1, 1);
    }
    int64_t v82 = v253;
    uint64_t v83 = (uint64_t)v254;
    uint64_t v84 = sub_100037298((uint64_t)&v251, v253);
    __chkstk_darwin(v84);
    uint64_t v11 = (char *)&v214 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *))(v86 + 16))(v11);
    sub_1002BBA60(v81, (uint64_t)v11, v250, v82, v83);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v251);
    int v70 = (uint64_t)v231;
    uint64_t v74 = v238;
    uint64_t v8 = v237;
LABEL_32:
    ++v72;
    v73 += 40LL;
    uint64_t v5 = v240.n128_u64[0];
  }

  while (a1 != v72);
  int v71 = (void *)v250[0];
  int64_t v64 = v228;
  uint64_t v11 = v226;
LABEL_44:
  swift_bridgeObjectRelease();
  sub_10018C088((uint64_t)v71);
  uint64_t v68 = swift_release();
  unint64_t v67 = v225;
  a1 = (unint64_t)v233;
LABEL_45:
  __int128 v69 = *v67 == 1;
  uint64_t v238 = (uint64_t)v49;
  if (!v69)
  {
    uint64_t v226 = v11;
    uint64_t result = swift_bridgeObjectRelease();
    double v223 = 0LL;
    uint64_t v218 = 0LL;
LABEL_59:
    uint64_t v119 = v235;
    char v120 = static Date.distantPast.getter(result);
    __chkstk_darwin(v120);
    uint64_t v121 = v228;
    uint64_t v122 = v222;
    *(&v214 - 4) = v228;
    *(&v214 - 3) = v122;
    *(&v214 - 2) = (uint64_t)v119;
    uint64_t v123 = v238;
    swift_bridgeObjectRetain(v238);
    uint64_t v11 = v226;
    uint64_t v124 = sub_100188E54( (uint64_t)&_swiftEmptyDictionarySingleton,  (void (*)(uint64_t *, char *))sub_1001B36C4,  (uint64_t)(&v214 - 6),  v123);
    swift_bridgeObjectRelease_n(v123, 2LL);
    uint64_t v125 = v121;
    double v233 = *(void (**)(char *, uint64_t))(v221 + 8);
    v233(v119, v236);
    double v256 = &_swiftEmptyDictionarySingleton;
    swift_retain();
    sub_1001A988C((uint64_t)&_swiftEmptyDictionarySingleton, v124, v121, (uint64_t *)&v256);
    uint64_t v127 = v126;
    swift_release();
    double v255 = v127;
    swift_bridgeObjectRelease();
    uint64_t v128 = v232;
    uint64_t v129 = (uint64_t)v230;
    if ((*(_BYTE *)(a1 + 56) & 1) != 0 || (*(_BYTE *)(a1 + 57) & 1) != 0)
    {
      sub_1001B142C((void *)a1);
      id v130 = sub_1001B142C((void *)a1);
      if (v224)
      {
        uint64_t v8 = (uint64_t)v224;
        uint64_t v131 = (os_log_s *)Logger.logObject.getter(v8);
        uint64_t v132 = static os_log_type_t.default.getter(v131);
        if (os_log_type_enabled(v131, v132))
        {
          int v241 = v8;
          v240.n128_u64[0] = (unint64_t)v11;
          uint64_t v133 = swift_slowAlloc(22LL, -1LL);
          uint64_t v134 = swift_slowAlloc(32LL, -1LL);
          *(void *)&double aBlock = v134;
          *(_DWORD *)uint64_t v133 = 141558275;
          double v251 = 1752392040LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v133 + 4, v133 + 12);
          *(_WORD *)(v133 + 12) = 2081;
          uint64_t v135 = *(void *)(a1 + 48);
          if (v135)
          {
            uint64_t v136 = *(void *)(a1 + 40);
            uint64_t v137 = *(void *)(a1 + 48);
          }

          else
          {
            uint64_t v136 = 0x6E776F6E6B6E75LL;
            uint64_t v137 = 0xE700000000000000LL;
          }

          swift_bridgeObjectRetain(v135);
          double v251 = sub_1003F11D4(v136, v137, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v133 + 14, v133 + 22);
          swift_bridgeObjectRelease();
          sub_1001B1498((void *)a1);
          sub_1001B1498((void *)a1);
          _os_log_impl( (void *)&_mh_execute_header,  v131,  v132,  "Subscribing context for %{private,mask.hash}s.",  (uint8_t *)v133,  0x16u);
          swift_arrayDestroy(v134, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v134, -1LL, -1LL);
          swift_slowDealloc(v133, -1LL, -1LL);

          uint64_t v128 = v232;
          int v70 = (uint64_t)v231;
          uint64_t v125 = v228;
          uint64_t v11 = (char *)v240.n128_u64[0];
          uint64_t v8 = v241;
        }

        else
        {
          sub_1001B1498((void *)a1);
          sub_1001B1498((void *)a1);

          int v70 = (uint64_t)v231;
        }

        id v145 = *(void *)(v125 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_locationFetchService);
        sub_1001A6900((void *)v8, (void *)a1);
        type metadata accessor for Transaction(0LL);
        uint64_t v146 = swift_allocObject(&unk_100945FD8, 113LL, 7LL);
        *(void *)(v146 + swift_weakDestroy(v0 + 16) = v145;
        uint64_t v147 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)(v146 + 56) = *(_OWORD *)(a1 + 32);
        *(_OWORD *)(v146 + 72) = v147;
        *(_OWORD *)(v146 + 88) = *(_OWORD *)(a1 + 64);
        *(_OWORD *)(v146 + 97) = *(_OWORD *)(a1 + 73);
        uint64_t v148 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)(v146 + 24) = *(_OWORD *)a1;
        *(_OWORD *)(v146 + 40) = v148;
        sub_1001B142C((void *)a1);
        swift_retain();
        static Transaction.asyncTask(name:block:)("LocationFetchService.addConnection", 34LL, 2LL, &unk_1009A49F8, v146);

        swift_release();
      }

      else
      {
        uint64_t v138 = (os_log_s *)Logger.logObject.getter(v130);
        uint64_t v139 = static os_log_type_t.default.getter(v138);
        if (os_log_type_enabled(v138, v139))
        {
          uint64_t v140 = swift_slowAlloc(32LL, -1LL);
          uint64_t v141 = swift_slowAlloc(64LL, -1LL);
          *(void *)&double aBlock = v141;
          *(_DWORD *)uint64_t v140 = 141558531;
          double v251 = 1752392040LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v140 + 4, v140 + 12);
          *(_WORD *)(v140 + 12) = 2081;
          uint64_t v142 = *(void *)(a1 + 48);
          if (v142)
          {
            uint64_t v143 = *(void *)(a1 + 40);
            uint64_t v144 = *(void *)(a1 + 48);
          }

          else
          {
            uint64_t v143 = 0x6E776F6E6B6E75LL;
            uint64_t v144 = 0xE700000000000000LL;
          }

          uint64_t v8 = v140 + 14;
          swift_bridgeObjectRetain(v142);
          double v251 = sub_1003F11D4(v143, v144, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v140 + 14, v140 + 22);
          swift_bridgeObjectRelease();
          sub_1001B1498((void *)a1);
          sub_1001B1498((void *)a1);
          *(_WORD *)(v140 + 22) = 2080;
          double v251 = 0LL;
          uint64_t v149 = sub_100004AEC(&qword_1009A48A8);
          uint64_t v150 = String.init<A>(describing:)(&v251, v149);
          double v251 = sub_1003F11D4(v150, v151, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v140 + 24, v140 + 32);
          swift_bridgeObjectRelease();
          _os_log_impl( (void *)&_mh_execute_header,  v138,  v139,  "Did not subscribe context for %{private,mask.hash}s,\nconnection: %s. No connection.",  (uint8_t *)v140,  0x20u);
          swift_arrayDestroy(v141, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v141, -1LL, -1LL);
          swift_slowDealloc(v140, -1LL, -1LL);

          uint64_t v128 = v232;
          uint64_t v129 = (uint64_t)v230;
          int v70 = (uint64_t)v231;
        }

        else
        {
          sub_1001B1498((void *)a1);
          sub_1001B1498((void *)a1);

          uint64_t v128 = v232;
        }
      }
    }

    uint64_t v152 = v256[8];
    uint64_t v226 = (char *)(v256 + 8);
    uint64_t v153 = 1LL << *((_BYTE *)v256 + 32);
    uint64_t v154 = -1LL;
    if (v153 < 64) {
      uint64_t v154 = ~(-1LL << v153);
    }
    a1 = v154 & v152;
    uint64_t v5 = (unint64_t)(v153 + 63) >> 6;
    uint64_t v217 = v5 - 1;
    uint64_t v155 = swift_bridgeObjectRetain(v256);
    uint64_t v156 = 0LL;
    double v228 = v5;
    uint64_t v221 = v5 - 5;
    double v229 = (char *)v157;
    uint64_t v222 = v157 + 104;
    if (!a1)
    {
LABEL_83:
      double v163 = (char *)(v156 + 1);
      if (__OFADD__(v156, 1LL)) {
        goto LABEL_151;
      }
      if ((uint64_t)v163 < v228)
      {
        double v164 = *(void *)&v226[8 * (void)v163];
        if (v164)
        {
LABEL_86:
          a1 = (v164 - 1) & v164;
          double v159 = __clz(__rbit64(v164)) + ((void)v163 << 6);
          uint64_t v156 = (unint64_t)v163;
          goto LABEL_82;
        }

        if ((uint64_t)(v156 + 2) >= v228)
        {
          ++v156;
        }

        else
        {
          double v164 = *(void *)&v226[8 * v156 + 16];
          if (v164)
          {
            double v163 = (char *)(v156 + 2);
            goto LABEL_86;
          }

          if ((uint64_t)(v156 + 3) >= v228)
          {
            v156 += 2LL;
          }

          else
          {
            double v164 = *(void *)&v226[8 * v156 + 24];
            if (v164)
            {
              double v163 = (char *)(v156 + 3);
              goto LABEL_86;
            }

            double v163 = (char *)(v156 + 4);
            if ((uint64_t)(v156 + 4) >= v228)
            {
              v156 += 3LL;
            }

            else
            {
              double v164 = *(void *)&v226[8 * (void)v163];
              if (v164) {
                goto LABEL_86;
              }
              while (v221 != v156)
              {
                double v164 = *(void *)(v222 + 8 * v156++);
                if (v164)
                {
                  double v163 = (char *)(v156 + 4);
                  goto LABEL_86;
                }
              }

              uint64_t v156 = v217;
            }
          }
        }
      }

      uint64_t v165 = sub_100004AEC(&qword_1009A48A0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v165 - 8) + 56LL))(v129, 1LL, 1LL, v165);
      a1 = 0LL;
      goto LABEL_92;
    }

    while (1)
    {
      double v158 = __clz(__rbit64(a1));
      a1 &= a1 - 1;
      double v159 = v158 | (v156 << 6);
LABEL_82:
      double v160 = (uint64_t)v229;
      (*(void (**)(uint64_t, unint64_t, unint64_t, __n128))(v242 + 16))( v129,  *((void *)v229 + 6) + *(void *)(v242 + 72) * v159,  v128,  v155);
      uint64_t v161 = *(void *)(v160 + 56) + 40 * v159;
      double v162 = sub_100004AEC(&qword_1009A48A0);
      sub_100013044(v161, v129 + *(int *)(v162 + 48));
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v162 - 8) + 56LL))(v129, 0LL, 1LL, v162);
LABEL_92:
      sub_100015750(v129, v70, &qword_1009A4898);
      v166 = sub_100004AEC(&qword_1009A48A0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v166 - 8) + 48LL))(v70, 1LL, v166) == 1)
      {
        swift_release();
        char v210 = v255;
        uint64_t v211 = objc_allocWithZone(&OBJC_CLASS___SPLocationFetchResult);
        sub_100022898(0LL, (unint64_t *)&qword_1009A9C60, &OBJC_CLASS___SPBeaconLocation_ptr);
        sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        swift_bridgeObjectRetain(v210);
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        v213 = [v211 initWithResults:isa];

        v220(v213, 0LL);
        swift_bridgeObjectRelease();

        sub_100018C68((uint64_t)v225, type metadata accessor for LocationFetchConfiguration);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return sub_10002214C((uint64_t)v223, v218);
      }

      uint64_t v238 = a1;
      char v239 = (char *)v156;
      sub_100012EC0((__int128 *)(v70 + *(int *)(v166 + 48)), (uint64_t)&aBlock);
      v167 = v245;
      char v168 = v246;
      sub_100012ED8(&aBlock, (uint64_t)v245);
      uint64_t v169 = (*((uint64_t (**)(void *, uint64_t (*)()))v168 + 2))(v167, v168);
      sub_100189694(v169, &v255);
      uint64_t v8 = v170;
      v240.n128_u64[0] = (unint64_t)v11;
      swift_bridgeObjectRelease();
      uint64_t v171 = (unint64_t)v8 >> 62;
      if ((unint64_t)v8 >> 62)
      {
        if (v8 < 0) {
          uint64_t v209 = v8;
        }
        else {
          uint64_t v209 = v8 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v8);
        uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v209);
        if (!v5)
        {
LABEL_79:
          swift_bridgeObjectRelease_n(v8, 2LL);
          uint64_t v129 = (uint64_t)v230;
          goto LABEL_80;
        }
      }

      else
      {
        uint64_t v5 = *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        swift_bridgeObjectRetain(v8);
        if (!v5) {
          goto LABEL_79;
        }
      }

      double v237 = v8 & 0xC000000000000001LL;
      if ((v8 & 0xC000000000000001LL) != 0)
      {
        char v172 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v8);
      }

      else
      {
        if (!*(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
          goto LABEL_150;
        }
        char v172 = *(id *)(v8 + 32);
      }

      a1 = (unint64_t)v172;
      swift_bridgeObjectRelease();
      if (v171)
      {
        if (v8 < 0) {
          uint64_t v173 = v8;
        }
        else {
          uint64_t v173 = v8 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v8);
        uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v173);
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v5 = *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }

      uint64_t v174 = v245;
      uint64_t v175 = v246;
      sub_100012ED8(&aBlock, (uint64_t)v245);
      if (v5 != (*((unsigned __int8 (**)(void *, uint64_t (*)()))v175 + 3))(v174, v175))
      {

        swift_bridgeObjectRelease();
LABEL_130:
        uint64_t v129 = (uint64_t)v230;
        int v70 = (uint64_t)v231;
LABEL_80:
        uint64_t v11 = (char *)v240.n128_u64[0];
        uint64_t v156 = (unint64_t)v239;
        a1 = v238;
        (*(void (**)(uint64_t, unint64_t))(v242 + 8))(v70, v128);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
        if (!a1) {
          goto LABEL_83;
        }
        continue;
      }

      if (v171)
      {
        if (v8 < 0) {
          v178 = v8;
        }
        else {
          v178 = v8 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v8);
        uint64_t v179 = (id)a1;
        uint64_t v176 = _CocoaArrayWrapper.endIndex.getter(v178);
        if (v176)
        {
LABEL_113:
          uint64_t v180 = 4LL;
          while (1)
          {
            uint64_t v5 = v180 - 4;
            uint64_t v181 = v237
                 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v180 - 4, v8)
                 : *(id *)(v8 + 8 * v180);
            uint64_t v182 = v181;
            if (__OFADD__(v5, 1LL)) {
              break;
            }
            int v241 = v180 - 3;
            double v253 = sub_100022898(0LL, (unint64_t *)&qword_1009A9C60, &OBJC_CLASS___SPBeaconLocation_ptr);
            uint64_t v254 = &off_100974788;
            double v251 = a1;
            uint64_t v183 = a1;
            uint64_t v184 = (id)a1;
            uint64_t v185 = [v182 timestamp];
            int v186 = v235;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v185);

            uint64_t v187 = [v184 timestamp];
            uint64_t v188 = v234;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v187);

            uint64_t v5 = static Date.== infix(_:_:)(v186, v188);
            uint64_t v189 = v188;
            uint64_t v11 = (char *)v236;
            uint64_t v190 = (void (*)(char *, char *))v233;
            v233(v189, v236);
            v190(v186, v11);
            sub_100013044((uint64_t)&v251, (uint64_t)v250);
            if ((v5 & 1) == 0)
            {
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v250);
              sub_100013044((uint64_t)&v251, (uint64_t)v249);
LABEL_126:
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v249);
              sub_100013044((uint64_t)&v251, (uint64_t)v248);
LABEL_127:
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v248);
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v251);
              swift_bridgeObjectRelease_n(v8, 2LL);

LABEL_129:
              uint64_t v128 = v232;
              goto LABEL_130;
            }

            uint64_t v5 = v182;
            [(id)v5 longitude];
            v192 = v191;
            objc_msgSend((id)*sub_100012ED8(v250, v250[3]), "longitude");
            uint64_t v194 = v193;

            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v250);
            sub_100013044((uint64_t)&v251, (uint64_t)v249);
            if (v192 != v194) {
              goto LABEL_126;
            }
            uint64_t v5 = (unint64_t)(id)v5;
            [(id)v5 latitude];
            v196 = v195;
            objc_msgSend((id)*sub_100012ED8(v249, v249[3]), "latitude");
            uint64_t v198 = v197;

            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v249);
            sub_100013044((uint64_t)&v251, (uint64_t)v248);
            if (v196 != v198) {
              goto LABEL_127;
            }
            uint64_t v5 = (unint64_t)(id)v5;
            [(id)v5 horizontalAccuracy];
            uint64_t v200 = v199;
            objc_msgSend((id)*sub_100012ED8(v248, v248[3]), "horizontalAccuracy");
            v202 = v201;

            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v248);
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v251);

            if (v200 != v202)
            {

              swift_bridgeObjectRelease_n(v8, 2LL);
              goto LABEL_129;
            }

            ++v180;
            a1 = v183;
            if (v241 == v176) {
              goto LABEL_123;
            }
          }

          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
          goto LABEL_153;
        }
      }

      else
      {
        uint64_t v176 = *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        swift_bridgeObjectRetain(v8);
        uint64_t v177 = (id)a1;
        if (v176) {
          goto LABEL_113;
        }
      }

        sub_100018C68(v59, type metadata accessor for LostModeRecord);
        goto LABEL_27;
      }
    }

    else if (!v46)
    {
      goto LABEL_35;
    }

    sub_10001DC4C(v60, v59, type metadata accessor for LostModeRecord);
    goto LABEL_26;
  }

  sub_100015794(v55, &qword_1009AA840);
LABEL_30:
  _Block_copy(v53);
  if ((v47 & 1) != 0) {
    sub_1003EBA60(v33, v77, v80, v79, v82, v81, v46, v34, v53);
  }
  else {
    sub_1003EC18C(v33, v34, (void (**)(const void *, void *))v53);
  }
  _Block_release(v53);
LABEL_34:
  _Block_release(v53);
  _Block_release(v53);
}

    int64_t v30 = sub_100004AEC(&qword_1009A2570);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v9, 1LL, 1LL, v30);
    uint64_t v66 = 0LL;
LABEL_27:
    sub_100015750((uint64_t)v9, (uint64_t)v11, (uint64_t *)&unk_1009A58D0);
    uint64_t v31 = sub_100004AEC(&qword_1009A2570);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48LL))(v11, 1LL, v31) == 1)
    {
      swift_release();
      return (uint64_t)v17;
    }

    uint64_t v32 = *v11;
    uint64_t v33 = v11[1];
    uint64_t v34 = sub_10002218C( (uint64_t)v11 + *(int *)(v31 + 48),  (uint64_t)v5,  type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v35 = v63;
    static String.Encoding.utf8.getter(v34);
    uint64_t v36 = String.init(data:encoding:)(v32, v33, v35);
    __int128 v65 = v32;
    if (!v37) {
      uint64_t v36 = Data.hexString.getter(v32, v33);
    }
    unint64_t v38 = v36;
    unint64_t v39 = v37;
    char v40 = (uint64_t)v5;
    unint64_t v41 = sub_1001D18D4();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
    unint64_t v67 = v17;
    uint64_t v44 = sub_10030CF14(v38, v39);
    uint64_t v45 = v17[2];
    uint64_t v46 = (v43 & 1) == 0;
    int v47 = v45 + v46;
    if (__OFADD__(v45, v46))
    {
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }

    int v48 = v43;
    if (v17[3] >= v47)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v17 = v67;
        if ((v43 & 1) != 0) {
          goto LABEL_4;
        }
      }

      else
      {
        sub_100063F88();
        uint64_t v17 = v67;
        if ((v48 & 1) != 0) {
          goto LABEL_4;
        }
      }
    }

    else
    {
      sub_10004DCC4(v47, isUniquelyReferenced_nonNull_native);
      int64_t v49 = sub_10030CF14(v38, v39);
      if ((v48 & 1) != (v50 & 1)) {
        goto LABEL_46;
      }
      uint64_t v44 = v49;
      uint64_t v17 = v67;
      if ((v48 & 1) != 0)
      {
LABEL_4:
        unint64_t v18 = v17[7];
        uint64_t v19 = 8 * v44;

        *(void *)(v18 + v19) = v41;
        goto LABEL_5;
      }
    }

    v17[(v44 >> 6) + 8] |= 1LL << v44;
    uint64_t v51 = (uint64_t *)(v17[6] + 16 * v44);
    char *v51 = v38;
    v51[1] = v39;
    *(void *)(v17[7] + 8 * v44) = v41;
    uint64_t v52 = v17[2];
    uint64_t v53 = __OFADD__(v52, 1LL);
    uint64_t v54 = v52 + 1;
    if (v53) {
      goto LABEL_43;
    }
    v17[2] = v54;
    swift_bridgeObjectRetain(v39);
LABEL_5:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100016F9C(v65, v33);
    uint64_t v5 = (char *)v40;
    sub_100018C68(v40, type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v11 = v61;
    uint64_t v9 = v62;
    uint64_t v16 = v66;
  }

  unint64_t v28 = *(void *)(v57 + 8 * v29);
  if (v28)
  {
LABEL_15:
    int64_t v27 = v29;
LABEL_12:
    uint64_t v66 = (v28 - 1) & v28;
    uint64_t v20 = __clz(__rbit64(v28)) + (v27 << 6);
    int64_t v64 = v27;
    goto LABEL_8;
  }

  while (1)
  {
    int64_t v27 = v29 + 1;
    if (__OFADD__(v29, 1LL)) {
      break;
    }
    if (v27 >= v58)
    {
      int64_t v64 = v56;
      goto LABEL_26;
    }

    unint64_t v28 = *(void *)(v57 + 8 * v27);
    ++v29;
    if (v28) {
      goto LABEL_12;
    }
  }

    uint64_t v33 = sub_100004AEC(&qword_1009A11F8);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56LL))(v14, 1LL, 1LL, v33);
    uint64_t v23 = 0LL;
LABEL_27:
    sub_100015750((uint64_t)v14, (uint64_t)v17, (uint64_t *)&unk_1009A59B0);
    uint64_t v34 = sub_100004AEC(&qword_1009A11F8);
    uint64_t v35 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 48LL))(v17, 1LL, v34);
    uint64_t v36 = v35 == 1;
    if (v35 == 1) {
      return v36;
    }
    uint64_t v37 = &v17[*(int *)(v34 + 48)];
    unint64_t v38 = *v17;
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 32))(v10, v37, v4);
    unint64_t v39 = sub_10030CEE4(v38);
    if ((v40 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      return 0LL;
    }

    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( v8,  *(void *)(v29 + 56) + *(void *)(v5 + 72) * v39,  v4);
    unint64_t v41 = sub_100007864( &qword_10099DA90,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    BOOL v42 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v10, v4, v41);
    uint64_t v43 = *(void (**)(char *, uint64_t))(v5 + 8);
    v43(v8, v4);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v43)(v10, v4);
    if ((v42 & 1) == 0) {
      return v36;
    }
  }

  uint64_t v31 = *(void *)(v45 + 8 * v32);
  if (v31)
  {
LABEL_15:
    int64_t v30 = v32;
LABEL_12:
    uint64_t v23 = (v31 - 1) & v31;
    unint64_t v25 = __clz(__rbit64(v31)) + (v30 << 6);
    int64_t v49 = v30;
    goto LABEL_8;
  }

  while (1)
  {
    int64_t v30 = v32 + 1;
    if (__OFADD__(v32, 1LL)) {
      break;
    }
    if (v30 >= v46)
    {
      int64_t v49 = v44;
      goto LABEL_26;
    }

    uint64_t v31 = *(void *)(v45 + 8 * v30);
    ++v32;
    if (v31) {
      goto LABEL_12;
    }
  }

    int64_t v30 = sub_100004AEC(&qword_1009A5940);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v14, 1LL, 1LL, v30);
    int64_t v21 = 0LL;
LABEL_27:
    sub_100015750((uint64_t)v14, (uint64_t)v17, &qword_1009A5938);
    uint64_t v31 = sub_100004AEC(&qword_1009A5940);
    uint64_t v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48LL))(v17, 1LL, v31);
    uint64_t v33 = v32 == 1;
    if (v32 == 1) {
      return v33;
    }
    uint64_t v34 = (uint64_t)&v17[*(int *)(v31 + 48)];
    uint64_t v35 = *v17;
    sub_10002218C(v34, (uint64_t)v10, type metadata accessor for FeatureSupportMatrix);
    uint64_t v36 = sub_10030CF28(v35);
    if ((v37 & 1) == 0) {
      goto LABEL_46;
    }
    sub_10001DC4C( *(void *)(a2 + 56) + *(void *)(v58 + 72) * v36,  (uint64_t)v8,  type metadata accessor for FeatureSupportMatrix);
    if (*(unsigned __int8 *)v8 != *(unsigned __int8 *)v10 || (sub_1001D3DFC(v8[1], v10[1]) & 1) == 0)
    {
LABEL_45:
      sub_100018C68((uint64_t)v8, type metadata accessor for FeatureSupportMatrix);
LABEL_46:
      sub_100018C68((uint64_t)v10, type metadata accessor for FeatureSupportMatrix);
      return 0LL;
    }

    unint64_t v38 = v8[2];
    unint64_t v39 = v10[2];
    if (v38)
    {
      if (!v39) {
        goto LABEL_45;
      }
      swift_bridgeObjectRetain(v10[2]);
      char v40 = swift_bridgeObjectRetain(v38);
      unint64_t v41 = sub_1001D3DFC(v40, v39);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v41 & 1) == 0) {
        goto LABEL_45;
      }
    }

    else if (v39)
    {
      goto LABEL_45;
    }

    if ((sub_1001D3F90(v8[3], v10[3]) & 1) == 0) {
      goto LABEL_45;
    }
    BOOL v42 = v8[4];
    uint64_t v43 = v10[4];
    if (v42)
    {
      if (!v43) {
        goto LABEL_45;
      }
      swift_bridgeObjectRetain(v10[4]);
      uint64_t v44 = swift_bridgeObjectRetain(v42);
      uint64_t v45 = sub_1001D3F90(v44, v43);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v45 & 1) == 0) {
        goto LABEL_45;
      }
    }

    else if (v43)
    {
      goto LABEL_45;
    }

    uint64_t v46 = *(int *)(v57 + 36);
    int v47 = (char *)v8 + v46;
    int v48 = (char *)v10 + v46;
    int64_t v49 = sub_1001D6068();
    uint64_t v50 = sub_1001D60AC();
    LOBYTE(v47) = static CustomCodableKeyDictionary<>.== infix(_:_:)( v47,  v48,  &type metadata for FeatureSupportMatrixProductType,  &type metadata for Bool,  v49,  v50,  &protocol witness table for Bool,  &protocol witness table for Bool,  &protocol witness table for Bool);
    sub_100018C68((uint64_t)v8, type metadata accessor for FeatureSupportMatrix);
    uint64_t result = sub_100018C68((uint64_t)v10, type metadata accessor for FeatureSupportMatrix);
    a1 = v55;
  }

  unint64_t v28 = *(void *)(v53 + 8 * v29);
  if (v28)
  {
LABEL_15:
    int64_t v27 = v29;
LABEL_12:
    int64_t v21 = (v28 - 1) & v28;
    uint64_t v23 = __clz(__rbit64(v28)) + (v27 << 6);
    uint64_t v56 = v27;
    goto LABEL_8;
  }

  while (1)
  {
    int64_t v27 = v29 + 1;
    if (__OFADD__(v29, 1LL)) {
      break;
    }
    if (v27 >= v54)
    {
      uint64_t v56 = v52;
      goto LABEL_26;
    }

    unint64_t v28 = *(void *)(v53 + 8 * v27);
    ++v29;
    if (v28) {
      goto LABEL_12;
    }
  }

    uint64_t v34 = sub_100004AEC(v22);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56LL))(v13, 1LL, 1LL, v34);
    unint64_t v24 = 0LL;
LABEL_27:
    uint64_t v35 = v64;
    sub_100015750((uint64_t)v13, (uint64_t)v64, &qword_1009A5958);
    uint64_t v36 = sub_100004AEC(v22);
    uint64_t v37 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 48LL))(v35, 1LL, v36);
    uint64_t v66 = v37 == 1;
    if (v37 == 1) {
      return v66;
    }
    unint64_t v38 = v24;
    unint64_t v39 = v22;
    char v40 = v13;
    unint64_t v41 = (char *)v35 + *(int *)(v36 + 48);
    BOOL v42 = *v35;
    uint64_t v43 = v35[1];
    uint64_t v5 = v61;
    uint64_t v44 = v67;
    (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v9, v41, v67);
    uint64_t v45 = v42;
    uint64_t v46 = v62;
    int v47 = v9;
    int v48 = sub_10030CF14(v45, v43);
    uint64_t v50 = v49;
    swift_bridgeObjectRelease();
    if ((v50 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v47, v44);
      return 0;
    }

    uint64_t v51 = *(void *)(v46 + 56) + *(void *)(v5 + 72) * v48;
    uint64_t v52 = v63;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v63, v51, v44);
    uint64_t v53 = sub_100007864( &qword_1009A5968,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemVersionNumber,  (uint64_t)&protocol conformance descriptor for SystemVersionNumber);
    uint64_t v54 = dispatch thunk of static Equatable.== infix(_:_:)(v52, v47, v44, v53);
    uint64_t v55 = *(void (**)(char *, uint64_t))(v5 + 8);
    v55(v52, v44);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v55)(v47, v44);
    uint64_t v9 = v47;
    uint64_t v13 = v40;
    uint64_t v22 = v39;
    int64_t v21 = v38;
    if ((v54 & 1) == 0) {
      return v66;
    }
  }

  uint64_t v32 = *(void *)(v58 + 8 * v33);
  if (v32)
  {
LABEL_15:
    uint64_t v31 = v33;
LABEL_12:
    unint64_t v24 = (v32 - 1) & v32;
    unint64_t v25 = __clz(__rbit64(v32)) + (v31 << 6);
    __int128 v65 = v31;
    goto LABEL_8;
  }

  while (1)
  {
    uint64_t v31 = v33 + 1;
    if (__OFADD__(v33, 1LL)) {
      break;
    }
    if (v31 >= v59)
    {
      __int128 v65 = v57;
      goto LABEL_26;
    }

    uint64_t v32 = *(void *)(v58 + 8 * v31);
    ++v33;
    if (v32) {
      goto LABEL_12;
    }
  }

  __break(1u);
}

  unint64_t v39 = __OFADD__(v49++, 1LL);
  if (v39)
  {
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }

  if (v49 >= v47) {
    goto LABEL_45;
  }
  uint64_t v53 = *(void *)&v92[8 * v49];
  if (v53)
  {
LABEL_38:
    uint64_t v46 = (v53 - 1) & v53;
    uint64_t v52 = __clz(__rbit64(v53)) + (v49 << 6);
    goto LABEL_39;
  }

  uint64_t v54 = v49 + 1;
  if (v49 + 1 >= v47) {
    goto LABEL_45;
  }
  uint64_t v53 = *(void *)&v92[8 * v54];
  if (v53) {
    goto LABEL_37;
  }
  uint64_t v54 = v49 + 2;
  if (v49 + 2 >= v47) {
    goto LABEL_45;
  }
  uint64_t v53 = *(void *)&v92[8 * v54];
  if (v53) {
    goto LABEL_37;
  }
  uint64_t v54 = v49 + 3;
  if (v49 + 3 >= v47) {
    goto LABEL_45;
  }
  uint64_t v53 = *(void *)&v92[8 * v54];
  if (v53) {
    goto LABEL_37;
  }
  uint64_t v54 = v49 + 4;
  if (v49 + 4 >= v47) {
    goto LABEL_45;
  }
  uint64_t v53 = *(void *)&v92[8 * v54];
  if (v53)
  {
LABEL_37:
    int64_t v49 = v54;
    goto LABEL_38;
  }

  while (1)
  {
    int64_t v49 = v54 + 1;
    if (__OFADD__(v54, 1LL)) {
      goto LABEL_86;
    }
    if (v49 >= v47) {
      break;
    }
    uint64_t v53 = *(void *)&v92[8 * v49];
    ++v54;
    if (v53) {
      goto LABEL_38;
    }
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  uint64_t v43 = (v21 - 1) & v21;
  uint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; uint64_t v19 = __clz(__rbit64(v6)) | (i << 6))
  {
    unint64_t v24 = 16 * v19;
    unint64_t v25 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v19);
    int64_t v27 = *v25;
    unint64_t v26 = v25[1];
    unint64_t v28 = (uint64_t *)(*(void *)(v1 + 56) + v24);
    unint64_t v29 = *v28;
    int64_t v30 = v28[1];
    uint64_t v45 = v27;
    uint64_t v46 = v26;
    v44[0] = v29;
    v44[1] = v30;
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v30);
    swift_dynamicCast(v7, v44, v11, v10, 7LL);
    uint64_t v31 = v45;
    uint64_t v32 = v46;
    sub_10006A358(v7, v8);
    sub_10006A358(v8, v50);
    sub_10006A358(v50, &v48);
    uint64_t v33 = sub_10030CF14(v31, v32);
    uint64_t v34 = v33;
    if ((v35 & 1) != 0)
    {
      BOOL v42 = i;
      uint64_t v12 = v8;
      uint64_t v13 = v7;
      uint64_t v14 = v1;
      uint64_t v15 = v11;
      uint64_t v16 = v10;
      uint64_t v17 = (uint64_t *)(v3[6] + 16 * v33);
      swift_bridgeObjectRelease();
      *uint64_t v17 = v31;
      v17[1] = v32;
      uint64_t v10 = v16;
      uint64_t v11 = v15;
      __int16 v1 = v14;
      uint64_t v7 = v13;
      uint64_t v8 = v12;
      uint64_t i = v42;
      unint64_t v18 = (void *)(v3[7] + 32 * v34);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v18);
      sub_10006A358(&v48, v18);
      uint64_t v6 = v43;
      if (!v43) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << v33;
    uint64_t v36 = (uint64_t *)(v3[6] + 16 * v33);
    *uint64_t v36 = v31;
    v36[1] = v32;
    sub_10006A358(&v48, (_OWORD *)(v3[7] + 32 * v33));
    uint64_t v37 = v3[2];
    unint64_t v38 = __OFADD__(v37, 1LL);
    unint64_t v39 = v37 + 1;
    if (v38) {
      goto LABEL_34;
    }
    v3[2] = v39;
    uint64_t v6 = v43;
    if (!v43) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v43 = (v6 - 1) & v6;
  }

  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

  BOOL v42 = (v20 - 1) & v20;
  unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
  for (i = v21; ; unint64_t v18 = __clz(__rbit64(v6)) | (i << 6))
  {
    uint64_t v23 = 16 * v18;
    unint64_t v24 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v18);
    unint64_t v26 = *v24;
    unint64_t v25 = v24[1];
    int64_t v27 = (uint64_t *)(*(void *)(v1 + 56) + v23);
    unint64_t v28 = *v27;
    unint64_t v29 = v27[1];
    uint64_t v44 = v26;
    uint64_t v45 = v25;
    v43[0] = v28;
    v43[1] = v29;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v29);
    int64_t v30 = sub_100004AEC(&qword_1009A3500);
    swift_dynamicCast(v7, v43, v10, v30, 7LL);
    uint64_t v31 = v44;
    uint64_t v32 = v45;
    sub_10006A358(v7, v8);
    sub_10006A358(v8, v49);
    sub_10006A358(v49, &v47);
    uint64_t v33 = sub_10030CF14(v31, v32);
    uint64_t v34 = v33;
    if ((v35 & 1) != 0)
    {
      uint64_t v11 = v8;
      uint64_t v12 = v7;
      uint64_t v13 = v1;
      uint64_t v14 = i;
      uint64_t v15 = v10;
      uint64_t v16 = (uint64_t *)(v3[6] + 16 * v33);
      swift_bridgeObjectRelease();
      void *v16 = v31;
      v16[1] = v32;
      uint64_t v10 = v15;
      uint64_t i = v14;
      __int16 v1 = v13;
      uint64_t v7 = v12;
      uint64_t v8 = v11;
      uint64_t v17 = (void *)(v3[7] + 32 * v34);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v17);
      sub_10006A358(&v47, v17);
      uint64_t v6 = v42;
      if (!v42) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << v33;
    uint64_t v36 = (uint64_t *)(v3[6] + 16 * v33);
    *uint64_t v36 = v31;
    v36[1] = v32;
    sub_10006A358(&v47, (_OWORD *)(v3[7] + 32 * v33));
    uint64_t v37 = v3[2];
    unint64_t v38 = __OFADD__(v37, 1LL);
    unint64_t v39 = v37 + 1;
    if (v38) {
      goto LABEL_34;
    }
    v3[2] = v39;
    uint64_t v6 = v42;
    if (!v42) {
      goto LABEL_11;
    }
LABEL_10:
    BOOL v42 = (v6 - 1) & v6;
  }

  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

  unint64_t v38 = v21;
  unint64_t v39 = (v20 - 1) & v20;
  for (uint64_t i = __clz(__rbit64(v20)) + (v21 << 6); ; uint64_t i = __clz(__rbit64(v6)) | (v38 << 6))
  {
    uint64_t v23 = (uint64_t *)(*(void *)(v1 + 48) + 16 * i);
    unint64_t v25 = *v23;
    unint64_t v24 = v23[1];
    sub_10006A538(*(void *)(v1 + 56) + 32 * i, (uint64_t)v7);
    *(void *)&int v48 = v25;
    *((void *)&v48 + 1) = v24;
    v46[2] = v48;
    v47[0] = v49[0];
    v47[1] = v49[1];
    unint64_t v41 = v25;
    BOOL v42 = v24;
    sub_10006A358(v8, v40);
    swift_bridgeObjectRetain(v24);
    unint64_t v26 = sub_100004AEC(&qword_1009A3500);
    swift_dynamicCast(v9, v40, v26, (char *)&type metadata for Any + 8, 7LL);
    unint64_t v28 = v41;
    int64_t v27 = v42;
    sub_10006A358(v9, v10);
    sub_10006A358(v10, v46);
    sub_10006A358(v46, &v44);
    unint64_t v29 = sub_10030CF14(v28, v27);
    int64_t v30 = v29;
    if ((v31 & 1) != 0)
    {
      uint64_t v11 = v10;
      uint64_t v12 = v9;
      uint64_t v13 = v1;
      uint64_t v14 = v8;
      uint64_t v15 = v7;
      uint64_t v16 = (uint64_t *)(v3[6] + 16 * v29);
      swift_bridgeObjectRelease();
      void *v16 = v28;
      v16[1] = v27;
      uint64_t v7 = v15;
      uint64_t v8 = v14;
      __int16 v1 = v13;
      uint64_t v9 = v12;
      uint64_t v10 = v11;
      uint64_t v17 = (void *)(v3[7] + 32 * v30);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v17);
      sub_10006A358(&v44, v17);
      uint64_t v6 = v39;
      if (!v39) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << v29;
    uint64_t v32 = (uint64_t *)(v3[6] + 16 * v29);
    *uint64_t v32 = v28;
    v32[1] = v27;
    sub_10006A358(&v44, (_OWORD *)(v3[7] + 32 * v29));
    uint64_t v33 = v3[2];
    uint64_t v34 = __OFADD__(v33, 1LL);
    uint64_t v35 = v33 + 1;
    if (v34) {
      goto LABEL_34;
    }
    v3[2] = v35;
    uint64_t v6 = v39;
    if (!v39) {
      goto LABEL_11;
    }
LABEL_10:
    unint64_t v39 = (v6 - 1) & v6;
  }

  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

  uint64_t v6 = (v13 - 1) & v13;
  uint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
  for (i = v14; ; uint64_t v11 = v10 | (i << 6))
  {
    uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    unint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    uint64_t v19 = *(void **)(*(void *)(a1 + 56) + 8 * v11);
    swift_bridgeObjectRetain(v17);
    uint64_t v20 = v19;
    int64_t v21 = sub_10030CF14(v18, v17);
    uint64_t v22 = v21;
    if ((v23 & 1) != 0)
    {
      uint64_t v8 = (uint64_t *)(v3[6] + 16 * v21);
      swift_bridgeObjectRelease();
      *uint64_t v8 = v18;
      v8[1] = v17;
      uint64_t v9 = v3[7];

      *(void *)(v9 + 8 * v22) = v20;
      if (!v6) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << v21;
    unint64_t v24 = (uint64_t *)(v3[6] + 16 * v21);
    *unint64_t v24 = v18;
    v24[1] = v17;
    *(void *)(v3[7] + 8 * v21) = v20;
    unint64_t v25 = v3[2];
    unint64_t v26 = __OFADD__(v25, 1LL);
    int64_t v27 = v25 + 1;
    if (v26) {
      goto LABEL_34;
    }
    v3[2] = v27;
    if (!v6) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
  }

  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

  __break(1u);
}

      if (qword_10099B5E0 != -1) {
        swift_once(&qword_10099B5E0, sub_1005C6624);
      }
      uint64_t v53 = type metadata accessor for Logger(0LL);
      uint64_t v54 = sub_10000A720(v53, (uint64_t)qword_100A2AE08);
      uint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
      uint64_t v56 = static os_log_type_t.error.getter(v55);
      if (os_log_type_enabled(v55, v56))
      {
        char v57 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)char v57 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v55,  v56,  "FetchConfig Unable to parse featureEnabled flag from server config response",  v57,  2u);
        swift_slowDealloc(v57, -1LL, -1LL);
      }

      unint64_t v24 = 1;
      if (!*(void *)(v12 + 16)) {
        goto LABEL_51;
      }
      goto LABEL_31;
    }

    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v37 = type metadata accessor for Logger(0LL);
    unint64_t v38 = sub_10000A720(v37, (uint64_t)qword_100A2AE08);
    unint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
    char v40 = static os_log_type_t.default.getter(v39);
    if (os_log_type_enabled(v39, v40))
    {
      unint64_t v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "FetchConfig - unable to parse config data", v41, 2u);
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
    BOOL v42 = objc_allocWithZone(&OBJC_CLASS___NSError);
    uint64_t v43 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v44 = [v42 initWithDomain:v43 code:5 userInfo:0];

    uint64_t v45 = v44;
    a3(v44);
  }

  else
  {
    unint64_t v25 = (id)v282;
    unint64_t v26 = _convertNSErrorToError(_:)(v10);

    swift_willThrow(v27);
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    unint64_t v28 = type metadata accessor for Logger(0LL);
    sub_10000A720(v28, (uint64_t)qword_100A2AE08);
    swift_errorRetain(v26);
    unint64_t v29 = swift_errorRetain(v26);
    int64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    uint64_t v31 = static os_log_type_t.error.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      char v239 = a3;
      uint64_t v32 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v33 = swift_slowAlloc(32LL, -1LL);
      *(void *)&uint64_t v282 = v33;
      *(_DWORD *)uint64_t v32 = 136315138;
      double v248 = v26;
      swift_errorRetain(v26);
      uint64_t v34 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v35 = String.init<A>(describing:)(&v248, v34);
      double v248 = sub_1003F11D4(v35, v36, (uint64_t *)&v282);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v32 + 4, v32 + 12);
      a3 = v239;
      swift_bridgeObjectRelease();
      swift_errorRelease(v26);
      swift_errorRelease(v26);
      _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "FetchConfig - error decoding config information %s",  v32,  0xCu);
      swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v26);
      swift_errorRelease(v26);
    }

    swift_errorRetain(v26);
    a3((id)v26);
    swift_errorRelease(v26);
    swift_errorRelease(v26);
  }

  (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 1448))( *(void *)(v0 + 1120),  1LL,  1LL,  *(void *)(v0 + 1144));
LABEL_27:
  swift_release();
  if (qword_10099B328 != -1) {
    swift_once(&qword_10099B328, sub_10035A0D4);
  }
  unint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1328);
  char v40 = *(void *)(v0 + 1208);
  unint64_t v41 = *(void *)(v0 + 1184);
  BOOL v42 = *(void *)(v0 + 1144);
  uint64_t v43 = *(void *)(v0 + 968);
  uint64_t v44 = type metadata accessor for Logger(0LL);
  sub_10000A720(v44, (uint64_t)qword_100A2A730);
  v39(v41, v40, v42);
  uint64_t v45 = sub_100013044(v43, v0 + 768);
  uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
  int v47 = static os_log_type_t.info.getter(v46);
  if (os_log_type_enabled(v46, v47))
  {
    unint64_t v67 = *(void *)(v0 + 1200);
    typea = v47;
    int v48 = *(void *)(v0 + 1184);
    int v70 = *(void *)(v0 + 1152);
    int64_t v49 = *(void *)(v0 + 1144);
    uint64_t v50 = swift_slowAlloc(42LL, -1LL);
    uint64_t v68 = swift_slowAlloc(64LL, -1LL);
    uint64_t v73 = v68;
    *(_DWORD *)uint64_t v50 = 141558787;
    *(void *)(v0 + 872) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 872, v0 + 880, v50 + 4, v50 + 12);
    *(_WORD *)(v50 + 12) = 2081;
    uint64_t v51 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter(v49, v51);
    *(void *)(v0 + 880) = sub_1003F11D4(v52, v53, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 880, v0 + 888, v50 + 14, v50 + 22);
    swift_bridgeObjectRelease();
    uint64_t v54 = *(void (**)(uint64_t, uint64_t))(v70 + 8);
    v54(v48, v49);
    *(_WORD *)(v50 + 22) = 2160;
    *(void *)(v0 + 888) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 888, v0 + 896, v50 + 24, v50 + 32);
    *(_WORD *)(v50 + 32) = 2081;
    uint64_t v55 = *(void *)(v0 + 792);
    uint64_t v56 = *(void *)(v0 + 800);
    sub_100012ED8((void *)(v0 + 768), v55);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v56 + 8) + 8LL) + 32LL))(v55);
    char v57 = dispatch thunk of CustomStringConvertible.description.getter(v49, v51);
    BOOL v59 = v58;
    v54(v67, v49);
    *(void *)(v0 + 896) = sub_1003F11D4(v57, v59, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 896, v0 + 904, v50 + 34, v50 + 42);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 768));
    _os_log_impl( (void *)&_mh_execute_header,  v46,  typea,  "Updating location for subscribers - from beacon store update for beacongroup: %{private,mask.hash}s, beacon: %{pri vate,mask.hash}s.",  (uint8_t *)v50,  0x2Au);
    swift_arrayDestroy(v68, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v68, -1LL, -1LL);
    swift_slowDealloc(v50, -1LL, -1LL);
  }

  else
  {
    uint64_t v54 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 1152) + 8LL);
    v54(*(void *)(v0 + 1184), *(void *)(v0 + 1144));
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 768));
  }

  *(void *)(v0 + 1536) = v54;
  uint64_t v60 = *(void **)(v0 + 1280);
  uint64_t v61 = *(void *)(v0 + 968);
  uint64_t v62 = *(void *)(v0 + 960);
  sub_100013044(v0 + 608, v0 + 808);
  sub_100013044(v61, v0 + 208);
  __int128 v63 = (void *)swift_allocObject(&unk_100953D90, 120LL, 7LL);
  *(void *)(v0 + 1544) = v63;
  v63[2] = v62;
  v63[3] = v15;
  sub_100012EC0((__int128 *)(v0 + 808), (uint64_t)(v63 + 4));
  sub_100012EC0((__int128 *)(v0 + 208), (uint64_t)(v63 + 9));
  v63[14] = v60;
  int64_t v64 = async function pointer to unsafeBlocking<A>(_:)[1];
  __int128 v65 = v60;
  swift_retain();
  uint64_t v66 = (void *)swift_task_alloc(v64);
  *(void *)(v0 + 1552) = v66;
  void *v66 = v0;
  v66[1] = sub_100362D48;
  return unsafeBlocking<A>(_:)(v66, sub_10036E608, v63, (char *)&type metadata for () + 8);
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v61);
  __break(1u);
LABEL_27:
  __int128 v63 = 0LL;
  int64_t v64 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  v51._object = (void *)0x8000000100856440LL;
  v51._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v51);
  _print_unlocked<A, B>(_:_:)( v10,  &v63,  v8,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v52._countAndFlagsBits = 39LL;
  v52._object = (void *)0xE100000000000000LL;
  String.append(_:)(v52);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v63,  v64,  "Swift/NativeDictionary.swift",  28LL,  2LL,  783LL,  0);
  __break(1u);
  return result;
}

    sub_100015794((uint64_t)&v630[v629[60]], (uint64_t *)&unk_10099D720);
    if ((v23 & 0x8000000000000000LL) != 0) {
      goto LABEL_212;
    }
    goto LABEL_27;
  }

  unint64_t v25 = 536870914LL;
  uint64_t v558 = (uint64_t *)&v630[v629[161]];
  *uint64_t v558 = v556;
  v558[1] = v557;
  LOBYTE(v631[0]) = -98;
  double v559 = v628;
  double v560 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  v628 = v559;
  if (v559) {
    goto LABEL_205;
  }
  uint64_t v562 = &v630[v629[162]];
  *(void *)uint64_t v562 = v560;
  v562[8] = v561 & 1;
  LOBYTE(v631[0]) = -97;
  double v563 = v628;
  double v564 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  v628 = v563;
  if (v563) {
    goto LABEL_205;
  }
  v630[v629[163]] = v564;
  LOBYTE(v631[0]) = -96;
  double v565 = v628;
  uint64_t v566 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  v628 = v565;
  if (v565) {
    goto LABEL_205;
  }
  v630[v629[164]] = v566;
  LOBYTE(v631[0]) = -95;
  v567 = v628;
  uint64_t v568 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  v628 = v567;
  if (v567) {
    goto LABEL_205;
  }
  v570 = &v630[v629[165]];
  *(void *)v570 = v568;
  v570[8] = v569 & 1;
  LOBYTE(v631[0]) = -94;
  uint64_t v571 = v628;
  v572 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  v628 = v571;
  if (v571) {
    goto LABEL_205;
  }
  char v574 = &v630[v629[166]];
  *(void *)char v574 = v572;
  v574[8] = v573 & 1;
  LOBYTE(v631[0]) = -93;
  v575 = v628;
  uint64_t v576 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  v628 = v575;
  if (v575) {
    goto LABEL_205;
  }
  v630[v629[167]] = v576;
  LOBYTE(v631[0]) = -92;
  uint64_t v577 = v628;
  v578 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  v628 = v577;
  if (v577) {
    goto LABEL_205;
  }
  uint64_t v579 = &v630[v629[168]];
  *(_DWORD *)uint64_t v579 = v578;
  v579[4] = BYTE4(v578) & 1;
  LOBYTE(v631[0]) = -91;
  char v580 = v628;
  v581 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  v628 = v580;
  if (v580) {
    goto LABEL_205;
  }
  v583 = &v630[v629[169]];
  *(void *)v583 = v581;
  v583[8] = v582 & 1;
  LOBYTE(v631[0]) = -90;
  uint64_t v584 = v628;
  uint64_t v585 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  v628 = v584;
  if (v584) {
    goto LABEL_205;
  }
  uint64_t v587 = &v630[v629[170]];
  *(void *)uint64_t v587 = v585;
  v587[8] = v586 & 1;
  LOBYTE(v631[0]) = -89;
  uint64_t v588 = v628;
  uint64_t v589 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  v628 = v588;
  if (v588) {
    goto LABEL_205;
  }
  uint64_t v591 = &v630[v629[171]];
  *(void *)uint64_t v591 = v589;
  v591[8] = v590 & 1;
  LOBYTE(v631[0]) = -88;
  v592 = v628;
  v593 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  v628 = v592;
  if (v592) {
    goto LABEL_205;
  }
  uint64_t v595 = &v630[v629[172]];
  *(void *)uint64_t v595 = v593;
  v595[8] = v594 & 1;
  LOBYTE(v631[0]) = -87;
  uint64_t v596 = v628;
  v597 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  v628 = v596;
  if (v596
    || (uint64_t v599 = &v630[v629[173]],
        *(void *)uint64_t v599 = v597,
        v599[8] = v598 & 1,
        LOBYTE(v631[0]) = -86,
        v600 = v628,
        uint64_t v601 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626),
        (v628 = v600) != 0))
  {
LABEL_205:
    (*(void (**)(char *, uint64_t))(v13 + 8))(v625, v626);
    LODWORD(v626) = 1;
    goto LABEL_206;
  }

  v603 = &v630[v629[174]];
  *(void *)v603 = v601;
  v603[8] = v602 & 1;
  LOBYTE(v631[0]) = -85;
  v604 = v628;
  v605 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  v628 = v604;
  if (!v604)
  {
    v607 = &v630[v629[175]];
    *(void *)v607 = v605;
    v607[8] = v606 & 1;
    LOBYTE(v631[0]) = -84;
    v608 = v628;
    v609 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
    v628 = v608;
    if (!v608)
    {
      v630[v629[176]] = v609;
      LOBYTE(v631[0]) = -83;
      v610 = v628;
      v611 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
      v628 = v610;
      if (!v610)
      {
        v613 = &v630[v629[177]];
        *(void *)v613 = v611;
        v613[8] = v612 & 1;
        LOBYTE(v631[0]) = -82;
        v614 = v628;
        v615 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
        v628 = v614;
        if (!v614)
        {
          v619 = v615;
          v620 = v616;
          (*(void (**)(char *, uint64_t))(v13 + 8))(v625, v626);
          v621 = (uint64_t)v630;
          v622 = &v630[v629[178]];
          *(void *)v622 = v619;
          v622[8] = v620 & 1;
          sub_10042811C(v621, v624);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v627);
          sub_100428160(v621);
          return;
        }
      }
    }
  }

  (*(void (**)(char *, uint64_t))(v13 + 8))(v625, v626);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v627);
  v617 = (id *)v630;
  sub_1000182F0(*(void *)v630, *((void *)v630 + 1));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  unint64_t v26 = (uint64_t)v629;
  sub_100015794((uint64_t)v617 + v629[57], &qword_10099D8A0);
  sub_100015794((uint64_t)v617 + *(int *)(v26 + 232), (uint64_t *)&unk_10099D720);
  sub_100015794((uint64_t)v617 + *(int *)(v26 + 240), (uint64_t *)&unk_10099D720);
  LOBYTE(v13) = 1;
  LODWORD(v26) = 1;
  LODWORD(v27) = 1;
  LODWORD(v28) = 1;
  LODWORD(v30) = 1;
  LODWORD(v31) = 1;
  LODWORD(v626) = 1;
LABEL_212:
  v618 = (uint64_t *)&v630[v629[67]];
  sub_1004221C0( *v618,  v618[1],  v618[2],  v618[3],  v618[4],  v618[5],  v618[6],  v618[7],  v618[8],  v618[9],  v618[10],  v618[11],  v618[12],  v618[13]);
  if ((v13 & 1) != 0) {
    goto LABEL_28;
  }
LABEL_213:
  if (!(_DWORD)v26) {
    goto LABEL_29;
  }
LABEL_214:
  swift_bridgeObjectRelease();
  if ((v27 & 1) != 0) {
    goto LABEL_30;
  }
LABEL_215:
  if (!(_DWORD)v28) {
    goto LABEL_31;
  }
LABEL_216:
  swift_bridgeObjectRelease();
  if ((v30 & 1) != 0) {
    goto LABEL_32;
  }
LABEL_217:
  if ((_DWORD)v31)
  {
LABEL_218:
    swift_bridgeObjectRelease();
    if ((v626 & 1) == 0) {
      return;
    }
    goto LABEL_219;
  }

    (*(void (**)(void, uint64_t, uint64_t, void, __n128))(v2 + 56))( *(void *)(v0 + 120),  1LL,  1LL,  *(void *)(v0 + 48),  v7);
    goto LABEL_27;
  }

  uint64_t v8 = 1LL;
LABEL_10:
  uint64_t v10 = (v23 - 1) & v23;
  uint64_t v9 = __clz(__rbit64(v23)) + (v8 << 6);
LABEL_5:
  *(void *)(v0 + 128) = v8;
  *(void *)(v0 + 136) = v10;
  uint64_t v11 = *(void *)(v0 + 120);
  uint64_t v12 = *(void *)(v0 + 48);
  uint64_t v13 = *(void *)(v1 + 48) + *(void *)(v2 + 72) * v9;
  uint64_t v14 = *(void (**)(uint64_t, unint64_t, uint64_t, __n128))(v2 + 16);
  *(void *)(v0 + 144) = v14;
  v14(v11, v13, v12, v7);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v11, 0LL, 1LL, v12);
  uint64_t v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  *(void *)(v0 + 152) = v15;
  if (v15(v11, 1LL, v12) != 1)
  {
    uint64_t v16 = *(void *)(v0 + 120);
    uint64_t v17 = *(void *)(v0 + 88);
    unint64_t v18 = *(void *)(v0 + 48);
    uint64_t v19 = *(void *)(v0 + 32);
    uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 56) + 32LL);
    *(void *)(v0 + 160) = v20;
    v20(v17, v16, v18);
    return swift_task_switch(sub_100443E60, v19, 0LL);
  }

    unint64_t v4 = 0LL;
    memset(v39, 0, sizeof(v39));
    unint64_t v38 = 0u;
LABEL_27:
    sub_1004A5EA8((uint64_t)&v38, (uint64_t)&v40);
    uint64_t v16 = v41;
    if (!v41) {
      return swift_release();
    }
    uint64_t v17 = v40;
    swift_beginAccess(v5, v37, 33LL, 0LL);
    sub_10006A358(&v42, &v38);
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
    uint64_t v43 = (void *)*v5;
    uint64_t v19 = v43;
    uint64_t *v5 = 0x8000000000000000LL;
    int64_t v21 = sub_10030CF14(v17, v16);
    uint64_t v22 = v19[2];
    uint64_t v23 = (v20 & 1) == 0;
    unint64_t v24 = v22 + v23;
    if (__OFADD__(v22, v23))
    {
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }

    unint64_t v25 = v20;
    if (v19[3] >= v24)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        unint64_t v28 = v43;
        if ((v20 & 1) != 0) {
          goto LABEL_4;
        }
      }

      else
      {
        sub_1000634BC();
        unint64_t v28 = v43;
        if ((v25 & 1) != 0) {
          goto LABEL_4;
        }
      }
    }

    else
    {
      sub_10004C904(v24, isUniquelyReferenced_nonNull_native);
      unint64_t v26 = sub_10030CF14(v17, v16);
      if ((v25 & 1) != (v27 & 1)) {
        goto LABEL_44;
      }
      int64_t v21 = v26;
      unint64_t v28 = v43;
      if ((v25 & 1) != 0)
      {
LABEL_4:
        uint64_t v7 = (void *)(v28[7] + 32 * v21);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v7);
        sub_10006A358(&v38, v7);
        goto LABEL_5;
      }
    }

    v28[(v21 >> 6) + 8] |= 1LL << v21;
    unint64_t v29 = (uint64_t *)(v28[6] + 16 * v21);
    *unint64_t v29 = v17;
    v29[1] = v16;
    sub_10006A358(&v38, (_OWORD *)(v28[7] + 32 * v21));
    int64_t v30 = v28[2];
    uint64_t v31 = __OFADD__(v30, 1LL);
    uint64_t v32 = v30 + 1;
    if (v31) {
      goto LABEL_41;
    }
    __int128 v28[2] = v32;
    swift_bridgeObjectRetain(v16);
LABEL_5:
    uint64_t *v5 = v28;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess(v37);
  }

  uint64_t v14 = *(void *)(v34 + 8 * v15);
  if (v14)
  {
LABEL_15:
    uint64_t v13 = v15;
LABEL_12:
    unint64_t v4 = (v14 - 1) & v14;
    uint64_t v9 = __clz(__rbit64(v14)) + (v13 << 6);
    uint64_t v6 = v13;
    goto LABEL_8;
  }

  while (1)
  {
    uint64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v13 >= v35)
    {
      uint64_t v6 = v35 - 1;
      goto LABEL_26;
    }

    uint64_t v14 = *(void *)(v34 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_12;
    }
  }

    sub_100018C68(v87, v86);
    return v63;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
  __break(1u);
  return result;
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  __break(1u);
LABEL_27:
  uint64_t v50 = 0LL;
  uint64_t v51 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  v47._object = (void *)0x8000000100856440LL;
  v47._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v47);
  _print_unlocked<A, B>(_:_:)( &v53,  &v50,  &type metadata for Int,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v48._countAndFlagsBits = 39LL;
  v48._object = (void *)0xE100000000000000LL;
  String.append(_:)(v48);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v50,  v51,  "Swift/NativeDictionary.swift",  28LL,  2LL,  783LL,  0);
  __break(1u);
  return result;
}

  if (!v32)
  {
LABEL_15:
    if (v24) {
      goto LABEL_16;
    }
LABEL_28:
    if (!v33) {
      return result;
    }
    return swift_bridgeObjectRelease();
  }

      unint64_t v38 = v30;
      uint64_t v44 = sub_100004AEC(&qword_1009B6A90);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56LL))(v31, 1LL, 1LL, v44);
      uint64_t v35 = 0LL;
    }

    BOOL v42 = *(void *)(v71 + 8 * v43);
    if (v42)
    {
LABEL_15:
      unint64_t v41 = v43;
LABEL_12:
      uint64_t v32 = v21;
      uint64_t v33 = v28;
      uint64_t v35 = (v42 - 1) & v42;
      uint64_t v36 = __clz(__rbit64(v42)) + (v41 << 6);
      int64_t v82 = v41;
      continue;
    }

    break;
  }

  while (1)
  {
    unint64_t v41 = v43 + 1;
    if (__OFADD__(v43, 1LL)) {
      break;
    }
    if (v41 >= v72)
    {
      int64_t v82 = v70;
      goto LABEL_26;
    }

    BOOL v42 = *(void *)(v71 + 8 * v41);
    ++v43;
    if (v42) {
      goto LABEL_12;
    }
  }

          __break(1u);
          goto LABEL_27;
        }

    uint64_t v17 = (v26 - 1) & v26;
    int64_t v21 = __clz(__rbit64(v26)) + (v19 << 6);
LABEL_9:
    uint64_t v22 = *(void *)(v0 + 64);
    uint64_t v23 = *(void *)(v0 + 48);
    unint64_t v24 = *(void *)(v0 + 32);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 16))( v22,  *(void *)(v2 + 56) + *(void *)(v14 + 72) * v21,  v23);
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v24;
    swift_errorRetain(v24);
    CheckedContinuation.resume(throwing:)(v0 + 16, v23);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v22, v23);
  }

  int64_t v27 = v25 + 4;
  if (v27 < v18)
  {
    unint64_t v26 = *(void *)(v13 + 8 * v27);
    if (!v26)
    {
      while (1)
      {
        uint64_t v19 = v27 + 1;
        if (__OFADD__(v27, 1LL)) {
          goto LABEL_29;
        }
        if (v19 >= v18) {
          goto LABEL_27;
        }
        unint64_t v26 = *(void *)(v13 + 8 * v19);
        ++v27;
        if (v26) {
          goto LABEL_26;
        }
      }
    }

    uint64_t v19 = v27;
    goto LABEL_26;
  }

    swift_release(result);
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v35 = _swiftEmptyArrayStorage;
  }

  objc_autoreleasePoolPop(v63);
  sub_1000F0A44((uint64_t)v35, (uint64_t)v25);
  swift_bridgeObjectRelease();
  uint64_t v56 = v71;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v25, 1LL, v71) == 1)
  {
    sub_100015794((uint64_t)v25, (uint64_t *)&unk_1009A5990);
    char v57 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56LL))( a2,  1LL,  1LL,  v57);
  }

  else
  {
    unint64_t v58 = &v25[*(int *)(v56 + 20)];
    BOOL v59 = type metadata accessor for Date(0LL);
    uint64_t v60 = *(void *)(v59 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v60 + 16))(a2, v58, v59);
    sub_100018C68((uint64_t)v25, type metadata accessor for BeaconObservation);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v60 + 56))(a2, 0LL, 1LL, v59);
  }

  __break(1u);
  return result;
}

        if ((a1 & 0x40) != 0) {
          goto LABEL_36;
        }
        goto LABEL_27;
      }

          if ((a1 & 0x80) != 0) {
            goto LABEL_36;
          }
          goto LABEL_27;
        }

      uint64_t v14 = (v18 - 1) & v18;
      uint64_t v15 = __clz(__rbit64(v18)) + (v16 << 6);
    }

    sub_10006A5E8(*(void *)(v1 + 48) + 40 * v15, (uint64_t)v40);
    sub_10006A650(*(void *)(v1 + 56) + 32 * v15, (uint64_t)v7);
    v38[0] = v41[0];
    v38[1] = v41[1];
    unint64_t v39 = v42;
    v37[0] = v40[0];
    v37[1] = v40[1];
    sub_10006A5E8((uint64_t)v37, (uint64_t)v36);
    if (!swift_dynamicCast(&v34, v36, &type metadata for AnyHashable, &type metadata for String, 6LL))
    {
      uint64_t v34 = 0LL;
      uint64_t v35 = 0LL;
      sub_10078D008((uint64_t)v37);
LABEL_35:
      swift_bridgeObjectRelease();
      sub_1000A6F30(v1);
      swift_release();
      return;
    }

    int64_t v21 = v34;
    uint64_t v20 = v35;
    sub_10006A650((uint64_t)v8, (uint64_t)v36);
    sub_10078D008((uint64_t)v37);
    uint64_t v22 = sub_100004AEC(&qword_1009BFCB0);
    if ((swift_dynamicCast(&v34, v36, (char *)&type metadata for Any + 8, v22, 6LL) & 1) == 0)
    {
      uint64_t v34 = 0LL;
      swift_bridgeObjectRelease();
      goto LABEL_35;
    }

    uint64_t v23 = v34;
    unint64_t v24 = sub_10030CF14(v21, v20);
    unint64_t v25 = v24;
    if ((v26 & 1) != 0)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v7;
      uint64_t v12 = (uint64_t *)(v3[6] + 16 * v24);
      swift_bridgeObjectRelease();
      *uint64_t v12 = v21;
      v12[1] = v20;
      uint64_t v13 = v3[7];
      swift_bridgeObjectRelease();
      *(void *)(v13 + 8 * v25) = v23;
      uint64_t v7 = v11;
      uint64_t v8 = v10;
      __int16 v1 = v31;
      goto LABEL_8;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << v24;
    int64_t v27 = (uint64_t *)(v3[6] + 16 * v24);
    void *v27 = v21;
    v27[1] = v20;
    *(void *)(v3[7] + 8 * v24) = v23;
    unint64_t v28 = v3[2];
    unint64_t v29 = __OFADD__(v28, 1LL);
    int64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_38;
    }
    v3[2] = v30;
LABEL_8:
    uint64_t v9 = v16;
    uint64_t v6 = v14;
  }

  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
}

        uint64_t v8 = (v21 - 1) & v21;
        uint64_t v15 = __clz(__rbit64(v21)) + (v6 << 6);
LABEL_7:
        uint64_t v16 = (unsigned int *)(v10 + 8 * v15);
        uint64_t v17 = *v16;
        unint64_t v18 = v16[1];
        uint64_t v19 = v17 < v13;
        a1 = v12 < v18;
        if ((_DWORD)v12 != (_DWORD)v18) {
          uint64_t v19 = v12 < v18;
        }
        if (v19)
        {
          uint64_t v13 = v17;
          uint64_t v12 = v18;
          if (v8) {
            goto LABEL_6;
          }
        }

        else if (v8)
        {
          goto LABEL_6;
        }
      }

      __break(1u);
LABEL_40:
      if (v6 >= 9)
      {
        unint64_t v24 = *(void *)(a1 + 88);
        if (v24)
        {
          uint64_t v6 = 4LL;
        }

        else
        {
          unint64_t v24 = *(void *)(a1 + 96);
          if (!v24) {
            goto LABEL_46;
          }
          uint64_t v6 = 5LL;
        }

    uint64_t v33 = sub_1007A50A4(v22);
    uint64_t v34 = v33 + 96 * v31;
    if (__CFADD__(v33, 96 * v31))
    {
      __break(1u);
    }

    else if (v34)
    {
      uint64_t v35 = v54;
      sub_1007A629C(v55, 1LL, v34 / 0x60 + 1, a2, v54);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v35, 1LL, v52) == 1)
      {
        sub_100018C68((uint64_t)v53, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
        sub_100015794(v35, &qword_1009C0980);
        return (uint64_t)v15;
      }

      uint64_t v22 = v50;
      sub_10002218C(v35, v50, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
      int64_t v21 = v51;
      sub_10001DC4C(v22, v51, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
      uint64_t v7 = *((void *)v15 + 2);
      uint64_t v32 = *((void *)v15 + 3);
      uint64_t v31 = v7 + 1;
      if (v7 < v32 >> 1) {
        goto LABEL_31;
      }
      goto LABEL_42;
    }

    __break(1u);
    swift_once(&qword_10099B3E8, sub_1003E02E8);
    uint64_t v36 = qword_100A2A8F0;
    uint64_t v37 = sub_100004AEC((uint64_t *)&unk_10099D740);
    unint64_t v38 = swift_allocObject(v37, 112LL, 7LL);
    *(_OWORD *)(v38 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    unint64_t v39 = UUID.uuidString.getter(v38);
    unint64_t v41 = v40;
    *(void *)(v38 + 56) = &type metadata for String;
    BOOL v42 = sub_1000226F4();
    *(void *)(v38 + 64) = v42;
    *(void *)(v38 + 32) = v39;
    *(void *)(v38 + 40) = v41;
    uint64_t v56 = 0LL;
    swift_errorRetain(0LL);
    uint64_t v43 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v44 = String.init<A>(describing:)(&v56, v43);
    *(void *)(v38 + 96) = &type metadata for String;
    *(void *)(v38 + 104) = v42;
    *(void *)(v38 + 72) = v44;
    *(void *)(v38 + 80) = v45;
    os_log(_:dso:log:_:_:)( v30,  &_mh_execute_header,  v36,  "persistenceInstruction: Unable to init secondaryGenerator for beacon %@ due to %@.",  82LL,  2LL,  v38);
    swift_bridgeObjectRelease();
    swift_errorRelease(0LL);
    uint64_t v46 = (uint64_t)v53;
    goto LABEL_32;
  }

        unint64_t v18 = (v20 - 1) & v20;
        uint64_t v19 = __clz(__rbit64(v20)) + (v17 << 6);
      }

      uint64_t v16 = *(void *)(*(void *)(v1 + 48) + 8 * v19);
      swift_retain();
      if (!v16) {
        goto LABEL_36;
      }
    }
  }