uint64_t sub_1005E3078()
{
  uint64_t v0;
  dispatch_queue_s *v1;
  uint64_t v2;
  void *v3;
  uint64_t result;
  void v5[6];
  v1 = *(dispatch_queue_s **)(v0 + 48);
  v2 = swift_allocObject(&unk_100969540, 32LL, 7LL);
  *(void *)(v2 + 16) = sub_1005E3F34;
  *(void *)(v2 + 24) = v0;
  v5[4] = sub_100095030;
  v5[5] = v2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256LL;
  v5[2] = sub_100025BD4;
  v5[3] = &unk_100969558;
  v3 = _Block_copy(v5);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v2, "", 130LL, 48LL, 27LL, 1LL);
  swift_release();
  result = swift_release();
  return result;
}

uint64_t sub_1005E3180(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for XPCServiceDescription(0LL);
  uint64_t v23 = *(void *)(v2 - 8);
  uint64_t v24 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for MachServiceName(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  v11 = (char *)&v23 - v10;
  v12 = (void *)type metadata accessor for DispatchPredicate(0LL);
  uint64_t v13 = *(v12 - 1);
  __chkstk_darwin(v12);
  v15 = (uint64_t *)((char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  v16 = *(void **)(a1 + 48);
  void *v15 = v16;
  (*(void (**)(void *, void, void *))(v13 + 104))( v15,  enum case for DispatchPredicate.onQueue(_:),  v12);
  id v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(void *, void *))(v13 + 8))(v15, v12);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }

  MachServiceName.init(_:)(0xD000000000000037LL, 0x800000010086A4E0LL);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
  v12 = sub_1005E2FE0();
  if (qword_10099B630 != -1) {
LABEL_5:
  }
    swift_once(&qword_10099B630, sub_1005E3920);
  v18 = (void *)qword_1009B59E0;
  v19 = (void *)objc_opt_self(&OBJC_CLASS___NSXPCInterface);
  id v20 = v18;
  id v21 = [v19 interfaceWithProtocol:&OBJC_PROTOCOL___SPAccessoryDiscoveryXPCClientProtocol];
  swift_retain_n(a1, 3LL);
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:remoteObjectInterface:shouldAccept:interruptionHandler:invalidationHandler:)( v9,  0LL,  v12,  v20,  v21,  sub_1005E3F64,  a1,  sub_1005E3F68,  a1,  sub_1005E3F6C,  a1);
  XPCSessionManager.register(service:)(v4);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v4, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
}

uint64_t sub_1005E3400(void *a1)
{
  uint64_t v2 = v1;
  if (qword_10099B628 != -1) {
    swift_once(&qword_10099B628, sub_1005E2E30);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10000A720(v4, (uint64_t)qword_100A2AEB8);
  uint64_t v5 = a1;
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v9 = (void ***)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138412290;
    v19 = v5;
    uint64_t v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20, v8 + 4, v8 + 12);
    char *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "interruptionHandler: %@", v8, 0xCu);
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
  }

  v12 = *(dispatch_queue_s **)(v2 + 48);
  uint64_t v13 = swift_allocObject(&unk_100969680, 32LL, 7LL);
  *(void *)(v13 + 16) = v2;
  *(void *)(v13 + 24) = v5;
  uint64_t v14 = swift_allocObject(&unk_1009696A8, 32LL, 7LL);
  *(void *)(v14 + 16) = sub_1005E5830;
  *(void *)(v14 + 24) = v13;
  v20[3] = sub_100154688;
  v20[4] = v14;
  v19 = _NSConcreteStackBlock;
  v20[0] = 1107296256LL;
  v20[1] = sub_100025BD4;
  v20[2] = &unk_1009696C0;
  v15 = _Block_copy(&v19);
  v16 = v5;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v12, v15);
  _Block_release(v15);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v14, "", 130LL, 101LL, 27LL, 1LL);
  swift_release();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005E3690(void *a1)
{
  uint64_t v2 = v1;
  if (qword_10099B628 != -1) {
    swift_once(&qword_10099B628, sub_1005E2E30);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10000A720(v4, (uint64_t)qword_100A2AEB8);
  uint64_t v5 = a1;
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v9 = (void ***)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138412290;
    v19 = v5;
    uint64_t v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20, v8 + 4, v8 + 12);
    char *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "invalidationHandler: %@", v8, 0xCu);
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
  }

  v12 = *(dispatch_queue_s **)(v2 + 48);
  uint64_t v13 = swift_allocObject(&unk_100969590, 32LL, 7LL);
  *(void *)(v13 + 16) = v2;
  *(void *)(v13 + 24) = v5;
  uint64_t v14 = swift_allocObject(&unk_1009695B8, 32LL, 7LL);
  *(void *)(v14 + 16) = sub_1005E67B4;
  *(void *)(v14 + 24) = v13;
  v20[3] = sub_100154688;
  v20[4] = v14;
  v19 = _NSConcreteStackBlock;
  v20[0] = 1107296256LL;
  v20[1] = sub_100025BD4;
  v20[2] = &unk_1009695D0;
  v15 = _Block_copy(&v19);
  v16 = v5;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v12, v15);
  _Block_release(v15);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v14, "", 130LL, 95LL, 27LL, 1LL);
  swift_release();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

id sub_1005E3920()
{
  id result =  [(id)objc_opt_self(NSXPCInterface) interfaceWithProtocol:&OBJC_PROTOCOL___SPAccessoryDiscoveryXPCProtocol];
  qword_1009B59E0 = (uint64_t)result;
  return result;
}

uint64_t sub_1005E396C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  os_log_type_t v7 = (void *)((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = (void *)v2[6];
  *os_log_type_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v11 = v2[9];
  if (!v11) {
    return result;
  }
  v12 = *(dispatch_queue_s **)(v11 + 16);
  uint64_t v13 = swift_allocObject(&unk_100969608, 32LL, 7LL);
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = a1;
  uint64_t v14 = swift_allocObject(&unk_100969630, 32LL, 7LL);
  *(void *)(v14 + 16) = sub_1005E54D4;
  *(void *)(v14 + 24) = v13;
  aBlock[4] = sub_100154688;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100025BD4;
  aBlock[3] = &unk_100969648;
  v15 = _Block_copy(aBlock);
  swift_retain_n(v11, 2LL);
  id v16 = a1;
  swift_retain();
  swift_release();
  dispatch_sync(v12, v15);
  _Block_release(v15);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v14, "", 110LL, 89LL, 27LL, 1LL);
  swift_release();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
LABEL_9:
    __break(1u);
    return result;
  }

  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_1004726F4, v11, &type metadata for Bool);
  swift_release();
  if (LOBYTE(aBlock[0]) == 1)
  {
    sub_10024878C();
    swift_release();
    v2[9] = 0LL;
    swift_release();
    v2[10] = 0LL;
  }

  return swift_release();
}

uint64_t sub_1005E3BA4(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 72);
  if (v4)
  {
    uint64_t v5 = v4;
  }

  else
  {
    uint64_t v6 = type metadata accessor for AccessoryDiscoverySession(0LL);
    swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v5 = sub_1002481D8();
    if (qword_10099B628 != -1) {
      swift_once(&qword_10099B628, sub_1005E2E30);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    sub_10000A720(v7, (uint64_t)qword_100A2AEB8);
    uint64_t v8 = swift_retain_n(v5, 2LL);
    id v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.default.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v11 = 136315138;
      unint64_t v21 = 0xE100000000000000LL;
      uint64_t v22 = v19;
      swift_retain();
      uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009BA110);
      uint64_t v13 = sub_1000372EC((unint64_t *)&unk_1009B5AC0, (uint64_t *)&unk_1009BA110, (uint64_t)&unk_100817578);
      v14._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v12, v13);
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._countAndFlagsBits = 8250LL;
      v15._object = (void *)0xE200000000000000LL;
      String.append(_:)(v15);
      v16._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v12, v13);
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      v17._countAndFlagsBits = 62LL;
      v17._object = (void *)0xE100000000000000LL;
      String.append(_:)(v17);
      swift_release();
      uint64_t v20 = sub_1003F11D4(60LL, 0xE100000000000000LL, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v11 + 4, v11 + 12);
      swift_release_n(v5, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Created new AccessoryDiscoverySession: %s", v11, 0xCu);
      swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v5, 2LL);
    }

    *(void *)(a1 + 72) = v5;
    swift_retain();
    swift_release();
  }

  swift_retain();
  swift_retain();
  sub_100663FE0(a2);
  swift_release_n(v5, 2LL);
  return swift_release();
}

uint64_t sub_1005E3E80()
{
  swift_release(*(void *)(v0 + 56));
  swift_release(*(void *)(v0 + 72));
  swift_release(*(void *)(v0 + 80));
  return v0;
}

uint64_t sub_1005E3ED4()
{
  return swift_deallocClassInstance(v0, 88LL, 7LL);
}

uint64_t type metadata accessor for AccessoryDiscoveryService()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd25AccessoryDiscoveryService);
}

uint64_t sub_1005E3F14()
{
  return sub_1005E3078();
}

uint64_t sub_1005E3F34()
{
  return sub_1005E3180(v0);
}

uint64_t sub_1005E3F3C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1005E3F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1005E3F5C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1005E3F74()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1005E3F84(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v100 = a4;
  uint64_t v106 = a1;
  uint64_t v107 = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  v105 = (char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  v104 = (char *)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v102 = *(void *)(v11 - 8);
  uint64_t v103 = v11;
  __chkstk_darwin(v11);
  v101 = (char *)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  Swift::String v16 = (char *)&v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009B5B20);
  unsafeFromAsyncTask<A>(_:)(&unk_1009C0FD0, 0LL, v17);
  v18 = aBlock;
  if (aBlock)
  {
    v96 = a3;
    uint64_t v97 = v6;
    id v19 = [a3 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);

    __chkstk_darwin(v20);
    *(&v95 - 2) = (void ***)v16;
    *(&v95 - 1) = (void ***)v18;
    v99 = v18;
    uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009B5B30);
    Lock.callAsFunction<A>(_:)(sub_1005E65C4, &v95 - 4, v21);
    uint64_t v22 = aBlock;
    uint64_t v23 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    if (v22)
    {
      os_log_type_t v24 = static os_log_type_t.debug.getter(v23);
      if (qword_10099B798 != -1) {
        swift_once(&qword_10099B798, sub_100651870);
      }
      v25 = (os_log_s *)qword_100A2B0A8;
      if (os_log_type_enabled((os_log_t)qword_100A2B0A8, v24))
      {
        v26 = v22;
        uint64_t v27 = swift_slowAlloc(12LL, -1LL);
        uint64_t v98 = v9;
        v28 = (uint8_t *)v27;
        v95 = (void ***)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)v28 = 138412290;
        aBlock = v26;
        v29 = v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v110, v28 + 4, v28 + 12);
        v30 = v95;
        *v95 = v22;

        _os_log_impl((void *)&_mh_execute_header, v25, v24, "TRACE: Create AccessoryPairingSession for %@", v28, 0xCu);
        uint64_t v31 = sub_100004AEC((uint64_t *)&unk_10099FB20);
        swift_arrayDestroy(v30, 1LL, v31);
        swift_slowDealloc(v30, -1LL, -1LL);
        v32 = v28;
        uint64_t v9 = v98;
        swift_slowDealloc(v32, -1LL, -1LL);
      }

      uint64_t v33 = v100;
      uint64_t v34 = *(void *)(v100 + 32);
      uint64_t v35 = *(void *)(v100 + 40);
      uint64_t v36 = type metadata accessor for AccessoryPairingSession();
      swift_allocObject(v36, 144LL, 7LL);
      v37 = v22;
      swift_retain();
      swift_retain();
      uint64_t v38 = sub_1004C9B00(v34, v35, v37);
      if (v38)
      {
        v39 = (void **)v38;
        uint64_t v40 = static os_log_type_t.default.getter(v38);
        uint64_t v41 = qword_100A2B0A8;
        uint64_t v42 = sub_100004AEC((uint64_t *)&unk_10099D740);
        uint64_t v43 = swift_allocObject(v42, 72LL, 7LL);
        *(_OWORD *)(v43 + 16) = xmmword_1007E67D0;
        aBlock = v39;
        swift_retain();
        uint64_t v44 = String.init<A>(describing:)(&aBlock, v36);
        uint64_t v46 = v45;
        *(void *)(v43 + 56) = &type metadata for String;
        *(void *)(v43 + 64) = sub_1000226F4();
        *(void *)(v43 + 32) = v44;
        *(void *)(v43 + 40) = v46;
        os_log(_:dso:log:_:_:)( v40,  &_mh_execute_header,  v41,  "Created new AccessoryPairingSession: %@ ",  40LL,  2LL,  v43);
        swift_bridgeObjectRelease();
        *(void *)(v33 + 80) = v39;
        swift_retain();
        swift_release();
        sub_1004CA19C(v96, v106, v107);
      }

      else
      {
        uint64_t v79 = static os_log_type_t.error.getter(0LL);
        os_log(_:dso:log:_:_:)( v79,  &_mh_execute_header,  qword_100A2B0A8,  "Unable to create a new pairing session!",  39LL,  2LL,  _swiftEmptyArrayStorage);
        sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
        v81 = v101;
        uint64_t v80 = v102;
        uint64_t v82 = v103;
        (*(void (**)(char *, void, uint64_t))(v102 + 104))( v101,  enum case for DispatchQoS.QoSClass.default(_:),  v103);
        uint64_t v100 = static OS_dispatch_queue.global(qos:)(v81);
        (*(void (**)(char *, uint64_t))(v80 + 8))(v81, v82);
        uint64_t v83 = swift_allocObject(&unk_100969838, 32LL, 7LL);
        uint64_t v84 = v107;
        *(void *)(v83 + 16) = v106;
        *(void *)(v83 + 24) = v84;
        v113 = sub_1005E6768;
        uint64_t v114 = v83;
        aBlock = _NSConcreteStackBlock;
        uint64_t v110 = 1107296256LL;
        v111 = sub_1001C31E8;
        v112 = &unk_100969850;
        v85 = _Block_copy(&aBlock);
        uint64_t v86 = swift_retain();
        v87 = v104;
        static DispatchQoS.unspecified.getter(v86);
        v108 = _swiftEmptyArrayStorage;
        uint64_t v88 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v89 = v9;
        uint64_t v90 = sub_100004AEC((uint64_t *)&unk_1009AB860);
        uint64_t v91 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
        v92 = v105;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v108, v90, v91, v5, v88);
        v93 = (void *)v100;
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v87, v92, v85);

        _Block_release(v85);
        (*(void (**)(char *, uint64_t))(v97 + 8))(v92, v5);
        (*(void (**)(char *, uint64_t))(v89 + 8))(v87, v8);
      }
    }

    else
    {
      uint64_t v65 = static os_log_type_t.error.getter(v23);
      if (qword_10099B798 != -1) {
        swift_once(&qword_10099B798, sub_100651870);
      }
      os_log(_:dso:log:_:_:)( v65,  &_mh_execute_header,  qword_100A2B0A8,  "No peripheral for accessory.",  28LL,  2LL,  _swiftEmptyArrayStorage);
      sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
      v67 = v101;
      uint64_t v66 = v102;
      uint64_t v68 = v103;
      (*(void (**)(char *, void, uint64_t))(v102 + 104))( v101,  enum case for DispatchQoS.QoSClass.default(_:),  v103);
      v69 = (void *)static OS_dispatch_queue.global(qos:)(v67);
      (*(void (**)(char *, uint64_t))(v66 + 8))(v67, v68);
      uint64_t v70 = swift_allocObject(&unk_1009697E8, 32LL, 7LL);
      uint64_t v71 = v107;
      *(void *)(v70 + 16) = v106;
      *(void *)(v70 + 24) = v71;
      v113 = sub_1005E65DC;
      uint64_t v114 = v70;
      aBlock = _NSConcreteStackBlock;
      uint64_t v110 = 1107296256LL;
      v111 = sub_1001C31E8;
      v112 = &unk_100969800;
      v72 = _Block_copy(&aBlock);
      uint64_t v73 = swift_retain();
      v74 = v104;
      static DispatchQoS.unspecified.getter(v73);
      v108 = _swiftEmptyArrayStorage;
      uint64_t v75 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v76 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v77 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      v78 = v105;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v108, v76, v77, v5, v75);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v74, v78, v72);

      _Block_release(v72);
      (*(void (**)(char *, uint64_t))(v97 + 8))(v78, v5);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v74, v8);
    }
  }

  else
  {
    uint64_t v98 = v9;
    unint64_t v47 = sub_100122CD4();
    uint64_t v48 = swift_allocError(&type metadata for CentralManager.Error, v47, 0LL, 0LL);
    *(void *)uint64_t v49 = 15LL;
    *(_OWORD *)(v49 + 8) = 0u;
    *(_OWORD *)(v49 + 24) = 0u;
    *(_BYTE *)(v49 + 40) = 11;
    swift_willThrow(v48);
    uint64_t v50 = swift_errorRelease(v48);
    uint64_t v51 = static os_log_type_t.error.getter(v50);
    if (qword_10099B798 != -1) {
      swift_once(&qword_10099B798, sub_100651870);
    }
    os_log(_:dso:log:_:_:)( v51,  &_mh_execute_header,  qword_100A2B0A8,  "Cannot initiate pairing without central manager.",  48LL,  2LL,  _swiftEmptyArrayStorage);
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    v53 = v101;
    uint64_t v52 = v102;
    uint64_t v54 = v103;
    (*(void (**)(char *, void, uint64_t))(v102 + 104))( v101,  enum case for DispatchQoS.QoSClass.default(_:),  v103);
    v55 = (void *)static OS_dispatch_queue.global(qos:)(v53);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v54);
    uint64_t v56 = swift_allocObject(&unk_100969798, 32LL, 7LL);
    uint64_t v57 = v107;
    *(void *)(v56 + 16) = v106;
    *(void *)(v56 + 24) = v57;
    v113 = sub_1005E6768;
    uint64_t v114 = v56;
    aBlock = _NSConcreteStackBlock;
    uint64_t v110 = 1107296256LL;
    v111 = sub_1001C31E8;
    v112 = &unk_1009697B0;
    v58 = _Block_copy(&aBlock);
    uint64_t v59 = swift_retain();
    v60 = v104;
    static DispatchQoS.unspecified.getter(v59);
    v108 = _swiftEmptyArrayStorage;
    uint64_t v61 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v62 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v63 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    v64 = v105;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v108, v62, v63, v5, v61);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v60, v64, v58);
    _Block_release(v58);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v64, v5);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v60, v8);
  }

  return swift_release();
}

void sub_1005E4A08(void (*a1)(void *))
{
  uint64_t v3 = v2;
  uint64_t v7 = 1LL;
  unint64_t v4 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v5 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
  _BridgedStoredNSError.init(_:userInfo:)(&v8, &v7, v4, v3, v5);
  uint64_t v6 = v8;
  a1(v8);
}

void sub_1005E4AB0(uint64_t *a1, void *a2)
{
}

void sub_1005E4ADC(uint64_t *a1, void *a2)
{
}

void sub_1005E4B08(uint64_t *a1, void *a2)
{
}

void sub_1005E4B34(uint64_t *a1, void *a2)
{
}

void sub_1005E4B60(uint64_t *a1, void *a2)
{
}

void sub_1005E4B8C( uint64_t *a1, void *a2, uint64_t *a3, unint64_t *a4, void (*a5)(uint64_t, __n128), uint64_t *a6, unint64_t *a7)
{
  uint64_t v13 = a1 + 4;
  swift_beginAccess(a1 + 4, v79, 0LL, 0LL);
  uint64_t v14 = a1[4];
  id v15 = a2;
  swift_bridgeObjectRetain(v14);
  sub_1005E5524(v16, (uint64_t)v15, a3, a4);
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();

  if (v18)
  {
    uint64_t v19 = *v13;
    if ((*v13 & 0xC000000000000001LL) != 0)
    {
      if (v19 < 0) {
        uint64_t v20 = *v13;
      }
      else {
        uint64_t v20 = v19 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*v13);
      uint64_t v21 = __CocoaSet.count.getter(v20);
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v21 = *(void *)(v19 + 16);
    }

    __n128 v39 = swift_beginAccess(v13, &v75, 33LL, 0LL);
    a5(v18, v39);
    swift_endAccess(&v75);
    swift_release();
    (*(void (**)(uint64_t))(*a1 + 200))(v18);
    uint64_t v40 = a1[4];
    if ((v40 & 0xC000000000000001LL) != 0)
    {
      if (v40 < 0) {
        uint64_t v41 = a1[4];
      }
      else {
        uint64_t v41 = v40 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a1[4]);
      uint64_t v42 = __CocoaSet.count.getter(v41);
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v42 = *(void *)(v40 + 16);
    }

    uint64_t v73 = a6;
    if (qword_10099B898 != -1) {
      swift_once(&qword_10099B898, sub_1006DA610);
    }
    uint64_t v43 = type metadata accessor for Logger(0LL);
    sub_10000A720(v43, (uint64_t)qword_100A2B2C0);
    uint64_t v44 = swift_retain_n(a1, 3LL);
    uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
    os_log_type_t v46 = static os_log_type_t.info.getter(v45);
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v68 = v42;
      uint64_t v47 = swift_slowAlloc(32LL, -1LL);
      uint64_t v69 = swift_slowAlloc(32LL, -1LL);
      uint64_t v77 = a1;
      v78[0] = v69;
      *(_DWORD *)uint64_t v47 = 136446722;
      uint64_t v75 = 60LL;
      v76[0] = 0xE100000000000000LL;
      uint64_t v48 = sub_100004AEC(v73);
      uint64_t v49 = sub_1000372EC(a7, v73, (uint64_t)&unk_100817578);
      v50._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v48, v49);
      String.append(_:)(v50);
      swift_bridgeObjectRelease();
      v51._countAndFlagsBits = 8250LL;
      v51._object = (void *)0xE200000000000000LL;
      String.append(_:)(v51);
      v52._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v48, v49);
      String.append(_:)(v52);
      swift_bridgeObjectRelease();
      v53._countAndFlagsBits = 62LL;
      v53._object = (void *)0xE100000000000000LL;
      String.append(_:)(v53);
      uint64_t v75 = sub_1003F11D4(v75, v76[0], v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v47 + 4, v47 + 12);
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v47 + 12) = 2048;
      uint64_t v75 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v47 + 14, v47 + 22);
      *(_WORD *)(v47 + 22) = 2048;
      uint64_t v54 = a1[4];
      if ((v54 & 0xC000000000000001LL) != 0)
      {
        if (v54 < 0) {
          uint64_t v55 = a1[4];
        }
        else {
          uint64_t v55 = v54 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(a1[4]);
        uint64_t v56 = __CocoaSet.count.getter(v55);
        swift_release();
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v56 = *(void *)(v54 + 16);
        swift_release();
      }

      uint64_t v75 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v47 + 24, v47 + 32);
      swift_release();
      _os_log_impl( (void *)&_mh_execute_header,  v45,  v46,  "%{public}s: Session count: %ld -> %ld",  (uint8_t *)v47,  0x20u);
      swift_arrayDestroy(v69, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v69, -1LL, -1LL);
      swift_slowDealloc(v47, -1LL, -1LL);

      if (v68) {
        goto LABEL_35;
      }
    }

    else
    {

      swift_release_n(a1, 3LL);
      if (v42)
      {
LABEL_35:
        swift_release();
        return;
      }
    }

    uint64_t v57 = swift_retain();
    v58 = (os_log_s *)Logger.logObject.getter(v57);
    os_log_type_t v59 = static os_log_type_t.info.getter(v58);
    if (os_log_type_enabled(v58, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v71 = swift_slowAlloc(32LL, -1LL);
      uint64_t v77 = a1;
      v78[0] = v71;
      *(_DWORD *)v60 = 136446210;
      uint64_t v75 = 60LL;
      v76[0] = 0xE100000000000000LL;
      uint64_t v61 = sub_100004AEC(v73);
      uint64_t v62 = sub_1000372EC(a7, v73, (uint64_t)&unk_100817578);
      v63._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v61, v62);
      String.append(_:)(v63);
      swift_bridgeObjectRelease();
      v64._countAndFlagsBits = 8250LL;
      v64._object = (void *)0xE200000000000000LL;
      String.append(_:)(v64);
      v65._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v61, v62);
      String.append(_:)(v65);
      swift_bridgeObjectRelease();
      v66._countAndFlagsBits = 62LL;
      v66._object = (void *)0xE100000000000000LL;
      String.append(_:)(v66);
      uint64_t v75 = sub_1003F11D4(v75, v76[0], v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v60 + 4, v60 + 12);
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "%{public}s: Final session removed", v60, 0xCu);
      swift_arrayDestroy(v71, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1LL, -1LL);
      swift_slowDealloc(v60, -1LL, -1LL);
    }

    else
    {

      uint64_t v67 = swift_release();
    }

    (*(void (**)(uint64_t))(*a1 + 192))(v67);
    sub_1005E2B34();
    goto LABEL_35;
  }

  if (qword_10099B898 != -1) {
    swift_once(&qword_10099B898, sub_1006DA610);
  }
  uint64_t v22 = type metadata accessor for Logger(0LL);
  sub_10000A720(v22, (uint64_t)qword_100A2B2C0);
  swift_retain_n(a1, 4LL);
  id v23 = v15;
  os_log_type_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.error.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc(32LL, -1LL);
    uint64_t v70 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v72 = swift_slowAlloc(64LL, -1LL);
    uint64_t v77 = a1;
    v78[0] = v72;
    *(_DWORD *)uint64_t v26 = 136446722;
    v76[0] = 0xE100000000000000LL;
    uint64_t v27 = sub_100004AEC(a6);
    uint64_t v28 = sub_1000372EC(a7, a6, (uint64_t)&unk_100817578);
    v29._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v27, v28);
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._countAndFlagsBits = 8250LL;
    v30._object = (void *)0xE200000000000000LL;
    String.append(_:)(v30);
    v31._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v27, v28);
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits = 62LL;
    v32._object = (void *)0xE100000000000000LL;
    String.append(_:)(v32);
    swift_release();
    uint64_t v75 = sub_1003F11D4(60LL, 0xE100000000000000LL, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v26 + 4, v26 + 12);
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2112;
    uint64_t v75 = (uint64_t)v23;
    id v33 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v26 + 14, v26 + 22);
    *uint64_t v70 = v23;

    *(_WORD *)(v26 + 22) = 2080;
    uint64_t v75 = 60LL;
    v76[0] = 0xE100000000000000LL;
    uint64_t v77 = a1;
    v34._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v27, v28);
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 8250LL;
    v35._object = (void *)0xE200000000000000LL;
    String.append(_:)(v35);
    v36._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v27, v28);
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._countAndFlagsBits = 62LL;
    v37._object = (void *)0xE100000000000000LL;
    String.append(_:)(v37);
    swift_release();
    uint64_t v75 = sub_1003F11D4(v75, v76[0], v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v26 + 24, v26 + 32);
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "%{public}s: Attempting to remove unknown connection: %@ from %s",  (uint8_t *)v26,  0x20u);
    uint64_t v38 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v70, 1LL, v38);
    swift_slowDealloc(v70, -1LL, -1LL);
    swift_arrayDestroy(v72, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v72, -1LL, -1LL);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  else
  {

    swift_release_n(a1, 4LL);
  }

void sub_1005E54D4()
{
}

uint64_t sub_1005E5514()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1005E5524(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v4 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v7 = a1;
    }
    else {
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v8 = __CocoaSet.makeIterator()(v7);
    uint64_t v9 = sub_100004AEC(a3);
    uint64_t v10 = sub_1000372EC(a4, a3, (uint64_t)&protocol conformance descriptor for XPCSession<A>);
    uint64_t v11 = Set.Iterator.init(_cocoa:)(v37, v8, v9, v10);
    uint64_t v4 = v37[0];
    uint64_t v34 = v37[1];
    uint64_t v12 = v37[2];
    uint64_t v13 = v37[3];
    unint64_t v14 = v37[4];
  }

  else
  {
    uint64_t v15 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v34 = a1 + 56;
    uint64_t v16 = ~v15;
    uint64_t v17 = -v15;
    if (v17 < 64) {
      uint64_t v18 = ~(-1LL << v17);
    }
    else {
      uint64_t v18 = -1LL;
    }
    unint64_t v14 = v18 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    uint64_t v12 = v16;
    uint64_t v13 = 0LL;
  }

  int64_t v33 = (unint64_t)(v12 + 64) >> 6;
  if ((v4 & 0x8000000000000000LL) == 0) {
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v19 = __CocoaSet.Iterator.next()(v11);
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v36 = v19;
    swift_unknownObjectRetain(v19);
    uint64_t v21 = sub_100004AEC(a3);
    swift_dynamicCast(&v38, &v36, (char *)&type metadata for Swift.AnyObject + 8, v21, 7LL);
    uint64_t v22 = v38;
    swift_unknownObjectRelease(v20);
    uint64_t v23 = v13;
    uint64_t v24 = v14;
    if (v22)
    {
      do
      {
        sub_100022898(0LL, (unint64_t *)&qword_10099E400, &OBJC_CLASS___NSObject_ptr);
        Swift::String v30 = (void *)XPCSession.connection.getter();
        char v31 = static NSObject.== infix(_:_:)(v30, a2);

        if ((v31 & 1) != 0) {
          break;
        }
        uint64_t v11 = (void *)swift_release();
        uint64_t v13 = v23;
        unint64_t v14 = v24;
        if (v4 < 0) {
          goto LABEL_11;
        }
LABEL_14:
        if (v14)
        {
          uint64_t v24 = (v14 - 1) & v14;
          unint64_t v25 = __clz(__rbit64(v14)) | (v13 << 6);
          uint64_t v23 = v13;
        }

        else
        {
          int64_t v26 = v13 + 1;
          if (__OFADD__(v13, 1LL))
          {
            __break(1u);
            return;
          }

          if (v26 >= v33) {
            break;
          }
          unint64_t v27 = *(void *)(v34 + 8 * v26);
          uint64_t v23 = v13 + 1;
          if (!v27)
          {
            uint64_t v23 = v13 + 2;
            if (v13 + 2 >= v33) {
              break;
            }
            unint64_t v27 = *(void *)(v34 + 8 * v23);
            if (!v27)
            {
              uint64_t v23 = v13 + 3;
              if (v13 + 3 >= v33) {
                break;
              }
              unint64_t v27 = *(void *)(v34 + 8 * v23);
              if (!v27)
              {
                uint64_t v23 = v13 + 4;
                if (v13 + 4 >= v33) {
                  break;
                }
                unint64_t v27 = *(void *)(v34 + 8 * v23);
                if (!v27)
                {
                  uint64_t v23 = v13 + 5;
                  if (v13 + 5 >= v33) {
                    break;
                  }
                  unint64_t v27 = *(void *)(v34 + 8 * v23);
                  if (!v27)
                  {
                    uint64_t v28 = v13 + 6;
                    while (v33 != v28)
                    {
                      unint64_t v27 = *(void *)(v34 + 8 * v28++);
                      if (v27)
                      {
                        uint64_t v23 = v28 - 1;
                        goto LABEL_31;
                      }
                    }

                    break;
                  }
                }
              }
            }
          }

uint64_t sub_1005E5830()
{
  return sub_1005E396C(*(void **)(v0 + 24));
}

uint64_t sub_1005E5854()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1005E5864(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009B5B40);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&aBlock[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B628 != -1) {
    swift_once(&qword_10099B628, sub_1005E2E30);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = sub_10000A720(v8, (uint64_t)qword_100A2AEB8);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "AccessoryDiscoveryService.start", v12, 2u);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  id v13 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v13)
  {
    unint64_t v14 = v13;
    uint64_t v39 = v5;
    uint64_t v15 = *(dispatch_queue_s **)(a1 + 48);
    uint64_t v16 = swift_allocObject(&unk_100969888, 32LL, 7LL);
    *(void *)(v16 + 16) = a1;
    *(void *)(v16 + 24) = v14;
    uint64_t v17 = swift_allocObject(&unk_1009698B0, 32LL, 7LL);
    *(void *)(v17 + 16) = sub_1005E65F8;
    *(void *)(v17 + 24) = v16;
    aBlock[4] = sub_100154688;
    aBlock[5] = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_100025BD4;
    aBlock[3] = &unk_1009698C8;
    uint64_t v18 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    id v19 = v14;
    swift_release();
    dispatch_sync(v15, v18);
    _Block_release(v18);
    LOBYTE(v15) = swift_isEscapingClosureAtFileLocation(v17, "", 130LL, 106LL, 27LL, 1LL);
    swift_release();
    swift_release();
    if ((v15 & 1) != 0)
    {
      __break(1u);
    }

    else
    {
      uint64_t v20 = *(void *)(a1 + 72);
      if (v20)
      {
        if (*(void *)(v20 + 72))
        {
          swift_retain();
        }

        else
        {
          swift_retain();
          aBlock[0] = sub_1007CA564();
          uint64_t v33 = sub_100004AEC(&qword_1009B5B48);
          uint64_t v34 = sub_1000372EC( &qword_1009B5B50,  &qword_1009B5B48,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
          uint64_t v35 = sub_100007864( &qword_1009B5B58,  (uint64_t (*)(uint64_t))type metadata accessor for CBManagerState,  (uint64_t)&unk_1007E0B9C);
          Publisher<>.removeDuplicates()(v33, v34, v35);
          swift_release();
          uint64_t v36 = swift_allocObject(&unk_100969900, 24LL, 7LL);
          swift_weakInit(v36 + 16, v20);
          uint64_t v37 = sub_1000372EC( &qword_1009B5B60,  &qword_1009B5B40,  (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
          uint64_t v38 = Publisher<>.sink(receiveValue:)(sub_1005E6634, v36, v4, v37);
          swift_release();
          (*(void (**)(char *, uint64_t))(v39 + 8))(v7, v4);
          *(void *)(v20 + 72) = v38;
          swift_release();
        }

        sub_10024A13C();
        (*(void (**)(uint64_t, void))(a2 + 16))(a2, 0LL);

        swift_release();
      }

      else
      {
        type metadata accessor for SPAccessoryDiscoverySessionError(0LL);
        uint64_t v28 = v27;
        uint64_t v41 = 2LL;
        unint64_t v29 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v30 = sub_100007864( &qword_10099C088,  (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError,  (uint64_t)&unk_1007E2D64);
        _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v41, v29, v28, v30);
        char v31 = (void *)aBlock[0];
        Swift::String v32 = (void *)_convertErrorToNSError(_:)(aBlock[0]);
        (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v32);
      }
    }
  }

  else
  {
    type metadata accessor for SPAccessoryDiscoverySessionError(0LL);
    uint64_t v22 = v21;
    uint64_t v41 = 2LL;
    unint64_t v23 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v24 = sub_100007864( &qword_10099C088,  (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError,  (uint64_t)&unk_1007E2D64);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v41, v23, v22, v24);
    unint64_t v25 = (void *)aBlock[0];
    int64_t v26 = (void *)_convertErrorToNSError(_:)(aBlock[0]);
    (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v26);
  }

void sub_1005E5D18(uint64_t a1, uint64_t a2)
{
  if (qword_10099B628 != -1) {
    swift_once(&qword_10099B628, sub_1005E2E30);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A2AEB8);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "AccessoryDiscoveryService.stopAccessoryDiscovery", v8, 2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  if (*(void *)(a1 + 72))
  {
    swift_retain();
    sub_10024878C();
    (*(void (**)(uint64_t, void))(a2 + 16))(a2, 0LL);
    swift_release();
  }

  else
  {
    type metadata accessor for SPAccessoryDiscoverySessionError(0LL);
    uint64_t v10 = v9;
    uint64_t v15 = 2LL;
    unint64_t v11 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v12 = sub_100007864( &qword_10099C088,  (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError,  (uint64_t)&unk_1007E2D64);
    _BridgedStoredNSError.init(_:userInfo:)(&v16, &v15, v11, v10, v12);
    id v13 = v16;
    unint64_t v14 = (void *)_convertErrorToNSError(_:)(v16);
    (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v14);
  }

void sub_1005E5EC0(void *a1, void *a2, uint64_t a3, void (**a4)(void, void, void))
{
  uint64_t v8 = swift_allocObject(&unk_1009696F8, 24LL, 7LL);
  *(void *)(v8 + 16) = a4;
  uint64_t v9 = _Block_copy(a4);
  uint64_t v10 = static os_log_type_t.debug.getter(v9);
  if (qword_10099B798 != -1) {
    swift_once(&qword_10099B798, sub_100651870);
  }
  os_log(_:dso:log:_:_:)( v10,  &_mh_execute_header,  qword_100A2B0A8,  "AccessoryDiscoveryService.finalizePairing",  41LL,  2LL,  _swiftEmptyArrayStorage);
  if (*(void *)(a3 + 80))
  {
    swift_retain();
    sub_1004CC67C(a1, a2, (uint64_t)sub_10009C458, v8);
    swift_release();
    swift_release();
  }

  else
  {
    type metadata accessor for SPPairingSessionError(0LL);
    uint64_t v12 = v11;
    uint64_t v17 = 2LL;
    unint64_t v13 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v14 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
    _BridgedStoredNSError.init(_:userInfo:)(&v18, &v17, v13, v12, v14);
    uint64_t v15 = v18;
    uint64_t v16 = (void *)_convertErrorToNSError(_:)(v18);
    ((void (**)(void, void, void *))a4)[2](a4, 0LL, v16);
    swift_release();
  }

void sub_1005E6064(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = static os_log_type_t.debug.getter(a1);
  if (qword_10099B798 != -1) {
    swift_once(&qword_10099B798, sub_100651870);
  }
  os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  qword_100A2B0A8,  "AccessoryDiscoveryService.invalidatePairing",  43LL,  2LL,  _swiftEmptyArrayStorage);
  if (*(void *)(a1 + 80))
  {
    type metadata accessor for SPPairingSessionError(0LL);
    uint64_t v6 = v5;
    uint64_t v17 = 14LL;
    swift_retain();
    unint64_t v7 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v8 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
    _BridgedStoredNSError.init(_:userInfo:)(&v18, &v17, v7, v6, v8);
    uint64_t v9 = v18;
    uint64_t v10 = (void *)_convertErrorToNSError(_:)(v18);
    (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v10);
    swift_release();
  }

  else
  {
    type metadata accessor for SPPairingSessionError(0LL);
    uint64_t v12 = v11;
    uint64_t v17 = 2LL;
    unint64_t v13 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v14 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
    _BridgedStoredNSError.init(_:userInfo:)(&v18, &v17, v13, v12, v14);
    uint64_t v15 = v18;
    uint64_t v16 = (void *)_convertErrorToNSError(_:)(v18);
    (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v16);
  }

uint64_t sub_1005E6220(void *a1)
{
  if (qword_10099B628 != -1) {
    swift_once(&qword_10099B628, sub_1005E2E30);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2AEB8);
  id v3 = a1;
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    unint64_t v7 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v6 = 138412290;
    id v20 = v3;
    id v8 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v6 + 4, v6 + 12);
    *unint64_t v7 = v3;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "shouldAccept: %@", v6, 0xCu);
    uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
  }

  unint64_t v10 = sub_1005E64E8();
  char v11 = NSXPCConnection.hasEntitlement<A>(_:)(v10, &type metadata for AccessoryDiscoveryEntitlement, v10);
  if ((v11 & 1) == 0)
  {
    id v12 = v3;
    unint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v16 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v15 = 138412290;
      id v20 = v12;
      id v17 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v15 + 4, v15 + 12);
      void *v16 = v12;

      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Missing entitlement: %@", v15, 0xCu);
      uint64_t v18 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v16, 1LL, v18);
      swift_slowDealloc(v16, -1LL, -1LL);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    else
    {

      unint64_t v13 = (os_log_s *)v12;
    }
  }

  return v11 & 1;
}

unint64_t sub_1005E64E8()
{
  unint64_t result = qword_1009B5AD0;
  if (!qword_1009B5AD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080C220, &type metadata for AccessoryDiscoveryEntitlement);
    atomic_store(result, (unint64_t *)&qword_1009B5AD0);
  }

  return result;
}

uint64_t sub_1005E652C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1005E6550()
{
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1005E6584()
{
  return sub_1005E3F84(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1005E6590()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1005E65A0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1005E65C4(void *a1@<X8>)
{
}

void sub_1005E65DC()
{
}

uint64_t sub_1005E65F8()
{
  return sub_1005E3BA4(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1005E6600()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1005E6610()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void *sub_1005E6634(void *a1)
{
  return sub_100248990(a1, v1);
}

uint64_t storeEnumTagSinglePayload for AccessoryDiscoveryEntitlement(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1005E667C + 4 * byte_10080C0B0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1005E669C + 4 * byte_10080C0B5[v4]))();
  }
}

_BYTE *sub_1005E667C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1005E669C(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1005E66A4(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1005E66AC(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1005E66B4(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1005E66BC(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryDiscoveryEntitlement()
{
  return &type metadata for AccessoryDiscoveryEntitlement;
}

unint64_t sub_1005E66DC()
{
  unint64_t result = qword_1009B5B68;
  if (!qword_1009B5B68)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080C1F8, &type metadata for AccessoryDiscoveryEntitlement);
    atomic_store(result, (unint64_t *)&qword_1009B5B68);
  }

  return result;
}

unint64_t sub_1005E6724()
{
  unint64_t result = qword_1009B5B70;
  if (!qword_1009B5B70)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080C180, &type metadata for AccessoryDiscoveryEntitlement);
    atomic_store(result, (unint64_t *)&qword_1009B5B70);
  }

  return result;
}

uint64_t sub_1005E67B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005E67C4);
}

uint64_t sub_1005E67C4(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for FMNAccountType(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 20)],  a2,  v8);
  }

uint64_t sub_1005E6840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005E684C);
}

char *sub_1005E684C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  os_log_type_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)unint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for FMNAccountType(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata accessor for FetchEndpoint(uint64_t a1)
{
  uint64_t result = qword_1009B5BD8;
  if (!qword_1009B5BD8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FetchEndpoint);
  }
  return result;
}

uint64_t sub_1005E68FC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = sub_100004AEC(&qword_1009A14C8);
  uint64_t v3 = OS_dispatch_queue.sync<A>(execute:)(sub_1000F9588, v1, v2);
  URLComponents.init()(v3);
  URLComponents.scheme.setter(0x7370747468LL, 0xE500000000000000LL);
  URLComponents.host.setter(v7[2], v7[3]);
  URLComponents.path.setter(v7[0], v7[1]);
  uint64_t v4 = (uint64_t (*)(void *, void))URLComponents.path.modify(v7);
  v5._countAndFlagsBits = 0x68637465662FLL;
  v5._object = (void *)0xE600000000000000LL;
  String.append(_:)(v5);
  return v4(v7, 0LL);
}

void *sub_1005E69D4(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t result = (void *)sub_100032800(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v4 = 0LL;
    unint64_t v17 = v1 & 0xC000000000000001LL;
    uint64_t v5 = v1;
    while (v2 != v4)
    {
      if (v17) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v1);
      }
      else {
        id v6 = *(id *)(v1 + 8 * v4 + 32);
      }
      id v7 = v6;
      id v8 = [v7 request];
      id v9 = [v8 identifier];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      uint64_t v12 = v11;

      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1) {
        sub_100032800(v13 > 1, v14 + 1, 1);
      }
      ++v4;
      _swiftEmptyArrayStorage[2] = v14 + 1;
      uint64_t v15 = &_swiftEmptyArrayStorage[2 * v14];
      v15[4] = v10;
      v15[5] = v12;
      uint64_t v1 = v5;
      if (v2 == v4) {
        return _swiftEmptyArrayStorage;
      }
    }

    __break(1u);
LABEL_15:
    if (v1 < 0) {
      uint64_t v16 = v1;
    }
    else {
      uint64_t v16 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
  }

  __break(1u);
  return result;
}

uint64_t sub_1005E6B7C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2AED0);
  sub_10000A720(v0, (uint64_t)qword_100A2AED0);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000011LL,  0x800000010086A6D0LL);
}

uint64_t sub_1005E6BFC()
{
  uint64_t v0 = type metadata accessor for UserNotificationPublisher();
  uint64_t result = swift_allocObject(v0, 24LL, 7LL);
  *(void *)(result + swift_weakDestroy(v0 + 16) = _swiftEmptyArrayStorage;
  qword_100A2AEE8 = result;
  return result;
}

uint64_t sub_1005E6C30(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, BOOL))
{
  if (!a1)
  {
    if (qword_10099B638 != -1) {
      swift_once(&qword_10099B638, sub_1005E6B7C);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    sub_10000A720(v21, (uint64_t)qword_100A2AED0);
    uint64_t v22 = sub_100013044(a2, (uint64_t)v31);
    id v8 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v23 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v23))
    {
      uint64_t v10 = swift_slowAlloc(12LL, -1LL);
      uint64_t v11 = swift_slowAlloc(32LL, -1LL);
      uint64_t v30 = v11;
      *(_DWORD *)uint64_t v10 = 136315138;
      sub_100013044((uint64_t)v31, (uint64_t)&v28);
      uint64_t v24 = sub_100004AEC(&qword_1009AF8F8);
      uint64_t v25 = String.init<A>(describing:)(&v28, v24);
      uint64_t v28 = sub_1003F11D4(v25, v26, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v31);
      _os_log_impl( (void *)&_mh_execute_header,  v8,  v23,  "Successfuly posted user notification for notification: %s",  (uint8_t *)v10,  0xCu);
      uint64_t v18 = (char *)&type metadata for Any + 8;
      uint64_t v19 = v11;
      uint64_t v20 = 1LL;
LABEL_10:
      swift_arrayDestroy(v19, v20, v18);
      swift_slowDealloc(v11, -1LL, -1LL);
      swift_slowDealloc(v10, -1LL, -1LL);

      if (!a3) {
        return sub_10049F44C(a1, a1 != 0);
      }
      goto LABEL_13;
    }

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v31);

    if (!a3) {
      return sub_10049F44C(a1, a1 != 0);
    }
LABEL_13:
    a3(a1, a1 != 0);
    return sub_10049F44C(a1, a1 != 0);
  }

  swift_errorRetain(a1);
  if (qword_10099B638 != -1) {
    swift_once(&qword_10099B638, sub_1005E6B7C);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10000A720(v6, (uint64_t)qword_100A2AED0);
  sub_100013044(a2, (uint64_t)v31);
  swift_errorRetain(a1);
  uint64_t v7 = swift_errorRetain(a1);
  id v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc(22LL, -1LL);
    uint64_t v11 = swift_slowAlloc(64LL, -1LL);
    uint64_t v30 = v11;
    *(_DWORD *)uint64_t v10 = 136315394;
    sub_100013044((uint64_t)v31, (uint64_t)&v28);
    uint64_t v12 = sub_100004AEC(&qword_1009AF8F8);
    uint64_t v13 = String.init<A>(describing:)(&v28, v12);
    uint64_t v28 = sub_1003F11D4(v13, v14, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v31);
    *(_WORD *)(v10 + 12) = 2080;
    uint64_t v28 = a1;
    swift_errorRetain(a1);
    uint64_t v15 = sub_100004AEC(&qword_10099C678);
    uint64_t v16 = String.init<A>(describing:)(&v28, v15);
    uint64_t v28 = sub_1003F11D4(v16, v17, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "Failed to post user notification for notification: %s due to error: %s",  (uint8_t *)v10,  0x16u);
    uint64_t v18 = (char *)&type metadata for Any + 8;
    uint64_t v19 = v11;
    uint64_t v20 = 2LL;
    goto LABEL_10;
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v31);
  swift_errorRelease(a1);
  swift_errorRelease(a1);

  if (a3) {
    goto LABEL_13;
  }
  return sub_10049F44C(a1, a1 != 0);
}

void sub_1005E7018(unint64_t a1, uint64_t a2, void *a3)
{
  v7[2] = a2;
  swift_bridgeObjectRetain(a1);
  uint64_t v5 = sub_1000241E8(sub_1005E8A1C, v7, a1);
  sub_1005E69D4((unint64_t)v5);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a3 removeDeliveredNotificationsWithIdentifiers:isa];
}

uint64_t sub_1005E70B4(id *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v35[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v34 = *a1;
  id v8 = [v34 request];
  id v9 = [v8 identifier];

  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v12 = v11;

  uint64_t v14 = a2[3];
  uint64_t v13 = a2[4];
  sub_100012ED8(a2, v14);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(v14, v13);
  uint64_t v16 = UUID.uuidString.getter(v15);
  uint64_t v18 = v17;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v10 == v16 && v12 == v18)
  {
    swift_bridgeObjectRelease_n(v12, 2LL);
    sub_100013044((uint64_t)a2, (uint64_t)v35);
  }

  else
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, v16, v18, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100013044((uint64_t)a2, (uint64_t)v35);
    char v21 = 0;
    if ((v20 & 1) == 0) {
      goto LABEL_13;
    }
  }

  id v22 = [v34 request];
  id v23 = [v22 content];

  id v24 = [v23 categoryIdentifier];
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  uint64_t v27 = v26;

  uint64_t v28 = v36;
  uint64_t v29 = v37;
  sub_100012ED8(v35, v36);
  char v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v28, v29);
  sub_1005E7330(v30);
  if (v25 == v31 && v27 == v32) {
    char v21 = 1;
  }
  else {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v27, v31, v32, 0LL);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_13:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v35);
  return v21 & 1;
}

void sub_1005E7330(char a1)
{
  __asm { BR              X12 }

uint64_t sub_1005E7374()
{
  else {
    uint64_t v1 = &SPSeparationAlertLeftBehindItemsCategoryIdentifier;
  }
  return static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
}

void sub_1005E740C()
{
}

unint64_t sub_1005E7428()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_1005E7448(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, BOOL))
{
  if (!a1)
  {
    if (qword_10099B638 != -1) {
      swift_once(&qword_10099B638, sub_1005E6B7C);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    sub_10000A720(v21, (uint64_t)qword_100A2AED0);
    sub_100013044(a2, (uint64_t)v34);
    uint64_t v22 = sub_100013044(a3, (uint64_t)&v32);
    id v9 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v10 = static os_log_type_t.default.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc(22LL, -1LL);
      uint64_t v12 = swift_slowAlloc(64LL, -1LL);
      uint64_t v31 = v12;
      *(_DWORD *)uint64_t v11 = 136315394;
      sub_100013044((uint64_t)v34, (uint64_t)&v29);
      uint64_t v23 = sub_100004AEC(&qword_1009AF8F8);
      uint64_t v24 = String.init<A>(describing:)(&v29, v23);
      uint64_t v29 = sub_1003F11D4(v24, v25, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v34);
      *(_WORD *)(v11 + 12) = 2080;
      sub_100013044((uint64_t)&v32, (uint64_t)&v29);
      uint64_t v26 = String.init<A>(describing:)(&v29, v23);
      uint64_t v29 = sub_1003F11D4(v26, v27, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30, v11 + 14, v11 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v32);
      uint64_t v19 = "Successfuly updated user notification %s with %s";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v9, v10, v19, (uint8_t *)v11, 0x16u);
      swift_arrayDestroy(v12, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);

      if (!a4) {
        return sub_10049F44C(a1, a1 != 0);
      }
      goto LABEL_13;
    }

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v34);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v32);

    if (!a4) {
      return sub_10049F44C(a1, a1 != 0);
    }
LABEL_13:
    a4(a1, a1 != 0);
    return sub_10049F44C(a1, a1 != 0);
  }

  swift_errorRetain(a1);
  if (qword_10099B638 != -1) {
    swift_once(&qword_10099B638, sub_1005E6B7C);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_10000A720(v7, (uint64_t)qword_100A2AED0);
  sub_100013044(a3, (uint64_t)v34);
  swift_errorRetain(a1);
  uint64_t v8 = swift_errorRetain(a1);
  id v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc(22LL, -1LL);
    uint64_t v12 = swift_slowAlloc(64LL, -1LL);
    uint64_t v29 = v12;
    *(_DWORD *)uint64_t v11 = 136315394;
    sub_100013044((uint64_t)v34, (uint64_t)&v32);
    uint64_t v13 = sub_100004AEC(&qword_1009AF8F8);
    uint64_t v14 = String.init<A>(describing:)(&v32, v13);
    uint64_t v32 = sub_1003F11D4(v14, v15, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v34);
    *(_WORD *)(v11 + 12) = 2080;
    uint64_t v32 = a1;
    swift_errorRetain(a1);
    uint64_t v16 = sub_100004AEC(&qword_10099C678);
    uint64_t v17 = String.init<A>(describing:)(&v32, v16);
    uint64_t v32 = sub_1003F11D4(v17, v18, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    uint64_t v19 = "Failed to update notification for notification: %s due to error: %s";
    goto LABEL_10;
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v34);
  swift_errorRelease(a1);
  swift_errorRelease(a1);

  if (a4) {
    goto LABEL_13;
  }
  return sub_10049F44C(a1, a1 != 0);
}

uint64_t sub_1005E7878()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t type metadata accessor for UserNotificationPublisher()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd25UserNotificationPublisher);
}

uint64_t sub_1005E78BC(unsigned __int8 *a1)
{
  return sub_1005E78C8(*a1);
}

uint64_t sub_1005E78C8(unsigned __int8 a1)
{
  return ((uint64_t (*)(void))((char *)sub_1005E78EC + 4 * byte_10080C298[a1 >> 6]))();
}

BOOL sub_1005E78EC@<W0>(unsigned int a1@<W8>)
{
  return a1 <= 0x3F && v1 == a1;
}

void *sub_1005E7990(unsigned __int8 a1)
{
  id v2 = objc_allocWithZone(&OBJC_CLASS___UNUserNotificationCenter);
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [v2 initWithBundleIdentifier:v3];

  id v5 = [v4 deliveredNotifications];
  unint64_t v6 = sub_1005E7DD0();
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0) {
      uint64_t v14 = v7;
    }
    else {
      uint64_t v14 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v7);
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease();
    if (v8)
    {
LABEL_3:
      if (v8 >= 1)
      {
        uint64_t v9 = a1 >> 6;
        uint64_t v19 = SPSeparationAlertLeftWhileTravelingDevicesCategoryIdentifier;
        uint64_t v17 = SPSeparationAlertLeftBehindDevicesCategoryIdentifier;
        uint64_t v18 = SPSeparationAlertLeftWhileTravelingItemsCategoryIdentifier;
        uint64_t v16 = SPSeparationAlertLeftBehindItemsCategoryIdentifier;
        if ((v7 & 0xC000000000000001LL) != 0) {
          id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v7);
        }
        else {
          id v10 = *(id *)(v7 + 32);
        }
        id v11 =  objc_msgSend( v10,  "request",  v4,  ".localnotifywhenfound",  "userNotifications",  "com.apple.findmy.lowbattery",  v16,  v17,  v18,  v19,  "lert.queuedsound");
        id v12 = [v11 content];

        id v13 = [v12 categoryIdentifier];
        static String._unconditionallyBridgeFromObjectiveC(_:)(v13);

        __asm { BR              X8 }
      }

      __break(1u);
      JUMPOUT(0x1005E7DB0LL);
    }
  }

  else
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v8) {
      goto LABEL_3;
    }
  }

  swift_bridgeObjectRelease();

  return _swiftEmptyArrayStorage;
}

unint64_t sub_1005E7DD0()
{
  unint64_t result = qword_1009B5D08;
  if (!qword_1009B5D08)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___UNNotification);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1009B5D08);
  }

  return result;
}

id sub_1005E7E0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v5 + 16))(v7);
  id v8 = [objc_allocWithZone(UNMutableNotificationContent) init];
  id v9 = [(id)objc_opt_self(UNNotificationSound) defaultSound];
  [v8 setSound:v9];

  id v10 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 8);
  char v11 = v10(a2, a3);
  sub_1005E7330(v11);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 setCategoryIdentifier:v12];

  (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 setTitle:v13];

  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 setBody:v14];

  else {
    uint64_t v15 = 2LL;
  }
  [v8 setInterruptionLevel:v15];
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  char v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3);
  uint64_t v26 = &type metadata for Bool;
  LOBYTE(v25) = v17 & 1;
  sub_10006A358(&v25, v24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
  uint64_t v23 = v16;
  sub_10005CAD4(v24, 0xD000000000000023LL, 0x800000010086A810LL, isUniquelyReferenced_nonNull_native);
  uint64_t v19 = v23;
  swift_bridgeObjectRelease();
  sub_10028B660(v19);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v8 setUserInfo:isa];

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a2);
  return v8;
}

void sub_1005E80CC(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100012ED8(a1, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 88))(v10, v11);
  id v12 = objc_allocWithZone(&OBJC_CLASS___UNUserNotificationCenter);
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v14 = [v12 initWithBundleIdentifier:v13];

  uint64_t v15 = a2[3];
  uint64_t v16 = a2[4];
  char v17 = sub_100012ED8(a2, v15);
  id v18 = sub_1005E7E0C((uint64_t)v17, v15, v16);
  uint64_t v20 = a1[3];
  uint64_t v19 = a1[4];
  sub_100012ED8(a1, v20);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 16))(v20, v19);
  UUID.uuidString.getter(v21);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_100013044((uint64_t)a1, (uint64_t)v31);
  sub_100013044((uint64_t)a2, (uint64_t)v30);
  uint64_t v23 = swift_allocObject(&unk_100969A58, 112LL, 7LL);
  sub_100012EC0(v31, v23 + 16);
  sub_100012EC0(v30, v23 + 56);
  uint64_t v25 = v27;
  uint64_t v24 = v28;
  *(void *)(v23 + 96) = v27;
  *(void *)(v23 + 104) = v24;
  aBlock[4] = sub_1005E8388;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10033A8C4;
  aBlock[3] = &unk_100969A70;
  uint64_t v26 = _Block_copy(aBlock);
  sub_1000372DC(v25, v24);
  swift_release();
  [v14 replaceContentForRequestWithIdentifier:v22 replacementContent:v18 completionHandler:v26];
  _Block_release(v26);
}

uint64_t sub_1005E834C()
{
  if (v0[12]) {
    swift_release();
  }
  return swift_deallocObject(v0, 112LL, 7LL);
}

uint64_t sub_1005E8388(uint64_t a1)
{
  return sub_1005E7448(a1, v1 + 16, v1 + 56, *(void (**)(uint64_t, BOOL))(v1 + 96));
}

uint64_t sub_1005E8398(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1005E83A8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1005E83B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  NSString v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v63[3] = a4;
  v63[4] = a5;
  id v14 = sub_10000A7C8(v63);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16LL))(v14, a1, a4);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a5 + 72))(a4, a5) & 1) != 0)
  {
    uint64_t v55 = a2;
    uint64_t v56 = a3;
    (*(void (**)(uint64_t, uint64_t))(a5 + 88))(a4, a5);
    id v15 = objc_allocWithZone(&OBJC_CLASS___UNUserNotificationCenter);
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v54 = [v15 initWithBundleIdentifier:v16];

    id v17 = sub_1005E7E0C((uint64_t)v14, a4, a5);
    id v18 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 16);
    uint64_t v19 = v18(a4, a5);
    UUID.uuidString.getter(v19);
    Swift::String v52 = *(void (**)(char *, uint64_t))(v11 + 8);
    v52(v13, v10);
    id v20 = v17;
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v53 =  [(id)objc_opt_self(UNNotificationRequest) requestWithIdentifier:v21 content:v20 trigger:0];

    if (((*(uint64_t (**)(uint64_t, uint64_t))(a5 + 64))(a4, a5) & 1) == 0)
    {
      if (qword_10099B638 != -1) {
        swift_once(&qword_10099B638, sub_1005E6B7C);
      }
      uint64_t v22 = type metadata accessor for Logger(0LL);
      sub_10000A720(v22, (uint64_t)qword_100A2AED0);
      uint64_t v23 = sub_100013044((uint64_t)v63, (uint64_t)aBlock);
      uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
      os_log_type_t v25 = static os_log_type_t.error.getter(v24);
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v51 = swift_slowAlloc(32LL, -1LL);
        *(void *)&v61[0] = v51;
        Swift::String v50 = v26;
        *(_DWORD *)uint64_t v26 = 136315138;
        uint64_t v49 = v26 + 4;
        sub_100012ED8(aBlock, (uint64_t)v58);
        v18(a4, a5);
        unint64_t v27 = sub_1000F620C();
        uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter(v10, v27);
        unint64_t v30 = v29;
        v52(v13, v10);
        uint64_t v62 = sub_1003F11D4(v28, v30, (uint64_t *)v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v49, v26 + 12);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
        uint64_t v31 = v50;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "Notification with identifier %s **WILL NOT** be forwarded to the companion",  v50,  0xCu);
        uint64_t v32 = v51;
        swift_arrayDestroy(v51, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v32, -1LL, -1LL);
        swift_slowDealloc(v31, -1LL, -1LL);
      }

      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
      }
    }

    sub_100013044((uint64_t)v63, (uint64_t)v61);
    uint64_t v42 = swift_allocObject(&unk_100969AA8, 72LL, 7LL);
    sub_100012EC0(v61, v42 + 16);
    uint64_t v44 = v55;
    uint64_t v43 = v56;
    *(void *)(v42 + 56) = v55;
    *(void *)(v42 + 64) = v43;
    os_log_type_t v59 = sub_1005E8A10;
    uint64_t v60 = v42;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_10033A8C4;
    v58 = &unk_100969AC0;
    uint64_t v45 = _Block_copy(aBlock);
    sub_1000372DC(v44, v43);
    swift_release();
    uint64_t v47 = v53;
    id v46 = v54;
    [v54 addNotificationRequest:v53 withCompletionHandler:v45];
    _Block_release(v45);
  }

  else
  {
    if (qword_10099B638 != -1) {
      swift_once(&qword_10099B638, sub_1005E6B7C);
    }
    uint64_t v33 = type metadata accessor for Logger(0LL);
    sub_10000A720(v33, (uint64_t)qword_100A2AED0);
    uint64_t v34 = sub_100013044((uint64_t)v63, (uint64_t)aBlock);
    uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v36 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v38 = swift_slowAlloc(32LL, -1LL);
      uint64_t v62 = v38;
      *(_DWORD *)uint64_t v37 = 136315138;
      sub_100013044((uint64_t)aBlock, (uint64_t)v61);
      uint64_t v39 = sub_100004AEC(&qword_1009AF8F8);
      uint64_t v40 = String.init<A>(describing:)(v61, v39);
      *(void *)&v61[0] = sub_1003F11D4(v40, v41, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v61, (char *)v61 + 8, v37 + 4, v37 + 12);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Refusing to post disabled notification: %s", v37, 0xCu);
      swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1LL, -1LL);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
    }
  }

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v63);
}

uint64_t sub_1005E89DC()
{
  if (*(void *)(v0 + 56)) {
    swift_release();
  }
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_1005E8A10(uint64_t a1)
{
  return sub_1005E6C30(a1, v1 + 16, *(void (**)(uint64_t, BOOL))(v1 + 56));
}

uint64_t sub_1005E8A1C(id *a1)
{
  return sub_1005E70B4(a1, *(void **)(v1 + 16)) & 1;
}

unint64_t destroy for UserNotificationPublisher.Error(unint64_t *a1)
{
  unint64_t result = *a1;
  int v2 = -1;
  if (result < 0xFFFFFFFF) {
    int v2 = result;
  }
  if (v2 - 1 < 0) {
    return swift_errorRelease(result);
  }
  return result;
}

void *_s12searchpartyd25UserNotificationPublisherC5ErrorOwCP_0(void *a1, void *a2)
{
  uint64_t v3 = *a2;
  LODWORD(v4) = -1;
  if (*a2 < 0xFFFFFFFFuLL) {
    uint64_t v4 = *a2;
  }
  *a1 = v3;
  return a1;
}

void *assignWithCopy for UserNotificationPublisher.Error(void *a1, void *a2)
{
  uint64_t v3 = *a1;
  LODWORD(v4) = -1;
  if (*a1 >= 0xFFFFFFFFuLL) {
    LODWORD(v5) = -1;
  }
  else {
    uint64_t v5 = *a1;
  }
  int v6 = v5 - 1;
  uint64_t v7 = *a2;
  if (*a2 < 0xFFFFFFFFuLL) {
    uint64_t v4 = *a2;
  }
  int v8 = v4 - 1;
  if (v6 < 0)
  {
    if (v8 < 0)
    {
      swift_errorRetain(*a2);
      *a1 = v7;
      swift_errorRelease(v3);
    }

    else
    {
      swift_errorRelease(*a1);
      *a1 = *a2;
    }
  }

  else
  {
    if (v8 < 0) {
      swift_errorRetain(*a2);
    }
    *a1 = v7;
  }

  return a1;
}

unint64_t *assignWithTake for UserNotificationPublisher.Error( unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  int v4 = -1;
  if (v3 < 0xFFFFFFFF) {
    int v4 = v3;
  }
  unint64_t v5 = *a2;
  if (v4 - 1 < 0)
  {
    LODWORD(v6) = -1;
    if (v5 < 0xFFFFFFFF) {
      unint64_t v6 = *a2;
    }
    if ((int)v6 - 1 < 0)
    {
      *a1 = v5;
      swift_errorRelease(v3);
      return a1;
    }

    swift_errorRelease(v3);
  }

  *a1 = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for UserNotificationPublisher.Error(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1005E8BF4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

void *sub_1005E8C18(void *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    a2 -= 0x7FFFFFFF;
    goto LABEL_5;
  }

  if (a2) {
LABEL_5:
  }
    *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for UserNotificationPublisher.Error()
{
  return &type metadata for UserNotificationPublisher.Error;
}

uint64_t storeEnumTagSinglePayload for UserNotificationDestination( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1005E8C9C + 4 * byte_10080C2A5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1005E8CD0 + 4 * byte_10080C2A0[v4]))();
}

uint64_t sub_1005E8CD0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005E8CD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005E8CE0LL);
  }
  return result;
}

uint64_t sub_1005E8CEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005E8CF4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1005E8CF8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005E8D00(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UserNotificationDestination()
{
  return &type metadata for UserNotificationDestination;
}

unint64_t sub_1005E8D20()
{
  unint64_t result = qword_1009B5D10;
  if (!qword_1009B5D10)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080C35C, &type metadata for UserNotificationDestination);
    atomic_store(result, (unint64_t *)&qword_1009B5D10);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for UserNotificationCategory(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0x3D) {
    goto LABEL_17;
  }
  if (a2 + 195 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 195) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 195;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 195;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 195;
    }
  }

uint64_t storeEnumTagSinglePayload for UserNotificationCategory(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 195 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 195) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0x3D) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0x3C) {
    return ((uint64_t (*)(void))((char *)&loc_1005E8E4C + 4 * byte_10080C2AF[v4]))();
  }
  *a1 = a2 - 61;
  return ((uint64_t (*)(void))((char *)sub_1005E8E80 + 4 * byte_10080C2AA[v4]))();
}

uint64_t sub_1005E8E80(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005E8E88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005E8E90LL);
  }
  return result;
}

uint64_t sub_1005E8EA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005E8EB0LL);
  }
  *(_BYTE *)unint64_t result = 4 * (((-a2 >> 2) & 0xF) - 16 * a2);
  return result;
}

uint64_t sub_1005E8EB4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005E8EBC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005E8EC8(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  int v2 = (char)v1;
  unsigned int v3 = v1 >> 6;
  unsigned int v4 = (v1 & 3 | (4 * (v1 >> 6))) - 6;
  if (v2 >= 0) {
    return v3;
  }
  else {
    return v4;
  }
}

_BYTE *sub_1005E8EEC(_BYTE *result)
{
  *result &= 0x3Fu;
  return result;
}

_BYTE *sub_1005E8EFC(_BYTE *result, unsigned int a2)
{
  if (a2 < 2) {
    *unint64_t result = *result & 3 | ((_BYTE)a2 << 6);
  }
  else {
    *unint64_t result = ((a2 - 2) & 3 | (((a2 - 2) >> 2) << 6)) ^ 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for UserNotificationCategory()
{
  return &type metadata for UserNotificationCategory;
}

unint64_t sub_1005E8F48(unint64_t a1, uint64_t a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v24 + ((v5 + 16LL) & ~(unint64_t)v5);
    swift_retain();
  }

  else
  {
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    sub_10001736C(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    uint64_t v9 = *(void *)(a2 + 16);
    unint64_t v10 = *(void *)(a2 + 24);
    sub_10001736C(v9, v10);
    *(void *)(a1 + swift_weakDestroy(v0 + 16) = v9;
    *(void *)(a1 + 24) = v10;
    *(_BYTE *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(_BYTE *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    unint64_t v12 = *(void *)(a2 + 48);
    sub_10001736C(v11, v12);
    *(void *)(a1 + 40) = v11;
    *(void *)(a1 + 48) = v12;
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    uint64_t v13 = a3[9];
    uint64_t v14 = a1 + v13;
    uint64_t v15 = a2 + v13;
    uint64_t v16 = type metadata accessor for Date(0LL);
    id v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16LL);
    v17(v14, v15, v16);
    uint64_t v18 = a3[11];
    *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
    uint64_t v19 = (void *)(a1 + v18);
    id v20 = (void *)(a2 + v18);
    uint64_t v21 = type metadata accessor for CachedHistoricalLocation(0LL);
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21))
    {
      uint64_t v23 = sub_100004AEC(&qword_10099FB48);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
      v19[2] = v20[2];
      v17((uint64_t)v19 + *(int *)(v21 + 28), (uint64_t)v20 + *(int *)(v21 + 28), v16);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, v21);
    }

    *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  }

  return a1;
}

uint64_t type metadata accessor for CachedHistoricalLocation(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009B5E28, (uint64_t)&nominal type descriptor for CachedHistoricalLocation);
}

uint64_t sub_1005E90F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v9(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 44);
  uint64_t v7 = type metadata accessor for CachedHistoricalLocation(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 28), v5);
  }
  return result;
}

uint64_t sub_1005E91C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_10001736C(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  uint64_t v8 = *(void *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  sub_10001736C(v8, v9);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(_BYTE *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  unint64_t v11 = *(void *)(a2 + 48);
  sub_10001736C(v10, v11);
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v12 = a3[9];
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = type metadata accessor for Date(0LL);
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16LL);
  v16(v13, v14, v15);
  uint64_t v17 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  uint64_t v20 = type metadata accessor for CachedHistoricalLocation(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(v19, 1LL, v20))
  {
    uint64_t v22 = sub_100004AEC(&qword_10099FB48);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
  }

  else
  {
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
    v18[2] = v19[2];
    v16((char *)v18 + *(int *)(v20 + 28), (char *)v19 + *(int *)(v20 + 28), v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
  }

  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_1005E932C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_10001736C(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  sub_100016F9C(v8, v9);
  uint64_t v10 = *(void *)(a2 + 16);
  unint64_t v11 = *(void *)(a2 + 24);
  sub_10001736C(v10, v11);
  uint64_t v12 = *(void *)(a1 + 16);
  unint64_t v13 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v10;
  *(void *)(a1 + 24) = v11;
  sub_100016F9C(v12, v13);
  *(_BYTE *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(_BYTE *)(a2 + 32);
  uint64_t v14 = *(void *)(a2 + 40);
  unint64_t v15 = *(void *)(a2 + 48);
  sub_10001736C(v14, v15);
  uint64_t v16 = *(void *)(a1 + 40);
  unint64_t v17 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v14;
  *(void *)(a1 + 48) = v15;
  sub_100016F9C(v16, v17);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v18 = a3[9];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = type metadata accessor for Date(0LL);
  uint64_t v33 = *(void *)(v21 - 8);
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 24);
  v22(v19, v20, v21);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  uint64_t v34 = a3;
  uint64_t v23 = a3[11];
  uint64_t v24 = (void *)(a1 + v23);
  os_log_type_t v25 = (void *)(a2 + v23);
  uint64_t v26 = type metadata accessor for CachedHistoricalLocation(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 1LL, v26);
  int v30 = v28(v25, 1LL, v26);
  if (!v29)
  {
    if (!v30)
    {
      *uint64_t v24 = *v25;
      v24[1] = v25[1];
      _OWORD v24[2] = v25[2];
      v22((uint64_t)v24 + *(int *)(v26 + 28), (uint64_t)v25 + *(int *)(v26 + 28), v21);
      goto LABEL_7;
    }

    sub_1005E952C((uint64_t)v24);
    goto LABEL_6;
  }

  if (v30)
  {
LABEL_6:
    uint64_t v31 = sub_100004AEC(&qword_10099FB48);
    memcpy(v24, v25, *(void *)(*(void *)(v31 - 8) + 64LL));
    goto LABEL_7;
  }

  *uint64_t v24 = *v25;
  v24[1] = v25[1];
  _OWORD v24[2] = v25[2];
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))( (char *)v24 + *(int *)(v26 + 28),  (char *)v25 + *(int *)(v26 + 28),  v21);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
LABEL_7:
  *(_BYTE *)(a1 + v34[12]) = *(_BYTE *)(a2 + v34[12]);
  return a1;
}

uint64_t sub_1005E952C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CachedHistoricalLocation(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1005E9568(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  *(_BYTE *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v7 = a3[9];
  uint64_t v8 = (char *)(a1 + v7);
  unint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date(0LL);
  unint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL);
  v11(v8, v9, v10);
  uint64_t v12 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  unint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for CachedHistoricalLocation(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
  {
    uint64_t v17 = sub_100004AEC(&qword_10099FB48);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
    v13[2] = v14[2];
    v11((char *)v13 + *(int *)(v15 + 28), (char *)v14 + *(int *)(v15 + 28), v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
  }

  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_1005E96A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016F9C(v6, v7);
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v9 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  sub_100016F9C(v8, v9);
  *(_BYTE *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(_BYTE *)(a2 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  unint64_t v11 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_100016F9C(v10, v11);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v12 = a3[9];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Date(0LL);
  uint64_t v27 = *(void *)(v15 - 8);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 40);
  v16(v13, v14, v15);
  uint64_t v17 = a3[11];
  uint64_t v28 = a3;
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  uint64_t v20 = type metadata accessor for CachedHistoricalLocation(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v21 + 48);
  int v23 = v22(v18, 1LL, v20);
  int v24 = v22(v19, 1LL, v20);
  if (!v23)
  {
    if (!v24)
    {
      *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
      v18[2] = v19[2];
      v16((uint64_t)v18 + *(int *)(v20 + 28), (uint64_t)v19 + *(int *)(v20 + 28), v15);
      goto LABEL_7;
    }

    sub_1005E952C((uint64_t)v18);
    goto LABEL_6;
  }

  if (v24)
  {
LABEL_6:
    uint64_t v25 = sub_100004AEC(&qword_10099FB48);
    memcpy(v18, v19, *(void *)(*(void *)(v25 - 8) + 64LL));
    goto LABEL_7;
  }

  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  v18[2] = v19[2];
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))( (char *)v18 + *(int *)(v20 + 28),  (char *)v19 + *(int *)(v20 + 28),  v15);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
LABEL_7:
  *(_BYTE *)(a1 + v28[12]) = *(_BYTE *)(a2 + v28[12]);
  return a1;
}

uint64_t sub_1005E9874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005E9880);
}

uint64_t sub_1005E9880(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a3[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }

  uint64_t v10 = sub_100004AEC(&qword_10099FB48);
  uint64_t v7 = *(void *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v10;
    uint64_t v9 = a3[11];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }

  unsigned int v12 = *(unsigned __int8 *)(a1 + a3[12]);
  if (v12 >= 2) {
    int v13 = ((v12 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v13 = -2;
  }
  if (v13 < 0) {
    int v13 = -1;
  }
  return (v13 + 1);
}

uint64_t sub_1005E9944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005E9950);
}

uint64_t sub_1005E9950(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a4[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }

  uint64_t result = sub_100004AEC(&qword_10099FB48);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a4[11];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }

  *(_BYTE *)(a1 + a4[12]) = a2 + 2;
  return result;
}

uint64_t type metadata accessor for BeaconPayload(uint64_t a1)
{
  return sub_10008BED8(a1, (uint64_t *)&unk_1009B5D70, (uint64_t)&nominal type descriptor for BeaconPayload);
}

void sub_1005E9A08(uint64_t a1)
{
  v6[0] = &unk_10080C430;
  v6[1] = &unk_10080C430;
  v6[2] = (char *)&value witness table for Builtin.Int8 + 64;
  v6[3] = &unk_10080C430;
  v6[4] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t v2 = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v6[5] = *(void *)(v2 - 8) + 64LL;
    v6[6] = &unk_10080C448;
    sub_1005E9AC8(319LL);
    if (v5 <= 0x3F)
    {
      v6[7] = *(void *)(v4 - 8) + 64LL;
      v6[8] = &unk_10080C460;
      swift_initStructMetadata(a1, 256LL, 9LL, v6, a1 + 16);
    }
  }

void sub_1005E9AC8(uint64_t a1)
{
  if (!qword_1009B5D80)
  {
    uint64_t v2 = type metadata accessor for CachedHistoricalLocation(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1009B5D80);
    }
  }

uint64_t sub_1005E9B1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005E9B28);
}

uint64_t sub_1005E9B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 28);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v4, a2, v5);
}

uint64_t sub_1005E9B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005E9B74);
}

uint64_t sub_1005E9B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 28);
  uint64_t v6 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, a2, a2, v6);
}

uint64_t sub_1005E9BB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005E9C3C(v2 + *(int *)(a1 + 44), a2);
}

unint64_t sub_1005E9BD0(uint64_t a1)
{
  unint64_t result = sub_1005E9BF4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1005E9BF4()
{
  unint64_t result = qword_1009B5E68;
  if (!qword_1009B5E68)
  {
    uint64_t v1 = type metadata accessor for CachedHistoricalLocation(255LL);
    unint64_t result = swift_getWitnessTable(&unk_10080C49C, v1);
    atomic_store(result, (unint64_t *)&qword_1009B5E68);
  }

  return result;
}

uint64_t sub_1005E9C3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099FB48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

BOOL sub_1005E9C84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CachedHistoricalLocation(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (double *)((char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = sub_100004AEC(&qword_1009B5E70);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_10099FB48);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (double *)((char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v33 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v33 - v18;
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)a1, *(void *)(a1 + 8));
  if ((v20 & 1) == 0) {
    return 0LL;
  }
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0( *(void *)(a1 + 16),  *(void *)(a1 + 24));
  if ((v21 & 1) == 0) {
    return 0LL;
  }
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0( *(void *)(a1 + 40),  *(void *)(a1 + 48));
  if ((v22 & 1) == 0) {
    return 0LL;
  }
  if (*(void *)(a1 + 56) != *(void *)(a2 + 56)) {
    return 0LL;
  }
  uint64_t v34 = (int *)type metadata accessor for BeaconPayload(0LL);
  if ((static Date.== infix(_:_:)(a1 + v34[9], a2 + v34[9]) & 1) == 0
    || *(unsigned __int8 *)(a1 + v34[10]) != *(unsigned __int8 *)(a2 + v34[10]))
  {
    return 0LL;
  }

  sub_1005E9C3C(a1 + v34[11], (uint64_t)v19);
  sub_1005E9C3C(a2 + v34[11], (uint64_t)v17);
  uint64_t v23 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_1005E9C3C((uint64_t)v19, (uint64_t)v10);
  sub_1005E9C3C((uint64_t)v17, v23);
  int v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v24((uint64_t)v10, 1LL, v4) == 1)
  {
    sub_100015794((uint64_t)v17, &qword_10099FB48);
    sub_100015794((uint64_t)v19, &qword_10099FB48);
    if (v24(v23, 1LL, v4) == 1)
    {
      sub_100015794((uint64_t)v10, &qword_10099FB48);
      goto LABEL_11;
    }

    goto LABEL_16;
  }

  sub_1005E9C3C((uint64_t)v10, (uint64_t)v14);
  if (v24(v23, 1LL, v4) == 1)
  {
    sub_100015794((uint64_t)v17, &qword_10099FB48);
    sub_100015794((uint64_t)v19, &qword_10099FB48);
    sub_1005E952C((uint64_t)v14);
LABEL_16:
    uint64_t v28 = &qword_1009B5E70;
    uint64_t v29 = (uint64_t)v10;
LABEL_23:
    sub_100015794(v29, v28);
    return 0LL;
  }

  sub_1005EA054(v23, (uint64_t)v7);
  if (*v14 != *v7 || v14[1] != v7[1] || v14[2] != v7[2])
  {
    sub_1005E952C((uint64_t)v7);
    sub_100015794((uint64_t)v17, &qword_10099FB48);
    sub_100015794((uint64_t)v19, &qword_10099FB48);
    sub_1005E952C((uint64_t)v14);
    uint64_t v29 = (uint64_t)v10;
    uint64_t v28 = &qword_10099FB48;
    goto LABEL_23;
  }

  char v30 = static Date.== infix(_:_:)((char *)v14 + *(int *)(v4 + 28), (char *)v7 + *(int *)(v4 + 28));
  sub_1005E952C((uint64_t)v7);
  sub_100015794((uint64_t)v17, &qword_10099FB48);
  sub_100015794((uint64_t)v19, &qword_10099FB48);
  sub_1005E952C((uint64_t)v14);
  sub_100015794((uint64_t)v10, &qword_10099FB48);
  if ((v30 & 1) == 0) {
    return 0LL;
  }
LABEL_11:
  uint64_t v25 = v34[12];
  int v26 = *(unsigned __int8 *)(a1 + v25);
  int v27 = *(unsigned __int8 *)(a2 + v25);
  if (v26 != 2)
  {
    BOOL v32 = (v26 & 1) == 0;
    return v27 != 2 && ((v32 ^ v27) & 1) != 0;
  }

  return v27 == 2;
}

uint64_t sub_1005EA054(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CachedHistoricalLocation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005EA098(double *a1, double *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2]) {
    return 0LL;
  }
  uint64_t v4 = *(int *)(type metadata accessor for CachedHistoricalLocation(0LL) + 28);
  return static Date.== infix(_:_:)((char *)a1 + v4, (char *)a2 + v4);
}

uint64_t sub_1005EA10C()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(43LL);
  uint64_t v2 = type metadata accessor for AirPodsPairingManager();
  unint64_t v3 = sub_1005EA46C();
  uint64_t v4 = CustomStringConvertible.typeDescription.getter(v2, v3);
  swift_bridgeObjectRelease();
  uint64_t v19 = v4;
  v5._countAndFlagsBits = 8250LL;
  v5._object = (void *)0xE200000000000000LL;
  String.append(_:)(v5);
  v6._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v2, v3);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._object = (void *)0x800000010086A900LL;
  v7._countAndFlagsBits = 0xD000000000000014LL;
  String.append(_:)(v7);
  if (*(_BYTE *)(v1 + 72)) {
    uint64_t v8 = 1702195828LL;
  }
  else {
    uint64_t v8 = 0x65736C6166LL;
  }
  if (*(_BYTE *)(v1 + 72)) {
    unint64_t v9 = 0xE400000000000000LL;
  }
  else {
    unint64_t v9 = 0xE500000000000000LL;
  }
  unint64_t v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x6568706972657020LL;
  v11._object = (void *)0xED0000203A6C6172LL;
  String.append(_:)(v11);
  id v12 = *(id *)(v1 + 64);
  id v13 = [v12 description];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  uint64_t v16 = v15;

  v17._countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);

  swift_bridgeObjectRelease();
  return v19;
}

uint64_t sub_1005EA2A0()
{
  uint64_t v1 = v0;
  if (qword_10099B7A0 != -1) {
    swift_once(&qword_10099B7A0, sub_1006518D8);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_10000A720(v2, (uint64_t)qword_100A2B0B0);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    Swift::String v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)Swift::String v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "AirPodsPairingManager.deinit", v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10002214C(*(void *)(v1 + 128), *(void *)(v1 + 136));
  sub_1000182F0(*(void *)(v1 + 144), *(void *)(v1 + 152));
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v1 + 176));
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1005EA40C()
{
  return swift_deallocClassInstance(v0, 240LL, 7LL);
}

uint64_t type metadata accessor for AirPodsPairingManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd21AirPodsPairingManager);
}

uint64_t sub_1005EA44C()
{
  return sub_1005EA10C();
}

unint64_t sub_1005EA46C()
{
  unint64_t result = qword_1009B6290;
  if (!qword_1009B6290)
  {
    uint64_t v1 = type metadata accessor for AirPodsPairingManager();
    unint64_t result = swift_getWitnessTable(&unk_10080C5F8, v1);
    atomic_store(result, (unint64_t *)&qword_1009B6290);
  }

  return result;
}

ValueMetadata *type metadata accessor for AccessoryKeyrollIndicationPayload()
{
  return &type metadata for AccessoryKeyrollIndicationPayload;
}

unint64_t sub_1005EA4C0(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1005EA4EC();
  unint64_t result = sub_1000F5198();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_1005EA4EC()
{
  unint64_t result = qword_1009B6298;
  if (!qword_1009B6298)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080C644, &type metadata for AccessoryKeyrollIndicationPayload);
    atomic_store(result, (unint64_t *)&qword_1009B6298);
  }

  return result;
}

uint64_t sub_1005EA530()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t type metadata accessor for UnsafeSynchronizer()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd18UnsafeSynchronizer);
}

uint64_t sub_1005EA574@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 128);
  uint64_t v4 = *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0LL);
  uint64_t result = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10014F014, v3, v4, (char *)&type metadata for () + 8, v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1005EA5EC(uint64_t a1, unsigned __int8 a2)
{
  return sub_1004E696C(a2);
}

uint64_t sub_1005EA610()
{
  return QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
}

char *sub_1005EA664@<X0>(char **a1@<X8>)
{
  uint64_t result = sub_100506C30();
  *a1 = result;
  return result;
}

void *sub_1005EA68C@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1005073E4();
  *a1 = result;
  return result;
}

void *sub_1005EA6B4@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_100508644();
  *a1 = result;
  return result;
}

uint64_t sub_1005EA6DC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100504C28(a1, a2);
}

uint64_t sub_1005EA700@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = sub_1002C428C(a1);
  uint64_t result = swift_release();
  *a2 = v4;
  return result;
}

uint64_t sub_1005EA75C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100504F30(a1, a2);
}

uint64_t sub_1005EA780(uint64_t a1, uint64_t a2)
{
  return sub_1005EB000(a1, a2, &qword_1009AE490, (uint64_t)sub_10014F098);
}

uint64_t sub_1005EA794@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A7D38);
  __chkstk_darwin(v4);
  Swift::String v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10050FF80(a1, (uint64_t)v6);
  uint64_t v7 = sub_100004AEC(&qword_1009A7D40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7) == 1)
  {
    sub_100015794((uint64_t)v6, &qword_1009A7D38);
    uint64_t v8 = type metadata accessor for BeaconStatus(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))( a2,  1LL,  1LL,  v8);
  }

  else
  {
    sub_10002218C((uint64_t)v6, a2, type metadata accessor for BeaconStatus);
    uint64_t v10 = type metadata accessor for BeaconStatus(0LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))( a2,  0LL,  1LL,  v10);
  }

uint64_t sub_1005EA8A8(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 11_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = a2;
  *(void *)(v4 + 120) = v3;
  *(_BYTE *)(v4 + 160) = a3;
  *(void *)(v4 + 104) = a1;
  return swift_task_switch(sub_1005EA8C8, v3, 0LL);
}

uint64_t sub_1005EA8C8()
{
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v1 = *(void *)(v0 + 120);
  char v3 = *(_BYTE *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 104);
  *(void *)(v0 + 128) = *(void *)(v1 + 136);
  sub_100013044(v4, v0 + 16);
  sub_100013044(v2, v0 + 56);
  uint64_t v5 = swift_allocObject(&unk_10096A060, 105LL, 7LL);
  *(void *)(v0 + 136) = v5;
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v1;
  sub_100012EC0((__int128 *)(v0 + 16), v5 + 24);
  sub_100012EC0((__int128 *)(v0 + 56), v5 + 64);
  *(_BYTE *)(v5 + 104) = v3;
  swift_retain();
  return swift_task_switch(sub_1005EA980, 0LL, 0LL);
}

uint64_t sub_1005EA980()
{
  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  char v3 = (void *)swift_task_alloc(48LL);
  v0[18] = v3;
  v3[2] = v2;
  v3[3] = sub_1005ED5F0;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[19] = v4;
  uint64_t v5 = sub_100004AEC(&qword_1009B6610);
  void *v4 = v0;
  v4[1] = sub_1005EAA3C;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 12,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_1005ED62C,  v3,  v5);
}

uint64_t sub_1005EAA3C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 144);
  uint64_t v3 = *(void *)(*v0 + 136);
  uint64_t v5 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 152));
  swift_release(v3);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v5 + 8))(*(void *)(v1 + 96));
}

uint64_t sub_1005EAAA0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 128);
  type metadata accessor for Transaction(0LL);
  swift_retain(v1);
  static Transaction.asyncTask(name:block:)("UpdateBeaconStatusFromObservationStore", 38LL, 2LL, &unk_1009B2B50, v1);
  return swift_release(v1);
}

uint64_t sub_1005EAAF4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100513108(a1, a2);
}

uint64_t sub_1005EAB18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1004F89A0(a2, a3, a4);
}

void *sub_1005EAB44@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_10050BC4C();
  *a1 = result;
  return result;
}

uint64_t sub_1005EAB6C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100509108(a1, a2);
}

uint64_t sub_1005EAB90(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for MACAddress(0LL);
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[6] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  v2[7] = v5;
  v2[8] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1005EABF4, v1, 0LL);
}

uint64_t sub_1005EABF4()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  v0[9] = *(void *)(v6 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v5, v3);
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = (v7 + 24) & ~v7;
  uint64_t v9 = swift_allocObject(&unk_10096A038, v8 + v2, v7 | 7);
  v0[10] = v9;
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v9 + v8, v1, v3);
  swift_retain();
  return swift_task_switch(sub_1005EACA0, 0LL, 0LL);
}

uint64_t sub_1005EACA0()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[11] = v3;
  v3[2] = v2;
  v3[3] = sub_1005ED574;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[12] = v4;
  uint64_t v5 = sub_100004AEC(&qword_1009B4198);
  void *v4 = v0;
  v4[1] = sub_1005ED638;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 2,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_1005B37FC,  v3,  v5);
}

uint64_t sub_1005EAD5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = *(void *)(*(void *)(a1 + 128) + 136LL);
  if (qword_10099B100 != -1) {
    swift_once(&qword_10099B100, sub_1000E2B04);
  }
  uint64_t v9 = sub_10000A720(v4, (uint64_t)qword_100A2A1B0);
  uint64_t v10 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
  __chkstk_darwin(v10);
  *(void *)&v12[-32] = v8;
  *(void *)&v12[-24] = a2;
  *(void *)&v12[-16] = v7;
  OS_dispatch_queue.sync<A>(execute:)(sub_1000901D4, &v12[-48], &type metadata for Bool);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1005EAE84(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = &v18[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = *(void *)(a1 + 128);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  uint64_t v15 = type metadata accessor for BeaconStatus(0LL);
  char v16 = *(_BYTE *)(a2 + *(int *)(v15 + 20));
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v9, a2 + *(int *)(v15 + 24), v6);
  type metadata accessor for Transaction(0LL);
  uint64_t v19 = v14;
  char v20 = v13;
  char v21 = v9;
  uint64_t v22 = a2;
  char v23 = a3;
  char v24 = v16;
  static Transaction.named<A>(_:with:)("searchpartyd.beaconstore.updateType18Status", 43LL, 2LL, sub_100245E00, v18);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_1005EAFEC(uint64_t a1, uint64_t a2)
{
  return sub_1005EB000(a1, a2, &qword_10099D8A0, (uint64_t)sub_1001B1AE8);
}

uint64_t sub_1005EB000(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return QueueSynchronizer.conditionalSync<A>(_:)(a4);
}

uint64_t sub_1005EB064()
{
  return QueueSynchronizer.conditionalSync<A>(_:)(sub_1001B1B1C);
}

uint64_t sub_1005EB0DC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_1005EBF94( a1,  (uint64_t (*)(uint64_t))sub_100577004,  type metadata accessor for LostModeRecord,  a2);
}

uint64_t sub_1005EB0F0(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v3;
  *(_BYTE *)(v4 + 120) = a3;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a1;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  *(void *)(v4 + 40) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v4 + 48) = v6;
  uint64_t v7 = *(void *)(v6 + 64);
  *(void *)(v4 + 56) = v7;
  *(void *)(v4 + 64) = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009A1800);
  *(void *)(v4 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v8;
  *(void *)(v4 + 80) = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1005EB184, v3, 0LL);
}

uint64_t sub_1005EB184()
{
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  char v5 = *(_BYTE *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v7 = *(void *)(v0 + 32);
  *(void *)(v0 + 88) = *(void *)(v7 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v6, v3);
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = (v8 + 24) & ~v8;
  uint64_t v10 = v9 + v2;
  uint64_t v11 = swift_allocObject(&unk_10096A010, v9 + v2 + 1, v8 | 7);
  *(void *)(v0 + 96) = v11;
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v11 + v9, v1, v3);
  *(_BYTE *)(v11 + v10) = v5;
  swift_retain();
  return swift_task_switch(sub_1005EB248, 0LL, 0LL);
}

uint64_t sub_1005EB248()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[13] = v3;
  v3[2] = v2;
  v3[3] = sub_100118730;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[14] = v4;
  void *v4 = v0;
  v4[1] = sub_1005EB2F0;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[10],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_10011877C,  v3,  v0[9]);
}

uint64_t sub_1005EB2F0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 104LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 32LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 112LL));
  swift_release();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1005EB364, v2, 0LL);
}

uint64_t sub_1005EB364()
{
  uint64_t v1 = *(unsigned __int8 **)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *v1;
  sub_100015750((uint64_t)&v1[*(int *)(*(void *)(v0 + 72) + 48LL)], *(void *)(v0 + 16), (uint64_t *)&unk_10099D720);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t sub_1005EB3CC@<X0>(uint64_t a1@<X1>, char a2@<W2>, _BYTE *a3@<X8>)
{
  if (qword_10099B300 != -1) {
    swift_once(&qword_10099B300, sub_1003459EC);
  }
  uint64_t v6 = qword_100A2A6C8;
  uint64_t v7 = objc_autoreleasePoolPush();
  sub_100346B24(v6, a1, 0LL, 0LL, &v11);
  uint64_t v8 = (uint64_t)&a3[*(int *)(sub_100004AEC(&qword_1009A1800) + 48)];
  objc_autoreleasePoolPop(v7);
  char v9 = sub_100518274(v8, a1, v11, a2 & 1);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v9 & 1;
  return result;
}

uint64_t sub_1005EB4B8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_10050F124(a1, a2);
}

uint64_t sub_1005EB4DC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_10050B884(a1, a2);
}

void *sub_1005EB500@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_100576844();
  *a1 = result;
  return result;
}

uint64_t sub_1005EB52C(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[6] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  v2[7] = v5;
  v2[8] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1005EB590, v1, 0LL);
}

uint64_t sub_1005EB590()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  v0[9] = *(void *)(v6 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v5, v3);
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = (v7 + 24) & ~v7;
  uint64_t v9 = swift_allocObject(&unk_100969FE8, v8 + v2, v7 | 7);
  v0[10] = v9;
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v9 + v8, v1, v3);
  swift_retain();
  return swift_task_switch(sub_1005EB63C, 0LL, 0LL);
}

uint64_t sub_1005EB63C()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[11] = v3;
  v3[2] = v2;
  v3[3] = sub_1005ED444;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[12] = v4;
  void *v4 = v0;
  v4[1] = sub_1005EB6F0;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 2,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_1005ED46C,  v3,  &type metadata for Int);
}

uint64_t sub_1005EB6F0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 88);
  uint64_t v3 = *(void *)(*v0 + 80);
  uint64_t v4 = *(void *)(*v0 + 64);
  uint64_t v7 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 96));
  swift_release(v3);
  swift_task_dealloc(v2);
  uint64_t v5 = *(void *)(v1 + 16);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(uint64_t))(v7 + 8))(v5);
}

uint64_t sub_1005EB764(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  v2[6] = v3;
  uint64_t v4 = *(void *)(v3 + 64);
  v2[7] = v4;
  v2[8] = swift_task_alloc((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1005EB7C4, v1, 0LL);
}

uint64_t sub_1005EB7C4()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[4];
  v0[9] = *(void *)(v3 + 136);
  sub_10001DC4C(v5, v1, type metadata accessor for OwnedBeaconRecord);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 24) & ~v6;
  uint64_t v8 = swift_allocObject(&unk_100969FC0, v7 + v2, v6 | 7);
  v0[10] = v8;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = v3;
  sub_10002218C(v1, v8 + v7, type metadata accessor for OwnedBeaconRecord);
  swift_retain();
  return swift_task_switch(sub_1005EB870, 0LL, 0LL);
}

uint64_t sub_1005EB870()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[11] = v3;
  v3[2] = v2;
  v3[3] = sub_1005ED3EC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[12] = v4;
  uint64_t v5 = sub_100004AEC(&qword_1009A34B0);
  void *v4 = v0;
  v4[1] = sub_1005EB92C;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 2,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_1005ED42C,  v3,  v5);
}

uint64_t sub_1005EB92C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 88);
  uint64_t v3 = *(void *)(*v0 + 80);
  uint64_t v4 = *(void *)(*v0 + 64);
  uint64_t v8 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 96));
  swift_release(v3);
  swift_task_dealloc(v2);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v5);
}

uint64_t sub_1005EB9A4@<X0>(uint64_t a1@<X8>)
{
  return sub_100576BD4(a1);
}

uint64_t sub_1005EB9CC(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[6] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  v2[7] = v5;
  v2[8] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1005EBA30, v1, 0LL);
}

uint64_t sub_1005EBA30()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  v0[9] = *(void *)(v6 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v5, v3);
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = (v7 + 24) & ~v7;
  uint64_t v9 = swift_allocObject(&unk_100969F98, v8 + v2, v7 | 7);
  v0[10] = v9;
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v9 + v8, v1, v3);
  swift_retain();
  return swift_task_switch(sub_1005EBADC, 0LL, 0LL);
}

uint64_t sub_1005EBADC()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[11] = v3;
  v3[2] = v2;
  v3[3] = sub_1005ED0F4;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[12] = v4;
  uint64_t v5 = sub_100004AEC(&qword_1009A6670);
  void *v4 = v0;
  v4[1] = sub_1005ED638;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 2,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_1005ED140,  v3,  v5);
}

void *sub_1005EBB98@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t result = sub_100577B58(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1005EBBC8(uint64_t a1)
{
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v1;
  return swift_task_switch(sub_1005EBBE0, v1, 0LL);
}

uint64_t sub_1005EBBE0()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  *(void *)(v0 + 80) = *(void *)(v2 + 136);
  sub_100013044(v1, v0 + 16);
  uint64_t v3 = swift_allocObject(&unk_100969F70, 64LL, 7LL);
  *(void *)(v0 + 88) = v3;
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v2;
  sub_100012EC0((__int128 *)(v0 + 16), v3 + 24);
  swift_retain();
  return swift_task_switch(sub_1005EBC5C, 0LL, 0LL);
}

uint64_t sub_1005EBC5C()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[12] = v3;
  v3[2] = v2;
  v3[3] = sub_1005ED0AC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[13] = v4;
  void *v4 = v0;
  v4[1] = sub_1005EBD10;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 7,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_1005ED0DC,  v3,  &type metadata for Double);
}

uint64_t sub_1005EBD10()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 96);
  uint64_t v3 = *(void *)(*v0 + 88);
  uint64_t v5 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 104));
  swift_release(v3);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(double))(v5 + 8))(*(double *)(v1 + 56));
}

uint64_t sub_1005EBD74(uint64_t a1)
{
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v1;
  return swift_task_switch(sub_1005EBD8C, v1, 0LL);
}

uint64_t sub_1005EBD8C()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  *(void *)(v0 + 80) = *(void *)(v2 + 136);
  sub_100013044(v1, v0 + 16);
  uint64_t v3 = swift_allocObject(&unk_100969F48, 64LL, 7LL);
  *(void *)(v0 + 88) = v3;
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v2;
  sub_100012EC0((__int128 *)(v0 + 16), v3 + 24);
  swift_retain();
  return swift_task_switch(sub_1005EBE08, 0LL, 0LL);
}

uint64_t sub_1005EBE08()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[12] = v3;
  v3[2] = v2;
  v3[3] = sub_1005ED04C;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[13] = v4;
  uint64_t v5 = sub_100022898(0LL, (unint64_t *)&unk_1009A0B20, &OBJC_CLASS___SPBeacon_ptr);
  void *v4 = v0;
  v4[1] = sub_1005EBED0;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 7,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_1005ED09C,  v3,  v5);
}

uint64_t sub_1005EBED0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 96);
  uint64_t v3 = *(void *)(*v0 + 88);
  uint64_t v5 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 104));
  swift_release(v3);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v5 + 8))(*(void *)(v1 + 56));
}

uint64_t sub_1005EBF34@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100517DFC(a1, a2);
}

void *sub_1005EBF58@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100577F64(a1, a2);
}

uint64_t sub_1005EBF80@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_1005EBF94( a1,  (uint64_t (*)(uint64_t))sub_100577F1C,  type metadata accessor for NotifyWhenFoundRecord,  a2);
}

uint64_t sub_1005EBF94@<X0>( uint64_t a1@<X1>, uint64_t (*a2)(uint64_t)@<X2>, uint64_t (*a3)(void)@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6 = a2(a1);
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = a3(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (v7)
  {
    sub_10001DC4C( v6 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)),  a4,  a3);
    uint64_t v10 = 0LL;
  }

  else
  {
    uint64_t v10 = 1LL;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a4, v10, 1LL, v8);
  return swift_bridgeObjectRelease();
}

void *sub_1005EC030@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_100577F40();
  *a1 = result;
  return result;
}

uint64_t sub_1005EC05C(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[6] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  v2[7] = v5;
  v2[8] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1005EC0C0, v1, 0LL);
}

uint64_t sub_1005EC0C0()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  v0[9] = *(void *)(v6 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v5, v3);
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = (v7 + 24) & ~v7;
  uint64_t v9 = swift_allocObject(&unk_100969F20, v8 + v2, v7 | 7);
  v0[10] = v9;
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v9 + v8, v1, v3);
  swift_retain();
  return swift_task_switch(sub_1005EC16C, 0LL, 0LL);
}

uint64_t sub_1005EC16C()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[11] = v3;
  v3[2] = v2;
  v3[3] = sub_1005ECF30;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[12] = v4;
  uint64_t v5 = sub_100004AEC(&qword_1009B6608);
  void *v4 = v0;
  v4[1] = sub_1005EC228;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 2,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_1005ECF70,  v3,  v5);
}

uint64_t sub_1005EC228()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 88);
  uint64_t v3 = *(void *)(*v0 + 80);
  uint64_t v4 = *(void *)(*v0 + 64);
  uint64_t v7 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 96));
  swift_release(v3);
  swift_task_dealloc(v2);
  uint64_t v5 = *(void *)(v1 + 16);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(uint64_t))(v7 + 8))(v5);
}

uint64_t sub_1005EC2A0@<X0>(uint64_t a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  uint64_t v70 = a2;
  v74 = a3;
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v77 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v80 = (char *)&v65 - v7;
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v84 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v86 = type metadata accessor for OwnedDeviceKeyRecord(0LL);
  uint64_t v78 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_1009A4780);
  __chkstk_darwin(v13);
  uint64_t v85 = (uint64_t)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_1009A7E78);
  __chkstk_darwin(v15);
  uint64_t v73 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v81 = sub_100004AEC(&qword_1009A7E80);
  uint64_t v76 = *(void *)(v81 - 8);
  uint64_t v17 = __chkstk_darwin(v81);
  uint64_t v71 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  *(void *)&__int128 v75 = (char *)&v65 - v19;
  uint64_t v20 = type metadata accessor for URL(0LL);
  uint64_t v82 = *(char **)(v20 - 8);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v68 = (char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v65 - v24;
  __chkstk_darwin(v23);
  int v27 = (char *)&v65 - v26;
  uint64_t v28 = sub_100004AEC(&qword_1009A7E88);
  uint64_t v29 = __chkstk_darwin(v28);
  uint64_t v69 = (char *)&v65 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v29);
  uint64_t v72 = (uint64_t *)((char *)&v65 - v31);
  if (qword_10099B5E8 != -1) {
    swift_once(&qword_10099B5E8, sub_1005C66A4);
  }
  uint64_t v83 = v10;
  uint64_t v79 = v8;
  uint64_t v32 = qword_100A2AE20;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_10024636C, v32, &type metadata for SecureLocationsConfig);
  uint64_t v65 = 0LL;
  swift_release(v32);
  v100[10] = v97;
  v100[11] = v98;
  v100[12] = v99;
  v100[6] = v93;
  v100[7] = v94;
  v100[8] = v95;
  v100[9] = v96;
  v100[2] = v89;
  v100[3] = v90;
  v100[4] = v91;
  v100[5] = v92;
  v100[0] = v87;
  v100[1] = v88;
  sub_100246384(v100);
  uint64_t v67 = *(void *)(*(void *)(a1 + 128) + 136LL);
  if (qword_10099B8A8 != -1) {
    swift_once(&qword_10099B8A8, sub_1006E33E8);
  }
  uint64_t v33 = sub_10000A720(v20, (uint64_t)qword_100A2B2E0);
  uint64_t v34 = UUID.uuidString.getter(v33);
  uint64_t v35 = v20;
  URL.appendingPathComponent(_:isDirectory:)(v34, v36, 1LL);
  swift_bridgeObjectRelease();
  uint64_t v37 = (void (*)(char *, char *, uint64_t))*((void *)v82 + 2);
  v37(v25, v27, v35);
  uint64_t v38 = v81;
  uint64_t v39 = (uint64_t)v71;
  Swift::String v66 = &v71[*(int *)(v81 + 40)];
  uint64_t v40 = (uint64_t)v66;
  uint64_t v41 = type metadata accessor for DirectorySequence(0LL);
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v70 = v27;
  uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56);
  v43(v40, 1LL, 1LL, v41);
  uint64_t v44 = v43;
  v37((char *)v39, v25, v35);
  uint64_t v45 = *(int *)(v38 + 36);
  id v46 = v68;
  *(void *)(v39 + v45) = v67;
  v37(v46, v25, v35);
  swift_retain();
  uint64_t v47 = (uint64_t)v73;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)(v46, 0LL, 0LL);
  uint64_t v48 = (void (*)(char *, uint64_t))*((void *)v82 + 1);
  v48(v25, v35);
  v44(v47, 0LL, 1LL, v41);
  sub_1005ECF7C(v47, (uint64_t)v66);
  uint64_t v49 = v75;
  sub_100015750(v39, v75, &qword_1009A7E80);
  Swift::String v50 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v76 + 56);
  uint64_t v51 = (uint64_t)v69;
  uint64_t v52 = v81;
  v50(v69, 1LL, 1LL, v81);
  sub_100015794(v51, &qword_1009A7E90);
  sub_100015750(v49, v51, &qword_1009A7E80);
  v50((char *)v51, 0LL, 1LL, v52);
  uint64_t v53 = (uint64_t)v72;
  sub_100015750(v51, (uint64_t)v72, &qword_1009A7E88);
  v48(v70, v35);
  uint64_t v54 = sub_100004AEC(&qword_1009A7E98);
  uint64_t v55 = (char *)swift_allocObject(v54, *(unsigned int *)(v54 + 48), *(unsigned __int16 *)(v54 + 52));
  sub_100015750( v53,  (uint64_t)&v55[*(void *)(class metadata base offset for _SequenceBox + *(void *)v55 + 16LL)],  &qword_1009A7E88);
  uint64_t v56 = *(void *)(class metadata base offset for _SequenceBox + *(void *)v55 + 16LL);
  uint64_t v73 = v55;
  uint64_t v57 = (uint64_t)&v55[v56];
  uint64_t v58 = sub_100004AEC(&qword_1009A7EB0);
  os_log_type_t v59 = (void *)swift_allocObject(v58, *(unsigned int *)(v58 + 48), *(unsigned __int16 *)(v58 + 52));
  sub_1005ECFC4(v57, (uint64_t)v59 + *(void *)(class metadata base offset for _IteratorBox + *v59 + 16LL));
  uint64_t v60 = (char *)v59 + *(void *)(class metadata base offset for _IteratorBox + *v59 + 16LL);
  uint64_t v72 = v59;
  swift_retain();
  uint64_t v61 = v85;
  uint64_t v82 = v60;
  sub_1005441EC(v85);
  uint64_t v81 = *(void *)(v78 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v81)(v61, 1LL, v86) != 1)
  {
    __int128 v75 = xmmword_1007E67D0;
    sub_10002218C(v61, (uint64_t)v12, type metadata accessor for OwnedDeviceKeyRecord);
    Swift::String v64 = objc_autoreleasePoolPush();
    __asm { BR              X9 }
  }

  swift_release(v73);
  uint64_t v62 = (uint64_t)v72;
  swift_release(v72);
  swift_setDeallocating(v62);
  sub_100015794( v62 + *(void *)(class metadata base offset for _IteratorBox + *(void *)v62 + 16LL),  &qword_1009A7E88);
  uint64_t result = swift_deallocClassInstance( v62,  *(unsigned int *)(*(void *)v62 + 48LL),  *(unsigned __int16 *)(*(void *)v62 + 52LL));
  void *v74 = _swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_1005ECE68()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for BeaconStoreActor()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd16BeaconStoreActor);
}

unint64_t sub_1005ECEBC(uint64_t a1)
{
  unint64_t result = sub_1005ECEE0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1005ECEE0()
{
  unint64_t result = qword_1009B6600;
  if (!qword_1009B6600)
  {
    uint64_t v1 = type metadata accessor for BeaconStoreActor();
    unint64_t result = swift_getWitnessTable(&unk_10080C730, v1);
    atomic_store(result, (unint64_t *)&qword_1009B6600);
  }

  return result;
}

uint64_t sub_1005ECF24()
{
  return sub_1005ED4FC((uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_1005ECF30@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  return sub_1005EC2A0(*(void *)(v1 + 16), (char *)(v1 + ((v3 + 24) & ~v3)), a1);
}

uint64_t sub_1005ECF70(uint64_t a1)
{
  return sub_10036CB48(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1005ECF7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A7E78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005ECFC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A7E88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005ED00C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OwnedDeviceKeyRecord(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

char *sub_1005ED04C@<X0>(char **a1@<X8>)
{
  uint64_t v3 = v1 + 3;
  uint64_t v4 = *(void *)(v1[2] + 128LL);
  uint64_t v6 = v1[6];
  uint64_t v5 = v1[7];
  uint64_t v7 = sub_100012ED8(v3, v6);
  unint64_t result = sub_10054A858((uint64_t)v7, v4, v6, v5);
  *a1 = result;
  return result;
}

uint64_t sub_1005ED09C(uint64_t a1)
{
  return sub_10036CBD8(a1, v1[2], v1[3], v1[4]);
}

void sub_1005ED0AC(void *a1@<X8>)
{
  *a1 = v3;
}

uint64_t sub_1005ED0DC(uint64_t a1)
{
  return sub_10036CC20(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1005ED0E8()
{
  return sub_1005ED4FC((uint64_t (*)(void))&type metadata accessor for UUID);
}

void *sub_1005ED0F4@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  unint64_t result = sub_100577B58(v1 + ((v3 + 24) & ~v3));
  *a1 = result;
  return result;
}

uint64_t sub_1005ED140(uint64_t a1)
{
  return sub_10036CBFC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1005ED14C()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1005ED3EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8) + 80LL);
  uint64_t result = sub_10054F7E4(v1 + ((v3 + 24) & ~v3));
  *a1 = result;
  a1[1] = v5;
  return result;
}

uint64_t sub_1005ED42C(uint64_t a1)
{
  return sub_10036CD64(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1005ED438()
{
  return sub_1005ED4FC((uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_1005ED444@<X0>(void *a1@<X8>)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  *a1 = 0LL;
  return result;
}

uint64_t sub_1005ED46C(uint64_t a1)
{
  return sub_10036CCF8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1005ED478()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  uint64_t v6 = *(void *)(v2 + 64) + v4 + 1;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1005ED4F0()
{
  return sub_1005ED4FC((uint64_t (*)(void))&type metadata accessor for MACAddress);
}

uint64_t sub_1005ED4FC(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  swift_release(*(void *)(v1 + 16));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

uint64_t sub_1005ED574@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for MACAddress(0LL) - 8) + 80LL);
  uint64_t result = sub_10050C740(v1 + ((v3 + 24) & ~v3));
  *a1 = result;
  return result;
}

uint64_t sub_1005ED5BC()
{
  return swift_deallocObject(v0, 105LL, 7LL);
}

void *sub_1005ED5F0@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_10050989C(v1 + 24, (void *)(v1 + 64), *(_BYTE *)(v1 + 104));
  *a1 = result;
  return result;
}

uint64_t sub_1005ED62C(uint64_t a1)
{
  return sub_10036CA94(a1, v1[2], v1[3], v1[4]);
}

uint64_t destroy for MessagingDevice(void *a1)
{
  return swift_bridgeObjectRelease(a1[19]);
}

uint64_t initializeWithCopy for MessagingDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v9;
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 11_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  uint64_t v11 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 15_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v11;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  return a1;
}

uint64_t assignWithCopy for MessagingDevice(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v14 = *(void *)(a2 + 88);
  uint64_t v15 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v16 = *(void *)(a2 + 104);
  uint64_t v17 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(void *)(a1 + 11_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(void *)(a2 + 112);
  uint64_t v18 = *(void *)(a2 + 120);
  uint64_t v19 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  *(_BYTE *)(a1 + 130) = *(_BYTE *)(a2 + 130);
  *(_BYTE *)(a1 + 131) = *(_BYTE *)(a2 + 131);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  uint64_t v20 = *(void *)(a2 + 152);
  uint64_t v21 = *(void *)(a1 + 152);
  *(void *)(a1 + 15_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  return a1;
}

__n128 initializeWithTake for MessagingDevice(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  __int128 v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 11_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v7;
  return result;
}

uint64_t assignWithTake for MessagingDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v12;
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a2 + 88);
  uint64_t v15 = *(void *)(a1 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v14;
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = *(void *)(a2 + 104);
  uint64_t v17 = *(void *)(a1 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v16;
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = *(void *)(a2 + 120);
  uint64_t v19 = *(void *)(a1 + 120);
  *(void *)(a1 + 11_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v18;
  swift_bridgeObjectRelease(v19);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  *(_BYTE *)(a1 + 130) = *(_BYTE *)(a2 + 130);
  *(_BYTE *)(a1 + 131) = *(_BYTE *)(a2 + 131);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  uint64_t v20 = *(void *)(a2 + 152);
  uint64_t v21 = *(void *)(a1 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 15_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v20;
  swift_bridgeObjectRelease(v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for MessagingDevice(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 160)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MessagingDevice(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 15_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0LL;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 160) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 160) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for MessagingDevice()
{
  return &type metadata for MessagingDevice;
}

uint64_t sub_1005EDAB4(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = v2[1];
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v4, v5);
  swift_bridgeObjectRelease();
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(a1, v6, v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  swift_bridgeObjectRetain(v9);
  String.hash(into:)(a1, v8, v9);
  swift_bridgeObjectRelease();
  uint64_t v10 = v2[6];
  uint64_t v11 = v2[7];
  swift_bridgeObjectRetain(v11);
  String.hash(into:)(a1, v10, v11);
  swift_bridgeObjectRelease();
  uint64_t v12 = v2[8];
  uint64_t v13 = v2[9];
  swift_bridgeObjectRetain(v13);
  String.hash(into:)(a1, v12, v13);
  swift_bridgeObjectRelease();
  uint64_t v14 = v2[10];
  uint64_t v15 = v2[11];
  swift_bridgeObjectRetain(v15);
  String.hash(into:)(a1, v14, v15);
  swift_bridgeObjectRelease();
  uint64_t v16 = v2[12];
  uint64_t v17 = v2[13];
  swift_bridgeObjectRetain(v17);
  String.hash(into:)(a1, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t v18 = v2[14];
  uint64_t v19 = v2[15];
  swift_bridgeObjectRetain(v19);
  String.hash(into:)(a1, v18, v19);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v2[16] & 1);
  Hasher._combine(_:)(*((_BYTE *)v2 + 129) & 1);
  Hasher._combine(_:)(*((_BYTE *)v2 + 130) & 1);
  Hasher._combine(_:)(*((_BYTE *)v2 + 131) & 1);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(v2 + 17);
  uint64_t v22 = v2[19];
  Hasher._combine(_:)(LOBYTE(v21[0]));
  swift_bridgeObjectRetain(v22);
  String.hash(into:)(a1, v21[1], v22);
  return sub_1005EE340((uint64_t)v21);
}

Swift::Int sub_1005EDC70()
{
  return Hasher._finalize()();
}

Swift::Int sub_1005EDCB0(uint64_t a1)
{
  return Hasher._finalize()();
}

BOOL sub_1005EDCE8(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[7];
  v13[6] = a1[6];
  v13[7] = v2;
  __int128 v3 = a1[9];
  v13[8] = a1[8];
  v13[9] = v3;
  __int128 v4 = a1[3];
  v13[2] = a1[2];
  v13[3] = v4;
  __int128 v5 = a1[5];
  v13[4] = a1[4];
  v13[5] = v5;
  __int128 v6 = a1[1];
  v13[0] = *a1;
  v13[1] = v6;
  __int128 v7 = a2[7];
  v14[6] = a2[6];
  v14[7] = v7;
  __int128 v8 = a2[9];
  v14[8] = a2[8];
  v14[9] = v8;
  __int128 v9 = a2[3];
  v14[2] = a2[2];
  v14[3] = v9;
  __int128 v10 = a2[5];
  v14[4] = a2[4];
  v14[5] = v10;
  __int128 v11 = a2[1];
  v14[0] = *a2;
  v14[1] = v11;
  return sub_1005EDE68((uint64_t *)v13, (uint64_t)v14);
}

unint64_t sub_1005EDD6C()
{
  unint64_t result = qword_1009B6618;
  if (!qword_1009B6618)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080C76C, &type metadata for MessagingDevice);
    atomic_store(result, (unint64_t *)&qword_1009B6618);
  }

  return result;
}

uint64_t sub_1005EDDB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 96);
  __int128 v4 = *(void **)(v2 + 104);
  v5._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(a1, a2);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._countAndFlagsBits = 8250LL;
  v7._object = (void *)0xE200000000000000LL;
  String.append(_:)(v7);
  swift_bridgeObjectRetain(v4);
  v8._countAndFlagsBits = v3;
  v8._object = v4;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v4);
  v9._countAndFlagsBits = 62LL;
  v9._object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  return 60LL;
}

BOOL sub_1005EDE68(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = *(void *)(a2 + 8);
  BOOL v7 = v4 == *(void *)a2 && v5 == v6;
  if (v7
    || (char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(void *)a2, v6, 0LL), result = 0LL, (v8 & 1) != 0))
  {
    uint64_t v10 = a1[2];
    uint64_t v11 = a1[3];
    uint64_t v12 = *(void *)(a2 + 16);
    uint64_t v13 = *(void *)(a2 + 24);
    BOOL v14 = v10 == v12 && v11 == v13;
    if (v14
      || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, v13, 0LL), BOOL result = 0LL, (v15 & 1) != 0))
    {
      if ((v16 = a1[4], uint64_t v17 = a1[5], v18 = *(void *)(a2 + 32), v19 = *(void *)(a2 + 40), v16 == v18) && v17 == v19
        || (char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v18, v19, 0LL), result = 0LL, (v20 & 1) != 0))
      {
        if ((uint64_t v21 = a1[6], v22 = a1[7], v23 = *(void *)(a2 + 48), v24 = *(void *)(a2 + 56), v21 == v23)
          && v22 == v24
          || (v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, v23, v24, 0LL), BOOL result = 0LL, (v25 & 1) != 0))
        {
          if ((v26 = a1[8], uint64_t v27 = a1[9], v28 = *(void *)(a2 + 64), v29 = *(void *)(a2 + 72), v26 == v28)
            && v27 == v29
            || (v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, v28, v29, 0LL), BOOL result = 0LL, (v30 & 1) != 0))
          {
            if ((uint64_t v31 = a1[10], v32 = a1[11], v33 = *(void *)(a2 + 80), v34 = *(void *)(a2 + 88), v31 == v33)
              && v32 == v34
              || (char v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, v33, v34, 0LL),
                  BOOL result = 0LL,
                  (v35 & 1) != 0))
            {
              if ((uint64_t v36 = a1[12], v37 = a1[13], v38 = *(void *)(a2 + 96), v39 = *(void *)(a2 + 104), v36 == v38)
                && v37 == v39
                || (char v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v37, v38, v39, 0LL),
                    BOOL result = 0LL,
                    (v40 & 1) != 0))
              {
                if ((uint64_t v41 = a1[14], v42 = a1[15], v43 = *(void *)(a2 + 112), v44 = *(void *)(a2 + 120), v41 == v43)
                  && v42 == v44
                  || (char v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v42, v43, v44, 0LL),
                      BOOL result = 0LL,
                      (v45 & 1) != 0))
                {
                  BOOL result = 0;
                  if (((*((unsigned __int8 *)a1 + 128) ^ *(unsigned __int8 *)(a2 + 128)) & 1) == 0
                    && ((*((unsigned __int8 *)a1 + 129) ^ *(unsigned __int8 *)(a2 + 129)) & 1) == 0
                    && ((*((unsigned __int8 *)a1 + 130) ^ *(unsigned __int8 *)(a2 + 130)) & 1) == 0
                    && ((*((unsigned __int8 *)a1 + 131) ^ *(unsigned __int8 *)(a2 + 131)) & 1) == 0
                    && *((unsigned __int8 *)a1 + 136) == *(unsigned __int8 *)(a2 + 136))
                  {
                    uint64_t v46 = a1[18];
                    uint64_t v47 = a1[19];
                    uint64_t v48 = *(void *)(a2 + 144);
                    uint64_t v49 = *(void *)(a2 + 152);
                    if (v46 == v48 && v47 == v49) {
                      return 1;
                    }
                    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v46, v47, v48, v49, 0LL) & 1) != 0) {
                      return 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

void sub_1005EE064(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = [a1 uniqueID];
  if (!v4)
  {
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v8 = v7;

  id v9 = [a1 uniqueIDOverride];
  if (!v9)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v10 = v9;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v13 = v12;

  id v14 = [a1 modelIdentifier];
  if (!v14)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  char v15 = v14;
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  uint64_t v18 = v17;

  id v19 = [a1 productName];
  if (!v19)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v20 = v19;
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  uint64_t v62 = v22;

  id v23 = [a1 productVersion];
  if (!v23)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v24 = v23;
  uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  uint64_t v60 = v25;

  id v26 = [a1 productBuildVersion];
  if (!v26)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v27 = v26;
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  uint64_t v58 = v29;
  uint64_t v59 = v28;

  id v30 = [a1 name];
  if (!v30)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v31 = v30;
  uint64_t v57 = v21;
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  uint64_t v55 = v33;
  uint64_t v56 = v32;

  id v34 = [a1 service];
  if (!v34)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  char v35 = v34;
  uint64_t v50 = v18;
  uint64_t v51 = v16;
  uint64_t v52 = v13;
  uint64_t v53 = v11;
  uint64_t v54 = v8;
  uint64_t v36 = v6;
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  uint64_t v48 = v38;
  uint64_t v49 = v37;

  unsigned __int8 v39 = [a1 isLocallyPaired];
  unsigned __int8 v40 = [a1 isActive];
  unsigned __int8 v41 = [a1 isNearby];
  unsigned __int8 v42 = [a1 isConnected];
  uint64_t v43 = IDSCopyIDForDevice(a1);
  if (v43)
  {
    uint64_t v44 = (void *)v43;
    uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    uint64_t v47 = v46;

    *(void *)a2 = v36;
    *(void *)(a2 + 8) = v54;
    *(void *)(a2 + swift_weakDestroy(v0 + 16) = v53;
    *(void *)(a2 + 24) = v52;
    *(void *)(a2 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v51;
    *(void *)(a2 + 40) = v50;
    *(void *)(a2 + 48) = v57;
    *(void *)(a2 + 56) = v62;
    *(void *)(a2 + 64) = v61;
    *(void *)(a2 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v60;
    *(void *)(a2 + 80) = v59;
    *(void *)(a2 + 88) = v58;
    *(void *)(a2 + 96) = v56;
    *(void *)(a2 + 104) = v55;
    *(void *)(a2 + 11_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v49;
    *(void *)(a2 + 120) = v48;
    *(_BYTE *)(a2 + 128) = v39;
    *(_BYTE *)(a2 + 129) = v40;
    *(_BYTE *)(a2 + 130) = v41;
    *(_BYTE *)(a2 + 131) = v42;
    *(_BYTE *)(a2 + 136) = 3;
    *(void *)(a2 + 144) = v45;
    *(void *)(a2 + 15_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v47;
    return;
  }

uint64_t sub_1005EE340(uint64_t a1)
{
  return a1;
}

id sub_1005EE368()
{
  uint64_t v1 = v0;
  id v2 = [objc_allocWithZone(SPSecureLocation) init];
  [v2 setLongitude:*(double *)(v0 + 16)];
  [v2 setLatitude:*(double *)(v0 + 24)];
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 setFindMyId:v3];

  [v2 setVerticalAccuracy:*(double *)(v1 + 32)];
  [v2 setHorizontalAccuracy:*(double *)(v1 + 40)];
  [v2 setSpeed:*(double *)(v1 + 48)];
  [v2 setCourse:*(double *)(v1 + 56)];
  [v2 setAltitude:*(double *)(v1 + 64)];
  if ((*(_BYTE *)(v1 + 80) & 1) == 0)
  {
    id v4 = [objc_allocWithZone(NSNumber) initWithInteger:*(void *)(v1 + 72)];
    [v2 setFloor:v4];
  }

  uint64_t v5 = (int *)type metadata accessor for SecureLocation(0LL);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  [v2 setTimestamp:isa];

  [v2 setMotionActivityState:*(void *)(v1 + v5[14])];
  [v2 setPublishReason:*(void *)(v1 + v5[15])];
  if (*(void *)(v1 + v5[16] + 8)) {
    NSString v7 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v7 = 0LL;
  }
  [v2 setLocationLabel:v7];

  return v2;
}

uint64_t sub_1005EE53C()
{
  v37[0] = 0LL;
  v37[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(100LL);
  v1._object = (void *)0x800000010086A9C0LL;
  v1._countAndFlagsBits = 0xD000000000000019LL;
  String.append(_:)(v1);
  uint64_t v2 = *(void *)v0;
  NSString v3 = *(void **)(v0 + 8);
  swift_bridgeObjectRetain(v3);
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 15392LL;
  v5._object = (void *)0xE200000000000000LL;
  String.append(_:)(v5);
  Double.write<A>(to:)( v37,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v6._countAndFlagsBits = 32LL;
  v6._object = (void *)0xE100000000000000LL;
  String.append(_:)(v6);
  Double.write<A>(to:)( v37,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v7._countAndFlagsBits = 0x20617620203ELL;
  v7._object = (void *)0xE600000000000000LL;
  String.append(_:)(v7);
  Double.write<A>(to:)( v37,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v8._countAndFlagsBits = 543254560LL;
  v8._object = (void *)0xE400000000000000LL;
  String.append(_:)(v8);
  Double.write<A>(to:)( v37,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v9._countAndFlagsBits = 544240416LL;
  v9._object = (void *)0xE400000000000000LL;
  String.append(_:)(v9);
  Double.write<A>(to:)( v37,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v10._countAndFlagsBits = 0x2073726320LL;
  v10._object = (void *)0xE500000000000000LL;
  String.append(_:)(v10);
  Double.write<A>(to:)( v37,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v11._countAndFlagsBits = 0x20746C6120LL;
  v11._object = (void *)0xE500000000000000LL;
  String.append(_:)(v11);
  Double.write<A>(to:)( v37,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v12._countAndFlagsBits = 543974944LL;
  v12._object = (void *)0xE400000000000000LL;
  String.append(_:)(v12);
  char v13 = *(_BYTE *)(v0 + 80);
  uint64_t v35 = *(void *)(v0 + 72);
  char v36 = v13;
  uint64_t v14 = sub_100004AEC(&qword_10099D5F8);
  _print_unlocked<A, B>(_:_:)( &v35,  v37,  v14,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v15._countAndFlagsBits = 544437280LL;
  v15._object = (void *)0xE400000000000000LL;
  String.append(_:)(v15);
  uint64_t v16 = (int *)type metadata accessor for SecureLocation(0LL);
  uint64_t v17 = type metadata accessor for Date(0LL);
  uint64_t v18 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v17, v18);
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 544435488LL;
  v20._object = (void *)0xE400000000000000LL;
  String.append(_:)(v20);
  unint64_t v21 = 0xEA00000000007972LL;
  uint64_t v22 = 0x616E6F6974617473LL;
  switch(*(void *)(v0 + v16[14]))
  {
    case 1LL:
      break;
    case 2LL:
      unint64_t v21 = 0xE700000000000000LL;
      unsigned int v23 = 1802264951;
      goto LABEL_6;
    case 3LL:
      unint64_t v21 = 0xE700000000000000LL;
      unsigned int v23 = 1852732786;
      goto LABEL_6;
    case 4LL:
      unint64_t v21 = 0xE700000000000000LL;
      unsigned int v23 = 1818458467;
LABEL_6:
      uint64_t v22 = v23 | 0x676E6900000000LL;
      break;
    case 5LL:
      unint64_t v21 = 0xEA00000000006576LL;
      uint64_t v22 = 0x69746F6D6F747561LL;
      break;
    default:
      unint64_t v21 = 0xE700000000000000LL;
      uint64_t v22 = 0x6E776F6E6B6E75LL;
      break;
  }

  unint64_t v24 = v21;
  String.append(_:)(*(Swift::String *)&v22);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 544370720LL;
  v25._object = (void *)0xE400000000000000LL;
  String.append(_:)(v25);
  v26._countAndFlagsBits = sub_1005EECA8(*(void *)(v0 + v16[15]));
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 0x206C626C20LL;
  v27._object = (void *)0xE500000000000000LL;
  String.append(_:)(v27);
  uint64_t v28 = (uint64_t *)(v0 + v16[16]);
  uint64_t v29 = v28[1];
  if (v29)
  {
    uint64_t v30 = *v28;
    uint64_t v31 = (void *)v28[1];
  }

  else
  {
    uint64_t v31 = (void *)0xE300000000000000LL;
    uint64_t v30 = 7104878LL;
  }

  swift_bridgeObjectRetain(v29);
  v32._countAndFlagsBits = v30;
  v32._object = v31;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._countAndFlagsBits = 62LL;
  v33._object = (void *)0xE100000000000000LL;
  String.append(_:)(v33);
  return v37[0];
}

uint64_t sub_1005EE928@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::String v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v9 = __chkstk_darwin(v8);
  Swift::String v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  char v13 = (char *)&v49 - v12;
  id v14 = [a1 timestamp];
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v14);

  int v15 = 1;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v13, 0LL, 1LL, v4);
  id v16 = [a1 findMyId];
  uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  uint64_t v51 = v17;

  [a1 longitude];
  uint64_t v19 = v18;
  [a1 latitude];
  uint64_t v21 = v20;
  [a1 verticalAccuracy];
  uint64_t v23 = v22;
  [a1 horizontalAccuracy];
  uint64_t v25 = v24;
  [a1 speed];
  uint64_t v27 = v26;
  [a1 course];
  uint64_t v29 = v28;
  [a1 altitude];
  uint64_t v31 = v30;
  id v32 = [a1 floor];

  if (v32 && (id v33 = [a1 floor]) != 0)
  {
    id v34 = v33;
    id v49 = [v33 integerValue];

    int v15 = 0;
  }

  else
  {
    id v49 = 0LL;
  }

  int v52 = v15;
  sub_10000A824((uint64_t)v13, (uint64_t)v11);
  uint64_t v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1LL, v4);
  char v36 = v7;
  if ((_DWORD)v35 == 1)
  {
    Date.init()(v35);
    sub_10000A86C((uint64_t)v11);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v11, v4);
  }

  id v37 = objc_msgSend(a1, "motionActivityState", v49);
  id v38 = [a1 publishReason];
  id v39 = [a1 locationLabel];
  if (v39)
  {
    unsigned __int8 v40 = v39;
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    uint64_t v43 = v42;
  }

  else
  {
    uint64_t v41 = 0LL;
    uint64_t v43 = 0LL;
  }

  uint64_t v44 = v50;
  sub_10000A86C((uint64_t)v13);
  uint64_t v45 = v51;
  *(void *)a2 = v44;
  *(void *)(a2 + 8) = v45;
  *(void *)(a2 + swift_weakDestroy(v0 + 16) = v19;
  *(void *)(a2 + 24) = v21;
  *(void *)(a2 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v23;
  *(void *)(a2 + 40) = v25;
  *(void *)(a2 + 48) = v27;
  *(void *)(a2 + 56) = v29;
  *(void *)(a2 + 64) = v31;
  *(void *)(a2 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v49;
  *(_BYTE *)(a2 + 80) = v52;
  uint64_t v46 = (int *)type metadata accessor for SecureLocation(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2 + v46[13], v36, v4);
  *(void *)(a2 + v46[14]) = v37;
  *(void *)(a2 + v46[15]) = v38;
  uint64_t v48 = (uint64_t *)(a2 + v46[16]);
  *uint64_t v48 = v41;
  v48[1] = v43;
  return result;
}

unint64_t sub_1005EECA8(uint64_t a1)
{
  uint64_t v1 = a1 - 1;
  unint64_t result = 6515827LL;
  switch(v1)
  {
    case 0LL:
      return result;
    case 1LL:
      unint64_t result = 0x6174537469736976LL;
      break;
    case 2LL:
      unint64_t result = 0x6165627472616568LL;
      break;
    case 3LL:
      unint64_t result = 0x65646E6174737962LL;
      break;
    case 4LL:
      unint64_t result = 0x646E616D65646E6FLL;
      break;
    case 5LL:
      unint64_t result = 0x776F6C6C616873LL;
      break;
    case 6LL:
      unint64_t result = 1702259052LL;
      break;
    case 7LL:
    case 8LL:
      unint64_t result = 0xD000000000000018LL;
      break;
    case 9LL:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 10LL:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 99LL:
      unint64_t result = 0x6F4C79636167656CLL;
      break;
    default:
      unint64_t result = 0x6E776F6E6B6E75LL;
      break;
  }

  return result;
}

uint64_t sub_1005EEE10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007864( &qword_1009B6738,  (uint64_t (*)(uint64_t))type metadata accessor for SPMotionActivityState,  (uint64_t)&unk_1007E0554);
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1005EEE84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007864( &qword_1009B6738,  (uint64_t (*)(uint64_t))type metadata accessor for SPMotionActivityState,  (uint64_t)&unk_1007E0554);
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1005EEEE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007864( &qword_1009B6730,  (uint64_t (*)(uint64_t))type metadata accessor for SPSecureLocationPublishReason,  (uint64_t)&unk_1007E0600);
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1005EEF5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007864( &qword_1009B6730,  (uint64_t (*)(uint64_t))type metadata accessor for SPSecureLocationPublishReason,  (uint64_t)&unk_1007E0600);
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void *sub_1005EEFC0(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v21 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v21);
  }

  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    __int128 v8 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v8;
    __int128 v9 = *((_OWORD *)a2 + 3);
    uint64_t v10 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v10;
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    uint64_t v11 = a3[13];
    uint64_t v12 = a1 + v11;
    uint64_t v13 = (uint64_t)a2 + v11;
    *(_OWORD *)(a1 + 48) = v9;
    uint64_t v14 = type metadata accessor for Date(0LL);
    int v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    v15(v12, v13, v14);
    uint64_t v16 = a3[15];
    *(void *)((char *)v4 + a3[14]) = *(uint64_t *)((char *)a2 + a3[14]);
    *(void *)((char *)v4 + vswift_weakDestroy(v0 + 16) = *(uint64_t *)((char *)a2 + v16);
    uint64_t v17 = a3[16];
    uint64_t v18 = (void *)((char *)v4 + v17);
    uint64_t v19 = (uint64_t *)((char *)a2 + v17);
    uint64_t v20 = v19[1];
    void *v18 = *v19;
    v18[1] = v20;
    swift_bridgeObjectRetain(v20);
  }

  return v4;
}

uint64_t sub_1005EF0B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 52);
  uint64_t v5 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 64) + 8));
}

uint64_t sub_1005EF118(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  __int128 v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v7;
  __int128 v8 = *(_OWORD *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v9;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  uint64_t v10 = a3[13];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(_OWORD *)(a1 + 48) = v8;
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v14(v11, v12, v13);
  uint64_t v15 = a3[15];
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  *(void *)(a1 + v15) = *(void *)(a2 + v15);
  uint64_t v16 = a3[16];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  swift_bridgeObjectRetain(v19);
  return a1;
}

uint64_t sub_1005EF1E4(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(void *)(a1 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v8;
  uint64_t v9 = a3[13];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 24LL))(v10, v11, v12);
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  uint64_t v13 = a3[16];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  *uint64_t v14 = *v15;
  uint64_t v16 = v15[1];
  uint64_t v17 = v14[1];
  v14[1] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  return a1;
}

uint64_t sub_1005EF2F4(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  __int128 v7 = *(_OWORD *)(a2 + 32);
  __int128 v8 = *(_OWORD *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v9;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  uint64_t v10 = a3[13];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(_OWORD *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v7;
  *(_OWORD *)(a1 + 48) = v8;
  uint64_t v13 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))(v11, v12, v13);
  uint64_t v14 = a3[15];
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  return a1;
}

uint64_t sub_1005EF398(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  __int128 v8 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v8;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 64);
  *(void *)(a1 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(void *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  uint64_t v10 = a3[13];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(void *)(a1 + 64) = v9;
  uint64_t v13 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40LL))(v11, v12, v13);
  uint64_t v14 = a3[15];
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  uint64_t v15 = a3[16];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  uint64_t v20 = v16[1];
  void *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease(v20);
  return a1;
}

uint64_t sub_1005EF464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005EF470);
}

uint64_t sub_1005EF470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 52),  a2,  v8);
  }

uint64_t sub_1005EF4EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005EF4F8);
}

uint64_t sub_1005EF4F8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 52),  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata accessor for SecureLocation(uint64_t a1)
{
  uint64_t result = qword_1009B6678;
  if (!qword_1009B6678) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SecureLocation);
  }
  return result;
}

uint64_t sub_1005EF5A8(uint64_t a1)
{
  v4[0] = &unk_10080C958;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[8] = &unk_10080C970;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[9] = *(void *)(result - 8) + 64LL;
    v4[10] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[11] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[12] = &unk_10080C988;
    swift_initStructMetadata(a1, 256LL, 13LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1005EF64C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1005EF680 + 4 * byte_10080C869[a1]))( 0x6449794D646E6966LL,  0xE800000000000000LL);
}

uint64_t sub_1005EF680()
{
  return 0x64757469676E6F6CLL;
}

uint64_t sub_1005EF69C()
{
  return 0x656475746974616CLL;
}

unint64_t sub_1005EF6B0()
{
  return 0xD000000000000010LL;
}

unint64_t sub_1005EF6CC()
{
  return 0xD000000000000012LL;
}

uint64_t sub_1005EF778()
{
  return 0x526873696C627570LL;
}

uint64_t sub_1005EF79C()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_1005EF7C0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1005EF7F4 + 4 * byte_10080C876[a1]))( 0x6449794D646E6966LL,  0xE800000000000000LL);
}

uint64_t sub_1005EF7F4()
{
  return 0x64757469676E6F6CLL;
}

uint64_t sub_1005EF810()
{
  return 0x656475746974616CLL;
}

unint64_t sub_1005EF824()
{
  return 0xD000000000000010LL;
}

unint64_t sub_1005EF840()
{
  return 0xD000000000000012LL;
}

uint64_t sub_1005EF8EC()
{
  return 0x526873696C627570LL;
}

uint64_t sub_1005EF910()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_1005EF934(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  uint64_t v3 = sub_1005EF64C(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = sub_1005EF64C(v2);
  if (v3 == v6 && v5 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_1005EF9BC()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  uint64_t v2 = sub_1005EF64C(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1005EFA1C(uint64_t a1)
{
  uint64_t v3 = sub_1005EF64C(*v1);
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1005EFA5C(uint64_t a1)
{
  unsigned __int8 v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  uint64_t v3 = sub_1005EF64C(v2);
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_1005EFAB8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1005F0C6C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1005EFAE4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1005EF64C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1005EFB0C()
{
  return sub_1005EF7C0(*v0);
}

unint64_t sub_1005EFB14@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1005F0C6C(a1);
  *a2 = result;
  return result;
}

void sub_1005EFB38(_BYTE *a1@<X8>)
{
  *a1 = 13;
}

uint64_t sub_1005EFB44(uint64_t a1)
{
  unint64_t v2 = sub_1005F081C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005EFB6C(uint64_t a1)
{
  unint64_t v2 = sub_1005F081C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1005EFB94(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = v2[1];
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v4, v5);
  swift_bridgeObjectRelease();
  if ((v2[2] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = v2[2];
  }
  else {
    Swift::UInt64 v6 = 0LL;
  }
  Hasher._combine(_:)(v6);
  if ((v2[3] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = v2[3];
  }
  else {
    Swift::UInt64 v7 = 0LL;
  }
  Hasher._combine(_:)(v7);
  if ((v2[4] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v8 = v2[4];
  }
  else {
    Swift::UInt64 v8 = 0LL;
  }
  Hasher._combine(_:)(v8);
  if ((v2[5] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v9 = v2[5];
  }
  else {
    Swift::UInt64 v9 = 0LL;
  }
  Hasher._combine(_:)(v9);
  if ((v2[6] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = v2[6];
  }
  else {
    Swift::UInt64 v10 = 0LL;
  }
  Hasher._combine(_:)(v10);
  if ((v2[7] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v11 = v2[7];
  }
  else {
    Swift::UInt64 v11 = 0LL;
  }
  Hasher._combine(_:)(v11);
  if ((v2[8] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v12 = v2[8];
  }
  else {
    Swift::UInt64 v12 = 0LL;
  }
  Hasher._combine(_:)(v12);
  if (*((_BYTE *)v2 + 80) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v13 = v2[9];
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v13);
  }

  uint64_t v14 = (int *)type metadata accessor for SecureLocation(0LL);
  uint64_t v15 = type metadata accessor for Date(0LL);
  uint64_t v16 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v15, v16);
  Hasher._combine(_:)(*(void *)((char *)v2 + v14[14]));
  Hasher._combine(_:)(*(void *)((char *)v2 + v14[15]));
  uint64_t v17 = (void *)((char *)v2 + v14[16]);
  uint64_t v18 = v17[1];
  if (v18)
  {
    uint64_t v19 = *v17;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v18);
    String.hash(into:)(a1, v19, v18);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

uint64_t sub_1005EFD58@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005EFD6C(a1, a2);
}

uint64_t sub_1005EFD6C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v41 = a2;
  uint64_t v44 = type metadata accessor for Date(0LL);
  uint64_t v42 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v43 = (uint64_t *)((char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v47 = sub_100004AEC(&qword_1009B66E8);
  uint64_t v45 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for SecureLocation(0LL);
  Swift::UInt64 v7 = (int *)__chkstk_darwin(v6);
  Swift::UInt64 v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *((void *)v9 + 9) = 0LL;
  v9[80] = 1;
  uint64_t v10 = v7[14];
  *(void *)&v9[v10] = 0LL;
  uint64_t v11 = v7[15];
  *(void *)&v9[v11] = 0LL;
  Swift::UInt64 v12 = &v9[v7[16]];
  *(void *)Swift::UInt64 v12 = 0LL;
  *((void *)v12 + 1) = 0LL;
  uint64_t v48 = v12;
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_100012ED8(a1, v14);
  unint64_t v15 = sub_1005F081C();
  uint64_t v46 = v5;
  uint64_t v16 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SecureLocation.CodingKeys,  &type metadata for SecureLocation.CodingKeys,  v15,  v14,  v13);
  if (v16)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    return swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v38 = v11;
    uint64_t v39 = v10;
    uint64_t v40 = v6;
    id v49 = (uint64_t *)v9;
    uint64_t v17 = v45;
    LOBYTE(v50) = 0;
    uint64_t v18 = v47;
    uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)(&v50, v47);
    uint64_t v21 = (double *)v49;
    *id v49 = v19;
    *((void *)v21 + 1) = v22;
    LOBYTE(v50) = 1;
    Swift::UInt v21[2] = KeyedDecodingContainer.decode(_:forKey:)(&v50, v18);
    LOBYTE(v50) = 2;
    v21[3] = KeyedDecodingContainer.decode(_:forKey:)(&v50, v18);
    LOBYTE(v50) = 3;
    v21[4] = KeyedDecodingContainer.decode(_:forKey:)(&v50, v18);
    LOBYTE(v50) = 4;
    v21[5] = KeyedDecodingContainer.decode(_:forKey:)(&v50, v18);
    LOBYTE(v50) = 5;
    v21[6] = KeyedDecodingContainer.decode(_:forKey:)(&v50, v18);
    LOBYTE(v50) = 6;
    v21[7] = KeyedDecodingContainer.decode(_:forKey:)(&v50, v18);
    LOBYTE(v50) = 7;
    v21[8] = KeyedDecodingContainer.decode(_:forKey:)(&v50, v18);
    LOBYTE(v50) = 8;
    *((void *)v21 + 9) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v50, v18);
    *((_BYTE *)v21 + 80) = v23 & 1;
    LOBYTE(v50) = 9;
    uint64_t v24 = sub_100007864( &qword_10099DA70,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v43, v44, &v50, v18, v44, v24);
    (*(void (**)(uint64_t, void *, uint64_t))(v42 + 32))((uint64_t)v49 + *(int *)(v40 + 52), v43, v44);
    type metadata accessor for SPMotionActivityState(0LL);
    uint64_t v26 = v25;
    char v52 = 10;
    uint64_t v27 = sub_100007864( &qword_1009B66F8,  (uint64_t (*)(uint64_t))type metadata accessor for SPMotionActivityState,  (uint64_t)&protocol conformance descriptor for SPMotionActivityState);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v26, &v52, v47, v26, v27);
    uint64_t v28 = v50;
    if (v51) {
      uint64_t v28 = 0LL;
    }
    *(uint64_t *)((char *)v49 + v39) = v28;
    type metadata accessor for SPSecureLocationPublishReason(0LL);
    uint64_t v30 = v29;
    char v52 = 11;
    uint64_t v31 = sub_100007864( &qword_1009B6700,  (uint64_t (*)(uint64_t))type metadata accessor for SPSecureLocationPublishReason,  (uint64_t)&protocol conformance descriptor for SPSecureLocationPublishReason);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v30, &v52, v47, v30, v31);
    uint64_t v32 = v50;
    if (v51) {
      uint64_t v32 = 0LL;
    }
    *(uint64_t *)((char *)v49 + v38) = v32;
    LOBYTE(v50) = 12;
    uint64_t v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v50, v47);
    uint64_t v35 = v34;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v46, v47);
    char v36 = (uint64_t *)v48;
    swift_bridgeObjectRelease();
    *char v36 = v33;
    v36[1] = v35;
    id v37 = v49;
    sub_1000A6E74((uint64_t)v49, v41);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    return sub_1000A6EF4((uint64_t)v37);
  }

uint64_t sub_1005F02D8(void *a1)
{
  return sub_1005F02EC(a1);
}

uint64_t sub_1005F02EC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B6708);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1005F081C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SecureLocation.CodingKeys,  &type metadata for SecureLocation.CodingKeys,  v11,  v9,  v10);
  double v12 = *v3;
  uint64_t v13 = *((void *)v3 + 1);
  LOBYTE(v3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(*(void *)&v12, v13, &v37, v5);
  if (!v2)
  {
    double v14 = v3[2];
    LOBYTE(v3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v37, v5, v14);
    double v15 = v3[3];
    LOBYTE(v3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(&v37, v5, v15);
    double v16 = v3[4];
    LOBYTE(v3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(&v37, v5, v16);
    double v17 = v3[5];
    LOBYTE(v3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(&v37, v5, v17);
    double v18 = v3[6];
    LOBYTE(v3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(&v37, v5, v18);
    double v19 = v3[7];
    LOBYTE(v3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(&v37, v5, v19);
    double v20 = v3[8];
    LOBYTE(v3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(&v37, v5, v20);
    char v21 = *((_BYTE *)v3 + 80);
    *(double *)&__int128 v37 = v3[9];
    BYTE8(v3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = v21;
    char v38 = 8;
    uint64_t v22 = sub_100004AEC(&qword_10099D5F8);
    uint64_t v23 = sub_1005F0860(&qword_1009B6710, &qword_10099D5F8);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v37, &v38, v5, v22, v23);
    uint64_t v24 = (int *)type metadata accessor for SecureLocation(0LL);
    uint64_t v25 = (uint64_t)v3 + v24[13];
    LOBYTE(v3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = 9;
    uint64_t v26 = type metadata accessor for Date(0LL);
    uint64_t v27 = sub_100007864( &qword_10099DA40,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v37, v5, v26, v27);
    *(double *)&__int128 v37 = *(double *)((char *)v3 + v24[14]);
    char v38 = 10;
    type metadata accessor for SPMotionActivityState(0LL);
    uint64_t v29 = v28;
    uint64_t v30 = sub_100007864( &qword_1009B6718,  (uint64_t (*)(uint64_t))type metadata accessor for SPMotionActivityState,  (uint64_t)&protocol conformance descriptor for SPMotionActivityState);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v37, &v38, v5, v29, v30);
    *(double *)&__int128 v37 = *(double *)((char *)v3 + v24[15]);
    char v38 = 11;
    type metadata accessor for SPSecureLocationPublishReason(0LL);
    uint64_t v32 = v31;
    uint64_t v33 = sub_100007864( &qword_1009B6720,  (uint64_t (*)(uint64_t))type metadata accessor for SPSecureLocationPublishReason,  (uint64_t)&protocol conformance descriptor for SPSecureLocationPublishReason);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v37, &v38, v5, v32, v33);
    __int128 v37 = *(_OWORD *)((char *)v3 + v24[16]);
    char v38 = 12;
    uint64_t v34 = sub_100004AEC(&qword_1009A34B0);
    uint64_t v35 = sub_1005F0860(&qword_1009B6728, &qword_1009A34B0);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v37, &v38, v5, v34, v35);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1005F06F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Date.< infix(_:_:)(a1 + *(int *)(a3 + 52), a2 + *(int *)(a3 + 52));
}

BOOL sub_1005F0708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static Date.< infix(_:_:)(a2 + *(int *)(a3 + 52), a1 + *(int *)(a3 + 52)) & 1) == 0;
}

BOOL sub_1005F0734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static Date.< infix(_:_:)(a1 + *(int *)(a3 + 52), a2 + *(int *)(a3 + 52)) & 1) == 0;
}

uint64_t sub_1005F075C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Date.< infix(_:_:)(a2 + *(int *)(a3 + 52), a1 + *(int *)(a3 + 52));
}

Swift::Int sub_1005F0770()
{
  return Hasher._finalize()();
}

Swift::Int sub_1005F07B0(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1005F07F0()
{
  return sub_100007864(&qword_1009B66E0, type metadata accessor for SecureLocation, (uint64_t)&unk_10080C9A0);
}

unint64_t sub_1005F081C()
{
  unint64_t result = qword_1009B66F0;
  if (!qword_1009B66F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080CBC4, &type metadata for SecureLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B66F0);
  }

  return result;
}

uint64_t sub_1005F0860(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_100004B78(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1005F08B4(double *a1, uint64_t a2)
{
  double v4 = *a1;
  uint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *(void *)(a2 + 8);
  BOOL v7 = *(void *)&v4 == *(void *)a2 && v5 == v6;
  if (v7
    || (char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)&v4, v5, *(void *)a2, v6, 0LL),
        uint64_t result = 0LL,
        (v8 & 1) != 0))
  {
    if (a1[2] != *(double *)(a2 + 16)
      || a1[3] != *(double *)(a2 + 24)
      || a1[4] != *(double *)(a2 + 32)
      || a1[5] != *(double *)(a2 + 40)
      || a1[6] != *(double *)(a2 + 48)
      || a1[7] != *(double *)(a2 + 56)
      || a1[8] != *(double *)(a2 + 64))
    {
      return 0LL;
    }

    char v10 = *(_BYTE *)(a2 + 80);
    if (((_BYTE)a1[10] & 1) != 0)
    {
      if (!*(_BYTE *)(a2 + 80)) {
        return 0LL;
      }
    }

    else
    {
      if (*((void *)a1 + 9) != *(void *)(a2 + 72)) {
        char v10 = 1;
      }
      if ((v10 & 1) != 0) {
        return 0LL;
      }
    }

    unint64_t v11 = (int *)type metadata accessor for SecureLocation(0LL);
    if ((static Date.== infix(_:_:)((char *)a1 + v11[13], a2 + v11[13]) & 1) == 0
      || *(void *)((char *)a1 + v11[14]) != *(void *)(a2 + v11[14])
      || *(void *)((char *)a1 + v11[15]) != *(void *)(a2 + v11[15]))
    {
      return 0LL;
    }

    uint64_t v12 = v11[16];
    uint64_t v13 = (void *)((char *)a1 + v12);
    uint64_t v14 = *(void *)((char *)a1 + v12 + 8);
    double v15 = (void *)(a2 + v12);
    uint64_t v16 = v15[1];
    if (v14)
    {
      if (!v16
        || (*v13 != *v15 || v14 != v16)
        && (_stringCompareWithSmolCheck(_:_:expecting:)(*v13, v14, *v15, v16, 0LL) & 1) == 0)
      {
        return 0LL;
      }
    }

    else if (v16)
    {
      return 0LL;
    }

    return 1LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for SecureLocation.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }

uint64_t storeEnumTagSinglePayload for SecureLocation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF3) {
    return ((uint64_t (*)(void))((char *)&loc_1005F0B14 + 4 * byte_10080C888[v4]))();
  }
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_1005F0B48 + 4 * byte_10080C883[v4]))();
}

uint64_t sub_1005F0B48(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005F0B50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005F0B58LL);
  }
  return result;
}

uint64_t sub_1005F0B64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005F0B6CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 12;
  return result;
}

uint64_t sub_1005F0B70(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005F0B78(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocation.CodingKeys()
{
  return &type metadata for SecureLocation.CodingKeys;
}

unint64_t sub_1005F0B98()
{
  unint64_t result = qword_1009B6740;
  if (!qword_1009B6740)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080CB9C, &type metadata for SecureLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B6740);
  }

  return result;
}

unint64_t sub_1005F0BE0()
{
  unint64_t result = qword_1009B6748;
  if (!qword_1009B6748)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080CAD4, &type metadata for SecureLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B6748);
  }

  return result;
}

unint64_t sub_1005F0C28()
{
  unint64_t result = qword_1009B6750;
  if (!qword_1009B6750)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080CAFC, &type metadata for SecureLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B6750);
  }

  return result;
}

unint64_t sub_1005F0C6C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100934A88, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xD) {
    return 13LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1005F0CB4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v5 = __chkstk_darwin(v4);
  BOOL v7 = (char *)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v84 - v8;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v91 = *(void *)(v10 - 8);
  uint64_t v92 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v86 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  __int128 v87 = (char *)&v84 - v13;
  uint64_t v14 = (int *)type metadata accessor for LostModeRecord(0LL);
  double v15 = (uint64_t *)((char *)a2 + v14[7]);
  void *v15 = 0LL;
  v15[1] = 0LL;
  __int128 v88 = v15;
  uint64_t v16 = (uint64_t *)((char *)a2 + v14[8]);
  void *v16 = 0LL;
  v16[1] = 0LL;
  __int128 v89 = v16;
  double v17 = (uint64_t *)((char *)a2 + v14[9]);
  *double v17 = 0LL;
  v17[1] = 0LL;
  __int128 v90 = v17;
  uint64_t v18 = CKRecord.recordType.getter(v14);
  if (v18 == 0x65646F4D74736F4CLL && v19 == 0xEE0064726F636552LL)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, 0x65646F4D74736F4CLL, 0xEE0064726F636552LL, 0LL);
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
    {
      unint64_t v55 = sub_1005F26A0();
      uint64_t v30 = swift_allocError(&type metadata for LostModeRecord.LostModeRecordConversionError, v55, 0LL, 0LL);
      *uint64_t v56 = 0;
      goto LABEL_17;
    }
  }

  id v21 = [a1 recordID];
  id v22 = [v21 recordName];

  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  uint64_t v25 = v24;

  UUID.init(uuidString:)(v23, v25);
  swift_bridgeObjectRelease();
  uint64_t v27 = v91;
  uint64_t v26 = v92;
  uint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48);
  if (v28(v9, 1LL, v92) == 1)
  {
    sub_1001BC5AC((uint64_t)v9);
    unint64_t v29 = sub_1005F26A0();
    uint64_t v30 = swift_allocError(&type metadata for LostModeRecord.LostModeRecordConversionError, v29, 0LL, 0LL);
    *uint64_t v31 = 1;
LABEL_17:
    swift_willThrow(v30);

LABEL_18:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
  v32(v87, v9, v26);
  id v33 = [a1 encryptedValues];
  NSString v34 = String._bridgeToObjectiveC()();
  id v35 = [v33 objectForKeyedSubscript:v34];

  if (!v35
    || (id v95 = v35,
        uint64_t v85 = sub_100004AEC((uint64_t *)&unk_10099D910),
        uint64_t v36 = swift_dynamicCast(&v93, &v95, v85, &type metadata for String, 6LL),
        (v36 & 1) == 0))
  {
    uint64_t v47 = static os_log_type_t.error.getter(v36);
    if (qword_10099B778 != -1) {
      swift_once(&qword_10099B778, sub_1006516DC);
    }
    uint64_t v48 = qword_100A2B088;
    uint64_t v49 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v50 = swift_allocObject(v49, 72LL, 7LL);
    *(_OWORD *)(v50 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v50 + 56) = sub_1005F26E4();
    *(void *)(v50 + 64) = sub_100007864( (unint64_t *)&qword_10099D750,  (uint64_t (*)(uint64_t))sub_1005F26E4,  (uint64_t)&protocol conformance descriptor for NSObject);
    *(void *)(v50 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = a1;
    id v51 = a1;
    os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, v48, "Invalid beaconIdentifier - %@", 29LL, 2LL, v50);
    swift_bridgeObjectRelease();
    unint64_t v52 = sub_1005F26A0();
    uint64_t v53 = swift_allocError(&type metadata for LostModeRecord.LostModeRecordConversionError, v52, 0LL, 0LL);
    *uint64_t v54 = 3;
    swift_willThrow(v53);
    swift_unknownObjectRelease(v33);

    (*(void (**)(char *, uint64_t))(v91 + 8))(v87, v92);
    goto LABEL_18;
  }

  UUID.init(uuidString:)(v93, v94);
  swift_bridgeObjectRelease();
  uint64_t v37 = v92;
  if (v28(v7, 1LL, v92) == 1)
  {
    uint64_t v38 = sub_1001BC5AC((uint64_t)v7);
    uint64_t v39 = static os_log_type_t.error.getter(v38);
    if (qword_10099B778 != -1) {
      swift_once(&qword_10099B778, sub_1006516DC);
    }
    uint64_t v40 = qword_100A2B088;
    uint64_t v41 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v42 = swift_allocObject(v41, 72LL, 7LL);
    *(_OWORD *)(v42 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v42 + 56) = sub_1005F26E4();
    *(void *)(v42 + 64) = sub_100007864( (unint64_t *)&qword_10099D750,  (uint64_t (*)(uint64_t))sub_1005F26E4,  (uint64_t)&protocol conformance descriptor for NSObject);
    *(void *)(v42 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = a1;
    id v43 = a1;
    os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, v40, "beaconIdentifier is not a valid UUID - %@", 41LL, 2LL, v42);
    swift_bridgeObjectRelease();
    unint64_t v44 = sub_1005F26A0();
    uint64_t v45 = swift_allocError(&type metadata for LostModeRecord.LostModeRecordConversionError, v44, 0LL, 0LL);
    *uint64_t v46 = 2;
    swift_willThrow(v45);
    swift_unknownObjectRelease(v33);

    (*(void (**)(char *, uint64_t))(v91 + 8))(v87, v92);
    goto LABEL_18;
  }

  v32(v86, v7, v37);
  uint64_t v84 = objc_autoreleasePoolPush();
  id v58 = [objc_allocWithZone(NSKeyedArchiver) initRequiringSecureCoding:1];
  [a1 encodeSystemFieldsWithCoder:v58];
  [v58 finishEncoding];
  uint64_t v59 = v37;
  id v60 = [v58 encodedData];
  uint64_t v61 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v60);
  uint64_t v63 = v62;

  objc_autoreleasePoolPop(v84);
  *a2 = v61;
  a2[1] = v63;
  Swift::String v64 = *(void (**)(char *, char *, uint64_t))(v91 + 16);
  v64((char *)a2 + v14[5], v87, v59);
  v64((char *)a2 + v14[6], v86, v59);
  NSString v65 = String._bridgeToObjectiveC()();
  id v66 = [v33 objectForKeyedSubscript:v65];

  if (v66)
  {
    id v95 = v66;
    uint64_t v67 = v85;
    int v68 = swift_dynamicCast(&v93, &v95, v85, &type metadata for String, 6LL);
    if (v68) {
      uint64_t v69 = v93;
    }
    else {
      uint64_t v69 = 0LL;
    }
    if (v68) {
      id v66 = v94;
    }
    else {
      id v66 = 0LL;
    }
    uint64_t v71 = v89;
    uint64_t v70 = v90;
    uint64_t v72 = v88;
  }

  else
  {
    uint64_t v69 = 0LL;
    uint64_t v71 = v89;
    uint64_t v70 = v90;
    uint64_t v72 = v88;
    uint64_t v67 = v85;
  }

  swift_bridgeObjectRelease();
  void *v72 = v69;
  v72[1] = v66;
  NSString v73 = String._bridgeToObjectiveC()();
  id v74 = [v33 objectForKeyedSubscript:v73];

  if (v74)
  {
    id v95 = v74;
    int v75 = swift_dynamicCast(&v93, &v95, v67, &type metadata for String, 6LL);
    if (v75) {
      uint64_t v76 = v93;
    }
    else {
      uint64_t v76 = 0LL;
    }
    if (v75) {
      id v74 = v94;
    }
    else {
      id v74 = 0LL;
    }
  }

  else
  {
    uint64_t v76 = 0LL;
  }

  swift_bridgeObjectRelease();
  *uint64_t v71 = v76;
  v71[1] = v74;
  NSString v77 = String._bridgeToObjectiveC()();
  id v78 = [v33 objectForKeyedSubscript:v77];
  swift_unknownObjectRelease(v33);

  uint64_t v79 = v92;
  uint64_t v80 = *(void (**)(char *, uint64_t))(v91 + 8);
  v80(v86, v92);
  v80(v87, v79);
  if (v78)
  {
    id v95 = v78;
    int v81 = swift_dynamicCast(&v93, &v95, v67, &type metadata for String, 6LL);
    if (v81) {
      uint64_t v82 = v93;
    }
    else {
      uint64_t v82 = 0LL;
    }
    if (v81) {
      uint64_t v83 = v94;
    }
    else {
      uint64_t v83 = 0LL;
    }
  }

  else
  {
    uint64_t v82 = 0LL;
    uint64_t v83 = 0LL;
  }

  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v70 = v82;
  v70[1] = v83;
  return result;
}

uint64_t sub_1005F1554()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000A8AC(v2, qword_100A2AEF0);
  sub_10000A720(v0, (uint64_t)qword_100A2AEF0);
  type metadata accessor for BeaconStore(0LL);
  sub_1004E6208((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0x65646F4D74736F4CLL, 0xEF7364726F636552LL, 1LL);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

void sub_1005F162C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  unint64_t v5 = v2[1];
  sub_10001736C(v4, v5);
  Data.hash(into:)(a1, v4, v5);
  sub_100016F9C(v4, v5);
  uint64_t v6 = (int *)type metadata accessor for LostModeRecord(0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v7, v8);
  dispatch thunk of Hashable.hash(into:)(a1, v7, v8);
  uint64_t v9 = (uint64_t *)((char *)v2 + v6[7]);
  uint64_t v10 = v9[1];
  if (v10)
  {
    uint64_t v11 = *v9;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v10);
    String.hash(into:)(a1, v11, v10);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v12 = (uint64_t *)((char *)v2 + v6[8]);
  uint64_t v13 = v12[1];
  if (v13)
  {
    uint64_t v14 = *v12;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v13);
    String.hash(into:)(a1, v14, v13);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  double v15 = (uint64_t *)((char *)v2 + v6[9]);
  uint64_t v16 = v15[1];
  if (v16)
  {
    uint64_t v17 = *v15;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v16);
    String.hash(into:)(a1, v17, v16);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

uint64_t sub_1005F17F0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1005F1828 + 4 * byte_10080CC20[a1]))( 0xD000000000000010LL,  0x800000010084DE70LL);
}

uint64_t sub_1005F1828()
{
  return 0x696669746E656469LL;
}

  ;
}

uint64_t sub_1005F1858()
{
  return 0x6C69616D65LL;
}

uint64_t sub_1005F186C()
{
  return 0x6D754E656E6F6870LL;
}

uint64_t sub_1005F188C()
{
  return 0x6567617373656DLL;
}

uint64_t sub_1005F18A4()
{
  return sub_1005F17F0(*v0);
}

uint64_t sub_1005F18AC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1005F3258(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005F18D0(uint64_t a1)
{
  unint64_t v2 = sub_1005F25DC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005F18F8(uint64_t a1)
{
  unint64_t v2 = sub_1005F25DC();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_1005F1920()
{
  return Hasher._finalize()();
}

Swift::Int sub_1005F1960(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1005F199C(id *a1)
{
  uint64_t v2 = v1;
  id v3 = [*a1 encryptedValues];
  uint64_t ObjectType = swift_getObjectType(v3);
  CKRecordKeyValueSetting.subscript.getter( &v28,  0xD000000000000010LL,  0x800000010084D8A0LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  uint64_t v5 = *((void *)&v28 + 1);
  uint64_t v6 = v28;
  uint64_t v7 = (int *)type metadata accessor for LostModeRecord(0LL);
  uint64_t v8 = UUID.uuidString.getter(v7);
  if (!v5)
  {
    uint64_t v12 = swift_bridgeObjectRelease();
    goto LABEL_9;
  }

  if (v6 == v8 && v5 == v9)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }

  char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v5, v8, v9, 0LL);
  swift_bridgeObjectRelease();
  uint64_t v12 = swift_bridgeObjectRelease();
  if ((v11 & 1) == 0)
  {
LABEL_9:
    uint64_t v13 = UUID.uuidString.getter(v12);
    *((void *)&v29 + 1) = &type metadata for String;
    uint64_t v30 = &protocol witness table for String;
    *(void *)&__int128 v28 = v13;
    *((void *)&v28 + 1) = v14;
    CKRecordKeyValueSetting.subscript.setter(&v28, 0xD000000000000010LL, 0x800000010084D8A0LL, ObjectType);
  }

uint64_t sub_1005F1DA4(void *a1)
{
  id v3 = v1;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009B6788);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1005F25DC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for LostModeRecord.CodingKeys,  &type metadata for LostModeRecord.CodingKeys,  v11,  v9,  v10);
  __int128 v28 = *v3;
  char v29 = 0;
  unint64_t v12 = sub_1000170A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v29, v5, &type metadata for Data, v12);
  if (!v2)
  {
    uint64_t v13 = (int *)type metadata accessor for LostModeRecord(0LL);
    uint64_t v14 = (char *)v3 + v13[5];
    LOBYTE(v28) = 1;
    uint64_t v15 = type metadata accessor for UUID(0LL);
    uint64_t v16 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v28, v5, v15, v16);
    unint64_t v17 = (char *)v3 + v13[6];
    LOBYTE(v28) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v28, v5, v15, v16);
    char v18 = (uint64_t *)((char *)v3 + v13[7]);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    LOBYTE(v28) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, &v28, v5);
    unint64_t v21 = (uint64_t *)((char *)v3 + v13[8]);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    LOBYTE(v28) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v28, v5);
    unint64_t v24 = (uint64_t *)((char *)v3 + v13[9]);
    uint64_t v25 = *v24;
    uint64_t v26 = v24[1];
    LOBYTE(v28) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, &v28, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1005F1FE4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v51 = a2;
  uint64_t v54 = type metadata accessor for UUID(0LL);
  uint64_t v52 = *(void *)(v54 - 8);
  uint64_t v3 = __chkstk_darwin(v54);
  uint64_t v53 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v49 - v5;
  uint64_t v55 = sub_100004AEC(&qword_1009B6778);
  uint64_t v7 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for LostModeRecord(0LL);
  unint64_t v11 = (int *)__chkstk_darwin(v10);
  uint64_t v13 = (_OWORD *)((char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = (uint64_t *)((char *)v13 + v11[7]);
  *uint64_t v14 = 0LL;
  v14[1] = 0LL;
  id v60 = v14;
  uint64_t v15 = (uint64_t *)((char *)v13 + v11[8]);
  uint64_t *v15 = 0LL;
  v15[1] = 0LL;
  uint64_t v59 = v15;
  uint64_t v16 = (uint64_t *)((char *)v13 + v11[9]);
  uint64_t *v16 = 0LL;
  v16[1] = 0LL;
  uint64_t v57 = v16;
  uint64_t v17 = a1[3];
  uint64_t v18 = a1[4];
  sub_100012ED8(a1, v17);
  unint64_t v19 = sub_1005F25DC();
  uint64_t v56 = v9;
  uint64_t v20 = v58;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for LostModeRecord.CodingKeys,  &type metadata for LostModeRecord.CodingKeys,  v19,  v17,  v18);
  if (v20)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  else
  {
    unint64_t v21 = v6;
    uint64_t v50 = v7;
    id v58 = a1;
    uint64_t v22 = v53;
    uint64_t v23 = v54;
    char v62 = 0;
    unint64_t v24 = sub_100016FE0();
    uint64_t v25 = v55;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v61, &type metadata for Data, &v62, v55, &type metadata for Data, v24);
    uint64_t v26 = (uint64_t)v13;
    *uint64_t v13 = v61;
    LOBYTE(v61) = 1;
    uint64_t v27 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    __int128 v28 = v21;
    char v29 = v21;
    uint64_t v30 = v23;
    uint64_t v31 = v23;
    uint64_t v32 = v23;
    uint64_t v33 = v27;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v29, v31, &v61, v25, v32, v27);
    uint64_t v34 = v25;
    id v35 = *(void (**)(uint64_t, void *, uint64_t))(v52 + 32);
    v35(v26 + *(int *)(v10 + 20), v28, v30);
    LOBYTE(v61) = 2;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v22, v30, &v61, v34, v30, v33);
    uint64_t v49 = v10;
    v35(v26 + *(int *)(v10 + 24), v22, v30);
    LOBYTE(v61) = 3;
    uint64_t v36 = v55;
    uint64_t v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v61, v55);
    uint64_t v38 = v60;
    uint64_t *v60 = v37;
    v38[1] = v39;
    LOBYTE(v61) = 4;
    uint64_t v40 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v61, v36);
    uint64_t v41 = v59;
    *uint64_t v59 = v40;
    v41[1] = v42;
    LOBYTE(v61) = 5;
    uint64_t v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v61, v36);
    uint64_t v53 = v44;
    uint64_t v45 = v43;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v56, v36);
    uint64_t v46 = v57;
    swift_bridgeObjectRelease();
    uint64_t v47 = v53;
    *uint64_t v46 = v45;
    v46[1] = (uint64_t)v47;
    sub_1005F2620(v26, v51);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v58);
    return sub_1005F2664(v26);
  }

uint64_t sub_1005F2454()
{
  if (qword_10099B648 != -1) {
    swift_once(&qword_10099B648, sub_1005F1554);
  }
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2AEF0);
  uint64_t v2 = UUID.uuidString.getter(v1);
  URL.appendingPathComponent(_:isDirectory:)(v2, v3, 1LL);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1005F24E0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005F1FE4(a1, a2);
}

uint64_t sub_1005F24F4(void *a1)
{
  return sub_1005F1DA4(a1);
}

uint64_t sub_1005F2508(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100007864( (unint64_t *)&unk_1009B6760,  type metadata accessor for LostModeRecord,  (uint64_t)&unk_10080CC64);
  uint64_t result = sub_100007864(&qword_1009B2888, type metadata accessor for LostModeRecord, (uint64_t)&unk_10080CC3C);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

uint64_t type metadata accessor for LostModeRecord(uint64_t a1)
{
  uint64_t result = qword_1009B67F8;
  if (!qword_1009B67F8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LostModeRecord);
  }
  return result;
}

uint64_t sub_1005F25A0(uint64_t a1)
{
  uint64_t result = sub_100007864(&qword_1009B6770, type metadata accessor for LostModeRecord, (uint64_t)&unk_10080CC8C);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1005F25DC()
{
  unint64_t result = qword_1009B6780;
  if (!qword_1009B6780)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080CF10, &type metadata for LostModeRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B6780);
  }

  return result;
}

uint64_t sub_1005F2620(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LostModeRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005F2664(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LostModeRecord(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_1005F26A0()
{
  unint64_t result = qword_1009B6798;
  if (!qword_1009B6798)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080CED0, &type metadata for LostModeRecord.LostModeRecordConversionError);
    atomic_store(result, (unint64_t *)&qword_1009B6798);
  }

  return result;
}

unint64_t sub_1005F26E4()
{
  unint64_t result = qword_10099D920;
  if (!qword_10099D920)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___CKRecord);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10099D920);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for LostModeRecord.LostModeRecordConversionError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1005F276C + 4 * byte_10080CC2B[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1005F27A0 + 4 * byte_10080CC26[v4]))();
}

uint64_t sub_1005F27A0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005F27A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005F27B0LL);
  }
  return result;
}

uint64_t sub_1005F27BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005F27C4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1005F27C8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005F27D0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LostModeRecord.LostModeRecordConversionError()
{
  return &type metadata for LostModeRecord.LostModeRecordConversionError;
}

uint64_t storeEnumTagSinglePayload for LostModeRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_1005F2838 + 4 * byte_10080CC35[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1005F286C + 4 * byte_10080CC30[v4]))();
}

uint64_t sub_1005F286C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005F2874(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005F287CLL);
  }
  return result;
}

uint64_t sub_1005F2888(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005F2890LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1005F2894(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005F289C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LostModeRecord.CodingKeys()
{
  return &type metadata for LostModeRecord.CodingKeys;
}

uint64_t *sub_1005F28B8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v26 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_10001736C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    unint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID(0LL);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
    v13(v10, v11, v12);
    v13((char *)a1 + a3[6], (char *)a2 + a3[6], v12);
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    uint64_t v16 = (uint64_t *)((char *)a1 + v14);
    uint64_t v17 = (uint64_t *)((char *)a2 + v14);
    uint64_t v18 = v17[1];
    void *v16 = *v17;
    v16[1] = v18;
    unint64_t v19 = (uint64_t *)((char *)a1 + v15);
    uint64_t v20 = (uint64_t *)((char *)a2 + v15);
    uint64_t v21 = v20[1];
    void *v19 = *v20;
    v19[1] = v21;
    uint64_t v22 = a3[9];
    uint64_t v23 = (uint64_t *)((char *)a1 + v22);
    unint64_t v24 = (uint64_t *)((char *)a2 + v22);
    uint64_t v25 = v24[1];
    *uint64_t v23 = *v24;
    v23[1] = v25;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v25);
  }

  return a1;
}

uint64_t sub_1005F29C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v6(v4, v5);
  v6(a1 + *(int *)(a2 + 24), v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t *sub_1005F2A68(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], (char *)a2 + a3[6], v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = (uint64_t *)((char *)a1 + v13);
  uint64_t v16 = (uint64_t *)((char *)a2 + v13);
  uint64_t v17 = v16[1];
  void *v15 = *v16;
  v15[1] = v17;
  uint64_t v18 = (uint64_t *)((char *)a1 + v14);
  unint64_t v19 = (uint64_t *)((char *)a2 + v14);
  uint64_t v20 = v19[1];
  void *v18 = *v19;
  v18[1] = v20;
  uint64_t v21 = a3[9];
  uint64_t v22 = (uint64_t *)((char *)a1 + v21);
  uint64_t v23 = (uint64_t *)((char *)a2 + v21);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v24);
  return a1;
}

uint64_t *sub_1005F2B4C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100016F9C(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24LL);
  v14(v11, v12, v13);
  v14((char *)a1 + a3[6], (char *)a2 + a3[6], v13);
  uint64_t v15 = a3[7];
  uint64_t v16 = (uint64_t *)((char *)a1 + v15);
  uint64_t v17 = (uint64_t *)((char *)a2 + v15);
  void *v16 = *v17;
  uint64_t v18 = v17[1];
  v16[1] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[8];
  uint64_t v20 = (uint64_t *)((char *)a1 + v19);
  uint64_t v21 = (uint64_t *)((char *)a2 + v19);
  *uint64_t v20 = *v21;
  uint64_t v22 = v21[1];
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[9];
  uint64_t v24 = (uint64_t *)((char *)a1 + v23);
  uint64_t v25 = (uint64_t *)((char *)a2 + v23);
  *uint64_t v24 = *v25;
  uint64_t v26 = v25[1];
  v24[1] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_1005F2C70(char *a1, char *a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  uint64_t v11 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v11] = *(_OWORD *)&a2[v11];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  return a1;
}

uint64_t *sub_1005F2D1C(uint64_t *a1, char *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016F9C(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], &a2[a3[6]], v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = (uint64_t *)((char *)a1 + v13);
  uint64_t v15 = (uint64_t *)&a2[v13];
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[8];
  uint64_t v19 = (uint64_t *)((char *)a1 + v18);
  uint64_t v20 = (uint64_t *)&a2[v18];
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  void *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[9];
  uint64_t v24 = (uint64_t *)((char *)a1 + v23);
  uint64_t v25 = (uint64_t *)&a2[v23];
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  *uint64_t v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1005F2E08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005F2E14);
}

uint64_t sub_1005F2E14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  int v10 = v9 - 1;
  if (v10 < 0) {
    int v10 = -1;
  }
  return (v10 + 1);
}

uint64_t sub_1005F2EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005F2EB0);
}

uint64_t sub_1005F2EB0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))( a1 + *(int *)(a4 + 20),  a2,  a2,  result);
  }
  *(void *)(a1 + *(int *)(a4 + 28) + 8) = a2;
  return result;
}

uint64_t sub_1005F2F30(uint64_t a1)
{
  uint64_t v4 = &unk_10080CD18;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(result - 8) + 64LL;
    uint64_t v6 = v5;
    uint64_t v7 = &unk_10080CD30;
    uint64_t v8 = &unk_10080CD30;
    uint64_t v9 = &unk_10080CD30;
    swift_initStructMetadata(a1, 256LL, 6LL, &v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1005F2FB4()
{
  return sub_100007864(&qword_1009B6840, type metadata accessor for LostModeRecord, (uint64_t)&unk_10080CD48);
}

unint64_t sub_1005F2FE4()
{
  unint64_t result = qword_1009B6848;
  if (!qword_1009B6848)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080CE40, &type metadata for LostModeRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B6848);
  }

  return result;
}

unint64_t sub_1005F302C()
{
  unint64_t result = qword_1009B6850;
  if (!qword_1009B6850)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080CEA8, &type metadata for LostModeRecord.LostModeRecordConversionError);
    atomic_store(result, (unint64_t *)&qword_1009B6850);
  }

  return result;
}

unint64_t sub_1005F3074()
{
  unint64_t result = qword_1009B6858;
  if (!qword_1009B6858)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080CDB0, &type metadata for LostModeRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B6858);
  }

  return result;
}

unint64_t sub_1005F30BC()
{
  unint64_t result = qword_1009B6860;
  if (!qword_1009B6860)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080CDD8, &type metadata for LostModeRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B6860);
  }

  return result;
}

uint64_t sub_1005F3100(uint64_t *a1, uint64_t a2)
{
  if ((v4 & 1) == 0) {
    return 0LL;
  }
  uint64_t v5 = (int *)type metadata accessor for LostModeRecord(0LL);
  if ((static UUID.== infix(_:_:)((char *)a1 + v5[5], a2 + v5[5]) & 1) == 0
    || (static UUID.== infix(_:_:)((char *)a1 + v5[6], a2 + v5[6]) & 1) == 0)
  {
    return 0LL;
  }

  uint64_t v6 = v5[7];
  uint64_t v7 = (uint64_t *)((char *)a1 + v6);
  uint64_t v8 = *(uint64_t *)((char *)a1 + v6 + 8);
  uint64_t v9 = (void *)(a2 + v6);
  uint64_t v10 = v9[1];
  if (!v8)
  {
    if (v10) {
      return 0LL;
    }
    goto LABEL_13;
  }

  if (!v10) {
    return 0LL;
  }
  BOOL v11 = *v7 == *v9 && v8 == v10;
  if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(*v7, v8, *v9, v10, 0LL), uint64_t result = 0LL, (v12 & 1) != 0))
  {
LABEL_13:
    uint64_t v14 = v5[8];
    uint64_t v15 = (uint64_t *)((char *)a1 + v14);
    uint64_t v16 = *(uint64_t *)((char *)a1 + v14 + 8);
    uint64_t v17 = (void *)(a2 + v14);
    uint64_t v18 = v17[1];
    if (v16)
    {
      if (!v18) {
        return 0LL;
      }
      if (*v15 != *v17 || v16 != v18)
      {
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(*v15, v16, *v17, v18, 0LL);
        uint64_t result = 0LL;
        if ((v20 & 1) == 0) {
          return result;
        }
      }
    }

    else if (v18)
    {
      return 0LL;
    }

    uint64_t v21 = v5[9];
    uint64_t v22 = (uint64_t *)((char *)a1 + v21);
    uint64_t v23 = *(uint64_t *)((char *)a1 + v21 + 8);
    uint64_t v24 = (void *)(a2 + v21);
    uint64_t v25 = v24[1];
    if (v23)
    {
      if (v25
        && (*v22 == *v24 && v23 == v25
         || (_stringCompareWithSmolCheck(_:_:expecting:)(*v22, v23, *v24, v25, 0LL) & 1) != 0))
      {
        return 1LL;
      }
    }

    else if (!v25)
    {
      return 1LL;
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_1005F3258(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x800000010084DE70LL;
    if (a2 == 0x800000010084DE70LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010084DE70LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v6 = 0xEA00000000007265LL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_11;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v7 = 0x800000010084D8A0LL;
    if (a2 == 0x800000010084D8A0LL) {
      goto LABEL_16;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010084D8A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if (a1 == 0x6C69616D65LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v8 = 0xE500000000000000LL;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C69616D65LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_22;
  }

  if (a1 == 0x6D754E656E6F6870LL && a2 == 0xEB00000000726562LL)
  {
    unint64_t v9 = 0xEB00000000726562LL;
LABEL_28:
    swift_bridgeObjectRelease(v9);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D754E656E6F6870LL, 0xEB00000000726562LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_28;
  }

  if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL);
    return 5LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6567617373656DLL, 0xE700000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

uint64_t sub_1005F34E8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100004AEC(&qword_1009B0670);
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009B6A98);
  uint64_t v27 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009B6AA0);
  uint64_t v28 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  char v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v29 = a1;
  swift_retain();
  uint64_t v13 = sub_100004AEC(&qword_1009B6AA8);
  uint64_t v14 = sub_100004AEC(&qword_1009B6AB0);
  uint64_t v15 = sub_1000372EC( &qword_1009B6AB8,  &qword_1009B6AA8,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.compactMap<A>(_:)(sub_1005F4CE4, v2, v13, v14, v15);
  swift_release();
  id v29 = *(id *)(v2 + 24);
  id v16 = v29;
  uint64_t v17 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v6, 1LL, 1LL, v17);
  unint64_t v18 = sub_100004AB0();
  uint64_t v19 = sub_1000372EC( &qword_1009B6AC0,  &qword_1009B6A98,  (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  uint64_t v20 = sub_100007864( (unint64_t *)&qword_1009B06C0,  (uint64_t (*)(uint64_t))sub_100004AB0,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  id v21 = v16;
  Publisher.receive<A>(on:options:)(&v29, v6, v7, v18, v19, v20);
  sub_100015794((uint64_t)v6, &qword_1009B0670);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v7);
  uint64_t v22 = swift_allocObject(&unk_10096A5B0, 32LL, 7LL);
  *(void *)(v22 + swift_weakDestroy(v0 + 16) = sub_1005F4CEC;
  *(void *)(v22 + 24) = v2;
  uint64_t v23 = sub_1000372EC( &qword_1009B6AC8,  &qword_1009B6AA0,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain();
  uint64_t v24 = Publisher<>.sink(receiveValue:)(sub_1005F4D18, v22, v10, v23);
  swift_release();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v10);
  *(void *)(v2 + 40) = v24;
  return swift_release();
}

uint64_t sub_1005F37C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for BeaconKeyManager.KeyCriteria(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_unownedRetainStrong(*(void *)(a2 + 48));
  uint64_t v16 = type metadata accessor for BeaconKeyManager.PersistenceInstruction(0LL);
  sub_10001DC4C(a1 + *(int *)(v16 + 24), (uint64_t)v8, type metadata accessor for BeaconKeyManager.KeyCriteria);
  sub_100504F30((uint64_t)v8, (uint64_t)v11);
  swift_release();
  uint64_t v17 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8LL))(v8, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
  {
    sub_100015794((uint64_t)v11, (uint64_t *)&unk_1009A9C30);
    uint64_t v18 = sub_100004AEC(&qword_1009B6AB0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))( a3,  1LL,  1LL,  v18);
  }

  else
  {
    sub_10002218C((uint64_t)v11, (uint64_t)v15, type metadata accessor for OwnedBeaconRecord);
    uint64_t v20 = sub_100004AEC(&qword_1009B6AB0);
    uint64_t v21 = a3 + *(int *)(v20 + 48);
    sub_10002218C((uint64_t)v15, a3, type metadata accessor for OwnedBeaconRecord);
    sub_10001DC4C(a1, v21, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))( a3,  0LL,  1LL,  v20);
  }

uint64_t sub_1005F39D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = *(void **)(a3 + 24);
  void *v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) != 0)
  {
    uint64_t v13 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v13);
    *(void *)&v14[-32] = a3;
    *(void *)&v14[-24] = a1;
    *(void *)&v14[-16] = a2;
    return static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.InstructionEventCoalescer.process",  63LL,  2LL,  sub_1005F4D5C);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_1005F3B04()
{
  uint64_t v75 = type metadata accessor for UUID(0LL);
  uint64_t v1 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  uint64_t v76 = (char *)&v70 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100004AEC(&qword_1009B6A88);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v83 = (char *)&v70 - v7;
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v80 = *(void *)(v8 - 8);
  uint64_t v81 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  id v78 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v70 - v11;
  uint64_t v13 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (int64_t *)((char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v17 = *(void **)(v0 + 24);
  void *v16 = v17;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  id v18 = v17;
  char v19 = _dispatchPreconditionTest(_:)(v16);
  uint64_t v20 = (*(uint64_t (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  if ((v19 & 1) == 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }

  uint64_t v79 = v12;
  Date.init()(v20);
  uint64_t v21 = (void *)(v0 + 56);
  swift_beginAccess(v0 + 56, v88, 0LL, 0LL);
  uint64_t v22 = *(void *)(v0 + 56);
  uint64_t v23 = *(void *)(v22 + 64);
  uint64_t v71 = v22 + 64;
  uint64_t v24 = 1LL << *(_BYTE *)(v22 + 32);
  uint64_t v25 = -1LL;
  if (v24 < 64) {
    uint64_t v25 = ~(-1LL << v24);
  }
  unint64_t v26 = v25 & v23;
  int64_t v72 = (unint64_t)(v24 + 63) >> 6;
  int64_t v70 = v72 - 1;
  uint64_t v77 = v22;
  swift_bridgeObjectRetain(v22);
  int64_t v82 = 0LL;
  __int128 v74 = xmmword_1007E67D0;
  uint64_t v27 = v75;
  uint64_t v28 = v76;
  uint64_t v29 = (uint64_t)v83;
  uint64_t v30 = v1;
  uint64_t v31 = (uint64_t)v6;
  uint64_t v73 = v30;
  if (!v26) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v32 = v21;
  uint64_t v33 = v28;
  unint64_t v34 = __clz(__rbit64(v26));
  uint64_t v35 = (v26 - 1) & v26;
  unint64_t v36 = v34 | (v82 << 6);
  while (2)
  {
    uint64_t v37 = v77;
    uint64_t v38 = v30;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v30 + 16))( v31,  *(void *)(v77 + 48) + *(void *)(v30 + 72) * v36,  v27);
    uint64_t v39 = *(void *)(v37 + 56);
    uint64_t v40 = sub_100004AEC(&qword_1009B6A90);
    *(void *)(v31 + *(int *)(v40 + 48)) = *(void *)(v39 + 8 * v36);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56LL))(v31, 0LL, 1LL, v40);
    swift_retain();
    uint64_t v28 = v33;
    uint64_t v21 = v32;
    uint64_t v29 = (uint64_t)v83;
    while (1)
    {
      sub_1005F4C9C(v31, v29);
      uint64_t v45 = sub_100004AEC(&qword_1009B6A90);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 48LL))(v29, 1LL, v45) == 1)
      {
        swift_release();
        (*(void (**)(char *, uint64_t))(v80 + 8))(v79, v81);
        return;
      }

      unint64_t v84 = v35;
      uint64_t v46 = v21;
      uint64_t v47 = *(void *)(v29 + *(int *)(v45 + 48));
      uint64_t v48 = v38;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v28, v29, v27);
      uint64_t v49 = v47
          + OBJC_IVAR____TtCC12searchpartyd25InstructionEventCoalescerP33_3B6F52EF81004A05C130335557FA073612BufferRecord_timestamp;
      __n128 v50 = swift_beginAccess( v47 + OBJC_IVAR____TtCC12searchpartyd25InstructionEventCoalescerP33_3B6F52EF81004A05C130335557FA073612BufferRecord_timestamp,  v87,  0LL,  0LL);
      uint64_t v51 = v28;
      uint64_t v52 = v80;
      uint64_t v53 = v81;
      uint64_t v54 = v78;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v80 + 16))(v78, v49, v81, v50);
      double v55 = Date.timeIntervalSince(_:)(v54);
      uint64_t v56 = (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v54, v53);
      if (v55 <= 60.0)
      {
        (*(void (**)(char *, uint64_t))(v48 + 8))(v51, v27);
        swift_release();
        uint64_t v30 = v48;
        uint64_t v21 = v46;
        uint64_t v28 = v51;
        uint64_t v29 = (uint64_t)v83;
        unint64_t v26 = v84;
        if (v84) {
          goto LABEL_7;
        }
      }

      else
      {
        uint64_t v57 = static os_log_type_t.error.getter(v56);
        if (qword_10099B708 != -1) {
          swift_once(&qword_10099B708, sub_100651168);
        }
        uint64_t v58 = qword_100A2B018;
        uint64_t v59 = sub_100004AEC((uint64_t *)&unk_10099D740);
        uint64_t v60 = swift_allocObject(v59, 72LL, 7LL);
        *(_OWORD *)(v60 + swift_weakDestroy(v0 + 16) = v74;
        uint64_t v61 = (uint64_t)v76;
        uint64_t v62 = UUID.uuidString.getter(v60);
        uint64_t v64 = v63;
        *(void *)(v60 + 56) = &type metadata for String;
        *(void *)(v60 + 64) = sub_1000226F4();
        *(void *)(v60 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v62;
        *(void *)(v60 + 40) = v64;
        os_log(_:dso:log:_:_:)(v57, &_mh_execute_header, v58, "Purging expired unmatched events for %@", 39LL, 2LL, v60);
        swift_bridgeObjectRelease();
        uint64_t v21 = v46;
        swift_beginAccess(v46, v86, 33LL, 0LL);
        swift_bridgeObjectRetain(*v46);
        unint64_t v65 = sub_10030D124(v61);
        LOBYTE(v64) = v66;
        swift_bridgeObjectRelease();
        uint64_t v27 = v75;
        uint64_t v30 = v73;
        if ((v64 & 1) != 0)
        {
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v46);
          uint64_t v68 = *v46;
          uint64_t v85 = *v46;
          *uint64_t v46 = 0x8000000000000000LL;
          if (!isUniquelyReferenced_nonNull_native)
          {
            sub_10006793C();
            uint64_t v68 = v85;
          }

          (*(void (**)(unint64_t, uint64_t))(v30 + 8))( *(void *)(v68 + 48) + *(void *)(v30 + 72) * v65,  v27);
          uint64_t v69 = v85;
          sub_100058B00(v65, v85);
          *uint64_t v46 = v69;
          swift_release();
          uint64_t v21 = v46;
          swift_bridgeObjectRelease();
          uint64_t v61 = (uint64_t)v76;
        }

        swift_endAccess(v86);
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v61, v27);
        uint64_t v29 = (uint64_t)v83;
        unint64_t v26 = v84;
        uint64_t v28 = (char *)v61;
        if (v84) {
          goto LABEL_7;
        }
      }

uint64_t sub_1005F4260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v76 = a4;
  uint64_t v68 = a1;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v73 = *(void *)(v6 - 8);
  uint64_t v74 = v6;
  __chkstk_darwin(v6);
  int64_t v72 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v71 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v70 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v69 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v65 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v66 = v10;
  uint64_t v67 = (uint64_t)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v75 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  id v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v62 - v19;
  uint64_t v21 = *(int *)(v9 + 20);
  uint64_t v77 = a3;
  uint64_t v22 = a3 + v21;
  uint64_t v23 = *(void (**)(char *))(v15 + 16);
  uint64_t v79 = v22;
  v23((char *)&v62 - v19);
  uint64_t v24 = (void *)(a2 + 56);
  swift_beginAccess(a2 + 56, v82, 0LL, 0LL);
  uint64_t v78 = a2;
  uint64_t v25 = *(void *)(a2 + 56);
  uint64_t v26 = *(void *)(v25 + 16);
  swift_bridgeObjectRetain(v25);
  if (v26 && (unint64_t v27 = sub_10030D124((uint64_t)v20), (v28 & 1) != 0))
  {
    uint64_t v29 = *(void *)(*(void *)(v25 + 56) + 8 * v27);
    swift_retain();
    uint64_t v30 = &off_1009B6000;
  }

  else
  {
    uint64_t v31 = type metadata accessor for InstructionEventCoalescer.BufferRecord(0LL);
    uint64_t v32 = swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
    uint64_t v64 = v14;
    uint64_t v33 = v15;
    uint64_t v63 = v18;
    unint64_t v34 = v24;
    uint64_t v35 = v23;
    uint64_t v36 = v11;
    uint64_t v29 = v32;
    uint64_t v37 = v75;
    Date.init()(v32);
    uint64_t v38 = v37;
    uint64_t v39 = v36;
    uint64_t v23 = v35;
    uint64_t v24 = v34;
    id v18 = v63;
    uint64_t v15 = v33;
    uint64_t v14 = v64;
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))( v29 + OBJC_IVAR____TtCC12searchpartyd25InstructionEventCoalescerP33_3B6F52EF81004A05C130335557FA073612BufferRecord_timestamp,  v38,  v39);
    uint64_t v30 = &off_1009B6000;
    *(void *)(v29
              + OBJC_IVAR____TtCC12searchpartyd25InstructionEventCoalescerP33_3B6F52EF81004A05C130335557FA073612BufferRecord_list) = _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease();
  uint64_t v40 = *(void (**)(char *, uint64_t))(v15 + 8);
  v40(v20, v14);
  sub_1005F4928(v76);
  ((void (*)(char *, uint64_t, uint64_t))v23)(v18, v79, v14);
  swift_beginAccess(v24, aBlock, 33LL, 0LL);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v24);
  v81[0] = *v24;
  *uint64_t v24 = 0x8000000000000000LL;
  sub_10005F140(v29, (uint64_t)v18, isUniquelyReferenced_nonNull_native);
  *uint64_t v24 = v81[0];
  swift_bridgeObjectRelease();
  v40(v18, v14);
  swift_endAccess(aBlock);
  unint64_t v42 = (void *)((char *)v30[306] + v29);
  swift_beginAccess(v42, v81, 0LL, 0LL);
  swift_bridgeObjectRetain(*v42);
  uint64_t v43 = v77;
  char v45 = sub_1005F4D78(v44);
  swift_bridgeObjectRelease();
  uint64_t v46 = v78;
  if ((v45 & 1) != 0)
  {
    uint64_t v76 = *(void *)(v78 + 32);
    uint64_t v47 = v67;
    sub_10001DC4C(v43, v67, type metadata accessor for OwnedBeaconRecord);
    uint64_t v48 = *(unsigned __int8 *)(v65 + 80);
    uint64_t v49 = (v48 + 24) & ~v48;
    unint64_t v50 = (v66 + v49 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v51 = swift_allocObject(&unk_10096A5D8, v50 + 8, v48 | 7);
    *(void *)(v51 + swift_weakDestroy(v0 + 16) = v68;
    sub_10002218C(v47, v51 + v49, type metadata accessor for OwnedBeaconRecord);
    *(void *)(v51 + v50) = v46;
    aBlock[4] = sub_1005F543C;
    aBlock[5] = v51;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    void aBlock[3] = &unk_10096A5F0;
    uint64_t v52 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v53 = swift_retain();
    uint64_t v54 = v69;
    static DispatchQoS.unspecified.getter(v53);
    uint64_t v83 = _swiftEmptyArrayStorage;
    uint64_t v55 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v56 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v57 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v58 = v72;
    uint64_t v59 = v56;
    uint64_t v60 = v74;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v83, v59, v57, v74, v55);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v54, v58, v52);
    _Block_release(v52);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v58, v60);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v54, v71);
    swift_release();
    swift_beginAccess(v24, aBlock, 33LL, 0LL);
    sub_100048CF0(v79);
    swift_endAccess(aBlock);
    swift_release();
  }

  sub_1005F3B04();
  return swift_release();
}

uint64_t sub_1005F4818(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = static os_log_type_t.default.getter(v3);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v5 = qword_100A2B018;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v9 = UUID.uuidString.getter(v8);
  uint64_t v11 = v10;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_1000226F4();
  *(void *)(v7 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v9;
  *(void *)(v7 + 40) = v11;
  os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  v5,  "Publishing InstructionEventCoalescer event for %@",  49LL,  2LL,  v7);
  swift_bridgeObjectRelease();
  return PassthroughSubject.send(_:)(a2);
}

uint64_t sub_1005F4928(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for BeaconKeyManager.PersistenceInstruction(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  Date.init()(v9);
  uint64_t v12 = v1
      + OBJC_IVAR____TtCC12searchpartyd25InstructionEventCoalescerP33_3B6F52EF81004A05C130335557FA073612BufferRecord_timestamp;
  __n128 v13 = swift_beginAccess( v1 + OBJC_IVAR____TtCC12searchpartyd25InstructionEventCoalescerP33_3B6F52EF81004A05C130335557FA073612BufferRecord_timestamp,  v21,  33LL,  0LL);
  (*(void (**)(uint64_t, _BYTE *, uint64_t, __n128))(v8 + 40))(v12, v11, v7, v13);
  swift_endAccess(v21);
  sub_10001DC4C(a1, (uint64_t)v6, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
  uint64_t v14 = (unint64_t *)(v1
                           + OBJC_IVAR____TtCC12searchpartyd25InstructionEventCoalescerP33_3B6F52EF81004A05C130335557FA073612BufferRecord_list);
  swift_beginAccess(v14, v21, 33LL, 0LL);
  unint64_t v15 = *v14;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v14);
  *uint64_t v14 = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v15 = sub_1004C6A98(0, *(void *)(v15 + 16) + 1LL, 1, v15);
    *uint64_t v14 = v15;
  }

  unint64_t v18 = *(void *)(v15 + 16);
  unint64_t v17 = *(void *)(v15 + 24);
  if (v18 >= v17 >> 1)
  {
    unint64_t v15 = sub_1004C6A98(v17 > 1, v18 + 1, 1, v15);
    *uint64_t v14 = v15;
  }

  *(void *)(v15 + swift_weakDestroy(v0 + 16) = v18 + 1;
  sub_10002218C( (uint64_t)v6,  v15 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
  + *(void *)(v4 + 72) * v18,
    type metadata accessor for BeaconKeyManager.PersistenceInstruction);
  return swift_endAccess(v21);
}

uint64_t sub_1005F4AF4()
{
  uint64_t v1 = v0
     + OBJC_IVAR____TtCC12searchpartyd25InstructionEventCoalescerP33_3B6F52EF81004A05C130335557FA073612BufferRecord_timestamp;
  uint64_t v2 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtCC12searchpartyd25InstructionEventCoalescerP33_3B6F52EF81004A05C130335557FA073612BufferRecord_list));
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_1005F4B54()
{
  swift_release(*(void *)(v0 + 40));
  swift_unownedRelease(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  swift_release(*(void *)(v0 + 64));
  return v0;
}

uint64_t sub_1005F4BA0()
{
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

uint64_t type metadata accessor for InstructionEventCoalescer()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd25InstructionEventCoalescer);
}

uint64_t sub_1005F4BE0()
{
  return type metadata accessor for InstructionEventCoalescer.BufferRecord(0LL);
}

uint64_t type metadata accessor for InstructionEventCoalescer.BufferRecord(uint64_t a1)
{
  uint64_t result = qword_1009B69C0;
  if (!qword_1009B69C0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InstructionEventCoalescer.BufferRecord);
  }
  return result;
}

uint64_t sub_1005F4C24(uint64_t a1)
{
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 2LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1005F4C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009B6A88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005F4CE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005F37C0(a1, v2, a2);
}

uint64_t sub_1005F4CEC(uint64_t a1, uint64_t a2)
{
  return sub_1005F39D4(a1, a2, v2);
}

uint64_t sub_1005F4CF4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1005F4D18(uint64_t a1)
{
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16);
  uint64_t v4 = sub_100004AEC(&qword_1009B6AB0);
  return v3(a1, a1 + *(int *)(v4 + 48));
}

uint64_t sub_1005F4D5C(uint64_t a1)
{
  return sub_1005F4260(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1005F4D78(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeaconKeyManager.KeyCriteria(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for BeaconKeyManager.PersistenceInstruction(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v32 - v10;
  type metadata accessor for OwnedBeaconRecord(0LL);
  if ((sub_1006DDC00() & 1) == 0)
  {
    char v19 = sub_1005DAD9C();
    uint64_t v20 = *(void *)(a1 + 16);
    if ((v19 & 1) != 0)
    {
      if (v20 != 2) {
        return 0LL;
      }
      uint64_t v21 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
      uint64_t v22 = *(void *)(v6 + 72);
      swift_bridgeObjectRetain(a1);
      sub_10001DC4C(v21, (uint64_t)v9, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
      int v23 = v9[48];
      sub_100018C68((uint64_t)v9, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
      if (v23 != 1)
      {
        sub_10001DC4C(v21 + v22, (uint64_t)v9, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
        int v30 = v9[48];
        sub_100018C68((uint64_t)v9, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
        swift_bridgeObjectRelease();
        return ((v30 | v23) & 1) != 0;
      }

      sub_10001DC4C(v21 + v22, (uint64_t)v9, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
      char v24 = v9[48];
      sub_100018C68((uint64_t)v9, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
      if ((v24 & 1) != 0) {
        goto LABEL_13;
      }
    }

    else
    {
      if (v20 != 1) {
        return 0LL;
      }
      uint64_t v25 = *(int *)(v2 + 20);
      if (*(_BYTE *)(a1
                    + *(int *)(v5 + 24)
                    + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
                    + v25))
      {
        if (*(_BYTE *)(a1
                      + *(int *)(v5 + 24)
                      + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
                      + v25) == 1)
        {
          unint64_t v26 = 0xE900000000000079LL;
          uint64_t v27 = 0x7261646E6F636553LL;
        }

        else
        {
          unint64_t v26 = 0xEF736E6F69746163LL;
          uint64_t v27 = 0x6F4C657275636553LL;
        }

        char v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v26, 0x7972616D697250LL, 0xE700000000000000LL, 0LL);
        swift_bridgeObjectRelease();
        return (v29 & 1) != 0;
      }
    }

    swift_bridgeObjectRelease();
    return 1LL;
  }

  if (*(void *)(a1 + 16) != 2LL) {
    return 0LL;
  }
  uint64_t v12 = (uint64_t)&v11[*(int *)(v5 + 24)];
  uint64_t v13 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  uint64_t v14 = *(void *)(v6 + 72);
  swift_bridgeObjectRetain(a1);
  sub_10001DC4C(v13, (uint64_t)v11, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
  sub_10001DC4C(v12, (uint64_t)v4, type metadata accessor for BeaconKeyManager.KeyCriteria);
  sub_100018C68((uint64_t)v11, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
  int v15 = v4[*(int *)(v2 + 20)];
  sub_100018C68((uint64_t)v4, type metadata accessor for BeaconKeyManager.KeyCriteria);
  char v16 = 0;
  if (v15)
  {
    if (v15 != 1) {
      goto LABEL_7;
    }
    sub_10001DC4C(v13 + v14, (uint64_t)v11, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
    sub_10001DC4C(v12, (uint64_t)v4, type metadata accessor for BeaconKeyManager.KeyCriteria);
    sub_100018C68((uint64_t)v11, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
    int v17 = v4[*(int *)(v2 + 20)];
    sub_100018C68((uint64_t)v4, type metadata accessor for BeaconKeyManager.KeyCriteria);
    char v16 = 1;
    if (v17)
    {
      if (v17 != 1)
      {
LABEL_7:
        int v18 = 0;
        if ((v16 & 1) != 0) {
          goto LABEL_22;
        }
        goto LABEL_20;
      }

uint64_t sub_1005F5188()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  char v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  int v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8, v3 | 7);
}

uint64_t sub_1005F543C()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8) + 80LL);
  return sub_1005F4818(*(void *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_1005F5480(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1005F5490(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1005F5498(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

ValueMetadata *type metadata accessor for MaskedIdentifier()
{
  return &type metadata for MaskedIdentifier;
}

uint64_t sub_1005F54CC(char *a1, char *a2)
{
  return sub_100306F94(*a1, *a2);
}

Swift::Int sub_1005F54D8()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  if (v1) {
    unint64_t v2 = 0xD000000000000014LL;
  }
  else {
    unint64_t v2 = 0x6E776F6E6B6E75LL;
  }
  if (v1) {
    unint64_t v3 = 0x800000010084FFF0LL;
  }
  else {
    unint64_t v3 = 0xE700000000000000LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1005F555C(uint64_t a1)
{
  if (*v1) {
    unint64_t v2 = 0xD000000000000014LL;
  }
  else {
    unint64_t v2 = 0x6E776F6E6B6E75LL;
  }
  if (*v1) {
    unint64_t v3 = 0x800000010084FFF0LL;
  }
  else {
    unint64_t v3 = 0xE700000000000000LL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1005F55BC(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2) {
    unint64_t v3 = 0xD000000000000014LL;
  }
  else {
    unint64_t v3 = 0x6E776F6E6B6E75LL;
  }
  if (v2) {
    unint64_t v4 = 0x800000010084FFF0LL;
  }
  else {
    unint64_t v4 = 0xE700000000000000LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1005F563C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v3._countAndFlagsBits = *a1;
  unint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100936870, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void sub_1005F5698(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0x6E776F6E6B6E75LL;
  if (*v1) {
    unint64_t v2 = 0xD000000000000014LL;
  }
  unint64_t v3 = 0x800000010084FFF0LL;
  if (!*v1) {
    unint64_t v3 = 0xE700000000000000LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_1005F56DC(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1005F56E4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1005F71C8();
  return UnknownRawRepresentable<>.init(from:)(a1, a2, v4, &protocol witness table for String);
}

uint64_t sub_1005F5738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1005F6E4C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1005F5784()
{
  if (*v0) {
    return 0xD000000000000014LL;
  }
  else {
    return 0x6E776F6E6B6E75LL;
  }
}

uint64_t sub_1005F57C4@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100936870, v3);
  uint64_t result = swift_bridgeObjectRelease(object);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_1005F5824(uint64_t a1)
{
  unint64_t v2 = sub_100469408();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005F584C(uint64_t a1)
{
  unint64_t v2 = sub_100469408();
  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_1005F5874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v62 = a3;
  uint64_t v63 = a1;
  uint64_t v10 = sub_100004AEC(&qword_1009A6598);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v58 - v14;
  uint64_t v16 = type metadata accessor for SystemVersionNumber(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v58 - v21;
  if (*(_BYTE *)v6 != 1) {
    return 0LL;
  }
  uint64_t v61 = a5;
  type metadata accessor for FeatureSupportMatrix(0LL);
  uint64_t v23 = sub_100004AEC(&qword_1009B6AD0);
  uint64_t v24 = CustomCodableKeyDictionary.wrappedValue.getter(v23);
  if (!v24)
  {
LABEL_8:
    uint64_t v29 = *(void *)(v6 + 8);
    if (*(void *)(v29 + 16))
    {
      swift_bridgeObjectRetain(a2);
      uint64_t v30 = v63;
      uint64_t v31 = sub_10030CF14(v63, a2);
      if ((v32 & 1) != 0)
      {
        uint64_t v33 = *(void *)(*(void *)(v29 + 56) + 8 * v31);
        swift_bridgeObjectRelease();
        if (v33 <= v62)
        {
          uint64_t v34 = *(void *)(v6 + 24);
          if (!*(void *)(v34 + 16))
          {
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1LL, 1LL, v16);
LABEL_18:
            sub_1005F66E0((uint64_t)v15);
            return 0LL;
          }

          swift_bridgeObjectRetain(a2);
          uint64_t v35 = sub_10030CF14(v30, a2);
          if ((v36 & 1) != 0)
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))( v15,  *(void *)(v34 + 56) + *(void *)(v17 + 72) * v35,  v16);
            uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
            uint64_t v38 = v15;
            uint64_t v39 = 0LL;
          }

          else
          {
            uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
            uint64_t v38 = v15;
            uint64_t v39 = 1LL;
          }

          uint64_t v60 = v37;
          v37(v38, v39, 1LL, v16);
          uint64_t v40 = v61;
          swift_bridgeObjectRelease();
          int64_t v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
          if (v41(v15, 1LL, v16) == 1) {
            goto LABEL_18;
          }
          uint64_t v59 = v41;
          unint64_t v42 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
          v42(v22, v15, v16);
          uint64_t v43 = sub_1005F713C(&qword_1009B5558, (uint64_t)&protocol conformance descriptor for SystemVersionNumber);
          if ((dispatch thunk of static Comparable.< infix(_:_:)(v40, v22, v16, v43) & 1) != 0)
          {
LABEL_20:
            (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v16);
            return 0LL;
          }

          uint64_t v58 = v42;
          uint64_t v45 = *(void *)(v6 + 16);
          uint64_t v46 = v59;
          if (v45 && *(void *)(v45 + 16))
          {
            swift_bridgeObjectRetain(a2);
            uint64_t v47 = sub_10030CF14(v63, a2);
            if ((v48 & 1) != 0)
            {
              uint64_t v49 = *(void *)(*(void *)(v45 + 56) + 8 * v47);
              swift_bridgeObjectRelease();
              if (v49 < v62) {
                goto LABEL_20;
              }
            }

            else
            {
              swift_bridgeObjectRelease();
            }
          }

          uint64_t v50 = *(void *)(v6 + 32);
          if (v50 && *(void *)(v50 + 16))
          {
            swift_bridgeObjectRetain(a2);
            uint64_t v51 = sub_10030CF14(v63, a2);
            if ((v52 & 1) != 0)
            {
              (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))( v13,  *(void *)(v50 + 56) + *(void *)(v17 + 72) * v51,  v16);
              uint64_t v53 = 0LL;
            }

            else
            {
              uint64_t v53 = 1LL;
            }

            uint64_t v54 = v61;
            uint64_t v55 = v58;
            v60(v13, v53, 1LL, v16);
            swift_bridgeObjectRelease();
            if (v46(v13, 1LL, v16) != 1)
            {
              v55(v20, v13, v16);
              char v56 = dispatch thunk of static Comparable.< infix(_:_:)(v20, v54, v16, v43);
              uint64_t v57 = *(void (**)(char *, uint64_t))(v17 + 8);
              v57(v20, v16);
              v57(v22, v16);
              return (v56 & 1) == 0;
            }
          }

          else
          {
            v60(v13, 1LL, 1LL, v16);
          }

          (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v16);
          sub_1005F66E0((uint64_t)v13);
          return 1LL;
        }
      }

      else
      {
        swift_bridgeObjectRelease();
      }
    }

    return 0LL;
  }

  uint64_t v25 = v24;
  if (!*(void *)(v24 + 16))
  {
LABEL_7:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }

  swift_bridgeObjectRetain(a2);
  unint64_t v26 = sub_10030D21C(v63, a2, v62, a4);
  if ((v27 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }

  uint64_t v28 = *(unsigned __int8 *)(*(void *)(v25 + 56) + v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v28;
}

uint64_t sub_1005F5CD4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1005F5D08 + 4 * byte_10080D020[a1]))( 0x64656C62616E65LL,  0xE700000000000000LL);
}

unint64_t sub_1005F5D08()
{
  return 0xD000000000000015LL;
}

unint64_t sub_1005F5D30()
{
  return 0xD000000000000016LL;
}

uint64_t sub_1005F5D80(void *a1)
{
  Swift::String v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B6BE0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1005F6ED8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for FeatureSupportMatrix.CodingKeys,  &type metadata for FeatureSupportMatrix.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *(unsigned __int8 *)v3;
  LOBYTE(v2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v22, v5);
  if (!v2)
  {
    uint64_t v22 = v3[1];
    HIBYTE(v21) = 1;
    uint64_t v13 = sub_100004AEC(&qword_1009B6BB0);
    uint64_t v14 = sub_1005F705C( &qword_1009B6BE8,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol witness table for Int,  (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, (char *)&v21 + 7, v5, v13, v14);
    uint64_t v22 = v3[2];
    HIBYTE(v21) = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v22, (char *)&v21 + 7, v5, v13, v14);
    uint64_t v22 = v3[3];
    HIBYTE(v21) = 3;
    uint64_t v15 = sub_100004AEC(&qword_1009B6BC0);
    unint64_t v16 = sub_1005F70C0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, (char *)&v21 + 7, v5, v15, v16);
    uint64_t v22 = v3[4];
    HIBYTE(v21) = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v22, (char *)&v21 + 7, v5, v15, v16);
    uint64_t v17 = (char *)v3 + *(int *)(type metadata accessor for FeatureSupportMatrix(0LL) + 36);
    LOBYTE(v2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 5;
    uint64_t v18 = sub_100004AEC(&qword_1009B6AD0);
    unint64_t v19 = sub_1005F717C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v22, v5, v18, v19);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1005F5FF0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v3 = sub_100004AEC(&qword_1009B6AD0);
  uint64_t v43 = *(void *)(v3 - 8);
  uint64_t v44 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = sub_100004AEC(&qword_1009B6BA0);
  uint64_t v6 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for FeatureSupportMatrix(0LL);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *(int *)(v10 + 36);
  uint64_t v45 = v12;
  uint64_t v14 = &v12[v13];
  unint64_t v15 = sub_1001D6068();
  unint64_t v16 = sub_1001D60AC();
  unint64_t v42 = v14;
  CustomCodableKeyDictionary.init(wrappedValue:)( 0LL,  &type metadata for FeatureSupportMatrixProductType,  &type metadata for Bool,  v15,  v16,  &protocol witness table for Bool,  &protocol witness table for Bool);
  uint64_t v18 = a1[3];
  uint64_t v17 = a1[4];
  int64_t v41 = a1;
  sub_100012ED8(a1, v18);
  unint64_t v19 = sub_1005F6ED8();
  uint64_t v20 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for FeatureSupportMatrix.CodingKeys,  &type metadata for FeatureSupportMatrix.CodingKeys,  v19,  v18,  v17);
  if (v20)
  {
    uint64_t v25 = v43;
    uint64_t v24 = v44;
    unint64_t v26 = v42;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v41);
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v26, v24);
  }

  else
  {
    unint64_t v37 = v16;
    unint64_t v38 = v15;
    uint64_t v21 = v6;
    uint64_t v46 = v5;
    LOBYTE(v48) = 0;
    uint64_t v22 = v40;
    char v23 = KeyedDecodingContainer.decode(_:forKey:)(&v48, v40);
    char v27 = v45;
    *uint64_t v45 = v23 & 1;
    uint64_t v28 = sub_100004AEC(&qword_1009B6BB0);
    char v47 = 1;
    uint64_t v29 = sub_1005F705C( &qword_1009B6BB8,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol witness table for Int,  (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v48, v28, &v47, v22, v28, v29);
    v27[1] = v48;
    char v47 = 2;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v28, &v47, v22, v28, v29);
    uint64_t v30 = v21;
    v27[2] = v48;
    uint64_t v31 = sub_100004AEC(&qword_1009B6BC0);
    char v47 = 3;
    unint64_t v32 = sub_1005F6F1C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v48, v31, &v47, v22, v31, v32);
    v27[3] = v48;
    char v47 = 4;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v31, &v47, v22, v31, v32);
    v27[4] = v48;
    LOBYTE(v48) = 5;
    unint64_t v33 = sub_1005F6F98();
    uint64_t v34 = v46;
    KeyedDecodingContainer.decode<A, B>(_:forKey:)( &v48,  v22,  &type metadata for FeatureSupportMatrixProductType,  &type metadata for Bool,  v38,  v33,  v37,  &protocol witness table for Bool,  &protocol witness table for Bool);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v22);
    (*(void (**)(char *, char *, uint64_t))(v43 + 40))(v42, v34, v44);
    sub_1005F6FDC((uint64_t)v27, v39);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v41);
    return sub_1005F7020((uint64_t)v27);
  }

uint64_t sub_1005F649C()
{
  return sub_1005F5CD4(*v0);
}

uint64_t sub_1005F64A4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1005F73B0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005F64C8(uint64_t a1)
{
  unint64_t v2 = sub_1005F6ED8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005F64F0(uint64_t a1)
{
  unint64_t v2 = sub_1005F6ED8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005F6518@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005F5FF0(a1, a2);
}

uint64_t sub_1005F652C(void *a1)
{
  return sub_1005F5D80(a1);
}

uint64_t sub_1005F6544(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a2[2];
  if (v4)
  {
    if (!v5) {
      return 0LL;
    }
    swift_bridgeObjectRetain(a2[2]);
    swift_bridgeObjectRetain(v4);
    char v7 = sub_1001D3DFC(v6, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0) {
      return 0LL;
    }
  }

  else if (v5)
  {
    return 0LL;
  }

  if ((sub_1001D3F90(a1[3], a2[3]) & 1) != 0)
  {
    uint64_t v8 = a1[4];
    uint64_t v9 = a2[4];
    if (v8)
    {
      if (v9)
      {
        swift_bridgeObjectRetain(a2[4]);
        swift_bridgeObjectRetain(v8);
        char v11 = sub_1001D3F90(v10, v9);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v11 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

    else if (!v9)
    {
LABEL_12:
      uint64_t v12 = *(int *)(type metadata accessor for FeatureSupportMatrix(0LL) + 36);
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      unint64_t v15 = sub_1001D6068();
      unint64_t v16 = sub_1001D60AC();
      return static CustomCodableKeyDictionary<>.== infix(_:_:)( v13,  v14,  &type metadata for FeatureSupportMatrixProductType,  &type metadata for Bool,  v15,  v16,  &protocol witness table for Bool,  &protocol witness table for Bool,  &protocol witness table for Bool) & 1;
    }
  }

  return 0LL;
}

uint64_t type metadata accessor for FeatureSupportMatrix(uint64_t a1)
{
  uint64_t result = qword_1009B6B30;
  if (!qword_1009B6B30) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FeatureSupportMatrix);
  }
  return result;
}

uint64_t sub_1005F66E0(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009A6598);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t *sub_1005F6720(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v13 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain();
  }

  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    uint64_t v5 = a2[1];
    uint64_t v6 = a2[2];
    v3[1] = v5;
    v3[2] = v6;
    uint64_t v7 = a2[3];
    uint64_t v8 = a2[4];
    uint64_t v9 = *(int *)(a3 + 36);
    uint64_t v10 = (char *)v3 + v9;
    char v11 = (char *)a2 + v9;
    v3[3] = v7;
    v3[4] = v8;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    uint64_t v12 = sub_100004AEC(&qword_1009B6AD0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
  }

  return v3;
}

uint64_t sub_1005F67E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = sub_100004AEC(&qword_1009B6AD0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t sub_1005F6844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v7;
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  uint64_t v11 = sub_100004AEC(&qword_1009B6AD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
  return a1;
}

uint64_t sub_1005F68D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 32);
  *(void *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 36);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_100004AEC(&qword_1009B6AD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  return a1;
}

uint64_t sub_1005F69A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(void *)(a2 + 32);
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_100004AEC(&qword_1009B6AD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_1005F6A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_100004AEC(&qword_1009B6AD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40LL))(v7, v8, v9);
  return a1;
}

uint64_t sub_1005F6AC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005F6ACC);
}

uint64_t sub_1005F6ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_100004AEC(&qword_1009B6AD0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 36),  a2,  v8);
  }

uint64_t sub_1005F6B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005F6B58);
}

uint64_t sub_1005F6B58(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_100004AEC(&qword_1009B6AD0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 36),  a2,  a2,  v7);
  }

  return result;
}

void sub_1005F6BD0(uint64_t a1)
{
  v4[0] = &unk_10080D058;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  void v4[2] = &unk_10080D070;
  v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[4] = &unk_10080D070;
  sub_1005F6C60(319LL);
  if (v3 <= 0x3F)
  {
    v4[5] = *(void *)(v2 - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
  }

void sub_1005F6C60(uint64_t a1)
{
  if (!qword_1009B6B40)
  {
    v4[0] = &type metadata for FeatureSupportMatrixProductType;
    v4[1] = &type metadata for Bool;
    void v4[2] = sub_1001D6068();
    v4[3] = sub_1001D60AC();
    v4[4] = &protocol witness table for Bool;
    v4[5] = &protocol witness table for Bool;
    unint64_t v2 = type metadata accessor for CustomCodableKeyDictionary(a1, v4);
    if (!v3) {
      atomic_store(v2, (unint64_t *)&qword_1009B6B40);
    }
  }

uint64_t storeEnumTagSinglePayload for ServerConfigurableFeature(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1005F6D38 + 4 * byte_10080D02B[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1005F6D6C + 4 * byte_10080D026[v4]))();
}

uint64_t sub_1005F6D6C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005F6D74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005F6D7CLL);
  }
  return result;
}

uint64_t sub_1005F6D88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005F6D90LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1005F6D94(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005F6D9C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ServerConfigurableFeature()
{
  return &type metadata for ServerConfigurableFeature;
}

unint64_t sub_1005F6DBC()
{
  unint64_t result = qword_1009B6B80;
  if (!qword_1009B6B80)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080D0AC, &type metadata for ServerConfigurableFeature);
    atomic_store(result, (unint64_t *)&qword_1009B6B80);
  }

  return result;
}

unint64_t sub_1005F6E04()
{
  unint64_t result = qword_1009B6B88;
  if (!qword_1009B6B88)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080D0D4, &type metadata for ServerConfigurableFeature);
    atomic_store(result, (unint64_t *)&qword_1009B6B88);
  }

  return result;
}

unint64_t sub_1005F6E4C()
{
  unint64_t result = qword_1009B6B90;
  if (!qword_1009B6B90)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080D1CC, &type metadata for ServerConfigurableFeature);
    atomic_store(result, (unint64_t *)&qword_1009B6B90);
  }

  return result;
}

unint64_t sub_1005F6E94()
{
  unint64_t result = qword_1009B6B98;
  if (!qword_1009B6B98)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080D244, &type metadata for ServerConfigurableFeature);
    atomic_store(result, (unint64_t *)&qword_1009B6B98);
  }

  return result;
}

unint64_t sub_1005F6ED8()
{
  unint64_t result = qword_1009B6BA8;
  if (!qword_1009B6BA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080D3A8, &type metadata for FeatureSupportMatrix.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B6BA8);
  }

  return result;
}

unint64_t sub_1005F6F1C()
{
  unint64_t result = qword_1009B6BC8;
  if (!qword_1009B6BC8)
  {
    uint64_t v1 = sub_100004B78(&qword_1009B6BC0);
    sub_1005F713C(&qword_1009B6BD0, (uint64_t)&protocol conformance descriptor for SystemVersionNumber);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1009B6BC8);
  }

  return result;
}

unint64_t sub_1005F6F98()
{
  unint64_t result = qword_1009B6BD8;
  if (!qword_1009B6BD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FEE00, &type metadata for FeatureSupportMatrixProductType);
    atomic_store(result, (unint64_t *)&qword_1009B6BD8);
  }

  return result;
}

uint64_t sub_1005F6FDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FeatureSupportMatrix(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005F7020(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FeatureSupportMatrix(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1005F705C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_100004B78(&qword_1009B6BB0);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1005F70C0()
{
  unint64_t result = qword_1009B6BF0;
  if (!qword_1009B6BF0)
  {
    uint64_t v1 = sub_100004B78(&qword_1009B6BC0);
    sub_1005F713C(&qword_1009B6BF8, (uint64_t)&protocol conformance descriptor for SystemVersionNumber);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1009B6BF0);
  }

  return result;
}

uint64_t sub_1005F713C(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for SystemVersionNumber(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1005F717C()
{
  unint64_t result = qword_1009B6C00;
  if (!qword_1009B6C00)
  {
    uint64_t v1 = sub_100004B78(&qword_1009B6AD0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CustomCodableKeyDictionary<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1009B6C00);
  }

  return result;
}

unint64_t sub_1005F71C8()
{
  unint64_t result = qword_1009B6C08;
  if (!qword_1009B6C08)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080D19C, &type metadata for ServerConfigurableFeature);
    atomic_store(result, (unint64_t *)&qword_1009B6C08);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for FeatureSupportMatrix.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_1005F7258 + 4 * byte_10080D035[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1005F728C + 4 * byte_10080D030[v4]))();
}

uint64_t sub_1005F728C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005F7294(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005F729CLL);
  }
  return result;
}

uint64_t sub_1005F72A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005F72B0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1005F72B4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005F72BC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FeatureSupportMatrix.CodingKeys()
{
  return &type metadata for FeatureSupportMatrix.CodingKeys;
}

unint64_t sub_1005F72DC()
{
  unint64_t result = qword_1009B6C10;
  if (!qword_1009B6C10)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080D380, &type metadata for FeatureSupportMatrix.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B6C10);
  }

  return result;
}

unint64_t sub_1005F7324()
{
  unint64_t result = qword_1009B6C18;
  if (!qword_1009B6C18)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080D2F0, &type metadata for FeatureSupportMatrix.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B6C18);
  }

  return result;
}

unint64_t sub_1005F736C()
{
  unint64_t result = qword_1009B6C20;
  if (!qword_1009B6C20)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080D318, &type metadata for FeatureSupportMatrix.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B6C20);
  }

  return result;
}

uint64_t sub_1005F73B0(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x64656C62616E65LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v5 = 0xE700000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64656C62616E65LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v7 = 0x800000010086AC20LL;
    if (a2 == 0x800000010086AC20LL) {
      goto LABEL_13;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x800000010086AC20LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v8 = 0x800000010086AC40LL;
    if (a2 == 0x800000010086AC40LL) {
      goto LABEL_18;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x800000010086AC40LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_18:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if (a1 == 0xD000000000000016LL)
  {
    unint64_t v9 = 0x800000010086AC60LL;
    if (a2 == 0x800000010086AC60LL) {
      goto LABEL_23;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016LL, 0x800000010086AC60LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
LABEL_23:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if (a1 == 0xD000000000000016LL)
  {
    unint64_t v10 = 0x800000010086AC80LL;
    if (a2 == 0x800000010086AC80LL) {
      goto LABEL_28;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016LL, 0x800000010086AC80LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_28:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if (a1 == 0xD000000000000013LL && a2 == 0x800000010086ACA0LL)
  {
    swift_bridgeObjectRelease(0x800000010086ACA0LL);
    return 5LL;
  }

  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x800000010086ACA0LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

uint64_t *sub_1005F75F0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v8);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }

  return a1;
}

uint64_t sub_1005F7678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1005F76D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1005F7730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1005F778C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005F7798);
}

uint64_t sub_1005F7798(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t sub_1005F77D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005F77E0);
}

uint64_t sub_1005F77E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for SecureLocationsKeyUpdateAckEnvelope(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009B6C80, (uint64_t)&nominal type descriptor for SecureLocationsKeyUpdateAckEnvelope);
}

uint64_t sub_1005F7834(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *sub_1005F78A8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    unint64_t v10 = (uint64_t *)((char *)a1 + v8);
    char v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *unint64_t v10 = *v11;
    v10[1] = v12;
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
    uint64_t v13 = a3[7];
    uint64_t v14 = (uint64_t *)((char *)a1 + v13);
    unint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = *v15;
    unint64_t v17 = v15[1];
    swift_bridgeObjectRetain(v12);
    sub_10001736C(v16, v17);
    *uint64_t v14 = v16;
    v14[1] = v17;
    uint64_t v18 = a3[8];
    unint64_t v19 = (uint64_t *)((char *)a1 + v18);
    uint64_t v20 = (uint64_t *)((char *)a2 + v18);
    uint64_t v21 = *v20;
    unint64_t v22 = v20[1];
    sub_10001736C(*v20, v22);
    uint64_t *v19 = v21;
    v19[1] = v22;
  }

  return a1;
}

uint64_t sub_1005F798C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  swift_bridgeObjectRelease();
  sub_100016F9C(*(void *)(a1 + *(int *)(a2 + 28)), *(void *)(a1 + *(int *)(a2 + 28) + 8));
  return sub_100016F9C(*(void *)(a1 + *(int *)(a2 + 32)), *(void *)(a1 + *(int *)(a2 + 32) + 8));
}

uint64_t sub_1005F79F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  unint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  void *v9 = *v10;
  v9[1] = v11;
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v12 = a3[7];
  uint64_t v13 = (uint64_t *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  swift_bridgeObjectRetain(v11);
  sub_10001736C(v15, v16);
  *uint64_t v13 = v15;
  v13[1] = v16;
  uint64_t v17 = a3[8];
  uint64_t v18 = (uint64_t *)(a1 + v17);
  unint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  sub_10001736C(*v19, v21);
  uint64_t *v18 = v20;
  v18[1] = v21;
  return a1;
}

uint64_t sub_1005F7AAC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  uint64_t v10 = v9[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v11 = a3[7];
  uint64_t v12 = (uint64_t *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  sub_10001736C(*v13, v15);
  uint64_t v16 = *v12;
  unint64_t v17 = v12[1];
  uint64_t *v12 = v14;
  v12[1] = v15;
  sub_100016F9C(v16, v17);
  uint64_t v18 = a3[8];
  unint64_t v19 = (uint64_t *)(a1 + v18);
  uint64_t v20 = (uint64_t *)(a2 + v18);
  uint64_t v21 = *v20;
  unint64_t v22 = v20[1];
  sub_10001736C(*v20, v22);
  uint64_t v23 = *v19;
  unint64_t v24 = v19[1];
  uint64_t *v19 = v21;
  v19[1] = v22;
  sub_100016F9C(v23, v24);
  return a1;
}

uint64_t sub_1005F7B8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(void *)(a1 + v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  return a1;
}

uint64_t sub_1005F7C04(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v13 = *(void *)(a1 + v12);
  unint64_t v14 = *(void *)(a1 + v12 + 8);
  *(_OWORD *)(a1 + v1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(_OWORD *)(a2 + v12);
  sub_100016F9C(v13, v14);
  uint64_t v15 = a3[8];
  uint64_t v16 = *(void *)(a1 + v15);
  unint64_t v17 = *(void *)(a1 + v15 + 8);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  sub_100016F9C(v16, v17);
  return a1;
}

uint64_t sub_1005F7CA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005F7CB4);
}

uint64_t sub_1005F7CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_1005F7D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005F7D40);
}

uint64_t sub_1005F7D40(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for SecureLocationsKeyUpdateEnvelope(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009B6D10, (uint64_t)&nominal type descriptor for SecureLocationsKeyUpdateEnvelope);
}

uint64_t sub_1005F7DD0(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_10080D478;
    void v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = &unk_10080D490;
    v4[4] = &unk_10080D490;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1005F7E5C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1005F7E94 + 4 * byte_10080D400[a1]))( 0x696669746E656469LL,  0xEA00000000007265LL);
}

unint64_t sub_1005F7E94()
{
  return 0xD000000000000010LL;
}

uint64_t sub_1005F7EB0()
{
  return 0x7865646E69LL;
}

uint64_t sub_1005F7EC4()
{
  return 0x4B65746176697270LL;
}

unint64_t sub_1005F7EDC()
{
  return 0xD000000000000013LL;
}

uint64_t sub_1005F7EFC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B6D58);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1005F8A34();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SecureLocationsKeyUpdateEnvelope.CodingKeys,  &type metadata for SecureLocationsKeyUpdateEnvelope.CodingKeys,  v11,  v9,  v10);
  LOBYTE(v2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = sub_1005DAB68((unint64_t *)&unk_10099D710, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v22, v5, v12, v13);
  if (!v2)
  {
    updated = (int *)type metadata accessor for SecureLocationsKeyUpdateEnvelope(0LL);
    uint64_t v15 = (uint64_t *)(v3 + updated[5]);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    LOBYTE(v2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v22, v5);
    *(void *)&__int128 v22 = *(void *)(v3 + updated[6]);
    char v23 = 2;
    unint64_t v18 = sub_100590F10();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v23, v5, &type metadata for SecureLocationsIndex, v18);
    __int128 v22 = *(_OWORD *)(v3 + updated[7]);
    char v23 = 3;
    unint64_t v19 = sub_10017EB68();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v23, v5, &type metadata for PrivateKey, v19);
    __int128 v22 = *(_OWORD *)(v3 + updated[8]);
    char v23 = 4;
    unint64_t v20 = sub_10017F344();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v23, v5, &type metadata for HashedAdvertisement, v20);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1005F8118@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v25 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v27 = (uint64_t *)((char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v26 = sub_100004AEC(&qword_1009B6D68);
  __chkstk_darwin(v26);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  updated = (int *)type metadata accessor for SecureLocationsKeyUpdateEnvelope(0LL);
  __chkstk_darwin(updated);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v11);
  unint64_t v12 = sub_1005F8A34();
  uint64_t v28 = v6;
  uint64_t v13 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SecureLocationsKeyUpdateEnvelope.CodingKeys,  &type metadata for SecureLocationsKeyUpdateEnvelope.CodingKeys,  v12,  v11,  v10);
  if (v13) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v29 = a1;
  uint64_t v14 = v25;
  LOBYTE(v30) = 0;
  uint64_t v15 = sub_1005DAB68((unint64_t *)&qword_10099D6F0, (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v16 = v26;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v27, v3, &v30, v26, v3, v15);
  (*(void (**)(char *, void *, uint64_t))(v14 + 32))(v9, v27, v3);
  LOBYTE(v30) = 1;
  uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v16);
  unint64_t v18 = (uint64_t *)&v9[updated[5]];
  uint64_t *v18 = v17;
  v18[1] = v19;
  char v31 = 2;
  unint64_t v20 = sub_100590ECC();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v30,  &type metadata for SecureLocationsIndex,  &v31,  v16,  &type metadata for SecureLocationsIndex,  v20);
  *(void *)&v9[updated[6]] = v30;
  char v31 = 3;
  unint64_t v21 = sub_10017EB24();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v30,  &type metadata for PrivateKey,  &v31,  v16,  &type metadata for PrivateKey,  v21);
  *(_OWORD *)&v9[updated[7]] = v30;
  char v31 = 4;
  unint64_t v22 = sub_10017F300();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v30,  &type metadata for HashedAdvertisement,  &v31,  v16,  &type metadata for HashedAdvertisement,  v22);
  MEMORY[8](v28, v16);
  *(_OWORD *)&v9[updated[8]] = v30;
  sub_10001DC4C((uint64_t)v9, v24, type metadata accessor for SecureLocationsKeyUpdateEnvelope);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v29);
  return sub_100018C68((uint64_t)v9, type metadata accessor for SecureLocationsKeyUpdateEnvelope);
}

uint64_t sub_1005F84C8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B6D80);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1005F8A78();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SecureLocationsKeyUpdateAckEnvelope.CodingKeys,  &type metadata for SecureLocationsKeyUpdateAckEnvelope.CodingKeys,  v11,  v9,  v10);
  char v19 = 0;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = sub_1005DAB68((unint64_t *)&unk_10099D710, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v19, v5, v12, v13);
  if (!v2)
  {
    uint64_t v18 = *(void *)(v3 + *(int *)(type metadata accessor for SecureLocationsKeyUpdateAckEnvelope(0LL) + 20));
    char v17 = 1;
    unint64_t v14 = sub_100590F10();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v5, &type metadata for SecureLocationsIndex, v14);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1005F8628@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v28 = type metadata accessor for UUID(0LL);
  uint64_t v25 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v26 = (void **)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v27 = sub_100004AEC(&qword_1009B6D70);
  uint64_t v5 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t updated = type metadata accessor for SecureLocationsKeyUpdateAckEnvelope(0LL);
  __chkstk_darwin(updated);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v11 = a1[4];
  sub_100012ED8(a1, v12);
  unint64_t v13 = sub_1005F8A78();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SecureLocationsKeyUpdateAckEnvelope.CodingKeys,  &type metadata for SecureLocationsKeyUpdateAckEnvelope.CodingKeys,  v13,  v12,  v11);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  unint64_t v22 = a1;
  uint64_t v23 = v5;
  uint64_t v14 = (uint64_t)v10;
  uint64_t v15 = v25;
  char v31 = 0;
  uint64_t v16 = sub_1005DAB68((unint64_t *)&qword_10099D6F0, (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v18 = v26;
  uint64_t v17 = v27;
  uint64_t v19 = v28;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v26, v28, &v31, v27, v28, v16);
  (*(void (**)(uint64_t, void *, uint64_t))(v15 + 32))(v14, v18, v19);
  char v30 = 1;
  unint64_t v20 = sub_100590ECC();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v29,  &type metadata for SecureLocationsIndex,  &v30,  v17,  &type metadata for SecureLocationsIndex,  v20);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v17);
  *(void *)(v14 + *(int *)(updated + 20)) = v29;
  sub_10001DC4C(v14, v24, type metadata accessor for SecureLocationsKeyUpdateAckEnvelope);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v22);
  return sub_100018C68(v14, type metadata accessor for SecureLocationsKeyUpdateAckEnvelope);
}

uint64_t sub_1005F88B8()
{
  return sub_1005F7E5C(*v0);
}

uint64_t sub_1005F88C0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1005F8E04(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005F88E4(uint64_t a1)
{
  unint64_t v2 = sub_1005F8A34();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005F890C(uint64_t a1)
{
  unint64_t v2 = sub_1005F8A34();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005F8934@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005F8118(a1, a2);
}

uint64_t sub_1005F8948(void *a1)
{
  return sub_1005F7EFC(a1);
}

uint64_t sub_1005F895C()
{
  if (*v0) {
    return 0x7865646E69LL;
  }
  else {
    return 0x696669746E656469LL;
  }
}

uint64_t sub_1005F8998@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1005F9014(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005F89BC(uint64_t a1)
{
  unint64_t v2 = sub_1005F8A78();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005F89E4(uint64_t a1)
{
  unint64_t v2 = sub_1005F8A78();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005F8A0C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005F8628(a1, a2);
}

uint64_t sub_1005F8A20(void *a1)
{
  return sub_1005F84C8(a1);
}

unint64_t sub_1005F8A34()
{
  unint64_t result = qword_1009B6D60;
  if (!qword_1009B6D60)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080D714, &type metadata for SecureLocationsKeyUpdateEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B6D60);
  }

  return result;
}

unint64_t sub_1005F8A78()
{
  unint64_t result = qword_1009B6D78;
  if (!qword_1009B6D78)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080D6C4, &type metadata for SecureLocationsKeyUpdateAckEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B6D78);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for SecureLocationsKeyUpdateAckEnvelope.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1005F8B08 + 4 * byte_10080D40A[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1005F8B3C + 4 * byte_10080D405[v4]))();
}

uint64_t sub_1005F8B3C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005F8B44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005F8B4CLL);
  }
  return result;
}

uint64_t sub_1005F8B58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005F8B60LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1005F8B64(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005F8B6C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsKeyUpdateAckEnvelope.CodingKeys()
{
  return &type metadata for SecureLocationsKeyUpdateAckEnvelope.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SecureLocationsKeyUpdateEnvelope.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1005F8BD4 + 4 * byte_10080D414[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1005F8C08 + 4 * byte_10080D40F[v4]))();
}

uint64_t sub_1005F8C08(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005F8C10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005F8C18LL);
  }
  return result;
}

uint64_t sub_1005F8C24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005F8C2CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1005F8C30(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005F8C38(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsKeyUpdateEnvelope.CodingKeys()
{
  return &type metadata for SecureLocationsKeyUpdateEnvelope.CodingKeys;
}

unint64_t sub_1005F8C58()
{
  unint64_t result = qword_1009B6D88;
  if (!qword_1009B6D88)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080D5E4, &type metadata for SecureLocationsKeyUpdateEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B6D88);
  }

  return result;
}

unint64_t sub_1005F8CA0()
{
  unint64_t result = qword_1009B6D90;
  if (!qword_1009B6D90)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080D69C, &type metadata for SecureLocationsKeyUpdateAckEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B6D90);
  }

  return result;
}

unint64_t sub_1005F8CE8()
{
  unint64_t result = qword_1009B6D98;
  if (!qword_1009B6D98)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080D60C, &type metadata for SecureLocationsKeyUpdateAckEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B6D98);
  }

  return result;
}

unint64_t sub_1005F8D30()
{
  unint64_t result = qword_1009B6DA0;
  if (!qword_1009B6DA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080D634, &type metadata for SecureLocationsKeyUpdateAckEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B6DA0);
  }

  return result;
}

unint64_t sub_1005F8D78()
{
  unint64_t result = qword_1009B6DA8;
  if (!qword_1009B6DA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080D554, &type metadata for SecureLocationsKeyUpdateEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B6DA8);
  }

  return result;
}

unint64_t sub_1005F8DC0()
{
  unint64_t result = qword_1009B6DB0;
  if (!qword_1009B6DB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080D57C, &type metadata for SecureLocationsKeyUpdateEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B6DB0);
  }

  return result;
}

uint64_t sub_1005F8E04(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v5 = 0xEA00000000007265LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v7 = 0x800000010086ACC0LL;
    if (a2 == 0x800000010086ACC0LL) {
      goto LABEL_13;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010086ACC0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if (a1 == 0x7865646E69LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v8 = 0xE500000000000000LL;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7865646E69LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_19;
  }

  if (a1 == 0x4B65746176697270LL && a2 == 0xEA00000000007965LL)
  {
    unint64_t v9 = 0xEA00000000007965LL;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4B65746176697270LL, 0xEA00000000007965LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_25;
  }

  if (a1 == 0xD000000000000013LL && a2 == 0x80000001008564D0LL)
  {
    swift_bridgeObjectRelease(0x80000001008564D0LL);
    return 4LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x80000001008564D0LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

uint64_t sub_1005F9014(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v5 = 0xEA00000000007265LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x7865646E69LL && a2 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease(0xE500000000000000LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7865646E69LL, 0xE500000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1005F9108()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 256);
  uint64_t v3 = *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  uint64_t v4 = type metadata accessor for BeaconKeyManager(0LL);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10014F014, v2, v3, (char *)&type metadata for () + 8, v4);
  swift_retain();
  swift_release();
  uint64_t v5 = swift_allocObject(&unk_10096AAC0, 24LL, 7LL);
  swift_weakInit(v5 + 16, v1);
  uint64_t v6 = swift_allocObject(&unk_10096AAE8, 32LL, 7LL);
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = sub_1005F9358;
  *(void *)(v6 + 24) = v5;
  swift_retain_n(v5, 2LL);
  uint64_t v7 = sub_100004AEC(&qword_1009B6DB8);
  unint64_t v8 = sub_1005F938C();
  uint64_t v9 = Publisher<>.sink(receiveValue:)(sub_1005F9384, v6, v7, v8);
  swift_release();
  swift_release();
  swift_release_n(v5, 2LL);
  uint64_t v10 = *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconKeyManagerURLChangedSubscription);
  *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconKeyManagerURLChangedSubscription) = v9;
  return sub_1004BD9B8(v10);
}

uint64_t sub_1005F9264()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1005F9288(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = sub_100004AEC(&qword_10099E590);
  __chkstk_darwin(v6);
  unint64_t v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL))(v8, a1, v9);
  v8[*(int *)(v6 + 48)] = a2;
  a3 += 16LL;
  swift_beginAccess(a3, v12, 0LL, 0LL);
  if (swift_weakLoadStrong(a3)) {
    swift_release();
  }
  return sub_1005F93D8((uint64_t)v8);
}

uint64_t sub_1005F9358(uint64_t a1, char a2)
{
  return sub_1005F9288(a1, a2, v2);
}

uint64_t sub_1005F9360()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1005F9384(uint64_t a1)
{
  return sub_10006A7AC(a1, *(void (**)(char *))(v1 + 16));
}

unint64_t sub_1005F938C()
{
  unint64_t result = qword_1009B6DC0;
  if (!qword_1009B6DC0)
  {
    uint64_t v1 = sub_100004B78(&qword_1009B6DB8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AnyPublisher<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1009B6DC0);
  }

  return result;
}

uint64_t sub_1005F93D8(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_10099E590);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1005F9418()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2AF08);
  sub_10000A720(v0, (uint64_t)qword_100A2AF08);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000015LL,  0x800000010080D770LL);
}

uint64_t sub_1005F9498()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2AF20);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2AF20);
  if (qword_10099B650 != -1) {
    swift_once(&qword_10099B650, sub_1005F9418);
  }
  uint64_t v2 = sub_10000A720(v0, (uint64_t)qword_100A2AF08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_1005F9528()
{
  uint64_t result = kFMIPLocatableStateReportedNotification;
  if (kFMIPLocatableStateReportedNotification)
  {
    uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(kFMIPLocatableStateReportedNotification);
    qword_1009B6DC8 = result;
    unk_1009B6DD0 = v1;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1005F955C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for TaskPriority(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1LL, 1LL, v5);
  uint64_t v7 = (void *)swift_allocObject(&unk_10096AB88, 40LL, 7LL);
  v7[2] = 0LL;
  unint64_t v8 = v7 + 2;
  v7[3] = 0LL;
  void v7[4] = v1;
  int v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5);
  uint64_t v10 = swift_retain();
  if (v9 == 1)
  {
    sub_1003AECDC((uint64_t)v4);
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 7168LL;
  }

  else
  {
    unsigned __int8 v14 = TaskPriority.rawValue.getter(v10);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    uint64_t v13 = v14 | 0x1C00LL;
    uint64_t v15 = *v8;
    if (*v8)
    {
      uint64_t v16 = v7[3];
      uint64_t ObjectType = swift_getObjectType(*v8);
      swift_unknownObjectRetain(v15);
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      uint64_t v12 = v18;
      swift_unknownObjectRelease(v15);
    }

    else
    {
      uint64_t v11 = 0LL;
      uint64_t v12 = 0LL;
    }
  }

  uint64_t v19 = swift_allocObject(&unk_10096ABB0, 32LL, 7LL);
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = &unk_1009B6F28;
  *(void *)(v19 + 24) = v7;
  if (v12 | v11)
  {
    v22[0] = 0LL;
    v22[1] = 0LL;
    unint64_t v20 = v22;
    v22[2] = v11;
    v22[3] = v12;
  }

  else
  {
    unint64_t v20 = 0LL;
  }

  swift_task_create(v13, v20, (char *)&type metadata for () + 8, &unk_1009AB890, v19);
  return swift_release();
}

uint64_t sub_1005F9728(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = (void *)swift_task_alloc(dword_1009B6E04);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v6;
  *uint64_t v6 = v4;
  v6[1] = sub_100015D58;
  v6[3] = a4;
  v6[4] = *a4;
  return swift_task_switch(sub_1005F97B0, a4, 0LL);
}

uint64_t sub_1005F9790()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *v0;
  return swift_task_switch(sub_1005F97B0, v0, 0LL);
}

uint64_t sub_1005F97B0()
{
  uint64_t v1 = (__int128 *)(v0 + 24);
  if (qword_10099B660 != -1) {
    swift_once(&qword_10099B660, sub_1005F9528);
  }
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = dispatch thunk of DarwinNotificationHelper.publisher(name:)(qword_1009B6DC8, unk_1009B6DD0);
  uint64_t v2 = swift_allocObject(&unk_10096AB10, 32LL, 7LL);
  __int128 v3 = *v1;
  *(_OWORD *)(v2 + swift_weakDestroy(v0 + 16) = *v1;
  uint64_t v4 = v3;
  swift_retain();
  uint64_t v5 = sub_100004AEC(&qword_1009B6EE0);
  uint64_t v6 = sub_1000372EC( &qword_1009B6EE8,  &qword_1009B6EE0,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v7 = Publisher<>.sink(receiveValue:)(sub_1005FA5B4, v2, v5, v6);
  swift_release();
  swift_release();
  *(void *)(v4 + 128) = v7;
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005F9A68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
  unint64_t v9 = sub_1005FA5BC();
  uint64_t v10 = (void *)swift_allocObject(&unk_10096AB38, 48LL, 7LL);
  v10[2] = a2;
  v10[3] = v9;
  v10[4] = a2;
  v10[5] = a3;
  swift_retain_n(a2, 2LL);
  sub_1003EDB00((uint64_t)v7, (uint64_t)&unk_1009B6F00, (uint64_t)v10);
  return swift_release();
}

uint64_t sub_1005F9B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = a4;
  *(void *)(v5 + 40) = a5;
  return swift_task_switch(sub_1005F9B5C, a4, 0LL);
}

uint64_t sub_1005F9B5C()
{
  __int128 v7 = *(_OWORD *)(v0 + 32);
  *(void *)(v0 + 48) = *(void *)(v7 + 120);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = 0xD000000000000016LL;
  *(void *)(v0 + 24) = 0x800000010086ADB0LL;
  uint64_t v1 = swift_allocObject(&unk_10096AB60, 32LL, 7LL);
  *(void *)(v0 + 56) = v1;
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = v7;
  swift_retain();
  uint64_t v2 = sub_100004AEC(&qword_1009A6590);
  uint64_t v3 = sub_1000372EC( &qword_1009B6F18,  &qword_1009A6590,  (uint64_t)&protocol conformance descriptor for AsyncKeyedThrottle<A>);
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v3);
  return swift_task_switch(sub_1005F9C30, v4, v5);
}

uint64_t sub_1005F9C30()
{
  uint64_t v1 = *(void *)(v0 + 56);
  dispatch thunk of AsyncKeyedThrottle.throttle(key:block:)(v0 + 16, &unk_1009B6F10, v1);
  swift_release(v1);
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005F9C80(uint64_t a1)
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = a1;
  return swift_task_switch(sub_1005F9C98, 0LL, 0LL);
}

uint64_t sub_1005F9C98()
{
  if (qword_10099B658 != -1) {
    swift_once(&qword_10099B658, sub_1005F9498);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A2AF20);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Located state reported.", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = (void *)swift_task_alloc(dword_1009B6E0C);
  *(void *)(v0 + 24) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1005F9DA8;
  uint64_t v7 = *(void *)(v0 + 16);
  v6[18] = v7;
  return swift_task_switch(sub_1005F9E0C, v7, 0LL);
}

uint64_t sub_1005F9DA8()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 24));
  return (*(uint64_t (**)(uint64_t))(v2 + 8))(1LL);
}

uint64_t sub_1005F9DF4()
{
  *(void *)(v1 + 144) = v0;
  return swift_task_switch(sub_1005F9E0C, v0, 0LL);
}

uint64_t sub_1005F9E0C()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001CEB4((uint64_t)&xmmword_1009BED80, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C980 + dword_10099C980);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C984);
    *(void *)(v0 + 15_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1005F9EF0;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1005F9EF0(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 144LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 152LL);
  *(void *)(*(void *)v1 + 16Hasher.init(_seed:)(v1, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005F9F4C, v3, 0LL);
}

uint64_t sub_1005F9F4C()
{
  uint64_t v1 = *(void *)(v0 + 160);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (v1) {
    return swift_task_switch(sub_1005FA190, *(void *)(v0 + 160), 0LL);
  }
  unint64_t v3 = sub_1000157D0();
  uint64_t v4 = swift_allocError(&type metadata for DaemonError, v3, 0LL, 0LL);
  *uint64_t v5 = 0xD00000000000001CLL;
  v5[1] = 0x800000010086AD70LL;
  swift_willThrow(v4);
  if (qword_10099B658 != -1) {
    swift_once(&qword_10099B658, sub_1005F9498);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10000A720(v6, (uint64_t)qword_100A2AF20);
  swift_errorRetain(v4);
  uint64_t v7 = swift_errorRetain(v4);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v10 = 138543362;
    swift_errorRetain(v4);
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError(v4);
    *(void *)(v0 + 136) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v10 + 4, v10 + 12);
    uint64_t *v11 = v12;
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Own device publish activity failed: %{public}@.", v10, 0xCu);
    uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v11, 1LL, v13);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);

    swift_errorRelease(v4);
  }

  else
  {
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    swift_errorRelease(v4);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005FA190()
{
  uint64_t v1 = v0[20];
  v0[15] = 0xD000000000000013LL;
  v0[16] = 0x800000010086AD90LL;
  swift_retain();
  unint64_t v3 = (void *)swift_task_alloc(v2);
  v0[21] = v3;
  *unint64_t v3 = v0;
  v3[1] = sub_1005FA248;
  return ((uint64_t (*)(void *, void *, uint64_t, void (*)(), void))v5)( v0 + 15,  &unk_1009B6ED8,  v1,  sub_1003AF0F8,  0LL);
}

uint64_t sub_1005FA248()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 168);
  *(void *)(*v1 + 176) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v4 = *(void *)(v2 + 160);
    uint64_t v5 = sub_1005FA314;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 144);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v5 = sub_1005FA2E4;
    uint64_t v4 = v6;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_1005FA2E4()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005FA314()
{
  return swift_task_switch(sub_1005FA328, *(void *)(v0 + 144), 0LL);
}

uint64_t sub_1005FA328()
{
  uint64_t v1 = *(void *)(v0 + 176);
  if (qword_10099B658 != -1) {
    swift_once(&qword_10099B658, sub_1005F9498);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2AF20);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v6 = 138543362;
    swift_errorRetain(v1);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 136) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v6 + 4, v6 + 12);
    *uint64_t v7 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Own device publish activity failed: %{public}@.", v6, 0xCu);
    uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    swift_errorRelease(v1);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005FA4F4()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for LocatableStateMonitor()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd21LocatableStateMonitor);
}

uint64_t sub_1005FA548()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1009ABA2C);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10020D500;
  return sub_1003AF058();
}

uint64_t sub_1005FA590()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1005FA5B4(uint64_t a1)
{
  return sub_1005F9A68(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t sub_1005FA5BC()
{
  unint64_t result = qword_1009B6EF8;
  if (!qword_1009B6EF8)
  {
    uint64_t v1 = type metadata accessor for LocatableStateMonitor();
    unint64_t result = swift_getWitnessTable(&unk_10080D7A8, v1);
    atomic_store(result, (unint64_t *)&qword_1009B6EF8);
  }

  return result;
}

uint64_t sub_1005FA600()
{
  return sub_1002E7540(48LL);
}

uint64_t sub_1005FA608()
{
  uint64_t v2 = swift_task_alloc(dword_1009B6EF4);
  __int128 v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_1000159BC;
  *(_OWORD *)(v2 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v3;
  return swift_task_switch(sub_1005F9B5C, v3, 0LL);
}

uint64_t sub_1005FA668()
{
  uint64_t v2 = *(void *)(v0 + 16);
  __int128 v3 = (void *)swift_task_alloc(dword_1009B6F0C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *__int128 v3 = v1;
  v3[1] = sub_100200060;
  v3[2] = v2;
  return swift_task_switch(sub_1005F9C98, 0LL, 0LL);
}

uint64_t sub_1005FA6C8()
{
  return sub_1002E7540(40LL);
}

uint64_t sub_1005FA6D0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (void *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1009B6F24);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100015D58;
  return sub_1005F9728(a1, v4, v5, v6);
}

uint64_t sub_1005FA73C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1005FA764(uint64_t a1)
{
  uint64_t v1 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v2 = -1LL;
  if (v1 < 64) {
    uint64_t v2 = ~(-1LL << v1);
  }
  unint64_t v3 = v2 & *(void *)(a1 + 64);
  int64_t v23 = (unint64_t)(v1 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v4 = 0LL;
  uint64_t v5 = _swiftEmptyArrayStorage;
  if (!v3) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v6 = __clz(__rbit64(v3));
  v3 &= v3 - 1;
  for (unint64_t i = v6 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v9)) + (v4 << 6))
  {
    uint64_t v11 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v13 = *v11;
    unint64_t v12 = v11[1];
    unsigned __int8 v14 = (uint64_t *)(*(void *)(a1 + 56) + 32 * i);
    uint64_t v15 = *v14;
    unint64_t v16 = v14[1];
    uint64_t v17 = v14[2];
    unint64_t v18 = v14[3];
    sub_10001736C(*v11, v12);
    sub_10001736C(v13, v12);
    sub_10001736C(v15, v16);
    sub_10001736C(v17, v18);
    sub_100016F9C(v13, v12);
    sub_100016F9C(v15, v16);
    sub_100016F9C(v17, v18);
    if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0) {
      uint64_t v5 = sub_1004C4FBC(0LL, v5[2] + 1LL, 1, v5);
    }
    unint64_t v20 = v5[2];
    unint64_t v19 = v5[3];
    if (v20 >= v19 >> 1) {
      uint64_t v5 = sub_1004C4FBC((void *)(v19 > 1), v20 + 1, 1, v5);
    }
    v5[2] = v20 + 1;
    unint64_t v21 = &v5[2 * v20];
    v21[4] = v13;
    v21[5] = v12;
    if (v3) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v8 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_29;
    }

    if (v8 >= v23) {
      goto LABEL_27;
    }
    unint64_t v9 = *(void *)(v22 + 8 * v8);
    ++v4;
    if (!v9)
    {
      int64_t v4 = v8 + 1;
      if (v8 + 1 >= v23) {
        goto LABEL_27;
      }
      unint64_t v9 = *(void *)(v22 + 8 * v4);
      if (!v9)
      {
        int64_t v4 = v8 + 2;
        if (v8 + 2 >= v23) {
          goto LABEL_27;
        }
        unint64_t v9 = *(void *)(v22 + 8 * v4);
        if (!v9)
        {
          int64_t v4 = v8 + 3;
          if (v8 + 3 >= v23) {
            goto LABEL_27;
          }
          unint64_t v9 = *(void *)(v22 + 8 * v4);
          if (!v9) {
            break;
          }
        }
      }
    }

void *sub_1005FA9D8()
{
  int64_t v23 = _swiftEmptyArrayStorage;
  uint64_t v24 = _swiftEmptyArrayStorage;
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0LL);
  swift_bridgeObjectRetain(*(void *)(v0 + *(int *)(RequestBeacon + 28)));
  sub_1006014D4(v2, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1006024B0);
  swift_bridgeObjectRelease();
  v22[0] = v24;
  swift_bridgeObjectRetain_n(v24, 2LL);
  sub_1005FBE04(v22);
  swift_bridgeObjectRelease();
  uint64_t v3 = v22[0];
  int64_t v4 = *(void *)(v22[0] + 16LL);
  if (v4)
  {
    v22[0] = _swiftEmptyArrayStorage;
    sub_100032800(0, v4, 0);
    uint64_t v5 = (void *)v22[0];
    unint64_t v6 = (uint64_t *)(v3 + 40);
    do
    {
      uint64_t v8 = *(v6 - 1);
      uint64_t v7 = *v6;
      v22[0] = v5;
      unint64_t v9 = v5[2];
      unint64_t v10 = v5[3];
      swift_bridgeObjectRetain(v7);
      if (v9 >= v10 >> 1)
      {
        sub_100032800(v10 > 1, v9 + 1, 1);
        uint64_t v5 = (void *)v22[0];
      }

      v6 += 3;
      v5[2] = v9 + 1;
      uint64_t v11 = &v5[2 * v9];
      v11[4] = v8;
      v11[5] = v7;
      --v4;
    }

    while (v4);
    swift_release();
  }

  else
  {
    swift_release();
    uint64_t v5 = _swiftEmptyArrayStorage;
  }

  v22[0] = v23;
  swift_bridgeObjectRetain_n(v23, 2LL);
  sub_1005FBE04(v22);
  swift_bridgeObjectRelease();
  uint64_t v12 = v22[0];
  int64_t v13 = *(void *)(v22[0] + 16LL);
  if (v13)
  {
    v22[0] = _swiftEmptyArrayStorage;
    sub_100032800(0, v13, 0);
    uint64_t v14 = v22[0];
    uint64_t v15 = (uint64_t *)(v12 + 40);
    do
    {
      uint64_t v17 = *(v15 - 1);
      uint64_t v16 = *v15;
      v22[0] = v14;
      unint64_t v18 = *(void *)(v14 + 16);
      unint64_t v19 = *(void *)(v14 + 24);
      swift_bridgeObjectRetain(v16);
      if (v18 >= v19 >> 1)
      {
        sub_100032800(v19 > 1, v18 + 1, 1);
        uint64_t v14 = v22[0];
      }

      v15 += 3;
      *(void *)(v14 + swift_weakDestroy(v0 + 16) = v18 + 1;
      uint64_t v20 = v14 + 16 * v18;
      *(void *)(v20 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v17;
      *(void *)(v20 + 40) = v16;
      --v13;
    }

    while (v13);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v5;
}

uint64_t sub_1005FAC40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = sub_100004AEC(&qword_1009AC570);
  uint64_t v7 = __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v30 - v10;
  if ((static UUID.== infix(_:_:)(a1, v2) & 1) != 0)
  {
    uint64_t RequestBeacon = (int *)type metadata accessor for FetchRequestBeacon(0LL);
    sub_1005FE184(v2 + RequestBeacon[5], a1 + RequestBeacon[5], (uint64_t)v11);
    sub_1005FE184(v2 + RequestBeacon[6], a1 + RequestBeacon[6], (uint64_t)v9);
    uint64_t v13 = RequestBeacon[7];
    uint64_t v14 = *(void *)(v2 + v13);
    uint64_t v15 = *(void *)(a1 + v13);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
    uint64_t v32 = v14;
    sub_100600F38(v15, (uint64_t)sub_100601408, 0LL, isUniquelyReferenced_nonNull_native, &v32);
    if (v3)
    {
      uint64_t result = swift_bridgeObjectRelease();
      __break(1u);
    }

    else
    {
      uint64_t v31 = v32;
      swift_bridgeObjectRelease();
      uint64_t v17 = RequestBeacon[9];
      uint64_t v18 = *(void *)(v2 + v17);
      uint64_t v19 = *(void *)(a1 + v17);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      char v20 = swift_isUniquelyReferenced_nonNull_native(v18);
      uint64_t v32 = v18;
      sub_100600CF4(v19, (uint64_t)sub_1006013B4, 0LL, v20, &v32);
      uint64_t v21 = v32;
      swift_bridgeObjectRelease();
      uint64_t v22 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16LL))(a2, v2, v22);
      int64_t v23 = (char *)(v2 + RequestBeacon[8]);
      char v24 = *v23;
      LOBYTE(v18) = v23[1];
      uint64_t v25 = *((void *)v23 + 1);
      sub_10060142C((uint64_t)v11, a2 + RequestBeacon[5]);
      uint64_t result = sub_10060142C((uint64_t)v9, a2 + RequestBeacon[6]);
      *(void *)(a2 + RequestBeacon[7]) = v31;
      uint64_t v27 = a2 + RequestBeacon[8];
      *(_BYTE *)uint64_t v27 = v24;
      *(_BYTE *)(v27 + 1) = v18;
      *(void *)(v27 + 8) = v25;
      *(void *)(a2 + RequestBeacon[9]) = v21;
    }
  }

  else
  {
    unint64_t v28 = sub_1005FAE98();
    uint64_t v29 = swift_allocError(&type metadata for FetchRequestBeacon.FetchRequestBeaconError, v28, 0LL, 0LL);
    return swift_willThrow(v29);
  }

  return result;
}

unint64_t sub_1005FAE98()
{
  unint64_t result = qword_1009B6F48;
  if (!qword_1009B6F48)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080DC9C, &type metadata for FetchRequestBeacon.FetchRequestBeaconError);
    atomic_store(result, (unint64_t *)&qword_1009B6F48);
  }

  return result;
}

uint64_t type metadata accessor for FetchRequestBeacon(uint64_t a1)
{
  return sub_10008BED8(a1, (uint64_t *)&unk_1009B7060, (uint64_t)&nominal type descriptor for FetchRequestBeacon);
}

uint64_t sub_1005FAEF0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, void *a11)
{
  int v68 = a8;
  int v73 = a7;
  uint64_t v66 = a1;
  uint64_t v67 = a9;
  uint64_t v16 = sub_100004AEC(&qword_1009AC570);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)v65 - v20;
  uint64_t v22 = type metadata accessor for HashAlgorithm(0LL);
  uint64_t v77 = *(void *)(v22 - 8);
  uint64_t v78 = v22;
  __chkstk_darwin(v22);
  uint64_t v76 = (char *)v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v81 = type metadata accessor for TimeBasedKey(0LL);
  __chkstk_darwin(v81);
  uint64_t v26 = (char *)v65 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  BOOL v27 = __OFSUB__(a6 >> 1, a5);
  uint64_t v28 = (a6 >> 1) - a5;
  uint64_t v71 = v21;
  int64_t v72 = v19;
  uint64_t v69 = a3;
  uint64_t v70 = a2;
  if (v28)
  {
    if (!((v28 < 0) ^ v27 | (v28 == 0)))
    {
      uint64_t v29 = *(void *)(v24 + 72);
      LODWORD(v80) = enum case for HashAlgorithm.sha256(_:);
      swift_unknownObjectRetain(a3);
      uint64_t v75 = &_swiftEmptyDictionarySingleton;
      uint64_t v79 = v29;
      uint64_t v82 = v28;
      sub_10001DC4C(a4 + v29 * a5, (uint64_t)v26, type metadata accessor for TimeBasedKey);
      uint64_t v30 = &v26[*(int *)(v81 + 24)];
      uint64_t v31 = *((void *)v30 + 2);
      unint64_t v32 = *((void *)v30 + 3);
      sub_10001736C(v31, v32);
      sub_1004DFE7C(v31, v32);
      uint64_t v34 = v33;
      sub_1004DDA84(v33, 0);
      uint64_t v36 = v35;
      CCECCryptorRelease(v34);
      sub_100016F9C(v31, v32);
      __asm { BR              X9 }
    }

    __break(1u);
    JUMPOUT(0x1005FB8A8LL);
  }

  uint64_t v75 = &_swiftEmptyDictionarySingleton;
  if (a11[2])
  {
    int v74 = enum case for HashAlgorithm.sha256(_:);
    swift_bridgeObjectRetain(a11);
    v65[1] = a11;
    uint64_t v38 = a11[4];
    unint64_t v37 = a11[5];
    uint64_t v40 = a11[6];
    unint64_t v39 = a11[7];
    sub_10001736C(v38, v37);
    unint64_t v80 = v39;
    sub_10001736C(v40, v39);
    sub_10001736C(v38, v37);
    sub_1004DFE7C(v38, v37);
    uint64_t v42 = v41;
    sub_1004DDA84(v41, 0);
    uint64_t v83 = 0LL;
    unint64_t v44 = v43;
    CCECCryptorRelease(v42);
    sub_100016F9C(v38, v37);
    uint64_t v45 = (char *)&loc_1005FB40C + dword_1005FBCE4[v44 >> 62];
    uint64_t v81 = v40;
    uint64_t v82 = v38;
    __asm { BR              X9 }
  }

  unint64_t v46 = 0xE900000000000079LL;
  uint64_t v47 = 0x7972616D697250LL;
  swift_bridgeObjectRelease();
  if ((_BYTE)v73)
  {
    else {
      uint64_t v48 = 0x6F4C657275636553LL;
    }
    char v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v48, v46, 0x7972616D697250LL, 0xE700000000000000LL, 0LL);
    swift_bridgeObjectRelease();
    if ((v49 & 1) == 0)
    {
      uint64_t v50 = type metadata accessor for DateInterval(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56LL))(v21, 1LL, 1LL, v50);
      goto LABEL_16;
    }
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v51 = type metadata accessor for DateInterval(0LL);
  uint64_t v52 = *(void *)(v51 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v21, a2, v51);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v21, 0LL, 1LL, v51);
LABEL_16:
  if ((_BYTE)v73)
  {
    if (v73 == 1)
    {
      swift_unknownObjectRelease(a3);
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }

    uint64_t v47 = 0x6F4C657275636553LL;
    unint64_t v53 = 0xEF736E6F69746163LL;
  }

  else
  {
    unint64_t v53 = 0xE700000000000000LL;
  }

  char v54 = _stringCompareWithSmolCheck(_:_:expecting:)(v47, v53, 0x7261646E6F636553LL, 0xE900000000000079LL, 0LL);
  swift_unknownObjectRelease(a3);
  swift_bridgeObjectRelease();
  if ((v54 & 1) == 0)
  {
    uint64_t v57 = type metadata accessor for DateInterval(0LL);
    uint64_t v58 = *(void *)(v57 - 8);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(a2, v57);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56))(v19, 1LL, 1LL, v57);
    goto LABEL_24;
  }

uint64_t sub_1005FBCF4(char a1, uint64_t a2, void *a3)
{
  v13[0] = 0LL;
  v13[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(57LL);
  v6._countAndFlagsBits = 0xD000000000000022LL;
  v6._object = (void *)0x800000010086AEB0LL;
  String.append(_:)(v6);
  char v12 = a1;
  _print_unlocked<A, B>(_:_:)( &v12,  v13,  &type metadata for FetchRequestContext.FetchRequestContextPolicy,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v7._object = (void *)0x800000010086AEE0LL;
  v7._countAndFlagsBits = 0xD000000000000012LL;
  String.append(_:)(v7);
  if (a3)
  {
    uint64_t v8 = a3;
  }

  else
  {
    a2 = 0x74657320746F6ELL;
    uint64_t v8 = (void *)0xE700000000000000LL;
  }

  swift_bridgeObjectRetain(a3);
  v9._countAndFlagsBits = a2;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v8);
  v10._countAndFlagsBits = 93LL;
  v10._object = (void *)0xE100000000000000LL;
  String.append(_:)(v10);
  return v13[0];
}

Swift::Int sub_1005FBE04(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v2 = (void *)sub_1003D4A50(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = sub_100600328(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1005FBE6C()
{
  uint64_t v0 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0LL);
  sub_10000A8AC(v0, qword_1009B6F30);
  uint64_t v1 = (void *)sub_10000A720(v0, (uint64_t)qword_1009B6F30);
  *uint64_t v1 = sub_1001559A4;
  v1[1] = 0LL;
  return (*(uint64_t (**)(void))(*(void *)(v0 - 8) + 104LL))();
}

uint64_t sub_1005FBED0(char *a1, char *a2)
{
  return sub_10030849C(*a1, *a2);
}

Swift::Int sub_1005FBEDC()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  if (v1) {
    uint64_t v2 = 0x6974737561687865LL;
  }
  else {
    uint64_t v2 = 0x6F4C74736574616CLL;
  }
  if (v1) {
    unint64_t v3 = 0xEA00000000006576LL;
  }
  else {
    unint64_t v3 = 0xEE006E6F69746163LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1005FBF6C(uint64_t a1)
{
  if (*v1) {
    uint64_t v2 = 0x6974737561687865LL;
  }
  else {
    uint64_t v2 = 0x6F4C74736574616CLL;
  }
  if (*v1) {
    unint64_t v3 = 0xEA00000000006576LL;
  }
  else {
    unint64_t v3 = 0xEE006E6F69746163LL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1005FBFD8(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2) {
    uint64_t v3 = 0x6974737561687865LL;
  }
  else {
    uint64_t v3 = 0x6F4C74736574616CLL;
  }
  if (v2) {
    unint64_t v4 = 0xEA00000000006576LL;
  }
  else {
    unint64_t v4 = 0xEE006E6F69746163LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1005FC064@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v3._countAndFlagsBits = *a1;
  unint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1009352C8, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void sub_1005FC0C0(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6F4C74736574616CLL;
  if (*v1) {
    uint64_t v2 = 0x6974737561687865LL;
  }
  unint64_t v3 = 0xEE006E6F69746163LL;
  if (*v1) {
    unint64_t v3 = 0xEA00000000006576LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1005FC110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100604248();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1005FC15C(__int16 a1, uint64_t a2)
{
  char v3 = HIBYTE(a1);
  v14[0] = 0LL;
  v14[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(52LL);
  v4._object = (void *)0x800000010086AE90LL;
  v4._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v4);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._countAndFlagsBits = 0x203A65646F6D202CLL;
  v7._object = (void *)0xE800000000000000LL;
  String.append(_:)(v7);
  LOBYTE(v13) = v3 & 1;
  _print_unlocked<A, B>(_:_:)( &v13,  v14,  &type metadata for FetchRequestBeacon.SearchContext.Mode,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v8._countAndFlagsBits = 0x203A65676170202CLL;
  v8._object = (void *)0xE800000000000000LL;
  String.append(_:)(v8);
  uint64_t v13 = a2;
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  Swift::String v10 = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v10);
  v11._countAndFlagsBits = 23854LL;
  v11._object = (void *)0xE200000000000000LL;
  String.append(_:)(v11);
  return v14[0];
}

uint64_t sub_1005FC2A0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100004AEC(&qword_1009B71C8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  Swift::String v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100012ED8(a1, v11);
  unint64_t v13 = sub_100604D30();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for FetchRequestBeacon.SearchContext.CodingKeys,  &type metadata for FetchRequestBeacon.SearchContext.CodingKeys,  v13,  v11,  v12);
  v19[1] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2);
  if (!v3)
  {
    v19[0] = BYTE1(a2) & 1;
    char v18 = 1;
    unint64_t v14 = sub_100604D74();
    KeyedEncodingContainer.encode<A>(_:forKey:)( v19,  &v18,  v7,  &type metadata for FetchRequestBeacon.SearchContext.Mode,  v14);
    char v17 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(a3, &v17, v7);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1005FC3FC()
{
  uint64_t v1 = 1701080941LL;
  if (*v0 != 1) {
    uint64_t v1 = 1701273968LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x72617069746C756DLL;
  }
}

uint64_t sub_1005FC454@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100604984(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005FC478(uint64_t a1)
{
  unint64_t v2 = sub_100604D30();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005FC4A0(uint64_t a1)
{
  unint64_t v2 = sub_100604D30();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005FC4C8(void *a1)
{
  if (v1[1]) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  return sub_1005FC2A0(a1, v2 | *v1, *((void *)v1 + 1));
}

uint64_t sub_1005FC4F8()
{
  if (v0[1]) {
    __int16 v1 = 256;
  }
  else {
    __int16 v1 = 0;
  }
  return sub_1005FC15C(v1 | *v0, *((void *)v0 + 1));
}

void sub_1005FC518(char *a1)
{
}

void sub_1005FC524()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v2, 0LL);
  __asm { BR              X9 }

Swift::Int sub_1005FC574()
{
  return Hasher._finalize()();
}

void sub_1005FC608()
{
  __asm { BR              X10 }

uint64_t sub_1005FC648(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE700000000000000LL);
}

void sub_1005FC6C8(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }

Swift::Int sub_1005FC714()
{
  return Hasher._finalize()();
}

unint64_t sub_1005FC7A8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100604174(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1005FC7D4()
{
  return ((uint64_t (*)(void))((char *)sub_1005FC808 + 4 * byte_10080D81F[*v0]))();
}

void sub_1005FC808(void *a1@<X8>)
{
  *a1 = 0x65746144646E65LL;
  a1[1] = 0xE700000000000000LL;
}

void sub_1005FC824(void *a1@<X8>)
{
  *a1 = 7562345LL;
  a1[1] = 0xE300000000000000LL;
}

void sub_1005FC838(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_1005FC85C(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t sub_1005FC884()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1005FC8B8 + 4 * byte_10080D824[*v0]))( 0x7461447472617473LL,  0xE900000000000065LL);
}

uint64_t sub_1005FC8B8()
{
  return 0x65746144646E65LL;
}

uint64_t sub_1005FC8D0()
{
  return 7562345LL;
}

uint64_t sub_1005FC8E0()
{
  return 0x7261646E6F636573LL;
}

uint64_t sub_1005FC900()
{
  return 0x6F43686372616573LL;
}

unint64_t sub_1005FC924@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100604174(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1005FC948(uint64_t a1)
{
  unint64_t v2 = sub_10060428C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005FC970(uint64_t a1)
{
  unint64_t v2 = sub_10060428C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1005FC998(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  v186 = a2;
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v182 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  v184 = (char *)&v177 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC(&qword_1009AC570);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v181 = (uint64_t)&v177 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v185 = (uint64_t)&v177 - v8;
  uint64_t v9 = type metadata accessor for DateInterval(0LL);
  uint64_t v187 = *(void *)(v9 - 8);
  uint64_t v188 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  v179 = (char *)&v177 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  v178 = (char *)&v177 - v12;
  unint64_t v196 = 0xD000000000000014LL;
  unint64_t v197 = 0x800000010086ADD0LL;
  uint64_t RequestBeacon = (int *)type metadata accessor for FetchRequestBeacon(0LL);
  uint64_t v190 = a1;
  uint64_t v183 = RequestBeacon[7];
  uint64_t v13 = *(void *)(a1 + v183);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v192 = v13 + 64;
  uint64_t v15 = 1LL << *(_BYTE *)(v13 + 32);
  uint64_t v16 = -1LL;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  unint64_t v17 = v16 & v14;
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v198 = v13;
  swift_bridgeObjectRetain(v13);
  int64_t v19 = 0LL;
  countAndFlagsBits = _swiftEmptyArrayStorage;
  if (v17) {
    goto LABEL_8;
  }
LABEL_9:
  int64_t v26 = v19 + 1;
  uint64_t v27 = v192;
  if (__OFADD__(v19, 1LL))
  {
    __break(1u);
LABEL_186:
    __break(1u);
LABEL_187:
    __break(1u);
    goto LABEL_188;
  }

  if (v26 < v18)
  {
    unint64_t v28 = *(void *)(v192 + 8 * v26);
    ++v19;
    if (v28) {
      goto LABEL_26;
    }
    int64_t v19 = v26 + 1;
    if (v26 + 1 >= v18) {
      goto LABEL_36;
    }
    unint64_t v28 = *(void *)(v192 + 8 * v19);
    if (v28) {
      goto LABEL_26;
    }
    int64_t v19 = v26 + 2;
    if (v26 + 2 >= v18) {
      goto LABEL_36;
    }
    unint64_t v28 = *(void *)(v192 + 8 * v19);
    if (v28) {
      goto LABEL_26;
    }
    int64_t v19 = v26 + 3;
    if (v26 + 3 >= v18) {
      goto LABEL_36;
    }
    unint64_t v28 = *(void *)(v192 + 8 * v19);
    if (v28) {
      goto LABEL_26;
    }
    int64_t v19 = v26 + 4;
    if (v26 + 4 >= v18) {
      goto LABEL_36;
    }
    unint64_t v28 = *(void *)(v192 + 8 * v19);
    if (v28)
    {
LABEL_26:
      unint64_t v17 = (v28 - 1) & v28;
      for (unint64_t i = __clz(__rbit64(v28)) + (v19 << 6); ; unint64_t i = v24 | (v19 << 6))
      {
        uint64_t v30 = *(void *)(v198 + 56) + 16 * i;
        uint64_t v31 = *(void *)v30;
        int v32 = *(unsigned __int8 *)(v30 + 8);
        uint64_t v21 = 0x7261646E6F636553LL;
        unint64_t v22 = 0xE900000000000079LL;
        if (v32 != 1)
        {
          if (v32 != 2)
          {
            swift_bridgeObjectRelease();
            goto LABEL_30;
          }

          uint64_t v21 = 0x6F4C657275636553LL;
          unint64_t v22 = 0xEF736E6F69746163LL;
        }

        char v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, 0x7972616D697250LL, 0xE700000000000000LL, 0LL);
        swift_bridgeObjectRelease();
        if ((v23 & 1) == 0)
        {
          if (!v17) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }

LABEL_159:
      char v123 = swift_isUniquelyReferenced_nonNull_native(v111);
      v195._countAndFlagsBits = (uint64_t)v111;
      if ((v123 & 1) == 0)
      {
        sub_1000334A8(0, v111[2] + 1LL, 1);
        v111 = (void *)v195._countAndFlagsBits;
      }

      unint64_t v125 = v111[2];
      unint64_t v124 = v111[3];
      if (v125 >= v124 >> 1)
      {
        sub_1000334A8(v124 > 1, v125 + 1, 1);
        v111 = (void *)v195._countAndFlagsBits;
      }

      v111[2] = v125 + 1;
      v126 = &v111[2 * v125];
      v126[4] = v121;
      *((_BYTE *)v126 + 40) = v122;
      if (!v109) {
        goto LABEL_137;
      }
LABEL_136:
      unint64_t v115 = __clz(__rbit64(v109));
      v109 &= v109 - 1;
    }
  }

  int64_t v119 = v117 + 5;
  if (v119 < v191)
  {
    unint64_t v118 = *(void *)(v192 + 8 * v119);
    if (!v118)
    {
      while (1)
      {
        int64_t v110 = v119 + 1;
        if (__OFADD__(v119, 1LL)) {
          goto LABEL_192;
        }
        if (v110 >= v191) {
          goto LABEL_165;
        }
        unint64_t v118 = *(void *)(v192 + 8 * v110);
        ++v119;
        if (v118) {
          goto LABEL_154;
        }
      }
    }

    int64_t v110 = v119;
    goto LABEL_154;
  }

uint64_t sub_1005FDB8C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5, uint64_t *a6)
{
  if (a4)
  {
    if (a4 != 1) {
      return result;
    }
    unint64_t v8 = sub_10009BDE4();
    uint64_t v9 = RawRepresentable<>.base64EncodedString(options:)(0LL, &type metadata for HashedAdvertisement, v8);
    uint64_t v11 = v10;
    uint64_t v12 = (void *)*a6;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(*a6);
    *a6 = (uint64_t)v12;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1004C6AAC(0LL, v12[2] + 1LL, 1, v12);
      uint64_t v12 = (void *)result;
      *a6 = result;
    }

    unint64_t v15 = v12[2];
    unint64_t v14 = v12[3];
    if (v15 >= v14 >> 1)
    {
      uint64_t result = (uint64_t)sub_1004C6AAC((void *)(v14 > 1), v15 + 1, 1, v12);
      uint64_t v12 = (void *)result;
      *a6 = result;
    }

    v12[2] = v15 + 1;
    uint64_t v16 = &v12[3 * v15];
    v16[4] = v9;
    v16[5] = v11;
  }

  else
  {
    unint64_t v18 = sub_10009BDE4();
    uint64_t v19 = RawRepresentable<>.base64EncodedString(options:)(0LL, &type metadata for HashedAdvertisement, v18);
    uint64_t v21 = v20;
    unint64_t v22 = (void *)*a5;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(*a5);
    *a5 = (uint64_t)v22;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1004C6AAC(0LL, v22[2] + 1LL, 1, v22);
      unint64_t v22 = (void *)result;
      *a5 = result;
    }

    unint64_t v24 = v22[2];
    unint64_t v23 = v22[3];
    if (v24 >= v23 >> 1)
    {
      uint64_t result = (uint64_t)sub_1004C6AAC((void *)(v23 > 1), v24 + 1, 1, v22);
      unint64_t v22 = (void *)result;
      *a5 = result;
    }

    void v22[2] = v24 + 1;
    uint64_t v16 = &v22[3 * v24];
    v16[4] = v19;
    v16[5] = v21;
  }

  v16[6] = a3;
  return result;
}

uint64_t sub_1005FDD30(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v5 = __chkstk_darwin(v4);
  unint64_t v42 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v41 - v7;
  uint64_t v9 = sub_100004AEC(&qword_1009AC570);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DateInterval(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v46 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = sub_100004AEC(&qword_1009B7140);
  uint64_t v44 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = a1[3];
  uint64_t v17 = a1[4];
  sub_100012ED8(a1, v18);
  unint64_t v19 = sub_10060428C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for FetchRequestBeacon.CodingKeys,  &type metadata for FetchRequestBeacon.CodingKeys,  v19,  v18,  v17);
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0LL);
  uint64_t v21 = *(int *)(RequestBeacon + 24);
  uint64_t v22 = v2 + *(int *)(RequestBeacon + 20);
  uint64_t v43 = v2;
  sub_1005FE184(v22, v2 + v21, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
  {
    uint64_t v23 = v47;
    uint64_t v24 = v45;
    sub_100015794((uint64_t)v11, &qword_1009AC570);
  }

  else
  {
    uint64_t v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(v46, v11, v12);
    DateInterval.start.getter(v30);
    uint64_t v31 = type metadata accessor for Date(0LL);
    int v32 = *(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL);
    v32(v8, 0LL, 1LL, v31);
    LOBYTE(v49) = 0;
    uint64_t v33 = sub_100007864( &qword_10099DA40,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v34 = v45;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v8, &v49, v47, v31, v33);
    uint64_t v24 = v34;
    if (v34)
    {
      sub_100015794((uint64_t)v8, (uint64_t *)&unk_10099D720);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v46, v12);
      return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v16, v47);
    }

    uint64_t v45 = v12;
    uint64_t v37 = sub_100015794((uint64_t)v8, (uint64_t *)&unk_10099D720);
    unint64_t v38 = v42;
    DateInterval.end.getter(v37);
    v32(v38, 0LL, 1LL, v31);
    LOBYTE(v49) = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v38, &v49, v47, v31, v33);
    uint64_t v40 = (uint64_t)v38;
    uint64_t v23 = v47;
    sub_100015794(v40, (uint64_t *)&unk_10099D720);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v46, v45);
  }

  uint64_t v25 = sub_1005FA9D8();
  uint64_t v27 = v26;
  if (v25[2]
    && (char v49 = v25,
        char v48 = 2,
        uint64_t v28 = sub_100004AEC(&qword_1009AED50),
        unint64_t v29 = sub_1001DAAA0(),
        KeyedEncodingContainer.encode<A>(_:forKey:)(&v49, &v48, v23, v28, v29),
        v24))
  {
    (*(void (**)(char *, uint64_t))(v44 + 8))(v16, v23);
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    if (v27[2])
    {
      char v49 = v27;
      char v48 = 3;
      uint64_t v35 = sub_100004AEC(&qword_1009AED50);
      unint64_t v36 = sub_1001DAAA0();
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v49, &v48, v23, v35, v36);
    }

    (*(void (**)(char *, uint64_t))(v44 + 8))(v16, v23);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_1005FE184@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v76 = type metadata accessor for Date(0LL);
  uint64_t v69 = *(void *)(v76 - 8);
  uint64_t v6 = __chkstk_darwin(v76);
  uint64_t v75 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  Swift::String v74 = (char *)&v64 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  char v72 = (char *)&v64 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  BOOL v71 = (char *)&v64 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  char v73 = (char *)&v64 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  char v67 = (char *)&v64 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v64 - v19;
  __chkstk_darwin(v18);
  Swift::String v77 = (char *)&v64 - v21;
  uint64_t v22 = type metadata accessor for DateInterval(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v78 = (char *)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  uint64_t v79 = (char *)&v64 - v26;
  uint64_t v27 = sub_100004AEC(&qword_1009AC570);
  uint64_t v28 = __chkstk_darwin(v27);
  unint64_t v70 = (char *)&v64 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = __chkstk_darwin(v28);
  int v32 = (char *)&v64 - v31;
  uint64_t v33 = __chkstk_darwin(v30);
  uint64_t v35 = (char *)&v64 - v34;
  __chkstk_darwin(v33);
  uint64_t v37 = (char *)&v64 - v36;
  uint64_t v68 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
  v68((char *)&v64 - v36, 1LL, 1LL, v22);
  unint64_t v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  if (v38((char *)a1, 1LL, v22) == 1)
  {
    sub_100015794((uint64_t)v37, &qword_1009AC570);
    return sub_100601474(a2, a3);
  }

  else
  {
    uint64_t v66 = a3;
    if (v38((char *)a2, 1LL, v22) == 1)
    {
      sub_100015794((uint64_t)v37, &qword_1009AC570);
      return sub_100601474(a1, v66);
    }

    else
    {
      sub_100601474(a1, (uint64_t)v35);
      if (v38(v35, 1LL, v22) == 1)
      {
        sub_100015794((uint64_t)v35, &qword_1009AC570);
      }

      else
      {
        uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
        uint64_t v41 = v79;
        v40(v79, v35, v22);
        sub_100601474(a2, (uint64_t)v32);
        if (v38(v32, 1LL, v22) == 1)
        {
          (*(void (**)(char *, uint64_t))(v23 + 8))(v41, v22);
          sub_100015794((uint64_t)v32, &qword_1009AC570);
        }

        else
        {
          uint64_t v42 = ((uint64_t (*)(char *, char *, uint64_t))v40)(v78, v32, v22);
          uint64_t v43 = DateInterval.start.getter(v42);
          uint64_t v44 = v67;
          DateInterval.start.getter(v43);
          uint64_t v65 = sub_100007864( &qword_1009A1280,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
          uint64_t v45 = v76;
          char v46 = dispatch thunk of static Comparable.< infix(_:_:)(v44, v20, v76, v65);
          uint64_t v47 = v69;
          char v48 = *(void (**)(char *, char *, uint64_t))(v69 + 16);
          if ((v46 & 1) != 0) {
            char v49 = v44;
          }
          else {
            char v49 = v20;
          }
          v48(v77, v49, v45);
          uint64_t v50 = *(void (**)(char *, uint64_t))(v47 + 8);
          v50(v44, v45);
          uint64_t v51 = ((uint64_t (*)(char *, uint64_t))v50)(v20, v45);
          char v52 = v71;
          uint64_t v53 = DateInterval.end.getter(v51);
          char v54 = v72;
          DateInterval.end.getter(v53);
          if ((dispatch thunk of static Comparable.>= infix(_:_:)(v54, v52, v45, v65) & 1) != 0) {
            int64_t v55 = v54;
          }
          else {
            int64_t v55 = v52;
          }
          unint64_t v56 = v73;
          int64_t v57 = v48;
          v48(v73, v55, v45);
          v50(v54, v45);
          v50(v52, v45);
          uint64_t v58 = v74;
          uint64_t v59 = v77;
          int v60 = v57;
          v57(v74, v77, v45);
          char v61 = v75;
          v60(v75, v56, v45);
          uint64_t v62 = (uint64_t)v70;
          DateInterval.init(start:end:)(v58, v61);
          v50(v56, v45);
          v50(v59, v45);
          unint64_t v63 = *(void (**)(char *, uint64_t))(v23 + 8);
          v63(v78, v22);
          v63(v79, v22);
          sub_100015794((uint64_t)v37, &qword_1009AC570);
          v68((char *)v62, 0LL, 1LL, v22);
          sub_10060142C(v62, (uint64_t)v37);
        }
      }

      return sub_10060142C((uint64_t)v37, v66);
    }
  }

uint64_t sub_1005FE6D0(void *a1)
{
  return sub_1005FDD30(a1);
}

unint64_t sub_1005FE6E4()
{
  uint64_t v1 = objc_autoreleasePoolPush();
  sub_1005FC998(v0, &v3);
  objc_autoreleasePoolPop(v1);
  return v3;
}

unint64_t sub_1005FE730(unsigned __int8 a1)
{
  uint64_t v3 = *(void *)(v1 + *(int *)(type metadata accessor for FetchRequestBeacon(0LL) + 28));
  uint64_t v4 = swift_allocObject(&unk_10096ABF0, 17LL, 7LL);
  *(_BYTE *)(v4 + swift_weakDestroy(v0 + 16) = a1;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  uint64_t v6 = ~v5;
  uint64_t v7 = -v5;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  uint64_t v61 = v3;
  uint64_t v62 = v3 + 64;
  uint64_t v64 = v6;
  unint64_t v66 = v8 & *(void *)(v3 + 64);
  swift_bridgeObjectRetain_n(v3, 2LL);
  swift_retain();
  sub_100601248();
  if (v10 == 3) {
    goto LABEL_56;
  }
  uint64_t v58 = v3 + 64;
  unint64_t v60 = v9;
  uint64_t v56 = v4;
  uint64_t v57 = v3;
  int64_t i = 0LL;
  int64_t v12 = (unint64_t)(v64 + 64) >> 6;
  unint64_t v13 = v66;
  if (v66) {
    goto LABEL_9;
  }
LABEL_10:
  int64_t v17 = i + 1;
  if (__OFADD__(i, 1LL))
  {
    __break(1u);
  }

  else if (v17 < v12)
  {
    unint64_t v18 = *(void *)(v62 + 8 * v17);
    if (v18)
    {
LABEL_19:
      unint64_t v13 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
      for (i = v17; ; unint64_t v16 = v15 | (i << 6))
      {
        uint64_t v21 = *(void *)(v61 + 56) + 16 * v16;
        if (*(_BYTE *)(v21 + 8))
        {
          if (*(_BYTE *)(v21 + 8) == 1)
          {
            uint64_t v22 = 0x7261646E6F636553LL;
            unint64_t v23 = 0xE900000000000079LL;
            int v24 = a1;
            if (!a1) {
              goto LABEL_32;
            }
          }

          else
          {
            uint64_t v22 = 0x6F4C657275636553LL;
            unint64_t v23 = 0xEF736E6F69746163LL;
            int v24 = a1;
            if (!a1)
            {
LABEL_32:
              unint64_t v26 = 0xE700000000000000LL;
              uint64_t v25 = 0x7972616D697250LL;
              goto LABEL_33;
            }
          }
        }

        else
        {
          unint64_t v23 = 0xE700000000000000LL;
          uint64_t v22 = 0x7972616D697250LL;
          int v24 = a1;
          if (!a1) {
            goto LABEL_32;
          }
        }

        if (v24 == 1) {
          uint64_t v25 = 0x7261646E6F636553LL;
        }
        else {
          uint64_t v25 = 0x6F4C657275636553LL;
        }
        if (v24 == 1) {
          unint64_t v26 = 0xE900000000000079LL;
        }
        else {
          unint64_t v26 = 0xEF736E6F69746163LL;
        }
LABEL_33:
        unint64_t v27 = *(void *)v21;
        if (v22 == v25 && v23 == v26)
        {
          swift_bridgeObjectRelease_n(v23, 2LL);
        }

        else
        {
          char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v25, v26, 0LL);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v14 & 1) == 0)
          {
            if (!v13) {
              goto LABEL_10;
            }
            goto LABEL_9;
          }
        }

        unint64_t v28 = v60;
        if (v27 < v60) {
          unint64_t v28 = v27;
        }
        unint64_t v60 = v28;
        if (!v13) {
          goto LABEL_10;
        }
LABEL_9:
        unint64_t v15 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
      }
    }

    int64_t v19 = i + 2;
    if (i + 2 < v12)
    {
      unint64_t v18 = *(void *)(v62 + 8 * v19);
      if (v18)
      {
LABEL_15:
        int64_t v17 = v19;
        goto LABEL_19;
      }

      int64_t v20 = i + 3;
      if (i + 3 < v12)
      {
        unint64_t v18 = *(void *)(v62 + 8 * v20);
        if (v18)
        {
LABEL_18:
          int64_t v17 = v20;
          goto LABEL_19;
        }

        int64_t v19 = i + 4;
        if (i + 4 < v12)
        {
          unint64_t v18 = *(void *)(v62 + 8 * v19);
          if (v18) {
            goto LABEL_15;
          }
          int64_t v20 = i + 5;
          if (i + 5 < v12)
          {
            unint64_t v18 = *(void *)(v62 + 8 * v20);
            if (v18) {
              goto LABEL_18;
            }
            int64_t v19 = i + 6;
            if (i + 6 < v12)
            {
              unint64_t v18 = *(void *)(v62 + 8 * v19);
              if (v18) {
                goto LABEL_15;
              }
              int64_t v17 = i + 7;
              if (i + 7 < v12)
              {
                unint64_t v18 = *(void *)(v62 + 8 * v17);
                if (!v18)
                {
                  int64_t v29 = i + 8;
                  do
                  {
                    if (v12 == v29) {
                      goto LABEL_52;
                    }
                    unint64_t v18 = *(void *)(v62 + 8 * v29++);
                  }

                  while (!v18);
                  int64_t v17 = v29 - 1;
                }

                goto LABEL_19;
              }
            }
          }
        }
      }
    }
  }

LABEL_104:
  sub_1000A6F30(v57);
  swift_bridgeObjectRelease();
  swift_release_n(v56, 2LL);
  unint64_t result = v60;
  if (v59 < v60) {
    __break(1u);
  }
  return result;
}

  __break(1u);
LABEL_105:
  __break(1u);
  return result;
}

uint64_t sub_1005FEE14(uint64_t a1, char a2)
{
  uint64_t v2 = 0x7972616D697250LL;
  int v3 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v4 = 0x7261646E6F636553LL;
  unint64_t v5 = 0xE900000000000079LL;
  if (v3 != 1)
  {
    uint64_t v4 = 0x6F4C657275636553LL;
    unint64_t v5 = 0xEF736E6F69746163LL;
  }

  if (*(_BYTE *)(a1 + 8)) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 0x7972616D697250LL;
  }
  if (v3) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = 0xE700000000000000LL;
  }
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v2 = 0x7261646E6F636553LL;
    }
    else {
      uint64_t v2 = 0x6F4C657275636553LL;
    }
    if (a2 == 1) {
      unint64_t v8 = 0xE900000000000079LL;
    }
    else {
      unint64_t v8 = 0xEF736E6F69746163LL;
    }
    if (v6 != v2) {
      goto LABEL_21;
    }
  }

  else
  {
    unint64_t v8 = 0xE700000000000000LL;
    if (v6 != 0x7972616D697250LL)
    {
LABEL_21:
      char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v2, v8, 0LL);
      goto LABEL_22;
    }
  }

  if (v7 != v8) {
    goto LABEL_21;
  }
  char v9 = 1;
  unint64_t v8 = v7;
LABEL_22:
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  return v9 & 1;
}

unint64_t sub_1005FEF3C()
{
  return 0xD000000000000010LL;
}

uint64_t sub_1005FEF94(char *a1, unsigned __int8 *a2)
{
  return sub_1003083C0(*a1, *a2);
}

Swift::Int sub_1005FEFA0()
{
  return sub_100313684(*v0);
}

uint64_t sub_1005FEFA8(uint64_t a1)
{
  return sub_100309EAC(a1, *v1);
}

Swift::Int sub_1005FEFB0(uint64_t a1)
{
  return sub_10030ABD4(a1, *v1);
}

unint64_t sub_1005FEFB8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1006041BC(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1005FEFE4@<X0>(void *a1@<X8>)
{
  unint64_t result = sub_1005FEF3C();
  *a1 = 0xD000000000000010LL;
  a1[1] = v3;
  return result;
}

uint64_t sub_1005FF014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100604204();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1005FF060(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v8 = sub_100004AEC(&qword_1009B71B0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100012ED8(a1, v12);
  unint64_t v14 = sub_100604CA8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for FetchRequestContext.CodingKeys,  &type metadata for FetchRequestContext.CodingKeys,  v14,  v12,  v13);
  char v21 = a2;
  char v20 = 0;
  unint64_t v15 = sub_100604CEC();
  KeyedEncodingContainer.encode<A>(_:forKey:)( &v21,  &v20,  v8,  &type metadata for FetchRequestContext.FetchRequestContextPolicy,  v15);
  if (!v4)
  {
    char v19 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a3, v18, &v19, v8);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1005FF19C(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  uint64_t v9 = sub_100004AEC(&qword_1009B70C8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_100012ED8(a1, v14);
  unint64_t v15 = sub_100603F08();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for FetchRequestContent.CodingKeys,  &type metadata for FetchRequestContent.CodingKeys,  v15,  v14,  v13);
  v23[0] = a2;
  char v24 = 0;
  uint64_t v16 = sub_100004AEC(&qword_1009B70D8);
  unint64_t v17 = sub_100603F4C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v23, &v24, v9, v16, v17);
  if (!v5)
  {
    LOBYTE(v23[0]) = a3;
    v23[1] = v21;
    v23[2] = v22;
    char v24 = 1;
    unint64_t v18 = sub_100603FC8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v23, &v24, v9, &type metadata for FetchRequestContext, v18);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1005FF300(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1005FF338 + 4 * byte_10080D829[a1]))( 0xD000000000000010LL,  0x8000000100850090LL);
}

uint64_t sub_1005FF338(uint64_t a1)
{
  return a1 + 2;
}

uint64_t sub_1005FF350()
{
  return 0x7461447472617473LL;
}

uint64_t sub_1005FF36C()
{
  return 0x65746144646E65LL;
}

uint64_t sub_1005FF384()
{
  return 0x7261646E6F636573LL;
}

uint64_t sub_1005FF3A4()
{
  return 0x6F43686372616573LL;
}

uint64_t sub_1005FF3C8()
{
  return 5294388599723750000LL;
}

uint64_t sub_1005FF3E4()
{
  return 0x76654464656E776FLL;
}

uint64_t sub_1005FF408()
{
  return 0x6570795479656BLL;
}

uint64_t sub_1005FF420(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1005FF458 + 4 * byte_10080D832[a1]))( 0xD000000000000010LL,  0x8000000100850090LL);
}

uint64_t sub_1005FF458(uint64_t a1)
{
  return a1 + 2;
}

uint64_t sub_1005FF470()
{
  return 0x7461447472617473LL;
}

uint64_t sub_1005FF48C()
{
  return 0x65746144646E65LL;
}

uint64_t sub_1005FF4A4()
{
  return 0x7261646E6F636573LL;
}

uint64_t sub_1005FF4C4()
{
  return 0x6F43686372616573LL;
}

uint64_t sub_1005FF4E8()
{
  return 5294388599723750000LL;
}

uint64_t sub_1005FF504()
{
  return 0x76654464656E776FLL;
}

uint64_t sub_1005FF528()
{
  return 0x6570795479656BLL;
}

uint64_t sub_1005FF540()
{
  if (*v0) {
    return 0xD000000000000016LL;
  }
  else {
    return 0x7963696C6F70LL;
  }
}

uint64_t sub_1005FF57C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100604ADC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005FF5A0(uint64_t a1)
{
  unint64_t v2 = sub_100604CA8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005FF5C8(uint64_t a1)
{
  unint64_t v2 = sub_100604CA8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005FF5F0(void *a1)
{
  return sub_1005FF060(a1, *(_BYTE *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16));
}

uint64_t sub_1005FF60C()
{
  return sub_1005FBCF4(*(_BYTE *)v0, *(void *)(v0 + 8), *(void **)(v0 + 16));
}

uint64_t sub_1005FF618()
{
  if (*v0) {
    return 0x747865746E6F63LL;
  }
  else {
    return 0x686372616573LL;
  }
}

uint64_t sub_1005FF650@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100604BC0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005FF674(uint64_t a1)
{
  unint64_t v2 = sub_100603F08();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005FF69C(uint64_t a1)
{
  unint64_t v2 = sub_100603F08();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005FF6C4(void *a1)
{
  return sub_1005FF19C(a1, *(void *)v1, *(_BYTE *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void sub_1005FF6E4(char *a1)
{
}

Swift::Int sub_1005FF6F0()
{
  char v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  sub_100309708((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_1005FF734(uint64_t a1)
{
}

Swift::Int sub_1005FF73C(uint64_t a1)
{
  char v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  sub_100309708((uint64_t)v4, v2);
  return Hasher._finalize()();
}

unint64_t sub_1005FF77C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10060493C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1005FF7A8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1005FF300(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1005FF7D0()
{
  return sub_1005FF420(*v0);
}

unint64_t sub_1005FF7D8@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10060493C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1005FF7FC(uint64_t a1)
{
  unint64_t v2 = sub_1006040CC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005FF824(uint64_t a1)
{
  unint64_t v2 = sub_1006040CC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005FF84C(void *a1, uint64_t a2)
{
  uint64_t v94 = a2;
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v4 = __chkstk_darwin(v3);
  int64_t v82 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  char v86 = (char *)&v82 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  int64_t v89 = (char *)&v82 - v9;
  __chkstk_darwin(v8);
  uint64_t v92 = (uint64_t)&v82 - v10;
  uint64_t v11 = sub_100004AEC(&qword_1009AC570);
  uint64_t v12 = __chkstk_darwin(v11);
  unint64_t v84 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v87 = (uint64_t)&v82 - v15;
  __chkstk_darwin(v14);
  unint64_t v17 = (char *)&v82 - v16;
  uint64_t v18 = type metadata accessor for DateInterval(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v85 = (char *)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __chkstk_darwin(v20);
  __int128 v88 = (char *)&v82 - v23;
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v82 - v24;
  uint64_t v26 = sub_100004AEC(&qword_1009B7120);
  uint64_t v91 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  unint64_t v28 = (char *)&v82 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = a1[3];
  uint64_t v30 = a1[4];
  sub_100012ED8(a1, v29);
  unint64_t v31 = sub_1006040CC();
  uint64_t v32 = v29;
  uint64_t v33 = v19;
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for FetchRequestBeacon_OwnedDevice.CodingKeys,  &type metadata for FetchRequestBeacon_OwnedDevice.CodingKeys,  v31,  v32,  v30);
  unint64_t v34 = (char *)v18;
  uint64_t RequestBeacon = (int *)type metadata accessor for FetchRequestBeacon(0LL);
  uint64_t v35 = v94 + RequestBeacon[5];
  sub_100601474(v35, (uint64_t)v17);
  uint64_t v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
  if (v36(v17, 1LL, v18) == 1)
  {
    uint64_t v83 = v35;
    uint64_t v37 = v33;
    sub_100015794((uint64_t)v17, &qword_1009AC570);
  }

  else
  {
    uint64_t v38 = (*(uint64_t (**)(char *, char *, uint64_t))(v33 + 32))(v25, v17, v18);
    uint64_t v39 = v92;
    DateInterval.start.getter(v38);
    uint64_t v40 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56LL))(v39, 0LL, 1LL, v40);
    LOBYTE(v96) = 0;
    uint64_t v41 = sub_100007864( &qword_10099DA40,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    unint64_t v42 = v93;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v39, &v96, v26, v40, v41);
    if (v42)
    {
      sub_100015794(v92, (uint64_t *)&unk_10099D720);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v25, v18);
      return (*(uint64_t (**)(char *, uint64_t))(v91 + 8))(v28, v26);
    }

    uint64_t v83 = v35;
    uint64_t v93 = 0LL;
    sub_100015794(v92, (uint64_t *)&unk_10099D720);
    uint64_t v37 = v33;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v25, v18);
    unint64_t v34 = (char *)v18;
  }

  int64_t v45 = v88;
  uint64_t v44 = (uint64_t)v89;
  uint64_t v46 = v87;
  uint64_t v47 = v94 + RequestBeacon[6];
  sub_100601474(v47, v87);
  if (v36((char *)v46, 1LL, (uint64_t)v34) == 1)
  {
    sub_100015794(v46, &qword_1009AC570);
    uint64_t v48 = v93;
    uint64_t v92 = v26;
    uint64_t v49 = v37;
    uint64_t v50 = (uint64_t)v86;
    uint64_t v51 = (uint64_t)v84;
  }

  else
  {
    uint64_t v52 = (*(uint64_t (**)(char *, uint64_t, char *))(v37 + 32))(v45, v46, v34);
    unint64_t v53 = v34;
    DateInterval.start.getter(v52);
    uint64_t v54 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56LL))(v44, 0LL, 1LL, v54);
    LOBYTE(v96) = 1;
    uint64_t v55 = sub_100007864( &qword_10099DA40,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v56 = v93;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v44, &v96, v26, v54, v55);
    if (v56)
    {
      sub_100015794(v44, (uint64_t *)&unk_10099D720);
      (*(void (**)(char *, char *))(v37 + 8))(v45, v53);
      return (*(uint64_t (**)(char *, uint64_t))(v91 + 8))(v28, v26);
    }

    uint64_t v92 = v26;
    sub_100015794(v44, (uint64_t *)&unk_10099D720);
    (*(void (**)(char *, char *))(v37 + 8))(v45, v53);
    unint64_t v34 = v53;
    uint64_t v49 = v37;
    uint64_t v50 = (uint64_t)v86;
    uint64_t v51 = (uint64_t)v84;
    uint64_t v48 = 0LL;
  }

  sub_1005FE184(v83, v47, v51);
  if (v36((char *)v51, 1LL, (uint64_t)v34) == 1)
  {
    sub_100015794(v51, &qword_1009AC570);
  }

  else
  {
    uint64_t v63 = (*(uint64_t (**)(char *, uint64_t, char *))(v49 + 32))(v85, v51, v34);
    int64_t v89 = v34;
    DateInterval.start.getter(v63);
    uint64_t v64 = type metadata accessor for Date(0LL);
    uint64_t v65 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56LL);
    v65(v50, 0LL, 1LL, v64);
    LOBYTE(v96) = 2;
    uint64_t v66 = v49;
    uint64_t v67 = sub_100007864( &qword_10099DA40,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v68 = v92;
    uint64_t v93 = v28;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v50, &v96, v92, v64, v67);
    if (v48)
    {
      sub_100015794(v50, (uint64_t *)&unk_10099D720);
      (*(void (**)(char *, char *))(v66 + 8))(v85, v89);
      return (*(uint64_t (**)(char *, uint64_t))(v91 + 8))(v93, v68);
    }

    uint64_t v76 = sub_100015794(v50, (uint64_t *)&unk_10099D720);
    uint64_t v77 = v68;
    uint64_t v78 = (uint64_t)v82;
    uint64_t v79 = v85;
    DateInterval.end.getter(v76);
    v65(v78, 0LL, 1LL, v64);
    LOBYTE(v96) = 3;
    unint64_t v80 = v93;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v78, &v96, v77, v64, v67);
    sub_100015794(v78, (uint64_t *)&unk_10099D720);
    (*(void (**)(char *, char *))(v66 + 8))(v79, v89);
    unint64_t v28 = v80;
  }

  uint64_t v57 = sub_1005FA9D8();
  unint64_t v59 = v58;
  uint64_t v60 = v92;
  if (v57[2])
  {
    unint64_t v96 = v57;
    char v95 = 6;
    uint64_t v61 = sub_100004AEC(&qword_1009AED50);
    unint64_t v62 = sub_1001DAAA0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v96, &v95, v60, v61, v62);
    if (v48)
    {
      (*(void (**)(char *, uint64_t))(v91 + 8))(v28, v60);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }

  swift_bridgeObjectRelease();
  if (v59[2])
  {
    unint64_t v96 = v59;
    char v95 = 4;
    uint64_t v69 = sub_100004AEC(&qword_1009AED50);
    unint64_t v70 = sub_1001DAAA0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v96, &v95, v60, v69, v70);
    if (v48)
    {
LABEL_22:
      (*(void (**)(char *, uint64_t))(v91 + 8))(v28, v60);
      return swift_bridgeObjectRelease();
    }
  }

  swift_bridgeObjectRelease();
  if (*(void *)(*(void *)(v94 + RequestBeacon[9]) + 16LL))
  {
    swift_bridgeObjectRetain(*(void *)(v94 + RequestBeacon[9]));
    sub_1005FA764(v71);
    char v73 = v72;
    swift_bridgeObjectRelease();
    unint64_t v96 = v73;
    char v95 = 7;
    uint64_t v74 = sub_100004AEC(&qword_10099E868);
    unint64_t v75 = sub_100604110();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v96, &v95, v60, v74, v75);
    if (v48) {
      goto LABEL_22;
    }
    swift_bridgeObjectRelease();
  }

  uint64_t v81 = v91;
  LOBYTE(v96) = 8;
  KeyedEncodingContainer.encode(_:forKey:)(1LL, &v96, v60);
  return (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v28, v60);
}

void sub_100600104(void *a1)
{
  uint64_t v3 = objc_autoreleasePoolPush();
  sub_1005FF84C(a1, v1);
  objc_autoreleasePoolPop(v3);
}

uint64_t sub_100600154(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  uint64_t v9 = sub_100004AEC(&qword_1009B70F8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_100012ED8(a1, v14);
  unint64_t v15 = sub_10060400C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for OwnedDeviceFetchRequestContent.CodingKeys,  &type metadata for OwnedDeviceFetchRequestContent.CodingKeys,  v15,  v14,  v13);
  v23[0] = a2;
  char v24 = 0;
  uint64_t v16 = sub_100004AEC(&qword_1009B7108);
  unint64_t v17 = sub_100604050();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v23, &v24, v9, v16, v17);
  if (!v5)
  {
    LOBYTE(v23[0]) = a3;
    v23[1] = v21;
    v23[2] = v22;
    char v24 = 1;
    unint64_t v18 = sub_100603FC8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v23, &v24, v9, &type metadata for FetchRequestContext, v18);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1006002B8(uint64_t a1)
{
  unint64_t v2 = sub_10060400C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006002E0(uint64_t a1)
{
  unint64_t v2 = sub_10060400C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100600308(void *a1)
{
  return sub_100600154(a1, *(void *)v1, *(_BYTE *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

Swift::Int sub_100600328(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_136;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v89 = 0LL;
      uint64_t v90 = *a1;
      for (uint64_t i = 1LL; i != v3; ++i)
      {
        unint64_t v92 = *(void *)(v90 + 24 * i + 16);
        uint64_t v93 = v89;
        do
        {
          uint64_t v94 = v90 + v93;
          if (v92 >= *(void *)(v90 + v93 + 16)) {
            break;
          }
          if (!v90) {
            goto LABEL_140;
          }
          uint64_t v95 = *(void *)(v94 + 24);
          unint64_t v96 = (void *)(v90 + v93);
          uint64_t v97 = *(void *)(v90 + v93 + 32);
          *(_OWORD *)(v94 + 24) = *(_OWORD *)v94;
          Swift::Int result = *(void *)(v94 + 16);
          *(void *)(v94 + 40) = result;
          void *v96 = v95;
          v96[1] = v97;
          *(void *)(v94 + swift_weakDestroy(v0 + 16) = v92;
          v93 -= 24LL;
        }

        while (v93 != -24);
        v89 += 24LL;
      }
    }

    return result;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_145;
  }
  Swift::Int v6 = result;
  char v106 = a1;
  if (v3 < 2)
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      uint64_t v13 = (char *)_swiftEmptyArrayStorage;
LABEL_102:
      __int128 v98 = v13;
      uint64_t v108 = v10;
      if (v14 >= 2)
      {
        uint64_t v99 = *v106;
        do
        {
          unint64_t v100 = v14 - 2;
          if (v14 < 2) {
            goto LABEL_131;
          }
          if (!v99) {
            goto LABEL_144;
          }
          char v101 = v98;
          uint64_t v102 = *(void *)&v98[16 * v100 + 32];
          uint64_t v103 = *(void *)&v98[16 * v14 + 24];
          sub_100600A38( (char *)(v99 + 24 * v102),  (char *)(v99 + 24LL * *(void *)&v98[16 * v14 + 16]),  v99 + 24 * v103,  __dst);
          if (v1) {
            break;
          }
          if (v103 < v102) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v101) & 1) == 0) {
            char v101 = sub_1003CBA90((uint64_t)v101);
          }
          if (v100 >= *((void *)v101 + 2)) {
            goto LABEL_133;
          }
          unint64_t v104 = &v101[16 * v100 + 32];
          *(void *)unint64_t v104 = v102;
          *((void *)v104 + 1) = v103;
          unint64_t v105 = *((void *)v101 + 2);
          if (v14 > v105) {
            goto LABEL_134;
          }
          memmove(&v101[16 * v14 + 16], &v101[16 * v14 + 32], 16 * (v105 - v14));
          __int128 v98 = v101;
          *((void *)v101 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v105 - 1;
          unint64_t v14 = v105 - 1;
        }

        while (v105 > 2);
      }

uint64_t sub_100600A38(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  Swift::Int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 24;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 24;
  uint64_t v26 = __src;
  Swift::Int v25 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      if (__dst != a2 || &a2[24 * v11] <= __dst) {
        memmove(__dst, a2, 24 * v11);
      }
      unint64_t v17 = &v4[24 * v11];
      Swift::Int v24 = v17;
      uint64_t v26 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        unint64_t v18 = a3 - 24;
        do
        {
          unint64_t v19 = (char *)(v18 + 24);
          if (*((void *)v17 - 1) >= *((void *)v6 - 1))
          {
            Swift::Int v24 = v17 - 24;
            if (v19 < v17 || v18 >= (unint64_t)v17 || v19 != v17)
            {
              __int128 v22 = *(_OWORD *)(v17 - 24);
              *(void *)(v18 + swift_weakDestroy(v0 + 16) = *((void *)v17 - 1);
              *(_OWORD *)unint64_t v18 = v22;
            }

            unint64_t v20 = v6;
            v17 -= 24;
            if (v6 <= v7) {
              break;
            }
          }

          else
          {
            unint64_t v20 = v6 - 24;
            if (v19 != v6 || v18 >= (unint64_t)v6)
            {
              __int128 v21 = *(_OWORD *)v20;
              *(void *)(v18 + swift_weakDestroy(v0 + 16) = *((void *)v6 - 1);
              *(_OWORD *)unint64_t v18 = v21;
            }

            uint64_t v26 = v6 - 24;
            if (v20 <= v7) {
              break;
            }
          }

          v18 -= 24LL;
          Swift::Int v6 = v20;
        }

        while (v17 > v4);
      }

uint64_t sub_100600CF4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v48 = a5;
  uint64_t v6 = -1LL << *(_BYTE *)(a1 + 32);
  uint64_t v7 = ~v6;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = -v6;
  uint64_t v41 = a1;
  uint64_t v42 = a1 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  uint64_t v43 = v7;
  uint64_t v44 = 0LL;
  uint64_t v45 = v10 & v8;
  uint64_t v46 = a2;
  uint64_t v47 = a3;
  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100658878(&v36);
  unint64_t v11 = *((void *)&v36 + 1);
  while (1)
  {
    if (v11 >> 60 == 15)
    {
      swift_release();
      swift_bridgeObjectRelease();
      sub_1000A6F30(v41);
      return swift_release();
    }

    uint64_t v15 = v36;
    uint64_t v16 = v38;
    uint64_t v35 = v37;
    uint64_t v18 = v39;
    uint64_t v17 = v40;
    unint64_t v19 = (void *)*v48;
    unint64_t v21 = sub_10030D62C(v36, v11);
    uint64_t v22 = v19[2];
    BOOL v23 = (v20 & 1) == 0;
    uint64_t v24 = v22 + v23;
    if (__OFADD__(v22, v23)) {
      break;
    }
    char v25 = v20;
    if (v19[3] >= v24)
    {
      if ((a4 & 1) == 0) {
        sub_100065058();
      }
    }

    else
    {
      sub_100050198(v24, a4 & 1);
      uint64_t v26 = sub_10030D62C(v15, v11);
      if ((v25 & 1) != (v27 & 1)) {
        goto LABEL_20;
      }
      unint64_t v21 = v26;
    }

    __int128 v28 = (void *)*v48;
    if ((v25 & 1) != 0)
    {
      sub_100016F9C(v15, v11);
      uint64_t v12 = (uint64_t *)(v28[7] + 32 * v21);
      uint64_t v13 = v12[2];
      unint64_t v14 = v12[3];
      sub_100016F9C(*v12, v12[1]);
      sub_100016F9C(v13, v14);
      uint64_t *v12 = v35;
      v12[1] = v16;
      v12[2] = v18;
      v12[3] = v17;
    }

    else
    {
      v28[(v21 >> 6) + 8] |= 1LL << v21;
      uint64_t v29 = (uint64_t *)(v28[6] + 16 * v21);
      *uint64_t v29 = v15;
      v29[1] = v11;
      uint64_t v30 = (uint64_t *)(v28[7] + 32 * v21);
      *uint64_t v30 = v35;
      v30[1] = v16;
      __int128 v30[2] = v18;
      v30[3] = v17;
      uint64_t v31 = v28[2];
      BOOL v32 = __OFADD__(v31, 1LL);
      uint64_t v33 = v31 + 1;
      if (v32) {
        goto LABEL_19;
      }
      v28[2] = v33;
    }

    sub_100658878(&v36);
    unint64_t v11 = *((void *)&v36 + 1);
    a4 = 1;
  }

  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for HashedAdvertisement);
  __break(1u);
  return result;
}

uint64_t sub_100600F38(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v7 = -1LL << *(_BYTE *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v56 = a1;
  uint64_t v57 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  else {
    uint64_t v11 = -1LL;
  }
  uint64_t v58 = v8;
  uint64_t v59 = 0LL;
  uint64_t v60 = v11 & v9;
  uint64_t v61 = a2;
  uint64_t v62 = a3;
  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100658A70((uint64_t)&v52);
  char v12 = v55;
  if (v55 == 3)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1000A6F30(v56);
    return swift_release();
  }

  uint64_t v15 = v52;
  unint64_t v14 = v53;
  uint64_t v51 = v54;
  uint64_t v16 = (void *)*a5;
  unint64_t v18 = sub_10030D62C(v52, v53);
  uint64_t v19 = v16[2];
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  char v22 = v17;
  if (v16[3] >= v21)
  {
    if ((a4 & 1) != 0)
    {
      char v25 = (void *)*a5;
      if ((v17 & 1) == 0) {
        goto LABEL_15;
      }
    }

    else
    {
      sub_100065244();
      char v25 = (void *)*a5;
      if ((v22 & 1) == 0) {
        goto LABEL_15;
      }
    }

    goto LABEL_13;
  }

  sub_100050504(v21, a4 & 1);
  uint64_t v23 = sub_10030D62C(v15, v14);
  if ((v22 & 1) == (v24 & 1))
  {
    unint64_t v18 = v23;
    char v25 = (void *)*a5;
    if ((v22 & 1) == 0)
    {
LABEL_15:
      v25[(v18 >> 6) + 8] |= 1LL << v18;
      char v27 = (uint64_t *)(v25[6] + 16 * v18);
      *char v27 = v15;
      v27[1] = v14;
      uint64_t v28 = v25[7] + 16 * v18;
      *(void *)uint64_t v28 = v51;
      *(_BYTE *)(v28 + 8) = v12;
      uint64_t v29 = v25[2];
      BOOL v30 = __OFADD__(v29, 1LL);
      uint64_t v31 = v29 + 1;
      if (!v30)
      {
        v25[2] = v31;
LABEL_18:
        while (1)
        {
          sub_100658A70((uint64_t)&v52);
          char v33 = v55;
          if (v55 == 3) {
            goto LABEL_5;
          }
          uint64_t v35 = v52;
          unint64_t v34 = v53;
          uint64_t v36 = v54;
          uint64_t v37 = (void *)*a5;
          unint64_t v39 = sub_10030D62C(v52, v53);
          uint64_t v40 = v37[2];
          BOOL v41 = (v38 & 1) == 0;
          uint64_t v42 = v40 + v41;
          if (__OFADD__(v40, v41)) {
            goto LABEL_26;
          }
          char v43 = v38;
          if (v37[3] < v42)
          {
            sub_100050504(v42, 1LL);
            uint64_t v44 = sub_10030D62C(v35, v34);
            if ((v43 & 1) != (v45 & 1)) {
              goto LABEL_28;
            }
            unint64_t v39 = v44;
          }

          uint64_t v46 = (void *)*a5;
          if ((v43 & 1) != 0)
          {
            sub_100016F9C(v35, v34);
            uint64_t v32 = v46[7] + 16 * v39;
            *(void *)uint64_t v32 = v36;
            *(_BYTE *)(v32 + 8) = v33;
          }

          else
          {
            v46[(v39 >> 6) + 8] |= 1LL << v39;
            uint64_t v47 = (uint64_t *)(v46[6] + 16 * v39);
            *uint64_t v47 = v35;
            v47[1] = v34;
            uint64_t v48 = v46[7] + 16 * v39;
            *(void *)uint64_t v48 = v36;
            *(_BYTE *)(v48 + 8) = v33;
            uint64_t v49 = v46[2];
            BOOL v30 = __OFADD__(v49, 1LL);
            uint64_t v50 = v49 + 1;
            if (v30) {
              goto LABEL_27;
            }
            v46[2] = v50;
          }
        }
      }

      goto LABEL_27;
    }

void sub_100601248()
{
  while (1)
  {
    int64_t v6 = *(void *)(v0 + 24);
    unint64_t v7 = *(void *)(v0 + 32);
    if (!v7) {
      break;
    }
    uint64_t v1 = (v7 - 1) & v7;
    unint64_t v2 = __clz(__rbit64(v7)) | (v6 << 6);
LABEL_3:
    uint64_t v3 = *(void *)(*(void *)v0 + 56LL) + 16 * v2;
    uint64_t v4 = *(void *)v3;
    char v5 = *(_BYTE *)(v3 + 8);
    *(void *)(v0 + 24) = v6;
    *(void *)(v0 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v1;
    uint64_t v15 = v4;
    char v16 = v5;
  }

  int64_t v8 = v6 + 1;
  if (!__OFADD__(v6, 1LL))
  {
    int64_t v9 = (unint64_t)(*(void *)(v0 + 16) + 64LL) >> 6;
    int64_t v10 = *(void *)(v0 + 24);
    if (v8 >= v9) {
      goto LABEL_23;
    }
    uint64_t v11 = *(void *)(v0 + 8);
    unint64_t v12 = *(void *)(v11 + 8 * v8);
    if (v12) {
      goto LABEL_14;
    }
    int64_t v13 = v6 + 2;
    int64_t v10 = v6 + 1;
    if (v6 + 2 >= v9) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v11 + 8 * v13);
    if (!v12)
    {
      int64_t v10 = v6 + 2;
      if (v6 + 3 >= v9) {
        goto LABEL_23;
      }
      unint64_t v12 = *(void *)(v11 + 8 * (v6 + 3));
      if (v12)
      {
        int64_t v8 = v6 + 3;
        goto LABEL_14;
      }

      int64_t v13 = v6 + 4;
      int64_t v10 = v6 + 3;
      if (v6 + 4 >= v9) {
        goto LABEL_23;
      }
      unint64_t v12 = *(void *)(v11 + 8 * v13);
      if (!v12)
      {
        int64_t v8 = v6 + 5;
        int64_t v10 = v6 + 4;
        if (v6 + 5 >= v9) {
          goto LABEL_23;
        }
        unint64_t v12 = *(void *)(v11 + 8 * v8);
        if (!v12)
        {
          int64_t v10 = v9 - 1;
          int64_t v14 = v6 + 6;
          while (v9 != v14)
          {
            unint64_t v12 = *(void *)(v11 + 8 * v14++);
            if (v12)
            {
              int64_t v8 = v14 - 1;
              goto LABEL_14;
            }
          }

uint64_t sub_1006013B4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  unint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  unint64_t v7 = a1[5];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v7;
  sub_10001736C(v3, v2);
  sub_10001736C(v4, v5);
  return sub_10001736C(v6, v7);
}

uint64_t sub_100601408@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  char v3 = *(_BYTE *)(a1 + 24);
  *(void *)a2 = *(void *)a1;
  __int128 v4 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 24) = v3;
  return sub_10001736C(v2, v4);
}

uint64_t sub_10060142C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009AC570);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100601474(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009AC570);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1006014BC()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1006014CC(uint64_t a1)
{
  return sub_1005FEE14(a1, *(_BYTE *)(v1 + 16));
}

void sub_1006014D4(uint64_t a1, void (*a2)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v21 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v7 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v7 << 6);
      goto LABEL_5;
    }

    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v17 >= v21) {
      goto LABEL_23;
    }
    unint64_t v18 = *(void *)(v20 + 8 * v17);
    ++v7;
    if (!v18)
    {
      int64_t v7 = v17 + 1;
      if (v17 + 1 >= v21) {
        goto LABEL_23;
      }
      unint64_t v18 = *(void *)(v20 + 8 * v7);
      if (!v18)
      {
        int64_t v7 = v17 + 2;
        if (v17 + 2 >= v21) {
          goto LABEL_23;
        }
        unint64_t v18 = *(void *)(v20 + 8 * v7);
        if (!v18)
        {
          int64_t v7 = v17 + 3;
          if (v17 + 3 >= v21) {
            goto LABEL_23;
          }
          unint64_t v18 = *(void *)(v20 + 8 * v7);
          if (!v18) {
            break;
          }
        }
      }
    }

void *sub_1006016B0(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  v28[1] = a2;
  uint64_t v5 = sub_100004AEC(&qword_1009B6F70);
  __chkstk_darwin(v5);
  int64_t v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t RequestBeacon_OwnedDevice = type metadata accessor for FetchRequestBeacon_OwnedDevice(0LL);
  uint64_t v9 = *(void *)(RequestBeacon_OwnedDevice - 8);
  uint64_t v10 = __chkstk_darwin(RequestBeacon_OwnedDevice);
  uint64_t v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v33 = (uint64_t)v28 - v13;
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0LL);
  __chkstk_darwin(RequestBeacon);
  int64_t v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = *(void *)(a1 + 16);
  if (!v18) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v19 = a1 + ((*(unsigned __int8 *)(v15 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  uint64_t v20 = *(void *)(v15 + 72);
  int64_t v21 = _swiftEmptyArrayStorage;
  char v22 = type metadata accessor for FetchRequestBeacon;
  uint64_t v31 = RequestBeacon_OwnedDevice;
  uint64_t v32 = v12;
  do
  {
    sub_10001DC4C(v19, (uint64_t)v17, v22);
    sub_10001DC4C((uint64_t)v17, (uint64_t)v7, v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0LL, 1LL, RequestBeacon_OwnedDevice);
    sub_100018C68((uint64_t)v17, v22);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1LL, RequestBeacon_OwnedDevice) == 1)
    {
      sub_100015794((uint64_t)v7, &qword_1009B6F70);
    }

    else
    {
      uint64_t v23 = v22;
      uint64_t v24 = v33;
      sub_10060246C((uint64_t)v7, v33);
      sub_10060246C(v24, (uint64_t)v12);
      if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0) {
        int64_t v21 = (void *)sub_1004C5DC4(0, v21[2] + 1LL, 1, (unint64_t)v21);
      }
      unint64_t v26 = v21[2];
      unint64_t v25 = v21[3];
      if (v26 >= v25 >> 1) {
        int64_t v21 = (void *)sub_1004C5DC4(v25 > 1, v26 + 1, 1, (unint64_t)v21);
      }
      Swift::UInt v21[2] = v26 + 1;
      uint64_t v12 = v32;
      sub_10060246C( (uint64_t)v32,  (uint64_t)v21 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
      + *(void *)(v9 + 72) * v26);
      char v22 = v23;
      uint64_t RequestBeacon_OwnedDevice = v31;
    }

    v19 += v20;
    --v18;
  }

  while (v18);
  return v21;
}

uint64_t sub_100601934(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  *(_BYTE *)(v6 + 33_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = a5;
  *(void *)(v6 + 136) = a4;
  *(void *)(v6 + 144) = a6;
  *(_BYTE *)(v6 + 336) = a2;
  *(void *)(v6 + 120) = a1;
  *(void *)(v6 + 128) = a3;
  uint64_t v7 = type metadata accessor for HashAlgorithm(0LL);
  *(void *)(v6 + 15_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v6 + 160) = v8;
  *(void *)(v6 + 168) = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Date(0LL);
  *(void *)(v6 + 176) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v6 + 184) = v10;
  *(void *)(v6 + 19_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0LL);
  *(void *)(v6 + 200) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v6 + 208) = v12;
  *(void *)(v6 + 2swift_weakDestroy(v0 + 16) = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1006019F0, 0LL, 0LL);
}

void sub_1006019F0()
{
  uint64_t v1 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  *(void *)(v0 + 224) = JSONEncoder.init()();
  if (qword_10099B668 != -1) {
    swift_once(&qword_10099B668, sub_1005FBE6C);
  }
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v4 = *(void *)(v0 + 200);
  int v5 = *(unsigned __int8 *)(v0 + 337);
  uint64_t v6 = sub_10000A720(v4, (uint64_t)qword_1009B6F30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v4);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter(v2);
  uint64_t v7 = *(void *)(v0 + 128);
  uint64_t v8 = *(void *)(v0 + 136);
  int v9 = *(unsigned __int8 *)(v0 + 336);
  if (v5 == 1)
  {
    uint64_t v10 = sub_1006016B0(*(void *)(v0 + 120), v9, v7, v8);
    char v12 = v11;
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 48) = v10;
    *(_BYTE *)(v0 + 56) = v12;
    *(void *)(v0 + 64) = v14;
    *(void *)(v0 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v16;
    unint64_t v17 = sub_100602414();
    uint64_t v18 = dispatch thunk of JSONEncoder.encode<A>(_:)(v0 + 48, &type metadata for OwnedDeviceFetchRequestContent, v17);
  }

  else
  {
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = *(void *)(v0 + 120);
    *(_BYTE *)(v0 + 24) = v9;
    *(void *)(v0 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v7;
    *(void *)(v0 + 40) = v8;
    unint64_t v20 = sub_1006023D0();
    uint64_t v18 = dispatch thunk of JSONEncoder.encode<A>(_:)(v0 + 16, &type metadata for FetchRequestContent, v20);
  }

  uint64_t v21 = v18;
  uint64_t v22 = v19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 23_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v22;
  *(void *)(v0 + 240) = v21;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10005C260( 1702195828LL,  0xE400000000000000LL,  0xD00000000000001BLL,  0x8000000100855CD0LL,  isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  id v24 = [(id)objc_opt_self(AKDevice) currentDevice];
  if (v24)
  {
    unint64_t v25 = v24;
    id v26 = [v24 serverFriendlyDescription];

    if (v26)
    {
      uint64_t v28 = *(void *)(v0 + 184);
      uint64_t v27 = *(void *)(v0 + 192);
      uint64_t v29 = *(void *)(v0 + 176);
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      uint64_t v32 = v31;

      char v33 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      sub_10005C260(v30, v32, 0xD000000000000011LL, 0x8000000100854B60LL, v33);
      uint64_t v34 = swift_bridgeObjectRelease();
      uint64_t v35 = Date.init()(v34);
      uint64_t v36 = Date.epoch.getter(v35);
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
      *(void *)(v0 + 96) = v36;
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
      uint64_t v39 = v38;
      char v40 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      sub_10005C260(v37, v39, 0xD000000000000015LL, 0x8000000100855CF0LL, v40);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 104) = 1LL;
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      uint64_t v43 = v42;
      char v44 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      sub_10005C260(v41, v43, 0xD000000000000013LL, 0x8000000100855D10LL, v44);
      uint64_t v45 = swift_bridgeObjectRelease();
      uint64_t v46 = sub_1003F3498(v45);
      uint64_t v48 = v47;
      char v49 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      sub_10005C260(v46, v48, 0x6567412D72657355LL, 0xEA0000000000746ELL, v49);
      swift_bridgeObjectRelease();
      char v50 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      sub_10005C260(52LL, 0xE100000000000000LL, 0x762D747065636341LL, 0xEE006E6F69737265LL, v50);
      *(void *)(v0 + 248) = _swiftEmptyDictionarySingleton;
      swift_bridgeObjectRelease();
      uint64_t v52 = (void (__cdecl *)())((char *)&dword_1009AD090 + dword_1009AD090);
      uint64_t v51 = (void *)swift_task_alloc(unk_1009AD094);
      *(void *)(v0 + 256) = v51;
      *uint64_t v51 = v0;
      v51[1] = sub_100601EA4;
      v52();
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t sub_100601EA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 256);
  *(void *)(v3 + 264) = a1;
  *(void *)(v3 + 27_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_100601F00, 0LL, 0LL);
}

uint64_t sub_100601F00()
{
  uint64_t v2 = v0[33];
  unint64_t v1 = v0[34];
  unint64_t v4 = v0[29];
  uint64_t v3 = v0[30];
  uint64_t v6 = v0[20];
  uint64_t v5 = v0[21];
  uint64_t v7 = v0[19];
  v0[10] = v2;
  v0[11] = v1;
  sub_10001736C(v3, v4);
  sub_10001736C(v2, v1);
  sub_1004A8638(v3, v4);
  sub_100016F9C(v3, v4);
  sub_100016F9C(v2, v1);
  uint64_t v8 = v0[10];
  uint64_t v9 = v0[11];
  v0[35] = v8;
  v0[36] = v9;
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  uint64_t v10 = Data.hash(algorithm:)(v5, v8, v9);
  uint64_t v12 = v11;
  v0[37] = v10;
  v0[38] = v11;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v15 = (char *)&dword_1009AD088 + dword_1009AD088;
  uint64_t v13 = (void *)swift_task_alloc(unk_1009AD08C);
  v0[39] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_10060202C;
  return ((uint64_t (*)(uint64_t, uint64_t, void))v15)(v10, v12, v0[18]);
}

uint64_t sub_10060202C(uint64_t a1)
{
  unint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 312LL);
  *(void *)(*(void *)v2 + 32Hasher.init(_seed:)(v1, 0LL) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_100602190;
  }

  else
  {
    uint64_t v7 = v4[37];
    unint64_t v8 = v4[38];
    v4[41] = a1;
    sub_100016F9C(v7, v8);
    uint64_t v6 = sub_1006020A8;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1006020A8()
{
  uint64_t v2 = *(void *)(v0 + 320);
  uint64_t v1 = *(void *)(v0 + 328);
  uint64_t v3 = *(void *)(v0 + 248);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  uint64_t v11 = v3;
  sub_100129198(v1, (uint64_t)sub_1003F68BC, 0LL, isUniquelyReferenced_nonNull_native, &v11);
  if (v2) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v6 = *(void *)(v0 + 280);
  unint64_t v7 = *(void *)(v0 + 288);
  uint64_t v8 = v11;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_100016F9C(v6, v7);
  uint64_t v9 = *(void *)(v0 + 192);
  uint64_t v10 = *(void *)(v0 + 168);
  swift_task_dealloc(*(void *)(v0 + 216));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(uint64_t, void, void))(v0 + 8))(v8, *(void *)(v0 + 240), *(void *)(v0 + 232));
}

uint64_t sub_100602190()
{
  uint64_t v1 = *(void *)(v0 + 280);
  unint64_t v2 = *(void *)(v0 + 288);
  sub_100016F9C(*(void *)(v0 + 296), *(void *)(v0 + 304));
  sub_100016F9C(v1, v2);
  if (qword_10099B6E8 != -1) {
    swift_once(&qword_10099B6E8, sub_100651020);
  }
  uint64_t v3 = *(void *)(v0 + 320);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10000A720(v4, (uint64_t)qword_100A2AFE8);
  swift_errorRetain(v3);
  uint64_t v5 = swift_errorRetain(v3);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter(v6);
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 320);
  if (v8)
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v10 = 138543362;
    swift_errorRetain(v9);
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(void *)(v0 + 11_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v10 + 4, v10 + 12);
    uint64_t *v11 = v12;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "Failed to generate fetch request attestation header: %{public}@.",  v10,  0xCu);
    uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v11, 1LL, v13);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_release();
    swift_release();

    swift_errorRelease(v9);
  }

  else
  {
    swift_release();
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    swift_release();
  }

  uint64_t v14 = *(void *)(v0 + 248);
  uint64_t v15 = *(void *)(v0 + 192);
  uint64_t v16 = *(void *)(v0 + 168);
  swift_task_dealloc(*(void *)(v0 + 216));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(uint64_t, void, void))(v0 + 8))( v14,  *(void *)(v0 + 240),  *(void *)(v0 + 232));
}

unint64_t sub_1006023D0()
{
  unint64_t result = qword_1009B6F60;
  if (!qword_1009B6F60)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080DC1C, &type metadata for FetchRequestContent);
    atomic_store(result, (unint64_t *)&qword_1009B6F60);
  }

  return result;
}

unint64_t sub_100602414()
{
  unint64_t result = qword_1009B6F68;
  if (!qword_1009B6F68)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080DBF4, &type metadata for OwnedDeviceFetchRequestContent);
    atomic_store(result, (unint64_t *)&qword_1009B6F68);
  }

  return result;
}

uint64_t type metadata accessor for FetchRequestBeacon_OwnedDevice(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009B6FD0, (uint64_t)&nominal type descriptor for FetchRequestBeacon_OwnedDevice);
}

uint64_t sub_10060246C(uint64_t a1, uint64_t a2)
{
  uint64_t RequestBeacon_OwnedDevice = type metadata accessor for FetchRequestBeacon_OwnedDevice(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(RequestBeacon_OwnedDevice - 8) + 32LL))( a2,  a1,  RequestBeacon_OwnedDevice);
  return a2;
}

uint64_t sub_1006024B0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1005FDB8C(a1, a2, a3, a4, *(uint64_t **)(v4 + 16), *(uint64_t **)(v4 + 24));
}

uint64_t *sub_1006024B8(uint64_t *a1, uint64_t *a2)
{
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0LL);
  int v5 = *(_DWORD *)(*(void *)(RequestBeacon - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v6 = (int *)RequestBeacon;
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = v6[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for DateInterval(0LL);
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    if (v13(v10, 1LL, v11))
    {
      uint64_t v14 = sub_100004AEC(&qword_1009AC570);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
    }

    uint64_t v16 = v6[6];
    unint64_t v17 = (char *)a1 + v16;
    uint64_t v18 = (char *)a2 + v16;
    if (v13((char *)a2 + v16, 1LL, v11))
    {
      uint64_t v19 = sub_100004AEC(&qword_1009AC570);
      memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v17, v18, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v17, 0LL, 1LL, v11);
    }

    uint64_t v20 = v6[7];
    uint64_t v21 = *(uint64_t *)((char *)a2 + v20);
    *(uint64_t *)((char *)a1 + v20) = v21;
    *(_OWORD *)((char *)a1 + v6[8]) = *(_OWORD *)((char *)a2 + v6[8]);
    uint64_t v22 = v6[9];
    uint64_t v23 = *(uint64_t *)((char *)a2 + v22);
    *(uint64_t *)((char *)a1 + v2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v23;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v23);
  }

  return a1;
}

uint64_t sub_100602670(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0LL);
  uint64_t v4 = a1 + *(int *)(RequestBeacon + 20);
  uint64_t v5 = type metadata accessor for DateInterval(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1LL, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = a1 + *(int *)(RequestBeacon + 24);
  if (!v7(v8, 1LL, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100602744(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  uint64_t RequestBeacon = (int *)type metadata accessor for FetchRequestBeacon(0LL);
  uint64_t v6 = RequestBeacon[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for DateInterval(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1LL, v9))
  {
    uint64_t v12 = sub_100004AEC(&qword_1009AC570);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  uint64_t v13 = RequestBeacon[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if (v11((const void *)(a2 + v13), 1LL, v9))
  {
    uint64_t v16 = sub_100004AEC(&qword_1009AC570);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v14, v15, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0LL, 1LL, v9);
  }

  uint64_t v17 = RequestBeacon[7];
  uint64_t v18 = *(void *)(a2 + v17);
  *(void *)(a1 + v1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = v18;
  *(_OWORD *)(a1 + RequestBeacon[8]) = *(_OWORD *)(a2 + RequestBeacon[8]);
  uint64_t v19 = RequestBeacon[9];
  uint64_t v20 = *(void *)(a2 + v19);
  *(void *)(a1 + v19) = v20;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v20);
  return a1;
}

uint64_t sub_1006028D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a1, a2, v4);
  uint64_t RequestBeacon = (int *)type metadata accessor for FetchRequestBeacon(0LL);
  uint64_t v6 = RequestBeacon[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for DateInterval(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1LL, v9);
  int v13 = v11(v8, 1LL, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_100004AEC(&qword_1009AC570);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = RequestBeacon[6];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  int v18 = v11((void *)(a1 + v15), 1LL, v9);
  int v19 = v11(v17, 1LL, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v16, v17, v9);
      goto LABEL_13;
    }

    (*(void (**)(void *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }

  if (v19)
  {
LABEL_12:
    uint64_t v20 = sub_100004AEC(&qword_1009AC570);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v16, v17, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0LL, 1LL, v9);
LABEL_13:
  uint64_t v21 = RequestBeacon[7];
  uint64_t v22 = *(void *)(a2 + v21);
  *(void *)(a1 + v21) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease();
  uint64_t v23 = RequestBeacon[8];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  *(_BYTE *)uint64_t v24 = *(_BYTE *)v25;
  *(_BYTE *)(v24 + 1) = *(_BYTE *)(v25 + 1);
  *(void *)(v24 + 8) = *(void *)(v25 + 8);
  uint64_t v26 = RequestBeacon[9];
  uint64_t v27 = *(void *)(a2 + v26);
  *(void *)(a1 + v26) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100602B18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  uint64_t RequestBeacon = (int *)type metadata accessor for FetchRequestBeacon(0LL);
  uint64_t v6 = RequestBeacon[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for DateInterval(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1LL, v9))
  {
    uint64_t v12 = sub_100004AEC(&qword_1009AC570);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  uint64_t v13 = RequestBeacon[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if (v11((const void *)(a2 + v13), 1LL, v9))
  {
    uint64_t v16 = sub_100004AEC(&qword_1009AC570);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0LL, 1LL, v9);
  }

  *(void *)(a1 + RequestBeacon[7]) = *(void *)(a2 + RequestBeacon[7]);
  *(_OWORD *)(a1 + RequestBeacon[8]) = *(_OWORD *)(a2 + RequestBeacon[8]);
  *(void *)(a1 + RequestBeacon[9]) = *(void *)(a2 + RequestBeacon[9]);
  return a1;
}

uint64_t sub_100602C98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a1, a2, v4);
  uint64_t RequestBeacon = (int *)type metadata accessor for FetchRequestBeacon(0LL);
  uint64_t v6 = RequestBeacon[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for DateInterval(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1LL, v9);
  int v13 = v11(v8, 1LL, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_100004AEC(&qword_1009AC570);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = RequestBeacon[6];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  int v18 = v11((void *)(a1 + v15), 1LL, v9);
  int v19 = v11(v17, 1LL, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v16, v17, v9);
      goto LABEL_13;
    }

    (*(void (**)(void *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }

  if (v19)
  {
LABEL_12:
    uint64_t v20 = sub_100004AEC(&qword_1009AC570);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v16, v17, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0LL, 1LL, v9);
LABEL_13:
  *(void *)(a1 + RequestBeacon[7]) = *(void *)(a2 + RequestBeacon[7]);
  swift_bridgeObjectRelease();
  uint64_t v21 = RequestBeacon[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(_BYTE *)uint64_t v22 = *(_BYTE *)v23;
  *(_BYTE *)(v22 + 1) = *(_BYTE *)(v23 + 1);
  *(void *)(v22 + 8) = *(void *)(v23 + 8);
  *(void *)(a1 + RequestBeacon[9]) = *(void *)(a2 + RequestBeacon[9]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100602ED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100602EDC);
}

uint64_t sub_100602EDC(uint64_t a1, uint64_t a2)
{
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(RequestBeacon - 8) + 48LL))( a1,  a2,  RequestBeacon);
}

uint64_t sub_100602F18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100602F24);
}

uint64_t sub_100602F24(uint64_t a1, uint64_t a2)
{
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RequestBeacon - 8) + 56LL))( a1,  a2,  a2,  RequestBeacon);
}

uint64_t sub_100602F64(uint64_t a1)
{
  uint64_t result = type metadata accessor for FetchRequestBeacon(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 1LL, &v4, a1 + 16);
    return 0LL;
  }

  return result;
}

ValueMetadata *type metadata accessor for OwnedDeviceFetchRequestContent()
{
  return &type metadata for OwnedDeviceFetchRequestContent;
}

uint64_t destroy for FetchRequestContent(void *a1)
{
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t _s12searchpartyd30OwnedDeviceFetchRequestContentVwcp_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  uint64_t v4 = a2[3];
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = a2[2];
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *_s12searchpartyd30OwnedDeviceFetchRequestContentVwca_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t *_s12searchpartyd30OwnedDeviceFetchRequestContentVwta_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  uint64_t v5 = a2[3];
  uint64_t v6 = a1[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

ValueMetadata *type metadata accessor for FetchRequestContent()
{
  return &type metadata for FetchRequestContent;
}

ValueMetadata *type metadata accessor for FetchRequest()
{
  return &type metadata for FetchRequest;
}

ValueMetadata *type metadata accessor for FetchRequestContext.FetchRequestContextPolicy()
{
  return &type metadata for FetchRequestContext.FetchRequestContextPolicy;
}

ValueMetadata *type metadata accessor for FetchRequestBeacon.SearchContext.Mode()
{
  return &type metadata for FetchRequestBeacon.SearchContext.Mode;
}

uint64_t storeEnumTagSinglePayload for FetchRequestBeacon.FetchRequestBeaconError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10060319C + 4 * byte_10080D83B[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1006031BC + 4 * byte_10080D840[v4]))();
  }
}

_BYTE *sub_10060319C(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_1006031BC(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1006031C4(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1006031CC(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1006031D4(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1006031DC(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FetchRequestBeacon.FetchRequestBeaconError()
{
  return &type metadata for FetchRequestBeacon.FetchRequestBeaconError;
}

uint64_t *sub_1006031F8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for DateInterval(0LL);
    uint64_t v12 = *(void *)(v11 - 8);
    int v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    if (v13(v10, 1LL, v11))
    {
      uint64_t v14 = sub_100004AEC(&qword_1009AC570);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
    }

    uint64_t v16 = a3[6];
    uint64_t v17 = (char *)a1 + v16;
    int v18 = (char *)a2 + v16;
    if (v13((char *)a2 + v16, 1LL, v11))
    {
      uint64_t v19 = sub_100004AEC(&qword_1009AC570);
      memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v17, v18, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v17, 0LL, 1LL, v11);
    }

    uint64_t v20 = a3[7];
    uint64_t v21 = a3[8];
    uint64_t v22 = *(uint64_t *)((char *)a2 + v20);
    *(uint64_t *)((char *)a1 + v20) = v22;
    *(_OWORD *)((char *)a1 + v21) = *(_OWORD *)((char *)a2 + v21);
    uint64_t v23 = a3[9];
    uint64_t v24 = *(uint64_t *)((char *)a2 + v23);
    *(uint64_t *)((char *)a1 + v23) = v24;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v24);
  }

  return a1;
}

uint64_t sub_1006033A4(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = type metadata accessor for DateInterval(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1LL, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v9 = a1 + a2[6];
  if (!v8(v9, 1LL, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  swift_bridgeObjectRelease(*(void *)(a1 + a2[7]));
  return swift_bridgeObjectRelease(*(void *)(a1 + a2[9]));
}

uint64_t sub_100603470(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for DateInterval(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1LL, v10))
  {
    uint64_t v13 = sub_100004AEC(&qword_1009AC570);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
  }

  uint64_t v14 = a3[6];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (const void *)(a2 + v14);
  if (v12((const void *)(a2 + v14), 1LL, v10))
  {
    uint64_t v17 = sub_100004AEC(&qword_1009AC570);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v15, v16, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v15, 0LL, 1LL, v10);
  }

  uint64_t v18 = a3[7];
  uint64_t v19 = a3[8];
  uint64_t v20 = *(void *)(a2 + v18);
  *(void *)(a1 + v18) = v20;
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  uint64_t v21 = a3[9];
  uint64_t v22 = *(void *)(a2 + v21);
  *(void *)(a1 + v21) = v22;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v22);
  return a1;
}

uint64_t sub_1006035F0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for DateInterval(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100004AEC(&qword_1009AC570);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = a3[6];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  int v19 = v12((void *)(a1 + v16), 1LL, v10);
  int v20 = v12(v18, 1LL, v10);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v17, v18, v10);
      goto LABEL_13;
    }

    (*(void (**)(void *, uint64_t))(v11 + 8))(v17, v10);
    goto LABEL_12;
  }

  if (v20)
  {
LABEL_12:
    uint64_t v21 = sub_100004AEC(&qword_1009AC570);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v17, v18, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v17, 0LL, 1LL, v10);
LABEL_13:
  uint64_t v22 = a3[7];
  uint64_t v23 = *(void *)(a2 + v22);
  *(void *)(a1 + v2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[8];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  *(_BYTE *)uint64_t v25 = *(_BYTE *)v26;
  *(_BYTE *)(v25 + 1) = *(_BYTE *)(v26 + 1);
  *(void *)(v25 + 8) = *(void *)(v26 + 8);
  uint64_t v27 = a3[9];
  uint64_t v28 = *(void *)(a2 + v27);
  *(void *)(a1 + v2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100603830(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for DateInterval(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1LL, v10))
  {
    uint64_t v13 = sub_100004AEC(&qword_1009AC570);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
  }

  uint64_t v14 = a3[6];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (const void *)(a2 + v14);
  if (v12((const void *)(a2 + v14), 1LL, v10))
  {
    uint64_t v17 = sub_100004AEC(&qword_1009AC570);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v15, v16, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v15, 0LL, 1LL, v10);
  }

  uint64_t v18 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1006039A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for DateInterval(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100004AEC(&qword_1009AC570);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = a3[6];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  int v19 = v12((void *)(a1 + v16), 1LL, v10);
  int v20 = v12(v18, 1LL, v10);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v17, v18, v10);
      goto LABEL_13;
    }

    (*(void (**)(void *, uint64_t))(v11 + 8))(v17, v10);
    goto LABEL_12;
  }

  if (v20)
  {
LABEL_12:
    uint64_t v21 = sub_100004AEC(&qword_1009AC570);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v17, v18, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v17, 0LL, 1LL, v10);
LABEL_13:
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[8];
  uint64_t v23 = a3[9];
  uint64_t v24 = a1 + v22;
  uint64_t v25 = a2 + v22;
  *(_BYTE *)uint64_t v24 = *(_BYTE *)v25;
  *(_BYTE *)(v24 + 1) = *(_BYTE *)(v25 + 1);
  *(void *)(v24 + 8) = *(void *)(v25 + 8);
  *(void *)(a1 + v23) = *(void *)(a2 + v23);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100603BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100603BDC);
}

uint64_t sub_100603BDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  uint64_t v11 = sub_100004AEC(&qword_1009AC570);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }

  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 28));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_100603C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100603C94);
}

uint64_t sub_100603C94(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
    return v11(v12, a2, a2, v10);
  }

  uint64_t result = sub_100004AEC(&qword_1009AC570);
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }

  *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

void sub_100603D3C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v6 = *(void *)(v2 - 8) + 64LL;
    sub_100603DDC(319LL);
    if (v5 <= 0x3F)
    {
      uint64_t v7 = *(void *)(v4 - 8) + 64LL;
      uint64_t v8 = v7;
      uint64_t v9 = (char *)&value witness table for Builtin.BridgeObject + 64;
      uint64_t v10 = &unk_10080D938;
      uint64_t v11 = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_initStructMetadata(a1, 256LL, 6LL, &v6, a1 + 16);
    }
  }

void sub_100603DDC(uint64_t a1)
{
  if (!qword_1009B7070)
  {
    uint64_t v2 = type metadata accessor for DateInterval(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1009B7070);
    }
  }

unint64_t sub_100603E34()
{
  unint64_t result = qword_1009B70B0;
  if (!qword_1009B70B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080DA04, &type metadata for FetchRequestBeacon.FetchRequestBeaconError);
    atomic_store(result, (unint64_t *)&qword_1009B70B0);
  }

  return result;
}

unint64_t sub_100603E7C()
{
  unint64_t result = qword_1009B70B8;
  if (!qword_1009B70B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080DACC, &type metadata for FetchRequestBeacon.SearchContext.Mode);
    atomic_store(result, (unint64_t *)&qword_1009B70B8);
  }

  return result;
}

unint64_t sub_100603EC4()
{
  unint64_t result = qword_1009B70C0;
  if (!qword_1009B70C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080DB94, &type metadata for FetchRequestContext.FetchRequestContextPolicy);
    atomic_store(result, (unint64_t *)&qword_1009B70C0);
  }

  return result;
}

unint64_t sub_100603F08()
{
  unint64_t result = qword_1009B70D0;
  if (!qword_1009B70D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E1C8, &type metadata for FetchRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B70D0);
  }

  return result;
}

unint64_t sub_100603F4C()
{
  unint64_t result = qword_1009B70E0;
  if (!qword_1009B70E0)
  {
    uint64_t v1 = sub_100004B78(&qword_1009B70D8);
    sub_100007864(&qword_1009B70E8, type metadata accessor for FetchRequestBeacon, (uint64_t)&unk_10080D99C);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009B70E0);
  }

  return result;
}

unint64_t sub_100603FC8()
{
  unint64_t result = qword_1009B70F0;
  if (!qword_1009B70F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E1A0, &type metadata for FetchRequestContext);
    atomic_store(result, (unint64_t *)&qword_1009B70F0);
  }

  return result;
}

unint64_t sub_10060400C()
{
  unint64_t result = qword_1009B7100;
  if (!qword_1009B7100)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E150, &type metadata for OwnedDeviceFetchRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B7100);
  }

  return result;
}

unint64_t sub_100604050()
{
  unint64_t result = qword_1009B7110;
  if (!qword_1009B7110)
  {
    uint64_t v1 = sub_100004B78(&qword_1009B7108);
    sub_100007864(&qword_1009B7118, type metadata accessor for FetchRequestBeacon_OwnedDevice, (uint64_t)&unk_10080DBCC);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009B7110);
  }

  return result;
}

unint64_t sub_1006040CC()
{
  unint64_t result = qword_1009B7128;
  if (!qword_1009B7128)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E100, &type metadata for FetchRequestBeacon_OwnedDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B7128);
  }

  return result;
}

unint64_t sub_100604110()
{
  unint64_t result = qword_1009A2798;
  if (!qword_1009A2798)
  {
    uint64_t v1 = sub_100004B78(&qword_10099E868);
    sub_1000170A4();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009A2798);
  }

  return result;
}

unint64_t sub_100604174(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100935230, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5) {
    return 5LL;
  }
  else {
    return v3;
  }
}

unint64_t sub_1006041BC(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1009354B8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

unint64_t sub_100604204()
{
  unint64_t result = qword_1009B7130;
  if (!qword_1009B7130)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080DB1C, &type metadata for FetchRequestContext.FetchRequestContextPolicy);
    atomic_store(result, (unint64_t *)&qword_1009B7130);
  }

  return result;
}

unint64_t sub_100604248()
{
  unint64_t result = qword_1009B7138;
  if (!qword_1009B7138)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080DA54, &type metadata for FetchRequestBeacon.SearchContext.Mode);
    atomic_store(result, (unint64_t *)&qword_1009B7138);
  }

  return result;
}

unint64_t sub_10060428C()
{
  unint64_t result = qword_1009B7148;
  if (!qword_1009B7148)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E0B0, &type metadata for FetchRequestBeacon.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B7148);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for FetchRequestBeacon.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10060431C + 4 * byte_10080D84A[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100604350 + 4 * byte_10080D845[v4]))();
}

uint64_t sub_100604350(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100604358(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100604360LL);
  }
  return result;
}

uint64_t sub_10060436C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100604374LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_100604378(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100604380(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FetchRequestBeacon.CodingKeys()
{
  return &type metadata for FetchRequestBeacon.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for FetchRequestBeacon_OwnedDevice.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_1006043E8 + 4 * byte_10080D854[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_10060441C + 4 * byte_10080D84F[v4]))();
}

uint64_t sub_10060441C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100604424(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10060442CLL);
  }
  return result;
}

uint64_t sub_100604438(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100604440LL);
  }
  *(_BYTE *)unint64_t result = a2 + 8;
  return result;
}

uint64_t sub_100604444(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10060444C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FetchRequestBeacon_OwnedDevice.CodingKeys()
{
  return &type metadata for FetchRequestBeacon_OwnedDevice.CodingKeys;
}

ValueMetadata *type metadata accessor for OwnedDeviceFetchRequestContent.CodingKeys()
{
  return &type metadata for OwnedDeviceFetchRequestContent.CodingKeys;
}

ValueMetadata *type metadata accessor for FetchRequestContent.CodingKeys()
{
  return &type metadata for FetchRequestContent.CodingKeys;
}

uint64_t getEnumTagSinglePayload for FetchRequestBeacon.SearchContext(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 1);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for FetchRequestBeacon.SearchContext( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 1) = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for FetchRequestBeacon.SearchContext()
{
  return &type metadata for FetchRequestBeacon.SearchContext;
}

uint64_t getEnumTagSinglePayload for FetchRequestContext(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FetchRequestContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + swift_weakDestroy(v0 + 16) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for FetchRequestContext()
{
  return &type metadata for FetchRequestContext;
}

unint64_t sub_1006045E0()
{
  unint64_t result = qword_1009B7150;
  if (!qword_1009B7150)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080DDF0, &type metadata for FetchRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B7150);
  }

  return result;
}

unint64_t sub_100604628()
{
  unint64_t result = qword_1009B7158;
  if (!qword_1009B7158)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080DEA8, &type metadata for OwnedDeviceFetchRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B7158);
  }

  return result;
}

unint64_t sub_100604670()
{
  unint64_t result = qword_1009B7160;
  if (!qword_1009B7160)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080DF98, &type metadata for FetchRequestBeacon_OwnedDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B7160);
  }

  return result;
}

unint64_t sub_1006046B8()
{
  unint64_t result = qword_1009B7168;
  if (!qword_1009B7168)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E088, &type metadata for FetchRequestBeacon.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B7168);
  }

  return result;
}

unint64_t sub_100604700()
{
  unint64_t result = qword_1009B7170;
  if (!qword_1009B7170)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080DFC0, &type metadata for FetchRequestBeacon.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B7170);
  }

  return result;
}

unint64_t sub_100604748()
{
  unint64_t result = qword_1009B7178;
  if (!qword_1009B7178)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080DFE8, &type metadata for FetchRequestBeacon.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B7178);
  }

  return result;
}

unint64_t sub_100604790()
{
  unint64_t result = qword_1009B7180;
  if (!qword_1009B7180)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080DED0, &type metadata for FetchRequestBeacon_OwnedDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B7180);
  }

  return result;
}

unint64_t sub_1006047D8()
{
  unint64_t result = qword_1009B7188;
  if (!qword_1009B7188)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080DEF8, &type metadata for FetchRequestBeacon_OwnedDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B7188);
  }

  return result;
}

unint64_t sub_100604820()
{
  unint64_t result = qword_1009B7190;
  if (!qword_1009B7190)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080DE18, &type metadata for OwnedDeviceFetchRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B7190);
  }

  return result;
}

unint64_t sub_100604868()
{
  unint64_t result = qword_1009B7198;
  if (!qword_1009B7198)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080DE40, &type metadata for OwnedDeviceFetchRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B7198);
  }

  return result;
}

unint64_t sub_1006048B0()
{
  unint64_t result = qword_1009B71A0;
  if (!qword_1009B71A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080DD60, &type metadata for FetchRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B71A0);
  }

  return result;
}

unint64_t sub_1006048F8()
{
  unint64_t result = qword_1009B71A8;
  if (!qword_1009B71A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080DD88, &type metadata for FetchRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B71A8);
  }

  return result;
}

unint64_t sub_10060493C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100936980, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 9) {
    return 9LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_100604984(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x72617069746C756DLL && a2 == 0xEE00746E756F4374LL)
  {
    unint64_t v5 = 0xEE00746E756F4374LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72617069746C756DLL, 0xEE00746E756F4374LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 1701080941 && a2 == 0xE400000000000000LL)
  {
    unint64_t v7 = 0xE400000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701080941LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 1701273968 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(1701273968LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_100604ADC(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x7963696C6F70LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v5 = 0xE600000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7963696C6F70LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0xD000000000000016LL && a2 == 0x800000010086AF00LL)
  {
    swift_bridgeObjectRelease(0x800000010086AF00LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016LL, 0x800000010086AF00LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_100604BC0(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x686372616573LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v5 = 0xE600000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x686372616573LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x747865746E6F63LL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x747865746E6F63LL, 0xE700000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

unint64_t sub_100604CA8()
{
  unint64_t result = qword_1009B71B8;
  if (!qword_1009B71B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E3D8, &type metadata for FetchRequestContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B71B8);
  }

  return result;
}

unint64_t sub_100604CEC()
{
  unint64_t result = qword_1009B71C0;
  if (!qword_1009B71C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080DAF4, &type metadata for FetchRequestContext.FetchRequestContextPolicy);
    atomic_store(result, (unint64_t *)&qword_1009B71C0);
  }

  return result;
}

unint64_t sub_100604D30()
{
  unint64_t result = qword_1009B71D0;
  if (!qword_1009B71D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E388, &type metadata for FetchRequestBeacon.SearchContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B71D0);
  }

  return result;
}

unint64_t sub_100604D74()
{
  unint64_t result = qword_1009B71D8;
  if (!qword_1009B71D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080DA2C, &type metadata for FetchRequestBeacon.SearchContext.Mode);
    atomic_store(result, (unint64_t *)&qword_1009B71D8);
  }

  return result;
}

uint64_t _s12searchpartyd19FetchRequestContextV25FetchRequestContextPolicyOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100604E04 + 4 * byte_10080D85E[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100604E38 + 4 * byte_10080D859[v4]))();
}

uint64_t sub_100604E38(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100604E40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100604E48LL);
  }
  return result;
}

uint64_t sub_100604E54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100604E5CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100604E60(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100604E68(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FetchRequestBeacon.SearchContext.CodingKeys()
{
  return &type metadata for FetchRequestBeacon.SearchContext.CodingKeys;
}

uint64_t _s12searchpartyd18FetchRequestBeaconV13SearchContextV4ModeOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100604ED0 + 4 * byte_10080D868[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100604F04 + 4 * byte_10080D863[v4]))();
}

uint64_t sub_100604F04(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100604F0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100604F14LL);
  }
  return result;
}

uint64_t sub_100604F20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100604F28LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100604F2C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100604F34(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FetchRequestContext.CodingKeys()
{
  return &type metadata for FetchRequestContext.CodingKeys;
}

unint64_t sub_100604F54()
{
  unint64_t result = qword_1009B71E0;
  if (!qword_1009B71E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E2A8, &type metadata for FetchRequestContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B71E0);
  }

  return result;
}

unint64_t sub_100604F9C()
{
  unint64_t result = qword_1009B71E8;
  if (!qword_1009B71E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E360, &type metadata for FetchRequestBeacon.SearchContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B71E8);
  }

  return result;
}

unint64_t sub_100604FE4()
{
  unint64_t result = qword_1009B71F0;
  if (!qword_1009B71F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E2D0, &type metadata for FetchRequestBeacon.SearchContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B71F0);
  }

  return result;
}

unint64_t sub_10060502C()
{
  unint64_t result = qword_1009B71F8;
  if (!qword_1009B71F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E2F8, &type metadata for FetchRequestBeacon.SearchContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B71F8);
  }

  return result;
}

unint64_t sub_100605074()
{
  unint64_t result = qword_1009B7200;
  if (!qword_1009B7200)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E218, &type metadata for FetchRequestContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B7200);
  }

  return result;
}

unint64_t sub_1006050BC()
{
  unint64_t result = qword_1009B7208;
  if (!qword_1009B7208)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E240, &type metadata for FetchRequestContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B7208);
  }

  return result;
}

uint64_t sub_100605104()
{
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 41LL;
  v2._object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  return v4[0];
}

ValueMetadata *type metadata accessor for SecondaryIndex()
{
  return &type metadata for SecondaryIndex;
}

unint64_t sub_1006051A0()
{
  unint64_t result = qword_1009B7210;
  if (!qword_1009B7210)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E5E0, &type metadata for SecondaryIndex);
    atomic_store(result, (unint64_t *)&qword_1009B7210);
  }

  return result;
}

unint64_t sub_1006051E8()
{
  unint64_t result = qword_1009B7218;
  if (!qword_1009B7218)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E488, &type metadata for SecondaryIndex);
    atomic_store(result, (unint64_t *)&qword_1009B7218);
  }

  return result;
}

unint64_t sub_10060522C(void *a1)
{
  a1[1] = sub_100605288();
  a1[2] = sub_1006052CC();
  a1[3] = sub_100605310();
  a1[4] = sub_100605354();
  a1[5] = sub_100605398();
  a1[6] = sub_1006053DC();
  a1[7] = sub_100605420();
  unint64_t result = sub_100605464();
  a1[8] = result;
  return result;
}

unint64_t sub_100605288()
{
  unint64_t result = qword_1009B7220;
  if (!qword_1009B7220)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E628, &type metadata for SecondaryIndex);
    atomic_store(result, (unint64_t *)&qword_1009B7220);
  }

  return result;
}

unint64_t sub_1006052CC()
{
  unint64_t result = qword_1009B7228;
  if (!qword_1009B7228)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E5B8, &type metadata for SecondaryIndex);
    atomic_store(result, (unint64_t *)&qword_1009B7228);
  }

  return result;
}

unint64_t sub_100605310()
{
  unint64_t result = qword_1009B7230;
  if (!qword_1009B7230)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E450, &type metadata for SecondaryIndex);
    atomic_store(result, (unint64_t *)&qword_1009B7230);
  }

  return result;
}

unint64_t sub_100605354()
{
  unint64_t result = qword_1009B7238;
  if (!qword_1009B7238)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E428, &type metadata for SecondaryIndex);
    atomic_store(result, (unint64_t *)&qword_1009B7238);
  }

  return result;
}

unint64_t sub_100605398()
{
  unint64_t result = qword_1009B7240;
  if (!qword_1009B7240)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E540, &type metadata for SecondaryIndex);
    atomic_store(result, (unint64_t *)&qword_1009B7240);
  }

  return result;
}

unint64_t sub_1006053DC()
{
  unint64_t result = qword_1009B7248;
  if (!qword_1009B7248)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E578, &type metadata for SecondaryIndex);
    atomic_store(result, (unint64_t *)&qword_1009B7248);
  }

  return result;
}

unint64_t sub_100605420()
{
  unint64_t result = qword_1009B7250;
  if (!qword_1009B7250)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E508, &type metadata for SecondaryIndex);
    atomic_store(result, (unint64_t *)&qword_1009B7250);
  }

  return result;
}

unint64_t sub_100605464()
{
  unint64_t result = qword_1009B7258;
  if (!qword_1009B7258)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E4B0, &type metadata for SecondaryIndex);
    atomic_store(result, (unint64_t *)&qword_1009B7258);
  }

  return result;
}

uint64_t sub_1006054A8(char a1, uint64_t a2, void *a3)
{
  if (a1 == 1)
  {
    v3._countAndFlagsBits = 980182388LL;
    v3._object = (void *)0xE400000000000000LL;
    object = String.deletingPrefix(_:)(v3)._object;
    NSString v5 = String._bridgeToObjectiveC()();
    uint64_t v6 = &selRef_handleWithPhoneNumber_;
LABEL_5:
    swift_bridgeObjectRelease(object);
    id v8 = objc_msgSend((id)objc_opt_self(SPHandle), *v6, v5);

    return (uint64_t)v8;
  }

  if (!a1)
  {
    v7._countAndFlagsBits = 0x3A6F746C69616DLL;
    v7._object = (void *)0xE700000000000000LL;
    object = String.deletingPrefix(_:)(v7)._object;
    NSString v5 = String._bridgeToObjectiveC()();
    uint64_t v6 = &selRef_handleWithEmailAddress_;
    goto LABEL_5;
  }

  _StringGuts.grow(_:)(21LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  swift_bridgeObjectRetain(a3);
  v12._countAndFlagsBits = a2;
  v12._object = a3;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(a3);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000013LL,  0x800000010086AF60LL,  "searchpartyd/MessagingDestinationExtensions.swift",  49LL,  2LL,  16LL,  0);
  __break(1u);
  return result;
}

void sub_100605608(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v5 = [v4 isInternalBuild];

  if (v5)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    id v7 = [a3 stringForKey:v6];

    if (v7)
    {
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      unint64_t v10 = v9;

      uint64_t v11 = HIBYTE(v10) & 0xF;
      uint64_t v12 = v8 & 0xFFFFFFFFFFFFLL;
      if ((v10 & 0x2000000000000000LL) != 0) {
        uint64_t v13 = HIBYTE(v10) & 0xF;
      }
      else {
        uint64_t v13 = v8 & 0xFFFFFFFFFFFFLL;
      }
      if (v13)
      {
        if ((v10 & 0x1000000000000000LL) != 0)
        {
          sub_1001B93AC(v8, v10, 10LL);
LABEL_45:
          swift_bridgeObjectRelease();
          return;
        }

        if ((v10 & 0x2000000000000000LL) == 0)
        {
          if ((v8 & 0x1000000000000000LL) != 0) {
            uint64_t v14 = (unsigned __int8 *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else {
            uint64_t v14 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v8, v10);
          }
          sub_1001B91C8(v14, v12, 10LL);
          goto LABEL_45;
        }

        v30[0] = v8;
        v30[1] = v10 & 0xFFFFFFFFFFFFFFLL;
        if (v8 == 43)
        {
          if (v11)
          {
            if (v11 != 1
              && (BYTE1(v8) - 48) <= 9u
              && v11 != 2
              && (BYTE2(v8) - 48) <= 9u)
            {
              uint64_t v15 = 10LL * (BYTE1(v8) - 48) + (BYTE2(v8) - 48);
              uint64_t v16 = v11 - 3;
              if (v16)
              {
                uint64_t v17 = (unsigned __int8 *)v30 + 3;
                do
                {
                  unsigned int v18 = *v17 - 48;
                  if (v18 > 9) {
                    break;
                  }
                  uint64_t v19 = 10 * v15;
                  uint64_t v15 = v19 + v18;
                  ++v17;
                  --v16;
                }

                while (v16);
              }
            }

            goto LABEL_45;
          }
        }

        else
        {
          if (v8 != 45)
          {
            if (v11)
            {
              if ((v8 - 48) <= 9u && v11 != 1 && (BYTE1(v8) - 48) <= 9u)
              {
                uint64_t v20 = 10LL * (v8 - 48) + (BYTE1(v8) - 48);
                uint64_t v21 = v11 - 2;
                if (v21)
                {
                  uint64_t v22 = (unsigned __int8 *)v30 + 2;
                  do
                  {
                    unsigned int v23 = *v22 - 48;
                    if (v23 > 9) {
                      break;
                    }
                    uint64_t v24 = 10 * v20;
                    uint64_t v20 = v24 + v23;
                    ++v22;
                    --v21;
                  }

                  while (v21);
                }
              }
            }

            goto LABEL_45;
          }

          if (v11)
          {
            if (v11 != 1
              && (BYTE1(v8) - 48) <= 9u
              && v11 != 2
              && (BYTE2(v8) - 48) <= 9u)
            {
              uint64_t v25 = -10LL * (BYTE1(v8) - 48) - (BYTE2(v8) - 48);
              uint64_t v26 = v11 - 3;
              if (v26)
              {
                uint64_t v27 = (unsigned __int8 *)v30 + 3;
                do
                {
                  unsigned int v28 = *v27 - 48;
                  if (v28 > 9) {
                    break;
                  }
                  uint64_t v29 = 10 * v25;
                  uint64_t v25 = v29 - v28;
                  ++v27;
                  --v26;
                }

                while (v26);
              }
            }

            goto LABEL_45;
          }

          __break(1u);
        }

        __break(1u);
      }

      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }

id sub_100605974()
{
  id result = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  qword_100A2AF38 = (uint64_t)result;
  return result;
}

void sub_1006059AC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v7 = [v6 isInternalBuild];

  if (v7)
  {
    sub_100605AFC(a1, (uint64_t)v15);
    uint64_t v8 = v16;
    if (v16)
    {
      unint64_t v9 = sub_100012ED8(v15, v16);
      uint64_t v10 = *(void *)(v8 - 8);
      __chkstk_darwin(v9);
      uint64_t v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v10 + 16))(v12);
      uint64_t v13 = _bridgeAnythingToObjectiveC<A>(_:)(v12, v8);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v8);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v15);
    }

    else
    {
      uint64_t v13 = 0LL;
    }

    NSString v14 = String._bridgeToObjectiveC()();
    [a4 setValue:v13 forKey:v14];
    swift_unknownObjectRelease(v13);
  }

uint64_t sub_100605AFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099E200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100605B44()
{
  return 0x6F666E49766461LL;
}

uint64_t sub_100605B5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x6F666E49766461LL && a2 == 0xE700000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xE700000000000000LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F666E49766461LL, 0xE700000000000000LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

uint64_t sub_100605BF0(uint64_t a1)
{
  unint64_t v2 = sub_100607038();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100605C18(uint64_t a1)
{
  unint64_t v2 = sub_100607038();
  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_100605C40@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_100606F10(a1);
  if (!v2)
  {
    *(_DWORD *)a2 = result;
    *(_BYTE *)(a2 + 4) = BYTE4(result);
  }

  return result;
}

uint64_t sub_100605C70(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100012ED8(a1, v4);
  dispatch thunk of BinaryEncoding.container()(v13, v4, v5);
  if (a2 != 3LL)
  {
    LOBYTE(vswift_weakDestroy(v0 + 16) = 1;
    uint64_t v6 = v14;
    uint64_t v7 = v15;
    sub_100037298((uint64_t)v13, v14);
    unint64_t v8 = sub_100041584();
    dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v16, &type metadata for UInt8, v8, v6, v7);
    if (!v2)
    {
      __int16 v16 = a2;
      char v17 = BYTE2(a2) & 1;
      char v18 = BYTE3(a2);
      char v19 = BYTE4(a2);
      uint64_t v9 = v14;
      uint64_t v10 = v15;
      sub_100037298((uint64_t)v13, v14);
      unint64_t v11 = sub_100606DB4();
      dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v16, &type metadata for AdvInfo, v11, v9, v10);
    }
  }

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v13);
}

uint64_t sub_100605D8C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100606978(a1);
  if (!v2)
  {
    *(_DWORD *)a2 = result;
    *(_BYTE *)(a2 + 4) = BYTE4(result);
  }

  return result;
}

uint64_t sub_100605DBC(void *a1)
{
  return sub_100605C70(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32));
}

void sub_100605DDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Data.Iterator(0LL);
  __chkstk_darwin(v3);
  __asm { BR              X10 }

void *sub_100605E58()
{
  if (BYTE6(v0))
  {
    uint64_t v6 = sub_100004AEC(&qword_10099D328);
    uint64_t v4 = (void *)swift_allocObject(v6, BYTE6(v0) + 32LL, 7LL);
    size_t v7 = j__malloc_size(v4);
    void v4[2] = BYTE6(v0);
    v4[3] = 2 * v7 - 64;
    sub_10001736C(v2, v0);
    uint64_t v8 = ((uint64_t (*)(uint64_t, void *, void, uint64_t, unint64_t))Data._copyContents(initializing:))( v3,  v4 + 4,  BYTE6(v0),  v2,  v0);
    sub_100016F9C(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    if (v8 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x100605F2CLL);
    }
  }

  return v4;
}

uint64_t sub_100605F44(uint64_t a1)
{
  uint64_t v11 = type metadata accessor for Data.Iterator(0LL);
  v10[6] = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  v10[5] = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(void *)(a1 + 16))
  {
    uint64_t v13 = a1 + 32;
    v10[4] = _swiftEmptyArrayStorage;
    uint64_t v12 = a1;
    if (*(void *)(a1 + 16))
    {
      uint64_t v3 = *(void *)(v13 + 8);
      uint64_t v15 = 1LL;
      __asm { BR              X9 }
    }

    __break(1u);
    JUMPOUT(0x1006068C4LL);
  }

  swift_bridgeObjectRelease();
  if (_swiftEmptyArrayStorage[2])
  {
    int v4 = BYTE2(_swiftEmptyArrayStorage[4]);
    uint64_t v5 = BYTE3(_swiftEmptyArrayStorage[4]);
    uint64_t v6 = BYTE4(_swiftEmptyArrayStorage[4]);
    uint64_t v7 = LOWORD(_swiftEmptyArrayStorage[4]);
    swift_bridgeObjectRelease();
    uint64_t v8 = 0x10000LL;
    if (!v4) {
      uint64_t v8 = 0LL;
    }
    return v7 | v8 | (v5 << 24) | (v6 << 32);
  }

  else
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

uint64_t sub_100606978(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  sub_100012ED8(a1, v2);
  dispatch thunk of BinaryDecoding.container()(v38, v2, v3);
  uint64_t v4 = v39;
  uint64_t v5 = v40;
  sub_100012ED8(v38, v39);
  if ((dispatch thunk of BinaryDecodingContaining.isAtEnd.getter(v4, v5) & 1) != 0)
  {
    uint64_t v41 = _swiftEmptyArrayStorage;
LABEL_3:
    uint64_t v6 = sub_100605F44((uint64_t)v41);
    if (!v1)
    {
      uint64_t v7 = v6;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
      return v7 & 0xFFFFFFFFFFLL;
    }
  }

  else
  {
    uint64_t v41 = _swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v9 = v39;
      uint64_t v10 = v40;
      sub_100037298((uint64_t)v38, v39);
      uint64_t v11 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1LL, v9, v10);
      if (v1) {
        break;
      }
      uint64_t v13 = v11;
      unint64_t v14 = v12;
      uint64_t v15 = v39;
      uint64_t v16 = v40;
      sub_100037298((uint64_t)v38, v39);
      uint64_t v17 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1LL, v15, v16);
      unint64_t v19 = v18;
      sub_100042F34();
      uint64_t v20 = DataProtocol.intValue.getter(&type metadata for Data);
      uint64_t v21 = v39;
      uint64_t v22 = v40;
      sub_100037298((uint64_t)v38, v39);
      uint64_t v23 = dispatch thunk of BinaryDecodingContaining.decode(length:)(v20, v21, v22);
      unint64_t v25 = v24;
      sub_10001736C(v13, v14);
      sub_10001736C(v17, v19);
      sub_1004A8638(v17, v19);
      sub_100016F9C(v17, v19);
      sub_10001736C(v13, v14);
      sub_10001736C(v23, v25);
      sub_1004A8638(v23, v25);
      sub_100016F9C(v23, v25);
      sub_100016F9C(v13, v14);
      sub_1003B6EB8(v13, v14);
      uint64_t v27 = v26;
      unint64_t v29 = v28;
      sub_10001736C(v26, v28);
      uint64_t v37 = v13;
      if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0) {
        uint64_t v41 = sub_1004C4FBC(0LL, v41[2] + 1LL, 1, v41);
      }
      unint64_t v31 = v41[2];
      unint64_t v30 = v41[3];
      if (v31 >= v30 >> 1) {
        uint64_t v41 = sub_1004C4FBC((void *)(v30 > 1), v31 + 1, 1, v41);
      }
      uint64_t v32 = v41;
      v41[2] = v31 + 1;
      char v33 = &v32[2 * v31];
      v33[4] = v27;
      v33[5] = v29;
      sub_100016F9C(v17, v19);
      sub_100016F9C(v27, v29);
      sub_100016F9C(v23, v25);
      sub_100016F9C(v37, v14);
      uint64_t v34 = v39;
      uint64_t v35 = v40;
      sub_100012ED8(v38, v39);
      if ((dispatch thunk of BinaryDecodingContaining.isAtEnd.getter(v34, v35) & 1) != 0) {
        goto LABEL_3;
      }
    }

    swift_bridgeObjectRelease();
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

uint64_t sub_100606CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A0510);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_100606D00()
{
  unint64_t result = qword_1009A0520;
  if (!qword_1009A0520)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A0518);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> ArraySlice<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1009A0520);
  }

  return result;
}

uint64_t sub_100606D4C()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

unint64_t sub_100606D70()
{
  unint64_t result = qword_1009B7260;
  if (!qword_1009B7260)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E7BC, &type metadata for TLVPacketsError);
    atomic_store(result, (unint64_t *)&qword_1009B7260);
  }

  return result;
}

unint64_t sub_100606DB4()
{
  unint64_t result = qword_1009B7268;
  if (!qword_1009B7268)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EC3D4, &type metadata for AdvInfo);
    atomic_store(result, (unint64_t *)&qword_1009B7268);
  }

  return result;
}

ValueMetadata *type metadata accessor for TLVPacketsError()
{
  return &type metadata for TLVPacketsError;
}

uint64_t getEnumTagSinglePayload for TLVPackets(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD && a1[5]) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *a1;
  if (v3 >= 2) {
    int v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v4 = -2;
  }
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for TLVPackets(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 5) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 5) = 0;
    }
    if (a2) {
      *(_BYTE *)unint64_t result = a2 + 3;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for TLVPackets()
{
  return &type metadata for TLVPackets;
}

unint64_t sub_100606ECC()
{
  unint64_t result = qword_1009B7270;
  if (!qword_1009B7270)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E794, &type metadata for TLVPacketsError);
    atomic_store(result, (unint64_t *)&qword_1009B7270);
  }

  return result;
}

unint64_t sub_100606F10(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009B7278);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  int v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  unint64_t v9 = (unint64_t)sub_100012ED8(a1, v7);
  unint64_t v10 = sub_100607038();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for TLVPackets.CodingKeys,  &type metadata for TLVPackets.CodingKeys,  v10,  v7,  v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    unint64_t v11 = sub_1005AD5DC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for AdvInfo,  v12,  v3,  &type metadata for AdvInfo,  v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    unint64_t v9 = v14[2] | ((unint64_t)v15 << 32);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  return v9;
}

unint64_t sub_100607038()
{
  unint64_t result = qword_1009B7280;
  if (!qword_1009B7280)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E8C0, &type metadata for TLVPackets.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B7280);
  }

  return result;
}

uint64_t _s12searchpartyd15TLVPacketsErrorOwst_0(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1006070BC + 4 * asc_10080E6B4[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1006070DC + 4 * byte_10080E6B9[v4]))();
  }
}

_BYTE *sub_1006070BC(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1006070DC(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1006070E4(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1006070EC(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1006070F4(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1006070FC(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TLVPackets.CodingKeys()
{
  return &type metadata for TLVPackets.CodingKeys;
}

unint64_t sub_10060711C()
{
  unint64_t result = qword_1009B7288;
  if (!qword_1009B7288)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E898, &type metadata for TLVPackets.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B7288);
  }

  return result;
}

unint64_t sub_100607164()
{
  unint64_t result = qword_1009B7290;
  if (!qword_1009B7290)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E808, &type metadata for TLVPackets.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B7290);
  }

  return result;
}

unint64_t sub_1006071AC()
{
  unint64_t result = qword_1009B7298;
  if (!qword_1009B7298)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E830, &type metadata for TLVPackets.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B7298);
  }

  return result;
}

void sub_1006071F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v59 = a2;
  uint64_t v3 = type metadata accessor for SafeLocation(0LL);
  uint64_t v56 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v55 = (uint64_t)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v54 = (uint64_t)&v48 - v6;
  uint64_t v7 = sub_100004AEC(&qword_1009B73B8);
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for LocationOfInterestProvider.RemappingOperation(0LL);
  uint64_t v60 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v51 = (uint64_t)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v50 = (uint64_t)&v48 - v13;
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = *(void *)(a1 + 56);
  uint64_t v57 = a1 + 56;
  uint64_t v22 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v23 = -1LL;
  if (v22 < 64) {
    uint64_t v23 = ~(-1LL << v22);
  }
  unint64_t v24 = v23 & v21;
  int64_t v58 = (unint64_t)(v22 + 63) >> 6;
  uint64_t v61 = a1;
  __n128 v25 = swift_bridgeObjectRetain(a1);
  int64_t v26 = 0LL;
  uint64_t v52 = _swiftEmptyArrayStorage;
  unint64_t v53 = v17;
  while (1)
  {
    if (v24)
    {
      unint64_t v27 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      unint64_t v28 = v27 | (v26 << 6);
      goto LABEL_22;
    }

    int64_t v29 = v26 + 1;
    if (__OFADD__(v26, 1LL))
    {
      __break(1u);
      goto LABEL_37;
    }

    if (v29 >= v58) {
      goto LABEL_34;
    }
    unint64_t v30 = *(void *)(v57 + 8 * v29);
    ++v26;
    if (!v30)
    {
      int64_t v26 = v29 + 1;
      if (v29 + 1 >= v58) {
        goto LABEL_34;
      }
      unint64_t v30 = *(void *)(v57 + 8 * v26);
      if (!v30)
      {
        int64_t v26 = v29 + 2;
        if (v29 + 2 >= v58) {
          goto LABEL_34;
        }
        unint64_t v30 = *(void *)(v57 + 8 * v26);
        if (!v30)
        {
          int64_t v26 = v29 + 3;
          if (v29 + 3 >= v58) {
            goto LABEL_34;
          }
          unint64_t v30 = *(void *)(v57 + 8 * v26);
          if (!v30) {
            break;
          }
        }
      }
    }

uint64_t sub_100607730(uint64_t a1)
{
  uint64_t v61 = sub_100004AEC(&qword_1009B73C8);
  uint64_t v3 = __chkstk_darwin(v61);
  uint64_t v60 = (char *)v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v59 = (char *)v51 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v58 = (uint64_t)v51 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v57 = (char *)v51 - v10;
  __chkstk_darwin(v9);
  uint64_t v56 = (char *)v51 - v11;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v68 = v12;
  uint64_t v69 = v13;
  __chkstk_darwin(v12);
  uint64_t v67 = (char *)v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v15 = *(void *)(a1 + 16);
  uint64_t v16 = _swiftEmptyArrayStorage;
  if (!v15) {
    return (uint64_t)v16;
  }
  v51[1] = v1;
  BOOL v70 = _swiftEmptyArrayStorage;
  sub_1000328D0(0, v15, 0);
  uint64_t result = sub_10036D714(a1);
  unint64_t v19 = result;
  uint64_t v20 = 0LL;
  uint64_t v21 = a1 + 64;
  uint64_t v62 = a1 + 80;
  uint64_t v54 = a1 + 64;
  uint64_t v55 = a1;
  int64_t v52 = v15;
  uint64_t v53 = v18;
  uint64_t v22 = v68;
  while ((v19 & 0x8000000000000000LL) == 0 && (uint64_t)v19 < 1LL << *(_BYTE *)(a1 + 32))
  {
    unint64_t v24 = v19 >> 6;
    if ((*(void *)(v21 + 8 * (v19 >> 6)) & (1LL << v19)) == 0) {
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v18) {
      goto LABEL_26;
    }
    uint64_t v63 = v20;
    uint64_t v64 = 1LL << v19;
    uint64_t v25 = v61;
    uint64_t v26 = (uint64_t)v56;
    uint64_t v27 = (uint64_t)&v56[*(int *)(v61 + 48)];
    uint64_t v28 = *(void *)(a1 + 48);
    uint64_t v65 = *(void *)(v69 + 72);
    int64_t v29 = *(void (**)(char *, unint64_t, uint64_t))(v69 + 16);
    v29(v56, v28 + v65 * v19, v22);
    uint64_t v30 = *(void *)(a1 + 56);
    uint64_t v31 = *(void *)(*(void *)(type metadata accessor for SafeLocation(0LL) - 8) + 72LL);
    unint64_t v66 = v19;
    sub_10001DC4C(v30 + v31 * v19, v27, type metadata accessor for SafeLocation);
    uint64_t v32 = (uint64_t)v57;
    v29(v57, v26, v22);
    sub_10001DC4C(v27, v32 + *(int *)(v25 + 48), type metadata accessor for SafeLocation);
    uint64_t v33 = v58;
    sub_100015750(v32, v58, &qword_1009B73C8);
    sub_100015794(v26, &qword_1009B73C8);
    uint64_t v34 = *(int *)(v25 + 48);
    uint64_t v35 = v59;
    uint64_t v36 = (uint64_t)&v59[v34];
    uint64_t v37 = v33 + v34;
    v29(v59, v33, v22);
    sub_10001DC4C(v37, v36, type metadata accessor for SafeLocation);
    uint64_t v38 = *(int *)(v25 + 48);
    uint64_t v39 = (uint64_t)v60;
    uint64_t v40 = (uint64_t)&v60[v38];
    uint64_t v41 = v35;
    unint64_t v42 = *(void (**)(char *, char *, uint64_t))(v69 + 32);
    v42(v60, v41, v22);
    sub_10002218C(v36, v40, type metadata accessor for SafeLocation);
    v29(v67, v39, v22);
    sub_100015794(v39, &qword_1009B73C8);
    sub_100015794(v33, &qword_1009B73C8);
    uint64_t v16 = v70;
    if ((swift_isUniquelyReferenced_nonNull_native(v70) & 1) == 0)
    {
      sub_1000328D0(0, v16[2] + 1LL, 1);
      uint64_t v16 = v70;
    }

    unint64_t v44 = v16[2];
    unint64_t v43 = v16[3];
    int64_t v45 = v66;
    if (v44 >= v43 >> 1)
    {
      sub_1000328D0(v43 > 1, v44 + 1, 1);
      uint64_t v16 = v70;
    }

    v16[2] = v44 + 1;
    uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v42)( (char *)v16 + ((*(unsigned __int8 *)(v69 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80))
             + v44 * v65,
               v67,
               v68);
    BOOL v70 = v16;
    a1 = v55;
    unint64_t v19 = 1LL << *(_BYTE *)(v55 + 32);
    uint64_t v21 = v54;
    uint64_t v46 = *(void *)(v54 + 8 * v24);
    if ((v46 & v64) == 0) {
      goto LABEL_28;
    }
    LODWORD(v18) = v53;
    if (*(_DWORD *)(v55 + 36) != (_DWORD)v53) {
      goto LABEL_29;
    }
    unint64_t v47 = v46 & (-2LL << (v45 & 0x3F));
    if (v47)
    {
      unint64_t v19 = __clz(__rbit64(v47)) | v45 & 0xFFFFFFFFFFFFFFC0LL;
      int64_t v23 = v52;
    }

    else
    {
      unint64_t v48 = v24 + 1;
      unint64_t v49 = (v19 + 63) >> 6;
      int64_t v23 = v52;
      if (v24 + 1 < v49)
      {
        unint64_t v50 = *(void *)(v54 + 8 * v48);
        if (v50)
        {
LABEL_22:
          unint64_t v19 = __clz(__rbit64(v50)) + (v48 << 6);
        }

        else
        {
          while (v49 - 2 != v24)
          {
            unint64_t v50 = *(void *)(v62 + 8 * v24++);
            if (v50)
            {
              unint64_t v48 = v24 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }

    uint64_t v20 = v63 + 1;
    if (v63 + 1 == v23) {
      return (uint64_t)v16;
    }
  }

  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

void *sub_100607BD0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v16[1] = v1;
    unint64_t v19 = _swiftEmptyArrayStorage;
    sub_1000328D0(0, v7, 0);
    uint64_t v8 = v19;
    uint64_t v9 = type metadata accessor for SafeLocation(0LL);
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v17 = *(void *)(v10 + 72);
    uint64_t v18 = v9;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    do
    {
      v12(v6, v11 + *(int *)(v18 + 20), v3);
      unint64_t v19 = v8;
      unint64_t v14 = v8[2];
      unint64_t v13 = v8[3];
      if (v14 >= v13 >> 1)
      {
        sub_1000328D0(v13 > 1, v14 + 1, 1);
        uint64_t v8 = v19;
      }

      v8[2] = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))( (unint64_t)v8 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
      + *(void *)(v4 + 72) * v14,
        v6,
        v3);
      v11 += v17;
      --v7;
    }

    while (v7);
  }

  return v8;
}

uint64_t sub_100607D40@<X0>(uint64_t a1@<X8>)
{
  id v2 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 objectForKey:v3];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v9, v4);
    swift_unknownObjectRelease(v4);
  }

  else
  {
    memset(v9, 0, sizeof(v9));
  }

  sub_100015750((uint64_t)v9, (uint64_t)v10, &qword_10099E200);
  if (v11)
  {
    uint64_t v5 = type metadata accessor for Date(0LL);
    int v6 = swift_dynamicCast(a1, v10, (char *)&type metadata for Any + 8, v5, 6LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))( a1,  v6 ^ 1u,  1LL,  v5);
  }

  else
  {
    sub_100015794((uint64_t)v10, &qword_10099E200);
    uint64_t v8 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))( a1,  1LL,  1LL,  v8);
  }

uint64_t sub_100607E9C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100004AEC(&qword_1009B7590);
  uint64_t v36 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC(&qword_1009B7598);
  uint64_t v37 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009B75A0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v38 = v8;
  uint64_t v39 = v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009B75A8);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v40 = v12;
  uint64_t v41 = v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v42[0] = AnyCurrentValuePublisher.publisher.getter(v14);
  uint64_t v17 = sub_100004AEC(&qword_1009B2B88);
  uint64_t v18 = sub_1000372EC( &qword_1009B2B90,  &qword_1009B2B88,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.filter(_:)(sub_100608268, 0LL, v17, v18);
  swift_release();
  uint64_t v19 = sub_1000372EC( &qword_1009B75B0,  &qword_1009B7590,  (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  unint64_t v20 = sub_100610A84();
  Publisher<>.removeDuplicates()(v2, v19, v20);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v4, v2);
  uint64_t v21 = sub_1000372EC( &qword_1009B75C0,  &qword_1009B7598,  (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  unint64_t v22 = sub_10060FD94();
  Publisher<>.setFailureType<A>(to:)( &type metadata for LocationOfInterestProvider.Error,  v5,  &type metadata for LocationOfInterestProvider.Error,  v21,  v22);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v7, v5);
  uint64_t v23 = swift_retain();
  uint64_t v24 = static Subscribers.Demand.unlimited.getter(v23);
  uint64_t v25 = sub_100004AEC(&qword_1009B7400);
  uint64_t v26 = sub_100004AEC(&qword_1009B75C8);
  uint64_t v27 = sub_1000372EC( &qword_1009B75D0,  &qword_1009B75A0,  (uint64_t)&protocol conformance descriptor for Publishers.SetFailureType<A, B>);
  uint64_t v28 = sub_1000372EC( &qword_1009B75D8,  &qword_1009B75C8,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v29 = v38;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v24, sub_100610AC8, v1, v38, v25, v26, v27, v28);
  swift_release();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v11, v29);
  uint64_t v30 = sub_1000372EC( &qword_1009B75E0,  &qword_1009B75A8,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  uint64_t v31 = v40;
  Publisher.sink(receiveCompletion:receiveValue:)( sub_10060844C,  0LL,  DeviceInformationProviderFactory.init(),  0LL,  v40,  v30);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v16, v31);
  v1 += 80LL;
  swift_beginAccess(v1, v42, 33LL, 0LL);
  uint64_t v32 = sub_100004AEC(&qword_1009B75E8);
  uint64_t v33 = sub_1000372EC(&qword_1009B75F0, &qword_1009B75E8, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v1, v32, v33);
  swift_endAccess(v42);
  return swift_release();
}

BOOL sub_100608268(unsigned __int8 *a1)
{
  return *a1 == 1;
}

uint64_t sub_100608278()
{
  return static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.LocationOfInterestProvider.meDeviceStatePublisher",  79LL,  2LL,  sub_100610AD0);
}

uint64_t sub_1006082F0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_100004AEC(&qword_1009B75F8);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int64_t v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v13[1] = sub_1006095A8(1);
  swift_retain();
  uint64_t v8 = sub_100004AEC(&qword_1009B75C8);
  uint64_t v9 = sub_1000372EC( &qword_1009B75D8,  &qword_1009B75C8,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)( 0LL,  0LL,  0LL,  0LL,  j___s10FindMyBase11TransactionC7captureyyF,  a1,  0LL,  0LL,  0LL,  0LL,  v8,  v9);
  swift_release();
  swift_release();
  uint64_t v10 = sub_1000372EC( &qword_1009B7600,  &qword_1009B75F8,  (uint64_t)&protocol conformance descriptor for Publishers.HandleEvents<A>);
  uint64_t v11 = Publisher.eraseToAnyPublisher()(v4, v10);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *a2 = v11;
  return result;
}

void sub_10060844C()
{
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2AAA0);
  oslog = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v2 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Updated safe locations due to me device change.", v3, 2u);
    swift_slowDealloc(v3, -1LL, -1LL);
  }
}

uint64_t sub_100608518(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject(&unk_10096BC20, 56LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = a2;
  *(_BYTE *)(v10 + 24) = a3;
  *(void *)(v10 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = a4;
  *(void *)(v10 + 40) = a5;
  *(void *)(v10 + 48) = a1;
  swift_retain();
  sub_1000372DC(a4, a5);
  swift_retain();
  swift_retain();
  sub_1000372DC(a4, a5);
  swift_retain();
  sub_1004F730C();
  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  v13[0] = 0x7365547265646E75LL;
  v13[1] = 0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v14, v13, sub_10000A71C, 0LL, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if (v14 == 1)
  {
    sub_100608744(a2, a3 & 1, a4, a5, a1);
  }

  else
  {
    uint64_t v12 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v12);
    static Transaction.named<A>(_:with:)("CloudKitCoordinator.AfterPendingUpdates", 39LL, 2LL, sub_10049DD48);
  }

  swift_release();
  swift_release();
  swift_release();
  sub_10002214C(a4, a5);
  return swift_release();
}

uint64_t sub_100608744(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v28 = a5;
  uint64_t v9 = sub_100004AEC(&qword_1009B0670);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009B7608);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = (void *)sub_1006095A8(a2);
  v29[0] = *(id *)(a1 + 16);
  id v17 = v29[0];
  v29[1] = v16;
  uint64_t v18 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v11, 1LL, 1LL, v18);
  id v19 = v17;
  uint64_t v20 = sub_100004AEC(&qword_1009B75C8);
  uint64_t v21 = sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v22 = sub_1000372EC( &qword_1009B75D8,  &qword_1009B75C8,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  unint64_t v23 = sub_1004BD040();
  Publisher.subscribe<A>(on:options:)(v29, v11, v20, v21, v22, v23);
  sub_100015794((uint64_t)v11, &qword_1009B0670);

  swift_release();
  uint64_t v24 = (void *)swift_allocObject(&unk_10096BC48, 40LL, 7LL);
  _OWORD v24[2] = a3;
  v24[3] = a4;
  v24[4] = v28;
  sub_1000372DC(a3, a4);
  uint64_t v25 = sub_1000372EC( &qword_1009B7610,  &qword_1009B7608,  (uint64_t)&protocol conformance descriptor for Publishers.SubscribeOn<A, B>);
  swift_retain();
  Publisher.oneshot(_:)(sub_100610B6C, v24, v12, v25);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

void sub_100608968(uint64_t a1, void (*a2)(unsigned __int8 *, void))
{
  uint64_t v3 = *(unsigned __int8 **)a1;
  if ((*(_BYTE *)(a1 + 9) & 1) != 0)
  {
    if (a2)
    {
      int v4 = *(unsigned __int8 *)(a1 + 8);
      sub_100610698(*(id *)a1, v4);
      a2(v3, v4 | 0x100u);
      sub_100610B78(v3, v4, 1);
    }

    goto LABEL_21;
  }

  int64_t v5 = *((void *)v3 + 2);
  if (v5)
  {
    uint64_t v39 = _swiftEmptyArrayStorage;
    sub_100032800(0, v5, 0);
    uint64_t v6 = _swiftEmptyArrayStorage;
    int64_t v7 = v3 + 48;
    do
    {
      uint64_t v8 = *((void *)v7 - 2);
      uint64_t v9 = (void *)*((void *)v7 - 1);
      unsigned __int8 v10 = *v7;
      uint64_t v34 = 0LL;
      unint64_t v35 = 0xE000000000000000LL;
      sub_100610764(v8, v9, v10);
      _StringGuts.grow(_:)(51LL);
      uint64_t v37 = v34;
      unint64_t v38 = v35;
      v11._countAndFlagsBits = 0xD000000000000031LL;
      v11._object = (void *)0x800000010086B040LL;
      String.append(_:)(v11);
      uint64_t v34 = v8;
      unint64_t v35 = (unint64_t)v9;
      unsigned __int8 v36 = v10;
      sub_100610764(v8, v9, v10);
      v12._countAndFlagsBits = String.init<A>(describing:)( &v34,  &type metadata for LocationOfInterestProvider.LOIRequestResponse);
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      sub_100610708(v8, v9, v10);
      uint64_t v13 = v37;
      unint64_t v14 = v38;
      uint64_t v39 = v6;
      unint64_t v16 = v6[2];
      unint64_t v15 = v6[3];
      unint64_t v17 = v16 + 1;
      if (v16 >= v15 >> 1)
      {
        sub_100032800(v15 > 1, v16 + 1, 1);
        uint64_t v6 = v39;
      }

      v7 += 24;
      v6[2] = v17;
      uint64_t v18 = &v6[2 * v16];
      v18[4] = v13;
      v18[5] = v14;
      --v5;
    }

    while (v5);
    goto LABEL_11;
  }

  uint64_t v6 = _swiftEmptyArrayStorage;
  unint64_t v17 = _swiftEmptyArrayStorage[2];
  if (v17)
  {
LABEL_11:
    uint64_t v19 = qword_10099B4C8;
    swift_bridgeObjectRetain(v6);
    if (v19 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    uint64_t v21 = v6 + 5;
    uint64_t v22 = qword_100A2AAA0;
    do
    {
      uint64_t v24 = *(v21 - 1);
      unint64_t v23 = *v21;
      sub_10000A720(v20, (uint64_t)v22);
      swift_bridgeObjectRetain_n(v23, 2LL);
      uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
      os_log_type_t v27 = static os_log_type_t.default.getter(v26);
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = swift_slowAlloc(12LL, -1LL);
        uint64_t v29 = v20;
        uint64_t v30 = v22;
        uint64_t v31 = swift_slowAlloc(32LL, -1LL);
        uint64_t v34 = v31;
        *(_DWORD *)uint64_t v28 = 136315138;
        swift_bridgeObjectRetain(v23);
        *(void *)(v28 + 4) = sub_1003F11D4(v24, v23, &v34);
        swift_bridgeObjectRelease_n(v23, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s", (uint8_t *)v28, 0xCu);
        swift_arrayDestroy(v31, 1LL, (char *)&type metadata for Any + 8);
        uint64_t v32 = v31;
        uint64_t v22 = v30;
        uint64_t v20 = v29;
        swift_slowDealloc(v32, -1LL, -1LL);
        swift_slowDealloc(v28, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v23, 2LL);
      }

      v21 += 2;
      --v17;
    }

    while (v17);
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  if (a2) {
    a2(0LL, 0LL);
  }
LABEL_21:
  Transaction.capture()();
}

uint64_t sub_100608CF4( uint64_t (*a1)(void **), uint64_t a2, unsigned __int8 a3, void *a4, uint64_t a5)
{
  int v9 = a3;
  uint64_t v10 = swift_allocObject(&unk_10096BBD0, 32LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  if ((v9 - 1) > 1)
  {
    swift_retain();
    swift_release();
    uint64_t v19 = _swiftEmptyArrayStorage;
    __int16 v20 = 0;
    return a1(&v19);
  }

  else
  {
    Swift::String v11 = a4 + 3;
    uint64_t v12 = a4[6];
    uint64_t v13 = a4[7];
    sub_100012ED8(v11, v12);
    if (v9 == 2) {
      uint64_t v14 = 0LL;
    }
    else {
      uint64_t v14 = -1LL;
    }
    type metadata accessor for RTLocationOfInterestType(0LL);
    uint64_t v21 = v15;
    uint64_t v22 = &off_10096B9A0;
    uint64_t v19 = (void *)v14;
    unint64_t v16 = (void *)swift_allocObject(&unk_10096BBF8, 40LL, 7LL);
    void v16[2] = sub_100610A3C;
    v16[3] = v10;
    v16[4] = a5;
    unint64_t v17 = *(void (**)(void **, uint64_t (*)(uint64_t, uint64_t), void *, uint64_t, uint64_t))(v13 + 8);
    swift_retain();
    v17(&v19, sub_100610A78, v16, v12, v13);
    swift_release();
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v19);
  }

uint64_t sub_100608E2C(uint64_t a1, uint64_t a2, void (*a3)(void, void), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for SafeLocation(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  Swift::String v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = sub_10000A720(v12, (uint64_t)qword_100A2AAA0);
  swift_bridgeObjectRetain(a1);
  swift_errorRetain(a2);
  swift_bridgeObjectRetain(a1);
  uint64_t v14 = swift_errorRetain(a2);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc(22LL, -1LL);
    uint64_t v42 = a4;
    uint64_t v18 = v17;
    uint64_t v19 = swift_slowAlloc(64LL, -1LL);
    uint64_t v41 = v13;
    uint64_t v20 = v19;
    v48[0] = v19;
    *(_DWORD *)uint64_t v18 = 136315394;
    unint64_t v43 = a3;
    uint64_t v46 = a1;
    swift_bridgeObjectRetain(a1);
    uint64_t v21 = sub_100004AEC(&qword_1009B7588);
    uint64_t v22 = String.init<A>(describing:)(&v46, v21);
    uint64_t v46 = sub_1003F11D4(v22, v23, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2080;
    uint64_t v46 = a2;
    swift_errorRetain(a2);
    uint64_t v24 = sub_100004AEC(&qword_10099C678);
    uint64_t v25 = String.init<A>(describing:)(&v46, v24);
    uint64_t v46 = sub_1003F11D4(v25, v26, v48);
    a3 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v18 + 14, v18 + 22);
    swift_bridgeObjectRelease();
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "Received locations of interest: %s error: %s",  (uint8_t *)v18,  0x16u);
    swift_arrayDestroy(v20, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1LL, -1LL);
    a4 = v42;
    swift_slowDealloc(v18, -1LL, -1LL);

    if (a2)
    {
LABEL_5:
      swift_errorRetain(a2);
      swift_errorRetain(a2);
      uint64_t v27 = swift_errorRetain(a2);
      uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
      os_log_type_t v29 = static os_log_type_t.error.getter(v28);
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v31 = swift_slowAlloc(32LL, -1LL);
        v48[0] = v31;
        *(_DWORD *)uint64_t v30 = 136315138;
        swift_getErrorValue(a2, v45, v44);
        uint64_t v32 = Error.localizedDescription.getter(v44[1], v44[2]);
        uint64_t v46 = sub_1003F11D4(v32, v33, v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v30 + 4, v30 + 12);
        swift_bridgeObjectRelease();
        swift_errorRelease(a2);
        swift_errorRelease(a2);
        _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "Failed to fetch locations of interest due to error: %s",  v30,  0xCu);
        swift_arrayDestroy(v31, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v31, -1LL, -1LL);
        swift_slowDealloc(v30, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease(a2);
        swift_errorRelease(a2);
      }

      swift_errorRetain(a2);
      a3(a2, 256LL);
      swift_errorRelease(a2);
      return swift_errorRelease(a2);
    }
  }

  else
  {
    swift_bridgeObjectRelease_n(a1, 2LL);
    swift_errorRelease(a2);
    swift_errorRelease(a2);

    if (a2) {
      goto LABEL_5;
    }
  }

  if (a1 && (int64_t v34 = *(void *)(a1 + 16)) != 0)
  {
    uint64_t v42 = a4;
    unint64_t v43 = a3;
    unint64_t v49 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(a1);
    sub_100032BF0(0, v34, 0);
    uint64_t v41 = a1;
    uint64_t v35 = a1 + 32;
    unsigned __int8 v36 = v49;
    do
    {
      sub_100013044(v35, (uint64_t)v48);
      sub_100013044((uint64_t)v48, (uint64_t)&v46);
      sub_100609394(&v46, v11, 80.0);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v48);
      if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0)
      {
        sub_100032BF0(0, v36[2] + 1LL, 1);
        unsigned __int8 v36 = v49;
      }

      unint64_t v38 = v36[2];
      unint64_t v37 = v36[3];
      if (v38 >= v37 >> 1)
      {
        sub_100032BF0(v37 > 1, v38 + 1, 1);
        unsigned __int8 v36 = v49;
      }

      v36[2] = v38 + 1;
      sub_10002218C( (uint64_t)v11,  (uint64_t)v36 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
      + *(void *)(v9 + 72) * v38,
        type metadata accessor for SafeLocation);
      v35 += 40LL;
      --v34;
    }

    while (v34);
    swift_bridgeObjectRelease();
    v43(v36, 0LL);
  }

  else
  {
    a3(_swiftEmptyArrayStorage, 0LL);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100609394@<X0>(void *a1@<X0>, char *a2@<X8>, double a3@<D0>)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
  sub_100022898(0LL, (unint64_t *)&qword_1009A5510, &OBJC_CLASS___CLLocation_ptr);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100012ED8(a1, v11);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v12 + 32))(v29, v11, v12);
  id v13 = sub_10060DFF8(v29, a3);
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  sub_100012ED8(a1, v14);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v14, v15);
  uint64_t v18 = v17;
  uint64_t v19 = a1[3];
  uint64_t v20 = a1[4];
  sub_100012ED8(a1, v19);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v20 + 24))(v29, v19, v20);
  unint64_t v21 = *sub_100012ED8(v29, v29[3]) + 1LL;
  if (v21 >= 5) {
    char v22 = 0;
  }
  else {
    char v22 = 0x504030200uLL >> (8 * v21);
  }
  if (!v18)
  {
    uint64_t v18 = 0xE000000000000000LL;
    uint64_t v16 = 0LL;
  }

  uint64_t v23 = a1[3];
  uint64_t v24 = a1[4];
  sub_100012ED8(a1, v23);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v24 + 24))(v28, v23, v24);
  uint64_t v25 = *sub_100012ED8(v28, v28[3]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  if (v25) {
    int v26 = 2;
  }
  else {
    int v26 = 1;
  }
  sub_10061A5C8((uint64_t)v8, v13, v16, v18, v22, v26, a2);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v29);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

uint64_t sub_1006095A8(int a1)
{
  os_log_type_t v2 = v1;
  LODWORD(v123) = a1;
  unint64_t v124 = *v1;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  __chkstk_darwin(v3);
  Swift::Int v110 = (char *)&v106 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v5);
  Swift::Int v109 = (char *)&v106 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009B0670);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v106 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v108 = sub_100004AEC(&qword_1009B73D0);
  uint64_t v107 = *(void *)(v108 - 8);
  __chkstk_darwin(v108);
  uint64_t v11 = (char *)&v106 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v113 = sub_100004AEC(&qword_1009B73D8);
  uint64_t v112 = *(void *)(v113 - 8);
  __chkstk_darwin(v113);
  uint64_t v111 = (char *)&v106 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_1009B73E0);
  uint64_t v115 = *(void *)(v13 - 8);
  uint64_t v116 = v13;
  __chkstk_darwin(v13);
  char v114 = (char *)&v106 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_1009B73E8);
  uint64_t v118 = *(void *)(v15 - 8);
  uint64_t v119 = v15;
  __chkstk_darwin(v15);
  int64_t v117 = (char *)&v106 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100004AEC(&qword_1009B73F0);
  uint64_t v121 = *(void *)(v17 - 8);
  uint64_t v122 = v17;
  __chkstk_darwin(v17);
  uint64_t v120 = (char *)&v106 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100004AEC(&qword_1009B73F8);
  uint64_t v125 = *(void *)(v19 - 8);
  uint64_t v126 = v19;
  __chkstk_darwin(v19);
  unint64_t v21 = (char *)&v106 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v106 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for Date(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = __chkstk_darwin(v25);
  os_log_type_t v29 = (char *)&v106 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v106 - v30;
  uint64_t My = type metadata accessor for Feature.FindMy(0LL);
  uint64_t v130 = My;
  uint64_t v131 = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  unint64_t v33 = sub_10000A7C8(&v128);
  (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v33,  enum case for Feature.FindMy.separationAlerts(_:),  My);
  LOBYTE(My) = isFeatureEnabled(_:)(&v128);
  uint64_t v34 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v128);
  if ((My & 1) == 0)
  {
    if (qword_10099B6A0 != -1) {
      swift_once(&qword_10099B6A0, sub_100626B90);
    }
    uint64_t v128 = 0x7365547265646E75LL;
    unint64_t v129 = 0xE900000000000074LL;
    SynchronousCache.cachedValue<A>(key:computeBlock:)(&v127, &v128, sub_10000A71C, 0LL, &type metadata for Bool);
    uint64_t v34 = swift_bridgeObjectRelease();
    if (v127 != 1)
    {
      if (qword_10099B4C8 != -1) {
        swift_once(&qword_10099B4C8, sub_10047B404);
      }
      uint64_t v40 = type metadata accessor for Logger(0LL);
      uint64_t v41 = sub_10000A720(v40, (uint64_t)qword_100A2AAA0);
      uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
      os_log_type_t v43 = static os_log_type_t.default.getter(v42);
      if (os_log_type_enabled(v42, v43))
      {
        unint64_t v44 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)unint64_t v44 = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Ignoring LOI update as FF is disabled.", v44, 2u);
        swift_slowDealloc(v44, -1LL, -1LL);
      }

      type metadata accessor for SPSeparationMonitoringError(0LL);
      uint64_t v46 = v45;
      uint64_t v128 = 1LL;
      unint64_t v47 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v48 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
      _BridgedStoredNSError.init(_:userInfo:)(&v127, &v128, v47, v46, v48);
      uint64_t v128 = v127;
      LOBYTE(v129) = 1;
      goto LABEL_19;
    }
  }

  AnyCurrentValuePublisher.value.getter(&v128, v34);
  if (v128 != 1)
  {
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v35 = type metadata accessor for Logger(0LL);
    uint64_t v36 = sub_10000A720(v35, (uint64_t)qword_100A2AAA0);
    unint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v38 = static os_log_type_t.default.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "This is not a me device, Safe Locations can't be refreshed.",  v39,  2u);
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    uint64_t v128 = 0LL;
    LOBYTE(v129) = 2;
LABEL_19:
    uint64_t v49 = sub_100004AEC(&qword_1009B7400);
    unint64_t v50 = sub_10060FD94();
    Fail.init(error:)(&v128, v49, &type metadata for LocationOfInterestProvider.Error, v50);
    uint64_t v51 = sub_1000372EC(&qword_1009B7410, &qword_1009B73F8, (uint64_t)&protocol conformance descriptor for Fail<A, B>);
    uint64_t v52 = v126;
    uint64_t v53 = Publisher.eraseToAnyPublisher()(v126, v51);
    (*(void (**)(char *, uint64_t))(v125 + 8))(v21, v52);
    return v53;
  }

  if ((v123 & 1) != 0)
  {
LABEL_26:
    uint64_t v65 = sub_10061D0A4();
    swift_retain();
    unint64_t v66 = sub_10060FDD8((uint64_t)v65, v2);
    swift_bridgeObjectRelease();
    swift_release();
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v67 = type metadata accessor for Logger(0LL);
    uint64_t v68 = sub_10000A720(v67, (uint64_t)qword_100A2AAA0);
    uint64_t v69 = (os_log_s *)Logger.logObject.getter(v68);
    os_log_type_t v70 = static os_log_type_t.default.getter(v69);
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v71 = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "Will update all LOI backed safe locations.", v71, 2u);
      swift_slowDealloc(v71, -1LL, -1LL);
    }

    dispatch_group_t v72 = dispatch_group_create();
    uint64_t v128 = (uint64_t)v66;
    uint64_t v73 = sub_100004AEC(&qword_1009B7418);
    uint64_t v74 = sub_100004AEC(&qword_1009B7420);
    uint64_t v75 = sub_1000372EC( &qword_1009B7428,  &qword_1009B7418,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    uint64_t v76 = sub_1000372EC(&qword_1009B7430, &qword_1009B7420, (uint64_t)&protocol conformance descriptor for [A]);
    Publishers.MergeMany.init<A>(_:)(&v128, v73, v74, v75, v76);
    uint64_t v77 = sub_1000372EC( &qword_1009B7438,  &qword_1009B73D0,  (uint64_t)&protocol conformance descriptor for Publishers.MergeMany<A>);
    uint64_t v78 = v111;
    uint64_t v79 = v108;
    Publisher.collect()(v108, v77);
    (*(void (**)(char *, uint64_t))(v107 + 8))(v11, v79);
    uint64_t v128 = (uint64_t)v2[2];
    id v80 = (id)v128;
    unint64_t v81 = v109;
    uint64_t v82 = static DispatchQoS.background.getter(v80);
    uint64_t v83 = v110;
    static DispatchWorkItemFlags.barrier.getter(v82);
    uint64_t v84 = v72;
    OS_dispatch_queue.SchedulerOptions.init(qos:flags:group:)(v81, v83, v72);
    uint64_t v85 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v85 - 8) + 56LL))(v9, 0LL, 1LL, v85);
    uint64_t v86 = sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v87 = sub_1000372EC( &qword_1009B7440,  &qword_1009B73D8,  (uint64_t)&protocol conformance descriptor for Publishers.Collect<A>);
    unint64_t v88 = sub_1004BD040();
    uint64_t v89 = v114;
    uint64_t v90 = v113;
    Publisher.subscribe<A>(on:options:)(&v128, v9, v113, v86, v87, v88);
    sub_100015794((uint64_t)v9, &qword_1009B0670);

    (*(void (**)(char *, uint64_t))(v112 + 8))(v78, v90);
    uint64_t v91 = sub_1000372EC( &qword_1009B7448,  &qword_1009B73E0,  (uint64_t)&protocol conformance descriptor for Publishers.SubscribeOn<A, B>);
    unint64_t v92 = sub_10060FD94();
    uint64_t v93 = v116;
    uint64_t v94 = v117;
    Publisher<>.setFailureType<A>(to:)( &type metadata for LocationOfInterestProvider.Error,  v116,  &type metadata for LocationOfInterestProvider.Error,  v91,  v92);
    (*(void (**)(char *, uint64_t))(v115 + 8))(v89, v93);
    uint64_t v95 = swift_allocObject(&unk_10096BA18, 24LL, 7LL);
    *(void *)(v95 + swift_weakDestroy(v0 + 16) = v124;
    uint64_t v96 = sub_1000372EC( &qword_1009B7450,  &qword_1009B73E8,  (uint64_t)&protocol conformance descriptor for Publishers.SetFailureType<A, B>);
    uint64_t v97 = v119;
    __int128 v98 = v120;
    Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)( 0LL,  0LL,  sub_1006104E8,  v95,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  v119,  v96);
    swift_release();
    (*(void (**)(char *, uint64_t))(v118 + 8))(v94, v97);
    uint64_t v99 = sub_1000372EC( &qword_1009B7458,  &qword_1009B73F0,  (uint64_t)&protocol conformance descriptor for Publishers.HandleEvents<A>);
    uint64_t v100 = v122;
    uint64_t v53 = Publisher.eraseToAnyPublisher()(v122, v99);

    (*(void (**)(char *, uint64_t))(v121 + 8))(v98, v100);
    return v53;
  }

  sub_100607D40((uint64_t)v24);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1LL, v25) == 1)
  {
    sub_100015794((uint64_t)v24, (uint64_t *)&unk_10099D720);
    goto LABEL_26;
  }

  uint64_t v54 = (*(uint64_t (**)(char *, char *, uint64_t))(v26 + 32))(v31, v24, v25);
  if (Date.timeIntervalSinceNow.getter(v54) >= 86400.0)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v31, v25);
    goto LABEL_26;
  }

  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v55 = type metadata accessor for Logger(0LL);
  sub_10000A720(v55, (uint64_t)qword_100A2AAA0);
  uint64_t v56 = (*(uint64_t (**)(char *, char *, uint64_t))(v26 + 16))(v29, v31, v25);
  uint64_t v57 = (os_log_s *)Logger.logObject.getter(v56);
  os_log_type_t v58 = static os_log_type_t.default.getter(v57);
  if (os_log_type_enabled(v57, v58))
  {
    uint64_t v59 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    unint64_t v124 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v128 = (uint64_t)v124;
    *(_DWORD *)uint64_t v59 = 136315138;
    char v123 = v59 + 4;
    uint64_t v60 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter(v25, v60);
    uint64_t v127 = sub_1003F11D4(v61, v62, &v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128, v123, v59 + 12);
    swift_bridgeObjectRelease();
    uint64_t v63 = *(void (**)(char *, uint64_t))(v26 + 8);
    v63(v29, v25);
    _os_log_impl( (void *)&_mh_execute_header,  v57,  v58,  "Ignoring LOI update as last refresh date is too fresh lastUpdateDate: %s",  v59,  0xCu);
    uint64_t v64 = v124;
    swift_arrayDestroy(v124, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v64, -1LL, -1LL);
    swift_slowDealloc(v59, -1LL, -1LL);
  }

  else
  {
    uint64_t v63 = *(void (**)(char *, uint64_t))(v26 + 8);
    v63(v29, v25);
  }

  uint64_t v128 = 1LL;
  LOBYTE(v129) = 2;
  uint64_t v102 = sub_100004AEC(&qword_1009B7400);
  unint64_t v103 = sub_10060FD94();
  Fail.init(error:)(&v128, v102, &type metadata for LocationOfInterestProvider.Error, v103);
  uint64_t v104 = sub_1000372EC(&qword_1009B7410, &qword_1009B73F8, (uint64_t)&protocol conformance descriptor for Fail<A, B>);
  uint64_t v105 = v126;
  uint64_t v53 = Publisher.eraseToAnyPublisher()(v126, v104);
  (*(void (**)(char *, uint64_t))(v125 + 8))(v21, v105);
  v63(v31, v25);
  return v53;
}

uint64_t sub_10060A2E4()
{
  uint64_t v0 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v1 = __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Date.init()(v1);
  uint64_t v4 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 0LL, 1LL, v4);
  return sub_1006104F0((uint64_t)v3);
}

uint64_t sub_10060A36C@<X0>(uint64_t *a1@<X0>, int a2@<W1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  int v97 = a2;
  uint64_t v93 = a4;
  uint64_t v82 = sub_100004AEC(&qword_1009B7508);
  uint64_t v81 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  id v80 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009B7510);
  uint64_t v85 = *(void *)(v7 - 8);
  uint64_t v86 = v7;
  __chkstk_darwin(v7);
  uint64_t v83 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v89 = sub_100004AEC(&qword_1009B7518);
  uint64_t v87 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  uint64_t v84 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009B7520);
  uint64_t v90 = *(void *)(v10 - 8);
  uint64_t v91 = v10;
  __chkstk_darwin(v10);
  unint64_t v88 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SafeLocation(0LL);
  uint64_t v96 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v98 = (uint64_t)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v79 - v16;
  __chkstk_darwin(v15);
  uint64_t v99 = (uint64_t)&v79 - v18;
  uint64_t v92 = *a1;
  if (qword_10099B4C8 != -1) {
LABEL_29:
  }
    swift_once(&qword_10099B4C8, sub_10047B404);
  uint64_t v19 = type metadata accessor for Logger(0LL);
  uint64_t v94 = sub_10000A720(v19, (uint64_t)qword_100A2AAA0);
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v94);
  os_log_type_t v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    v102[0] = v23;
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v95 = v22 + 4;
    LOBYTE(v100) = v97;
    uint64_t v24 = String.init<A>(describing:)(&v100, &type metadata for SafeLocationType);
    uint64_t v100 = sub_1003F11D4(v24, v25, v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v95, v22 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Updating smart safe locations of type: %s", v22, 0xCu);
    swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  uint64_t v26 = sub_100576844();
  v102[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v95 = (uint8_t *)v26[2];
  if (v95)
  {
    unint64_t v79 = a3;
    a3 = 0LL;
    uint64_t v27 = _swiftEmptyArrayStorage;
    while (1)
    {
      if (a3 >= v26[2])
      {
        __break(1u);
        goto LABEL_29;
      }

      unint64_t v28 = (*(unsigned __int8 *)(v96 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80);
      uint64_t v29 = *(void *)(v96 + 72);
      uint64_t v30 = v99;
      sub_10001DC4C((uint64_t)v26 + v28 + v29 * a3, v99, type metadata accessor for SafeLocation);
      int v31 = *(unsigned __int8 *)(v30 + *(int *)(v12 + 24));
      sub_10001DC4C(v30, (uint64_t)v17, type metadata accessor for SafeLocation);
      int v32 = v17[*(int *)(v12 + 24)];
      sub_100018C68((uint64_t)v17, type metadata accessor for SafeLocation);
      if (v32 == 1) {
        goto LABEL_12;
      }
      sub_100018C68(v99, type metadata accessor for SafeLocation);
LABEL_7:
      if (v95 == (uint8_t *)++a3)
      {
        uint64_t v35 = (void *)v102[0];
        a3 = v79;
        goto LABEL_19;
      }
    }

    sub_100018C68((uint64_t)v17, type metadata accessor for SafeLocation);
LABEL_12:
    sub_10002218C(v99, v98, type metadata accessor for SafeLocation);
    if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0) {
      sub_100032BF0(0, v27[2] + 1LL, 1);
    }
    uint64_t v27 = (void *)v102[0];
    unint64_t v34 = *(void *)(v102[0] + 16);
    unint64_t v33 = *(void *)(v102[0] + 24);
    if (v34 >= v33 >> 1)
    {
      sub_100032BF0(v33 > 1, v34 + 1, 1);
      uint64_t v27 = (void *)v102[0];
    }

    v27[2] = v34 + 1;
    sub_10002218C(v98, (uint64_t)v27 + v28 + v34 * v29, type metadata accessor for SafeLocation);
    goto LABEL_7;
  }

  uint64_t v35 = _swiftEmptyArrayStorage;
LABEL_19:
  swift_bridgeObjectRelease();
  uint64_t v36 = swift_retain_n(v35, 2LL);
  unint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v38 = static os_log_type_t.default.getter(v37);
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v40 = swift_slowAlloc(32LL, -1LL);
    v102[0] = v40;
    *(_DWORD *)uint64_t v39 = 136315138;
    uint64_t v41 = swift_retain();
    unint64_t v42 = a3;
    uint64_t v43 = Array.description.getter(v41, v12);
    unint64_t v45 = v44;
    swift_release();
    uint64_t v46 = v43;
    a3 = v42;
    uint64_t v100 = sub_1003F11D4(v46, v45, v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v39 + 4, v39 + 12);
    swift_release_n(v35, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Existing safe locations: %s", v39, 0xCu);
    swift_arrayDestroy(v40, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1LL, -1LL);
    swift_slowDealloc(v39, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v35, 2LL);
  }

  uint64_t v47 = sub_10060B960(v97, (uint64_t)v35, v92);
  swift_release();
  swift_bridgeObjectRetain_n(v47, 2LL);
  uint64_t v49 = (void *)Logger.logObject.getter(v48);
  os_log_type_t v50 = static os_log_type_t.default.getter(v49);
  if (!os_log_type_enabled((os_log_t)v49, v50))
  {

    swift_bridgeObjectRelease_n(v47, 2LL);
    if (*(void *)(v47 + 16)) {
      goto LABEL_24;
    }
LABEL_26:
    swift_bridgeObjectRelease();
    v102[0] = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v75 = sub_100004AEC(&qword_1009B7560);
    uint64_t v76 = v80;
    Just.init(_:)(v102, v75);
    uint64_t v77 = sub_1000372EC(&qword_1009B7568, &qword_1009B7508, (uint64_t)&protocol conformance descriptor for Just<A>);
    uint64_t v78 = v82;
    uint64_t v73 = Publisher.eraseToAnyPublisher()(v82, v77);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v76, v78);
    goto LABEL_27;
  }

  uint64_t v51 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v52 = swift_slowAlloc(32LL, -1LL);
  v102[0] = v52;
  *(_DWORD *)uint64_t v51 = 136315138;
  uint64_t v53 = type metadata accessor for LocationOfInterestProvider.RemappingOperation(0LL);
  swift_bridgeObjectRetain(v47);
  uint64_t v55 = Array.description.getter(v54, v53);
  unint64_t v57 = v56;
  swift_bridgeObjectRelease();
  uint64_t v100 = sub_1003F11D4(v55, v57, v102);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v51 + 4, v51 + 12);
  swift_bridgeObjectRelease_n(v47, 2LL);
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, (os_log_t)v49, v50, "Received mapping response: %s", v51, 0xCu);
  swift_arrayDestroy(v52, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v52, -1LL, -1LL);
  swift_slowDealloc(v51, -1LL, -1LL);

  if (!*(void *)(v47 + 16)) {
    goto LABEL_26;
  }
LABEL_24:
  swift_retain();
  os_log_type_t v58 = sub_100610284(v47, a3);
  swift_bridgeObjectRelease();
  swift_release();
  v102[0] = (uint64_t)v58;
  uint64_t v59 = sub_100004AEC(&qword_1009B7528);
  uint64_t v60 = sub_100004AEC(&qword_1009B7530);
  uint64_t v61 = sub_1000372EC(&qword_1009B7538, &qword_1009B7528, (uint64_t)&unk_100800438);
  uint64_t v62 = sub_1000372EC(&qword_1009B7540, &qword_1009B7530, (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v63 = v83;
  Publishers.MergeMany.init<A>(_:)(v102, v59, v60, v61, v62);
  uint64_t v64 = type metadata accessor for LocationOfInterestProvider.RemappingOperation(0LL);
  uint64_t v65 = sub_1000372EC( &qword_1009B7548,  &qword_1009B7510,  (uint64_t)&protocol conformance descriptor for Publishers.MergeMany<A>);
  unint64_t v66 = v84;
  uint64_t v67 = v86;
  Publisher.compactMap<A>(_:)(sub_10060AD4C, 0LL, v86, v64, v65);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v63, v67);
  uint64_t v68 = sub_1000372EC( &qword_1009B7550,  &qword_1009B7518,  (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  os_log_type_t v70 = v88;
  uint64_t v69 = v89;
  Publisher.collect()(v89, v68);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v66, v69);
  uint64_t v71 = sub_1000372EC( &qword_1009B7558,  &qword_1009B7520,  (uint64_t)&protocol conformance descriptor for Publishers.Collect<A>);
  uint64_t v72 = v91;
  uint64_t v73 = Publisher.eraseToAnyPublisher()(v91, v71);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v90 + 8))(v70, v72);
LABEL_27:
  uint64_t *v93 = v73;
  return result;
}

uint64_t sub_10060AD4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100004AEC(&qword_1009B7570);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001581C(a1, (uint64_t)v6, &qword_1009B7570);
  if (swift_getEnumCaseMultiPayload(v6, v4) == 1)
  {
    sub_100015794((uint64_t)v6, &qword_1009B7570);
    uint64_t v7 = type metadata accessor for LocationOfInterestProvider.RemappingOperation(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( a2,  1LL,  1LL,  v7);
  }

  else
  {
    sub_10002218C((uint64_t)v6, a2, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
    uint64_t v9 = type metadata accessor for LocationOfInterestProvider.RemappingOperation(0LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(a2, 0LL, 1LL, v9);
  }

uint64_t sub_10060AE4C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v72 = a3;
  uint64_t v7 = sub_100004AEC(&qword_1009B74C0);
  uint64_t v80 = *(void *)(v7 - 8);
  uint64_t v81 = v7;
  __chkstk_darwin(v7);
  unint64_t v79 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_1009B74D8);
  uint64_t v83 = *(void *)(v9 - 8);
  uint64_t v84 = v9;
  __chkstk_darwin(v9);
  uint64_t v82 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_1009AF7F8);
  uint64_t v74 = *(void *)(v11 - 8);
  uint64_t v75 = v11;
  __chkstk_darwin(v11);
  uint64_t v73 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_1009B74E0);
  uint64_t v77 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v76 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_1009B74E8);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for LocationOfInterestProvider.RemappingOperation(0LL);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  unint64_t v25 = (char *)&v68 - v24;
  uint64_t v26 = *a1;
  uint64_t v78 = a2;
  uint64_t v85 = a2;
  uint64_t v86 = v26;
  uint64_t v27 = *(void *)(v26 + 16);
  uint64_t v87 = a4;
  if (!v27)
  {
    swift_bridgeObjectRetain(v26);
    goto LABEL_14;
  }

  uint64_t v68 = v13;
  uint64_t v69 = v18;
  uint64_t v70 = v16;
  uint64_t v71 = v15;
  uint64_t v28 = v26 + ((*(unsigned __int8 *)(v23 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
  uint64_t v29 = *(void *)(v23 + 72);
  swift_bridgeObjectRetain(v26);
  while (1)
  {
    sub_10001DC4C(v28, (uint64_t)v25, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
    sub_10001DC4C((uint64_t)v25, (uint64_t)v22, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
    sub_100018C68((uint64_t)v22, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
    sub_100018C68((uint64_t)v25, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
LABEL_4:
    v28 += v29;
    if (!--v27) {
      goto LABEL_14;
    }
  }

  char v30 = v22[*(int *)(sub_100004AEC(&qword_1009B73C0) + 48)];
  sub_100018C68((uint64_t)v22, type metadata accessor for SafeLocation);
  sub_100018C68((uint64_t)v25, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
  if ((v30 & 1) != 0) {
    goto LABEL_4;
  }
  if (v78 != 2)
  {
LABEL_14:
    v88[0] = v85;
    v88[1] = v86;
    char v89 = 0;
    swift_bridgeObjectRetain(v86);
    uint64_t v62 = v79;
    Just.init(_:)(v88, &type metadata for LocationOfInterestProvider.LOIRequestResponse);
    unint64_t v63 = sub_10060FD94();
    uint64_t v64 = v81;
    uint64_t v65 = v82;
    Just.setFailureType<A>(to:)( &type metadata for LocationOfInterestProvider.Error,  v81,  &type metadata for LocationOfInterestProvider.Error,  v63);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v62, v64);
    uint64_t v66 = sub_1000372EC( &qword_1009B74F0,  &qword_1009B74D8,  (uint64_t)&protocol conformance descriptor for Result<A, B>.Publisher);
    uint64_t v67 = v84;
    uint64_t v60 = Publisher.eraseToAnyPublisher()(v84, v66);
    swift_bridgeObjectRelease();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v83 + 8))(v65, v67);
    goto LABEL_15;
  }

  uint64_t v31 = *(void *)(v72 + 64);
  int v32 = sub_100506C30();
  swift_retain();
  unint64_t v33 = sub_10060E714((uint64_t)v32, v31);
  swift_bridgeObjectRelease();
  swift_release();
  unint64_t v34 = sub_1004E7578((uint64_t)v33);
  swift_bridgeObjectRelease();
  uint64_t v35 = sub_1001899C8((uint64_t)v34);
  swift_bridgeObjectRelease();
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v36 = type metadata accessor for Logger(0LL);
  uint64_t v37 = sub_10000A720(v36, (uint64_t)qword_100A2AAA0);
  os_log_type_t v38 = (os_log_s *)Logger.logObject.getter(v37);
  os_log_type_t v39 = static os_log_type_t.default.getter(v38);
  BOOL v40 = os_log_type_enabled(v38, v39);
  uint64_t v41 = v69;
  uint64_t v42 = v68;
  if (v40)
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v43 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "New Safe Location triggered auto-enrollment.", v43, 2u);
    swift_slowDealloc(v43, -1LL, -1LL);
  }

  uint64_t v44 = swift_allocObject(&unk_10096BAE0, 32LL, 7LL);
  *(void *)(v44 + swift_weakDestroy(v0 + 16) = v31;
  *(void *)(v44 + 24) = v35;
  swift_retain();
  swift_bridgeObjectRetain(v35);
  uint64_t v45 = sub_100004AEC((uint64_t *)&unk_1009AF7A0);
  uint64_t v46 = sub_1000372EC( &qword_1009AF800,  (uint64_t *)&unk_1009AF7A0,  (uint64_t)&protocol conformance descriptor for Future<A, B>);
  uint64_t v47 = v73;
  Deferred.init(createPublisher:)(sub_1005DA01C, v44, v45, v46);
  uint64_t v48 = sub_1000372EC(&qword_1009AF808, &qword_1009AF7F8, (uint64_t)&protocol conformance descriptor for Deferred<A>);
  uint64_t v49 = v75;
  uint64_t v50 = Publisher.eraseToAnyPublisher()(v75, v48);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v47, v49);
  swift_bridgeObjectRelease();
  v88[0] = v50;
  uint64_t v51 = swift_allocObject(&unk_10096BB08, 33LL, 7LL);
  uint64_t v52 = v86;
  *(void *)(v51 + swift_weakDestroy(v0 + 16) = v85;
  *(void *)(v51 + 24) = v52;
  *(_BYTE *)(v51 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0;
  swift_bridgeObjectRetain(v52);
  uint64_t v53 = sub_100004AEC(&qword_1009AF7C8);
  uint64_t v54 = sub_1000372EC( &qword_1009AF7D8,  &qword_1009AF7C8,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v55 = v76;
  Publisher.map<A>(_:)(sub_100610750, v51, v53, &type metadata for LocationOfInterestProvider.LOIRequestResponse, v54);
  swift_release();
  swift_release();
  uint64_t v56 = sub_1000372EC( &qword_1009B74F8,  &qword_1009B74E0,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  unint64_t v57 = sub_10060FD94();
  Publisher.mapError<A>(_:)(sub_10060B534, 0LL, v42, &type metadata for LocationOfInterestProvider.Error, v56, v57);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v55, v42);
  uint64_t v58 = sub_1000372EC( &qword_1009B7500,  &qword_1009B74E8,  (uint64_t)&protocol conformance descriptor for Publishers.MapError<A, B>);
  uint64_t v59 = v71;
  uint64_t v60 = Publisher.eraseToAnyPublisher()(v71, v58);
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v41, v59);
LABEL_15:
  uint64_t *v87 = v60;
  return result;
}

id sub_10060B534@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(void *)a2 = v2;
  *(_BYTE *)(a2 + 8) = 1;
  return v2;
}

uint64_t sub_10060B548@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_100004AEC(&qword_1009B74C0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v20[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009B74C8);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v20[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void **)a1;
  char v15 = *(_BYTE *)(a1 + 8);
  v20[0] = a2;
  v20[1] = v14;
  char v21 = v15 | 0x40;
  sub_100610698(v14, v15);
  Just.init(_:)(v20, &type metadata for LocationOfInterestProvider.LOIRequestResponse);
  Just.setFailureType<A>(to:)(&type metadata for Never, v6, &type metadata for Never, &protocol witness table for Never);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v16 = sub_1000372EC( &qword_1009B74D0,  &qword_1009B74C8,  (uint64_t)&protocol conformance descriptor for Result<A, B>.Publisher);
  uint64_t v17 = Publisher.eraseToAnyPublisher()(v10, v16);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  *a3 = v17;
  return result;
}

uint64_t sub_10060B6B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SafeLocation(0LL);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v27 - v6;
  uint64_t v8 = type metadata accessor for LocationOfInterestProvider.RemappingOperation(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C(v1, (uint64_t)v10, v11);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v8);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_10002218C((uint64_t)v10, (uint64_t)v5, type metadata accessor for SafeLocation);
      uint64_t v13 = 0x65766F6D6572LL;
    }

    else
    {
      sub_10002218C((uint64_t)v10, (uint64_t)v5, type metadata accessor for SafeLocation);
      uint64_t v13 = 0x657461647075LL;
    }

    uint64_t v27 = v13 & 0xFFFFFFFFFFFFLL | 0x20000000000000LL;
    unint64_t v28 = 0xE700000000000000LL;
    uint64_t v23 = type metadata accessor for UUID(0LL);
    uint64_t v24 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    uint64_t v22 = v27;
  }

  else
  {
    int v14 = v10[*(int *)(sub_100004AEC(&qword_1009B73C0) + 48)];
    sub_10002218C((uint64_t)v10, (uint64_t)v7, type metadata accessor for SafeLocation);
    uint64_t v27 = 0LL;
    unint64_t v28 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(19LL);
    swift_bridgeObjectRelease();
    uint64_t v27 = 0x20657461657263LL;
    unint64_t v28 = 0xE700000000000000LL;
    uint64_t v15 = type metadata accessor for UUID(0LL);
    uint64_t v16 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v15, v16);
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 0x206465766F6D202CLL;
    v18._object = (void *)0xE800000000000000LL;
    String.append(_:)(v18);
    if (v14) {
      uint64_t v19 = 1702195828LL;
    }
    else {
      uint64_t v19 = 0x65736C6166LL;
    }
    if (v14) {
      unint64_t v20 = 0xE400000000000000LL;
    }
    else {
      unint64_t v20 = 0xE500000000000000LL;
    }
    unint64_t v21 = v20;
    String.append(_:)(*(Swift::String *)&v19);
    swift_bridgeObjectRelease();
    uint64_t v22 = v27;
    uint64_t v5 = v7;
  }

  sub_100018C68((uint64_t)v5, type metadata accessor for SafeLocation);
  return v22;
}

uint64_t sub_10060B960(int a1, uint64_t a2, uint64_t a3)
{
  int v287 = a1;
  uint64_t v332 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v332 - 8);
  uint64_t v6 = __chkstk_darwin(v332);
  uint64_t v302 = (uint64_t)v286 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v300 = (uint64_t)v286 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v301 = (uint64_t)v286 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  v330 = (char *)v286 - v13;
  __chkstk_darwin(v12);
  v329 = (char *)v286 - v14;
  uint64_t v15 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v15);
  v318 = (char *)v286 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v324 = type metadata accessor for Date(0LL);
  uint64_t v323 = *(void *)(v324 - 8);
  __chkstk_darwin(v324);
  v322 = (char *)v286 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v305 = sub_100004AEC(&qword_1009B73B0);
  __chkstk_darwin(v305);
  uint64_t v307 = (uint64_t)v286 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009AF740);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v312 = (uint64_t)v286 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  uint64_t v319 = (uint64_t)v286 - v22;
  uint64_t v23 = (int *)type metadata accessor for SafeLocation(0LL);
  uint64_t v24 = *((void *)v23 - 1);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v296 = (uint64_t)v286 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v292 = (uint64_t)v286 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v294 = (uint64_t)v286 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v291 = (uint64_t)v286 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v295 = (uint64_t)v286 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v299 = (uint64_t)v286 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v298 = (uint64_t)v286 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v297 = (uint64_t)v286 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v321 = (uint64_t)v286 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v45 = (char *)v286 - v44;
  uint64_t v46 = __chkstk_darwin(v43);
  uint64_t v48 = (char *)v286 - v47;
  __chkstk_darwin(v46);
  uint64_t v50 = (char *)v286 - v49;
  unint64_t v308 = sub_100413EB8((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v51 = sub_100413EB8((uint64_t)_swiftEmptyArrayStorage);
  v343 = (void *)v51;
  unint64_t v342 = sub_100413EB8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v304 = *(void *)(a3 + 16);
  if (!v304)
  {
LABEL_89:
    swift_bridgeObjectRetain(v51);
    uint64_t v263 = sub_100607730(v262);
    swift_bridgeObjectRelease();
    uint64_t v264 = sub_1006F1060(v263);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(v308);
    uint64_t v266 = sub_100607730(v265);
    swift_bridgeObjectRelease();
    uint64_t v267 = sub_1006F1060(v266);
    swift_bridgeObjectRelease();
    v268 = sub_100607BD0(a2);
    uint64_t v269 = sub_1006F1060((uint64_t)v268);
    swift_bridgeObjectRelease();
    if (*(void *)(v269 + 16) <= *(void *)(v264 + 16) >> 3)
    {
      v338 = (void *)v264;
      swift_bridgeObjectRetain(v264);
      sub_1003CBB18(v269);
      v270 = v338;
    }

    else
    {
      swift_bridgeObjectRetain(v264);
      v270 = sub_1003CC7D4(v269, v264);
    }

    if (v270[2] <= *(void *)(v264 + 16) >> 3)
    {
      v338 = (void *)v264;
      sub_1003CBB18((uint64_t)v270);
      v271 = v338;
    }

    else
    {
      v271 = sub_1003CC7D4((uint64_t)v270, v264);
    }

    if (*(void *)(v267 + 16) <= *(void *)(v269 + 16) >> 3)
    {
      v338 = (void *)v269;
      swift_bridgeObjectRetain(v269);
      sub_1003CBB18(v267);
      swift_bridgeObjectRelease();
      v272 = v338;
    }

    else
    {
      swift_bridgeObjectRetain(v269);
      v272 = sub_1003CC7D4(v267, v269);
      swift_bridgeObjectRelease();
    }

    if (v271[2] <= *(void *)(v269 + 16) >> 3)
    {
      v338 = (void *)v269;
      sub_1003CBB18((uint64_t)v271);
      v273 = v338;
    }

    else
    {
      v273 = sub_1003CC7D4((uint64_t)v271, v269);
    }

    if (v272[2] <= v273[2] >> 3)
    {
      v338 = v273;
      sub_1003CBB18((uint64_t)v272);
      v274 = v338;
    }

    else
    {
      v274 = sub_1003CC7D4((uint64_t)v272, (uint64_t)v273);
    }

    uint64_t v275 = v286[1];
    swift_retain();
    sub_10060EC44((uint64_t)v270, (uint64_t *)&v343, (uint64_t *)&v342, v275);
    uint64_t v277 = v276;
    swift_bridgeObjectRelease();
    swift_release();
    sub_1006071F0((uint64_t)v271, (uint64_t *)&v343);
    uint64_t v279 = v278;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(a2);
    sub_10060F0CC((uint64_t)v274, a2);
    uint64_t v281 = v280;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(a2);
    sub_10060F684((uint64_t)v272, a2, v287);
    uint64_t v283 = v282;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v338 = (void *)v277;
    sub_100186AE4(v279);
    sub_100186AE4(v281);
    sub_100186AE4(v283);
    uint64_t v284 = (uint64_t)v338;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v284;
  }

  uint64_t v52 = *(void *)(a2 + 16);
  unint64_t v53 = (*(unsigned __int8 *)(v24 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  uint64_t v303 = a3 + v53;
  uint64_t v326 = *(void *)(v24 + 72);
  uint64_t v306 = a2 + v53;
  v290 = v335;
  v286[0] = a3;
  __n128 v54 = swift_bridgeObjectRetain(a3);
  uint64_t v55 = 0LL;
  v54.n128_u64[0] = 136315138LL;
  __n128 v289 = v54;
  v288 = (char *)&type metadata for Any + 8;
  uint64_t v309 = a2;
  uint64_t v331 = v5;
  uint64_t v56 = v312;
  v333 = v23;
  uint64_t v314 = v24;
  v328 = v45;
  v325 = v48;
  v327 = v50;
  uint64_t v311 = v52;
  while (1)
  {
    uint64_t v310 = v55;
    sub_10001DC4C(v303 + v326 * v55, (uint64_t)v50, type metadata accessor for SafeLocation);
    if (v52)
    {
      swift_bridgeObjectRetain(a2);
      swift_beginAccess(v50, v341, 0LL, 0LL);
      uint64_t v76 = &v50[v23[5]];
      uint64_t v77 = v52;
      uint64_t v78 = v306;
      uint64_t v79 = v326;
      while (1)
      {
        sub_10001DC4C(v78, (uint64_t)v48, type metadata accessor for SafeLocation);
        if ((static UUID.== infix(_:_:)(&v48[v23[5]], v76) & 1) != 0) {
          break;
        }
        sub_100018C68((uint64_t)v48, type metadata accessor for SafeLocation);
        v78 += v79;
        if (!--v77)
        {
          swift_bridgeObjectRelease();
          uint64_t v56 = v312;
          uint64_t v24 = v314;
          uint64_t v52 = v311;
          goto LABEL_11;
        }
      }

      if (qword_10099B4C8 != -1) {
        swift_once(&qword_10099B4C8, sub_10047B404);
      }
      uint64_t v81 = type metadata accessor for Logger(0LL);
      uint64_t v82 = sub_10000A720(v81, (uint64_t)qword_100A2AAA0);
      uint64_t v83 = (os_log_s *)Logger.logObject.getter(v82);
      os_log_type_t v84 = static os_log_type_t.default.getter(v83);
      BOOL v85 = os_log_type_enabled(v83, v84);
      uint64_t v86 = v332;
      if (v85)
      {
        uint64_t v87 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v320 = swift_slowAlloc(32LL, -1LL);
        v338 = (void *)v320;
        v317 = v87;
        *(_DWORD *)uint64_t v87 = v289.n128_u32[0];
        v315 = v87 + 4;
        os_log_t v316 = v83;
        uint64_t v88 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v89 = dispatch thunk of CustomStringConvertible.description.getter(v86, v88);
        uint64_t v334 = sub_1003F11D4(v89, v90, (uint64_t *)&v338);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v334, v290, v315, v87 + 12);
        swift_bridgeObjectRelease();
        os_log_t v91 = v316;
        uint64_t v92 = v317;
        _os_log_impl( (void *)&_mh_execute_header,  v316,  v84,  "Inferred safe location identifier %s matches existing safe location.",  v317,  0xCu);
        uint64_t v93 = v320;
        swift_arrayDestroy(v320, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v93, -1LL, -1LL);
        swift_slowDealloc(v92, -1LL, -1LL);
        swift_bridgeObjectRelease();
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      uint64_t v56 = v312;
      uint64_t v94 = v319;
      sub_10002218C((uint64_t)v48, v319, type metadata accessor for SafeLocation);
      uint64_t v80 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v314 + 56);
      v80(v94, 0LL, 1LL, v23);
      if (!v311)
      {
LABEL_34:
        v80(v56, 1LL, 1LL, v23);
        goto LABEL_35;
      }
    }

    else
    {
LABEL_11:
      uint64_t v80 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v24 + 56);
      v80(v319, 1LL, 1LL, v23);
      uint64_t v79 = v326;
      if (!v52) {
        goto LABEL_34;
      }
    }

    uint64_t v320 = (uint64_t)v80;
    swift_bridgeObjectRetain(a2);
    swift_beginAccess(v50, v340, 0LL, 0LL);
    uint64_t v95 = v306;
    uint64_t v96 = v311;
    while (1)
    {
      sub_10001DC4C(v95, (uint64_t)v45, type metadata accessor for SafeLocation);
      if ((static UUID.== infix(_:_:)(&v45[v23[5]], &v50[v23[5]]) & 1) == 0)
      {
        uint64_t v97 = v321;
        uint64_t v98 = sub_10001DC4C((uint64_t)v50, v321, type metadata accessor for SafeLocation);
        double v99 = *(double *)&v45[v23[8]];
        double v100 = *(double *)&v45[v23[9]];
        uint64_t v101 = v23[10];
        double v102 = *(double *)&v45[v101];
        unint64_t v103 = v322;
        Date.init()(v98);
        id v104 = objc_allocWithZone(&OBJC_CLASS___CLLocation);
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        id v106 = objc_msgSend( v104,  "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:courseAccuracy:speed:speedAccuracy:timestamp:",  isa,  v99,  v100,  0.0,  v102,  v102,  -1.0,  -1.0,  -1.0,  0xBFF0000000000000);

        uint64_t v107 = *(void (**)(char *, uint64_t))(v323 + 8);
        uint64_t v108 = v324;
        v107(v103, v324);
        [v106 setReferenceFrame:v328[v333[11]]];
        [v106 coordinate];
        double v110 = v109;
        double v112 = v111;

        double v113 = *(double *)&v328[v101];
        UUID.uuidString.getter(v114);
        id v115 = objc_allocWithZone(&OBJC_CLASS___CLCircularRegion);
        NSString v116 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v117 = objc_msgSend(v115, "initWithCenter:radius:identifier:", v116, v110, v112, v113);

        double v118 = *(double *)(v97 + v333[8]);
        double v119 = *(double *)(v97 + v333[9]);
        uint64_t v120 = v333[10];
        double v121 = *(double *)(v97 + v120);
        Date.init()(v122);
        id v123 = objc_allocWithZone(&OBJC_CLASS___CLLocation);
        Class v124 = Date._bridgeToObjectiveC()().super.isa;
        id v125 = objc_msgSend( v123,  "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:courseAccuracy:speed:speedAccuracy:timestamp:",  v124,  v118,  v119,  0.0,  v121,  v121,  -1.0,  -1.0,  -1.0,  0xBFF0000000000000);

        v107(v103, v108);
        uint64_t v23 = v333;
        [v125 setReferenceFrame:*(unsigned __int8 *)(v97 + v333[11])];
        [v125 coordinate];
        double v127 = v126;
        double v129 = v128;

        double v130 = *(double *)(v97 + v120);
        uint64_t v79 = v326;
        UUID.uuidString.getter(v131);
        id v132 = objc_allocWithZone(&OBJC_CLASS___CLCircularRegion);
        NSString v133 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        char v134 = v132;
        uint64_t v45 = v328;
        id v135 = objc_msgSend(v134, "initWithCenter:radius:identifier:", v133, v127, v129, v130);

        sub_10061CB88(v135);
        double v137 = v136;
        [v117 radius];
        double v139 = v138;
        [v117 radius];
        double v141 = v139 * v140 * 3.14159265;
        [v135 radius];
        double v143 = v142;
        [v135 radius];
        double v145 = v144;

        uint64_t v50 = v327;
        double v146 = v143 * v145 * 3.14159265;
        if (v146 >= v141) {
          double v146 = v141;
        }
        double v147 = v146 <= 0.0 ? 0.0 : v137 / v146;
        uint64_t v148 = v97;
        uint64_t v48 = v325;
        sub_100018C68(v148, type metadata accessor for SafeLocation);
        if (v147 > 0.5) {
          break;
        }
      }

      sub_100018C68((uint64_t)v45, type metadata accessor for SafeLocation);
      v95 += v79;
      if (!--v96)
      {
        swift_bridgeObjectRelease();
        uint64_t v56 = v312;
        uint64_t v80 = (void (*)(uint64_t, uint64_t, uint64_t, int *))v320;
        goto LABEL_34;
      }
    }

    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v149 = type metadata accessor for Logger(0LL);
    uint64_t v150 = sub_10000A720(v149, (uint64_t)qword_100A2AAA0);
    v151 = (os_log_s *)Logger.logObject.getter(v150);
    os_log_type_t v152 = static os_log_type_t.default.getter(v151);
    if (os_log_type_enabled(v151, v152))
    {
      Swift::String v153 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v154 = swift_slowAlloc(32LL, -1LL);
      v338 = (void *)v154;
      *(_DWORD *)Swift::String v153 = v289.n128_u32[0];
      v317 = v153 + 4;
      uint64_t v155 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v156 = dispatch thunk of CustomStringConvertible.description.getter(v332, v155);
      uint64_t v334 = sub_1003F11D4(v156, v157, (uint64_t *)&v338);
      uint64_t v45 = v328;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v334, v290, v317, v153 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v151,  v152,  "Inferred safe location identifier %s is within the region of existing safe location.",  v153,  0xCu);
      swift_arrayDestroy(v154, 1LL, v288);
      uint64_t v158 = v154;
      uint64_t v50 = v327;
      swift_slowDealloc(v158, -1LL, -1LL);
      swift_slowDealloc(v153, -1LL, -1LL);
    }

    swift_bridgeObjectRelease();

    uint64_t v159 = (void (*)(uint64_t, void, uint64_t, int *))v320;
    uint64_t v56 = v312;
    sub_10002218C((uint64_t)v45, v312, type metadata accessor for SafeLocation);
    v159(v56, 0LL, 1LL, v23);
LABEL_35:
    uint64_t v160 = v307;
    uint64_t v161 = v307 + *(int *)(v305 + 48);
    sub_10001581C(v319, v307, (uint64_t *)&unk_1009AF740);
    sub_10001581C(v56, v161, (uint64_t *)&unk_1009AF740);
    Swift::String v162 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v314 + 48);
    LODWORD(v160) = v162(v160, 1LL, v23);
    int v163 = v162(v161, 1LL, v23);
    if ((_DWORD)v160 != 1)
    {
      if (v163 != 1)
      {
        uint64_t v193 = v297;
        sub_10002218C(v307, v297, type metadata accessor for SafeLocation);
        uint64_t v194 = v298;
        sub_10002218C(v161, v298, type metadata accessor for SafeLocation);
        uint64_t v195 = v23[13];
        uint64_t v196 = *(void *)(v193 + v195);
        uint64_t v197 = *(void *)(v194 + v195);
        v338 = (void *)v196;
        swift_bridgeObjectRetain(v196);
        swift_bridgeObjectRetain(v197);
        sub_100184B50(v197);
        uint64_t v198 = (uint64_t)v338;
        uint64_t v199 = v338[2];
        v200 = (uint8_t *)sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v201 = v332;
        v317 = v200;
        uint64_t v202 = Set.init(minimumCapacity:)(v199);
        os_log_t v316 = *(os_log_t *)(v198 + 16);
        if (v316)
        {
          uint64_t v203 = 0LL;
          uint64_t v204 = v331;
          unint64_t v205 = (*(unsigned __int8 *)(v204 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v204 + 80);
          uint64_t v293 = v198;
          v315 = (uint8_t *)(v198 + v205);
          uint64_t v206 = *(void *)(v331 + 72);
          v207 = *(void (**)(char *, unint64_t, uint64_t))(v331 + 16);
          v208 = v329;
          v209 = v318;
          v207(v318, v198 + v205, v201);
          while (1)
          {
            v313 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v204 + 56);
            v313(v209, 0LL, 1LL, v201);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v204 + 48))(v209, 1LL, v201) == 1)
            {
              uint64_t v23 = v333;
              uint64_t v50 = v327;
              goto LABEL_79;
            }

            uint64_t v320 = v203;
            (*(void (**)(char *, char *, uint64_t))(v204 + 32))(v208, v209, v201);
            uint64_t v214 = *(void *)(v202 + 40);
            swift_bridgeObjectRetain(v202);
            uint64_t v215 = dispatch thunk of Hashable._rawHashValue(seed:)(v214, v201, v317);
            uint64_t v216 = -1LL << *(_BYTE *)(v202 + 32);
            unint64_t v217 = v215 & ~v216;
            if (((*(void *)(v202 + 56 + ((v217 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v217) & 1) != 0)
            {
              uint64_t v218 = ~v216;
              while (1)
              {
                v219 = v330;
                uint64_t v220 = v332;
                v207(v330, *(void *)(v202 + 48) + v217 * v206, v332);
                uint64_t v221 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
                char v222 = dispatch thunk of static Equatable.== infix(_:_:)(v219, v208, v220, v221);
                v213 = *(void (**)(char *, uint64_t))(v331 + 8);
                v213(v219, v220);
                if ((v222 & 1) != 0) {
                  break;
                }
                unint64_t v217 = (v217 + 1) & v218;
                v208 = v329;
                if (((*(void *)(v202 + 56 + ((v217 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v217) & 1) == 0) {
                  goto LABEL_49;
                }
              }

              swift_bridgeObjectRelease();
              uint64_t v204 = v331;
              uint64_t v212 = v332;
              v208 = v329;
            }

            else
            {
LABEL_49:
              swift_bridgeObjectRelease();
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v202);
              uint64_t v211 = (uint64_t)v330;
              uint64_t v212 = v332;
              v207(v330, (unint64_t)v208, v332);
              v338 = (void *)v202;
              sub_1000C9164(v211, v217, isUniquelyReferenced_nonNull_native);
              uint64_t v202 = (uint64_t)v338;
              swift_bridgeObjectRelease();
              uint64_t v204 = v331;
              v213 = *(void (**)(char *, uint64_t))(v331 + 8);
            }

            uint64_t v203 = v320 + 1;
            v213(v208, v212);
            uint64_t v201 = v212;
            v209 = v318;
            uint64_t v48 = v325;
            if ((os_log_t)v203 == v316) {
              break;
            }
            v207(v318, (unint64_t)&v315[v206 * v203], v201);
          }

          uint64_t v23 = v333;
          uint64_t v50 = v327;
          v313(v318, 1LL, 1LL, v201);
        }

        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v331 + 56))(v318, 1LL, 1LL, v201);
        }

LABEL_79:
        swift_bridgeObjectRelease();
        v241 = sub_1002FE60C(v202);
        swift_bridgeObjectRelease();
        swift_beginAccess(v50, v335, 1LL, 0LL);
        *(void *)&v50[v23[13]] = v241;
        swift_bridgeObjectRelease();
        uint64_t v242 = v297;
        uint64_t v243 = v297 + v23[5];
        uint64_t v244 = v331;
        v245 = *(void (**)(char *, uint64_t, uint64_t))(v331 + 16);
        uint64_t v246 = (uint64_t)v330;
        v245(v330, v243, v201);
        uint64_t v247 = v299;
        sub_10001DC4C(v242, v299, type metadata accessor for SafeLocation);
        uint64_t v248 = v308;
        char v249 = swift_isUniquelyReferenced_nonNull_native(v308);
        v338 = (void *)v248;
        uint64_t v250 = v332;
        sub_10005F14C(v247, v246, v249);
        uint64_t v251 = (uint64_t)v338;
        swift_bridgeObjectRelease();
        v252 = *(void (**)(uint64_t, uint64_t))(v244 + 8);
        v252(v246, v250);
        uint64_t v253 = v298;
        v245((char *)v246, v298 + v333[5], v250);
        sub_10001DC4C(v253, v247, type metadata accessor for SafeLocation);
        char v254 = swift_isUniquelyReferenced_nonNull_native(v251);
        v338 = (void *)v251;
        sub_10005F14C(v247, v246, v254);
        unint64_t v308 = (unint64_t)v338;
        swift_bridgeObjectRelease();
        v252(v246, v250);
        v245((char *)v246, (uint64_t)&v327[v333[5]], v250);
        sub_10001DC4C((uint64_t)v327, v247, type metadata accessor for SafeLocation);
        uint64_t v255 = (uint64_t)v343;
        char v256 = swift_isUniquelyReferenced_nonNull_native(v343);
        v338 = (void *)v255;
        uint64_t v257 = v247;
        uint64_t v50 = v327;
        sub_10005F14C(v257, v246, v256);
        v343 = v338;
        swift_bridgeObjectRelease();
        v252(v246, v250);
        uint64_t v23 = v333;
        sub_100018C68(v253, type metadata accessor for SafeLocation);
        sub_100018C68(v242, type metadata accessor for SafeLocation);
        uint64_t v56 = v312;
        uint64_t v24 = v314;
        uint64_t v45 = v328;
        goto LABEL_4;
      }

      uint64_t v178 = v295;
      sub_10002218C(v307, v295, type metadata accessor for SafeLocation);
      uint64_t v179 = *(void *)(v178 + v23[13]);
      swift_beginAccess(v50, v336, 1LL, 0LL);
      *(void *)&v50[v23[13]] = v179;
      swift_bridgeObjectRetain(v179);
      swift_bridgeObjectRelease();
      uint64_t v180 = *(void (**)(uint64_t, uint64_t, uint64_t))(v331 + 16);
      uint64_t v167 = v301;
      v180(v301, v178 + v23[5], v332);
      uint64_t v181 = v291;
      sub_10001DC4C(v178, v291, type metadata accessor for SafeLocation);
      uint64_t v182 = v308;
      uint64_t v183 = swift_isUniquelyReferenced_nonNull_native(v308);
      v338 = (void *)v182;
      unint64_t v185 = sub_10030D124(v167);
      uint64_t v186 = *(void *)(v182 + 16);
      BOOL v187 = (v184 & 1) == 0;
      uint64_t v188 = v186 + v187;
      if (__OFADD__(v186, v187)) {
        goto LABEL_106;
      }
      char v189 = v184;
      if (*(void *)(v182 + 24) >= v188)
      {
        uint64_t v192 = v326;
        if ((v183 & 1) == 0) {
          sub_100067948();
        }
      }

      else
      {
        sub_10005556C(v188, v183);
        unint64_t v190 = sub_10030D124(v301);
        uint64_t v192 = v326;
        if ((v189 & 1) != (v191 & 1)) {
          goto LABEL_111;
        }
        unint64_t v185 = v190;
      }

      uint64_t v223 = v331;
      uint64_t v167 = (uint64_t)v338;
      if ((v189 & 1) != 0)
      {
        unint64_t v308 = (unint64_t)v338;
        sub_10060FD14(v181, v338[7] + v185 * v192);
      }

      else
      {
        v338[(v185 >> 6) + 8] |= 1LL << v185;
        v180(*(void *)(v167 + 48) + *(void *)(v223 + 72) * v185, v301, v332);
        sub_10002218C(v181, *(void *)(v167 + 56) + v185 * v192, type metadata accessor for SafeLocation);
        uint64_t v224 = *(void *)(v167 + 16);
        BOOL v225 = __OFADD__(v224, 1LL);
        uint64_t v226 = v224 + 1;
        if (v225) {
          goto LABEL_108;
        }
        *(void *)(v167 + swift_weakDestroy(v0 + 16) = v226;
        unint64_t v308 = (unint64_t)v338;
      }

      swift_bridgeObjectRelease();
      v227 = *(void (**)(uint64_t, uint64_t))(v223 + 8);
      uint64_t v228 = v332;
      v227(v301, v332);
      uint64_t v229 = (uint64_t)v327;
      uint64_t v167 = v300;
      v180(v300, (uint64_t)&v327[v333[5]], v228);
      sub_10001DC4C(v229, v294, type metadata accessor for SafeLocation);
      uint64_t v230 = (uint64_t)v343;
      uint64_t v231 = swift_isUniquelyReferenced_nonNull_native(v343);
      v338 = (void *)v230;
      v343 = (void *)0x8000000000000000LL;
      unint64_t v233 = sub_10030D124(v167);
      uint64_t v234 = *(void *)(v230 + 16);
      BOOL v235 = (v232 & 1) == 0;
      uint64_t v236 = v234 + v235;
      if (__OFADD__(v234, v235)) {
        goto LABEL_107;
      }
      char v237 = v232;
      if (*(void *)(v230 + 24) < v236)
      {
        sub_10005556C(v236, v231);
        unint64_t v238 = sub_10030D124(v300);
        uint64_t v167 = v332;
        if ((v237 & 1) != (v239 & 1)) {
          goto LABEL_112;
        }
        unint64_t v233 = v238;
        v240 = v338;
        if ((v237 & 1) == 0) {
          goto LABEL_85;
        }
LABEL_75:
        sub_10060FD14(v294, v240[7] + v233 * v192);
LABEL_87:
        v343 = v240;
        swift_bridgeObjectRelease();
        v227(v300, v167);
        sub_100018C68(v295, type metadata accessor for SafeLocation);
        uint64_t v56 = v312;
        uint64_t v23 = v333;
        uint64_t v24 = v314;
        uint64_t v50 = v327;
        goto LABEL_4;
      }

      uint64_t v167 = v332;
      if ((v231 & 1) != 0)
      {
        v240 = v338;
        if ((v232 & 1) != 0) {
          goto LABEL_75;
        }
      }

      else
      {
        sub_100067948();
        v240 = v338;
        if ((v237 & 1) != 0) {
          goto LABEL_75;
        }
      }

    if ((v118 & 1) != 0) {
      goto LABEL_122;
    }
    double v126 = &v92[16 * v95];
    double v128 = *(void *)v126;
    double v127 = *((void *)v126 + 1);
    id v106 = __OFSUB__(v127, v128);
    double v129 = v127 - v128;
    if (v106) {
      goto LABEL_125;
    }
    if (v129 < v117) {
      goto LABEL_15;
    }
LABEL_87:
    char v134 = v95 - 1;
    if (v95 - 1 >= v61)
    {
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
      JUMPOUT(0x1007BD1CCLL);
    }

    if (!*v193)
    {
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
    }

    id v135 = v59;
    double v136 = &v92[16 * v134];
    double v137 = *(void *)v136;
    double v138 = &v92[16 * v95];
    double v139 = *((void *)v138 + 1);
    double v140 = v178;
    sub_1007BFD84( *v193 + *(void *)(v170 + 72) * *(void *)v136,  *v193 + *(void *)(v170 + 72) * *(void *)v138,  *v193 + *(void *)(v170 + 72) * v139,  v168);
    uint64_t v178 = v140;
    if (v140) {
      break;
    }
    if (v139 < v137) {
      goto LABEL_115;
    }
    if (v95 > *((void *)v135 + 2)) {
      goto LABEL_116;
    }
    *(void *)double v136 = v137;
    *(void *)&v92[16 * v134 + 8] = v139;
    double v141 = *((void *)v135 + 2);
    if (v95 >= v141) {
      goto LABEL_117;
    }
    uint64_t v61 = v141 - 1;
    memmove(&v92[16 * v95], v138 + 16, 16 * (v141 - 1 - v95));
    uint64_t v59 = v135;
    *((void *)v135 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v141 - 1;
    id v123 = v141 > 2;
    uint64_t v22 = v194;
    uint64_t v33 = v165;
    uint64_t v50 = v169;
    if (!v123) {
      goto LABEL_15;
    }
  }

  double v142 = v152;
LABEL_113:
  swift_bridgeObjectRelease();
  v142[2] = 0LL;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10060D908@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v42 = a4;
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009AF740);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (int *)type metadata accessor for SafeLocation(0LL);
  uint64_t v13 = *((void *)v12 - 1);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v40 - v17;
  uint64_t v19 = *a2;
  if (!*(void *)(v19 + 16) || (unint64_t v20 = sub_10030D124(a1), (v21 & 1) == 0))
  {
    uint64_t v27 = type metadata accessor for LocationOfInterestProvider.RemappingOperation(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))( a5,  1LL,  1LL,  v27);
  }

  uint64_t v41 = a5;
  uint64_t v22 = *(void *)(v13 + 72);
  sub_10001DC4C(*(void *)(v19 + 56) + v22 * v20, (uint64_t)v16, type metadata accessor for SafeLocation);
  sub_10002218C((uint64_t)v16, (uint64_t)v18, type metadata accessor for SafeLocation);
  uint64_t v23 = *a3;
  if (*(void *)(*a3 + 16) && (unint64_t v24 = sub_10030D124(a1), (v25 & 1) != 0))
  {
    sub_10001DC4C(*(void *)(v23 + 56) + v24 * v22, (uint64_t)v11, type metadata accessor for SafeLocation);
    uint64_t v26 = 0LL;
  }

  else
  {
    uint64_t v26 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, int *))(v13 + 56))(v11, v26, 1LL, v12);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1LL, v12))
  {
    sub_100015794((uint64_t)v11, (uint64_t *)&unk_1009AF740);
    goto LABEL_12;
  }

  int v29 = v11[v12[12]];
  sub_100015794((uint64_t)v11, (uint64_t *)&unk_1009AF740);
  if (v29 != 1)
  {
LABEL_12:
    if (v18[v12[6]] == 2)
    {
      uint64_t v31 = *(void *)(v42 + 64);
      uint64_t v32 = sub_100506C30();
      swift_retain();
      uint64_t v33 = sub_10060E714((uint64_t)v32, v31);
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v34 = sub_1004E7578((uint64_t)v33);
      swift_bridgeObjectRelease();
      uint64_t v35 = sub_1001899C8((uint64_t)v34);
      swift_bridgeObjectRelease();
      uint64_t v36 = v12[13];
      swift_bridgeObjectRelease();
      char v30 = 0;
      *(void *)&v18[v36] = v35;
    }

    else
    {
      char v30 = 0;
    }

    goto LABEL_15;
  }

  char v30 = 1;
LABEL_15:
  uint64_t v37 = *(int *)(sub_100004AEC(&qword_1009B73C0) + 48);
  uint64_t v38 = v41;
  sub_10001DC4C((uint64_t)v18, v41, type metadata accessor for SafeLocation);
  *(_BYTE *)(v38 + v3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = v30;
  uint64_t v39 = type metadata accessor for LocationOfInterestProvider.RemappingOperation(0LL);
  swift_storeEnumTagMultiPayload(v38, v39, 0LL);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56LL))(v38, 0LL, 1LL, v39);
  return sub_100018C68((uint64_t)v18, type metadata accessor for SafeLocation);
}

uint64_t sub_10060DC24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009AF7F8);
  uint64_t v37 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for SafeLocation(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v36 - v12;
  uint64_t v14 = type metadata accessor for LocationOfInterestProvider.RemappingOperation(0LL);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C(a1, (uint64_t)v16, v17);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v14);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_10002218C((uint64_t)v16, (uint64_t)v13, type metadata accessor for SafeLocation);
      uint64_t v19 = *(void *)(a2 + 64);
      sub_10001DC4C((uint64_t)v13, (uint64_t)v11, type metadata accessor for SafeLocation);
      uint64_t v20 = *(unsigned __int8 *)(v8 + 80);
      uint64_t v21 = (v20 + 24) & ~v20;
      uint64_t v22 = swift_allocObject(&unk_10096BB80, v21 + v9, v20 | 7);
      *(void *)(v22 + swift_weakDestroy(v0 + 16) = v19;
      sub_10002218C((uint64_t)v11, v22 + v21, type metadata accessor for SafeLocation);
      swift_retain();
      uint64_t v23 = sub_100004AEC((uint64_t *)&unk_1009AF7A0);
      uint64_t v24 = sub_1000372EC( &qword_1009AF800,  (uint64_t *)&unk_1009AF7A0,  (uint64_t)&protocol conformance descriptor for Future<A, B>);
      char v25 = sub_1006108BC;
    }

    else
    {
      sub_10002218C((uint64_t)v16, (uint64_t)v13, type metadata accessor for SafeLocation);
      uint64_t v30 = *(void *)(a2 + 64);
      sub_10001DC4C((uint64_t)v13, (uint64_t)v11, type metadata accessor for SafeLocation);
      uint64_t v31 = *(unsigned __int8 *)(v8 + 80);
      uint64_t v32 = (v31 + 24) & ~v31;
      uint64_t v22 = swift_allocObject(&unk_10096BB58, v32 + v9, v31 | 7);
      *(void *)(v22 + swift_weakDestroy(v0 + 16) = v30;
      sub_10002218C((uint64_t)v11, v22 + v32, type metadata accessor for SafeLocation);
      swift_retain();
      uint64_t v23 = sub_100004AEC((uint64_t *)&unk_1009AF7A0);
      uint64_t v24 = sub_1000372EC( &qword_1009AF800,  (uint64_t *)&unk_1009AF7A0,  (uint64_t)&protocol conformance descriptor for Future<A, B>);
      char v25 = sub_1006108AC;
    }
  }

  else
  {
    sub_10002218C((uint64_t)v16, (uint64_t)v13, type metadata accessor for SafeLocation);
    uint64_t v26 = *(void *)(a2 + 64);
    sub_10001DC4C((uint64_t)v13, (uint64_t)v11, type metadata accessor for SafeLocation);
    uint64_t v27 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v28 = (v27 + 24) & ~v27;
    uint64_t v29 = v28 + v9;
    uint64_t v22 = swift_allocObject(&unk_10096BBA8, v28 + v9 + 1, v27 | 7);
    *(void *)(v22 + swift_weakDestroy(v0 + 16) = v26;
    sub_10002218C((uint64_t)v11, v22 + v28, type metadata accessor for SafeLocation);
    *(_BYTE *)(v22 + v29) = 1;
    swift_retain();
    uint64_t v23 = sub_100004AEC((uint64_t *)&unk_1009AF7A0);
    uint64_t v24 = sub_1000372EC( &qword_1009AF800,  (uint64_t *)&unk_1009AF7A0,  (uint64_t)&protocol conformance descriptor for Future<A, B>);
    char v25 = sub_1006109CC;
  }

  Deferred.init(createPublisher:)(v25, v22, v23, v24);
  uint64_t v33 = sub_1000372EC(&qword_1009AF808, &qword_1009AF7F8, (uint64_t)&protocol conformance descriptor for Deferred<A>);
  uint64_t v34 = Publisher.eraseToAnyPublisher()(v4, v33);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v6, v4);
  sub_100018C68((uint64_t)v13, type metadata accessor for SafeLocation);
  return v34;
}

uint64_t sub_10060DFB4()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 24));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance(v0, 88LL, 7LL);
}

id sub_10060DFF8(void *a1, double a2)
{
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100012ED8(a1, v12);
  double v14 = (*(double (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  sub_100012ED8(a1, v15);
  double v17 = (*(double (**)(uint64_t, uint64_t))(v16 + 16))(v15, v16);
  uint64_t v18 = a1[3];
  uint64_t v19 = a1[4];
  sub_100012ED8(a1, v18);
  double v20 = (*(double (**)(uint64_t, uint64_t))(v19 + 24))(v18, v19);
  uint64_t v21 = a1[3];
  uint64_t v22 = a1[4];
  sub_100012ED8(a1, v21);
  double v23 = (*(double (**)(uint64_t, uint64_t))(v22 + 32))(v21, v22);
  uint64_t v24 = a1[3];
  uint64_t v25 = a1[4];
  sub_100012ED8(a1, v24);
  double v26 = (*(double (**)(uint64_t, uint64_t))(v25 + 40))(v24, v25);
  uint64_t v27 = a1[3];
  uint64_t v28 = a1[4];
  sub_100012ED8(a1, v27);
  (*(void (**)(uint64_t, uint64_t))(v28 + 56))(v27, v28);
  uint64_t v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1LL, v8);
  if ((_DWORD)v29 == 1)
  {
    Date.init()(v29);
    sub_100015794((uint64_t)v7, (uint64_t *)&unk_10099D720);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
  }

  if (v23 > a2) {
    a2 = v23;
  }
  id v30 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  id v32 = objc_msgSend( v30,  "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:",  isa,  v14,  v17,  v20,  a2,  v26);

  uint64_t v33 = a1[3];
  uint64_t v34 = a1[4];
  sub_100012ED8(a1, v33);
  uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t))(v34 + 48);
  id v36 = v32;
  objc_msgSend(v36, "setReferenceFrame:", v35(v33, v34));

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v36;
}

void sub_10060E2B8()
{
  id v1 = [*v0 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v1);
}

uint64_t sub_10060E304()
{
  id v1 = [*v0 preferredName];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void sub_10060E368(void *a1@<X8>)
{
  id v3 = [*v1 type];
  type metadata accessor for RTLocationOfInterestType(0LL);
  a1[3] = v4;
  a1[4] = &off_10096B9A0;
  *a1 = v3;
}

uint64_t sub_10060E3B0@<X0>(void *a1@<X8>)
{
  id v3 = [*v1 location];
  uint64_t result = sub_100022898(0LL, &qword_1009B7618, &OBJC_CLASS___RTLocation_ptr);
  a1[3] = result;
  a1[4] = &off_10096B9C8;
  *a1 = v3;
  return result;
}

uint64_t sub_10060E410(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  if (a1) {
    uint64_t v5 = sub_1004E869C(a1);
  }
  else {
    uint64_t v5 = 0LL;
  }
  a3(v5, a2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10060E460(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    uint64_t v6 = sub_100022898(0LL, &qword_1009B2C88, &OBJC_CLASS___RTLocationOfInterest_ptr);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v6);
  }

  swift_retain();
  id v7 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10060E4EC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *v3;
  id v7 = sub_100012ED8(a1, a1[3]);
  return sub_10060E614(*v7, a2, a3, v6);
}

id sub_10060E530()
{
  return [*v0 altitude];
}

id sub_10060E540()
{
  return [*v0 horizontalUncertainty];
}

id sub_10060E550()
{
  return [*v0 verticalUncertainty];
}

id sub_10060E560()
{
  return [*v0 referenceFrame];
}

uint64_t sub_10060E570@<X0>(uint64_t a1@<X8>)
{
  id v3 = [*v1 date];
  if (v3)
  {
    uint64_t v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v3);

    uint64_t v5 = type metadata accessor for Date(0LL);
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL);
    uint64_t v7 = a1;
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v5 = type metadata accessor for Date(0LL);
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL);
    uint64_t v7 = a1;
    uint64_t v8 = 1LL;
  }

  return v6(v7, v8, 1LL, v5);
}

uint64_t type metadata accessor for LocationOfInterestProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd26LocationOfInterestProvider);
}

uint64_t sub_10060E614(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  _DWORD v14[3] = v8;
  v14[4] = &off_10096B9A0;
  v14[0] = a1;
  uint64_t v9 = *sub_100012ED8(v14, v8);
  uint64_t v10 = swift_allocObject(&unk_10096BC70, 32LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  aBlock[4] = sub_100610B84;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10060E460;
  void aBlock[3] = &unk_10096BC88;
  uint64_t v11 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [a4 fetchLocationsOfInterestOfType:v9 withHandler:v11];
  _Block_release(v11);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v14);
}

void *sub_10060E714(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a2;
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  v16[7] = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v16 - v8;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v22 = _swiftEmptyArrayStorage;
  uint64_t v18 = *(void *)(a1 + 16);
  if (v18)
  {
    uint64_t v11 = 0LL;
    unint64_t v12 = (*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v20 = *(void *)(v7 + 72);
    v16[1] = v2;
    void v16[2] = v12;
    uint64_t v17 = a1 + v12;
    v16[6] = _swiftEmptyArrayStorage;
    v16[4] = "enableNotifyWhenFound";
    v16[5] = "";
    v16[3] = "onnect";
    do
    {
      sub_10001DC4C(v17 + v20 * v11, (uint64_t)v9, type metadata accessor for OwnedBeaconRecord);
      uint64_t v13 = sub_1002BBAD8((uint64_t)v9, v19);
      double v14 = v13;
      if (v13[2])
      {
        Hasher.init(_seed:)(v21, v13[5]);
        String.hash(into:)(v21, 0x61654C6E69676562LL, 0xED0000676E696873LL);
        unint64_t v15 = Hasher._finalize()() & ~(-1LL << *((_BYTE *)v14 + 32));
        if (((*(void *)((char *)v14 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v15) & 1) != 0) {
          __asm { BR              X9 }
        }
      }

      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v9, type metadata accessor for OwnedBeaconRecord);
      ++v11;
    }

    while (v11 != v18);
    return v22;
  }

  return result;
}

void sub_10060EC44(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v51 = a4;
  uint64_t v49 = a2;
  uint64_t v50 = a3;
  uint64_t v6 = sub_100004AEC(&qword_1009B73B8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for LocationOfInterestProvider.RemappingOperation(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v47 = v9;
  uint64_t v48 = v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v43 = (uint64_t)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v42 = (uint64_t)&v39 - v13;
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = *(void *)(a1 + 56);
  uint64_t v45 = a1 + 56;
  uint64_t v22 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v23 = -1LL;
  if (v22 < 64) {
    uint64_t v23 = ~(-1LL << v22);
  }
  unint64_t v24 = v23 & v21;
  int64_t v46 = (unint64_t)(v22 + 63) >> 6;
  __n128 v25 = swift_bridgeObjectRetain(a1);
  int64_t v26 = 0LL;
  uint64_t v44 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v24)
    {
      unint64_t v27 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      unint64_t v28 = v27 | (v26 << 6);
      goto LABEL_19;
    }

    if (__OFADD__(v26++, 1LL))
    {
      __break(1u);
      goto LABEL_37;
    }

    if (v26 >= v46) {
      goto LABEL_34;
    }
    unint64_t v30 = *(void *)(v45 + 8 * v26);
    if (!v30) {
      break;
    }
LABEL_18:
    unint64_t v24 = (v30 - 1) & v30;
    unint64_t v28 = __clz(__rbit64(v30)) + (v26 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v15 + 16))( v20,  *(void *)(a1 + 48) + *(void *)(v15 + 72) * v28,  v14,  v25);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v20, 0LL, 1LL, v14);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v20, v14);
    sub_10060D908((uint64_t)v17, v49, v50, v51, (uint64_t)v8);
    if (v4)
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      swift_bridgeObjectRelease();
LABEL_35:
      swift_release();
      return;
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v8, 1LL, v47) == 1)
    {
      sub_100015794((uint64_t)v8, &qword_1009B73B8);
    }

    else
    {
      uint64_t v41 = a1;
      uint64_t v32 = v42;
      sub_10002218C((uint64_t)v8, v42, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      sub_10002218C(v32, v43, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      if ((swift_isUniquelyReferenced_nonNull_native(v44) & 1) == 0) {
        uint64_t v44 = (void *)sub_1004C6BD0(0, v44[2] + 1LL, 1, (unint64_t)v44);
      }
      unint64_t v34 = v44[2];
      unint64_t v33 = v44[3];
      unint64_t v35 = v34 + 1;
      a1 = v41;
      if (v34 >= v33 >> 1)
      {
        unint64_t v39 = v44[2];
        unint64_t v40 = v34 + 1;
        uint64_t v38 = (void *)sub_1004C6BD0(v33 > 1, v34 + 1, 1, (unint64_t)v44);
        unint64_t v34 = v39;
        unint64_t v35 = v40;
        uint64_t v44 = v38;
      }

      uint64_t v36 = v43;
      uint64_t v37 = v44;
      v44[2] = v35;
      sub_10002218C( v36,  (uint64_t)v37 + ((*(unsigned __int8 *)(v48 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))
      + *(void *)(v48 + 72) * v34,
        type metadata accessor for LocationOfInterestProvider.RemappingOperation);
    }
  }

  int64_t v31 = v26 + 1;
  if (v26 + 1 >= v46) {
    goto LABEL_34;
  }
  unint64_t v30 = *(void *)(v45 + 8 * v31);
  if (v30) {
    goto LABEL_17;
  }
  int64_t v31 = v26 + 2;
  if (v26 + 2 >= v46) {
    goto LABEL_34;
  }
  unint64_t v30 = *(void *)(v45 + 8 * v31);
  if (v30) {
    goto LABEL_17;
  }
  int64_t v31 = v26 + 3;
  if (v26 + 3 >= v46) {
    goto LABEL_34;
  }
  unint64_t v30 = *(void *)(v45 + 8 * v31);
  if (v30) {
    goto LABEL_17;
  }
  int64_t v31 = v26 + 4;
  if (v26 + 4 >= v46)
  {
LABEL_34:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v15 + 56))(v20, 1LL, 1LL, v14, v25);
    goto LABEL_35;
  }

  unint64_t v30 = *(void *)(v45 + 8 * v31);
  if (v30)
  {
LABEL_17:
    int64_t v26 = v31;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v26 = v31 + 1;
    if (__OFADD__(v31, 1LL)) {
      break;
    }
    if (v26 >= v46) {
      goto LABEL_34;
    }
    unint64_t v30 = *(void *)(v45 + 8 * v26);
    ++v31;
    if (v30) {
      goto LABEL_18;
    }
  }

void sub_10060F0CC(uint64_t a1, uint64_t a2)
{
  uint64_t v56 = a2;
  uint64_t v3 = type metadata accessor for SafeLocation(0LL);
  uint64_t v53 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v52 = (uint64_t)&v49 - v7;
  uint64_t v8 = sub_100004AEC(&qword_1009B73B8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v61 = type metadata accessor for LocationOfInterestProvider.RemappingOperation(0LL);
  uint64_t v59 = *(void *)(v61 - 8);
  uint64_t v11 = __chkstk_darwin(v61);
  uint64_t v50 = (uint64_t)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v49 = (uint64_t)&v49 - v13;
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v64 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = *(void *)(a1 + 56);
  uint64_t v54 = a1 + 56;
  uint64_t v21 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v22 = -1LL;
  if (v21 < 64) {
    uint64_t v22 = ~(-1LL << v21);
  }
  unint64_t v23 = v22 & v20;
  int64_t v55 = (unint64_t)(v21 + 63) >> 6;
  uint64_t v60 = a1;
  __n128 v24 = swift_bridgeObjectRetain(a1);
  int64_t v25 = 0LL;
  uint64_t v51 = _swiftEmptyArrayStorage;
  uint64_t v57 = v10;
  uint64_t v58 = v19;
LABEL_4:
  uint64_t v26 = v56;
  if (v23)
  {
LABEL_5:
    uint64_t v63 = (v23 - 1) & v23;
    unint64_t v27 = __clz(__rbit64(v23)) | (v25 << 6);
    uint64_t v28 = v64;
    goto LABEL_22;
  }

  while (1)
  {
    int64_t v29 = v25 + 1;
    if (__OFADD__(v25, 1LL))
    {
      __break(1u);
      goto LABEL_41;
    }

    uint64_t v28 = v64;
    if (v29 >= v55) {
      goto LABEL_38;
    }
    unint64_t v30 = *(void *)(v54 + 8 * v29);
    ++v25;
    if (!v30)
    {
      int64_t v25 = v29 + 1;
      if (v29 + 1 >= v55) {
        goto LABEL_38;
      }
      unint64_t v30 = *(void *)(v54 + 8 * v25);
      if (!v30)
      {
        int64_t v25 = v29 + 2;
        if (v29 + 2 >= v55) {
          goto LABEL_38;
        }
        unint64_t v30 = *(void *)(v54 + 8 * v25);
        if (!v30)
        {
          int64_t v25 = v29 + 3;
          if (v29 + 3 >= v55) {
            goto LABEL_38;
          }
          unint64_t v30 = *(void *)(v54 + 8 * v25);
          if (!v30) {
            break;
          }
        }
      }
    }

void sub_10060F684(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v70 = a2;
  int v61 = a3;
  uint64_t v4 = (int *)type metadata accessor for SafeLocation(0LL);
  uint64_t v63 = *((void *)v4 - 1);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v58 = (uint64_t)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v54 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v60 = (uint64_t)&v54 - v11;
  __chkstk_darwin(v10);
  uint64_t v59 = (uint64_t)&v54 - v12;
  uint64_t v13 = sub_100004AEC(&qword_1009B73B8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for LocationOfInterestProvider.RemappingOperation(0LL);
  uint64_t v67 = *(void *)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v56 = (uint64_t)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v55 = (uint64_t)&v54 - v19;
  uint64_t v73 = type metadata accessor for UUID(0LL);
  uint64_t v20 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v22 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v23);
  uint64_t v68 = a1;
  uint64_t v69 = (char *)&v54 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = *(void *)(a1 + 56);
  uint64_t v64 = a1 + 56;
  uint64_t v26 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v27 = -1LL;
  if (v26 < 64) {
    uint64_t v27 = ~(-1LL << v26);
  }
  unint64_t v28 = v27 & v25;
  int64_t v65 = (unint64_t)(v26 + 63) >> 6;
  __n128 v29 = swift_bridgeObjectRetain(a1);
  int64_t v30 = 0LL;
  uint64_t v57 = _swiftEmptyArrayStorage;
  int64_t v62 = v15;
  uint64_t v66 = v16;
  uint64_t v31 = v73;
  if (!v28) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v71 = (v28 - 1) & v28;
  int64_t v72 = v30;
  for (unint64_t i = __clz(__rbit64(v28)) | (v30 << 6); ; unint64_t i = __clz(__rbit64(v34)) + (v35 << 6))
  {
    uint64_t v37 = v69;
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v20 + 16))( v69,  *(void *)(v68 + 48) + *(void *)(v20 + 72) * i,  v31,  v29);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v37, 0LL, 1LL, v31);
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v37, v31);
    uint64_t v38 = *(void *)(v70 + 16);
    if (v38)
    {
      uint64_t v39 = v63;
      uint64_t v40 = v70 + ((*(unsigned __int8 *)(v63 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80));
      swift_bridgeObjectRetain(v70);
      uint64_t v41 = *(void *)(v39 + 72);
      while (1)
      {
        sub_10001DC4C(v40, (uint64_t)v9, type metadata accessor for SafeLocation);
        if ((static UUID.== infix(_:_:)(&v9[v4[5]], v22) & 1) != 0) {
          break;
        }
        sub_100018C68((uint64_t)v9, type metadata accessor for SafeLocation);
        v40 += v41;
        if (!--v38)
        {
          swift_bridgeObjectRelease();
          goto LABEL_30;
        }
      }

      swift_bridgeObjectRelease();
      uint64_t v42 = v60;
      sub_10002218C((uint64_t)v9, v60, type metadata accessor for SafeLocation);
      uint64_t v43 = v59;
      sub_10002218C(v42, v59, type metadata accessor for SafeLocation);
      if (*(unsigned __int8 *)(v43 + v4[6]) == v61)
      {
        uint64_t v44 = v58;
        sub_10001DC4C(v43, v58, type metadata accessor for SafeLocation);
        *(_BYTE *)(v44 + v4[6]) = 1;
        sub_100018C68(v43, type metadata accessor for SafeLocation);
        unint64_t v45 = (void *)(v44 + v4[7]);
        swift_bridgeObjectRelease();
        *unint64_t v45 = 0LL;
        v45[1] = 0xE000000000000000LL;
        uint64_t v15 = v62;
        sub_10001DC4C(v44, (uint64_t)v62, type metadata accessor for SafeLocation);
        uint64_t v46 = v66;
        swift_storeEnumTagMultiPayload(v15, v66, 2LL);
        uint64_t v47 = v67;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v15, 0LL, 1LL, v46);
        uint64_t v48 = v44;
        uint64_t v16 = v46;
        sub_100018C68(v48, type metadata accessor for SafeLocation);
        goto LABEL_32;
      }

      sub_100018C68(v43, type metadata accessor for SafeLocation);
LABEL_30:
      uint64_t v15 = v62;
      uint64_t v16 = v66;
    }

    uint64_t v47 = v67;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v67 + 56))(v15, 1LL, 1LL, v16);
LABEL_32:
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v73);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v15, 1LL, v16) == 1)
    {
      sub_100015794((uint64_t)v15, &qword_1009B73B8);
    }

    else
    {
      uint64_t v49 = v55;
      sub_10002218C((uint64_t)v15, v55, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      sub_10002218C(v49, v56, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      if ((swift_isUniquelyReferenced_nonNull_native(v57) & 1) == 0) {
        uint64_t v57 = (void *)sub_1004C6BD0(0, v57[2] + 1LL, 1, (unint64_t)v57);
      }
      unint64_t v51 = v57[2];
      unint64_t v50 = v57[3];
      if (v51 >= v50 >> 1) {
        uint64_t v57 = (void *)sub_1004C6BD0(v50 > 1, v51 + 1, 1, (unint64_t)v57);
      }
      uint64_t v52 = v56;
      uint64_t v53 = v57;
      v57[2] = v51 + 1;
      sub_10002218C( v52,  (uint64_t)v53 + ((*(unsigned __int8 *)(v67 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80))
      + *(void *)(v67 + 72) * v51,
        type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      uint64_t v16 = v66;
    }

    unint64_t v28 = v71;
    int64_t v30 = v72;
    uint64_t v31 = v73;
    if (v71) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v33 = v30 + 1;
    if (__OFADD__(v30, 1LL))
    {
      __break(1u);
      goto LABEL_44;
    }

    if (v33 >= v65) {
      goto LABEL_41;
    }
    unint64_t v34 = *(void *)(v64 + 8 * v33);
    int64_t v35 = v30 + 1;
    if (!v34)
    {
      int64_t v35 = v30 + 2;
      if (v30 + 2 >= v65) {
        goto LABEL_41;
      }
      unint64_t v34 = *(void *)(v64 + 8 * v35);
      if (!v34)
      {
        int64_t v35 = v30 + 3;
        if (v30 + 3 >= v65) {
          goto LABEL_41;
        }
        unint64_t v34 = *(void *)(v64 + 8 * v35);
        if (!v34)
        {
          int64_t v35 = v30 + 4;
          if (v30 + 4 >= v65) {
            goto LABEL_41;
          }
          unint64_t v34 = *(void *)(v64 + 8 * v35);
          if (!v34) {
            break;
          }
        }
      }
    }

uint64_t sub_10060FD14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SafeLocation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for LocationOfInterestProvider.RemappingOperation(uint64_t a1)
{
  uint64_t result = qword_1009B7690;
  if (!qword_1009B7690) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationOfInterestProvider.RemappingOperation);
  }
  return result;
}

unint64_t sub_10060FD94()
{
  unint64_t result = qword_1009B7408;
  if (!qword_1009B7408)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080EB08, &type metadata for LocationOfInterestProvider.Error);
    atomic_store(result, (unint64_t *)&qword_1009B7408);
  }

  return result;
}

void *sub_10060FDD8(uint64_t a1, void *a2)
{
  uint64_t v4 = *a2;
  uint64_t v69 = a2;
  uint64_t v70 = v4;
  uint64_t v5 = sub_100004AEC(&qword_1009B7460);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v71 = v5;
  uint64_t v72 = v6;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_1009B7468);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_1009B7470);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = *(void *)(a1 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v18)
  {
    v61[1] = v2;
    uint64_t v76 = _swiftEmptyArrayStorage;
    uint64_t v66 = v15;
    uint64_t v67 = v14;
    int64_t v65 = v17;
    specialized ContiguousArray.reserveCapacity(_:)(v18);
    uint64_t v20 = (char *)(a1 + 32);
    uint64_t v63 = v12;
    uint64_t v64 = v8;
    uint64_t v68 = v10;
    uint64_t v62 = v9;
    uint64_t v21 = v8;
    do
    {
      char v22 = *v20;
      uint64_t v73 = v20 + 1;
      uint64_t v74 = v18;
      uint64_t v23 = swift_allocObject(&unk_10096BA40, 40LL, 7LL);
      *(_BYTE *)(v23 + swift_weakDestroy(v0 + 16) = v22;
      char v24 = v22;
      uint64_t v26 = v69;
      uint64_t v25 = v70;
      *(void *)(v23 + 24) = v69;
      *(void *)(v23 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v25;
      uint64_t v27 = sub_100004AEC(&qword_1009B7478);
      swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
      swift_retain();
      uint64_t v75 = Future.init(_:)(sub_10061065C, v23);
      uint64_t v28 = swift_allocObject(&unk_10096BA68, 32LL, 7LL);
      *(_BYTE *)(v28 + swift_weakDestroy(v0 + 16) = v22;
      *(void *)(v28 + 24) = v26;
      uint64_t v29 = swift_retain();
      uint64_t v30 = static Subscribers.Demand.unlimited.getter(v29);
      uint64_t v31 = sub_100004AEC(&qword_1009B7480);
      uint64_t v32 = v26;
      uint64_t v33 = sub_1000372EC( &qword_1009B7488,  &qword_1009B7478,  (uint64_t)&protocol conformance descriptor for Future<A, B>);
      uint64_t v34 = sub_1000372EC( &qword_1009B7490,  &qword_1009B7480,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      uint64_t v35 = v30;
      uint64_t v36 = v71;
      Publisher.flatMap<A>(maxPublishers:_:)(v35, sub_100610668, v28, v27, v31, v33, v34);
      swift_release();
      swift_release();
      uint64_t v37 = swift_allocObject(&unk_10096BA90, 32LL, 7LL);
      LOBYTE(v33) = v24;
      *(_BYTE *)(v37 + swift_weakDestroy(v0 + 16) = v24;
      *(void *)(v37 + 24) = v32;
      uint64_t v38 = swift_retain();
      uint64_t v39 = static Subscribers.Demand.unlimited.getter(v38);
      uint64_t v40 = sub_100004AEC(&qword_1009B7498);
      uint64_t v41 = sub_1000372EC( &qword_1009B74A0,  &qword_1009B7460,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
      uint64_t v42 = sub_1000372EC( &qword_1009B74A8,  &qword_1009B7498,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      uint64_t v43 = v63;
      Publisher.flatMap<A, B>(maxPublishers:_:)( v39,  sub_100610674,  v37,  v36,  &type metadata for LocationOfInterestProvider.LOIRequestResponse,  v40,  v41,  v42);
      swift_release();
      uint64_t v44 = v36;
      uint64_t v45 = v68;
      (*(void (**)(char *, uint64_t))(v72 + 8))(v21, v44);
      uint64_t v46 = swift_allocObject(&unk_10096BAB8, 17LL, 7LL);
      *(_BYTE *)(v46 + swift_weakDestroy(v0 + 16) = v33;
      uint64_t v47 = sub_100004AEC(&qword_1009B7418);
      uint64_t v48 = sub_1000372EC( &qword_1009B74B0,  &qword_1009B7468,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
      uint64_t v49 = sub_1000372EC( &qword_1009B7428,  &qword_1009B7418,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      unint64_t v50 = v65;
      uint64_t v51 = v62;
      Publisher.catch<A>(_:)(sub_100610690, v46, v62, v47, v48, v49);
      swift_release();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v43, v51);
      uint64_t v52 = sub_1000372EC( &qword_1009B74B8,  &qword_1009B7470,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
      uint64_t v53 = v67;
      uint64_t v54 = Publisher.eraseToAnyPublisher()(v67, v52);
      (*(void (**)(char *, uint64_t))(v66 + 8))(v50, v53);
      uint64_t v75 = v54;
      uint64_t v55 = v49;
      uint64_t v56 = v74;
      uint64_t v57 = Publisher.eraseToAnyPublisher()(v47, v55);
      uint64_t v58 = swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v58);
      uint64_t v59 = v76[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v59);
      uint64_t v60 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v59, v57);
      specialized ContiguousArray._endMutation()(v60);
      uint64_t v20 = v73;
      uint64_t v18 = v56 - 1;
    }

    while (v18);
    return v76;
  }

  return result;
}

void *sub_100610284(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = type metadata accessor for LocationOfInterestProvider.RemappingOperation(0LL);
  uint64_t v5 = *(void *)(v32 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v32);
  uint64_t v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009B7578);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(a1 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v12)
  {
    v25[1] = v2;
    uint64_t v34 = _swiftEmptyArrayStorage;
    uint64_t v31 = v9;
    specialized ContiguousArray.reserveCapacity(_:)(v12);
    uint64_t v14 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v30 = a2;
    uint64_t v15 = a1 + ((v14 + 32) & ~v14);
    uint64_t v16 = *(void *)(v5 + 72);
    uint64_t v28 = (v14 + 16) & ~v14;
    uint64_t v29 = v16;
    uint64_t v26 = v14 | 7;
    uint64_t v27 = v28 + v6;
    do
    {
      uint64_t v33 = sub_10060DC24(v15, v30);
      sub_10001DC4C(v15, (uint64_t)v7, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      uint64_t v17 = swift_allocObject(&unk_10096BB30, v27, v26);
      sub_10002218C((uint64_t)v7, v17 + v28, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      uint64_t v18 = sub_100004AEC(&qword_1009AF7C8);
      uint64_t v19 = sub_1000372EC( &qword_1009AF7D8,  &qword_1009AF7C8,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      Publisher.map<A>(_:)(sub_100610860, v17, v18, v32, v19);
      swift_release();
      uint64_t v20 = sub_1000372EC( &qword_1009B7580,  &qword_1009B7578,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
      uint64_t v21 = Publisher.eraseToAnyPublisher()(v8, v20);
      swift_release();
      uint64_t v22 = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v11, v8);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v22);
      uint64_t v23 = v34[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
      uint64_t v24 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v21);
      specialized ContiguousArray._endMutation()(v24);
      v15 += v29;
      --v12;
    }

    while (v12);
    return v34;
  }

  return result;
}

uint64_t sub_1006104D8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1006104E8()
{
  return sub_10060A2E4();
}

uint64_t sub_1006104F0(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v5 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  sub_10001581C(a1, (uint64_t)v4, (uint64_t *)&unk_10099D720);
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  Class isa = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1LL, v6) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
  }

  NSString v9 = String._bridgeToObjectiveC()();
  [v5 setObject:isa forKey:v9];

  swift_unknownObjectRelease(isa);
  return sub_100015794(a1, (uint64_t *)&unk_10099D720);
}

uint64_t sub_100610638()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10061065C(uint64_t (*a1)(void **), uint64_t a2)
{
  return sub_100608CF4(a1, a2, *(_BYTE *)(v2 + 16), *(void **)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_100610668@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10060A36C(a1, *(unsigned __int8 *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_100610674@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10060AE4C(a1, *(unsigned __int8 *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_100610680()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100610690@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10060B548(a1, *(_BYTE *)(v2 + 16), a2);
}

id sub_100610698(id result, char a2)
{
  if (a2 == 1) {
    return result;
  }
  if (!a2) {
    return (id)swift_errorRetain(result);
  }
  return result;
}

uint64_t sub_1006106B4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1006106E0()
{
  return swift_deallocObject(v0, 33LL, 7LL);
}

void sub_100610708(uint64_t a1, void *a2, unsigned __int8 a3)
{
  if (a3 >> 6 == 1)
  {
    sub_100610734(a2, a3 & 0x3F);
  }

  else if (!(a3 >> 6))
  {
    swift_bridgeObjectRelease();
  }

void sub_100610734(void *a1, char a2)
{
  if (a2 == 1)
  {
  }

  else if (!a2)
  {
    swift_errorRelease(a1);
  }

void sub_100610750(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void **)(v1 + 24);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  unsigned __int8 v4 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  sub_100610764(v2, v3, v4);
}

void sub_100610764(uint64_t a1, void *a2, unsigned __int8 a3)
{
  if (a3 >> 6 == 1)
  {
    sub_100610698(a2, a3 & 0x3F);
  }

  else if (!(a3 >> 6))
  {
    swift_bridgeObjectRetain(a2);
  }

uint64_t sub_100610790()
{
  uint64_t v1 = type metadata accessor for LocationOfInterestProvider.RemappingOperation(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v0 + v4;
  if (swift_getEnumCaseMultiPayload(v0 + v4, v1) <= 2)
  {
    sub_100016F9C(*(void *)v6, *(void *)(v6 + 8));
    uint64_t v7 = v6 + *(int *)(type metadata accessor for SafeLocation(0LL) + 20);
    uint64_t v8 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100610860@<X0>(uint64_t a1@<X8>)
{
  return sub_10001DC4C( v1 + ((v3 + 16) & ~v3),  a1,  type metadata accessor for LocationOfInterestProvider.RemappingOperation);
}

uint64_t sub_1006108AC()
{
  return sub_1006108C8((uint64_t (*)(void, uint64_t))sub_100493BAC);
}

uint64_t sub_1006108BC()
{
  return sub_1006108C8((uint64_t (*)(void, uint64_t))sub_100493A88);
}

uint64_t sub_1006108C8(uint64_t (*a1)(void, uint64_t))
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for SafeLocation(0LL) - 8) + 80LL);
  return a1(*(void *)(v1 + 16), v1 + ((v2 + 24) & ~v2));
}

uint64_t sub_100610918()
{
  uint64_t v1 = type metadata accessor for SafeLocation(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  uint64_t v6 = *(void *)(v2 + 64) + v4 + 1;
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1006109CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for SafeLocation(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_1004938D8(*(void *)(v1 + 16), v1 + v4, *(_BYTE *)(v1 + v4 + *(void *)(v3 + 64)), a1);
}

uint64_t sub_100610A18()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100610A3C(uint64_t a1, __int16 a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  uint64_t v5 = a1;
  __int16 v6 = a2 & 0x1FF;
  return v3(&v5);
}

uint64_t sub_100610A78(uint64_t a1, uint64_t a2)
{
  return sub_100608E2C(a1, a2, *(void (**)(void, void))(v2 + 16), *(void *)(v2 + 24));
}

unint64_t sub_100610A84()
{
  unint64_t result = qword_1009B75B8;
  if (!qword_1009B75B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10081D0A0, &type metadata for SystemInfoDynamic.MeDeviceState);
    atomic_store(result, (unint64_t *)&qword_1009B75B8);
  }

  return result;
}

uint64_t sub_100610AC8()
{
  return sub_100608278();
}

uint64_t sub_100610AD0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1006082F0(a1, a2);
}

uint64_t sub_100610AE8()
{
  if (v0[4]) {
    swift_release(v0[5]);
  }
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100610B24()
{
  return sub_100608744( *(void *)(v0 + 16),  *(unsigned __int8 *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48));
}

uint64_t sub_100610B38()
{
  if (v0[2]) {
    swift_release(v0[3]);
  }
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_100610B6C(uint64_t a1)
{
}

void sub_100610B78(void *a1, char a2, char a3)
{
  if ((a3 & 1) != 0) {
    sub_100610734(a1, a2);
  }
  else {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100610B84(uint64_t a1, uint64_t a2)
{
  return sub_10060E410(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_100610B8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100610B9C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t initializeBufferWithCopyOfBuffer for LocationOfInterestProvider.Error(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  sub_100610698(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

void destroy for LocationOfInterestProvider.Error(uint64_t a1)
{
}

uint64_t assignWithCopy for LocationOfInterestProvider.Error(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  sub_100610698(*(id *)a2, v4);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v3;
  char v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_100610734(v5, v6);
  return a1;
}

uint64_t assignWithTake for LocationOfInterestProvider.Error(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_100610734(v4, v5);
  return a1;
}

ValueMetadata *type metadata accessor for LocationOfInterestProvider.Error()
{
  return &type metadata for LocationOfInterestProvider.Error;
}

void destroy for LocationOfInterestProvider.LOIRequestResponse(uint64_t a1)
{
}

uint64_t _s12searchpartyd26LocationOfInterestProviderC18LOIRequestResponseOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(void **)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  sub_100610764(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for LocationOfInterestProvider.LOIRequestResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(void **)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  sub_100610764(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  sub_100610708(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for LocationOfInterestProvider.LOIRequestResponse(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  unsigned __int8 v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  sub_100610708(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocationOfInterestProvider.LOIRequestResponse(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)a1 >> 3;
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for LocationOfInterestProvider.LOIRequestResponse( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = 8LL * -a2;
      *(void *)(result + 8) = 0LL;
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
      return result;
    }

    *(_BYTE *)(result + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t sub_100610E20(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  int v2 = (char)v1;
  unsigned int v3 = v1 >> 6;
  if (v2 >= 0) {
    return v3;
  }
  else {
    return (*(_DWORD *)a1 & 7 | (8 * *(_DWORD *)(a1 + 8))) + 2;
  }
}

uint64_t sub_100610E48(uint64_t result)
{
  *(_BYTE *)(result + 16) &= 0x3Fu;
  return result;
}

uint64_t sub_100610E58(uint64_t result, unsigned int a2)
{
  if (a2 < 2)
  {
    char v2 = *(_BYTE *)(result + 16) & 3 | ((_BYTE)a2 << 6);
    *(void *)result &= 7uLL;
    *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = v2;
  }

  else
  {
    *(void *)unint64_t result = ((_BYTE)a2 - 2) & 7;
    *(void *)(result + 8) = (unint64_t)(a2 - 2) >> 3;
    *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0x80;
  }

  return result;
}

ValueMetadata *type metadata accessor for LocationOfInterestProvider.LOIRequestResponse()
{
  return &type metadata for LocationOfInterestProvider.LOIRequestResponse;
}

uint64_t *sub_100610EA8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v25 = *(void *)a2;
      unint64_t v26 = *(void *)(a2 + 8);
      sub_10001736C(*(void *)a2, v26);
      *a1 = v25;
      a1[1] = v26;
      uint64_t v27 = (int *)type metadata accessor for SafeLocation(0LL);
      uint64_t v28 = v27[5];
      uint64_t v29 = (char *)a1 + v28;
      uint64_t v30 = a2 + v28;
      uint64_t v31 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16LL))(v29, v30, v31);
      *((_BYTE *)a1 + v27[6]) = *(_BYTE *)(a2 + v27[6]);
      uint64_t v32 = v27[7];
      uint64_t v33 = (uint64_t *)((char *)a1 + v32);
      uint64_t v34 = (void *)(a2 + v32);
      uint64_t v35 = v34[1];
      *uint64_t v33 = *v34;
      v33[1] = v35;
      *(uint64_t *)((char *)a1 + v27[8]) = *(void *)(a2 + v27[8]);
      *(uint64_t *)((char *)a1 + v27[9]) = *(void *)(a2 + v27[9]);
      *(uint64_t *)((char *)a1 + v27[10]) = *(void *)(a2 + v27[10]);
      *((_BYTE *)a1 + v27[11]) = *(_BYTE *)(a2 + v27[11]);
      *((_BYTE *)a1 + v27[12]) = *(_BYTE *)(a2 + v27[12]);
      uint64_t v36 = v27[13];
      uint64_t v37 = *(void *)(a2 + v36);
      *(uint64_t *)((char *)a1 + v36) = v37;
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRetain(v37);
      uint64_t v21 = a1;
      uint64_t v22 = a3;
      uint64_t v23 = 2LL;
    }

    else
    {
      uint64_t v8 = *(void *)a2;
      uint64_t v9 = *(void *)(a2 + 8);
      if (EnumCaseMultiPayload == 1)
      {
        sub_10001736C(*(void *)a2, *(void *)(a2 + 8));
        *a1 = v8;
        a1[1] = v9;
        uint64_t v10 = (int *)type metadata accessor for SafeLocation(0LL);
        uint64_t v11 = v10[5];
        uint64_t v12 = (char *)a1 + v11;
        uint64_t v13 = a2 + v11;
        uint64_t v14 = type metadata accessor for UUID(0LL);
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL))(v12, v13, v14);
        *((_BYTE *)a1 + v10[6]) = *(_BYTE *)(a2 + v10[6]);
        uint64_t v15 = v10[7];
        uint64_t v16 = (uint64_t *)((char *)a1 + v15);
        uint64_t v17 = (void *)(a2 + v15);
        uint64_t v18 = v17[1];
        void *v16 = *v17;
        v16[1] = v18;
        *(uint64_t *)((char *)a1 + v10[8]) = *(void *)(a2 + v10[8]);
        *(uint64_t *)((char *)a1 + v10[9]) = *(void *)(a2 + v10[9]);
        *(uint64_t *)((char *)a1 + v10[10]) = *(void *)(a2 + v10[10]);
        *((_BYTE *)a1 + v10[11]) = *(_BYTE *)(a2 + v10[11]);
        *((_BYTE *)a1 + v10[12]) = *(_BYTE *)(a2 + v10[12]);
        uint64_t v19 = v10[13];
        uint64_t v20 = *(void *)(a2 + v19);
        *(uint64_t *)((char *)a1 + v19) = v20;
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v20);
        uint64_t v21 = a1;
        uint64_t v22 = a3;
        uint64_t v23 = 1LL;
      }

      else
      {
        sub_10001736C(*(void *)a2, *(void *)(a2 + 8));
        *a1 = v8;
        a1[1] = v9;
        uint64_t v38 = (int *)type metadata accessor for SafeLocation(0LL);
        uint64_t v39 = v38[5];
        uint64_t v40 = (char *)a1 + v39;
        uint64_t v41 = a2 + v39;
        uint64_t v42 = type metadata accessor for UUID(0LL);
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v42 - 8) + 16LL))(v40, v41, v42);
        *((_BYTE *)a1 + v38[6]) = *(_BYTE *)(a2 + v38[6]);
        uint64_t v43 = v38[7];
        uint64_t v44 = (uint64_t *)((char *)a1 + v43);
        uint64_t v45 = (void *)(a2 + v43);
        uint64_t v46 = v45[1];
        *uint64_t v44 = *v45;
        v44[1] = v46;
        *(uint64_t *)((char *)a1 + v38[8]) = *(void *)(a2 + v38[8]);
        *(uint64_t *)((char *)a1 + v38[9]) = *(void *)(a2 + v38[9]);
        *(uint64_t *)((char *)a1 + v38[10]) = *(void *)(a2 + v38[10]);
        *((_BYTE *)a1 + v38[11]) = *(_BYTE *)(a2 + v38[11]);
        *((_BYTE *)a1 + v38[12]) = *(_BYTE *)(a2 + v38[12]);
        uint64_t v47 = v38[13];
        uint64_t v48 = *(void *)(a2 + v47);
        *(uint64_t *)((char *)a1 + v4_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = v48;
        swift_bridgeObjectRetain(v46);
        swift_bridgeObjectRetain(v48);
        uint64_t v49 = sub_100004AEC(&qword_1009B73C0);
        *((_BYTE *)a1 + *(int *)(v49 + 48)) = *(_BYTE *)(a2 + *(int *)(v49 + 48));
        uint64_t v21 = a1;
        uint64_t v22 = a3;
        uint64_t v23 = 0LL;
      }
    }

    swift_storeEnumTagMultiPayload(v21, v22, v23);
  }

  return a1;
}

uint64_t sub_1006111B0(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  if (result <= 2)
  {
    sub_100016F9C(*(void *)a1, *(void *)(a1 + 8));
    uint64_t v4 = a1 + *(int *)(type metadata accessor for SafeLocation(0LL) + 20);
    uint64_t v5 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t *sub_10061124C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  uint64_t v7 = EnumCaseMultiPayload;
  if ((_DWORD)EnumCaseMultiPayload == 2 || (_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = *a2;
    unint64_t v9 = a2[1];
    sub_10001736C(*a2, v9);
    *a1 = v8;
    a1[1] = v9;
    uint64_t v10 = (int *)type metadata accessor for SafeLocation(0LL);
    uint64_t v11 = v10[5];
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL))(v12, v13, v14);
    *((_BYTE *)a1 + v10[6]) = *((_BYTE *)a2 + v10[6]);
    uint64_t v15 = v10[7];
    uint64_t v16 = (uint64_t *)((char *)a1 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = v17[1];
    void *v16 = *v17;
    v16[1] = v18;
    *(uint64_t *)((char *)a1 + v10[8]) = *(uint64_t *)((char *)a2 + v10[8]);
    *(uint64_t *)((char *)a1 + v10[9]) = *(uint64_t *)((char *)a2 + v10[9]);
    *(uint64_t *)((char *)a1 + v10[10]) = *(uint64_t *)((char *)a2 + v10[10]);
    *((_BYTE *)a1 + v10[11]) = *((_BYTE *)a2 + v10[11]);
    *((_BYTE *)a1 + v10[12]) = *((_BYTE *)a2 + v10[12]);
    uint64_t v19 = v10[13];
    uint64_t v20 = *(uint64_t *)((char *)a2 + v19);
    *(uint64_t *)((char *)a1 + v19) = v20;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v20);
  }

  else
  {
    uint64_t v21 = *a2;
    unint64_t v22 = a2[1];
    sub_10001736C(*a2, v22);
    *a1 = v21;
    a1[1] = v22;
    uint64_t v23 = (int *)type metadata accessor for SafeLocation(0LL);
    uint64_t v24 = v23[5];
    uint64_t v25 = (char *)a1 + v24;
    unint64_t v26 = (char *)a2 + v24;
    uint64_t v27 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16LL))(v25, v26, v27);
    *((_BYTE *)a1 + v23[6]) = *((_BYTE *)a2 + v23[6]);
    uint64_t v28 = v23[7];
    uint64_t v29 = (uint64_t *)((char *)a1 + v28);
    uint64_t v30 = (uint64_t *)((char *)a2 + v28);
    uint64_t v31 = v30[1];
    *uint64_t v29 = *v30;
    v29[1] = v31;
    *(uint64_t *)((char *)a1 + v23[8]) = *(uint64_t *)((char *)a2 + v23[8]);
    *(uint64_t *)((char *)a1 + v23[9]) = *(uint64_t *)((char *)a2 + v23[9]);
    *(uint64_t *)((char *)a1 + v23[10]) = *(uint64_t *)((char *)a2 + v23[10]);
    *((_BYTE *)a1 + v23[11]) = *((_BYTE *)a2 + v23[11]);
    *((_BYTE *)a1 + v23[12]) = *((_BYTE *)a2 + v23[12]);
    uint64_t v32 = v23[13];
    uint64_t v33 = *(uint64_t *)((char *)a2 + v32);
    *(uint64_t *)((char *)a1 + v3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v33;
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v33);
    uint64_t v34 = sub_100004AEC(&qword_1009B73C0);
    *((_BYTE *)a1 + *(int *)(v34 + 48)) = *((_BYTE *)a2 + *(int *)(v34 + 48));
  }

  swift_storeEnumTagMultiPayload(a1, a3, v7);
  return a1;
}

uint64_t *sub_100611458(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a1 != (uint64_t *)a2)
  {
    sub_100018C68((uint64_t)a1, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v23 = *(void *)a2;
      unint64_t v24 = *(void *)(a2 + 8);
      sub_10001736C(*(void *)a2, v24);
      *a1 = v23;
      a1[1] = v24;
      uint64_t v25 = (int *)type metadata accessor for SafeLocation(0LL);
      uint64_t v26 = v25[5];
      uint64_t v27 = (char *)a1 + v26;
      uint64_t v28 = a2 + v26;
      uint64_t v29 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16LL))(v27, v28, v29);
      *((_BYTE *)a1 + v25[6]) = *(_BYTE *)(a2 + v25[6]);
      uint64_t v30 = v25[7];
      uint64_t v31 = (uint64_t *)((char *)a1 + v30);
      uint64_t v32 = (void *)(a2 + v30);
      *uint64_t v31 = *v32;
      uint64_t v33 = v32[1];
      v31[1] = v33;
      *(uint64_t *)((char *)a1 + v25[8]) = *(void *)(a2 + v25[8]);
      *(uint64_t *)((char *)a1 + v25[9]) = *(void *)(a2 + v25[9]);
      *(uint64_t *)((char *)a1 + v25[10]) = *(void *)(a2 + v25[10]);
      *((_BYTE *)a1 + v25[11]) = *(_BYTE *)(a2 + v25[11]);
      *((_BYTE *)a1 + v25[12]) = *(_BYTE *)(a2 + v25[12]);
      uint64_t v34 = v25[13];
      uint64_t v35 = *(void *)(a2 + v34);
      *(uint64_t *)((char *)a1 + v34) = v35;
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRetain(v35);
      uint64_t v20 = a1;
      uint64_t v21 = a3;
      uint64_t v22 = 2LL;
    }

    else
    {
      uint64_t v7 = *(void *)a2;
      uint64_t v8 = *(void *)(a2 + 8);
      if (EnumCaseMultiPayload == 1)
      {
        sub_10001736C(*(void *)a2, *(void *)(a2 + 8));
        *a1 = v7;
        a1[1] = v8;
        unint64_t v9 = (int *)type metadata accessor for SafeLocation(0LL);
        uint64_t v10 = v9[5];
        uint64_t v11 = (char *)a1 + v10;
        uint64_t v12 = a2 + v10;
        uint64_t v13 = type metadata accessor for UUID(0LL);
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL))(v11, v12, v13);
        *((_BYTE *)a1 + v9[6]) = *(_BYTE *)(a2 + v9[6]);
        uint64_t v14 = v9[7];
        uint64_t v15 = (uint64_t *)((char *)a1 + v14);
        uint64_t v16 = (void *)(a2 + v14);
        void *v15 = *v16;
        uint64_t v17 = v16[1];
        v15[1] = v17;
        *(uint64_t *)((char *)a1 + v9[8]) = *(void *)(a2 + v9[8]);
        *(uint64_t *)((char *)a1 + v9[9]) = *(void *)(a2 + v9[9]);
        *(uint64_t *)((char *)a1 + v9[10]) = *(void *)(a2 + v9[10]);
        *((_BYTE *)a1 + v9[11]) = *(_BYTE *)(a2 + v9[11]);
        *((_BYTE *)a1 + v9[12]) = *(_BYTE *)(a2 + v9[12]);
        uint64_t v18 = v9[13];
        uint64_t v19 = *(void *)(a2 + v18);
        *(uint64_t *)((char *)a1 + v18) = v19;
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v19);
        uint64_t v20 = a1;
        uint64_t v21 = a3;
        uint64_t v22 = 1LL;
      }

      else
      {
        sub_10001736C(*(void *)a2, *(void *)(a2 + 8));
        *a1 = v7;
        a1[1] = v8;
        uint64_t v36 = (int *)type metadata accessor for SafeLocation(0LL);
        uint64_t v37 = v36[5];
        uint64_t v38 = (char *)a1 + v37;
        uint64_t v39 = a2 + v37;
        uint64_t v40 = type metadata accessor for UUID(0LL);
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 16LL))(v38, v39, v40);
        *((_BYTE *)a1 + v36[6]) = *(_BYTE *)(a2 + v36[6]);
        uint64_t v41 = v36[7];
        uint64_t v42 = (uint64_t *)((char *)a1 + v41);
        uint64_t v43 = (void *)(a2 + v41);
        *uint64_t v42 = *v43;
        uint64_t v44 = v43[1];
        v42[1] = v44;
        *(uint64_t *)((char *)a1 + v36[8]) = *(void *)(a2 + v36[8]);
        *(uint64_t *)((char *)a1 + v36[9]) = *(void *)(a2 + v36[9]);
        *(uint64_t *)((char *)a1 + v36[10]) = *(void *)(a2 + v36[10]);
        *((_BYTE *)a1 + v36[11]) = *(_BYTE *)(a2 + v36[11]);
        *((_BYTE *)a1 + v36[12]) = *(_BYTE *)(a2 + v36[12]);
        uint64_t v45 = v36[13];
        uint64_t v46 = *(void *)(a2 + v45);
        *(uint64_t *)((char *)a1 + v45) = v46;
        swift_bridgeObjectRetain(v44);
        swift_bridgeObjectRetain(v46);
        uint64_t v47 = sub_100004AEC(&qword_1009B73C0);
        *((_BYTE *)a1 + *(int *)(v47 + 48)) = *(_BYTE *)(a2 + *(int *)(v47 + 48));
        uint64_t v20 = a1;
        uint64_t v21 = a3;
        uint64_t v22 = 0LL;
      }
    }

    swift_storeEnumTagMultiPayload(v20, v21, v22);
  }

  return a1;
}

_OWORD *sub_100611764(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  uint64_t v7 = EnumCaseMultiPayload;
  if ((_DWORD)EnumCaseMultiPayload == 2 || (_DWORD)EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v8 = (int *)type metadata accessor for SafeLocation(0LL);
    uint64_t v9 = v8[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32LL))(v10, v11, v12);
    *((_BYTE *)a1 + v8[6]) = *((_BYTE *)a2 + v8[6]);
    *(_OWORD *)((char *)a1 + v8[7]) = *(_OWORD *)((char *)a2 + v8[7]);
    *(void *)((char *)a1 + v8[8]) = *(void *)((char *)a2 + v8[8]);
    *(void *)((char *)a1 + v8[9]) = *(void *)((char *)a2 + v8[9]);
    *(void *)((char *)a1 + v8[10]) = *(void *)((char *)a2 + v8[10]);
    *((_BYTE *)a1 + v8[11]) = *((_BYTE *)a2 + v8[11]);
    *((_BYTE *)a1 + v8[12]) = *((_BYTE *)a2 + v8[12]);
    *(void *)((char *)a1 + v8[13]) = *(void *)((char *)a2 + v8[13]);
  }

  else
  {
    *a1 = *a2;
    uint64_t v13 = (int *)type metadata accessor for SafeLocation(0LL);
    uint64_t v14 = v13[5];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32LL))(v15, v16, v17);
    *((_BYTE *)a1 + v13[6]) = *((_BYTE *)a2 + v13[6]);
    *(_OWORD *)((char *)a1 + v13[7]) = *(_OWORD *)((char *)a2 + v13[7]);
    *(void *)((char *)a1 + v13[8]) = *(void *)((char *)a2 + v13[8]);
    *(void *)((char *)a1 + v13[9]) = *(void *)((char *)a2 + v13[9]);
    *(void *)((char *)a1 + v13[10]) = *(void *)((char *)a2 + v13[10]);
    *((_BYTE *)a1 + v13[11]) = *((_BYTE *)a2 + v13[11]);
    *((_BYTE *)a1 + v13[12]) = *((_BYTE *)a2 + v13[12]);
    *(void *)((char *)a1 + v13[13]) = *(void *)((char *)a2 + v13[13]);
    uint64_t v18 = sub_100004AEC(&qword_1009B73C0);
    *((_BYTE *)a1 + *(int *)(v18 + 48)) = *((_BYTE *)a2 + *(int *)(v18 + 48));
  }

  swift_storeEnumTagMultiPayload(a1, a3, v7);
  return a1;
}

_OWORD *sub_100611930(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100018C68((uint64_t)a1, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
    uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    uint64_t v7 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2 || (_DWORD)EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v8 = (int *)type metadata accessor for SafeLocation(0LL);
      uint64_t v9 = v8[5];
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32LL))(v10, v11, v12);
      *((_BYTE *)a1 + v8[6]) = *((_BYTE *)a2 + v8[6]);
      *(_OWORD *)((char *)a1 + v8[7]) = *(_OWORD *)((char *)a2 + v8[7]);
      *(void *)((char *)a1 + v8[8]) = *(void *)((char *)a2 + v8[8]);
      *(void *)((char *)a1 + v8[9]) = *(void *)((char *)a2 + v8[9]);
      *(void *)((char *)a1 + v8[10]) = *(void *)((char *)a2 + v8[10]);
      *((_BYTE *)a1 + v8[11]) = *((_BYTE *)a2 + v8[11]);
      *((_BYTE *)a1 + v8[12]) = *((_BYTE *)a2 + v8[12]);
      *(void *)((char *)a1 + v8[13]) = *(void *)((char *)a2 + v8[13]);
    }

    else
    {
      *a1 = *a2;
      uint64_t v13 = (int *)type metadata accessor for SafeLocation(0LL);
      uint64_t v14 = v13[5];
      uint64_t v15 = (char *)a1 + v14;
      uint64_t v16 = (char *)a2 + v14;
      uint64_t v17 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32LL))(v15, v16, v17);
      *((_BYTE *)a1 + v13[6]) = *((_BYTE *)a2 + v13[6]);
      *(_OWORD *)((char *)a1 + v13[7]) = *(_OWORD *)((char *)a2 + v13[7]);
      *(void *)((char *)a1 + v13[8]) = *(void *)((char *)a2 + v13[8]);
      *(void *)((char *)a1 + v13[9]) = *(void *)((char *)a2 + v13[9]);
      *(void *)((char *)a1 + v13[10]) = *(void *)((char *)a2 + v13[10]);
      *((_BYTE *)a1 + v13[11]) = *((_BYTE *)a2 + v13[11]);
      *((_BYTE *)a1 + v13[12]) = *((_BYTE *)a2 + v13[12]);
      *(void *)((char *)a1 + v13[13]) = *(void *)((char *)a2 + v13[13]);
      uint64_t v18 = sub_100004AEC(&qword_1009B73C0);
      *((_BYTE *)a1 + *(int *)(v18 + 48)) = *((_BYTE *)a2 + *(int *)(v18 + 48));
    }

    swift_storeEnumTagMultiPayload(a1, a3, v7);
  }

  return a1;
}

uint64_t sub_100611B14(uint64_t a1)
{
  uint64_t result = type metadata accessor for SafeLocation(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_getTupleTypeLayout2(v5, v4, &unk_10080EAC8);
    v6[0] = v5;
    v6[1] = v4;
    v6[2] = v4;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 3LL, v6);
    return 0LL;
  }

  return result;
}

uint64_t sub_100611BB0@<X0>(void (*a1)(uint64_t, char **)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for ChangeSetAdaptor();
  uint64_t v6 = swift_allocObject(v5, 32LL, 7LL);
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = &_swiftEmptyDictionarySingleton;
  uint64_t v7 = v6 + 16;
  *(void *)(v6 + 24) = &_swiftEmptyDictionarySingleton;
  uint64_t v8 = (uint64_t *)(v6 + 24);
  uint64_t v9 = swift_retain();
  a1(v9, &off_10096BE08);
  swift_release(v6);
  if (v2) {
    return swift_release(v6);
  }
  swift_beginAccess(v7, v22, 0LL, 0LL);
  if (*(void *)(*(void *)v7 + 16LL)) {
    goto LABEL_9;
  }
  swift_beginAccess(v8, v20, 0LL, 0LL);
  uint64_t v12 = *v8;
  if ((*v8 & 0xC000000000000001LL) != 0)
  {
    if (v12 < 0) {
      uint64_t v13 = *v8;
    }
    else {
      uint64_t v13 = v12 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v8);
    uint64_t v14 = __CocoaDictionary.count.getter(v13);
    uint64_t v11 = swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_9;
    }
  }

  else if (*(void *)(v12 + 16))
  {
LABEL_9:
    UUID.init()(v11);
    swift_beginAccess(v8, v21, 0LL, 0LL);
    swift_bridgeObjectRetain(*(void *)(v6 + 24));
    uint64_t v16 = sub_1002FE704(v15);
    swift_bridgeObjectRelease();
    uint64_t v17 = *(void *)(v6 + 16);
    swift_bridgeObjectRetain(v17);
    swift_release(v6);
    uint64_t v18 = type metadata accessor for CloudKitChangeSet(0LL);
    *(void *)(a2 + *(int *)(v18 + 20)) = v16;
    *(void *)(a2 + *(int *)(v18 + swift_release(*(void *)(v0 + 24)) = v17;
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))( a2,  0LL,  1LL,  v18);
  }

  swift_release(v6);
  uint64_t v19 = type metadata accessor for CloudKitChangeSet(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))( a2,  1LL,  1LL,  v19);
}

unint64_t sub_100611D78()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(43LL);
  uint64_t v2 = swift_bridgeObjectRelease();
  v3._countAndFlagsBits = UUID.uuidString.getter(v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x203A65766173203ALL;
  v4._object = (void *)0xE800000000000000LL;
  String.append(_:)(v4);
  uint64_t v5 = type metadata accessor for CloudKitChangeSet(0LL);
  uint64_t v6 = *(void *)(v0 + *(int *)(v5 + 20));
  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0) {
      uint64_t v12 = *(void *)(v1 + *(int *)(v5 + 20));
    }
    else {
      uint64_t v12 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*(void *)(v1 + *(int *)(v5 + 20)));
    _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease();
  }

  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x3A6574656C656420LL;
  v8._object = (void *)0xE900000000000020LL;
  String.append(_:)(v8);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 62LL;
  v10._object = (void *)0xE100000000000000LL;
  String.append(_:)(v10);
  return 0xD000000000000013LL;
}

uint64_t type metadata accessor for ChangeSetAdaptor()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartydP33_28A5EF28FACF46A4FC556D76B1E95A0616ChangeSetAdaptor);
}

uint64_t *sub_100611F2C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v12);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v10;
    uint64_t v11 = *(uint64_t *)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = v11;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
  }

  return a1;
}

uint64_t sub_100611FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 20)));
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 24)));
}

uint64_t sub_100612018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = *(void *)(a2 + v7);
  *(void *)(a1 + v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = v9;
  uint64_t v10 = *(void *)(a2 + v8);
  *(void *)(a1 + v8) = v10;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_100612088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a2 + v7);
  uint64_t v9 = *(void *)(a1 + v7);
  *(void *)(a1 + v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = *(void *)(a2 + v10);
  uint64_t v12 = *(void *)(a1 + v10);
  *(void *)(a1 + v10) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_100612110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = *(void *)(a2 + v7);
  return a1;
}

uint64_t sub_100612174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a1 + v7);
  *(void *)(a1 + v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = *(void *)(a2 + v7);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = *(void *)(a1 + v9);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t sub_1006121EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006121F8);
}

uint64_t sub_1006121F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_100612274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100612280);
}

uint64_t sub_100612280(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for CloudKitChangeSet(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009B7810, (uint64_t)&nominal type descriptor for CloudKitChangeSet);
}

uint64_t sub_10061230C(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void **sub_100612384(void **a1, void **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void **)&v4[(v3 + 16LL) & ~(unint64_t)v3];
    swift_retain(v4);
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    uint64_t v13 = v4;
    v12(v9, v10, v11);
    uint64_t v14 = *(int *)(a3 + 24);
    uint64_t v15 = (char *)v7 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16LL))(v15, v16, v17);
  }

  return v7;
}

uint64_t sub_100612454(id *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  uint64_t v6 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
}

void **sub_1006124C8(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  id v12 = v6;
  v11(v8, v9, v10);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16LL))(v14, v15, v16);
  return a1;
}

void **sub_100612570(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24LL))(v10, v11, v12);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 24LL))(v14, v15, v16);
  return a1;
}

void *sub_100612614(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  id v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32LL))(v11, v12, v13);
  return a1;
}

void **sub_1006126AC(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(int *)(a3 + 20);
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40LL))(v12, v13, v14);
  return a1;
}

uint64_t sub_10061274C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100612758);
}

uint64_t sub_100612758(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UUID(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 20);
    }

    else
    {
      uint64_t v10 = type metadata accessor for URL(0LL);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 24);
    }

    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }

uint64_t sub_1006127F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100612804);
}

char *sub_100612804(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UUID(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 20);
    }

    else
    {
      uint64_t v10 = type metadata accessor for URL(0LL);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 24);
    }

    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }

  return result;
}

uint64_t type metadata accessor for CloudKitChangeSet.TombstoneInfo(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009B78A8, (uint64_t)&nominal type descriptor for CloudKitChangeSet.TombstoneInfo);
}

uint64_t sub_1006128B4(uint64_t a1)
{
  v5[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[1] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for URL(319LL);
    if (v4 <= 0x3F)
    {
      uint64_t v5[2] = *(void *)(result - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 3LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for CloudKitChangeSet.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_100612994 + 4 * byte_10080EB55[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1006129C8 + 4 * byte_10080EB50[v4]))();
}

uint64_t sub_1006129C8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006129D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1006129D8LL);
  }
  return result;
}

uint64_t sub_1006129E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1006129ECLL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1006129F0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006129F8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CloudKitChangeSet.Error()
{
  return &type metadata for CloudKitChangeSet.Error;
}

unint64_t sub_100612A18()
{
  unint64_t result = qword_1009B78E8;
  if (!qword_1009B78E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080EC28, &type metadata for CloudKitChangeSet.Error);
    atomic_store(result, (unint64_t *)&qword_1009B78E8);
  }

  return result;
}

uint64_t sub_100612A5C()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for SharingScheduler()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd16SharingScheduler);
}

uint64_t sub_100612AB0(uint64_t a1, char a2, char a3, uint64_t a4)
{
  *(_BYTE *)(v4 + 37_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = a3;
  *(_BYTE *)(v4 + 376) = a2;
  *(void *)(v4 + 19_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = a1;
  *(void *)(v4 + 200) = a4;
  uint64_t v5 = type metadata accessor for HashAlgorithm(0LL);
  *(void *)(v4 + 208) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v4 + 2swift_weakDestroy(v0 + 16) = v6;
  *(void *)(v4 + 224) = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)(type metadata accessor for AccessoryMetadata(0LL) - 8);
  *(void *)(v4 + 23_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v4 + 240) = swift_task_alloc(v8);
  *(void *)(v4 + 248) = swift_task_alloc(v8);
  uint64_t v9 = type metadata accessor for Locale(0LL);
  *(void *)(v4 + 256) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v4 + 264) = v10;
  *(void *)(v4 + 27_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Date(0LL);
  *(void *)(v4 + 280) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v4 + 288) = v12;
  *(void *)(v4 + 296) = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100612B9C, 0LL, 0LL);
}

void sub_100612B9C()
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  uint64_t v93 = &_swiftEmptyDictionarySingleton;
  sub_10005C260( 1702195828LL,  0xE400000000000000LL,  0xD00000000000001BLL,  0x8000000100855CD0LL,  isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  id v2 = [(id)objc_opt_self(AKDevice) currentDevice];
  if (!v2)
  {
    __break(1u);
    goto LABEL_23;
  }

  int v3 = v2;
  id v4 = [v2 serverFriendlyDescription];

  if (!v4)
  {
LABEL_23:
    __break(1u);
    return;
  }

  uint64_t v5 = *(void *)(v0 + 288);
  uint64_t v6 = *(void *)(v0 + 296);
  uint64_t v7 = *(void *)(v0 + 272);
  uint64_t v8 = *(void *)(v0 + 280);
  uint64_t v90 = *(void *)(v0 + 264);
  uint64_t v91 = *(void *)(v0 + 256);
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v11 = v10;

  char v12 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  uint64_t v93 = &_swiftEmptyDictionarySingleton;
  sub_10005C260(v9, v11, 0xD000000000000011LL, 0x8000000100854B60LL, v12);
  uint64_t v13 = swift_bridgeObjectRelease();
  uint64_t v14 = Date.init()(v13);
  uint64_t v15 = Date.epoch.getter(v14);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v8);
  *(void *)(v0 + 144) = v15;
  uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
  uint64_t v18 = v17;
  char v19 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_10005C260(v16, v18, 0xD000000000000015LL, 0x8000000100855CF0LL, v19);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 15_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 1LL;
  uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  uint64_t v22 = v21;
  char v23 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_10005C260(v20, v22, 0xD000000000000013LL, 0x8000000100855D10LL, v23);
  uint64_t v24 = swift_bridgeObjectRelease();
  uint64_t v25 = sub_1003F3498(v24);
  uint64_t v27 = v26;
  char v28 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  uint64_t v93 = &_swiftEmptyDictionarySingleton;
  sub_10005C260(v25, v27, 0x6567412D72657355LL, 0xEA0000000000746ELL, v28);
  uint64_t v29 = swift_bridgeObjectRelease();
  uint64_t v30 = static Locale.current.getter(v29);
  uint64_t v31 = Locale.acceptLanguageCode.getter(v30);
  uint64_t v33 = v32;
  (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v7, v91);
  char v34 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_10005C260(v31, v33, 0x4C2D747065636341LL, 0xEF65676175676E61LL, v34);
  swift_bridgeObjectRelease();
  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  uint64_t v35 = (void *)qword_100A2AF38;
  id v89 = (id)objc_opt_self(&OBJC_CLASS___FMSystemInfo);
  id v36 = [v89 sharedInstance];
  unsigned int v37 = [v36 isInternalBuild];

  if (v37)
  {
    NSString v38 = String._bridgeToObjectiveC()();
    unsigned int v39 = [v35 BOOLForKey:v38];

    if (v39)
    {
      char v40 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
      uint64_t v93 = &_swiftEmptyDictionarySingleton;
      sub_10005C260(0x7465722C6C616572LL, 0xEF302D726F727245LL, 0xD000000000000012LL, 0x800000010086B1D0LL, v40);
      swift_bridgeObjectRelease();
    }
  }

  uint64_t v42 = v0 + 192;
  uint64_t v41 = *(void *)(v0 + 192);
  *(void *)(v0 + 304) = &_swiftEmptyDictionarySingleton;
  int64_t v43 = *(void *)(v41 + 16);
  if (v43)
  {
    uint64_t v44 = *(void *)(v0 + 232);
    uint64_t v93 = _swiftEmptyArrayStorage;
    sub_100032C1C(0, v43, 0);
    uint64_t v45 = v41 + ((*(unsigned __int8 *)(v44 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80));
    uint64_t v46 = *(void *)(v44 + 72);
    uint64_t v47 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v49 = *(void *)(v0 + 240);
      uint64_t v48 = *(void *)(v0 + 248);
      uint64_t v50 = *(unsigned __int8 *)(v0 + 376);
      char v51 = *(_BYTE *)(v0 + 377);
      sub_100613904(v45, v48);
      sub_100613904(v48, v49);
      sub_10062B6A0(v49, v50, v51, v0 + 16);
      sub_100613948(v48);
      if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
      {
        sub_100032C1C(0, v47[2] + 1LL, 1);
        uint64_t v47 = v93;
      }

      unint64_t v53 = v47[2];
      unint64_t v52 = v47[3];
      if (v53 >= v52 >> 1)
      {
        sub_100032C1C(v52 > 1, v53 + 1, 1);
        uint64_t v47 = v93;
      }

      v47[2] = v53 + 1;
      uint64_t v54 = &v47[16 * v53];
      __int128 v55 = *(_OWORD *)(v0 + 16);
      __int128 v56 = *(_OWORD *)(v0 + 32);
      __int128 v57 = *(_OWORD *)(v0 + 64);
      v54[4] = *(_OWORD *)(v0 + 48);
      v54[5] = v57;
      v54[2] = v55;
      v54[3] = v56;
      __int128 v58 = *(_OWORD *)(v0 + 80);
      __int128 v59 = *(_OWORD *)(v0 + 96);
      __int128 v60 = *(_OWORD *)(v0 + 128);
      v54[8] = *(_OWORD *)(v0 + 112);
      v54[9] = v60;
      v54[6] = v58;
      v54[7] = v59;
      v45 += v46;
      --v43;
    }

    while (v43);
    uint64_t v42 = v0 + 192;
    uint64_t v61 = swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v61 = swift_bridgeObjectRelease();
    uint64_t v47 = _swiftEmptyArrayStorage;
  }

  os_log_type_t v62 = static os_log_type_t.debug.getter(v61);
  unint64_t v63 = sub_1001B9018();
  uint64_t v64 = (os_log_s *)static OS_os_log.default.getter(v63);
  if (os_log_type_enabled(v64, v62))
  {
    swift_bridgeObjectRetain_n(v47, 2LL);
    int64_t v65 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v66 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v93 = v66;
    *(_DWORD *)int64_t v65 = 136315138;
    *(void *)(v0 + 176) = v47;
    swift_bridgeObjectRetain(v47);
    uint64_t v67 = String.init<A>(describing:)(v0 + 176, &type metadata for AccessoryInfoRequestContent);
    *(void *)(v0 + 184) = sub_1003F11D4(v67, v68, (uint64_t *)&v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v42, v65 + 4, v65 + 12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v47, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v64, v62, "AccessoryInfoRequestContent %s", v65, 0xCu);
    swift_arrayDestroy(v66, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v66, -1LL, -1LL);
    swift_slowDealloc(v65, -1LL, -1LL);
  }

  uint64_t v69 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v69, *(unsigned int *)(v69 + 48), *(unsigned __int16 *)(v69 + 52));
  *(void *)(v0 + 31_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = JSONEncoder.init()();
  *(void *)(v0 + 160) = v47;
  unint64_t v70 = sub_100613984();
  uint64_t v71 = dispatch thunk of JSONEncoder.encode<A>(_:)(v0 + 160, &type metadata for AccessoryInfoRequestContent, v70);
  *(void *)(v0 + 320) = v71;
  *(void *)(v0 + 328) = v72;
  unint64_t v73 = v72;
  swift_bridgeObjectRelease();
  sub_10001736C(v71, v73);
  id v74 = [v89 sharedInstance];
  unsigned int v75 = [v74 isInternalBuild];

  if (v75)
  {
    uint64_t v77 = *(void *)(v0 + 216);
    uint64_t v76 = *(void *)(v0 + 224);
    uint64_t v78 = *(void *)(v0 + 208);
    (*(void (**)(uint64_t, void, uint64_t))(v77 + 104))(v76, enum case for HashAlgorithm.sha256(_:), v78);
    sub_10001736C(v71, v73);
    uint64_t v79 = Data.hash(algorithm:)(v76, v71, v73);
    uint64_t v81 = v80;
    *(void *)(v0 + 336) = v79;
    *(void *)(v0 + 344) = v80;
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v76, v78);
    uint64_t v92 = (char *)&dword_1009AD078 + dword_1009AD078;
    uint64_t v82 = (void *)swift_task_alloc(unk_1009AD07C);
    *(void *)(v0 + 35_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v82;
    *uint64_t v82 = v0;
    v82[1] = sub_1006134DC;
    ((void (*)(uint64_t, uint64_t, void))v92)(v79, v81, *(void *)(v0 + 200));
  }

  else
  {
    swift_release();
    sub_100016F9C(v71, v73);
    swift_release();
    uint64_t v84 = *(void *)(v0 + 320);
    uint64_t v83 = *(void *)(v0 + 328);
    uint64_t v85 = *(void *)(v0 + 272);
    uint64_t v87 = *(void *)(v0 + 240);
    uint64_t v86 = *(void *)(v0 + 248);
    uint64_t v88 = *(void *)(v0 + 224);
    swift_task_dealloc(*(void *)(v0 + 296));
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    (*(void (**)(void *, uint64_t, uint64_t))(v0 + 8))(&_swiftEmptyDictionarySingleton, v84, v83);
  }

uint64_t sub_1006134DC(uint64_t a1)
{
  int v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 352LL);
  v3[45] = a1;
  v3[46] = v1;
  swift_task_dealloc(v4);
  sub_100016F9C(v3[42], v3[43]);
  if (v1)
  {
    swift_errorRelease(v1);
    uint64_t v5 = sub_10061376C;
  }

  else
  {
    uint64_t v5 = sub_100613558;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_100613558()
{
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v2 = *(void *)(v0 + 368);
  uint64_t v3 = *(void *)(v0 + 304);
  swift_bridgeObjectRetain(v1);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  uint64_t v21 = v3;
  sub_100129198(v1, (uint64_t)sub_1003F68BC, 0LL, isUniquelyReferenced_nonNull_native, &v21);
  if (v2) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v6 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_10099B120 != -1) {
    swift_once(&qword_10099B120, sub_100118994);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = sub_10000A720(v7, (uint64_t)qword_100A2A1E0);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.default.getter(v9);
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v13 = *(void *)(v0 + 320);
  unint64_t v12 = *(void *)(v0 + 328);
  if (v11)
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Adding BAA Attestation headers for internal build", v14, 2u);
    swift_slowDealloc(v14, -1LL, -1LL);
    sub_100016F9C(v13, v12);
    swift_release();
    swift_release();

    sub_100016F9C(v13, v12);
  }

  else
  {
    sub_100016F9C(*(void *)(v0 + 320), *(void *)(v0 + 328));
    sub_100016F9C(v13, v12);
    swift_release();
    swift_release();
  }

  uint64_t v16 = *(void *)(v0 + 320);
  uint64_t v15 = *(void *)(v0 + 328);
  uint64_t v17 = *(void *)(v0 + 272);
  uint64_t v19 = *(void *)(v0 + 240);
  uint64_t v18 = *(void *)(v0 + 248);
  uint64_t v20 = *(void *)(v0 + 224);
  swift_task_dealloc(*(void *)(v0 + 296));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v6, v16, v15);
}

uint64_t sub_10061376C()
{
  uint64_t v1 = *(void *)(v0 + 304);
  if (qword_10099B120 != -1) {
    swift_once(&qword_10099B120, sub_100118994);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_10000A720(v2, (uint64_t)qword_100A2A1E0);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v8 = *(void *)(v0 + 320);
  unint64_t v7 = *(void *)(v0 + 328);
  if (v6)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Adding BAA Attestation headers for internal build", v9, 2u);
    swift_slowDealloc(v9, -1LL, -1LL);
    sub_100016F9C(v8, v7);
    swift_release();
    swift_release();

    sub_100016F9C(v8, v7);
  }

  else
  {
    sub_100016F9C(*(void *)(v0 + 320), *(void *)(v0 + 328));
    sub_100016F9C(v8, v7);
    swift_release();
    swift_release();
  }

  uint64_t v11 = *(void *)(v0 + 320);
  uint64_t v10 = *(void *)(v0 + 328);
  uint64_t v12 = *(void *)(v0 + 272);
  uint64_t v14 = *(void *)(v0 + 240);
  uint64_t v13 = *(void *)(v0 + 248);
  uint64_t v15 = *(void *)(v0 + 224);
  swift_task_dealloc(*(void *)(v0 + 296));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v1, v11, v10);
}

uint64_t sub_100613904(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccessoryMetadata(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100613948(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccessoryMetadata(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_100613984()
{
  unint64_t result = qword_1009B7A68;
  if (!qword_1009B7A68)
  {
    unint64_t result = swift_getWitnessTable(&unk_100810FA4, &type metadata for AccessoryInfoRequestContent);
    atomic_store(result, (unint64_t *)&qword_1009B7A68);
  }

  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoRequest()
{
  return &type metadata for AccessoryInfoRequest;
}

uint64_t sub_1006139D8(uint64_t a1, unsigned int a2)
{
  __int16 v2 = a2;
  char v3 = a2 & 1;
  uint64_t v4 = HIWORD(a2) & 1;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v6 = swift_allocObject(v5, 272LL, 7LL);
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_1007E82A0;
  *(void *)(v6 + 56) = &type metadata for Bool;
  *(void *)(v6 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v6 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v3;
  unsigned __int8 v7 = sub_1001BF158();
  *(void *)(v6 + 96) = &type metadata for Bool;
  *(void *)(v6 + 104) = &protocol witness table for Bool;
  *(_BYTE *)(v6 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v7 & 1;
  *(void *)(v6 + 136) = &type metadata for Bool;
  *(void *)(v6 + 144) = &protocol witness table for Bool;
  *(_BYTE *)(v6 + 11_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = HIBYTE(v2) & 1;
  unsigned __int8 v8 = sub_100627288();
  *(void *)(v6 + 176) = &type metadata for Bool;
  *(void *)(v6 + 184) = &protocol witness table for Bool;
  *(_BYTE *)(v6 + 15_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v8 & 1;
  uint64_t v9 = sub_1001BEF0C();
  uint64_t v19 = v9;
  type metadata accessor for CLAuthorizationStatus(0LL);
  uint64_t v11 = v10;
  OS_dispatch_queue.sync<A>(execute:)(sub_1000D44D4, v18, v10);

  BOOL v12 = (v23 - 3) < 2;
  *(void *)(v6 + 2swift_weakDestroy(v0 + 16) = &type metadata for Bool;
  *(void *)(v6 + 224) = &protocol witness table for Bool;
  *(_BYTE *)(v6 + 19_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v12;
  *(void *)(v6 + 256) = &type metadata for Bool;
  *(void *)(v6 + 264) = &protocol witness table for Bool;
  *(_BYTE *)(v6 + 23_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v4;
  unint64_t v13 = sub_1001B9018();
  uint64_t v14 = (void *)static OS_os_log.default.getter(v13);
  static os_log_type_t.default.getter(v14);
  os_log(_:dso:log:type:_:)( "Finder state info enablers: \n findingEnabled: %i \n fmipState: %i \n serviceEnabled: %i \n globalLocation: %i \n fmipLocationServicesEnabled: %i \n canPublishAnonymously: %i",  v18[0],  v18[2],  (_DWORD)v19,  v20,  v21,  v22);
  swift_bridgeObjectRelease();

  if ((v2 & 1) == 0) {
    return 0LL;
  }
  if ((v2 & 0x100) == 0) {
    return 0LL;
  }
  uint64_t v15 = sub_1001BEF0C();
  v17[2] = __chkstk_darwin(v15);
  OS_dispatch_queue.sync<A>(execute:)(sub_100614664, v17, v11);

  return v4;
}

uint64_t sub_100613BD4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100613C14 + 4 * byte_10080EDB0[a1]))( 0xD000000000000017LL,  0x800000010084FD40LL);
}

uint64_t sub_100613C14()
{
  return v0 + 9;
}

uint64_t sub_100613CD0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100613D10 + 4 * byte_10080EDB8[a1]))( 0xD000000000000017LL,  0x800000010084FD40LL);
}

uint64_t sub_100613D10()
{
  return v0 + 9;
}

void sub_100613DCC(char *a1)
{
}

void sub_100613DD8()
{
}

void sub_100613DE4(uint64_t a1)
{
}

void sub_100613DEC(uint64_t a1)
{
}

unint64_t sub_100613DF4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10061461C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100613E20@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100613BD4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100613E48()
{
  return sub_100613CD0(*v0);
}

unint64_t sub_100613E50@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10061461C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100613E74(uint64_t a1)
{
  unint64_t v2 = sub_100614434();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100613E9C(uint64_t a1)
{
  unint64_t v2 = sub_100614434();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100613EC4(void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v7 = sub_100004AEC(&qword_1009B7A70);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100012ED8(a1, v11);
  unint64_t v13 = sub_100614434();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for FinderStatePermissions.CodingKeys,  &type metadata for FinderStatePermissions.CodingKeys,  v13,  v11,  v12);
  unsigned __int8 v14 = sub_100627288();
  char v30 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v14 & 1, &v30, v7);
  if (!v3)
  {
    unsigned int v22 = a3;
    uint64_t v15 = sub_1001BEF0C();
    *(&v21 - _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = __chkstk_darwin(v15);
    type metadata accessor for CLAuthorizationStatus(0LL);
    OS_dispatch_queue.sync<A>(execute:)(sub_100614664, &v21 - 4, v16);

    char v29 = 1;
    KeyedEncodingContainer.encode(_:forKey:)((v26 - 3) < 2, &v29, v7);
    unsigned int v17 = v22;
    char v28 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v22 & 1, &v28, v7);
    char v27 = 3;
    KeyedEncodingContainer.encode(_:forKey:)((v17 >> 8) & 1, &v27, v7);
    unsigned __int8 v18 = sub_1001BF158();
    char v25 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v18 & 1, &v25, v7);
    char v19 = sub_1006139D8(a2, v17 & 0x10101);
    char v24 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v19 & 1, &v24, v7);
    char v23 = 7;
    KeyedEncodingContainer.encode(_:forKey:)(HIWORD(v17) & 1, &v23, v7);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10061414C(void *a1)
{
  if (*(_BYTE *)(v1 + 9)) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  int v3 = v2 | *(unsigned __int8 *)(v1 + 8);
  if (*(_BYTE *)(v1 + 10)) {
    int v4 = 0x10000;
  }
  else {
    int v4 = 0;
  }
  return sub_100613EC4(a1, *(void *)v1, v3 | v4);
}

uint64_t sub_100614190(uint64_t a1)
{
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  sub_1006A0B80(v3);
  swift_bridgeObjectRelease();
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  sub_1004BA6F4();
  swift_bridgeObjectRelease();
  [(id)objc_opt_self(SPFinderStateInfo) canPublishAnonymously];
  return a1;
}

uint64_t sub_1006142A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_WORD *)(a1 + 9) = *(_WORD *)((char *)a2 + 9);
  swift_retain(v3);
  return a1;
}

uint64_t *assignWithCopy for FinderStatePermissions(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a1 + 9) = *((_BYTE *)a2 + 9);
  *((_BYTE *)a1 + 10) = *((_BYTE *)a2 + 10);
  return a1;
}

uint64_t initializeWithTake for FinderStatePermissions(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = *(_DWORD *)((char *)a2 + 7);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t *assignWithTake for FinderStatePermissions(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a1 + 9) = *((_BYTE *)a2 + 9);
  *((_BYTE *)a1 + 10) = *((_BYTE *)a2 + 10);
  return a1;
}

uint64_t getEnumTagSinglePayload for FinderStatePermissions(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 11)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FinderStatePermissions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 11) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 11) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for FinderStatePermissions()
{
  return &type metadata for FinderStatePermissions;
}

unint64_t sub_100614434()
{
  unint64_t result = qword_1009B7A78;
  if (!qword_1009B7A78)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080EF0C, &type metadata for FinderStatePermissions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B7A78);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for FinderStatePermissions.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_1006144C4 + 4 * byte_10080EDC5[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1006144F8 + 4 * byte_10080EDC0[v4]))();
}

uint64_t sub_1006144F8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100614500(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100614508LL);
  }
  return result;
}

uint64_t sub_100614514(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10061451CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 7;
  return result;
}

uint64_t sub_100614520(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100614528(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FinderStatePermissions.CodingKeys()
{
  return &type metadata for FinderStatePermissions.CodingKeys;
}

unint64_t sub_100614548()
{
  unint64_t result = qword_1009B7A80;
  if (!qword_1009B7A80)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080EEE4, &type metadata for FinderStatePermissions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B7A80);
  }

  return result;
}

unint64_t sub_100614590()
{
  unint64_t result = qword_1009B7A88;
  if (!qword_1009B7A88)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080EE1C, &type metadata for FinderStatePermissions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B7A88);
  }

  return result;
}

unint64_t sub_1006145D8()
{
  unint64_t result = qword_1009B7A90;
  if (!qword_1009B7A90)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080EE44, &type metadata for FinderStatePermissions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B7A90);
  }

  return result;
}

unint64_t sub_10061461C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100936530, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 8) {
    return 8LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_100614664@<X0>(_DWORD *a1@<X8>)
{
  return sub_1000D44D4(a1);
}

uint64_t sub_100614678(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1006146AC + 4 * byte_10080EF60[a1]))( 0x6E776F6E6B6E752ELL,  0xE800000000000000LL);
}

uint64_t sub_1006146AC()
{
  return 0x6D6972507465672ELL;
}

unint64_t sub_1006146D0()
{
  return 0xD000000000000016LL;
}

uint64_t sub_100614754@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100614B20(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10061477C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100614B34();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1006147D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100614B34();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100614824()
{
  return sub_100614678(*v0);
}

uint64_t sub_10061482C()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_10002214C(*(void *)(v0 + 56), *(void *)(v0 + 64));
  swift_bridgeObjectRelease();
  sub_1000182F0(*(void *)(v0 + 80), *(void *)(v0 + 88));
  swift_release();
  return v0;
}

uint64_t sub_100614888()
{
  return swift_deallocClassInstance(v0, 113LL, 7LL);
}

uint64_t type metadata accessor for PrivacyAlertSupport()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd19PrivacyAlertSupport);
}

uint64_t storeEnumTagSinglePayload for PrivacyAlertSupport.PrivacyAlertState( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_100614914 + 4 * byte_10080EF6C[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100614948 + 4 * byte_10080EF67[v4]))();
}

uint64_t sub_100614948(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100614950(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100614958LL);
  }
  return result;
}

uint64_t sub_100614964(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10061496CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 6;
  return result;
}

uint64_t sub_100614970(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100614978(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PrivacyAlertSupport.PrivacyAlertState()
{
  return &type metadata for PrivacyAlertSupport.PrivacyAlertState;
}

uint64_t *initializeBufferWithCopyOfBuffer for PrivacyAlertSupport.PairingAction(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = v3;
  return a1;
}

unint64_t destroy for PrivacyAlertSupport.PairingAction(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

unint64_t *assignWithCopy for PrivacyAlertSupport.PairingAction( unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_bridgeObjectRetain(v4);
    }
  }

  else if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v3);
    *a1 = *a2;
  }

  else
  {
    *a1 = v4;
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRelease(v3);
  }

  return a1;
}

unint64_t *assignWithTake for PrivacyAlertSupport.PairingAction( unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v3);
LABEL_5:
    *a1 = v4;
    return a1;
  }

  *a1 = v4;
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for PrivacyAlertSupport.PairingAction()
{
  return &type metadata for PrivacyAlertSupport.PairingAction;
}

unint64_t sub_100614ADC()
{
  unint64_t result = qword_1009B7CF8;
  if (!qword_1009B7CF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080F148, &type metadata for PrivacyAlertSupport.PrivacyAlertState);
    atomic_store(result, (unint64_t *)&qword_1009B7CF8);
  }

  return result;
}

uint64_t sub_100614B20(uint64_t a1)
{
  else {
    return 7LL;
  }
}

unint64_t sub_100614B34()
{
  unint64_t result = qword_1009B7D00;
  if (!qword_1009B7D00)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080F0D0, &type metadata for PrivacyAlertSupport.PrivacyAlertState);
    atomic_store(result, (unint64_t *)&qword_1009B7D00);
  }

  return result;
}

uint64_t sub_100614B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100614B88);
}

uint64_t sub_100614B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_100614C04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100614C10);
}

uint64_t sub_100614C10(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for FindMyAccessoryFamilyKeyEnvelope(uint64_t a1)
{
  uint64_t result = qword_1009B7D60;
  if (!qword_1009B7D60) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FindMyAccessoryFamilyKeyEnvelope);
  }
  return result;
}

uint64_t sub_100614CC4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B7DA0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1006152DC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for FindMyAccessoryFamilyKeyEnvelope.CodingKeys,  &type metadata for FindMyAccessoryFamilyKeyEnvelope.CodingKeys,  v11,  v9,  v10);
  LOBYTE(v20) = 0;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v20, v5, v12, v13);
  if (!v2)
  {
    uint64_t MyAccessoryFamilyKeyEnvelope = type metadata accessor for FindMyAccessoryFamilyKeyEnvelope(0LL);
    uint64_t v20 = *(void *)(v3 + *(int *)(MyAccessoryFamilyKeyEnvelope + 20));
    char v19 = 1;
    uint64_t v15 = sub_100004AEC(&qword_1009B7DB0);
    uint64_t v16 = sub_100615320( &qword_1009B7DB8,  &qword_1009B7DC0,  (uint64_t)&unk_100800160,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, v15, v16);
    uint64_t v20 = *(void *)(v3 + *(int *)(MyAccessoryFamilyKeyEnvelope + 24));
    char v19 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, v15, v16);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100614EA4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v31 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v32 = (uint64_t *)((char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v33 = sub_100004AEC(&qword_1009B7DC8);
  uint64_t v5 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t MyAccessoryFamilyKeyEnvelope = type metadata accessor for FindMyAccessoryFamilyKeyEnvelope(0LL);
  __chkstk_darwin(MyAccessoryFamilyKeyEnvelope);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v11 = a1[4];
  sub_100012ED8(a1, v12);
  unint64_t v13 = sub_1006152DC();
  char v34 = v7;
  uint64_t v14 = v35;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for FindMyAccessoryFamilyKeyEnvelope.CodingKeys,  &type metadata for FindMyAccessoryFamilyKeyEnvelope.CodingKeys,  v13,  v12,  v11);
  if (v14) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v35 = MyAccessoryFamilyKeyEnvelope;
  uint64_t v15 = a1;
  uint64_t v16 = v10;
  LOBYTE(v3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = 0;
  uint64_t v17 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v19 = v31;
  uint64_t v18 = v32;
  uint64_t v20 = v33;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v32, v31, &v37, v33, v31, v17);
  uint64_t v29 = v3;
  uint64_t v21 = *(void (**)(char *, void *, uint64_t))(v3 + 32);
  uint64_t v22 = (uint64_t)v16;
  v21(v16, v18, v19);
  uint64_t v23 = sub_100004AEC(&qword_1009B7DB0);
  char v36 = 1;
  uint64_t v24 = sub_100615320( &qword_1009B7DD0,  &qword_1009B7DD8,  (uint64_t)&unk_100800188,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v37, v23, &v36, v20, v23, v24);
  uint64_t v25 = v24;
  uint64_t v26 = v35;
  *(void *)(v22 + *(int *)(v35 + 20)) = v37;
  char v36 = 2;
  char v27 = v34;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v37, v23, &v36, v20, v23, v25);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v27, v33);
  *(void *)(v22 + *(int *)(v26 + swift_release(*(void *)(v0 + 24)) = v37;
  sub_1006153A4(v22, v30);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v15);
  return sub_1006153E8(v22);
}

unint64_t sub_1006151CC()
{
  uint64_t v1 = 0x4B7972616D697270LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x7261646E6F636573LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000010LL;
  }
}

uint64_t sub_100615240@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1006155C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100615264(uint64_t a1)
{
  unint64_t v2 = sub_1006152DC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10061528C(uint64_t a1)
{
  unint64_t v2 = sub_1006152DC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1006152B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100614EA4(a1, a2);
}

uint64_t sub_1006152C8(void *a1)
{
  return sub_100614CC4(a1);
}

unint64_t sub_1006152DC()
{
  unint64_t result = qword_1009B7DA8;
  if (!qword_1009B7DA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080F2B8, &type metadata for FindMyAccessoryFamilyKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B7DA8);
  }

  return result;
}

uint64_t sub_100615320(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v9 = sub_100004B78(&qword_1009B7DB0);
    sub_100007864(a2, type metadata accessor for FamilyCryptoKeysV2, a3);
    uint64_t result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1006153A4(uint64_t a1, uint64_t a2)
{
  uint64_t MyAccessoryFamilyKeyEnvelope = type metadata accessor for FindMyAccessoryFamilyKeyEnvelope(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(MyAccessoryFamilyKeyEnvelope - 8) + 16LL))( a2,  a1,  MyAccessoryFamilyKeyEnvelope);
  return a2;
}

uint64_t sub_1006153E8(uint64_t a1)
{
  uint64_t MyAccessoryFamilyKeyEnvelope = type metadata accessor for FindMyAccessoryFamilyKeyEnvelope(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(MyAccessoryFamilyKeyEnvelope - 8) + 8LL))( a1,  MyAccessoryFamilyKeyEnvelope);
  return a1;
}

uint64_t storeEnumTagSinglePayload for FindMyAccessoryFamilyKeyEnvelope.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100615470 + 4 * byte_10080F175[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1006154A4 + 4 * byte_10080F170[v4]))();
}

uint64_t sub_1006154A4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006154AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1006154B4LL);
  }
  return result;
}

uint64_t sub_1006154C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1006154C8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1006154CC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006154D4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FindMyAccessoryFamilyKeyEnvelope.CodingKeys()
{
  return &type metadata for FindMyAccessoryFamilyKeyEnvelope.CodingKeys;
}

unint64_t sub_1006154F4()
{
  unint64_t result = qword_1009B7DE0;
  if (!qword_1009B7DE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080F290, &type metadata for FindMyAccessoryFamilyKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B7DE0);
  }

  return result;
}

unint64_t sub_10061553C()
{
  unint64_t result = qword_1009B7DE8;
  if (!qword_1009B7DE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080F200, &type metadata for FindMyAccessoryFamilyKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B7DE8);
  }

  return result;
}

unint64_t sub_100615584()
{
  unint64_t result = qword_1009B7DF0;
  if (!qword_1009B7DF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080F228, &type metadata for FindMyAccessoryFamilyKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B7DF0);
  }

  return result;
}

uint64_t sub_1006155C8(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x800000010084D8A0LL;
    if (a2 == 0x800000010084D8A0LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010084D8A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0x4B7972616D697270LL && a2 == 0xEB00000000737965LL)
  {
    unint64_t v6 = 0xEB00000000737965LL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4B7972616D697270LL, 0xEB00000000737965LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_11;
  }

  if (a1 == 0x7261646E6F636573LL && a2 == 0xED00007379654B79LL)
  {
    swift_bridgeObjectRelease(0xED00007379654B79LL);
    return 2LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7261646E6F636573LL, 0xED00007379654B79LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_100615754()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2AF40);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2AF40);
  if (qword_10099BA30 != -1) {
    swift_once(&qword_10099BA30, sub_100795FD8);
  }
  uint64_t v2 = sub_10000A720(v0, (uint64_t)qword_100A2B7D8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_1006157E4()
{
  v1[5] = v0;
  uint64_t v2 = sub_100004AEC(&qword_1009A9BF0);
  v1[6] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v3 = (*(void *)(*(void *)(sub_100004AEC(&qword_1009A0CB0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[7] = swift_task_alloc(v3);
  v1[8] = swift_task_alloc(v3);
  return swift_task_switch(sub_100615874, v0, 0LL);
}

uint64_t sub_100615874()
{
  uint64_t v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc(v1);
  v0[9] = v2;
  uint64_t v3 = sub_100004AEC(&qword_1009A0840);
  v0[10] = v3;
  *uint64_t v2 = v0;
  v2[1] = sub_1006158F0;
  return unsafeBlocking<A>(_:)(v0[8], sub_1006175A0, v0[5], v3);
}

uint64_t sub_1006158F0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 72LL));
  swift_release();
  return swift_task_switch(sub_100615950, v1, 0LL);
}

uint64_t sub_100615950()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(*(void *)(v0 + 80) - 8LL) + 56LL))(v2, 0LL, 1LL);
  sub_1006175A8(v2, v1);
  uint64_t v5 = v4 + OBJC_IVAR____TtC12searchpartyd31OwnDevicePublishActivityService_configurationSubscription;
  swift_beginAccess( v4 + OBJC_IVAR____TtC12searchpartyd31OwnDevicePublishActivityService_configurationSubscription,  v0 + 16,  33LL,  0LL);
  sub_1004BD1F0(v1, v5);
  swift_endAccess(v0 + 16);
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v3, 1LL, 1LL, v6);
  uint64_t v7 = sub_100007864( &qword_1009B7F30,  type metadata accessor for OwnDevicePublishActivityService,  (uint64_t)&unk_10080F3C4);
  uint64_t v8 = (void *)swift_allocObject(&unk_10096C5E0, 40LL, 7LL);
  v8[2] = v4;
  v8[3] = v7;
  v8[4] = v4;
  swift_retain_n(v4, 2LL);
  sub_1003EDB00(v3, (uint64_t)&unk_1009B7F50, (uint64_t)v8);
  swift_release();
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100615A90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  void v5[3] = type metadata accessor for OwnDevicePublishActivityService(0LL);
  v5[4] = &off_10096C528;
  v5[0] = a1;
  swift_retain();
  sub_100031AEC((uint64_t)v5, a2);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v5);
}

uint64_t sub_100615B24(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void v4[2] = a4;
  void v4[3] = *a4;
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  v4[4] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100615B88, a4, 0LL);
}

uint64_t sub_100615B88()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[2];
  uint64_t v3 = type metadata accessor for XPCActivity(0LL);
  static DispatchQoS.background.getter(v3);
  uint64_t v4 = swift_allocObject(&unk_10096C608, 24LL, 7LL);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v5 = swift_allocObject(&unk_10096C630, 32LL, 7LL);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v2;
  *(void *)(v5 + 24) = v1;
  uint64_t v6 = async function pointer to XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)[1];
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc(v6);
  v0[5] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100615C74;
  return XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)( 0xD000000000000027LL,  0x800000010086B3C0LL,  v0[4],  &unk_1009B7F60,  v4,  &unk_1009B7F70,  v5);
}

uint64_t sub_100615C74(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 40LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 16LL);
  *(void *)(*(void *)v1 + 48LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100615CD4, v3, 0LL);
}

uint64_t sub_100615CD4()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd31OwnDevicePublishActivityService_activity);
  *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd31OwnDevicePublishActivityService_activity) = *(void *)(v0 + 48);
  swift_release(v3);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100615D24(uint64_t a1, uint64_t a2)
{
  v2[4] = a1;
  v2[5] = a2;
  uint64_t v3 = type metadata accessor for XPCActivity.Criteria.Options(0LL);
  v2[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for XPCActivity.Priority(0LL);
  void v2[9] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[10] = v6;
  v2[11] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009A17B8);
  v2[12] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for XPCActivity.Criteria(0LL);
  v2[13] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[14] = v9;
  v2[15] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100615DF8, 0LL, 0LL);
}

uint64_t sub_100615DF8()
{
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  uint64_t v1 = qword_100A2A710;
  *(void *)(v0 + 128) = qword_100A2A710;
  uint64_t v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc(v2);
  *(void *)(v0 + 136) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100615EA8;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_100015814, v1, &type metadata for Configuration);
}

uint64_t sub_100615EA8()
{
  return swift_task_switch(sub_100615F04, 0LL, 0LL);
}

uint64_t sub_100615F04()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (void *)sub_1006A0E1C(v1);
  uint64_t v3 = SPServiceStateEnabled;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  uint64_t v6 = v5;
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  if (v4 == v7 && v6 == v8)
  {
    swift_bridgeObjectRelease_n(v6, 2LL);

LABEL_11:
    uint64_t v17 = *(void *)(v0 + 104);
    uint64_t v18 = *(void *)(v0 + 112);
    uint64_t v19 = *(void *)(v0 + 96);
    sub_10001581C(*(void *)(v0 + 40), v19, &qword_1009A17B8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v19, 1LL, v17) != 1)
    {
      uint64_t v39 = *(void *)(v0 + 112);
      uint64_t v38 = *(void *)(v0 + 120);
      uint64_t v41 = *(void *)(v0 + 96);
      uint64_t v40 = *(void *)(v0 + 104);
      uint64_t v42 = *(void *)(v0 + 32);
      swift_bridgeObjectRelease();
      int64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 32);
      v43(v38, v41, v40);
      v43(v42, v38, v40);
      goto LABEL_20;
    }

    uint64_t v20 = *(void *)(v0 + 88);
    uint64_t v21 = *(void *)(v0 + 72);
    uint64_t v22 = *(void *)(v0 + 80);
    sub_100015794(*(void *)(v0 + 96), &qword_1009A17B8);
    sub_1006A1BA0(v1);
    double v24 = v23;
    sub_1006A1B94(v1);
    double v26 = v25;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v22 + 104))( v20,  enum case for XPCActivity.Priority.utility(_:),  v21);
    if (v24 <= -9.22337204e18)
    {
      __break(1u);
    }

    else if (v24 < 9.22337204e18)
    {
      if ((*(void *)&v24 & 0x7FF0000000000000LL) != 0x7FF0000000000000LL
        && (*(void *)&v26 & 0x7FF0000000000000LL) != 0x7FF0000000000000LL)
      {
        if (v26 > -9.22337204e18)
        {
          if (v26 < 9.22337204e18)
          {
            uint64_t v49 = *(void *)(v0 + 88);
            uint64_t v28 = *(void *)(v0 + 56);
            uint64_t v27 = *(void *)(v0 + 64);
            uint64_t v29 = *(void *)(v0 + 48);
            uint64_t v30 = sub_100004AEC(&qword_1009A17D0);
            uint64_t v31 = swift_allocObject( v30,  ((*(unsigned __int8 *)(v28 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))
                  + 4LL * *(void *)(v28 + 72),
                    *(unsigned __int8 *)(v28 + 80) | 7LL);
            *(_OWORD *)(v31 + swift_weakDestroy(v0 + 16) = xmmword_1007E8290;
            uint64_t v32 = static XPCActivity.Criteria.Options.allowBattery.getter(v31);
            uint64_t v33 = static XPCActivity.Criteria.Options.requiresClassC.getter(v32);
            uint64_t v34 = static XPCActivity.Criteria.Options.requiresNetwork.getter(v33);
            static XPCActivity.Criteria.Options.preventDeviceSleep.getter(v34);
            *(void *)(v0 + 24) = v31;
            uint64_t v35 = sub_100007864( &qword_10099CAF8,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity.Criteria.Options,  (uint64_t)&protocol conformance descriptor for XPCActivity.Criteria.Options);
            uint64_t v36 = sub_100004AEC(&qword_1009A17D8);
            unint64_t v37 = sub_10011858C();
            dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 24, v36, v37, v29, v35);
            XPCActivity.Criteria.init(priority:repeating:delay:gracePeriod:interval:options:)( v49,  1LL,  0LL,  (uint64_t)v24,  (uint64_t)v26,  v27);
LABEL_20:
            uint64_t v16 = 0LL;
            goto LABEL_21;
          }

uint64_t sub_100616314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[20] = a2;
  v3[21] = a3;
  v3[19] = a1;
  uint64_t v5 = sub_100004AEC(&qword_1009A1748);
  v3[22] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for XPCActivity.State(0LL);
  v3[23] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[24] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[25] = swift_task_alloc(v8);
  v3[26] = swift_task_alloc(v8);
  return swift_task_switch(sub_1006163B0, a3, 0LL);
}

uint64_t sub_1006163B0()
{
  if (qword_10099B678 != -1) {
    swift_once(&qword_10099B678, sub_100615754);
  }
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_10000A720(v5, (uint64_t)qword_100A2AF40);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  uint64_t v7 = v6(v1, v4, v2);
  unint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter(v8);
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = *(void *)(v0 + 208);
  uint64_t v12 = *(void *)(v0 + 184);
  uint64_t v13 = *(void *)(v0 + 192);
  if (v10)
  {
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v33 = v6;
    uint64_t v35 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = v35;
    *(_DWORD *)os_log_type_t v14 = 136315138;
    uint64_t v16 = sub_100007864( &qword_10099CAD8,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity.State,  (uint64_t)&protocol conformance descriptor for XPCActivity.State);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v12, v16);
    *(void *)(v0 + 144) = sub_1003F11D4(v17, v18, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Own device publish activity state: %s.", v14, 0xCu);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v20 = v15;
    uint64_t v6 = v33;
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(*(void *)(v0 + 208), *(void *)(v0 + 184));
  }

  uint64_t v22 = *(void *)(v0 + 192);
  uint64_t v21 = *(void *)(v0 + 200);
  uint64_t v23 = *(void *)(v0 + 184);
  v6(v21, *(void *)(v0 + 160), v23);
  int v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 88))(v21, v23);
  if (v24 == enum case for XPCActivity.State.checkIn(_:) || v24 == enum case for XPCActivity.State.wait(_:))
  {
LABEL_19:
    uint64_t v31 = *(void *)(v0 + 200);
    uint64_t v32 = *(void *)(v0 + 176);
    swift_task_dealloc(*(void *)(v0 + 208));
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  if (v24 != enum case for XPCActivity.State.run(_:))
  {
    if (v24 == enum case for XPCActivity.State.defer(_:))
    {
      uint64_t v27 = type metadata accessor for XPCActivity(0LL);
      uint64_t v28 = sub_100007864( &qword_10099CAD0,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity,  (uint64_t)&protocol conformance descriptor for XPCActivity);
      uint64_t v29 = dispatch thunk of Actor.unownedExecutor.getter(v27, v28);
      return swift_task_switch(sub_1006167D0, v29, v30);
    }

    if (v24 != enum case for XPCActivity.State.continue(_:)
      && v24 != enum case for XPCActivity.State.done(_:)
      && v24 != enum case for XPCActivity.State.invalidated(_:))
    {
      v19(*(void *)(v0 + 200), *(void *)(v0 + 184));
    }

    goto LABEL_19;
  }

  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v34 = (uint64_t (__cdecl *)())((char *)&dword_10099C980 + dword_10099C980);
    double v26 = (void *)swift_task_alloc(unk_10099C984);
    *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = v26;
    *double v26 = v0;
    v26[1] = sub_100616810;
    return v34();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1006167D0()
{
  uint64_t v1 = *(void *)(v0 + 168);
  dispatch thunk of XPCActivity.defer()();
  return swift_task_switch(sub_100617768, v1, 0LL);
}

uint64_t sub_100616810(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 216LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 168LL);
  *(void *)(*(void *)v1 + 224LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100616870, v3, 0LL);
}

uint64_t sub_100616870()
{
  uint64_t v1 = v0[28];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  if (v1)
  {
    uint64_t v2 = v0[28];
    uint64_t v3 = sub_1006168F8;
  }

  else
  {
    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    v0[31] = qword_100A2A710;
    uint64_t v3 = sub_100616B00;
    uint64_t v2 = 0LL;
  }

  return swift_task_switch(v3, v2, 0LL);
}

uint64_t sub_1006168F8()
{
  uint64_t v1 = v0[28];
  v0[15] = 0xD000000000000013LL;
  v0[16] = 0x800000010086AD90LL;
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc(v2);
  v0[29] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1006169B0;
  return ((uint64_t (*)(void *, void *, uint64_t, void (*)(), void))v5)( v0 + 15,  &unk_1009B6ED8,  v1,  sub_1003AF0F8,  0LL);
}

uint64_t sub_1006169B0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 232);
  *(void *)(*v1 + 240) = v0;
  swift_task_dealloc(v3);
  swift_release();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = *(void *)(v2 + 224);
    uint64_t v5 = sub_100616AB4;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 168);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v5 = sub_100616A4C;
    uint64_t v4 = v6;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_100616A4C()
{
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  *(void *)(v0 + 248) = qword_100A2A710;
  return swift_task_switch(sub_100616B00, 0LL, 0LL);
}

uint64_t sub_100616AB4()
{
  uint64_t v1 = v0[30];
  uint64_t v2 = v0[21];
  swift_release(v0[28]);
  swift_errorRelease(v1);
  return swift_task_switch(sub_100617764, v2, 0LL);
}

uint64_t sub_100616B00()
{
  uint64_t v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc(v1);
  *(void *)(v0 + 256) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100616B74;
  return unsafeBlocking<A>(_:)(v0 + 136, sub_100015814, *(void *)(v0 + 248), &type metadata for Configuration);
}

uint64_t sub_100616B74()
{
  return swift_task_switch(sub_100616BD0, 0LL, 0LL);
}

uint64_t sub_100616BD0()
{
  uint64_t v1 = v0[21];
  v0[33] = v0[17];
  return swift_task_switch(sub_100616BEC, v1, 0LL);
}

uint64_t sub_100616BEC()
{
  uint64_t v1 = (void *)sub_1006A0E1C(v0[33]);
  swift_bridgeObjectRelease();
  uint64_t v2 = SPServiceStateDisabled;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    swift_bridgeObjectRelease_n(v5, 2LL);
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if ((v9 & 1) == 0) {
      goto LABEL_11;
    }
  }

  uint64_t v10 = *(void *)(v0[21] + OBJC_IVAR____TtC12searchpartyd31OwnDevicePublishActivityService_activity);
  v0[34] = v10;
  if (v10)
  {
    uint64_t v11 = *((unsigned int *)&async function pointer to dispatch thunk of XPCActivity.updateCriteria() + 1);
    swift_retain();
    uint64_t v12 = (void *)swift_task_alloc(v11);
    v0[35] = v12;
    void *v12 = v0;
    v12[1] = sub_100616DA4;
    return v19(v0[22]);
  }

  uint64_t v14 = v0[22];
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0[24] + 56LL))(v14, 1LL, 1LL, v0[23]);
  sub_100015794(v14, &qword_1009A1748);
LABEL_11:
  uint64_t v15 = type metadata accessor for XPCActivity(0LL);
  uint64_t v16 = sub_100007864( &qword_10099CAD0,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity,  (uint64_t)&protocol conformance descriptor for XPCActivity);
  uint64_t v17 = dispatch thunk of Actor.unownedExecutor.getter(v15, v16);
  return swift_task_switch(sub_100616EA4, v17, v18);
}

uint64_t sub_100616DA4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 168LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 280LL));
  swift_release();
  return swift_task_switch(sub_100616E04, v1, 0LL);
}

uint64_t sub_100616E04()
{
  uint64_t v1 = v0[22];
  (*(void (**)(uint64_t, void, uint64_t, void))(v0[24] + 56LL))(v1, 0LL, 1LL, v0[23]);
  sub_100015794(v1, &qword_1009A1748);
  uint64_t v2 = type metadata accessor for XPCActivity(0LL);
  uint64_t v3 = sub_100007864( &qword_10099CAD0,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity,  (uint64_t)&protocol conformance descriptor for XPCActivity);
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v3);
  return swift_task_switch(sub_100616EA4, v4, v5);
}

uint64_t sub_100616EA4()
{
  uint64_t v1 = *(void *)(v0 + 168);
  dispatch thunk of XPCActivity.done()();
  return swift_task_switch(sub_100616EE4, v1, 0LL);
}

uint64_t sub_100616EE4()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 176);
  swift_task_dealloc(*(void *)(v0 + 208));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100616F28()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100616F74()
{
  return type metadata accessor for OwnDevicePublishActivityService(0LL);
}

uint64_t type metadata accessor for OwnDevicePublishActivityService(uint64_t a1)
{
  uint64_t result = qword_1009B7E30;
  if (!qword_1009B7E30) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OwnDevicePublishActivityService);
  }
  return result;
}

void sub_100616FB8(uint64_t a1)
{
  v4[1] = &unk_10080F358;
  sub_10008ED54(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(v2 - 8) + 64LL;
    void v4[3] = &unk_10080F370;
    swift_updateClassMetadata2(a1, 256LL, 4LL, v4, a1 + 80);
  }

uint64_t sub_100617040()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1009B7E44);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100015D58;
  return sub_1006157E4();
}

void sub_100617084(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for AnyKeyPath(0LL);
  uint64_t KeyPath = swift_getKeyPath(&unk_10080F3F0);
  LOBYTE(a_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = static AnyKeyPath.== infix(_:_:)(a2, KeyPath);
  swift_release();
  if ((a2 & 1) != 0)
  {
    if (qword_10099B678 != -1) {
      swift_once(&qword_10099B678, sub_100615754);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = sub_10000A720(v10, (uint64_t)qword_100A2AF40);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "service state changed. Reevaluating xpc activity.", v14, 2u);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    uint64_t v15 = (void *)sub_1006A0E1C(a1);
    uint64_t v16 = SPServiceStateEnabled;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    uint64_t v19 = v18;
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    if (v17 == v21 && v19 == v20)
    {
      swift_bridgeObjectRelease_n(v19, 2LL);
    }

    else
    {
      char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, v21, v20, 0LL);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      if ((v22 & 1) == 0) {
        return;
      }
    }

    uint64_t v23 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v8, 1LL, 1LL, v23);
    int v24 = (void *)swift_allocObject(&unk_10096C5B8, 40LL, 7LL);
    _OWORD v24[2] = 0LL;
    v24[3] = 0LL;
    v24[4] = v3;
    swift_retain();
    sub_1003EDB00((uint64_t)v8, (uint64_t)&unk_1009B7F40, (uint64_t)v24);
    swift_release();
  }

uint64_t sub_1006172C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a4;
  uint64_t v6 = sub_100004AEC(&qword_1009A1748);
  *(void *)(v4 + 24) = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100617328, a4, 0LL);
}

uint64_t sub_100617328()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd31OwnDevicePublishActivityService_activity);
  *(void *)(v0 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v1;
  if (v1)
  {
    uint64_t v2 = *((unsigned int *)&async function pointer to dispatch thunk of XPCActivity.updateCriteria() + 1);
    swift_retain();
    uint64_t v3 = (void *)swift_task_alloc(v2);
    *(void *)(v0 + 40) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100617408;
    return v7(*(void *)(v0 + 24));
  }

  else
  {
    uint64_t v5 = *(void *)(v0 + 24);
    uint64_t v6 = type metadata accessor for XPCActivity.State(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
    sub_100015794(v5, &qword_1009A1748);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100617408()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 40LL));
  swift_release();
  return swift_task_switch(sub_100617468, v1, 0LL);
}

uint64_t sub_100617468()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = type metadata accessor for XPCActivity.State(0LL);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 0LL, 1LL, v2);
  sub_100015794(v1, &qword_1009A1748);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1006174D0(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1006174F0(uint64_t a1)
{
  uint64_t result = sub_100007864( &qword_1009B7F30,  type metadata accessor for OwnDevicePublishActivityService,  (uint64_t)&unk_10080F3C4);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100617534(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1009B7F3C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100015D58;
  return sub_1006172C8(a1, v4, v5, v6);
}

uint64_t sub_1006175A0@<X0>(uint64_t a1@<X8>)
{
  return sub_100615A90(v1, a1);
}

uint64_t sub_1006175A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A0CB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1006175F4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (void *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1009B7F4C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100015D58;
  return sub_100615B24(a1, v4, v5, v6);
}

uint64_t sub_100617660()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100617670(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_1009B7F5C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000159BC;
  return sub_100615D24(a1, a2);
}

uint64_t sub_1006176D8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1006176FC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc(dword_1009B7F6C);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100015D58;
  return sub_100616314(a1, a2, v6);
}

uint64_t sub_10061776C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2AF58);
  sub_10000A720(v0, (uint64_t)qword_100A2AF58);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x72747441656C6966LL,  0xEF6E6F6974756269LL);
}

uint64_t sub_1006177EC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_1009B7F78);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_1009B7F78);
  if (qword_10099B680 != -1) {
    swift_once(&qword_10099B680, sub_10061776C);
  }
  uint64_t v2 = sub_10000A720(v0, (uint64_t)qword_100A2AF58);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_10061787C()
{
  uint64_t v1 = type metadata accessor for URL(0LL);
  v0[17] = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  v0[18] = v2;
  unint64_t v3 = (*(void *)(v2 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v0[19] = swift_task_alloc(v3);
  v0[20] = swift_task_alloc(v3);
  return swift_task_switch(sub_1006178E8, 0LL, 0LL);
}

void sub_1006178E8()
{
  *(void *)(v0 + 120) = _swiftEmptyArrayStorage;
  uint64_t v1 = (uint64_t *)(v0 + 120);
  uint64_t v2 = v1[5];
  type metadata accessor for BeaconStore(0LL);
  sub_1004E6208(v2);
  id v3 = objc_allocWithZone(&OBJC_CLASS___SAPathInfo);
  URL._bridgeToObjectiveC()(v4);
  uint64_t v6 = v5;
  id v7 = [v3 initWithURL:v5];
  v1[6] = (uint64_t)v7;

  id v8 = v7;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v8);
  unint64_t v10 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v9 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v10 >= v9 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1LL);
  }
  uint64_t v11 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v8);
  specialized Array._endMutation()(v11);
  uint64_t v12 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(*v1);
    if (v13) {
      goto LABEL_5;
    }
LABEL_21:
    swift_bridgeObjectRelease();
LABEL_22:
    id v35 = [(id)objc_opt_self(SAPathManager) defaultManager];
    v41[22] = v35;
    sub_10061829C();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    v41[23] = isa;
    swift_bridgeObjectRelease();
    NSString v37 = String._bridgeToObjectiveC()();
    v41[24] = v37;
    v41[2] = v41;
    v41[3] = sub_100617D70;
    uint64_t v38 = swift_continuation_init(v41 + 2, 1LL);
    v41[10] = _NSConcreteStackBlock;
    v41[11] = 0x40000000LL;
    v41[12] = sub_100618050;
    v41[13] = &unk_10096C710;
    v41[14] = v38;
    [v35 registerPaths:isa forBundleID:v37 completionHandler:v41 + 10];
    swift_continuation_await(v41 + 2);
    return;
  }

  if (v12 < 0) {
    uint64_t v34 = *v1;
  }
  else {
    uint64_t v34 = v12 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*v1);
  uint64_t v13 = _CocoaArrayWrapper.endIndex.getter(v34);
  if (!v13) {
    goto LABEL_21;
  }
LABEL_5:
  if (v13 >= 1)
  {
    uint64_t v14 = 0LL;
    uint64_t v40 = v41[18];
    unint64_t v15 = v12 & 0xC000000000000001LL;
    uint64_t v16 = &off_10099B000;
    unint64_t v39 = v12 & 0xC000000000000001LL;
    do
    {
      if (v15) {
        id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v12);
      }
      else {
        id v17 = *(id *)(v12 + 8 * v14 + 32);
      }
      uint64_t v18 = v17;
      if (v16[209] != (_UNKNOWN *)-1LL) {
        swift_once(&qword_10099B688, sub_1006177EC);
      }
      uint64_t v19 = type metadata accessor for Logger(0LL);
      sub_10000A720(v19, (uint64_t)qword_1009B7F78);
      id v20 = v18;
      uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
      os_log_type_t v22 = static os_log_type_t.info.getter(v21);
      if (os_log_type_enabled(v21, v22))
      {
        os_log_type_t type = v22;
        uint64_t v23 = v41[19];
        uint64_t v24 = v41[17];
        uint64_t v42 = swift_slowAlloc(12LL, -1LL);
        uint64_t v44 = swift_slowAlloc(32LL, -1LL);
        uint64_t v45 = v44;
        *(_DWORD *)uint64_t v42 = 136446210;
        id v25 = [v20 url];
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v25);

        uint64_t v26 = sub_100015C48( (unint64_t *)&qword_10099D308,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
        uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter(v24, v26);
        uint64_t v28 = v16;
        uint64_t v29 = v13;
        uint64_t v30 = v12;
        unint64_t v32 = v31;
        (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v23, v24);
        uint64_t v33 = v27;
        unint64_t v15 = v39;
        *(void *)(v42 + 4) = sub_1003F11D4(v33, v32, &v45);
        uint64_t v12 = v30;
        uint64_t v13 = v29;
        uint64_t v16 = v28;
        swift_bridgeObjectRelease();

        _os_log_impl((void *)&_mh_execute_header, v21, type, "Registering path: %{public}s.", (uint8_t *)v42, 0xCu);
        swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v44, -1LL, -1LL);
        swift_slowDealloc(v42, -1LL, -1LL);
      }

      else
      {
      }

      ++v14;
    }

    while (v13 != v14);
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }

  __break(1u);
}

uint64_t sub_100617D70()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 20Hasher.init(_seed:)(v1, 0LL) = v1;
  if (v1) {
    uint64_t v2 = sub_100617E48;
  }
  else {
    uint64_t v2 = sub_100617DD0;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_100617DD0()
{
  uint64_t v2 = *(void **)(v0 + 184);
  uint64_t v1 = *(void **)(v0 + 192);
  id v3 = *(void **)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 144);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  uint64_t v7 = *(void *)(v0 + 152);
  swift_task_dealloc(*(void *)(v0 + 160));
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100617E48(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 192);
  uint64_t v4 = *(void **)(v1 + 176);
  id v3 = *(void **)(v1 + 184);
  swift_willThrow(a1);

  if (qword_10099B688 != -1) {
    swift_once(&qword_10099B688, sub_1006177EC);
  }
  uint64_t v5 = *(void *)(v1 + 200);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10000A720(v6, (uint64_t)qword_1009B7F78);
  swift_errorRetain(v5);
  uint64_t v7 = swift_errorRetain(v5);
  id v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.error.getter(v8);
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = *(void *)(v1 + 200);
  if (v10)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v13 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v12 = 138543362;
    swift_errorRetain(v11);
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError(v11);
    *(void *)(v1 + 128) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v12 + 4, v12 + 12);
    *uint64_t v13 = v14;
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to attribute files: %{public}@.", v12, 0xCu);
    uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v13, 1LL, v15);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  uint64_t v16 = *(void *)(v1 + 160);
  id v17 = *(void **)(v1 + 168);
  uint64_t v18 = *(void *)(v1 + 136);
  uint64_t v19 = *(void *)(v1 + 144);
  swift_errorRelease(*(void *)(v1 + 200));

  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v16, v18);
  uint64_t v20 = *(void *)(v1 + 152);
  swift_task_dealloc(*(void *)(v1 + 160));
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100618050(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!a2) {
    return swift_continuation_throwingResume(*(void *)(a1 + 32));
  }
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  uint64_t v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0LL, 0LL);
  *uint64_t v6 = a2;
  id v7 = a2;
  return swift_continuation_throwingResumeWithError(v2, v5);
}

uint64_t type metadata accessor for FileAttributionService()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd22FileAttributionService);
}

uint64_t sub_1006180E4()
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = *v0;
  uint64_t v2 = sub_100004AEC(&qword_1009A9BF0);
  *(void *)(v1 + 24) = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100618144, v0, 0LL);
}

uint64_t sub_100618144()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
  uint64_t v4 = (void *)swift_allocObject(&unk_10096C6F8, 40LL, 7LL);
  void v4[2] = 0LL;
  void v4[3] = 0LL;
  void v4[4] = v1;
  sub_1003EDB00(v2, (uint64_t)&unk_1009B8058, (uint64_t)v4);
  swift_release();
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006181D0(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100015C48( &qword_1009B8048,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributionService,  (uint64_t)&unk_10080F474);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10061820C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100618230()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1009B8054);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000159BC;
  return sub_10061787C();
}

unint64_t sub_10061829C()
{
  unint64_t result = qword_1009B8060;
  if (!qword_1009B8060)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___SAPathInfo);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1009B8060);
  }

  return result;
}

ValueMetadata *type metadata accessor for NotifyMeResponse()
{
  return &type metadata for NotifyMeResponse;
}

void *sub_1006182E8(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v8);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }

  return a1;
}

uint64_t sub_100618370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1006183CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100618428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100618484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1006184E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006184EC);
}

uint64_t sub_1006184EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unsigned int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 3) {
    return v9 - 2;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100618564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100618570);
}

uint64_t sub_100618570(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  return result;
}

uint64_t type metadata accessor for NotifyMeResponseResult(uint64_t a1)
{
  uint64_t result = qword_1009B80C0;
  if (!qword_1009B80C0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NotifyMeResponseResult);
  }
  return result;
}

uint64_t sub_100618624(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_10080F4F8;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_100618694@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v29 = type metadata accessor for UUID(0LL);
  uint64_t v26 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v27 = (uint64_t *)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v28 = sub_100004AEC(&qword_1009B8120);
  uint64_t v5 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for NotifyMeResponseResult(0LL);
  __chkstk_darwin(v8);
  BOOL v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v11 = a1[4];
  sub_100012ED8(a1, v12);
  unint64_t v13 = sub_10061910C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NotifyMeResponseResult.CodingKeys,  &type metadata for NotifyMeResponseResult.CodingKeys,  v13,  v12,  v11);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v23 = a1;
  uint64_t v24 = v5;
  uint64_t v14 = (uint64_t)v10;
  uint64_t v15 = v26;
  BYTE1(v31) = 0;
  uint64_t v16 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v18 = v27;
  uint64_t v17 = v28;
  uint64_t v19 = v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v27, v29, (char *)&v31 + 1, v28, v29, v16);
  (*(void (**)(uint64_t, void *, uint64_t))(v15 + 32))(v14, v18, v19);
  char v30 = 1;
  unint64_t v20 = sub_100619150();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v31,  &type metadata for NotifyMeResponseResult.StatusCode,  &v30,  v17,  &type metadata for NotifyMeResponseResult.StatusCode,  v20);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v17);
  *(_BYTE *)(v14 + *(int *)(v8 + 20)) = v31;
  sub_100619194(v14, v25);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v23);
  return sub_1006191D8(v14);
}

uint64_t sub_10061891C()
{
  return 0x73746C75736572LL;
}

uint64_t sub_100618934@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x73746C75736572LL && a2 == 0xE700000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xE700000000000000LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73746C75736572LL, 0xE700000000000000LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1006189C8(uint64_t a1)
{
  unint64_t v2 = sub_10061904C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006189F0(uint64_t a1)
{
  unint64_t v2 = sub_10061904C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100618A18@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100618F20(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100618A40(char *a1, char *a2)
{
  return sub_100307A98(*a1, *a2);
}

Swift::Int sub_100618A4C()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  if (v1) {
    uint64_t v2 = 0x6F43737574617473LL;
  }
  else {
    uint64_t v2 = 0x7069726373627573LL;
  }
  if (v1) {
    unint64_t v3 = 0xEA00000000006564LL;
  }
  else {
    unint64_t v3 = 0xEE0064496E6F6974LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100618ADC(uint64_t a1)
{
  if (*v1) {
    uint64_t v2 = 0x6F43737574617473LL;
  }
  else {
    uint64_t v2 = 0x7069726373627573LL;
  }
  if (*v1) {
    unint64_t v3 = 0xEA00000000006564LL;
  }
  else {
    unint64_t v3 = 0xEE0064496E6F6974LL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100618B48(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2) {
    uint64_t v3 = 0x6F43737574617473LL;
  }
  else {
    uint64_t v3 = 0x7069726373627573LL;
  }
  if (v2) {
    unint64_t v4 = 0xEA00000000006564LL;
  }
  else {
    unint64_t v4 = 0xEE0064496E6F6974LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100618BD4@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v3._countAndFlagsBits = *a1;
  unint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100936610, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void sub_100618C30(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x7069726373627573LL;
  if (*v1) {
    uint64_t v2 = 0x6F43737574617473LL;
  }
  unint64_t v3 = 0xEE0064496E6F6974LL;
  if (*v1) {
    unint64_t v3 = 0xEA00000000006564LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100618C80()
{
  if (*v0) {
    return 0x6F43737574617473LL;
  }
  else {
    return 0x7069726373627573LL;
  }
}

uint64_t sub_100618CCC@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100936610, v3);
  uint64_t result = swift_bridgeObjectRelease(object);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_100618D2C(uint64_t a1)
{
  unint64_t v2 = sub_10061910C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100618D54(uint64_t a1)
{
  unint64_t v2 = sub_10061910C();
  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_100618D7C(char *a1, char *a2)
{
  return qword_10080F890[*a1] == qword_10080F890[*a2];
}

Swift::Int sub_100618DA0()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(qword_10080F890[v1]);
  return Hasher._finalize()();
}

void sub_100618DEC()
{
}

Swift::Int sub_100618E20(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(qword_10080F890[v2]);
  return Hasher._finalize()();
}

uint64_t *sub_100618E68@<X0>(uint64_t *result@<X0>, char *a2@<X8>)
{
  uint64_t v2 = *result;
  if (*result == 200) {
    char v3 = 0;
  }
  else {
    char v3 = 3;
  }
  if (v2 == 204) {
    char v4 = 1;
  }
  else {
    char v4 = v3;
  }
  if (v2 == 500) {
    char v5 = 2;
  }
  else {
    char v5 = v4;
  }
  *a2 = v5;
  return result;
}

void sub_100618E98(void *a1@<X8>)
{
  *a1 = qword_10080F890[*v1];
}

uint64_t sub_100618EB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100619640();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100618F0C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100618694(a1, a2);
}

void *sub_100618F20(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009B80F8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = sub_100012ED8(a1, v7);
  unint64_t v10 = sub_10061904C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NotifyMeResponse.CodingKeys,  &type metadata for NotifyMeResponse.CodingKeys,  v10,  v7,  v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    uint64_t v11 = sub_100004AEC(&qword_1009B8108);
    unint64_t v12 = sub_100619090();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v11, v13, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v9 = v16;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  return v9;
}

unint64_t sub_10061904C()
{
  unint64_t result = qword_1009B8100;
  if (!qword_1009B8100)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080F838, &type metadata for NotifyMeResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8100);
  }

  return result;
}

unint64_t sub_100619090()
{
  unint64_t result = qword_1009B8110;
  if (!qword_1009B8110)
  {
    uint64_t v1 = sub_100004B78(&qword_1009B8108);
    sub_100007864(&qword_1009B8118, type metadata accessor for NotifyMeResponseResult, (uint64_t)&unk_10080F510);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009B8110);
  }

  return result;
}

unint64_t sub_10061910C()
{
  unint64_t result = qword_1009B8128;
  if (!qword_1009B8128)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080F7E8, &type metadata for NotifyMeResponseResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8128);
  }

  return result;
}

unint64_t sub_100619150()
{
  unint64_t result = qword_1009B8130;
  if (!qword_1009B8130)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080F7C0, &type metadata for NotifyMeResponseResult.StatusCode);
    atomic_store(result, (unint64_t *)&qword_1009B8130);
  }

  return result;
}

uint64_t sub_100619194(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NotifyMeResponseResult(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1006191D8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NotifyMeResponseResult(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for NotifyMeResponseResult.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100619260 + 4 * byte_10080F4A5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100619294 + 4 * byte_10080F4A0[v4]))();
}

uint64_t sub_100619294(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10061929C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1006192A4LL);
  }
  return result;
}

uint64_t sub_1006192B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1006192B8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1006192BC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006192C4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NotifyMeResponseResult.CodingKeys()
{
  return &type metadata for NotifyMeResponseResult.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for NotifyMeResponse.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100619320 + 4 * byte_10080F4AA[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100619340 + 4 * byte_10080F4AF[v4]))();
  }
}

_BYTE *sub_100619320(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100619340(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100619348(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100619350(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100619358(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100619360(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NotifyMeResponse.CodingKeys()
{
  return &type metadata for NotifyMeResponse.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for NotifyMeResponseResult.StatusCode( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1006193C8 + 4 * byte_10080F4B9[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1006193FC + 4 * byte_10080F4B4[v4]))();
}

uint64_t sub_1006193FC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100619404(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10061940CLL);
  }
  return result;
}

uint64_t sub_100619418(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100619420LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100619424(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10061942C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NotifyMeResponseResult.StatusCode()
{
  return &type metadata for NotifyMeResponseResult.StatusCode;
}

unint64_t sub_10061944C()
{
  unint64_t result = qword_1009B8138;
  if (!qword_1009B8138)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080F5F0, &type metadata for NotifyMeResponseResult.StatusCode);
    atomic_store(result, (unint64_t *)&qword_1009B8138);
  }

  return result;
}

unint64_t sub_100619494()
{
  unint64_t result = qword_1009B8140;
  if (!qword_1009B8140)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080F6A8, &type metadata for NotifyMeResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8140);
  }

  return result;
}

unint64_t sub_1006194DC()
{
  unint64_t result = qword_1009B8148;
  if (!qword_1009B8148)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080F798, &type metadata for NotifyMeResponseResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8148);
  }

  return result;
}

unint64_t sub_100619524()
{
  unint64_t result = qword_1009B8150;
  if (!qword_1009B8150)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080F6D0, &type metadata for NotifyMeResponseResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8150);
  }

  return result;
}

unint64_t sub_10061956C()
{
  unint64_t result = qword_1009B8158;
  if (!qword_1009B8158)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080F6F8, &type metadata for NotifyMeResponseResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8158);
  }

  return result;
}

unint64_t sub_1006195B4()
{
  unint64_t result = qword_1009B8160;
  if (!qword_1009B8160)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080F618, &type metadata for NotifyMeResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8160);
  }

  return result;
}

unint64_t sub_1006195FC()
{
  unint64_t result = qword_1009B8168;
  if (!qword_1009B8168)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080F640, &type metadata for NotifyMeResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8168);
  }

  return result;
}

unint64_t sub_100619640()
{
  unint64_t result = qword_1009B8170;
  if (!qword_1009B8170)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080F578, &type metadata for NotifyMeResponseResult.StatusCode);
    atomic_store(result, (unint64_t *)&qword_1009B8170);
  }

  return result;
}

void sub_100619684(void *a1@<X0>, void *a2@<X8>)
{
  double v111 = a2;
  uint64_t v3 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v4 = __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v104 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v104 - v7;
  uint64_t v115 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v115 - 8);
  uint64_t v10 = __chkstk_darwin(v115);
  unint64_t v12 = (char *)&v104 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v104 - v14;
  __chkstk_darwin(v13);
  double v113 = (char *)&v104 - v16;
  id v116 = [a1 encryptedValues];
  uint64_t v17 = CKRecord.recordType.getter(v116);
  if (v17 == 0x61636F4C65666153LL && v18 == 0xEC0000006E6F6974LL)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, 0x61636F4C65666153LL, 0xEC0000006E6F6974LL, 0LL);
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
      unint64_t v59 = sub_10061CA1C();
      uint64_t v29 = swift_allocError(&type metadata for SafeLocation.SafeLocationConversionError, v59, 0LL, 0LL);
      _BYTE *v60 = 0;
      goto LABEL_21;
    }
  }

  id v20 = [a1 recordID];
  id v21 = [v20 recordName];

  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  uint64_t v114 = v9;
  uint64_t v24 = v23;

  UUID.init(uuidString:)(v22, v24);
  uint64_t v25 = v114;
  swift_bridgeObjectRelease();
  uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  uint64_t v27 = v115;
  if (v26(v8, 1LL, v115) == 1)
  {
    sub_1001BC5AC((uint64_t)v8);
    unint64_t v28 = sub_10061CA1C();
    uint64_t v29 = swift_allocError(&type metadata for SafeLocation.SafeLocationConversionError, v28, 0LL, 0LL);
    *char v30 = 1;
LABEL_21:
    swift_willThrow(v29);
    swift_unknownObjectRelease(v116);

    return;
  }

  double v110 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
  v110(v113, v8, v27);
  NSString v31 = String._bridgeToObjectiveC()();
  id v32 = [v116 objectForKeyedSubscript:v31];

  if (!v32
    || (v117[0] = v32,
        uint64_t v34 = sub_100004AEC((uint64_t *)&unk_10099D910),
        uint64_t v35 = sub_100004AEC(&qword_1009AED50),
        uint64_t v33 = swift_dynamicCast(&v118, v117, v34, v35, 6LL),
        (v33 & 1) == 0))
  {
    uint64_t v51 = static os_log_type_t.error.getter(v33);
    uint64_t v52 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v53 = swift_allocObject(v52, 112LL, 7LL);
    *(_OWORD *)(v53 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    *(void *)(v53 + 56) = &type metadata for String;
    *(void *)(v53 + 64) = sub_1000226F4();
    *(void *)(v53 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD000000000000011LL;
    *(void *)(v53 + 40) = 0x8000000100866FE0LL;
    *(void *)(v53 + 96) = sub_100022898(0LL, (unint64_t *)&qword_10099D920, &OBJC_CLASS___CKRecord_ptr);
    *(void *)(v53 + 104) = sub_100022738();
    *(void *)(v53 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = a1;
    sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
    id v54 = a1;
    __int128 v55 = (void *)static OS_os_log.default.getter(v54);
    os_log(_:dso:log:_:_:)(v51, &_mh_execute_header, v55, "Failed to decode value for key: %@ from %@", 42LL, 2LL, v53);
    swift_bridgeObjectRelease();

    unint64_t v56 = sub_10061CA1C();
    uint64_t v57 = swift_allocError(&type metadata for SafeLocation.SafeLocationConversionError, v56, 0LL, 0LL);
    _BYTE *v58 = 2;
    swift_willThrow(v57);
    swift_unknownObjectRelease(v116);

    goto LABEL_27;
  }

  uint64_t v36 = v118;
  NSString v37 = String._bridgeToObjectiveC()();
  uint64_t v38 = [v116 objectForKeyedSubscript:v37];

  if (!v38 || (double v109 = v36, v118 = v38, (swift_dynamicCast(v117, &v118, v34, &type metadata for String, 6LL) & 1) == 0))
  {
    uint64_t v61 = swift_bridgeObjectRelease();
    uint64_t v62 = static os_log_type_t.error.getter(v61);
    uint64_t v63 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v64 = swift_allocObject(v63, 112LL, 7LL);
    *(_OWORD *)(v64 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    *(void *)(v64 + 56) = &type metadata for String;
    *(void *)(v64 + 64) = sub_1000226F4();
    unint64_t v65 = 0xE400000000000000LL;
    *(void *)(v64 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 1701667182LL;
LABEL_26:
    *(void *)(v64 + 40) = v65;
    *(void *)(v64 + 96) = sub_100022898(0LL, (unint64_t *)&qword_10099D920, &OBJC_CLASS___CKRecord_ptr);
    *(void *)(v64 + 104) = sub_100022738();
    *(void *)(v64 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = a1;
    sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
    id v72 = a1;
    unint64_t v73 = (void *)static OS_os_log.default.getter(v72);
    os_log(_:dso:log:_:_:)(v62, &_mh_execute_header, v73, "Failed to decode value for key: %@ from %@", 42LL, 2LL, v64);
    swift_bridgeObjectRelease();

    unint64_t v74 = sub_10061CA1C();
    uint64_t v75 = swift_allocError(&type metadata for SafeLocation.SafeLocationConversionError, v74, 0LL, 0LL);
    *uint64_t v76 = 2;
    swift_willThrow(v75);
    swift_unknownObjectRelease(v116);

    goto LABEL_27;
  }

  uint64_t v39 = v117[1];
  uint64_t v107 = v117[0];
  NSString v40 = String._bridgeToObjectiveC()();
  id v41 = [v116 objectForKeyedSubscript:v40];

  if (!v41
    || (uint64_t v108 = v39, v117[0] = v41, (swift_dynamicCast(&v118, v117, v34, &type metadata for Double, 6LL) & 1) == 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v66 = swift_bridgeObjectRelease();
    uint64_t v62 = static os_log_type_t.error.getter(v66);
    uint64_t v67 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v64 = swift_allocObject(v67, 112LL, 7LL);
    *(_OWORD *)(v64 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    *(void *)(v64 + 56) = &type metadata for String;
    *(void *)(v64 + 64) = sub_1000226F4();
    unint64_t v65 = 0xE800000000000000LL;
    *(void *)(v64 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0x656475746974616CLL;
    goto LABEL_26;
  }

  id v42 = v118;
  NSString v43 = String._bridgeToObjectiveC()();
  id v44 = [v116 objectForKeyedSubscript:v43];

  if (!v44 || (v117[0] = v44, (swift_dynamicCast(&v118, v117, v34, &type metadata for Double, 6LL) & 1) == 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v68 = swift_bridgeObjectRelease();
    uint64_t v62 = static os_log_type_t.error.getter(v68);
    uint64_t v69 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v64 = swift_allocObject(v69, 112LL, 7LL);
    *(_OWORD *)(v64 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    *(void *)(v64 + 56) = &type metadata for String;
    *(void *)(v64 + 64) = sub_1000226F4();
    *(void *)(v64 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0x64757469676E6F6CLL;
    unint64_t v65 = 0xE900000000000065LL;
    goto LABEL_26;
  }

  id v45 = v118;
  NSString v46 = String._bridgeToObjectiveC()();
  id v47 = [v116 objectForKeyedSubscript:v46];

  if (!v47 || (v117[0] = v47, (swift_dynamicCast(&v118, v117, v34, &type metadata for Double, 6LL) & 1) == 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v70 = swift_bridgeObjectRelease();
    uint64_t v62 = static os_log_type_t.error.getter(v70);
    uint64_t v71 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v64 = swift_allocObject(v71, 112LL, 7LL);
    *(_OWORD *)(v64 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    *(void *)(v64 + 56) = &type metadata for String;
    *(void *)(v64 + 64) = sub_1000226F4();
    unint64_t v65 = 0xE600000000000000LL;
    *(void *)(v64 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0x737569646172LL;
    goto LABEL_26;
  }

  id v48 = v118;
  uint64_t v49 = v112;
  sub_10061ADC8(6, a1);
  if (v49)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease(v116);
LABEL_27:
    (*(void (**)(char *, uint64_t))(v114 + 8))(v113, v115);
    return;
  }

  char v77 = v50;
  uint64_t v78 = (int *)type metadata accessor for SafeLocation(0LL);
  *((_BYTE *)v111 + v78[12]) = v77;
  sub_10061B1A0(5, a1);
  *((_BYTE *)v111 + v78[11]) = v79;
  sub_10061B578(0, a1);
  uint64_t v80 = v78;
  uint64_t v81 = v78[6];
  uint64_t v82 = v111;
  *((_BYTE *)v111 + v81) = v83;
  double v112 = objc_autoreleasePoolPush();
  id v84 = [objc_allocWithZone(NSKeyedArchiver) initRequiringSecureCoding:1];
  [a1 encodeSystemFieldsWithCoder:v84];
  [v84 finishEncoding];
  id v85 = [v84 encodedData];
  uint64_t v105 = v80;
  id v86 = v85;
  uint64_t v106 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v85);
  uint64_t v104 = v87;

  objc_autoreleasePoolPop(v112);
  uint64_t v88 = v104;
  *uint64_t v82 = v106;
  v82[1] = v88;
  (*(void (**)(char *, char *, uint64_t))(v114 + 16))((char *)v82 + v105[5], v113, v115);
  if (v109[2])
  {
    uint64_t v89 = v109[2];
    uint64_t v90 = (void *)(swift_bridgeObjectRetain(v109) + 40);
    double v112 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v91 = *(v90 - 1);
      uint64_t v92 = *v90;
      swift_bridgeObjectRetain(*v90);
      UUID.init(uuidString:)(v91, v92);
      swift_bridgeObjectRelease();
      uint64_t v93 = v115;
      if (v26(v6, 1LL, v115) == 1)
      {
        sub_1001BC5AC((uint64_t)v6);
      }

      else
      {
        uint64_t v106 = v89;
        uint64_t v94 = v110;
        v110(v15, v6, v93);
        v94(v12, v15, v93);
        uint64_t v95 = v112;
        if ((swift_isUniquelyReferenced_nonNull_native(v112) & 1) == 0) {
          uint64_t v95 = (void *)sub_1004C44BC(0, v95[2] + 1LL, 1, (unint64_t)v95);
        }
        unint64_t v97 = v95[2];
        unint64_t v96 = v95[3];
        uint64_t v98 = (void *)(v97 + 1);
        if (v97 >= v96 >> 1)
        {
          double v112 = (void *)(v97 + 1);
          uint64_t v100 = sub_1004C44BC(v96 > 1, v97 + 1, 1, (unint64_t)v95);
          uint64_t v98 = v112;
          uint64_t v95 = (void *)v100;
        }

        v95[2] = v98;
        unint64_t v99 = (*(unsigned __int8 *)(v114 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v114 + 80);
        double v112 = v95;
        v110((char *)v95 + v99 + *(void *)(v114 + 72) * v97, v12, v115);
        uint64_t v89 = v106;
      }

      v90 += 2;
      --v89;
    }

    while (v89);
    swift_unknownObjectRelease(v116);

    swift_bridgeObjectRelease();
  }

  else
  {
    swift_unknownObjectRelease(v116);

    double v112 = _swiftEmptyArrayStorage;
  }

  (*(void (**)(char *, uint64_t))(v114 + 8))(v113, v115);
  swift_bridgeObjectRelease();
  uint64_t v101 = v105;
  double v102 = v111;
  *(void *)((char *)v111 + v105[13]) = v112;
  unint64_t v103 = (void *)((char *)v102 + v101[7]);
  *unint64_t v103 = v107;
  v103[1] = v108;
  *(void *)((char *)v102 + v101[8]) = v42;
  *(void *)((char *)v102 + v101[9]) = v45;
  *(void *)((char *)v102 + v101[10]) = v48;
}

uint64_t sub_10061A2A4@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v8 = [a1 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v8);

  char v9 = 1;
  switch((unint64_t)[a1 type])
  {
    case 0uLL:
      break;
    case 1uLL:
      char v9 = 2;
      break;
    case 2uLL:
      char v9 = 3;
      break;
    case 3uLL:
      char v9 = 4;
      break;
    case 4uLL:
      char v9 = 5;
      break;
    default:
      char v9 = 0;
      break;
  }

  id v10 = [a1 name];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    unint64_t v36 = v13;
    uint64_t v37 = v12;
  }

  else
  {
    unint64_t v36 = 0xE000000000000000LL;
    uint64_t v37 = 0LL;
  }

  id v14 = objc_msgSend(a1, "location", v36, v37);
  [v14 coordinate];
  uint64_t v16 = v15;

  id v17 = [a1 location];
  [v17 coordinate];
  uint64_t v19 = v18;

  id v20 = [a1 location];
  [v20 horizontalAccuracy];
  uint64_t v22 = v21;

  id v23 = [a1 location];
  unsigned int v24 = [v23 referenceFrame];

  id v25 = [a1 approvalState];
  else {
    char v26 = (char)v25;
  }
  if (v24 == 1) {
    char v27 = 1;
  }
  else {
    char v27 = 2 * (v24 == 2);
  }
  id v28 = [a1 associatedBeacons];
  uint64_t v29 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v30 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v28, v4, v29);

  NSString v31 = sub_1002FE60C(v30);
  swift_bridgeObjectRelease();
  *(_OWORD *)a2 = xmmword_1007E4480;
  id v32 = (int *)type metadata accessor for SafeLocation(0LL);
  uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 32))(&a2[v32[5]], v7, v4);
  a2[v32[6]] = v9;
  uint64_t v34 = (uint64_t *)&a2[v32[7]];
  unint64_t v35 = v36;
  *uint64_t v34 = v37;
  v34[1] = v35;
  *(void *)&a2[v32[8]] = v16;
  *(void *)&a2[v32[9]] = v19;
  *(void *)&a2[v32[10]] = v22;
  a2[v32[11]] = v27;
  a2[v32[12]] = v26;
  *(void *)&a2[v32[13]] = v31;
  return result;
}

uint64_t sub_10061A5C8@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, int a6@<W5>, char *a7@<X8>)
{
  int v29 = a6;
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  [a2 coordinate];
  uint64_t v18 = v17;
  [a2 coordinate];
  uint64_t v20 = v19;
  [a2 horizontalAccuracy];
  uint64_t v22 = v21;
  unsigned int v23 = [a2 referenceFrame];

  if (v23 == 1) {
    char v24 = 1;
  }
  else {
    char v24 = 2 * (v23 == 2);
  }
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, v13);
  *(_OWORD *)a7 = xmmword_1007E4480;
  id v25 = (int *)type metadata accessor for SafeLocation(0LL);
  uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(&a7[v25[5]], v16, v13);
  a7[v25[6]] = a5;
  char v27 = &a7[v25[7]];
  *(void *)char v27 = a3;
  *((void *)v27 + 1) = a4;
  *(void *)&a7[v25[8]] = v18;
  *(void *)&a7[v25[9]] = v20;
  *(void *)&a7[v25[10]] = v22;
  a7[v25[11]] = v24;
  a7[v25[12]] = v29;
  *(void *)&a7[v25[13]] = _swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_10061A774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10061E510();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10061A7D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10061E510();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10061A81C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10061E488();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10061A878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10061E488();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_10061A8C4(void *a1@<X8>)
{
  *a1 = &off_100936F80;
}

uint64_t sub_10061A8D4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  unint64_t v5 = v2[1];
  sub_10001736C(v4, v5);
  Data.hash(into:)(a1, v4, v5);
  sub_100016F9C(v4, v5);
  unint64_t v6 = (int *)type metadata accessor for SafeLocation(0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v7, v8);
  Hasher._combine(_:)(*((unsigned __int8 *)v2 + v6[6]));
  char v9 = (uint64_t *)((char *)v2 + v6[7]);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  swift_bridgeObjectRetain(v11);
  String.hash(into:)(a1, v10, v11);
  swift_bridgeObjectRelease();
  else {
    Swift::UInt64 v12 = 0LL;
  }
  Hasher._combine(_:)(v12);
  else {
    Swift::UInt64 v13 = 0LL;
  }
  Hasher._combine(_:)(v13);
  else {
    Swift::UInt64 v14 = 0LL;
  }
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(*((unsigned __int8 *)v2 + v6[11]));
  Hasher._combine(_:)(*((unsigned __int8 *)v2 + v6[12]));
  uint64_t v15 = *(uint64_t *)((char *)v2 + v6[13]);
  swift_bridgeObjectRetain(v15);
  sub_1005BEC34(a1, v15);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10061AA34(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10061AA6C + 4 * byte_10080F8B0[a1]))( 0xD000000000000010LL,  0x800000010084DE70LL);
}

uint64_t sub_10061AA6C()
{
  return 0x696669746E656469LL;
}

uint64_t sub_10061AA88()
{
  return 1701869940LL;
}

uint64_t sub_10061AA98()
{
  return 1701667182LL;
}

uint64_t sub_10061AAA8()
{
  return 0x656475746974616CLL;
}

uint64_t sub_10061AAC0()
{
  return 0x64757469676E6F6CLL;
}

uint64_t sub_10061AADC()
{
  return 0x737569646172LL;
}

uint64_t sub_10061AAF0()
{
  return 0x636E657265666572LL;
}

uint64_t sub_10061AB14()
{
  return 0x6C61766F72707061LL;
}

uint64_t sub_10061AB38(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_10061AB50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10061E4CC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10061ABAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10061E4CC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10061ABF8()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000A8AC(v2, qword_100A2AF70);
  sub_10000A720(v0, (uint64_t)qword_100A2AF70);
  type metadata accessor for BeaconStore(0LL);
  sub_1004E6208((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0x61636F4C65666153LL, 0xED0000736E6F6974LL, 1LL);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_10061ACD0()
{
  return sub_10061AA34(*v0);
}

uint64_t sub_10061ACD8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10061E048(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10061ACFC(uint64_t a1)
{
  unint64_t v2 = sub_10061CDC4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10061AD24(uint64_t a1)
{
  unint64_t v2 = sub_10061CDC4();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_10061AD4C()
{
  return Hasher._finalize()();
}

Swift::Int sub_10061AD8C(uint64_t a1)
{
  return Hasher._finalize()();
}

void sub_10061ADC8(char a1, id a2)
{
  id v3 = [a2 encryptedValues];
  __asm { BR              X10 }

uint64_t sub_10061AE40()
{
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v1 objectForKeyedSubscript:v2];
  swift_unknownObjectRelease(v1);

  id v8 = v3;
  uint64_t v4 = sub_100004AEC(&qword_1009B81B0);
  uint64_t result = swift_dynamicCast(&v7, &v8, v4, &type metadata for Int, 6LL);
  if (!(_DWORD)result || (uint64_t result = v7, v7 >= 4))
  {
    static os_log_type_t.error.getter(result);
    uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D740);
    *(_OWORD *)(swift_allocObject(v6, 112LL, 7LL) + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    __asm { BR              X10 }
  }

  return result;
}

void sub_10061B1A0(char a1, id a2)
{
  id v3 = [a2 encryptedValues];
  __asm { BR              X10 }

uint64_t sub_10061B218()
{
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v1 objectForKeyedSubscript:v2];
  swift_unknownObjectRelease(v1);

  id v8 = v3;
  uint64_t v4 = sub_100004AEC(&qword_1009B81B0);
  uint64_t result = swift_dynamicCast(&v7, &v8, v4, &type metadata for Int, 6LL);
  if (!(_DWORD)result || (uint64_t result = v7, v7 >= 3))
  {
    static os_log_type_t.error.getter(result);
    uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D740);
    *(_OWORD *)(swift_allocObject(v6, 112LL, 7LL) + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    __asm { BR              X10 }
  }

  return result;
}

void sub_10061B578(char a1, id a2)
{
  id v3 = [a2 encryptedValues];
  __asm { BR              X10 }

uint64_t sub_10061B5F0()
{
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v1 objectForKeyedSubscript:v2];
  swift_unknownObjectRelease(v1);

  id v8 = v3;
  uint64_t v4 = sub_100004AEC(&qword_1009B81B0);
  uint64_t result = swift_dynamicCast(&v7, &v8, v4, &type metadata for Int, 6LL);
  if (!(_DWORD)result || (uint64_t result = v7, v7 >= 6))
  {
    static os_log_type_t.error.getter(result);
    uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D740);
    *(_OWORD *)(swift_allocObject(v6, 112LL, 7LL) + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    __asm { BR              X10 }
  }

  return result;
}

void sub_10061B950(id *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v49 = v4;
  uint64_t v50 = v5;
  __chkstk_darwin(v4);
  id v47 = a1;
  id v48 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v7 = [*a1 encryptedValues];
  uint64_t ObjectType = swift_getObjectType(v7);
  CKRecordKeyValueSetting.subscript.getter( &v52,  1701667182LL,  0xE400000000000000LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  double v10 = v52;
  uint64_t v9 = v53;
  uint64_t v11 = (int *)type metadata accessor for SafeLocation(0LL);
  Swift::UInt64 v12 = (void *)(v2 + v11[7]);
  double v13 = *(double *)v12;
  uint64_t v14 = v12[1];
  if (!v9) {
    goto LABEL_7;
  }
  if (*(void *)&v10 == *(void *)&v13 && v9 == v14)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }

  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)&v10, v9, *v12, v12[1], 0LL);
  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0)
  {
LABEL_7:
    id v54 = &type metadata for String;
    __int128 v55 = &protocol witness table for String;
    double v52 = v13;
    uint64_t v53 = v14;
    swift_bridgeObjectRetain(v14);
    CKRecordKeyValueSetting.subscript.setter(&v52, 1701667182LL, 0xE400000000000000LL, ObjectType);
  }

uint64_t sub_10061C068(void *a1)
{
  id v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B81F0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_10061CDC4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SafeLocation.CodingKeys,  &type metadata for SafeLocation.CodingKeys,  v11,  v9,  v10);
  __int128 v31 = *v3;
  char v30 = 0;
  unint64_t v12 = sub_1000170A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
  if (!v2)
  {
    double v13 = (int *)type metadata accessor for SafeLocation(0LL);
    uint64_t v14 = (char *)v3 + v13[5];
    LOBYTE(v31) = 1;
    uint64_t v15 = type metadata accessor for UUID(0LL);
    uint64_t v16 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v31, v5, v15, v16);
    LOBYTE(v31) = *((_BYTE *)v3 + v13[6]);
    char v30 = 2;
    unint64_t v17 = sub_10061CF54();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for SafeLocationType, v17);
    double v18 = (uint64_t *)((char *)v3 + v13[7]);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    LOBYTE(v31) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v31, v5);
    double v21 = *(double *)((char *)v3 + v13[8]);
    LOBYTE(v31) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(&v31, v5, v21);
    double v22 = *(double *)((char *)v3 + v13[9]);
    LOBYTE(v31) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(&v31, v5, v22);
    double v23 = *(double *)((char *)v3 + v13[10]);
    LOBYTE(v31) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(&v31, v5, v23);
    LOBYTE(v31) = *((_BYTE *)v3 + v13[11]);
    char v30 = 7;
    unint64_t v24 = sub_10061CF98();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for SafeLocationReferenceFrame, v24);
    LOBYTE(v31) = *((_BYTE *)v3 + v13[12]);
    char v30 = 8;
    unint64_t v25 = sub_10061CFDC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for SafeLocationApprovalState, v25);
    *(void *)&__int128 v31 = *(void *)((char *)v3 + v13[13]);
    char v30 = 9;
    uint64_t v26 = sub_100004AEC((uint64_t *)&unk_1009B81E0);
    uint64_t v27 = sub_10061D020( (unint64_t *)&qword_1009B8210,  (unint64_t *)&unk_10099D710,  (uint64_t)&protocol conformance descriptor for UUID,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, v26, v27);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10061C3C8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v35 = *(void *)(v5 - 8);
  uint64_t v36 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v34 = sub_100004AEC(&qword_1009B81B8);
  uint64_t v8 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = type metadata accessor for SafeLocation(0LL);
  __chkstk_darwin(v38);
  unint64_t v37 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100012ED8(a1, v12);
  unint64_t v14 = sub_10061CDC4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SafeLocation.CodingKeys,  &type metadata for SafeLocation.CodingKeys,  v14,  v12,  v13);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v32 = a2;
  uint64_t v33 = v8;
  char v40 = 0;
  unint64_t v15 = sub_100016FE0();
  uint64_t v16 = v34;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v39, &type metadata for Data, &v40, v34, &type metadata for Data, v15);
  unint64_t v17 = v37;
  *(_OWORD *)unint64_t v37 = v39;
  LOBYTE(v39) = 1;
  uint64_t v18 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v19 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v7, v36, &v39, v16, v36, v18);
  uint64_t v20 = (int *)v38;
  (*(void (**)(char *, void *, uint64_t))(v35 + 32))(&v17[*(int *)(v38 + 20)], v7, v19);
  char v40 = 2;
  unint64_t v21 = sub_10061CE08();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v39,  &type metadata for SafeLocationType,  &v40,  v16,  &type metadata for SafeLocationType,  v21);
  v17[v20[6]] = v39;
  LOBYTE(v39) = 3;
  uint64_t v22 = KeyedDecodingContainer.decode(_:forKey:)(&v39, v16);
  double v23 = (uint64_t *)&v17[v20[7]];
  *double v23 = v22;
  v23[1] = v24;
  LOBYTE(v39) = 4;
  *(double *)&v17[v20[8]] = KeyedDecodingContainer.decode(_:forKey:)(&v39, v16);
  LOBYTE(v39) = 5;
  *(double *)&v17[v20[9]] = KeyedDecodingContainer.decode(_:forKey:)(&v39, v16);
  LOBYTE(v39) = 6;
  *(double *)&v17[v20[10]] = KeyedDecodingContainer.decode(_:forKey:)(&v39, v16);
  char v40 = 7;
  unint64_t v25 = sub_10061CE4C();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v39,  &type metadata for SafeLocationReferenceFrame,  &v40,  v16,  &type metadata for SafeLocationReferenceFrame,  v25);
  v17[v20[11]] = v39;
  char v40 = 8;
  unint64_t v26 = sub_10061CE90();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v39,  &type metadata for SafeLocationApprovalState,  &v40,  v16,  &type metadata for SafeLocationApprovalState,  v26);
  v17[v20[12]] = v39;
  uint64_t v27 = sub_100004AEC((uint64_t *)&unk_1009B81E0);
  char v40 = 9;
  uint64_t v28 = sub_10061D020( (unint64_t *)&qword_1009BF900,  (unint64_t *)&qword_10099D6F0,  (uint64_t)&protocol conformance descriptor for UUID,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v39, v27, &v40, v16, v27, v28);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v34);
  uint64_t v29 = (uint64_t)v37;
  *(void *)&v37[*(int *)(v38 + 52)] = v39;
  sub_10061CED4(v29, v32);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return sub_10061CF18(v29);
}

uint64_t sub_10061C920@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10061C3C8(a1, a2);
}

uint64_t sub_10061C934(void *a1)
{
  return sub_10061C068(a1);
}

uint64_t sub_10061C948(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100007864( (unint64_t *)&unk_1009B8180,  type metadata accessor for SafeLocation,  (uint64_t)&unk_10080F914);
  uint64_t result = sub_100007864(&qword_1009B27C0, type metadata accessor for SafeLocation, (uint64_t)&unk_10080F8EC);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

uint64_t type metadata accessor for SafeLocation(uint64_t a1)
{
  uint64_t result = qword_1009B8278;
  if (!qword_1009B8278) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SafeLocation);
  }
  return result;
}

uint64_t sub_10061C9E0(uint64_t a1)
{
  uint64_t result = sub_100007864( (unint64_t *)&unk_1009B8190,  type metadata accessor for SafeLocation,  (uint64_t)&unk_10080F93C);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10061CA1C()
{
  unint64_t result = qword_1009B81A0;
  if (!qword_1009B81A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080FF68, &type metadata for SafeLocation.SafeLocationConversionError);
    atomic_store(result, (unint64_t *)&qword_1009B81A0);
  }

  return result;
}

double sub_10061CA60(void *a1)
{
  uint64_t v2 = v1;
  [v1 center];
  double v5 = v4;
  [v1 center];
  id v7 = [objc_allocWithZone(CLLocation) initWithLatitude:v5 longitude:v6];
  objc_msgSend(v7, "setReferenceFrame:", objc_msgSend(v2, "geoReferenceFrame"));
  [a1 center];
  double v9 = v8;
  [a1 center];
  id v11 = [objc_allocWithZone(CLLocation) initWithLatitude:v9 longitude:v10];
  objc_msgSend(v11, "setReferenceFrame:", objc_msgSend(a1, "geoReferenceFrame"));
  [v7 distanceFromLocation:v11];
  double v13 = v12;

  return v13;
}

void sub_10061CB88(void *a1)
{
  double v3 = sub_10061CA60(a1);
  [v1 radius];
  double v5 = v4;
  [a1 radius];
  double v7 = v6;
  if (v5 + v6 >= v3)
  {
    double v8 = v5 * v5;
    double v9 = v6 * v6;
    if (v3 > vabdd_f64(v6, v5))
    {
      double v10 = acos((v3 * v3 + v8 - v9) / (v3 * (v5 + v5)));
      double v11 = v10 + v10;
      double v12 = acos((v3 * v3 + v9 - v8) / (v3 * (v7 + v7)));
      sin(v12 + v12);
      sin(v11);
    }
  }

uint64_t sub_10061CCA4(uint64_t *a1, uint64_t a2)
{
  if ((v4 & 1) != 0
    && (double v5 = (int *)type metadata accessor for SafeLocation(0LL),
        (static UUID.== infix(_:_:)((char *)a1 + v5[5], a2 + v5[5]) & 1) != 0)
    && *((unsigned __int8 *)a1 + v5[6]) == *(unsigned __int8 *)(a2 + v5[6])
    && ((uint64_t v6 = v5[7],
         uint64_t v7 = *(uint64_t *)((char *)a1 + v6),
         uint64_t v8 = *(uint64_t *)((char *)a1 + v6 + 8),
         double v9 = (void *)(a2 + v6),
         uint64_t v10 = v9[1],
         v7 == *v9)
      ? (BOOL v11 = v8 == v10)
      : (BOOL v11 = 0),
        (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, *v9, v10, 0LL) & 1) != 0)
     && *(double *)((char *)a1 + v5[8]) == *(double *)(a2 + v5[8])
     && *(double *)((char *)a1 + v5[9]) == *(double *)(a2 + v5[9])
     && *(double *)((char *)a1 + v5[10]) == *(double *)(a2 + v5[10])
     && *((unsigned __int8 *)a1 + v5[11]) == *(unsigned __int8 *)(a2 + v5[11])
     && *((unsigned __int8 *)a1 + v5[12]) == *(unsigned __int8 *)(a2 + v5[12])))
  {
    return sub_100126DB8(*(uint64_t *)((char *)a1 + v5[13]), *(void *)(a2 + v5[13]));
  }

  else
  {
    return 0LL;
  }

unint64_t sub_10061CDC4()
{
  unint64_t result = qword_1009B81C0;
  if (!qword_1009B81C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080FF18, &type metadata for SafeLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B81C0);
  }

  return result;
}

unint64_t sub_10061CE08()
{
  unint64_t result = qword_1009B81C8;
  if (!qword_1009B81C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080FEF0, &type metadata for SafeLocationType);
    atomic_store(result, (unint64_t *)&qword_1009B81C8);
  }

  return result;
}

unint64_t sub_10061CE4C()
{
  unint64_t result = qword_1009B81D0;
  if (!qword_1009B81D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080FEC8, &type metadata for SafeLocationReferenceFrame);
    atomic_store(result, (unint64_t *)&qword_1009B81D0);
  }

  return result;
}

unint64_t sub_10061CE90()
{
  unint64_t result = qword_1009B81D8;
  if (!qword_1009B81D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080FEA0, &type metadata for SafeLocationApprovalState);
    atomic_store(result, (unint64_t *)&qword_1009B81D8);
  }

  return result;
}

uint64_t sub_10061CED4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SafeLocation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10061CF18(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SafeLocation(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_10061CF54()
{
  unint64_t result = qword_1009B81F8;
  if (!qword_1009B81F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080FE78, &type metadata for SafeLocationType);
    atomic_store(result, (unint64_t *)&qword_1009B81F8);
  }

  return result;
}

unint64_t sub_10061CF98()
{
  unint64_t result = qword_1009B8200;
  if (!qword_1009B8200)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080FE50, &type metadata for SafeLocationReferenceFrame);
    atomic_store(result, (unint64_t *)&qword_1009B8200);
  }

  return result;
}

unint64_t sub_10061CFDC()
{
  unint64_t result = qword_1009B8208;
  if (!qword_1009B8208)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080FE28, &type metadata for SafeLocationApprovalState);
    atomic_store(result, (unint64_t *)&qword_1009B8208);
  }

  return result;
}

uint64_t sub_10061D020(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v9 = sub_100004B78((uint64_t *)&unk_1009B81E0);
    sub_100007864(a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, a3);
    uint64_t result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }

  return result;
}

void *sub_10061D0A4()
{
  if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
    sub_100033380(0, _swiftEmptyArrayStorage[2] + 1LL, 1);
  }
  unint64_t v1 = _swiftEmptyArrayStorage[2];
  unint64_t v0 = _swiftEmptyArrayStorage[3];
  if (v1 >= v0 >> 1) {
    sub_100033380(v0 > 1, v1 + 1, 1);
  }
  _swiftEmptyArrayStorage[2] = v1 + 1;
  *((_BYTE *)&_swiftEmptyArrayStorage[4] + v1) = 2;
  if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
    sub_100033380(0, _swiftEmptyArrayStorage[2] + 1LL, 1);
  }
  unint64_t v3 = _swiftEmptyArrayStorage[2];
  unint64_t v2 = _swiftEmptyArrayStorage[3];
  if (v3 >= v2 >> 1) {
    sub_100033380(v2 > 1, v3 + 1, 1);
  }
  _swiftEmptyArrayStorage[2] = v3 + 1;
  *((_BYTE *)&_swiftEmptyArrayStorage[4] + v3) = 3;
  if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
    sub_100033380(0, _swiftEmptyArrayStorage[2] + 1LL, 1);
  }
  unint64_t v5 = _swiftEmptyArrayStorage[2];
  unint64_t v4 = _swiftEmptyArrayStorage[3];
  if (v5 >= v4 >> 1) {
    sub_100033380(v4 > 1, v5 + 1, 1);
  }
  _swiftEmptyArrayStorage[2] = v5 + 1;
  *((_BYTE *)&_swiftEmptyArrayStorage[4] + v5) = 4;
  if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
    sub_100033380(0, _swiftEmptyArrayStorage[2] + 1LL, 1);
  }
  unint64_t v7 = _swiftEmptyArrayStorage[2];
  unint64_t v6 = _swiftEmptyArrayStorage[3];
  if (v7 >= v6 >> 1) {
    sub_100033380(v6 > 1, v7 + 1, 1);
  }
  _swiftEmptyArrayStorage[2] = v7 + 1;
  *((_BYTE *)&_swiftEmptyArrayStorage[4] + v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = 5;
  return _swiftEmptyArrayStorage;
}

uint64_t storeEnumTagSinglePayload for SafeLocationApprovalState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10061D404 + 4 * byte_10080F8C7[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10061D438 + 4 * byte_10080F8C2[v4]))();
}

uint64_t sub_10061D438(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10061D440(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10061D448LL);
  }
  return result;
}

uint64_t sub_10061D454(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10061D45CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10061D460(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10061D468(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SafeLocationApprovalState()
{
  return &type metadata for SafeLocationApprovalState;
}

ValueMetadata *type metadata accessor for SafeLocationReferenceFrame()
{
  return &type metadata for SafeLocationReferenceFrame;
}

uint64_t storeEnumTagSinglePayload for SafeLocationType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_10061D4E4 + 4 * byte_10080F8D1[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10061D518 + 4 * byte_10080F8CC[v4]))();
}

uint64_t sub_10061D518(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10061D520(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10061D528LL);
  }
  return result;
}

uint64_t sub_10061D534(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10061D53CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 5;
  return result;
}

uint64_t sub_10061D540(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10061D548(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SafeLocationType()
{
  return &type metadata for SafeLocationType;
}

uint64_t storeEnumTagSinglePayload for SafeLocation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF6) {
    return ((uint64_t (*)(void))((char *)&loc_10061D5B0 + 4 * byte_10080F8DB[v4]))();
  }
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_10061D5E4 + 4 * byte_10080F8D6[v4]))();
}

uint64_t sub_10061D5E4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10061D5EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10061D5F4LL);
  }
  return result;
}

uint64_t sub_10061D600(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10061D608LL);
  }
  *(_BYTE *)uint64_t result = a2 + 9;
  return result;
}

uint64_t sub_10061D60C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10061D614(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SafeLocation.CodingKeys()
{
  return &type metadata for SafeLocation.CodingKeys;
}

uint64_t _s12searchpartyd26SafeLocationReferenceFrameOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10061D67C + 4 * byte_10080F8E5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10061D6B0 + 4 * byte_10080F8E0[v4]))();
}

uint64_t sub_10061D6B0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10061D6B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10061D6C0LL);
  }
  return result;
}

uint64_t sub_10061D6CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10061D6D4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10061D6D8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10061D6E0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SafeLocation.SafeLocationConversionError()
{
  return &type metadata for SafeLocation.SafeLocationConversionError;
}

uint64_t *sub_10061D6FC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_10001736C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    BOOL v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
    uint64_t v13 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    unint64_t v14 = (uint64_t *)((char *)a1 + v13);
    unint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = v15[1];
    *unint64_t v14 = *v15;
    v14[1] = v16;
    uint64_t v17 = a3[9];
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *(uint64_t *)((char *)a1 + v1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = *(uint64_t *)((char *)a2 + v17);
    uint64_t v18 = a3[11];
    *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    *((_BYTE *)a1 + v18) = *((_BYTE *)a2 + v18);
    uint64_t v19 = a3[13];
    *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
    uint64_t v20 = *(uint64_t *)((char *)a2 + v19);
    *(uint64_t *)((char *)a1 + v19) = v20;
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v20);
  }

  return a1;
}

uint64_t sub_10061D804(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t *sub_10061D874(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
  uint64_t v12 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  uint64_t v13 = (uint64_t *)((char *)a1 + v12);
  unint64_t v14 = (uint64_t *)((char *)a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = a3[9];
  *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  *(uint64_t *)((char *)a1 + vswift_weakDestroy(v0 + 16) = *(uint64_t *)((char *)a2 + v16);
  uint64_t v17 = a3[11];
  *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  *((_BYTE *)a1 + v1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = *((_BYTE *)a2 + v17);
  uint64_t v18 = a3[13];
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  uint64_t v19 = *(uint64_t *)((char *)a2 + v18);
  *(uint64_t *)((char *)a1 + v18) = v19;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v19);
  return a1;
}

uint64_t *sub_10061D950(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100016F9C(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  uint64_t v14 = a3[7];
  uint64_t v15 = (uint64_t *)((char *)a1 + v14);
  uint64_t v16 = (uint64_t *)((char *)a2 + v14);
  void *v15 = *v16;
  uint64_t v17 = v16[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  uint64_t v18 = a3[13];
  uint64_t v19 = *(uint64_t *)((char *)a2 + v18);
  *(uint64_t *)((char *)a1 + v18) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_10061DA60(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  uint64_t v11 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  uint64_t v12 = a3[11];
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  *((_BYTE *)a1 + v1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *((_BYTE *)a2 + v12);
  uint64_t v13 = a3[13];
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);
  return a1;
}

uint64_t *sub_10061DB1C(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100016F9C(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  uint64_t v12 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  uint64_t v13 = (uint64_t *)((char *)a1 + v12);
  uint64_t v14 = (uint64_t *)((char *)a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[9];
  *(uint64_t *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(uint64_t *)((char *)a1 + v1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = *(void *)((char *)a2 + v17);
  uint64_t v18 = a3[11];
  *(uint64_t *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  *((_BYTE *)a1 + v18) = *((_BYTE *)a2 + v18);
  uint64_t v19 = a3[13];
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  *(uint64_t *)((char *)a1 + v19) = *(void *)((char *)a2 + v19);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10061DBFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10061DC08);
}

uint64_t sub_10061DC08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_10061DC8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10061DC98);
}

uint64_t sub_10061DC98(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))( a1 + *(int *)(a4 + 20),  a2,  a2,  result);
  }
  *(void *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_10061DD18(uint64_t a1)
{
  v4[0] = &unk_10080FA10;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = &unk_10080FA28;
    void v4[3] = &unk_10080FA40;
    void v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    void v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    void v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[7] = &unk_10080FA58;
    v4[8] = &unk_10080FA70;
    void v4[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256LL, 10LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_10061DDD4()
{
  return sub_100007864(&qword_1009B82D0, type metadata accessor for SafeLocation, (uint64_t)&unk_10080FA88);
}

unint64_t sub_10061DE04()
{
  unint64_t result = qword_1009B82D8;
  if (!qword_1009B82D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080FB30, &type metadata for SafeLocation.SafeLocationConversionError);
    atomic_store(result, (unint64_t *)&qword_1009B82D8);
  }

  return result;
}

unint64_t sub_10061DE4C()
{
  unint64_t result = qword_1009B82E0;
  if (!qword_1009B82E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080FBE8, &type metadata for SafeLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B82E0);
  }

  return result;
}

unint64_t sub_10061DE94()
{
  unint64_t result = qword_1009B82E8;
  if (!qword_1009B82E8)
  {
    uint64_t v1 = sub_100004B78(&qword_1009B82F0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009B82E8);
  }

  return result;
}

unint64_t sub_10061DEE4()
{
  unint64_t result = qword_1009B82F8;
  if (!qword_1009B82F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080FCC0, &type metadata for SafeLocationType);
    atomic_store(result, (unint64_t *)&qword_1009B82F8);
  }

  return result;
}

unint64_t sub_10061DF2C()
{
  unint64_t result = qword_1009B8300;
  if (!qword_1009B8300)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080FD60, &type metadata for SafeLocationReferenceFrame);
    atomic_store(result, (unint64_t *)&qword_1009B8300);
  }

  return result;
}

unint64_t sub_10061DF74()
{
  unint64_t result = qword_1009B8308;
  if (!qword_1009B8308)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080FE00, &type metadata for SafeLocationApprovalState);
    atomic_store(result, (unint64_t *)&qword_1009B8308);
  }

  return result;
}

unint64_t sub_10061DFBC()
{
  unint64_t result = qword_1009B8310;
  if (!qword_1009B8310)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080FB58, &type metadata for SafeLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8310);
  }

  return result;
}

unint64_t sub_10061E004()
{
  unint64_t result = qword_1009B8318;
  if (!qword_1009B8318)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080FB80, &type metadata for SafeLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8318);
  }

  return result;
}

uint64_t sub_10061E048(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x800000010084DE70LL;
    if (a2 == 0x800000010084DE70LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010084DE70LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v6 = 0xEA00000000007265LL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_11;
  }

  if (a1 == 1701869940 && a2 == 0xE400000000000000LL)
  {
    unint64_t v7 = 0xE400000000000000LL;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_17;
  }

  if (a1 == 1701667182 && a2 == 0xE400000000000000LL)
  {
    unint64_t v8 = 0xE400000000000000LL;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_23;
  }

  if (a1 == 0x656475746974616CLL && a2 == 0xE800000000000000LL)
  {
    unint64_t v9 = 0xE800000000000000LL;
LABEL_29:
    swift_bridgeObjectRelease(v9);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656475746974616CLL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_29;
  }

  if (a1 == 0x64757469676E6F6CLL && a2 == 0xE900000000000065LL)
  {
    unint64_t v10 = 0xE900000000000065LL;
LABEL_35:
    swift_bridgeObjectRelease(v10);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64757469676E6F6CLL, 0xE900000000000065LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_35;
  }

  if (a1 == 0x737569646172LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v11 = 0xE600000000000000LL;
LABEL_41:
    swift_bridgeObjectRelease(v11);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737569646172LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_41;
  }

  if (a1 == 0x636E657265666572LL && a2 == 0xEE00656D61724665LL)
  {
    unint64_t v12 = 0xEE00656D61724665LL;
LABEL_47:
    swift_bridgeObjectRelease(v12);
    return 7LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x636E657265666572LL, 0xEE00656D61724665LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
    goto LABEL_47;
  }

  if (a1 == 0x6C61766F72707061LL && a2 == 0xED00006574617453LL)
  {
    unint64_t v13 = 0xED00006574617453LL;
LABEL_53:
    swift_bridgeObjectRelease(v13);
    return 8LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C61766F72707061LL, 0xED00006574617453LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
    goto LABEL_53;
  }

  if (a1 == 0xD000000000000011LL && a2 == 0x8000000100866FE0LL)
  {
    swift_bridgeObjectRelease(0x8000000100866FE0LL);
    return 9LL;
  }

  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x8000000100866FE0LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0) {
      return 9LL;
    }
    else {
      return 10LL;
    }
  }

unint64_t sub_10061E488()
{
  unint64_t result = qword_1009B8320;
  if (!qword_1009B8320)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080FC48, &type metadata for SafeLocationType);
    atomic_store(result, (unint64_t *)&qword_1009B8320);
  }

  return result;
}

unint64_t sub_10061E4CC()
{
  unint64_t result = qword_1009B8328;
  if (!qword_1009B8328)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080FCE8, &type metadata for SafeLocationReferenceFrame);
    atomic_store(result, (unint64_t *)&qword_1009B8328);
  }

  return result;
}

unint64_t sub_10061E510()
{
  unint64_t result = qword_1009B8330;
  if (!qword_1009B8330)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080FD88, &type metadata for SafeLocationApprovalState);
    atomic_store(result, (unint64_t *)&qword_1009B8330);
  }

  return result;
}

unint64_t sub_10061E558()
{
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 41LL;
  v2._object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  return 0xD000000000000012LL;
}

ValueMetadata *type metadata accessor for SecureLocationsIndex()
{
  return &type metadata for SecureLocationsIndex;
}

unint64_t sub_10061E5F0()
{
  unint64_t result = qword_1009B8340;
  if (!qword_1009B8340)
  {
    unint64_t result = swift_getWitnessTable(&unk_100810170, &type metadata for SecureLocationsIndex);
    atomic_store(result, (unint64_t *)&qword_1009B8340);
  }

  return result;
}

unint64_t sub_10061E638()
{
  unint64_t result = qword_1009B8348;
  if (!qword_1009B8348)
  {
    unint64_t result = swift_getWitnessTable(&unk_100810018, &type metadata for SecureLocationsIndex);
    atomic_store(result, (unint64_t *)&qword_1009B8348);
  }

  return result;
}

unint64_t sub_10061E67C(void *a1)
{
  a1[1] = sub_10061E6D8();
  a1[2] = sub_10061E71C();
  a1[3] = sub_100590ECC();
  a1[4] = sub_100590F10();
  a1[5] = sub_10061E760();
  a1[6] = sub_10061E7A4();
  a1[7] = sub_10061E7E8();
  unint64_t result = sub_10061E82C();
  a1[8] = result;
  return result;
}

unint64_t sub_10061E6D8()
{
  unint64_t result = qword_1009B8350;
  if (!qword_1009B8350)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008101B8, &type metadata for SecureLocationsIndex);
    atomic_store(result, (unint64_t *)&qword_1009B8350);
  }

  return result;
}

unint64_t sub_10061E71C()
{
  unint64_t result = qword_1009B8358;
  if (!qword_1009B8358)
  {
    unint64_t result = swift_getWitnessTable(&unk_100810148, &type metadata for SecureLocationsIndex);
    atomic_store(result, (unint64_t *)&qword_1009B8358);
  }

  return result;
}

unint64_t sub_10061E760()
{
  unint64_t result = qword_1009B8360;
  if (!qword_1009B8360)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008100D0, &type metadata for SecureLocationsIndex);
    atomic_store(result, (unint64_t *)&qword_1009B8360);
  }

  return result;
}

unint64_t sub_10061E7A4()
{
  unint64_t result = qword_1009B8368;
  if (!qword_1009B8368)
  {
    unint64_t result = swift_getWitnessTable(&unk_100810108, &type metadata for SecureLocationsIndex);
    atomic_store(result, (unint64_t *)&qword_1009B8368);
  }

  return result;
}

unint64_t sub_10061E7E8()
{
  unint64_t result = qword_1009B8370;
  if (!qword_1009B8370)
  {
    unint64_t result = swift_getWitnessTable(&unk_100810098, &type metadata for SecureLocationsIndex);
    atomic_store(result, (unint64_t *)&qword_1009B8370);
  }

  return result;
}

unint64_t sub_10061E82C()
{
  unint64_t result = qword_1009B8378;
  if (!qword_1009B8378)
  {
    unint64_t result = swift_getWitnessTable(&unk_100810040, &type metadata for SecureLocationsIndex);
    atomic_store(result, (unint64_t *)&qword_1009B8378);
  }

  return result;
}

void *sub_10061E870(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  char v14 = _swiftEmptyArrayStorage;
  sub_100032800(0, v2, 0);
  unint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 32LL)
    {
      sub_10006A650(i, (uint64_t)v13);
      if (!swift_dynamicCast( &v11,  v13,  (char *)&type metadata for Any + 8,  &type metadata for String,  6LL)) {
        break;
      }
      uint64_t v5 = v11;
      uint64_t v6 = v12;
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_100032800(0, v3[2] + 1LL, 1);
        unint64_t v3 = v14;
      }

      unint64_t v8 = v3[2];
      unint64_t v7 = v3[3];
      if (v8 >= v7 >> 1)
      {
        sub_100032800(v7 > 1, v8 + 1, 1);
        unint64_t v3 = v14;
      }

      v3[2] = v8 + 1;
      unint64_t v9 = &v3[2 * v8];
      v9[4] = v5;
      v9[5] = v6;
      if (!--v2) {
        return v3;
      }
    }

    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    swift_release(v3);
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return v3;
}

void *sub_10061E9B4(uint64_t a1)
{
  uint64_t v12 = _swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)(v2);
  if (!v2) {
    return v12;
  }
  for (uint64_t i = a1 + 32; ; i += 32LL)
  {
    sub_10006A650(i, (uint64_t)v11);
    uint64_t v4 = sub_100022898(0LL, &qword_1009A6000, &OBJC_CLASS___IDSDevice_ptr);
    uint64_t v5 = swift_dynamicCast(&v10, v11, (char *)&type metadata for Any + 8, v4, 6LL);
    if (!(_DWORD)v5) {
      break;
    }
    id v6 = v10;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v5);
    uint64_t v7 = v12[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
    uint64_t v8 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v6);
    specialized ContiguousArray._endMutation()(v8);
    if (!--v2) {
      return v12;
    }
  }

  id v10 = 0LL;
  swift_release();

  return 0LL;
}

void *sub_10061EACC(uint64_t a1)
{
  uint64_t v12 = _swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)(v2);
  if (!v2) {
    return v12;
  }
  for (uint64_t i = a1 + 32; ; i += 32LL)
  {
    sub_10006A650(i, (uint64_t)v11);
    type metadata accessor for SecCertificate(0LL);
    uint64_t v5 = swift_dynamicCast(&v10, v11, (char *)&type metadata for Any + 8, v4, 6LL);
    if (!(_DWORD)v5) {
      break;
    }
    id v6 = v10;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v5);
    uint64_t v7 = v12[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
    uint64_t v8 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v6);
    specialized ContiguousArray._endMutation()(v8);
    if (!--v2) {
      return v12;
    }
  }

  id v10 = 0LL;
  swift_release();

  return 0LL;
}

id sub_10061EBC4()
{
  id v1 = *v0;
  id v2 = *v0;
  return v1;
}

uint64_t sub_10061EBE8()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 8));
}

uint64_t sub_10061EBF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001581C(v2 + *(int *)(a1 + 24), a2, &qword_10099D8A0);
}

uint64_t sub_10061EC18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001581C(v2 + *(int *)(a1 + 28), a2, (uint64_t *)&unk_10099D720);
}

uint64_t sub_10061EC40(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 32));
}

uint64_t sub_10061EC54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001581C(v2 + *(int *)(a1 + 36), a2, (uint64_t *)&unk_10099D720);
}

id sub_10061EC7C()
{
  uint64_t v1 = *(void **)(v0 + 32);
  if (v1)
  {
    id v2 = *(id *)(v0 + 32);
  }

  else
  {
    if (qword_10099B698 == -1)
    {
      unint64_t v3 = 0LL;
    }

    else
    {
      swift_once(&qword_10099B698, sub_100621A60);
      unint64_t v3 = *(void **)(v0 + 32);
    }

    uint64_t v4 = (void *)qword_100A2AF88;
    *(void *)(v0 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = qword_100A2AF88;
    id v2 = v4;

    uint64_t v1 = 0LL;
  }

  id v5 = v1;
  return v2;
}

void sub_10061ED04(void *a1)
{
  id v27 = a1;
  id v2 = (int *)type metadata accessor for ServiceStateConfigurationLayer(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (uint64_t *)((char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = SPServiceStateDisabled;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  uint64_t v8 = v7;
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  if (v6 == v9 && v8 == v10) {
    char v12 = 1;
  }
  else {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v9, v10, 0LL);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((sub_100620D68(2u, 2u, v12 & 1) & 1) != 0)
  {
    id v13 = sub_10061EC7C();
    static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v15 = SPSettingsServiceStateKey;
    [v13 setObject:v14 forKey:SPSettingsServiceStateKey];

    id v16 = sub_10061EC7C();
    id v17 = [v16 stringForKey:v15];

    if (!v17)
    {
      if (qword_10099B428 != -1) {
        swift_once(&qword_10099B428, sub_10041E30C);
      }
      id v17 = (id)qword_100A2A980;
    }

    uint64_t v18 = sub_10061F870();
    sub_10061FCE4((uint64_t)v4 + v2[6]);
    sub_100620478((uint64_t)v4 + v2[7]);
    uint64_t v19 = sub_100620498();
    char v21 = v20;
    sub_100620788((uint64_t)v4 + v2[9]);
    id v22 = sub_10061EC7C();
    NSString v23 = String._bridgeToObjectiveC()();
    unsigned __int8 v24 = [v22 BOOLForKey:v23];

    void *v4 = v17;
    v4[1] = v18;
    unint64_t v25 = (char *)v4 + v2[8];
    *(void *)unint64_t v25 = v19;
    v25[8] = v21 & 1;
    *((_BYTE *)v4 + v2[10]) = v24;
    sub_100621C1C((uint64_t)v4, v1);

    sub_100621ED0((uint64_t)v4);
  }

  else
  {
  }

void *sub_10061EF7C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v1[2] = _swiftEmptyArrayStorage;
  sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v12 = (*(uint64_t (**)(char *, void, uint64_t))(v9 + 104))( v11,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v8);
  static DispatchQoS.unspecified.getter(v12);
  __int128 v39 = _swiftEmptyArrayStorage;
  uint64_t v13 = sub_100015C48( (unint64_t *)&qword_10099BAA0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009A0CD0);
  uint64_t v15 = sub_1000372EC( (unint64_t *)&qword_10099BAB0,  (uint64_t *)&unk_1009A0CD0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v39, v14, v15, v2, v13);
  v1[3] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000003FLL,  0x80000001008580C0LL,  v7,  v4,  v11,  0LL);
  v1[4] = 0LL;
  v1[5] = 0LL;
  v1[6] = 0xD000000000000014LL;
  v1[7] = 0x8000000100861D50LL;
  __int128 v39 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(SPSelfBeaconUUIDKeyBase);
  uint64_t v40 = v16;
  v17._countAndFlagsBits = 45LL;
  v17._object = (void *)0xE100000000000000LL;
  String.append(_:)(v17);
  unint64_t result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    uint64_t v19 = result;
    id v20 = (id)MobileGestalt_copy_uniqueDeviceID_obj();

    if (v20)
    {
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      NSString v23 = v22;
    }

    else
    {
      uint64_t v21 = 0LL;
      NSString v23 = (void *)0xE000000000000000LL;
    }

    v24._countAndFlagsBits = v21;
    v24._object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    unint64_t v25 = v39;
    uint64_t v26 = v40;
    uint64_t v27 = sub_100004AEC(&qword_1009AF520);
    uint64_t v28 = swift_allocObject(v27, 128LL, 7LL);
    *(_OWORD *)(v28 + swift_weakDestroy(v0 + 16) = xmmword_1007E82A0;
    *(void *)(v28 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = static String._unconditionallyBridgeFromObjectiveC(_:)(SPSettingsServiceStateKey);
    *(void *)(v28 + 40) = v29;
    *(void *)(v28 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(SPSettingsServiceDisabledReasonsKey);
    *(void *)(v28 + 56) = v30;
    *(void *)(v28 + 64) = v25;
    *(void *)(v28 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v26;
    *(void *)(v28 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconZoneCreationDateKey);
    *(void *)(v28 + 88) = v31;
    *(void *)(v28 + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconZoneCreationErrorCodeKey);
    *(void *)(v28 + 104) = v32;
    *(void *)(v28 + 11_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = static String._unconditionallyBridgeFromObjectiveC(_:)(SPLastKeyRollDateKey);
    *(void *)(v28 + 120) = v33;
    id v34 = sub_10061EC7C();
    objc_allocWithZone((Class)type metadata accessor for UserDefaultsObserver(0LL));
    swift_retain(v1);
    uint64_t v35 = UserDefaultsObserver.init(keys:defaults:notificationBlock:)(v28, v34, sub_100622044, v1);
    uint64_t v36 = (void *)v1[5];
    v1[5] = v35;

    unint64_t v37 = (void *)v1[5];
    if (v37)
    {
      id v38 = v37;
      dispatch thunk of UserDefaultsObserver.start()();
    }

    return v1;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10061F300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (int *)type metadata accessor for ServiceStateConfigurationLayer(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v7 = sub_10061EC7C();
  id v8 = [v7 stringForKey:SPSettingsServiceStateKey];

  if (!v8)
  {
    if (qword_10099B428 != -1) {
      swift_once(&qword_10099B428, sub_10041E30C);
    }
    id v8 = (id)qword_100A2A980;
  }

  uint64_t v9 = sub_10061F870();
  sub_10061FCE4((uint64_t)v6 + v4[6]);
  sub_100620478((uint64_t)v6 + v4[7]);
  uint64_t v10 = sub_100620498();
  char v12 = v11;
  sub_100620788((uint64_t)v6 + v4[9]);
  id v13 = sub_10061EC7C();
  NSString v14 = String._bridgeToObjectiveC()();
  unsigned __int8 v15 = [v13 BOOLForKey:v14];

  *uint64_t v6 = v8;
  v6[1] = v9;
  uint64_t v16 = (char *)v6 + v4[8];
  *(void *)uint64_t v16 = v10;
  void v16[8] = v12 & 1;
  *((_BYTE *)v6 + v4[10]) = v15;
  sub_100621C1C((uint64_t)v6, a3);
  return sub_100621ED0((uint64_t)v6);
}

uint64_t sub_10061F484()
{
  uint64_t v1 = (int *)type metadata accessor for ServiceStateConfigurationLayer(0LL);
  __chkstk_darwin(v1);
  uint64_t v3 = (uint64_t *)((char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (qword_10099B428 != -1) {
    swift_once(&qword_10099B428, sub_10041E30C);
  }
  sub_10061ED04((id)qword_100A2A980);
  id v4 = sub_10061EC7C();
  [v4 removeObjectForKey:SPBeaconZoneCreationDateKey];

  id v5 = sub_10061EC7C();
  [v5 removeObjectForKey:SPBeaconZoneCreationErrorCodeKey];

  id v6 = sub_10061EC7C();
  [v6 removeObjectForKey:SPLastKeyRollDateKey];

  uint64_t v8 = static os_log_type_t.default.getter(v7);
  if (qword_10099B760 != -1) {
    swift_once(&qword_10099B760, sub_1006515A8);
  }
  os_log(_:dso:log:_:_:)( v8,  &_mh_execute_header,  qword_100A2B070,  "ServiceStateProvider reset to default settings.",  47LL,  2LL,  _swiftEmptyArrayStorage);
  id v9 = sub_10061EC7C();
  id v10 = [v9 stringForKey:SPSettingsServiceStateKey];

  if (!v10) {
    id v10 = (id)qword_100A2A980;
  }
  char v11 = sub_10061F870();
  sub_10061FCE4((uint64_t)v3 + v1[6]);
  sub_100620478((uint64_t)v3 + v1[7]);
  uint64_t v12 = sub_100620498();
  char v14 = v13;
  sub_100620788((uint64_t)v3 + v1[9]);
  id v15 = sub_10061EC7C();
  NSString v16 = String._bridgeToObjectiveC()();
  unsigned __int8 v17 = [v15 BOOLForKey:v16];

  *uint64_t v3 = v10;
  v3[1] = v11;
  uint64_t v18 = (char *)v3 + v1[8];
  *(void *)uint64_t v18 = v12;
  v18[8] = v14 & 1;
  *((_BYTE *)v3 + v1[10]) = v17;
  sub_100621C1C((uint64_t)v3, v0);
  return sub_100621ED0((uint64_t)v3);
}

uint64_t sub_10061F6D4(char a1, char a2)
{
  id v5 = (int *)type metadata accessor for ServiceStateConfigurationLayer(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t result = sub_100620D68(a1 & 1, a2 & 1, 2u);
  if ((result & 1) != 0)
  {
    id v9 = sub_10061EC7C();
    id v10 = [v9 stringForKey:SPSettingsServiceStateKey];

    if (!v10)
    {
      if (qword_10099B428 != -1) {
        swift_once(&qword_10099B428, sub_10041E30C);
      }
      id v10 = (id)qword_100A2A980;
    }

    char v11 = sub_10061F870();
    sub_10061FCE4((uint64_t)v7 + v5[6]);
    sub_100620478((uint64_t)v7 + v5[7]);
    uint64_t v12 = sub_100620498();
    char v14 = v13;
    sub_100620788((uint64_t)v7 + v5[9]);
    id v15 = sub_10061EC7C();
    NSString v16 = String._bridgeToObjectiveC()();
    unsigned __int8 v17 = [v15 BOOLForKey:v16];

    *uint64_t v7 = v10;
    v7[1] = v11;
    uint64_t v18 = (char *)v7 + v5[8];
    *(void *)uint64_t v18 = v12;
    v18[8] = v14 & 1;
    *((_BYTE *)v7 + v5[10]) = v17;
    sub_100621C1C((uint64_t)v7, v2);
    return sub_100621ED0((uint64_t)v7);
  }

  return result;
}

void *sub_10061F870()
{
  id v0 = sub_10061EC7C();
  id v1 = [v0 arrayForKey:SPSettingsServiceDisabledReasonsKey];

  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, (char *)&type metadata for Any + 8);

  uint64_t v3 = sub_10061E870(v2);
  swift_bridgeObjectRelease();
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = v3[2];
  if (v4)
  {
    swift_bridgeObjectRetain(v3);
    id v5 = v3 + 5;
    uint64_t v6 = _swiftEmptyArrayStorage;
    do
    {
      swift_bridgeObjectRetain(*v5);
      NSString v7 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0) {
        uint64_t v6 = sub_1004C46F0(0LL, v6[2] + 1LL, 1, v6);
      }
      unint64_t v9 = v6[2];
      unint64_t v8 = v6[3];
      if (v9 >= v8 >> 1) {
        uint64_t v6 = sub_1004C46F0((void *)(v8 > 1), v9 + 1, 1, v6);
      }
      v5 += 2;
      v6[2] = v9 + 1;
      v6[v9 + 4] = v7;
      --v4;
    }

    while (v4);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v6 = _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease();
  return v6;
}

void sub_10061F9E8(uint64_t a1)
{
  if (a1)
  {
    int64_t v2 = *(void *)(a1 + 16);
    if (v2)
    {
      sub_100032800(0, v2, 0);
      uint64_t v3 = 0LL;
      do
      {
        uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(a1 + 8 * v3 + 32));
        uint64_t v6 = v5;
        unint64_t v8 = _swiftEmptyArrayStorage[2];
        unint64_t v7 = _swiftEmptyArrayStorage[3];
        if (v8 >= v7 >> 1) {
          sub_100032800(v7 > 1, v8 + 1, 1);
        }
        ++v3;
        _swiftEmptyArrayStorage[2] = v8 + 1;
        unint64_t v9 = &_swiftEmptyArrayStorage[2 * v8];
        v9[4] = v4;
        v9[5] = v6;
      }

      while (v2 != v3);
    }

    swift_bridgeObjectRelease();
  }

  id v10 = sub_10061EC7C();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v10 setObject:isa forKey:SPSettingsServiceDisabledReasonsKey];
}

uint64_t sub_10061FB20(char a1)
{
  uint64_t v3 = (int *)type metadata accessor for ServiceStateConfigurationLayer(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (uint64_t *)((char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v6 = sub_10061EC7C();
  NSString v7 = String._bridgeToObjectiveC()();
  [v6 setBool:a1 & 1 forKey:v7];

  id v8 = sub_10061EC7C();
  id v9 = [v8 stringForKey:SPSettingsServiceStateKey];

  if (!v9)
  {
    if (qword_10099B428 != -1) {
      swift_once(&qword_10099B428, sub_10041E30C);
    }
    id v9 = (id)qword_100A2A980;
  }

  id v10 = sub_10061F870();
  sub_10061FCE4((uint64_t)v5 + v3[6]);
  sub_100620478((uint64_t)v5 + v3[7]);
  uint64_t v11 = sub_100620498();
  char v13 = v12;
  sub_100620788((uint64_t)v5 + v3[9]);
  id v14 = sub_10061EC7C();
  NSString v15 = String._bridgeToObjectiveC()();
  unsigned __int8 v16 = [v14 BOOLForKey:v15];

  *uint64_t v5 = v9;
  v5[1] = v10;
  unsigned __int8 v17 = (char *)v5 + v3[8];
  *(void *)unsigned __int8 v17 = v11;
  v17[8] = v13 & 1;
  *((_BYTE *)v5 + v3[10]) = v16;
  sub_100621C1C((uint64_t)v5, v1);
  return sub_100621ED0((uint64_t)v5);
}

id sub_10061FCE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v23[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(SPSelfBeaconUUIDKeyBase);
  v23[1] = v5;
  v6._countAndFlagsBits = 45LL;
  v6._object = (void *)0xE100000000000000LL;
  String.append(_:)(v6);
  id result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    id v8 = result;
    id v9 = (id)MobileGestalt_copy_uniqueDeviceID_obj();

    if (v9)
    {
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      char v12 = v11;
    }

    else
    {
      uint64_t v10 = 0LL;
      char v12 = (void *)0xE000000000000000LL;
    }

    v13._countAndFlagsBits = v10;
    v13._object = v12;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    id v14 = sub_10061EC7C();
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v16 = [v14 stringForKey:v15];

    if (!v16) {
      goto LABEL_8;
    }
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    uint64_t v19 = v18;

    UUID.init(uuidString:)(v17, v19);
    swift_bridgeObjectRelease();
    uint64_t v20 = type metadata accessor for UUID(0LL);
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v4, 1LL, v20) == 1)
    {
      sub_100015794((uint64_t)v4, &qword_10099D8A0);
LABEL_8:
      uint64_t v22 = type metadata accessor for UUID(0LL);
      return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))( a1,  1LL,  1LL,  v22);
    }

    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(a1, v4, v20);
    return (id)(*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56))(a1, 0LL, 1LL, v20);
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_10061FEF4(uint64_t a1)
{
  uint64_t v52 = type metadata accessor for ServiceStateConfigurationLayer(0LL);
  __chkstk_darwin(v52);
  uint64_t v53 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  NSString v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009B5370);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v12 = __chkstk_darwin(v11);
  id v54 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  id v16 = (char *)&v51 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v51 - v17;
  uint64_t v55 = v1;
  sub_10061FCE4((uint64_t)&v51 - v17);
  uint64_t v19 = (uint64_t)&v10[*(int *)(v8 + 48)];
  uint64_t v56 = a1;
  sub_10001581C(a1, (uint64_t)v10, &qword_10099D8A0);
  sub_10001581C((uint64_t)v18, v19, &qword_10099D8A0);
  uint64_t v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v20((uint64_t)v10, 1LL, v4) == 1)
  {
    sub_100015794((uint64_t)v18, &qword_10099D8A0);
    if (v20(v19, 1LL, v4) == 1)
    {
      sub_100015794((uint64_t)v10, &qword_10099D8A0);
      return (id)sub_100015794(v56, &qword_10099D8A0);
    }

    goto LABEL_6;
  }

  sub_10001581C((uint64_t)v10, (uint64_t)v16, &qword_10099D8A0);
  if (v20(v19, 1LL, v4) == 1)
  {
    sub_100015794((uint64_t)v18, &qword_10099D8A0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v16, v4);
LABEL_6:
    sub_100015794((uint64_t)v10, (uint64_t *)&unk_1009B5370);
    uint64_t v22 = (uint64_t)v54;
    uint64_t v21 = v55;
    goto LABEL_7;
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v19, v4);
  uint64_t v31 = sub_100015C48( (unint64_t *)&qword_1009A0A40,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  char v32 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v7, v4, v31);
  uint64_t v33 = *(void (**)(char *, uint64_t))(v5 + 8);
  v33(v7, v4);
  sub_100015794((uint64_t)v18, &qword_10099D8A0);
  v33(v16, v4);
  sub_100015794((uint64_t)v10, &qword_10099D8A0);
  uint64_t v22 = (uint64_t)v54;
  uint64_t v21 = v55;
  if ((v32 & 1) != 0) {
    return (id)sub_100015794(v56, &qword_10099D8A0);
  }
LABEL_7:
  uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPSelfBeaconUUIDKeyBase);
  uint64_t v58 = v23;
  v24._countAndFlagsBits = 45LL;
  v24._object = (void *)0xE100000000000000LL;
  String.append(_:)(v24);
  id result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    uint64_t v26 = result;
    id v27 = (id)MobileGestalt_copy_uniqueDeviceID_obj();

    if (v27)
    {
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      uint64_t v30 = v29;
    }

    else
    {
      uint64_t v28 = 0LL;
      uint64_t v30 = (void *)0xE000000000000000LL;
    }

    v34._countAndFlagsBits = v28;
    v34._object = v30;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    id v35 = sub_10061EC7C();
    sub_10001581C(v56, v22, &qword_10099D8A0);
    uint64_t v36 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v20)(v22, 1LL, v4);
    if ((_DWORD)v36 == 1)
    {
      sub_100015794(v22, &qword_10099D8A0);
    }

    else
    {
      UUID.uuidString.getter(v36);
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v22, v4);
    }

    NSString v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v35 setObject:v37 forKey:v38];

    id v39 = sub_10061EC7C();
    id v40 = [v39 stringForKey:SPSettingsServiceStateKey];

    if (!v40)
    {
      if (qword_10099B428 != -1) {
        swift_once(&qword_10099B428, sub_10041E30C);
      }
      id v40 = (id)qword_100A2A980;
    }

    uint64_t v41 = sub_10061F870();
    NSString v43 = (int *)v52;
    char v42 = v53;
    sub_10061FCE4((uint64_t)&v53[*(int *)(v52 + 24)]);
    sub_100620478((uint64_t)v42 + v43[7]);
    uint64_t v44 = sub_100620498();
    char v46 = v45;
    sub_100620788((uint64_t)v42 + v43[9]);
    id v47 = sub_10061EC7C();
    NSString v48 = String._bridgeToObjectiveC()();
    unsigned __int8 v49 = [v47 BOOLForKey:v48];

    *char v42 = v40;
    v42[1] = v41;
    uint64_t v50 = (char *)v42 + v43[8];
    *(void *)uint64_t v50 = v44;
    v50[8] = v46 & 1;
    *((_BYTE *)v42 + v43[10]) = v49;
    sub_100621C1C((uint64_t)v42, v21);
    sub_100015794(v56, &qword_10099D8A0);
    return (id)sub_100621ED0((uint64_t)v42);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100620478@<X0>(uint64_t a1@<X8>)
{
  return sub_100620794(&SPBeaconZoneCreationDateKey, a1);
}

uint64_t sub_100620484(uint64_t a1)
{
  return sub_1006208B4(a1, (void (*)(uint64_t))sub_100620478, &SPBeaconZoneCreationDateKey);
}

uint64_t sub_100620498()
{
  id v0 = sub_10061EC7C();
  id v1 = [v0 objectForKey:SPBeaconZoneCreationErrorCodeKey];

  if (v1)
  {
    _bridgeAnyObjectToAny(_:)(v4, v1);
    swift_unknownObjectRelease(v1);
  }

  else
  {
    memset(v4, 0, sizeof(v4));
  }

  sub_1000F3128((uint64_t)v4, (uint64_t)v5);
  if (v6)
  {
    else {
      return 0LL;
    }
  }

  else
  {
    sub_100015794((uint64_t)v5, &qword_10099E200);
    return 0LL;
  }

uint64_t sub_100620574(uint64_t a1, char a2)
{
  uint64_t v5 = (int *)type metadata accessor for ServiceStateConfigurationLayer(0LL);
  __chkstk_darwin(v5);
  NSString v7 = (uint64_t *)((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t result = sub_100620498();
  if ((a2 & 1) != 0)
  {
    if ((v9 & 1) != 0) {
      return result;
    }
    id v11 = sub_10061EC7C();
    [v11 removeObjectForKey:SPBeaconZoneCreationErrorCodeKey];
  }

  else
  {
    if ((v9 & 1) == 0 && result == a1) {
      return result;
    }
    id v10 = sub_10061EC7C();
    id v11 = [objc_allocWithZone(NSNumber) initWithInteger:a1];
    [v10 setObject:v11 forKey:SPBeaconZoneCreationErrorCodeKey];
  }

  id v12 = sub_10061EC7C();
  id v13 = [v12 stringForKey:SPSettingsServiceStateKey];

  if (!v13)
  {
    if (qword_10099B428 != -1) {
      swift_once(&qword_10099B428, sub_10041E30C);
    }
    id v13 = (id)qword_100A2A980;
  }

  uint64_t v14 = sub_10061F870();
  sub_10061FCE4((uint64_t)v7 + v5[6]);
  sub_100620478((uint64_t)v7 + v5[7]);
  uint64_t v15 = sub_100620498();
  char v17 = v16;
  sub_100620788((uint64_t)v7 + v5[9]);
  id v18 = sub_10061EC7C();
  NSString v19 = String._bridgeToObjectiveC()();
  unsigned __int8 v20 = [v18 BOOLForKey:v19];

  *NSString v7 = v13;
  v7[1] = v14;
  uint64_t v21 = (char *)v7 + v5[8];
  *(void *)uint64_t v21 = v15;
  v21[8] = v17 & 1;
  *((_BYTE *)v7 + v5[10]) = v20;
  sub_100621C1C((uint64_t)v7, v2);
  return sub_100621ED0((uint64_t)v7);
}

uint64_t sub_100620788@<X0>(uint64_t a1@<X8>)
{
  return sub_100620794(&SPLastKeyRollDateKey, a1);
}

uint64_t sub_100620794@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = sub_10061EC7C();
  id v5 = [v4 objectForKey:*a1];

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)(v10, v5);
    swift_unknownObjectRelease(v5);
  }

  else
  {
    memset(v10, 0, sizeof(v10));
  }

  sub_1000F3128((uint64_t)v10, (uint64_t)v11);
  if (v12)
  {
    uint64_t v6 = type metadata accessor for Date(0LL);
    int v7 = swift_dynamicCast(a2, v11, (char *)&type metadata for Any + 8, v6, 6LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))( a2,  v7 ^ 1u,  1LL,  v6);
  }

  else
  {
    sub_100015794((uint64_t)v11, &qword_10099E200);
    uint64_t v9 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))( a2,  1LL,  1LL,  v9);
  }

uint64_t sub_1006208A0(uint64_t a1)
{
  return sub_1006208B4(a1, (void (*)(uint64_t))sub_100620788, &SPLastKeyRollDateKey);
}

uint64_t sub_1006208B4(uint64_t a1, void (*a2)(uint64_t), void *a3)
{
  uint64_t v44 = a3;
  id v47 = a2;
  uint64_t v48 = a1;
  uint64_t v4 = v3;
  uint64_t v45 = type metadata accessor for ServiceStateConfigurationLayer(0LL);
  __chkstk_darwin(v45);
  char v46 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D760);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v43 = (uint64_t)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v14);
  id v18 = (char *)&v43 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v43 - v20;
  v47(v19);
  uint64_t v22 = (uint64_t)&v12[*(int *)(v10 + 48)];
  sub_10001581C(v48, (uint64_t)v12, (uint64_t *)&unk_10099D720);
  sub_10001581C((uint64_t)v21, v22, (uint64_t *)&unk_10099D720);
  uint64_t v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (v23((uint64_t)v12, 1LL, v6) == 1)
  {
    sub_100015794((uint64_t)v21, (uint64_t *)&unk_10099D720);
    if (v23(v22, 1LL, v6) == 1)
    {
      sub_100015794((uint64_t)v12, (uint64_t *)&unk_10099D720);
      return sub_100015794(v48, (uint64_t *)&unk_10099D720);
    }

    goto LABEL_6;
  }

  sub_10001581C((uint64_t)v12, (uint64_t)v18, (uint64_t *)&unk_10099D720);
  if (v23(v22, 1LL, v6) == 1)
  {
    sub_100015794((uint64_t)v21, (uint64_t *)&unk_10099D720);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
LABEL_6:
    sub_100015794((uint64_t)v12, (uint64_t *)&unk_10099D760);
    goto LABEL_7;
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v9, v22, v6);
  uint64_t v40 = sub_100015C48( &qword_10099DA90,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  char v41 = dispatch thunk of static Equatable.== infix(_:_:)(v18, v9, v6, v40);
  char v42 = *(void (**)(char *, uint64_t))(v7 + 8);
  v42(v9, v6);
  sub_100015794((uint64_t)v21, (uint64_t *)&unk_10099D720);
  v42(v18, v6);
  sub_100015794((uint64_t)v12, (uint64_t *)&unk_10099D720);
  if ((v41 & 1) != 0) {
    return sub_100015794(v48, (uint64_t *)&unk_10099D720);
  }
LABEL_7:
  id v24 = sub_10061EC7C();
  uint64_t v25 = v43;
  sub_10001581C(v48, v43, (uint64_t *)&unk_10099D720);
  if (v23(v25, 1LL, v6) == 1)
  {
    Class isa = 0LL;
  }

  else
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v25, v6);
  }

  [v24 setObject:isa forKey:*v44];

  swift_unknownObjectRelease(isa);
  id v27 = sub_10061EC7C();
  id v28 = [v27 stringForKey:SPSettingsServiceStateKey];

  if (!v28)
  {
    if (qword_10099B428 != -1) {
      swift_once(&qword_10099B428, sub_10041E30C);
    }
    id v28 = (id)qword_100A2A980;
  }

  uint64_t v29 = sub_10061F870();
  uint64_t v31 = (int *)v45;
  uint64_t v30 = v46;
  sub_10061FCE4((uint64_t)&v46[*(int *)(v45 + 24)]);
  sub_100620478((uint64_t)v30 + v31[7]);
  uint64_t v32 = sub_100620498();
  char v34 = v33;
  sub_100620788((uint64_t)v30 + v31[9]);
  id v35 = sub_10061EC7C();
  NSString v36 = String._bridgeToObjectiveC()();
  unsigned __int8 v37 = [v35 BOOLForKey:v36];

  *uint64_t v30 = v28;
  v30[1] = v29;
  NSString v38 = (char *)v30 + v31[8];
  *(void *)NSString v38 = v32;
  v38[8] = v34 & 1;
  *((_BYTE *)v30 + v31[10]) = v37;
  sub_100621C1C((uint64_t)v30, v4);
  sub_100015794(v48, (uint64_t *)&unk_10099D720);
  return sub_100621ED0((uint64_t)v30);
}

uint64_t sub_100620D68(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3)
{
  int v5 = a2;
  uint64_t v6 = sub_10061F870();
  if (v6)
  {
    uint64_t v7 = (void *)sub_1006F124C((uint64_t)v6);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v7 = &_swiftEmptySetSingleton;
  }

  int v8 = a1;
  uint64_t v25 = (uint64_t)v7;
  if (v5 == 2)
  {
    char v9 = 0;
  }

  else if ((v5 & 1) != 0)
  {
    id v10 = SPDisabledReasonLowAccountSecurity;
    uint64_t v11 = (void *)sub_1003CEF14((uint64_t)v10);

    id v12 = SPDisabledReasoniCloudSignedOut;
    uint64_t v13 = (void *)sub_1003CEF14((uint64_t)v12);

    if (v11)
    {

      char v9 = 1;
    }

    else
    {
      char v9 = v13 != 0LL;
    }
  }

  else
  {
    char v9 = sub_1000BD9D8(&v24, SPDisabledReasonLowAccountSecurity);
  }

  int v14 = a3;
  if (v8 != 2)
  {
    uint64_t v15 = (id *)&SPDisabledReasoniCloudSignedOut;
    if ((v8 & 1) == 0)
    {
      char v16 = sub_1000BD9D8(&v24, SPDisabledReasoniCloudSignedOut);

      v9 |= v16;
      uint64_t v15 = (id *)&SPDisabledReasonLowAccountSecurity;
    }

    id v17 = *v15;
    id v18 = (void *)sub_1003CEF14((uint64_t)v17);

    v9 |= v18 != 0LL;
  }

  if (v14 != 2)
  {
    if ((v14 & 1) != 0)
    {
      char v21 = sub_1000BD9D8(&v24, SPDisabledReasonUserOptOut);

      v9 |= v21;
    }

    else
    {
      id v19 = SPDisabledReasonUserOptOut;
      uint64_t v20 = (void *)sub_1003CEF14((uint64_t)v19);

      if ((v9 & 1) != 0)
      {

        char v9 = 1;
      }

      else
      {
        char v9 = v20 != 0LL;
      }
    }
  }

  uint64_t v22 = sub_1002FE5EC(v25);
  swift_bridgeObjectRelease();
  sub_10061F9E8((uint64_t)v22);
  return v9 & 1;
}

uint64_t sub_100620F90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100004AEC(&qword_1009B11D0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  sub_100013044(a1, (uint64_t)aBlock);
  uint64_t v8 = swift_allocObject(&unk_10096D150, 24LL, 7LL);
  swift_weakInit(v8 + 16, v2);
  uint64_t v9 = sub_100004AEC(&qword_1009AE058);
  Subscription.init(subscriber:unsubscribeBlock:)(aBlock, sub_100621BF0, v8, v9);
  id v10 = *(dispatch_queue_s **)(v2 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))( (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a2,  v5);
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = (v11 + 24) & ~v11;
  uint64_t v13 = swift_allocObject(&unk_10096D178, v12 + v7, v11 | 7);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = v2;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))( v13 + v12,  (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v5);
  uint64_t v14 = swift_allocObject(&unk_10096D1A0, 32LL, 7LL);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = sub_10043AA68;
  *(void *)(v14 + 24) = v13;
  aBlock[4] = sub_100154688;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100025BD4;
  void aBlock[3] = &unk_10096D1B8;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v10, v15);
  _Block_release(v15);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v14, "", 113LL, 294LL, 32LL, 1LL);
  swift_release();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10062118C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    sub_10062120C(a1);
    return swift_release();
  }

  return result;
}

uint64_t sub_10062120C(uint64_t a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009B11D0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  uint64_t v6 = *(dispatch_queue_s **)(v1 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))( (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v3);
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = (v7 + 24) & ~v7;
  uint64_t v9 = swift_allocObject(&unk_10096D0D8, v8 + v5, v7 | 7);
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v1;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))( v9 + v8,  (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v3);
  uint64_t v10 = swift_allocObject(&unk_10096D100, 32LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = sub_10043A984;
  *(void *)(v10 + 24) = v9;
  aBlock[4] = sub_100095030;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100025BD4;
  void aBlock[3] = &unk_10096D118;
  uint64_t v11 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v6, v11);
  _Block_release(v11);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v10, "", 113LL, 302LL, 32LL, 1LL);
  swift_release();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006213BC(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = a2;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v58 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v62 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v61 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v68 = sub_100004AEC(&qword_1009B11D0);
  uint64_t v64 = *(void *)(v68 - 8);
  uint64_t v12 = *(void *)(v64 + 64);
  uint64_t v13 = __chkstk_darwin(v68);
  __int128 v60 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v66 = (char *)&v46 - v14;
  a1 += 16LL;
  swift_beginAccess(a1, v74, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a1);
  if (result)
  {
    uint64_t v16 = result;
    uint64_t v63 = v9;
    uint64_t v17 = v3;
    swift_beginAccess(result + 16, v73, 0LL, 0LL);
    uint64_t v18 = *(void *)(v16 + 16);
    swift_bridgeObjectRetain(v18);
    swift_release(v16);
    uint64_t v19 = *(void *)(v18 + 16);
    if (v19)
    {
      uint64_t v56 = sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
      uint64_t v20 = *(unsigned __int8 *)(v64 + 80);
      uint64_t v46 = v18;
      char v21 = (char *)(v18 + ((v20 + 32) & ~v20));
      uint64_t v55 = *(void *)(v64 + 72);
      uint64_t v53 = v20 | 7;
      uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v64 + 16);
      uint64_t v54 = (v20 + 16) & ~v20;
      unsigned int v51 = enum case for DispatchQoS.QoSClass.default(_:);
      unint64_t v50 = (v12 + v54 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v49 = v50 + 40;
      uint64_t v48 = v17;
      id v47 = v5;
      uint64_t v22 = v64;
      uint64_t v23 = v68;
      uint64_t v57 = v7;
      do
      {
        uint64_t v67 = v21;
        uint64_t v65 = v19;
        id v24 = v66;
        uint64_t v25 = v52;
        v52(v66, v21, v23);
        uint64_t v26 = v62;
        id v27 = v61;
        (*(void (**)(char *, void, uint64_t))(v62 + 104))(v61, v51, v10);
        uint64_t v28 = static OS_dispatch_queue.global(qos:)(v27);
        (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v10);
        uint64_t v29 = v60;
        v25(v60, v24, v68);
        sub_100013044(v59, (uint64_t)&v72);
        uint64_t v30 = swift_allocObject(&unk_10096D240, v49, v53);
        (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v30 + v54, v29, v68);
        sub_100012EC0(&v72, v30 + v50);
        aBlock[4] = sub_100622000;
        uint64_t v71 = v30;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256LL;
        aBlock[2] = sub_1001C31E8;
        void aBlock[3] = &unk_10096D258;
        uint64_t v31 = v10;
        uint64_t v32 = _Block_copy(aBlock);
        static DispatchQoS.unspecified.getter(v32);
        uint64_t v69 = _swiftEmptyArrayStorage;
        uint64_t v33 = v6;
        uint64_t v34 = sub_100015C48( (unint64_t *)&qword_10099FAB0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v35 = sub_100004AEC((uint64_t *)&unk_1009AB860);
        uint64_t v36 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
        unsigned __int8 v37 = v47;
        uint64_t v38 = v48;
        uint64_t v39 = v58;
        uint64_t v40 = v63;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v69, v35, v36, v48, v34);
        char v41 = (void *)v28;
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v40, v37, v32);
        uint64_t v23 = v68;
        char v42 = v32;
        uint64_t v10 = v31;
        uint64_t v22 = v64;
        _Block_release(v42);

        uint64_t v43 = v57;
        (*(void (**)(char *, uint64_t))(v39 + 8))(v37, v38);
        uint64_t v44 = *(void (**)(char *, uint64_t))(v43 + 8);
        uint64_t v45 = v65;
        uint64_t v6 = v33;
        v44(v40, v33);
        (*(void (**)(char *, uint64_t))(v22 + 8))(v66, v23);
        swift_release(v71);
        char v21 = &v67[v55];
        uint64_t v19 = v45 - 1;
      }

      while (v19);
    }

    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_100621914(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_100004AEC(&qword_1009B11D0);
  Subscription.subscriber.getter(v9, v3);
  uint64_t v4 = *sub_100012ED8(v9, v9[3]);
  uint64_t v5 = a2[3];
  uint64_t v6 = a2[4];
  uint64_t v7 = sub_100012ED8(a2, v5);
  sub_1000371DC((uint64_t)v7, 4LL, 1LL, 0LL, 0LL, v4, v5, v6);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v9);
}

uint64_t sub_1006219A0()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  return swift_deallocClassInstance(v0, 64LL, 7LL);
}

uint64_t type metadata accessor for ServiceStateProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd20ServiceStateProvider);
}

uint64_t sub_100621A04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100620F90(a1, a2);
}

uint64_t sub_100621A24(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100015C48( &qword_1009B8588,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for ServiceStateProvider,  (uint64_t)&unk_100810298);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100621A60()
{
  uint64_t result = sub_100621A7C();
  qword_100A2AF88 = result;
  return result;
}

uint64_t sub_100621A7C()
{
  uint64_t v0 = SPSettingsSharedSuiteName;
  static String._unconditionallyBridgeFromObjectiveC(_:)(SPSettingsSharedSuiteName);
  uint64_t v2 = v1;
  id v3 = objc_allocWithZone(&OBJC_CLASS___NSUserDefaults);
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  id v5 = [v3 initWithSuiteName:v4];

  if (v5) {
    return (uint64_t)v5;
  }
  _StringGuts.grow(_:)(49LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v7._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000002FLL,  0x800000010086B510LL,  "searchpartyd/ServiceStateProvider.swift",  39LL,  2LL,  353LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_100621BA4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100621BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100621BC4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100621BCC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100621BF0(uint64_t a1)
{
  return sub_10062118C(a1, v1);
}

uint64_t sub_100621C0C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100621C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v22 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v27[3] = type metadata accessor for ServiceStateConfigurationLayer(0LL);
  v27[4] = &off_10096D280;
  uint64_t v11 = sub_10000A7C8(v27);
  sub_100621F0C(a1, (uint64_t)v11);
  uint64_t v21 = *(void *)(a2 + 24);
  uint64_t v12 = swift_allocObject(&unk_10096D150, 24LL, 7LL);
  swift_weakInit(v12 + 16, a2);
  sub_100013044((uint64_t)v27, (uint64_t)v26);
  uint64_t v13 = swift_allocObject(&unk_10096D1F0, 64LL, 7LL);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = v12;
  sub_100012EC0(v26, v13 + 24);
  aBlock[4] = sub_100621F7C;
  uint64_t v25 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  void aBlock[3] = &unk_10096D208;
  uint64_t v14 = _Block_copy(aBlock);
  uint64_t v15 = swift_retain(v12);
  static DispatchQoS.unspecified.getter(v15);
  uint64_t v23 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_100015C48( (unint64_t *)&qword_10099FAB0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v18 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v4, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v6, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v19 = v25;
  swift_release(v12);
  swift_release(v19);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
}

uint64_t type metadata accessor for ServiceStateConfigurationLayer(uint64_t a1)
{
  uint64_t result = qword_1009B85E8;
  if (!qword_1009B85E8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ServiceStateConfigurationLayer);
  }
  return result;
}

uint64_t sub_100621ED0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ServiceStateConfigurationLayer(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100621F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ServiceStateConfigurationLayer(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100621F50()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100621F7C()
{
  return sub_1006213BC(*(void *)(v0 + 16), v0 + 24);
}

uint64_t sub_100621F88()
{
  uint64_t v1 = sub_100004AEC(&qword_1009B11D0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 40, v5);
}

uint64_t sub_100622000()
{
  uint64_t v1 = *(void *)(sub_100004AEC(&qword_1009B11D0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_100621914(v0 + v2, (void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100622044(uint64_t a1, uint64_t a2)
{
  return sub_10061F300(a1, a2, v2);
}

char *sub_10062204C(char *a1, char **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = &v4[(v3 + 16LL) & ~(unint64_t)v3];
    swift_retain();
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[1];
    *((void *)a1 + 1) = v8;
    uint64_t v9 = a3[6];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID(0LL);
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v13 + 48);
    uint64_t v15 = v4;
    __n128 v16 = swift_bridgeObjectRetain(v8);
    if (v14(v11, 1LL, v12, v16))
    {
      uint64_t v17 = sub_100004AEC(&qword_10099D8A0);
      memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    uint64_t v18 = a3[7];
    uint64_t v19 = &v7[v18];
    uint64_t v20 = (char *)a2 + v18;
    uint64_t v21 = type metadata accessor for Date(0LL);
    uint64_t v22 = *(void *)(v21 - 8);
    uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
    if (v23(v20, 1LL, v21))
    {
      uint64_t v24 = sub_100004AEC((uint64_t *)&unk_10099D720);
      memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, v21);
    }

    uint64_t v25 = a3[8];
    uint64_t v26 = a3[9];
    id v27 = &v7[v25];
    uint64_t v28 = (uint64_t)a2 + v25;
    *(void *)id v27 = *(void *)v28;
    v27[8] = *(_BYTE *)(v28 + 8);
    uint64_t v29 = &v7[v26];
    uint64_t v30 = (char *)a2 + v26;
    if (v23((char *)a2 + v26, 1LL, v21))
    {
      uint64_t v31 = sub_100004AEC((uint64_t *)&unk_10099D720);
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v29, v30, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v29, 0LL, 1LL, v21);
    }

    v7[a3[10]] = *((_BYTE *)a2 + a3[10]);
  }

  return v7;
}

uint64_t sub_100622274(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease(*(void *)(a1 + 8));
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = a1 + a2[7];
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1LL, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  uint64_t v11 = a1 + a2[9];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v10)(v11, 1LL, v8);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v11, v8);
  }
  return result;
}

void *sub_100622370(void *a1, uint64_t a2, int *a3)
{
  uint64_t v7 = *(void **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v6;
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v12 + 48);
  id v14 = v7;
  __n128 v15 = swift_bridgeObjectRetain(v6);
  if (v13(v10, 1LL, v11, v15))
  {
    uint64_t v16 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v17 = a3[7];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (const void *)(a2 + v17);
  uint64_t v20 = type metadata accessor for Date(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48);
  if (v22(v19, 1LL, v20))
  {
    uint64_t v23 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v18, v19, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
  }

  uint64_t v24 = a3[8];
  uint64_t v25 = a3[9];
  uint64_t v26 = (char *)a1 + v24;
  uint64_t v27 = a2 + v24;
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = *(_BYTE *)(v27 + 8);
  uint64_t v28 = (char *)a1 + v25;
  uint64_t v29 = (const void *)(a2 + v25);
  if (v22((const void *)(a2 + v25), 1LL, v20))
  {
    uint64_t v30 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v21 + 16))(v28, v29, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v28, 0LL, 1LL, v20);
  }

  *((_BYTE *)a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_100622568(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v8 = v7;

  uint64_t v9 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __n128 v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1LL, v13);
  int v17 = v15(v12, 1LL, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    uint64_t v18 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v14 + 24))(v11, v12, v13);
LABEL_7:
  uint64_t v19 = a3[7];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  uint64_t v22 = type metadata accessor for Date(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  int v25 = v24(v20, 1LL, v22);
  int v26 = v24(v21, 1LL, v22);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0LL, 1LL, v22);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v26)
  {
    (*(void (**)(void *, uint64_t))(v23 + 8))(v20, v22);
LABEL_12:
    uint64_t v27 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v20, v21, *(void *)(*(void *)(v27 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(void *, void *, uint64_t))(v23 + 24))(v20, v21, v22);
LABEL_13:
  uint64_t v28 = a3[8];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = (uint64_t *)(a2 + v28);
  uint64_t v31 = *v30;
  *(_BYTE *)(v29 + 8) = *((_BYTE *)v30 + 8);
  *(void *)uint64_t v29 = v31;
  uint64_t v32 = a3[9];
  uint64_t v33 = (void *)(a1 + v32);
  uint64_t v34 = (void *)(a2 + v32);
  int v35 = v24((void *)(a1 + v32), 1LL, v22);
  int v36 = v24(v34, 1LL, v22);
  if (!v35)
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 24))(v33, v34, v22);
      goto LABEL_19;
    }

    (*(void (**)(void *, uint64_t))(v23 + 8))(v33, v22);
    goto LABEL_18;
  }

  if (v36)
  {
LABEL_18:
    uint64_t v37 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(void *, void *, uint64_t))(v23 + 16))(v33, v34, v22);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v33, 0LL, 1LL, v22);
LABEL_19:
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

_OWORD *sub_100622848(_OWORD *a1, char *a2, int *a3)
{
  *a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  id v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9))
  {
    uint64_t v11 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for Date(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  int v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v17(v14, 1LL, v15))
  {
    uint64_t v18 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
  }

  uint64_t v19 = a3[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = (char *)a1 + v19;
  uint64_t v22 = &a2[v19];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  uint64_t v23 = (char *)a1 + v20;
  uint64_t v24 = &a2[v20];
  if (v17(&a2[v20], 1LL, v15))
  {
    uint64_t v25 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v23, v24, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v23, 0LL, 1LL, v15);
  }

  *((_BYTE *)a1 + a3[10]) = a2[a3[10]];
  return a1;
}

uint64_t sub_100622A2C(uint64_t a1, void *a2, int *a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *a2;

  *(void *)(a1 + 8) = a2[1];
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[6];
  id v8 = (void *)(a1 + v7);
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = a3[7];
  int v17 = (void *)(a1 + v16);
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for Date(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1LL, v19);
  int v23 = v21(v18, 1LL, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v23)
  {
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
LABEL_12:
    uint64_t v24 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(void *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
LABEL_13:
  uint64_t v25 = a3[8];
  uint64_t v26 = a3[9];
  uint64_t v27 = a1 + v25;
  uint64_t v28 = (char *)a2 + v25;
  *(void *)uint64_t v27 = *(void *)v28;
  *(_BYTE *)(v27 + 8) = v28[8];
  uint64_t v29 = (void *)(a1 + v26);
  uint64_t v30 = (char *)a2 + v26;
  int v31 = v21((void *)(a1 + v26), 1LL, v19);
  int v32 = v21(v30, 1LL, v19);
  if (!v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, char *, uint64_t))(v20 + 40))(v29, v30, v19);
      goto LABEL_19;
    }

    (*(void (**)(void *, uint64_t))(v20 + 8))(v29, v19);
    goto LABEL_18;
  }

  if (v32)
  {
LABEL_18:
    uint64_t v33 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(void *, char *, uint64_t))(v20 + 32))(v29, v30, v19);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v29, 0LL, 1LL, v19);
LABEL_19:
  *(_BYTE *)(a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

uint64_t sub_100622CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100622D08);
}

uint64_t sub_100622D08(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 2147483646)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }

  else
  {
    uint64_t v9 = sub_100004AEC(&qword_10099D8A0);
    uint64_t v10 = *(void *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      uint64_t v11 = v9;
      uint64_t v12 = *(int *)(a3 + 24);
    }

    else
    {
      uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D720);
      uint64_t v10 = *(void *)(v11 - 8);
      uint64_t v12 = *(int *)(a3 + 28);
    }

    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a1[v12], a2, v11);
  }

uint64_t sub_100622DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100622DC8);
}

char *sub_100622DC8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)uint64_t result = a2;
  }

  else
  {
    uint64_t v8 = sub_100004AEC(&qword_10099D8A0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 24);
    }

    else
    {
      uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D720);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 28);
    }

    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }

  return result;
}

void sub_100622E6C(uint64_t a1)
{
  v6[0] = "\b";
  v6[1] = "\b";
  sub_10009361C( 319LL,  (unint64_t *)&qword_1009AFA50,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  if (v3 <= 0x3F)
  {
    v6[2] = *(void *)(v2 - 8) + 64LL;
    sub_10009361C( 319LL,  (unint64_t *)&qword_1009A09E0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    if (v5 <= 0x3F)
    {
      uint64_t v7 = *(void *)(v4 - 8) + 64LL;
      uint64_t v8 = &unk_100810348;
      uint64_t v9 = v7;
      uint64_t v10 = &unk_100810360;
      swift_initStructMetadata(a1, 256LL, 7LL, v6, a1 + 16);
    }
  }

uint64_t sub_100622F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100622F54);
}

uint64_t sub_100622F54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t sub_100622F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100622F9C);
}

uint64_t sub_100622F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for MetricsEndpoint(uint64_t a1)
{
  uint64_t result = qword_1009B8690;
  if (!qword_1009B8690) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MetricsEndpoint);
  }
  return result;
}

void *sub_100623018(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v18 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *(void *)a1 = *a2;
    *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    uint64_t v7 = a3[6];
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = type metadata accessor for Date(0LL);
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL);
    v11(v8, v9, v10);
    uint64_t v12 = a3[7];
    int v13 = (void *)((char *)v4 + v12);
    int v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t v15 = type metadata accessor for DeviceEvent.Location(0LL);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
    {
      uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009AA880);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      *(_OWORD *)int v13 = *(_OWORD *)v14;
      void v13[2] = v14[2];
      v11((uint64_t)v13 + *(int *)(v15 + 28), (uint64_t)v14 + *(int *)(v15 + 28), v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
    }

    uint64_t v19 = a3[8];
    uint64_t v20 = (char *)v4 + v19;
    uint64_t v21 = (uint64_t)a2 + v19;
    uint64_t v22 = type metadata accessor for UUID(0LL);
    int v23 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16LL);
    v23(v20, v21, v22);
    uint64_t v24 = type metadata accessor for BeaconIdentifier(0LL);
    v23(&v20[*(int *)(v24 + 20)], v21 + *(int *)(v24 + 20), v22);
    v11((uint64_t)v4 + a3[9], (uint64_t)a2 + a3[9], v10);
  }

  return v4;
}

uint64_t type metadata accessor for DeviceEvent.Location(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009B87C8, (uint64_t)&nominal type descriptor for DeviceEvent.Location);
}

uint64_t sub_1006231D4(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for Date(0LL);
  int v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v13(v4, v5);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for DeviceEvent.Location(0LL);
  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  uint64_t v11 = type metadata accessor for BeaconIdentifier(0LL);
  v10(v8 + *(int *)(v11 + 20), v9);
  return ((uint64_t (*)(uint64_t, uint64_t))v13)(a1 + a2[9], v5);
}

uint64_t sub_1006232CC(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)(a1 + v11);
  int v13 = (void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for DeviceEvent.Location(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100004AEC((uint64_t *)&unk_1009AA880);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v17 = a3[8];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for UUID(0LL);
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16LL);
  v21(v18, v19, v20);
  uint64_t v22 = type metadata accessor for BeaconIdentifier(0LL);
  v21(v18 + *(int *)(v22 + 20), v19 + *(int *)(v22 + 20), v20);
  v10((char *)(a1 + a3[9]), (char *)(a2 + a3[9]), v9);
  return a1;
}

uint64_t sub_100623448(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v6;
  *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v11 + 24);
  uint64_t v31 = v10;
  v30(v8, v9);
  uint64_t v12 = a3[7];
  int v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for DeviceEvent.Location(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1LL, v15);
  int v19 = v17(v14, 1LL, v15);
  if (!v18)
  {
    if (!v19)
    {
      *int v13 = *v14;
      v13[1] = v14[1];
      void v13[2] = v14[2];
      uint64_t v22 = (void (*)(uint64_t, char *, uint64_t))v30;
      uint64_t v20 = v31;
      ((void (*)(char *, char *, uint64_t))v30)( (char *)v13 + *(int *)(v15 + 28),  (char *)v14 + *(int *)(v15 + 28),  v31);
      goto LABEL_8;
    }

    sub_100018C68((uint64_t)v13, type metadata accessor for DeviceEvent.Location);
    goto LABEL_6;
  }

  if (v19)
  {
LABEL_6:
    uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009AA880);
    memcpy(v13, v14, *(void *)(*(void *)(v21 - 8) + 64LL));
    uint64_t v20 = v31;
    goto LABEL_7;
  }

  *int v13 = *v14;
  v13[1] = v14[1];
  void v13[2] = v14[2];
  uint64_t v20 = v31;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))( (char *)v13 + *(int *)(v15 + 28),  (char *)v14 + *(int *)(v15 + 28),  v31);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
LABEL_7:
  uint64_t v22 = (void (*)(uint64_t, char *, uint64_t))v30;
LABEL_8:
  uint64_t v23 = a3[8];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = (uint64_t)a2 + v23;
  uint64_t v26 = type metadata accessor for UUID(0LL);
  uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 24LL);
  v27(v24, v25, v26);
  uint64_t v28 = type metadata accessor for BeaconIdentifier(0LL);
  v27(v24 + *(int *)(v28 + 20), v25 + *(int *)(v28 + 20), v26);
  v22(a1 + a3[9], (char *)a2 + a3[9], v20);
  return a1;
}

uint64_t sub_10062364C(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)(a1 + v11);
  int v13 = (void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for DeviceEvent.Location(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100004AEC((uint64_t *)&unk_1009AA880);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v17 = a3[8];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for UUID(0LL);
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32LL);
  v21(v18, v19, v20);
  uint64_t v22 = type metadata accessor for BeaconIdentifier(0LL);
  v21(v18 + *(int *)(v22 + 20), v19 + *(int *)(v22 + 20), v20);
  v10((char *)(a1 + a3[9]), (char *)(a2 + a3[9]), v9);
  return a1;
}

uint64_t sub_1006237C8(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v10 + 40);
  uint64_t v30 = v9;
  v29(v7, v8);
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)(a1 + v11);
  int v13 = (void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for DeviceEvent.Location(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1LL, v14);
  int v18 = v16(v13, 1LL, v14);
  if (!v17)
  {
    if (!v18)
    {
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
      v12[2] = v13[2];
      uint64_t v21 = (void (*)(uint64_t, uint64_t, uint64_t))v29;
      uint64_t v19 = v30;
      ((void (*)(char *, char *, uint64_t))v29)( (char *)v12 + *(int *)(v14 + 28),  (char *)v13 + *(int *)(v14 + 28),  v30);
      goto LABEL_8;
    }

    sub_100018C68((uint64_t)v12, type metadata accessor for DeviceEvent.Location);
    goto LABEL_6;
  }

  if (v18)
  {
LABEL_6:
    uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009AA880);
    memcpy(v12, v13, *(void *)(*(void *)(v20 - 8) + 64LL));
    uint64_t v19 = v30;
    goto LABEL_7;
  }

  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  v12[2] = v13[2];
  uint64_t v19 = v30;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))( (char *)v12 + *(int *)(v14 + 28),  (char *)v13 + *(int *)(v14 + 28),  v30);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
LABEL_7:
  uint64_t v21 = (void (*)(uint64_t, uint64_t, uint64_t))v29;
LABEL_8:
  uint64_t v22 = a3[8];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  uint64_t v25 = type metadata accessor for UUID(0LL);
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 40LL);
  v26(v23, v24, v25);
  uint64_t v27 = type metadata accessor for BeaconIdentifier(0LL);
  v26(v23 + *(int *)(v27 + 20), v24 + *(int *)(v27 + 20), v25);
  v21(a1 + a3[9], a2 + a3[9], v19);
  return a1;
}

uint64_t sub_1006239B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006239C0);
}

uint64_t sub_1006239C0(uint64_t a1, uint64_t a2, int *a3)
{
  if ((_DWORD)a2 == 250)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 9);
    if (v4 >= 6) {
      return v4 - 5;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a3[6];
    }

    else
    {
      uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009AA880);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a3[7];
      }

      else
      {
        uint64_t v10 = type metadata accessor for BeaconIdentifier(0LL);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a3[8];
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t sub_100623A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100623A8C);
}

uint64_t sub_100623A8C(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 250)
  {
    *(_BYTE *)(result + 9) = a2 + 5;
  }

  else
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a4[6];
    }

    else
    {
      uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009AA880);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a4[7];
      }

      else
      {
        uint64_t v10 = type metadata accessor for BeaconIdentifier(0LL);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a4[8];
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

uint64_t type metadata accessor for DeviceEvent(uint64_t a1)
{
  return sub_10008BED8(a1, (uint64_t *)&unk_1009B8720, (uint64_t)&nominal type descriptor for DeviceEvent);
}

void sub_100623B60(uint64_t a1)
{
  v9[0] = "\t";
  v9[1] = &unk_100810438;
  uint64_t v2 = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(v2 - 8) + 64LL;
    _OWORD v9[2] = v4;
    sub_100623C14(319LL);
    if (v6 <= 0x3F)
    {
      v9[3] = *(void *)(v5 - 8) + 64LL;
      uint64_t v7 = type metadata accessor for BeaconIdentifier(319LL);
      if (v8 <= 0x3F)
      {
        v9[4] = *(void *)(v7 - 8) + 64LL;
        void v9[5] = v4;
        swift_initStructMetadata(a1, 256LL, 6LL, v9, a1 + 16);
      }
    }
  }

void sub_100623C14(uint64_t a1)
{
  if (!qword_1009B8730)
  {
    uint64_t v2 = type metadata accessor for DeviceEvent.Location(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1009B8730);
    }
  }

uint64_t sub_100623C68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100623C74);
}

uint64_t sub_100623C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 28);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v4, a2, v5);
}

uint64_t sub_100623CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100623CC0);
}

uint64_t sub_100623CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 28);
  uint64_t v6 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, a2, a2, v6);
}

uint64_t sub_100623D04(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B8868);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_100625F94();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for DeviceEvent.Location.CodingKeys,  &type metadata for DeviceEvent.Location.CodingKeys,  v11,  v9,  v10);
  double v12 = *v3;
  char v23 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v23, v5, v12);
  if (!v2)
  {
    double v13 = v3[1];
    char v22 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v22, v5, v13);
    double v14 = v3[2];
    char v21 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(&v21, v5, v14);
    uint64_t v15 = (char *)v3 + *(int *)(type metadata accessor for DeviceEvent.Location(0LL) + 28);
    char v20 = 3;
    uint64_t v16 = type metadata accessor for Date(0LL);
    uint64_t v17 = sub_100007864( &qword_10099DA40,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v20, v5, v16, v17);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_100623EA8()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0LL;
  }
  Hasher._combine(_:)(v1);
  if ((v0[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v0[1];
  }
  else {
    Swift::UInt64 v2 = 0LL;
  }
  Hasher._combine(_:)(v2);
  if ((v0[2] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v0[2];
  }
  else {
    Swift::UInt64 v3 = 0LL;
  }
  Hasher._combine(_:)(v3);
  type metadata accessor for DeviceEvent.Location(0LL);
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v7, v4, v5);
  return Hasher._finalize()();
}

uint64_t sub_100623F64@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v24 = type metadata accessor for Date(0LL);
  uint64_t v22 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  char v23 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = sub_100004AEC(&qword_1009B8858);
  uint64_t v4 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DeviceEvent.Location(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (double *)((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100012ED8(a1, v10);
  unint64_t v12 = sub_100625F94();
  uint64_t v13 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for DeviceEvent.Location.CodingKeys,  &type metadata for DeviceEvent.Location.CodingKeys,  v12,  v10,  v11);
  if (!v13)
  {
    uint64_t v26 = v7;
    uint64_t v14 = v4;
    uint64_t v16 = v23;
    uint64_t v15 = v24;
    char v30 = 0;
    uint64_t v17 = v25;
    double *v9 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v25);
    char v29 = 1;
    v9[1] = KeyedDecodingContainer.decode(_:forKey:)(&v29, v17);
    char v28 = 2;
    _OWORD v9[2] = KeyedDecodingContainer.decode(_:forKey:)(&v28, v17);
    char v27 = 3;
    uint64_t v19 = sub_100007864( &qword_10099DA70,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v15, &v27, v17, v15, v19);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v17);
    uint64_t v20 = v21;
    (*(void (**)(char *, void *, uint64_t))(v22 + 32))((char *)v9 + *(int *)(v26 + 28), v16, v15);
    sub_10002218C((uint64_t)v9, v20, type metadata accessor for DeviceEvent.Location);
  }

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

Swift::Int sub_1006241E4()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100624228()
{
}

Swift::Int sub_100624250(uint64_t a1)
{
  Swift::UInt32 v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100624290@<X0>(unsigned int *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100625E2C(*a1);
  *a2 = result;
  return result;
}

void sub_1006242B8(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1006242C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100626604();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100624320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100626604();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10062436C()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10062439C + 4 * byte_1008103D0[*v0]))( 0x6E776F6E6B6E752ELL,  0xE800000000000000LL);
}

uint64_t sub_10062439C()
{
  return 0x7463656E6E6F632ELL;
}

uint64_t sub_1006243B0()
{
  return 0x6E6E6F637369642ELL;
}

uint64_t sub_1006243D0()
{
  return 0x657463657465642ELL;
}

uint64_t sub_1006243F4()
{
  return 0x657070617369642ELL;
}

uint64_t sub_100624414()
{
  return 0x726961702ELL;
}

uint64_t sub_100624428()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100624458 + 4 * byte_1008103D6[*v0]))( 0x656475746974616CLL,  0xE800000000000000LL);
}

uint64_t sub_100624458()
{
  return 0x64757469676E6F6CLL;
}

unint64_t sub_100624474()
{
  return 0xD000000000000012LL;
}

uint64_t sub_100624490()
{
  return 0x6D617473656D6974LL;
}

uint64_t sub_1006244B0(uint64_t a1)
{
  unint64_t v2 = sub_100625F94();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006244D8(uint64_t a1)
{
  unint64_t v2 = sub_100625F94();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100624500@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100623F64(a1, a2);
}

uint64_t sub_100624514(void *a1)
{
  return sub_100623D04(a1);
}

uint64_t sub_100624530()
{
  return sub_100007864(&qword_1009B8808, type metadata accessor for DeviceEvent.Location, (uint64_t)&unk_10081045C);
}

void sub_10062455C()
{
  uint64_t v1 = sub_100004AEC((uint64_t *)&unk_1009AA880);
  __chkstk_darwin(v1);
  _StringGuts.grow(_:)(44LL);
  swift_bridgeObjectRelease();
  type metadata accessor for DeviceEvent(0LL);
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x656372756F73202CLL;
  v5._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v5);
  __asm { BR              X10 }

uint64_t sub_10062469C()
{
  v6._countAndFlagsBits = 0x7463656E6E6F632ELL;
  v6._object = v4;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x697461636F6C202CLL;
  v7._object = (void *)0xEC000000203A6E6FLL;
  String.append(_:)(v7);
  sub_10001581C(v1 + *(int *)(v3 + 28), v2, (uint64_t *)&unk_1009AA880);
  v8._countAndFlagsBits = String.init<A>(describing:)(v2, v0);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 62LL;
  v9._object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  return *(void *)(v5 - 64);
}

void sub_1006247B0()
{
  uint64_t v1 = sub_100004AEC((uint64_t *)&unk_1009AA880);
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for DeviceEvent.Location(0LL);
  __chkstk_darwin(v2);
  uint64_t v3 = sub_100004AEC(&qword_1009B9A10);
  uint64_t inited = swift_initStackObject(v3, v6);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  *(void *)(inited + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 29556LL;
  *(void *)(inited + 40) = 0xE200000000000000LL;
  type metadata accessor for DeviceEvent(0LL);
  *(void *)(inited + 48) = Date.description.getter();
  *(void *)(inited + 56) = v5;
  *(void *)(inited + 64) = 0x656372756F73LL;
  *(void *)(inited + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xE600000000000000LL;
  __asm { BR              X12 }

unint64_t sub_1006248D0@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v5 + 80) = 0x7463656E6E6F632ELL;
  *(void *)(v5 + 88) = a1;
  unint64_t v9 = sub_100412D14(v5);
  sub_10001581C(v3 + *(int *)(v6 + 28), v2, (uint64_t *)&unk_1009AA880);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v2, 1LL, v4) == 1)
  {
    sub_100015794(v2, (uint64_t *)&unk_1009AA880);
  }

  else
  {
    sub_10002218C(v2, v1, type metadata accessor for DeviceEvent.Location);
    *(void *)(v8 - 176) = 0LL;
    *(void *)(v8 - 168) = 0xE000000000000000LL;
    Double.write<A>(to:)( v8 - 176,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    v10._countAndFlagsBits = 44LL;
    v10._object = (void *)0xE100000000000000LL;
    String.append(_:)(v10);
    Double.write<A>(to:)( v8 - 176,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    v11._countAndFlagsBits = 44LL;
    v11._object = (void *)0xE100000000000000LL;
    String.append(_:)(v11);
    Double.write<A>(to:)( v8 - 176,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t v12 = *(void *)(v8 - 176);
    uint64_t v13 = *(void *)(v8 - 168);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
    *(void *)(v8 - 176) = v9;
    sub_10005C260(v12, v13, 6516588LL, 0xE300000000000000LL, isUniquelyReferenced_nonNull_native);
    unint64_t v9 = *(void *)(v8 - 176);
    swift_bridgeObjectRelease();
    sub_100018C68(v1, type metadata accessor for DeviceEvent.Location);
  }

  return v9;
}

uint64_t sub_100624A9C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B8838);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_100625E3C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for DeviceEvent.CodingKeys,  &type metadata for DeviceEvent.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = *((unsigned __int8 *)v3 + 8);
  char v35 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v35, v5);
  if (!v2)
  {
    char v34 = *((_BYTE *)v3 + 9);
    char v33 = 1;
    unint64_t v14 = sub_100625F50();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v33, v5, &type metadata for DeviceEventSource, v14);
    uint64_t v15 = (int *)type metadata accessor for DeviceEvent(0LL);
    uint64_t v16 = (uint64_t)v3 + v15[6];
    char v32 = 2;
    uint64_t v17 = type metadata accessor for Date(0LL);
    uint64_t v18 = sub_100007864( &qword_10099DA40,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v32, v5, v17, v18);
    uint64_t v28 = v17;
    uint64_t v19 = (uint64_t)v3 + v15[7];
    char v31 = 3;
    uint64_t v20 = type metadata accessor for DeviceEvent.Location(0LL);
    uint64_t v21 = sub_100007864(&qword_1009B8848, type metadata accessor for DeviceEvent.Location, (uint64_t)&unk_1008104C4);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v19, &v31, v5, v20, v21);
    uint64_t v22 = (uint64_t)v3 + v15[8];
    char v30 = 4;
    uint64_t v23 = type metadata accessor for BeaconIdentifier(0LL);
    uint64_t v24 = sub_100007864(&qword_1009A96D8, type metadata accessor for BeaconIdentifier, (uint64_t)&unk_1007FE0D4);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v22, &v30, v5, v23, v24);
    uint64_t v25 = (uint64_t)v3 + v15[9];
    char v29 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v29, v5, v28, v18);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_100624D3C()
{
  if (*(_BYTE *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt64 v1 = *(void *)v0;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }

  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 9));
  type metadata accessor for DeviceEvent(0LL);
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v7, v2, v3);
  sub_10062582C((uint64_t)v7, type metadata accessor for DeviceEvent.Location, (uint64_t *)&unk_1009AA880);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v7, v4, v5);
  type metadata accessor for BeaconIdentifier(0LL);
  dispatch thunk of Hashable.hash(into:)(v7, v4, v5);
  dispatch thunk of Hashable.hash(into:)(v7, v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_100624EBC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v44 = type metadata accessor for BeaconIdentifier(0LL);
  __chkstk_darwin(v44);
  uint64_t v43 = (uint64_t *)((char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009AA880);
  __chkstk_darwin(v4);
  uint64_t v45 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v46 = *(void *)(v6 - 8);
  uint64_t v47 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v40 - v10;
  uint64_t v48 = sub_100004AEC(&qword_1009B8818);
  uint64_t v12 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  unint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = (int *)type metadata accessor for DeviceEvent(0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = a1[3];
  uint64_t v18 = a1[4];
  unint64_t v50 = a1;
  sub_100012ED8(a1, v19);
  unint64_t v20 = sub_100625E3C();
  unint64_t v49 = v14;
  uint64_t v21 = v51;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for DeviceEvent.CodingKeys,  &type metadata for DeviceEvent.CodingKeys,  v20,  v19,  v18);
  if (v21) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v50);
  }
  uint64_t v22 = v11;
  uint64_t v23 = v12;
  unsigned int v51 = v9;
  uint64_t v25 = v47;
  uint64_t v24 = v48;
  BYTE1(v5_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = 0;
  *(void *)uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)((char *)&v57 + 1, v48);
  v17[8] = v26 & 1;
  char v56 = 1;
  unint64_t v27 = sub_100625E80();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v57,  &type metadata for DeviceEventSource,  &v56,  v24,  &type metadata for DeviceEventSource,  v27);
  v17[9] = v57;
  char v55 = 2;
  uint64_t v28 = sub_100007864( &qword_10099DA70,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v22, v25, &v55, v24, v25, v28);
  uint64_t v40 = v28;
  char v41 = v17;
  char v29 = *(void (**)(char *, void *, uint64_t))(v46 + 32);
  v29(&v17[v15[6]], v22, v25);
  uint64_t v30 = type metadata accessor for DeviceEvent.Location(0LL);
  char v54 = 3;
  uint64_t v31 = sub_100007864(&qword_1009B8830, type metadata accessor for DeviceEvent.Location, (uint64_t)&unk_1008104EC);
  uint64_t v32 = (uint64_t)v45;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v30, &v54, v24, v30, v31);
  sub_100625EC4(v32, (uint64_t)&v41[v15[7]]);
  char v53 = 4;
  uint64_t v33 = sub_100007864(&qword_1009AF5E8, type metadata accessor for BeaconIdentifier, (uint64_t)&unk_1007FE0FC);
  char v34 = v43;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v43, v44, &v53, v48, v44, v33);
  sub_10002218C((uint64_t)v34, (uint64_t)&v41[v15[8]], type metadata accessor for BeaconIdentifier);
  char v52 = 5;
  char v35 = v51;
  uint64_t v36 = v48;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v51, v25, &v52, v48, v25, v40);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v49, v36);
  uint64_t v37 = v15[9];
  uint64_t v38 = (uint64_t)v41;
  v29(&v41[v37], v35, v25);
  sub_100625F0C(v38, v42);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v50);
  return sub_100018C68(v38, type metadata accessor for DeviceEvent);
}

uint64_t sub_1006253C4()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1006253F4 + 4 * byte_1008103E6[*v0]))( 0x6449746E657665LL,  0xE700000000000000LL);
}

uint64_t sub_1006253F4()
{
  return 0x656372756F73LL;
}

uint64_t sub_100625408()
{
  return 0x6D617473656D6974LL;
}

uint64_t sub_100625424()
{
  return 0x6E6F697461636F6CLL;
}

unint64_t sub_10062543C()
{
  return 0xD000000000000010LL;
}

uint64_t sub_100625458()
{
  return 0x6144657461647075LL;
}

uint64_t sub_100625474@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10062637C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100625498(uint64_t a1)
{
  unint64_t v2 = sub_100625E3C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006254C0(uint64_t a1)
{
  unint64_t v2 = sub_100625E3C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1006254E8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100624EBC(a1, a2);
}

uint64_t sub_1006254FC(void *a1)
{
  return sub_100624A9C(a1);
}

uint64_t sub_100625518(uint64_t a1)
{
  if (*(_BYTE *)(v1 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt64 v3 = *(void *)v1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }

  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + 9));
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v4, v5);
  sub_10062582C(a1, type metadata accessor for DeviceEvent.Location, (uint64_t *)&unk_1009AA880);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v6, v7);
  type metadata accessor for BeaconIdentifier(0LL);
  dispatch thunk of Hashable.hash(into:)(a1, v6, v7);
  return dispatch thunk of Hashable.hash(into:)(a1, v4, v5);
}

Swift::Int sub_100625674(uint64_t a1)
{
  if (*(_BYTE *)(v1 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt64 v2 = *(void *)v1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }

  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + 9));
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v4 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v8, v3, v4);
  sub_10062582C((uint64_t)v8, type metadata accessor for DeviceEvent.Location, (uint64_t *)&unk_1009AA880);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v8, v5, v6);
  type metadata accessor for BeaconIdentifier(0LL);
  dispatch thunk of Hashable.hash(into:)(v8, v5, v6);
  dispatch thunk of Hashable.hash(into:)(v8, v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1006257EC()
{
  return sub_100007864(&qword_1009B8810, type metadata accessor for DeviceEvent, (uint64_t)&unk_100810514);
}

void sub_100625818(uint64_t a1)
{
}

void sub_10062582C(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t v6 = v3;
  uint64_t v8 = a2(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (Swift::UInt64 *)((char *)&v20 - v10);
  uint64_t v12 = sub_100004AEC(a3);
  __chkstk_darwin(v12);
  unint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001581C(v6, (uint64_t)v14, a3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1LL, v8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    sub_10002218C((uint64_t)v14, (uint64_t)v11, a2);
    Hasher._combine(_:)(1u);
    if ((*v11 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v15 = *v11;
    }
    else {
      Swift::UInt64 v15 = 0LL;
    }
    Hasher._combine(_:)(v15);
    if ((v11[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v16 = v11[1];
    }
    else {
      Swift::UInt64 v16 = 0LL;
    }
    Hasher._combine(_:)(v16);
    if ((v11[2] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v17 = v11[2];
    }
    else {
      Swift::UInt64 v17 = 0LL;
    }
    Hasher._combine(_:)(v17);
    uint64_t v18 = type metadata accessor for Date(0LL);
    uint64_t v19 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(a1, v18, v19);
    sub_100018C68((uint64_t)v11, a2);
  }

uint64_t sub_1006259A8(double *a1, double *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2]) {
    return 0LL;
  }
  uint64_t v4 = *(int *)(type metadata accessor for DeviceEvent.Location(0LL) + 28);
  return static Date.== infix(_:_:)((char *)a1 + v4, (char *)a2 + v4);
}

uint64_t sub_100625A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DeviceEvent.Location(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (double *)((char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = sub_100004AEC(&qword_1009B8850);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009AA880);
  uint64_t v12 = __chkstk_darwin(v11);
  unint64_t v14 = (double *)((char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = __chkstk_darwin(v12);
  Swift::UInt64 v17 = (char *)&v35 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v35 - v18;
  char v20 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8)) {
      goto LABEL_25;
    }
  }

  else
  {
    if (*(void *)a1 != *(void *)a2) {
      char v20 = 1;
    }
    if ((v20 & 1) != 0) {
      goto LABEL_25;
    }
  }

  uint64_t v36 = v10;
  uint64_t v21 = type metadata accessor for DeviceEvent(0LL);
  sub_10001581C(a1 + *(int *)(v21 + 28), (uint64_t)v19, (uint64_t *)&unk_1009AA880);
  uint64_t v35 = v21;
  sub_10001581C(a2 + *(int *)(v21 + 28), (uint64_t)v17, (uint64_t *)&unk_1009AA880);
  uint64_t v22 = (uint64_t)v36;
  uint64_t v23 = (uint64_t)&v36[*(int *)(v8 + 48)];
  sub_10001581C((uint64_t)v19, (uint64_t)v36, (uint64_t *)&unk_1009AA880);
  sub_10001581C((uint64_t)v17, v23, (uint64_t *)&unk_1009AA880);
  uint64_t v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v24(v22, 1LL, v4) == 1)
  {
    sub_100015794((uint64_t)v17, (uint64_t *)&unk_1009AA880);
    sub_100015794((uint64_t)v19, (uint64_t *)&unk_1009AA880);
    if (v24(v23, 1LL, v4) == 1)
    {
      sub_100015794(v22, (uint64_t *)&unk_1009AA880);
      goto LABEL_12;
    }

    goto LABEL_17;
  }

  sub_10001581C(v22, (uint64_t)v14, (uint64_t *)&unk_1009AA880);
  if (v24(v23, 1LL, v4) == 1)
  {
    sub_100015794((uint64_t)v17, (uint64_t *)&unk_1009AA880);
    sub_100015794((uint64_t)v19, (uint64_t *)&unk_1009AA880);
    sub_100018C68((uint64_t)v14, type metadata accessor for DeviceEvent.Location);
LABEL_17:
    uint64_t v31 = &qword_1009B8850;
    uint64_t v32 = v22;
LABEL_24:
    sub_100015794(v32, v31);
LABEL_25:
    char v30 = 0;
    return v30 & 1;
  }

  sub_10002218C(v23, (uint64_t)v7, type metadata accessor for DeviceEvent.Location);
  if (*v14 != *v7 || v14[1] != v7[1] || v14[2] != v7[2])
  {
    sub_100018C68((uint64_t)v7, type metadata accessor for DeviceEvent.Location);
    sub_100015794((uint64_t)v17, (uint64_t *)&unk_1009AA880);
    sub_100015794((uint64_t)v19, (uint64_t *)&unk_1009AA880);
    sub_100018C68((uint64_t)v14, type metadata accessor for DeviceEvent.Location);
    uint64_t v32 = v22;
    uint64_t v31 = (uint64_t *)&unk_1009AA880;
    goto LABEL_24;
  }

  char v33 = static Date.== infix(_:_:)((char *)v14 + *(int *)(v4 + 28), (char *)v7 + *(int *)(v4 + 28));
  sub_100018C68((uint64_t)v7, type metadata accessor for DeviceEvent.Location);
  sub_100015794((uint64_t)v17, (uint64_t *)&unk_1009AA880);
  sub_100015794((uint64_t)v19, (uint64_t *)&unk_1009AA880);
  sub_100018C68((uint64_t)v14, type metadata accessor for DeviceEvent.Location);
  sub_100015794(v22, (uint64_t *)&unk_1009AA880);
  if ((v33 & 1) == 0) {
    goto LABEL_25;
  }
LABEL_12:
  uint64_t v25 = v35;
  uint64_t v26 = *(int *)(v35 + 32);
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  if ((static UUID.== infix(_:_:)(a1 + v26, a2 + v26) & 1) == 0) {
    goto LABEL_25;
  }
  uint64_t v29 = type metadata accessor for BeaconIdentifier(0LL);
  char v30 = static Date.== infix(_:_:)(a1 + *(int *)(v25 + 36), a2 + *(int *)(v25 + 36));
  return v30 & 1;
}

uint64_t sub_100625E2C(uint64_t result)
{
  else {
    return result;
  }
}

unint64_t sub_100625E3C()
{
  unint64_t result = qword_1009B8820;
  if (!qword_1009B8820)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008108F4, &type metadata for DeviceEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8820);
  }

  return result;
}

unint64_t sub_100625E80()
{
  unint64_t result = qword_1009B8828;
  if (!qword_1009B8828)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008108CC, &type metadata for DeviceEventSource);
    atomic_store(result, (unint64_t *)&qword_1009B8828);
  }

  return result;
}

uint64_t sub_100625EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009AA880);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100625F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DeviceEvent(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_100625F50()
{
  unint64_t result = qword_1009B8840;
  if (!qword_1009B8840)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008108A4, &type metadata for DeviceEventSource);
    atomic_store(result, (unint64_t *)&qword_1009B8840);
  }

  return result;
}

unint64_t sub_100625F94()
{
  unint64_t result = qword_1009B8860;
  if (!qword_1009B8860)
  {
    unint64_t result = swift_getWitnessTable(&unk_100810854, &type metadata for DeviceEvent.Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8860);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for DeviceEvent.Location.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100626024 + 4 * byte_1008103F1[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100626058 + 4 * byte_1008103EC[v4]))();
}

uint64_t sub_100626058(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100626060(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100626068LL);
  }
  return result;
}

uint64_t sub_100626074(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10062607CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100626080(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100626088(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceEvent.Location.CodingKeys()
{
  return &type metadata for DeviceEvent.Location.CodingKeys;
}

ValueMetadata *type metadata accessor for DeviceEvent.CodingKeys()
{
  return &type metadata for DeviceEvent.CodingKeys;
}

uint64_t _s12searchpartyd17DeviceEventSourceOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_100626104 + 4 * byte_1008103FB[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100626138 + 4 * byte_1008103F6[v4]))();
}

uint64_t sub_100626138(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100626140(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100626148LL);
  }
  return result;
}

uint64_t sub_100626154(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10062615CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_100626160(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100626168(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceEventSource()
{
  return &type metadata for DeviceEventSource;
}

unint64_t sub_100626188()
{
  unint64_t result = qword_1009B8870;
  if (!qword_1009B8870)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008106BC, &type metadata for DeviceEventSource);
    atomic_store(result, (unint64_t *)&qword_1009B8870);
  }

  return result;
}

unint64_t sub_1006261D0()
{
  unint64_t result = qword_1009B8878;
  if (!qword_1009B8878)
  {
    unint64_t result = swift_getWitnessTable(&unk_100810774, &type metadata for DeviceEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8878);
  }

  return result;
}

unint64_t sub_100626218()
{
  unint64_t result = qword_1009B8880;
  if (!qword_1009B8880)
  {
    unint64_t result = swift_getWitnessTable(&unk_10081082C, &type metadata for DeviceEvent.Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8880);
  }

  return result;
}

unint64_t sub_100626260()
{
  unint64_t result = qword_1009B8888;
  if (!qword_1009B8888)
  {
    unint64_t result = swift_getWitnessTable(&unk_10081079C, &type metadata for DeviceEvent.Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8888);
  }

  return result;
}

unint64_t sub_1006262A8()
{
  unint64_t result = qword_1009B8890;
  if (!qword_1009B8890)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008107C4, &type metadata for DeviceEvent.Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8890);
  }

  return result;
}

unint64_t sub_1006262F0()
{
  unint64_t result = qword_1009B8898;
  if (!qword_1009B8898)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008106E4, &type metadata for DeviceEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8898);
  }

  return result;
}

unint64_t sub_100626338()
{
  unint64_t result = qword_1009B88A0;
  if (!qword_1009B88A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10081070C, &type metadata for DeviceEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B88A0);
  }

  return result;
}

uint64_t sub_10062637C(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6449746E657665LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v5 = 0xE700000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449746E657665LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x656372756F73LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v7 = 0xE600000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F73LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x6D617473656D6974LL && a2 == 0xE900000000000070LL)
  {
    unint64_t v8 = 0xE900000000000070LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974LL, 0xE900000000000070LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000LL)
  {
    unint64_t v9 = 0xE800000000000000LL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_26;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v10 = 0x800000010084D8A0LL;
    if (a2 == 0x800000010084D8A0LL) {
      goto LABEL_31;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010084D8A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if (a1 == 0x6144657461647075LL && a2 == 0xEA00000000006574LL)
  {
    swift_bridgeObjectRelease(0xEA00000000006574LL);
    return 5LL;
  }

  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6144657461647075LL, 0xEA00000000006574LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

unint64_t sub_100626604()
{
  unint64_t result = qword_1009B88A8;
  if (!qword_1009B88A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100810644, &type metadata for DeviceEventSource);
    atomic_store(result, (unint64_t *)&qword_1009B88A8);
  }

  return result;
}

ValueMetadata *type metadata accessor for SystemInfo()
{
  return &type metadata for SystemInfo;
}

id sub_100626658(uint64_t a1, uint64_t a2)
{
  return sub_10062667C(a1, a2, (uint64_t (*)(void))&_MobileGestalt_copy_productType_obj);
}

id sub_100626664(uint64_t a1, uint64_t a2)
{
  return sub_10062667C(a1, a2, (uint64_t (*)(void))&_MobileGestalt_copy_productVersion_obj);
}

id sub_100626670(uint64_t a1, uint64_t a2)
{
  return sub_10062667C(a1, a2, (uint64_t (*)(void))&_MobileGestalt_copy_uniqueDeviceID_obj);
}

id sub_10062667C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  id result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    unint64_t v5 = result;
    id v6 = (id)a3();

    if (!v6) {
      return 0LL;
    }
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

    return (id)v7;
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_1006266FC()
{
  id v0 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  id v1 = [v0 isInternalBuild];

  return v1;
}

id sub_100626750@<X0>(uint64_t *a1@<X8>)
{
  id result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    int v3 = result;
    id v4 = (id)MobileGestalt_copy_uniqueDeviceID_obj();

    if (v4)
    {
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
      unint64_t v7 = v6;
    }

    else
    {
      uint64_t v5 = 0LL;
      unint64_t v7 = 0xE000000000000000LL;
    }

    uint64_t v8 = HIBYTE(v7) & 0xF;
    if ((v7 & 0x2000000000000000LL) == 0) {
      uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
    }
    if (v8)
    {
      *a1 = v5;
      a1[1] = v7;
      uint64_t v9 = type metadata accessor for StableIdentifier(0LL);
      swift_storeEnumTagMultiPayload(a1, v9, 0LL);
      unint64_t v10 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL);
      char v11 = a1;
      uint64_t v12 = 0LL;
      uint64_t v13 = v9;
    }

    else
    {
      uint64_t v14 = swift_bridgeObjectRelease();
      uint64_t v15 = static os_log_type_t.error.getter(v14);
      if (qword_10099B6F8 != -1) {
        swift_once(&qword_10099B6F8, sub_100651098);
      }
      os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  qword_100A2B008,  "Local uniqueDeviceID not found.",  31LL,  2LL,  _swiftEmptyArrayStorage);
      uint64_t v13 = type metadata accessor for StableIdentifier(0LL);
      unint64_t v10 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL);
      char v11 = a1;
      uint64_t v12 = 1LL;
    }

    return (id)v10(v11, v12, 1LL, v13);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10062689C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v2);
  id v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  size_t v26 = 37LL;
  uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(37LL, &type metadata for Int8);
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = 37LL;
  *(_OWORD *)(v8 + 48) = 0u;
  *(void *)(v8 + 61) = 0LL;
  *(_OWORD *)(v8 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0u;
  if (sysctlbyname("kern.bootsessionuuid", (void *)(v8 + 32), &v26, 0LL, 0LL))
  {
    int v15 = errno.getter();
    if (!strerror(v15)) {
      __break(1u);
    }
    goto LABEL_10;
  }

  __n128 v9 = swift_bridgeObjectRetain(v8);
  static String.Encoding.ascii.getter(v9);
  uint64_t v10 = sub_100626BD0(v8, v7);
  if (!v11)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000023LL,  0x800000010086B650LL,  "searchpartyd/SystemInfo.swift",  29LL,  2LL,  48LL,  0);
    goto LABEL_9;
  }

  UUID.init(uuidString:)(v10, v11);
  swift_bridgeObjectRelease();
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v4, 1LL, v12) == 1)
  {
    sub_1001BC5AC((uint64_t)v4);
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000023LL,  0x800000010086B650LL,  "searchpartyd/SystemInfo.swift",  29LL,  2LL,  52LL,  0);
    while (1)
    {
LABEL_9:
      __break(1u);
LABEL_10:
      uint64_t v16 = String.init(utf8String:)();
      if (v17) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = 0x6E776F6E6B6E55LL;
      }
      if (v17) {
        unint64_t v19 = v17;
      }
      else {
        unint64_t v19 = 0xE700000000000000LL;
      }
      uint64_t v20 = static os_log_type_t.error.getter(v16);
      unint64_t v21 = sub_1001B9018();
      uint64_t v22 = (void *)static OS_os_log.default.getter(v21);
      uint64_t v23 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v24 = swift_allocObject(v23, 112LL, 7LL);
      *(_OWORD *)(v24 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
      *(void *)(v24 + 56) = &type metadata for String;
      *(void *)(v24 + 64) = sub_1000226F4();
      *(void *)(v24 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v18;
      *(void *)(v24 + 40) = v19;
      int v25 = errno.getter();
      *(void *)(v24 + 96) = &type metadata for Int32;
      *(void *)(v24 + 104) = &protocol witness table for Int32;
      *(_DWORD *)(v24 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v25;
      os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v22, "Error from sysctlbyname: %@ (%d)", 32LL, 2LL, v24);

      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000023LL,  0x800000010086B650LL,  "searchpartyd/SystemInfo.swift",  29LL,  2LL,  44LL,  0);
    }
  }

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a1, v4, v12);
}

uint64_t sub_100626B90()
{
  uint64_t v0 = sub_100004AEC(&qword_1009B88B8);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t result = SynchronousCache.init()();
  qword_1009B88B0 = result;
  return result;
}

uint64_t sub_100626BD0(uint64_t a1, char *a2)
{
  uint64_t v4 = type metadata accessor for String.Encoding(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v30 - v10;
  static String.Encoding.utf8.getter(v9);
  char v12 = static String.Encoding.== infix(_:_:)(a2, v11);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v11, v4);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, a2, v4);
  if ((v12 & 1) != 0)
  {
    v13(v8, v4);
    goto LABEL_4;
  }

  static String.Encoding.ascii.getter(v14);
  char v15 = static String.Encoding.== infix(_:_:)(v8, v11);
  v13(v11, v4);
  v13(v8, v4);
  if ((v15 & 1) != 0)
  {
LABEL_4:
    uint64_t v16 = sub_100626F94(0, a1);
    if ((v17 & 1) == 0)
    {
      if ((v16 & 0x8000000000000000LL) == 0)
      {
        uint64_t v18 = *(void *)(a1 + 16);
        if (v18 >= v16) {
          uint64_t v18 = v16;
        }
        if (v16) {
          uint64_t v19 = v18;
        }
        else {
          uint64_t v19 = 0LL;
        }
        __n128 v20 = swift_bridgeObjectRetain(a1);
        uint64_t v21 = static String._tryFromUTF8(_:)(a1 + 32, v19, v20);
        uint64_t v23 = v22;
        uint64_t v24 = swift_unknownObjectRelease(a1);
        if (v23)
        {
          static String.Encoding.utf8.getter(v24);
          char v25 = static String.Encoding.== infix(_:_:)(a2, v11);
          v13(v11, v4);
          if ((v25 & 1) != 0 || (_StringGuts._isContiguousASCII.getter(v21, v23) & 1) != 0)
          {
            swift_bridgeObjectRelease();
LABEL_20:
            v13(a2, v4);
            return v21;
          }

          swift_bridgeObjectRelease();
        }

        goto LABEL_16;
      }

      __break(1u);
    }

    __break(1u);
    goto LABEL_23;
  }

void sub_100626E68(char *a1@<X8>)
{
  id v2 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v3 = [v2 isInternalBuild];

  if (v3)
  {
    id v4 = [(id)objc_opt_self(NSProcessInfo) processInfo];
    id v5 = [v4 environment];

    uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v5,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
    if (*(void *)(v6 + 16) && (uint64_t v7 = sub_10030CF14(0x45545F5245444E55LL, 0xEA00000000005453LL), (v8 & 1) != 0))
    {
      swift_bridgeObjectRetain(*(void *)(*(void *)(v6 + 56) + 16 * v7 + 8));
      char v9 = 1;
    }

    else
    {
      char v9 = 0;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    char v9 = 0;
  }

  *a1 = v9;
}

uint64_t sub_100626F94(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0LL;
  }
  if (v2 == 1) {
    return 0LL;
  }
  uint64_t v4 = 0LL;
  uint64_t v5 = v2 - 2;
  while (v5 != v4)
  {
    int v6 = *(unsigned __int8 *)(a2 + 34 + v4++);
    if (v6 == a1) {
      return v4 + 1;
    }
  }

  return 0LL;
}

uint64_t sub_10062701C()
{
  id v0 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v1 = [v0 isInternalBuild];

  if (v1)
  {
    id v2 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
    NSString v3 = String._bridgeToObjectiveC()();
    unsigned int v4 = [v2 BOOLForKey:v3];

    if (v4)
    {
      uint64_t v6 = static os_log_type_t.default.getter(v5);
      unint64_t v7 = sub_1001B9018();
      char v8 = (void *)static OS_os_log.default.getter(v7);
      os_log(_:dso:log:_:_:)( v6,  &_mh_execute_header,  v8,  "SystemInfo simulating Korea SKU device.",  39LL,  2LL,  _swiftEmptyArrayStorage);

      return 1LL;
    }
  }

  uint64_t result = (uint64_t)(id)MobileGestalt_get_current_device();
  if (result)
  {
    uint64_t v10 = (void *)result;
    id v11 = (id)MobileGestalt_copy_regionCode_obj();

    if (v11)
    {
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      unint64_t v14 = v13;

      if (v12 == 18507 && v14 == 0xE200000000000000LL)
      {
        swift_bridgeObjectRelease();
        return 1LL;
      }
    }

    else
    {
      uint64_t v12 = 0LL;
      unint64_t v14 = 0xE000000000000000LL;
    }

    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, 18507LL, 0xE200000000000000LL, 0LL);
    swift_bridgeObjectRelease();
    return v15 & 1;
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_1006271CC()
{
  id v0 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  id v1 = [v0 serialNumber];

  if (v1) {
    goto LABEL_4;
  }
  id result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    NSString v3 = result;
    id v1 = (id)MobileGestalt_copy_serialNumber_obj();

    if (!v1) {
      return 0LL;
    }
LABEL_4:
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

    return (id)v4;
  }

  __break(1u);
  return result;
}

id sub_100627288()
{
  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  v3[0] = 0x7365547265646E75LL;
  v3[1] = 0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v4, v3, sub_10000A71C, 0LL, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0) {
    return 0LL;
  }
  id v1 = objc_autoreleasePoolPush();
  id v0 = [(id)objc_opt_self(CLLocationManager) locationServicesEnabled];
  objc_autoreleasePoolPop(v1);
  return v0;
}

uint64_t sub_10062735C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v8 = sub_100004AEC(&qword_1009B8998);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100012ED8(a1, v12);
  unint64_t v14 = sub_100628B38();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for LostModeRequest.CodingKeys,  &type metadata for LostModeRequest.CodingKeys,  v14,  v12,  v13);
  v21[0] = a2;
  char v22 = 0;
  uint64_t v15 = sub_100004AEC(&qword_1009B1148);
  uint64_t v16 = sub_1005E0D34( &qword_1009B58B0,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <> [A : B]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v22, v8, v15, v16);
  if (!v4)
  {
    v21[0] = a3;
    v21[1] = v20;
    char v22 = 1;
    unint64_t v17 = sub_1000170A4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v22, v8, &type metadata for Data, v17);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1006274D0(uint64_t a1)
{
  unint64_t v2 = sub_100628B38();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006274F8(uint64_t a1)
{
  unint64_t v2 = sub_100628B38();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100627520@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10062893C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }

  return result;
}

uint64_t sub_10062754C(void *a1)
{
  return sub_10062735C(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_100627568(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100627598 + 4 * byte_100810980[a1]))( 0x646975756162LL,  0xE600000000000000LL);
}

uint64_t sub_100627598()
{
  return 1684628325LL;
}

uint64_t sub_1006275A8()
{
  return 0x644970696863LL;
}

uint64_t sub_1006275B8()
{
  return 0x754E6C6169726573LL;
}

uint64_t sub_1006275D8()
{
  return 0x656C746974LL;
}

uint64_t sub_1006275EC()
{
  return 1954047348LL;
}

uint64_t sub_1006275FC()
{
  return 0x6C69616D65LL;
}

uint64_t sub_100627610()
{
  return 0x72624E72656E776FLL;
}

uint64_t sub_100627628()
{
  return 0x747865746E6F63LL;
}

uint64_t sub_100627640()
{
  return 0x65646F4D74736F6CLL;
}

uint64_t sub_100627664(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B8978);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1006288F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for LostModeRequestContent.CodingKeys,  &type metadata for LostModeRequestContent.CodingKeys,  v11,  v9,  v10);
  char v49 = 0;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v49, v5, v12, v13);
  if (!v2)
  {
    unint64_t v14 = (int *)type metadata accessor for LostModeRequestContent(0LL);
    uint64_t v15 = (uint64_t *)(v3 + v14[5]);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    char v48 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v48, v5);
    uint64_t v18 = (uint64_t *)(v3 + v14[6]);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    char v47 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v47, v5);
    uint64_t v21 = (uint64_t *)(v3 + v14[7]);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    char v46 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v23, &v46, v5);
    uint64_t v24 = (uint64_t *)(v3 + v14[8]);
    uint64_t v25 = *v24;
    uint64_t v26 = v24[1];
    char v45 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, &v45, v5);
    char v27 = (uint64_t *)(v3 + v14[9]);
    uint64_t v28 = *v27;
    uint64_t v29 = v27[1];
    char v44 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28, v29, &v44, v5);
    uint64_t v30 = (uint64_t *)(v3 + v14[10]);
    uint64_t v31 = *v30;
    uint64_t v32 = v30[1];
    char v43 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v31, v32, &v43, v5);
    char v33 = (uint64_t *)(v3 + v14[11]);
    uint64_t v34 = *v33;
    uint64_t v35 = v33[1];
    char v42 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v34, v35, &v42, v5);
    uint64_t v36 = (uint64_t *)(v3 + v14[12]);
    uint64_t v37 = *v36;
    uint64_t v38 = v36[1];
    HIBYTE(v41) = 8;
    KeyedEncodingContainer.encode(_:forKey:)(v37, v38, (char *)&v41 + 7, v5);
    uint64_t v39 = *(unsigned __int8 *)(v3 + v14[13]);
    BYTE6(v41) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v39, (char *)&v41 + 6, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100627938()
{
  return sub_100627568(*v0);
}

uint64_t sub_100627940@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100628EC4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100627964(uint64_t a1)
{
  unint64_t v2 = sub_1006288F8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10062798C(uint64_t a1)
{
  unint64_t v2 = sub_1006288F8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1006279B4(void *a1)
{
  return sub_100627664(a1);
}

void sub_1006279C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int8 a16)
{
  uint64_t v88 = a7;
  uint64_t v89 = a8;
  uint64_t v86 = a5;
  uint64_t v87 = a6;
  uint64_t v84 = a3;
  uint64_t v85 = a4;
  uint64_t v83 = a2;
  uint64_t v17 = (int *)type metadata accessor for LostModeRequestContent(0LL);
  uint64_t v18 = __chkstk_darwin(v17);
  v74[1] = (char *)v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)v74 - v20;
  uint64_t v22 = type metadata accessor for Date(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v26 = sub_100412D14((uint64_t)_swiftEmptyArrayStorage);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
  uint64_t v90 = v26;
  sub_10005C260( 1702195828LL,  0xE400000000000000LL,  0xD00000000000001BLL,  0x8000000100855CD0LL,  isUniquelyReferenced_nonNull_native);
  uint64_t v28 = v90;
  swift_bridgeObjectRelease();
  id v29 = [(id)objc_opt_self(AKDevice) currentDevice];
  if (v29)
  {
    uint64_t v30 = v29;
    uint64_t v31 = a1;
    id v32 = [v29 serverFriendlyDescription];

    if (v32)
    {
      int v82 = a16;
      uint64_t v80 = a14;
      uint64_t v81 = a15;
      uint64_t v78 = a12;
      uint64_t v79 = a13;
      uint64_t v76 = a10;
      uint64_t v77 = a11;
      uint64_t v75 = a9;
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
      uint64_t v35 = v34;

      char v36 = swift_isUniquelyReferenced_nonNull_native(v28);
      uint64_t v90 = v28;
      sub_10005C260(v33, v35, 0xD000000000000011LL, 0x8000000100854B60LL, v36);
      uint64_t v37 = v90;
      uint64_t v38 = swift_bridgeObjectRelease();
      uint64_t v39 = Date.init()(v38);
      uint64_t v40 = Date.epoch.getter(v39);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
      uint64_t v90 = v40;
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
      uint64_t v43 = v42;
      char v44 = swift_isUniquelyReferenced_nonNull_native(v37);
      uint64_t v90 = v37;
      sub_10005C260(v41, v43, 0xD000000000000015LL, 0x8000000100855CF0LL, v44);
      uint64_t v45 = v90;
      swift_bridgeObjectRelease();
      uint64_t v90 = 1LL;
      uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      uint64_t v48 = v47;
      char v49 = swift_isUniquelyReferenced_nonNull_native(v45);
      uint64_t v90 = v45;
      sub_10005C260(v46, v48, 0xD000000000000013LL, 0x8000000100855D10LL, v49);
      uint64_t v50 = v90;
      swift_bridgeObjectRelease();
      id v51 = sub_1003F349C();
      uint64_t v53 = v52;
      char v54 = swift_isUniquelyReferenced_nonNull_native(v50);
      uint64_t v90 = v50;
      sub_10005C260((uint64_t)v51, v53, 0x6567412D72657355LL, 0xEA0000000000746ELL, v54);
      swift_bridgeObjectRelease();
      uint64_t v55 = type metadata accessor for UUID(0LL);
      uint64_t v56 = *(void *)(v55 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v21, v31, v55);
      uint64_t v57 = &v21[v17[5]];
      uint64_t v58 = v84;
      *(void *)uint64_t v57 = v83;
      *((void *)v57 + 1) = v58;
      uint64_t v59 = &v21[v17[6]];
      uint64_t v60 = v86;
      *(void *)uint64_t v59 = v85;
      *((void *)v59 + 1) = v60;
      uint64_t v61 = &v21[v17[7]];
      uint64_t v62 = v88;
      *(void *)uint64_t v61 = v87;
      *((void *)v61 + 1) = v62;
      uint64_t v63 = &v21[v17[8]];
      uint64_t v64 = v75;
      *(void *)uint64_t v63 = v89;
      *((void *)v63 + 1) = v64;
      uint64_t v65 = &v21[v17[9]];
      uint64_t v66 = v77;
      *(void *)uint64_t v65 = v76;
      *((void *)v65 + 1) = v66;
      uint64_t v67 = &v21[v17[10]];
      uint64_t v68 = v79;
      *(void *)uint64_t v67 = v78;
      *((void *)v67 + 1) = v68;
      uint64_t v69 = &v21[v17[11]];
      uint64_t v70 = v81;
      *(void *)uint64_t v69 = v80;
      *((void *)v69 + 1) = v70;
      uint64_t v71 = &v21[v17[12]];
      *(void *)uint64_t v71 = 0x746C7561666564LL;
      *((void *)v71 + 1) = 0xE700000000000000LL;
      v21[v17[13]] = v82 & 1;
      uint64_t v72 = type metadata accessor for JSONEncoder(0LL);
      swift_allocObject(v72, *(unsigned int *)(v72 + 48), *(unsigned __int16 *)(v72 + 52));
      JSONEncoder.init()();
      uint64_t v73 = sub_100007864(&qword_1009B88C0, type metadata accessor for LostModeRequestContent, (uint64_t)&unk_100810A60);
      dispatch thunk of JSONEncoder.encode<A>(_:)(v21, v17, v73);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v31, v55);
      sub_100628000((uint64_t)v21);
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t type metadata accessor for LostModeRequestContent(uint64_t a1)
{
  uint64_t result = qword_1009B8920;
  if (!qword_1009B8920) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LostModeRequestContent);
  }
  return result;
}

uint64_t sub_100627FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LostModeRequestContent(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100628000(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LostModeRequestContent(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *sub_10062803C(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v40 = *a2;
    *a1 = *a2;
    a1 = (void *)(v40 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v40);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (void *)((char *)a1 + v8);
    unint64_t v11 = (void *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (void *)((char *)a1 + v9);
    unint64_t v14 = (void *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    uint64_t v18 = (void *)((char *)a1 + v16);
    uint64_t v19 = (void *)((char *)a2 + v16);
    uint64_t v20 = v19[1];
    void *v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = (void *)((char *)a1 + v17);
    uint64_t v22 = (void *)((char *)a2 + v17);
    uint64_t v23 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = a3[9];
    uint64_t v25 = a3[10];
    unint64_t v26 = (void *)((char *)a1 + v24);
    char v27 = (void *)((char *)a2 + v24);
    uint64_t v28 = v27[1];
    *unint64_t v26 = *v27;
    v26[1] = v28;
    id v29 = (void *)((char *)a1 + v25);
    uint64_t v30 = (void *)((char *)a2 + v25);
    uint64_t v31 = v30[1];
    *id v29 = *v30;
    v29[1] = v31;
    uint64_t v32 = a3[11];
    uint64_t v33 = a3[12];
    uint64_t v34 = (void *)((char *)a1 + v32);
    uint64_t v35 = (void *)((char *)a2 + v32);
    uint64_t v36 = v35[1];
    *uint64_t v34 = *v35;
    v34[1] = v36;
    uint64_t v37 = (void *)((char *)a1 + v33);
    uint64_t v38 = (void *)((char *)a2 + v33);
    uint64_t v39 = v38[1];
    *uint64_t v37 = *v38;
    v37[1] = v39;
    *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v39);
  }

  return a1;
}

uint64_t sub_1006281A8(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[8] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[9] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[10] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[11] + 8));
  return swift_bridgeObjectRelease(*(void *)(a1 + a2[12] + 8));
}

uint64_t sub_100628260(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  void *v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  void *v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)(a1 + v15);
  uint64_t v18 = (void *)(a2 + v15);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = (void *)(a1 + v16);
  uint64_t v21 = (void *)(a2 + v16);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  uint64_t v23 = a3[9];
  uint64_t v24 = a3[10];
  uint64_t v25 = (void *)(a1 + v23);
  unint64_t v26 = (void *)(a2 + v23);
  uint64_t v27 = v26[1];
  void *v25 = *v26;
  v25[1] = v27;
  uint64_t v28 = (void *)(a1 + v24);
  id v29 = (void *)(a2 + v24);
  uint64_t v30 = v29[1];
  void *v28 = *v29;
  v28[1] = v30;
  uint64_t v31 = a3[11];
  uint64_t v32 = a3[12];
  uint64_t v33 = (void *)(a1 + v31);
  uint64_t v34 = (void *)(a2 + v31);
  uint64_t v35 = v34[1];
  *uint64_t v33 = *v34;
  v33[1] = v35;
  uint64_t v36 = (void *)(a1 + v32);
  uint64_t v37 = (void *)(a2 + v32);
  uint64_t v38 = v37[1];
  *uint64_t v36 = *v37;
  v36[1] = v38;
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v38);
  return a1;
}

uint64_t sub_1006283A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  *uint64_t v13 = *v14;
  uint64_t v15 = v14[1];
  uint64_t v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = a3[7];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  void *v18 = *v19;
  uint64_t v20 = v19[1];
  uint64_t v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  uint64_t v22 = a3[8];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (void *)(a2 + v22);
  *uint64_t v23 = *v24;
  uint64_t v25 = v24[1];
  uint64_t v26 = v23[1];
  v23[1] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  uint64_t v27 = a3[9];
  uint64_t v28 = (void *)(a1 + v27);
  id v29 = (void *)(a2 + v27);
  void *v28 = *v29;
  uint64_t v30 = v29[1];
  uint64_t v31 = v28[1];
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  uint64_t v32 = a3[10];
  uint64_t v33 = (void *)(a1 + v32);
  uint64_t v34 = (void *)(a2 + v32);
  *uint64_t v33 = *v34;
  uint64_t v35 = v34[1];
  uint64_t v36 = v33[1];
  v33[1] = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  uint64_t v37 = a3[11];
  uint64_t v38 = (void *)(a1 + v37);
  uint64_t v39 = (void *)(a2 + v37);
  *uint64_t v38 = *v39;
  uint64_t v40 = v39[1];
  uint64_t v41 = v38[1];
  v38[1] = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  uint64_t v42 = a3[12];
  uint64_t v43 = (void *)(a1 + v42);
  char v44 = (void *)(a2 + v42);
  *uint64_t v43 = *v44;
  uint64_t v45 = v44[1];
  uint64_t v46 = v43[1];
  v43[1] = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_10062855C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_100628608(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v12 = v8[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = a3[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  uint64_t v18 = v14[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  uint64_t v19 = a3[7];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  uint64_t v24 = v20[1];
  *uint64_t v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease(v24);
  uint64_t v25 = a3[8];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (uint64_t *)(a2 + v25);
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  uint64_t v30 = v26[1];
  *uint64_t v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease(v30);
  uint64_t v31 = a3[9];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (uint64_t *)(a2 + v31);
  uint64_t v35 = *v33;
  uint64_t v34 = v33[1];
  uint64_t v36 = v32[1];
  void *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease(v36);
  uint64_t v37 = a3[10];
  uint64_t v38 = (void *)(a1 + v37);
  uint64_t v39 = (uint64_t *)(a2 + v37);
  uint64_t v41 = *v39;
  uint64_t v40 = v39[1];
  uint64_t v42 = v38[1];
  *uint64_t v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease(v42);
  uint64_t v43 = a3[11];
  char v44 = (void *)(a1 + v43);
  uint64_t v45 = (uint64_t *)(a2 + v43);
  uint64_t v47 = *v45;
  uint64_t v46 = v45[1];
  uint64_t v48 = v44[1];
  *char v44 = v47;
  v44[1] = v46;
  swift_bridgeObjectRelease(v48);
  uint64_t v49 = a3[12];
  uint64_t v50 = (void *)(a1 + v49);
  id v51 = (uint64_t *)(a2 + v49);
  uint64_t v53 = *v51;
  uint64_t v52 = v51[1];
  uint64_t v54 = v50[1];
  *uint64_t v50 = v53;
  v50[1] = v52;
  swift_bridgeObjectRelease(v54);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_100628744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100628750);
}

uint64_t sub_100628750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_1006287D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006287DC);
}

uint64_t sub_1006287DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_100628858(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_1008109B8;
    _OWORD v4[2] = &unk_1008109B8;
    void v4[3] = &unk_1008109B8;
    void v4[4] = &unk_1008109D0;
    void v4[5] = &unk_1008109D0;
    void v4[6] = &unk_1008109D0;
    v4[7] = &unk_1008109D0;
    v4[8] = &unk_1008109B8;
    void v4[9] = &unk_1008109E8;
    swift_initStructMetadata(a1, 256LL, 10LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

ValueMetadata *type metadata accessor for LostModeRequest()
{
  return &type metadata for LostModeRequest;
}

unint64_t sub_1006288F8()
{
  unint64_t result = qword_1009B8980;
  if (!qword_1009B8980)
  {
    unint64_t result = swift_getWitnessTable(&unk_100810CAC, &type metadata for LostModeRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8980);
  }

  return result;
}

uint64_t sub_10062893C(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009B8988);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v17[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100012ED8(a1, v7);
  unint64_t v9 = sub_100628B38();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for LostModeRequest.CodingKeys,  &type metadata for LostModeRequest.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    uint64_t v10 = sub_100004AEC(&qword_1009B1148);
    char v18 = 0;
    uint64_t v11 = sub_1005E0D34( &qword_1009B58A0,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v10, &v18, v3, v10, v11);
    uint64_t v7 = v17[0];
    char v18 = 1;
    unint64_t v13 = sub_100016FE0();
    swift_bridgeObjectRetain(v7);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, &type metadata for Data, &v18, v3, &type metadata for Data, v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v14 = v17[0];
    unint64_t v15 = v17[1];
    swift_bridgeObjectRetain(v7);
    sub_10001736C(v14, v15);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    swift_bridgeObjectRelease();
    sub_100016F9C(v14, v15);
  }

  return v7;
}

unint64_t sub_100628B38()
{
  unint64_t result = qword_1009B8990;
  if (!qword_1009B8990)
  {
    unint64_t result = swift_getWitnessTable(&unk_100810C5C, &type metadata for LostModeRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8990);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for LostModeRequest.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100628BC8 + 4 * byte_10081098F[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100628BFC + 4 * byte_10081098A[v4]))();
}

uint64_t sub_100628BFC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100628C04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100628C0CLL);
  }
  return result;
}

uint64_t sub_100628C18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100628C20LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100628C24(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100628C2C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LostModeRequest.CodingKeys()
{
  return &type metadata for LostModeRequest.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for LostModeRequestContent.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF6) {
    return ((uint64_t (*)(void))((char *)&loc_100628C94 + 4 * byte_100810999[v4]))();
  }
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_100628CC8 + 4 * byte_100810994[v4]))();
}

uint64_t sub_100628CC8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100628CD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100628CD8LL);
  }
  return result;
}

uint64_t sub_100628CE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100628CECLL);
  }
  *(_BYTE *)unint64_t result = a2 + 9;
  return result;
}

uint64_t sub_100628CF0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100628CF8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LostModeRequestContent.CodingKeys()
{
  return &type metadata for LostModeRequestContent.CodingKeys;
}

unint64_t sub_100628D18()
{
  unint64_t result = qword_1009B89A0;
  if (!qword_1009B89A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100810B7C, &type metadata for LostModeRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B89A0);
  }

  return result;
}

unint64_t sub_100628D60()
{
  unint64_t result = qword_1009B89A8;
  if (!qword_1009B89A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100810C34, &type metadata for LostModeRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B89A8);
  }

  return result;
}

unint64_t sub_100628DA8()
{
  unint64_t result = qword_1009B89B0;
  if (!qword_1009B89B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100810BA4, &type metadata for LostModeRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B89B0);
  }

  return result;
}

unint64_t sub_100628DF0()
{
  unint64_t result = qword_1009B89B8;
  if (!qword_1009B89B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100810BCC, &type metadata for LostModeRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B89B8);
  }

  return result;
}

unint64_t sub_100628E38()
{
  unint64_t result = qword_1009B89C0;
  if (!qword_1009B89C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100810AEC, &type metadata for LostModeRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B89C0);
  }

  return result;
}

unint64_t sub_100628E80()
{
  unint64_t result = qword_1009B89C8;
  if (!qword_1009B89C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100810B14, &type metadata for LostModeRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B89C8);
  }

  return result;
}

uint64_t sub_100628EC4(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x646975756162LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v5 = 0xE600000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646975756162LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 1684628325 && a2 == 0xE400000000000000LL)
  {
    unint64_t v7 = 0xE400000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684628325LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x644970696863LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v8 = 0xE600000000000000LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644970696863LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x754E6C6169726573LL && a2 == 0xEC0000007265626DLL)
  {
    unint64_t v9 = 0xEC0000007265626DLL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x754E6C6169726573LL, 0xEC0000007265626DLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_26;
  }

  if (a1 == 0x656C746974LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v10 = 0xE500000000000000LL;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_32;
  }

  if (a1 == 1954047348 && a2 == 0xE400000000000000LL)
  {
    unint64_t v11 = 0xE400000000000000LL;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1954047348LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_38;
  }

  if (a1 == 0x6C69616D65LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v12 = 0xE500000000000000LL;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C69616D65LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
    goto LABEL_44;
  }

  if (a1 == 0x72624E72656E776FLL && a2 == 0xE800000000000000LL)
  {
    unint64_t v13 = 0xE800000000000000LL;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 7LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72624E72656E776FLL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
    goto LABEL_50;
  }

  if (a1 == 0x747865746E6F63LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v14 = 0xE700000000000000LL;
LABEL_56:
    swift_bridgeObjectRelease(v14);
    return 8LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x747865746E6F63LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v14 = a2;
    goto LABEL_56;
  }

  if (a1 == 0x65646F4D74736F6CLL && a2 == 0xEF64656C62616E45LL)
  {
    swift_bridgeObjectRelease(0xEF64656C62616E45LL);
    return 9LL;
  }

  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65646F4D74736F6CLL, 0xEF64656C62616E45LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v15 & 1) != 0) {
      return 9LL;
    }
    else {
      return 10LL;
    }
  }

uint64_t *sub_1006292D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v12);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    unint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    char *v9 = *v10;
    uint64_t v11 = *((void *)v10 + 2);
    *((void *)v9 + 1) = *((void *)v10 + 1);
    *((void *)v9 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v11;
    swift_bridgeObjectRetain(v11);
  }

  return a1;
}

uint64_t sub_10062936C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 20) + 16));
}

uint64_t sub_1006293B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_BYTE *)uint64_t v8 = *(_BYTE *)v9;
  uint64_t v10 = *(void *)(v9 + 16);
  *(void *)(v8 + 8) = *(void *)(v9 + 8);
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = v10;
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_100629424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_BYTE *)uint64_t v8 = *(_BYTE *)v9;
  *(void *)(v8 + 8) = *(void *)(v9 + 8);
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v11 = *(void *)(v8 + 16);
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t sub_1006294A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = *(void *)(v9 + 16);
  return a1;
}

uint64_t sub_100629514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_BYTE *)uint64_t v8 = *(_BYTE *)v9;
  uint64_t v11 = *(void *)(v9 + 8);
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v12 = *(void *)(v8 + 16);
  *(void *)(v8 + 8) = v11;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = v10;
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_100629588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100629594);
}

uint64_t sub_100629594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 16);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_100629614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100629620);
}

uint64_t sub_100629620(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20) + swift_weakDestroy(v0 + 16) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for KeyRequestEnvelope(uint64_t a1)
{
  uint64_t result = qword_1009B8A28;
  if (!qword_1009B8A28) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KeyRequestEnvelope);
  }
  return result;
}

uint64_t sub_1006296D8(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_100810D28;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_100629748(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B8A70);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_100629C1C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for KeyRequestEnvelope.CodingKeys,  &type metadata for KeyRequestEnvelope.CodingKeys,  v11,  v9,  v10);
  v21[0] = 0;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = sub_1005DAB68((unint64_t *)&unk_10099D710, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, v21, v5, v12, v13);
  if (!v2)
  {
    unint64_t v14 = (char *)(v3 + *(int *)(type metadata accessor for KeyRequestEnvelope(0LL) + 20));
    char v15 = *v14;
    uint64_t v17 = *((void *)v14 + 1);
    uint64_t v16 = *((void *)v14 + 2);
    v21[0] = v15;
    uint64_t v22 = v17;
    uint64_t v23 = v16;
    HIBYTE(v20) = 1;
    unint64_t v18 = sub_100040098();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, (char *)&v20 + 7, v5, &type metadata for MessagingDestination, v18);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1006298B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v31 = type metadata accessor for UUID(0LL);
  uint64_t v28 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v29 = (void **)((char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v30 = sub_100004AEC(&qword_1009B8A60);
  uint64_t v5 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for KeyRequestEnvelope(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v11 = a1[4];
  sub_100012ED8(a1, v12);
  unint64_t v13 = sub_100629C1C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for KeyRequestEnvelope.CodingKeys,  &type metadata for KeyRequestEnvelope.CodingKeys,  v13,  v12,  v11);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v25 = a1;
  uint64_t v26 = v5;
  uint64_t v14 = (uint64_t)v10;
  uint64_t v15 = v28;
  LOBYTE(v32[0]) = 0;
  uint64_t v16 = sub_1005DAB68((unint64_t *)&qword_10099D6F0, (uint64_t)&protocol conformance descriptor for UUID);
  unint64_t v18 = v29;
  uint64_t v17 = v30;
  uint64_t v19 = v31;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v29, v31, v32, v30, v31, v16);
  (*(void (**)(uint64_t, void *, uint64_t))(v15 + 32))(v14, v18, v19);
  char v33 = 1;
  unint64_t v20 = sub_100040120();
  KeyedDecodingContainer.decode<A>(_:forKey:)( v32,  &type metadata for MessagingDestination,  &v33,  v17,  &type metadata for MessagingDestination,  v20);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v17);
  uint64_t v21 = v32[1];
  uint64_t v22 = v32[2];
  uint64_t v23 = v14 + *(int *)(v8 + 20);
  *(_BYTE *)uint64_t v23 = v32[0];
  *(void *)(v23 + 8) = v21;
  *(void *)(v23 + swift_weakDestroy(v0 + 16) = v22;
  sub_100629C60(v14, v27);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
  return sub_100629CA4(v14);
}

uint64_t sub_100629B40()
{
  if (*v0) {
    return 0x4449656C707061LL;
  }
  else {
    return 0xD000000000000010LL;
  }
}

uint64_t sub_100629B80@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100629E84(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100629BA4(uint64_t a1)
{
  unint64_t v2 = sub_100629C1C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100629BCC(uint64_t a1)
{
  unint64_t v2 = sub_100629C1C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100629BF4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1006298B4(a1, a2);
}

uint64_t sub_100629C08(void *a1)
{
  return sub_100629748(a1);
}

unint64_t sub_100629C1C()
{
  unint64_t result = qword_1009B8A68;
  if (!qword_1009B8A68)
  {
    unint64_t result = swift_getWitnessTable(&unk_100810E54, &type metadata for KeyRequestEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8A68);
  }

  return result;
}

uint64_t sub_100629C60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KeyRequestEnvelope(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100629CA4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for KeyRequestEnvelope(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for KeyRequestEnvelope.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100629D2C + 4 * byte_100810D05[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100629D60 + 4 * byte_100810D00[v4]))();
}

uint64_t sub_100629D60(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100629D68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100629D70LL);
  }
  return result;
}

uint64_t sub_100629D7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100629D84LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100629D88(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100629D90(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyRequestEnvelope.CodingKeys()
{
  return &type metadata for KeyRequestEnvelope.CodingKeys;
}

unint64_t sub_100629DB0()
{
  unint64_t result = qword_1009B8A78;
  if (!qword_1009B8A78)
  {
    unint64_t result = swift_getWitnessTable(&unk_100810E2C, &type metadata for KeyRequestEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8A78);
  }

  return result;
}

unint64_t sub_100629DF8()
{
  unint64_t result = qword_1009B8A80;
  if (!qword_1009B8A80)
  {
    unint64_t result = swift_getWitnessTable(&unk_100810D9C, &type metadata for KeyRequestEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8A80);
  }

  return result;
}

unint64_t sub_100629E40()
{
  unint64_t result = qword_1009B8A88;
  if (!qword_1009B8A88)
  {
    unint64_t result = swift_getWitnessTable(&unk_100810DC4, &type metadata for KeyRequestEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8A88);
  }

  return result;
}

uint64_t sub_100629E84(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x800000010084D8A0LL;
    if (a2 == 0x800000010084D8A0LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010084D8A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0x4449656C707061LL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL);
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4449656C707061LL, 0xE700000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_100629F70(uint64_t a1, char a2, id a3)
{
  uint64_t v7 = sp_key_subsequence_create_from_file_descriptor([a3 fileDescriptor]);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = v3 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_beaconIdentifier;
    uint64_t v10 = type metadata accessor for UUID(0LL);
    uint64_t v11 = *(void *)(v10 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v9, a1, v10);
    *(_BYTE *)(v3 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_sequence) = a2;
    *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_subsequenceHandle) = v8;
    *(_DWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_firstIndex) = sp_key_subsequence_map_get_first_index(v8);
    int last_index = sp_key_subsequence_map_get_last_index(v8);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
    *(_DWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_lastIndex) = last_index;
  }

  else
  {

    uint64_t v13 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(a1, v13);
    uint64_t v14 = type metadata accessor for BeaconKeySubsequence(0LL);
    swift_deallocPartialClassInstance( v3,  v14,  *(unsigned int *)(*(void *)v3 + 48LL),  *(unsigned __int16 *)(*(void *)v3 + 52LL));
    return 0LL;
  }

  return v3;
}

uint64_t sub_10062A09C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_beaconIdentifier;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10062A0FC()
{
  return type metadata accessor for BeaconKeySubsequence(0LL);
}

uint64_t type metadata accessor for BeaconKeySubsequence(uint64_t a1)
{
  uint64_t result = qword_1009B8AC0;
  if (!qword_1009B8AC0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeaconKeySubsequence);
  }
  return result;
}

uint64_t sub_10062A140(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_100810EC8;
    void v4[2] = (char *)&value witness table for Builtin.Int32 + 64;
    void v4[3] = (char *)&value witness table for Builtin.Int32 + 64;
    void v4[4] = (char *)&value witness table for Builtin.RawPointer + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 5LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10062A1D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v9 = type metadata accessor for CryptoError(0LL);
  uint64_t v10 = __chkstk_darwin(v9);
  __chkstk_darwin(v10);
  if (*(_DWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_firstIndex) > a1
    || *(_DWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_lastIndex) < a1)
  {
    unint64_t v11 = sub_1002DB1A8();
    uint64_t v12 = swift_allocError(&type metadata for BeaconKeyManager.Error, v11, 0LL, 0LL);
    *uint64_t v13 = 4;
    return swift_willThrow(v12);
  }

  uint64_t v69 = a4;
  uint64_t v70 = a3;
  uint64_t record_for_index = sp_key_subsequence_get_record_for_index( *(void *)(a2 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_subsequenceHandle),  a1);
  id v15 = (id)sp_key_record_copy_intermediate_key();
  if (!v15)
  {
    __break(1u);
    goto LABEL_30;
  }

  uint64_t v16 = v15;
  uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v19 = v18;

  sub_1001782BC(v17, v19);
  if (!v4)
  {
    uint64_t v21 = type metadata accessor for __DataStorage(0LL);
    swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    uint64_t v22 = __DataStorage.init(length:)(32LL);
    sub_10001736C(v71, v72);
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v71, v72);
    char v24 = v23;
    sub_100016F9C(v71, v72);
    swift_release(v22);
    if ((v24 & 1) != 0)
    {
      uint64_t v25 = 0LL;
      unint64_t v26 = 0xF000000000000000LL;
    }

    else
    {
      sub_10001736C(v71, v72);
      uint64_t v25 = v71;
      unint64_t v26 = v72;
    }

    uint64_t v67 = v25;
    unint64_t v68 = v26;
    sub_1002DDE24(v25, v26);
    id v27 = (id)sp_key_record_copy_public_key(record_for_index);
    if (v27)
    {
      uint64_t v28 = v27;
      uint64_t v29 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v27);
      unint64_t v31 = v30;

      uint64_t v37 = sub_10017D59C(v29, v31);
      unint64_t v39 = v38;
      sub_100016F9C(v71, v72);
      if (!record_for_index) {
        goto LABEL_20;
      }
      int v40 = *(unsigned __int8 *)(record_for_index + 32);
      if (v40 != 1)
      {
        if (v40 == 2)
        {
          if (v70)
          {
            sub_10001736C(v37, v39);
            swift_retain();
            id v41 = (id)sp_key_record_copy_private_encrypted_key(record_for_index);
            if (v41)
            {
              uint64_t v42 = v41;
              static Data._unconditionallyBridgeFromObjectiveC(_:)(v41);
              uint64_t v44 = v43;

              __asm { BR              X10 }
            }

uint64_t sub_10062AB78()
{
  uint64_t v1 = 0xD000000000000010LL;
  *(_DWORD *)&v13[8] = 0;
  _StringGuts.grow(_:)(55LL);
  v2._countAndFlagsBits = 0xD00000000000001DLL;
  v2._object = (void *)0x800000010086B830LL;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 0x203A646E65202CLL;
  v5._object = (void *)0xE700000000000000LL;
  String.append(_:)(v5);
  *(void *)uint64_t v13 = *(unsigned int *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_lastIndex);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
  uint64_t v7 = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v7);
  v8._countAndFlagsBits = 0x6E6575716573202CLL;
  v8._object = (void *)0xEC000000203A6563LL;
  String.append(_:)(v8);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_sequence))
  {
    if (*(_BYTE *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_sequence) == 1)
    {
      uint64_t v9 = (void *)0xEA00000000007972LL;
      uint64_t v1 = 0x61646E6F6365732ELL;
    }

    else
    {
      uint64_t v9 = (void *)0x80000001008533C0LL;
    }
  }

  else
  {
    uint64_t v9 = (void *)0xE800000000000000LL;
    uint64_t v1 = 0x7972616D6972702ELL;
  }

  v10._countAndFlagsBits = v1;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  v11._countAndFlagsBits = 93LL;
  v11._object = (void *)0xE100000000000000LL;
  String.append(_:)(v11);
  return *(void *)&v13[4];
}

uint64_t sub_10062AD30()
{
  return sub_10062AB78();
}

unint64_t sub_10062AD50()
{
  unint64_t result = qword_1009A1778;
  if (!qword_1009A1778)
  {
    uint64_t v1 = type metadata accessor for CryptoError(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CryptoError, v1);
    atomic_store(result, (unint64_t *)&qword_1009A1778);
  }

  return result;
}

uint64_t sub_10062AD98(void *a1)
{
  Swift::String v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B8BF0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_10062CA00();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AccessoryInfoRequestInfo.FirmwareData.CodingKeys,  &type metadata for AccessoryInfoRequestInfo.FirmwareData.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v31 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v31, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = *((unsigned __int8 *)v3 + 24);
    char v30 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v30, v5);
    uint64_t v16 = *((unsigned int *)v3 + 7);
    unsigned __int8 v17 = *((_BYTE *)v3 + 32);
    char v29 = 2;
    v28[1] = v17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16 | ((unint64_t)v17 << 32), &v29, v5);
    int v18 = *((unsigned __int8 *)v3 + 33);
    int v19 = *((unsigned __int8 *)v3 + 34);
    v28[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18 | (v19 << 8), v28, v5);
    uint64_t v20 = v3[5];
    uint64_t v21 = v3[6];
    v27[0] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, v27, v5);
    uint64_t v22 = v3[7];
    uint64_t v23 = v3[8];
    char v26 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v26, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10062AF68()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10062AFA4 + 4 * byte_100810F10[*v0]))( 0x657261776D726966LL,  0xEF6E6F6973726556LL);
}

uint64_t sub_10062AFA4()
{
  return 0x79726F6765746163LL;
}

uint64_t sub_10062AFBC()
{
  return 0x696C696261706163LL;
}

uint64_t sub_10062AFDC()
{
  return 0x5479726574746162LL;
}

unint64_t sub_10062AFFC()
{
  return 0xD000000000000010LL;
}

uint64_t sub_10062B018()
{
  return 0x6D614E6C65646F6DLL;
}

uint64_t sub_10062B034@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10062C4A0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10062B058(uint64_t a1)
{
  unint64_t v2 = sub_10062CA00();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10062B080(uint64_t a1)
{
  unint64_t v2 = sub_10062CA00();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10062B0A8(void *a1)
{
  return sub_10062AD98(a1);
}

uint64_t sub_10062B0BC(void *a1)
{
  Swift::String v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B8BA8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_10062BE7C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AccessoryInfoRequestInfo.CodingKeys,  &type metadata for AccessoryInfoRequestInfo.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  LOBYTE(v25[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, v25, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    LOBYTE(v25[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, v25, v5);
    __int128 v16 = *((_OWORD *)v3 + 5);
    void v25[2] = *((_OWORD *)v3 + 4);
    v25[3] = v16;
    uint64_t v26 = v3[12];
    __int128 v17 = *((_OWORD *)v3 + 3);
    v25[0] = *((_OWORD *)v3 + 2);
    v25[1] = v17;
    char v24 = 2;
    unint64_t v18 = sub_10062BEC0();
    KeyedEncodingContainer.encode<A>(_:forKey:)( v25,  &v24,  v5,  &type metadata for AccessoryInfoRequestInfo.FirmwareData,  v18);
    uint64_t v19 = v3[13];
    LOBYTE(v25[0]) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v25, v5);
    uint64_t v20 = v3[14];
    uint64_t v21 = v3[15];
    LOBYTE(v25[0]) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, v25, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10062B270(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009B8B80);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100012ED8(a1, v8);
  unint64_t v10 = sub_10062BD90();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AccessoryInfoRequestContent.CodingKeys,  &type metadata for AccessoryInfoRequestContent.CodingKeys,  v10,  v8,  v9);
  uint64_t v16 = a2;
  uint64_t v11 = sub_100004AEC(&qword_1009B8B90);
  unint64_t v12 = sub_10062BDD4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10062B374()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10062B3B0 + 4 * byte_100810F16[*v0]))( 0x7250796D646E6966LL,  0xEF6449746375646FLL);
}

uint64_t sub_10062B3B0()
{
  return 0x56746E6572727563LL;
}

uint64_t sub_10062B3D4()
{
  return 0x657261776D726966LL;
}

uint64_t sub_10062B3F4()
{
  return 0x747865746E6F63LL;
}

uint64_t sub_10062B40C()
{
  return 0x496B726F7774656ELL;
}

uint64_t sub_10062B428@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10062C778(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10062B44C(uint64_t a1)
{
  unint64_t v2 = sub_10062BE7C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10062B474(uint64_t a1)
{
  unint64_t v2 = sub_10062BE7C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10062B49C(void *a1)
{
  return sub_10062B0BC(a1);
}

uint64_t sub_10062B4B0(uint64_t a1)
{
  unint64_t v2 = sub_10062BD90();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10062B4D8(uint64_t a1)
{
  unint64_t v2 = sub_10062BD90();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10062B500(void *a1)
{
  return sub_10062B270(a1, *v1);
}

uint64_t sub_10062B518@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (int *)type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v5 = a1 + v4[10];
  if ((*(_BYTE *)(v5 + 16) & 1) != 0)
  {
    uint64_t v6 = sub_100451D18();
    uint64_t v29 = v7;
    uint64_t v30 = v6;
  }

  else
  {
    unint64_t v9 = *(void *)v5;
    unint64_t v8 = *(void *)(v5 + 8);
    unint64_t v10 = sub_10008B7DC();
    uint64_t v31 = CustomStringConvertible.typeDescription.getter( &type metadata for LocalFindableAccessoryFirmwareVersionNumber,  v10);
    uint64_t v32 = v11;
    v12._countAndFlagsBits = 32LL;
    v12._object = (void *)0xE100000000000000LL;
    String.append(_:)(v12);
    v13._countAndFlagsBits = sub_100597798(v9, v8);
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    uint64_t v29 = v32;
    uint64_t v30 = v31;
  }

  uint64_t v14 = a1 + v4[11];
  uint64_t v15 = *(void *)v14;
  char v28 = *(_BYTE *)(v14 + 8);
  uint64_t v16 = a1 + v4[12];
  if ((*(_BYTE *)(v16 + 4) & 1) != 0) {
    int v17 = 0;
  }
  else {
    int v17 = sub_1006DB574(*(_DWORD *)v16);
  }
  int v18 = *(unsigned __int8 *)(a1 + v4[13]);
  BOOL v19 = v18 == 4;
  if (v18 == 4) {
    char v20 = 0;
  }
  else {
    char v20 = *(_BYTE *)(a1 + v4[13]);
  }
  uint64_t v21 = v4[7];
  uint64_t v22 = (uint64_t *)(a1 + v4[6]);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  uint64_t v26 = *(void *)(a1 + v21);
  uint64_t v25 = *(void *)(a1 + v21 + 8);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v23);
  uint64_t result = sub_100613948(a1);
  *(void *)a2 = v30;
  *(void *)(a2 + 8) = v29;
  *(void *)(a2 + swift_weakDestroy(v0 + 16) = v15;
  *(_BYTE *)(a2 + 24) = v28;
  *(_DWORD *)(a2 + 28) = v17;
  *(_BYTE *)(a2 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0;
  *(_BYTE *)(a2 + 33) = v20;
  *(_BYTE *)(a2 + 34) = v19;
  *(void *)(a2 + 40) = v24;
  *(void *)(a2 + 48) = v23;
  *(void *)(a2 + 56) = v26;
  *(void *)(a2 + 64) = v25;
  return result;
}

uint64_t sub_10062B6A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = &v50[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v9);
  Swift::String v13 = &v50[-v12];
  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  uint64_t v14 = (void *)qword_100A2AF38;
  id v15 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v16 = [v15 isInternalBuild];

  uint64_t v62 = a2;
  if (v16
    && (NSString v17 = String._bridgeToObjectiveC()(),
        id v18 = [v14 stringForKey:v17],
        v17,
        v18))
  {
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    uint64_t v21 = v20;

    sub_100613904(a1, (uint64_t)v13);
    if (v21)
    {
      uint64_t v52 = v21;
      uint64_t v53 = v19;
      goto LABEL_9;
    }
  }

  else
  {
    sub_100613904(a1, (uint64_t)v13);
  }

  __int128 v65 = *(_OWORD *)&v13[*(int *)(v8 + 20)];
  unint64_t v22 = sub_10008A064();
  uint64_t v53 = RawRepresentable<>.hexString.getter(&type metadata for AccessoryProductData, v22);
  uint64_t v52 = v23;
LABEL_9:
  sub_100613948((uint64_t)v13);
  uint64_t v24 = (uint64_t *)(a1 + *(int *)(v8 + 60));
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  uint64_t v63 = a1;
  sub_100613904(a1, (uint64_t)v11);
  swift_bridgeObjectRetain(v25);
  sub_10062B518((uint64_t)v11, (uint64_t)&v65);
  uint64_t v27 = *((void *)&v65 + 1);
  uint64_t v28 = v65;
  uint64_t v29 = v66;
  int v30 = v68;
  int v55 = v69;
  int v56 = v67;
  int v61 = v70;
  int v54 = v71;
  uint64_t v59 = v73;
  uint64_t v60 = v72;
  uint64_t v57 = v74;
  uint64_t v58 = v75;
  if (a3 == 3)
  {
    uint64_t v31 = 0LL;
    uint64_t v32 = 0LL;
  }

  else
  {
    char v64 = a3;
    unint64_t v33 = sub_100041584();
    uint64_t v34 = FixedWidthInteger.data.getter(&type metadata for UInt8, v33);
    int v51 = v30;
    uint64_t v35 = v29;
    uint64_t v36 = v27;
    uint64_t v37 = v28;
    uint64_t v38 = v26;
    unint64_t v40 = v39;
    uint64_t v31 = Data.hexString.getter(v34, v39);
    uint64_t v32 = v41;
    unint64_t v42 = v40;
    uint64_t v26 = v38;
    uint64_t v28 = v37;
    uint64_t v27 = v36;
    uint64_t v29 = v35;
    int v30 = v51;
    sub_100016F9C(v34, v42);
  }

  uint64_t v43 = v62;
  uint64_t result = sub_100613948(v63);
  char v45 = v56 & 1;
  char v46 = v55 & 1;
  char v47 = v54 & 1;
  *(void *)a4 = v53;
  *(void *)(a4 + 8) = v52;
  *(void *)(a4 + swift_weakDestroy(v0 + 16) = v26;
  *(void *)(a4 + 24) = v25;
  *(void *)(a4 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v28;
  *(void *)(a4 + 40) = v27;
  *(void *)(a4 + 48) = v29;
  *(_BYTE *)(a4 + 56) = v45;
  *(_DWORD *)(a4 + 60) = v30;
  *(_BYTE *)(a4 + 64) = v46;
  *(_BYTE *)(a4 + 65) = v61;
  *(_BYTE *)(a4 + 66) = v47;
  uint64_t v48 = v59;
  *(void *)(a4 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v60;
  *(void *)(a4 + 80) = v48;
  uint64_t v49 = v58;
  *(void *)(a4 + 88) = v57;
  *(void *)(a4 + 96) = v49;
  *(void *)(a4 + 104) = v43;
  *(void *)(a4 + 11_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v31;
  *(void *)(a4 + 120) = v32;
  return result;
}

uint64_t destroy for AccessoryInfoRequestInfo(void *a1)
{
  return swift_bridgeObjectRelease(a1[15]);
}

uint64_t initializeWithCopy for AccessoryInfoRequestInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  int v6 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v6;
  *(_WORD *)(a1 + 65) = *(_WORD *)(a2 + 65);
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  uint64_t v9 = *(void *)(a2 + 120);
  *(void *)(a1 + 120) = v9;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t assignWithCopy for AccessoryInfoRequestInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 48) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v10;
  *(_WORD *)(a1 + 65) = *(_WORD *)(a2 + 65);
  *(void *)(a1 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(void *)(a2 + 72);
  uint64_t v11 = *(void *)(a2 + 80);
  uint64_t v12 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v13 = *(void *)(a2 + 96);
  uint64_t v14 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 11_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(void *)(a2 + 112);
  uint64_t v15 = *(void *)(a2 + 120);
  uint64_t v16 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

uint64_t assignWithTake for AccessoryInfoRequestInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_WORD *)(a1 + 65) = *(_WORD *)(a2 + 65);
  uint64_t v10 = *(void *)(a2 + 80);
  uint64_t v11 = *(void *)(a1 + 80);
  *(void *)(a1 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 96);
  uint64_t v13 = *(void *)(a1 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v12;
  swift_bridgeObjectRelease(v13);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  uint64_t v14 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryInfoRequestInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 128)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryInfoRequestInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0LL;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 128) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoRequestInfo()
{
  return &type metadata for AccessoryInfoRequestInfo;
}

ValueMetadata *type metadata accessor for AccessoryInfoRequestContent()
{
  return &type metadata for AccessoryInfoRequestContent;
}

unint64_t sub_10062BD90()
{
  unint64_t result = qword_1009B8B88;
  if (!qword_1009B8B88)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008111CC, &type metadata for AccessoryInfoRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8B88);
  }

  return result;
}

unint64_t sub_10062BDD4()
{
  unint64_t result = qword_1009B8B98;
  if (!qword_1009B8B98)
  {
    uint64_t v1 = sub_100004B78(&qword_1009B8B90);
    sub_10062BE38();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009B8B98);
  }

  return result;
}

unint64_t sub_10062BE38()
{
  unint64_t result = qword_1009B8BA0;
  if (!qword_1009B8BA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100810F7C, &type metadata for AccessoryInfoRequestInfo);
    atomic_store(result, (unint64_t *)&qword_1009B8BA0);
  }

  return result;
}

unint64_t sub_10062BE7C()
{
  unint64_t result = qword_1009B8BB0;
  if (!qword_1009B8BB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10081117C, &type metadata for AccessoryInfoRequestInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8BB0);
  }

  return result;
}

unint64_t sub_10062BEC0()
{
  unint64_t result = qword_1009B8BB8;
  if (!qword_1009B8BB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100811154, &type metadata for AccessoryInfoRequestInfo.FirmwareData);
    atomic_store(result, (unint64_t *)&qword_1009B8BB8);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for AccessoryInfoRequestInfo.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10062BF50 + 4 * byte_100810F20[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10062BF84 + 4 * byte_100810F1B[v4]))();
}

uint64_t sub_10062BF84(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10062BF8C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10062BF94LL);
  }
  return result;
}

uint64_t sub_10062BFA0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10062BFA8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10062BFAC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10062BFB4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoRequestInfo.CodingKeys()
{
  return &type metadata for AccessoryInfoRequestInfo.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AccessoryInfoRequestContent.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10062C010 + 4 * byte_100810F25[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10062C030 + 4 * byte_100810F2A[v4]))();
  }
}

_BYTE *sub_10062C010(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_10062C030(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10062C038(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10062C040(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10062C048(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10062C050(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoRequestContent.CodingKeys()
{
  return &type metadata for AccessoryInfoRequestContent.CodingKeys;
}

uint64_t destroy for AccessoryInfoRequestInfo.FirmwareData(void *a1)
{
  return swift_bridgeObjectRelease(a1[8]);
}

uint64_t initializeWithCopy for AccessoryInfoRequestInfo.FirmwareData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(_BYTE *)(a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for AccessoryInfoRequestInfo.FirmwareData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = v6;
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 64);
  uint64_t v10 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t assignWithTake for AccessoryInfoRequestInfo.FirmwareData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(_BYTE *)(a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 64);
  uint64_t v9 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryInfoRequestInfo.FirmwareData(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryInfoRequestInfo.FirmwareData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoRequestInfo.FirmwareData()
{
  return &type metadata for AccessoryInfoRequestInfo.FirmwareData;
}

unint64_t sub_10062C2F4()
{
  unint64_t result = qword_1009B8BC0;
  if (!qword_1009B8BC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100811074, &type metadata for AccessoryInfoRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8BC0);
  }

  return result;
}

unint64_t sub_10062C33C()
{
  unint64_t result = qword_1009B8BC8;
  if (!qword_1009B8BC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10081112C, &type metadata for AccessoryInfoRequestInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8BC8);
  }

  return result;
}

unint64_t sub_10062C384()
{
  unint64_t result = qword_1009B8BD0;
  if (!qword_1009B8BD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10081109C, &type metadata for AccessoryInfoRequestInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8BD0);
  }

  return result;
}

unint64_t sub_10062C3CC()
{
  unint64_t result = qword_1009B8BD8;
  if (!qword_1009B8BD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008110C4, &type metadata for AccessoryInfoRequestInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8BD8);
  }

  return result;
}

unint64_t sub_10062C414()
{
  unint64_t result = qword_1009B8BE0;
  if (!qword_1009B8BE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100810FE4, &type metadata for AccessoryInfoRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8BE0);
  }

  return result;
}

unint64_t sub_10062C45C()
{
  unint64_t result = qword_1009B8BE8;
  if (!qword_1009B8BE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10081100C, &type metadata for AccessoryInfoRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8BE8);
  }

  return result;
}

uint64_t sub_10062C4A0(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x657261776D726966LL && a2 == 0xEF6E6F6973726556LL)
  {
    unint64_t v5 = 0xEF6E6F6973726556LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657261776D726966LL, 0xEF6E6F6973726556LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x79726F6765746163LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v7 = 0xE800000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79726F6765746163LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x696C696261706163LL && a2 == 0xEC00000073656974LL)
  {
    unint64_t v8 = 0xEC00000073656974LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696C696261706163LL, 0xEC00000073656974LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x5479726574746162LL && a2 == 0xEB00000000657079LL)
  {
    unint64_t v9 = 0xEB00000000657079LL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5479726574746162LL, 0xEB00000000657079LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_26;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v10 = 0x8000000100851DE0LL;
    if (a2 == 0x8000000100851DE0LL) {
      goto LABEL_31;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x8000000100851DE0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if (a1 == 0x6D614E6C65646F6DLL && a2 == 0xE900000000000065LL)
  {
    swift_bridgeObjectRelease(0xE900000000000065LL);
    return 5LL;
  }

  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6D614E6C65646F6DLL, 0xE900000000000065LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

uint64_t sub_10062C778(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x7250796D646E6966LL && a2 == 0xEF6449746375646FLL)
  {
    unint64_t v5 = 0xEF6449746375646FLL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7250796D646E6966LL, 0xEF6449746375646FLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x56746E6572727563LL && a2 == 0xEE006E6F69737265LL)
  {
    unint64_t v7 = 0xEE006E6F69737265LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x56746E6572727563LL, 0xEE006E6F69737265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x657261776D726966LL && a2 == 0xEC00000061746144LL)
  {
    unint64_t v8 = 0xEC00000061746144LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657261776D726966LL, 0xEC00000061746144LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x747865746E6F63LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v9 = 0xE700000000000000LL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x747865746E6F63LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_26;
  }

  if (a1 == 0x496B726F7774656ELL && a2 == 0xE900000000000064LL)
  {
    swift_bridgeObjectRelease(0xE900000000000064LL);
    return 4LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x496B726F7774656ELL, 0xE900000000000064LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

unint64_t sub_10062CA00()
{
  unint64_t result = qword_1009B8BF8;
  if (!qword_1009B8BF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008112D4, &type metadata for AccessoryInfoRequestInfo.FirmwareData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8BF8);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for AccessoryInfoRequestInfo.FirmwareData.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_10062CA90 + 4 * byte_100810F34[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10062CAC4 + 4 * byte_100810F2F[v4]))();
}

uint64_t sub_10062CAC4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10062CACC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10062CAD4LL);
  }
  return result;
}

uint64_t sub_10062CAE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10062CAE8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_10062CAEC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10062CAF4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoRequestInfo.FirmwareData.CodingKeys()
{
  return &type metadata for AccessoryInfoRequestInfo.FirmwareData.CodingKeys;
}

unint64_t sub_10062CB14()
{
  unint64_t result = qword_1009B8C00;
  if (!qword_1009B8C00)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008112AC, &type metadata for AccessoryInfoRequestInfo.FirmwareData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8C00);
  }

  return result;
}

unint64_t sub_10062CB5C()
{
  unint64_t result = qword_1009B8C08;
  if (!qword_1009B8C08)
  {
    unint64_t result = swift_getWitnessTable(&unk_10081121C, &type metadata for AccessoryInfoRequestInfo.FirmwareData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8C08);
  }

  return result;
}

unint64_t sub_10062CBA4()
{
  unint64_t result = qword_1009B8C10;
  if (!qword_1009B8C10)
  {
    unint64_t result = swift_getWitnessTable(&unk_100811244, &type metadata for AccessoryInfoRequestInfo.FirmwareData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8C10);
  }

  return result;
}

uint64_t sub_10062CBE8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v8 = sub_100004AEC(&qword_1009B8CE0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100012ED8(a1, v12);
  unint64_t v14 = sub_10062DFB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AccessoryLostModeRequest.CodingKeys,  &type metadata for AccessoryLostModeRequest.CodingKeys,  v14,  v12,  v13);
  v21[0] = a2;
  char v22 = 0;
  uint64_t v15 = sub_100004AEC(&qword_1009B1148);
  uint64_t v16 = sub_1005E0D34( &qword_1009B58B0,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <> [A : B]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v22, v8, v15, v16);
  if (!v4)
  {
    v21[0] = a3;
    v21[1] = v20;
    char v22 = 1;
    unint64_t v17 = sub_1000170A4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v22, v8, &type metadata for Data, v17);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10062CD5C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B8CC0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_10062DD74();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AccessoryLostModeRequestContent.CodingKeys,  &type metadata for AccessoryLostModeRequestContent.CodingKeys,  v11,  v9,  v10);
  char v35 = 0;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v35, v5, v12, v13);
  if (!v2)
  {
    unint64_t v14 = (int *)type metadata accessor for AccessoryLostModeRequestContent(0LL);
    uint64_t v15 = (uint64_t *)(v3 + v14[5]);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    char v34 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v34, v5);
    id v18 = (uint64_t *)(v3 + v14[6]);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    char v33 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, &v33, v5);
    uint64_t v21 = (uint64_t *)(v3 + v14[7]);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    char v32 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v32, v5);
    uint64_t v24 = (uint64_t *)(v3 + v14[8]);
    uint64_t v25 = *v24;
    uint64_t v26 = v24[1];
    char v31 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, &v31, v5);
    uint64_t v27 = *(unsigned __int8 *)(v3 + v14[9]);
    char v30 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v27, &v30, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10062CF70(uint64_t a1)
{
  unint64_t v2 = sub_10062DFB4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10062CF98(uint64_t a1)
{
  unint64_t v2 = sub_10062DFB4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10062CFC0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10062DDB8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }

  return result;
}

uint64_t sub_10062CFEC(void *a1)
{
  return sub_10062CBE8(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_10062D008()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10062D034 + 4 * byte_100811330[*v0]))( 0x6449616E6D66LL,  0xE600000000000000LL);
}

uint64_t sub_10062D034()
{
  return 0x656C746974LL;
}

uint64_t sub_10062D048()
{
  return 0x6567617373656DLL;
}

uint64_t sub_10062D060()
{
  return 0x6C69616D65LL;
}

uint64_t sub_10062D074()
{
  return 0x6D754E72656E776FLL;
}

uint64_t sub_10062D094()
{
  return 0x65646F4D74736F6CLL;
}

uint64_t sub_10062D0B8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10062E340(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10062D0DC(uint64_t a1)
{
  unint64_t v2 = sub_10062DD74();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10062D104(uint64_t a1)
{
  unint64_t v2 = sub_10062DD74();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10062D12C(void *a1)
{
  return sub_10062CD5C(a1);
}

void sub_10062D140( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t v69 = a7;
  uint64_t v70 = a8;
  uint64_t v67 = a5;
  uint64_t v68 = a6;
  uint64_t v65 = a3;
  uint64_t v66 = a4;
  uint64_t v64 = a2;
  unint64_t v11 = (int *)type metadata accessor for AccessoryLostModeRequestContent(0LL);
  uint64_t v12 = __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v61 - v15;
  uint64_t v17 = type metadata accessor for Date(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v21 = sub_100412D14((uint64_t)_swiftEmptyArrayStorage);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v21);
  uint64_t v71 = v21;
  sub_10005C260( 1702195828LL,  0xE400000000000000LL,  0xD00000000000001BLL,  0x8000000100855CD0LL,  isUniquelyReferenced_nonNull_native);
  uint64_t v23 = v71;
  swift_bridgeObjectRelease();
  id v24 = [(id)objc_opt_self(AKDevice) currentDevice];
  if (v24)
  {
    uint64_t v25 = v24;
    id v26 = objc_msgSend(v24, "serverFriendlyDescription", v14);

    if (v26)
    {
      int v63 = a10;
      uint64_t v62 = a9;
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      uint64_t v29 = v28;

      char v30 = swift_isUniquelyReferenced_nonNull_native(v23);
      uint64_t v71 = v23;
      sub_10005C260(v27, v29, 0xD000000000000011LL, 0x8000000100854B60LL, v30);
      uint64_t v31 = v71;
      uint64_t v32 = swift_bridgeObjectRelease();
      uint64_t v33 = Date.init()(v32);
      uint64_t v34 = Date.epoch.getter(v33);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
      uint64_t v71 = v34;
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
      uint64_t v37 = v36;
      char v38 = swift_isUniquelyReferenced_nonNull_native(v31);
      uint64_t v71 = v31;
      sub_10005C260(v35, v37, 0xD000000000000015LL, 0x8000000100855CF0LL, v38);
      uint64_t v39 = v71;
      swift_bridgeObjectRelease();
      uint64_t v71 = 1LL;
      uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      uint64_t v42 = v41;
      char v43 = swift_isUniquelyReferenced_nonNull_native(v39);
      uint64_t v71 = v39;
      sub_10005C260(v40, v42, 0xD000000000000013LL, 0x8000000100855D10LL, v43);
      uint64_t v44 = v71;
      swift_bridgeObjectRelease();
      id v45 = sub_1003F349C();
      uint64_t v47 = v46;
      char v48 = swift_isUniquelyReferenced_nonNull_native(v44);
      uint64_t v71 = v44;
      sub_10005C260((uint64_t)v45, v47, 0x6567412D72657355LL, 0xEA0000000000746ELL, v48);
      swift_bridgeObjectRelease();
      uint64_t v49 = type metadata accessor for UUID(0LL);
      uint64_t v50 = *(void *)(v49 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v16, a1, v49);
      int v51 = &v16[v11[5]];
      uint64_t v52 = v65;
      *(void *)int v51 = v64;
      *((void *)v51 + 1) = v52;
      uint64_t v53 = &v16[v11[6]];
      uint64_t v54 = v67;
      *(void *)uint64_t v53 = v66;
      *((void *)v53 + 1) = v54;
      int v55 = &v16[v11[7]];
      uint64_t v56 = v69;
      *(void *)int v55 = v68;
      *((void *)v55 + 1) = v56;
      uint64_t v57 = &v16[v11[8]];
      uint64_t v58 = v62;
      *(void *)uint64_t v57 = v70;
      *((void *)v57 + 1) = v58;
      v16[v11[9]] = v63 & 1;
      uint64_t v59 = type metadata accessor for JSONEncoder(0LL);
      swift_allocObject(v59, *(unsigned int *)(v59 + 48), *(unsigned __int16 *)(v59 + 52));
      JSONEncoder.init()();
      uint64_t v60 = sub_100007864( &qword_1009B8C18,  type metadata accessor for AccessoryLostModeRequestContent,  (uint64_t)&unk_10081140C);
      dispatch thunk of JSONEncoder.encode<A>(_:)(v16, v11, v60);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(a1, v49);
      sub_10062D6F8((uint64_t)v16);
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t type metadata accessor for AccessoryLostModeRequestContent(uint64_t a1)
{
  uint64_t result = qword_1009B8C78;
  if (!qword_1009B8C78) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryLostModeRequestContent);
  }
  return result;
}

uint64_t sub_10062D6B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccessoryLostModeRequestContent(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10062D6F8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccessoryLostModeRequestContent(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *sub_10062D734(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *a1 = *a2;
    a1 = (void *)(v24 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v24);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (void *)((char *)a1 + v8);
    unint64_t v11 = (void *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (void *)((char *)a1 + v9);
    unint64_t v14 = (void *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    uint64_t v18 = (void *)((char *)a1 + v16);
    uint64_t v19 = (void *)((char *)a2 + v16);
    uint64_t v20 = v19[1];
    void *v18 = *v19;
    v18[1] = v20;
    unint64_t v21 = (void *)((char *)a1 + v17);
    uint64_t v22 = (void *)((char *)a2 + v17);
    uint64_t v23 = v22[1];
    *unint64_t v21 = *v22;
    v21[1] = v23;
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v23);
  }

  return a1;
}

uint64_t sub_10062D828(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[7] + 8));
  return swift_bridgeObjectRelease(*(void *)(a1 + a2[8] + 8));
}

uint64_t sub_10062D8A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  void *v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  void *v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)(a1 + v15);
  uint64_t v18 = (void *)(a2 + v15);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = (void *)(a1 + v16);
  unint64_t v21 = (void *)(a2 + v16);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v22);
  return a1;
}

uint64_t sub_10062D968(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  *uint64_t v13 = *v14;
  uint64_t v15 = v14[1];
  uint64_t v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = a3[7];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  void *v18 = *v19;
  uint64_t v20 = v19[1];
  uint64_t v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  uint64_t v22 = a3[8];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (void *)(a2 + v22);
  *uint64_t v23 = *v24;
  uint64_t v25 = v24[1];
  uint64_t v26 = v23[1];
  v23[1] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10062DA74(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10062DAF8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v12 = v8[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = a3[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  uint64_t v18 = v14[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  uint64_t v19 = a3[7];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  uint64_t v24 = v20[1];
  *uint64_t v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease(v24);
  uint64_t v25 = a3[8];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (uint64_t *)(a2 + v25);
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  uint64_t v30 = v26[1];
  *uint64_t v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease(v30);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10062DBC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10062DBD0);
}

uint64_t sub_10062DBD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  int v10 = v9 - 1;
  if (v10 < 0) {
    int v10 = -1;
  }
  return (v10 + 1);
}

uint64_t sub_10062DC5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10062DC68);
}

uint64_t sub_10062DC68(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t sub_10062DCE4(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_100811370;
    void v4[2] = &unk_100811370;
    void v4[3] = &unk_100811370;
    void v4[4] = &unk_100811370;
    void v4[5] = &unk_100811388;
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

ValueMetadata *type metadata accessor for AccessoryLostModeRequest()
{
  return &type metadata for AccessoryLostModeRequest;
}

unint64_t sub_10062DD74()
{
  unint64_t result = qword_1009B8CC8;
  if (!qword_1009B8CC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100811658, &type metadata for AccessoryLostModeRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8CC8);
  }

  return result;
}

uint64_t sub_10062DDB8(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009B8CD0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v17[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100012ED8(a1, v7);
  unint64_t v9 = sub_10062DFB4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AccessoryLostModeRequest.CodingKeys,  &type metadata for AccessoryLostModeRequest.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    uint64_t v10 = sub_100004AEC(&qword_1009B1148);
    char v18 = 0;
    uint64_t v11 = sub_1005E0D34( &qword_1009B58A0,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v10, &v18, v3, v10, v11);
    uint64_t v7 = v17[0];
    char v18 = 1;
    unint64_t v13 = sub_100016FE0();
    swift_bridgeObjectRetain(v7);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, &type metadata for Data, &v18, v3, &type metadata for Data, v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v14 = v17[0];
    unint64_t v15 = v17[1];
    swift_bridgeObjectRetain(v7);
    sub_10001736C(v14, v15);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    swift_bridgeObjectRelease();
    sub_100016F9C(v14, v15);
  }

  return v7;
}

unint64_t sub_10062DFB4()
{
  unint64_t result = qword_1009B8CD8;
  if (!qword_1009B8CD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100811608, &type metadata for AccessoryLostModeRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8CD8);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for AccessoryLostModeRequest.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10062E044 + 4 * byte_10081133B[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10062E078 + 4 * byte_100811336[v4]))();
}

uint64_t sub_10062E078(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10062E080(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10062E088LL);
  }
  return result;
}

uint64_t sub_10062E094(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10062E09CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10062E0A0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10062E0A8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryLostModeRequest.CodingKeys()
{
  return &type metadata for AccessoryLostModeRequest.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AccessoryLostModeRequestContent.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_10062E110 + 4 * byte_100811345[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10062E144 + 4 * byte_100811340[v4]))();
}

uint64_t sub_10062E144(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10062E14C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10062E154LL);
  }
  return result;
}

uint64_t sub_10062E160(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10062E168LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_10062E16C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10062E174(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryLostModeRequestContent.CodingKeys()
{
  return &type metadata for AccessoryLostModeRequestContent.CodingKeys;
}

unint64_t sub_10062E194()
{
  unint64_t result = qword_1009B8CE8;
  if (!qword_1009B8CE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100811528, &type metadata for AccessoryLostModeRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8CE8);
  }

  return result;
}

unint64_t sub_10062E1DC()
{
  unint64_t result = qword_1009B8CF0;
  if (!qword_1009B8CF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008115E0, &type metadata for AccessoryLostModeRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8CF0);
  }

  return result;
}

unint64_t sub_10062E224()
{
  unint64_t result = qword_1009B8CF8;
  if (!qword_1009B8CF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100811550, &type metadata for AccessoryLostModeRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8CF8);
  }

  return result;
}

unint64_t sub_10062E26C()
{
  unint64_t result = qword_1009B8D00;
  if (!qword_1009B8D00)
  {
    unint64_t result = swift_getWitnessTable(&unk_100811578, &type metadata for AccessoryLostModeRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8D00);
  }

  return result;
}

unint64_t sub_10062E2B4()
{
  unint64_t result = qword_1009B8D08;
  if (!qword_1009B8D08)
  {
    unint64_t result = swift_getWitnessTable(&unk_100811498, &type metadata for AccessoryLostModeRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8D08);
  }

  return result;
}

unint64_t sub_10062E2FC()
{
  unint64_t result = qword_1009B8D10;
  if (!qword_1009B8D10)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008114C0, &type metadata for AccessoryLostModeRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8D10);
  }

  return result;
}

uint64_t sub_10062E340(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6449616E6D66LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v5 = 0xE600000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449616E6D66LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x656C746974LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v7 = 0xE500000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000LL)
  {
    unint64_t v8 = 0xE700000000000000LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6567617373656DLL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x6C69616D65LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v9 = 0xE500000000000000LL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C69616D65LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_26;
  }

  if (a1 == 0x6D754E72656E776FLL && a2 == 0xEB00000000726562LL)
  {
    unint64_t v10 = 0xEB00000000726562LL;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D754E72656E776FLL, 0xEB00000000726562LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_32;
  }

  if (a1 == 0x65646F4D74736F6CLL && a2 == 0xEF64656C62616E45LL)
  {
    swift_bridgeObjectRelease(0xEF64656C62616E45LL);
    return 5LL;
  }

  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65646F4D74736F6CLL, 0xEF64656C62616E45LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

uint64_t *sub_10062E5E4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_10001736C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_10001736C(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = a2[4];
    unint64_t v12 = a2[5];
    sub_10001736C(v11, v12);
    a1[4] = v11;
    a1[5] = v12;
    uint64_t v13 = a2[7];
    a1[6] = a2[6];
    a1[7] = v13;
    uint64_t v14 = *(int *)(a3 + 32);
    unint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for UUID(0LL);
    char v18 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v17 - 8) + 16LL);
    __n128 v19 = swift_bridgeObjectRetain(v13);
    v18(v15, v16, v17, v19);
    uint64_t v20 = *(int *)(a3 + 36);
    uint64_t v21 = (uint64_t *)((char *)a1 + v20);
    uint64_t v22 = (uint64_t *)((char *)a2 + v20);
    uint64_t v23 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v23;
    swift_bridgeObjectRetain(v23);
  }

  return a1;
}

uint64_t sub_10062E6E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  return swift_bridgeObjectRelease();
}

uint64_t *sub_10062E760(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_10001736C(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = a2[4];
  unint64_t v11 = a2[5];
  sub_10001736C(v10, v11);
  a1[4] = v10;
  a1[5] = v11;
  uint64_t v12 = a2[7];
  a1[6] = a2[6];
  a1[7] = v12;
  uint64_t v13 = *(int *)(a3 + 32);
  uint64_t v14 = (char *)a1 + v13;
  unint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for UUID(0LL);
  uint64_t v17 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v16 - 8) + 16LL);
  __n128 v18 = swift_bridgeObjectRetain(v12);
  v17(v14, v15, v16, v18);
  uint64_t v19 = *(int *)(a3 + 36);
  uint64_t v20 = (uint64_t *)((char *)a1 + v19);
  uint64_t v21 = (uint64_t *)((char *)a2 + v19);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  return a1;
}

uint64_t *sub_10062E834(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100016F9C(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_10001736C(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_100016F9C(v12, v13);
  uint64_t v14 = a2[4];
  unint64_t v15 = a2[5];
  sub_10001736C(v14, v15);
  uint64_t v16 = a1[4];
  unint64_t v17 = a1[5];
  a1[4] = v14;
  a1[5] = v15;
  sub_100016F9C(v16, v17);
  a1[6] = a2[6];
  uint64_t v18 = a2[7];
  a1[7] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease();
  uint64_t v19 = *(int *)(a3 + 32);
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 24LL))(v20, v21, v22);
  uint64_t v23 = *(int *)(a3 + 36);
  uint64_t v24 = (uint64_t *)((char *)a1 + v23);
  uint64_t v25 = (uint64_t *)((char *)a2 + v23);
  *uint64_t v24 = *v25;
  uint64_t v26 = v25[1];
  v24[1] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_10062E938(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  __int128 v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = *(int *)(a3 + 32);
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v9, v10, v11);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 36)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t *sub_10062E9B8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016F9C(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_100016F9C(v8, v9);
  uint64_t v10 = a1[4];
  unint64_t v11 = a1[5];
  *((_OWORD *)a1 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(_OWORD *)(a2 + 32);
  sub_100016F9C(v10, v11);
  uint64_t v12 = *(void *)(a2 + 56);
  a1[6] = *(void *)(a2 + 48);
  a1[7] = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(int *)(a3 + 32);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 40LL))(v14, v15, v16);
  uint64_t v17 = *(int *)(a3 + 36);
  uint64_t v18 = (uint64_t *)((char *)a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  void *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10062EA7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10062EA88);
}

uint64_t sub_10062EA88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 56);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UUID(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 32),  a2,  v8);
  }

uint64_t sub_10062EB04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10062EB10);
}

uint64_t sub_10062EB10(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 56) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 32),  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata accessor for AccessoryPairingLockCheckResponse(uint64_t a1)
{
  uint64_t result = qword_1009B8D70;
  if (!qword_1009B8D70) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryPairingLockCheckResponse);
  }
  return result;
}

uint64_t sub_10062EBC0(uint64_t a1)
{
  v4[0] = &unk_1008116F8;
  v4[1] = &unk_1008116F8;
  void v4[2] = &unk_1008116F8;
  void v4[3] = &unk_100811710;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    void v4[4] = *(void *)(result - 8) + 64LL;
    void v4[5] = &unk_100811710;
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void sub_10062EC40(char *a1)
{
}

void sub_10062EC4C()
{
}

void sub_10062EC54(uint64_t a1)
{
}

void sub_10062EC5C(uint64_t a1)
{
}

unint64_t sub_10062EC64@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10062F518(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10062EC90()
{
  return ((uint64_t (*)(void))((char *)sub_10062ECBC + 4 * byte_1008116B0[*v0]))();
}

void sub_10062ECBC(void *a1@<X8>)
{
  *a1 = 0x6953726576726573LL;
  a1[1] = 0xEA00000000006E67LL;
}

void sub_10062ECDC(void *a1@<X8>)
{
  *a1 = 0x6E656B6F74LL;
  a1[1] = v1;
}

void sub_10062ECF0(void *a1@<X8>)
{
  *a1 = 0xD000000000000010LL;
  a1[1] = 0x8000000100850100LL;
}

void sub_10062ED10(void *a1@<X8>)
{
  *a1 = 0x6449616E6D66LL;
  a1[1] = 0xE600000000000000LL;
}

void sub_10062ED28(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t sub_10062ED50()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10062ED7C + 4 * byte_1008116B6[*v0]))( 0x5364656573LL,  0xE500000000000000LL);
}

uint64_t sub_10062ED7C()
{
  return 0x6953726576726573LL;
}

uint64_t sub_10062ED98()
{
  return 0x6E656B6F74LL;
}

unint64_t sub_10062EDA8()
{
  return 0xD000000000000010LL;
}

uint64_t sub_10062EDC4()
{
  return 0x6449616E6D66LL;
}

uint64_t sub_10062EDD8()
{
  return 0x704164656B73616DLL;
}

unint64_t sub_10062EDFC@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10062F518(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10062EE20(uint64_t a1)
{
  unint64_t v2 = sub_10062F2B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10062EE48(uint64_t a1)
{
  unint64_t v2 = sub_10062F2B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10062EE70@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v36 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v5 = (void *)((char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v38 = sub_100004AEC(&qword_1009B8DB8);
  uint64_t v6 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for AccessoryPairingLockCheckResponse(0LL);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  uint64_t v39 = a1;
  sub_100012ED8(a1, v12);
  unint64_t v14 = sub_10062F2B0();
  uint64_t v37 = v8;
  uint64_t v15 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AccessoryPairingLockCheckResponse.CodingKeys,  &type metadata for AccessoryPairingLockCheckResponse.CodingKeys,  v14,  v12,  v13);
  if (v15) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v39);
  }
  uint64_t v33 = v5;
  uint64_t v34 = v3;
  uint64_t v40 = v6;
  uint64_t v16 = v11;
  uint64_t v17 = v36;
  char v42 = 0;
  unint64_t v18 = sub_100016FE0();
  uint64_t v19 = v37;
  uint64_t v20 = v38;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v41, &type metadata for Data, &v42, v38, &type metadata for Data, v18);
  uint64_t v21 = (uint64_t)v16;
  uint64_t v22 = *((void *)&v41 + 1);
  *(void *)uint64_t v21 = v41;
  *(void *)(v21 + 8) = v22;
  char v42 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v41, &type metadata for Data, &v42, v20, &type metadata for Data, v18);
  *(_OWORD *)(v21 + swift_weakDestroy(v0 + 16) = v41;
  char v42 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v41, &type metadata for Data, &v42, v20, &type metadata for Data, v18);
  *(_OWORD *)(v21 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v41;
  LOBYTE(v41) = 3;
  uint64_t v23 = KeyedDecodingContainer.decode(_:forKey:)(&v41, v20);
  v32[1] = 0LL;
  *(void *)(v21 + 48) = v23;
  *(void *)(v21 + 56) = v24;
  LOBYTE(v41) = 4;
  unint64_t v25 = sub_1003E3C94();
  uint64_t v26 = v33;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v33, v17, &v41, v20, v17, v25);
  (*(void (**)(uint64_t, void *, uint64_t))(v34 + 32))(v21 + *(int *)(v9 + 32), v26, v17);
  LOBYTE(v41) = 5;
  uint64_t v27 = KeyedDecodingContainer.decode(_:forKey:)(&v41, v20);
  uint64_t v29 = v28;
  (*(void (**)(char *, uint64_t))(v40 + 8))(v19, v20);
  uint64_t v30 = (uint64_t *)(v21 + *(int *)(v9 + 36));
  *uint64_t v30 = v27;
  v30[1] = v29;
  sub_10062F2F4(v21, v35);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v39);
  return sub_10062F338(v21);
}

uint64_t sub_10062F29C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10062EE70(a1, a2);
}

unint64_t sub_10062F2B0()
{
  unint64_t result = qword_1009B8DC0;
  if (!qword_1009B8DC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10081184C, &type metadata for AccessoryPairingLockCheckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8DC0);
  }

  return result;
}

uint64_t sub_10062F2F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccessoryPairingLockCheckResponse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10062F338(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccessoryPairingLockCheckResponse(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for AccessoryPairingLockCheckResponse.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_10062F3C0 + 4 * byte_1008116C1[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10062F3F4 + 4 * byte_1008116BC[v4]))();
}

uint64_t sub_10062F3F4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10062F3FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10062F404LL);
  }
  return result;
}

uint64_t sub_10062F410(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10062F418LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_10062F41C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10062F424(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryPairingLockCheckResponse.CodingKeys()
{
  return &type metadata for AccessoryPairingLockCheckResponse.CodingKeys;
}

unint64_t sub_10062F444()
{
  unint64_t result = qword_1009B8DC8;
  if (!qword_1009B8DC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100811824, &type metadata for AccessoryPairingLockCheckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8DC8);
  }

  return result;
}

unint64_t sub_10062F48C()
{
  unint64_t result = qword_1009B8DD0;
  if (!qword_1009B8DD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10081175C, &type metadata for AccessoryPairingLockCheckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8DD0);
  }

  return result;
}

unint64_t sub_10062F4D4()
{
  unint64_t result = qword_1009B8DD8;
  if (!qword_1009B8DD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100811784, &type metadata for AccessoryPairingLockCheckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B8DD8);
  }

  return result;
}

unint64_t sub_10062F518(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100936A78, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6) {
    return 6LL;
  }
  else {
    return v3;
  }
}

void *sub_10062F560(void *a1)
{
  Swift::String v2 = v1;
  uint64_t v4 = sub_100004AEC(&qword_1009A3B00);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v34 = v4;
  uint64_t v35 = v5;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v1[4] = 0LL;
  uint64_t v8 = sub_100004AEC(&qword_1009B8F18);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v1[5] = PassthroughSubject.init()();
  v1[2] = a1;
  uint64_t v9 = (objc_class *)type metadata accessor for KVOHelperNWDatagramConnection();
  uint64_t v10 = (char *)objc_allocWithZone(v9);
  *(void *)&v10[OBJC_IVAR____TtC12searchpartydP33_6037248B8C5D968AAFEBF5992F3E761329KVOHelperNWDatagramConnection_observation] = 0LL;
  *(void *)&v10[OBJC_IVAR____TtC12searchpartydP33_6037248B8C5D968AAFEBF5992F3E761329KVOHelperNWDatagramConnection_observee] = a1;
  id v11 = a1;
  uint64_t v12 = v10;
  id v37 = [v11 connectionState];
  uint64_t v13 = sub_100004AEC(&qword_1009B8F20);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  unint64_t v14 = (void *)CurrentValueSubject.init(_:)(&v37);
  *(void *)&v12[OBJC_IVAR____TtC12searchpartydP33_6037248B8C5D968AAFEBF5992F3E761329KVOHelperNWDatagramConnection_subject] = v14;
  id v37 = v14;
  uint64_t v15 = sub_1000372EC( &qword_1009B8F28,  &qword_1009B8F20,  (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  *(void *)&v12[OBJC_IVAR____TtC12searchpartydP33_6037248B8C5D968AAFEBF5992F3E761329KVOHelperNWDatagramConnection_publisher] = Publisher.eraseToAnyPublisher()(v13, v15);

  v36.receiver = v12;
  v36.super_class = v9;
  uint64_t v16 = (char *)objc_msgSendSuper2(&v36, "init");
  id v37 = *(id *)&v16[OBJC_IVAR____TtC12searchpartydP33_6037248B8C5D968AAFEBF5992F3E761329KVOHelperNWDatagramConnection_observee];
  id v17 = v37;
  uint64_t KeyPath = swift_getKeyPath(&unk_100811988);
  uint64_t v19 = swift_allocObject(&unk_10096E670, 24LL, 7LL);
  swift_unknownObjectWeakInit(v19 + 16, v16);
  uint64_t v20 = v16;
  id v21 = v17;
  uint64_t v22 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)( KeyPath,  0LL,  sub_100630600,  v19,  &protocol witness table for NSObject);

  swift_release();
  swift_release();

  uint64_t v23 = *(void **)&v20[OBJC_IVAR____TtC12searchpartydP33_6037248B8C5D968AAFEBF5992F3E761329KVOHelperNWDatagramConnection_observation];
  *(void *)&v20[OBJC_IVAR____TtC12searchpartydP33_6037248B8C5D968AAFEBF5992F3E761329KVOHelperNWDatagramConnection_observation] = v22;

  v2[3] = v20;
  id v37 = (id)v2[5];
  uint64_t v24 = sub_1000372EC( &qword_1009B8F30,  &qword_1009B8F18,  (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v2[7] = Publisher.eraseToAnyPublisher()(v8, v24);
  unint64_t v25 = *(void **)&v20[OBJC_IVAR____TtC12searchpartydP33_6037248B8C5D968AAFEBF5992F3E761329KVOHelperNWDatagramConnection_publisher];
  v2[6] = v25;
  id v37 = v25;
  swift_retain_n(v25, 2LL);
  uint64_t v26 = sub_100004AEC(&qword_1009A3B08);
  uint64_t v27 = sub_1000372EC( &qword_1009A3B10,  &qword_1009A3B08,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.first(where:)(sub_100176B58, 0LL, v26, v27);
  swift_release();
  uint64_t v28 = swift_allocObject(&unk_10096E698, 24LL, 7LL);
  swift_weakInit(v28 + 16, v2);
  uint64_t v29 = sub_1000372EC( &qword_1009A3B18,  &qword_1009A3B00,  (uint64_t)&protocol conformance descriptor for Publishers.FirstWhere<A>);
  uint64_t v30 = v34;
  uint64_t v31 = Publisher<>.sink(receiveValue:)(sub_10063062C, v28, v34, v29);

  swift_release();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v30);
  v2[4] = v31;
  swift_release();
  return v2;
}

uint64_t sub_10062F8E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    uint64_t v4 = Strong;
    uint64_t v5 = *(void **)(Strong + 16);
    uint64_t v6 = swift_allocObject(&unk_10096E698, 24LL, 7LL);
    swift_weakInit(v6 + 16, v4);
    aBlock[4] = sub_100630634;
    void aBlock[5] = v6;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_10062FD80;
    void aBlock[3] = &unk_10096E6B0;
    uint64_t v7 = _Block_copy(aBlock);
    swift_release();
    [v5 readDatagramsWithMinimumCount:1 maximumCount:1 completionHandler:v7];
    _Block_release(v7);
    swift_release();
  }

  swift_beginAccess(v2, aBlock, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v2);
  if (result)
  {
    *(void *)(result + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0LL;
    swift_release();
    return swift_release();
  }

  return result;
}

uint64_t sub_10062FA08()
{
  __int16 v1 = *(void **)(v0 + 16);
  [v1 cancel];

  swift_release(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 40));
  swift_release(*(void *)(v0 + 48));
  swift_release(*(void *)(v0 + 56));
  return swift_deallocClassInstance(v0, 64LL, 7LL);
}

uint64_t sub_10062FA6C(void *a1, void **a2, uint64_t a3)
{
  uint64_t v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v26, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v5);
  if (result)
  {
    uint64_t v7 = result;
    if (a2)
    {
      swift_errorRetain(a2);
      swift_errorRetain(a2);
      if (qword_10099B810 != -1) {
        swift_once(&qword_10099B810, sub_10069374C);
      }
      uint64_t v8 = type metadata accessor for Logger(0LL);
      sub_10000A720(v8, (uint64_t)qword_100A2B188);
      swift_errorRetain(a2);
      uint64_t v9 = swift_errorRetain(a2);
      uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
      os_log_type_t v11 = static os_log_type_t.error.getter(v10);
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v13 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v12 = 138412290;
        unint64_t v14 = sub_100044AD4();
        uint64_t v15 = swift_allocError(&type metadata for MessagingError, v14, 0LL, 0LL);
        char *v16 = a2;
        swift_errorRetain(a2);
        uint64_t v17 = _swift_stdlib_bridgeErrorToNSError(v15);
        aBlocunint64_t k = (void **)v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v25, v12 + 4, v12 + 12);
        *uint64_t v13 = v17;
        swift_errorRelease(a2);
        swift_errorRelease(a2);
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "MessagingDatagramConnection read error: %@", v12, 0xCu);
        uint64_t v18 = sub_100004AEC((uint64_t *)&unk_10099FB20);
        swift_arrayDestroy(v13, 1LL, v18);
        swift_slowDealloc(v13, -1LL, -1LL);
        swift_slowDealloc(v12, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease(a2);
        swift_errorRelease(a2);
      }

      aBlocunint64_t k = a2;
      swift_errorRetain(a2);
      PassthroughSubject.send(completion:)(&aBlock);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    else if (a1[2])
    {
      uint64_t v19 = a1[4];
      unint64_t v20 = a1[5];
      aBlocunint64_t k = (void **)v19;
      v25[0] = v20;
      sub_10001736C(v19, v20);
      PassthroughSubject.send(_:)(&aBlock);
      sub_100016F9C(v19, v20);
      id v21 = *(void **)(v7 + 16);
      uint64_t v22 = swift_allocObject(&unk_10096E698, 24LL, 7LL);
      swift_weakInit(v22 + 16, v7);
      v25[3] = sub_100630634;
      _OWORD v25[4] = v22;
      aBlocunint64_t k = _NSConcreteStackBlock;
      v25[0] = 1107296256LL;
      v25[1] = sub_10062FD80;
      void v25[2] = &unk_10096E6D8;
      uint64_t v23 = _Block_copy(&aBlock);
      swift_release();
      [v21 readDatagramsWithMinimumCount:1 maximumCount:1 completionHandler:v23];
      _Block_release(v23);
    }

    return swift_release();
  }

  return result;
}

void sub_10062FD80(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for Data);
  swift_retain(v4);
  id v7 = a3;
  v5(v6, a3);
  swift_release(v4);
  swift_bridgeObjectRelease(v6);
}

void sub_10062FDF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10 = swift_allocObject(&unk_10096E710, 32LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  a3 += 16LL;
  swift_beginAccess(a3, v20, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a3);
  if (Strong)
  {
    uint64_t v12 = *(void **)(Strong + 16);
    swift_retain();
    id v13 = v12;
    swift_release();
    uint64_t v14 = sub_100004AEC(&qword_10099D3B8);
    uint64_t v15 = swift_allocObject(v14, 48LL, 7LL);
    *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v15 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = a4;
    *(void *)(v15 + 40) = a5;
    sub_10001736C(a4, a5);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v17 = swift_allocObject(&unk_10096E738, 32LL, 7LL);
    *(void *)(v17 + swift_weakDestroy(v0 + 16) = sub_100153460;
    *(void *)(v17 + 24) = v10;
    aBlock[4] = sub_100630678;
    void aBlock[5] = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_10033A8C4;
    void aBlock[3] = &unk_10096E750;
    uint64_t v18 = _Block_copy(aBlock);
    swift_release();
    [v13 writeDatagrams:isa completionHandler:v18];
    _Block_release(v18);
  }

  else
  {
    swift_retain();
    swift_release();
  }

uint64_t sub_10062FF98(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  if (!a1) {
    return a2(0LL, 0LL);
  }
  swift_errorRetain(a1);
  swift_errorRetain(a1);
  if (qword_10099B810 != -1) {
    swift_once(&qword_10099B810, sub_10069374C);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10000A720(v4, (uint64_t)qword_100A2B188);
  swift_errorRetain(a1);
  uint64_t v5 = swift_errorRetain(a1);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138412290;
    unint64_t v10 = sub_100044AD4();
    uint64_t v11 = swift_allocError(&type metadata for MessagingError, v10, 0LL, 0LL);
    void *v12 = a1;
    swift_errorRetain(a1);
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError(v11);
    uint64_t v16 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v8 + 4, v8 + 12);
    uint64_t *v9 = v13;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "MessagingDatagramConnection send error: %@", v8, 0xCu);
    uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v9, 1LL, v14);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  swift_errorRetain(a1);
  a2(a1, 1LL);
  swift_errorRelease(a1);
  swift_errorRelease(a1);
  return swift_errorRelease(a1);
}

uint64_t sub_1006301BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for MessagingDatagramConnection();
  v4._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v3, a2);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 8250LL;
  v5._object = (void *)0xE200000000000000LL;
  String.append(_:)(v5);
  v6._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v3, a2);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 62LL;
  v7._object = (void *)0xE100000000000000LL;
  String.append(_:)(v7);
  return 60LL;
}

uint64_t sub_100630274(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a3 + 16;
  swift_beginAccess(a3 + 16, v9, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(v4);
  if (result)
  {
    Swift::String v6 = (void *)result;
    uint64_t v7 = *(void *)(result
                   + OBJC_IVAR____TtC12searchpartydP33_6037248B8C5D968AAFEBF5992F3E761329KVOHelperNWDatagramConnection_subject);
    swift_retain(v7);

    id v8 = [v3 connectionState];
    CurrentValueSubject.send(_:)(&v8);
    return swift_release(v7);
  }

  return result;
}

id sub_100630334()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KVOHelperNWDatagramConnection();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t NWConnectionState.description.getter(uint64_t a1)
{
  uint64_t result = 0x64696C61766E692ELL;
  switch(a1)
  {
    case 0LL:
      return result;
    case 1LL:
      uint64_t result = 0x676E69746961772ELL;
      break;
    case 2LL:
      uint64_t result = 0x697261706572702ELL;
      break;
    case 3LL:
      uint64_t result = 0x79646165722ELL;
      break;
    case 4LL:
      uint64_t result = 0x64656C6961662ELL;
      break;
    case 5LL:
      uint64_t result = 0x6C6C65636E61632ELL;
      break;
    default:
      uint64_t result = 0x4E574F4E4B4E553CLL;
      break;
  }

  return result;
}

uint64_t sub_100630490()
{
  uint64_t result = 0x64696C61766E692ELL;
  switch(*v0)
  {
    case 0LL:
      return result;
    case 1LL:
      uint64_t result = 0x676E69746961772ELL;
      break;
    case 2LL:
      uint64_t result = 0x697261706572702ELL;
      break;
    case 3LL:
      uint64_t result = 0x79646165722ELL;
      break;
    case 4LL:
      uint64_t result = 0x64656C6961662ELL;
      break;
    case 5LL:
      uint64_t result = 0x6C6C65636E61632ELL;
      break;
    default:
      uint64_t result = 0x4E574F4E4B4E553CLL;
      break;
  }

  return result;
}

uint64_t type metadata accessor for MessagingDatagramConnection()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd27MessagingDatagramConnection);
}

uint64_t type metadata accessor for KVOHelperNWDatagramConnection()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartydP33_6037248B8C5D968AAFEBF5992F3E761329KVOHelperNWDatagramConnection);
}

const char *sub_1006305A0()
{
  return "connectionState";
}

id sub_1006305AC@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 connectionState];
  *a2 = result;
  return result;
}

uint64_t sub_1006305DC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100630600(void **a1, uint64_t a2)
{
  return sub_100630274(a1, a2, v2);
}

uint64_t sub_100630608()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10063062C(uint64_t a1)
{
  return sub_10062F8E4(a1, v1);
}

uint64_t sub_100630634(void *a1, void **a2)
{
  return sub_10062FA6C(a1, a2, v2);
}

uint64_t sub_10063063C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10063064C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100630654()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100630678(uint64_t a1)
{
  return sub_10062FF98(a1, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16));
}

uint64_t sub_100630694(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Notification(0LL, a2);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void (**)(char *))(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100630738()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_1009B8F38);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_1009B8F38);
  if (qword_10099B6D0 != -1) {
    swift_once(&qword_10099B6D0, sub_100631468);
  }
  uint64_t v2 = sub_10000A720(v0, (uint64_t)qword_100A2AFB0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_1006307C8()
{
  uint64_t v0 = sub_100004AEC(&qword_1009BB4F0);
  uint64_t result = swift_allocObject(v0, 20LL, 7LL);
  *(_DWORD *)(result + swift_weakDestroy(v0 + 16) = 0;
  qword_1009B8F50 = result;
  return result;
}

uint64_t sub_1006307FC()
{
  uint64_t v0 = type metadata accessor for ReferenceClock.IsolationDomain();
  uint64_t v1 = swift_allocObject(v0, 112LL, 15LL);
  uint64_t result = swift_defaultActor_initialize();
  qword_1009B8F58 = v1;
  return result;
}

uint64_t sub_100630838()
{
  uint64_t v0 = type metadata accessor for Date(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = static Date.distantPast.getter(v2);
  double v6 = Date.timeIntervalSinceReferenceDate.getter(v5);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  qword_1009B8F60 = *(void *)&v6;
  return result;
}

double sub_1006308C4()
{
  if (qword_10099B6C0 != -1) {
    swift_once(&qword_10099B6C0, sub_100630838);
  }
  double result = *(double *)&qword_1009B8F60;
  qword_1009B8F80 = qword_1009B8F60;
  return result;
}

BOOL sub_10063090C()
{
  if (qword_10099B6B0 != -1) {
    swift_once(&qword_10099B6B0, sub_1006307C8);
  }
  uint64_t v0 = qword_1009B8F50;
  uint64_t v1 = sub_100004AEC(&qword_10099CA80);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100631388, 0LL, v0, (char *)&type metadata for () + 8, v1);
  double v2 = *(double *)&v9;
  if ((aBlock & 1) == 0)
  {
    id v3 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
    uint64_t v12 = sub_1006313F4;
    uint64_t v13 = 0LL;
    aBlocunint64_t k = _NSConcreteStackBlock;
    uint64_t v9 = 1107296256LL;
    unint64_t v10 = sub_100630694;
    uint64_t v11 = &unk_10096E788;
    uint64_t v4 = _Block_copy(&aBlock);
    swift_release(v13);
    id v5 =  [v3 addObserverForName:NSSystemClockDidChangeNotification object:0 queue:0 usingBlock:v4];
    _Block_release(v4);

    swift_unknownObjectRelease(v5);
  }

  if (qword_10099B6C0 != -1) {
    swift_once(&qword_10099B6C0, sub_100630838);
  }
  double v6 = *(double *)&qword_1009B8F60;
  return v6 < v2;
}

double sub_100630AB4()
{
  uint64_t v0 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v0);
  double v2 = (char *)v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10063090C();
  double Current = CFAbsoluteTimeGetCurrent();
  if (qword_10099B6B0 != -1) {
    swift_once(&qword_10099B6B0, sub_1006307C8);
  }
  uint64_t v4 = qword_1009B8F50;
  uint64_t v5 = sub_100004AEC(&qword_10099CA88);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100630C28, 0LL, v4, (char *)&type metadata for () + 8, v5);
  double v6 = Current - v11[2];
  if (v6 - v11[3] > 86400.0)
  {
    OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_100630C8C,  0LL,  qword_1009B8F50,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
    uint64_t v7 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v2, 1LL, 1LL, v7);
    uint64_t v8 = swift_allocObject(&unk_10096E7C0, 32LL, 7LL);
    *(void *)(v8 + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(v8 + 24) = 0LL;
    uint64_t v9 = sub_1003EDB00((uint64_t)v2, (uint64_t)&unk_10099CA90, v8);
    swift_release(v9);
  }

  return v6;
}

double sub_100630C28@<D0>(void *a1@<X8>)
{
  *a1 = qword_1009B8F70;
  if (qword_10099B6C8 != -1) {
    swift_once(&qword_10099B6C8, sub_1006308C4);
  }
  double result = *(double *)&qword_1009B8F80;
  a1[1] = qword_1009B8F80;
  return result;
}

void sub_100630C8C()
{
  byte_1009B8F88 = 1;
}

uint64_t sub_100630C9C()
{
  return swift_task_switch(sub_100630CB0, 0LL, 0LL);
}

uint64_t sub_100630CB0()
{
  if (qword_10099B6B8 != -1) {
    swift_once(&qword_10099B6B8, sub_1006307FC);
  }
  return swift_task_switch(sub_100630D10, qword_1009B8F58, 0LL);
}

uint64_t sub_100630D10()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100630D40(char a1)
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  double v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a1 & 1) == 0) {
    goto LABEL_29;
  }
  if (qword_10099B6B0 != -1) {
    swift_once(&qword_10099B6B0, sub_1006307C8);
  }
  uint64_t v4 = OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_1006315F8,  0LL,  qword_1009B8F50,  (char *)&type metadata for () + 8,  &type metadata for Bool);
  if (v54 == 1)
  {
LABEL_29:
    if (TMIsAutomaticTimeEnabled(v4))
    {
      if (qword_10099B6B0 != -1) {
        swift_once(&qword_10099B6B0, sub_1006307C8);
      }
      OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_1006314E8,  0LL,  qword_1009B8F50,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
      if (qword_10099B6A8 != -1) {
        swift_once(&qword_10099B6A8, sub_100630738);
      }
      uint64_t v7 = type metadata accessor for Logger(0LL);
      uint64_t v8 = sub_10000A720(v7, (uint64_t)qword_1009B8F38);
      uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
      os_log_type_t v10 = static os_log_type_t.default.getter(v9);
      if (!os_log_type_enabled(v9, v10)) {
        goto LABEL_26;
      }
      uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v12 = swift_slowAlloc(32LL, -1LL);
      uint64_t v54 = v12;
      *(_DWORD *)uint64_t v11 = 136446210;
      uint64_t v13 = sub_100630AB4();
      Date.init(timeIntervalSinceReferenceDate:)(v13);
      unint64_t v14 = sub_100371D68();
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(v2, v14);
      uint64_t v16 = v3;
      unint64_t v18 = v17;
      (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v2);
      uint64_t v53 = sub_1003F11D4(v15, v18, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease(v18);
      _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "ReferenceClock calibrated: %{public}s delta: 0.0 uncertainty: 0.0",  v11,  0xCu);
      swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1LL, -1LL);
      uint64_t v19 = (uint64_t)v11;
LABEL_25:
      swift_slowDealloc(v19, -1LL, -1LL);
LABEL_26:

      return;
    }

    if (qword_10099B6A8 != -1) {
      swift_once(&qword_10099B6A8, sub_100630738);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    uint64_t v21 = sub_10000A720(v20, (uint64_t)qword_1009B8F38);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Automatic time is DISABLED", v24, 2u);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    *(double *)&uint64_t v25 = COERCE_DOUBLE(sub_1006314FC());
    if ((v27 & 0x100000000LL) == 0)
    {
      uint64_t v28 = v25;
      uint64_t v29 = *(void *)&v26;
      int v30 = v27;
      double v31 = *(double *)&v25;
      double v32 = v26;
      double Current = CFAbsoluteTimeGetCurrent();
      if (v32 > 1.0)
      {
        uint64_t v35 = (os_log_s *)Logger.logObject.getter(v33);
        os_log_type_t v36 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v35, v36))
        {
          id v37 = (_DWORD *)swift_slowAlloc(18LL, -1LL);
          uint64_t v52 = v3;
          uint64_t v38 = v37;
          *id v37 = 134218240;
          uint64_t v54 = v29;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v37 + 1, v37 + 3);
          *((_WORD *)v38 + 6) = 1024;
          LODWORD(v54) = v30;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, (char *)&v54 + 4, (char *)v38 + 14, (char *)v38 + 18);
          _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "TMGMReferenceTime reports high uncertainty: %f (reliability: %d",  (uint8_t *)v38,  0x12u);
          uint64_t v39 = v38;
          uint64_t v3 = v52;
          swift_slowDealloc(v39, -1LL, -1LL);
        }
      }

      double v40 = Current - v31;
      if (qword_10099B6B0 != -1) {
        uint64_t v33 = swift_once(&qword_10099B6B0, sub_1006307C8);
      }
      __chkstk_darwin(v33);
      *((double *)&v52 - 4) = v40;
      *(&v52 - 3) = v29;
      *(&v52 - _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v28;
      uint64_t v42 = OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_100631580,  &v52 - 6,  v41,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
      uint64_t v9 = (os_log_s *)Logger.logObject.getter(v42);
      os_log_type_t v43 = static os_log_type_t.default.getter(v9);
      if (!os_log_type_enabled(v9, v43)) {
        goto LABEL_26;
      }
      uint64_t v44 = swift_slowAlloc(32LL, -1LL);
      uint64_t v45 = swift_slowAlloc(32LL, -1LL);
      uint64_t v54 = v45;
      *(_DWORD *)uint64_t v44 = 136446722;
      uint64_t v46 = sub_100630AB4();
      Date.init(timeIntervalSinceReferenceDate:)(v46);
      unint64_t v47 = sub_100371D68();
      uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter(v2, v47);
      uint64_t v49 = v3;
      unint64_t v51 = v50;
      (*(void (**)(char *, uint64_t))(v49 + 8))(v6, v2);
      uint64_t v53 = sub_1003F11D4(v48, v51, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v44 + 4, v44 + 12);
      swift_bridgeObjectRelease(v51);
      *(_WORD *)(v44 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2048;
      uint64_t v53 = *(void *)&v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v44 + 14, v44 + 22);
      *(_WORD *)(v44 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2048;
      uint64_t v53 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v44 + 24, v44 + 32);
      _os_log_impl( (void *)&_mh_execute_header,  v9,  v43,  "ReferenceClock calibrated: %{public}s delta: %f uncertainty: %f",  (uint8_t *)v44,  0x20u);
      swift_arrayDestroy(v45, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1LL, -1LL);
      uint64_t v19 = v44;
      goto LABEL_25;
    }
  }

uint64_t type metadata accessor for ReferenceClock.IsolationDomain()
{
  return objc_opt_self(&OBJC_CLASS____TtCO12searchpartyd14ReferenceClockP33_5ACD48FA55D094E43274665487F80A2E15IsolationDomain);
}

double sub_100631388@<D0>(uint64_t a1@<X8>)
{
  char v2 = byte_1009B8F68;
  byte_1009B8F68 = 1;
  *(_BYTE *)a1 = v2;
  if (qword_10099B6C8 != -1) {
    swift_once(&qword_10099B6C8, sub_1006308C4);
  }
  double result = *(double *)&qword_1009B8F80;
  *(void *)(a1 + 8) = qword_1009B8F80;
  return result;
}

void sub_1006313F4()
{
}

void sub_1006313FC()
{
  qword_1009B8F70 = 0LL;
  qword_1009B8F78 = 0LL;
  if (qword_10099B6C8 != -1) {
    swift_once(&qword_10099B6C8, sub_1006308C4);
  }
  qword_1009B8F80 = CFAbsoluteTimeGetCurrent();
  byte_1009B8F88 = 0;
}

uint64_t sub_100631468()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2AFB0);
  sub_10000A720(v0, (uint64_t)qword_100A2AFB0);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x636E657265666552LL,  0xEE006B636F6C4365LL);
}

void sub_1006314E8()
{
}

uint64_t sub_1006314FC()
{
  uint64_t v2 = 0LL;
  uint64_t v3 = 0LL;
  int v1 = 0;
  else {
    return 0LL;
  }
}

uint64_t sub_100631580()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  qword_1009B8F70 = v0[2];
  qword_1009B8F78 = v1;
  if (qword_10099B6C8 != -1) {
    uint64_t result = swift_once(&qword_10099B6C8, sub_1006308C4);
  }
  qword_1009B8F80 = v2;
  byte_1009B8F88 = 0;
  return result;
}

void sub_1006315F8(_BYTE *a1@<X8>)
{
  *a1 = byte_1009B8F88;
}

uint64_t sub_100631608(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100631618(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100631620()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

ValueMetadata *type metadata accessor for SearchpartyCredential()
{
  return &type metadata for SearchpartyCredential;
}

uint64_t sub_100631654()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t sub_100631680()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain(*(void *)(v0 + 24));
  return v1;
}

void sub_1006316B0(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v46 = a2;
  unint64_t v47 = a1;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v44 = v8;
  uint64_t v45 = v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v40 = (uint64_t)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v39 = (uint64_t)&v38 - v12;
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = *(void *)(a3 + 56);
  uint64_t v42 = a3 + 56;
  uint64_t v21 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v22 = -1LL;
  if (v21 < 64) {
    uint64_t v22 = ~(-1LL << v21);
  }
  unint64_t v23 = v22 & v20;
  int64_t v43 = (unint64_t)(v21 + 63) >> 6;
  uint64_t v48 = a3;
  __n128 v24 = swift_bridgeObjectRetain(a3);
  int64_t v25 = 0LL;
  uint64_t v41 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v23)
    {
      unint64_t v26 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      unint64_t v27 = v26 | (v25 << 6);
      goto LABEL_19;
    }

    if (__OFADD__(v25++, 1LL))
    {
      __break(1u);
      goto LABEL_37;
    }

    if (v25 >= v43) {
      goto LABEL_34;
    }
    unint64_t v29 = *(void *)(v42 + 8 * v25);
    if (!v29) {
      break;
    }
LABEL_18:
    unint64_t v23 = (v29 - 1) & v29;
    unint64_t v27 = __clz(__rbit64(v29)) + (v25 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v14 + 16))( v19,  *(void *)(v48 + 48) + *(void *)(v14 + 72) * v27,  v13,  v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v19, 0LL, 1LL, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v19, v13);
    v47(v16);
    if (v3)
    {
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      swift_bridgeObjectRelease();
LABEL_35:
      swift_release();
      return;
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v7, 1LL, v44) == 1)
    {
      sub_100015794((uint64_t)v7, (uint64_t *)&unk_1009A9C30);
    }

    else
    {
      uint64_t v31 = v39;
      sub_10002218C((uint64_t)v7, v39, type metadata accessor for OwnedBeaconRecord);
      sub_10002218C(v31, v40, type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0) {
        uint64_t v41 = (void *)sub_1004C46DC(0, v41[2] + 1LL, 1, (unint64_t)v41);
      }
      unint64_t v33 = v41[2];
      unint64_t v32 = v41[3];
      unint64_t v34 = v33 + 1;
      if (v33 >= v32 >> 1)
      {
        unint64_t v38 = v33 + 1;
        id v37 = (void *)sub_1004C46DC(v32 > 1, v33 + 1, 1, (unint64_t)v41);
        unint64_t v34 = v38;
        uint64_t v41 = v37;
      }

      uint64_t v35 = v40;
      os_log_type_t v36 = v41;
      v41[2] = v34;
      sub_10002218C( v35,  (uint64_t)v36 + ((*(unsigned __int8 *)(v45 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))
      + *(void *)(v45 + 72) * v33,
        type metadata accessor for OwnedBeaconRecord);
    }
  }

  int64_t v30 = v25 + 1;
  if (v25 + 1 >= v43) {
    goto LABEL_34;
  }
  unint64_t v29 = *(void *)(v42 + 8 * v30);
  if (v29) {
    goto LABEL_17;
  }
  int64_t v30 = v25 + 2;
  if (v25 + 2 >= v43) {
    goto LABEL_34;
  }
  unint64_t v29 = *(void *)(v42 + 8 * v30);
  if (v29) {
    goto LABEL_17;
  }
  int64_t v30 = v25 + 3;
  if (v25 + 3 >= v43) {
    goto LABEL_34;
  }
  unint64_t v29 = *(void *)(v42 + 8 * v30);
  if (v29) {
    goto LABEL_17;
  }
  int64_t v30 = v25 + 4;
  if (v25 + 4 >= v43)
  {
LABEL_34:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v14 + 56))(v19, 1LL, 1LL, v13, v24);
    goto LABEL_35;
  }

  unint64_t v29 = *(void *)(v42 + 8 * v30);
  if (v29)
  {
LABEL_17:
    int64_t v25 = v30;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v25 = v30 + 1;
    if (__OFADD__(v30, 1LL)) {
      break;
    }
    if (v25 >= v43) {
      goto LABEL_34;
    }
    unint64_t v29 = *(void *)(v42 + 8 * v25);
    ++v30;
    if (v29) {
      goto LABEL_18;
    }
  }

void *sub_100631B30(void (*a1)(uint64_t *, __n128), uint64_t a2, uint64_t a3)
{
  return sub_10063202C( a1,  a2,  a3,  (uint64_t *)&unk_10099FB50,  type metadata accessor for TimeBasedKey,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_1004C51D4);
}

void *sub_100631B5C(void (*a1)(void, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100004AEC(&qword_1009A6620);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = type metadata accessor for RawSearchResult(0LL);
  uint64_t v9 = *(void *)(v27 - 8);
  uint64_t v10 = __chkstk_darwin(v27);
  uint64_t v26 = (uint64_t)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v24 = (uint64_t)v22 - v12;
  uint64_t v13 = *(void *)(a3 + 16);
  if (!v13) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v14 = *(void *)(type metadata accessor for ObservedAdvertisement(0LL) - 8);
  uint64_t v15 = a3 + ((*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  uint64_t v25 = *(void *)(v14 + 72);
  v22[1] = a3;
  __n128 v16 = swift_bridgeObjectRetain(a3);
  uint64_t v17 = _swiftEmptyArrayStorage;
  unint64_t v23 = a1;
  do
  {
    a1(v15, v16);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v17;
    }

    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1LL, v27) == 1)
    {
      sub_100015794((uint64_t)v8, &qword_1009A6620);
    }

    else
    {
      uint64_t v18 = v24;
      sub_10002218C((uint64_t)v8, v24, type metadata accessor for RawSearchResult);
      sub_10002218C(v18, v26, type metadata accessor for RawSearchResult);
      if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0) {
        uint64_t v17 = (void *)sub_1004C5B50(0, v17[2] + 1LL, 1, (unint64_t)v17);
      }
      unint64_t v20 = v17[2];
      unint64_t v19 = v17[3];
      if (v20 >= v19 >> 1) {
        uint64_t v17 = (void *)sub_1004C5B50(v19 > 1, v20 + 1, 1, (unint64_t)v17);
      }
      void v17[2] = v20 + 1;
      sub_10002218C( v26,  (uint64_t)v17 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
      + *(void *)(v9 + 72) * v20,
        type metadata accessor for RawSearchResult);
      a1 = v23;
    }

    v15 += v25;
    --v13;
  }

  while (v13);
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t sub_100631DC8(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099FB50);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for TimeBasedKey(0LL);
  uint64_t v11 = *(void *)(v24 - 8);
  uint64_t v12 = __chkstk_darwin(v24);
  uint64_t v23 = (uint64_t)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v21 - v14;
  __n128 v16 = _swiftEmptyArrayStorage;
  uint64_t v21 = a1;
  uint64_t v22 = a4;
  while (1)
  {
    uint64_t v25 = a3;
    a1(&v25);
    if (v4) {
      break;
    }
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1LL, v24) == 1)
    {
      uint64_t result = sub_100015794((uint64_t)v10, (uint64_t *)&unk_10099FB50);
      if (a4 == a3) {
        return (uint64_t)v16;
      }
    }

    else
    {
      sub_10002218C((uint64_t)v10, (uint64_t)v15, type metadata accessor for TimeBasedKey);
      sub_10002218C((uint64_t)v15, v23, type metadata accessor for TimeBasedKey);
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0) {
        __n128 v16 = (void *)sub_1004C51D4(0, v16[2] + 1LL, 1, (unint64_t)v16);
      }
      unint64_t v19 = v16[2];
      unint64_t v18 = v16[3];
      if (v19 >= v18 >> 1) {
        __n128 v16 = (void *)sub_1004C51D4(v18 > 1, v19 + 1, 1, (unint64_t)v16);
      }
      void v16[2] = v19 + 1;
      uint64_t result = sub_10002218C( v23,  (uint64_t)v16 + ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
               + *(void *)(v11 + 72) * v19,
                 type metadata accessor for TimeBasedKey);
      a1 = v21;
      a4 = v22;
      if (v22 == a3) {
        return (uint64_t)v16;
      }
    }

    if (__CFADD__(a3++, 1LL))
    {
      __break(1u);
      return result;
    }
  }

  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

void *sub_100631FEC( void *(*a1)(uint64_t *__return_ptr, uint64_t, __n128), uint64_t a2, uint64_t a3)
{
  return sub_100632424(a1, a2, a3);
}

void *sub_100632000(void (*a1)(uint64_t *, __n128), uint64_t a2, uint64_t a3)
{
  return sub_10063202C( a1,  a2,  a3,  &qword_1009A7E30,  _s18ConnectionKeyGroupVMa,  (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_1004C61A4);
}

void *sub_10063202C( void (*a1)(uint64_t *, __n128), uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(void), uint64_t (*a6)(BOOL, uint64_t, uint64_t, void *))
{
  uint64_t v31 = a1;
  uint64_t v27 = a4;
  uint64_t v10 = sub_100004AEC(a4);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = a5(0LL);
  uint64_t v13 = *(void *)(v30 - 8);
  uint64_t v14 = __chkstk_darwin(v30);
  uint64_t v29 = (uint64_t)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v26 = (uint64_t)&v24 - v16;
  uint64_t v28 = *(void *)(a3 + 16);
  if (!v28) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v24 = a6;
  __n128 v17 = swift_bridgeObjectRetain(a3);
  uint64_t v18 = 0LL;
  unint64_t v19 = _swiftEmptyArrayStorage;
  uint64_t v25 = a3;
  do
  {
    uint64_t v32 = *(void *)(a3 + 8 * v18 + 32);
    v31(&v32, v17);
    if (v6)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v19;
    }

    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1LL, v30) == 1)
    {
      sub_100015794((uint64_t)v12, v27);
    }

    else
    {
      uint64_t v20 = v26;
      sub_10002218C((uint64_t)v12, v26, a5);
      sub_10002218C(v20, v29, a5);
      if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0) {
        unint64_t v19 = (void *)v24(0, v19[2] + 1LL, 1LL, v19);
      }
      unint64_t v22 = v19[2];
      unint64_t v21 = v19[3];
      if (v22 >= v21 >> 1) {
        unint64_t v19 = (void *)v24(v21 > 1, v22 + 1, 1LL, v19);
      }
      _BYTE v19[2] = v22 + 1;
      sub_10002218C( v29,  (uint64_t)v19 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))
      + *(void *)(v13 + 72) * v22,
        a5);
      a3 = v25;
    }

    ++v18;
  }

  while (v28 != v18);
  swift_bridgeObjectRelease();
  return v19;
}

void *sub_10063228C(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v20 = (unint64_t)&_swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v16))
  {
    for (uint64_t i = 4LL; ; ++i)
    {
      id v9 = (a3 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a3)
         : *(id *)(a3 + 8 * i);
      uint64_t v10 = v9;
      uint64_t v11 = i - 3;
      if (__OFADD__(i - 4, 1LL)) {
        break;
      }
      id v19 = v9;
      a1(&v18, &v19);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);

        return (void *)swift_bridgeObjectRelease(v20);
      }

      uint64_t v12 = v18;
      if (v18)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        unint64_t v14 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v13 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v14 >= v13 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1LL);
        }
        uint64_t v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
        specialized Array._endMutation()(v8);
      }

      if (v11 == v6)
      {
        swift_bridgeObjectRelease(a3);
        return (void *)v20;
      }
    }

    __break(1u);
LABEL_17:
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
  }

  swift_bridgeObjectRelease(a3);
  return &_swiftEmptyArrayStorage;
}

void *sub_100632424( void *(*a1)(uint64_t *__return_ptr, uint64_t, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v18 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    uint64_t v8 = *(void *)(type metadata accessor for TimeBasedKey(0LL) - 8);
    uint64_t v9 = a3 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    __n128 v11 = swift_bridgeObjectRetain(a3);
    do
    {
      unint64_t v13 = a1(&v17, v9, v11);
      if (v3)
      {
        swift_bridgeObjectRelease();
        return (void *)swift_bridgeObjectRelease();
      }

      uint64_t v14 = v17;
      if (v17)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        unint64_t v16 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v15 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v16 >= v15 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1LL);
        }
        uint64_t v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v14);
        specialized Array._endMutation()(v12);
      }

      v9 += v10;
      --v6;
    }

    while (v6);
    swift_bridgeObjectRelease();
    return (void *)v18;
  }

  return result;
}

void *sub_10063255C(void (*a1)(uint64_t *__return_ptr, _BYTE *), uint64_t a2, uint64_t a3)
{
  void (*v32)(uint64_t *__return_ptr, _BYTE *);
  uint64_t v4 = v3;
  uint64_t v32 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain(a3);
  uint64_t v7 = (unint64_t *)(a3 + 72);
  uint64_t v8 = _swiftEmptyArrayStorage;
  do
  {
    unint64_t v11 = *(v7 - 2);
    uint64_t v10 = *(v7 - 1);
    unint64_t v12 = *v7;
    uint64_t v13 = *(v7 - 4);
    uint64_t v14 = *(v7 - 3);
    v26[0] = *((_BYTE *)v7 - 40);
    uint64_t v27 = v13;
    uint64_t v28 = v14;
    unint64_t v29 = v11;
    uint64_t v30 = v10;
    unint64_t v31 = v12;
    sub_10001736C(v14, v11);
    sub_10001736C(v10, v12);
    v32(&v22, v26);
    if (v4)
    {
      sub_100016F9C(v14, v11);
      sub_100016F9C(v10, v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8;
    }

    sub_100016F9C(v14, v11);
    sub_100016F9C(v10, v12);
    char v15 = v22;
    if (v22 != 3LL)
    {
      __int128 v20 = v24;
      __int128 v21 = v23;
      uint64_t v16 = v25;
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0) {
        uint64_t v8 = sub_1004C5238(0LL, v8[2] + 1LL, 1, v8);
      }
      unint64_t v18 = v8[2];
      unint64_t v17 = v8[3];
      if (v18 >= v17 >> 1) {
        uint64_t v8 = sub_1004C5238((void *)(v17 > 1), v18 + 1, 1, v8);
      }
      v8[2] = v18 + 1;
      uint64_t v9 = &v8[6 * v18];
      *((_BYTE *)v9 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v15;
      *(_OWORD *)(v9 + 5) = v21;
      *(_OWORD *)(v9 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = v20;
      v9[9] = v16;
    }

    v7 += 6;
    --v5;
  }

  while (v5);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_100632724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[28] = a2;
  v3[29] = a3;
  v3[27] = a1;
  uint64_t v4 = type metadata accessor for Endianness(0LL);
  v3[30] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Date(0LL);
  v3[31] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[32] = v6;
  v3[33] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_10099D8A0);
  v3[34] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  v3[35] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[36] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[37] = swift_task_alloc(v10);
  v3[38] = swift_task_alloc(v10);
  uint64_t v11 = type metadata accessor for StandaloneBeacon(0LL);
  v3[39] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v3[40] = v12;
  v3[41] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for ManagedCBPeripheralBeaconInfo(0LL);
  v3[42] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v3[43] = v14;
  v3[44] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for SharedBeaconRecord(0LL);
  v3[45] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v3[46] = v16;
  unint64_t v17 = (*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[47] = swift_task_alloc(v17);
  v3[48] = swift_task_alloc(v17);
  v3[49] = swift_task_alloc(v17);
  v3[50] = swift_task_alloc(v17);
  v3[51] = swift_task_alloc(v17);
  return swift_task_switch(sub_1006328B0, 0LL, 0LL);
}

uint64_t sub_1006328B0()
{
  uint64_t v2 = v0[28];
  uint64_t v1 = v0[29];
  uint64_t v3 = v0[27];
  v0[22] = _swiftEmptyArrayStorage;
  uint64_t v4 = (void *)swift_allocObject(&unk_10096E8C0, 40LL, 7LL);
  v0[52] = v4;
  void v4[2] = v3;
  void v4[3] = v2;
  void v4[4] = v1;
  uint64_t v5 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc(v5);
  v0[53] = v6;
  uint64_t v7 = sub_100004AEC(&qword_10099CFB8);
  v0[54] = v7;
  *uint64_t v6 = v0;
  v6[1] = sub_100632988;
  return unsafeBlocking<A>(_:)(v0 + 23, sub_100641D34, v4, v7);
}

uint64_t sub_100632988()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void **)v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 424LL));
  swift_release();
  uint64_t v3 = v1[23];
  v1[21] = v3;
  v1 += 21;
  v1[34] = v3;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to Sequence.asyncFilter(_:)[1]);
  v1[35] = v4;
  uint64_t v5 = sub_100090114(&qword_1009A2540, &qword_10099CFB8);
  v1[36] = v5;
  void *v4 = v2;
  v4[1] = sub_100632A34;
  return Sequence.asyncFilter(_:)(&unk_1009B9088, 0LL, v1[33], v5);
}

uint64_t sub_100632A34(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 448LL);
  *(void *)(*(void *)v1 + 464LL) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100632A98, 0LL, 0LL);
}

uint64_t sub_100632A98()
{
  uint64_t v1 = *(void *)(v0 + 232);
  __int128 v5 = *(_OWORD *)(v0 + 216);
  *(void *)(v0 + 160) = *(void *)(v0 + 464);
  uint64_t v2 = swift_task_alloc(48LL);
  *(void *)(v0 + 47_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v2;
  *(_OWORD *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)(v2 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v1;
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to Sequence.asyncCompactMap<A>(_:)[1]);
  *(void *)(v0 + 480) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100632B38;
  return Sequence.asyncCompactMap<A>(_:)( &unk_1009B9098,  v2,  *(void *)(v0 + 432),  *(void *)(v0 + 336),  *(void *)(v0 + 456));
}

uint64_t sub_100632B38(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v5 = *(void *)(*v2 + 472);
  uint64_t v4 = *(void *)(*v2 + 480);
  *(void *)(v3 + 488) = a1;
  *(void *)(v3 + 496) = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease();
  swift_task_dealloc(v5);
  return swift_task_switch(sub_100632BB0, 0LL, 0LL);
}

uint64_t sub_100632BB0()
{
  uint64_t My = type metadata accessor for Feature.FindMy(0LL);
  *(void *)(v0 + 120) = My;
  *(void *)(v0 + 128) = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  uint64_t v2 = sub_10000A7C8((void *)(v0 + 96));
  (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v2,  enum case for Feature.FindMy.spPlaySoundAll(_:),  My);
  LOBYTE(My) = isFeatureEnabled(_:)(v0 + 96);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 96));
  if ((My & 1) != 0)
  {
    uint64_t v4 = *(void *)(v0 + 224);
    uint64_t v3 = *(void *)(v0 + 232);
    uint64_t v5 = *(void *)(v0 + 216);
    uint64_t v6 = (void *)swift_allocObject(&unk_10096E8E8, 40LL, 7LL);
    *(void *)(v0 + 504) = v6;
    v6[2] = v5;
    void v6[3] = v4;
    v6[4] = v3;
    uint64_t v7 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v8 = (void *)swift_task_alloc(v7);
    *(void *)(v0 + 51_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v8;
    uint64_t v9 = sub_100004AEC(&qword_1009A6098);
    *(void *)(v0 + 520) = v9;
    *uint64_t v8 = v0;
    v8[1] = sub_100632DE0;
    return unsafeBlocking<A>(_:)(v0 + 200, sub_100641DDC, v6, v9);
  }

  else
  {
    *(void *)(v0 + 568) = *(void *)(v0 + 496);
    if (qword_10099B9E0 != -1) {
      swift_once(&qword_10099B9E0, sub_10076012C);
    }
    swift_beginAccess(&xmmword_1009BED80, v0 + 136, 0LL, 0LL);
    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 16, (uint64_t *)&unk_10099FA80);
    if (*(void *)(v0 + 40))
    {
      sub_100012EC0((__int128 *)(v0 + 16), v0 + 56);
      sub_100012ED8((void *)(v0 + 56), *(void *)(v0 + 80));
      uint64_t v12 = (uint64_t (*)(void))((char *)&dword_10099C8D8 + dword_10099C8D8);
      uint64_t v11 = (void *)swift_task_alloc(unk_10099C8DC);
      *(void *)(v0 + 576) = v11;
      void *v11 = v0;
      v11[1] = sub_100633480;
      return v12();
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_100632DE0()
{
  return swift_task_switch(sub_100632E3C, 0LL, 0LL);
}

uint64_t sub_100632E3C()
{
  uint64_t result = *(void *)(v0 + 200);
  uint64_t v2 = _swiftEmptyArrayStorage;
  uint64_t v45 = *(void *)(result + 16);
  if (!v45)
  {
LABEL_31:
    *(void *)(v0 + 528) = v2;
    uint64_t v39 = *(void *)(v0 + 232);
    __int128 v48 = *(_OWORD *)(v0 + 216);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 19_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v2;
    uint64_t v40 = swift_task_alloc(48LL);
    *(void *)(v0 + 536) = v40;
    *(_OWORD *)(v40 + swift_weakDestroy(v0 + 16) = v48;
    *(void *)(v40 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v39;
    uint64_t v41 = (void *)swift_task_alloc(async function pointer to Sequence.asyncCompactMap<A>(_:)[1]);
    *(void *)(v0 + 544) = v41;
    uint64_t v42 = sub_100090114((unint64_t *)&unk_1009B90B0, &qword_1009A6098);
    *uint64_t v41 = v0;
    v41[1] = sub_100633300;
    return Sequence.asyncCompactMap<A>(_:)(&unk_1009B90A8, v40, *(void *)(v0 + 520), *(void *)(v0 + 336), v42);
  }

  unint64_t v3 = 0LL;
  uint64_t v4 = *(void *)(v0 + 360);
  uint64_t v44 = *(void *)(v0 + 368);
  uint64_t v46 = v4;
  uint64_t v43 = *(void *)(v0 + 200);
  while (v3 < *(void *)(result + 16))
  {
    unint64_t v47 = v2;
    uint64_t v9 = *(void *)(v0 + 400);
    uint64_t v8 = *(void *)(v0 + 408);
    unint64_t v10 = (*(unsigned __int8 *)(v44 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
    uint64_t v11 = *(void *)(v44 + 72);
    sub_10001DC4C(result + v10 + v11 * v3, v8, type metadata accessor for SharedBeaconRecord);
    uint64_t v12 = *(void *)(v8 + *(int *)(v4 + 44));
    sub_10001DC4C(v8, v9, type metadata accessor for SharedBeaconRecord);
    if (v12 == 76)
    {
      uint64_t v13 = *(void *)(v0 + 400);
      uint64_t v14 = *(void *)(v13 + *(int *)(v4 + 44));
      sub_10001DC4C(v13, *(void *)(v0 + 392), type metadata accessor for SharedBeaconRecord);
      if (v14 != 76) {
        goto LABEL_3;
      }
      if (qword_10099B9F0 != -1) {
        swift_once(&qword_10099B9F0, sub_10076394C);
      }
      uint64_t v15 = qword_100A2B750;
      if (*(void *)(qword_100A2B750 + 16))
      {
        uint64_t v16 = *(void *)(*(void *)(v0 + 392) + *(int *)(v4 + 48));
        uint64_t v17 = static Hasher._hash(seed:_:)(*(void *)(qword_100A2B750 + 40), v16);
        uint64_t v18 = -1LL << *(_BYTE *)(v15 + 32);
        unint64_t v19 = v17 & ~v18;
        if (((*(void *)(v15 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v19) & 1) != 0)
        {
          uint64_t v20 = *(void *)(v15 + 48);
          if (*(void *)(v20 + 8 * v19) == v16)
          {
LABEL_3:
            uint64_t v6 = *(void *)(v0 + 400);
            uint64_t v5 = *(void *)(v0 + 408);
            uint64_t v7 = *(void *)(v0 + 384);
            sub_100018C68(*(void *)(v0 + 392), type metadata accessor for SharedBeaconRecord);
            sub_100018C68(v6, type metadata accessor for SharedBeaconRecord);
            sub_10001DC4C(v5, v7, type metadata accessor for SharedBeaconRecord);
            sub_100018C68(*(void *)(v0 + 384), type metadata accessor for SharedBeaconRecord);
            goto LABEL_4;
          }

          uint64_t v21 = ~v18;
          while (1)
          {
            unint64_t v19 = (v19 + 1) & v21;
            if (((*(void *)(v15 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v19) & 1) == 0) {
              break;
            }
            if (*(void *)(v20 + 8 * v19) == v16) {
              goto LABEL_3;
            }
          }
        }
      }

      uint64_t v27 = *(void *)(v0 + 400);
      uint64_t v26 = *(void *)(v0 + 408);
      uint64_t v28 = *(void *)(v0 + 384);
      sub_100018C68(*(void *)(v0 + 392), type metadata accessor for SharedBeaconRecord);
      sub_100018C68(v27, type metadata accessor for SharedBeaconRecord);
      uint64_t v24 = v26;
      uint64_t v25 = v28;
      uint64_t v4 = v46;
    }

    else
    {
      uint64_t v22 = *(void *)(v0 + 408);
      uint64_t v23 = *(void *)(v0 + 384);
      sub_100018C68(*(void *)(v0 + 400), type metadata accessor for SharedBeaconRecord);
      uint64_t v24 = v22;
      uint64_t v25 = v23;
    }

    sub_10001DC4C(v24, v25, type metadata accessor for SharedBeaconRecord);
    uint64_t v29 = *(void *)(v0 + 384);
    uint64_t v30 = *(void *)(v29 + *(int *)(v4 + 44));
    uint64_t v31 = *(void *)(v29 + *(int *)(v4 + 48));
    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
    uint64_t v32 = sub_1006A1524(*(void *)(v0 + 208));
    swift_bridgeObjectRelease();
    uint64_t v33 = sub_1006F1330(v32);
    swift_bridgeObjectRelease();
    uint64_t v49 = v33;
    sub_1000BDCF0(v50, 8212LL);
    sub_1000BDCF0(v50, 8213LL);
    sub_1000BDCF0(v50, 8216LL);
    sub_1000BDCF0(v50, 8219LL);
    sub_1000BDCF0(v50, 8220LL);
    sub_1000BDCF0(v50, 8223LL);
    uint64_t v34 = *(void *)(v0 + 384);
    if (v30 != 76)
    {
      swift_bridgeObjectRelease();
      sub_100018C68(v34, type metadata accessor for SharedBeaconRecord);
LABEL_26:
      sub_10002218C(*(void *)(v0 + 408), *(void *)(v0 + 376), type metadata accessor for SharedBeaconRecord);
      uint64_t v2 = v47;
      if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
      {
        sub_100032BC4(0, v47[2] + 1LL, 1);
        uint64_t v2 = _swiftEmptyArrayStorage;
      }

      unint64_t v37 = v2[2];
      unint64_t v36 = v2[3];
      uint64_t v4 = v46;
      if (v37 >= v36 >> 1)
      {
        sub_100032BC4(v36 > 1, v37 + 1, 1);
        uint64_t v2 = _swiftEmptyArrayStorage;
      }

      uint64_t v38 = *(void *)(v0 + 376);
      v2[2] = v37 + 1;
      sub_10002218C(v38, (uint64_t)v2 + v10 + v37 * v11, type metadata accessor for SharedBeaconRecord);
      goto LABEL_5;
    }

    BOOL v35 = sub_1004E4E60(v31, v49);
    swift_bridgeObjectRelease();
    sub_100018C68(v34, type metadata accessor for SharedBeaconRecord);
    if (!v35) {
      goto LABEL_26;
    }
LABEL_4:
    uint64_t v4 = v46;
    uint64_t v2 = v47;
    sub_100018C68(*(void *)(v0 + 408), type metadata accessor for SharedBeaconRecord);
LABEL_5:
    uint64_t result = v43;
    if (++v3 == v45) {
      goto LABEL_31;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_100633300(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 544);
  uint64_t v5 = *(void *)(*v2 + 536);
  *(void *)(v3 + 55_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = a1;
  *(void *)(v3 + 560) = v1;
  swift_task_dealloc(v4);
  swift_release();
  swift_task_dealloc(v5);
  return swift_task_switch(sub_100633380, 0LL, 0LL);
}

uint64_t sub_100633380()
{
  *(void *)(v0 + 568) = *(void *)(v0 + 560);
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 136, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 16, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 40))
  {
    sub_100012EC0((__int128 *)(v0 + 16), v0 + 56);
    sub_100012ED8((void *)(v0 + 56), *(void *)(v0 + 80));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C8D8 + dword_10099C8D8);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C8DC);
    *(void *)(v0 + 576) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100633480;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100633480(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 576LL);
  *(void *)(*(void *)v1 + 584LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1006334DC, 0LL, 0LL);
}

uint64_t sub_1006334DC()
{
  uint64_t v1 = *(void *)(v0 + 584);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
  if (v1) {
    return swift_task_switch(sub_10063369C, *(void *)(v0 + 584), 0LL);
  }
  if (qword_10099B4F0 != -1) {
    swift_once(&qword_10099B4F0, sub_1004B82C0);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = sub_10000A720(v3, (uint64_t)qword_100A2AB30);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "No StandaloneBeaconService available!", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  uint64_t v8 = *(void *)(v0 + 400);
  uint64_t v10 = *(void *)(v0 + 384);
  uint64_t v9 = *(void *)(v0 + 392);
  uint64_t v11 = *(void *)(v0 + 376);
  uint64_t v12 = *(void *)(v0 + 352);
  uint64_t v13 = *(void *)(v0 + 328);
  uint64_t v15 = *(void *)(v0 + 296);
  uint64_t v14 = *(void *)(v0 + 304);
  uint64_t v16 = *(void *)(v0 + 272);
  uint64_t v17 = *(void *)(v0 + 264);
  uint64_t v18 = *(void *)(v0 + 240);
  uint64_t v19 = *(void *)(v0 + 176);
  swift_task_dealloc(*(void *)(v0 + 408));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v19);
}

uint64_t sub_10063369C()
{
  uint64_t v1 = v0[71];
  uint64_t v2 = sub_1006571FC(*(void *)(v0[73] + 128LL));
  v0[74] = v1;
  if (v1)
  {
    uint64_t v3 = sub_100633BE8;
  }

  else
  {
    v0[75] = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()(v2);
    swift_release();
    uint64_t v3 = sub_100633710;
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100633710()
{
  uint64_t v1 = *(void *)(v0 + 600);
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 320);
    uint64_t v24 = *(void *)(v0 + 288);
    uint64_t v26 = *(void *)(v0 + 312);
    uint64_t v22 = *(void *)(v0 + 256);
    sub_100033338(0, v2, 0);
    uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v5 = *(void *)(v0 + 328);
    uint64_t v6 = *(void *)(v0 + 296);
    uint64_t v7 = *(void *)(v0 + 272);
    uint64_t v8 = *(void *)(v0 + 280);
    uint64_t v9 = *(void *)(v0 + 264);
    uint64_t v10 = *(void *)(v0 + 248);
    sub_10001DC4C(v4, v5, type metadata accessor for StandaloneBeacon);
    uid_t v11 = getuid();
    sub_1005E2270(v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v6, v5, v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v7, 1LL, 1LL, v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v9, v5 + *(int *)(v26 + 32), v10);
    __asm { BR              X10 }
  }

  swift_release();
  sub_100185DFC((uint64_t)_swiftEmptyArrayStorage);
  swift_release();
  uint64_t v12 = *(void *)(v0 + 400);
  uint64_t v14 = *(void *)(v0 + 384);
  uint64_t v13 = *(void *)(v0 + 392);
  uint64_t v15 = *(void *)(v0 + 376);
  uint64_t v16 = *(void *)(v0 + 352);
  uint64_t v17 = *(void *)(v0 + 328);
  uint64_t v19 = *(void *)(v0 + 296);
  uint64_t v18 = *(void *)(v0 + 304);
  uint64_t v20 = *(void *)(v0 + 272);
  uint64_t v23 = *(void *)(v0 + 264);
  uint64_t v25 = *(void *)(v0 + 240);
  uint64_t v27 = *(void *)(v0 + 176);
  swift_task_dealloc(*(void *)(v0 + 408));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v27);
}

uint64_t sub_100633BE8()
{
  uint64_t v1 = *(void *)(v0 + 592);
  swift_release(*(void *)(v0 + 584));
  swift_errorRelease(v1);
  uint64_t v2 = *(void *)(v0 + 400);
  uint64_t v4 = *(void *)(v0 + 384);
  uint64_t v3 = *(void *)(v0 + 392);
  uint64_t v5 = *(void *)(v0 + 376);
  uint64_t v6 = *(void *)(v0 + 352);
  uint64_t v7 = *(void *)(v0 + 328);
  uint64_t v9 = *(void *)(v0 + 296);
  uint64_t v8 = *(void *)(v0 + 304);
  uint64_t v10 = *(void *)(v0 + 272);
  uint64_t v12 = *(void *)(v0 + 264);
  uint64_t v13 = *(void *)(v0 + 240);
  uint64_t v14 = *(void *)(v0 + 176);
  swift_task_dealloc(*(void *)(v0 + 408));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v14);
}

uint64_t sub_100633CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[17] = a4;
  v5[18] = a5;
  v5[15] = a2;
  v5[16] = a3;
  v5[14] = a1;
  uint64_t v6 = type metadata accessor for Date(0LL);
  v5[19] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[20] = v7;
  v5[21] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord(0LL);
  v5[22] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[23] = v9;
  uint64_t v10 = *(void *)(v9 + 64);
  _BYTE v5[24] = v10;
  v5[25] = swift_task_alloc((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_1009AA830);
  v5[26] = v11;
  v5[27] = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for OwnedBeaconGroup(0LL);
  v5[28] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v5[29] = v13;
  v5[30] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v14 = (*(void *)(*(void *)(sub_100004AEC(&qword_10099D8A0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[31] = swift_task_alloc(v14);
  _BYTE v5[32] = swift_task_alloc(v14);
  uint64_t v15 = type metadata accessor for UUID(0LL);
  v5[33] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v5[34] = v16;
  uint64_t v17 = *(void *)(v16 + 64);
  v5[35] = v17;
  unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v5[36] = swift_task_alloc(v18);
  v5[37] = swift_task_alloc(v18);
  v5[38] = swift_task_alloc(v18);
  uint64_t v19 = type metadata accessor for StableIdentifier(0LL);
  v5[39] = v19;
  unint64_t v20 = (*(void *)(*(void *)(v19 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[40] = swift_task_alloc(v20);
  v5[41] = swift_task_alloc(v20);
  v5[42] = swift_task_alloc(v20);
  return swift_task_switch(sub_100633E70, 0LL, 0LL);
}

void sub_100633E70()
{
  uint64_t v2 = v0[41];
  uint64_t v1 = v0[42];
  uint64_t v3 = v0[39];
  sub_10001DC4C(v0[15] + *(int *)(v0[22] + 24LL), v1, type metadata accessor for StableIdentifier);
  sub_10001DC4C(v1, v2, type metadata accessor for StableIdentifier);
  uint64_t v4 = (char *)sub_100633F08 + 4 * byte_100811A50[swift_getEnumCaseMultiPayload(v2, v3)];
  __asm { BR              X10 }

uint64_t sub_100633F08()
{
  uint64_t v1 = *(void *)(v0 + 112);
  sub_100018C68(*(void *)(v0 + 336), type metadata accessor for StableIdentifier);
  swift_bridgeObjectRelease();
  uint64_t v2 = type metadata accessor for ManagedCBPeripheralBeaconInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
  uint64_t v3 = *(void *)(v0 + 328);
  uint64_t v4 = *(void *)(v0 + 320);
  uint64_t v6 = *(void *)(v0 + 296);
  uint64_t v5 = *(void *)(v0 + 304);
  uint64_t v7 = *(void *)(v0 + 288);
  uint64_t v9 = *(void *)(v0 + 248);
  uint64_t v8 = *(void *)(v0 + 256);
  uint64_t v10 = *(void *)(v0 + 240);
  uint64_t v11 = *(void *)(v0 + 216);
  uint64_t v13 = *(void *)(v0 + 200);
  uint64_t v14 = *(void *)(v0 + 168);
  swift_task_dealloc(*(void *)(v0 + 336));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006345D4()
{
  return swift_task_switch(sub_100634630, 0LL, 0LL);
}

uint64_t sub_100634630()
{
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 216);
  (*(void (**)(void, void))(*(void *)(v0 + 272) + 8LL))(*(void *)(v0 + 304), *(void *)(v0 + 264));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1LL, v1) == 1)
  {
    sub_100015794(*(void *)(v0 + 216), &qword_1009AA830);
    uint64_t v5 = *(void *)(v0 + 136);
    uint64_t v4 = *(void *)(v0 + 144);
    uint64_t v7 = *(void *)(v0 + 192);
    uint64_t v6 = *(void *)(v0 + 200);
    uint64_t v8 = *(void *)(v0 + 184);
    uint64_t v9 = *(void *)(v0 + 128);
    sub_10001DC4C(*(void *)(v0 + 120), v6, type metadata accessor for OwnedBeaconRecord);
    uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v11 = (v10 + 40) & ~v10;
    uint64_t v12 = (void *)swift_allocObject(&unk_10096E938, v11 + v7, v10 | 7);
    *(void *)(v0 + 376) = v12;
    v12[2] = v9;
    v12[3] = v5;
    v12[4] = v4;
    sub_10002218C(v6, (uint64_t)v12 + v11, type metadata accessor for OwnedBeaconRecord);
    uint64_t v13 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v14 = (void *)swift_task_alloc(v13);
    *(void *)(v0 + 384) = v14;
    uint64_t v15 = sub_100004AEC(&qword_1009A34B0);
    *uint64_t v14 = v0;
    v14[1] = sub_100634A08;
    return unsafeBlocking<A>(_:)(v0 + 80, sub_1006422EC, v12, v15);
  }

  uint64_t v17 = *(void *)(v0 + 240);
  uint64_t v18 = *(void *)(v0 + 224);
  sub_10002218C(*(void *)(v0 + 216), v17, type metadata accessor for OwnedBeaconGroup);
  uint64_t v19 = (uint64_t *)(v17 + *(int *)(v18 + 36));
  uint64_t v53 = *v19;
  uint64_t v54 = v19[1];
  swift_bridgeObjectRetain(v54);
  sub_100018C68(v17, type metadata accessor for OwnedBeaconGroup);
  uint64_t v20 = *(void *)(v0 + 288);
  uint64_t v22 = *(void *)(v0 + 264);
  uint64_t v21 = *(void *)(v0 + 272);
  uint64_t v23 = *(void *)(v0 + 248);
  uint64_t v24 = *(int **)(v0 + 176);
  uint64_t v25 = *(void *)(v0 + 120);
  uint64_t v26 = v25 + *(int *)(v0 + 392);
  uint64_t v27 = *(void *)(v0 + 160);
  uint64_t v55 = *(void *)(v0 + 152);
  uint64_t v58 = *(void *)(v0 + 168);
  uid_t v28 = getuid();
  sub_1005E2270(v28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v20, v25 + v24[5], v22);
  sub_10001581C(v26, v23, &qword_10099D8A0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v58, v25 + v24[8], v55);
  uint64_t v29 = *(void *)(v25 + v24[16]);
  if (v29 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
  }

  else if (v29 <= 0x7FFFFFFF)
  {
    char v59 = *(_BYTE *)(v0 + 396);
    uint64_t v56 = *(void *)(v0 + 352);
    uint64_t v31 = *(void *)(v0 + 288);
    uint64_t v30 = *(void *)(v0 + 296);
    uint64_t v33 = *(void *)(v0 + 264);
    uint64_t v32 = *(void *)(v0 + 272);
    uint64_t v34 = *(void *)(v0 + 248);
    uint64_t v35 = *(void *)(v0 + 160);
    uint64_t v51 = *(void *)(v0 + 168);
    uint64_t v52 = *(void *)(v0 + 344);
    uint64_t v36 = *(void *)(v0 + 152);
    uint64_t v37 = *(void *)(v0 + 112);
    sub_100018C68(*(void *)(v0 + 336), type metadata accessor for StableIdentifier);
    uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32);
    v38(v37, v30, v33);
    uint64_t v39 = (int *)type metadata accessor for ManagedCBPeripheralBeaconInfo(0LL);
    v38(v37 + v39[5], v31, v33);
    sub_100015750(v34, v37 + v39[6], &qword_10099D8A0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32))(v37 + v39[7], v51, v36);
    uint64_t v40 = (void *)(v37 + v39[8]);
    *uint64_t v40 = v53;
    v40[1] = v54;
    *(_DWORD *)(v37 + v39[9]) = v29;
    uint64_t v41 = (void *)(v37 + v39[10]);
    *uint64_t v41 = v52;
    v41[1] = v56;
    *(_BYTE *)(v37 + v39[11]) = 1;
    *(_BYTE *)(v37 + v39[12]) = v59;
    (*(void (**)(uint64_t, void, uint64_t, int *))(*((void *)v39 - 1) + 56LL))(v37, 0LL, 1LL, v39);
    uint64_t v42 = *(void *)(v0 + 328);
    uint64_t v43 = *(void *)(v0 + 320);
    uint64_t v45 = *(void *)(v0 + 296);
    uint64_t v44 = *(void *)(v0 + 304);
    uint64_t v46 = *(void *)(v0 + 288);
    uint64_t v48 = *(void *)(v0 + 248);
    uint64_t v47 = *(void *)(v0 + 256);
    uint64_t v49 = *(void *)(v0 + 240);
    uint64_t v50 = *(void *)(v0 + 216);
    uint64_t v57 = *(void *)(v0 + 200);
    uint64_t v60 = *(void *)(v0 + 168);
    swift_task_dealloc(*(void *)(v0 + 336));
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v57);
    swift_task_dealloc(v60);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  __break(1u);
  return result;
}

uint64_t sub_100634A08()
{
  return swift_task_switch(sub_100634A64, 0LL, 0LL);
}

uint64_t sub_100634A64()
{
  uint64_t v37 = *(void *)(v0 + 80);
  unint64_t v39 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 272);
  uint64_t v4 = *(void *)(v0 + 248);
  uint64_t v5 = *(int **)(v0 + 176);
  uint64_t v6 = *(void *)(v0 + 120);
  uint64_t v7 = v6 + *(int *)(v0 + 392);
  uint64_t v8 = *(void *)(v0 + 160);
  uint64_t v41 = *(void *)(v0 + 152);
  uint64_t v44 = *(void *)(v0 + 168);
  uid_t v9 = getuid();
  sub_1005E2270(v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v6 + v5[5], v2);
  sub_10001581C(v7, v4, &qword_10099D8A0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v44, v6 + v5[8], v41);
  uint64_t v11 = *(void *)(v6 + v5[16]);
  if (v11 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_10;
  }

  if (v11 > 0x7FFFFFFF)
  {
LABEL_10:
    __break(1u);
    return result;
  }

  char v45 = *(_BYTE *)(v0 + 396);
  if (v39) {
    unint64_t v12 = v39;
  }
  else {
    unint64_t v12 = 0xE700000000000000LL;
  }
  uint64_t v13 = 0x6E776F6E6B6E55LL;
  if (v39) {
    uint64_t v13 = v37;
  }
  unint64_t v36 = v12;
  uint64_t v38 = v13;
  uint64_t v40 = *(void *)(v0 + 344);
  uint64_t v42 = *(void *)(v0 + 352);
  uint64_t v15 = *(void *)(v0 + 288);
  uint64_t v14 = *(void *)(v0 + 296);
  uint64_t v16 = *(void *)(v0 + 264);
  uint64_t v17 = *(void *)(v0 + 272);
  uint64_t v18 = *(void *)(v0 + 248);
  uint64_t v19 = *(void *)(v0 + 160);
  uint64_t v35 = *(void *)(v0 + 168);
  uint64_t v20 = *(void *)(v0 + 152);
  uint64_t v21 = *(void *)(v0 + 112);
  sub_100018C68(*(void *)(v0 + 336), type metadata accessor for StableIdentifier);
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32);
  v22(v21, v14, v16);
  uint64_t v23 = (int *)type metadata accessor for ManagedCBPeripheralBeaconInfo(0LL);
  v22(v21 + v23[5], v15, v16);
  sub_100015750(v18, v21 + v23[6], &qword_10099D8A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v21 + v23[7], v35, v20);
  uint64_t v24 = (uint64_t *)(v21 + v23[8]);
  *uint64_t v24 = v38;
  v24[1] = v36;
  *(_DWORD *)(v21 + v23[9]) = v11;
  uint64_t v25 = (void *)(v21 + v23[10]);
  void *v25 = v40;
  v25[1] = v42;
  *(_BYTE *)(v21 + v23[11]) = 1;
  *(_BYTE *)(v21 + v23[12]) = v45;
  (*(void (**)(uint64_t, void, uint64_t, int *))(*((void *)v23 - 1) + 56LL))(v21, 0LL, 1LL, v23);
  uint64_t v26 = *(void *)(v0 + 328);
  uint64_t v27 = *(void *)(v0 + 320);
  uint64_t v29 = *(void *)(v0 + 296);
  uint64_t v28 = *(void *)(v0 + 304);
  uint64_t v30 = *(void *)(v0 + 288);
  uint64_t v32 = *(void *)(v0 + 248);
  uint64_t v31 = *(void *)(v0 + 256);
  uint64_t v33 = *(void *)(v0 + 240);
  uint64_t v34 = *(void *)(v0 + 216);
  uint64_t v43 = *(void *)(v0 + 200);
  uint64_t v46 = *(void *)(v0 + 168);
  swift_task_dealloc(*(void *)(v0 + 336));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v43);
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100634D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[7] = a4;
  v5[8] = a5;
  void v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = type metadata accessor for SharedBeaconRecord(0LL);
  void v5[9] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[10] = v7;
  uint64_t v8 = *(void *)(v7 + 64);
  v5[11] = v8;
  v5[12] = swift_task_alloc((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100634D74, 0LL, 0LL);
}

uint64_t sub_100634D74()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[10];
  uint64_t v5 = v0[7];
  uint64_t v4 = v0[8];
  uint64_t v6 = v0[6];
  sub_10001DC4C(v0[5], v1, type metadata accessor for SharedBeaconRecord);
  uint64_t v7 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = (v7 + 40) & ~v7;
  uid_t v9 = (void *)swift_allocObject(&unk_10096E910, v8 + v2, v7 | 7);
  v0[13] = (uint64_t)v9;
  _OWORD v9[2] = v6;
  v9[3] = v5;
  v9[4] = v4;
  sub_10002218C(v1, (uint64_t)v9 + v8, type metadata accessor for SharedBeaconRecord);
  uint64_t v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v11 = (uint64_t **)swift_task_alloc(v10);
  v0[14] = (uint64_t)v11;
  uint64_t v12 = sub_100004AEC(&qword_1009A34B0);
  void *v11 = v0;
  v11[1] = (uint64_t *)sub_100634E7C;
  return unsafeBlocking<A>(_:)(v0 + 2, sub_100642028, v9, v12);
}

uint64_t sub_100634E7C()
{
  return swift_task_switch(sub_100634ED8, 0LL, 0LL);
}

uint64_t sub_100634ED8()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  unint64_t v4 = *(void *)(v0 + 24);
  uint64_t v21 = *(void *)(v0 + 16);
  uid_t v5 = getuid();
  sub_1005E2270(v5);
  uint64_t v6 = v2 + *(int *)(v1 + 20);
  uint64_t v7 = (int *)type metadata accessor for ManagedCBPeripheralBeaconInfo(0LL);
  uint64_t v8 = v3 + v7[5];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v8, v6, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v3 + v7[6], 1LL, 1LL, v9);
  uint64_t result = sub_1007636B4(v3 + v7[7]);
  uint64_t v12 = *(void *)(v2 + *(int *)(v1 + 44));
  if (v12 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_11;
  }

  if (v12 > 0x7FFFFFFF)
  {
LABEL_11:
    __break(1u);
    return result;
  }

  uint64_t v13 = *(void *)(v0 + 96);
  uint64_t v14 = *(void *)(v0 + 32);
  if (v4) {
    unint64_t v15 = v4;
  }
  else {
    unint64_t v15 = 0xE700000000000000LL;
  }
  if (v4) {
    uint64_t v16 = v21;
  }
  else {
    uint64_t v16 = 0x6E776F6E6B6E55LL;
  }
  uint64_t v17 = UUID.uuidString.getter(result);
  uint64_t v18 = (uint64_t *)(v14 + v7[8]);
  uint64_t *v18 = v16;
  v18[1] = v15;
  *(_DWORD *)(v14 + v7[9]) = v12;
  uint64_t v19 = (uint64_t *)(v14 + v7[10]);
  uint64_t *v19 = v17;
  v19[1] = v20;
  *(_BYTE *)(v14 + v7[11]) = 1;
  *(_BYTE *)(v14 + v7[12]) = 0;
  (*(void (**)(uint64_t, void, uint64_t, int *))(*((void *)v7 - 1) + 56LL))(v14, 0LL, 1LL, v7);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10063505C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t (*a3)(void)@<X4>, uint64_t a4@<X5>, void *a5@<X8>)
{
  uint64_t v10 = sub_100004AEC(&qword_1009AE490);
  __chkstk_darwin(v10);
  uint64_t v12 = &v19[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = a2 + *(int *)(a3(0LL) + 20);
  uint64_t v20 = a1;
  uint64_t v21 = v13;
  QueueSynchronizer.conditionalSync<A>(_:)(a4);
  uint64_t v14 = type metadata accessor for BeaconNamingRecord(0LL);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48LL))(v12, 1LL, v14) == 1)
  {
    uint64_t result = sub_100015794((uint64_t)v12, &qword_1009AE490);
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
  }

  else
  {
    uint64_t v18 = (uint64_t *)&v12[*(int *)(v14 + 32)];
    uint64_t v16 = *v18;
    uint64_t v17 = v18[1];
    swift_bridgeObjectRetain(v17);
    uint64_t result = sub_100018C68((uint64_t)v12, type metadata accessor for BeaconNamingRecord);
  }

  *a5 = v16;
  a5[1] = v17;
  return result;
}

uint64_t sub_10063518C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[22] = a4;
  v5[23] = a5;
  v5[20] = a2;
  v5[21] = a3;
  v5[19] = a1;
  uint64_t v6 = type metadata accessor for Date(0LL);
  _BYTE v5[24] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[25] = v7;
  v5[26] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for BeaconIdentifier(0LL);
  v5[27] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[28] = v9;
  uint64_t v10 = *(void *)(v9 + 64);
  v5[29] = v10;
  unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v5[30] = swift_task_alloc(v11);
  v5[31] = swift_task_alloc(v11);
  _BYTE v5[32] = swift_task_alloc(v11);
  v5[33] = swift_task_alloc(v11);
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  v5[34] = v12;
  v5[35] = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for OwnedBeaconRecord(0LL);
  v5[36] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v5[37] = v14;
  v5[38] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100635298, 0LL, 0LL);
}

uint64_t sub_100635298()
{
  uint64_t v1 = v0[33];
  uint64_t v3 = v0[28];
  uint64_t v2 = v0[29];
  uint64_t v5 = v0[22];
  uint64_t v4 = v0[23];
  uint64_t v6 = v0[21];
  sub_10001DC4C(v0[20], v1, type metadata accessor for BeaconIdentifier);
  uint64_t v7 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = (v7 + 40) & ~v7;
  uint64_t v9 = (void *)swift_allocObject(&unk_10096E898, v8 + v2, v7 | 7);
  v0[39] = (uint64_t)v9;
  _OWORD v9[2] = v6;
  v9[3] = v5;
  v9[4] = v4;
  sub_10002218C(v1, (uint64_t)v9 + v8, type metadata accessor for BeaconIdentifier);
  uint64_t v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  swift_retain();
  swift_retain();
  unint64_t v11 = (uint64_t **)swift_task_alloc(v10);
  v0[40] = (uint64_t)v11;
  void *v11 = v0;
  v11[1] = (uint64_t *)sub_10063538C;
  return unsafeBlocking<A>(_:)(v0[35], sub_100641C40, v9, v0[34]);
}

uint64_t sub_10063538C()
{
  return swift_task_switch(sub_1006353E8, 0LL, 0LL);
}

uint64_t sub_1006353E8()
{
  uint64_t v1 = v0[35];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[37] + 48LL))(v1, 1LL, v0[36]) == 1)
  {
    sub_100015794(v1, (uint64_t *)&unk_1009A9C30);
    if (qword_10099B4F0 != -1) {
      swift_once(&qword_10099B4F0, sub_1004B82C0);
    }
    uint64_t v2 = (__int128 *)(v0 + 7);
    uint64_t v3 = v0 + 12;
    uint64_t v4 = v0[30];
    uint64_t v5 = v0[20];
    uint64_t v6 = type metadata accessor for Logger(0LL);
    v0[42] = sub_10000A720(v6, (uint64_t)qword_100A2AB30);
    uint64_t v7 = sub_10001DC4C(v5, v4, type metadata accessor for BeaconIdentifier);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.default.getter(v8);
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = v0[30];
    if (v10)
    {
      uint64_t v12 = swift_slowAlloc(22LL, -1LL);
      uint64_t v13 = swift_slowAlloc(32LL, -1LL);
      uint64_t v40 = v13;
      *(_DWORD *)uint64_t v12 = 141558275;
      v0[15] = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v0 + 16, v12 + 4, v12 + 12);
      *(_WORD *)(v12 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2081;
      uint64_t v14 = type metadata accessor for UUID(0LL);
      uint64_t v15 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(v14, v15);
      unint64_t v42 = v16;
      v17._countAndFlagsBits = 47LL;
      v17._object = (void *)0xE100000000000000LL;
      String.append(_:)(v17);
      uint64_t v18 = v15;
      uint64_t v2 = (__int128 *)(v0 + 7);
      v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v14, v18);
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v0[16] = sub_1003F11D4(v41, v42, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 17, v12 + 14, v12 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68(v11, type metadata accessor for BeaconIdentifier);
      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "beaconInfo: no beacon record for %{private,mask.hash}s. Looking up standalone beacons...",  (uint8_t *)v12,  0x16u);
      swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1LL, -1LL);
      uint64_t v20 = v12;
      uint64_t v3 = v0 + 12;
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(v0[30], type metadata accessor for BeaconIdentifier);
    }

    if (qword_10099B9E0 != -1) {
      swift_once(&qword_10099B9E0, sub_10076012C);
    }
    swift_beginAccess(&xmmword_1009BED80, v3, 0LL, 0LL);
    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, (uint64_t)v2, (uint64_t *)&unk_10099FA80);
    if (v0[10])
    {
      sub_100012EC0(v2, (uint64_t)(v0 + 2));
      sub_100012ED8(v0 + 2, v0[5]);
      unint64_t v39 = (uint64_t (__cdecl *)())((char *)&dword_10099C8A8 + dword_10099C8A8);
      uint64_t v37 = (void *)swift_task_alloc(unk_10099C8AC);
      v0[43] = v37;
      *uint64_t v37 = v0;
      v37[1] = sub_100635BE4;
      return v39();
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    sub_10002218C(v1, v0[38], type metadata accessor for OwnedBeaconRecord);
    if (qword_10099B4F0 != -1) {
      swift_once(&qword_10099B4F0, sub_1004B82C0);
    }
    uint64_t v21 = v0[32];
    uint64_t v22 = v0[20];
    uint64_t v23 = type metadata accessor for Logger(0LL);
    sub_10000A720(v23, (uint64_t)qword_100A2AB30);
    uint64_t v24 = sub_10001DC4C(v22, v21, type metadata accessor for BeaconIdentifier);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.default.getter(v25);
    BOOL v27 = os_log_type_enabled(v25, v26);
    uint64_t v28 = v0[32];
    if (v27)
    {
      uint64_t v29 = swift_slowAlloc(22LL, -1LL);
      uint64_t v30 = swift_slowAlloc(32LL, -1LL);
      uint64_t v40 = v30;
      *(_DWORD *)uint64_t v29 = 141558275;
      v0[17] = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 17, v0 + 18, v29 + 4, v29 + 12);
      *(_WORD *)(v29 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2081;
      uint64_t v31 = type metadata accessor for UUID(0LL);
      uint64_t v32 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(v31, v32);
      unint64_t v42 = v33;
      v34._countAndFlagsBits = 47LL;
      v34._object = (void *)0xE100000000000000LL;
      String.append(_:)(v34);
      v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v31, v32);
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      v0[18] = sub_1003F11D4(v41, v42, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 18, v0 + 19, v29 + 14, v29 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68(v28, type metadata accessor for BeaconIdentifier);
      _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "beaconInfo: found beacon record for %{private,mask.hash}s!",  (uint8_t *)v29,  0x16u);
      swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(v0[32], type metadata accessor for BeaconIdentifier);
    }

    uint64_t v38 = (void *)swift_task_alloc(dword_1009B536C);
    v0[41] = v38;
    *uint64_t v38 = v0;
    v38[1] = sub_1006359D0;
    return sub_1005D2AFC();
  }

  return result;
}

uint64_t sub_1006359D0(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 328LL);
  *(_BYTE *)(*(void *)v1 + 368LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100635A2C, 0LL, 0LL);
}

uint64_t sub_100635A2C()
{
  int v29 = *(unsigned __int8 *)(v0 + 368);
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v2 = *(int **)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v5 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v30 = v4;
  uint64_t v6 = *(void *)(v0 + 192);
  uint64_t v27 = v5;
  uint64_t v28 = v6;
  uint64_t v7 = *(void *)(v0 + 152);
  sub_10001DC4C(*(void *)(v0 + 160), v3, type metadata accessor for BeaconIdentifier);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v1 + v2[8], v6);
  uint64_t v8 = (uint64_t *)(v1 + v2[12]);
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  uint64_t v11 = v2[10];
  uint64_t v12 = (uint64_t *)(v1 + v2[9]);
  uint64_t v14 = *v12;
  unint64_t v13 = v12[1];
  uint64_t v15 = *(void *)(v1 + v11);
  unint64_t v16 = *(void *)(v1 + v11 + 8);
  sub_10001736C(v9, v10);
  sub_10001736C(v14, v13);
  sub_100018BE4(v15, v16);
  sub_100018C68(v1, type metadata accessor for OwnedBeaconRecord);
  if (v29) {
    char v17 = 2;
  }
  else {
    char v17 = 0;
  }
  sub_10002218C(v3, v7, type metadata accessor for BeaconIdentifier);
  uint64_t v18 = (int *)type metadata accessor for KeyGenerationBeaconInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(v7 + v18[5], v30, v28);
  Swift::String v19 = (uint64_t *)(v7 + v18[6]);
  uint64_t *v19 = v9;
  v19[1] = v10;
  _BYTE v19[2] = v14;
  v19[3] = v13;
  v19[4] = v15;
  v19[5] = v16;
  *(_BYTE *)(v7 + v18[7]) = v17;
  (*(void (**)(uint64_t, void, uint64_t, int *))(*((void *)v18 - 1) + 56LL))(v7, 0LL, 1LL, v18);
  uint64_t v20 = *(void *)(v0 + 280);
  uint64_t v22 = *(void *)(v0 + 256);
  uint64_t v21 = *(void *)(v0 + 264);
  uint64_t v24 = *(void *)(v0 + 240);
  uint64_t v23 = *(void *)(v0 + 248);
  uint64_t v25 = *(void *)(v0 + 208);
  swift_task_dealloc(*(void *)(v0 + 304));
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100635BE4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 344LL);
  *(void *)(*(void *)v1 + 352LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100635C40, 0LL, 0LL);
}

uint64_t sub_100635C40()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 352))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return swift_task_switch(sub_100635DA8, *(void *)(v0 + 352), 0LL);
  }

  else
  {
    uint64_t v3 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No BeaconKeyService available!", v6, 2u);
      swift_slowDealloc(v6, -1LL, -1LL);
    }

    unint64_t v7 = sub_100641B4C();
    uint64_t v8 = swift_allocError(&type metadata for ManagedCBPeripheralError, v7, 0LL, 0LL);
    _BYTE *v9 = 1;
    swift_willThrow(v8);
    uint64_t v10 = *(void *)(v0 + 280);
    uint64_t v12 = *(void *)(v0 + 256);
    uint64_t v11 = *(void *)(v0 + 264);
    uint64_t v14 = *(void *)(v0 + 240);
    uint64_t v13 = *(void *)(v0 + 248);
    uint64_t v15 = *(void *)(v0 + 208);
    swift_task_dealloc(*(void *)(v0 + 304));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

void sub_100635DA8()
{
  uint64_t v1 = *(void **)(v0[44] + 128);
  if (v1)
  {
    sub_100475FD8(v0[20], v1, v0[19]);
    v0[45] = 0LL;
    swift_task_switch(sub_100635E14, 0LL, 0LL);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_100635E14()
{
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v5 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 248);
  uint64_t v6 = *(void *)(v0 + 208);
  swift_task_dealloc(*(void *)(v0 + 304));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100635EA0()
{
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v5 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 248);
  uint64_t v6 = *(void *)(v0 + 208);
  swift_task_dealloc(*(void *)(v0 + 304));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100635F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[6] = a3;
  v4[7] = a4;
  void v4[4] = a1;
  void v4[5] = a2;
  uint64_t v9 = type metadata accessor for BeaconIdentifier(0LL);
  v4[8] = v9;
  void v4[9] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009A8E90);
  uint64_t v11 = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  void v4[10] = v11;
  uint64_t v12 = type metadata accessor for KeyGenerationBeaconInfo(0LL);
  v4[11] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v4[12] = v13;
  void v4[13] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = (void *)swift_task_alloc(dword_1009B904C);
  v4[14] = v14;
  *uint64_t v14 = v4;
  v14[1] = sub_10063602C;
  return sub_10063518C(v11, a1, a2, a3, a4);
}

uint64_t sub_10063602C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 112LL);
  *(void *)(*(void *)v1 + 12Hasher.init(_seed:)(v7, 0LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100636554;
  }
  else {
    uint64_t v3 = sub_100636090;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100636090()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 80);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 96) + 48LL))(v2, 1LL, v1) == 1)
  {
    sub_100015794(v2, &qword_1009A8E90);
    if (qword_10099B4F0 != -1) {
      swift_once(&qword_10099B4F0, sub_1004B82C0);
    }
    uint64_t v3 = *(void *)(v0 + 32);
    uint64_t v4 = *(void *)(v0 + 72);
    uint64_t v5 = type metadata accessor for Logger(0LL);
    sub_10000A720(v5, (uint64_t)qword_100A2AB30);
    uint64_t v6 = sub_10001DC4C(v3, v4, type metadata accessor for BeaconIdentifier);
    unint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.error.getter(v7);
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = *(void *)(v0 + 72);
    if (v9)
    {
      uint64_t v11 = swift_slowAlloc(22LL, -1LL);
      uint64_t v12 = swift_slowAlloc(32LL, -1LL);
      uint64_t v23 = v12;
      *(_DWORD *)uint64_t v11 = 141558275;
      *(void *)(v0 + swift_weakDestroy(v0 + 16) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v11 + 4, v11 + 12);
      *(_WORD *)(v11 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2081;
      uint64_t v13 = type metadata accessor for UUID(0LL);
      uint64_t v14 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v13, v14);
      unint64_t v25 = v15;
      v16._countAndFlagsBits = 47LL;
      v16._object = (void *)0xE100000000000000LL;
      String.append(_:)(v16);
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v13, v14);
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 24) = sub_1003F11D4(v24, v25, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v11 + 14, v11 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68(v10, type metadata accessor for BeaconIdentifier);
      _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "No KeyGenerationBeaconInfo for %{private,mask.hash}s!",  (uint8_t *)v11,  0x16u);
      swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(*(void *)(v0 + 72), type metadata accessor for BeaconIdentifier);
    }

    uint64_t v20 = *(void *)(v0 + 72);
    uint64_t v21 = *(void *)(v0 + 80);
    swift_task_dealloc(*(void *)(v0 + 104));
    swift_task_dealloc(v21);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void *))(v0 + 8))(_swiftEmptyArrayStorage);
  }

  else
  {
    uint64_t v18 = *(void *)(v0 + 104);
    sub_10002218C(v2, v18, type metadata accessor for KeyGenerationBeaconInfo);
    if (*(void *)(v18 + *(int *)(v1 + 24) + 8) >> 60 == 15LL)
    {
      *(void *)(v0 + 144) = _swiftEmptyArrayStorage;
      return swift_task_switch(sub_1006364EC, 0LL, 0LL);
    }

    else
    {
      uint64_t v22 = (void *)swift_task_alloc(dword_1009B9064);
      *(void *)(v0 + 128) = v22;
      *uint64_t v22 = v0;
      v22[1] = sub_100636418;
      return sub_100637344(*(void *)(v0 + 104), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
    }
  }

uint64_t sub_100636418(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 128);
  *(void *)(*v2 + 136) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_10063648C;
  }

  else
  {
    *(void *)(v4 + 144) = a1;
    uint64_t v6 = sub_1006364EC;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_10063648C()
{
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v1 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006364EC()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 104));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_100636554()
{
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v1 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006365A4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 288) = a2;
  *(void *)(v7 + 296) = a4;
  *(_BYTE *)(v7 + 544) = a3;
  *(void *)(v7 + 280) = a1;
  uint64_t v12 = type metadata accessor for BeaconIdentifier(0LL);
  *(void *)(v7 + 304) = v12;
  *(void *)(v7 + 31_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_1009A8E90);
  uint64_t v14 = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v7 + 320) = v14;
  uint64_t v15 = type metadata accessor for KeyGenerationBeaconInfo(0LL);
  *(void *)(v7 + 328) = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  *(void *)(v7 + 336) = v16;
  *(void *)(v7 + 344) = swift_task_alloc((*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  Swift::String v17 = (void *)swift_task_alloc(dword_1009B904C);
  *(void *)(v7 + 35_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v17;
  *Swift::String v17 = v7;
  v17[1] = sub_1006366A0;
  return sub_10063518C(v14, a2, a5, a6, a7);
}

uint64_t sub_1006366A0()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 352LL);
  *(void *)(*(void *)v1 + 36Hasher.init(_seed:)(v7, 0LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100637280;
  }
  else {
    uint64_t v3 = sub_100636704;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100636704()
{
  uint64_t v1 = *(void *)(v0 + 320);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 336) + 48LL))( v1,  1LL,  *(void *)(v0 + 328)) == 1)
  {
    sub_100015794(v1, &qword_1009A8E90);
    if (qword_10099B4F0 != -1) {
      swift_once(&qword_10099B4F0, sub_1004B82C0);
    }
    uint64_t v2 = *(void *)(v0 + 312);
    uint64_t v3 = *(void *)(v0 + 288);
    uint64_t v4 = type metadata accessor for Logger(0LL);
    sub_10000A720(v4, (uint64_t)qword_100A2AB30);
    uint64_t v5 = sub_10001DC4C(v3, v2, type metadata accessor for BeaconIdentifier);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter(v6);
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = *(void *)(v0 + 312);
    if (v8)
    {
      uint64_t v10 = swift_slowAlloc(22LL, -1LL);
      uint64_t v11 = swift_slowAlloc(32LL, -1LL);
      uint64_t v24 = v11;
      *(_DWORD *)uint64_t v10 = 141558275;
      *(void *)(v0 + 264) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v10 + 4, v10 + 12);
      *(_WORD *)(v10 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2081;
      uint64_t v12 = type metadata accessor for UUID(0LL);
      uint64_t v13 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter(v12, v13);
      unint64_t v26 = v14;
      v15._countAndFlagsBits = 47LL;
      v15._object = (void *)0xE100000000000000LL;
      String.append(_:)(v15);
      v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v12, v13);
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 27_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = sub_1003F11D4(v25, v26, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v10 + 14, v10 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68(v9, type metadata accessor for BeaconIdentifier);
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "No KeyGenerationBeaconInfo for %{private,mask.hash}s!",  (uint8_t *)v10,  0x16u);
      swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1LL, -1LL);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(*(void *)(v0 + 312), type metadata accessor for BeaconIdentifier);
    }

    uint64_t v20 = *(void *)(v0 + 312);
    uint64_t v21 = *(void *)(v0 + 320);
    uint64_t v22 = *(void *)(v0 + 280);
    swift_task_dealloc(*(void *)(v0 + 344));
    swift_task_dealloc(v21);
    swift_task_dealloc(v20);
    *(void *)uint64_t v22 = 3LL;
    *(_OWORD *)(v22 + 8) = 0u;
    *(_OWORD *)(v22 + 24) = 0u;
    *(void *)(v22 + 40) = 0LL;
    Swift::String v19 = *(uint64_t (**)(void))(v0 + 8);
    return v19();
  }

  sub_10002218C(v1, *(void *)(v0 + 344), type metadata accessor for KeyGenerationBeaconInfo);
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 240, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 160, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 184))
  {
    sub_100012EC0((__int128 *)(v0 + 160), v0 + 200);
    sub_100012ED8((void *)(v0 + 200), *(void *)(v0 + 224));
    uint64_t v23 = (uint64_t (*)(void))((char *)&dword_10099C8A8 + dword_10099C8A8);
    uint64_t v18 = (void *)swift_task_alloc(unk_10099C8AC);
    *(void *)(v0 + 368) = v18;
    void *v18 = v0;
    v18[1] = sub_100636AB4;
    Swift::String v19 = v23;
    return v19();
  }

  __break(1u);
  return result;
}

uint64_t sub_100636AB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 368LL);
  *(void *)(*(void *)v1 + 376LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100636B10, 0LL, 0LL);
}

uint64_t sub_100636B10()
{
  uint64_t v1 = *(void *)(v0 + 376);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 200));
  if (v1) {
    return swift_task_switch(sub_100636C80, *(void *)(v0 + 376), 0LL);
  }
  if (qword_10099B4F0 != -1) {
    swift_once(&qword_10099B4F0, sub_1004B82C0);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = sub_10000A720(v3, (uint64_t)qword_100A2AB30);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing BeaconKeyService!", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  uint64_t v8 = *(void *)(v0 + 344);

  unint64_t v9 = sub_100641B4C();
  uint64_t v10 = swift_allocError(&type metadata for ManagedCBPeripheralError, v9, 0LL, 0LL);
  _BYTE *v11 = 1;
  swift_willThrow(v10);
  sub_100018C68(v8, type metadata accessor for KeyGenerationBeaconInfo);
  uint64_t v13 = *(void *)(v0 + 312);
  uint64_t v12 = *(void *)(v0 + 320);
  swift_task_dealloc(*(void *)(v0 + 344));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100636C80()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 376) + 128LL);
  *(void *)(v0 + 384) = v1;
  if (v1)
  {
    swift_retain();
    uint64_t v2 = sub_100636CD4;
  }

  else
  {
    uint64_t v2 = sub_100637130;
  }

  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_100636CD4()
{
  uint64_t v1 = (uint64_t *)(*(void *)(v0 + 344) + *(int *)(*(void *)(v0 + 328) + 24LL));
  unint64_t v2 = v1[1];
  if (v2 >> 60 == 15)
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = 0LL;
    unint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    unint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    unint64_t v2 = 0LL;
    uint64_t v10 = 0LL;
    unint64_t v11 = 0LL;
    unint64_t v12 = 0xF000000000000000LL;
    unint64_t v13 = 0xF000000000000000LL;
  }

  else
  {
    uint64_t v9 = *v1;
    uint64_t v10 = v1[2];
    unint64_t v11 = v1[3];
    uint64_t v6 = v1[4];
    unint64_t v7 = v1[5];
    sub_10001736C(*v1, v1[1]);
    sub_10001736C(v10, v11);
    sub_100018BE4(v6, v7);
    PrivateKey.publicKey.getter(v9, v2);
    uint64_t v23 = v14;
    unint64_t v16 = v15;
    sub_10001736C(v9, v2);
    sub_10001736C(v10, v11);
    sub_100479D50( v9,  v2,  v10,  v11,  v6,  v7,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
    if (v7 >> 60 == 15)
    {
      uint64_t v3 = 0LL;
      uint64_t v4 = 0LL;
      unint64_t v5 = 0LL;
      uint64_t v6 = 0LL;
      unint64_t v7 = 0LL;
      unint64_t v12 = 0xF000000000000000LL;
    }

    else
    {
      sub_100479D50( v9,  v2,  v10,  v11,  v6,  v7,  (void (*)(void))sub_10001736C,  (uint64_t (*)(uint64_t, uint64_t))sub_100018BE4);
      sub_100018BE4(v6, v7);
      PrivateKey.publicKey.getter(v9, v2);
      uint64_t v3 = v17;
      unint64_t v12 = v18;
      sub_10001736C(v9, v2);
      sub_100479D50( v9,  v2,  v10,  v11,  v6,  v7,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
      uint64_t v4 = v9;
      unint64_t v5 = v2;
    }

    uint64_t v8 = v23;
    unint64_t v13 = v16;
  }

  *(void *)(v0 + 47_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v10;
  *(void *)(v0 + 480) = v11;
  *(void *)(v0 + 456) = v9;
  *(void *)(v0 + 464) = v2;
  *(void *)(v0 + 440) = v8;
  *(void *)(v0 + 448) = v13;
  *(void *)(v0 + 424) = v6;
  *(void *)(v0 + 43_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v7;
  *(void *)(v0 + 408) = v4;
  *(void *)(v0 + 4swift_weakDestroy(v0 + 16) = v5;
  *(void *)(v0 + 39_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v3;
  *(void *)(v0 + 400) = v12;
  uint64_t v19 = v10;
  uint64_t v20 = *(void *)(v0 + 384);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v3;
  *(void *)(v0 + 24) = v12;
  *(void *)(v0 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v4;
  *(void *)(v0 + 40) = v5;
  *(void *)(v0 + 48) = v6;
  *(void *)(v0 + 56) = v7;
  *(void *)(v0 + 64) = v8;
  *(void *)(v0 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v13;
  *(void *)(v0 + 80) = v9;
  *(void *)(v0 + 88) = v2;
  *(void *)(v0 + 96) = v19;
  *(void *)(v0 + 104) = v11;
  uint64_t v21 = (void *)swift_task_alloc(dword_1009A2E1C);
  *(void *)(v0 + 488) = v21;
  *uint64_t v21 = v0;
  v21[1] = sub_100636F40;
  return sub_100160EE0( v0 + 112,  *(void *)(v0 + 288),  v0 + 64,  v0 + 16,  *(_BYTE *)(v0 + 544),  *(void *)(v0 + 296),  v20,  4000LL);
}

uint64_t sub_100636F40()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 488);
  *(void *)(*v1 + 496) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 472);
    uint64_t v5 = *(void *)(v2 + 480);
    uint64_t v7 = *(void *)(v2 + 456);
    uint64_t v6 = *(void *)(v2 + 464);
    uint64_t v9 = *(void *)(v2 + 440);
    unint64_t v8 = *(void *)(v2 + 448);
    sub_100479D50( *(void *)(v2 + 392),  *(void *)(v2 + 400),  *(void *)(v2 + 408),  *(void *)(v2 + 416),  *(void *)(v2 + 424),  *(void *)(v2 + 432),  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_100016F9C);
    sub_100479D50( v9,  v8,  v7,  v6,  v4,  v5,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_100016F9C);
    uint64_t v10 = sub_1006372D0;
  }

  else
  {
    uint64_t v11 = *(void *)(v2 + 472);
    uint64_t v12 = *(void *)(v2 + 480);
    uint64_t v14 = *(void *)(v2 + 456);
    uint64_t v13 = *(void *)(v2 + 464);
    uint64_t v16 = *(void *)(v2 + 440);
    unint64_t v15 = *(void *)(v2 + 448);
    uint64_t v17 = *(void *)(v2 + 424);
    uint64_t v18 = *(void *)(v2 + 432);
    uint64_t v19 = *(void *)(v2 + 408);
    uint64_t v20 = *(void *)(v2 + 416);
    uint64_t v21 = *(void *)(v2 + 392);
    unint64_t v22 = *(void *)(v2 + 400);
    *(_BYTE *)(v2 + 545) = *(_BYTE *)(v2 + 112);
    __int128 v23 = *(_OWORD *)(v2 + 136);
    *(_OWORD *)(v2 + 504) = *(_OWORD *)(v2 + 120);
    *(_OWORD *)(v2 + 520) = v23;
    *(void *)(v2 + 536) = *(void *)(v2 + 152);
    sub_100479D50( v21,  v22,  v19,  v20,  v17,  v18,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_100016F9C);
    sub_100479D50( v16,  v15,  v14,  v13,  v11,  v12,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_100016F9C);
    uint64_t v10 = sub_10063707C;
  }

  return swift_task_switch(v10, 0LL, 0LL);
}

uint64_t sub_10063707C()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 545);
  uint64_t v2 = *(void *)(v0 + 344);
  swift_release();
  swift_release();
  sub_100018C68(v2, type metadata accessor for KeyGenerationBeaconInfo);
  uint64_t v3 = *(void *)(v0 + 536);
  __int128 v8 = *(_OWORD *)(v0 + 504);
  __int128 v9 = *(_OWORD *)(v0 + 520);
  uint64_t v4 = *(void *)(v0 + 312);
  uint64_t v5 = *(void *)(v0 + 320);
  uint64_t v6 = *(void *)(v0 + 280);
  swift_task_dealloc(*(void *)(v0 + 344));
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  *(void *)uint64_t v6 = v1;
  *(_OWORD *)(v6 + 8) = v8;
  *(_OWORD *)(v6 + 24) = v9;
  *(void *)(v6 + 40) = v3;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100637130()
{
  if (qword_10099B4F0 != -1) {
    swift_once(&qword_10099B4F0, sub_1004B82C0);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A2AB30);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Missing LTKGenerator!", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 344);

  unint64_t v7 = sub_100641B4C();
  uint64_t v8 = swift_allocError(&type metadata for ManagedCBPeripheralError, v7, 0LL, 0LL);
  _BYTE *v9 = 1;
  swift_willThrow(v8);
  swift_release();
  sub_100018C68(v6, type metadata accessor for KeyGenerationBeaconInfo);
  uint64_t v11 = *(void *)(v0 + 312);
  uint64_t v10 = *(void *)(v0 + 320);
  swift_task_dealloc(*(void *)(v0 + 344));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100637280()
{
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v1 = *(void *)(v0 + 320);
  swift_task_dealloc(*(void *)(v0 + 344));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006372D0()
{
  uint64_t v1 = *(void *)(v0 + 344);
  swift_release();
  swift_release();
  sub_100018C68(v1, type metadata accessor for KeyGenerationBeaconInfo);
  uint64_t v3 = *(void *)(v0 + 312);
  uint64_t v2 = *(void *)(v0 + 320);
  swift_task_dealloc(*(void *)(v0 + 344));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100637344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[118] = a4;
  v4[117] = a3;
  v4[116] = a2;
  v4[115] = a1;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  v4[119] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[120] = v6;
  v4[121] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009B9068);
  v4[122] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009AE460);
  v4[123] = v8;
  unint64_t v9 = (*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[124] = swift_task_alloc(v9);
  v4[125] = swift_task_alloc(v9);
  v4[126] = swift_task_alloc(v9);
  v4[127] = swift_task_alloc(v9);
  uint64_t v10 = sub_100004AEC(&qword_1009AA730);
  v4[128] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
  v4[129] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v4[130] = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[131] = swift_task_alloc(v13);
  v4[132] = swift_task_alloc(v13);
  v4[133] = swift_task_alloc(v13);
  v4[134] = swift_task_alloc(v13);
  v4[135] = swift_task_alloc(v13);
  v4[136] = swift_task_alloc(v13);
  v4[137] = swift_task_alloc(v13);
  uint64_t v14 = sub_100004AEC(&qword_10099FB70);
  v4[138] = swift_task_alloc((*(void *)(*(void *)(v14 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for ObservedAdvertisement(0LL);
  v4[139] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v4[140] = v16;
  unint64_t v17 = (*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[141] = swift_task_alloc(v17);
  v4[142] = swift_task_alloc(v17);
  v4[143] = swift_task_alloc(v17);
  v4[144] = swift_task_alloc(v17);
  v4[145] = swift_task_alloc(v17);
  uint64_t v18 = type metadata accessor for BeaconIdentifier(0LL);
  v4[146] = v18;
  unint64_t v19 = (*(void *)(*(void *)(v18 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[147] = swift_task_alloc(v19);
  v4[148] = swift_task_alloc(v19);
  v4[149] = swift_task_alloc(v19);
  v4[150] = swift_task_alloc(v19);
  v4[151] = swift_task_alloc(v19);
  v4[152] = swift_task_alloc(v19);
  v4[153] = swift_task_alloc(v19);
  v4[154] = swift_task_alloc(v19);
  return swift_task_switch(sub_1006375B8, 0LL, 0LL);
}

uint64_t sub_1006375B8()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 640, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 480, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 504))
  {
    sub_100012EC0((__int128 *)(v0 + 480), v0 + 400);
    sub_100012ED8((void *)(v0 + 400), *(void *)(v0 + 424));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C878 + dword_10099C878);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C87C);
    *(void *)(v0 + 1240) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1006376B8;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1006376B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1240LL);
  *(void *)(*(void *)v1 + 1248LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100637714, 0LL, 0LL);
}

uint64_t sub_100637714()
{
  uint64_t v1 = *(void *)(v0 + 1248);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 400));
  if (v1)
  {
    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 560, (uint64_t *)&unk_10099FA80);
    if (*(void *)(v0 + 584))
    {
      sub_100012EC0((__int128 *)(v0 + 560), v0 + 520);
      sub_100012ED8((void *)(v0 + 520), *(void *)(v0 + 544));
      unint64_t v39 = (uint64_t (*)(void))((char *)&dword_10099C8A8 + dword_10099C8A8);
      uint64_t v3 = (void *)swift_task_alloc(unk_10099C8AC);
      *(void *)(v0 + 1256) = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_100637A70;
      return v39();
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    if (qword_10099B4F0 != -1) {
      swift_once(&qword_10099B4F0, sub_1004B82C0);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A2AB30);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No ObservationStoreService available!", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    unint64_t v9 = sub_100641B4C();
    uint64_t v40 = swift_allocError(&type metadata for ManagedCBPeripheralError, v9, 0LL, 0LL);
    *uint64_t v10 = 1;
    swift_willThrow(v40);
    uint64_t v11 = *(void *)(v0 + 1232);
    uint64_t v12 = *(void *)(v0 + 1224);
    uint64_t v13 = *(void *)(v0 + 1216);
    uint64_t v14 = *(void *)(v0 + 1208);
    uint64_t v15 = *(void *)(v0 + 1200);
    uint64_t v16 = *(void *)(v0 + 1192);
    uint64_t v17 = *(void *)(v0 + 1184);
    uint64_t v18 = *(void *)(v0 + 1176);
    uint64_t v19 = *(void *)(v0 + 1160);
    uint64_t v20 = *(void *)(v0 + 1152);
    uint64_t v21 = *(void *)(v0 + 1144);
    uint64_t v22 = *(void *)(v0 + 1136);
    uint64_t v23 = *(void *)(v0 + 1128);
    uint64_t v24 = *(void *)(v0 + 1104);
    uint64_t v25 = *(void *)(v0 + 1096);
    uint64_t v26 = *(void *)(v0 + 1088);
    uint64_t v27 = *(void *)(v0 + 1080);
    uint64_t v28 = *(void *)(v0 + 1072);
    uint64_t v29 = *(void *)(v0 + 1064);
    uint64_t v30 = *(void *)(v0 + 1056);
    uint64_t v31 = *(void *)(v0 + 1048);
    uint64_t v32 = *(void *)(v0 + 1024);
    uint64_t v33 = *(void *)(v0 + 1016);
    uint64_t v34 = *(void *)(v0 + 1008);
    uint64_t v35 = *(void *)(v0 + 1000);
    uint64_t v36 = *(void *)(v0 + 992);
    uint64_t v37 = *(void *)(v0 + 976);
    uint64_t v38 = *(void *)(v0 + 968);
    sub_100018C68(v11, type metadata accessor for BeaconIdentifier);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  return result;
}

uint64_t sub_100637A70(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1256LL);
  *(void *)(*(void *)v1 + 1264LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100637ACC, 0LL, 0LL);
}

uint64_t sub_100637ACC()
{
  uint64_t v1 = *(void *)(v0 + 1264);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 520));
  if (v1) {
    return swift_task_switch(sub_100637DC8, *(void *)(v0 + 1264), 0LL);
  }
  if (qword_10099B4F0 != -1) {
    swift_once(&qword_10099B4F0, sub_1004B82C0);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = sub_10000A720(v3, (uint64_t)qword_100A2AB30);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing BeaconKeyService!", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  unint64_t v8 = sub_100641B4C();
  uint64_t v38 = swift_allocError(&type metadata for ManagedCBPeripheralError, v8, 0LL, 0LL);
  _BYTE *v9 = 1;
  swift_willThrow(v38);
  swift_release();
  uint64_t v10 = *(void *)(v0 + 1232);
  uint64_t v11 = *(void *)(v0 + 1224);
  uint64_t v12 = *(void *)(v0 + 1216);
  uint64_t v13 = *(void *)(v0 + 1208);
  uint64_t v14 = *(void *)(v0 + 1200);
  uint64_t v15 = *(void *)(v0 + 1192);
  uint64_t v16 = *(void *)(v0 + 1184);
  uint64_t v17 = *(void *)(v0 + 1176);
  uint64_t v18 = *(void *)(v0 + 1160);
  uint64_t v19 = *(void *)(v0 + 1152);
  uint64_t v20 = *(void *)(v0 + 1144);
  uint64_t v21 = *(void *)(v0 + 1136);
  uint64_t v22 = *(void *)(v0 + 1128);
  uint64_t v23 = *(void *)(v0 + 1104);
  uint64_t v24 = *(void *)(v0 + 1096);
  uint64_t v25 = *(void *)(v0 + 1088);
  uint64_t v26 = *(void *)(v0 + 1080);
  uint64_t v27 = *(void *)(v0 + 1072);
  uint64_t v28 = *(void *)(v0 + 1064);
  uint64_t v29 = *(void *)(v0 + 1056);
  uint64_t v30 = *(void *)(v0 + 1048);
  uint64_t v31 = *(void *)(v0 + 1024);
  uint64_t v32 = *(void *)(v0 + 1016);
  uint64_t v33 = *(void *)(v0 + 1008);
  uint64_t v34 = *(void *)(v0 + 1000);
  uint64_t v35 = *(void *)(v0 + 992);
  uint64_t v36 = *(void *)(v0 + 976);
  uint64_t v37 = *(void *)(v0 + 968);
  sub_100018C68(v10, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100637DC8()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 1264) + 128LL);
  *(void *)(v0 + 127_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v1;
  if (v1)
  {
    swift_retain();
    uint64_t v2 = sub_100637E1C;
  }

  else
  {
    uint64_t v2 = sub_1006383E0;
  }

  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_100637E1C()
{
  uint64_t v1 = *(void *)(v0 + 920);
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for KeyGenerationBeaconInfo(0LL) + 24));
  uint64_t v3 = *v2;
  *(void *)(v0 + 1280) = *v2;
  unint64_t v4 = v2[1];
  *(void *)(v0 + 1288) = v4;
  uint64_t v5 = v2[2];
  *(void *)(v0 + 1296) = v5;
  unint64_t v6 = v2[3];
  *(void *)(v0 + 1304) = v6;
  uint64_t v7 = v2[4];
  *(void *)(v0 + 131_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v7;
  unint64_t v8 = v2[5];
  *(void *)(v0 + 1320) = v8;
  if (v4 >> 60 == 15)
  {
    if (qword_10099B4F0 != -1) {
      swift_once(&qword_10099B4F0, sub_1004B82C0);
    }
    uint64_t v9 = *(void *)(v0 + 1232);
    uint64_t v10 = *(void *)(v0 + 1224);
    uint64_t v11 = type metadata accessor for Logger(0LL);
    sub_10000A720(v11, (uint64_t)qword_100A2AB30);
    uint64_t v12 = sub_10001DC4C(v9, v10, type metadata accessor for BeaconIdentifier);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.error.getter(v13);
    BOOL v15 = os_log_type_enabled(v13, v14);
    uint64_t v16 = *(void *)(v0 + 1224);
    if (v15)
    {
      uint64_t v17 = *(void *)(v0 + 952);
      uint64_t v18 = swift_slowAlloc(22LL, -1LL);
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      uint64_t v63 = v19;
      *(_DWORD *)uint64_t v18 = 141558275;
      *(void *)(v0 + 71_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 712, v0 + 720, v18 + 4, v18 + 12);
      *(_WORD *)(v18 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2081;
      uint64_t v20 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v64 = dispatch thunk of CustomStringConvertible.description.getter(v17, v20);
      unint64_t v65 = v21;
      v22._countAndFlagsBits = 47LL;
      v22._object = (void *)0xE100000000000000LL;
      String.append(_:)(v22);
      v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v17, v20);
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 704) = sub_1003F11D4(v64, v65, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 704, v0 + 712, v18 + 14, v18 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68(v16, type metadata accessor for BeaconIdentifier);
      _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "Missing keys from %{private,mask.hash}s",  (uint8_t *)v18,  0x16u);
      swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(*(void *)(v0 + 1224), type metadata accessor for BeaconIdentifier);
    }

    unint64_t v30 = sub_100641B4C();
    uint64_t v62 = swift_allocError(&type metadata for ManagedCBPeripheralError, v30, 0LL, 0LL);
    *uint64_t v31 = 2;
    swift_willThrow(v62);
    swift_release();
    swift_release();
    swift_release();
    uint64_t v32 = *(void *)(v0 + 1232);
    uint64_t v33 = *(void *)(v0 + 1224);
    uint64_t v34 = *(void *)(v0 + 1216);
    uint64_t v35 = *(void *)(v0 + 1208);
    uint64_t v36 = *(void *)(v0 + 1200);
    uint64_t v37 = *(void *)(v0 + 1192);
    uint64_t v38 = *(void *)(v0 + 1184);
    uint64_t v39 = *(void *)(v0 + 1176);
    uint64_t v40 = *(void *)(v0 + 1160);
    uint64_t v43 = *(void *)(v0 + 1152);
    uint64_t v44 = *(void *)(v0 + 1144);
    uint64_t v45 = *(void *)(v0 + 1136);
    uint64_t v46 = *(void *)(v0 + 1128);
    uint64_t v47 = *(void *)(v0 + 1104);
    uint64_t v48 = *(void *)(v0 + 1096);
    uint64_t v49 = *(void *)(v0 + 1088);
    uint64_t v50 = *(void *)(v0 + 1080);
    uint64_t v51 = *(void *)(v0 + 1072);
    uint64_t v52 = *(void *)(v0 + 1064);
    uint64_t v53 = *(void *)(v0 + 1056);
    uint64_t v54 = *(void *)(v0 + 1048);
    uint64_t v55 = *(void *)(v0 + 1024);
    uint64_t v56 = *(void *)(v0 + 1016);
    uint64_t v57 = *(void *)(v0 + 1008);
    uint64_t v58 = *(void *)(v0 + 1000);
    uint64_t v59 = *(void *)(v0 + 992);
    uint64_t v60 = *(void *)(v0 + 976);
    uint64_t v61 = *(void *)(v0 + 968);
    sub_100018C68(v32, type metadata accessor for BeaconIdentifier);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    sub_10001736C(v3, v4);
    sub_10001736C(v5, v6);
    sub_100018BE4(v7, v8);
    PrivateKey.publicKey.getter(v3, v4);
    *(void *)(v0 + 1328) = v24;
    *(void *)(v0 + 1336) = v25;
    *(void *)(v0 + 208) = v24;
    *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = v25;
    *(void *)(v0 + 224) = v3;
    *(void *)(v0 + 23_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v4;
    *(void *)(v0 + 240) = v5;
    *(void *)(v0 + 248) = v6;
    if (v8 >> 60 == 15)
    {
      sub_10001736C(v5, v6);
      uint64_t v26 = 0LL;
      uint64_t v27 = 0LL;
      unint64_t v28 = 0LL;
      uint64_t v7 = 0LL;
      unint64_t v8 = 0LL;
      unint64_t v29 = 0xF000000000000000LL;
    }

    else
    {
      sub_10001736C(v3, v4);
      sub_10001736C(v5, v6);
      sub_100018BE4(v7, v8);
      PrivateKey.publicKey.getter(v3, v4);
      uint64_t v27 = v3;
      unint64_t v28 = v4;
    }

    *(void *)(v0 + 1384) = v8;
    *(void *)(v0 + 1376) = v7;
    *(void *)(v0 + 1368) = v28;
    *(void *)(v0 + 1360) = v27;
    *(void *)(v0 + 135_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v29;
    *(void *)(v0 + 1344) = v26;
    *(void *)(v0 + 160) = v26;
    *(void *)(v0 + 168) = v29;
    *(void *)(v0 + 176) = v27;
    *(void *)(v0 + 184) = v28;
    *(void *)(v0 + 19_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v7;
    *(void *)(v0 + 200) = v8;
    sub_10001736C(v3, v4);
    unint64_t v42 = (void *)swift_task_alloc(dword_1009BCD4C);
    *(void *)(v0 + 139_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v42;
    *unint64_t v42 = v0;
    v42[1] = sub_1006386A8;
    return sub_1006D544C(*(void *)(v0 + 1104), *(void *)(v0 + 1232));
  }

uint64_t sub_1006383E0()
{
  if (qword_10099B4F0 != -1) {
    swift_once(&qword_10099B4F0, sub_1004B82C0);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A2AB30);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Missing LTKGenerator!", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  unint64_t v6 = sub_100641B4C();
  uint64_t v37 = swift_allocError(&type metadata for ManagedCBPeripheralError, v6, 0LL, 0LL);
  *uint64_t v7 = 1;
  swift_willThrow(v37);
  swift_release();
  swift_release();
  uint64_t v8 = *(void *)(v0 + 1232);
  uint64_t v9 = *(void *)(v0 + 1224);
  uint64_t v10 = *(void *)(v0 + 1216);
  uint64_t v11 = *(void *)(v0 + 1208);
  uint64_t v12 = *(void *)(v0 + 1200);
  uint64_t v13 = *(void *)(v0 + 1192);
  uint64_t v14 = *(void *)(v0 + 1184);
  uint64_t v15 = *(void *)(v0 + 1176);
  uint64_t v16 = *(void *)(v0 + 1160);
  uint64_t v18 = *(void *)(v0 + 1152);
  uint64_t v19 = *(void *)(v0 + 1144);
  uint64_t v20 = *(void *)(v0 + 1136);
  uint64_t v21 = *(void *)(v0 + 1128);
  uint64_t v22 = *(void *)(v0 + 1104);
  uint64_t v23 = *(void *)(v0 + 1096);
  uint64_t v24 = *(void *)(v0 + 1088);
  uint64_t v25 = *(void *)(v0 + 1080);
  uint64_t v26 = *(void *)(v0 + 1072);
  uint64_t v27 = *(void *)(v0 + 1064);
  uint64_t v28 = *(void *)(v0 + 1056);
  uint64_t v29 = *(void *)(v0 + 1048);
  uint64_t v30 = *(void *)(v0 + 1024);
  uint64_t v31 = *(void *)(v0 + 1016);
  uint64_t v32 = *(void *)(v0 + 1008);
  uint64_t v33 = *(void *)(v0 + 1000);
  uint64_t v34 = *(void *)(v0 + 992);
  uint64_t v35 = *(void *)(v0 + 976);
  uint64_t v36 = *(void *)(v0 + 968);
  sub_100018C68(v8, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006386A8()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1392LL);
  *(void *)(*(void *)v1 + 140Hasher.init(_seed:)(v7, 0LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100639B08;
  }
  else {
    uint64_t v3 = sub_10063870C;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10063870C()
{
  uint64_t v1 = v0 + 160;
  uint64_t v2 = (__int128 *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 1104);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 1120) + 48LL))( v3,  1LL,  *(void *)(v0 + 1112)) == 1)
  {
    sub_100015794(v3, &qword_10099FB70);
    if (qword_10099B4F0 != -1) {
      swift_once(&qword_10099B4F0, sub_1004B82C0);
    }
    uint64_t v4 = *(void *)(v0 + 1232);
    uint64_t v5 = *(void *)(v0 + 1216);
    uint64_t v6 = type metadata accessor for Logger(0LL);
    sub_10000A720(v6, (uint64_t)qword_100A2AB30);
    uint64_t v7 = sub_10001DC4C(v4, v5, type metadata accessor for BeaconIdentifier);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.default.getter(v8);
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void *)(v0 + 1216);
    if (v10)
    {
      uint64_t v12 = *(void *)(v0 + 952);
      uint64_t v13 = swift_slowAlloc(22LL, -1LL);
      uint64_t v162 = swift_slowAlloc(32LL, -1LL);
      uint64_t v170 = v162;
      *(_DWORD *)uint64_t v13 = 141558275;
      *(void *)(v0 + 664) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 664, v0 + 672, v13 + 4, v13 + 12);
      *(_WORD *)(v13 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2081;
      uint64_t v14 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v171 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
      unint64_t v172 = v15;
      v16._countAndFlagsBits = 47LL;
      v16._object = (void *)0xE100000000000000LL;
      String.append(_:)(v16);
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
      String.append(_:)(v17);
      uint64_t v1 = v0 + 160;
      uint64_t v2 = (__int128 *)(v0 + 208);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 67_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = sub_1003F11D4(v171, v172, &v170);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 672, v0 + 680, v13 + 14, v13 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68(v11, type metadata accessor for BeaconIdentifier);
      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "No observed advertisement for beacon %{private,mask.hash}s.",  (uint8_t *)v13,  0x16u);
      swift_arrayDestroy(v162, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v162, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(*(void *)(v0 + 1216), type metadata accessor for BeaconIdentifier);
    }

    uint64_t v30 = (void *)swift_task_alloc(dword_1009B9074);
    *(void *)(v0 + 1688) = v30;
    *uint64_t v30 = v0;
    v30[1] = sub_10063EBEC;
    return sub_10063F1A4( *(void *)(v0 + 920),  v2,  v1,  *(void *)(v0 + 928),  *(void *)(v0 + 936),  *(void *)(v0 + 944));
  }

  else
  {
    sub_10002218C(v3, *(void *)(v0 + 1160), type metadata accessor for ObservedAdvertisement);
    if (qword_10099B4F0 != -1) {
      swift_once(&qword_10099B4F0, sub_1004B82C0);
    }
    uint64_t v163 = v0 + 696;
    uint64_t v18 = *(void *)(v0 + 1160);
    uint64_t v19 = *(void *)(v0 + 1152);
    uint64_t v20 = type metadata accessor for Logger(0LL);
    *(void *)(v0 + 1408) = sub_10000A720(v20, (uint64_t)qword_100A2AB30);
    uint64_t v21 = sub_10001DC4C(v18, v19, type metadata accessor for ObservedAdvertisement);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.default.getter(v22);
    BOOL v24 = os_log_type_enabled(v22, v23);
    uint64_t v25 = *(void *)(v0 + 1152);
    uint64_t v166 = v0 + 160;
    if (v24)
    {
      uint64_t v26 = swift_slowAlloc(22LL, -1LL);
      uint64_t v27 = swift_slowAlloc(32LL, -1LL);
      uint64_t v171 = v27;
      *(_DWORD *)uint64_t v26 = 141558275;
      *(void *)(v0 + 904) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 904, v0 + 912, v26 + 4, v26 + 12);
      *(_WORD *)(v26 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2081;
      sub_1000A869C();
      *(void *)(v0 + 91_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = sub_1003F11D4(v28, v29, &v171);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 912, v0 + 920, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68(v25, type metadata accessor for ObservedAdvertisement);
      _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "Found observed advertisement %{private,mask.hash}s.",  (uint8_t *)v26,  0x16u);
      swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(v25, type metadata accessor for ObservedAdvertisement);
    }

    uint64_t v32 = *(void *)(v0 + 1040);
    uint64_t v33 = *(void *)(v0 + 1032);
    uint64_t v34 = *(void *)(v0 + 1024);
    sub_10001581C(*(void *)(v0 + 1160) + *(int *)(*(void *)(v0 + 1112) + 52LL), v34, &qword_1009AA730);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v34, 1LL, v33) == 1)
    {
      uint64_t v35 = *(void *)(v0 + 1232);
      uint64_t v36 = *(void *)(v0 + 1208);
      sub_100015794(*(void *)(v0 + 1024), &qword_1009AA730);
      uint64_t v37 = sub_10001DC4C(v35, v36, type metadata accessor for BeaconIdentifier);
      uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
      os_log_type_t v39 = static os_log_type_t.error.getter(v38);
      BOOL v40 = os_log_type_enabled(v38, v39);
      uint64_t v41 = *(void *)(v0 + 1208);
      if (v40)
      {
        uint64_t v42 = *(void *)(v0 + 952);
        uint64_t v43 = swift_slowAlloc(22LL, -1LL);
        uint64_t v44 = swift_slowAlloc(32LL, -1LL);
        uint64_t v170 = v44;
        *(_DWORD *)uint64_t v43 = 141558275;
        *(void *)(v0 + 680) = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 680, v0 + 688, v43 + 4, v43 + 12);
        *(_WORD *)(v43 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2081;
        uint64_t v45 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v171 = dispatch thunk of CustomStringConvertible.description.getter(v42, v45);
        unint64_t v172 = v46;
        v47._countAndFlagsBits = 47LL;
        v47._object = (void *)0xE100000000000000LL;
        String.append(_:)(v47);
        v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v42, v45);
        String.append(_:)(v48);
        swift_bridgeObjectRelease();
        *(void *)(v0 + 688) = sub_1003F11D4(v171, v172, &v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 688, v163, v43 + 14, v43 + 22);
        swift_bridgeObjectRelease();
        sub_100018C68(v41, type metadata accessor for BeaconIdentifier);
        _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "Missing beaconIndexInformation for %{private,mask.hash}s!",  (uint8_t *)v43,  0x16u);
        swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v44, -1LL, -1LL);
        swift_slowDealloc(v43, -1LL, -1LL);
      }

      else
      {
        sub_100018C68(*(void *)(v0 + 1208), type metadata accessor for BeaconIdentifier);
      }

      uint64_t v69 = (void *)swift_task_alloc(dword_1009B9074);
      *(void *)(v0 + 1664) = v69;
      void *v69 = v0;
      v69[1] = sub_10063E5DC;
      return sub_10063F1A4( *(void *)(v0 + 920),  (__int128 *)(v0 + 208),  v166,  *(void *)(v0 + 928),  *(void *)(v0 + 936),  *(void *)(v0 + 944));
    }

    else
    {
      uint64_t v49 = *(void *)(v0 + 1160);
      uint64_t v50 = *(void *)(v0 + 1144);
      uint64_t v51 = *(void *)(v0 + 1096);
      uint64_t v52 = *(void *)(v0 + 1088);
      uint64_t v53 = *(void *)(v0 + 1080);
      uint64_t v54 = *(void *)(v0 + 1072);
      sub_10002218C( *(void *)(v0 + 1024),  v51,  type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      sub_10001DC4C(v51, v52, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      sub_10001DC4C(v51, v53, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      sub_10001DC4C(v51, v54, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      uint64_t v55 = sub_10001DC4C(v49, v50, type metadata accessor for ObservedAdvertisement);
      uint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
      os_log_type_t v57 = static os_log_type_t.default.getter(v56);
      if (os_log_type_enabled(v56, v57))
      {
        os_log_type_t v157 = v57;
        log = v56;
        uint64_t v58 = *(void *)(v0 + 1088);
        uint64_t v59 = *(void *)(v0 + 1080);
        uint64_t v154 = v0 + 888;
        uint64_t v155 = v0 + 896;
        uint64_t v153 = *(void *)(v0 + 1072);
        uint64_t v60 = *(void *)(v0 + 1032);
        uint64_t v61 = *(void *)(v0 + 952);
        uint64_t v62 = swift_slowAlloc(62LL, -1LL);
        uint64_t v156 = swift_slowAlloc(96LL, -1LL);
        uint64_t v171 = v156;
        *(_DWORD *)uint64_t v62 = 141559299;
        *(void *)(v0 + 856) = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 856, v0 + 864, v62 + 4, v62 + 12);
        *(_WORD *)(v62 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2081;
        uint64_t v63 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v64 = dispatch thunk of CustomStringConvertible.description.getter(v61, v63);
        *(void *)(v0 + 864) = sub_1003F11D4(v64, v65, &v171);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 864, v0 + 872, v62 + 14, v62 + 22);
        swift_bridgeObjectRelease();
        sub_100018C68(v58, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        *(_WORD *)(v62 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2048;
        uint64_t v66 = *(void *)(v59 + *(int *)(v60 + 24));
        sub_100018C68(v59, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        *(void *)(v0 + 87_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v66;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 872, v0 + 880, v62 + 24, v62 + 32);
        *(_WORD *)(v62 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2082;
        if (*(_BYTE *)(v153 + *(int *)(v60 + 20)))
        {
          if (*(_BYTE *)(v153 + *(int *)(v60 + 20)) == 1)
          {
            uint64_t v67 = 0x61646E6F6365732ELL;
            unint64_t v68 = 0xEA00000000007972LL;
          }

          else
          {
            unint64_t v68 = 0x80000001008533C0LL;
            uint64_t v67 = 0xD000000000000010LL;
          }
        }

        else
        {
          uint64_t v67 = 0x7972616D6972702ELL;
          unint64_t v68 = 0xE800000000000000LL;
        }

        uint64_t v74 = *(void *)(v0 + 1144);
        uint64_t v75 = *(void *)(v0 + 1072);
        *(void *)(v0 + 880) = sub_1003F11D4(v67, v68, &v171);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 880, v154, v62 + 34, v62 + 42);
        swift_bridgeObjectRelease();
        sub_100018C68(v75, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        *(_WORD *)(v62 + 4_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2160;
        *(void *)(v0 + 888) = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v154, v155, v62 + 44, v62 + 52);
        *(_WORD *)(v62 + 5_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2081;
        uint64_t v76 = *(void *)(v74 + 16);
        uint64_t v77 = *(void *)(v74 + 24);
        sub_10008699C(v76, v77);
        uint64_t v78 = sub_1000AFD00(v76, v77);
        unint64_t v80 = v79;
        sub_1000869A4(v76, v77);
        *(void *)(v0 + 896) = sub_1003F11D4(v78, v80, &v171);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v155, v0 + 904, v62 + 54, v62 + 62);
        swift_bridgeObjectRelease();
        sub_100018C68(v74, type metadata accessor for ObservedAdvertisement);
        _os_log_impl( (void *)&_mh_execute_header,  log,  v157,  "Last observed beacon: %{private,mask.hash}s, index: %llu, sequence: %{public}s, advertisement: %{private,mask.hash}s.",  (uint8_t *)v62,  0x3Eu);
        swift_arrayDestroy(v156, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v156, -1LL, -1LL);
        swift_slowDealloc(v62, -1LL, -1LL);

        uint64_t v73 = (__int128 *)(v0 + 208);
      }

      else
      {
        uint64_t v70 = *(void *)(v0 + 1144);
        uint64_t v71 = *(void *)(v0 + 1088);
        uint64_t v72 = *(void *)(v0 + 1072);
        sub_100018C68(*(void *)(v0 + 1080), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        sub_100018C68(v71, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        sub_100018C68(v72, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        sub_100018C68(v70, type metadata accessor for ObservedAdvertisement);

        uint64_t v73 = (__int128 *)(v0 + 208);
      }

      uint64_t v81 = *(void *)(v0 + 1096);
      uint64_t v82 = *(void *)(v0 + 1032);
      uint64_t v83 = *(int *)(v82 + 20);
      *(_DWORD *)(v0 + 171_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v83;
      int v84 = *(unsigned __int8 *)(v81 + v83);
      if (*(_BYTE *)(v81 + v83) && v84 != 1)
      {
        uint64_t v101 = sub_10001DC4C( v81,  *(void *)(v0 + 1064),  type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        double v102 = (os_log_s *)Logger.logObject.getter(v101);
        os_log_type_t v103 = static os_log_type_t.error.getter(v102);
        BOOL v104 = os_log_type_enabled(v102, v103);
        uint64_t v105 = *(void *)(v0 + 1064);
        if (v104)
        {
          uint64_t v106 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v107 = swift_slowAlloc(32LL, -1LL);
          uint64_t v171 = v107;
          *(_DWORD *)uint64_t v106 = 136446210;
          if (*(_BYTE *)(v105 + *(int *)(v82 + 20)))
          {
            if (*(_BYTE *)(v105 + *(int *)(v82 + 20)) == 1)
            {
              uint64_t v108 = 0x61646E6F6365732ELL;
              unint64_t v109 = 0xEA00000000007972LL;
            }

            else
            {
              unint64_t v109 = 0x80000001008533C0LL;
              uint64_t v108 = 0xD000000000000010LL;
            }
          }

          else
          {
            uint64_t v108 = 0x7972616D6972702ELL;
            unint64_t v109 = 0xE800000000000000LL;
          }

          uint64_t v151 = *(void *)(v0 + 1064);
          *(void *)(v0 + 696) = sub_1003F11D4(v108, v109, &v171);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v163, v0 + 704, v106 + 4, v106 + 12);
          swift_bridgeObjectRelease();
          sub_100018C68(v151, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
          _os_log_impl((void *)&_mh_execute_header, v102, v103, "Invalid key sequence %{public}s", v106, 0xCu);
          swift_arrayDestroy(v107, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v107, -1LL, -1LL);
          swift_slowDealloc(v106, -1LL, -1LL);
        }

        else
        {
          sub_100018C68(*(void *)(v0 + 1064), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        }

        os_log_type_t v152 = (void *)swift_task_alloc(dword_1009B9074);
        *(void *)(v0 + 1640) = v152;
        *os_log_type_t v152 = v0;
        v152[1] = sub_10063DF94;
        return sub_10063F1A4( *(void *)(v0 + 920),  v73,  v166,  *(void *)(v0 + 928),  *(void *)(v0 + 936),  *(void *)(v0 + 944));
      }

      else
      {
        uint64_t v169 = v83;
        *(_BYTE *)(v0 + 1720) = v84;
        uint64_t v85 = *(void *)(v0 + 1160);
        uint64_t v86 = *(void *)(v0 + 1232);
        if ((*(_BYTE *)(v85 + 35) & 1) != 0)
        {
          uint64_t v87 = *(void *)(v0 + 1192);
          uint64_t v168 = v81;
          sub_10001DC4C( v81,  *(void *)(v0 + 1056),  type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
          uint64_t v88 = sub_10001DC4C(v86, v87, type metadata accessor for BeaconIdentifier);
          uint64_t v89 = (os_log_s *)Logger.logObject.getter(v88);
          os_log_type_t v90 = static os_log_type_t.info.getter(v89);
          BOOL v91 = os_log_type_enabled(v89, v90);
          uint64_t v92 = *(void *)(v0 + 1192);
          if (v91)
          {
            uint64_t v93 = *(void *)(v0 + 1056);
            uint64_t v94 = *(void *)(v0 + 1032);
            os_log_t loga = *(os_log_t *)(v0 + 952);
            uint64_t v95 = swift_slowAlloc(32LL, -1LL);
            uint64_t v164 = swift_slowAlloc(32LL, -1LL);
            uint64_t v170 = v164;
            *(_DWORD *)uint64_t v95 = 134218499;
            uint64_t v96 = *(void *)(v93 + *(int *)(v94 + 24));
            sub_100018C68(v93, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
            *(void *)(v0 + 808) = v96;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 808, v0 + 816, v95 + 4, v95 + 12);
            *(_WORD *)(v95 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2160;
            *(void *)(v0 + 8swift_weakDestroy(v0 + 16) = 1752392040LL;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 816, v0 + 824, v95 + 14, v95 + 22);
            *(_WORD *)(v95 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2081;
            uint64_t v97 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            uint64_t v171 = dispatch thunk of CustomStringConvertible.description.getter(loga, v97);
            unint64_t v172 = v98;
            v99._countAndFlagsBits = 47LL;
            v99._object = (void *)0xE100000000000000LL;
            String.append(_:)(v99);
            v100._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(loga, v97);
            String.append(_:)(v100);
            swift_bridgeObjectRelease();
            *(void *)(v0 + 824) = sub_1003F11D4(v171, v172, &v170);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 824, v0 + 832, v95 + 24, v95 + 32);
            swift_bridgeObjectRelease();
            sub_100018C68(v92, type metadata accessor for BeaconIdentifier);
            _os_log_impl( (void *)&_mh_execute_header,  v89,  v90,  "Using last observed index %llu for beacon %{private,mask.hash}s",  (uint8_t *)v95,  0x20u);
            swift_arrayDestroy(v164, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v164, -1LL, -1LL);
            swift_slowDealloc(v95, -1LL, -1LL);
          }

          else
          {
            sub_100018C68( *(void *)(v0 + 1056),  type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
            sub_100018C68(v92, type metadata accessor for BeaconIdentifier);
          }

          unint64_t v127 = *(void *)(v0 + 1336);
          uint64_t v128 = *(void *)(v0 + 1328);
          unint64_t v129 = *(void *)(v0 + 1304);
          uint64_t v130 = *(void *)(v0 + 1296);
          unint64_t v131 = *(void *)(v0 + 1288);
          uint64_t v132 = *(void *)(v0 + 1280);
          uint64_t v161 = *(void *)(v0 + 1272);
          uint64_t v133 = *(void *)(v0 + 1096);
          uint64_t v134 = *(void *)(v0 + 1032);
          uint64_t v135 = sub_100004AEC((uint64_t *)&unk_1009B10E0);
          uint64_t v136 = swift_allocObject(v135, 80LL, 7LL);
          *(void *)(v0 + 159_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v136;
          *(_OWORD *)(v136 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
          *(void *)(v0 + swift_weakDestroy(v0 + 16) = v128;
          *(void *)(v0 + 24) = v127;
          *(void *)(v0 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v132;
          *(void *)(v0 + 40) = v131;
          *(void *)(v0 + 48) = v130;
          *(void *)(v0 + 56) = v129;
          uint64_t v137 = *(void *)(v133 + *(int *)(v134 + 24));
          LOBYTE(v134) = *(_BYTE *)(v168 + v169);
          sub_10001736C(v128, v127);
          sub_10001736C(v132, v131);
          sub_10001736C(v130, v129);
          double v138 = (void *)swift_task_alloc(dword_1009A2E1C);
          *(void *)(v0 + 1600) = v138;
          *double v138 = v0;
          v138[1] = sub_10063CEE0;
          return sub_100160EE0(v0 + 256, *(void *)(v0 + 1232), v0 + 16, v166, v134, v137, v161, 4000LL);
        }

        else
        {
          char v110 = *(_BYTE *)(v85 + 34);
          uint64_t v111 = *(void *)(v0 + 1200);
          uint64_t v112 = sub_100004AEC((uint64_t *)&unk_10099D740);
          uint64_t v113 = swift_allocObject(v112, 72LL, 7LL);
          *(_OWORD *)(v113 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
          *(void *)(v113 + 56) = &type metadata for UInt8;
          *(void *)(v113 + 64) = &protocol witness table for UInt8;
          char v167 = v110;
          *(_BYTE *)(v113 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v110;
          uint64_t v114 = String.init(format:_:)(1479684133LL, 0xE400000000000000LL, v113);
          unint64_t v116 = v115;
          sub_10001DC4C(v86, v111, type metadata accessor for BeaconIdentifier);
          swift_bridgeObjectRetain(v116);
          double v118 = (os_log_s *)Logger.logObject.getter(v117);
          os_log_type_t v119 = static os_log_type_t.info.getter(v118);
          BOOL v120 = os_log_type_enabled(v118, v119);
          uint64_t v121 = *(void *)(v0 + 1200);
          if (v120)
          {
            os_log_t logb = *(os_log_t *)(v0 + 952);
            uint64_t v122 = swift_slowAlloc(32LL, -1LL);
            uint64_t v165 = swift_slowAlloc(64LL, -1LL);
            uint64_t v170 = v165;
            *(_DWORD *)uint64_t v122 = 136446723;
            swift_bridgeObjectRetain(v116);
            *(void *)(v0 + 83_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = sub_1003F11D4(v114, v116, &v170);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 832, v0 + 840, v122 + 4, v122 + 12);
            swift_bridgeObjectRelease_n(v116, 3LL);
            *(_WORD *)(v122 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2160;
            *(void *)(v0 + 840) = 1752392040LL;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 840, v0 + 848, v122 + 14, v122 + 22);
            *(_WORD *)(v122 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2081;
            uint64_t v123 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            uint64_t v171 = dispatch thunk of CustomStringConvertible.description.getter(logb, v123);
            unint64_t v172 = v124;
            v125._countAndFlagsBits = 47LL;
            v125._object = (void *)0xE100000000000000LL;
            String.append(_:)(v125);
            v126._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(logb, v123);
            String.append(_:)(v126);
            swift_bridgeObjectRelease();
            *(void *)(v0 + 848) = sub_1003F11D4(v171, v172, &v170);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 848, v0 + 856, v122 + 24, v122 + 32);
            swift_bridgeObjectRelease();
            sub_100018C68(v121, type metadata accessor for BeaconIdentifier);
            _os_log_impl( (void *)&_mh_execute_header,  v118,  v119,  "Hint %{public}s is available for %{private,mask.hash}s",  (uint8_t *)v122,  0x20u);
            swift_arrayDestroy(v165, 2LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v165, -1LL, -1LL);
            swift_slowDealloc(v122, -1LL, -1LL);
          }

          else
          {
            swift_bridgeObjectRelease_n(v116, 2LL);
            sub_100018C68(v121, type metadata accessor for BeaconIdentifier);
          }

          unint64_t v139 = *(void *)(v0 + 1336);
          uint64_t v140 = *(void *)(v0 + 1328);
          unint64_t v141 = *(void *)(v0 + 1304);
          uint64_t v142 = *(void *)(v0 + 1296);
          unint64_t v143 = *(void *)(v0 + 1288);
          uint64_t v144 = *(void *)(v0 + 1280);
          uint64_t v145 = *(void *)(v0 + 1272);
          uint64_t v146 = *(void *)(v0 + 1096);
          uint64_t v147 = *(void *)(v0 + 1032);
          *(void *)(v0 + 64) = v140;
          *(void *)(v0 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v139;
          *(void *)(v0 + 80) = v144;
          *(void *)(v0 + 88) = v143;
          *(void *)(v0 + 96) = v142;
          *(void *)(v0 + 104) = v141;
          uint64_t v148 = *(void *)(v146 + *(int *)(v147 + 24));
          char v149 = *(_BYTE *)(v81 + v169);
          sub_10001736C(v140, v139);
          sub_10001736C(v144, v143);
          sub_10001736C(v142, v141);
          uint64_t v150 = (void *)swift_task_alloc(dword_1009A2E34);
          *(void *)(v0 + 14swift_weakDestroy(v0 + 16) = v150;
          *uint64_t v150 = v0;
          v150[1] = sub_100639DA8;
          return sub_1001624C8(*(void *)(v0 + 1232), v0 + 64, v149, v148, v167, v145, 4000LL);
        }
      }
    }
  }

uint64_t sub_100639B08()
{
  unint64_t v1 = *(void *)(v0 + 1336);
  uint64_t v2 = *(void *)(v0 + 1328);
  uint64_t v34 = *(void *)(v0 + 1312);
  unint64_t v3 = *(void *)(v0 + 1304);
  uint64_t v4 = *(void *)(v0 + 1296);
  unint64_t v5 = *(void *)(v0 + 1288);
  uint64_t v6 = *(void *)(v0 + 1280);
  uint64_t v37 = *(void *)(v0 + 1320);
  sub_100479D50( *(void *)(v0 + 1344),  *(void *)(v0 + 1352),  *(void *)(v0 + 1360),  *(void *)(v0 + 1368),  *(void *)(v0 + 1376),  *(void *)(v0 + 1384),  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100016F9C(v2, v1);
  sub_100016F9C(v6, v5);
  sub_100016F9C(v4, v3);
  swift_release();
  swift_release();
  sub_100479D50( v6,  v5,  v4,  v3,  v34,  v37,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
  swift_release();
  uint64_t v7 = *(void *)(v0 + 1232);
  uint64_t v8 = *(void *)(v0 + 1224);
  uint64_t v9 = *(void *)(v0 + 1216);
  uint64_t v10 = *(void *)(v0 + 1208);
  uint64_t v11 = *(void *)(v0 + 1200);
  uint64_t v12 = *(void *)(v0 + 1192);
  uint64_t v13 = *(void *)(v0 + 1184);
  uint64_t v14 = *(void *)(v0 + 1176);
  uint64_t v15 = *(void *)(v0 + 1160);
  uint64_t v17 = *(void *)(v0 + 1152);
  uint64_t v18 = *(void *)(v0 + 1144);
  uint64_t v19 = *(void *)(v0 + 1136);
  uint64_t v20 = *(void *)(v0 + 1128);
  uint64_t v21 = *(void *)(v0 + 1104);
  uint64_t v22 = *(void *)(v0 + 1096);
  uint64_t v23 = *(void *)(v0 + 1088);
  uint64_t v24 = *(void *)(v0 + 1080);
  uint64_t v25 = *(void *)(v0 + 1072);
  uint64_t v26 = *(void *)(v0 + 1064);
  uint64_t v27 = *(void *)(v0 + 1056);
  uint64_t v28 = *(void *)(v0 + 1048);
  uint64_t v29 = *(void *)(v0 + 1024);
  uint64_t v30 = *(void *)(v0 + 1016);
  uint64_t v31 = *(void *)(v0 + 1008);
  uint64_t v32 = *(void *)(v0 + 1000);
  uint64_t v33 = *(void *)(v0 + 992);
  uint64_t v35 = *(void *)(v0 + 976);
  uint64_t v36 = *(void *)(v0 + 968);
  sub_100018C68(v7, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100639DA8(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 1416LL);
  *(void *)(*(void *)v2 + 1424LL) = v1;
  swift_task_dealloc(v5);
  unint64_t v6 = v4[167];
  uint64_t v7 = v4[166];
  unint64_t v8 = v4[163];
  uint64_t v9 = v4[162];
  unint64_t v10 = v4[161];
  uint64_t v11 = v4[160];
  if (v1)
  {
    sub_100016F9C(v7, v6);
    sub_100016F9C(v11, v10);
    sub_100016F9C(v9, v8);
    uint64_t v12 = sub_100639F80;
  }

  else
  {
    v4[179] = a1;
    sub_100016F9C(v7, v6);
    sub_100016F9C(v11, v10);
    sub_100016F9C(v9, v8);
    uint64_t v12 = sub_100639E7C;
  }

  return swift_task_switch(v12, 0LL, 0LL);
}

uint64_t sub_100639E7C()
{
  *(void *)(v0 + 1440) = *(void *)(v0 + 1432);
  uint64_t v1 = *(int *)(v0 + 1712);
  unint64_t v2 = *(void *)(v0 + 1336);
  uint64_t v3 = *(void *)(v0 + 1328);
  unint64_t v4 = *(void *)(v0 + 1304);
  uint64_t v5 = *(void *)(v0 + 1296);
  unint64_t v6 = *(void *)(v0 + 1288);
  uint64_t v7 = *(void *)(v0 + 1280);
  uint64_t v8 = *(void *)(v0 + 1272);
  uint64_t v9 = *(void *)(v0 + 1096);
  *(void *)(v0 + 11_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v3;
  uint64_t v10 = *(void *)(v0 + 1032);
  *(void *)(v0 + 120) = v2;
  *(void *)(v0 + 128) = v7;
  *(void *)(v0 + 136) = v6;
  *(void *)(v0 + 144) = v5;
  *(void *)(v0 + 15_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v4;
  uint64_t v11 = *(int *)(v10 + 24);
  char v12 = *(_BYTE *)(v9 + v1);
  *(_DWORD *)(v0 + 17swift_weakDestroy(v0 + 16) = v11;
  uint64_t v13 = *(void *)(v9 + v11);
  sub_10001736C(v3, v2);
  sub_10001736C(v7, v6);
  sub_10001736C(v5, v4);
  uint64_t v14 = (void *)swift_task_alloc(dword_1009A2E1C);
  *(void *)(v0 + 1448) = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_10063A268;
  return sub_100160EE0(v0 + 352, *(void *)(v0 + 1232), v0 + 112, v0 + 160, v12, v13, v8, 4000LL);
}

uint64_t sub_100639F80()
{
  uint64_t v43 = *(void *)(v0 + 1376);
  uint64_t v45 = *(void *)(v0 + 1384);
  uint64_t v41 = *(void *)(v0 + 1368);
  uint64_t v37 = *(void *)(v0 + 1360);
  uint64_t v33 = *(void *)(v0 + 1344);
  unint64_t v35 = *(void *)(v0 + 1352);
  unint64_t v29 = *(void *)(v0 + 1336);
  uint64_t v1 = *(void *)(v0 + 1328);
  uint64_t v2 = *(void *)(v0 + 1320);
  uint64_t v3 = *(void *)(v0 + 1312);
  unint64_t v4 = *(void *)(v0 + 1304);
  uint64_t v5 = *(void *)(v0 + 1296);
  unint64_t v6 = *(void *)(v0 + 1288);
  uint64_t v7 = *(void *)(v0 + 1280);
  uint64_t v39 = *(void *)(v0 + 1160);
  uint64_t v31 = *(void *)(v0 + 1096);
  swift_release();
  swift_release();
  swift_release();
  sub_100479D50( v7,  v6,  v5,  v4,  v3,  v2,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
  sub_100016F9C(v1, v29);
  sub_100016F9C(v7, v6);
  sub_100016F9C(v5, v4);
  sub_100479D50( v33,  v35,  v37,  v41,  v43,  v45,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100018C68(v31, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100018C68(v39, type metadata accessor for ObservedAdvertisement);
  uint64_t v8 = *(void *)(v0 + 1232);
  uint64_t v9 = *(void *)(v0 + 1224);
  uint64_t v10 = *(void *)(v0 + 1216);
  uint64_t v11 = *(void *)(v0 + 1208);
  uint64_t v12 = *(void *)(v0 + 1200);
  uint64_t v13 = *(void *)(v0 + 1192);
  uint64_t v14 = *(void *)(v0 + 1184);
  uint64_t v15 = *(void *)(v0 + 1176);
  uint64_t v16 = *(void *)(v0 + 1160);
  uint64_t v18 = *(void *)(v0 + 1152);
  uint64_t v19 = *(void *)(v0 + 1144);
  uint64_t v20 = *(void *)(v0 + 1136);
  uint64_t v21 = *(void *)(v0 + 1128);
  uint64_t v22 = *(void *)(v0 + 1104);
  uint64_t v23 = *(void *)(v0 + 1096);
  uint64_t v24 = *(void *)(v0 + 1088);
  uint64_t v25 = *(void *)(v0 + 1080);
  uint64_t v26 = *(void *)(v0 + 1072);
  uint64_t v27 = *(void *)(v0 + 1064);
  uint64_t v28 = *(void *)(v0 + 1056);
  uint64_t v30 = *(void *)(v0 + 1048);
  uint64_t v32 = *(void *)(v0 + 1024);
  uint64_t v34 = *(void *)(v0 + 1016);
  uint64_t v36 = *(void *)(v0 + 1008);
  uint64_t v38 = *(void *)(v0 + 1000);
  uint64_t v40 = *(void *)(v0 + 992);
  uint64_t v42 = *(void *)(v0 + 976);
  uint64_t v44 = *(void *)(v0 + 968);
  sub_100018C68(v8, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10063A268()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 1448LL);
  *(void *)(*(void *)v1 + 1456LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    unint64_t v4 = v2[167];
    uint64_t v5 = v2[166];
    unint64_t v6 = v2[163];
    uint64_t v7 = v2[162];
    unint64_t v8 = v2[161];
    uint64_t v9 = v2[160];
    swift_bridgeObjectRelease();
    sub_100016F9C(v5, v4);
    sub_100016F9C(v9, v8);
    sub_100016F9C(v7, v6);
    uint64_t v10 = sub_10063A488;
  }

  else
  {
    unint64_t v11 = v2[163];
    uint64_t v12 = v2[162];
    unint64_t v13 = v2[161];
    uint64_t v14 = v2[160];
    sub_100016F9C(v2[166], v2[167]);
    sub_100016F9C(v14, v13);
    sub_100016F9C(v12, v11);
    uint64_t v10 = sub_10063A354;
  }

  return swift_task_switch(v10, 0LL, 0LL);
}

uint64_t sub_10063A354()
{
  uint64_t v1 = v0[180];
  uint64_t v2 = v0[154];
  uint64_t v3 = swift_task_alloc(32LL);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v2;
  *(void *)(v3 + 24) = v0 + 44;
  swift_bridgeObjectRetain(v1);
  v0[183] = (uint64_t)sub_10063255C((void (*)(uint64_t *__return_ptr, _BYTE *))sub_100641C90, v3, v1);
  swift_bridgeObjectRelease();
  swift_task_dealloc(v3);
  unint64_t v4 = (uint64_t **)swift_task_alloc(dword_1009B907C);
  v0[184] = (uint64_t)v4;
  void *v4 = v0;
  v4[1] = (uint64_t *)sub_10063A410;
  return sub_100640EE0(v0[127], v0[115]);
}

uint64_t sub_10063A410()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1472LL);
  *(void *)(*(void *)v1 + 148Hasher.init(_seed:)(v7, 0LL) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = sub_10063B358;
  }

  else
  {
    uint64_t v3 = sub_10063A770;
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10063A488()
{
  uint64_t v43 = *(void *)(v0 + 1376);
  uint64_t v45 = *(void *)(v0 + 1384);
  uint64_t v41 = *(void *)(v0 + 1368);
  uint64_t v37 = *(void *)(v0 + 1360);
  uint64_t v33 = *(void *)(v0 + 1344);
  unint64_t v35 = *(void *)(v0 + 1352);
  unint64_t v29 = *(void *)(v0 + 1336);
  uint64_t v1 = *(void *)(v0 + 1328);
  uint64_t v2 = *(void *)(v0 + 1320);
  uint64_t v3 = *(void *)(v0 + 1312);
  unint64_t v4 = *(void *)(v0 + 1304);
  uint64_t v5 = *(void *)(v0 + 1296);
  unint64_t v6 = *(void *)(v0 + 1288);
  uint64_t v7 = *(void *)(v0 + 1280);
  uint64_t v39 = *(void *)(v0 + 1160);
  uint64_t v31 = *(void *)(v0 + 1096);
  swift_release();
  swift_release();
  swift_release();
  sub_100479D50( v7,  v6,  v5,  v4,  v3,  v2,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
  sub_100016F9C(v1, v29);
  sub_100016F9C(v7, v6);
  sub_100016F9C(v5, v4);
  sub_100479D50( v33,  v35,  v37,  v41,  v43,  v45,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100018C68(v31, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100018C68(v39, type metadata accessor for ObservedAdvertisement);
  uint64_t v8 = *(void *)(v0 + 1232);
  uint64_t v9 = *(void *)(v0 + 1224);
  uint64_t v10 = *(void *)(v0 + 1216);
  uint64_t v11 = *(void *)(v0 + 1208);
  uint64_t v12 = *(void *)(v0 + 1200);
  uint64_t v13 = *(void *)(v0 + 1192);
  uint64_t v14 = *(void *)(v0 + 1184);
  uint64_t v15 = *(void *)(v0 + 1176);
  uint64_t v16 = *(void *)(v0 + 1160);
  uint64_t v18 = *(void *)(v0 + 1152);
  uint64_t v19 = *(void *)(v0 + 1144);
  uint64_t v20 = *(void *)(v0 + 1136);
  uint64_t v21 = *(void *)(v0 + 1128);
  uint64_t v22 = *(void *)(v0 + 1104);
  uint64_t v23 = *(void *)(v0 + 1096);
  uint64_t v24 = *(void *)(v0 + 1088);
  uint64_t v25 = *(void *)(v0 + 1080);
  uint64_t v26 = *(void *)(v0 + 1072);
  uint64_t v27 = *(void *)(v0 + 1064);
  uint64_t v28 = *(void *)(v0 + 1056);
  uint64_t v30 = *(void *)(v0 + 1048);
  uint64_t v32 = *(void *)(v0 + 1024);
  uint64_t v34 = *(void *)(v0 + 1016);
  uint64_t v36 = *(void *)(v0 + 1008);
  uint64_t v38 = *(void *)(v0 + 1000);
  uint64_t v40 = *(void *)(v0 + 992);
  uint64_t v42 = *(void *)(v0 + 976);
  uint64_t v44 = *(void *)(v0 + 968);
  sub_100018C68(v8, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10063A770()
{
  uint64_t v1 = v0 + 160;
  uint64_t v2 = *(void *)(v0 + 1440);
  if (*(void *)(v2 + 16))
  {
    char v3 = *(_BYTE *)(v0 + 1720);
    char v125 = *(_BYTE *)(v2 + 32);
    uint64_t v4 = *(void *)(v2 + 40);
    *(void *)(v0 + 1488) = v4;
    uint64_t v5 = *(void *)(v2 + 48);
    *(void *)(v0 + 1496) = v5;
    unint64_t v6 = *(void *)(v2 + 56);
    *(void *)(v0 + 1504) = v6;
    uint64_t v7 = *(void *)(v2 + 64);
    *(void *)(v0 + 151_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v7;
    unint64_t v8 = *(void *)(v2 + 72);
    *(void *)(v0 + 1520) = v8;
    sub_10001736C(v5, v6);
    sub_10001736C(v7, v8);
    swift_bridgeObjectRelease();
    if ((v3 & 1) != 0)
    {
      uint64_t v9 = *(void *)(v0 + 1464);
      sub_10001736C(v5, v6);
      sub_10001736C(v7, v8);
      sub_10001736C(v5, v6);
      sub_10001736C(v7, v8);
      swift_bridgeObjectRetain(v9);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
      uint64_t v12 = *(void **)(v0 + 1464);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        uint64_t v12 = sub_1004C5238(0LL, v12[2] + 1LL, 1, v12);
      }
      unint64_t v14 = v12[2];
      unint64_t v13 = v12[3];
      unint64_t v15 = v14 + 1;
      if (v14 >= v13 >> 1)
      {
        uint64_t v85 = sub_1004C5238((void *)(v13 > 1), v14 + 1, 1, v12);
        unint64_t v15 = v14 + 1;
        uint64_t v12 = v85;
      }

      unint64_t v124 = v12;
      uint64_t v118 = *(void *)(v0 + 1376);
      uint64_t v120 = *(void *)(v0 + 1384);
      uint64_t v115 = *(void *)(v0 + 1368);
      unint64_t v108 = *(void *)(v0 + 1352);
      uint64_t v110 = *(void *)(v0 + 1360);
      uint64_t v106 = *(void *)(v0 + 1344);
      uint64_t v98 = *(void *)(v0 + 1328);
      unint64_t v100 = *(void *)(v0 + 1336);
      uint64_t v94 = *(void *)(v0 + 1312);
      uint64_t v96 = *(void *)(v0 + 1320);
      uint64_t v90 = *(void *)(v0 + 1296);
      unint64_t v92 = *(void *)(v0 + 1304);
      unint64_t v88 = *(void *)(v0 + 1288);
      uint64_t v16 = *(void *)(v0 + 1280);
      uint64_t v122 = *(void *)(v0 + 1160);
      uint64_t v113 = *(void *)(v0 + 1096);
      uint64_t v103 = *(void *)(v0 + 1016);
      v12[2] = v15;
      uint64_t v17 = &v12[6 * v14];
      *((_BYTE *)v17 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v125;
      v17[5] = v4;
      v17[6] = v5;
      v17[7] = v6;
      v17[8] = v7;
      v17[9] = v8;
      swift_release();
      swift_release();
      swift_release();
      sub_100641CA8((void *)(v0 + 352), (void (*)(uint64_t, uint64_t))sub_100016F9C);
      swift_bridgeObjectRelease();
      sub_100016F9C(v5, v6);
      sub_100016F9C(v7, v8);
      sub_100479D50( v16,  v88,  v90,  v92,  v94,  v96,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
      sub_100016F9C(v5, v6);
      sub_100016F9C(v7, v8);
      sub_100016F9C(v98, v100);
      sub_100016F9C(v16, v88);
      sub_100016F9C(v90, v92);
      sub_100479D50( v106,  v108,  v110,  v115,  v118,  v120,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_100016F9C);
      sub_100015794(v103, (uint64_t *)&unk_1009AE460);
      sub_100018C68(v113, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      sub_100018C68(v122, type metadata accessor for ObservedAdvertisement);
      uint64_t v18 = *(void *)(v0 + 1232);
      uint64_t v19 = *(void *)(v0 + 1224);
      uint64_t v20 = *(void *)(v0 + 1216);
      uint64_t v21 = *(void *)(v0 + 1208);
      uint64_t v22 = *(void *)(v0 + 1200);
      uint64_t v23 = *(void *)(v0 + 1192);
      uint64_t v24 = *(void *)(v0 + 1184);
      uint64_t v25 = *(void *)(v0 + 1176);
      uint64_t v26 = *(void *)(v0 + 1160);
      uint64_t v86 = *(void *)(v0 + 1152);
      uint64_t v87 = *(void *)(v0 + 1144);
      uint64_t v89 = *(void *)(v0 + 1136);
      uint64_t v91 = *(void *)(v0 + 1128);
      uint64_t v93 = *(void *)(v0 + 1104);
      uint64_t v95 = *(void *)(v0 + 1096);
      uint64_t v97 = *(void *)(v0 + 1088);
      uint64_t v99 = *(void *)(v0 + 1080);
      uint64_t v101 = *(void *)(v0 + 1072);
      uint64_t v104 = *(void *)(v0 + 1064);
      uint64_t v107 = *(void *)(v0 + 1056);
      uint64_t v109 = *(void *)(v0 + 1048);
      uint64_t v111 = *(void *)(v0 + 1024);
      uint64_t v114 = *(void *)(v0 + 1016);
      uint64_t v116 = *(void *)(v0 + 1008);
      uint64_t v119 = *(void *)(v0 + 1000);
      uint64_t v121 = *(void *)(v0 + 992);
      uint64_t v123 = *(void *)(v0 + 976);
      uint64_t v126 = *(void *)(v0 + 968);
      sub_100018C68(v18, type metadata accessor for BeaconIdentifier);
      swift_task_dealloc(v18);
      swift_task_dealloc(v19);
      swift_task_dealloc(v20);
      swift_task_dealloc(v21);
      swift_task_dealloc(v22);
      swift_task_dealloc(v23);
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      swift_task_dealloc(v86);
      swift_task_dealloc(v87);
      swift_task_dealloc(v89);
      swift_task_dealloc(v91);
      swift_task_dealloc(v93);
      swift_task_dealloc(v95);
      swift_task_dealloc(v97);
      swift_task_dealloc(v99);
      swift_task_dealloc(v101);
      swift_task_dealloc(v104);
      swift_task_dealloc(v107);
      swift_task_dealloc(v109);
      swift_task_dealloc(v111);
      swift_task_dealloc(v114);
      swift_task_dealloc(v116);
      swift_task_dealloc(v119);
      swift_task_dealloc(v121);
      swift_task_dealloc(v123);
      swift_task_dealloc(v126);
      return (*(uint64_t (**)(void *))(v0 + 8))(v124);
    }

    else
    {
      uint64_t v33 = *(unint64_t **)(v0 + 1016);
      uint64_t v34 = *(void *)(v0 + 1008);
      unint64_t v35 = *(void *)(*(void *)(v0 + 1096) + *(int *)(v0 + 1716));
      unint64_t v36 = *v33;
      sub_10001DC4C(*(void *)(v0 + 1160), *(void *)(v0 + 1136), type metadata accessor for ObservedAdvertisement);
      sub_10001581C((uint64_t)v33, v34, (uint64_t *)&unk_1009AE460);
      uint64_t v37 = *(void *)(v0 + 1136);
      if (v35 >= v36)
      {
        sub_100015794(*(void *)(v0 + 1008), (uint64_t *)&unk_1009AE460);
        sub_100018C68(v37, type metadata accessor for ObservedAdvertisement);
      }

      else
      {
        uint64_t v38 = *(void *)(v0 + 1008);
        char v39 = static Date.> infix(_:_:)( v37 + *(int *)(*(void *)(v0 + 1112) + 44LL),  v38 + *(int *)(*(void *)(v0 + 984) + 36LL));
        sub_100015794(v38, (uint64_t *)&unk_1009AE460);
        sub_100018C68(v37, type metadata accessor for ObservedAdvertisement);
        if ((v39 & 1) == 0)
        {
          uint64_t v40 = *(void *)(v0 + 1232);
          uint64_t v41 = *(void *)(v0 + 1184);
          uint64_t v42 = *(void *)(v0 + 1160);
          uint64_t v43 = *(void *)(v0 + 1128);
          uint64_t v44 = *(void *)(v0 + 1096);
          uint64_t v45 = *(void *)(v0 + 1048);
          uint64_t v46 = *(void *)(v0 + 1016);
          uint64_t v47 = *(void *)(v0 + 1000);
          uint64_t v48 = *(void *)(v0 + 992);
          swift_bridgeObjectRelease();
          sub_10001DC4C(v44, v45, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
          sub_10001581C(v46, v47, (uint64_t *)&unk_1009AE460);
          sub_10001DC4C(v42, v43, type metadata accessor for ObservedAdvertisement);
          sub_10001581C(v46, v48, (uint64_t *)&unk_1009AE460);
          uint64_t v49 = sub_10001DC4C(v40, v41, type metadata accessor for BeaconIdentifier);
          uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
          os_log_type_t v51 = static os_log_type_t.default.getter(v50);
          BOOL v52 = os_log_type_enabled(v50, v51);
          uint64_t v53 = *(void *)(v0 + 1184);
          if (v52)
          {
            uint64_t v102 = *(void *)(v0 + 1184);
            uint64_t v54 = *(void *)(v0 + 1128);
            uint64_t v55 = *(void *)(v0 + 1048);
            uint64_t v56 = *(void *)(v0 + 1032);
            os_log_type_t v57 = *(uint64_t **)(v0 + 1000);
            uint64_t v105 = *(void *)(v0 + 992);
            uint64_t v112 = *(void *)(v0 + 952);
            uint64_t v58 = swift_slowAlloc(62LL, -1LL);
            uint64_t v117 = swift_slowAlloc(128LL, -1LL);
            uint64_t v127 = v117;
            *(_DWORD *)uint64_t v58 = 134219267;
            uint64_t v59 = *(void *)(v55 + *(int *)(v56 + 24));
            sub_100018C68(v55, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
            *(void *)(v0 + 736) = v59;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 736, v0 + 744, v58 + 4, v58 + 12);
            *(_WORD *)(v58 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2080;
            uint64_t v60 = *v57;
            uint64_t v128 = 0x7972616D6972702ELL;
            unint64_t v129 = 0xEA0000000000282FLL;
            *(void *)(v0 + 744) = v60;
            v61._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
            String.append(_:)(v61);
            swift_bridgeObjectRelease();
            v62._countAndFlagsBits = 41LL;
            v62._object = (void *)0xE100000000000000LL;
            String.append(_:)(v62);
            *(void *)(v0 + 75_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = sub_1003F11D4(v128, v129, &v127);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 752, v0 + 760, v58 + 14, v58 + 22);
            swift_bridgeObjectRelease();
            sub_100015794((uint64_t)v57, (uint64_t *)&unk_1009AE460);
            *(_WORD *)(v58 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2082;
            uint64_t v63 = type metadata accessor for Date(0LL);
            uint64_t v64 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
            uint64_t v65 = dispatch thunk of CustomStringConvertible.description.getter(v63, v64);
            *(void *)(v0 + 760) = sub_1003F11D4(v65, v66, &v127);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 760, v0 + 768, v58 + 24, v58 + 32);
            swift_bridgeObjectRelease();
            sub_100018C68(v54, type metadata accessor for ObservedAdvertisement);
            *(_WORD *)(v58 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2082;
            uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter(v63, v64);
            *(void *)(v0 + 768) = sub_1003F11D4(v67, v68, &v127);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 768, v0 + 776, v58 + 34, v58 + 42);
            swift_bridgeObjectRelease();
            sub_100015794(v105, (uint64_t *)&unk_1009AE460);
            *(_WORD *)(v58 + 4_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2160;
            *(void *)(v0 + 776) = 1752392040LL;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 776, v0 + 784, v58 + 44, v58 + 52);
            *(_WORD *)(v58 + 5_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2081;
            uint64_t v69 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            uint64_t v128 = dispatch thunk of CustomStringConvertible.description.getter(v112, v69);
            unint64_t v129 = v70;
            v71._countAndFlagsBits = 47LL;
            v71._object = (void *)0xE100000000000000LL;
            String.append(_:)(v71);
            v72._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v112, v69);
            String.append(_:)(v72);
            swift_bridgeObjectRelease();
            *(void *)(v0 + 784) = sub_1003F11D4(v128, v129, &v127);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 784, v0 + 792, v58 + 54, v58 + 62);
            swift_bridgeObjectRelease();
            sub_100018C68(v102, type metadata accessor for BeaconIdentifier);
            _os_log_impl( (void *)&_mh_execute_header,  v50,  v51,  "Ignoring matched index %llu < lastObservedIndex %s, scanDate: %{public}s, lastObservedDate: %{public}s, fo r beacon %{private,mask.hash}s.",  (uint8_t *)v58,  0x3Eu);
            swift_arrayDestroy(v117, 4LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v117, -1LL, -1LL);
            swift_slowDealloc(v58, -1LL, -1LL);
          }

          else
          {
            uint64_t v81 = *(void *)(v0 + 1128);
            uint64_t v82 = *(void *)(v0 + 1000);
            uint64_t v83 = *(void *)(v0 + 992);
            sub_100018C68( *(void *)(v0 + 1048),  type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
            sub_100015794(v82, (uint64_t *)&unk_1009AE460);
            sub_100018C68(v81, type metadata accessor for ObservedAdvertisement);
            sub_100015794(v83, (uint64_t *)&unk_1009AE460);
            sub_100018C68(v53, type metadata accessor for BeaconIdentifier);
          }

          int v84 = (void *)swift_task_alloc(dword_1009B9074);
          *(void *)(v0 + 1568) = v84;
          *int v84 = v0;
          v84[1] = sub_10063C7E0;
          return sub_10063F1A4( *(void *)(v0 + 920),  (__int128 *)(v0 + 208),  v0 + 160,  *(void *)(v0 + 928),  *(void *)(v0 + 936),  *(void *)(v0 + 944));
        }
      }

      unint64_t v73 = *(void *)(*(void *)(v0 + 1096) + *(int *)(v0 + 1716));
      if (v73) {
        uint64_t v74 = v73 / 0x60 + 1;
      }
      else {
        uint64_t v74 = 0LL;
      }
      unint64_t v75 = *(void *)(v0 + 1304);
      uint64_t v76 = *(void *)(v0 + 1296);
      unint64_t v77 = *(void *)(v0 + 1288);
      uint64_t v78 = *(void *)(v0 + 1280);
      uint64_t v79 = *(void *)(v0 + 1272);
      sub_10001736C(*(void *)(v0 + 1328), *(void *)(v0 + 1336));
      sub_10001736C(v78, v77);
      sub_10001736C(v76, v75);
      unint64_t v80 = (void *)swift_task_alloc(dword_1009A2E1C);
      *(void *)(v0 + 155_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v80;
      *unint64_t v80 = v0;
      v80[1] = sub_10063BCDC;
      return sub_100160EE0(v0 + 304, *(void *)(v0 + 1232), v0 + 112, v1, 1, v74, v79, 4000LL);
    }
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v28 = swift_bridgeObjectRelease();
    unint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.error.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "LTK keys should never be empty!", v31, 2u);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    uint64_t v32 = (void *)swift_task_alloc(dword_1009B9074);
    *(void *)(v0 + 1528) = v32;
    void *v32 = v0;
    v32[1] = sub_10063B64C;
    return sub_10063F1A4( *(void *)(v0 + 920),  (__int128 *)(v0 + 208),  v1,  *(void *)(v0 + 928),  *(void *)(v0 + 936),  *(void *)(v0 + 944));
  }

uint64_t sub_10063B358()
{
  uint64_t v43 = *(void *)(v0 + 1376);
  uint64_t v45 = *(void *)(v0 + 1384);
  uint64_t v41 = *(void *)(v0 + 1368);
  uint64_t v37 = *(void *)(v0 + 1360);
  uint64_t v33 = *(void *)(v0 + 1344);
  unint64_t v35 = *(void *)(v0 + 1352);
  uint64_t v27 = *(void *)(v0 + 1328);
  unint64_t v29 = *(void *)(v0 + 1336);
  uint64_t v1 = *(void *)(v0 + 1320);
  uint64_t v2 = *(void *)(v0 + 1312);
  unint64_t v3 = *(void *)(v0 + 1304);
  uint64_t v4 = *(void *)(v0 + 1296);
  unint64_t v5 = *(void *)(v0 + 1288);
  uint64_t v6 = *(void *)(v0 + 1280);
  uint64_t v39 = *(void *)(v0 + 1160);
  uint64_t v31 = *(void *)(v0 + 1096);
  swift_release();
  swift_release();
  swift_release();
  sub_100641CA8((void *)(v0 + 352), (void (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100479D50( v6,  v5,  v4,  v3,  v2,  v1,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
  sub_100016F9C(v27, v29);
  sub_100016F9C(v6, v5);
  sub_100016F9C(v4, v3);
  sub_100479D50( v33,  v35,  v37,  v41,  v43,  v45,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100018C68(v31, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100018C68(v39, type metadata accessor for ObservedAdvertisement);
  uint64_t v7 = *(void *)(v0 + 1232);
  uint64_t v8 = *(void *)(v0 + 1224);
  uint64_t v9 = *(void *)(v0 + 1216);
  uint64_t v10 = *(void *)(v0 + 1208);
  uint64_t v11 = *(void *)(v0 + 1200);
  uint64_t v12 = *(void *)(v0 + 1192);
  uint64_t v13 = *(void *)(v0 + 1184);
  uint64_t v14 = *(void *)(v0 + 1176);
  uint64_t v15 = *(void *)(v0 + 1160);
  uint64_t v17 = *(void *)(v0 + 1152);
  uint64_t v18 = *(void *)(v0 + 1144);
  uint64_t v19 = *(void *)(v0 + 1136);
  uint64_t v20 = *(void *)(v0 + 1128);
  uint64_t v21 = *(void *)(v0 + 1104);
  uint64_t v22 = *(void *)(v0 + 1096);
  uint64_t v23 = *(void *)(v0 + 1088);
  uint64_t v24 = *(void *)(v0 + 1080);
  uint64_t v25 = *(void *)(v0 + 1072);
  uint64_t v26 = *(void *)(v0 + 1064);
  uint64_t v28 = *(void *)(v0 + 1056);
  uint64_t v30 = *(void *)(v0 + 1048);
  uint64_t v32 = *(void *)(v0 + 1024);
  uint64_t v34 = *(void *)(v0 + 1016);
  uint64_t v36 = *(void *)(v0 + 1008);
  uint64_t v38 = *(void *)(v0 + 1000);
  uint64_t v40 = *(void *)(v0 + 992);
  uint64_t v42 = *(void *)(v0 + 976);
  uint64_t v44 = *(void *)(v0 + 968);
  sub_100018C68(v7, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10063B64C(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 1528);
  *(void *)(*v2 + 1536) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_10063B9D0;
  }

  else
  {
    *(void *)(v4 + 1544) = a1;
    uint64_t v6 = sub_10063B6C0;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_10063B6C0()
{
  uint64_t v42 = *(void *)(v0 + 1376);
  uint64_t v44 = *(void *)(v0 + 1384);
  uint64_t v40 = *(void *)(v0 + 1368);
  unint64_t v34 = *(void *)(v0 + 1352);
  uint64_t v36 = *(void *)(v0 + 1360);
  uint64_t v32 = *(void *)(v0 + 1344);
  uint64_t v26 = *(void *)(v0 + 1328);
  unint64_t v28 = *(void *)(v0 + 1336);
  uint64_t v1 = *(void *)(v0 + 1320);
  uint64_t v2 = *(void *)(v0 + 1312);
  unint64_t v3 = *(void *)(v0 + 1304);
  uint64_t v4 = *(void *)(v0 + 1296);
  unint64_t v5 = *(void *)(v0 + 1288);
  uint64_t v6 = *(void *)(v0 + 1280);
  uint64_t v46 = *(void *)(v0 + 1160);
  uint64_t v38 = *(void *)(v0 + 1096);
  uint64_t v30 = *(void *)(v0 + 1016);
  swift_release();
  swift_release();
  swift_release();
  sub_100641CA8((void *)(v0 + 352), (void (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100479D50( v6,  v5,  v4,  v3,  v2,  v1,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
  sub_100016F9C(v26, v28);
  sub_100016F9C(v6, v5);
  sub_100016F9C(v4, v3);
  sub_100479D50( v32,  v34,  v36,  v40,  v42,  v44,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100015794(v30, (uint64_t *)&unk_1009AE460);
  sub_100018C68(v38, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100018C68(v46, type metadata accessor for ObservedAdvertisement);
  uint64_t v47 = *(void *)(v0 + 1544);
  uint64_t v7 = *(void *)(v0 + 1232);
  uint64_t v8 = *(void *)(v0 + 1224);
  uint64_t v9 = *(void *)(v0 + 1216);
  uint64_t v10 = *(void *)(v0 + 1208);
  uint64_t v11 = *(void *)(v0 + 1200);
  uint64_t v12 = *(void *)(v0 + 1192);
  uint64_t v13 = *(void *)(v0 + 1184);
  uint64_t v14 = *(void *)(v0 + 1176);
  uint64_t v15 = *(void *)(v0 + 1160);
  uint64_t v17 = *(void *)(v0 + 1152);
  uint64_t v18 = *(void *)(v0 + 1144);
  uint64_t v19 = *(void *)(v0 + 1136);
  uint64_t v20 = *(void *)(v0 + 1128);
  uint64_t v21 = *(void *)(v0 + 1104);
  uint64_t v22 = *(void *)(v0 + 1096);
  uint64_t v23 = *(void *)(v0 + 1088);
  uint64_t v24 = *(void *)(v0 + 1080);
  uint64_t v25 = *(void *)(v0 + 1072);
  uint64_t v27 = *(void *)(v0 + 1064);
  uint64_t v29 = *(void *)(v0 + 1056);
  uint64_t v31 = *(void *)(v0 + 1048);
  uint64_t v33 = *(void *)(v0 + 1024);
  uint64_t v35 = *(void *)(v0 + 1016);
  uint64_t v37 = *(void *)(v0 + 1008);
  uint64_t v39 = *(void *)(v0 + 1000);
  uint64_t v41 = *(void *)(v0 + 992);
  uint64_t v43 = *(void *)(v0 + 976);
  uint64_t v45 = *(void *)(v0 + 968);
  sub_100018C68(v7, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v47);
}

uint64_t sub_10063B9D0()
{
  uint64_t v42 = *(void *)(v0 + 1376);
  uint64_t v44 = *(void *)(v0 + 1384);
  uint64_t v40 = *(void *)(v0 + 1368);
  unint64_t v34 = *(void *)(v0 + 1352);
  uint64_t v36 = *(void *)(v0 + 1360);
  uint64_t v32 = *(void *)(v0 + 1344);
  uint64_t v26 = *(void *)(v0 + 1328);
  unint64_t v28 = *(void *)(v0 + 1336);
  uint64_t v1 = *(void *)(v0 + 1320);
  uint64_t v2 = *(void *)(v0 + 1312);
  unint64_t v3 = *(void *)(v0 + 1304);
  uint64_t v4 = *(void *)(v0 + 1296);
  unint64_t v5 = *(void *)(v0 + 1288);
  uint64_t v6 = *(void *)(v0 + 1280);
  uint64_t v46 = *(void *)(v0 + 1160);
  uint64_t v38 = *(void *)(v0 + 1096);
  uint64_t v30 = *(void *)(v0 + 1016);
  swift_release();
  swift_release();
  swift_release();
  sub_100641CA8((void *)(v0 + 352), (void (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100479D50( v6,  v5,  v4,  v3,  v2,  v1,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
  sub_100016F9C(v26, v28);
  sub_100016F9C(v6, v5);
  sub_100016F9C(v4, v3);
  sub_100479D50( v32,  v34,  v36,  v40,  v42,  v44,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100015794(v30, (uint64_t *)&unk_1009AE460);
  sub_100018C68(v38, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100018C68(v46, type metadata accessor for ObservedAdvertisement);
  uint64_t v7 = *(void *)(v0 + 1232);
  uint64_t v8 = *(void *)(v0 + 1224);
  uint64_t v9 = *(void *)(v0 + 1216);
  uint64_t v10 = *(void *)(v0 + 1208);
  uint64_t v11 = *(void *)(v0 + 1200);
  uint64_t v12 = *(void *)(v0 + 1192);
  uint64_t v13 = *(void *)(v0 + 1184);
  uint64_t v14 = *(void *)(v0 + 1176);
  uint64_t v15 = *(void *)(v0 + 1160);
  uint64_t v17 = *(void *)(v0 + 1152);
  uint64_t v18 = *(void *)(v0 + 1144);
  uint64_t v19 = *(void *)(v0 + 1136);
  uint64_t v20 = *(void *)(v0 + 1128);
  uint64_t v21 = *(void *)(v0 + 1104);
  uint64_t v22 = *(void *)(v0 + 1096);
  uint64_t v23 = *(void *)(v0 + 1088);
  uint64_t v24 = *(void *)(v0 + 1080);
  uint64_t v25 = *(void *)(v0 + 1072);
  uint64_t v27 = *(void *)(v0 + 1064);
  uint64_t v29 = *(void *)(v0 + 1056);
  uint64_t v31 = *(void *)(v0 + 1048);
  uint64_t v33 = *(void *)(v0 + 1024);
  uint64_t v35 = *(void *)(v0 + 1016);
  uint64_t v37 = *(void *)(v0 + 1008);
  uint64_t v39 = *(void *)(v0 + 1000);
  uint64_t v41 = *(void *)(v0 + 992);
  uint64_t v43 = *(void *)(v0 + 976);
  uint64_t v45 = *(void *)(v0 + 968);
  sub_100018C68(v7, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10063BCDC()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 1552LL);
  *(void *)(*(void *)v1 + 156Hasher.init(_seed:)(v7, 0LL) = v0;
  swift_task_dealloc(v3);
  unint64_t v4 = v2[167];
  uint64_t v5 = v2[166];
  unint64_t v6 = v2[163];
  uint64_t v7 = v2[162];
  unint64_t v8 = v2[161];
  uint64_t v9 = v2[160];
  sub_100016F9C(v5, v4);
  sub_100016F9C(v9, v8);
  sub_100016F9C(v7, v6);
  if (v0) {
    uint64_t v10 = sub_10063C1D8;
  }
  else {
    uint64_t v10 = sub_10063BD84;
  }
  return swift_task_switch(v10, 0LL, 0LL);
}

uint64_t sub_10063BD84()
{
  unint64_t v1 = *(void *)(v0 + 1520);
  uint64_t v2 = *(void *)(v0 + 1512);
  uint64_t v3 = *(void *)(v0 + 1464);
  uint64_t v4 = *(void *)(v0 + 320);
  unint64_t v5 = *(void *)(v0 + 328);
  swift_bridgeObjectRetain(v3);
  sub_10001736C(v4, v5);
  sub_10001736C(v2, v1);
  sub_10001736C(v4, v5);
  sub_10001736C(v2, v1);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  uint64_t v7 = *(void **)(v0 + 1464);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v7 = sub_1004C5238(0LL, v7[2] + 1LL, 1, v7);
  }
  unint64_t v9 = v7[2];
  unint64_t v8 = v7[3];
  if (v9 >= v8 >> 1) {
    uint64_t v7 = sub_1004C5238((void *)(v8 > 1), v9 + 1, 1, v7);
  }
  Swift::String v62 = v7;
  unint64_t v10 = *(void *)(v0 + 1520);
  uint64_t v11 = *(void *)(v0 + 1512);
  unint64_t v42 = *(void *)(v0 + 1504);
  uint64_t v38 = *(void *)(v0 + 1496);
  uint64_t v12 = *(void *)(v0 + 1488);
  uint64_t v56 = *(void *)(v0 + 1376);
  uint64_t v58 = *(void *)(v0 + 1384);
  uint64_t v54 = *(void *)(v0 + 1368);
  unint64_t v48 = *(void *)(v0 + 1352);
  uint64_t v50 = *(void *)(v0 + 1360);
  uint64_t v46 = *(void *)(v0 + 1344);
  unint64_t v40 = *(void *)(v0 + 1336);
  uint64_t v34 = *(void *)(v0 + 1320);
  uint64_t v36 = *(void *)(v0 + 1328);
  unint64_t v30 = *(void *)(v0 + 1304);
  uint64_t v32 = *(void *)(v0 + 1312);
  unint64_t v25 = *(void *)(v0 + 1288);
  uint64_t v27 = *(void *)(v0 + 1296);
  uint64_t v24 = *(void *)(v0 + 1280);
  uint64_t v60 = *(void *)(v0 + 1160);
  uint64_t v52 = *(void *)(v0 + 1096);
  uint64_t v44 = *(void *)(v0 + 1016);
  v7[2] = v9 + 1;
  uint64_t v13 = &v7[6 * v9];
  *((_BYTE *)v13 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 1;
  v13[5] = v12;
  v13[6] = v4;
  v13[7] = v5;
  v13[8] = v11;
  v13[9] = v10;
  swift_release();
  swift_release();
  swift_release();
  sub_100641CA8((void *)(v0 + 352), (void (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100016F9C(v4, v5);
  sub_100016F9C(v11, v10);
  swift_bridgeObjectRelease();
  sub_100641CA8((void *)(v0 + 304), (void (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100479D50( v24,  v25,  v27,  v30,  v32,  v34,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
  sub_100016F9C(v38, v42);
  sub_100016F9C(v11, v10);
  sub_100016F9C(v36, v40);
  sub_100016F9C(v24, v25);
  sub_100016F9C(v27, v30);
  sub_100479D50( v46,  v48,  v50,  v54,  v56,  v58,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100015794(v44, (uint64_t *)&unk_1009AE460);
  sub_100018C68(v52, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100018C68(v60, type metadata accessor for ObservedAdvertisement);
  uint64_t v14 = *(void *)(v0 + 1232);
  uint64_t v15 = *(void *)(v0 + 1224);
  uint64_t v16 = *(void *)(v0 + 1216);
  uint64_t v17 = *(void *)(v0 + 1208);
  uint64_t v18 = *(void *)(v0 + 1200);
  uint64_t v19 = *(void *)(v0 + 1192);
  uint64_t v20 = *(void *)(v0 + 1184);
  uint64_t v21 = *(void *)(v0 + 1176);
  uint64_t v22 = *(void *)(v0 + 1160);
  uint64_t v26 = *(void *)(v0 + 1152);
  uint64_t v28 = *(void *)(v0 + 1144);
  uint64_t v29 = *(void *)(v0 + 1136);
  uint64_t v31 = *(void *)(v0 + 1128);
  uint64_t v33 = *(void *)(v0 + 1104);
  uint64_t v35 = *(void *)(v0 + 1096);
  uint64_t v37 = *(void *)(v0 + 1088);
  uint64_t v39 = *(void *)(v0 + 1080);
  uint64_t v41 = *(void *)(v0 + 1072);
  uint64_t v43 = *(void *)(v0 + 1064);
  uint64_t v45 = *(void *)(v0 + 1056);
  uint64_t v47 = *(void *)(v0 + 1048);
  uint64_t v49 = *(void *)(v0 + 1024);
  uint64_t v51 = *(void *)(v0 + 1016);
  uint64_t v53 = *(void *)(v0 + 1008);
  uint64_t v55 = *(void *)(v0 + 1000);
  uint64_t v57 = *(void *)(v0 + 992);
  uint64_t v59 = *(void *)(v0 + 976);
  uint64_t v61 = *(void *)(v0 + 968);
  sub_100018C68(v14, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v47);
  swift_task_dealloc(v49);
  swift_task_dealloc(v51);
  swift_task_dealloc(v53);
  swift_task_dealloc(v55);
  swift_task_dealloc(v57);
  swift_task_dealloc(v59);
  swift_task_dealloc(v61);
  return (*(uint64_t (**)(void *))(v0 + 8))(v62);
}

uint64_t sub_10063C1D8()
{
  uint64_t v74 = (void *)(v0 + 352);
  uint64_t v1 = *(void *)(v0 + 1560);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 1560);
    uint64_t v50 = *(void *)(v0 + 1512);
    unint64_t v53 = *(void *)(v0 + 1520);
    unint64_t v44 = *(void *)(v0 + 1504);
    uint64_t v38 = *(void *)(v0 + 1496);
    uint64_t v68 = *(void *)(v0 + 1376);
    uint64_t v70 = *(void *)(v0 + 1384);
    uint64_t v66 = *(void *)(v0 + 1368);
    unint64_t v60 = *(void *)(v0 + 1352);
    uint64_t v62 = *(void *)(v0 + 1360);
    uint64_t v58 = *(void *)(v0 + 1344);
    unint64_t v47 = *(void *)(v0 + 1336);
    uint64_t v41 = *(void *)(v0 + 1328);
    uint64_t v33 = *(void *)(v0 + 1312);
    uint64_t v35 = *(void *)(v0 + 1320);
    uint64_t v29 = *(void *)(v0 + 1296);
    unint64_t v31 = *(void *)(v0 + 1304);
    uint64_t v27 = *(void *)(v0 + 1280);
    unint64_t v28 = *(void *)(v0 + 1288);
    uint64_t v72 = *(void *)(v0 + 1160);
    uint64_t v64 = *(void *)(v0 + 1096);
    uint64_t v56 = *(void *)(v0 + 1016);
    unint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v76 = v7;
    *(_DWORD *)unint64_t v6 = 136446210;
    *(void *)(v0 + 720) = v5;
    swift_errorRetain(v5);
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v9 = String.init<A>(describing:)(v0 + 720, v8);
    *(void *)(v0 + 728) = sub_1003F11D4(v9, v10, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 728, v0 + 736, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to generate secondary keys due to: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_release();
    swift_release();
    swift_release();
    sub_100641CA8(v74, (void (*)(uint64_t, uint64_t))sub_100016F9C);

    sub_100479D50( v27,  v28,  v29,  v31,  v33,  v35,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
    swift_errorRelease(v5);
    sub_100016F9C(v38, v44);
    sub_100016F9C(v50, v53);
    sub_100016F9C(v41, v47);
    sub_100016F9C(v27, v28);
    sub_100016F9C(v29, v31);
  }

  else
  {
    uint64_t v11 = *(void *)(v0 + 1560);
    uint64_t v51 = *(void *)(v0 + 1512);
    unint64_t v54 = *(void *)(v0 + 1520);
    unint64_t v45 = *(void *)(v0 + 1504);
    uint64_t v39 = *(void *)(v0 + 1496);
    uint64_t v68 = *(void *)(v0 + 1376);
    uint64_t v70 = *(void *)(v0 + 1384);
    uint64_t v66 = *(void *)(v0 + 1368);
    unint64_t v60 = *(void *)(v0 + 1352);
    uint64_t v62 = *(void *)(v0 + 1360);
    uint64_t v58 = *(void *)(v0 + 1344);
    unint64_t v48 = *(void *)(v0 + 1336);
    uint64_t v42 = *(void *)(v0 + 1328);
    uint64_t v36 = *(void *)(v0 + 1320);
    uint64_t v12 = *(void *)(v0 + 1312);
    unint64_t v13 = *(void *)(v0 + 1304);
    uint64_t v14 = *(void *)(v0 + 1296);
    unint64_t v15 = *(void *)(v0 + 1288);
    uint64_t v16 = *(void *)(v0 + 1280);
    uint64_t v72 = *(void *)(v0 + 1160);
    uint64_t v64 = *(void *)(v0 + 1096);
    uint64_t v56 = *(void *)(v0 + 1016);
    swift_release();
    swift_release();
    swift_release();
    sub_100641CA8(v74, (void (*)(uint64_t, uint64_t))sub_100016F9C);

    sub_100479D50( v16,  v15,  v14,  v13,  v12,  v36,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    sub_100016F9C(v39, v45);
    sub_100016F9C(v51, v54);
    sub_100016F9C(v42, v48);
    sub_100016F9C(v16, v15);
    sub_100016F9C(v14, v13);
  }

  sub_100479D50( v58,  v60,  v62,  v66,  v68,  v70,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100015794(v56, (uint64_t *)&unk_1009AE460);
  sub_100018C68(v64, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100018C68(v72, type metadata accessor for ObservedAdvertisement);
  uint64_t v75 = *(void *)(v0 + 1464);
  uint64_t v17 = *(void *)(v0 + 1232);
  uint64_t v18 = *(void *)(v0 + 1224);
  uint64_t v19 = *(void *)(v0 + 1216);
  uint64_t v20 = *(void *)(v0 + 1208);
  uint64_t v21 = *(void *)(v0 + 1200);
  uint64_t v22 = *(void *)(v0 + 1192);
  uint64_t v23 = *(void *)(v0 + 1184);
  uint64_t v24 = *(void *)(v0 + 1176);
  uint64_t v25 = *(void *)(v0 + 1160);
  uint64_t v30 = *(void *)(v0 + 1152);
  uint64_t v32 = *(void *)(v0 + 1144);
  uint64_t v34 = *(void *)(v0 + 1136);
  uint64_t v37 = *(void *)(v0 + 1128);
  uint64_t v40 = *(void *)(v0 + 1104);
  uint64_t v43 = *(void *)(v0 + 1096);
  uint64_t v46 = *(void *)(v0 + 1088);
  uint64_t v49 = *(void *)(v0 + 1080);
  uint64_t v52 = *(void *)(v0 + 1072);
  uint64_t v55 = *(void *)(v0 + 1064);
  uint64_t v57 = *(void *)(v0 + 1056);
  uint64_t v59 = *(void *)(v0 + 1048);
  uint64_t v61 = *(void *)(v0 + 1024);
  uint64_t v63 = *(void *)(v0 + 1016);
  uint64_t v65 = *(void *)(v0 + 1008);
  uint64_t v67 = *(void *)(v0 + 1000);
  uint64_t v69 = *(void *)(v0 + 992);
  uint64_t v71 = *(void *)(v0 + 976);
  uint64_t v73 = *(void *)(v0 + 968);
  sub_100018C68(v17, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v37);
  swift_task_dealloc(v40);
  swift_task_dealloc(v43);
  swift_task_dealloc(v46);
  swift_task_dealloc(v49);
  swift_task_dealloc(v52);
  swift_task_dealloc(v55);
  swift_task_dealloc(v57);
  swift_task_dealloc(v59);
  swift_task_dealloc(v61);
  swift_task_dealloc(v63);
  swift_task_dealloc(v65);
  swift_task_dealloc(v67);
  swift_task_dealloc(v69);
  swift_task_dealloc(v71);
  swift_task_dealloc(v73);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v75);
}

uint64_t sub_10063C7E0(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 1568);
  *(void *)(*v2 + 1576) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    unint64_t v6 = sub_10063CB9C;
  }

  else
  {
    *(void *)(v4 + 1584) = a1;
    unint64_t v6 = sub_10063C854;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_10063C854()
{
  uint64_t v30 = *(void *)(v0 + 1512);
  unint64_t v32 = *(void *)(v0 + 1520);
  unint64_t v26 = *(void *)(v0 + 1504);
  uint64_t v22 = *(void *)(v0 + 1496);
  uint64_t v46 = *(void *)(v0 + 1376);
  uint64_t v48 = *(void *)(v0 + 1384);
  uint64_t v44 = *(void *)(v0 + 1368);
  unint64_t v38 = *(void *)(v0 + 1352);
  uint64_t v40 = *(void *)(v0 + 1360);
  uint64_t v36 = *(void *)(v0 + 1344);
  unint64_t v28 = *(void *)(v0 + 1336);
  uint64_t v24 = *(void *)(v0 + 1328);
  uint64_t v1 = *(void *)(v0 + 1320);
  uint64_t v2 = *(void *)(v0 + 1312);
  unint64_t v3 = *(void *)(v0 + 1304);
  uint64_t v4 = *(void *)(v0 + 1296);
  unint64_t v5 = *(void *)(v0 + 1288);
  uint64_t v6 = *(void *)(v0 + 1280);
  uint64_t v50 = *(void *)(v0 + 1160);
  uint64_t v42 = *(void *)(v0 + 1096);
  uint64_t v34 = *(void *)(v0 + 1016);
  swift_release();
  swift_release();
  swift_release();
  sub_100641CA8((void *)(v0 + 352), (void (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100479D50( v6,  v5,  v4,  v3,  v2,  v1,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
  sub_100016F9C(v22, v26);
  sub_100016F9C(v30, v32);
  sub_100016F9C(v24, v28);
  sub_100016F9C(v6, v5);
  sub_100016F9C(v4, v3);
  sub_100479D50( v36,  v38,  v40,  v44,  v46,  v48,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100015794(v34, (uint64_t *)&unk_1009AE460);
  sub_100018C68(v42, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100018C68(v50, type metadata accessor for ObservedAdvertisement);
  uint64_t v51 = *(void *)(v0 + 1584);
  uint64_t v7 = *(void *)(v0 + 1232);
  uint64_t v8 = *(void *)(v0 + 1224);
  uint64_t v9 = *(void *)(v0 + 1216);
  uint64_t v10 = *(void *)(v0 + 1208);
  uint64_t v11 = *(void *)(v0 + 1200);
  uint64_t v12 = *(void *)(v0 + 1192);
  uint64_t v13 = *(void *)(v0 + 1184);
  uint64_t v14 = *(void *)(v0 + 1176);
  uint64_t v15 = *(void *)(v0 + 1160);
  uint64_t v17 = *(void *)(v0 + 1152);
  uint64_t v18 = *(void *)(v0 + 1144);
  uint64_t v19 = *(void *)(v0 + 1136);
  uint64_t v20 = *(void *)(v0 + 1128);
  uint64_t v21 = *(void *)(v0 + 1104);
  uint64_t v23 = *(void *)(v0 + 1096);
  uint64_t v25 = *(void *)(v0 + 1088);
  uint64_t v27 = *(void *)(v0 + 1080);
  uint64_t v29 = *(void *)(v0 + 1072);
  uint64_t v31 = *(void *)(v0 + 1064);
  uint64_t v33 = *(void *)(v0 + 1056);
  uint64_t v35 = *(void *)(v0 + 1048);
  uint64_t v37 = *(void *)(v0 + 1024);
  uint64_t v39 = *(void *)(v0 + 1016);
  uint64_t v41 = *(void *)(v0 + 1008);
  uint64_t v43 = *(void *)(v0 + 1000);
  uint64_t v45 = *(void *)(v0 + 992);
  uint64_t v47 = *(void *)(v0 + 976);
  uint64_t v49 = *(void *)(v0 + 968);
  sub_100018C68(v7, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v47);
  swift_task_dealloc(v49);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v51);
}

uint64_t sub_10063CB9C()
{
  uint64_t v30 = *(void *)(v0 + 1512);
  unint64_t v32 = *(void *)(v0 + 1520);
  unint64_t v26 = *(void *)(v0 + 1504);
  uint64_t v22 = *(void *)(v0 + 1496);
  uint64_t v46 = *(void *)(v0 + 1376);
  uint64_t v48 = *(void *)(v0 + 1384);
  uint64_t v44 = *(void *)(v0 + 1368);
  unint64_t v38 = *(void *)(v0 + 1352);
  uint64_t v40 = *(void *)(v0 + 1360);
  uint64_t v36 = *(void *)(v0 + 1344);
  unint64_t v28 = *(void *)(v0 + 1336);
  uint64_t v24 = *(void *)(v0 + 1328);
  uint64_t v1 = *(void *)(v0 + 1320);
  uint64_t v2 = *(void *)(v0 + 1312);
  unint64_t v3 = *(void *)(v0 + 1304);
  uint64_t v4 = *(void *)(v0 + 1296);
  unint64_t v5 = *(void *)(v0 + 1288);
  uint64_t v6 = *(void *)(v0 + 1280);
  uint64_t v50 = *(void *)(v0 + 1160);
  uint64_t v42 = *(void *)(v0 + 1096);
  uint64_t v34 = *(void *)(v0 + 1016);
  swift_release();
  swift_release();
  swift_release();
  sub_100641CA8((void *)(v0 + 352), (void (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100479D50( v6,  v5,  v4,  v3,  v2,  v1,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
  sub_100016F9C(v22, v26);
  sub_100016F9C(v30, v32);
  sub_100016F9C(v24, v28);
  sub_100016F9C(v6, v5);
  sub_100016F9C(v4, v3);
  sub_100479D50( v36,  v38,  v40,  v44,  v46,  v48,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100015794(v34, (uint64_t *)&unk_1009AE460);
  sub_100018C68(v42, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100018C68(v50, type metadata accessor for ObservedAdvertisement);
  uint64_t v7 = *(void *)(v0 + 1232);
  uint64_t v8 = *(void *)(v0 + 1224);
  uint64_t v9 = *(void *)(v0 + 1216);
  uint64_t v10 = *(void *)(v0 + 1208);
  uint64_t v11 = *(void *)(v0 + 1200);
  uint64_t v12 = *(void *)(v0 + 1192);
  uint64_t v13 = *(void *)(v0 + 1184);
  uint64_t v14 = *(void *)(v0 + 1176);
  uint64_t v15 = *(void *)(v0 + 1160);
  uint64_t v17 = *(void *)(v0 + 1152);
  uint64_t v18 = *(void *)(v0 + 1144);
  uint64_t v19 = *(void *)(v0 + 1136);
  uint64_t v20 = *(void *)(v0 + 1128);
  uint64_t v21 = *(void *)(v0 + 1104);
  uint64_t v23 = *(void *)(v0 + 1096);
  uint64_t v25 = *(void *)(v0 + 1088);
  uint64_t v27 = *(void *)(v0 + 1080);
  uint64_t v29 = *(void *)(v0 + 1072);
  uint64_t v31 = *(void *)(v0 + 1064);
  uint64_t v33 = *(void *)(v0 + 1056);
  uint64_t v35 = *(void *)(v0 + 1048);
  uint64_t v37 = *(void *)(v0 + 1024);
  uint64_t v39 = *(void *)(v0 + 1016);
  uint64_t v41 = *(void *)(v0 + 1008);
  uint64_t v43 = *(void *)(v0 + 1000);
  uint64_t v45 = *(void *)(v0 + 992);
  uint64_t v47 = *(void *)(v0 + 976);
  uint64_t v49 = *(void *)(v0 + 968);
  sub_100018C68(v7, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v47);
  swift_task_dealloc(v49);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10063CEE0()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 1600LL);
  *(void *)(*(void *)v1 + 1608LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_10063D038;
  }

  else
  {
    unint64_t v5 = v2[167];
    uint64_t v6 = v2[166];
    unint64_t v7 = v2[163];
    uint64_t v8 = v2[162];
    unint64_t v9 = v2[161];
    uint64_t v10 = v2[160];
    sub_100016F9C(v6, v5);
    sub_100016F9C(v10, v9);
    sub_100016F9C(v8, v7);
    uint64_t v4 = sub_10063CF80;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10063CF80()
{
  uint64_t v1 = *(_OWORD **)(v0 + 1592);
  __int128 v2 = *(_OWORD *)(v0 + 256);
  __int128 v3 = *(_OWORD *)(v0 + 288);
  v1[3] = *(_OWORD *)(v0 + 272);
  v1[4] = v3;
  v1[2] = v2;
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 600, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 624))
  {
    sub_100012EC0((__int128 *)(v0 + 600), v0 + 440);
    sub_100012ED8((void *)(v0 + 440), *(void *)(v0 + 464));
    uint64_t v6 = (uint64_t (*)(void))((char *)&dword_10099C8D8 + dword_10099C8D8);
    unint64_t v5 = (void *)swift_task_alloc(unk_10099C8DC);
    *(void *)(v0 + 16swift_weakDestroy(v0 + 16) = v5;
    *unint64_t v5 = v0;
    v5[1] = sub_10063D358;
    return v6();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10063D038()
{
  uint64_t v1 = *(void *)(v0 + 1592);
  uint64_t v44 = *(void *)(v0 + 1376);
  uint64_t v46 = *(void *)(v0 + 1384);
  uint64_t v42 = *(void *)(v0 + 1368);
  uint64_t v38 = *(void *)(v0 + 1360);
  uint64_t v34 = *(void *)(v0 + 1344);
  unint64_t v36 = *(void *)(v0 + 1352);
  unint64_t v2 = *(void *)(v0 + 1336);
  uint64_t v3 = *(void *)(v0 + 1328);
  uint64_t v28 = *(void *)(v0 + 1312);
  uint64_t v30 = *(void *)(v0 + 1320);
  unint64_t v4 = *(void *)(v0 + 1304);
  uint64_t v5 = *(void *)(v0 + 1296);
  unint64_t v6 = *(void *)(v0 + 1288);
  uint64_t v7 = *(void *)(v0 + 1280);
  uint64_t v40 = *(void *)(v0 + 1160);
  uint64_t v32 = *(void *)(v0 + 1096);
  sub_100016F9C(v3, v2);
  sub_100016F9C(v7, v6);
  sub_100016F9C(v5, v4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = 0LL;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100479D50( v7,  v6,  v5,  v4,  v28,  v30,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
  sub_100016F9C(v3, v2);
  sub_100016F9C(v7, v6);
  sub_100016F9C(v5, v4);
  sub_100479D50( v34,  v36,  v38,  v42,  v44,  v46,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100018C68(v32, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100018C68(v40, type metadata accessor for ObservedAdvertisement);
  uint64_t v8 = *(void *)(v0 + 1232);
  uint64_t v9 = *(void *)(v0 + 1224);
  uint64_t v10 = *(void *)(v0 + 1216);
  uint64_t v11 = *(void *)(v0 + 1208);
  uint64_t v12 = *(void *)(v0 + 1200);
  uint64_t v13 = *(void *)(v0 + 1192);
  uint64_t v14 = *(void *)(v0 + 1184);
  uint64_t v15 = *(void *)(v0 + 1176);
  uint64_t v16 = *(void *)(v0 + 1160);
  uint64_t v18 = *(void *)(v0 + 1152);
  uint64_t v19 = *(void *)(v0 + 1144);
  uint64_t v20 = *(void *)(v0 + 1136);
  uint64_t v21 = *(void *)(v0 + 1128);
  uint64_t v22 = *(void *)(v0 + 1104);
  uint64_t v23 = *(void *)(v0 + 1096);
  uint64_t v24 = *(void *)(v0 + 1088);
  uint64_t v25 = *(void *)(v0 + 1080);
  uint64_t v26 = *(void *)(v0 + 1072);
  uint64_t v27 = *(void *)(v0 + 1064);
  uint64_t v29 = *(void *)(v0 + 1056);
  uint64_t v31 = *(void *)(v0 + 1048);
  uint64_t v33 = *(void *)(v0 + 1024);
  uint64_t v35 = *(void *)(v0 + 1016);
  uint64_t v37 = *(void *)(v0 + 1008);
  uint64_t v39 = *(void *)(v0 + 1000);
  uint64_t v41 = *(void *)(v0 + 992);
  uint64_t v43 = *(void *)(v0 + 976);
  uint64_t v45 = *(void *)(v0 + 968);
  sub_100018C68(v8, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10063D358(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1616LL);
  *(void *)(*(void *)v1 + 1624LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10063D3B4, 0LL, 0LL);
}

uint64_t sub_10063D3B4()
{
  uint64_t v1 = (void *)(v0 + 440);
  if (*(void *)(v0 + 1624))
  {
    uint64_t v2 = *(void *)(v0 + 1232);
    uint64_t v3 = *(void *)(v0 + 1168);
    uint64_t v4 = *(void *)(v0 + 968);
    uint64_t v5 = *(void *)(v0 + 960);
    uint64_t v6 = *(void *)(v0 + 952);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v2 + *(int *)(v3 + 20), v6);
    return swift_task_switch(sub_10063D528, *(void *)(v0 + 1624), 0LL);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    *(void *)(v0 + 1440) = *(void *)(v0 + 1592);
    uint64_t v8 = *(int *)(v0 + 1712);
    unint64_t v9 = *(void *)(v0 + 1336);
    uint64_t v10 = *(void *)(v0 + 1328);
    unint64_t v11 = *(void *)(v0 + 1304);
    uint64_t v12 = *(void *)(v0 + 1296);
    unint64_t v13 = *(void *)(v0 + 1288);
    uint64_t v14 = *(void *)(v0 + 1280);
    uint64_t v15 = *(void *)(v0 + 1272);
    uint64_t v16 = *(void *)(v0 + 1096);
    *(void *)(v0 + 11_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v10;
    uint64_t v17 = *(void *)(v0 + 1032);
    *(void *)(v0 + 120) = v9;
    *(void *)(v0 + 128) = v14;
    *(void *)(v0 + 136) = v13;
    *(void *)(v0 + 144) = v12;
    *(void *)(v0 + 15_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v11;
    uint64_t v18 = *(int *)(v17 + 24);
    char v19 = *(_BYTE *)(v16 + v8);
    *(_DWORD *)(v0 + 17swift_weakDestroy(v0 + 16) = v18;
    uint64_t v20 = *(void *)(v16 + v18);
    sub_10001736C(v10, v9);
    sub_10001736C(v14, v13);
    sub_10001736C(v12, v11);
    uint64_t v21 = (void *)swift_task_alloc(dword_1009A2E1C);
    *(void *)(v0 + 1448) = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_10063A268;
    return sub_100160EE0(v0 + 352, *(void *)(v0 + 1232), v0 + 112, v0 + 160, v19, v20, v15, 4000LL);
  }

uint64_t sub_10063D528()
{
  uint64_t v1 = v0[201];
  sub_100657320(v0[121], v0[122]);
  v0[204] = v1;
  (*(void (**)(void, void))(v0[120] + 8LL))(v0[121], v0[119]);
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_10063DCA4;
  }

  else
  {
    uint64_t v2 = sub_10063D5C4;
  }

  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_10063D5C4()
{
  uint64_t v1 = *(void *)(v0 + 976);
  uint64_t v2 = type metadata accessor for StandaloneBeacon(0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(v1, 1LL, v2) == 1)
  {
    swift_release();
    sub_100015794(v1, &qword_1009B9068);
    *(void *)(v0 + 1440) = *(void *)(v0 + 1592);
    uint64_t v3 = *(int *)(v0 + 1712);
    unint64_t v4 = *(void *)(v0 + 1336);
    uint64_t v5 = *(void *)(v0 + 1328);
    unint64_t v6 = *(void *)(v0 + 1304);
    uint64_t v7 = *(void *)(v0 + 1296);
    unint64_t v8 = *(void *)(v0 + 1288);
    uint64_t v9 = *(void *)(v0 + 1280);
    uint64_t v10 = *(void *)(v0 + 1272);
    uint64_t v11 = *(void *)(v0 + 1096);
    uint64_t v12 = *(void *)(v0 + 1032);
    *(void *)(v0 + 11_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v5;
    *(void *)(v0 + 120) = v4;
    *(void *)(v0 + 128) = v9;
    *(void *)(v0 + 136) = v8;
    *(void *)(v0 + 144) = v7;
    *(void *)(v0 + 15_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v6;
    uint64_t v13 = *(int *)(v12 + 24);
    char v14 = *(_BYTE *)(v11 + v3);
    *(_DWORD *)(v0 + 17swift_weakDestroy(v0 + 16) = v13;
    uint64_t v15 = *(void *)(v11 + v13);
    sub_10001736C(v5, v4);
    sub_10001736C(v9, v8);
    sub_10001736C(v7, v6);
    uint64_t v16 = (void *)swift_task_alloc(dword_1009A2E1C);
    *(void *)(v0 + 1448) = v16;
    void *v16 = v0;
    v16[1] = sub_10063A268;
    return sub_100160EE0(v0 + 352, *(void *)(v0 + 1232), v0 + 112, v0 + 160, v14, v15, v10, 4000LL);
  }

  else
  {
    uint64_t v18 = *(void *)(v0 + 1232);
    uint64_t v19 = *(void *)(v0 + 1176);
    sub_100015794(v1, &qword_1009B9068);
    uint64_t v20 = sub_10001DC4C(v18, v19, type metadata accessor for BeaconIdentifier);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.default.getter(v21);
    BOOL v23 = os_log_type_enabled(v21, v22);
    uint64_t v24 = *(void *)(v0 + 1384);
    uint64_t v25 = *(void *)(v0 + 1376);
    uint64_t v26 = *(void *)(v0 + 1368);
    unint64_t v81 = *(void *)(v0 + 1352);
    uint64_t v83 = *(void *)(v0 + 1360);
    uint64_t v79 = *(void *)(v0 + 1344);
    unint64_t v73 = *(void *)(v0 + 1336);
    uint64_t v67 = *(void *)(v0 + 1320);
    uint64_t v69 = *(void *)(v0 + 1328);
    uint64_t v65 = *(void *)(v0 + 1312);
    unint64_t v77 = *(void *)(v0 + 1304);
    uint64_t v75 = *(void *)(v0 + 1296);
    unint64_t v71 = *(void *)(v0 + 1288);
    uint64_t v27 = *(void *)(v0 + 1280);
    uint64_t v28 = *(void *)(v0 + 1176);
    uint64_t v59 = *(void *)(v0 + 1096);
    uint64_t v61 = *(void *)(v0 + 1160);
    if (v23)
    {
      uint64_t v29 = *(void *)(v0 + 952);
      uint64_t v30 = swift_slowAlloc(22LL, -1LL);
      uint64_t v56 = v25;
      uint64_t v31 = swift_slowAlloc(32LL, -1LL);
      uint64_t v85 = v31;
      *(_DWORD *)uint64_t v30 = 141558275;
      *(void *)(v0 + 79_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 792, v0 + 800, v30 + 4, v30 + 12);
      *(_WORD *)(v30 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2081;
      uint64_t v51 = v24;
      uint64_t v32 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v86 = dispatch thunk of CustomStringConvertible.description.getter(v29, v32);
      unint64_t v87 = v33;
      v34._countAndFlagsBits = 47LL;
      v34._object = (void *)0xE100000000000000LL;
      String.append(_:)(v34);
      v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v29, v32);
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 800) = sub_1003F11D4(v86, v87, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 800, v0 + 808, v30 + 14, v30 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68(v28, type metadata accessor for BeaconIdentifier);
      _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "Skipping secondary keys for standalone beacon %{private,mask.hash}s",  (uint8_t *)v30,  0x16u);
      swift_arrayDestroy(v31, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_slowDealloc(v30, -1LL, -1LL);

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      sub_100479D50( v27,  v71,  v75,  v77,  v65,  v67,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
      sub_100016F9C(v69, v73);
      sub_100016F9C(v27, v71);
      sub_100016F9C(v75, v77);
      uint64_t v36 = v79;
      unint64_t v37 = v81;
      uint64_t v38 = v83;
      uint64_t v40 = v56;
      uint64_t v39 = v26;
      uint64_t v41 = v51;
    }

    else
    {

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      sub_100479D50( v27,  v71,  v75,  v77,  v65,  v67,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
      sub_100018C68(v28, type metadata accessor for BeaconIdentifier);
      sub_100016F9C(v69, v73);
      sub_100016F9C(v27, v71);
      sub_100016F9C(v75, v77);
      uint64_t v36 = v79;
      unint64_t v37 = v81;
      uint64_t v38 = v83;
      uint64_t v39 = v26;
      uint64_t v40 = v25;
      uint64_t v41 = v24;
    }

    sub_100479D50( v36,  v37,  v38,  v39,  v40,  v41,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_100016F9C);
    sub_100018C68(v59, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    sub_100018C68(v61, type metadata accessor for ObservedAdvertisement);
    uint64_t v84 = *(void *)(v0 + 1592);
    uint64_t v42 = *(void *)(v0 + 1232);
    uint64_t v43 = *(void *)(v0 + 1224);
    uint64_t v44 = *(void *)(v0 + 1216);
    uint64_t v45 = *(void *)(v0 + 1208);
    uint64_t v46 = *(void *)(v0 + 1200);
    uint64_t v47 = *(void *)(v0 + 1192);
    uint64_t v48 = *(void *)(v0 + 1184);
    uint64_t v49 = *(void *)(v0 + 1176);
    uint64_t v50 = *(void *)(v0 + 1160);
    uint64_t v52 = *(void *)(v0 + 1152);
    uint64_t v53 = *(void *)(v0 + 1144);
    uint64_t v54 = *(void *)(v0 + 1136);
    uint64_t v55 = *(void *)(v0 + 1128);
    uint64_t v57 = *(void *)(v0 + 1104);
    uint64_t v58 = *(void *)(v0 + 1096);
    uint64_t v60 = *(void *)(v0 + 1088);
    uint64_t v62 = *(void *)(v0 + 1080);
    uint64_t v63 = *(void *)(v0 + 1072);
    uint64_t v64 = *(void *)(v0 + 1064);
    uint64_t v66 = *(void *)(v0 + 1056);
    uint64_t v68 = *(void *)(v0 + 1048);
    uint64_t v70 = *(void *)(v0 + 1024);
    uint64_t v72 = *(void *)(v0 + 1016);
    uint64_t v74 = *(void *)(v0 + 1008);
    uint64_t v76 = *(void *)(v0 + 1000);
    uint64_t v78 = *(void *)(v0 + 992);
    uint64_t v80 = *(void *)(v0 + 976);
    uint64_t v82 = *(void *)(v0 + 968);
    sub_100018C68(v42, type metadata accessor for BeaconIdentifier);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v60);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v66);
    swift_task_dealloc(v68);
    swift_task_dealloc(v70);
    swift_task_dealloc(v72);
    swift_task_dealloc(v74);
    swift_task_dealloc(v76);
    swift_task_dealloc(v78);
    swift_task_dealloc(v80);
    swift_task_dealloc(v82);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v84);
  }

uint64_t sub_10063DCA4()
{
  uint64_t v43 = *(void *)(v0 + 1376);
  uint64_t v45 = *(void *)(v0 + 1384);
  uint64_t v41 = *(void *)(v0 + 1368);
  uint64_t v37 = *(void *)(v0 + 1360);
  uint64_t v33 = *(void *)(v0 + 1344);
  unint64_t v35 = *(void *)(v0 + 1352);
  uint64_t v27 = *(void *)(v0 + 1328);
  unint64_t v29 = *(void *)(v0 + 1336);
  uint64_t v1 = *(void *)(v0 + 1320);
  uint64_t v2 = *(void *)(v0 + 1312);
  unint64_t v3 = *(void *)(v0 + 1304);
  uint64_t v4 = *(void *)(v0 + 1296);
  unint64_t v5 = *(void *)(v0 + 1288);
  uint64_t v6 = *(void *)(v0 + 1280);
  uint64_t v39 = *(void *)(v0 + 1160);
  uint64_t v31 = *(void *)(v0 + 1096);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100479D50( v6,  v5,  v4,  v3,  v2,  v1,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
  sub_100016F9C(v27, v29);
  sub_100016F9C(v6, v5);
  sub_100016F9C(v4, v3);
  sub_100479D50( v33,  v35,  v37,  v41,  v43,  v45,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100018C68(v31, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100018C68(v39, type metadata accessor for ObservedAdvertisement);
  uint64_t v7 = *(void *)(v0 + 1232);
  uint64_t v8 = *(void *)(v0 + 1224);
  uint64_t v9 = *(void *)(v0 + 1216);
  uint64_t v10 = *(void *)(v0 + 1208);
  uint64_t v11 = *(void *)(v0 + 1200);
  uint64_t v12 = *(void *)(v0 + 1192);
  uint64_t v13 = *(void *)(v0 + 1184);
  uint64_t v14 = *(void *)(v0 + 1176);
  uint64_t v15 = *(void *)(v0 + 1160);
  uint64_t v17 = *(void *)(v0 + 1152);
  uint64_t v18 = *(void *)(v0 + 1144);
  uint64_t v19 = *(void *)(v0 + 1136);
  uint64_t v20 = *(void *)(v0 + 1128);
  uint64_t v21 = *(void *)(v0 + 1104);
  uint64_t v22 = *(void *)(v0 + 1096);
  uint64_t v23 = *(void *)(v0 + 1088);
  uint64_t v24 = *(void *)(v0 + 1080);
  uint64_t v25 = *(void *)(v0 + 1072);
  uint64_t v26 = *(void *)(v0 + 1064);
  uint64_t v28 = *(void *)(v0 + 1056);
  uint64_t v30 = *(void *)(v0 + 1048);
  uint64_t v32 = *(void *)(v0 + 1024);
  uint64_t v34 = *(void *)(v0 + 1016);
  uint64_t v36 = *(void *)(v0 + 1008);
  uint64_t v38 = *(void *)(v0 + 1000);
  uint64_t v40 = *(void *)(v0 + 992);
  uint64_t v42 = *(void *)(v0 + 976);
  uint64_t v44 = *(void *)(v0 + 968);
  sub_100018C68(v7, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10063DF94(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 1640);
  *(void *)(*v2 + 1648) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_10063E2F4;
  }

  else
  {
    *(void *)(v4 + 1656) = a1;
    uint64_t v6 = sub_10063E008;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_10063E008()
{
  uint64_t v43 = *(void *)(v0 + 1376);
  uint64_t v45 = *(void *)(v0 + 1384);
  uint64_t v41 = *(void *)(v0 + 1368);
  uint64_t v37 = *(void *)(v0 + 1360);
  uint64_t v33 = *(void *)(v0 + 1344);
  unint64_t v35 = *(void *)(v0 + 1352);
  unint64_t v29 = *(void *)(v0 + 1336);
  uint64_t v1 = *(void *)(v0 + 1328);
  uint64_t v2 = *(void *)(v0 + 1320);
  uint64_t v3 = *(void *)(v0 + 1312);
  unint64_t v4 = *(void *)(v0 + 1304);
  uint64_t v5 = *(void *)(v0 + 1296);
  unint64_t v6 = *(void *)(v0 + 1288);
  uint64_t v7 = *(void *)(v0 + 1280);
  uint64_t v39 = *(void *)(v0 + 1160);
  uint64_t v31 = *(void *)(v0 + 1096);
  swift_release();
  swift_release();
  swift_release();
  sub_100479D50( v7,  v6,  v5,  v4,  v3,  v2,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
  sub_100016F9C(v1, v29);
  sub_100016F9C(v7, v6);
  sub_100016F9C(v5, v4);
  sub_100479D50( v33,  v35,  v37,  v41,  v43,  v45,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100018C68(v31, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100018C68(v39, type metadata accessor for ObservedAdvertisement);
  uint64_t v46 = *(void *)(v0 + 1656);
  uint64_t v8 = *(void *)(v0 + 1232);
  uint64_t v9 = *(void *)(v0 + 1224);
  uint64_t v10 = *(void *)(v0 + 1216);
  uint64_t v11 = *(void *)(v0 + 1208);
  uint64_t v12 = *(void *)(v0 + 1200);
  uint64_t v13 = *(void *)(v0 + 1192);
  uint64_t v14 = *(void *)(v0 + 1184);
  uint64_t v15 = *(void *)(v0 + 1176);
  uint64_t v16 = *(void *)(v0 + 1160);
  uint64_t v18 = *(void *)(v0 + 1152);
  uint64_t v19 = *(void *)(v0 + 1144);
  uint64_t v20 = *(void *)(v0 + 1136);
  uint64_t v21 = *(void *)(v0 + 1128);
  uint64_t v22 = *(void *)(v0 + 1104);
  uint64_t v23 = *(void *)(v0 + 1096);
  uint64_t v24 = *(void *)(v0 + 1088);
  uint64_t v25 = *(void *)(v0 + 1080);
  uint64_t v26 = *(void *)(v0 + 1072);
  uint64_t v27 = *(void *)(v0 + 1064);
  uint64_t v28 = *(void *)(v0 + 1056);
  uint64_t v30 = *(void *)(v0 + 1048);
  uint64_t v32 = *(void *)(v0 + 1024);
  uint64_t v34 = *(void *)(v0 + 1016);
  uint64_t v36 = *(void *)(v0 + 1008);
  uint64_t v38 = *(void *)(v0 + 1000);
  uint64_t v40 = *(void *)(v0 + 992);
  uint64_t v42 = *(void *)(v0 + 976);
  uint64_t v44 = *(void *)(v0 + 968);
  sub_100018C68(v8, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v46);
}

uint64_t sub_10063E2F4()
{
  uint64_t v43 = *(void *)(v0 + 1376);
  uint64_t v45 = *(void *)(v0 + 1384);
  uint64_t v41 = *(void *)(v0 + 1368);
  uint64_t v37 = *(void *)(v0 + 1360);
  uint64_t v33 = *(void *)(v0 + 1344);
  unint64_t v35 = *(void *)(v0 + 1352);
  unint64_t v29 = *(void *)(v0 + 1336);
  uint64_t v1 = *(void *)(v0 + 1328);
  uint64_t v2 = *(void *)(v0 + 1320);
  uint64_t v3 = *(void *)(v0 + 1312);
  unint64_t v4 = *(void *)(v0 + 1304);
  uint64_t v5 = *(void *)(v0 + 1296);
  unint64_t v6 = *(void *)(v0 + 1288);
  uint64_t v7 = *(void *)(v0 + 1280);
  uint64_t v39 = *(void *)(v0 + 1160);
  uint64_t v31 = *(void *)(v0 + 1096);
  swift_release();
  swift_release();
  swift_release();
  sub_100479D50( v7,  v6,  v5,  v4,  v3,  v2,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
  sub_100016F9C(v1, v29);
  sub_100016F9C(v7, v6);
  sub_100016F9C(v5, v4);
  sub_100479D50( v33,  v35,  v37,  v41,  v43,  v45,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100018C68(v31, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100018C68(v39, type metadata accessor for ObservedAdvertisement);
  uint64_t v8 = *(void *)(v0 + 1232);
  uint64_t v9 = *(void *)(v0 + 1224);
  uint64_t v10 = *(void *)(v0 + 1216);
  uint64_t v11 = *(void *)(v0 + 1208);
  uint64_t v12 = *(void *)(v0 + 1200);
  uint64_t v13 = *(void *)(v0 + 1192);
  uint64_t v14 = *(void *)(v0 + 1184);
  uint64_t v15 = *(void *)(v0 + 1176);
  uint64_t v16 = *(void *)(v0 + 1160);
  uint64_t v18 = *(void *)(v0 + 1152);
  uint64_t v19 = *(void *)(v0 + 1144);
  uint64_t v20 = *(void *)(v0 + 1136);
  uint64_t v21 = *(void *)(v0 + 1128);
  uint64_t v22 = *(void *)(v0 + 1104);
  uint64_t v23 = *(void *)(v0 + 1096);
  uint64_t v24 = *(void *)(v0 + 1088);
  uint64_t v25 = *(void *)(v0 + 1080);
  uint64_t v26 = *(void *)(v0 + 1072);
  uint64_t v27 = *(void *)(v0 + 1064);
  uint64_t v28 = *(void *)(v0 + 1056);
  uint64_t v30 = *(void *)(v0 + 1048);
  uint64_t v32 = *(void *)(v0 + 1024);
  uint64_t v34 = *(void *)(v0 + 1016);
  uint64_t v36 = *(void *)(v0 + 1008);
  uint64_t v38 = *(void *)(v0 + 1000);
  uint64_t v40 = *(void *)(v0 + 992);
  uint64_t v42 = *(void *)(v0 + 976);
  uint64_t v44 = *(void *)(v0 + 968);
  sub_100018C68(v8, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10063E5DC(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 1664);
  *(void *)(*v2 + 167_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    unint64_t v6 = sub_10063E920;
  }

  else
  {
    *(void *)(v4 + 1680) = a1;
    unint64_t v6 = sub_10063E650;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_10063E650()
{
  uint64_t v42 = *(void *)(v0 + 1376);
  uint64_t v44 = *(void *)(v0 + 1384);
  uint64_t v38 = *(void *)(v0 + 1360);
  uint64_t v40 = *(void *)(v0 + 1368);
  unint64_t v36 = *(void *)(v0 + 1352);
  unint64_t v30 = *(void *)(v0 + 1336);
  uint64_t v1 = *(void *)(v0 + 1328);
  uint64_t v2 = *(void *)(v0 + 1320);
  uint64_t v3 = *(void *)(v0 + 1312);
  unint64_t v4 = *(void *)(v0 + 1304);
  uint64_t v5 = *(void *)(v0 + 1296);
  unint64_t v6 = *(void *)(v0 + 1288);
  uint64_t v7 = *(void *)(v0 + 1280);
  uint64_t v32 = *(void *)(v0 + 1160);
  uint64_t v34 = *(void *)(v0 + 1344);
  swift_release();
  swift_release();
  swift_release();
  sub_100479D50( v7,  v6,  v5,  v4,  v3,  v2,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
  sub_100016F9C(v1, v30);
  sub_100016F9C(v7, v6);
  sub_100016F9C(v5, v4);
  sub_100479D50( v34,  v36,  v38,  v40,  v42,  v44,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100018C68(v32, type metadata accessor for ObservedAdvertisement);
  uint64_t v45 = *(void *)(v0 + 1680);
  uint64_t v8 = *(void *)(v0 + 1232);
  uint64_t v9 = *(void *)(v0 + 1224);
  uint64_t v10 = *(void *)(v0 + 1216);
  uint64_t v11 = *(void *)(v0 + 1208);
  uint64_t v12 = *(void *)(v0 + 1200);
  uint64_t v13 = *(void *)(v0 + 1192);
  uint64_t v14 = *(void *)(v0 + 1184);
  uint64_t v15 = *(void *)(v0 + 1176);
  uint64_t v16 = *(void *)(v0 + 1160);
  uint64_t v18 = *(void *)(v0 + 1152);
  uint64_t v19 = *(void *)(v0 + 1144);
  uint64_t v20 = *(void *)(v0 + 1136);
  uint64_t v21 = *(void *)(v0 + 1128);
  uint64_t v22 = *(void *)(v0 + 1104);
  uint64_t v23 = *(void *)(v0 + 1096);
  uint64_t v24 = *(void *)(v0 + 1088);
  uint64_t v25 = *(void *)(v0 + 1080);
  uint64_t v26 = *(void *)(v0 + 1072);
  uint64_t v27 = *(void *)(v0 + 1064);
  uint64_t v28 = *(void *)(v0 + 1056);
  uint64_t v29 = *(void *)(v0 + 1048);
  uint64_t v31 = *(void *)(v0 + 1024);
  uint64_t v33 = *(void *)(v0 + 1016);
  uint64_t v35 = *(void *)(v0 + 1008);
  uint64_t v37 = *(void *)(v0 + 1000);
  uint64_t v39 = *(void *)(v0 + 992);
  uint64_t v41 = *(void *)(v0 + 976);
  uint64_t v43 = *(void *)(v0 + 968);
  sub_100018C68(v8, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v45);
}

uint64_t sub_10063E920()
{
  uint64_t v42 = *(void *)(v0 + 1376);
  uint64_t v44 = *(void *)(v0 + 1384);
  uint64_t v38 = *(void *)(v0 + 1360);
  uint64_t v40 = *(void *)(v0 + 1368);
  unint64_t v36 = *(void *)(v0 + 1352);
  unint64_t v30 = *(void *)(v0 + 1336);
  uint64_t v1 = *(void *)(v0 + 1328);
  uint64_t v2 = *(void *)(v0 + 1320);
  uint64_t v3 = *(void *)(v0 + 1312);
  unint64_t v4 = *(void *)(v0 + 1304);
  uint64_t v5 = *(void *)(v0 + 1296);
  unint64_t v6 = *(void *)(v0 + 1288);
  uint64_t v7 = *(void *)(v0 + 1280);
  uint64_t v32 = *(void *)(v0 + 1160);
  uint64_t v34 = *(void *)(v0 + 1344);
  swift_release();
  swift_release();
  swift_release();
  sub_100479D50( v7,  v6,  v5,  v4,  v3,  v2,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
  sub_100016F9C(v1, v30);
  sub_100016F9C(v7, v6);
  sub_100016F9C(v5, v4);
  sub_100479D50( v34,  v36,  v38,  v40,  v42,  v44,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100018C68(v32, type metadata accessor for ObservedAdvertisement);
  uint64_t v8 = *(void *)(v0 + 1232);
  uint64_t v9 = *(void *)(v0 + 1224);
  uint64_t v10 = *(void *)(v0 + 1216);
  uint64_t v11 = *(void *)(v0 + 1208);
  uint64_t v12 = *(void *)(v0 + 1200);
  uint64_t v13 = *(void *)(v0 + 1192);
  uint64_t v14 = *(void *)(v0 + 1184);
  uint64_t v15 = *(void *)(v0 + 1176);
  uint64_t v16 = *(void *)(v0 + 1160);
  uint64_t v18 = *(void *)(v0 + 1152);
  uint64_t v19 = *(void *)(v0 + 1144);
  uint64_t v20 = *(void *)(v0 + 1136);
  uint64_t v21 = *(void *)(v0 + 1128);
  uint64_t v22 = *(void *)(v0 + 1104);
  uint64_t v23 = *(void *)(v0 + 1096);
  uint64_t v24 = *(void *)(v0 + 1088);
  uint64_t v25 = *(void *)(v0 + 1080);
  uint64_t v26 = *(void *)(v0 + 1072);
  uint64_t v27 = *(void *)(v0 + 1064);
  uint64_t v28 = *(void *)(v0 + 1056);
  uint64_t v29 = *(void *)(v0 + 1048);
  uint64_t v31 = *(void *)(v0 + 1024);
  uint64_t v33 = *(void *)(v0 + 1016);
  uint64_t v35 = *(void *)(v0 + 1008);
  uint64_t v37 = *(void *)(v0 + 1000);
  uint64_t v39 = *(void *)(v0 + 992);
  uint64_t v41 = *(void *)(v0 + 976);
  uint64_t v43 = *(void *)(v0 + 968);
  sub_100018C68(v8, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10063EBEC(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 1688);
  *(void *)(*v2 + 1696) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    unint64_t v6 = sub_10063EF04;
  }

  else
  {
    *(void *)(v4 + 1704) = a1;
    unint64_t v6 = sub_10063EC60;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_10063EC60()
{
  unint64_t v1 = *(void *)(v0 + 1336);
  uint64_t v2 = *(void *)(v0 + 1328);
  uint64_t v34 = *(void *)(v0 + 1312);
  unint64_t v3 = *(void *)(v0 + 1304);
  uint64_t v4 = *(void *)(v0 + 1296);
  unint64_t v5 = *(void *)(v0 + 1288);
  uint64_t v6 = *(void *)(v0 + 1280);
  uint64_t v37 = *(void *)(v0 + 1320);
  sub_100479D50( *(void *)(v0 + 1344),  *(void *)(v0 + 1352),  *(void *)(v0 + 1360),  *(void *)(v0 + 1368),  *(void *)(v0 + 1376),  *(void *)(v0 + 1384),  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100016F9C(v2, v1);
  sub_100016F9C(v6, v5);
  sub_100016F9C(v4, v3);
  swift_release();
  swift_release();
  sub_100479D50( v6,  v5,  v4,  v3,  v34,  v37,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
  swift_release();
  uint64_t v38 = *(void *)(v0 + 1704);
  uint64_t v7 = *(void *)(v0 + 1232);
  uint64_t v8 = *(void *)(v0 + 1224);
  uint64_t v9 = *(void *)(v0 + 1216);
  uint64_t v10 = *(void *)(v0 + 1208);
  uint64_t v11 = *(void *)(v0 + 1200);
  uint64_t v12 = *(void *)(v0 + 1192);
  uint64_t v13 = *(void *)(v0 + 1184);
  uint64_t v14 = *(void *)(v0 + 1176);
  uint64_t v15 = *(void *)(v0 + 1160);
  uint64_t v17 = *(void *)(v0 + 1152);
  uint64_t v18 = *(void *)(v0 + 1144);
  uint64_t v19 = *(void *)(v0 + 1136);
  uint64_t v20 = *(void *)(v0 + 1128);
  uint64_t v21 = *(void *)(v0 + 1104);
  uint64_t v22 = *(void *)(v0 + 1096);
  uint64_t v23 = *(void *)(v0 + 1088);
  uint64_t v24 = *(void *)(v0 + 1080);
  uint64_t v25 = *(void *)(v0 + 1072);
  uint64_t v26 = *(void *)(v0 + 1064);
  uint64_t v27 = *(void *)(v0 + 1056);
  uint64_t v28 = *(void *)(v0 + 1048);
  uint64_t v29 = *(void *)(v0 + 1024);
  uint64_t v30 = *(void *)(v0 + 1016);
  uint64_t v31 = *(void *)(v0 + 1008);
  uint64_t v32 = *(void *)(v0 + 1000);
  uint64_t v33 = *(void *)(v0 + 992);
  uint64_t v35 = *(void *)(v0 + 976);
  uint64_t v36 = *(void *)(v0 + 968);
  sub_100018C68(v7, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v38);
}

uint64_t sub_10063EF04()
{
  unint64_t v1 = *(void *)(v0 + 1336);
  uint64_t v2 = *(void *)(v0 + 1328);
  uint64_t v34 = *(void *)(v0 + 1312);
  unint64_t v3 = *(void *)(v0 + 1304);
  uint64_t v4 = *(void *)(v0 + 1296);
  unint64_t v5 = *(void *)(v0 + 1288);
  uint64_t v6 = *(void *)(v0 + 1280);
  uint64_t v37 = *(void *)(v0 + 1320);
  sub_100479D50( *(void *)(v0 + 1344),  *(void *)(v0 + 1352),  *(void *)(v0 + 1360),  *(void *)(v0 + 1368),  *(void *)(v0 + 1376),  *(void *)(v0 + 1384),  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100016F9C(v2, v1);
  sub_100016F9C(v6, v5);
  sub_100016F9C(v4, v3);
  swift_release();
  swift_release();
  sub_100479D50( v6,  v5,  v4,  v3,  v34,  v37,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
  swift_release();
  uint64_t v7 = *(void *)(v0 + 1232);
  uint64_t v8 = *(void *)(v0 + 1224);
  uint64_t v9 = *(void *)(v0 + 1216);
  uint64_t v10 = *(void *)(v0 + 1208);
  uint64_t v11 = *(void *)(v0 + 1200);
  uint64_t v12 = *(void *)(v0 + 1192);
  uint64_t v13 = *(void *)(v0 + 1184);
  uint64_t v14 = *(void *)(v0 + 1176);
  uint64_t v15 = *(void *)(v0 + 1160);
  uint64_t v17 = *(void *)(v0 + 1152);
  uint64_t v18 = *(void *)(v0 + 1144);
  uint64_t v19 = *(void *)(v0 + 1136);
  uint64_t v20 = *(void *)(v0 + 1128);
  uint64_t v21 = *(void *)(v0 + 1104);
  uint64_t v22 = *(void *)(v0 + 1096);
  uint64_t v23 = *(void *)(v0 + 1088);
  uint64_t v24 = *(void *)(v0 + 1080);
  uint64_t v25 = *(void *)(v0 + 1072);
  uint64_t v26 = *(void *)(v0 + 1064);
  uint64_t v27 = *(void *)(v0 + 1056);
  uint64_t v28 = *(void *)(v0 + 1048);
  uint64_t v29 = *(void *)(v0 + 1024);
  uint64_t v30 = *(void *)(v0 + 1016);
  uint64_t v31 = *(void *)(v0 + 1008);
  uint64_t v32 = *(void *)(v0 + 1000);
  uint64_t v33 = *(void *)(v0 + 992);
  uint64_t v35 = *(void *)(v0 + 976);
  uint64_t v36 = *(void *)(v0 + 968);
  sub_100018C68(v7, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10063F1A4(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 584) = a6;
  *(void *)(v6 + 576) = a5;
  *(void *)(v6 + 568) = a4;
  *(void *)(v6 + 560) = a3;
  *(void *)(v6 + 55_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = a1;
  sub_100015750(a3, v6 + 160, &qword_1009A2E20);
  __int128 v8 = *(_OWORD *)(v6 + 176);
  *(_OWORD *)(v6 + 59_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(_OWORD *)(v6 + 160);
  *(_OWORD *)(v6 + 608) = v8;
  __int128 v9 = *a2;
  __int128 v10 = a2[1];
  *(_OWORD *)(v6 + 624) = *(_OWORD *)(v6 + 192);
  *(_OWORD *)(v6 + 640) = v9;
  __int128 v11 = a2[2];
  *(_OWORD *)(v6 + 656) = v10;
  *(_OWORD *)(v6 + 67_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v11;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  *(void *)(v6 + 688) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v6 + 696) = v13;
  *(void *)(v6 + 704) = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100004AEC(&qword_1009B9068);
  *(void *)(v6 + 71_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = swift_task_alloc((*(void *)(*(void *)(v14 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v15 = (*(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009AE460) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v6 + 720) = swift_task_alloc(v15);
  *(void *)(v6 + 728) = swift_task_alloc(v15);
  uint64_t v16 = type metadata accessor for BeaconIdentifier(0LL);
  *(void *)(v6 + 736) = v16;
  unint64_t v17 = (*(void *)(*(void *)(v16 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v6 + 744) = swift_task_alloc(v17);
  *(void *)(v6 + 75_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = swift_task_alloc(v17);
  *(void *)(v6 + 760) = swift_task_alloc(v17);
  *(void *)(v6 + 768) = swift_task_alloc(v17);
  return swift_task_switch(sub_10063F2F0, 0LL, 0LL);
}

uint64_t sub_10063F2F0()
{
  unint64_t v1 = (uint64_t **)swift_task_alloc(dword_1009B907C);
  v0[97] = (uint64_t)v1;
  *unint64_t v1 = v0;
  v1[1] = (uint64_t *)sub_10063F360;
  return sub_100640EE0(v0[91], v0[69]);
}

uint64_t sub_10063F360()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 776LL);
  *(void *)(*(void *)v1 + 784LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    unint64_t v3 = sub_10063F4B0;
  }
  else {
    unint64_t v3 = sub_10063F3C4;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10063F3C4()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 464, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 344, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 368))
  {
    sub_100012EC0((__int128 *)(v0 + 344), v0 + 304);
    sub_100012ED8((void *)(v0 + 304), *(void *)(v0 + 328));
    unint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C8A8 + dword_10099C8A8);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C8AC);
    *(void *)(v0 + 79_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10063F56C;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10063F4B0()
{
  uint64_t v1 = *(void *)(v0 + 768);
  uint64_t v2 = *(void *)(v0 + 760);
  uint64_t v3 = *(void *)(v0 + 752);
  uint64_t v4 = *(void *)(v0 + 744);
  uint64_t v5 = *(void *)(v0 + 728);
  uint64_t v6 = *(void *)(v0 + 720);
  uint64_t v7 = *(void *)(v0 + 712);
  uint64_t v8 = *(void *)(v0 + 704);
  sub_100018C68(v1, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10063F56C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 792LL);
  *(void *)(*(void *)v1 + 80Hasher.init(_seed:)(v7, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10063F5C8, 0LL, 0LL);
}

uint64_t sub_10063F5C8()
{
  uint64_t v1 = *(void *)(v0 + 800);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 304));
  if (v1) {
    return swift_task_switch(sub_10063F7B0, *(void *)(v0 + 800), 0LL);
  }
  if (qword_10099B4F0 != -1) {
    swift_once(&qword_10099B4F0, sub_1004B82C0);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = sub_10000A720(v3, (uint64_t)qword_100A2AB30);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing BeaconKeyService!", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  uint64_t v8 = *(void *)(v0 + 728);

  unint64_t v9 = sub_100641B4C();
  uint64_t v10 = swift_allocError(&type metadata for ManagedCBPeripheralError, v9, 0LL, 0LL);
  _BYTE *v11 = 1;
  swift_willThrow(v10);
  sub_100015794(v8, (uint64_t *)&unk_1009AE460);
  uint64_t v12 = *(void *)(v0 + 768);
  uint64_t v13 = *(void *)(v0 + 760);
  uint64_t v14 = *(void *)(v0 + 752);
  uint64_t v15 = *(void *)(v0 + 744);
  uint64_t v16 = *(void *)(v0 + 728);
  uint64_t v17 = *(void *)(v0 + 720);
  uint64_t v18 = *(void *)(v0 + 712);
  uint64_t v19 = *(void *)(v0 + 704);
  sub_100018C68(v12, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10063F7B0()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 800) + 128LL);
  *(void *)(v0 + 808) = v1;
  if (v1)
  {
    swift_retain();
    uint64_t v2 = sub_10063F804;
  }

  else
  {
    uint64_t v2 = sub_10063FBB8;
  }

  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_10063F804()
{
  if (qword_10099B4F0 != -1) {
    swift_once(&qword_10099B4F0, sub_1004B82C0);
  }
  uint64_t v1 = *(void *)(v0 + 768);
  uint64_t v2 = *(void *)(v0 + 760);
  uint64_t v3 = *(void *)(v0 + 728);
  uint64_t v4 = *(void *)(v0 + 720);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 8swift_weakDestroy(v0 + 16) = sub_10000A720(v5, (uint64_t)qword_100A2AB30);
  sub_10001581C(v3, v4, (uint64_t *)&unk_1009AE460);
  uint64_t v6 = sub_10001DC4C(v1, v2, type metadata accessor for BeaconIdentifier);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter(v7);
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v0 + 760);
  if (v9)
  {
    __int128 v11 = *(uint64_t **)(v0 + 720);
    uint64_t v27 = *(void *)(v0 + 688);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v28 = swift_slowAlloc(64LL, -1LL);
    uint64_t v29 = v28;
    *(_DWORD *)uint64_t v12 = 136315651;
    uint64_t v13 = *v11;
    uint64_t v30 = 0x7972616D6972702ELL;
    unint64_t v31 = 0xEA0000000000282FLL;
    *(void *)(v0 + 520) = v13;
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 41LL;
    v15._object = (void *)0xE100000000000000LL;
    String.append(_:)(v15);
    *(void *)(v0 + 528) = sub_1003F11D4(v30, v31, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 528, v0 + 536, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease();
    sub_100015794((uint64_t)v11, (uint64_t *)&unk_1009AE460);
    *(_WORD *)(v12 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2160;
    *(void *)(v0 + 536) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 536, v0 + 544, v12 + 14, v12 + 22);
    *(_WORD *)(v12 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2081;
    uint64_t v16 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter(v27, v16);
    unint64_t v31 = v17;
    v18._countAndFlagsBits = 47LL;
    v18._object = (void *)0xE100000000000000LL;
    String.append(_:)(v18);
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v27, v16);
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 544) = sub_1003F11D4(v30, v31, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 544, v0 + 552, v12 + 24, v12 + 32);
    swift_bridgeObjectRelease();
    sub_100018C68(v10, type metadata accessor for BeaconIdentifier);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "Best effort lastObservedIndex %s for %{private,mask.hash}s",  (uint8_t *)v12,  0x20u);
    swift_arrayDestroy(v28, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {
    sub_100015794(*(void *)(v0 + 720), (uint64_t *)&unk_1009AE460);
    sub_100018C68(v10, type metadata accessor for BeaconIdentifier);
  }

  uint64_t v20 = *(void *)(v0 + 808);
  uint64_t v21 = *(uint64_t **)(v0 + 728);
  __int128 v22 = *(_OWORD *)(v0 + 656);
  *(_OWORD *)(v0 + 64) = *(_OWORD *)(v0 + 640);
  __int128 v23 = *(_OWORD *)(v0 + 672);
  *(_OWORD *)(v0 + 80) = v22;
  *(_OWORD *)(v0 + 96) = v23;
  uint64_t v24 = *v21;
  uint64_t v25 = (void *)swift_task_alloc(dword_1009A2E1C);
  *(void *)(v0 + 824) = v25;
  void *v25 = v0;
  v25[1] = sub_10063FD6C;
  return sub_100160EE0(v0 + 256, *(void *)(v0 + 768), v0 + 64, *(void *)(v0 + 560), 0, v24, v20, 4000LL);
}

uint64_t sub_10063FBB8()
{
  if (qword_10099B4F0 != -1) {
    swift_once(&qword_10099B4F0, sub_1004B82C0);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A2AB30);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Missing LTKGenerator!", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 728);

  unint64_t v7 = sub_100641B4C();
  uint64_t v8 = swift_allocError(&type metadata for ManagedCBPeripheralError, v7, 0LL, 0LL);
  _BYTE *v9 = 1;
  swift_willThrow(v8);
  swift_release();
  sub_100015794(v6, (uint64_t *)&unk_1009AE460);
  uint64_t v10 = *(void *)(v0 + 768);
  uint64_t v11 = *(void *)(v0 + 760);
  uint64_t v12 = *(void *)(v0 + 752);
  uint64_t v13 = *(void *)(v0 + 744);
  uint64_t v14 = *(void *)(v0 + 728);
  uint64_t v15 = *(void *)(v0 + 720);
  uint64_t v16 = *(void *)(v0 + 712);
  uint64_t v17 = *(void *)(v0 + 704);
  sub_100018C68(v10, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10063FD6C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 824LL);
  *(void *)(*(void *)v1 + 832LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_10063FEF8;
  }
  else {
    uint64_t v3 = sub_10063FDD0;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10063FDD0()
{
  uint64_t v1 = sub_1004C5238(0LL, 1LL, 1, _swiftEmptyArrayStorage);
  unint64_t v3 = v1[2];
  unint64_t v2 = v1[3];
  if (v3 >= v2 >> 1) {
    uint64_t v1 = sub_1004C5238((void *)(v2 > 1), v3 + 1, 1, v1);
  }
  *(void *)(v0 + 840) = v1;
  v1[2] = v3 + 1;
  os_log_type_t v4 = &v1[6 * v3];
  __int128 v5 = *(_OWORD *)(v0 + 256);
  __int128 v6 = *(_OWORD *)(v0 + 288);
  void v4[3] = *(_OWORD *)(v0 + 272);
  void v4[4] = v6;
  void v4[2] = v5;
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 424, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 448))
  {
    sub_100012EC0((__int128 *)(v0 + 424), v0 + 384);
    sub_100012ED8((void *)(v0 + 384), *(void *)(v0 + 408));
    BOOL v9 = (uint64_t (*)(void))((char *)&dword_10099C8D8 + dword_10099C8D8);
    uint64_t v8 = (void *)swift_task_alloc(unk_10099C8DC);
    *(void *)(v0 + 848) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_10063FFDC;
    return v9();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10063FEF8()
{
  uint64_t v1 = *(void *)(v0 + 728);
  swift_release();
  swift_release();
  sub_100015794(v1, (uint64_t *)&unk_1009AE460);
  uint64_t v2 = *(void *)(v0 + 768);
  uint64_t v3 = *(void *)(v0 + 760);
  uint64_t v4 = *(void *)(v0 + 752);
  uint64_t v5 = *(void *)(v0 + 744);
  uint64_t v6 = *(void *)(v0 + 728);
  uint64_t v7 = *(void *)(v0 + 720);
  uint64_t v8 = *(void *)(v0 + 712);
  uint64_t v9 = *(void *)(v0 + 704);
  sub_100018C68(v2, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10063FFDC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 848LL);
  *(void *)(*(void *)v1 + 856LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100640038, 0LL, 0LL);
}

uint64_t sub_100640038()
{
  uint64_t v1 = (void *)(v0 + 384);
  if (*(void *)(v0 + 856))
  {
    uint64_t v2 = *(void *)(v0 + 768);
    uint64_t v3 = *(void *)(v0 + 736);
    uint64_t v4 = *(void *)(v0 + 704);
    uint64_t v5 = *(void *)(v0 + 696);
    uint64_t v6 = *(void *)(v0 + 688);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v2 + *(int *)(v3 + 20), v6);
    return swift_task_switch(sub_1006402D4, *(void *)(v0 + 856), 0LL);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_100015750(*(void *)(v0 + 560), v0 + 112, &qword_1009A2E20);
    unint64_t v8 = *(void *)(v0 + 120);
    if (v8 >> 60 == 15)
    {
      uint64_t v9 = *(void *)(v0 + 768);
      uint64_t v10 = *(void *)(v0 + 728);
      swift_release();
      swift_release();
      sub_100641CA8((void *)(v0 + 256), (void (*)(uint64_t, uint64_t))sub_100016F9C);
      sub_100015794(v10, (uint64_t *)&unk_1009AE460);
      sub_100018C68(v9, type metadata accessor for BeaconIdentifier);
      uint64_t v11 = *(void *)(v0 + 840);
      uint64_t v12 = *(void *)(v0 + 760);
      uint64_t v13 = *(void *)(v0 + 752);
      uint64_t v14 = *(void *)(v0 + 744);
      uint64_t v15 = *(void *)(v0 + 728);
      uint64_t v16 = *(void *)(v0 + 720);
      uint64_t v17 = *(void *)(v0 + 712);
      uint64_t v18 = *(void *)(v0 + 704);
      swift_task_dealloc(*(void *)(v0 + 768));
      swift_task_dealloc(v12);
      swift_task_dealloc(v13);
      swift_task_dealloc(v14);
      swift_task_dealloc(v15);
      swift_task_dealloc(v16);
      swift_task_dealloc(v17);
      swift_task_dealloc(v18);
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v11);
    }

    else
    {
      __int128 v19 = *(_OWORD *)(v0 + 128);
      __int128 v20 = *(_OWORD *)(v0 + 144);
      unint64_t v21 = **(void **)(v0 + 728);
      if (v21) {
        uint64_t v22 = v21 / 0x60 + 1;
      }
      else {
        uint64_t v22 = 0LL;
      }
      uint64_t v23 = *(void *)(v0 + 808);
      unint64_t v24 = *(void *)(v0 + 632);
      uint64_t v25 = *(void *)(v0 + 624);
      unint64_t v26 = *(void *)(v0 + 616);
      uint64_t v27 = *(void *)(v0 + 608);
      unint64_t v28 = *(void *)(v0 + 600);
      uint64_t v29 = *(void *)(v0 + 592);
      *(void *)(v0 + swift_weakDestroy(v0 + 16) = *(void *)(v0 + 112);
      *(void *)(v0 + 24) = v8;
      *(_OWORD *)(v0 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v19;
      *(_OWORD *)(v0 + 48) = v20;
      sub_10001736C(v29, v28);
      sub_10001736C(v27, v26);
      sub_10001736C(v25, v24);
      sub_10001736C(v29, v28);
      sub_10001736C(v27, v26);
      sub_10001736C(v25, v24);
      uint64_t v30 = (void *)swift_task_alloc(dword_1009A2E1C);
      *(void *)(v0 + 87_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v30;
      *uint64_t v30 = v0;
      v30[1] = sub_100640990;
      return sub_100160EE0(v0 + 208, *(void *)(v0 + 768), v0 + 64, v0 + 16, 1, v22, v23, 4000LL);
    }
  }

uint64_t sub_1006402D4()
{
  uint64_t v1 = v0[104];
  sub_100657320(v0[88], v0[89]);
  v0[108] = v1;
  (*(void (**)(void, void))(v0[87] + 8LL))(v0[88], v0[86]);
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_10064088C;
  }

  else
  {
    uint64_t v2 = sub_100640370;
  }

  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_100640370()
{
  uint64_t v1 = *(void *)(v0 + 712);
  uint64_t v2 = type metadata accessor for StandaloneBeacon(0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(v1, 1LL, v2) != 1)
  {
    uint64_t v7 = *(void *)(v0 + 768);
    uint64_t v8 = *(void *)(v0 + 752);
    sub_100015794(v1, &qword_1009B9068);
    uint64_t v9 = sub_10001DC4C(v7, v8, type metadata accessor for BeaconIdentifier);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.default.getter(v10);
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = *(void *)(v0 + 768);
    uint64_t v14 = *(void *)(v0 + 752);
    if (v12)
    {
      uint64_t v45 = *(void *)(v0 + 728);
      uint64_t v15 = *(void *)(v0 + 688);
      uint64_t v44 = *(void *)(v0 + 768);
      uint64_t v16 = swift_slowAlloc(22LL, -1LL);
      uint64_t v17 = swift_slowAlloc(32LL, -1LL);
      uint64_t v46 = v17;
      *(_DWORD *)uint64_t v16 = 141558275;
      *(void *)(v0 + 504) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 504, v0 + 512, v16 + 4, v16 + 12);
      *(_WORD *)(v16 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2081;
      uint64_t v18 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter(v15, v18);
      unint64_t v48 = v19;
      v20._countAndFlagsBits = 47LL;
      v20._object = (void *)0xE100000000000000LL;
      String.append(_:)(v20);
      v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v15, v18);
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 51_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = sub_1003F11D4(v47, v48, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 512, v0 + 520, v16 + 14, v16 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68(v14, type metadata accessor for BeaconIdentifier);
      _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "Skipping secondary keys for standalone beacon %{private,mask.hash}s",  (uint8_t *)v16,  0x16u);
      swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);
      swift_release();
      swift_release();
      swift_release();

      sub_100641CA8((void *)(v0 + 256), (void (*)(uint64_t, uint64_t))sub_100016F9C);
      sub_100015794(v45, (uint64_t *)&unk_1009AE460);
      uint64_t v6 = v44;
    }

    else
    {
      uint64_t v35 = *(void *)(v0 + 728);

      swift_release();
      swift_release();
      swift_release();
      sub_100018C68(v14, type metadata accessor for BeaconIdentifier);
      sub_100641CA8((void *)(v0 + 256), (void (*)(uint64_t, uint64_t))sub_100016F9C);
      sub_100015794(v35, (uint64_t *)&unk_1009AE460);
      uint64_t v6 = v13;
    }

    goto LABEL_11;
  }

  swift_release();
  sub_100015794(v1, &qword_1009B9068);
  sub_100015750(*(void *)(v0 + 560), v0 + 112, &qword_1009A2E20);
  unint64_t v3 = *(void *)(v0 + 120);
  if (v3 >> 60 == 15)
  {
    uint64_t v4 = *(void *)(v0 + 768);
    uint64_t v5 = *(void *)(v0 + 728);
    swift_release();
    swift_release();
    sub_100641CA8((void *)(v0 + 256), (void (*)(uint64_t, uint64_t))sub_100016F9C);
    sub_100015794(v5, (uint64_t *)&unk_1009AE460);
    uint64_t v6 = v4;
LABEL_11:
    sub_100018C68(v6, type metadata accessor for BeaconIdentifier);
    uint64_t v36 = *(void *)(v0 + 840);
    uint64_t v37 = *(void *)(v0 + 760);
    uint64_t v38 = *(void *)(v0 + 752);
    uint64_t v39 = *(void *)(v0 + 744);
    uint64_t v40 = *(void *)(v0 + 728);
    uint64_t v41 = *(void *)(v0 + 720);
    uint64_t v42 = *(void *)(v0 + 712);
    uint64_t v43 = *(void *)(v0 + 704);
    swift_task_dealloc(*(void *)(v0 + 768));
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v36);
  }

  __int128 v22 = *(_OWORD *)(v0 + 128);
  __int128 v23 = *(_OWORD *)(v0 + 144);
  unint64_t v24 = **(void **)(v0 + 728);
  if (v24) {
    uint64_t v25 = v24 / 0x60 + 1;
  }
  else {
    uint64_t v25 = 0LL;
  }
  uint64_t v26 = *(void *)(v0 + 808);
  unint64_t v27 = *(void *)(v0 + 632);
  uint64_t v28 = *(void *)(v0 + 624);
  unint64_t v29 = *(void *)(v0 + 616);
  uint64_t v30 = *(void *)(v0 + 608);
  unint64_t v31 = *(void *)(v0 + 600);
  uint64_t v32 = *(void *)(v0 + 592);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = *(void *)(v0 + 112);
  *(void *)(v0 + 24) = v3;
  *(_OWORD *)(v0 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v22;
  *(_OWORD *)(v0 + 48) = v23;
  sub_10001736C(v32, v31);
  sub_10001736C(v30, v29);
  sub_10001736C(v28, v27);
  sub_10001736C(v32, v31);
  sub_10001736C(v30, v29);
  sub_10001736C(v28, v27);
  uint64_t v33 = (void *)swift_task_alloc(dword_1009A2E1C);
  *(void *)(v0 + 87_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v33;
  *uint64_t v33 = v0;
  v33[1] = sub_100640990;
  return sub_100160EE0(v0 + 208, *(void *)(v0 + 768), v0 + 64, v0 + 16, 1, v25, v26, 4000LL);
}

uint64_t sub_10064088C()
{
  uint64_t v1 = *(void *)(v0 + 728);
  swift_release();
  swift_release();
  swift_release();
  sub_100641CA8((void *)(v0 + 256), (void (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100015794(v1, (uint64_t *)&unk_1009AE460);
  uint64_t v2 = *(void *)(v0 + 768);
  uint64_t v3 = *(void *)(v0 + 760);
  uint64_t v4 = *(void *)(v0 + 752);
  uint64_t v5 = *(void *)(v0 + 744);
  uint64_t v6 = *(void *)(v0 + 728);
  uint64_t v7 = *(void *)(v0 + 720);
  uint64_t v8 = *(void *)(v0 + 712);
  uint64_t v9 = *(void *)(v0 + 704);
  sub_100018C68(v2, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100640990()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 872);
  *(void *)(*v1 + 880) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 560);
    swift_bridgeObjectRelease();
    sub_100641CF0(v4);
    uint64_t v5 = sub_100640DDC;
  }

  else
  {
    sub_100641CF0(*(void *)(v2 + 560));
    uint64_t v5 = sub_100640A10;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_100640A10()
{
  uint64_t v35 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(v0 + 224);
  unint64_t v1 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 288);
  unint64_t v4 = *(void *)(v0 + 296);
  sub_10001DC4C(*(void *)(v0 + 768), *(void *)(v0 + 744), type metadata accessor for BeaconIdentifier);
  unint64_t v38 = v1;
  sub_10001736C(v2, v1);
  uint64_t v5 = sub_10001736C(v3, v4);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.debug.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = *(void *)(v0 + 744);
    uint64_t v33 = v2;
    uint64_t v9 = *(void *)(v0 + 688);
    uint64_t v10 = swift_slowAlloc(22LL, -1LL);
    uint64_t v36 = swift_slowAlloc(32LL, -1LL);
    uint64_t v39 = v36;
    *(_DWORD *)uint64_t v10 = 141558275;
    *(void *)(v0 + 488) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 488, v0 + 496, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2081;
    uint64_t v11 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter(v9, v11);
    unint64_t v41 = v12;
    v13._countAndFlagsBits = 47LL;
    v13._object = (void *)0xE100000000000000LL;
    String.append(_:)(v13);
    uint64_t v14 = v9;
    uint64_t v2 = v33;
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v14, v11);
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 496) = sub_1003F11D4(v40, v41, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 496, v0 + 504, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68(v8, type metadata accessor for BeaconIdentifier);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "Got secondary key for %{private,mask.hash}s!",  (uint8_t *)v10,  0x16u);
    swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
    sub_100018C68(*(void *)(v0 + 744), type metadata accessor for BeaconIdentifier);
  }

  uint64_t v16 = *(void *)(v0 + 840);
  sub_10001736C(v2, v38);
  unint64_t v37 = v4;
  sub_10001736C(v3, v4);
  unint64_t v18 = *(void *)(v16 + 16);
  unint64_t v17 = *(void *)(v16 + 24);
  unint64_t v19 = *(void **)(v0 + 840);
  uint64_t v20 = v2;
  if (v18 >= v17 >> 1) {
    unint64_t v19 = sub_1004C5238((void *)(v17 > 1), v18 + 1, 1, v19);
  }
  uint64_t v32 = *(void *)(v0 + 768);
  uint64_t v34 = v19;
  uint64_t v31 = *(void *)(v0 + 728);
  uint64_t v21 = *(void *)(v0 + 560);
  _BYTE v19[2] = v18 + 1;
  __int128 v22 = &v19[6 * v18];
  *((_BYTE *)v22 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 1;
  v22[5] = v35;
  v22[6] = v20;
  v22[7] = v38;
  v22[8] = v3;
  v22[9] = v37;
  swift_release();
  swift_release();
  sub_100641CA8((void *)(v0 + 208), (void (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100016F9C(v20, v38);
  sub_100016F9C(v3, v37);
  sub_100641CF0(v21);
  sub_100641CA8((void *)(v0 + 256), (void (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100015794(v31, (uint64_t *)&unk_1009AE460);
  sub_100018C68(v32, type metadata accessor for BeaconIdentifier);
  uint64_t v23 = *(void *)(v0 + 760);
  uint64_t v24 = *(void *)(v0 + 752);
  uint64_t v25 = *(void *)(v0 + 744);
  uint64_t v26 = *(void *)(v0 + 728);
  uint64_t v27 = *(void *)(v0 + 720);
  uint64_t v28 = *(void *)(v0 + 712);
  uint64_t v29 = *(void *)(v0 + 704);
  swift_task_dealloc(*(void *)(v0 + 768));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void *))(v0 + 8))(v34);
}

uint64_t sub_100640DDC()
{
  uint64_t v1 = *(void *)(v0 + 728);
  uint64_t v2 = *(void *)(v0 + 560);
  swift_release();
  swift_release();
  sub_100641CF0(v2);
  sub_100641CA8((void *)(v0 + 256), (void (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100015794(v1, (uint64_t *)&unk_1009AE460);
  uint64_t v3 = *(void *)(v0 + 768);
  uint64_t v4 = *(void *)(v0 + 760);
  uint64_t v5 = *(void *)(v0 + 752);
  uint64_t v6 = *(void *)(v0 + 744);
  uint64_t v7 = *(void *)(v0 + 728);
  uint64_t v8 = *(void *)(v0 + 720);
  uint64_t v9 = *(void *)(v0 + 712);
  uint64_t v10 = *(void *)(v0 + 704);
  sub_100018C68(v3, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100640EE0(uint64_t a1, uint64_t a2)
{
  v2[27] = a1;
  v2[28] = a2;
  uint64_t v3 = sub_100004AEC(&qword_1009A8E90);
  v2[29] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D720);
  v2[30] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Date(0LL);
  v2[31] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[32] = v6;
  v2[33] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for BeaconIdentifier(0LL);
  v2[34] = v7;
  unint64_t v8 = (*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[35] = swift_task_alloc(v8);
  v2[36] = swift_task_alloc(v8);
  return swift_task_switch(sub_100640FBC, 0LL, 0LL);
}

uint64_t sub_100640FBC()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 176, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 96, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 120))
  {
    sub_100012EC0((__int128 *)(v0 + 96), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C878 + dword_10099C878);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C87C);
    *(void *)(v0 + 296) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1006410BC;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1006410BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 296LL);
  *(void *)(*(void *)v1 + 304LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100641118, 0LL, 0LL);
}

uint64_t sub_100641118()
{
  uint64_t v1 = *(void *)(v0 + 304);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (!v1)
  {
    if (qword_10099B4F0 != -1) {
      swift_once(&qword_10099B4F0, sub_1004B82C0);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    uint64_t v6 = sub_10000A720(v5, (uint64_t)qword_100A2AB30);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "No ObservationStoreService available!", v9, 2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    unint64_t v10 = sub_100641B4C();
    uint64_t v11 = swift_allocError(&type metadata for ManagedCBPeripheralError, v10, 0LL, 0LL);
    _BYTE *v12 = 1;
    swift_willThrow(v11);
    uint64_t v14 = *(void *)(v0 + 280);
    uint64_t v13 = *(void *)(v0 + 288);
    uint64_t v15 = *(void *)(v0 + 264);
    uint64_t v17 = *(void *)(v0 + 232);
    uint64_t v16 = *(void *)(v0 + 240);
    sub_100018C68(v13, type metadata accessor for BeaconIdentifier);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }

  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 136);
    sub_100012ED8((void *)(v0 + 136), *(void *)(v0 + 160));
    unint64_t v18 = (uint64_t (*)(void))((char *)&dword_10099C8A8 + dword_10099C8A8);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099C8AC);
    *(void *)(v0 + 31_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100641308;
    uint64_t v4 = v18;
    return v4();
  }

  __break(1u);
  return result;
}

uint64_t sub_100641308(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 312LL);
  *(void *)(*(void *)v1 + 32Hasher.init(_seed:)(v7, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100641364, 0LL, 0LL);
}

uint64_t sub_100641364()
{
  uint64_t v1 = *(void *)(v0 + 320);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 136));
  if (v1) {
    return swift_task_switch(sub_10064150C, *(void *)(v0 + 320), 0LL);
  }
  if (qword_10099B4F0 != -1) {
    swift_once(&qword_10099B4F0, sub_1004B82C0);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = sub_10000A720(v3, (uint64_t)qword_100A2AB30);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "No BeaconKeyService available!", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  unint64_t v8 = sub_100641B4C();
  uint64_t v9 = swift_allocError(&type metadata for ManagedCBPeripheralError, v8, 0LL, 0LL);
  *unint64_t v10 = 1;
  swift_willThrow(v9);
  swift_release();
  uint64_t v12 = *(void *)(v0 + 280);
  uint64_t v11 = *(void *)(v0 + 288);
  uint64_t v13 = *(void *)(v0 + 264);
  uint64_t v15 = *(void *)(v0 + 232);
  uint64_t v14 = *(void *)(v0 + 240);
  sub_100018C68(v11, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10064150C()
{
  uint64_t v1 = *(void **)(v0[40] + 128);
  if (v1)
  {
    sub_100475FD8(v0[28], v1, v0[29]);
    v0[41] = 0LL;
    swift_task_switch(sub_100641578, 0LL, 0LL);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_100641578()
{
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = type metadata accessor for KeyGenerationBeaconInfo(0LL);
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(v1, 1LL, v2);
  uint64_t v4 = *(void *)(v0 + 248);
  uint64_t v5 = *(void *)(v0 + 256);
  uint64_t v6 = *(void *)(v0 + 240);
  if (v3 == 1)
  {
    sub_100015794(v1, &qword_1009A8E90);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v6, 1LL, 1LL, v4);
  }

  else
  {
    (*(void (**)(void, uint64_t, void))(v5 + 16))( *(void *)(v0 + 240),  v1 + *(int *)(v2 + 20),  *(void *)(v0 + 248));
    sub_100018C68(v1, type metadata accessor for KeyGenerationBeaconInfo);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v6, 0LL, 1LL, v4);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1LL, v4) != 1)
    {
      uint64_t v31 = *(void *)(v0 + 272);
      uint64_t v32 = *(void *)(v0 + 224);
      (*(void (**)(void, void, void))(*(void *)(v0 + 256) + 32LL))( *(void *)(v0 + 264),  *(void *)(v0 + 240),  *(void *)(v0 + 248));
      uint64_t v33 = v32 + *(int *)(v31 + 20);
      uint64_t v34 = (void *)swift_task_alloc(dword_1009BCD2C);
      *(void *)(v0 + 336) = v34;
      *uint64_t v34 = v0;
      v34[1] = sub_100641A48;
      return sub_1006D5220(*(void *)(v0 + 216), v33, *(void *)(v0 + 264));
    }
  }

  sub_100015794(*(void *)(v0 + 240), (uint64_t *)&unk_10099D720);
  if (qword_10099B4F0 != -1) {
    swift_once(&qword_10099B4F0, sub_1004B82C0);
  }
  uint64_t v7 = *(void *)(v0 + 280);
  uint64_t v8 = *(void *)(v0 + 288);
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_10000A720(v9, (uint64_t)qword_100A2AB30);
  uint64_t v10 = sub_10001DC4C(v8, v7, type metadata accessor for BeaconIdentifier);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter(v11);
  BOOL v13 = os_log_type_enabled(v11, v12);
  uint64_t v14 = *(void *)(v0 + 280);
  if (v13)
  {
    uint64_t v15 = swift_slowAlloc(22LL, -1LL);
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    uint64_t v35 = v16;
    *(_DWORD *)uint64_t v15 = 141558275;
    *(void *)(v0 + 200) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2081;
    uint64_t v17 = type metadata accessor for UUID(0LL);
    uint64_t v18 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter(v17, v18);
    unint64_t v37 = v19;
    v20._countAndFlagsBits = 47LL;
    v20._object = (void *)0xE100000000000000LL;
    String.append(_:)(v20);
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v17, v18);
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 208) = sub_1003F11D4(v36, v37, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68(v14, type metadata accessor for BeaconIdentifier);
    _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "No base date for beacon %{private,mask.hash}s.",  (uint8_t *)v15,  0x16u);
    swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {
    sub_100018C68(*(void *)(v0 + 280), type metadata accessor for BeaconIdentifier);
  }

  unint64_t v22 = sub_100641B4C();
  uint64_t v23 = swift_allocError(&type metadata for ManagedCBPeripheralError, v22, 0LL, 0LL);
  *uint64_t v24 = 3;
  swift_willThrow(v23);
  swift_release();
  swift_release();
  uint64_t v25 = *(void *)(v0 + 280);
  uint64_t v26 = *(void *)(v0 + 288);
  uint64_t v27 = *(void *)(v0 + 264);
  uint64_t v29 = *(void *)(v0 + 232);
  uint64_t v28 = *(void *)(v0 + 240);
  sub_100018C68(v26, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v26);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006419B4()
{
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 264);
  uint64_t v5 = *(void *)(v0 + 232);
  uint64_t v4 = *(void *)(v0 + 240);
  sub_100018C68(v1, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100641A48()
{
  return swift_task_switch(sub_100641A9C, 0LL, 0LL);
}

uint64_t sub_100641A9C()
{
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v4 = *(void *)(v0 + 256);
  uint64_t v3 = *(void *)(v0 + 264);
  uint64_t v6 = *(void *)(v0 + 240);
  uint64_t v5 = *(void *)(v0 + 248);
  uint64_t v7 = *(void *)(v0 + 232);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_100018C68(v1, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100641B4C()
{
  unint64_t result = qword_1009B9050;
  if (!qword_1009B9050)
  {
    unint64_t result = swift_getWitnessTable(&unk_100818DB8, &type metadata for ManagedCBPeripheralError);
    atomic_store(result, &qword_1009B9050);
  }

  return result;
}

uint64_t sub_100641B90()
{
  uint64_t v1 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_release();
  swift_release();
  uint64_t v7 = v0 + v4;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
  v9(v7, v8);
  v9(v7 + *(int *)(v1 + 20), v8);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100641C40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(v3 - 8) + 80LL);
  return sub_100504F30(v1 + *(int *)(v3 + 20) + ((v4 + 40) & ~v4), a1);
}

uint64_t sub_100641C90@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1007C8920(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

void *sub_100641CA8(void *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  a2(a1[2], a1[3]);
  a2(v4, v5);
  return a1;
}

uint64_t sub_100641CF0(uint64_t a1)
{
  return a1;
}

char *sub_100641D34@<X0>(char **a1@<X8>)
{
  unint64_t result = sub_100506C30();
  *a1 = result;
  return result;
}

uint64_t sub_100641D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc(dword_1009B9094);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v9;
  void *v9 = v3;
  v9[1] = sub_1000159BC;
  return sub_100633CD0(a1, a2, v6, v7, v8);
}

void *sub_100641DDC@<X0>(void *a1@<X8>)
{
  unint64_t result = sub_1005073E4();
  *a1 = result;
  return result;
}

uint64_t sub_100641E04(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc(dword_1009B90A4);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v9;
  void *v9 = v3;
  v9[1] = sub_100015D58;
  return sub_100634D08(a1, a2, v6, v7, v8);
}

uint64_t sub_100641E80()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  swift_release();
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v0 + v4 + v1[18];
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  uint64_t v12 = v0 + v4 + v1[19];
  BOOL v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1LL, v7)) {
    v9(v12, v7);
  }
  uint64_t v14 = v0 + v4 + v1[20];
  uint64_t v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v14, 1LL, v15))
  {
    uint64_t v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1LL, v7)) {
      v9(v16, v7);
    }
  }

  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100642028@<X0>(void *a1@<X8>)
{
  return sub_100642300(type metadata accessor for SharedBeaconRecord, (uint64_t)sub_10014F098, a1);
}

uint64_t sub_10064203C()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1006422EC@<X0>(void *a1@<X8>)
{
  return sub_100642300(type metadata accessor for OwnedBeaconRecord, (uint64_t)sub_10015471C, a1);
}

uint64_t sub_100642300@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(a1(0LL) - 8) + 80LL);
  return sub_10063505C(*(void *)(v3 + 16), v3 + ((v7 + 40) & ~v7), a1, a2, a3);
}

uint64_t sub_100642360()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*((void *)v0 + 2));
  swift_release(*((void *)v0 + 3));
  swift_release(*((void *)v0 + 4));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1006423E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  return sub_10050F124(v1 + ((v3 + 40) & ~v3), a1);
}

uint64_t destroy for SingleUserAdapter(void *a1)
{
  return swift_release(a1[2]);
}

uint64_t *_s12searchpartyd17SingleUserAdapterVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[2];
  a1[2] = v5;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t *assignWithCopy for SingleUserAdapter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  uint64_t v6 = a1[1];
  uint64_t v7 = a2[1];
  a1[1] = v7;
  swift_retain(v7);
  swift_release(v6);
  uint64_t v8 = a1[2];
  uint64_t v9 = a2[2];
  a1[2] = v9;
  swift_retain(v9);
  swift_release(v8);
  return a1;
}

void *assignWithTake for SingleUserAdapter(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  uint64_t v5 = a1[2];
  a1[2] = *(void *)(a2 + 16);
  swift_release(v5);
  return a1;
}

ValueMetadata *type metadata accessor for SingleUserAdapter()
{
  return &type metadata for SingleUserAdapter;
}

uint64_t sub_10064257C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2AFC8);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2AFC8);
  if (qword_10099B4D0 != -1) {
    swift_once(&qword_10099B4D0, sub_1004AB644);
  }
  uint64_t v2 = sub_10000A720(v0, (uint64_t)qword_100A2AB00);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_10064260C(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009B9450);
  uint64_t v5 = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v3[19] = v5;
  swift_defaultActor_initialize(v2);
  *(void *)(v2 + 144) = _swiftEmptyDictionarySingleton;
  *(void *)(v2 + 15_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0LL;
  type metadata accessor for CentralManager(0LL);
  uint64_t v6 = sub_100004AEC(&qword_1009A7C68);
  uint64_t v7 = type metadata accessor for CentralManager.Options(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = swift_allocObject( v6,  ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
       + *(void *)(v8 + 72),
         *(unsigned __int8 *)(v8 + 80) | 7LL);
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  static CentralManager.Options.allowDuplicates.getter();
  v3[15] = v9;
  uint64_t v10 = sub_100015C48( (unint64_t *)&unk_1009B9460,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager.Options,  (uint64_t)&protocol conformance descriptor for CentralManager.Options);
  uint64_t v11 = sub_100004AEC(&qword_1009A7C70);
  uint64_t v12 = sub_1000372EC( (unint64_t *)&unk_1009B9470,  &qword_1009A7C70,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v3 + 15, v11, v12, v7, v10);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v5, 0LL, 1LL, v7);
  uint64_t v13 = (void *)swift_task_alloc(async function pointer to CentralManager.__allocating_init(options:)[1]);
  v3[20] = v13;
  *uint64_t v13 = v3;
  v13[1] = sub_1006427AC;
  return CentralManager.__allocating_init(options:)(v5);
}

uint64_t sub_1006427AC(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 144);
  uint64_t v5 = *(void *)(*v1 + 128);
  uint64_t v6 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 160));
  *(void *)(v4 + 128) = a1;
  *(void *)(v4 + 136) = v5;
  uint64_t v7 = qword_10099B9E0;
  swift_retain();
  if (v7 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v3 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v3 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v3 + 80))
  {
    sub_100012EC0((__int128 *)(v3 + 56), v3 + 16);
    sub_100012ED8((void *)(v3 + 16), *(void *)(v3 + 40));
    uint64_t v10 = (uint64_t (__cdecl *)())((char *)&dword_10099C8A8 + dword_10099C8A8);
    uint64_t v9 = (void *)swift_task_alloc(unk_10099C8AC);
    *(void *)(v3 + 168) = v9;
    void *v9 = v6;
    v9[1] = sub_1006428DC;
    return v10();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1006428DC(uint64_t a1)
{
  uint64_t v3 = (void *)(*v1 + 16);
  uint64_t v4 = *(void *)(*v1 + 168);
  uint64_t v5 = *v1;
  *(void *)(v5 + 176) = a1;
  swift_task_dealloc(v4);
  if (a1)
  {
    uint64_t v7 = *(void *)(v5 + 136);
    uint64_t v6 = *(void *)(v5 + 144);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v3);
    *(void *)(v6 + 11_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = a1;
    *(void *)(v6 + 120) = v7;
    swift_retain();
    return swift_task_switch(sub_100642B20, v6, 0LL);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v5 + 16));
    if (qword_10099B6D8 != -1) {
      swift_once(&qword_10099B6D8, sub_10064257C);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    uint64_t v10 = sub_10000A720(v9, (uint64_t)qword_100A2AFC8);
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.fault.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Missing BeaconKeyService!", v13, 2u);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    uint64_t v14 = *(void *)(v5 + 144);
    uint64_t v15 = *(void *)(v5 + 152);

    uint64_t v16 = type metadata accessor for BeaconScanner.Error(0LL);
    uint64_t v17 = sub_100015C48( &qword_1009B9338,  255LL,  type metadata accessor for BeaconScanner.Error,  (uint64_t)&unk_100811B20);
    swift_allocError(v16, v17, 0LL, 0LL);
    uint64_t v19 = v18;
    uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009B9340);
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))( v19,  2LL,  2LL,  v20);
    swift_willThrow(v21);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v22 = type metadata accessor for BeaconScanner();
    swift_defaultActor_destroy(v14);
    swift_release();
    swift_release();
    swift_deallocPartialClassInstance(v14, v22, 160LL, 15LL);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v5 + 8))();
  }

uint64_t sub_100642B20()
{
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 152);
  swift_release(*(void *)(v0 + 128));
  swift_release(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 144));
}

uint64_t sub_100642B70(char a1)
{
  *(void *)(v2 + 24) = v1;
  *(_BYTE *)(v2 + 23_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = a1;
  *(void *)(v2 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *v1;
  uint64_t v3 = sub_100004AEC(&qword_1009A9BF0);
  *(void *)(v2 + 40) = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009BA040);
  *(void *)(v2 + 48) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v2 + 56) = v5;
  uint64_t v6 = *(void *)(v5 + 64);
  *(void *)(v2 + 64) = v6;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v2 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = swift_task_alloc(v7);
  *(void *)(v2 + 80) = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for ScanMode(0LL);
  *(void *)(v2 + 88) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v2 + 96) = v9;
  *(void *)(v2 + 104) = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009B9330);
  *(void *)(v2 + 11_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v2 + 120) = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v2 + 128) = swift_task_alloc(v12);
  *(void *)(v2 + 136) = swift_task_alloc(v12);
  uint64_t v13 = type metadata accessor for CentralManager.State(0LL);
  *(void *)(v2 + 144) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v2 + 15_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v14;
  *(void *)(v2 + 160) = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100642CA4, v1, 0LL);
}

uint64_t sub_100642CA4()
{
  uint64_t v1 = swift_allocObject(&unk_10096EA90, 32LL, 7LL);
  __int128 v2 = *(_OWORD *)(v0 + 24);
  *(void *)(v0 + 168) = v1;
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  uint64_t v3 = async function pointer to XPCSession.proxy(errorHandler:)[1];
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc(v3);
  *(void *)(v0 + 176) = v4;
  void *v4 = v0;
  v4[1] = sub_100642D40;
  return XPCSession.proxy(errorHandler:)(v0 + 16, sub_10064CC90, v1);
}

uint64_t sub_100642D40()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 176LL));
  swift_release();
  return swift_task_switch(sub_100642DA0, v1, 0LL);
}

uint64_t sub_100642DA0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  *(void *)(v0 + 184) = v1;
  if (v1)
  {
    uint64_t v3 = *(void *)(v0 + 152);
    uint64_t v2 = *(void *)(v0 + 160);
    uint64_t v4 = *(void *)(v0 + 144);
    *(void *)(v0 + 19_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(void *)(*(void *)(v0 + 24) + 128LL);
    (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))( v2,  enum case for CentralManager.State.poweredOn(_:),  v4);
    uint64_t v5 = (void *)swift_task_alloc(async function pointer to CentralManagerProtocol.await(state:)[1]);
    *(void *)(v0 + 200) = v5;
    uint64_t v6 = type metadata accessor for CentralManager(0LL);
    uint64_t v7 = sub_100015C48( &qword_1009A1BA0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager,  (uint64_t)&protocol conformance descriptor for CentralManager);
    *uint64_t v5 = v0;
    v5[1] = sub_100642F54;
    return CentralManagerProtocol.await(state:)(*(void *)(v0 + 160), v6, v7);
  }

  else
  {
    uint64_t v9 = type metadata accessor for BeaconScanner.Error(0LL);
    uint64_t v10 = sub_100015C48( &qword_1009B9338,  255LL,  type metadata accessor for BeaconScanner.Error,  (uint64_t)&unk_100811B20);
    swift_allocError(v9, v10, 0LL, 0LL);
    uint64_t v12 = v11;
    uint64_t v13 = sub_100004AEC((uint64_t *)&unk_1009B9340);
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))( v12,  1LL,  2LL,  v13);
    swift_willThrow(v14);
    uint64_t v16 = *(void *)(v0 + 128);
    uint64_t v15 = *(void *)(v0 + 136);
    uint64_t v17 = *(void *)(v0 + 104);
    uint64_t v19 = *(void *)(v0 + 72);
    uint64_t v18 = *(void *)(v0 + 80);
    uint64_t v20 = *(void *)(v0 + 40);
    swift_task_dealloc(*(void *)(v0 + 160));
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100642F54()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 200LL);
  *(void *)(*(void *)v1 + 208LL) = v0;
  swift_task_dealloc(v3);
  uint64_t v5 = v2[19];
  uint64_t v4 = v2[20];
  uint64_t v6 = v2[18];
  uint64_t v7 = v2[3];
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0) {
    uint64_t v8 = sub_100643384;
  }
  else {
    uint64_t v8 = sub_100642FCC;
  }
  return swift_task_switch(v8, v7, 0LL);
}

uint64_t sub_100642FCC()
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v3 = v0[11];
  uint64_t v4 = enum case for ScanUseCase.beaconScan(_:);
  uint64_t v5 = type metadata accessor for ScanUseCase(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104LL))(v1, v4, v5);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for ScanMode.useCase(_:), v3);
  v0[27] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1006430A0;
  return ((uint64_t (*)(void, void, unint64_t, void))v8)( v0[17],  v0[13],  0xD02AB486CEDC0000LL,  0LL);
}

uint64_t sub_1006430A0()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 216LL);
  *(void *)(*(void *)v1 + 224LL) = v0;
  swift_task_dealloc(v3);
  uint64_t v5 = v2[12];
  uint64_t v4 = v2[13];
  uint64_t v6 = v2[11];
  uint64_t v7 = v2[3];
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0) {
    uint64_t v8 = sub_100643418;
  }
  else {
    uint64_t v8 = sub_100643118;
  }
  return swift_task_switch(v8, v7, 0LL);
}

uint64_t sub_100643118()
{
  uint64_t v30 = *(void *)(v0 + 184);
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v31 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v32 = *(void *)(v0 + 120);
  uint64_t v33 = *(void *)(v0 + 160);
  uint64_t v34 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v7 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  uint64_t v23 = v6;
  uint64_t v25 = v7;
  uint64_t v26 = *(void *)(v0 + 64);
  uint64_t v8 = *(void *)(v0 + 24);
  uint64_t v29 = *(void *)(v0 + 32);
  char v28 = *(_BYTE *)(v0 + 232);
  uint64_t v27 = v2;
  (*(void (**)(uint64_t))(v32 + 16))(v1);
  uint64_t v9 = type metadata accessor for Peripheral(0LL);
  uint64_t v10 = sub_1000372EC( &qword_1009B9358,  &qword_1009B9330,  (uint64_t)&protocol conformance descriptor for AsyncThrowingStream<A, B>);
  uint64_t v24 = v3;
  AsyncCompactMapSequence.init(_:transform:)(v1, &unk_1009B9350, 0LL, v2, v9, v10);
  uint64_t v11 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v7, 1LL, 1LL, v11);
  uint64_t v12 = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v3, v6);
  uint64_t v14 = sub_100015C48( &qword_1009B9368,  v13,  (uint64_t (*)(uint64_t))type metadata accessor for BeaconScanner,  (uint64_t)&unk_100811AF0);
  uint64_t v15 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v16 = (v15 + 32) & ~v15;
  unint64_t v17 = (v16 + v26 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v19 = swift_allocObject(&unk_10096EAB8, v18 + 8, v15 | 7);
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = v8;
  *(void *)(v19 + 24) = v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v19 + v16, v12, v23);
  unint64_t v20 = v19 + ((v16 + v26 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  *(void *)unint64_t v20 = v8;
  *(_BYTE *)(v20 + 8) = v28;
  *(void *)(v19 + v1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = v30;
  *(void *)(v19 + v18) = v29;
  swift_retain_n(v8, 2LL);
  uint64_t v21 = sub_1003B76DC(v25, (uint64_t)&unk_1009B9370, v19);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v24, v23);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v27);
  *(void *)(v8 + 15_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v21;
  swift_release();
  swift_task_dealloc(v33);
  swift_task_dealloc(v31);
  swift_task_dealloc(v1);
  swift_task_dealloc(v34);
  swift_task_dealloc(v24);
  swift_task_dealloc(v12);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100643384()
{
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 40);
  swift_task_dealloc(*(void *)(v0 + 160));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100643418()
{
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 40);
  swift_task_dealloc(*(void *)(v0 + 160));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006434AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B6D8 != -1) {
    swift_once(&qword_10099B6D8, sub_10064257C);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_10000A720(v7, (uint64_t)qword_100A2AFC8);
  uint64_t v8 = swift_errorRetain(a1);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.error.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v11 = 138543362;
    uint64_t v13 = _convertErrorToNSError(_:)(a1);
    uint64_t v19 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v11 + 4, v11 + 12);
    uint64_t *v12 = v13;
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "XPC error: %{public}@!", v11, 0xCu);
    uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v12, 1LL, v14);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(a1);
  }

  uint64_t v15 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v6, 1LL, 1LL, v15);
  uint64_t v16 = (void *)swift_allocObject(&unk_10096EB70, 40LL, 7LL);
  void v16[2] = 0LL;
  v16[3] = 0LL;
  v16[4] = a2;
  swift_retain();
  sub_1003EDB00((uint64_t)v6, (uint64_t)&unk_1009B9440, (uint64_t)v16);
  return swift_release();
}

uint64_t sub_1006436D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a4;
  return swift_task_switch(sub_1006436EC, a4, 0LL);
}

uint64_t sub_1006436EC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10064371C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = v3;
  *(_BYTE *)(v2 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *((_BYTE *)a2 + 8);
  return swift_task_switch(sub_100643740, 0LL, 0LL);
}

uint64_t sub_100643740()
{
  if ((*(_BYTE *)(v0 + 32) & 1) != 0) {
    uint64_t v1 = 0LL;
  }
  else {
    uint64_t v1 = swift_retain(*(void *)(v0 + 24));
  }
  **(void **)(v0 + swift_weakDestroy(v0 + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100643788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  *(void *)(v7 + 56) = a5;
  *(void *)(v7 + 64) = a7;
  *(_BYTE *)(v7 + 4swift_weakDestroy(v0 + 16) = a6;
  *(void *)(v7 + 48) = a4;
  uint64_t v9 = sub_100004AEC(&qword_10099E338);
  *(void *)(v7 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v7 + 80) = v10;
  *(void *)(v7 + 88) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DetailedDiscoveredObject(0LL);
  *(void *)(v7 + 96) = v11;
  *(void *)(v7 + 104) = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009B9380);
  *(void *)(v7 + 11_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_1009A1BC0);
  *(void *)(v7 + 120) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v7 + 128) = v14;
  *(void *)(v7 + 136) = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v15 = (*(void *)(*(void *)(sub_100004AEC(&qword_1009B9250) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v7 + 144) = swift_task_alloc(v15);
  *(void *)(v7 + 15_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = swift_task_alloc(v15);
  unint64_t v16 = (*(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009B9390) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v7 + 160) = swift_task_alloc(v16);
  *(void *)(v7 + 168) = swift_task_alloc(v16);
  uint64_t v17 = sub_100004AEC(&qword_10099E6A8);
  *(void *)(v7 + 176) = swift_task_alloc((*(void *)(*(void *)(v17 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for DiscoveredObject(0LL);
  *(void *)(v7 + 184) = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  *(void *)(v7 + 19_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v19;
  *(void *)(v7 + 200) = swift_task_alloc((*(void *)(v19 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_100004AEC(&qword_1009B9330);
  *(void *)(v7 + 208) = v20;
  *(void *)(v7 + 2swift_weakDestroy(v0 + 16) = swift_task_alloc((*(void *)(*(void *)(v20 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100004AEC(&qword_1009B93A0);
  *(void *)(v7 + 224) = swift_task_alloc((*(void *)(*(void *)(v21 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_100004AEC((uint64_t *)&unk_1009B93A8);
  *(void *)(v7 + 23_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v22;
  uint64_t v23 = *(void *)(v22 - 8);
  *(void *)(v7 + 240) = v23;
  *(void *)(v7 + 248) = swift_task_alloc((*(void *)(v23 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100643998, a5, 0LL);
}

uint64_t sub_100643998()
{
  uint64_t v1 = v0[28];
  uint64_t v2 = v0[26];
  uint64_t v3 = v0[7];
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009BA040);
  AsyncCompactMapSequence.base.getter();
  uint64_t v5 = sub_1000372EC( &qword_1009B9358,  &qword_1009B9330,  (uint64_t)&protocol conformance descriptor for AsyncThrowingStream<A, B>);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v2, v5);
  uint64_t v6 = AsyncCompactMapSequence.transform.getter(v4);
  uint64_t v8 = v7;
  uint64_t v9 = type metadata accessor for Peripheral(0LL);
  v0[32] = v9;
  AsyncCompactMapSequence.Iterator.init(_:transform:)(v1, v6, v8, v2, v9, v5);
  uint64_t v11 = sub_100015C48( &qword_1009B9368,  v10,  (uint64_t (*)(uint64_t))type metadata accessor for BeaconScanner,  (uint64_t)&unk_100811AF0);
  v0[33] = v11;
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1009BA070 + dword_1009BA070);
  uint64_t v12 = (void *)swift_task_alloc(unk_1009BA074);
  v0[34] = v12;
  void *v12 = v0;
  v12[1] = sub_100643AE0;
  return v14(v3, v11);
}

uint64_t sub_100643AE0(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  swift_task_dealloc(*(void *)(*(void *)v2 + 272LL));
  if (v1)
  {
    v4[51] = v1;
    uint64_t v5 = v4[7];
    uint64_t v6 = sub_100644C60;
  }

  else
  {
    uint64_t v5 = v4[7];
    v4[35] = a1;
    uint64_t v6 = sub_100643B58;
  }

  return swift_task_switch(v6, v5, 0LL);
}

uint64_t sub_100643B58()
{
  if (v0[35])
  {
    if ((static Task<>.isCancelled.getter() & 1) == 0)
    {
      uint64_t v16 = v0[32];
      uint64_t v17 = sub_100015C48( &qword_1009BA080,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
      uint64_t v18 = dispatch thunk of Actor.unownedExecutor.getter(v16, v17);
      v0[36] = v18;
      v0[37] = v19;
      return swift_task_switch(sub_100643DE8, v18, v19);
    }

    if (qword_10099B6D8 != -1) {
      swift_once(&qword_10099B6D8, sub_10064257C);
    }
    uint64_t v1 = type metadata accessor for Logger(0LL);
    uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A2AFC8);
    uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
    os_log_type_t v4 = static os_log_type_t.error.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Task cancelled!", v5, 2u);
      swift_slowDealloc(v5, -1LL, -1LL);
    }

    swift_release();
  }

  (*(void (**)(void, void))(v0[30] + 8LL))(v0[31], v0[29]);
  if (qword_10099B6D8 != -1) {
    swift_once(&qword_10099B6D8, sub_10064257C);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_10000A720(v6, (uint64_t)qword_100A2AFC8);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.info.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Done scanning", v10, 2u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  uint64_t v11 = v0[8];

  uint64_t v12 = swift_allocObject(&unk_10096EAE0, 24LL, 7LL);
  v0[48] = v12;
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = v11;
  uint64_t v13 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_unknownObjectRetain(v11);
  uint64_t v14 = (void *)swift_task_alloc(v13);
  v0[49] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_100644B10;
  return withTimeout<A>(_:block:)( v14,  1000000000000000000LL,  0LL,  &unk_1009B93C0,  v12,  (char *)&type metadata for () + 8);
}

uint64_t sub_100643DE8()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 304) = dispatch thunk of Peripheral.advertisementData.getter();
  return swift_task_switch(sub_100643E2C, v1, 0LL);
}

uint64_t sub_100643E2C()
{
  uint64_t v1 = v0[38];
  if (v1)
  {
    sub_10028C804(v1);
    v0[39] = v2;
    return swift_task_switch(sub_1006440CC, v0[36], v0[37]);
  }

  else
  {
    if (qword_10099B6D8 != -1) {
      swift_once(&qword_10099B6D8, sub_10064257C);
    }
    uint64_t v4 = v0[35];
    uint64_t v5 = type metadata accessor for Logger(0LL);
    sub_10000A720(v5, (uint64_t)qword_100A2AFC8);
    uint64_t v6 = swift_retain_n(v4, 2LL);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.error.getter(v7);
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = v0[35];
    if (v9)
    {
      uint64_t v11 = v0[11];
      uint64_t v21 = v0[10];
      uint64_t v12 = v0[9];
      uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v22 = swift_slowAlloc(32LL, -1LL);
      uint64_t v24 = v22;
      *(_DWORD *)uint64_t v13 = 136446210;
      Peripheral.id.getter(v22);
      uint64_t v14 = sub_1000372EC( (unint64_t *)&unk_1009B93D0,  &qword_10099E338,  (uint64_t)&protocol conformance descriptor for Identifier<A>);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
      unint64_t v17 = v16;
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v11, v12);
      v0[3] = sub_1003F11D4(v15, v17, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v13 + 4, v13 + 12);
      swift_release_n(v10, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Missing advertisementData for %{public}s!", v13, 0xCu);
      swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_release();
    }

    else
    {

      swift_release_n(v10, 3LL);
    }

    uint64_t v18 = v0[33];
    uint64_t v19 = v0[7];
    uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1009BA070 + dword_1009BA070);
    uint64_t v20 = (void *)swift_task_alloc(unk_1009BA074);
    v0[47] = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_100644A98;
    return v23(v19, v18);
  }

uint64_t sub_1006440CC()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 320) = dispatch thunk of Peripheral.rssi.getter();
  *(_BYTE *)(v0 + 41_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = v2;
  return swift_task_switch(sub_100644114, v1, 0LL);
}

uint64_t sub_100644114()
{
  if ((*(_BYTE *)(v0 + 417) & 1) != 0) {
    uint64_t v1 = 0LL;
  }
  else {
    uint64_t v1 = *(void *)(v0 + 320);
  }
  if (v1 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_14;
  }

  if (v1 > 0x7FFFFFFF)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    swift_once(&qword_10099B6D8, sub_10064257C);
    goto LABEL_8;
  }

  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 176);
  sub_1000ADC10(*(void *)(v0 + 312), v1, v4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1LL, v2) != 1)
  {
    uint64_t v25 = *(void *)(v0 + 200);
    uint64_t v26 = *(void *)(v0 + 176);
    uint64_t v27 = *(void *)(v0 + 184);
    swift_bridgeObjectRelease();
    sub_10002218C(v26, v25, type metadata accessor for DiscoveredObject);
    char v28 = (uint64_t *)(v25 + *(int *)(v27 + 36));
    uint64_t v29 = *v28;
    *(void *)(v0 + 328) = *v28;
    uint64_t v30 = v28[1];
    *(void *)(v0 + 336) = v30;
    sub_10008699C(v29, v30);
    uint64_t v31 = (void *)swift_task_alloc(dword_1009B90F4);
    *(void *)(v0 + 344) = v31;
    *uint64_t v31 = v0;
    v31[1] = sub_10064452C;
    return sub_100646854(*(void *)(v0 + 168), v29, v30);
  }

  sub_100015794(*(void *)(v0 + 176), &qword_10099E6A8);
  if (qword_10099B6D8 != -1) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v5 = *(void *)(v0 + 304);
  uint64_t v6 = *(void *)(v0 + 280);
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_10000A720(v7, (uint64_t)qword_100A2AFC8);
  swift_retain_n(v6, 2LL);
  swift_bridgeObjectRetain(v5);
  BOOL v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.error.getter(v9);
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v12 = *(void *)(v0 + 304);
  uint64_t v13 = *(void *)(v0 + 280);
  if (v11)
  {
    uint64_t v14 = *(void *)(v0 + 88);
    uint64_t v36 = *(void *)(v0 + 80);
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v16 = swift_slowAlloc(22LL, -1LL);
    uint64_t v38 = swift_slowAlloc(64LL, -1LL);
    uint64_t v40 = v38;
    *(_DWORD *)uint64_t v16 = 136446466;
    os_log_type_t type = v10;
    Peripheral.id.getter(v38);
    uint64_t v17 = sub_1000372EC( (unint64_t *)&unk_1009B93D0,  &qword_10099E338,  (uint64_t)&protocol conformance descriptor for Identifier<A>);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter(v15, v17);
    unint64_t v20 = v19;
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v14, v15);
    *(void *)(v0 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = sub_1003F11D4(v18, v20, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v16 + 4, v16 + 12);
    swift_release_n(v13, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2080;
    swift_bridgeObjectRetain(v12);
    uint64_t v21 = sub_100004AEC(&qword_1009A3500);
    uint64_t v22 = Dictionary.description.getter(v12, &type metadata for String, v21, &protocol witness table for String);
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 40) = sub_1003F11D4(v22, v24, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease_n(v12, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v9,  type,  "Could not parse advertisementData for %{public}s: %s",  (uint8_t *)v16,  0x16u);
    swift_arrayDestroy(v38, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_release();
  }

  else
  {

    swift_bridgeObjectRelease_n(v12, 2LL);
    swift_release_n(v13, 3LL);
  }

  uint64_t v33 = *(void *)(v0 + 264);
  uint64_t v34 = *(void *)(v0 + 56);
  uint64_t v39 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1009BA070 + dword_1009BA070);
  uint64_t v35 = (void *)swift_task_alloc(unk_1009BA074);
  *(void *)(v0 + 376) = v35;
  *uint64_t v35 = v0;
  v35[1] = sub_100644A98;
  return v39(v34, v33);
}

uint64_t sub_10064452C()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 344LL);
  *(void *)(*(void *)v1 + 352LL) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = v2[41];
  uint64_t v5 = v2[42];
  uint64_t v6 = v2[7];
  sub_1000869A4(v4, v5);
  if (v0) {
    uint64_t v7 = sub_100644EA8;
  }
  else {
    uint64_t v7 = sub_10064459C;
  }
  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_10064459C()
{
  int v1 = *(unsigned __int8 *)(v0 + 416);
  sub_10001581C(*(void *)(v0 + 168), *(void *)(v0 + 160), (uint64_t *)&unk_1009B9390);
  uint64_t v2 = *(void *)(v0 + 160);
  if (v1 != 1)
  {
    uint64_t v12 = (uint64_t *)&unk_1009B9390;
    uint64_t v13 = *(void *)(v0 + 160);
LABEL_12:
    sub_100015794(v13, v12);
    goto LABEL_13;
  }

  uint64_t v3 = type metadata accessor for BeaconDetails(0LL);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48LL))(v2, 1LL, v3);
  sub_100015794(v2, (uint64_t *)&unk_1009B9390);
  if (v4 == 1)
  {
    int v5 = (*(unsigned __int8 *)(*(void *)(v0 + 200) + *(int *)(*(void *)(v0 + 184) + 44LL)) >> 4) & 3;
    if (v5 == 2)
    {
      uint64_t v6 = *(void *)(v0 + 120);
      uint64_t v7 = *(void *)(v0 + 128);
      uint64_t v8 = *(void *)(v0 + 112);
      uint64_t v9 = type metadata accessor for Service(0LL);
      os_log_type_t v10 = "87290102-3C51-43B1-A1A9-11B9DC38478B";
      uint64_t v11 = 36LL;
    }

    else
    {
      if (v5 != 3)
      {
        (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 128) + 56LL))( *(void *)(v0 + 112),  1LL,  1LL,  *(void *)(v0 + 120));
LABEL_11:
        uint64_t v13 = *(void *)(v0 + 112);
        uint64_t v12 = (uint64_t *)&unk_1009B9380;
        goto LABEL_12;
      }

      uint64_t v6 = *(void *)(v0 + 120);
      uint64_t v7 = *(void *)(v0 + 128);
      uint64_t v8 = *(void *)(v0 + 112);
      uint64_t v9 = type metadata accessor for Service(0LL);
      os_log_type_t v10 = "FD44";
      uint64_t v11 = 4LL;
    }

    Identifier.init(stringLiteral:)(v10, v11, 2LL, v9);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v8, 0LL, 1LL, v6);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1LL, v6) != 1)
    {
      uint64_t v14 = *(void *)(v0 + 280);
      (*(void (**)(void, void, void))(*(void *)(v0 + 128) + 32LL))( *(void *)(v0 + 136),  *(void *)(v0 + 112),  *(void *)(v0 + 120));
      uint64_t v15 = (void *)swift_task_alloc(dword_1009B93E4);
      *(void *)(v0 + 360) = v15;
      void *v15 = v0;
      v15[1] = sub_1006448BC;
      return sub_1006455EC(*(void *)(v0 + 144), v14, *(void *)(v0 + 136));
    }

    goto LABEL_11;
  }

uint64_t sub_1006448BC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 360);
  *(void *)(*v1 + 368) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    int v4 = sub_100645114;
  }
  else {
    int v4 = sub_100644920;
  }
  return swift_task_switch(v4, *(void *)(v2 + 56), 0LL);
}

uint64_t sub_100644920()
{
  uint64_t v2 = v0[18];
  uint64_t v1 = v0[19];
  (*(void (**)(void, void))(v0[16] + 8LL))(v0[17], v0[15]);
  sub_100015750(v2, v1, &qword_1009B9250);
  uint64_t v3 = v0[25];
  uint64_t v4 = v0[21];
  uint64_t v5 = v0[19];
  uint64_t v6 = v0[12];
  uint64_t v7 = (char *)v0[13];
  uint64_t v8 = (void *)v0[8];
  sub_10001DC4C(v3, (uint64_t)v7, type metadata accessor for DiscoveredObject);
  sub_10001581C(v5, (uint64_t)&v7[*(int *)(v6 + 24)], &qword_1009B9250);
  sub_10001581C(v4, (uint64_t)&v7[*(int *)(v6 + 20)], (uint64_t *)&unk_1009B9390);
  id v9 = sub_10064CEB8(v7);
  [v8 discoveredObject:v9];
  swift_release();

  sub_100018C68((uint64_t)v7, type metadata accessor for DetailedDiscoveredObject);
  sub_100015794(v5, &qword_1009B9250);
  sub_100015794(v4, (uint64_t *)&unk_1009B9390);
  sub_100018C68(v3, type metadata accessor for DiscoveredObject);
  uint64_t v10 = v0[33];
  uint64_t v11 = v0[7];
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1009BA070 + dword_1009BA070);
  uint64_t v12 = (void *)swift_task_alloc(unk_1009BA074);
  v0[47] = v12;
  void *v12 = v0;
  v12[1] = sub_100644A98;
  return v14(v11, v10);
}

uint64_t sub_100644A98(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  swift_task_dealloc(*(void *)(*(void *)v2 + 376LL));
  if (v1)
  {
    v4[51] = v1;
    uint64_t v5 = v4[7];
    uint64_t v6 = sub_100644C60;
  }

  else
  {
    uint64_t v5 = v4[7];
    v4[35] = a1;
    uint64_t v6 = sub_100643B58;
  }

  return swift_task_switch(v6, v5, 0LL);
}

uint64_t sub_100644B10()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 392);
  *(void *)(*v1 + 400) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 56);
    uint64_t v5 = sub_1006453AC;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 56);
    swift_release();
    uint64_t v5 = sub_100644B84;
    uint64_t v4 = v6;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_100644B84()
{
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v5 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v7 = *(void *)(v0 + 152);
  uint64_t v6 = *(void *)(v0 + 160);
  uint64_t v9 = *(void *)(v0 + 136);
  uint64_t v8 = *(void *)(v0 + 144);
  uint64_t v11 = *(void *)(v0 + 112);
  uint64_t v12 = *(void *)(v0 + 104);
  uint64_t v13 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 248));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100644C60()
{
  uint64_t v1 = *(void *)(v0 + 408);
  if (qword_10099B6D8 != -1) {
    swift_once(&qword_10099B6D8, sub_10064257C);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2AFC8);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v6 = 138543362;
    uint64_t v8 = _convertErrorToNSError(_:)(v1);
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *uint64_t v7 = v8;
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error during scan: %{public}@", v6, 0xCu);
    uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    swift_errorRelease(v1);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v10 = *(void *)(v0 + 216);
  uint64_t v11 = *(void *)(v0 + 224);
  uint64_t v12 = *(void *)(v0 + 200);
  uint64_t v14 = *(void *)(v0 + 168);
  uint64_t v13 = *(void *)(v0 + 176);
  uint64_t v16 = *(void *)(v0 + 152);
  uint64_t v15 = *(void *)(v0 + 160);
  uint64_t v18 = *(void *)(v0 + 136);
  uint64_t v17 = *(void *)(v0 + 144);
  uint64_t v20 = *(void *)(v0 + 112);
  uint64_t v21 = *(void *)(v0 + 104);
  uint64_t v22 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 248));
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100644EA8()
{
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 232);
  uint64_t v4 = *(void *)(v0 + 200);
  swift_release();
  sub_100018C68(v4, type metadata accessor for DiscoveredObject);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v5 = *(void *)(v0 + 352);
  if (qword_10099B6D8 != -1) {
    swift_once(&qword_10099B6D8, sub_10064257C);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10000A720(v6, (uint64_t)qword_100A2AFC8);
  uint64_t v7 = swift_errorRetain(v5);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.error.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v10 = 138543362;
    uint64_t v12 = _convertErrorToNSError(_:)(v5);
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v10 + 4, v10 + 12);
    uint64_t *v11 = v12;
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Error during scan: %{public}@", v10, 0xCu);
    uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v11, 1LL, v13);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);

    swift_errorRelease(v5);
  }

  else
  {
    swift_errorRelease(v5);
    swift_errorRelease(v5);
  }

  uint64_t v14 = *(void *)(v0 + 216);
  uint64_t v15 = *(void *)(v0 + 224);
  uint64_t v16 = *(void *)(v0 + 200);
  uint64_t v18 = *(void *)(v0 + 168);
  uint64_t v17 = *(void *)(v0 + 176);
  uint64_t v20 = *(void *)(v0 + 152);
  uint64_t v19 = *(void *)(v0 + 160);
  uint64_t v22 = *(void *)(v0 + 136);
  uint64_t v21 = *(void *)(v0 + 144);
  uint64_t v24 = *(void *)(v0 + 112);
  uint64_t v25 = *(void *)(v0 + 104);
  uint64_t v26 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 248));
  swift_task_dealloc(v15);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100645114()
{
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 232);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v5 = *(void *)(v0 + 168);
  uint64_t v7 = *(void *)(v0 + 128);
  uint64_t v6 = *(void *)(v0 + 136);
  uint64_t v8 = *(void *)(v0 + 120);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  sub_100015794(v5, (uint64_t *)&unk_1009B9390);
  sub_100018C68(v4, type metadata accessor for DiscoveredObject);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v9 = *(void *)(v0 + 368);
  if (qword_10099B6D8 != -1) {
    swift_once(&qword_10099B6D8, sub_10064257C);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  sub_10000A720(v10, (uint64_t)qword_100A2AFC8);
  uint64_t v11 = swift_errorRetain(v9);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.error.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v15 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v14 = 138543362;
    uint64_t v16 = _convertErrorToNSError(_:)(v9);
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v14 + 4, v14 + 12);
    uint64_t *v15 = v16;
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Error during scan: %{public}@", v14, 0xCu);
    uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v15, 1LL, v17);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);

    swift_errorRelease(v9);
  }

  else
  {
    swift_errorRelease(v9);
    swift_errorRelease(v9);
  }

  uint64_t v18 = *(void *)(v0 + 216);
  uint64_t v19 = *(void *)(v0 + 224);
  uint64_t v20 = *(void *)(v0 + 200);
  uint64_t v22 = *(void *)(v0 + 168);
  uint64_t v21 = *(void *)(v0 + 176);
  uint64_t v24 = *(void *)(v0 + 152);
  uint64_t v23 = *(void *)(v0 + 160);
  uint64_t v26 = *(void *)(v0 + 136);
  uint64_t v25 = *(void *)(v0 + 144);
  uint64_t v28 = *(void *)(v0 + 112);
  uint64_t v29 = *(void *)(v0 + 104);
  uint64_t v30 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 248));
  swift_task_dealloc(v19);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006453AC()
{
  uint64_t v1 = *(void *)(v0 + 400);
  if (qword_10099B6D8 != -1) {
    swift_once(&qword_10099B6D8, sub_10064257C);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2AFC8);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v6 = 138543362;
    uint64_t v8 = _convertErrorToNSError(_:)(v1);
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *uint64_t v7 = v8;
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error during scan: %{public}@", v6, 0xCu);
    uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    swift_errorRelease(v1);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v10 = *(void *)(v0 + 216);
  uint64_t v11 = *(void *)(v0 + 224);
  uint64_t v12 = *(void *)(v0 + 200);
  uint64_t v14 = *(void *)(v0 + 168);
  uint64_t v13 = *(void *)(v0 + 176);
  uint64_t v16 = *(void *)(v0 + 152);
  uint64_t v15 = *(void *)(v0 + 160);
  uint64_t v18 = *(void *)(v0 + 136);
  uint64_t v17 = *(void *)(v0 + 144);
  uint64_t v20 = *(void *)(v0 + 112);
  uint64_t v21 = *(void *)(v0 + 104);
  uint64_t v22 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 248));
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006455EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[8] = a3;
  void v4[9] = v3;
  void v4[6] = a1;
  v4[7] = a2;
  void v4[10] = *v3;
  uint64_t v5 = sub_100004AEC(&qword_1009B9250);
  v4[11] = v5;
  unint64_t v6 = (*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[12] = swift_task_alloc(v6);
  void v4[13] = swift_task_alloc(v6);
  v4[14] = swift_task_alloc(v6);
  uint64_t v7 = sub_100004AEC(&qword_10099E330);
  v4[15] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_10099E338);
  v4[16] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[17] = v9;
  v4[18] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for BeaconScanner.AISLookupState(0LL);
  v4[19] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[20] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[21] = swift_task_alloc(v12);
  v4[22] = swift_task_alloc(v12);
  uint64_t v13 = type metadata accessor for Peripheral(0LL);
  uint64_t v14 = sub_100015C48( &qword_1009BA080,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  uint64_t v15 = dispatch thunk of Actor.unownedExecutor.getter(v13, v14);
  return swift_task_switch(sub_10064574C, v15, v16);
}

uint64_t sub_10064574C()
{
  uint64_t v1 = *(void *)(v0 + 72);
  *(_BYTE *)(v0 + 240) = Peripheral.isConnectable.getter() & 1;
  return swift_task_switch(sub_100645794, v1, 0LL);
}

uint64_t sub_100645794(uint64_t a1)
{
  if (*(_BYTE *)(v1 + 240) != 1)
  {
    if (qword_10099B6D8 != -1) {
      swift_once(&qword_10099B6D8, sub_10064257C);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    uint64_t v12 = sub_10000A720(v11, (uint64_t)qword_100A2AFC8);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Skipping metadata read since not connectable", v15, 2u);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    uint64_t v16 = *(void *)(v1 + 48);

    uint64_t v17 = type metadata accessor for AccessoryMetadata(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v16, 1LL, 1LL, v17);
    goto LABEL_17;
  }

  uint64_t v2 = *(void *)(v1 + 72);
  Peripheral.id.getter(a1);
  __n128 v3 = swift_beginAccess(v2 + 144, v1 + 16, 0LL, 0LL);
  uint64_t v4 = *(void *)(v2 + 144);
  if (*(void *)(v4 + 16))
  {
    uint64_t v5 = *(void *)(v1 + 144);
    swift_bridgeObjectRetain(*(void *)(v2 + 144));
    unint64_t v6 = sub_10030DAD8(v5);
    uint64_t v7 = *(void *)(v1 + 152);
    uint64_t v8 = *(void *)(v1 + 160);
    uint64_t v9 = *(void *)(v1 + 120);
    if ((v10 & 1) != 0)
    {
      sub_10001DC4C( *(void *)(v4 + 56) + *(void *)(v8 + 72) * v6,  *(void *)(v1 + 120),  type metadata accessor for BeaconScanner.AISLookupState);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v9, 0LL, 1LL, v7);
    }

    else
    {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v8 + 56))(*(void *)(v1 + 120), 1LL, 1LL, v7);
    }

    swift_bridgeObjectRelease();
  }

  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void, __n128))(*(void *)(v1 + 160) + 56LL))( *(void *)(v1 + 120),  1LL,  1LL,  *(void *)(v1 + 152),  v3);
  }

  uint64_t v18 = *(void *)(v1 + 152);
  uint64_t v19 = *(void *)(v1 + 160);
  uint64_t v20 = *(void *)(v1 + 120);
  (*(void (**)(void, void))(*(void *)(v1 + 136) + 8LL))(*(void *)(v1 + 144), *(void *)(v1 + 128));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v20, 1LL, v18) != 1)
  {
    uint64_t v32 = *(void *)(v1 + 168);
    uint64_t v33 = *(void *)(v1 + 176);
    uint64_t v34 = *(void *)(v1 + 152);
    sub_10002218C(*(void *)(v1 + 120), v33, type metadata accessor for BeaconScanner.AISLookupState);
    sub_10001DC4C(v33, v32, type metadata accessor for BeaconScanner.AISLookupState);
    if (swift_getEnumCaseMultiPayload(v32, v34) != 1)
    {
      swift_bridgeObjectRelease();
      if (qword_10099B6D8 != -1) {
        swift_once(&qword_10099B6D8, sub_10064257C);
      }
      uint64_t v44 = type metadata accessor for Logger(0LL);
      uint64_t v45 = sub_10000A720(v44, (uint64_t)qword_100A2AFC8);
      *(void *)(v1 + 184) = v45;
      uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
      os_log_type_t v47 = static os_log_type_t.debug.getter(v46);
      if (os_log_type_enabled(v46, v47))
      {
        unint64_t v48 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)unint64_t v48 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Already pending -- waiting for continuation", v48, 2u);
        swift_slowDealloc(v48, -1LL, -1LL);
      }

      uint64_t v49 = *(void *)(v1 + 72);
      uint64_t v50 = *(void *)(v1 + 56);

      uint64_t v52 = sub_100015C48( &qword_1009B9368,  v51,  (uint64_t (*)(uint64_t))type metadata accessor for BeaconScanner,  (uint64_t)&unk_100811AF0);
      uint64_t v25 = (void *)swift_task_alloc(32LL);
      *(void *)(v1 + 19_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v25;
      void v25[2] = v49;
      v25[3] = v50;
      uint64_t v53 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
      *(void *)(v1 + 200) = v53;
      void *v53 = v1;
      v53[1] = sub_100645C78;
      uint64_t v28 = *(void *)(v1 + 112);
      uint64_t v27 = *(void *)(v1 + 88);
      uint64_t v29 = sub_10064D29C;
      uint64_t v30 = v49;
      uint64_t v31 = v52;
      return withCheckedThrowingContinuation<A>(isolation:function:_:)( v28,  v30,  v31,  0xD000000000000028LL,  0x800000010086BA90LL,  v29,  v25,  v27);
    }

    uint64_t v35 = *(void *)(v1 + 168);
    uint64_t v36 = *(void *)(v1 + 48);
    sub_100018C68(*(void *)(v1 + 176), type metadata accessor for BeaconScanner.AISLookupState);
    sub_100015750(v35, v36, &qword_1009B9250);
LABEL_17:
    uint64_t v37 = *(void *)(v1 + 168);
    uint64_t v38 = *(void *)(v1 + 144);
    uint64_t v40 = *(void *)(v1 + 112);
    uint64_t v39 = *(void *)(v1 + 120);
    uint64_t v42 = *(void *)(v1 + 96);
    uint64_t v41 = *(void *)(v1 + 104);
    swift_task_dealloc(*(void *)(v1 + 176));
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

  uint64_t v21 = *(void *)(v1 + 72);
  uint64_t v22 = *(void *)(v1 + 80);
  __int128 v54 = *(_OWORD *)(v1 + 56);
  sub_100015794(*(void *)(v1 + 120), &qword_10099E330);
  uint64_t v24 = sub_100015C48( &qword_1009B9368,  v23,  (uint64_t (*)(uint64_t))type metadata accessor for BeaconScanner,  (uint64_t)&unk_100811AF0);
  uint64_t v25 = (void *)swift_task_alloc(48LL);
  *(void *)(v1 + 2swift_weakDestroy(v0 + 16) = v25;
  void v25[2] = v21;
  *(_OWORD *)(v25 + 3) = v54;
  void v25[5] = v22;
  uint64_t v26 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v1 + 224) = v26;
  *uint64_t v26 = v1;
  v26[1] = sub_100645F0C;
  uint64_t v27 = *(void *)(v1 + 88);
  uint64_t v28 = *(void *)(v1 + 48);
  uint64_t v29 = sub_10064D290;
  uint64_t v30 = v21;
  uint64_t v31 = v24;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v28,  v30,  v31,  0xD000000000000028LL,  0x800000010086BA90LL,  v29,  v25,  v27);
}

uint64_t sub_100645C78()
{
  uint64_t v2 = *v1;
  uint64_t v4 = *(void *)(*v1 + 192);
  uint64_t v3 = *(void *)(*v1 + 200);
  *(void *)(*v1 + 208) = v0;
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  if (v0) {
    uint64_t v5 = sub_100645FE0;
  }
  else {
    uint64_t v5 = sub_100645CEC;
  }
  return swift_task_switch(v5, *(void *)(v2 + 72), 0LL);
}

uint64_t sub_100645CEC()
{
  uint64_t v1 = sub_10001581C(*(void *)(v0 + 112), *(void *)(v0 + 104), &qword_1009B9250);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.debug.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v21 = *(void *)(v0 + 176);
    uint64_t v5 = *(void *)(v0 + 96);
    uint64_t v4 = *(void *)(v0 + 104);
    uint64_t v6 = *(void *)(v0 + 88);
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v22 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    sub_10001581C(v4, v5, &qword_1009B9250);
    uint64_t v9 = String.init<A>(describing:)(v5, v6);
    *(void *)(v0 + 40) = sub_1003F11D4(v9, v10, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease();
    sub_100015794(v4, &qword_1009B9250);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Continuation for pending resumed -- %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);

    uint64_t v11 = v21;
  }

  else
  {
    uint64_t v12 = *(void *)(v0 + 176);
    uint64_t v13 = *(void *)(v0 + 104);

    sub_100015794(v13, &qword_1009B9250);
    uint64_t v11 = v12;
  }

  sub_100018C68(v11, type metadata accessor for BeaconScanner.AISLookupState);
  sub_100015750(*(void *)(v0 + 112), *(void *)(v0 + 48), &qword_1009B9250);
  uint64_t v14 = *(void *)(v0 + 168);
  uint64_t v15 = *(void *)(v0 + 144);
  uint64_t v17 = *(void *)(v0 + 112);
  uint64_t v16 = *(void *)(v0 + 120);
  uint64_t v19 = *(void *)(v0 + 96);
  uint64_t v18 = *(void *)(v0 + 104);
  swift_task_dealloc(*(void *)(v0 + 176));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100645F0C()
{
  uint64_t v2 = *(void *)(*v1 + 224);
  uint64_t v3 = *v1;
  *(void *)(v3 + 23_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_100646078, *(void *)(v3 + 72), 0LL);
  }
  swift_task_dealloc(*(void *)(v3 + 216));
  uint64_t v5 = *(void *)(v3 + 168);
  uint64_t v6 = *(void *)(v3 + 144);
  uint64_t v8 = *(void *)(v3 + 112);
  uint64_t v7 = *(void *)(v3 + 120);
  uint64_t v10 = *(void *)(v3 + 96);
  uint64_t v9 = *(void *)(v3 + 104);
  swift_task_dealloc(*(void *)(v3 + 176));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100645FE0()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 104);
  swift_task_dealloc(*(void *)(v0 + 176));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100646078()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 104);
  swift_task_dealloc(*(void *)(v0 + 176));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100646108(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 120) = a2;
  return swift_task_switch(sub_100646120, 0LL, 0LL);
}

uint64_t sub_100646120()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = (void *)v0[15];
  v0[2] = v0;
  v0[3] = sub_1006461B0;
  uint64_t v3 = swift_continuation_init(v0 + 2, 0LL);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v4 = v0 + 10;
  v4[1] = 0x40000000LL;
  void v4[2] = sub_1006461FC;
  void v4[3] = &unk_10096EB48;
  void v4[4] = v3;
  [v2 discoveryFinished:0 completion:v4];
  return swift_continuation_await(v1);
}

uint64_t sub_1006461B0()
{
  return swift_task_switch(sub_10033F770, 0LL, 0LL);
}

uint64_t sub_1006461FC(uint64_t a1)
{
  return swift_continuation_resume(*(void *)(a1 + 32));
}

uint64_t sub_100646204()
{
  uint64_t v1 = v0;
  if (qword_10099B6D8 != -1) {
    swift_once(&qword_10099B6D8, sub_10064257C);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_10000A720(v2, (uint64_t)qword_100A2AFC8);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Invalidating scanTask because client session was invalidated",  v6,  2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  if (*(void *)(v1 + 152))
  {
    swift_retain();
    sub_100004AEC((uint64_t *)&unk_1009A5470);
    Task.cancel()();
    swift_release();
  }

  *(void *)(v1 + 15_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0LL;
  return swift_release();
}

id sub_100646328(uint64_t a1)
{
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_1009B9390);
  __chkstk_darwin(v3);
  os_log_type_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for BeaconDetails(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DetailedDiscoveredObject(0LL);
  sub_10001581C(a1 + *(int *)(v10 + 20), (uint64_t)v5, (uint64_t *)&unk_1009B9390);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    sub_100018C68(a1, type metadata accessor for DetailedDiscoveredObject);
    sub_100015794((uint64_t)v5, (uint64_t *)&unk_1009B9390);
    return 0LL;
  }

  sub_10002218C((uint64_t)v5, (uint64_t)v9, type metadata accessor for BeaconDetails);
  uint64_t v11 = &v9[*(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0LL) + 20)];
  uint64_t v12 = *((void *)v11 + 3);
  uint64_t v13 = *((void *)v11 + 4);
  sub_100012ED8(v11, v12);
  int v14 = sub_1005F5498(v12, v13);
  if (v14)
  {
    if (v14 != 1)
    {
      sub_100018C68(a1, type metadata accessor for DetailedDiscoveredObject);
      sub_100018C68((uint64_t)v9, type metadata accessor for BeaconDetails);
      return 0LL;
    }

    uint64_t v15 = 2LL;
  }

  else
  {
    uint64_t v15 = 1LL;
  }

  id v16 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1));
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v19 = *((void *)v11 + 3);
  uint64_t v18 = *((void *)v11 + 4);
  sub_100012ED8(v11, v19);
  dispatch thunk of RawRepresentable.rawValue.getter(&v23, v19, *(void *)(v18 + 56));
  id v20 = [v16 initWithBeaconIdentifier:isa sequence:v15 index:v23];

  sub_100018C68(a1, type metadata accessor for DetailedDiscoveredObject);
  sub_100018C68((uint64_t)v9, type metadata accessor for BeaconDetails);
  return v20;
}

id sub_100646540(uint64_t a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009B9250);
  __chkstk_darwin(v3);
  os_log_type_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = (int *)type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DetailedDiscoveredObject(0LL);
  sub_10001581C(a1 + *(int *)(v10 + 24), (uint64_t)v5, &qword_1009B9250);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    sub_100018C68(a1, type metadata accessor for DetailedDiscoveredObject);
    sub_100015794((uint64_t)v5, &qword_1009B9250);
    return 0LL;
  }

  else
  {
    sub_10002218C((uint64_t)v5, (uint64_t)v9, type metadata accessor for AccessoryMetadata);
    uint64_t v12 = (uint64_t *)&v9[v6[5]];
    uint64_t v13 = *v12;
    unint64_t v14 = v12[1];
    sub_10001736C(*v12, v14);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100016F9C(v13, v14);
    swift_bridgeObjectRetain(*(void *)&v9[v6[6] + 8]);
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(*(void *)&v9[v6[7] + 8]);
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    sub_100451D18();
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    char v19 = v9[v6[9] + 4];
    NSString v37 = v16;
    uint64_t v38 = a1;
    Class v20 = isa;
    if ((v19 & 1) == 0) {
      sub_100451D18();
    }
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v22 = v6[12];
    uint64_t v23 = &v9[v6[11]];
    if (v23[8]) {
      uint64_t v24 = 0LL;
    }
    else {
      uint64_t v24 = *(void *)v23;
    }
    uint64_t v25 = &v9[v22];
    int v26 = *(_DWORD *)&v9[v22];
    if (v25[4]) {
      int v27 = 0;
    }
    else {
      int v27 = v26;
    }
    uint64_t v28 = v6[14];
    if (v9[v6[13]] == 4) {
      char v29 = 0;
    }
    else {
      char v29 = v9[v6[13]];
    }
    if (v9[v28] == 5) {
      char v30 = 0;
    }
    else {
      char v30 = v9[v28];
    }
    id v31 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1));
    BYTE5(v36) = v30;
    BYTE4(v36) = v29;
    LODWORD(v36) = v27;
    Class v32 = v20;
    Class v33 = v20;
    uint64_t v34 = v37;
    id v11 = objc_msgSend( v31,  "initWithProductData:manufacturerName:modelName:firmwareVersion:protocolVersion:accessoryCategory:accessoryCa pabilities:batteryType:batteryState:",  v33,  v37,  v17,  v18,  v21,  v24,  v36);

    sub_100018C68(v38, type metadata accessor for DetailedDiscoveredObject);
    sub_100018C68((uint64_t)v9, type metadata accessor for AccessoryMetadata);
  }

  return v11;
}

uint64_t sub_100646854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[5] = a3;
  void v4[6] = v3;
  void v4[3] = a1;
  void v4[4] = a2;
  uint64_t v5 = sub_100004AEC(&qword_1009AC230);
  v4[7] = v5;
  unint64_t v6 = (*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[8] = swift_task_alloc(v6);
  void v4[9] = swift_task_alloc(v6);
  void v4[10] = swift_task_alloc(v6);
  v4[11] = swift_task_alloc(v6);
  v4[12] = swift_task_alloc(v6);
  uint64_t v7 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  void v4[13] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[14] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[15] = swift_task_alloc(v9);
  v4[16] = swift_task_alloc(v9);
  v4[17] = swift_task_alloc(v9);
  return swift_task_switch(sub_100646930, 0LL, 0LL);
}

uint64_t sub_100646930()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 48) + 112LL);
  *(void *)(v0 + 144) = v1;
  return swift_task_switch(sub_10064694C, v1, 0LL);
}

uint64_t sub_10064694C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 144) + 136LL);
  *(void *)(v0 + 15_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v1;
  if (v1) {
    return swift_task_switch(sub_100646970, v1, 0LL);
  }
  __break(1u);
  return result;
}

uint64_t sub_100646970()
{
  uint64_t v1 = v0[19];
  uint64_t v3 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009B9310);
  uint64_t v5 = sub_100015C48( (unint64_t *)&unk_1009BA000,  255LL,  type metadata accessor for BeaconKeyServiceBuilder,  (uint64_t)&unk_1007FE9E8);
  unint64_t v6 = (void *)swift_task_alloc(48LL);
  v0[20] = v6;
  v6[2] = v1;
  void v6[3] = v3;
  v6[4] = v2;
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v0[21] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100646A54;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 2, v0[7], v4, v0[19], v5, &unk_1009B9320, v6, v0[7]);
}

uint64_t sub_100646A54()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 160);
  swift_task_dealloc(*(void *)(*v0 + 168));
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100646AAC, *(void *)(v1 + 152), 0LL);
}

uint64_t sub_100646AAC()
{
  *(void *)(v0 + 176) = *(void *)(v0 + 16);
  return swift_task_switch(sub_100646AC8, 0LL, 0LL);
}

uint64_t sub_100646AC8()
{
  uint64_t v1 = *(void *)(v0 + 176);
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = *(unsigned __int8 *)(*(void *)(v0 + 112) + 80LL);
    sub_10001DC4C( v1 + ((v2 + 32) & ~v2),  *(void *)(v0 + 96),  type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v3 = 0LL;
  }

  else
  {
    uint64_t v3 = 1LL;
  }

  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v6, v3, 1LL, v4);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  *(void *)(v0 + 184) = v7;
  if (v7(v6, 1LL, v4) == 1)
  {
    uint64_t v8 = *(void *)(v0 + 40);
    sub_100015794(*(void *)(v0 + 96), &qword_1009AC230);
    uint64_t v9 = *(void *)(v0 + 40);
    uint64_t v10 = *(void *)(v0 + 48);
    uint64_t v11 = *(void *)(v0 + 32);
    if ((v8 & 0x2000000000000000LL) != 0)
    {
      uint64_t v12 = (void *)swift_allocObject(&unk_10096EA40, 40LL, 7LL);
      *(void *)(v0 + 19_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v12;
      v12[2] = v10;
      v12[3] = v11;
      v12[4] = v9 & 0xDFFFFFFFFFFFFFFFLL;
      sub_10008699C(v11, v9);
      sub_10008699C(v11, v9);
      uint64_t v31 = async function pointer to unsafeBlocking<A>(_:)[1];
      swift_retain();
      Class v32 = (void *)swift_task_alloc(v31);
      *(void *)(v0 + 200) = v32;
      void *v32 = v0;
      v32[1] = sub_100646D8C;
      uint64_t v15 = *(void *)(v0 + 72);
      uint64_t v16 = *(void *)(v0 + 56);
      NSString v17 = sub_100647E0C;
    }

    else
    {
      uint64_t v12 = (void *)swift_allocObject(&unk_10096EA68, 40LL, 7LL);
      *(void *)(v0 + 208) = v12;
      v12[2] = v10;
      v12[3] = v11;
      v12[4] = v9;
      sub_10008699C(v11, v9);
      sub_10008699C(v11, v9);
      uint64_t v13 = async function pointer to unsafeBlocking<A>(_:)[1];
      swift_retain();
      unint64_t v14 = (void *)swift_task_alloc(v13);
      *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = v14;
      *unint64_t v14 = v0;
      v14[1] = sub_100646F40;
      uint64_t v15 = *(void *)(v0 + 88);
      uint64_t v16 = *(void *)(v0 + 56);
      NSString v17 = sub_100647E1C;
    }

    return unsafeBlocking<A>(_:)(v15, v17, v12, v16);
  }

  else
  {
    uint64_t v18 = *(void *)(v0 + 136);
    uint64_t v19 = *(void *)(v0 + 24);
    sub_10002218C(*(void *)(v0 + 96), v18, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_10002218C(v18, v19, type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v20 = *(void *)(v0 + 128);
    uint64_t v21 = *(void *)(v0 + 136);
    uint64_t v22 = *(void *)(v0 + 120);
    uint64_t v24 = *(void *)(v0 + 88);
    uint64_t v23 = *(void *)(v0 + 96);
    uint64_t v26 = *(void *)(v0 + 72);
    uint64_t v25 = *(void *)(v0 + 80);
    uint64_t v27 = *(void *)(v0 + 64);
    uint64_t v28 = *(void *)(v0 + 24);
    uint64_t v29 = type metadata accessor for BeaconDetails(0LL);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL))(v28, 0LL, 1LL, v29);
    swift_task_dealloc(v21);
    swift_task_dealloc(v20);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100646D8C()
{
  return swift_task_switch(sub_100646DE8, 0LL, 0LL);
}

uint64_t sub_100646DE8()
{
  uint64_t v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  sub_1000869A4(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_100015750(v3, v4, &qword_1009AC230);
  if (v1(v4, 1LL, v2) == 1)
  {
    sub_100015794(*(void *)(v0 + 64), &qword_1009AC230);
    uint64_t v5 = 1LL;
  }

  else
  {
    uint64_t v6 = *(void *)(v0 + 120);
    uint64_t v7 = *(void *)(v0 + 24);
    sub_10002218C(*(void *)(v0 + 64), v6, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_10002218C(v6, v7, type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v5 = 0LL;
  }

  uint64_t v9 = *(void *)(v0 + 128);
  uint64_t v8 = *(void *)(v0 + 136);
  uint64_t v10 = *(void *)(v0 + 120);
  uint64_t v12 = *(void *)(v0 + 88);
  uint64_t v11 = *(void *)(v0 + 96);
  uint64_t v14 = *(void *)(v0 + 72);
  uint64_t v13 = *(void *)(v0 + 80);
  uint64_t v18 = *(void *)(v0 + 64);
  uint64_t v15 = *(void *)(v0 + 24);
  uint64_t v16 = type metadata accessor for BeaconDetails(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v15, v5, 1LL, v16);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100646F40()
{
  return swift_task_switch(sub_100646F9C, 0LL, 0LL);
}

uint64_t sub_100646F9C()
{
  uint64_t v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 88);
  sub_1000869A4(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_100015750(v3, v4, &qword_1009AC230);
  if (v1(v4, 1LL, v2) == 1)
  {
    sub_100015794(*(void *)(v0 + 80), &qword_1009AC230);
    uint64_t v5 = 1LL;
  }

  else
  {
    uint64_t v6 = *(void *)(v0 + 128);
    uint64_t v7 = *(void *)(v0 + 24);
    sub_10002218C(*(void *)(v0 + 80), v6, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_10002218C(v6, v7, type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v5 = 0LL;
  }

  uint64_t v9 = *(void *)(v0 + 128);
  uint64_t v8 = *(void *)(v0 + 136);
  uint64_t v10 = *(void *)(v0 + 120);
  uint64_t v12 = *(void *)(v0 + 88);
  uint64_t v11 = *(void *)(v0 + 96);
  uint64_t v14 = *(void *)(v0 + 72);
  uint64_t v13 = *(void *)(v0 + 80);
  uint64_t v18 = *(void *)(v0 + 64);
  uint64_t v15 = *(void *)(v0 + 24);
  uint64_t v16 = type metadata accessor for BeaconDetails(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v15, v5, 1LL, v16);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006470F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v12[2] = *(void *)(a1 + 120);
  v12[3] = a2;
  v12[4] = a3;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009B9310);
  OS_dispatch_queue.sync<A>(execute:)(sub_100407D10, v12, v5);
  uint64_t v6 = v13;
  uint64_t v7 = *(void *)(v13 + 16);
  uint64_t v8 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (v7)
  {
    sub_10001DC4C( v6 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)),  a4,  type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v10 = 0LL;
  }

  else
  {
    uint64_t v10 = 1LL;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a4, v10, 1LL, v8);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1006471C4()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for BeaconScanner()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd13BeaconScanner);
}

uint64_t *sub_100647230(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v7 = (int *)type metadata accessor for AccessoryMetadata(0LL);
      uint64_t v8 = *((void *)v7 - 1);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v8 + 48))(a2, 1LL, v7))
      {
        uint64_t v9 = sub_100004AEC(&qword_1009B9250);
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64LL));
      }

      else
      {
        uint64_t v15 = type metadata accessor for UUID(0LL);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v15 - 8) + 16LL))(a1, a2, v15);
        uint64_t v16 = v7[5];
        NSString v17 = (uint64_t *)((char *)a1 + v16);
        uint64_t v18 = (uint64_t *)((char *)a2 + v16);
        uint64_t v19 = *v18;
        unint64_t v20 = v18[1];
        sub_10001736C(*v18, v20);
        *NSString v17 = v19;
        v17[1] = v20;
        uint64_t v21 = v7[6];
        uint64_t v22 = (uint64_t *)((char *)a1 + v21);
        uint64_t v23 = (uint64_t *)((char *)a2 + v21);
        uint64_t v24 = v23[1];
        *uint64_t v22 = *v23;
        v22[1] = v24;
        uint64_t v25 = v7[7];
        uint64_t v26 = (uint64_t *)((char *)a1 + v25);
        uint64_t v27 = (uint64_t *)((char *)a2 + v25);
        uint64_t v28 = v27[1];
        *uint64_t v26 = *v27;
        v26[1] = v28;
        *(_DWORD *)((char *)a1 + v7[8]) = *(_DWORD *)((char *)a2 + v7[8]);
        uint64_t v29 = v7[9];
        char v30 = (char *)a1 + v29;
        uint64_t v31 = (char *)a2 + v29;
        *(_DWORD *)char v30 = *(_DWORD *)v31;
        v30[4] = v31[4];
        uint64_t v32 = v7[10];
        Class v33 = (char *)a1 + v32;
        uint64_t v34 = (char *)a2 + v32;
        *(_OWORD *)Class v33 = *(_OWORD *)v34;
        v33[16] = v34[16];
        uint64_t v35 = v7[11];
        uint64_t v36 = (char *)a1 + v35;
        NSString v37 = (char *)a2 + v35;
        v36[8] = v37[8];
        *(void *)uint64_t v36 = *(void *)v37;
        uint64_t v38 = v7[12];
        uint64_t v39 = (char *)a1 + v38;
        uint64_t v40 = (char *)a2 + v38;
        *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
        v39[4] = v40[4];
        *((_BYTE *)a1 + v7[13]) = *((_BYTE *)a2 + v7[13]);
        *((_BYTE *)a1 + v7[14]) = *((_BYTE *)a2 + v7[14]);
        uint64_t v41 = v7[15];
        uint64_t v42 = (uint64_t *)((char *)a1 + v41);
        uint64_t v43 = (uint64_t *)((char *)a2 + v41);
        uint64_t v44 = v43[1];
        *uint64_t v42 = *v43;
        v42[1] = v44;
        uint64_t v45 = *(void (**)(uint64_t *, void, uint64_t, int *, __n128))(v8 + 56);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v28);
        __n128 v46 = swift_bridgeObjectRetain(v44);
        v45(a1, 0LL, 1LL, v7, v46);
      }

      uint64_t v12 = a1;
      uint64_t v13 = a3;
      uint64_t v14 = 1LL;
    }

    else
    {
      uint64_t v11 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v11);
      uint64_t v12 = a1;
      uint64_t v13 = a3;
      uint64_t v14 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v12, v13, v14);
  }

  return a1;
}

uint64_t sub_100647464(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {
    uint64_t v3 = type metadata accessor for AccessoryMetadata(0LL);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48LL))(a1, 1LL, v3);
    if ((_DWORD)result) {
      return result;
    }
    uint64_t v5 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(a1, v5);
    sub_100016F9C(*(void *)(a1 + *(int *)(v3 + 20)), *(void *)(a1 + *(int *)(v3 + 20) + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t *sub_10064751C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    uint64_t v6 = (int *)type metadata accessor for AccessoryMetadata(0LL);
    uint64_t v7 = *((void *)v6 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v7 + 48))(a2, 1LL, v6))
    {
      uint64_t v8 = sub_100004AEC(&qword_1009B9250);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      uint64_t v13 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16LL))(a1, a2, v13);
      uint64_t v14 = v6[5];
      uint64_t v15 = (uint64_t *)((char *)a1 + v14);
      uint64_t v16 = (uint64_t *)((char *)a2 + v14);
      uint64_t v17 = *v16;
      unint64_t v18 = v16[1];
      sub_10001736C(*v16, v18);
      uint64_t *v15 = v17;
      v15[1] = v18;
      uint64_t v19 = v6[6];
      unint64_t v20 = (uint64_t *)((char *)a1 + v19);
      uint64_t v21 = (uint64_t *)((char *)a2 + v19);
      uint64_t v22 = v21[1];
      *unint64_t v20 = *v21;
      v20[1] = v22;
      uint64_t v23 = v6[7];
      uint64_t v24 = (uint64_t *)((char *)a1 + v23);
      uint64_t v25 = (uint64_t *)((char *)a2 + v23);
      uint64_t v26 = v25[1];
      *uint64_t v24 = *v25;
      v24[1] = v26;
      *(_DWORD *)((char *)a1 + v6[8]) = *(_DWORD *)((char *)a2 + v6[8]);
      uint64_t v27 = v6[9];
      uint64_t v28 = (char *)a1 + v27;
      uint64_t v29 = (char *)a2 + v27;
      *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
      v28[4] = v29[4];
      uint64_t v30 = v6[10];
      uint64_t v31 = (char *)a1 + v30;
      uint64_t v32 = (char *)a2 + v30;
      *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
      v31[16] = v32[16];
      uint64_t v33 = v6[11];
      uint64_t v34 = (char *)a1 + v33;
      uint64_t v35 = (char *)a2 + v33;
      v34[8] = v35[8];
      *(void *)uint64_t v34 = *(void *)v35;
      uint64_t v36 = v6[12];
      NSString v37 = (char *)a1 + v36;
      uint64_t v38 = (char *)a2 + v36;
      *(_DWORD *)NSString v37 = *(_DWORD *)v38;
      v37[4] = v38[4];
      *((_BYTE *)a1 + v6[13]) = *((_BYTE *)a2 + v6[13]);
      *((_BYTE *)a1 + v6[14]) = *((_BYTE *)a2 + v6[14]);
      uint64_t v39 = v6[15];
      uint64_t v40 = (uint64_t *)((char *)a1 + v39);
      uint64_t v41 = (uint64_t *)((char *)a2 + v39);
      uint64_t v42 = v41[1];
      *uint64_t v40 = *v41;
      v40[1] = v42;
      uint64_t v43 = *(void (**)(uint64_t *, void, uint64_t, int *, __n128))(v7 + 56);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v26);
      __n128 v44 = swift_bridgeObjectRetain(v42);
      v43(a1, 0LL, 1LL, v6, v44);
    }

    uint64_t v10 = a1;
    uint64_t v11 = a3;
    uint64_t v12 = 1LL;
  }

  else
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    swift_bridgeObjectRetain(v9);
    uint64_t v10 = a1;
    uint64_t v11 = a3;
    uint64_t v12 = 0LL;
  }

  swift_storeEnumTagMultiPayload(v10, v11, v12);
  return a1;
}

uint64_t *sub_100647724(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100018C68((uint64_t)a1, type metadata accessor for BeaconScanner.AISLookupState);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v6 = (int *)type metadata accessor for AccessoryMetadata(0LL);
      uint64_t v7 = *((void *)v6 - 1);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v7 + 48))(a2, 1LL, v6))
      {
        uint64_t v8 = sub_100004AEC(&qword_1009B9250);
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
      }

      else
      {
        uint64_t v13 = type metadata accessor for UUID(0LL);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16LL))(a1, a2, v13);
        uint64_t v14 = v6[5];
        uint64_t v15 = (uint64_t *)((char *)a1 + v14);
        uint64_t v16 = (uint64_t *)((char *)a2 + v14);
        uint64_t v17 = *v16;
        unint64_t v18 = v16[1];
        sub_10001736C(*v16, v18);
        uint64_t *v15 = v17;
        v15[1] = v18;
        uint64_t v19 = v6[6];
        unint64_t v20 = (uint64_t *)((char *)a1 + v19);
        uint64_t v21 = (uint64_t *)((char *)a2 + v19);
        *unint64_t v20 = *v21;
        uint64_t v22 = v21[1];
        v20[1] = v22;
        uint64_t v23 = v6[7];
        uint64_t v24 = (uint64_t *)((char *)a1 + v23);
        uint64_t v25 = (uint64_t *)((char *)a2 + v23);
        *uint64_t v24 = *v25;
        uint64_t v26 = v25[1];
        v24[1] = v26;
        *(_DWORD *)((char *)a1 + v6[8]) = *(_DWORD *)((char *)a2 + v6[8]);
        uint64_t v27 = v6[9];
        uint64_t v28 = (char *)a1 + v27;
        uint64_t v29 = (char *)a2 + v27;
        int v30 = *(_DWORD *)v29;
        v28[4] = v29[4];
        *(_DWORD *)uint64_t v28 = v30;
        uint64_t v31 = v6[10];
        uint64_t v32 = (char *)a1 + v31;
        uint64_t v33 = (char *)a2 + v31;
        __int128 v34 = *(_OWORD *)v33;
        v32[16] = v33[16];
        *(_OWORD *)uint64_t v32 = v34;
        uint64_t v35 = v6[11];
        uint64_t v36 = (char *)a1 + v35;
        NSString v37 = (char *)a2 + v35;
        uint64_t v38 = *(void *)v37;
        v36[8] = v37[8];
        *(void *)uint64_t v36 = v38;
        uint64_t v39 = v6[12];
        uint64_t v40 = (char *)a1 + v39;
        uint64_t v41 = (char *)a2 + v39;
        LODWORD(v38) = *(_DWORD *)v41;
        v40[4] = v41[4];
        *(_DWORD *)uint64_t v40 = v38;
        *((_BYTE *)a1 + v6[13]) = *((_BYTE *)a2 + v6[13]);
        *((_BYTE *)a1 + v6[14]) = *((_BYTE *)a2 + v6[14]);
        uint64_t v42 = v6[15];
        uint64_t v43 = (uint64_t *)((char *)a1 + v42);
        __n128 v44 = (uint64_t *)((char *)a2 + v42);
        *uint64_t v43 = *v44;
        uint64_t v45 = v44[1];
        v43[1] = v45;
        __n128 v46 = *(void (**)(uint64_t *, void, uint64_t, int *, __n128))(v7 + 56);
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v26);
        __n128 v47 = swift_bridgeObjectRetain(v45);
        v46(a1, 0LL, 1LL, v6, v47);
      }

      uint64_t v10 = a1;
      uint64_t v11 = a3;
      uint64_t v12 = 1LL;
    }

    else
    {
      uint64_t v9 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v9);
      uint64_t v10 = a1;
      uint64_t v11 = a3;
      uint64_t v12 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }

  return a1;
}

uint64_t type metadata accessor for BeaconScanner.AISLookupState(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009B92C8, (uint64_t)&nominal type descriptor for BeaconScanner.AISLookupState);
}

char *sub_100647970(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    uint64_t v6 = (int *)type metadata accessor for AccessoryMetadata(0LL);
    uint64_t v7 = *((void *)v6 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v7 + 48))(a2, 1LL, v6))
    {
      uint64_t v8 = sub_100004AEC(&qword_1009B9250);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      uint64_t v9 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(a1, a2, v9);
      *(_OWORD *)&a1[v6[5]] = *(_OWORD *)&a2[v6[5]];
      *(_OWORD *)&a1[v6[6]] = *(_OWORD *)&a2[v6[6]];
      *(_OWORD *)&a1[v6[7]] = *(_OWORD *)&a2[v6[7]];
      *(_DWORD *)&a1[v6[8]] = *(_DWORD *)&a2[v6[8]];
      uint64_t v10 = v6[9];
      uint64_t v11 = &a1[v10];
      uint64_t v12 = &a2[v10];
      *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
      double v11[4] = v12[4];
      uint64_t v13 = v6[10];
      uint64_t v14 = &a1[v13];
      uint64_t v15 = &a2[v13];
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      _BYTE v14[16] = v15[16];
      uint64_t v16 = v6[11];
      uint64_t v17 = &a1[v16];
      unint64_t v18 = &a2[v16];
      v17[8] = v18[8];
      *(void *)uint64_t v17 = *(void *)v18;
      uint64_t v19 = v6[12];
      unint64_t v20 = &a1[v19];
      uint64_t v21 = &a2[v19];
      *(_DWORD *)unint64_t v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      a1[v6[13]] = a2[v6[13]];
      a1[v6[14]] = a2[v6[14]];
      *(_OWORD *)&a1[v6[15]] = *(_OWORD *)&a2[v6[15]];
      (*(void (**)(char *, void, uint64_t, int *))(v7 + 56))(a1, 0LL, 1LL, v6);
    }

    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

char *sub_100647B2C(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100018C68((uint64_t)a1, type metadata accessor for BeaconScanner.AISLookupState);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v6 = (int *)type metadata accessor for AccessoryMetadata(0LL);
      uint64_t v7 = *((void *)v6 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v7 + 48))(a2, 1LL, v6))
      {
        uint64_t v8 = sub_100004AEC(&qword_1009B9250);
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
      }

      else
      {
        uint64_t v9 = type metadata accessor for UUID(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(a1, a2, v9);
        *(_OWORD *)&a1[v6[5]] = *(_OWORD *)&a2[v6[5]];
        *(_OWORD *)&a1[v6[6]] = *(_OWORD *)&a2[v6[6]];
        *(_OWORD *)&a1[v6[7]] = *(_OWORD *)&a2[v6[7]];
        *(_DWORD *)&a1[v6[8]] = *(_DWORD *)&a2[v6[8]];
        uint64_t v10 = v6[9];
        uint64_t v11 = &a1[v10];
        uint64_t v12 = &a2[v10];
        *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
        double v11[4] = v12[4];
        uint64_t v13 = v6[10];
        uint64_t v14 = &a1[v13];
        uint64_t v15 = &a2[v13];
        *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
        _BYTE v14[16] = v15[16];
        uint64_t v16 = v6[11];
        uint64_t v17 = &a1[v16];
        unint64_t v18 = &a2[v16];
        v17[8] = v18[8];
        *(void *)uint64_t v17 = *(void *)v18;
        uint64_t v19 = v6[12];
        unint64_t v20 = &a1[v19];
        uint64_t v21 = &a2[v19];
        *(_DWORD *)unint64_t v20 = *(_DWORD *)v21;
        v20[4] = v21[4];
        a1[v6[13]] = a2[v6[13]];
        a1[v6[14]] = a2[v6[14]];
        *(_OWORD *)&a1[v6[15]] = *(_OWORD *)&a2[v6[15]];
        (*(void (**)(char *, void, uint64_t, int *))(v7 + 56))(a1, 0LL, 1LL, v6);
      }

      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

void sub_100647D00(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_10064DBD0( 319LL,  (unint64_t *)&unk_1009A05A0,  type metadata accessor for AccessoryMetadata,  (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 2LL, v4);
  }

uint64_t sub_100647D8C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc(dword_1009AC224);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v9;
  void *v9 = v3;
  v9[1] = sub_100015D58;
  return sub_1003BCFD4(a1, a2, v6, v7, v8);
}

uint64_t sub_100647E0C@<X0>(uint64_t a1@<X8>)
{
  return sub_1006470F4(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_100647E1C@<X0>(uint64_t a1@<X8>)
{
  return sub_10079C18C(*(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_100647E44(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_10099E338);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Peripheral.id.getter(v4);
  sub_100647EE0(a1, (uint64_t)v6);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t sub_100647EE0(uint64_t a1, uint64_t a2)
{
  uint64_t v63 = a1;
  uint64_t v64 = sub_100004AEC((uint64_t *)&unk_1009B1250);
  uint64_t v58 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v57 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for BeaconScanner.AISLookupState(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v59 = (unint64_t *)((char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v7);
  uint64_t v60 = (uint64_t)&v55 - v9;
  uint64_t v10 = sub_100004AEC(&qword_10099E338);
  uint64_t v61 = *(void *)(v10 - 8);
  uint64_t v62 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_10099E330);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (unint64_t *)((char *)&v55 - v18);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v55 - v20;
  uint64_t v22 = (void *)(v2 + 144);
  __n128 v23 = swift_beginAccess(v2 + 144, v66, 0LL, 0LL);
  uint64_t v24 = *(void *)(v2 + 144);
  if (!*(void *)(v24 + 16))
  {
    uint64_t v25 = a2;
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56);
    v28(v21, 1LL, 1LL, v5, v23);
LABEL_7:
    sub_100015794((uint64_t)v21, &qword_10099E330);
    uint64_t v29 = v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v12, v25, v62);
    unint64_t *v19 = (unint64_t)_swiftEmptyArrayStorage;
    swift_storeEnumTagMultiPayload(v19, v5, 0LL);
    ((void (*)(unint64_t *, void, uint64_t, uint64_t))v28)(v19, 0LL, 1LL, v5);
    swift_beginAccess(v22, v65, 33LL, 0LL);
    sub_100045E60((uint64_t)v19, (uint64_t)v12);
    swift_endAccess(v65);
    goto LABEL_9;
  }

  swift_bridgeObjectRetain(v24);
  uint64_t v25 = a2;
  unint64_t v26 = sub_10030DAD8(a2);
  if ((v27 & 1) != 0)
  {
    sub_10001DC4C( *(void *)(v24 + 56) + *(void *)(v6 + 72) * v26,  (uint64_t)v21,  type metadata accessor for BeaconScanner.AISLookupState);
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56);
    ((void (*)(char *, void, uint64_t, uint64_t))v28)(v21, 0LL, 1LL, v5);
  }

  else
  {
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v28)(v21, 1LL, 1LL, v5);
  }

  swift_bridgeObjectRelease();
  sub_100015794((uint64_t)v21, &qword_10099E330);
  uint64_t v29 = v25;
LABEL_9:
  uint64_t v30 = *v22;
  if (!*(void *)(*v22 + 16LL))
  {
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v28)(v16, 1LL, 1LL, v5);
LABEL_15:
    sub_100015794((uint64_t)v16, &qword_10099E330);
    uint64_t v34 = v64;
LABEL_16:
    if (qword_10099B6D8 != -1) {
      swift_once(&qword_10099B6D8, sub_10064257C);
    }
    uint64_t v35 = type metadata accessor for Logger(0LL);
    uint64_t v36 = sub_10000A720(v35, (uint64_t)qword_100A2AFC8);
    NSString v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v38 = static os_log_type_t.fault.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Expected to be in .pending state!", v39, 2u);
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    uint64_t v40 = type metadata accessor for BeaconScanner.Error(0LL);
    uint64_t v41 = sub_100015C48( &qword_1009B9338,  255LL,  type metadata accessor for BeaconScanner.Error,  (uint64_t)&unk_100811B20);
    uint64_t v42 = swift_allocError(v40, v41, 0LL, 0LL);
    uint64_t v44 = v43;
    uint64_t v45 = sub_100004AEC((uint64_t *)&unk_1009B9340);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56LL))(v44, 1LL, 2LL, v45);
    v65[0] = v42;
    return CheckedContinuation.resume(throwing:)(v65, v34);
  }

  swift_bridgeObjectRetain(*v22);
  unint64_t v31 = sub_10030DAD8(v29);
  if ((v32 & 1) != 0)
  {
    sub_10001DC4C( *(void *)(v30 + 56) + *(void *)(v6 + 72) * v31,  (uint64_t)v16,  type metadata accessor for BeaconScanner.AISLookupState);
    uint64_t v33 = 0LL;
  }

  else
  {
    uint64_t v33 = 1LL;
  }

  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v28)(v16, v33, 1LL, v5);
  swift_bridgeObjectRelease();
  uint64_t v47 = (uint64_t)v16;
  uint64_t v48 = v60;
  sub_10002218C(v47, v60, type metadata accessor for BeaconScanner.AISLookupState);
  uint64_t v49 = v59;
  sub_10001DC4C(v48, (uint64_t)v59, type metadata accessor for BeaconScanner.AISLookupState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v49, v5);
  uint64_t v34 = v64;
  if (EnumCaseMultiPayload == 1)
  {
    sub_100018C68(v48, type metadata accessor for BeaconScanner.AISLookupState);
    sub_100018C68((uint64_t)v49, type metadata accessor for BeaconScanner.AISLookupState);
    goto LABEL_16;
  }

  unint64_t v51 = *v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v57, v63, v64);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v51);
  uint64_t v56 = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v51 = sub_1004C6BE4(0, *(void *)(v51 + 16) + 1LL, 1, v51);
  }
  unint64_t v54 = *(void *)(v51 + 16);
  unint64_t v53 = *(void *)(v51 + 24);
  if (v54 >= v53 >> 1) {
    unint64_t v51 = sub_1004C6BE4(v53 > 1, v54 + 1, 1, v51);
  }
  *(void *)(v51 + swift_weakDestroy(v0 + 16) = v54 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v58 + 32))( v51 + ((*(unsigned __int8 *)(v58 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80))
  + *(void *)(v58 + 72) * v54,
    v57,
    v34);
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v12, v56, v62);
  unint64_t *v19 = v51;
  swift_storeEnumTagMultiPayload(v19, v5, 0LL);
  ((void (*)(unint64_t *, void, uint64_t, uint64_t))v28)(v19, 0LL, 1LL, v5);
  swift_beginAccess(v22, v65, 33LL, 0LL);
  sub_100045E60((uint64_t)v19, (uint64_t)v12);
  swift_endAccess(v65);
  return sub_100018C68(v48, type metadata accessor for BeaconScanner.AISLookupState);
}

uint64_t sub_100648530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v27 = a1;
  uint64_t v28 = a3;
  uint64_t v6 = sub_100004AEC(&qword_1009A1BC0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_10099E338);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Peripheral.id.getter(v15);
  sub_100647EE0(v27, (uint64_t)v17);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  uint64_t v18 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v12, 1LL, 1LL, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v29, v6);
  uint64_t v20 = sub_100015C48( &qword_1009B9368,  v19,  (uint64_t (*)(uint64_t))type metadata accessor for BeaconScanner,  (uint64_t)&unk_100811AF0);
  uint64_t v21 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v22 = (v21 + 48) & ~v21;
  unint64_t v23 = (v8 + v22 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v24 = (char *)swift_allocObject(&unk_10096EB08, v23 + 8, v21 | 7);
  *((void *)v24 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = a2;
  *((void *)v24 + 3) = v20;
  uint64_t v25 = v28;
  *((void *)v24 + 4) = a2;
  *((void *)v24 + 5) = v25;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v24[v22], v9, v6);
  *(void *)&v24[v23] = v30;
  swift_retain_n(a2, 2LL);
  swift_retain();
  sub_1003EDB00((uint64_t)v12, (uint64_t)&unk_1009B93F0, (uint64_t)v24);
  return swift_release();
}

uint64_t sub_100648734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  uint64_t v9 = type metadata accessor for TimeoutError(0LL);
  v7[22] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v7[23] = v10;
  v7[24] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009B1250);
  v7[25] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v7[26] = v12;
  v7[27] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_1009B9250);
  v7[28] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v14 = (*(void *)(*(void *)(sub_100004AEC(&qword_10099E330) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[29] = swift_task_alloc(v14);
  v7[30] = swift_task_alloc(v14);
  uint64_t v15 = sub_100004AEC(&qword_10099E338);
  v7[31] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v7[32] = v16;
  unint64_t v17 = (*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[33] = swift_task_alloc(v17);
  v7[34] = swift_task_alloc(v17);
  uint64_t v18 = type metadata accessor for BeaconScanner.AISLookupState(0LL);
  v7[35] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v7[36] = v19;
  unint64_t v20 = (*(void *)(v19 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[37] = swift_task_alloc(v20);
  v7[38] = swift_task_alloc(v20);
  uint64_t v21 = sub_100004AEC(&qword_1009A1BC0);
  v7[39] = v21;
  uint64_t v22 = *(void *)(v21 - 8);
  v7[40] = v22;
  uint64_t v23 = *(void *)(v22 + 64);
  v7[41] = v23;
  v7[42] = swift_task_alloc((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = sub_100004AEC(&qword_1009B93F8);
  v7[43] = v24;
  unint64_t v25 = (*(void *)(*(void *)(v24 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[44] = swift_task_alloc(v25);
  v7[45] = swift_task_alloc(v25);
  v7[46] = swift_task_alloc(v25);
  v7[47] = swift_task_alloc(v25);
  return swift_task_switch(sub_100648914, a4, 0LL);
}

uint64_t sub_100648914()
{
  uint64_t v2 = v0[41];
  uint64_t v1 = v0[42];
  uint64_t v3 = v0[39];
  uint64_t v4 = v0[40];
  uint64_t v5 = v0[21];
  uint64_t v7 = v0[18];
  uint64_t v6 = v0[19];
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 16))(v1, v0[20], v3);
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = (v8 + 32) & ~v8;
  unint64_t v10 = (v2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v11 = swift_allocObject(&unk_10096EB30, v10 + 8, v8 | 7);
  v0[48] = v11;
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v7;
  *(void *)(v11 + 24) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v11 + v9, v1, v3);
  *(void *)(v11 + v10) = v5;
  uint64_t v12 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain();
  swift_retain();
  uint64_t v13 = (void *)swift_task_alloc(v12);
  v0[49] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_100648A28;
  return withTimeout<A>(_:block:)(v0[46], 0xA055690D9DB80000LL, 1LL, &unk_1009B9408, v11, v0[43]);
}

uint64_t sub_100648A28()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 392);
  *(void *)(*v1 + 400) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 144);
    uint64_t v5 = sub_1006492D0;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 144);
    swift_release();
    uint64_t v5 = sub_100648A9C;
    uint64_t v4 = v6;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_100648A9C()
{
  uint64_t v1 = sub_100015750(*(void *)(v0 + 368), *(void *)(v0 + 376), &qword_1009B93F8);
  uint64_t v2 = *(void *)(v0 + 144);
  Peripheral.id.getter(v1);
  uint64_t v3 = v2 + 144;
  __n128 v4 = swift_beginAccess(v2 + 144, v0 + 40, 0LL, 0LL);
  uint64_t v5 = *(void *)(v2 + 144);
  if (*(void *)(v5 + 16))
  {
    uint64_t v6 = *(void *)(v0 + 272);
    swift_bridgeObjectRetain(*(void *)(v2 + 144));
    unint64_t v7 = sub_10030DAD8(v6);
    uint64_t v8 = *(void *)(v0 + 280);
    uint64_t v9 = *(void *)(v0 + 288);
    uint64_t v10 = *(void *)(v0 + 240);
    if ((v11 & 1) != 0)
    {
      sub_10001DC4C( *(void *)(v5 + 56) + *(void *)(v9 + 72) * v7,  *(void *)(v0 + 240),  type metadata accessor for BeaconScanner.AISLookupState);
      uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      v12(v10, 0LL, 1LL, v8);
    }

    else
    {
      uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      v12(*(void *)(v0 + 240), 1LL, 1LL, v8);
    }

    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 288) + 56LL);
    ((void (*)(void, uint64_t, uint64_t, void, __n128))v12)( *(void *)(v0 + 240),  1LL,  1LL,  *(void *)(v0 + 280),  v4);
  }

  uint64_t v13 = *(void *)(v0 + 280);
  uint64_t v14 = *(void *)(v0 + 288);
  uint64_t v15 = *(void *)(v0 + 240);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 256) + 8LL);
  v16(*(void *)(v0 + 272), *(void *)(v0 + 248));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v15, 1LL, v13) != 1)
  {
    uint64_t v18 = *(void *)(v0 + 296);
    uint64_t v17 = *(void *)(v0 + 304);
    uint64_t v19 = *(void *)(v0 + 280);
    sub_10002218C(*(void *)(v0 + 240), v17, type metadata accessor for BeaconScanner.AISLookupState);
    sub_10001DC4C(v17, v18, type metadata accessor for BeaconScanner.AISLookupState);
    if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
    {
      uint64_t v20 = *(void *)(v0 + 296);
      sub_100018C68(*(void *)(v0 + 304), type metadata accessor for BeaconScanner.AISLookupState);
      sub_100018C68(v20, type metadata accessor for BeaconScanner.AISLookupState);
      goto LABEL_11;
    }

    uint64_t v26 = *(void *)(v0 + 360);
    uint64_t v27 = *(void *)(v0 + 344);
    uint64_t v28 = **(void **)(v0 + 296);
    sub_10001581C(*(void *)(v0 + 376), v26, &qword_1009B93F8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v26, v27);
    uint64_t v30 = *(uint64_t **)(v0 + 360);
    uint64_t v88 = v28;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v90 = v0 + 64;
      uint64_t v31 = *v30;
      if (qword_10099B6D8 != -1) {
        swift_once(&qword_10099B6D8, sub_10064257C);
      }
      uint64_t v32 = type metadata accessor for Logger(0LL);
      sub_10000A720(v32, (uint64_t)qword_100A2AFC8);
      swift_retain();
      swift_errorRetain(v31);
      swift_retain();
      uint64_t v33 = swift_errorRetain(v31);
      uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
      os_log_type_t v35 = static os_log_type_t.error.getter(v34);
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = *(void *)(v0 + 264);
        os_log_type_t type = v35;
        uint64_t v37 = *(void *)(v0 + 248);
        uint64_t v80 = *(void *)(v0 + 152);
        uint64_t v38 = swift_slowAlloc(22LL, -1LL);
        uint64_t v82 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        uint64_t v86 = swift_slowAlloc(32LL, -1LL);
        uint64_t v92 = v86;
        *(_DWORD *)uint64_t v38 = 136315394;
        log = v34;
        Peripheral.id.getter(v86);
        uint64_t v39 = sub_1000372EC( (unint64_t *)&unk_1009B93D0,  &qword_10099E338,  (uint64_t)&protocol conformance descriptor for Identifier<A>);
        uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter(v37, v39);
        unint64_t v42 = v41;
        v16(v36, v37);
        *(void *)(v0 + 96) = sub_1003F11D4(v40, v42, &v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v38 + 4, v38 + 12);
        swift_release_n(v80, 2LL);
        swift_bridgeObjectRelease();
        *(_WORD *)(v38 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2112;
        swift_errorRetain(v31);
        uint64_t v43 = _swift_stdlib_bridgeErrorToNSError(v31);
        *(void *)(v0 + 104) = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v38 + 14, v38 + 22);
        *uint64_t v82 = v43;
        swift_errorRelease(v31);
        swift_errorRelease(v31);
        _os_log_impl( (void *)&_mh_execute_header,  log,  type,  "Failure reading metadata for %s: %@",  (uint8_t *)v38,  0x16u);
        uint64_t v44 = sub_100004AEC((uint64_t *)&unk_10099FB20);
        swift_arrayDestroy(v82, 1LL, v44);
        swift_slowDealloc(v82, -1LL, -1LL);
        swift_arrayDestroy(v86, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v86, -1LL, -1LL);
        uint64_t v45 = v38;
        uint64_t v28 = v88;
        swift_slowDealloc(v45, -1LL, -1LL);
      }

      else
      {
        swift_release_n(*(void *)(v0 + 152), 2LL);
        swift_errorRelease(v31);
        swift_errorRelease(v31);
      }

      uint64_t v66 = *(void *)(v0 + 280);
      uint64_t v67 = *(void *)(v0 + 264);
      uint64_t v68 = *(void *)(v0 + 232);
      Peripheral.id.getter(v46);
      uint64_t v69 = type metadata accessor for AccessoryMetadata(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56LL))(v68, 1LL, 1LL, v69);
      swift_storeEnumTagMultiPayload(v68, v66, 1LL);
      v12(v68, 0LL, 1LL, v66);
      swift_beginAccess(v3, v90, 33LL, 0LL);
      sub_100045E60(v68, v67);
      swift_endAccess(v90);
      swift_errorRelease(v31);
      uint64_t v53 = *(void *)(v28 + 16);
      if (!v53) {
        goto LABEL_30;
      }
    }

    else
    {
      uint64_t v47 = *(void *)(v0 + 280);
      uint64_t v48 = *(void *)(v0 + 264);
      uint64_t v50 = *(void *)(v0 + 224);
      uint64_t v49 = *(void *)(v0 + 232);
      uint64_t v51 = sub_100015750((uint64_t)v30, v50, &qword_1009B9250);
      Peripheral.id.getter(v51);
      sub_10001581C(v50, v49, &qword_1009B9250);
      swift_storeEnumTagMultiPayload(v49, v47, 1LL);
      v12(v49, 0LL, 1LL, v47);
      swift_beginAccess(v3, v0 + 16, 33LL, 0LL);
      sub_100045E60(v49, v48);
      swift_endAccess(v0 + 16);
      uint64_t v52 = v50;
      uint64_t v28 = v88;
      sub_100015794(v52, &qword_1009B9250);
      uint64_t v53 = *(void *)(v88 + 16);
      if (!v53)
      {
LABEL_30:
        swift_bridgeObjectRelease();
        sub_100018C68(*(void *)(v0 + 304), type metadata accessor for BeaconScanner.AISLookupState);
        goto LABEL_31;
      }
    }

    uint64_t v54 = *(void *)(v0 + 208);
    uint64_t v55 = v28 + ((*(unsigned __int8 *)(v54 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80));
    uint64_t v56 = *(void *)(v54 + 72);
    uint64_t v57 = *(void (**)(void, uint64_t, void))(v54 + 16);
    do
    {
      uint64_t v59 = *(void *)(v0 + 376);
      uint64_t v61 = *(void *)(v0 + 344);
      uint64_t v60 = *(void *)(v0 + 352);
      v57(*(void *)(v0 + 216), v55, *(void *)(v0 + 200));
      sub_10001581C(v59, v60, &qword_1009B93F8);
      int v62 = swift_getEnumCaseMultiPayload(v60, v61);
      uint64_t v63 = *(void **)(v0 + 352);
      if (v62 == 1)
      {
        uint64_t v58 = *(void *)(v0 + 200);
        *(void *)(v0 + 88) = *v63;
        CheckedContinuation.resume(throwing:)(v0 + 88, v58);
      }

      else
      {
        uint64_t v64 = *(void *)(v0 + 224);
        uint64_t v65 = *(void *)(v0 + 200);
        sub_100015750((uint64_t)v63, v64, &qword_1009B9250);
        CheckedContinuation.resume(returning:)(v64, v65);
      }

      (*(void (**)(void, void))(v54 + 8))(*(void *)(v0 + 216), *(void *)(v0 + 200));
      v55 += v56;
      --v53;
    }

    while (v53);
    goto LABEL_30;
  }

  sub_100015794(*(void *)(v0 + 240), &qword_10099E330);
LABEL_11:
  if (qword_10099B6D8 != -1) {
    swift_once(&qword_10099B6D8, sub_10064257C);
  }
  uint64_t v21 = type metadata accessor for Logger(0LL);
  uint64_t v22 = sub_10000A720(v21, (uint64_t)qword_100A2AFC8);
  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.fault.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    unint64_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Expected to be in pending state", v25, 2u);
    swift_slowDealloc(v25, -1LL, -1LL);
  }

LABEL_31:
  uint64_t v71 = *(void *)(v0 + 368);
  uint64_t v70 = *(void *)(v0 + 376);
  uint64_t v73 = *(void *)(v0 + 352);
  uint64_t v72 = *(void *)(v0 + 360);
  uint64_t v74 = *(void *)(v0 + 336);
  uint64_t v76 = *(void *)(v0 + 296);
  uint64_t v75 = *(void *)(v0 + 304);
  uint64_t v77 = *(void *)(v0 + 264);
  uint64_t v78 = *(void *)(v0 + 272);
  uint64_t v83 = *(void *)(v0 + 240);
  *(void *)typea = *(void *)(v0 + 232);
  uint64_t v87 = *(void *)(v0 + 224);
  uint64_t v89 = *(void *)(v0 + 216);
  uint64_t v91 = *(void *)(v0 + 192);
  sub_100015794(v70, &qword_1009B93F8);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v78);
  swift_task_dealloc(v77);
  swift_task_dealloc(v83);
  swift_task_dealloc(*(void *)typea);
  swift_task_dealloc(v87);
  swift_task_dealloc(v89);
  swift_task_dealloc(v91);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006492D0()
{
  uint64_t v1 = *(void *)(v0 + 400);
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 176);
  swift_release();
  *(void *)(v0 + 11_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v1;
  __n128 v4 = (void *)(v0 + 112);
  swift_errorRetain(v1);
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  uint64_t v6 = &off_10099B000;
  if ((swift_dynamicCast(v2, v0 + 112, v5, v3, 0LL) & 1) != 0)
  {
    swift_errorRelease(*(void *)(v0 + 400));
    if (qword_10099B6D8 != -1) {
      swift_once(&qword_10099B6D8, sub_10064257C);
    }
    uint64_t v7 = *(void *)(v0 + 152);
    uint64_t v8 = type metadata accessor for Logger(0LL);
    sub_10000A720(v8, (uint64_t)qword_100A2AFC8);
    uint64_t v9 = swift_retain_n(v7, 2LL);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *(void *)(v0 + 264);
      uint64_t v13 = *(void *)(v0 + 248);
      uint64_t v136 = *(void *)(v0 + 152);
      *(void *)os_log_type_t type = *(void *)(v0 + 256);
      uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v15 = swift_slowAlloc(32LL, -1LL);
      uint64_t v150 = v15;
      *(_DWORD *)uint64_t v14 = 136446210;
      Peripheral.id.getter(v15);
      uint64_t v16 = sub_1000372EC( (unint64_t *)&unk_1009B93D0,  &qword_10099E338,  (uint64_t)&protocol conformance descriptor for Identifier<A>);
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
      unint64_t v19 = v18;
      uint64_t v20 = v13;
      uint64_t v6 = &off_10099B000;
      (*(void (**)(uint64_t, uint64_t))(*(void *)type + 8LL))(v12, v20);
      *(void *)(v0 + 136) = sub_1003F11D4(v17, v19, &v150);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v14 + 4, v14 + 12);
      swift_release_n(v136, 2LL);
      __n128 v4 = (void *)(v0 + 112);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Timeout reading metadata for %{public}s!", v14, 0xCu);
      swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    else
    {
      uint64_t v38 = *(void *)(v0 + 152);

      swift_release_n(v38, 2LL);
    }

    uint64_t v39 = *(void *)(v0 + 376);
    uint64_t v40 = *(void *)(v0 + 344);
    uint64_t v42 = *(void *)(v0 + 184);
    uint64_t v41 = *(void *)(v0 + 192);
    uint64_t v43 = *(void *)(v0 + 176);
    uint64_t v44 = type metadata accessor for AccessoryMetadata(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56LL))(v39, 1LL, 1LL, v44);
    swift_storeEnumTagMultiPayload(v39, v40, 0LL);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v43);
    uint64_t v45 = swift_errorRelease(*(void *)(v0 + 112));
  }

  else
  {
    swift_errorRelease(*v4);
    if (qword_10099B6D8 != -1) {
      swift_once(&qword_10099B6D8, sub_10064257C);
    }
    uint64_t v21 = *(void *)(v0 + 400);
    uint64_t v22 = type metadata accessor for Logger(0LL);
    sub_10000A720(v22, (uint64_t)qword_100A2AFC8);
    swift_retain();
    swift_errorRetain(v21);
    swift_retain();
    uint64_t v23 = swift_errorRetain(v21);
    os_log_type_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.error.getter(v24);
    BOOL v26 = os_log_type_enabled(v24, v25);
    uint64_t v27 = *(void *)(v0 + 400);
    if (v26)
    {
      uint64_t v28 = *(void *)(v0 + 264);
      uint64_t v29 = *(void *)(v0 + 248);
      uint64_t v130 = *(void *)(v0 + 152);
      uint64_t v132 = *(void *)(v0 + 256);
      uint64_t v30 = swift_slowAlloc(22LL, -1LL);
      uint64_t v137 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t typea = swift_slowAlloc(32LL, -1LL);
      uint64_t v150 = typea;
      *(_DWORD *)uint64_t v30 = 136446466;
      Peripheral.id.getter(typea);
      uint64_t v31 = sub_1000372EC( (unint64_t *)&unk_1009B93D0,  &qword_10099E338,  (uint64_t)&protocol conformance descriptor for Identifier<A>);
      uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter(v29, v31);
      unint64_t v34 = v33;
      (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v28, v29);
      *(void *)(v0 + 120) = sub_1003F11D4(v32, v34, &v150);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v30 + 4, v30 + 12);
      swift_release_n(v130, 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2114;
      uint64_t v35 = _convertErrorToNSError(_:)(v27);
      *(void *)(v0 + 128) = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v30 + 14, v30 + 22);
      *uint64_t v137 = v35;
      swift_errorRelease(v27);
      swift_errorRelease(v27);
      _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "Error reading metadata for %{public}s: %{public}@",  (uint8_t *)v30,  0x16u);
      uint64_t v36 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v137, 1LL, v36);
      swift_slowDealloc(v137, -1LL, -1LL);
      swift_arrayDestroy(typea, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(typea, -1LL, -1LL);
      uint64_t v37 = v30;
      __n128 v4 = (void *)(v0 + 112);
      swift_slowDealloc(v37, -1LL, -1LL);

      swift_errorRelease(v27);
    }

    else
    {
      uint64_t v46 = *(void *)(v0 + 152);
      swift_errorRelease(*(void *)(v0 + 400));
      swift_release_n(v46, 2LL);
      swift_errorRelease(v27);
      swift_errorRelease(v27);
    }

    uint64_t v47 = *(void *)(v0 + 376);
    uint64_t v48 = *(void *)(v0 + 344);
    uint64_t v49 = type metadata accessor for AccessoryMetadata(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56LL))(v47, 1LL, 1LL, v49);
    uint64_t v45 = swift_storeEnumTagMultiPayload(v47, v48, 0LL);
    uint64_t v6 = &off_10099B000;
  }

  uint64_t v50 = *(void *)(v0 + 144);
  Peripheral.id.getter(v45);
  uint64_t v51 = v50 + 144;
  __n128 v52 = swift_beginAccess(v50 + 144, v0 + 40, 0LL, 0LL);
  uint64_t v53 = *(void *)(v50 + 144);
  if (*(void *)(v53 + 16))
  {
    uint64_t v54 = *(void *)(v0 + 272);
    swift_bridgeObjectRetain(v53);
    unint64_t v55 = sub_10030DAD8(v54);
    uint64_t v56 = *(void *)(v0 + 280);
    uint64_t v57 = *(void *)(v0 + 288);
    uint64_t v58 = *(void *)(v0 + 240);
    if ((v59 & 1) != 0)
    {
      sub_10001DC4C( *(void *)(v53 + 56) + *(void *)(v57 + 72) * v55,  *(void *)(v0 + 240),  type metadata accessor for BeaconScanner.AISLookupState);
      uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 56);
      v60(v58, 0LL, 1LL, v56);
    }

    else
    {
      uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 56);
      v60(*(void *)(v0 + 240), 1LL, 1LL, v56);
    }

    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 288) + 56LL);
    ((void (*)(void, uint64_t, uint64_t, void, __n128))v60)( *(void *)(v0 + 240),  1LL,  1LL,  *(void *)(v0 + 280),  v52);
  }

  uint64_t v61 = *(void *)(v0 + 280);
  uint64_t v62 = *(void *)(v0 + 288);
  uint64_t v63 = *(void *)(v0 + 240);
  uint64_t v64 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 256) + 8LL);
  v64(*(void *)(v0 + 272), *(void *)(v0 + 248));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v63, 1LL, v61) == 1)
  {
    sub_100015794(*(void *)(v0 + 240), &qword_10099E330);
LABEL_24:
    if (v6[219] != (_UNKNOWN *)-1LL) {
      swift_once(&qword_10099B6D8, sub_10064257C);
    }
    uint64_t v69 = type metadata accessor for Logger(0LL);
    uint64_t v70 = sub_10000A720(v69, (uint64_t)qword_100A2AFC8);
    uint64_t v71 = (os_log_s *)Logger.logObject.getter(v70);
    os_log_type_t v72 = static os_log_type_t.fault.getter(v71);
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v73 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v73 = 0;
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "Expected to be in pending state", v73, 2u);
      swift_slowDealloc(v73, -1LL, -1LL);
    }

    goto LABEL_44;
  }

  uint64_t v65 = *(void *)(v0 + 296);
  uint64_t v66 = *(void *)(v0 + 304);
  uint64_t v67 = *(void *)(v0 + 280);
  sub_10002218C(*(void *)(v0 + 240), v66, type metadata accessor for BeaconScanner.AISLookupState);
  sub_10001DC4C(v66, v65, type metadata accessor for BeaconScanner.AISLookupState);
  if (swift_getEnumCaseMultiPayload(v65, v67) == 1)
  {
    uint64_t v68 = *(void *)(v0 + 296);
    sub_100018C68(*(void *)(v0 + 304), type metadata accessor for BeaconScanner.AISLookupState);
    sub_100018C68(v68, type metadata accessor for BeaconScanner.AISLookupState);
    goto LABEL_24;
  }

  uint64_t v74 = *(void *)(v0 + 360);
  uint64_t v75 = *(void *)(v0 + 344);
  uint64_t v144 = **(void **)(v0 + 296);
  sub_10001581C(*(void *)(v0 + 376), v74, &qword_1009B93F8);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v74, v75);
  uint64_t v77 = *(uint64_t **)(v0 + 360);
  uint64_t v146 = v4;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v148 = v4 - 6;
    uint64_t v78 = *v77;
    if (v6[219] != (_UNKNOWN *)-1LL) {
      swift_once(&qword_10099B6D8, sub_10064257C);
    }
    uint64_t v79 = type metadata accessor for Logger(0LL);
    sub_10000A720(v79, (uint64_t)qword_100A2AFC8);
    swift_retain();
    swift_errorRetain(v78);
    swift_retain();
    uint64_t v80 = swift_errorRetain(v78);
    unint64_t v81 = (os_log_s *)Logger.logObject.getter(v80);
    os_log_type_t v82 = static os_log_type_t.error.getter(v81);
    if (os_log_type_enabled(v81, v82))
    {
      unint64_t v131 = v4 - 1;
      uint64_t v133 = v4 - 2;
      os_log_type_t typeb = v82;
      uint64_t v83 = *(void *)(v0 + 264);
      uint64_t v129 = v78;
      uint64_t v84 = *(void *)(v0 + 248);
      uint64_t v128 = *(void *)(v0 + 152);
      uint64_t v85 = swift_slowAlloc(22LL, -1LL);
      uint64_t v135 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v138 = swift_slowAlloc(32LL, -1LL);
      uint64_t v150 = v138;
      *(_DWORD *)uint64_t v85 = 136315394;
      log = v81;
      Peripheral.id.getter(v138);
      uint64_t v86 = sub_1000372EC( (unint64_t *)&unk_1009B93D0,  &qword_10099E338,  (uint64_t)&protocol conformance descriptor for Identifier<A>);
      uint64_t v87 = dispatch thunk of CustomStringConvertible.description.getter(v84, v86);
      uint64_t v88 = v4;
      unint64_t v90 = v89;
      uint64_t v91 = v84;
      uint64_t v78 = v129;
      v64(v83, v91);
      *(void *)(v0 + 96) = sub_1003F11D4(v87, v90, &v150);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v133, v131, v85 + 4, v85 + 12);
      swift_release_n(v128, 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v85 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2112;
      swift_errorRetain(v129);
      uint64_t v92 = _swift_stdlib_bridgeErrorToNSError(v129);
      *(void *)(v0 + 104) = v92;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v131, v88, v85 + 14, v85 + 22);
      *uint64_t v135 = v92;
      swift_errorRelease(v129);
      swift_errorRelease(v129);
      _os_log_impl( (void *)&_mh_execute_header,  log,  typeb,  "Failure reading metadata for %s: %@",  (uint8_t *)v85,  0x16u);
      uint64_t v93 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v135, 1LL, v93);
      swift_slowDealloc(v135, -1LL, -1LL);
      swift_arrayDestroy(v138, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v138, -1LL, -1LL);
      swift_slowDealloc(v85, -1LL, -1LL);
    }

    else
    {
      swift_release_n(*(void *)(v0 + 152), 2LL);
      swift_errorRelease(v78);
      swift_errorRelease(v78);
    }

    uint64_t v101 = *(void *)(v0 + 280);
    uint64_t v102 = *(void *)(v0 + 264);
    uint64_t v103 = *(void *)(v0 + 232);
    Peripheral.id.getter(v94);
    uint64_t v104 = type metadata accessor for AccessoryMetadata(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v104 - 8) + 56LL))(v103, 1LL, 1LL, v104);
    swift_storeEnumTagMultiPayload(v103, v101, 1LL);
    v60(v103, 0LL, 1LL, v101);
    swift_beginAccess(v51, v148, 33LL, 0LL);
    sub_100045E60(v103, v102);
    swift_endAccess(v148);
    swift_errorRelease(v78);
  }

  else
  {
    uint64_t v95 = v4 - 12;
    uint64_t v96 = *(void *)(v0 + 280);
    uint64_t v97 = *(void *)(v0 + 264);
    uint64_t v99 = *(void *)(v0 + 224);
    uint64_t v98 = *(void *)(v0 + 232);
    uint64_t v100 = sub_100015750((uint64_t)v77, v99, &qword_1009B9250);
    Peripheral.id.getter(v100);
    sub_10001581C(v99, v98, &qword_1009B9250);
    swift_storeEnumTagMultiPayload(v98, v96, 1LL);
    v60(v98, 0LL, 1LL, v96);
    swift_beginAccess(v51, v95, 33LL, 0LL);
    sub_100045E60(v98, v97);
    swift_endAccess(v95);
    sub_100015794(v99, &qword_1009B9250);
  }

  uint64_t v105 = *(void *)(v144 + 16);
  if (v105)
  {
    uint64_t v106 = *(void *)(v0 + 208);
    uint64_t v107 = v144 + ((*(unsigned __int8 *)(v106 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80));
    uint64_t v108 = *(void *)(v106 + 72);
    uint64_t v109 = *(void (**)(void, uint64_t, void))(v106 + 16);
    do
    {
      uint64_t v111 = *(void *)(v0 + 376);
      uint64_t v113 = *(void *)(v0 + 344);
      uint64_t v112 = *(void *)(v0 + 352);
      v109(*(void *)(v0 + 216), v107, *(void *)(v0 + 200));
      sub_10001581C(v111, v112, &qword_1009B93F8);
      int v114 = swift_getEnumCaseMultiPayload(v112, v113);
      uint64_t v115 = *(void **)(v0 + 352);
      if (v114 == 1)
      {
        uint64_t v110 = *(void *)(v0 + 200);
        *(void *)(v0 + 88) = *v115;
        CheckedContinuation.resume(throwing:)(v146 - 3, v110);
      }

      else
      {
        uint64_t v116 = *(void *)(v0 + 224);
        uint64_t v117 = *(void *)(v0 + 200);
        sub_100015750((uint64_t)v115, v116, &qword_1009B9250);
        CheckedContinuation.resume(returning:)(v116, v117);
      }

      (*(void (**)(void, void))(v106 + 8))(*(void *)(v0 + 216), *(void *)(v0 + 200));
      v107 += v108;
      --v105;
    }

    while (v105);
  }

  swift_bridgeObjectRelease();
  sub_100018C68(*(void *)(v0 + 304), type metadata accessor for BeaconScanner.AISLookupState);
LABEL_44:
  uint64_t v119 = *(void *)(v0 + 368);
  uint64_t v118 = *(void *)(v0 + 376);
  uint64_t v121 = *(void *)(v0 + 352);
  uint64_t v120 = *(void *)(v0 + 360);
  uint64_t v122 = *(void *)(v0 + 336);
  uint64_t v124 = *(void *)(v0 + 296);
  uint64_t v123 = *(void *)(v0 + 304);
  uint64_t v125 = *(void *)(v0 + 264);
  uint64_t v126 = *(void *)(v0 + 272);
  uint64_t v139 = *(void *)(v0 + 240);
  *(void *)typec = *(void *)(v0 + 232);
  uint64_t v145 = *(void *)(v0 + 224);
  uint64_t v147 = *(void *)(v0 + 216);
  uint64_t v149 = *(void *)(v0 + 192);
  sub_100015794(v118, &qword_1009B93F8);
  swift_task_dealloc(v118);
  swift_task_dealloc(v119);
  swift_task_dealloc(v120);
  swift_task_dealloc(v121);
  swift_task_dealloc(v122);
  swift_task_dealloc(v123);
  swift_task_dealloc(v124);
  swift_task_dealloc(v126);
  swift_task_dealloc(v125);
  swift_task_dealloc(v139);
  swift_task_dealloc(*(void *)typec);
  swift_task_dealloc(v145);
  swift_task_dealloc(v147);
  swift_task_dealloc(v149);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10064A060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[4] = a1;
  void v4[5] = a3;
  uint64_t v7 = sub_100004AEC(&qword_10099E338);
  void v4[6] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[7] = v8;
  v4[8] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for AccessoryMetadata(0LL);
  void v4[9] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  void v4[10] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[11] = swift_task_alloc(v11);
  uint64_t v12 = swift_task_alloc(v11);
  v4[12] = v12;
  uint64_t v13 = (void *)swift_task_alloc(dword_1009B9414);
  void v4[13] = v13;
  *uint64_t v13 = v4;
  v13[1] = sub_10064A138;
  return sub_10064A4E0(v12, a3, a4);
}

uint64_t sub_10064A138()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 104LL);
  *(void *)(*(void *)v1 + 112LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_10064A498;
  }
  else {
    uint64_t v3 = sub_10064A19C;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10064A19C()
{
  if (qword_10099B6D8 != -1) {
    swift_once(&qword_10099B6D8, sub_10064257C);
  }
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10000A720(v4, (uint64_t)qword_100A2AFC8);
  sub_10001DC4C(v2, v1, type metadata accessor for AccessoryMetadata);
  uint64_t v5 = swift_retain_n(v3, 2LL);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter(v6);
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 88);
  if (v8)
  {
    uint64_t v10 = *(void *)(v0 + 64);
    uint64_t v28 = *(void *)(v0 + 56);
    uint64_t v12 = *(void *)(v0 + 40);
    uint64_t v11 = *(void *)(v0 + 48);
    uint64_t v13 = swift_slowAlloc(22LL, -1LL);
    uint64_t v29 = swift_slowAlloc(64LL, -1LL);
    uint64_t v30 = v29;
    *(_DWORD *)uint64_t v13 = 136315394;
    Peripheral.id.getter(v29);
    uint64_t v14 = sub_1000372EC( (unint64_t *)&unk_1009B93D0,  &qword_10099E338,  (uint64_t)&protocol conformance descriptor for Identifier<A>);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(v11, v14);
    unint64_t v17 = v16;
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v10, v11);
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = sub_1003F11D4(v15, v17, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease();
    swift_release_n(v12, 2LL);
    *(_WORD *)(v13 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2080;
    uint64_t v18 = sub_100089B5C();
    *(void *)(v0 + 24) = sub_1003F11D4(v18, v19, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68(v9, type metadata accessor for AccessoryMetadata);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Read metadata for %s: %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v29, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {
    swift_release_n(*(void *)(v0 + 40), 2LL);
    sub_100018C68(v9, type metadata accessor for AccessoryMetadata);
  }

  uint64_t v20 = *(void *)(v0 + 88);
  uint64_t v21 = *(void *)(v0 + 96);
  uint64_t v22 = *(void *)(v0 + 72);
  uint64_t v23 = *(void *)(v0 + 80);
  uint64_t v24 = *(void *)(v0 + 64);
  uint64_t v25 = *(void *)(v0 + 32);
  sub_10002218C(v21, v25, type metadata accessor for AccessoryMetadata);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v23 + 56))(v25, 0LL, 1LL, v22);
  uint64_t v26 = sub_100004AEC(&qword_1009B93F8);
  swift_storeEnumTagMultiPayload(v25, v26, 0LL);
  swift_task_dealloc(v21);
  swift_task_dealloc(v20);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10064A498()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 96));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10064A4E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[16] = a3;
  v4[17] = v3;
  v4[14] = a1;
  v4[15] = a2;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  v4[18] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[19] = v6;
  v4[20] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_10099E338);
  v4[21] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[22] = v8;
  v4[23] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0LL);
  v4[24] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[25] = v10;
  v4[26] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Logger(0LL);
  v4[27] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v4[28] = v12;
  v4[29] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_1009A1BB8);
  v4[30] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v4[31] = v14;
  unint64_t v15 = (*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[32] = swift_task_alloc(v15);
  v4[33] = swift_task_alloc(v15);
  v4[34] = swift_task_alloc(v15);
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_1009B9340);
  v4[35] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v4[36] = v17;
  unint64_t v18 = (*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[37] = swift_task_alloc(v18);
  v4[38] = swift_task_alloc(v18);
  v4[39] = swift_task_alloc(v18);
  v4[40] = swift_task_alloc(v18);
  uint64_t v19 = type metadata accessor for ContinuousClock.Instant(0LL);
  v4[41] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v4[42] = v20;
  unint64_t v21 = (*(void *)(v20 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[43] = swift_task_alloc(v21);
  v4[44] = swift_task_alloc(v21);
  v4[45] = swift_task_alloc(v21);
  v4[46] = swift_task_alloc(v21);
  uint64_t v22 = type metadata accessor for ContinuousClock(0LL);
  v4[47] = v22;
  uint64_t v23 = *(void *)(v22 - 8);
  v4[48] = v23;
  v4[49] = swift_task_alloc((*(void *)(v23 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10064A6D4, v3, 0LL);
}

uint64_t sub_10064A6D4(uint64_t a1)
{
  uint64_t v2 = ContinuousClock.init()(a1);
  uint64_t v3 = static Task<>.checkCancellation()(v2);
  ContinuousClock.now.getter(v3);
  uint64_t v4 = (void *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.connect() + 1));
  *(void *)(v1 + 400) = v4;
  void *v4 = v1;
  v4[1] = sub_10064A788;
  return v6();
}

uint64_t sub_10064A788()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 400LL);
  uint64_t v3 = *(void **)v1;
  v3[51] = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_10064C1D8, v3[17], 0LL);
  }
  uint64_t v6 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.subscript.getter
                                      + async function pointer to dispatch thunk of Peripheral.subscript.getter);
  uint64_t v5 = (void *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.subscript.getter
                                  + 1));
  v3[52] = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_10064A834;
  return v6(v3[16]);
}

uint64_t sub_10064A834(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 416LL);
  v3[53] = a1;
  v3[54] = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = sub_10064C24C;
  }
  else {
    uint64_t v5 = sub_10064A8A0;
  }
  return swift_task_switch(v5, v3[17], 0LL);
}

uint64_t sub_10064A8A0(uint64_t a1)
{
  uint64_t v2 = v1[54];
  static Task<>.checkCancellation()(a1);
  if (!v2)
  {
    sub_10003285C(0, 11LL, 0);
    __asm { BR              X9 }
  }

  (*(void (**)(void, void))(v1[42] + 8LL))(v1[46], v1[41]);
  swift_release();
  v1[90] = v2;
  v1[91] = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10064C044;
  return v5();
}

uint64_t sub_10064AC00()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 448);
  *(void *)(*v1 + 456) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void *)(v2 + 136);
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v5 = sub_10064C2C0;
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_10064AC84;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_10064AC84(uint64_t a1)
{
  uint64_t v2 = v1[57];
  static Task<>.checkCancellation()(a1);
  if (v2)
  {
    (*(void (**)(void, void))(v1[42] + 8LL))(v1[46], v1[41]);
    swift_release();
    v1[90] = v2;
    v1[91] = v3;
    *uint64_t v3 = v1;
    v3[1] = sub_10064C044;
    return v7();
  }

  else
  {
    uint64_t v5 = type metadata accessor for Characteristic(0LL);
    v1[58] = v5;
    Identifier.init(stringLiteral:)("6AA50001-6352-4D57-A7B4-003A416FBB0B", 36LL, 2LL, v5);
    uint64_t v8 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Service.subscript.getter
                                        + async function pointer to dispatch thunk of Service.subscript.getter);
    uint64_t v6 = (void *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Service.subscript.getter
                                    + 1));
    v1[59] = v6;
    *uint64_t v6 = v1;
    v6[1] = sub_10064AD94;
    return v8(v1[39]);
  }

uint64_t sub_10064AD94(uint64_t a1)
{
  uint64_t v4 = *(void *)(*(void *)v2 + 472LL);
  uint64_t v5 = *(void **)v2;
  v5[60] = a1;
  v5[61] = v1;
  swift_task_dealloc(v4);
  uint64_t v6 = v5[39];
  uint64_t v7 = v5[35];
  uint64_t v8 = v5[36];
  if (v1)
  {
    uint64_t v9 = v5[17];
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    return swift_task_switch(sub_10064C34C, v9, 0LL);
  }

  else
  {
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v5[62] = v11;
    v11(v6, v7);
    v5[63] = v12;
    void *v12 = v5;
    v12[1] = sub_10064AE6C;
    return v13(v5[34]);
  }

uint64_t sub_10064AE6C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 504LL);
  uint64_t v3 = *(void **)v1;
  v3[64] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    uint64_t v4 = v3[17];
    swift_release();
    return swift_task_switch(sub_10064C3D8, v4, 0LL);
  }

  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
    v3[65] = v6;
    uint64_t v7 = sub_1000372EC( (unint64_t *)&qword_1009B9420,  &qword_1009A1BB8,  (uint64_t)&protocol conformance descriptor for AsyncThrowingStream<A, B>);
    v3[66] = v7;
    *uint64_t v6 = v3;
    v6[1] = sub_10064AF50;
    return AsyncSequence.first()(v3 + 2, v3[30], v7);
  }

uint64_t sub_10064AF50()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 520LL);
  *(void *)(*(void *)v1 + 536LL) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = v2[34];
  uint64_t v5 = v2[30];
  uint64_t v6 = v2[17];
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v2[31] + 8LL);
  if (v0)
  {
    v7(v4, v5);
    uint64_t v8 = sub_10064C464;
  }

  else
  {
    v2[68] = v7;
    v7(v4, v5);
    uint64_t v8 = sub_10064AFD8;
  }

  return swift_task_switch(v8, v6, 0LL);
}

uint64_t sub_10064AFD8()
{
  uint64_t v1 = v0[2];
  unint64_t v2 = v0[3];
  v0[69] = v1;
  v0[70] = v2;
  if (v2 >> 60 == 15) {
    goto LABEL_4;
  }
  sub_10001736C(v1, v2);
  sub_1000F6254(v1, v2);
  v0[71] = v3;
  v0[72] = v4;
  if (v4 >> 60 == 15)
  {
    sub_1000182F0(v1, v2);
LABEL_4:
    uint64_t v5 = v0[58];
    uint64_t v6 = v0[46];
    uint64_t v7 = v0[41];
    uint64_t v8 = v0[42];
    uint64_t v9 = v0[35];
    uint64_t v10 = v0[36];
    uint64_t v11 = type metadata accessor for BeaconScanner.Error(0LL);
    uint64_t v12 = sub_100015C48( &qword_1009B9338,  255LL,  type metadata accessor for BeaconScanner.Error,  (uint64_t)&unk_100811B20);
    uint64_t v13 = swift_allocError(v11, v12, 0LL, 0LL);
    uint64_t v15 = v14;
    Identifier.init(stringLiteral:)("6AA50001-6352-4D57-A7B4-003A416FBB0B", 36LL, 2LL, v5);
    uint64_t v16 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v15, 0LL, 2LL, v9);
    swift_willThrow(v16);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
LABEL_5:
    v0[90] = v13;
    v0[91] = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_10064C044;
    return v23();
  }

  uint64_t v19 = v3;
  unint64_t v20 = v4;
  uint64_t v21 = v0[67];
  static Task<>.checkCancellation()(v3);
  if (v21)
  {
    uint64_t v13 = v21;
    (*(void (**)(void, void))(v0[42] + 8LL))(v0[46], v0[41]);
    sub_1000182F0(v19, v20);
    sub_1000182F0(v1, v2);
    swift_release();
    goto LABEL_5;
  }

  Identifier.init(stringLiteral:)("6AA50002-6352-4D57-A7B4-003A416FBB0B", 36LL, 2LL, v0[58]);
  uint64_t v24 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Service.subscript.getter
                                       + async function pointer to dispatch thunk of Service.subscript.getter);
  uint64_t v22 = (void *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Service.subscript.getter
                                   + 1));
  v0[73] = v22;
  *uint64_t v22 = v0;
  v22[1] = sub_10064B224;
  return v24(v0[38]);
}

uint64_t sub_10064B224(uint64_t a1)
{
  uint64_t v4 = *(void *)(*(void *)v2 + 584LL);
  uint64_t v5 = *(void **)v2;
  v5[74] = a1;
  v5[75] = v1;
  swift_task_dealloc(v4);
  uint64_t v6 = (void (*)(uint64_t, uint64_t))v5[62];
  uint64_t v7 = v5[38];
  uint64_t v8 = v5[35];
  if (v1)
  {
    uint64_t v9 = v5[17];
    v6(v7, v8);
    return swift_task_switch(sub_10064C4F0, v9, 0LL);
  }

  else
  {
    v6(v7, v8);
    v5[76] = v11;
    void *v11 = v5;
    v11[1] = sub_10064B2F8;
    return v12(v5[33]);
  }

uint64_t sub_10064B2F8()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 608LL);
  uint64_t v3 = *(void **)v1;
  v3[77] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    uint64_t v4 = v3[17];
    swift_release();
    return swift_task_switch(sub_10064C5B4, v4, 0LL);
  }

  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
    v3[78] = v6;
    *uint64_t v6 = v3;
    v6[1] = sub_10064B3BC;
    return AsyncSequence.first()(v3 + 4, v3[30], v3[66]);
  }

uint64_t sub_10064B3BC()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 624LL);
  *(void *)(*(void *)v1 + 632LL) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v2[68];
  uint64_t v5 = v2[33];
  uint64_t v6 = v2[30];
  uint64_t v7 = v2[17];
  v4(v5, v6);
  if (v0) {
    uint64_t v8 = sub_10064C678;
  }
  else {
    uint64_t v8 = sub_10064B434;
  }
  return swift_task_switch(v8, v7, 0LL);
}

uint64_t sub_10064B434()
{
  uint64_t v1 = v0[4];
  unint64_t v2 = v0[5];
  v0[80] = v1;
  v0[81] = v2;
  if (v2 >> 60 == 15) {
    goto LABEL_6;
  }
  v0[6] = v1;
  v0[7] = v2;
  sub_100042F34();
  uint64_t v3 = DataProtocol.nullTerminatedUTF8String.getter(&type metadata for Data);
  v0[10] = v3;
  v0[11] = v4;
  v0[82] = v4;
  if (!v4)
  {
    sub_1000182F0(v1, v2);
LABEL_6:
    unint64_t v11 = v0[72];
    uint64_t v12 = v0[71];
    uint64_t v13 = v0[69];
    uint64_t v14 = v0[58];
    unint64_t v27 = v0[70];
    uint64_t v28 = v0[46];
    uint64_t v25 = v0[42];
    uint64_t v26 = v0[41];
    uint64_t v15 = v0[35];
    uint64_t v16 = v0[36];
    uint64_t v17 = type metadata accessor for BeaconScanner.Error(0LL);
    uint64_t v18 = sub_100015C48( &qword_1009B9338,  255LL,  type metadata accessor for BeaconScanner.Error,  (uint64_t)&unk_100811B20);
    uint64_t v6 = swift_allocError(v17, v18, 0LL, 0LL);
    uint64_t v20 = v19;
    Identifier.init(stringLiteral:)("6AA50002-6352-4D57-A7B4-003A416FBB0B", 36LL, 2LL, v14);
    uint64_t v21 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v20, 0LL, 2LL, v15);
    swift_willThrow(v21);
    swift_release();
    sub_1000182F0(v12, v11);
    sub_1000182F0(v13, v27);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v28, v26);
    goto LABEL_7;
  }

  uint64_t v5 = v0[79];
  static Task<>.checkCancellation()(v3);
  if (v5)
  {
    uint64_t v6 = v5;
    unint64_t v7 = v0[72];
    uint64_t v8 = v0[71];
    unint64_t v9 = v0[70];
    uint64_t v10 = v0[69];
    (*(void (**)(void, void))(v0[42] + 8LL))(v0[46], v0[41]);
    swift_bridgeObjectRelease();
    sub_1000182F0(v1, v2);
    sub_1000182F0(v8, v7);
    sub_1000182F0(v10, v9);
    swift_release();
LABEL_7:
    v0[90] = v6;
    v0[91] = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_10064C044;
    return v29();
  }

  Identifier.init(stringLiteral:)("6AA50007-6352-4D57-A7B4-003A416FBB0B", 36LL, 2LL, v0[58]);
  uint64_t v30 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Service.subscript.getter
                                       + async function pointer to dispatch thunk of Service.subscript.getter);
  uint64_t v24 = (void *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Service.subscript.getter
                                   + 1));
  v0[83] = v24;
  *uint64_t v24 = v0;
  v24[1] = sub_10064B6D0;
  return v30(v0[37]);
}

uint64_t sub_10064B6D0(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 664);
  uint64_t v5 = *v2;
  *(void *)(v5 + 67_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = a1;
  *(void *)(v5 + 680) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    uint64_t v6 = *(void *)(v5 + 136);
    (*(void (**)(void, void))(v5 + 496))(*(void *)(v5 + 296), *(void *)(v5 + 280));
    swift_bridgeObjectRelease();
    return swift_task_switch(sub_10064C73C, v6, 0LL);
  }

  else
  {
    (*(void (**)(void, void))(v5 + 496))(*(void *)(v5 + 296), *(void *)(v5 + 280));
    *(void *)(v5 + 688) = v8;
    *uint64_t v8 = v5;
    v8[1] = sub_10064B7BC;
    return v9(*(void *)(v5 + 256));
  }

uint64_t sub_10064B7BC()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 688LL);
  uint64_t v3 = *(void **)v1;
  v3[87] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    uint64_t v4 = v3[17];
    swift_release();
    swift_bridgeObjectRelease();
    return swift_task_switch(sub_10064C81C, v4, 0LL);
  }

  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
    v3[88] = v6;
    *uint64_t v6 = v3;
    v6[1] = sub_10064B88C;
    return AsyncSequence.first()(v3 + 8, v3[30], v3[66]);
  }

uint64_t sub_10064B88C()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 704LL);
  *(void *)(*(void *)v1 + 712LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = (void (*)(uint64_t, uint64_t))v2[68];
    uint64_t v5 = v2[32];
    uint64_t v6 = v2[30];
    uint64_t v7 = v2[17];
    v4(v5, v6);
    swift_bridgeObjectRelease();
    uint64_t v8 = sub_10064C8FC;
    uint64_t v9 = v7;
  }

  else
  {
    uint64_t v10 = v2[17];
    ((void (*)(void, void))v2[68])(v2[32], v2[30]);
    uint64_t v8 = sub_10064B928;
    uint64_t v9 = v10;
  }

  return swift_task_switch(v8, v9, 0LL);
}

uint64_t sub_10064B928()
{
  uint64_t v1 = v0[8];
  unint64_t v2 = v0[9];
  if (v2 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    uint64_t v33 = v0[80];
    unint64_t v34 = v0[72];
    uint64_t v35 = v0[71];
    uint64_t v96 = v0[69];
    unint64_t v100 = v0[81];
    uint64_t v36 = v0[58];
    unint64_t v105 = v0[70];
    uint64_t v107 = v0[46];
    uint64_t v94 = v0[42];
    uint64_t v103 = v0[41];
    uint64_t v37 = v0[35];
    uint64_t v38 = v0[36];
    uint64_t v39 = type metadata accessor for BeaconScanner.Error(0LL);
    uint64_t v40 = sub_100015C48( &qword_1009B9338,  255LL,  type metadata accessor for BeaconScanner.Error,  (uint64_t)&unk_100811B20);
    uint64_t v41 = swift_allocError(v39, v40, 0LL, 0LL);
    uint64_t v43 = v42;
    Identifier.init(stringLiteral:)("6AA50007-6352-4D57-A7B4-003A416FBB0B", 36LL, 2LL, v36);
    uint64_t v44 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v43, 0LL, 2LL, v37);
    swift_willThrow(v44);
    swift_release();
    sub_1000182F0(v35, v34);
    sub_1000182F0(v33, v100);
    sub_1000182F0(v96, v105);
    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v107, v103);
    v0[90] = v41;
    v0[91] = v45;
    *uint64_t v45 = v0;
    v45[1] = sub_10064C044;
    uint64_t v46 = v108;
    return v46();
  }

  sub_10001736C(v0[8], v0[9]);
  sub_10045288C(v1, v2);
  if ((v3 & 0x100000000LL) != 0)
  {
    swift_bridgeObjectRelease();
    sub_1000182F0(v1, v2);
    goto LABEL_9;
  }

  uint64_t v102 = v1;
  unint64_t v104 = v2;
  int v106 = v3;
  ContinuousClock.now.getter(v3);
  if (qword_10099B6D8 != -1) {
    swift_once(&qword_10099B6D8, sub_10064257C);
  }
  uint64_t v4 = v0[46];
  uint64_t v98 = v0[45];
  uint64_t v6 = v0[43];
  uint64_t v5 = v0[44];
  uint64_t v8 = v0[41];
  uint64_t v7 = v0[42];
  uint64_t v9 = v0[28];
  uint64_t v10 = v0[29];
  uint64_t v11 = v0[27];
  uint64_t v12 = sub_10000A720(v11, (uint64_t)qword_100A2AFC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v10, v12, v11);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v13(v5, v4, v8);
  uint64_t v14 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v13)(v6, v98, v8);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter(v15);
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v18 = v0[43];
  uint64_t v19 = v0[44];
  uint64_t v20 = v0[41];
  uint64_t v22 = v0[28];
  uint64_t v21 = v0[29];
  uint64_t v23 = v0[27];
  if (v17)
  {
    uint64_t v99 = v0[27];
    os_log_type_t v93 = v16;
    uint64_t v24 = v0[25];
    uint64_t v25 = v0[26];
    uint64_t v82 = v0[24];
    uint64_t v91 = v15;
    uint64_t v84 = v0[42];
    uint64_t v26 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v89 = swift_slowAlloc(32LL, -1LL);
    v109[0] = v89;
    *(_DWORD *)uint64_t v26 = 136446210;
    static Duration.UnitsFormatStyle.Unit.milliseconds.getter(v89);
    uint64_t v27 = sub_100015C48( &qword_1009AE520,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant,  (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
    uint64_t v28 = static Duration.description<A>(_:_:units:)(v19, v18, v25, v20, v27);
    uint64_t v87 = v22;
    unint64_t v30 = v29;
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v82);
    v0[13] = sub_1003F11D4(v28, v30, v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 13, v0 + 14, v26 + 4, v26 + 12);
    swift_bridgeObjectRelease();
    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v84 + 8);
    v31(v19, v20);
    uint64_t v86 = v31;
    v31(v18, v20);
    _os_log_impl((void *)&_mh_execute_header, v91, v93, "Metadata read time: %{public}s", v26, 0xCu);
    swift_arrayDestroy(v89, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v89, -1LL, -1LL);
    swift_slowDealloc(v26, -1LL, -1LL);

    uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v87 + 8))(v21, v99);
  }

  else
  {
    uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v0[42] + 8LL);
    v47(v0[44], v0[41]);
    uint64_t v86 = v47;
    v47(v18, v20);

    uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  }

  uint64_t v77 = v0[10];
  uint64_t v78 = v0[82];
  uint64_t v75 = v0[71];
  uint64_t v76 = v0[72];
  unint64_t v69 = v0[81];
  unint64_t v70 = v0[70];
  uint64_t v68 = v0[69];
  uint64_t v73 = v0[47];
  uint64_t v74 = v0[49];
  uint64_t v71 = v0[46];
  uint64_t v72 = v0[48];
  uint64_t v65 = v0[45];
  uint64_t v66 = v0[80];
  uint64_t v79 = v0[44];
  uint64_t v80 = v0[43];
  uint64_t v48 = v0[41];
  uint64_t v81 = v0[40];
  uint64_t v83 = v0[39];
  uint64_t v85 = v0[38];
  uint64_t v88 = v0[37];
  uint64_t v90 = v0[34];
  uint64_t v92 = v0[33];
  uint64_t v95 = v0[32];
  uint64_t v97 = v0[29];
  uint64_t v101 = v0[26];
  uint64_t v49 = v0[22];
  uint64_t v50 = v0[23];
  uint64_t v51 = v0[20];
  uint64_t v52 = v0[21];
  uint64_t v64 = v0[19];
  uint64_t v67 = v0[18];
  uint64_t v53 = v0[14];
  Peripheral.id.getter(v32);
  Identifier.id.getter(v52);
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v50, v52);
  swift_release();
  sub_1000182F0(v102, v104);
  sub_1000182F0(v66, v69);
  sub_1000182F0(v68, v70);
  v86(v65, v48);
  v86(v71, v48);
  (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v74, v73);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 32))(v53, v51, v67);
  uint64_t v54 = (int *)type metadata accessor for AccessoryMetadata(0LL);
  unint64_t v55 = (void *)(v53 + v54[5]);
  void *v55 = v75;
  v55[1] = v76;
  uint64_t v56 = (void *)(v53 + v54[6]);
  *uint64_t v56 = v77;
  v56[1] = v78;
  uint64_t v57 = (void *)(v53 + v54[7]);
  *uint64_t v57 = 0LL;
  v57[1] = 0LL;
  *(_DWORD *)(v53 + v54[8]) = v106;
  uint64_t v58 = v53 + v54[9];
  *(_DWORD *)uint64_t v58 = 0;
  *(_BYTE *)(v58 + 4) = 1;
  uint64_t v59 = v53 + v54[10];
  *(void *)uint64_t v59 = 0LL;
  *(void *)(v59 + 8) = 0LL;
  *(_BYTE *)(v59 + swift_weakDestroy(v0 + 16) = 1;
  uint64_t v60 = v53 + v54[11];
  *(void *)uint64_t v60 = 0LL;
  *(_BYTE *)(v60 + 8) = 1;
  uint64_t v61 = v53 + v54[12];
  *(_DWORD *)uint64_t v61 = 0;
  *(_BYTE *)(v61 + 4) = 1;
  *(_BYTE *)(v53 + v54[13]) = 4;
  *(_BYTE *)(v53 + v54[14]) = 5;
  uint64_t v62 = (void *)(v53 + v54[15]);
  *uint64_t v62 = 0LL;
  v62[1] = 0xE000000000000000LL;
  swift_task_dealloc(v74);
  swift_task_dealloc(v71);
  swift_task_dealloc(v65);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v83);
  swift_task_dealloc(v85);
  swift_task_dealloc(v88);
  swift_task_dealloc(v90);
  swift_task_dealloc(v92);
  swift_task_dealloc(v95);
  swift_task_dealloc(v97);
  swift_task_dealloc(v101);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  uint64_t v46 = (uint64_t (*)(void))v0[1];
  return v46();
}

uint64_t sub_10064C044()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 728);
  *(void *)(*v1 + 736) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_10064C9DC;
  }
  else {
    uint64_t v4 = sub_10064C0A8;
  }
  return swift_task_switch(v4, *(void *)(v2 + 136), 0LL);
}

uint64_t sub_10064C0A8()
{
  uint64_t v1 = *(void *)(v0 + 384);
  uint64_t v2 = *(void *)(v0 + 392);
  uint64_t v4 = *(void *)(v0 + 368);
  uint64_t v3 = *(void *)(v0 + 376);
  uint64_t v5 = *(void *)(v0 + 352);
  uint64_t v6 = *(void *)(v0 + 360);
  uint64_t v7 = *(void *)(v0 + 344);
  uint64_t v8 = *(void *)(v0 + 320);
  uint64_t v10 = *(void *)(v0 + 312);
  uint64_t v11 = *(void *)(v0 + 304);
  uint64_t v12 = *(void *)(v0 + 296);
  uint64_t v13 = *(void *)(v0 + 272);
  uint64_t v14 = *(void *)(v0 + 264);
  uint64_t v15 = *(void *)(v0 + 256);
  uint64_t v16 = *(void *)(v0 + 232);
  uint64_t v17 = *(void *)(v0 + 208);
  uint64_t v18 = *(void *)(v0 + 184);
  uint64_t v19 = *(void *)(v0 + 160);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10064C1D8()
{
  v0[90] = v0[51];
  v0[91] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10064C044;
  return v3();
}

uint64_t sub_10064C24C()
{
  v0[90] = v0[54];
  v0[91] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10064C044;
  return v3();
}

uint64_t sub_10064C2C0()
{
  uint64_t v1 = v0[46];
  uint64_t v2 = v0[41];
  uint64_t v3 = v0[42];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v0[90] = v0[57];
  v0[91] = v4;
  void *v4 = v0;
  v4[1] = sub_10064C044;
  return v6();
}

uint64_t sub_10064C34C()
{
  uint64_t v1 = v0[46];
  uint64_t v2 = v0[41];
  uint64_t v3 = v0[42];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v0[90] = v0[61];
  v0[91] = v4;
  void *v4 = v0;
  v4[1] = sub_10064C044;
  return v6();
}

uint64_t sub_10064C3D8()
{
  uint64_t v1 = v0[46];
  uint64_t v2 = v0[41];
  uint64_t v3 = v0[42];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v0[90] = v0[64];
  v0[91] = v4;
  void *v4 = v0;
  v4[1] = sub_10064C044;
  return v6();
}

uint64_t sub_10064C464()
{
  uint64_t v1 = v0[46];
  uint64_t v2 = v0[41];
  uint64_t v3 = v0[42];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v0[90] = v0[67];
  v0[91] = v4;
  void *v4 = v0;
  v4[1] = sub_10064C044;
  return v6();
}

uint64_t sub_10064C4F0()
{
  unint64_t v1 = v0[72];
  uint64_t v2 = v0[71];
  unint64_t v3 = v0[70];
  uint64_t v4 = v0[69];
  uint64_t v5 = v0[46];
  uint64_t v6 = v0[41];
  uint64_t v7 = v0[42];
  swift_release();
  sub_1000182F0(v2, v1);
  sub_1000182F0(v4, v3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v0[90] = v0[75];
  v0[91] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10064C044;
  return v10();
}

uint64_t sub_10064C5B4()
{
  unint64_t v1 = v0[72];
  uint64_t v2 = v0[71];
  unint64_t v3 = v0[70];
  uint64_t v4 = v0[69];
  uint64_t v5 = v0[46];
  uint64_t v6 = v0[41];
  uint64_t v7 = v0[42];
  swift_release();
  sub_1000182F0(v2, v1);
  sub_1000182F0(v4, v3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v0[90] = v0[77];
  v0[91] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10064C044;
  return v10();
}

uint64_t sub_10064C678()
{
  unint64_t v1 = v0[72];
  uint64_t v2 = v0[71];
  unint64_t v3 = v0[70];
  uint64_t v4 = v0[69];
  uint64_t v5 = v0[46];
  uint64_t v6 = v0[41];
  uint64_t v7 = v0[42];
  swift_release();
  sub_1000182F0(v2, v1);
  sub_1000182F0(v4, v3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v0[90] = v0[79];
  v0[91] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10064C044;
  return v10();
}

uint64_t sub_10064C73C()
{
  unint64_t v1 = v0[81];
  uint64_t v2 = v0[80];
  unint64_t v3 = v0[72];
  uint64_t v4 = v0[71];
  unint64_t v5 = v0[70];
  uint64_t v6 = v0[69];
  uint64_t v7 = v0[46];
  uint64_t v8 = v0[41];
  uint64_t v9 = v0[42];
  swift_release();
  sub_1000182F0(v4, v3);
  sub_1000182F0(v2, v1);
  sub_1000182F0(v6, v5);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v0[90] = v0[85];
  v0[91] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_10064C044;
  return v12();
}

uint64_t sub_10064C81C()
{
  unint64_t v1 = v0[81];
  uint64_t v2 = v0[80];
  unint64_t v3 = v0[72];
  uint64_t v4 = v0[71];
  unint64_t v5 = v0[70];
  uint64_t v6 = v0[69];
  uint64_t v7 = v0[46];
  uint64_t v8 = v0[41];
  uint64_t v9 = v0[42];
  swift_release();
  sub_1000182F0(v4, v3);
  sub_1000182F0(v2, v1);
  sub_1000182F0(v6, v5);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v0[90] = v0[87];
  v0[91] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_10064C044;
  return v12();
}

uint64_t sub_10064C8FC()
{
  unint64_t v1 = v0[81];
  uint64_t v2 = v0[80];
  unint64_t v3 = v0[72];
  uint64_t v4 = v0[71];
  unint64_t v5 = v0[70];
  uint64_t v6 = v0[69];
  uint64_t v7 = v0[46];
  uint64_t v8 = v0[41];
  uint64_t v9 = v0[42];
  swift_release();
  sub_1000182F0(v4, v3);
  sub_1000182F0(v2, v1);
  sub_1000182F0(v6, v5);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v0[90] = v0[89];
  v0[91] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_10064C044;
  return v12();
}

uint64_t sub_10064C9DC()
{
  if (qword_10099B6D8 != -1) {
    swift_once(&qword_10099B6D8, sub_10064257C);
  }
  uint64_t v1 = *(void *)(v0 + 736);
  sub_10000A720(*(void *)(v0 + 216), (uint64_t)qword_100A2AFC8);
  uint64_t v2 = swift_errorRetain(v1);
  unint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(void *)(v0 + 736);
  if (v5)
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v7 = 138543362;
    uint64_t v9 = _convertErrorToNSError(_:)(v6);
    *(void *)(v0 + 96) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v7 + 4, v7 + 12);
    *uint64_t v8 = v9;
    swift_errorRelease(v6);
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "cancelConnection error in _readAccessoryMetadata() catch block: %{public}@",  v7,  0xCu);
    uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v8, 1LL, v10);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);

    uint64_t v11 = swift_errorRelease(v6);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 736));
    swift_errorRelease(v6);
  }

  uint64_t v12 = *(void *)(v0 + 384);
  uint64_t v13 = *(void *)(v0 + 392);
  uint64_t v15 = *(void *)(v0 + 368);
  uint64_t v14 = *(void *)(v0 + 376);
  uint64_t v16 = *(void *)(v0 + 352);
  uint64_t v17 = *(void *)(v0 + 360);
  uint64_t v18 = *(void *)(v0 + 344);
  uint64_t v19 = *(void *)(v0 + 320);
  uint64_t v21 = *(void *)(v0 + 312);
  uint64_t v22 = *(void *)(v0 + 304);
  uint64_t v23 = *(void *)(v0 + 296);
  uint64_t v24 = *(void *)(v0 + 272);
  uint64_t v25 = *(void *)(v0 + 264);
  uint64_t v26 = *(void *)(v0 + 256);
  uint64_t v27 = *(void *)(v0 + 232);
  uint64_t v28 = *(void *)(v0 + 208);
  uint64_t v29 = *(void *)(v0 + 184);
  uint64_t v30 = *(void *)(v0 + 160);
  swift_willThrow(v11);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10064CC6C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10064CC90(uint64_t a1)
{
  return sub_1006434AC(a1, *(void *)(v1 + 16));
}

uint64_t type metadata accessor for BeaconScanner.Error(uint64_t a1)
{
  return sub_10008BED8(a1, (uint64_t *)&unk_1009B94F0, (uint64_t)&nominal type descriptor for BeaconScanner.Error);
}

uint64_t sub_10064CCAC()
{
  uint64_t v1 = sub_100004AEC((uint64_t *)&unk_1009BA040);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (v4 + *(void *)(v2 + 64) + 23) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_unknownObjectRelease(*(void *)(v0 + v6));
  return swift_deallocObject(v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8, v5);
}

uint64_t sub_10064CD58(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_100004AEC((uint64_t *)&unk_1009BA040) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = v5 + *(void *)(v4 + 64);
  unint64_t v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v9 = *(void *)(v1 + 24);
  uint64_t v10 = v1 + v5;
  uint64_t v11 = *(void *)(v1 + v7);
  char v12 = *(_BYTE *)(v1 + v7 + 8);
  uint64_t v13 = *(void *)(v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v14 = (void *)swift_task_alloc(dword_1009B9364);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = sub_100015D58;
  return sub_100643788(a1, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_10064CE34()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10064CE58()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc(dword_1009B93BC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100015D58;
  v3[15] = v2;
  return swift_task_switch(sub_100646120, 0LL, 0LL);
}

id sub_10064CEB8(char *a1)
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v62 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DetailedDiscoveredObject(0LL);
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = (int *)type metadata accessor for DiscoveredObject(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (unsigned __int8 *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C((uint64_t)a1, (uint64_t)v10, v11);
  sub_100022898(0LL, &qword_1009B9428, &OBJC_CLASS___SPIndexInformation_ptr);
  sub_10001DC4C((uint64_t)a1, (uint64_t)v7, type metadata accessor for DetailedDiscoveredObject);
  id v12 = sub_100646328((uint64_t)v7);
  unsigned int v13 = *v10;
  int v14 = v10[1];
  id v56 = a1;
  id v57 = v12;
  if (v14 != 1)
  {
    if (v13 == 1)
    {
      uint64_t v16 = (uint64_t *)&a1[v8[9]];
      uint64_t v18 = *v16;
      unint64_t v17 = v16[1];
      uint64_t v60 = *v16;
      if ((v17 & 0x2000000000000000LL) != 0) {
        v17 &= ~0x2000000000000000uLL;
      }
      unint64_t v50 = v17;
      sub_10001736C(v18, v17);
      unsigned int v49 = 1;
    }

    else
    {
      unsigned int v49 = v13;
      uint64_t v60 = 0LL;
      unint64_t v50 = 0xC000000000000000LL;
    }

    uint64_t v15 = 2LL;
    goto LABEL_10;
  }

  if (v13)
  {
    uint64_t v60 = 0LL;
    unsigned int v49 = 0;
    unint64_t v50 = 0xC000000000000000LL;
    uint64_t v15 = 1LL;
LABEL_10:
    uint64_t v48 = v15;
    goto LABEL_11;
  }

  uint64_t v42 = (uint64_t *)&a1[v8[9]];
  uint64_t v43 = *v42;
  unint64_t v44 = v42[1];
  uint64_t v60 = *v42;
  if ((v44 & 0x2000000000000000LL) != 0) {
    v44 &= ~0x2000000000000000uLL;
  }
  unint64_t v50 = v44;
  sub_10001736C(v43, v44);
  unsigned int v49 = 0;
  uint64_t v48 = 0LL;
LABEL_11:
  unsigned int v19 = v10[2];
  uint64_t v21 = *((void *)v10 + 1);
  unint64_t v20 = *((void *)v10 + 2);
  (*(void (**)(char *, unsigned __int8 *, uint64_t))(v3 + 16))(v62, &v10[v8[7]], v2);
  uint64_t v22 = sub_100018BE4(v21, v20);
  uint64_t v23 = MACAddress.data.getter(v22);
  int v24 = v10[v8[11]];
  int v25 = v10[v8[12]];
  unsigned __int8 v26 = v10[v8[13] + 1];
  uint64_t v58 = v3;
  uint64_t v59 = v2;
  int v54 = v24;
  unsigned int v55 = v19;
  int v53 = v25;
  unint64_t v61 = v27;
  uint64_t v28 = v23;
  if ((v26 & 1) != 0) {
    Class isa = 0LL;
  }
  else {
    Class isa = UInt8._bridgeToObjectiveC()().super.super.isa;
  }
  uint64_t v29 = *(int *)&v10[v8[15]];
  sub_100022898(0LL, &qword_1009B9430, &OBJC_CLASS___SPAccessoryInformation_ptr);
  sub_10001DC4C((uint64_t)v56, (uint64_t)v7, type metadata accessor for DetailedDiscoveredObject);
  id v30 = sub_100646540((uint64_t)v7);
  Class v31 = 0LL;
  if (v20 >> 60 != 15)
  {
    Class v31 = Data._bridgeToObjectiveC()().super.isa;
    sub_1000182F0(v21, v20);
  }

  id v32 = objc_allocWithZone(&OBJC_CLASS___SPScannedObject);
  uint64_t v33 = v62;
  Class v34 = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v52 = v28;
  Class v35 = Data._bridgeToObjectiveC()().super.isa;
  unint64_t v36 = v50;
  Class v37 = Data._bridgeToObjectiveC()().super.isa;
  id v47 = v30;
  id v56 = v30;
  uint64_t v38 = v57;
  uint64_t v46 = v29;
  Class v39 = isa;
  BYTE1(v45) = v53;
  LOBYTE(v45) = v54;
  id v40 = objc_msgSend( v32,  "initWithAdvertisementType:poshNetwork:nearOwner:vendorPayload:scanDate:address:advertisement:status:ek:hint:rs si:indexInformation:acccessoryInformation:",  v48,  v49,  v55,  v31,  v34,  v35,  v37,  v45,  isa,  v46,  v57,  v47);

  (*(void (**)(char *, uint64_t))(v58 + 8))(v33, v59);
  sub_100016F9C(v60, v36);
  sub_100016F9C(v52, v61);
  sub_100018C68((uint64_t)v10, type metadata accessor for DiscoveredObject);
  return v40;
}

uint64_t sub_10064D290(uint64_t a1)
{
  return sub_100648530(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10064D29C(uint64_t a1)
{
  return sub_100647E44(a1);
}

uint64_t sub_10064D2A4()
{
  uint64_t v1 = sub_100004AEC(&qword_1009A1BC0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10064D338(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_100004AEC(&qword_1009A1BC0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = (uint64_t)v1 + v5;
  uint64_t v11 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL));
  id v12 = (void *)swift_task_alloc(dword_1009B93EC);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v12;
  void *v12 = v2;
  v12[1] = sub_1000159BC;
  return sub_100648734(a1, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_10064D3F4()
{
  uint64_t v1 = sub_100004AEC(&qword_1009A1BC0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10064D480(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_100004AEC(&qword_1009A1BC0) - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc(dword_1009B9404);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000159BC;
  return sub_10064A060(a1, v5, v6, v7);
}

uint64_t sub_10064D528()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10064D554()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc(dword_1009B943C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100015D58;
  void v3[2] = v2;
  return swift_task_switch(sub_1006436EC, v2, 0LL);
}

uint64_t *sub_10064D5B4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain();
  }

  else
  {
    uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009B9340);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2LL, v7))
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0LL, 2LL, v7);
    }
  }

  return a1;
}

uint64_t sub_10064D680(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009B9340);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 2LL, v2);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  }
  return result;
}

void *sub_10064D6EC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009B9340);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 2LL, v6);
  }

  return a1;
}

void *sub_10064D794(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009B9340);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 2LL, v6);
  int v10 = v8(a2, 2LL, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 2LL, v6);
  return a1;
}

void *sub_10064D888(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009B9340);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 2LL, v6);
  }

  return a1;
}

void *sub_10064D930(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009B9340);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 2LL, v6);
  int v10 = v8(a2, 2LL, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 2LL, v6);
  return a1;
}

uint64_t sub_10064DA24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10064DA30);
}

uint64_t sub_10064DA30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009B9340);
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
  if (v5 >= 3) {
    return v5 - 2;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10064DA80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10064DA8C);
}

uint64_t sub_10064DA8C(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 2);
  }
  else {
    uint64_t v5 = 0LL;
  }
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009B9340);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(a1, v5, a3, v6);
}

uint64_t sub_10064DAE4(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009B9340);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(a1, 2LL, v2);
}

uint64_t sub_10064DB20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009B9340);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, 2LL, v4);
}

void sub_10064DB64(uint64_t a1)
{
  if (v3 <= 0x3F) {
    swift_initEnumMetadataSinglePayload(a1, 256LL, *(void *)(v2 - 8) + 64LL, 2LL);
  }
}

void sub_10064DBD0( uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255LL);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }

double sub_10064DC28(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  if ((a5 & 1) != 0) {
    int v5 = 4;
  }
  else {
    int v5 = 0;
  }
  int v6 = (a4 >> 60) & 3 | v5;
  if (v6 == 3)
  {
    *(void *)&double result = swift_bridgeObjectRetain(a2).n128_u64[0];
  }

  else
  {
    if (v6 != 2)
    {
      if (v6) {
        return result;
      }
      sub_10001736C(a1, a2);
      a1 = a3;
      a2 = a4;
    }

    sub_10001736C(a1, a2);
  }

  return result;
}

uint64_t destroy for AccessoryNonOwnerCommand(uint64_t a1)
{
  return sub_10064DC9C( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(_BYTE *)(a1 + 32));
}

uint64_t sub_10064DC9C(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  if ((a5 & 1) != 0) {
    int v5 = 4;
  }
  else {
    int v5 = 0;
  }
  int v6 = (a4 >> 60) & 3 | v5;
  if (v6 == 3) {
    return swift_bridgeObjectRelease();
  }
  if (v6 != 2)
  {
    if (v6) {
      return result;
    }
    sub_100016F9C(result, a2);
    double result = a3;
    a2 = a4;
  }

  return sub_100016F9C(result, a2);
}

uint64_t initializeWithCopy for AccessoryNonOwnerCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(_BYTE *)(a2 + 32);
  sub_10064DC28(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v7;
  return a1;
}

uint64_t assignWithCopy for AccessoryNonOwnerCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(_BYTE *)(a2 + 32);
  sub_10064DC28(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(_BYTE *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v7;
  sub_10064DC9C(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for AccessoryNonOwnerCommand(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(_BYTE *)(a1 + 32);
  __int128 v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v9;
  *(_BYTE *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v3;
  sub_10064DC9C(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryNonOwnerCommand(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x3FA && *(_BYTE *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 1018);
  }
  unsigned int v3 = ((*(void *)(a1 + 24) >> 60) & 3 | (4 * *(unsigned __int8 *)(a1 + 32))) ^ 0x3FF;
  if (v3 >= 0x3F9) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AccessoryNonOwnerCommand( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3F9)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0;
    *(void *)double result = a2 - 1018;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x3FA) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if (a3 >= 0x3FA) {
      *(_BYTE *)(result + 33) = 0;
    }
    if (a2)
    {
      *(void *)double result = 0LL;
      *(void *)(result + 8) = 0LL;
      *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
      *(void *)(result + 24) = (-a2 & 3LL) << 60;
      *(_BYTE *)(result + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = -a2 >> 2;
    }
  }

  return result;
}

uint64_t sub_10064DEC0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32)) {
    int v1 = 4;
  }
  else {
    int v1 = 0;
  }
  unsigned int v2 = (*(void *)(a1 + 24) >> 60) & 3 | v1;
  if (v2 <= 5) {
    return v2;
  }
  else {
    return (*(_DWORD *)a1 + 6);
  }
}

uint64_t sub_10064DEF0(uint64_t result, unsigned int a2)
{
  if (a2 < 6)
  {
    *(void *)(result + 24) = *(void *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 3) << 60);
    *(_BYTE *)(result + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = (a2 & 4) != 0;
  }

  else
  {
    *(void *)double result = a2 - 6;
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0x2000000000000000LL;
    *(_BYTE *)(result + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 1;
  }

  return result;
}

ValueMetadata *type metadata accessor for AccessoryNonOwnerCommand()
{
  return &type metadata for AccessoryNonOwnerCommand;
}

void sub_10064DF3C(char a1)
{
  __asm { BR              X10 }

ValueMetadata *sub_10064DF64()
{
  return &type metadata for AccessoryGenericPayload;
}

void sub_10064DF84()
{
}

void sub_10064DF94()
{
}

void sub_10064DFA4()
{
}

void sub_10064DFB4()
{
}

void sub_10064DFC4()
{
}

void sub_10064DFD4()
{
}

void sub_10064DFE4()
{
  if (v3) {
    int v1 = 4;
  }
  else {
    int v1 = 0;
  }
  __asm { BR              X11 }

uint64_t sub_10064E034()
{
  return 1LL;
}

void sub_10064E0D8()
{
  if (v4) {
    int v1 = 4;
  }
  else {
    int v1 = 0;
  }
  __asm { BR              X11 }

uint64_t sub_10064E158@<X0>(uint64_t a1@<X8>)
{
  unint64_t v7 = a1 & 0xCFFFFFFFFFFFFFFFLL;
  v1[3] = &type metadata for AccessoryCommandResponsePayload;
  v1[4] = sub_1000F4F34();
  char v8 = (void *)swift_allocObject(&unk_10096EC88, 48LL, 7LL);
  *int v1 = v8;
  v8[2] = v6;
  v8[3] = v10;
  v8[4] = v11;
  v8[5] = v7;
  sub_10001736C(v3, v2);
  return sub_10001736C(v4, v5);
}

uint64_t sub_10064E2F0(void *a1)
{
  uint64_t v3 = type metadata accessor for Endianness(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100012ED8(a1, v7);
  dispatch thunk of BinaryEncoding.container()(v17, v7, v8);
  sub_10064DFE4();
  char v10 = v9;
  LOWORD(v15) = word_100811CAE[v9];
  static Endianness.current.getter(v9);
  unint64_t v11 = sub_1000F4D24();
  FixedWidthInteger.convert(to:)(&v16, v6, &type metadata for UInt16, v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  LOWORD(v15) = v16;
  uint64_t v12 = v18;
  uint64_t v13 = v19;
  sub_100037298((uint64_t)v17, v18);
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v15, &type metadata for UInt16, v11, v12, v13);
  if (!v1) {
    __asm { BR              X10 }
  }

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v17);
}

uint64_t sub_10064E7EC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10064ED68(a1, (uint64_t)v5);
  if (!v2) {
    return sub_1002565B4(v5, a2);
  }
  return result;
}

uint64_t sub_10064E830(void *a1)
{
  return sub_10064E2F0(a1);
}

uint64_t sub_10064E87C(__int16 a1)
{
  else {
    return byte_100811CC4[(__int16)(a1 - 770)];
  }
}

void sub_10064E8A8(char a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v9;
  uint64_t v6 = sub_100012ED8(v8, v9);
  uint64_t DynamicType = swift_getDynamicType(v6, v5, 1LL);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v8);
  if (v4 == DynamicType) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x10064ED3CLL);
}

uint64_t sub_10064ED68@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v4 = type metadata accessor for Endianness(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v26[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100012ED8(a1, v8);
  dispatch thunk of BinaryDecoding.container()(v28, v8, v9);
  uint64_t v10 = v29;
  uint64_t v11 = v30;
  sub_100037298((uint64_t)v28, v29);
  unint64_t v12 = sub_1000F4D24();
  uint64_t v13 = dispatch thunk of BinaryDecodingContaining.decode<A>(_:)( v26,  &type metadata for UInt16,  &type metadata for UInt16,  v12,  v10,  v11);
  if (!v2)
  {
    uint64_t v14 = v25;
    __int16 v32 = v26[0];
    static Endianness.current.getter(v13);
    FixedWidthInteger.convert(to:)(v27, v7, &type metadata for UInt16, v12);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    char v15 = sub_10064E87C(v27[0]);
    if (v15 != 11)
    {
      char v19 = v15;
      sub_10064DF3C(v15);
      uint64_t v21 = v20;
      uint64_t v23 = v22;
      sub_100013044((uint64_t)a1, (uint64_t)v26);
      v27[3] = v21;
      v27[4] = v23;
      sub_10000A7C8(v27);
      dispatch thunk of BinaryDecodable.init(from:)(v26, v21, *(void *)(v23 + 8));
      sub_100013044((uint64_t)v27, (uint64_t)v26);
      sub_10064E8A8(v19, (uint64_t)v26);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
      return sub_1002565B4(v31, v14);
    }

    unint64_t v16 = sub_10064EF94();
    uint64_t v17 = swift_allocError(&type metadata for AccessoryNonOwnerCommand.Error, v16, 0LL, 0LL);
    _BYTE *v18 = 1;
    swift_willThrow(v17);
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

unint64_t sub_10064EF94()
{
  unint64_t result = qword_1009B9510;
  if (!qword_1009B9510)
  {
    unint64_t result = swift_getWitnessTable(&unk_100811C6C, &type metadata for AccessoryNonOwnerCommand.Error);
    atomic_store(result, (unint64_t *)&qword_1009B9510);
  }

  return result;
}

unint64_t sub_10064EFD8()
{
  unint64_t result = qword_1009B9518;
  if (!qword_1009B9518)
  {
    unint64_t result = swift_getWitnessTable(&unk_100813F38, &type metadata for AccessoryFirmwareVersionResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009B9518);
  }

  return result;
}

unint64_t sub_10064F01C()
{
  unint64_t result = qword_1009B9520;
  if (!qword_1009B9520)
  {
    unint64_t result = swift_getWitnessTable(&unk_100813064, &type metadata for AccessoryCapabilityResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009B9520);
  }

  return result;
}

unint64_t sub_10064F060()
{
  unint64_t result = qword_1009B9528;
  if (!qword_1009B9528)
  {
    unint64_t result = swift_getWitnessTable(&unk_100808B94, &type metadata for AccessoryModelNameResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009B9528);
  }

  return result;
}

unint64_t sub_10064F0A4()
{
  unint64_t result = qword_1009B9530;
  if (!qword_1009B9530)
  {
    unint64_t result = swift_getWitnessTable(&unk_100800604, &type metadata for AccessoryProductDataResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009B9530);
  }

  return result;
}

unint64_t sub_10064F0E8()
{
  unint64_t result = qword_1009B9538;
  if (!qword_1009B9538)
  {
    unint64_t result = swift_getWitnessTable(&unk_100813F10, &type metadata for AccessoryFirmwareVersionResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009B9538);
  }

  return result;
}

unint64_t sub_10064F12C()
{
  unint64_t result = qword_1009B9540;
  if (!qword_1009B9540)
  {
    unint64_t result = swift_getWitnessTable(&unk_10081303C, &type metadata for AccessoryCapabilityResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009B9540);
  }

  return result;
}

uint64_t sub_10064F170()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t storeEnumTagSinglePayload for AccessoryNonOwnerCommand.Error( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10064F1E8 + 4 * byte_100811B89[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10064F21C + 4 * byte_100811B84[v4]))();
}

uint64_t sub_10064F21C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10064F224(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10064F22CLL);
  }
  return result;
}

uint64_t sub_10064F238(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10064F240LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10064F244(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10064F24C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryNonOwnerCommand.Error()
{
  return &type metadata for AccessoryNonOwnerCommand.Error;
}

unint64_t sub_10064F26C()
{
  unint64_t result = qword_1009B9548;
  if (!qword_1009B9548)
  {
    unint64_t result = swift_getWitnessTable(&unk_100811C44, &type metadata for AccessoryNonOwnerCommand.Error);
    atomic_store(result, (unint64_t *)&qword_1009B9548);
  }

  return result;
}

void sub_10064F2B0()
{
  __asm { BR              X12 }

uint64_t sub_10064F344@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v6 - 11_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = a1 & 0xDFFFFFFFFFFFFFFFLL;
  *(void *)(v6 - 96) = v1 & 0xCFFFFFFFFFFFFFFFLL;
  __int128 v10 = *(_OWORD *)(v6 - 160);
  uint64_t v7 = *(void *)(v6 - 144);
  v2[3] = (uint64_t)&type metadata for InitiatePairingCommandPayload;
  void v2[4] = sub_10064F750();
  uint64_t v8 = swift_allocObject(&unk_10096EE38, 48LL, 7LL);
  *uint64_t v2 = v8;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = v5;
  *(_OWORD *)(v8 + 24) = v10;
  *(void *)(v8 + 40) = v7;
  sub_10001736C(v11, v12);
  return sub_10001736C(v4, v3);
}

unint64_t sub_10064F5C4()
{
  unint64_t result = qword_1009B9550;
  if (!qword_1009B9550)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F5498, &type metadata for PairingCompleteCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009B9550);
  }

  return result;
}

unint64_t sub_10064F608()
{
  unint64_t result = qword_1009B9558;
  if (!qword_1009B9558)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FEFA0, &type metadata for SendPairingStatusCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009B9558);
  }

  return result;
}

uint64_t sub_10064F64C()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

unint64_t sub_10064F680()
{
  unint64_t result = qword_1009B9560;
  if (!qword_1009B9560)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F9420, &type metadata for FinalizePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009B9560);
  }

  return result;
}

uint64_t sub_10064F6C4()
{
  return swift_deallocObject(v0, 96LL, 7LL);
}

unint64_t sub_10064F708()
{
  unint64_t result = qword_1009B9568;
  if (!qword_1009B9568)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FF790, &type metadata for SendPairingDataCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009B9568);
  }

  return result;
}

unint64_t sub_10064F750()
{
  unint64_t result = qword_1009B9570;
  if (!qword_1009B9570)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080AD10, &type metadata for InitiatePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009B9570);
  }

  return result;
}

uint64_t sub_10064F798()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void destroy for AccessoryPairingCommand(uint64_t a1)
{
}

void sub_10064F808( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, void (*a11)(void))
{
  switch((a10 >> 59) & 6 | ((a8 & 0x2000000000000000LL) != 0))
  {
    case 0uLL:
    case 1uLL:
      a11();
      ((void (*)(uint64_t, uint64_t))a11)(a3, a4);
      break;
    case 2uLL:
      unint64_t v16 = a8 & 0xDFFFFFFFFFFFFFFFLL;
      a11();
      ((void (*)(uint64_t, uint64_t))a11)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a11)(a5, a6);
      ((void (*)(uint64_t, unint64_t))a11)(a7, v16);
      ((void (*)(uint64_t, unint64_t))a11)(a9, a10 & 0xCFFFFFFFFFFFFFFFLL);
      break;
    case 3uLL:
      a11();
      ((void (*)(uint64_t, uint64_t))a11)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a11)(a5, a6);
      break;
    default:
      return;
  }

uint64_t *initializeWithCopy for AccessoryPairingCommand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  unint64_t v13 = a2[9];
  sub_10064F808(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, (void (*)(void))sub_10001736C);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  return a1;
}

uint64_t *assignWithCopy for AccessoryPairingCommand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  unint64_t v23 = a2[9];
  sub_10064F808(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v23, (void (*)(void))sub_10001736C);
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  uint64_t v14 = a1[2];
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  uint64_t v17 = a1[5];
  uint64_t v18 = a1[6];
  uint64_t v19 = a1[7];
  uint64_t v20 = a1[8];
  unint64_t v21 = a1[9];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v23;
  sub_10064F808(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, (void (*)(void))sub_100016F9C);
  return a1;
}

uint64_t *assignWithTake for AccessoryPairingCommand(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v9 = a1[6];
  uint64_t v10 = a1[7];
  uint64_t v11 = a1[8];
  unint64_t v12 = a1[9];
  __int128 v13 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v13;
  __int128 v14 = a2[3];
  *((_OWORD *)a1 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = a2[2];
  *((_OWORD *)a1 + 3) = v14;
  *((_OWORD *)a1 + 4) = a2[4];
  sub_10064F808(v3, v5, v4, v6, v7, v8, v9, v10, v11, v12, (void (*)(void))sub_100016F9C);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryPairingCommand(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x3FC && *(_BYTE *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 1020);
  }
  unsigned int v3 = ((((*(void *)(a1 + 72) >> 52) & 0x300 | (*(void *)(a1 + 56) >> 54) & 0xC0) >> 7) & 0xFFFFFC07 | (8 * ((*(void *)(a1 + 24) >> 58) & 0xC | (*(void *)(a1 + 8) >> 60) & 3 | *(_BYTE *)(a1 + 47) & 0x30 | (*(void *)(a1 + 56) >> 54) & 0x40))) ^ 0x3FF;
  if (v3 >= 0x3FB) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AccessoryPairingCommand( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3FB)
  {
    *(void *)(result + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 1020;
    if (a3 >= 0x3FC) {
      *(_BYTE *)(result + 80) = 1;
    }
  }

  else
  {
    if (a3 >= 0x3FC) {
      *(_BYTE *)(result + 80) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 3) & 0x7F | ((-a2 & 0x3FF) << 7);
      *(void *)unint64_t result = 0LL;
      *(void *)(result + 8) = (unint64_t)((-a2 >> 3) & 3) << 60;
      *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
      *(void *)(result + 24) = (v3 << 58) & 0x3000000000000000LL;
      *(void *)(result + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0LL;
      *(void *)(result + 40) = (v3 << 56) & 0x3000000000000000LL;
      *(void *)(result + 48) = 0LL;
      *(void *)(result + 56) = (v3 << 54) & 0x3000000000000000LL;
      *(void *)(result + 64) = 0LL;
      *(void *)(result + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = (v3 << 52) & 0x3000000000000000LL;
    }
  }

  return result;
}

uint64_t sub_10064FC40(uint64_t a1)
{
  unsigned int v1 = (*(void *)(a1 + 72) >> 59) & 6 | ((*(void *)(a1 + 56) & 0x2000000000000000LL) != 0);
  if (v1 <= 3) {
    return v1;
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t sub_10064FC6C(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 72) & 0xCFFFFFFFFFFFFFFFLL;
  *(void *)(result + 56) &= ~0x2000000000000000uLL;
  *(void *)(result + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v1;
  return result;
}

void *sub_10064FC88(void *result, unsigned int a2)
{
  if (a2 < 4)
  {
    unint64_t v2 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v3 = result[5] & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v4 = result[7] & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
    unint64_t v5 = result[9] & 0xCFFFFFFFFFFFFFFFLL | ((((unint64_t)a2 >> 1) & 3) << 60);
    result[1] &= 0xCFFFFFFFFFFFFFFFLL;
    result[3] = v2;
    result[5] = v3;
    result[7] = v4;
    result[9] = v5;
  }

  else
  {
    *unint64_t result = a2 - 4;
    *(_OWORD *)(result + 1) = 0u;
    *(_OWORD *)(result + 3) = 0u;
    *(_OWORD *)(result + 5) = 0u;
    *(_OWORD *)(result + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = 0u;
    result[9] = 0x2000000000000000LL;
  }

  return result;
}

ValueMetadata *type metadata accessor for AccessoryPairingCommand()
{
  return &type metadata for AccessoryPairingCommand;
}

void sub_10064FD10(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Endianness(0LL);
  __chkstk_darwin(v4);
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100012ED8(a1, v5);
  dispatch thunk of BinaryEncoding.container()(v7, v5, v6);
  sub_1004D5994(v2, (uint64_t)v8);
  __asm { BR              X12 }

uint64_t sub_10064FDD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v9 - 11_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v2 & 0xDFFFFFFFFFFFFFFFLL;
  *(void *)(v9 - 96) = a2 & 0xCFFFFFFFFFFFFFFFLL;
  *(_WORD *)(v3 + 120) = 256;
  static Endianness.current.getter(a1);
  unint64_t v10 = sub_1000F4D24();
  FixedWidthInteger.convert(to:)((void *)(v3 + 40), v7, &type metadata for UInt16, v10);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v6);
  *(_WORD *)(v3 + 120) = *(_WORD *)(v3 + 40);
  uint64_t v11 = *(void *)(v3 + 184);
  uint64_t v12 = *(void *)(v3 + 192);
  sub_100037298(v3 + 160, v11);
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(v3 + 120, &type metadata for UInt16, v10, v11, v12);
  if (!v4)
  {
    sub_1004D5994(v5, v3 + 200);
    __asm { BR              X13 }
  }

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v3 + 160));
}

uint64_t sub_1006503A0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1006508C0(a1, (uint64_t)v5);
  if (!v2) {
    return sub_1004D5994((uint64_t)v5, a2);
  }
  return result;
}

void sub_1006503E4(void *a1)
{
}

unint64_t sub_100650430()
{
  unint64_t result = qword_1009B9578;
  if (!qword_1009B9578)
  {
    unint64_t result = swift_getWitnessTable( &unk_100811E28,  &type metadata for AccessoryPairingCommand.AccessoryPairingCommandError);
    atomic_store(result, (unint64_t *)&qword_1009B9578);
  }

  return result;
}

uint64_t sub_100650474(unsigned __int16 a1)
{
  int v1 = a1;
  uint64_t result = 1LL;
  switch(v1)
  {
    case 256:
      uint64_t result = 0LL;
      break;
    case 257:
      return result;
    case 258:
      uint64_t result = 2LL;
      break;
    case 259:
      uint64_t result = 3LL;
      break;
    case 260:
      uint64_t result = 4LL;
      break;
    default:
      if (v1 == 516) {
        uint64_t result = 5LL;
      }
      else {
        uint64_t result = 6LL;
      }
      break;
  }

  return result;
}

void sub_1006504D4(char a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10065052C()
{
  uint64_t v2 = *(void *)(v1 - 80);
  uint64_t v3 = sub_100012ED8((void *)(v1 - 104), v2);
  uint64_t DynamicType = (ValueMetadata *)swift_getDynamicType(v3, v2, 1LL);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v1 - 104));
  if (&type metadata for InitiatePairingCommandPayload == DynamicType) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x100650890LL);
}

uint64_t sub_1006508C0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  v19[1] = a2;
  uint64_t v4 = type metadata accessor for Endianness(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100012ED8(a1, v8);
  dispatch thunk of BinaryDecoding.container()(v22, v8, v9);
  uint64_t v10 = v23;
  uint64_t v11 = v24;
  sub_100037298((uint64_t)v22, v23);
  unint64_t v12 = sub_1000F4D24();
  __int128 v13 = dispatch thunk of BinaryDecodingContaining.decode<A>(_:)( v20,  &type metadata for UInt16,  &type metadata for UInt16,  v12,  v10,  v11);
  if (!v2)
  {
    __int16 v25 = v20[0];
    static Endianness.current.getter(v13);
    FixedWidthInteger.convert(to:)(v21, v7, &type metadata for UInt16, v12);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    char v14 = sub_100650474(v21[0]);
    if (v14 != 6) {
      __asm { BR              X10 }
    }

    unint64_t v15 = sub_100650430();
    uint64_t v16 = swift_allocError(&type metadata for AccessoryPairingCommand.AccessoryPairingCommandError, v15, 0LL, 0LL);
    *uint64_t v17 = 1;
    swift_willThrow(v16);
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v22);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

uint64_t storeEnumTagSinglePayload for AccessoryPairingCommand.AccessoryPairingCommandError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100650BB8 + 4 * byte_100811D03[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100650BEC + 4 * byte_100811CFE[v4]))();
}

uint64_t sub_100650BEC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100650BF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100650BFCLL);
  }
  return result;
}

uint64_t sub_100650C08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100650C10LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100650C14(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100650C1C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryPairingCommand.AccessoryPairingCommandError()
{
  return &type metadata for AccessoryPairingCommand.AccessoryPairingCommandError;
}

unint64_t sub_100650C3C()
{
  unint64_t result = qword_1009B9580;
  if (!qword_1009B9580)
  {
    unint64_t result = swift_getWitnessTable( &unk_100811E00,  &type metadata for AccessoryPairingCommand.AccessoryPairingCommandError);
    atomic_store(result, (unint64_t *)&qword_1009B9580);
  }

  return result;
}

uint64_t sub_100650C80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v22 - v10;
  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  uint64_t v23 = 0x7365547265646E75LL;
  unint64_t v24 = 0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v25, &v23, sub_10000A71C, 0LL, &type metadata for Bool);
  swift_bridgeObjectRelease(v24);
  if ((v25 & 1) != 0)
  {
    unint64_t v12 = NSTemporaryDirectory();
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    uint64_t v15 = v14;

    URL.init(fileURLWithPath:isDirectory:)(v13, v15, 1LL);
    return swift_bridgeObjectRelease(v15);
  }

  else
  {
    id v17 = [(id)objc_opt_self(NSFileManager) defaultManager];
    uint64_t v18 = 1LL;
    id v19 = [v17 URLsForDirectory:5 inDomains:1];

    uint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, v5);
    if (*(void *)(v20 + 16))
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))( v4,  v20 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)),  v5);
      uint64_t v18 = 0LL;
    }

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, v18, 1LL, v5);
    swift_bridgeObjectRelease(v20);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
    {
      sub_10009D438((uint64_t)v4);
      uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000038LL,  0x800000010086BAF0LL,  "searchpartyd/searchpartydConstants.swift",  40LL,  2LL,  41LL,  0);
      __break(1u);
    }

    else
    {
      unint64_t v21 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v21(v11, v4, v5);
      URL.appendingPathComponent(_:isDirectory:)(0xD00000000000001DLL, 0x80000001008507F0LL, 1LL);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v21)(a1, v9, v5);
    }
  }

  return result;
}

uint64_t *sub_100650F90()
{
  if (qword_10099B760 != -1) {
    swift_once(&qword_10099B760, sub_1006515A8);
  }
  return &qword_100A2B070;
}

uint64_t sub_100650FD0()
{
  uint64_t result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x80000001008507F0LL, 95LL, 0xE100000000000000LL);
  qword_100A2AFE0 = result;
  return result;
}

uint64_t sub_100651020(uint64_t a1)
{
  return sub_100189D34(a1, qword_100A2AFE8, 95LL, 0xE100000000000000LL);
}

uint64_t sub_100651034()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000012LL,  0x8000000100852C40LL);
  qword_100A2B000 = result;
  return result;
}

uint64_t sub_100651098()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000014LL,  0x80000001008644B0LL);
  qword_100A2B008 = result;
  return result;
}

uint64_t sub_100651100()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000014LL,  0x8000000100855ED0LL);
  qword_100A2B010 = result;
  return result;
}

uint64_t sub_100651168()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x74536E6F63616562LL,  0xEB0000000065726FLL);
  qword_100A2B018 = result;
  return result;
}

uint64_t sub_1006511CC()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x74694B64756F6C63LL,  0xE800000000000000LL);
  qword_100A2B020 = result;
  return result;
}

uint64_t sub_100651228()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000015LL,  0x800000010086BB50LL);
  qword_100A2B028 = result;
  return result;
}

uint64_t sub_10065128C()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x646E616D6D6F63LL,  0xE700000000000000LL);
  qword_100A2B030 = result;
  return result;
}

uint64_t sub_1006512E8()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x6943796C696D6166LL,  0xEC000000656C6372LL);
  qword_100A2B038 = result;
  return result;
}

uint64_t sub_10065134C()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000012LL,  0x800000010086BBB0LL);
  qword_100A2B040 = result;
  return result;
}

uint64_t sub_1006513B0()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x6353746E65746E69LL,  0xEF72656C75646568LL);
  qword_100A2B048 = result;
  return result;
}

uint64_t sub_100651418()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000010LL,  0x800000010086BB30LL);
  qword_100A2B050 = result;
  return result;
}

uint64_t sub_100651480()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x676E6972696170LL,  0xE700000000000000LL);
  qword_100A2B058 = result;
  return result;
}

uint64_t sub_1006514DC()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000010LL,  0x8000000100850810LL);
  qword_100A2B060 = result;
  return result;
}

uint64_t sub_100651544()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000017LL,  0x800000010086BB90LL);
  qword_100A2B068 = result;
  return result;
}

uint64_t sub_1006515A8()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x72756769666E6F63LL,  0xED00006E6F697461LL);
  qword_100A2B070 = result;
  return result;
}

uint64_t sub_100651610()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x7275446873657246LL,  0xEB000000006E6169LL);
  qword_100A2B078 = result;
  return result;
}

uint64_t sub_100651674()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x65736142656D6974LL,  0xED00007379654B64LL);
  qword_100A2B080 = result;
  return result;
}

uint64_t sub_1006516DC()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x65646F4D74736F6CLL,  0xE800000000000000LL);
  qword_100A2B088 = result;
  return result;
}

uint64_t sub_100651738()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x5379726574746162LL,  0xED00007375746174LL);
  qword_100A2B090 = result;
  return result;
}

uint64_t sub_1006517A0()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000014LL,  0x800000010085E830LL);
  qword_100A2B098 = result;
  return result;
}

uint64_t sub_100651808()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x657261776D726966LL,  0xEE00657461647055LL);
  qword_100A2B0A0 = result;
  return result;
}

uint64_t sub_100651870()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000010LL,  0x800000010086BB70LL);
  qword_100A2B0A8 = result;
  return result;
}

uint64_t sub_1006518D8(uint64_t a1)
{
  return sub_100189D34(a1, qword_100A2B0B0, 0x4D676E6972696170LL, 0xEE00726567616E61LL);
}

uint64_t sub_100651904(uint64_t a1)
{
  return sub_100189D34(a1, qword_100A2B0C8, 0x646E616D6D6F63LL, 0xE700000000000000LL);
}

uint64_t sub_100651924(uint64_t a1)
{
  return sub_100189D34(a1, qword_100A2B0E0, 0xD000000000000010LL, 0x800000010086BBD0LL);
}

uint64_t sub_100651948(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B95A0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_100652054();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for FetchDevicesRequest.Body.CodingKeys,  &type metadata for FetchDevicesRequest.Body.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v21, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    char v20 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v20, v5);
    uint64_t v15 = v3[3];
    uint64_t v16 = v3[4];
    char v19 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v19, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100651A88(uint64_t a1)
{
  unint64_t v2 = sub_10001DC90();
  return RequestContentRepresentable.description.getter(a1, v2);
}

uint64_t sub_100651AB0()
{
  uint64_t v1 = 0x6D617473656D6974LL;
  if (*v0 != 1) {
    uint64_t v1 = 1684628597LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x656372756F73LL;
  }
}

uint64_t sub_100651B04@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1006522D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100651B28(uint64_t a1)
{
  unint64_t v2 = sub_100652054();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100651B50(uint64_t a1)
{
  unint64_t v2 = sub_100652054();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100651B78@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    double result = *(double *)v6;
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v5;
    *(void *)(a2 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v7;
  }

  return result;
}

uint64_t sub_100651BBC(void *a1)
{
  return sub_100651948(a1);
}

uint64_t sub_100651BF4()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v27[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v5 = [(id)objc_opt_self(AKDevice) currentDevice];
  if (v5
    && (uint64_t v6 = v5,
        id v7 = [v5 uniqueDeviceIdentifier],
        v6,
        v7))
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v10 = v9;

    id v11 = [objc_allocWithZone(NSProcessInfo) init];
    id v12 = [v11 processName];

    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    uint64_t v15 = v14;

    uint64_t v16 = static Date.trustedNow.getter((uint64_t)v4);
    uint64_t v17 = Date.epoch.getter(v16);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    uint64_t v18 = type metadata accessor for JSONEncoder(0LL);
    swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    JSONEncoder.init()();
    v27[0] = v13;
    v27[1] = v15;
    char v27[2] = v17;
    v27[3] = v8;
    v27[4] = v10;
    unint64_t v19 = sub_100651E5C();
    uint64_t v20 = dispatch thunk of JSONEncoder.encode<A>(_:)(v27, &type metadata for FetchDevicesRequest.Body, v19);
    if (v0)
    {
      swift_errorRelease(v0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return 0LL;
    }

    else
    {
      uint64_t v1 = v20;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
    }
  }

  else
  {
    uint64_t v21 = type metadata accessor for GenericError(0LL);
    unint64_t v22 = sub_1004A0210();
    swift_allocError(v21, v22, 0LL, 0LL);
    strcpy(v23, "Missing UDID!");
    *((_WORD *)v23 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = -4864;
    uint64_t v24 = (*(uint64_t (**)(char *, void, uint64_t))(*(void *)(v21 - 8) + 104LL))( v23,  enum case for GenericError.error(_:),  v21);
    swift_willThrow(v24);
  }

  return v1;
}

unint64_t sub_100651E5C()
{
  unint64_t result = qword_1009B9588;
  if (!qword_1009B9588)
  {
    unint64_t result = swift_getWitnessTable(&unk_100811F1C, &type metadata for FetchDevicesRequest.Body);
    atomic_store(result, (unint64_t *)&qword_1009B9588);
  }

  return result;
}

uint64_t initializeWithCopy for FetchDevicesRequest.Body(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for FetchDevicesRequest.Body(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  uint64_t v6 = a2[4];
  uint64_t v7 = a1[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for FetchDevicesRequest.Body(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  return a1;
}

ValueMetadata *type metadata accessor for FetchDevicesRequest.Body()
{
  return &type metadata for FetchDevicesRequest.Body;
}

ValueMetadata *type metadata accessor for FetchDevicesRequest()
{
  return &type metadata for FetchDevicesRequest;
}

unint64_t sub_100651FC8()
{
  unint64_t result = qword_1009B9590;
  if (!qword_1009B9590)
  {
    unint64_t result = swift_getWitnessTable(&unk_100811E94, &type metadata for FetchDevicesRequest);
    atomic_store(result, (unint64_t *)&qword_1009B9590);
  }

  return result;
}

unint64_t sub_100652010()
{
  unint64_t result = qword_1009B9598;
  if (!qword_1009B9598)
  {
    unint64_t result = swift_getWitnessTable(&unk_100811EBC, &type metadata for FetchDevicesRequest);
    atomic_store(result, (unint64_t *)&qword_1009B9598);
  }

  return result;
}

unint64_t sub_100652054()
{
  unint64_t result = qword_1009B95A8;
  if (!qword_1009B95A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100812038, &type metadata for FetchDevicesRequest.Body.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B95A8);
  }

  return result;
}

id sub_100652098()
{
  return sub_1006520A4((uint64_t)sub_100022170);
}

id sub_1006520A4(uint64_t a1)
{
  unint64_t v2 = sub_100412D14((uint64_t)_swiftEmptyArrayStorage);
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(a1, qword_100A2A710, &type metadata for Configuration);
  char v3 = sub_1006A0B60(v12);
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    sub_10005C260( 1702195828LL,  0xE400000000000000LL,  0xD000000000000018LL,  0x8000000100857F20LL,  isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }

  id result = [(id)objc_opt_self(AKDevice) currentDevice];
  if (result)
  {
    uint64_t v6 = result;
    id v7 = [result serverFriendlyDescription];

    if (v7)
    {
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      uint64_t v10 = v9;

      char v11 = swift_isUniquelyReferenced_nonNull_native(v2);
      sub_10005C260(v8, v10, 0xD000000000000011LL, 0x8000000100854B60LL, v11);
      swift_bridgeObjectRelease();
    }

    return (id)v2;
  }

  else
  {
    __break(1u);
  }

  return result;
}

unint64_t sub_100652244()
{
  unint64_t v0 = sub_100412D14((uint64_t)&off_100936FA8);
  id v1 = sub_1006520A4((uint64_t)sub_100022170);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v0);
  unint64_t v5 = v0;
  sub_100129198((uint64_t)v1, (uint64_t)sub_1003F68BC, 0LL, isUniquelyReferenced_nonNull_native, &v5);
  unint64_t v3 = v5;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1006522D8(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x656372756F73LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v5 = 0xE600000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F73LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6D617473656D6974LL && a2 == 0xE900000000000070LL)
  {
    unint64_t v7 = 0xE900000000000070LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974LL, 0xE900000000000070LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 1684628597 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(1684628597LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_100652420@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100004AEC(&qword_1009B95B0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_100652054();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for FetchDevicesRequest.Body.CodingKeys,  &type metadata for FetchDevicesRequest.Body.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  char v25 = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v25, v5);
  uint64_t v14 = v13;
  char v24 = 1;
  swift_bridgeObjectRetain(v13);
  uint64_t v22 = KeyedDecodingContainer.decode(_:forKey:)(&v24, v5);
  char v23 = 2;
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)(&v23, v5);
  uint64_t v17 = v16;
  uint64_t v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v19 = v15;
  v18(v8, v5);
  swift_bridgeObjectRetain(v17);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v12;
  a2[1] = v14;
  a2[2] = v22;
  a2[3] = v19;
  a2[4] = v17;
  return result;
}

uint64_t storeEnumTagSinglePayload for FetchDevicesRequest.Body.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100652648 + 4 * byte_100811E75[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10065267C + 4 * byte_100811E70[v4]))();
}

uint64_t sub_10065267C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100652684(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10065268CLL);
  }
  return result;
}

uint64_t sub_100652698(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1006526A0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1006526A4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006526AC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FetchDevicesRequest.Body.CodingKeys()
{
  return &type metadata for FetchDevicesRequest.Body.CodingKeys;
}

unint64_t sub_1006526CC()
{
  unint64_t result = qword_1009B95B8;
  if (!qword_1009B95B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100812010, &type metadata for FetchDevicesRequest.Body.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B95B8);
  }

  return result;
}

unint64_t sub_100652714()
{
  unint64_t result = qword_1009B95C0;
  if (!qword_1009B95C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100811F80, &type metadata for FetchDevicesRequest.Body.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B95C0);
  }

  return result;
}

unint64_t sub_10065275C()
{
  unint64_t result = qword_1009B95C8;
  if (!qword_1009B95C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100811FA8, &type metadata for FetchDevicesRequest.Body.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B95C8);
  }

  return result;
}

id sub_1006527A0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v4);
  uint64_t v108 = (char *)&v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v109 = type metadata accessor for Date(0LL);
  uint64_t v106 = *(void *)(v109 - 8);
  uint64_t v6 = __chkstk_darwin(v109);
  char v8 = (char *)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v107 = (char *)&v96 - v9;
  uint64_t v10 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = (int *)type metadata accessor for MessagingMessageContext(0LL);
  uint64_t v18 = *((void *)v17 - 1);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((sub_100653EB4(a1) & 1) == 0) {
    goto LABEL_24;
  }
  uint64_t v102 = v16;
  id v21 = [a1 toID];
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v103 = v17;
    uint64_t v104 = v18;
    uint64_t v105 = a2;
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    uint64_t v25 = v24;
  }

  else
  {
    uint64_t v26 = IDSCopyLocalDeviceUniqueID();
    if (!v26)
    {
      if (qword_10099B810 != -1) {
        swift_once(&qword_10099B810, sub_10069374C);
      }
      uint64_t v71 = type metadata accessor for Logger(0LL);
      uint64_t v72 = sub_10000A720(v71, (uint64_t)qword_100A2B188);
      id v56 = (os_log_s *)Logger.logObject.getter(v72);
      os_log_type_t v57 = static os_log_type_t.error.getter(v56);
      if (!os_log_type_enabled(v56, v57)) {
        goto LABEL_23;
      }
      uint64_t v59 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v59 = 0;
      uint64_t v60 = "Ignoring IDSCopyLocalDeviceUniqueID() failed to return a value!";
      goto LABEL_22;
    }

    unint64_t v27 = (void *)v26;
    uint64_t v103 = v17;
    uint64_t v104 = v18;
    uint64_t v105 = a2;
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    uint64_t v30 = v29;

    uint64_t v110 = 0x3A656369766564LL;
    unint64_t v111 = 0xE700000000000000LL;
    v31._countAndFlagsBits = v28;
    v31._object = v30;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    uint64_t v23 = v110;
    uint64_t v25 = v111;
  }

  uint64_t v101 = v14;
  uint64_t v32 = v13;
  id result = [a1 fromID];
  if (!result)
  {
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }

  Class v34 = result;
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  uint64_t v37 = v36;

  uint64_t v38 = _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0(v35, v37);
  if (!v40
    || (uint64_t v41 = v38,
        uint64_t v42 = v39,
        uint64_t v43 = v40,
        uint64_t v44 = _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0(v23, v25),
        !v46))
  {
    swift_bridgeObjectRelease();

    uint64_t v61 = 1LL;
    uint64_t v18 = v104;
    a2 = v105;
    uint64_t v17 = v103;
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v18 + 56))(a2, v61, 1LL, v17);
  }

  uint64_t v47 = v46;
  uint64_t v97 = v45;
  uint64_t v98 = v44;
  uint64_t v99 = v42;
  uint64_t v100 = v41;
  id result = [a1 outgoingResponseIdentifier];
  if (!result) {
    goto LABEL_38;
  }
  uint64_t v48 = result;
  uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  uint64_t v51 = v50;

  UUID.init(uuidString:)(v49, v51);
  swift_bridgeObjectRelease();
  uint64_t v52 = v101;
  uint64_t v53 = v32;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v101 + 48))(v12, 1LL, v32) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100015794((uint64_t)v12, &qword_10099D8A0);
    uint64_t v17 = v103;
    if (qword_10099B810 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    uint64_t v54 = type metadata accessor for Logger(0LL);
    uint64_t v55 = sub_10000A720(v54, (uint64_t)qword_100A2B188);
    id v56 = (os_log_s *)Logger.logObject.getter(v55);
    os_log_type_t v57 = static os_log_type_t.error.getter(v56);
    BOOL v58 = os_log_type_enabled(v56, v57);
    uint64_t v18 = v104;
    a2 = v105;
    if (!v58) {
      goto LABEL_23;
    }
    uint64_t v59 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v59 = 0;
    uint64_t v60 = "could not convert outgoingResponseIdentifier to UUID!";
LABEL_22:
    _os_log_impl((void *)&_mh_execute_header, v56, v57, v60, v59, 2u);
    swift_slowDealloc(v59, -1LL, -1LL);
LABEL_23:

LABEL_24:
    uint64_t v61 = 1LL;
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v18 + 56))(a2, v61, 1LL, v17);
  }

  (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v102, v12, v32);
  uint64_t v17 = v103;
  uint64_t v62 = &v20[v103[6]];
  *uint64_t v62 = v100;
  *((void *)v62 + 1) = v99;
  *((void *)v62 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v43;
  uint64_t v63 = &v20[v17[7]];
  *uint64_t v63 = v98;
  *((void *)v63 + 1) = v97;
  *((void *)v63 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v47;
  id v64 = [a1 incomingResponseIdentifier];
  if (v64)
  {
    uint64_t v65 = v64;
    uint64_t v66 = v53;
    uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    uint64_t v69 = v68;

    uint64_t v70 = v67;
    uint64_t v53 = v66;
    UUID.init(uuidString:)(v70, v69);
    swift_bridgeObjectRelease();
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v20, 1LL, 1LL, v53);
  }

  uint64_t v18 = v104;
  a2 = v105;
  uint64_t v73 = &v20[v17[5]];
  uint64_t v74 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
  uint64_t v105 = v53;
  v74(v73, v102, v53);
  id result = [a1 serviceIdentifier];
  if (result)
  {
    uint64_t v75 = result;
    uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    uint64_t v78 = v77;

    uint64_t v79 = (uint64_t *)&v20[v17[8]];
    *uint64_t v79 = v76;
    v79[1] = v78;
    v20[v17[9]] = [a1 expectsPeerResponse];
    v20[v17[10]] = [a1 fromServerStorage];
    id v80 = [a1 serverReceivedTime];
    uint64_t v81 = v106;
    if (v80)
    {
      uint64_t v82 = v80;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v80);

      uint64_t v83 = *(void (**)(char *, char *, uint64_t))(v81 + 32);
      uint64_t v84 = (uint64_t)v108;
      uint64_t v85 = v8;
      uint64_t v86 = v109;
      v83(v108, v85, v109);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v81 + 56))(v84, 0LL, 1LL, v86);
      uint64_t v87 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v84, 1LL, v86);
      uint64_t v88 = v107;
      if ((_DWORD)v87 != 1)
      {
        v83(v107, (char *)v84, v86);
LABEL_33:
        v83(&v20[v17[11]], v88, v86);
        id v89 = [a1 senderCorrelationIdentifier];
        uint64_t v90 = v105;
        if (v89)
        {
          uint64_t v91 = v89;
          uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
          unint64_t v94 = v93;
        }

        else
        {

          uint64_t v92 = 0LL;
          unint64_t v94 = 0xE000000000000000LL;
        }

        (*(void (**)(char *, uint64_t))(v101 + 8))(v102, v90);
        uint64_t v95 = (uint64_t *)&v20[v17[12]];
        *uint64_t v95 = v92;
        v95[1] = v94;
        sub_10016C7B0((uint64_t)v20, a2);
        uint64_t v61 = 0LL;
        return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v18 + 56))(a2, v61, 1LL, v17);
      }
    }

    else
    {
      uint64_t v84 = (uint64_t)v108;
      uint64_t v86 = v109;
      uint64_t v87 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v106 + 56))(v108, 1LL, 1LL, v109);
      uint64_t v88 = v107;
    }

    static Date.distantPast.getter(v87);
    sub_100015794(v84, (uint64_t *)&unk_10099D720);
    uint64_t v83 = *(void (**)(char *, char *, uint64_t))(v81 + 32);
    goto LABEL_33;
  }

uint64_t MessagingMessageContext.incomingResponseIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1003131AC(v1, a1);
}

uint64_t MessagingMessageContext.outgoingResponseIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for MessagingMessageContext(0LL) + 20);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t type metadata accessor for MessagingMessageContext(uint64_t a1)
{
  uint64_t result = qword_1009B9630;
  if (!qword_1009B9630) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MessagingMessageContext);
  }
  return result;
}

uint64_t MessagingMessageContext.fromID.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MessagingMessageContext(0LL) + 24));
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(*((void *)v1 + 2));
  return v2;
}

uint64_t MessagingMessageContext.toID.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MessagingMessageContext(0LL) + 28));
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(*((void *)v1 + 2));
  return v2;
}

uint64_t MessagingMessageContext.serviceIdentifier.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for MessagingMessageContext(0LL) + 32));
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t MessagingMessageContext.expectsPeerResponse.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MessagingMessageContext(0LL) + 36));
}

uint64_t MessagingMessageContext.fromServerStorage.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MessagingMessageContext(0LL) + 40));
}

uint64_t MessagingMessageContext.serverReceivedTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for MessagingMessageContext(0LL) + 44);
  uint64_t v4 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t MessagingMessageContext.senderCorrelationIdentifier.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for MessagingMessageContext(0LL) + 48));
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t MessagingMessageContext.description.getter()
{
  uint64_t v1 = (int *)type metadata accessor for MessagingMessageContext(0LL);
  unint64_t v2 = sub_100653294();
  v3._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v1, v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x3A44496D6F726620LL;
  v4._object = (void *)0xE800000000000000LL;
  String.append(_:)(v4);
  uint64_t v5 = v0 + v1[6];
  uint64_t v6 = *(void *)(v5 + 8);
  uint64_t v7 = *(void **)(v5 + 16);
  swift_bridgeObjectRetain(v7);
  v8._countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x3A44496F7420LL;
  v9._object = (void *)0xE600000000000000LL;
  String.append(_:)(v9);
  uint64_t v10 = v0 + v1[7];
  uint64_t v11 = *(void *)(v10 + 8);
  uint64_t v12 = *(void **)(v10 + 16);
  swift_bridgeObjectRetain(v12);
  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x6563697672657320LL;
  v14._object = (void *)0xE90000000000003ALL;
  String.append(_:)(v14);
  uint64_t v15 = (uint64_t *)(v0 + v1[8]);
  uint64_t v16 = *v15;
  uint64_t v17 = (void *)v15[1];
  swift_bridgeObjectRetain(v17);
  v18._countAndFlagsBits = v16;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 62LL;
  v19._object = (void *)0xE100000000000000LL;
  String.append(_:)(v19);
  return 60LL;
}

unint64_t sub_100653294()
{
  unint64_t result = qword_1009B95D0;
  if (!qword_1009B95D0)
  {
    uint64_t v1 = type metadata accessor for MessagingMessageContext(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MessagingMessageContext, v1);
    atomic_store(result, (unint64_t *)&qword_1009B95D0);
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MessagingMessageContext(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1LL, v7))
    {
      uint64_t v9 = sub_100004AEC(&qword_10099D8A0);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64LL));
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)a1 + a3[5], (char *)a2 + a3[5], v7);
    }

    else
    {
      uint64_t v11 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
      v11(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0LL, 1LL, v7);
      v11((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    }

    uint64_t v12 = a3[6];
    uint64_t v13 = a3[7];
    Swift::String v14 = (char *)a1 + v12;
    uint64_t v15 = (char *)a2 + v12;
    *Swift::String v14 = *v15;
    uint64_t v16 = *((void *)v15 + 2);
    *((void *)v14 + 1) = *((void *)v15 + 1);
    *((void *)v14 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v16;
    uint64_t v17 = (char *)a1 + v13;
    Swift::String v18 = (char *)a2 + v13;
    *uint64_t v17 = *v18;
    uint64_t v19 = *((void *)v18 + 2);
    *((void *)v17 + 1) = *((void *)v18 + 1);
    *((void *)v17 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v19;
    uint64_t v20 = a3[8];
    uint64_t v21 = a3[9];
    uint64_t v22 = (uint64_t *)((char *)a1 + v20);
    uint64_t v23 = (uint64_t *)((char *)a2 + v20);
    uint64_t v24 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v24;
    *((_BYTE *)a1 + v21) = *((_BYTE *)a2 + v21);
    uint64_t v25 = a3[11];
    *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    uint64_t v26 = (char *)a1 + v25;
    unint64_t v27 = (char *)a2 + v25;
    uint64_t v28 = type metadata accessor for Date(0LL);
    uint64_t v29 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v28 - 8) + 16LL);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v19);
    __n128 v30 = swift_bridgeObjectRetain(v24);
    v29(v26, v27, v28, v30);
    uint64_t v31 = a3[12];
    uint64_t v32 = (uint64_t *)((char *)a1 + v31);
    uint64_t v33 = (uint64_t *)((char *)a2 + v31);
    uint64_t v34 = v33[1];
    void *v32 = *v33;
    v32[1] = v34;
    swift_bridgeObjectRetain(v34);
  }

  return a1;
}

uint64_t destroy for MessagingMessageContext(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1LL, v4);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    v7(a1, v4);
  }
  v7(a1 + a2[5], v4);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[6] + 16));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[7] + 16));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[8] + 8));
  uint64_t v8 = a1 + a2[11];
  uint64_t v9 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  return swift_bridgeObjectRelease(*(void *)(a1 + a2[12] + 8));
}

char *initializeWithCopy for MessagingMessageContext(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1LL, v6))
  {
    uint64_t v8 = sub_100004AEC(&qword_10099D8A0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(&a1[a3[5]], &a2[a3[5]], v6);
  }

  else
  {
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v9(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
    v9(&a1[a3[5]], &a2[a3[5]], v6);
  }

  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = &a1[v10];
  uint64_t v13 = &a2[v10];
  char *v12 = *v13;
  uint64_t v14 = *((void *)v13 + 2);
  *((void *)v12 + 1) = *((void *)v13 + 1);
  *((void *)v12 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v14;
  uint64_t v15 = &a1[v11];
  uint64_t v16 = &a2[v11];
  char *v15 = *v16;
  uint64_t v17 = *((void *)v16 + 2);
  *((void *)v15 + 1) = *((void *)v16 + 1);
  *((void *)v15 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v17;
  uint64_t v18 = a3[8];
  uint64_t v19 = a3[9];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  uint64_t v22 = *((void *)v21 + 1);
  *(void *)uint64_t v20 = *(void *)v21;
  *((void *)v20 + 1) = v22;
  a1[v19] = a2[v19];
  uint64_t v23 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v26 = type metadata accessor for Date(0LL);
  unint64_t v27 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v26 - 8) + 16LL);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v17);
  __n128 v28 = swift_bridgeObjectRetain(v22);
  v27(v24, v25, v26, v28);
  uint64_t v29 = a3[12];
  __n128 v30 = &a1[v29];
  uint64_t v31 = &a2[v29];
  uint64_t v32 = *((void *)v31 + 1);
  *(void *)__n128 v30 = *(void *)v31;
  *((void *)v30 + 1) = v32;
  swift_bridgeObjectRetain(v32);
  return a1;
}

char *assignWithCopy for MessagingMessageContext(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1LL, v6);
  int v10 = v8(a2, 1LL, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v10)
  {
LABEL_6:
    uint64_t v11 = sub_100004AEC(&qword_10099D8A0);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
LABEL_7:
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *uint64_t v13 = *v14;
  *((void *)v13 + 1) = *((void *)v14 + 1);
  uint64_t v15 = *((void *)v14 + 2);
  *((void *)v13 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[7];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  *uint64_t v17 = *v18;
  *((void *)v17 + 1) = *((void *)v18 + 1);
  uint64_t v19 = *((void *)v18 + 2);
  *((void *)v17 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[8];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  uint64_t v23 = *((void *)v22 + 1);
  *((void *)v21 + 1) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease();
  a1[a3[9]] = a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  uint64_t v24 = a3[11];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 24LL))(v25, v26, v27);
  uint64_t v28 = a3[12];
  uint64_t v29 = &a1[v28];
  __n128 v30 = &a2[v28];
  *(void *)uint64_t v29 = *(void *)v30;
  uint64_t v31 = *((void *)v30 + 1);
  *((void *)v29 + 1) = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for MessagingMessageContext(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1LL, v6))
  {
    uint64_t v8 = sub_100004AEC(&qword_10099D8A0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&a1[a3[5]], &a2[a3[5]], v6);
  }

  else
  {
    int v9 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v9(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
    v9(&a1[a3[5]], &a2[a3[5]], v6);
  }

  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = &a1[v10];
  uint64_t v13 = &a2[v10];
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *((void *)v12 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *((void *)v13 + 2);
  uint64_t v14 = &a1[v11];
  uint64_t v15 = &a2[v11];
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *((void *)v14 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *((void *)v15 + 2);
  uint64_t v16 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  a1[v16] = a2[v16];
  uint64_t v17 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v20 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32LL))(v18, v19, v20);
  *(_OWORD *)&a1[a3[12]] = *(_OWORD *)&a2[a3[12]];
  return a1;
}

char *assignWithTake for MessagingMessageContext(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1LL, v6);
  int v10 = v8(a2, 1LL, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v10)
  {
LABEL_6:
    uint64_t v11 = sub_100004AEC(&qword_10099D8A0);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
LABEL_7:
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *uint64_t v13 = *v14;
  uint64_t v16 = *((void *)v14 + 1);
  uint64_t v15 = *((void *)v14 + 2);
  *((void *)v13 + 1) = v16;
  *((void *)v13 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[7];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  char *v18 = *v19;
  uint64_t v21 = *((void *)v19 + 1);
  uint64_t v20 = *((void *)v19 + 2);
  *((void *)v18 + 1) = v21;
  *((void *)v18 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[8];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v26 = *(void *)v24;
  uint64_t v25 = *((void *)v24 + 1);
  *(void *)uint64_t v23 = v26;
  *((void *)v23 + 1) = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v27] = a2[v27];
  uint64_t v28 = a3[11];
  uint64_t v29 = &a1[v28];
  __n128 v30 = &a2[v28];
  uint64_t v31 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 40LL))(v29, v30, v31);
  uint64_t v32 = a3[12];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  uint64_t v36 = *(void *)v34;
  uint64_t v35 = *((void *)v34 + 1);
  *(void *)uint64_t v33 = v36;
  *((void *)v33 + 1) = v35;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MessagingMessageContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100653C44);
}

uint64_t sub_100653C44(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v11;
    uint64_t v13 = a3[5];
LABEL_10:
    uint64_t v10 = a1 + v13;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }

  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    uint64_t v12 = *(void *)(v8 - 8);
    uint64_t v13 = a3[11];
    goto LABEL_10;
  }

  unint64_t v14 = *(void *)(a1 + a3[6] + 16);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for MessagingMessageContext( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100653D24);
}

uint64_t sub_100653D24(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t result = type metadata accessor for UUID(0LL);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      uint64_t v10 = result;
      uint64_t v15 = a4[5];
    }

    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(void *)(a1 + a4[6] + swift_weakDestroy(v0 + 16) = (a2 - 1);
        return result;
      }

      uint64_t v10 = type metadata accessor for Date(0LL);
      uint64_t v14 = *(void *)(v10 - 8);
      uint64_t v15 = a4[11];
    }

    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_100653DF4(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v8[0] = *(void *)(v2 - 8) + 64LL;
    uint64_t v4 = type metadata accessor for UUID(319LL);
    if (v5 <= 0x3F)
    {
      v8[1] = *(void *)(v4 - 8) + 64LL;
      v8[2] = &unk_1008120D8;
      void v8[3] = &unk_1008120D8;
      v8[4] = &unk_1008120F0;
      v8[5] = &unk_100812108;
      v8[6] = &unk_100812108;
      uint64_t v6 = type metadata accessor for Date(319LL);
      if (v7 <= 0x3F)
      {
        v8[7] = *(void *)(v6 - 8) + 64LL;
        v8[8] = &unk_1008120F0;
        swift_initStructMetadata(a1, 256LL, 9LL, v8, a1 + 16);
      }
    }
  }

uint64_t sub_100653EB4(void *a1)
{
  id v2 = [a1 fromID];
  if (v2)
  {
    unint64_t v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

    v4._countAndFlagsBits = 0x3A656369766564LL;
    v4._object = (void *)0xE700000000000000LL;
    LOBYTE(v3) = String.hasPrefix(_:)(v4);
    swift_bridgeObjectRelease();
    id v14 = [a1 senderCorrelationIdentifier];
    if (v14)
    {

      return 1LL;
    }

    if (qword_10099B810 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    sub_10000A720(v15, (uint64_t)qword_100A2B188);
    id v7 = a1;
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v11 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v10 = 138412290;
      id v18 = v7;
      id v16 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v10 + 4, v10 + 12);
      void *v11 = v7;

      uint64_t v13 = "Ignoring IDSMessageContext without a correlationIdentifier: %@";
      goto LABEL_14;
    }

ValueMetadata *type metadata accessor for GetPrimaryKeyPayload()
{
  return &type metadata for GetPrimaryKeyPayload;
}

unint64_t sub_1006541D0(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1006541FC();
  unint64_t result = sub_1002569C8();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_1006541FC()
{
  unint64_t result = qword_1009B9688;
  if (!qword_1009B9688)
  {
    unint64_t result = swift_getWitnessTable(&unk_100812138, &type metadata for GetPrimaryKeyPayload);
    atomic_store(result, (unint64_t *)&qword_1009B9688);
  }

  return result;
}

void *sub_100654240(uint64_t a1)
{
  uint64_t v90 = type metadata accessor for TimeBasedKey(0LL);
  uint64_t v2 = *(void *)(v90 - 8);
  uint64_t v3 = __chkstk_darwin(v90);
  uint64_t v87 = (char *)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v85 - v5;
  uint64_t v7 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v7);
  os_log_type_t v9 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v92 = type metadata accessor for DateInterval(0LL);
  uint64_t v10 = *(void *)(v92 - 8);
  uint64_t v11 = __chkstk_darwin(v92);
  uint64_t v88 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  id v89 = (char *)&v85 - v14;
  __chkstk_darwin(v13);
  id v16 = (char *)&v85 - v15;
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  unint64_t v17 = 0xD000000000000021LL;
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v93 = 0LL;
  uint64_t v18 = sub_1006A0BC4(v96);
  swift_bridgeObjectRelease();
  static Date.trustedNow.getter((uint64_t)v9);
  DateInterval.init(start:duration:)(v9, (double)v18 * 60.0);
  uint64_t v19 = sub_100655444((uint64_t)v16);
  id v20 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v21 = String._bridgeToObjectiveC()();
  unsigned __int8 v22 = [v20 BOOLForKey:v21];

  uint64_t v91 = v10;
  uint64_t v23 = v16;
  if ((v22 & 1) == 0 && a1)
  {
    if (a1 != 1) {
      goto LABEL_23;
    }
    uint64_t v38 = v19[2];
    uint64_t v40 = (uint64_t)v87;
    uint64_t v39 = v88;
    if (v38)
    {
      uint64_t v86 = v23;
      uint64_t v95 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v38);
      uint64_t v41 = *(unsigned __int8 *)(v2 + 80);
      uint64_t v85 = v19;
      id v89 = *(char **)(v2 + 72);
      uint64_t v42 = v91;
      uint64_t v43 = v92;
      sub_10001DC4C((uint64_t)v19 + ((v41 + 32) & ~v41), v40, type metadata accessor for TimeBasedKey);
      uint64_t v44 = v90;
      (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v39, v40 + *(int *)(v90 + 20), v43);
      uint64_t v45 = v40 + *(int *)(v44 + 24);
      uint64_t v47 = *(void *)(v45 + 16);
      unint64_t v46 = *(void *)(v45 + 24);
      sub_10001736C(v47, v46);
      uint64_t v48 = v93;
      sub_1004DFE7C(v47, v46);
      if (!v48)
      {
        uint64_t v50 = v49;
        sub_1004DDA84(v49, 0);
        uint64_t v52 = v51;
        CCECCryptorRelease(v50);
        sub_100016F9C(v47, v46);
        __asm { BR              X9 }
      }

      a1 = v48;
      uint64_t v66 = static os_log_type_t.error.getter(v49);
      if (qword_10099B520 != -1) {
        swift_once(&qword_10099B520, sub_1004DC610);
      }
      uint64_t v67 = qword_100A2AC90;
      uint64_t v68 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v69 = swift_allocObject(v68, 72LL, 7LL);
      *(_OWORD *)(v69 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v96 = a1;
      swift_errorRetain(a1);
      uint64_t v70 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v71 = String.init<A>(describing:)(&v96, v70);
      unint64_t v17 = v72;
      *(void *)(v69 + 56) = &type metadata for String;
      *(void *)(v69 + 64) = sub_1000226F4();
      *(void *)(v69 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v71;
      *(void *)(v69 + 40) = v17;
      os_log(_:dso:log:_:_:)(v66, &_mh_execute_header, v67, "Error deriving advertisementKey: %@", 35LL, 2LL, v69, v85);
      swift_bridgeObjectRelease();
      unint64_t v73 = sub_100117A8C();
      uint64_t v74 = swift_allocError(&type metadata for CryptoTokenError, v73, 0LL, 0LL);
      *uint64_t v75 = 0;
      swift_willThrow(v74);
      swift_errorRelease(a1);
      sub_100016F9C(v47, v46);
      uint64_t v96 = 0LL;
      unint64_t v97 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(35LL);
      v76._object = (void *)0x8000000100854640LL;
      v76._countAndFlagsBits = 0xD000000000000021LL;
      String.append(_:)(v76);
      uint64_t v94 = v74;
      goto LABEL_21;
    }

    uint64_t v10 = v91;
    uint64_t v37 = v92;
  }

  else
  {
    unint64_t v17 = v19[2];
    if (v17)
    {
      uint64_t v86 = v16;
      uint64_t v95 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v17);
      uint64_t v24 = *(unsigned __int8 *)(v2 + 80);
      uint64_t v85 = v19;
      uint64_t v25 = (uint64_t)v19 + ((v24 + 32) & ~v24);
      uint64_t v88 = *(char **)(v2 + 72);
      uint64_t v26 = v92;
      uint64_t v27 = v89;
      sub_10001DC4C(v25, (uint64_t)v6, type metadata accessor for TimeBasedKey);
      uint64_t v28 = v90;
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v27, &v6[*(int *)(v90 + 20)], v26);
      uint64_t v29 = &v6[*(int *)(v28 + 24)];
      uint64_t v30 = *((void *)v29 + 2);
      unint64_t v31 = *((void *)v29 + 3);
      sub_10001736C(v30, v31);
      uint64_t v32 = v93;
      sub_1004DFE7C(v30, v31);
      if (!v32)
      {
        uint64_t v34 = v33;
        sub_1004DDA84(v33, 0);
        uint64_t v36 = v35;
        CCECCryptorRelease(v34);
        sub_100016F9C(v30, v31);
        __asm { BR              X9 }
      }

      a1 = v32;
      uint64_t v54 = static os_log_type_t.error.getter(v33);
      if (qword_10099B520 != -1) {
        swift_once(&qword_10099B520, sub_1004DC610);
      }
      uint64_t v55 = qword_100A2AC90;
      uint64_t v56 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v57 = swift_allocObject(v56, 72LL, 7LL);
      *(_OWORD *)(v57 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v96 = a1;
      swift_errorRetain(a1);
      uint64_t v58 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v59 = String.init<A>(describing:)(&v96, v58);
      uint64_t v61 = v60;
      *(void *)(v57 + 56) = &type metadata for String;
      *(void *)(v57 + 64) = sub_1000226F4();
      *(void *)(v57 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v59;
      *(void *)(v57 + 40) = v61;
      os_log(_:dso:log:_:_:)(v54, &_mh_execute_header, v55, "Error deriving advertisementKey: %@", 35LL, 2LL, v57, v85);
      swift_bridgeObjectRelease();
      unint64_t v62 = sub_100117A8C();
      uint64_t v63 = swift_allocError(&type metadata for CryptoTokenError, v62, 0LL, 0LL);
      _BYTE *v64 = 0;
      swift_willThrow(v63);
      swift_errorRelease(a1);
      sub_100016F9C(v30, v31);
      uint64_t v96 = 0LL;
      unint64_t v97 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(35LL);
      v65._object = (void *)0x8000000100854640LL;
      v65._countAndFlagsBits = 0xD000000000000021LL;
      String.append(_:)(v65);
      uint64_t v94 = v63;
LABEL_21:
      uint64_t v77 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      _print_unlocked<A, B>(_:_:)( &v94,  &v96,  v77,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      uint64_t v78 = v96;
      unint64_t v79 = v97;
      uint64_t v84 = 256LL;
      id v80 = "searchpartyd/KeyRepresentable.swift";
      for (uint64_t i = 35LL; ; uint64_t i = 40LL)
      {
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11LL, 2LL, v78, v79, v80, i, 2LL, v84, 0);
        __break(1u);
LABEL_23:
        if (a1 == -1)
        {
          uint64_t v78 = v17 + 13;
          uint64_t v84 = 73LL;
          unint64_t v79 = 0x800000010086BCA0LL;
        }

        else
        {
          uint64_t v96 = 0LL;
          unint64_t v97 = 0xE000000000000000LL;
          _StringGuts.grow(_:)(21LL);
          v82._countAndFlagsBits = v17 - 14;
          v82._object = (void *)0x800000010086BC80LL;
          String.append(_:)(v82);
          uint64_t v95 = (void *)a1;
          type metadata accessor for BeaconingKeyType(0LL);
          _print_unlocked<A, B>(_:_:)( &v95,  &v96,  v83,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
          uint64_t v78 = v96;
          unint64_t v79 = v97;
          uint64_t v84 = 86LL;
        }

        id v80 = "searchpartyd/LocalBeaconingManager.swift";
      }
    }

    uint64_t v37 = v92;
  }

  (*(void (**)(char *, uint64_t))(v10 + 8))(v23, v37);
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100654DF8@<X0>(uint64_t a1@<X8>)
{
  id v2 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 objectForKey:v3];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v9, v4);
    swift_unknownObjectRelease(v4);
  }

  else
  {
    memset(v9, 0, sizeof(v9));
  }

  sub_100015750((uint64_t)v9, (uint64_t)v10, &qword_10099E200);
  if (v11)
  {
    uint64_t v5 = type metadata accessor for Date(0LL);
    int v6 = swift_dynamicCast(a1, v10, (char *)&type metadata for Any + 8, v5, 6LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))( a1,  v6 ^ 1u,  1LL,  v5);
  }

  else
  {
    sub_100015794((uint64_t)v10, &qword_10099E200);
    uint64_t v8 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))( a1,  1LL,  1LL,  v8);
  }

uint64_t sub_100654F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v23 - v12;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  unint64_t v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(_BYTE *)(v2 + OBJC_IVAR____TtC12searchpartyd21LocalBeaconingManager_runningMacOSDaemon) = 0;
  sub_10001581C(a1, v2 + OBJC_IVAR____TtC12searchpartyd21LocalBeaconingManager_beaconRecord, (uint64_t *)&unk_1009A9C30);
  *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd21LocalBeaconingManager_beaconKeyManager) = a2;
  sub_10001581C(a1, (uint64_t)v7, (uint64_t *)&unk_1009A9C30);
  uint64_t v18 = type metadata accessor for OwnedBeaconRecord(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48LL))(v7, 1LL, v18) == 1)
  {
    swift_retain();
    sub_100015794((uint64_t)v7, (uint64_t *)&unk_1009A9C30);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1LL, 1LL, v14);
  }

  else
  {
    uint64_t v19 = &v7[*(int *)(v18 + 32)];
    id v20 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
    v20(v13, v19, v14);
    swift_retain();
    sub_100018C68((uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
    NSString v21 = *(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56);
    v21(v13, 0LL, 1LL, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
      v20(v11, v17, v14);
      v21(v11, 0LL, 1LL, v14);
      sub_1006568E0((uint64_t)v11);
      swift_release();
      sub_100015794(a1, (uint64_t *)&unk_1009A9C30);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      return v2;
    }
  }

  swift_release();
  sub_100015794(a1, (uint64_t *)&unk_1009A9C30);
  sub_100015794((uint64_t)v13, (uint64_t *)&unk_10099D720);
  return v2;
}

uint64_t sub_1006551F4@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001581C( v1 + OBJC_IVAR____TtC12searchpartyd21LocalBeaconingManager_beaconRecord,  (uint64_t)v5,  (uint64_t *)&unk_1009A9C30);
  uint64_t v9 = type metadata accessor for OwnedBeaconRecord(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v5, 1LL, v9) == 1)
  {
    sub_100015794((uint64_t)v5, (uint64_t *)&unk_1009A9C30);
    uint64_t v10 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v8, 1LL, 1LL, v10);
  }

  else
  {
    uint64_t v11 = &v5[*(int *)(v9 + 20)];
    uint64_t v12 = type metadata accessor for UUID(0LL);
    uint64_t v13 = *(void *)(v12 - 8);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v8, v11, v12);
    sub_100018C68((uint64_t)v5, type metadata accessor for OwnedBeaconRecord);
    uint64_t v14 = *(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56);
    v14(v8, 0LL, 1LL, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v8, 1LL, v12) != 1)
    {
      (*(void (**)(void *, char *, uint64_t))(v13 + 32))(a1, v8, v12);
      return ((uint64_t (*)(void *, void, uint64_t, uint64_t))v14)(a1, 0LL, 1LL, v12);
    }
  }

  sub_100015794((uint64_t)v8, &qword_10099D8A0);
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v15 = v18[1];
  uint64_t KeyPath = swift_getKeyPath(&unk_1008121F0);
  sub_1006A1FC0(KeyPath, v15, a1);
  swift_bridgeObjectRelease();
  return swift_release();
}

void *sub_100655444(uint64_t a1)
{
  uint64_t v93 = a1;
  uint64_t v2 = type metadata accessor for DateInterval(0LL);
  uint64_t v96 = *(void *)(v2 - 8);
  uint64_t v97 = v2;
  __chkstk_darwin(v2);
  uint64_t v94 = v3;
  uint64_t v95 = (char *)&v86 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v98 = (uint64_t)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v99 = (char *)&v86 - v7;
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v100 = *(void *)(v8 - 8);
  uint64_t v101 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v91 = v10;
  uint64_t v92 = (uint64_t)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v102 = (uint64_t)&v86 - v11;
  uint64_t v12 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v12);
  uint64_t v14 = (void (**)(char *, uint64_t))((char *)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v86 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v103 = (char *)&v86 - v20;
  uint64_t v21 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v86 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for Date(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v86 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v86 - v29;
  sub_100654DF8((uint64_t)v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1LL, v24) == 1)
  {
    unint64_t v31 = (uint64_t *)&unk_10099D720;
    uint64_t v32 = (uint64_t)v23;
LABEL_8:
    uint64_t v46 = sub_100015794(v32, v31);
    uint64_t v47 = static os_log_type_t.error.getter(v46);
    unint64_t v48 = sub_1001B9018();
    uint64_t v49 = (void *)static OS_os_log.default.getter(v48);
    uint64_t v50 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v47,  &_mh_execute_header,  v49,  "LocalBeaconingManager - No beacon - unable to self-beacon.",  58LL,  2LL,  _swiftEmptyArrayStorage);

    return v50;
  }

  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v30, v23, v24);
  sub_1006551F4(v14);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15) == 1)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v30, v24);
    unint64_t v31 = &qword_10099D8A0;
    uint64_t v32 = (uint64_t)v14;
    goto LABEL_8;
  }

  uint64_t v33 = v103;
  (*(void (**)(char *, void *, uint64_t))(v16 + 32))(v103, v14, v15);
  uint64_t v34 = v98;
  sub_10001581C(v1 + OBJC_IVAR____TtC12searchpartyd21LocalBeaconingManager_beaconRecord, v98, (uint64_t *)&unk_1009A9C30);
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v33, v15);
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
  id v89 = v30;
  v35(v28, v30, v24);
  uint64_t v90 = v15;
  uint64_t v36 = v34;
  uint64_t v37 = v100;
  uint64_t v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48);
  uint64_t v39 = v34;
  uint64_t v40 = v101;
  if (v38((char *)v39, 1LL, v101) == 1)
  {
    uint64_t v41 = v36;
    uint64_t v42 = v99;
    sub_100655C14((uint64_t)v19, (uint64_t)v28, v99);
    uint64_t v43 = *(void (**)(char *, uint64_t))(v25 + 8);
    v43(v28, v24);
    uint64_t v44 = *(void (**)(char *, uint64_t))(v16 + 8);
    uint64_t v45 = v90;
    v44(v19, v90);
    sub_100015794(v41, (uint64_t *)&unk_1009A9C30);
    if (v38(v42, 1LL, v40) == 1)
    {
      v44(v103, v45);
      v43(v89, v24);
      unint64_t v31 = (uint64_t *)&unk_1009A9C30;
      uint64_t v32 = (uint64_t)v42;
      goto LABEL_8;
    }

    uint64_t v86 = v44;
    uint64_t v87 = v24;
    uint64_t v88 = v43;
    uint64_t v37 = v100;
  }

  else
  {
    uint64_t v52 = *(void (**)(char *, uint64_t))(v25 + 8);
    uint64_t v87 = v24;
    uint64_t v88 = v52;
    v52(v28, v24);
    uint64_t v86 = *(void (**)(char *, uint64_t))(v16 + 8);
    v86(v19, v90);
    uint64_t v53 = v36;
    uint64_t v42 = v99;
    sub_10002218C(v53, (uint64_t)v99, type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v42, 0LL, 1LL, v40);
  }

  uint64_t v54 = v102;
  sub_10002218C((uint64_t)v42, v102, type metadata accessor for OwnedBeaconRecord);
  uint64_t v55 = v92;
  sub_10001DC4C(v54, v92, type metadata accessor for OwnedBeaconRecord);
  uint64_t v57 = v95;
  uint64_t v56 = v96;
  uint64_t v58 = v97;
  (*(void (**)(char *, uint64_t, uint64_t))(v96 + 16))(v95, v93, v97);
  uint64_t v59 = *(unsigned __int8 *)(v37 + 80);
  uint64_t v60 = (v59 + 24) & ~v59;
  uint64_t v61 = *(unsigned __int8 *)(v56 + 80);
  uint64_t v62 = (v91 + v61 + v60) & ~v61;
  uint64_t v63 = v62 + v94;
  uint64_t v64 = swift_allocObject(&unk_10096F310, v62 + v94 + 1, v59 | v61 | 7);
  *(void *)(v64 + swift_weakDestroy(v0 + 16) = v1;
  sub_10002218C(v55, v64 + v60, type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(uint64_t, char *, uint64_t))(v56 + 32))(v64 + v62, v57, v58);
  *(_BYTE *)(v64 + v63) = 0;
  swift_retain();
  unsafeFromAsyncTask<A>(_:)(&unk_1009B9778, v64, &_s9KeyResultON);
  uint64_t v65 = swift_release();
  uint64_t v50 = v104;
  if (!v106)
  {
    uint64_t v68 = v105;
    swift_bridgeObjectRetain(v104);
    uint64_t v70 = static os_log_type_t.default.getter(v69);
    uint64_t v66 = v89;
    if (qword_10099B6F8 != -1) {
      swift_once(&qword_10099B6F8, sub_100651098);
    }
    uint64_t v71 = qword_100A2B008;
    uint64_t v72 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v73 = swift_allocObject(v72, 72LL, 7LL);
    *(_OWORD *)(v73 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v74 = v102;
    uint64_t v75 = UUID.uuidString.getter(v73);
    uint64_t v77 = v76;
    *(void *)(v73 + 56) = &type metadata for String;
    *(void *)(v73 + 64) = sub_1000226F4();
    *(void *)(v73 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v75;
    *(void *)(v73 + 40) = v77;
    swift_bridgeObjectRelease();
    sub_100117B2C((uint64_t)v50, v68, 0);
    uint64_t v67 = v74;
    goto LABEL_18;
  }

  uint64_t v66 = v89;
  if (v106 == 1)
  {
    uint64_t v67 = v102;
LABEL_18:
    sub_100018C68(v67, type metadata accessor for OwnedBeaconRecord);
    v86(v103, v90);
    v88(v66, v87);
    return v50;
  }

  uint64_t v78 = static os_log_type_t.default.getter(v65);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v79 = qword_100A2B008;
  uint64_t v80 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v81 = swift_allocObject(v80, 72LL, 7LL);
  *(_OWORD *)(v81 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v82 = v102;
  uint64_t v83 = UUID.uuidString.getter(v81);
  uint64_t v85 = v84;
  *(void *)(v81 + 56) = &type metadata for String;
  *(void *)(v81 + 64) = sub_1000226F4();
  *(void *)(v81 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v83;
  *(void *)(v81 + 40) = v85;
  swift_bridgeObjectRelease();
  sub_100018C68(v82, type metadata accessor for OwnedBeaconRecord);
  v86(v103, v90);
  v88(v66, v87);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100655C14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v35 = a1;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v37 = *(void *)(v4 - 8);
  uint64_t v5 = v37;
  uint64_t v38 = v4;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = v14;
  uint64_t v15 = type metadata accessor for StableIdentifier(0LL);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v20 = (uint64_t *)((char *)&v34 - v19);
  *uint64_t v20 = 0x4944552D454B4146LL;
  v20[1] = 0xE900000000000044LL;
  swift_storeEnumTagMultiPayload((char *)&v34 - v19, v21, 0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v35, v11);
  sub_10001DC4C((uint64_t)v20, (uint64_t)v18, type metadata accessor for StableIdentifier);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1LL, 1LL, v11);
  uint64_t v22 = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v39, v4);
  uint64_t v23 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  uint64_t v39 = __DataStorage.init(length:)(32LL) | 0x4000000000000000LL;
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  uint64_t v24 = __DataStorage.init(length:)(85LL) | 0x4000000000000000LL;
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  uint64_t v25 = __DataStorage.init(length:)(57LL) | 0x4000000000000000LL;
  sub_100018C68((uint64_t)v20, type metadata accessor for StableIdentifier);
  *(_OWORD *)a3 = xmmword_1007E4480;
  uint64_t v26 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&a3[v26[5]], v36, v11);
  sub_10002218C((uint64_t)v18, (uint64_t)&a3[v26[6]], type metadata accessor for StableIdentifier);
  sub_100015750((uint64_t)v10, (uint64_t)&a3[v26[7]], &qword_10099D8A0);
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(&a3[v26[8]], v22, v38);
  uint64_t v27 = &a3[v26[9]];
  uint64_t v28 = v39;
  *(void *)uint64_t v27 = 0x2000000000LL;
  *((void *)v27 + 1) = v28;
  *(_OWORD *)&a3[v26[10]] = xmmword_1007E7660;
  *(_OWORD *)&a3[v26[11]] = xmmword_1007E7660;
  uint64_t v29 = &a3[v26[12]];
  *(void *)uint64_t v29 = 0x5500000000LL;
  *((void *)v29 + 1) = v24;
  uint64_t v30 = &a3[v26[13]];
  *(void *)uint64_t v30 = 0x3900000000LL;
  *((void *)v30 + 1) = v25;
  unint64_t v31 = &a3[v26[14]];
  *(void *)unint64_t v31 = 65LL;
  *((void *)v31 + 1) = 0xE100000000000000LL;
  uint64_t v32 = &a3[v26[15]];
  *(void *)uint64_t v32 = 16706LL;
  *((void *)v32 + 1) = 0xE200000000000000LL;
  *(void *)&a3[v26[16]] = -1LL;
  *(void *)&a3[v26[17]] = -1LL;
  a3[v26[18]] = 3;
  a3[v26[19]] = 0;
  a3[v26[20]] = 0;
  return (*(uint64_t (**)(char *, void, uint64_t, int *))(*((void *)v26 - 1) + 56LL))(a3, 0LL, 1LL, v26);
}

uint64_t sub_100655F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[9] = a3;
  void v4[10] = a4;
  v4[7] = a1;
  v4[8] = a2;
  uint64_t v5 = type metadata accessor for DateInterval(0LL);
  v4[11] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[12] = v6;
  void v4[13] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009AE460);
  v4[14] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100656020, 0LL, 0LL);
}

uint64_t sub_100656020()
{
  uint64_t v1 = v0[9];
  v0[15] = *(void *)(v0[8] + OBJC_IVAR____TtC12searchpartyd21LocalBeaconingManager_beaconKeyManager);
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord(0LL);
  v0[16] = v2;
  v0[5] = v2;
  v0[6] = sub_100007864( (unint64_t *)&qword_10099D000,  type metadata accessor for OwnedBeaconRecord,  (uint64_t)&unk_10080B120);
  uint64_t v3 = sub_10000A7C8(v0 + 2);
  v0[17] = v3;
  sub_10001DC4C(v1, (uint64_t)v3, type metadata accessor for OwnedBeaconRecord);
  uint64_t v4 = (void *)swift_task_alloc(dword_1009A8004);
  v0[18] = v4;
  void *v4 = v0;
  v4[1] = sub_1006560E0;
  return sub_1002E0328(v0[14], (uint64_t)(v0 + 2));
}

uint64_t sub_1006560E0()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144LL);
  *(void *)(*(void *)v1 + 152LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100656144;
  }
  else {
    uint64_t v3 = sub_1006561A4;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100656144()
{
  uint64_t v1 = *(void **)(v0 + 56);
  swift_errorRelease(*(void *)(v0 + 152));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  *uint64_t v1 = 0LL;
  v1[1] = 0LL;
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 112);
  *(_BYTE *)(*(void *)(v0 + 56) + 16LL) = 2;
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006561A4()
{
  uint64_t v1 = v0[17];
  uint64_t v3 = v0[13];
  uint64_t v2 = (uint64_t *)v0[14];
  uint64_t v4 = v0[11];
  uint64_t v5 = v0[12];
  uint64_t v6 = v0[10];
  sub_1006DDC00();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v6, v4);
  uint64_t v7 = sub_100656A20(v1, v3, v2);
  uint64_t v9 = v8;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  sub_100015794((uint64_t)v2, (uint64_t *)&unk_1009AE460);
  uint64_t v10 = (void *)swift_task_alloc(dword_1009A8024);
  v0[20] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100656288;
  return sub_1002DE3E0((uint64_t)(v0 + 2), v7, v9, 0, 0, 0);
}

uint64_t sub_100656288(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v8 = *v4;
  uint64_t v9 = *(void *)(*v4 + 160);
  *(void *)(*v4 + 168) = v3;
  swift_task_dealloc(v9);
  if (v3)
  {
    uint64_t v10 = sub_100656370;
  }

  else
  {
    *(_BYTE *)(v8 + 19_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = a3;
    *(void *)(v8 + 176) = a2;
    *(void *)(v8 + 184) = a1;
    uint64_t v10 = sub_100656310;
  }

  return swift_task_switch(v10, 0LL, 0LL);
}

uint64_t sub_100656310()
{
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v3 = *(void **)(v0 + 56);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  *uint64_t v3 = v2;
  v3[1] = v1;
  uint64_t v5 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 112);
  *(_BYTE *)(*(void *)(v0 + 56) + 16LL) = *(_BYTE *)(v0 + 192);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100656370()
{
  uint64_t v1 = *(void **)(v0 + 56);
  swift_errorRelease(*(void *)(v0 + 168));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  *uint64_t v1 = 0LL;
  v1[1] = 0LL;
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 112);
  *(_BYTE *)(*(void *)(v0 + 56) + 16LL) = 2;
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006563D0()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100656418()
{
  return type metadata accessor for LocalBeaconingManager(0LL);
}

uint64_t type metadata accessor for LocalBeaconingManager(uint64_t a1)
{
  uint64_t result = qword_1009B96D0;
  if (!qword_1009B96D0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocalBeaconingManager);
  }
  return result;
}

void sub_10065645C(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    void v4[2] = &unk_1008121D8;
    swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
  }

void sub_1006564E0(uint64_t a1)
{
  if (!qword_1009B96E0)
  {
    uint64_t v2 = type metadata accessor for OwnedBeaconRecord(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1009B96E0);
    }
  }

uint64_t sub_100656534()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v26 = *(void *)(v2 + 64);
  uint64_t v5 = type metadata accessor for DateInterval(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v27 = v6;
  uint64_t v28 = v5;
  uint64_t v25 = *(void *)(v6 + 64);
  swift_release();
  uint64_t v8 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v9 = v0 + v4 + v1[5];
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  uint64_t v13 = v0 + v4 + v1[6];
  uint64_t v14 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v13, v14))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v12(v13, v10);
      uint64_t v24 = (v3 + 24) & ~v3;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v12(v13, v10);
      uint64_t v24 = (v3 + 24) & ~v3;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v4 = v24;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v15 = v8 + v1[7];
  uint64_t v16 = v8 + v1[8];
  uint64_t v17 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8LL))(v16, v17);
  sub_100016F9C(*(void *)(v8 + v1[9]), *(void *)(v8 + v1[9] + 8));
  uint64_t v18 = (uint64_t *)(v8 + v1[10]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  uint64_t v20 = (uint64_t *)(v8 + v1[11]);
  unint64_t v21 = v20[1];
  if (v21 >> 60 != 15) {
    sub_100016F9C(*v20, v21);
  }
  uint64_t v22 = (v4 + v26 + v7) & ~v7;
  sub_100016F9C(*(void *)(v8 + v1[12]), *(void *)(v8 + v1[12] + 8));
  sub_100016F9C(*(void *)(v8 + v1[13]), *(void *)(v8 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v0 + v22, v28);
  return swift_deallocObject(v0, v25 + v22 + 1, v3 | v7 | 7);
}

uint64_t sub_100656820(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(type metadata accessor for DateInterval(0LL) - 8);
  unint64_t v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v10 = v1 + v8;
  uint64_t v11 = (void *)swift_task_alloc(dword_1009B9774);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  void *v11 = v2;
  v11[1] = sub_1000159BC;
  return sub_100655F98(a1, v9, v1 + v5, v10);
}

uint64_t sub_1006568E0(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v5 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  sub_10001581C(a1, (uint64_t)v4, (uint64_t *)&unk_10099D720);
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  Class isa = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1LL, v6) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
  }

  NSString v9 = String._bridgeToObjectiveC()();
  [v5 setObject:isa forKey:v9];

  swift_unknownObjectRelease(isa);
  return sub_100015794(a1, (uint64_t *)&unk_10099D720);
}

uint64_t sub_100656A20(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v72 = a2;
  uint64_t v76 = (char *)a1;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  unint64_t v10 = (unint64_t)&v63 - v9;
  unint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v67 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v71 = (char *)&v63 - v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v63 - v17);
  uint64_t v19 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v19);
  unint64_t v21 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C((uint64_t)v76, (uint64_t)v21, v22);
  uint64_t v23 = &v21[*(int *)(v19 + 20)];
  uint64_t v74 = v12;
  uint64_t v75 = (char *)v11;
  uint64_t v73 = *(void (**)(uint64_t *, char *, unint64_t))(v12 + 16);
  v73(v18, v23, v11);
  uint64_t v24 = *(int *)(v19 + 32);
  uint64_t v69 = v21;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 16))(v10, &v21[v24], v4);
  uint64_t v25 = *a3;
  uint64_t v26 = (uint64_t)a3 + *(int *)(sub_100004AEC((uint64_t *)&unk_1009AE460) + 36);
  uint64_t v27 = v10;
  uint64_t v76 = (char *)v18;
  uint64_t v28 = sub_1003DE0D8((uint64_t)v18, v10, v26, 0);
  if ((v28 | v25) < 0)
  {
    __break(1u);
    goto LABEL_36;
  }

  unint64_t v10 = v28;
  uint64_t v66 = v25;
  unint64_t v29 = v28 - v25;
  DateInterval.start.getter(v28);
  uint64_t v30 = (uint64_t)v76;
  unint64_t v31 = sub_1003DE0D8((uint64_t)v76, v27, (uint64_t)v8, 0);
  uint64_t v32 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  uint64_t v33 = v32(v8, v4);
  DateInterval.end.getter(v33);
  uint64_t v34 = v29;
  unint64_t v35 = sub_1003DE0D8(v30, v27, (uint64_t)v8, 0);
  v32(v8, v4);
  uint64_t v18 = (uint64_t *)&off_10099B000;
  uint64_t v68 = (void (*)(uint64_t, uint64_t))v32;
  uint64_t v70 = v29;
  if ((v29 & 0x8000000000000000LL) == 0 && v29 >= v31)
  {
    unint64_t v8 = v75;
    if (qword_10099B3E0 != -1) {
      goto LABEL_38;
    }
    while (1)
    {
      uint64_t v36 = type metadata accessor for Logger(0LL);
      sub_10000A720(v36, (uint64_t)qword_100A2A8D8);
      uint64_t v37 = v67;
      uint64_t v38 = ((uint64_t (*)(char *, char *, char *))v73)(v67, v76, v8);
      uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
      os_log_type_t v40 = static os_log_type_t.default.getter(v39);
      int v64 = v40;
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = swift_slowAlloc(42LL, -1LL);
        uint64_t v42 = swift_slowAlloc(32LL, -1LL);
        uint64_t v63 = v42;
        *(_DWORD *)uint64_t v41 = 141558787;
        uint64_t v77 = 1752392040LL;
        uint64_t v78 = v42;
        uint64_t v72 = v4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v41 + 4, v41 + 12);
        *(_WORD *)(v41 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2081;
        uint64_t v65 = v27;
        uint64_t v43 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v44 = v39;
        uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter(v75, v43);
        uint64_t v77 = sub_1003F11D4(v45, v46, &v78);
        uint64_t v27 = v65;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v41 + 14, v41 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, char *))(v74 + 8))(v37, v75);
        *(_WORD *)(v41 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2048;
        uint64_t v77 = v31;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v41 + 24, v41 + 32);
        *(_WORD *)(v41 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2048;
        uint64_t v34 = v70;
        uint64_t v77 = v70;
        uint64_t v4 = v72;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v41 + 34, v41 + 42);
        _os_log_impl( (void *)&_mh_execute_header,  v44,  (os_log_type_t)v64,  "        Buckets clamped for beacon %{private,mask.hash}s,starting secondary index %llu <= factor %lld -- clamping to 1.",  (uint8_t *)v41,  0x2Au);
        uint64_t v47 = v63;
        swift_arrayDestroy(v63, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1LL, -1LL);
        uint64_t v48 = v41;
        unint64_t v8 = v75;
        swift_slowDealloc(v48, -1LL, -1LL);
      }

      else
      {
        (*(void (**)(char *, char *))(v74 + 8))(v37, v8);

        uint64_t v34 = v70;
      }

      unint64_t v11 = 1LL;
      if (v10 == v66)
      {
        unint64_t v21 = v71;
      }

      else
      {
        unint64_t v21 = v71;
        if (v35 < v34)
        {
          if (v35 <= 1) {
            unint64_t v10 = 1LL;
          }
          else {
            unint64_t v10 = v35;
          }
          unint64_t v11 = 1LL;
          goto LABEL_29;
        }
      }

ValueMetadata *type metadata accessor for StandaloneBeaconStore()
{
  return &type metadata for StandaloneBeaconStore;
}

void *sub_1006571FC(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + OBJC_IVAR____TtC12searchpartyd24StandaloneBeaconDatabase_standaloneBeacon);
  uint64_t v3 = type metadata accessor for Table(0LL);
  v12[3] = v3;
  v12[4] = &protocol witness table for Table;
  uint64_t v4 = sub_10000A7C8(v12);
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v3 - 8) + 16LL))(v4, v2, v3);
  uint64_t v5 = sub_100079A88();
  if (!v5)
  {
    unint64_t v8 = sub_100086500();
    uint64_t v9 = swift_allocError(&type metadata for DatabaseError, v8, 0LL, 0LL);
    *(_DWORD *)uint64_t v10 = 2;
    *(_BYTE *)(v10 + 4) = 1;
    swift_willThrow(v9);
    goto LABEL_5;
  }

  uint64_t v2 = (void *)v5;
  uint64_t v6 = Connection.prepare(_:)(v12);
  swift_release();
  if (v1)
  {
LABEL_5:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v12);
    return v2;
  }

  uint64_t v7 = sub_100004AEC(&qword_1009B9780);
  uint64_t v2 = (void *)swift_allocObject(v7, 40LL, 7LL);
  v2[2] = v6;
  v2[3] = sub_10065759C;
  void v2[4] = 0LL;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v12);
  return v2;
}

uint64_t sub_100657320@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v23[0] = a2;
  uint64_t v25 = a1;
  uint64_t v2 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Table(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B368 != -1) {
    swift_once(&qword_10099B368, sub_1003AB560);
  }
  uint64_t v10 = sub_100004AEC(&qword_10099E6D8);
  uint64_t v11 = sub_10000A720(v10, (uint64_t)qword_100A2A7B0);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  == infix<A>(_:_:)(v11, v25, v12, &protocol witness table for UUID, &protocol witness table for String);
  QueryType.filter(_:)(v5, v6, &protocol witness table for Table);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v24[3] = v6;
  v24[4] = &protocol witness table for Table;
  uint64_t v13 = sub_10000A7C8(v24);
  (*(void (**)(void *, char *, uint64_t))(v7 + 16))(v13, v9, v6);
  if (!sub_100079A88())
  {
    unint64_t v16 = sub_100086500();
    uint64_t v17 = swift_allocError(&type metadata for DatabaseError, v16, 0LL, 0LL);
    *(_DWORD *)uint64_t v18 = 2;
    *(_BYTE *)(v18 + 4) = 1;
    swift_willThrow(v17);
    goto LABEL_7;
  }

  uint64_t v14 = v23[1];
  uint64_t v15 = Connection.prepare(_:)(v24);
  if (v14)
  {
    swift_release();
LABEL_7:
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v24);
  }

  uint64_t v20 = v15;
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v24);
  uint64_t v21 = swift_retain();
  uint64_t v22 = dispatch thunk of _AnySequenceBox._makeIterator()(v21);
  swift_release_n(v20, 2LL);
  v23[4] = v22;
  v23[5] = (uint64_t)sub_10065759C;
  v23[6] = 0LL;
  sub_100658C10(v23[0]);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void sub_10065759C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Row(0LL);
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t))(v6 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL), a1);
  sub_10065761C(a2);
}

void sub_10065761C(uint64_t a1@<X8>)
{
  uint64_t v15 = a1;
  uint64_t v1 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  uint64_t v2 = __chkstk_darwin(v1);
  v13[4] = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v5 = __chkstk_darwin(v4);
  v13[1] = (char *)v13 - v6;
  __chkstk_darwin(v5);
  uint64_t v7 = type metadata accessor for MACAddress(0LL);
  uint64_t v8 = __chkstk_darwin(v7);
  void v13[3] = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v11 = __chkstk_darwin(v10);
  __chkstk_darwin(v11);
  if (qword_10099B3A0 != -1) {
    swift_once(&qword_10099B3A0, sub_1003AB968);
  }
  uint64_t v14 = sub_100004AEC(&qword_10099E780);
  uint64_t v12 = sub_10000A720(v14, (uint64_t)qword_100A2A858);
  Row.subscript.getter(v12, &type metadata for Data, &protocol witness table for Data);
  _OWORD v13[10] = v17;
  _BYTE v13[12] = v16;
  __asm { BR              X10 }

uint64_t sub_100658360()
{
  void (*v14)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  void v23[4];
  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = 16 * v6;
    uint64_t v8 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    uint64_t v11 = (uint64_t *)(*(void *)(v1 + 56) + v7);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v14 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v23[0] = v9;
    v23[1] = v10;
    void v23[2] = v12;
    void v23[3] = v13;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v13);
    v14(&v22, v23);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v10);
    return v22;
  }

  uint64_t v16 = v3 + 1;
  if (__OFADD__(v3, 1LL))
  {
    __break(1u);
  }

  else
  {
    uint64_t v17 = (unint64_t)(v0[2] + 64) >> 6;
    if (v16 < v17)
    {
      uint64_t v18 = v0[1];
      uint64_t v19 = *(void *)(v18 + 8 * v16);
      if (v19)
      {
LABEL_7:
        uint64_t v5 = (v19 - 1) & v19;
        unint64_t v6 = __clz(__rbit64(v19)) + (v16 << 6);
        int64_t v4 = v16;
        goto LABEL_3;
      }

      uint64_t v20 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v17)
      {
        uint64_t v19 = *(void *)(v18 + 8 * v20);
        if (v19)
        {
LABEL_10:
          uint64_t v16 = v20;
          goto LABEL_7;
        }

        int64_t v4 = v3 + 2;
        if (v3 + 3 < v17)
        {
          uint64_t v19 = *(void *)(v18 + 8 * (v3 + 3));
          if (v19)
          {
            uint64_t v16 = v3 + 3;
            goto LABEL_7;
          }

          uint64_t v20 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v17)
          {
            uint64_t v19 = *(void *)(v18 + 8 * v20);
            if (v19) {
              goto LABEL_10;
            }
            uint64_t v16 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v17)
            {
              uint64_t v19 = *(void *)(v18 + 8 * v16);
              if (v19) {
                goto LABEL_7;
              }
              int64_t v4 = v17 - 1;
              uint64_t v21 = v3 + 6;
              while (v17 != v21)
              {
                uint64_t v19 = *(void *)(v18 + 8 * v21++);
                if (v19)
                {
                  uint64_t v16 = v21 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }

    uint64_t result = 0LL;
    v0[3] = v4;
    v0[4] = 0LL;
  }

  return result;
}

uint64_t sub_1006584FC@<X0>(uint64_t a1@<X8>)
{
  return sub_100658534(&qword_1009A5978, &qword_1009A5970, &qword_1009B9788, a1);
}

uint64_t sub_100658518@<X0>(uint64_t a1@<X8>)
{
  return sub_100658534(&qword_1009A48D8, &qword_1009A6668, &qword_1009A6700, a1);
}

uint64_t sub_100658534@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v49 = a3;
  uint64_t v8 = sub_100004AEC(a1);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(a2);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v50 = (uint64_t)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v43 - v16;
  uint64_t v18 = *v4;
  uint64_t v19 = v4[1];
  uint64_t v21 = v4[2];
  int64_t v20 = v4[3];
  int64_t v22 = v20;
  unint64_t v23 = v4[4];
  uint64_t v44 = v11;
  uint64_t v45 = a1;
  uint64_t v48 = v21;
  if (v23)
  {
    unint64_t v46 = a2;
    uint64_t v47 = v19;
    uint64_t v24 = a4;
    uint64_t v25 = (v23 - 1) & v23;
    unint64_t v26 = __clz(__rbit64(v23)) | (v20 << 6);
LABEL_3:
    uint64_t v27 = *(void *)(v18 + 48);
    uint64_t v28 = v18;
    uint64_t v29 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v29 - 8) + 16LL))( v17,  v27 + *(void *)(*(void *)(v29 - 8) + 72LL) * v26,  v29);
    uint64_t v30 = *(void *)(*(void *)(v28 + 56) + 8 * v26);
    *(void *)&v17[*(int *)(v8 + 48)] = v30;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v17, 0LL, 1LL, v8);
    swift_bridgeObjectRetain(v30);
    a4 = v24;
    a2 = v46;
    uint64_t v19 = v47;
    goto LABEL_23;
  }

  int64_t v31 = v20 + 1;
  if (__OFADD__(v20, 1LL))
  {
    __break(1u);
    return result;
  }

  int64_t v32 = (unint64_t)(v21 + 64) >> 6;
  if (v31 < v32)
  {
    unint64_t v33 = *(void *)(v19 + 8 * v31);
    if (v33)
    {
LABEL_7:
      unint64_t v46 = a2;
      uint64_t v47 = v19;
      uint64_t v24 = a4;
      uint64_t v25 = (v33 - 1) & v33;
      unint64_t v26 = __clz(__rbit64(v33)) + (v31 << 6);
      int64_t v22 = v31;
      goto LABEL_3;
    }

    int64_t v34 = v20 + 2;
    int64_t v22 = v20 + 1;
    if (v20 + 2 < v32)
    {
      unint64_t v33 = *(void *)(v19 + 8 * v34);
      if (v33)
      {
LABEL_10:
        int64_t v31 = v34;
        goto LABEL_7;
      }

      int64_t v22 = v20 + 2;
      if (v20 + 3 < v32)
      {
        unint64_t v33 = *(void *)(v19 + 8 * (v20 + 3));
        if (v33)
        {
          int64_t v31 = v20 + 3;
          goto LABEL_7;
        }

        int64_t v34 = v20 + 4;
        int64_t v22 = v20 + 3;
        if (v20 + 4 < v32)
        {
          unint64_t v33 = *(void *)(v19 + 8 * v34);
          if (v33) {
            goto LABEL_10;
          }
          int64_t v31 = v20 + 5;
          int64_t v22 = v20 + 4;
          if (v20 + 5 < v32)
          {
            unint64_t v33 = *(void *)(v19 + 8 * v31);
            if (v33) {
              goto LABEL_7;
            }
            int64_t v22 = v32 - 1;
            int64_t v35 = v20 + 6;
            while (v32 != v35)
            {
              unint64_t v33 = *(void *)(v19 + 8 * v35++);
              if (v33)
              {
                int64_t v31 = v35 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }

  uint64_t v28 = v18;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v17, 1LL, 1LL, v8);
  uint64_t v25 = 0LL;
LABEL_23:
  uint64_t *v4 = v28;
  v4[1] = v19;
  void v4[2] = v48;
  void v4[3] = v22;
  void v4[4] = v25;
  uint64_t v36 = (void (*)(uint64_t))v4[5];
  uint64_t v37 = v50;
  sub_100015750((uint64_t)v17, v50, a2);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v37, 1LL, v8) == 1)
  {
    uint64_t v38 = sub_100004AEC(v49);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56LL))( a4,  1LL,  1LL,  v38);
  }

  else
  {
    uint64_t v39 = v37;
    uint64_t v41 = (uint64_t)v44;
    os_log_type_t v40 = v45;
    sub_100015750(v39, (uint64_t)v44, v45);
    v36(v41);
    sub_100015794(v41, v40);
    uint64_t v42 = sub_100004AEC(v49);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56LL))( a4,  0LL,  1LL,  v42);
  }

uint64_t sub_10065885C@<X0>(uint64_t a1@<X8>)
{
  return sub_100658534(&qword_1009A6610, (uint64_t *)&unk_1009B9790, &qword_1009A6600, a1);
}

uint64_t sub_100658878@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  int64_t v5 = v1[3];
  unint64_t v4 = v1[4];
  int64_t v6 = v5;
  if (v4)
  {
    uint64_t v7 = (v4 - 1) & v4;
    unint64_t v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    uint64_t v9 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v8);
    uint64_t v10 = *v9;
    unint64_t v11 = v9[1];
    uint64_t v12 = (uint64_t *)(*(void *)(v3 + 56) + 32 * v8);
    uint64_t v13 = *v12;
    unint64_t v14 = v12[1];
    uint64_t v15 = v12[2];
    unint64_t v16 = v12[3];
    v1[3] = v6;
    v1[4] = v7;
    uint64_t v17 = (void (*)(void *))v1[5];
    v25[0] = v10;
    v25[1] = v11;
    void v25[2] = v13;
    v25[3] = v14;
    _OWORD v25[4] = v15;
    void v25[5] = v16;
    sub_10001736C(v10, v11);
    sub_10001736C(v13, v14);
    sub_10001736C(v15, v16);
    v17(v25);
    sub_100016F9C(v10, v11);
    sub_100016F9C(v13, v14);
    return sub_100016F9C(v15, v16);
  }

  int64_t v19 = v5 + 1;
  if (__OFADD__(v5, 1LL))
  {
    __break(1u);
  }

  else
  {
    int64_t v20 = (unint64_t)(v1[2] + 64) >> 6;
    if (v19 < v20)
    {
      uint64_t v21 = v1[1];
      unint64_t v22 = *(void *)(v21 + 8 * v19);
      if (v22)
      {
LABEL_7:
        uint64_t v7 = (v22 - 1) & v22;
        unint64_t v8 = __clz(__rbit64(v22)) + (v19 << 6);
        int64_t v6 = v19;
        goto LABEL_3;
      }

      int64_t v23 = v5 + 2;
      int64_t v6 = v5 + 1;
      if (v5 + 2 < v20)
      {
        unint64_t v22 = *(void *)(v21 + 8 * v23);
        if (v22)
        {
LABEL_10:
          int64_t v19 = v23;
          goto LABEL_7;
        }

        int64_t v6 = v5 + 2;
        if (v5 + 3 < v20)
        {
          unint64_t v22 = *(void *)(v21 + 8 * (v5 + 3));
          if (v22)
          {
            int64_t v19 = v5 + 3;
            goto LABEL_7;
          }

          int64_t v23 = v5 + 4;
          int64_t v6 = v5 + 3;
          if (v5 + 4 < v20)
          {
            unint64_t v22 = *(void *)(v21 + 8 * v23);
            if (v22) {
              goto LABEL_10;
            }
            int64_t v19 = v5 + 5;
            int64_t v6 = v5 + 4;
            if (v5 + 5 < v20)
            {
              unint64_t v22 = *(void *)(v21 + 8 * v19);
              if (v22) {
                goto LABEL_7;
              }
              int64_t v6 = v20 - 1;
              int64_t v24 = v5 + 6;
              while (v20 != v24)
              {
                unint64_t v22 = *(void *)(v21 + 8 * v24++);
                if (v22)
                {
                  int64_t v19 = v24 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }

    v1[3] = v6;
    v1[4] = 0LL;
    *a1 = xmmword_1007E7660;
    a1[1] = 0u;
    a1[2] = 0u;
  }

  return result;
}

uint64_t sub_100658A70@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  int64_t v5 = v1[3];
  unint64_t v4 = v1[4];
  int64_t v6 = v5;
  if (v4)
  {
    uint64_t v7 = (v4 - 1) & v4;
    unint64_t v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    uint64_t v9 = 16 * v8;
    uint64_t v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v8);
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    uint64_t v13 = *(void *)(v3 + 56) + v9;
    uint64_t v14 = *(void *)v13;
    LOBYTE(v13) = *(_BYTE *)(v13 + 8);
    v1[3] = v6;
    v1[4] = v7;
    uint64_t v15 = (void (*)(void *))v1[5];
    v23[0] = v11;
    v23[1] = v12;
    void v23[2] = v14;
    char v24 = v13;
    sub_10001736C(v11, v12);
    v15(v23);
    return sub_100016F9C(v11, v12);
  }

  int64_t v17 = v5 + 1;
  if (__OFADD__(v5, 1LL))
  {
    __break(1u);
  }

  else
  {
    int64_t v18 = (unint64_t)(v1[2] + 64) >> 6;
    if (v17 < v18)
    {
      uint64_t v19 = v1[1];
      unint64_t v20 = *(void *)(v19 + 8 * v17);
      if (v20)
      {
LABEL_7:
        uint64_t v7 = (v20 - 1) & v20;
        unint64_t v8 = __clz(__rbit64(v20)) + (v17 << 6);
        int64_t v6 = v17;
        goto LABEL_3;
      }

      int64_t v21 = v5 + 2;
      int64_t v6 = v5 + 1;
      if (v5 + 2 < v18)
      {
        unint64_t v20 = *(void *)(v19 + 8 * v21);
        if (v20)
        {
LABEL_10:
          int64_t v17 = v21;
          goto LABEL_7;
        }

        int64_t v6 = v5 + 2;
        if (v5 + 3 < v18)
        {
          unint64_t v20 = *(void *)(v19 + 8 * (v5 + 3));
          if (v20)
          {
            int64_t v17 = v5 + 3;
            goto LABEL_7;
          }

          int64_t v21 = v5 + 4;
          int64_t v6 = v5 + 3;
          if (v5 + 4 < v18)
          {
            unint64_t v20 = *(void *)(v19 + 8 * v21);
            if (v20) {
              goto LABEL_10;
            }
            int64_t v17 = v5 + 5;
            int64_t v6 = v5 + 4;
            if (v5 + 5 < v18)
            {
              unint64_t v20 = *(void *)(v19 + 8 * v17);
              if (v20) {
                goto LABEL_7;
              }
              int64_t v6 = v18 - 1;
              int64_t v22 = v5 + 6;
              while (v18 != v22)
              {
                unint64_t v20 = *(void *)(v19 + 8 * v22++);
                if (v20)
                {
                  int64_t v17 = v22 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }

    v1[3] = v6;
    v1[4] = 0LL;
    *(void *)(a1 + 8) = 0LL;
    *(void *)(a1 + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)a1 = 0LL;
    *(_BYTE *)(a1 + 24) = 3;
  }

  return result;
}

uint64_t sub_100658C10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Row(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  int64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_10099E710);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v18 - v12;
  dispatch thunk of _AnyIteratorBoxBase.next()(v11);
  uint64_t v14 = *(void (**)(char *))(v1 + 8);
  sub_100015750((uint64_t)v13, (uint64_t)v10, &qword_10099E710);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1LL, v3) == 1)
  {
    uint64_t v15 = type metadata accessor for StandaloneBeacon(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))( a1,  1LL,  1LL,  v15);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v10, v3);
    v14(v6);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v17 = type metadata accessor for StandaloneBeacon(0LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))( a1,  0LL,  1LL,  v17);
  }

uint64_t sub_100658D94()
{
  id v1 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v2 = [v1 isInternalBuild];

  if (v2)
  {
    id v3 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
    NSString v4 = String._bridgeToObjectiveC()();
    unsigned int v5 = [v3 BOOLForKey:v4];

    if (v5)
    {
      uint64_t v7 = static os_log_type_t.default.getter(v6);
      uint64_t v8 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
      id v9 = (id)static OS_os_log.default.getter(v8);
      os_log(_:dso:log:_:_:)( v7,  &_mh_execute_header,  v9,  "SystemInfo simulating all locations in Korea.",  45LL,  2LL,  _swiftEmptyArrayStorage);
      uint64_t v10 = 1LL;
LABEL_12:

      return v10;
    }
  }

  [v0 coordinate];
  double v12 = v11;
  [v0 coordinate];
  double v14 = v13;
  if (qword_10099B130 != -1) {
    swift_once(&qword_10099B130, sub_10012DEC0);
  }
  if (objc_msgSend((id)qword_1009A23C0, "containsCoordinate:", v12, v14))
  {
    uint64_t v15 = (void *)qword_1009A23C8;
    if (qword_1009A23C8)
    {
      id v9 = (id)qword_1009A23C8;
    }

    else
    {
      unint64_t v16 = (void *)sub_10012E15C();
      uint64_t v17 = (void *)qword_1009A23C8;
      qword_1009A23C8 = (uint64_t)v16;
      id v9 = v16;

      uint64_t v15 = 0LL;
    }

    id v18 = v15;
    uint64_t v10 = (uint64_t)objc_msgSend(v9, "containsCoordinate:", v12, v14);
    goto LABEL_12;
  }

  return 0LL;
}

uint64_t sub_100658F88()
{
  id v1 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v2 = [v1 isInternalBuild];

  if (v2)
  {
    id v3 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
    NSString v4 = String._bridgeToObjectiveC()();
    unsigned int v5 = [v3 BOOLForKey:v4];

    if (v5)
    {
      uint64_t v7 = static os_log_type_t.default.getter(v6);
      uint64_t v8 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
      id v9 = (id)static OS_os_log.default.getter(v8);
      os_log(_:dso:log:_:_:)( v7,  &_mh_execute_header,  v9,  "SystemInfo simulating all locations in Korea.",  45LL,  2LL,  _swiftEmptyArrayStorage);
      uint64_t v10 = 1LL;
LABEL_12:

      return v10;
    }
  }

  uint64_t v11 = type metadata accessor for BeaconEstimatedLocation(0LL);
  double v12 = *(double *)(v0 + *(int *)(v11 + 28));
  double v13 = *(double *)(v0 + *(int *)(v11 + 32));
  if (qword_10099B130 != -1) {
    swift_once(&qword_10099B130, sub_10012DEC0);
  }
  if (objc_msgSend((id)qword_1009A23C0, "containsCoordinate:", v12, v13))
  {
    double v14 = (void *)qword_1009A23C8;
    if (qword_1009A23C8)
    {
      id v9 = (id)qword_1009A23C8;
    }

    else
    {
      uint64_t v15 = (void *)sub_10012E15C();
      unint64_t v16 = (void *)qword_1009A23C8;
      qword_1009A23C8 = (uint64_t)v15;
      id v9 = v15;

      double v14 = 0LL;
    }

    id v17 = v14;
    uint64_t v10 = (uint64_t)objc_msgSend(v9, "containsCoordinate:", v12, v13);
    goto LABEL_12;
  }

  return 0LL;
}

uint64_t sub_10065916C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_1009B97A0);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_1009B97A0);
  if (qword_10099B7C0 != -1) {
    swift_once(&qword_10099B7C0, sub_10065A018);
  }
  uint64_t v2 = sub_10000A720(v0, (uint64_t)qword_1009B97B8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_1006591FC()
{
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for OneShotLocationWrapper()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd22OneShotLocationWrapper);
}

uint64_t sub_100659258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_1009B994C);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_100015D58;
  return sub_1006592AC(a5);
}

uint64_t sub_1006592AC(uint64_t a1)
{
  v2[3] = a1;
  void v2[4] = v1;
  uint64_t v3 = sub_100004AEC(&qword_1009B9930);
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100659310, v1, 0LL);
}

void sub_100659310()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (!((unint64_t)v1 >> 62))
  {
    id v2 = *(id *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(*(void *)(v0 + 24));
    if (v2) {
      goto LABEL_3;
    }
LABEL_12:
    swift_bridgeObjectRelease();
LABEL_13:
    uint64_t v6 = *(void *)(v0 + 48);
    uint64_t v7 = *(void *)(v0 + 32);
    uint64_t v8 = *(void *)(v7 + 112);
    *(void *)(v7 + 11_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = _swiftEmptyDictionarySingleton;
    uint64_t v23 = v8 + 64;
    uint64_t v9 = -1LL;
    uint64_t v10 = -1LL << *(_BYTE *)(v8 + 32);
    if (-v10 < 64) {
      uint64_t v9 = ~(-1LL << -(char)v10);
    }
    unint64_t v11 = v9 & *(void *)(v8 + 64);
    int64_t v12 = (unint64_t)(63 - v10) >> 6;
    swift_bridgeObjectRetain(v8);
    int64_t v13 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v15 = v14 | (v13 << 6);
      }

      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
          __break(1u);
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }

        if (v19 >= v12) {
          goto LABEL_35;
        }
        unint64_t v20 = *(void *)(v23 + 8 * v19);
        ++v13;
        if (!v20)
        {
          int64_t v13 = v19 + 1;
          if (v19 + 1 >= v12) {
            goto LABEL_35;
          }
          unint64_t v20 = *(void *)(v23 + 8 * v13);
          if (!v20)
          {
            int64_t v13 = v19 + 2;
            if (v19 + 2 >= v12) {
              goto LABEL_35;
            }
            unint64_t v20 = *(void *)(v23 + 8 * v13);
            if (!v20)
            {
              int64_t v13 = v19 + 3;
              if (v19 + 3 >= v12) {
                goto LABEL_35;
              }
              unint64_t v20 = *(void *)(v23 + 8 * v13);
              if (!v20)
              {
                int64_t v21 = v19 + 4;
                if (v21 >= v12)
                {
LABEL_35:
                  uint64_t v22 = *(void *)(v0 + 56);

                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_task_dealloc(v22);
                  (*(void (**)(void))(v0 + 8))();
                  return;
                }

                unint64_t v20 = *(void *)(v23 + 8 * v21);
                if (!v20)
                {
                  while (1)
                  {
                    int64_t v13 = v21 + 1;
                    if (__OFADD__(v21, 1LL)) {
                      goto LABEL_37;
                    }
                    if (v13 >= v12) {
                      goto LABEL_35;
                    }
                    unint64_t v20 = *(void *)(v23 + 8 * v13);
                    ++v21;
                    if (v20) {
                      goto LABEL_34;
                    }
                  }
                }

                int64_t v13 = v21;
              }
            }
          }
        }

uint64_t sub_100659714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_1009B992C);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_100015D58;
  return sub_100659768(a5);
}

uint64_t sub_100659768(uint64_t a1)
{
  void v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = sub_100004AEC(&qword_1009B9930);
  v2[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1006597CC, v1, 0LL);
}

uint64_t sub_1006597CC()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v1 + 112);
  *(void *)(v1 + 11_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = _swiftEmptyDictionarySingleton;
  if (qword_10099B7B8 != -1) {
LABEL_30:
  }
    swift_once(&qword_10099B7B8, sub_10065916C);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10000A720(v4, (uint64_t)qword_1009B97A0);
  swift_errorRetain(v3);
  uint64_t v5 = swift_errorRetain(v3);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter(v6);
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 32);
  if (v8)
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v30 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v10 = 138543362;
    swift_errorRetain(v9);
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(void *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v10 + 4, v10 + 12);
    *uint64_t v30 = v11;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "CLLocationManager error: %{public}@", v10, 0xCu);
    uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v30, 1LL, v12);
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 32));
    swift_errorRelease(v9);
  }

  uint64_t v13 = v2 + 64;
  uint64_t v14 = *(void *)(v0 + 56);
  uint64_t v15 = -1LL;
  uint64_t v16 = -1LL << *(_BYTE *)(v2 + 32);
  if (-v16 < 64) {
    uint64_t v15 = ~(-1LL << -(char)v16);
  }
  unint64_t v17 = v15 & *(void *)(v2 + 64);
  int64_t v18 = (unint64_t)(63 - v16) >> 6;
  swift_bridgeObjectRetain(v2);
  int64_t v19 = 0LL;
  while (1)
  {
    if (v17)
    {
      unint64_t v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v21 = v20 | (v19 << 6);
      goto LABEL_9;
    }

    int64_t v25 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }

    if (v25 >= v18) {
      goto LABEL_27;
    }
    unint64_t v26 = *(void *)(v13 + 8 * v25);
    ++v19;
    if (!v26)
    {
      int64_t v19 = v25 + 1;
      if (v25 + 1 >= v18) {
        goto LABEL_27;
      }
      unint64_t v26 = *(void *)(v13 + 8 * v19);
      if (!v26)
      {
        int64_t v19 = v25 + 2;
        if (v25 + 2 >= v18) {
          goto LABEL_27;
        }
        unint64_t v26 = *(void *)(v13 + 8 * v19);
        if (!v26)
        {
          int64_t v19 = v25 + 3;
          if (v25 + 3 >= v18) {
            goto LABEL_27;
          }
          unint64_t v26 = *(void *)(v13 + 8 * v19);
          if (!v26) {
            break;
          }
        }
      }
    }

uint64_t sub_100659C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a4;
  return swift_task_switch(sub_100659C54, a4, 0LL);
}

uint64_t sub_100659C54()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100659C84()
{
  uint64_t v1 = v0;
  *(_DWORD *)(v0 + 144) = [*(id *)(v0 + 120) authorizationStatus];
  if (qword_10099B7B8 != -1) {
    swift_once(&qword_10099B7B8, sub_10065916C);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_1009B97A0);
  uint64_t v3 = swift_retain();
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v6 = 67109120;
    int v7 = *(_DWORD *)(v1 + 144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v7, &v8, v6 + 4, v6 + 8);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Authorization status: %d", v6, 8u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {

    swift_release();
  }

id sub_100659F28()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for LocationManagerDelegateTrampoline()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartydP33_59DB3DB2CFFD0A5DD2F04F14E73C8D1533LocationManagerDelegateTrampoline);
}

uint64_t sub_100659F8C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100659FB8()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc(dword_1009B990C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100015D58;
  void v3[2] = v2;
  return swift_task_switch(sub_100659C54, v2, 0LL);
}

uint64_t sub_10065A018()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_1009B97B8);
  sub_10000A720(v0, (uint64_t)qword_1009B97B8);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x4C746F6853656E4FLL,  0xEF6E6F697461636FLL);
}

uint64_t sub_10065A098()
{
  return sub_10065A128((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10065A0A4()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = (void *)swift_task_alloc(dword_1009B991C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000159BC;
  uint64_t v4 = (void *)swift_task_alloc(dword_1009B992C);
  void v3[2] = v4;
  void *v4 = v3;
  v4[1] = sub_100015D58;
  return sub_100659768(v2);
}

uint64_t sub_10065A11C()
{
  return sub_10065A128((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10065A128(void (*a1)(void))
{
  return swift_deallocObject(v1, 48LL, 7LL);
}

uint64_t sub_10065A168()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = (void *)swift_task_alloc(dword_1009B993C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100015D58;
  uint64_t v4 = (void *)swift_task_alloc(dword_1009B994C);
  void v3[2] = v4;
  void *v4 = v3;
  v4[1] = sub_100015D58;
  return sub_1006592AC(v2);
}

uint64_t sub_10065A1E0(char a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a2 + 16))(a2, a1 & 1);
}

void sub_10065A1F4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 >> 60 == 15) {
    Class isa = 0LL;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  Class v5 = isa;
  (*(void (**)(uint64_t))(a3 + 16))(a3);
}

void sub_10065A248(uint64_t a1, uint64_t a2)
{
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);
}

uint64_t sub_10065A318(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = a1;
  uint64_t v4 = sub_100004AEC(&qword_1009A9BF0);
  uint64_t v5 = __chkstk_darwin(v4);
  int v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = static os_log_type_t.default.getter(v5);
  if (qword_10099B748 != -1) {
    swift_once(&qword_10099B748, sub_100651480);
  }
  uint64_t v9 = qword_100A2B058;
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v11 = swift_allocObject(v10, 112LL, 7LL);
  *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(v2);
  uint64_t v12 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v13 = String.init<A>(describing:)(&ObjectType, v12);
  uint64_t v15 = v14;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v16 = sub_1000226F4();
  *(void *)(v11 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v13;
  *(void *)(v11 + 40) = v15;
  *(void *)(v11 + 96) = &type metadata for String;
  *(void *)(v11 + 104) = v16;
  *(void *)(v11 + 64) = v16;
  *(void *)(v11 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD000000000000023LL;
  *(void *)(v11 + 80) = 0x800000010086C320LL;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "%{public}@: %{public}s", 22LL, 2LL, v11);
  swift_bridgeObjectRelease();
  unint64_t v17 = sub_100012ED8( (void *)(v2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  uint64_t v18 = *v17;
  uint64_t v19 = static os_log_type_t.default.getter(v17);
  os_log(_:dso:log:_:_:)( v19,  &_mh_execute_header,  qword_100A2B058,  "removeLocalAccountData",  22LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v20 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v7, 1LL, 1LL, v20);
  unint64_t v21 = (void *)swift_allocObject(&unk_10096F608, 56LL, 7LL);
  void v21[2] = 0LL;
  void v21[3] = 0LL;
  uint64_t v22 = v24;
  v21[4] = v18;
  v21[5] = v22;
  v21[6] = a2;
  swift_retain();
  swift_retain();
  sub_1003EDB00((uint64_t)v7, (uint64_t)&unk_1009B9A00, (uint64_t)v21);
  return swift_release();
}

uint64_t sub_10065A564(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = static os_log_type_t.default.getter(a1);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v7 = qword_100A2B008;
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v9 = swift_allocObject(v8, 112LL, 7LL);
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(v3);
  uint64_t v10 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v11 = String.init<A>(describing:)(&ObjectType, v10);
  uint64_t v13 = v12;
  *(void *)(v9 + 56) = &type metadata for String;
  unint64_t v14 = sub_1000226F4();
  *(void *)(v9 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v11;
  *(void *)(v9 + 40) = v13;
  *(void *)(v9 + 96) = &type metadata for String;
  *(void *)(v9 + 104) = v14;
  *(void *)(v9 + 64) = v14;
  *(void *)(v9 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD00000000000001BLL;
  *(void *)(v9 + 80) = 0x800000010086C300LL;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "%{public}@: %{public}s", 22LL, 2LL, v9);
  swift_bridgeObjectRelease();
  sub_100012ED8( (void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  uint64_t v15 = swift_allocObject(&unk_10096F5E0, 32LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v15 + 24) = a2;
  swift_retain();
  sub_100291634((uint64_t)sub_10066284C, v15);
  return swift_release();
}

uint64_t sub_10065A7CC( void *a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, void, uint64_t))
{
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v17 = _Block_copy(a4);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a3);
  _Block_copy(v17);
  id v18 = a1;
  sub_10065F828((uint64_t)v16, (uint64_t)v18, (uint64_t)v17, a5, a6, a7);
  _Block_release(v17);
  _Block_release(v17);

  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t sub_10065A8C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = static os_log_type_t.default.getter(a1);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v7 = qword_100A2B008;
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v9 = swift_allocObject(v8, 112LL, 7LL);
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(v2);
  uint64_t v10 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v11 = String.init<A>(describing:)(&ObjectType, v10);
  uint64_t v13 = v12;
  *(void *)(v9 + 56) = &type metadata for String;
  unint64_t v14 = sub_1000226F4();
  *(void *)(v9 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v11;
  *(void *)(v9 + 40) = v13;
  *(void *)(v9 + 96) = &type metadata for String;
  *(void *)(v9 + 104) = v14;
  *(void *)(v9 + 64) = v14;
  *(void *)(v9 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD000000000000017LL;
  *(void *)(v9 + 80) = 0x800000010086C2E0LL;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "%{public}@: %{public}s", 22LL, 2LL, v9);
  swift_bridgeObjectRelease();
  uint64_t v15 = sub_100004AEC(&qword_1009A7D78);
  uint64_t inited = swift_initStackObject(v15, v28);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E8290;
  unint64_t v17 = (void *)SPBeaconTypeSelfBeaconing;
  *(void *)(inited + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = SPBeaconTypeSelfBeaconing;
  id v18 = (void *)SPBeaconTypeDurian;
  uint64_t v19 = (void *)SPBeaconTypeAccessory;
  *(void *)(inited + 40) = SPBeaconTypeDurian;
  *(void *)(inited + 48) = v19;
  uint64_t v20 = (void *)SPBeaconTypeHele;
  *(void *)(inited + 56) = SPBeaconTypeHele;
  id v21 = v17;
  id v22 = v18;
  id v23 = v19;
  id v24 = v20;
  int64_t v25 = sub_1007686A4(inited);
  swift_setDeallocating(inited);
  type metadata accessor for SPBeaconType(0LL);
  swift_arrayDestroy(inited + 32, 4LL, v26);
  sub_100012ED8( (void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  sub_100299384((uint64_t)v25, 0, 0, a1, a2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10065AAF4(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = static os_log_type_t.default.getter(a1);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v10 = qword_100A2B008;
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v12 = swift_allocObject(v11, 112LL, 7LL);
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(v5);
  uint64_t v13 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v14 = String.init<A>(describing:)(&ObjectType, v13);
  uint64_t v16 = v15;
  *(void *)(v12 + 56) = &type metadata for String;
  unint64_t v17 = sub_1000226F4();
  *(void *)(v12 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v14;
  *(void *)(v12 + 40) = v16;
  *(void *)(v12 + 96) = &type metadata for String;
  *(void *)(v12 + 104) = v17;
  *(void *)(v12 + 64) = v17;
  *(void *)(v12 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD00000000000003ALL;
  *(void *)(v12 + 80) = 0x800000010086C2A0LL;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "%{public}@: %{public}s", 22LL, 2LL, v12);
  swift_bridgeObjectRelease();
  sub_100012ED8( (void *)(v5 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(v5 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return sub_100299384(a1, a2 & 1, a3 & 1, a4, a5);
}

uint64_t sub_10065ADB0(uint64_t a1, uint64_t a2)
{
  return sub_10065BCF0(a1, a2, 0xD00000000000001ELL, 0x800000010086C280LL, sub_100299EEC);
}

uint64_t sub_10065ADF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10065B648(a1, a2, a3, 0xD000000000000026LL, 0x800000010086C250LL, sub_10028E3A0);
}

void sub_10065B30C(char *a1, int a2, void *aBlock, void (*a4)(uint64_t, void *))
{
  uint64_t v6 = _Block_copy(aBlock);
  uint64_t v7 = *sub_100012ED8( &a1[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation],  *(void *)&a1[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
  _Block_copy(v6);
  uint64_t v8 = a1;
  a4(v7, v6);
  _Block_release(v6);
  _Block_release(v6);
}

uint64_t sub_10065B390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = a3;
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  uint64_t v30 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v30 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v30);
  uint64_t v6 = sub_100004AEC(&qword_1009A9BF0);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = &v26[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  unsigned int v27 = static os_log_type_t.default.getter(v7);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v10 = qword_100A2B008;
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v12 = swift_allocObject(v11, 112LL, 7LL);
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(v3);
  uint64_t v13 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v14 = String.init<A>(describing:)(&ObjectType, v13);
  uint64_t v16 = v15;
  *(void *)(v12 + 56) = &type metadata for String;
  unint64_t v17 = sub_1000226F4();
  *(void *)(v12 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v14;
  *(void *)(v12 + 40) = v16;
  *(void *)(v12 + 96) = &type metadata for String;
  *(void *)(v12 + 104) = v17;
  *(void *)(v12 + 64) = v17;
  *(void *)(v12 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD000000000000037LL;
  *(void *)(v12 + 80) = 0x800000010086C210LL;
  os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v10, "%{public}@: %{public}s", 22LL, 2LL, v12);
  swift_bridgeObjectRelease();
  uint64_t v18 = *sub_100012ED8( (void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  uint64_t v19 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v9, 1LL, 1LL, v19);
  uint64_t v20 = v30;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(&v26[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)], v28, v30);
  uint64_t v21 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v22 = (v21 + 56) & ~v21;
  id v23 = (char *)swift_allocObject(&unk_10096F5B8, v22 + v5, v21 | 7);
  *((void *)v23 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0LL;
  *((void *)v23 + 3) = 0LL;
  uint64_t v24 = v29;
  *((void *)v23 + 4) = v18;
  *((void *)v23 + 5) = v24;
  *((void *)v23 + 6) = v31;
  (*(void (**)(char *, _BYTE *, uint64_t))(v4 + 32))( &v23[v22],  &v26[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)],  v20);
  swift_retain();
  swift_retain();
  sub_1003EDB00((uint64_t)v9, (uint64_t)&unk_1009B99F0, (uint64_t)v23);
  return swift_release();
}

uint64_t sub_10065B624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10065B648(a1, a2, a3, 0xD00000000000001CLL, 0x800000010085BCC0LL, sub_10029D0E4);
}

uint64_t sub_10065B648( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = v6;
  uint64_t v11 = static os_log_type_t.default.getter(a1);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v12 = qword_100A2B008;
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v14 = swift_allocObject(v13, 112LL, 7LL);
  *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(v6);
  uint64_t v15 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v16 = String.init<A>(describing:)(&ObjectType, v15);
  uint64_t v18 = v17;
  *(void *)(v14 + 56) = &type metadata for String;
  unint64_t v19 = sub_1000226F4();
  *(void *)(v14 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v16;
  *(void *)(v14 + 40) = v18;
  *(void *)(v14 + 96) = &type metadata for String;
  *(void *)(v14 + 104) = v19;
  *(void *)(v14 + 64) = v19;
  *(void *)(v14 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = a4;
  *(void *)(v14 + 80) = a5;
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "%{public}@: %{public}s", 22LL, 2LL, v14);
  swift_bridgeObjectRelease();
  sub_100012ED8( (void *)(v9 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(v9 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return a6(a1, a2, a3);
}

void sub_10065B838(uint64_t a1, uint64_t a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);
}

uint64_t sub_10065B8D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = static os_log_type_t.default.getter(a1);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v9 = qword_100A2B008;
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v11 = swift_allocObject(v10, 112LL, 7LL);
  *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(v4);
  uint64_t v12 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v13 = String.init<A>(describing:)(&ObjectType, v12);
  uint64_t v15 = v14;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v16 = sub_1000226F4();
  *(void *)(v11 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v13;
  *(void *)(v11 + 40) = v15;
  *(void *)(v11 + 96) = &type metadata for String;
  *(void *)(v11 + 104) = v16;
  *(void *)(v11 + 64) = v16;
  *(void *)(v11 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD000000000000029LL;
  *(void *)(v11 + 80) = 0x800000010085BBB0LL;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "%{public}@: %{public}s", 22LL, 2LL, v11);
  swift_bridgeObjectRelease();
  sub_100012ED8( (void *)(v4 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(v4 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return sub_10029C684(a1, a2, a3, a4);
}

uint64_t sub_10065BCCC(uint64_t a1, uint64_t a2)
{
  return sub_10065BCF0(a1, a2, 0xD000000000000017LL, 0x800000010085BAD0LL, sub_1002A4818);
}

uint64_t sub_10065BCF0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v9 = static os_log_type_t.default.getter(a1);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v10 = qword_100A2B008;
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v12 = swift_allocObject(v11, 112LL, 7LL);
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(v5);
  uint64_t v13 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v14 = String.init<A>(describing:)(&ObjectType, v13);
  uint64_t v16 = v15;
  *(void *)(v12 + 56) = &type metadata for String;
  unint64_t v17 = sub_1000226F4();
  *(void *)(v12 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v14;
  *(void *)(v12 + 40) = v16;
  *(void *)(v12 + 96) = &type metadata for String;
  *(void *)(v12 + 104) = v17;
  *(void *)(v12 + 64) = v17;
  *(void *)(v12 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = a3;
  *(void *)(v12 + 80) = a4;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "%{public}@: %{public}s", 22LL, 2LL, v12);
  swift_bridgeObjectRelease();
  sub_100012ED8( (void *)(v5 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(v5 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return a5(a1, a2);
}

void sub_10065BE84( void *a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t))
{
  uint64_t v10 = _Block_copy(aBlock);
  _Block_copy(v10);
  id v11 = a1;
  sub_1006601E4((uint64_t)v11, (uint64_t)v10, a4, a5, a6);
  _Block_release(v10);
  _Block_release(v10);
}

uint64_t sub_10065BF34( void *a1, uint64_t a2, uint64_t a3, void *a4, const void *a5, void (*a6)(char *, id, id, void *))
{
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = _Block_copy(a5);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a3);
  _Block_copy(v15);
  id v16 = a4;
  id v17 = a1;
  a6(v14, v16, v17, v15);
  _Block_release(v15);
  _Block_release(v15);

  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_10065C114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v11 = static os_log_type_t.default.getter(a1);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v12 = qword_100A2B008;
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v14 = swift_allocObject(v13, 112LL, 7LL);
  *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(v6);
  uint64_t v15 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v16 = String.init<A>(describing:)(&ObjectType, v15);
  uint64_t v18 = v17;
  *(void *)(v14 + 56) = &type metadata for String;
  unint64_t v19 = sub_1000226F4();
  *(void *)(v14 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v16;
  *(void *)(v14 + 40) = v18;
  *(void *)(v14 + 96) = &type metadata for String;
  *(void *)(v14 + 104) = v19;
  *(void *)(v14 + 64) = v19;
  *(void *)(v14 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD000000000000038LL;
  *(void *)(v14 + 80) = 0x800000010085B9D0LL;
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "%{public}@: %{public}s", 22LL, 2LL, v14);
  swift_bridgeObjectRelease();
  sub_100012ED8( (void *)(v6 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(v6 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  if ((a1 & 0x8000000000000000LL) == 0) {
    return sub_1002A5B5C(a1, a2, a3, a4, a5, a6);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_10065C54C( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, void, uint64_t))
{
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v19 = _Block_copy(a5);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a4);
  _Block_copy(v19);
  id v20 = a1;
  sub_1006608B8(a3, (uint64_t)v18, (uint64_t)v20, (uint64_t)v19, a6, a7, a8);
  _Block_release(v19);
  _Block_release(v19);

  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t sub_10065C724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = static os_log_type_t.default.getter(a1);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v8 = qword_100A2B008;
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v10 = swift_allocObject(v9, 112LL, 7LL);
  *(_OWORD *)(v10 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(v4);
  uint64_t v11 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v12 = String.init<A>(describing:)(&ObjectType, v11);
  uint64_t v14 = v13;
  *(void *)(v10 + 56) = &type metadata for String;
  unint64_t v15 = sub_1000226F4();
  *(void *)(v10 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v12;
  *(void *)(v10 + 40) = v14;
  *(void *)(v10 + 96) = &type metadata for String;
  *(void *)(v10 + 104) = v15;
  *(void *)(v10 + 64) = v15;
  *(void *)(v10 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD000000000000025LL;
  *(void *)(v10 + 80) = 0x800000010086C1A0LL;
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "%{public}@: %{public}s", 22LL, 2LL, v10);
  swift_bridgeObjectRelease();
  uint64_t v16 = swift_allocObject(&unk_10096F540, 32LL, 7LL);
  *(void *)(v16 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  uint64_t v17 = swift_retain();
  uint64_t v18 = static os_log_type_t.default.getter(v17);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  os_log(_:dso:log:_:_:)( v18,  &_mh_execute_header,  qword_100A2B030,  "#Durian: Will call fetch user stats async on queue.",  51LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009B99D0);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  Future.init()(v20);
  type metadata accessor for CommandError(0LL);
  uint64_t v22 = v21;
  uint64_t v29 = 3LL;
  unint64_t v23 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v24 = sub_100007864( (unint64_t *)&qword_10099C2E0,  (uint64_t (*)(uint64_t))type metadata accessor for CommandError,  (uint64_t)&unk_1007E3980);
  _BridgedStoredNSError.init(_:userInfo:)(&ObjectType, &v29, v23, v22, v24);
  int64_t v25 = (void *)ObjectType;
  Future.finish(error:)(ObjectType);

  uint64_t v26 = swift_allocObject(&unk_10096F568, 32LL, 7LL);
  *(void *)(v26 + swift_weakDestroy(v0 + 16) = sub_1006626AC;
  *(void *)(v26 + 24) = v16;
  swift_retain();
  Future.addSuccess(block:)(sub_1006626B4, v26);
  swift_release();
  swift_release();
  uint64_t v27 = swift_allocObject(&unk_10096F590, 32LL, 7LL);
  *(void *)(v27 + swift_weakDestroy(v0 + 16) = sub_1006626AC;
  *(void *)(v27 + 24) = v16;
  swift_retain();
  Future.addFailure(block:)(sub_1006626BC, v27);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void sub_10065CA14(uint64_t a1, void (*a2)(void))
{
  uint64_t v4 = v20[0];
  unint64_t v5 = v20[1];
  sub_100015750(a1, (uint64_t)v21, (uint64_t *)&unk_1009B99E0);
  if (v22 >> 60 == 11)
  {
    id v6 = 0LL;
  }

  else
  {
    uint64_t v7 = v23;
    uint64_t v8 = v24;
    uint64_t v10 = v25;
    uint64_t v9 = v26;
    uint64_t v14 = v27;
    unsigned int v15 = v28;
    unsigned int v16 = v29;
    unsigned int v17 = v30;
    unsigned int v18 = v31;
    unsigned int v19 = v32;
    uint64_t v11 = a2;
    id v12 = objc_allocWithZone(&OBJC_CLASS___SPTagUserStats);
    sub_100018BE4(v4, v5);
    uint64_t v13 = v12;
    a2 = v11;
    id v6 = [v13 init];
    [v6 setOverflowFlag:v7];
    [v6 setCrashCount:v8];
    [v6 setMultiTime:v10];
    [v6 setNearOwnerTime:v9];
    [v6 setWildTime:v14];
    [v6 setOwnerPlaySoundCount:v15];
    [v6 setOwnerPlaySoundTime:v16];
    [v6 setRangingCount:v17];
    [v6 setRangingTime:v18];
    [v6 setVersion:v19];

    sub_1006626C4(a1);
  }

  a2(v6);
}

uint64_t sub_10065CCD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = static os_log_type_t.default.getter(a1);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v9 = qword_100A2B008;
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v11 = swift_allocObject(v10, 112LL, 7LL);
  *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(v4);
  uint64_t v12 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v13 = String.init<A>(describing:)(&ObjectType, v12);
  uint64_t v15 = v14;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v16 = sub_1000226F4();
  *(void *)(v11 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v13;
  *(void *)(v11 + 40) = v15;
  *(void *)(v11 + 96) = &type metadata for String;
  *(void *)(v11 + 104) = v16;
  *(void *)(v11 + 64) = v16;
  *(void *)(v11 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD00000000000002BLL;
  *(void *)(v11 + 80) = 0x800000010086C170LL;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "%{public}@: %{public}s", 22LL, 2LL, v11);
  swift_bridgeObjectRelease();
  return sub_1002CAAF4(a1, a2, a3);
}

uint64_t sub_10065CE40( void *a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, void (*a7)(char *, uint64_t, uint64_t))
{
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unsigned int v17 = _Block_copy(a4);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v18 = swift_allocObject(a5, 24LL, 7LL);
  *(void *)(v18 + swift_weakDestroy(v0 + 16) = v17;
  id v19 = a1;
  a7(v16, a6, v18);

  swift_release(v18);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t sub_10065CF34(uint64_t a1, uint64_t a2)
{
  return sub_10065BCF0(a1, a2, 0xD000000000000021LL, 0x800000010086C140LL, sub_1002A9630);
}

uint64_t sub_10065D1FC(uint64_t a1, char a2, void (*a3)(__n128))
{
  if ((a2 & 1) != 0)
  {
    uint64_t v8 = a1;
    swift_errorRetain(a1);
    uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    swift_willThrowTypedImpl(&v8, v7, &protocol self-conformance witness table for Error);
    swift_errorRetain(a1);
    ((void (*)(void, uint64_t))a3)(0LL, a1);
    sub_100044A2C(a1, 1);
    return sub_100044A2C(a1, 1);
  }

  else
  {
    __n128 v5 = swift_bridgeObjectRetain(a1);
    a3(v5);
    return sub_100044A2C(a1, 0);
  }

void sub_10065D3D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1)
  {
    v5.super.Class isa = 0LL;
    if (a2) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v6 = 0LL;
    goto LABEL_6;
  }

  v5.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  if (!a2) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v6 = _convertErrorToNSError(_:)(a2);
LABEL_6:
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);
}

uint64_t sub_10065D454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  void v6[3] = a4;
  return swift_task_switch(sub_10065D470, 0LL, 0LL);
}

uint64_t sub_10065D470()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1009A7DDC);
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10065D4D0;
  return sub_1002AEB14();
}

uint64_t sub_10065D4D0(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 48);
  *(void *)(v3 + 56) = a1;
  *(void *)(v3 + 64) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    NSArray v5 = sub_10065D668;
  }
  else {
    NSArray v5 = sub_10065D53C;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_10065D53C()
{
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v3 = type metadata accessor for PropertyListEncoder(0LL);
  uint64_t v4 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  PropertyListEncoder.init()(v4);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v2;
  uint64_t v5 = sub_100004AEC(&qword_1009B9A28);
  unint64_t v6 = sub_1006629D0();
  uint64_t v7 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 16, v5, v6);
  if (v1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v9 = *(void (**)(void, unint64_t, uint64_t))(v0 + 32);
    swift_errorRetain(v1);
    v9(0LL, 0xF000000000000000LL, v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  else
  {
    uint64_t v10 = v7;
    unint64_t v11 = v8;
    uint64_t v12 = *(void (**)(uint64_t, unint64_t, void))(v0 + 32);
    swift_release();
    swift_bridgeObjectRelease();
    sub_10001736C(v10, v11);
    v12(v10, v11, 0LL);
    sub_100016F9C(v10, v11);
    sub_100016F9C(v10, v11);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10065D668()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void (**)(void, unint64_t, uint64_t))(v0 + 32);
  swift_errorRetain(v1);
  v2(0LL, 0xF000000000000000LL, v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_10065DCE0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BeaconManagerTrampoline();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BeaconManagerTrampoline()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd23BeaconManagerTrampoline);
}

uint64_t sub_10065DD68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[6] = a3;
  v4[7] = a4;
  void v4[4] = a1;
  void v4[5] = a2;
  return swift_task_switch(sub_10065DD84, 0LL, 0LL);
}

uint64_t sub_10065DD84()
{
  uint64_t v1 = (void *)(v0[4] + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[6];
  sub_100012ED8(v1, v2);
  uint64_t v4 = *(int **)(v3 + 8);
  uint64_t v7 = (int *)((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  v0[8] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10065DE14;
  return ((uint64_t (*)(void, uint64_t, uint64_t))v7)(v0[5], v2, v3);
}

uint64_t sub_10065DE14(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 64);
  *(void *)(*v2 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    unint64_t v6 = sub_10065DEDC;
  }

  else
  {
    *(void *)(v4 + 80) = a1;
    unint64_t v6 = sub_10065DE88;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_10065DE88()
{
  uint64_t v1 = *(void **)(v0 + 80);
  uint64_t v2 = *(void (**)(void *, void))(v0 + 48);
  id v3 = v1;
  v2(v1, 0LL);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10065DEDC()
{
  if (qword_10099B4F0 != -1) {
    swift_once(&qword_10099B4F0, sub_1004B82C0);
  }
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2AB30);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 72);
  if (v6)
  {
    unint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v16 = v9;
    *(_DWORD *)unint64_t v8 = 136446210;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v7;
    swift_errorRetain(v7);
    uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v11 = String.init<A>(describing:)(v0 + 16, v10);
    *(void *)(v0 + 24) = sub_1003F11D4(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "bluetoothConnectionKeys error: %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 72));
    swift_errorRelease(v7);
  }

  uint64_t v13 = *(void *)(v0 + 72);
  uint64_t v14 = *(void (**)(void, uint64_t))(v0 + 48);
  swift_errorRetain(v13);
  v14(0LL, v13);
  swift_errorRelease(v13);
  swift_errorRelease(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10065E1CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[3] = v14;
  void v7[4] = v15;
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1009B04E8 + dword_1009B04E8);
  uint64_t v11 = (void *)swift_task_alloc(unk_1009B04EC);
  v7[5] = v11;
  void *v11 = v7;
  v11[1] = sub_10065E24C;
  return v13(a2, a3, a7);
}

uint64_t sub_10065E24C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 40LL);
  *(void *)(*(void *)v1 + 48LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_10065E2E4;
  }
  else {
    uint64_t v3 = sub_10065E2B0;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10065E2B0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10065E2E4()
{
  if (qword_10099B4F0 != -1) {
    swift_once(&qword_10099B4F0, sub_1004B82C0);
  }
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2AB30);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 48);
  if (v6)
  {
    unint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)unint64_t v8 = 138412290;
    uint64_t v10 = _convertErrorToNSError(_:)(v7);
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    uint64_t *v9 = v10;
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error from successfulConnection: %@", v8, 0xCu);
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);

    swift_errorRelease(v7);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 48));
    swift_errorRelease(v7);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10065E7B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = a4;
  *(void *)(v5 + 40) = a5;
  *(_DWORD *)(v5 + 64) = a3;
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  return swift_task_switch(sub_10065E7D0, 0LL, 0LL);
}

uint64_t sub_10065E7D0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = (void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation);
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[6];
  sub_100012ED8(v2, v3);
  uint64_t v5 = sub_100661F24(v1);
  *(void *)(v0 + 48) = v5;
  BOOL v6 = *(int **)(v4 + 16);
  uint64_t v9 = (int *)((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v0 + 56) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10065E878;
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v9)(v5, *(unsigned int *)(v0 + 64), v3, v4);
}

uint64_t sub_10065E878()
{
  return swift_task_switch(sub_10065E8D4, 0LL, 0LL);
}

uint64_t sub_10065E8D4()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10065EA1C(char a1, uint64_t a2, uint64_t a3)
{
  if (qword_10099B4D0 != -1) {
    swift_once(&qword_10099B4D0, sub_1004AB644);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_10000A720(v7, (uint64_t)qword_100A2AB00);
  unint64_t v8 = v3;
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.info.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc(22LL, -1LL);
    uint64_t v12 = swift_slowAlloc(64LL, -1LL);
    uint64_t v17 = v12;
    *(_DWORD *)uint64_t v11 = 136446466;
    uint64_t ObjectType = swift_getObjectType(v8);
    uint64_t v14 = _typeName(_:qualified:)(ObjectType, 0LL);
    uint64_t v16 = sub_1003F11D4(v14, v15, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v11 + 4, v11 + 12);

    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2082;
    uint64_t v16 = sub_1003F11D4(0xD000000000000038LL, 0x800000010086C050LL, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v11 + 14, v11 + 22);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s: %{public}s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v12, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
  }

  sub_100012ED8( &v8[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation],  *(void *)&v8[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
  sub_1004B63A0(a1 & 1, a2, a3);
}

uint64_t sub_10065ECC0(uint64_t (*a1)(void))
{
  if (qword_10099B4D0 != -1) {
    swift_once(&qword_10099B4D0, sub_1004AB644);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_10000A720(v3, (uint64_t)qword_100A2AB00);
  id v4 = v1;
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.info.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc(22LL, -1LL);
    uint64_t v8 = swift_slowAlloc(64LL, -1LL);
    uint64_t v14 = v8;
    *(_DWORD *)uint64_t v7 = 136446466;
    uint64_t ObjectType = swift_getObjectType(v4);
    uint64_t v10 = _typeName(_:qualified:)(ObjectType, 0LL);
    uint64_t v13 = sub_1003F11D4(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v7 + 4, v7 + 12);

    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2082;
    uint64_t v13 = sub_1003F11D4(0xD000000000000019LL, 0x800000010086C030LL, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v7 + 14, v7 + 22);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s: %{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
  }

  return a1(0LL);
}

uint64_t sub_10065EED4( void *a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = swift_allocObject(a4, 24LL, 7LL);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v10;
  id v12 = a1;
  a6(a5, v11);

  return swift_release(v11);
}

uint64_t sub_10065EF50()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10065EF74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for DefaultConfigurationLayer(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009B9A70);
  __chkstk_darwin(v10);
  id v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *(void *)(a2 + 16);
  if (v13)
  {
    uint64_t v26 = a2;
    uint64_t v27 = a3;
    uint64_t v14 = a2 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v25 = v7;
    uint64_t v15 = *(void *)(v7 + 72);
    swift_bridgeObjectRetain(a2);
    while (1)
    {
      sub_10042811C(v14, (uint64_t)v9);
      void v30[3] = v6;
      v30[4] = &off_1009585B8;
      uint64_t v16 = sub_10000A7C8(v30);
      sub_10042811C((uint64_t)v9, (uint64_t)v16);
      swift_getAtKeyPath(&v28, v30, a1);
      unint64_t v17 = v29;
      sub_1000182F0(v28, v29);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v30);
      if (v17 >> 60 != 15) {
        break;
      }
      sub_100018C68((uint64_t)v9, type metadata accessor for DefaultConfigurationLayer);
      v14 += v15;
      if (!--v13)
      {
        uint64_t v18 = 1LL;
        goto LABEL_8;
      }
    }

    sub_10002218C((uint64_t)v9, (uint64_t)v12, type metadata accessor for DefaultConfigurationLayer);
    uint64_t v18 = 0LL;
LABEL_8:
    a3 = v27;
    uint64_t v7 = v25;
  }

  else
  {
    swift_bridgeObjectRetain(a2);
    uint64_t v18 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, v18, 1LL, v6);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1LL, v6) == 1)
  {
    sub_100015794((uint64_t)v12, &qword_1009B9A70);
  }

  else
  {
    uint64_t v33 = v6;
    int64_t v34 = &off_1009585B8;
    id v19 = sub_10000A7C8(&v31);
    sub_10002218C((uint64_t)v12, (uint64_t)v19, type metadata accessor for DefaultConfigurationLayer);
    swift_getAtKeyPath(&v35, &v31, a1);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v31);
    unint64_t v21 = v36;
    if (v36 >> 60 != 15)
    {
      *a3 = v35;
      a3[1] = v21;
      return result;
    }
  }

  uint64_t v31 = 0LL;
  unint64_t v32 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(40LL);
  v22._object = (void *)0x800000010085A890LL;
  v22._countAndFlagsBits = 0xD000000000000026LL;
  String.append(_:)(v22);
  v30[0] = a1;
  uint64_t v23 = sub_100004AEC(&qword_1009B9A90);
  _print_unlocked<A, B>(_:_:)( v30,  &v31,  v23,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v31,  v32,  "searchpartyd/Configuration.swift",  32LL,  2LL,  24LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_10065F250@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for DefaultConfigurationLayer(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009B9A70);
  __chkstk_darwin(v10);
  unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v13 = (char *)&v27 - v12;
  uint64_t v14 = *(void *)(a2 + 16);
  if (v14)
  {
    uint64_t v28 = (char *)&v27 - v12;
    uint64_t v29 = v7;
    uint64_t v15 = a2 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v16 = *(void *)(v7 + 72);
    uint64_t v30 = a2;
    swift_bridgeObjectRetain(a2);
    while (1)
    {
      sub_10042811C(v15, (uint64_t)v9);
      v40[3] = v6;
      v40[4] = &off_1009585B8;
      unint64_t v17 = sub_10000A7C8(v40);
      sub_10042811C((uint64_t)v9, (uint64_t)v17);
      swift_getAtKeyPath(v31, v40, a1);
      uint64_t v18 = v32;
      sub_1004221C0(v31[0], v31[1], v31[2], v31[3], v31[4], v31[5], v32, v33, v34, v35, v36, v37, v38, v39);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v40);
      if (v18) {
        break;
      }
      sub_100018C68((uint64_t)v9, type metadata accessor for DefaultConfigurationLayer);
      v15 += v16;
      if (!--v14)
      {
        uint64_t v19 = 1LL;
        uint64_t v7 = v29;
        uint64_t v13 = v28;
        goto LABEL_8;
      }
    }

    uint64_t v13 = v28;
    sub_10002218C((uint64_t)v9, (uint64_t)v28, type metadata accessor for DefaultConfigurationLayer);
    uint64_t v19 = 0LL;
    uint64_t v7 = v29;
  }

  else
  {
    swift_bridgeObjectRetain(a2);
    uint64_t v19 = 1LL;
  }

uint64_t sub_10065F58C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100012ED8(a1, v3);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 504))(v6, v3, v4);
  return sub_100015750((uint64_t)v6, a2, (uint64_t *)&unk_1009B9A80);
}

uint64_t sub_10065F5F0()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10065F624()
{
  int v2 = *(_DWORD *)(v0 + 32);
  uint64_t v3 = swift_task_alloc(dword_1009B998C);
  __int128 v4 = *(_OWORD *)(v0 + 16);
  __int128 v5 = *(_OWORD *)(v0 + 40);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_100015D58;
  *(_DWORD *)(v3 + 64) = v2;
  *(_OWORD *)(v3 + swift_weakDestroy(v0 + 16) = v4;
  *(_OWORD *)(v3 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v5;
  return swift_task_switch(sub_10065E7D0, 0LL, 0LL);
}

id sub_10065F690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *(void *)(a3 - 8);
  __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v15, a1, a3);
  double v16 = (*(double (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  double v17 = (*(double (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  id v18 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(a2));
  double v19 = (*(double (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  (*(void (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  id v21 = objc_msgSend( v18,  "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:",  isa,  v16,  v17,  -1.0,  v19,  -1.0);

  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, a3);
  return v21;
}

uint64_t sub_10065F828( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, void, uint64_t))
{
  uint64_t v10 = static os_log_type_t.default.getter(a1);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v11 = qword_100A2B008;
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v13 = swift_allocObject(v12, 112LL, 7LL);
  *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(a2);
  uint64_t v14 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v15 = String.init<A>(describing:)(&ObjectType, v14);
  uint64_t v17 = v16;
  *(void *)(v13 + 56) = &type metadata for String;
  unint64_t v18 = sub_1000226F4();
  *(void *)(v13 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v15;
  *(void *)(v13 + 40) = v17;
  *(void *)(v13 + 96) = &type metadata for String;
  *(void *)(v13 + 104) = v18;
  *(void *)(v13 + 64) = v18;
  *(void *)(v13 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = a4;
  *(void *)(v13 + 80) = a5;
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "%{public}@: %{public}s", 22LL, 2LL, v13);
  swift_bridgeObjectRelease();
  double v19 = sub_100012ED8( (void *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return a6(a1, *v19, a3);
}

void sub_10065F97C(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void, void))
{
  uint64_t v8 = static os_log_type_t.default.getter(a1);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v9 = qword_100A2B008;
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v11 = swift_allocObject(v10, 112LL, 7LL);
  *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(a3);
  uint64_t v12 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v13 = String.init<A>(describing:)(&ObjectType, v12);
  uint64_t v15 = v14;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v16 = sub_1000226F4();
  *(void *)(v11 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v13;
  *(void *)(v11 + 40) = v15;
  *(void *)(v11 + 96) = &type metadata for String;
  *(void *)(v11 + 104) = v16;
  *(void *)(v11 + 64) = v16;
  *(void *)(v11 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD00000000000002BLL;
  *(void *)(v11 + 80) = 0x800000010086C6C0LL;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "%{public}@: %{public}s", 22LL, 2LL, v11);
  swift_bridgeObjectRelease();
  uint64_t v17 = sub_100012ED8( (void *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  sub_1002CF0AC(a1, a2, 0, (void *)*v17, a4);
}

void sub_10065FAEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = static os_log_type_t.default.getter(a1);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v5 = qword_100A2B008;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  *(void *)&__int128 v16 = swift_getObjectType(a1);
  uint64_t v8 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v9 = String.init<A>(describing:)(&v16, v8);
  uint64_t v11 = v10;
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v12 = sub_1000226F4();
  *(void *)(v7 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v9;
  *(void *)(v7 + 40) = v11;
  *(void *)(v7 + 96) = &type metadata for String;
  *(void *)(v7 + 104) = v12;
  *(void *)(v7 + 64) = v12;
  *(void *)(v7 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD00000000000001FLL;
  *(void *)(v7 + 80) = 0x800000010086C6A0LL;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "%{public}@: %{public}s", 22LL, 2LL, v7);
  swift_bridgeObjectRelease();
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v13 = v16;
  uint64_t KeyPath = swift_getKeyPath(&unk_100812328);
  sub_10065F250(KeyPath, v13, (uint64_t)&v16);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  id v15 = MacBeaconConfig.xpcObject()();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, id, void))(a2 + 16))(a2, v15, 0LL);
}

void sub_10065FCEC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void (**a5)(void, void))
{
  uint64_t v9 = static os_log_type_t.default.getter(a1);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v10 = qword_100A2B008;
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v12 = swift_allocObject(v11, 112LL, 7LL);
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(a4);
  uint64_t v13 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v14 = String.init<A>(describing:)(&ObjectType, v13);
  uint64_t v16 = v15;
  *(void *)(v12 + 56) = &type metadata for String;
  unint64_t v17 = sub_1000226F4();
  *(void *)(v12 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v14;
  *(void *)(v12 + 40) = v16;
  *(void *)(v12 + 96) = &type metadata for String;
  *(void *)(v12 + 104) = v17;
  *(void *)(v12 + 64) = v17;
  *(void *)(v12 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD00000000000003CLL;
  *(void *)(v12 + 80) = 0x800000010085C690LL;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "%{public}@: %{public}s", 22LL, 2LL, v12);
  swift_bridgeObjectRelease();
  unint64_t v18 = sub_100012ED8( (void *)(a4 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a4 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  sub_1002CF0AC(a1, a2, a3 & 1, (void *)*v18, a5);
}

void sub_10065FE60(uint64_t a1, void *a2, uint64_t a3, void (**a4)(const void *, Class))
{
  id v39 = a2;
  uint64_t v36 = a1;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009B9A50);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = type metadata accessor for TimeBasedKeysCriteria(0LL);
  uint64_t v9 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v35 = (uint64_t)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = swift_allocObject(&unk_10096F860, 24LL, 7LL);
  *(void *)(v40 + swift_weakDestroy(v0 + 16) = a4;
  uint64_t v37 = a4;
  uint64_t v11 = _Block_copy(a4);
  uint64_t v12 = static os_log_type_t.default.getter(v11);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v13 = qword_100A2B008;
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v15 = swift_allocObject(v14, 112LL, 7LL);
  *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(a3);
  uint64_t v16 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v17 = String.init<A>(describing:)(&ObjectType, v16);
  uint64_t v34 = a3;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  *(void *)(v15 + 56) = &type metadata for String;
  unint64_t v21 = sub_1000226F4();
  *(void *)(v15 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v18;
  *(void *)(v15 + 40) = v20;
  *(void *)(v15 + 96) = &type metadata for String;
  *(void *)(v15 + 104) = v21;
  *(void *)(v15 + 64) = v21;
  *(void *)(v15 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD000000000000021LL;
  *(void *)(v15 + 80) = 0x800000010086C650LL;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "%{public}@: %{public}s", 22LL, 2LL, v15);
  swift_bridgeObjectRelease();
  id v22 = v39;
  sub_1003DCEA4(v22, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1LL, v38) == 1)
  {
    uint64_t v23 = sub_100015794((uint64_t)v8, (uint64_t *)&unk_1009B9A50);
    uint64_t v24 = static os_log_type_t.error.getter(v23);
    uint64_t v25 = qword_100A2B008;
    uint64_t v26 = swift_allocObject(v14, 72LL, 7LL);
    *(_OWORD *)(v26 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    id v27 = v22;
    id v28 = [v27 description];
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    uint64_t v31 = v30;

    *(void *)(v26 + 56) = &type metadata for String;
    *(void *)(v26 + 64) = v21;
    *(void *)(v26 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v29;
    *(void *)(v26 + 40) = v31;
    os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "Failed to init criteria %@", 26LL, 2LL, v26);
    swift_bridgeObjectRelease();
    sub_100022898(0LL, &qword_1009A47B8, &OBJC_CLASS___SPCommandKey_ptr);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    v37[2](v37, isa);
    swift_release();
  }

  else
  {
    uint64_t v33 = v35;
    sub_10002218C((uint64_t)v8, v35, type metadata accessor for TimeBasedKeysCriteria);
    sub_100012ED8( (void *)(v34 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(v34 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
    sub_1002A2870(v36, v33, (uint64_t)sub_100662AD0, v40);
    sub_100018C68(v33, type metadata accessor for TimeBasedKeysCriteria);
    swift_release();
  }

uint64_t sub_1006601E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t))
{
  uint64_t v9 = static os_log_type_t.default.getter(a1);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v10 = qword_100A2B008;
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v12 = swift_allocObject(v11, 112LL, 7LL);
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(a1);
  uint64_t v13 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v14 = String.init<A>(describing:)(&ObjectType, v13);
  uint64_t v16 = v15;
  *(void *)(v12 + 56) = &type metadata for String;
  unint64_t v17 = sub_1000226F4();
  *(void *)(v12 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v14;
  *(void *)(v12 + 40) = v16;
  *(void *)(v12 + 96) = &type metadata for String;
  *(void *)(v12 + 104) = v17;
  *(void *)(v12 + 64) = v17;
  *(void *)(v12 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = a3;
  *(void *)(v12 + 80) = a4;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "%{public}@: %{public}s", 22LL, 2LL, v12);
  swift_bridgeObjectRelease();
  uint64_t v18 = sub_100012ED8( (void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return a5(*v18, a2);
}

void sub_100660338(void (*a1)(void, void, void), os_log_s *a2, uint64_t a3, const void *a4)
{
  uint64_t v8 = static os_log_type_t.default.getter(a1);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v9 = qword_100A2B008;
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v11 = swift_allocObject(v10, 112LL, 7LL);
  *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(a3);
  uint64_t v12 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v13 = String.init<A>(describing:)(&ObjectType, v12);
  uint64_t v15 = v14;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v16 = sub_1000226F4();
  *(void *)(v11 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v13;
  *(void *)(v11 + 40) = v15;
  *(void *)(v11 + 96) = &type metadata for String;
  *(void *)(v11 + 104) = v16;
  *(void *)(v11 + 64) = v16;
  *(void *)(v11 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD000000000000023LL;
  *(void *)(v11 + 80) = 0x800000010085C220LL;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "%{public}@: %{public}s", 22LL, 2LL, v11);
  swift_bridgeObjectRelease();
  unint64_t v17 = sub_100012ED8( (void *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  sub_1002D0F24(a1, a2, (void *)*v17, a4);
}

void sub_1006604A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *aBlock)
{
  uint64_t v11 = _Block_copy(aBlock);
  unsigned int v22 = static os_log_type_t.default.getter(v11);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v12 = qword_100A2B008;
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v14 = swift_allocObject(v13, 112LL, 7LL);
  *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(a5);
  uint64_t v15 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v16 = String.init<A>(describing:)(&ObjectType, v15);
  uint64_t v18 = v17;
  *(void *)(v14 + 56) = &type metadata for String;
  unint64_t v19 = sub_1000226F4();
  *(void *)(v14 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v16;
  *(void *)(v14 + 40) = v18;
  *(void *)(v14 + 96) = &type metadata for String;
  *(void *)(v14 + 104) = v19;
  *(void *)(v14 + 64) = v19;
  *(void *)(v14 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD000000000000039LL;
  *(void *)(v14 + 80) = 0x800000010086C610LL;
  os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v12, "%{public}@: %{public}s", 22LL, 2LL, v14);
  swift_bridgeObjectRelease();
  uint64_t v20 = (uint64_t **)sub_100012ED8( (void *)(a5 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a5 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  if (a1 < 0 || a2 < 0 || a3 < 0)
  {
    _Block_release(aBlock);
    _Block_release(aBlock);
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    __break(1u);
  }

  else
  {
    unint64_t v21 = *v20;
    _Block_copy(aBlock);
    sub_1002D2484(a1, a2, a3, a4, v21, (uint64_t)aBlock);
    _Block_release(aBlock);
    _Block_release(aBlock);
  }

void sub_1006606D0(uint64_t a1, uint64_t a2, uint64_t a3, void *aBlock)
{
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = static os_log_type_t.default.getter(v8);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v10 = qword_100A2B008;
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v12 = swift_allocObject(v11, 112LL, 7LL);
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(a3);
  uint64_t v13 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v14 = String.init<A>(describing:)(&ObjectType, v13);
  uint64_t v16 = v15;
  *(void *)(v12 + 56) = &type metadata for String;
  unint64_t v17 = sub_1000226F4();
  *(void *)(v12 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v14;
  *(void *)(v12 + 40) = v16;
  *(void *)(v12 + 96) = &type metadata for String;
  *(void *)(v12 + 104) = v17;
  *(void *)(v12 + 64) = v17;
  *(void *)(v12 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD00000000000002BLL;
  *(void *)(v12 + 80) = 0x800000010085C150LL;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "%{public}@: %{public}s", 22LL, 2LL, v12);
  swift_bridgeObjectRelease();
  uint64_t v18 = (uint64_t **)sub_100012ED8( (void *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  if (a1 < 0)
  {
    _Block_release(aBlock);
    _Block_release(aBlock);
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    __break(1u);
  }

  else
  {
    unint64_t v19 = *v18;
    _Block_copy(aBlock);
    sub_1002D22E8(a2, v19, (uint64_t)aBlock);
    _Block_release(aBlock);
    _Block_release(aBlock);
  }

uint64_t sub_1006608B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, void, uint64_t))
{
  uint64_t v11 = static os_log_type_t.default.getter(a1);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v12 = qword_100A2B008;
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v14 = swift_allocObject(v13, 112LL, 7LL);
  *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(a3);
  uint64_t v15 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v16 = String.init<A>(describing:)(&ObjectType, v15);
  uint64_t v18 = v17;
  *(void *)(v14 + 56) = &type metadata for String;
  unint64_t v19 = sub_1000226F4();
  *(void *)(v14 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v16;
  *(void *)(v14 + 40) = v18;
  *(void *)(v14 + 96) = &type metadata for String;
  *(void *)(v14 + 104) = v19;
  *(void *)(v14 + 64) = v19;
  *(void *)(v14 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = a5;
  *(void *)(v14 + 80) = a6;
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "%{public}@: %{public}s", 22LL, 2LL, v14);
  swift_bridgeObjectRelease();
  uint64_t v20 = sub_100012ED8( (void *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return a7(a1, a2, *v20, a4);
}

void sub_100660A14(uint64_t a1, uint64_t a2, uint64_t a3, void *aBlock)
{
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = static os_log_type_t.default.getter(v8);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v10 = qword_100A2B008;
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v12 = swift_allocObject(v11, 112LL, 7LL);
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(a3);
  uint64_t v13 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v14 = String.init<A>(describing:)(&ObjectType, v13);
  uint64_t v16 = v15;
  *(void *)(v12 + 56) = &type metadata for String;
  unint64_t v17 = sub_1000226F4();
  *(void *)(v12 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v14;
  *(void *)(v12 + 40) = v16;
  *(void *)(v12 + 96) = &type metadata for String;
  *(void *)(v12 + 104) = v17;
  *(void *)(v12 + 64) = v17;
  *(void *)(v12 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD000000000000024LL;
  *(void *)(v12 + 80) = 0x800000010086C5E0LL;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "%{public}@: %{public}s", 22LL, 2LL, v12);
  swift_bridgeObjectRelease();
  uint64_t v18 = sub_100012ED8( (void *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  if (a2 < 0)
  {
    _Block_release(aBlock);
    _Block_release(aBlock);
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    __break(1u);
  }

  else
  {
    unint64_t v19 = (void *)*v18;
    _Block_copy(aBlock);
    sub_1002D3580(a1, a2, v19, (char *)aBlock);
    _Block_release(aBlock);
    _Block_release(aBlock);
  }

uint64_t sub_100660C00(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, void))
{
  uint64_t v6 = static os_log_type_t.default.getter(a1);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v7 = qword_100A2B008;
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v9 = swift_allocObject(v8, 112LL, 7LL);
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(a2);
  uint64_t v10 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v11 = String.init<A>(describing:)(&ObjectType, v10);
  uint64_t v13 = v12;
  *(void *)(v9 + 56) = &type metadata for String;
  unint64_t v14 = sub_1000226F4();
  *(void *)(v9 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v11;
  *(void *)(v9 + 40) = v13;
  *(void *)(v9 + 96) = &type metadata for String;
  *(void *)(v9 + 104) = v14;
  *(void *)(v9 + 64) = v14;
  *(void *)(v9 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD000000000000038LL;
  *(void *)(v9 + 80) = 0x800000010086C5A0LL;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "%{public}@: %{public}s", 22LL, 2LL, v9);
  swift_bridgeObjectRelease();
  uint64_t v15 = sub_100012ED8( (void *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return sub_1002D7F04(a1, *v15, a3);
}

void sub_100660D64(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static os_log_type_t.default.getter(a1);
  if (qword_10099B748 != -1) {
    swift_once(&qword_10099B748, sub_100651480);
  }
  uint64_t v4 = qword_100A2B058;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v6 = swift_allocObject(v5, 112LL, 7LL);
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  id ObjectType = (id)swift_getObjectType(a1);
  uint64_t v7 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v8 = String.init<A>(describing:)(&ObjectType, v7);
  uint64_t v10 = v9;
  *(void *)(v6 + 56) = &type metadata for String;
  unint64_t v11 = sub_1000226F4();
  *(void *)(v6 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v8;
  *(void *)(v6 + 40) = v10;
  *(void *)(v6 + 96) = &type metadata for String;
  *(void *)(v6 + 104) = v11;
  *(void *)(v6 + 64) = v11;
  *(void *)(v6 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD000000000000023LL;
  *(void *)(v6 + 80) = 0x800000010086C510LL;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "%{public}@: %{public}s", 22LL, 2LL, v6);
  swift_bridgeObjectRelease();
  uint64_t v12 = (id **)sub_100012ED8( (void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  uint64_t v13 = *v12;
  uint64_t v14 = static os_log_type_t.default.getter(v12);
  uint64_t v15 = qword_100A2B058;
  uint64_t v16 = swift_allocObject(v5, 112LL, 7LL);
  *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  id ObjectType = *v13;
  uint64_t v17 = sub_100004AEC(&qword_1009A7D50);
  uint64_t v18 = String.init<A>(describing:)(&ObjectType, v17);
  *(void *)(v16 + 56) = &type metadata for String;
  *(void *)(v16 + 64) = v11;
  *(void *)(v16 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v18;
  *(void *)(v16 + 40) = v19;
  *(void *)(v16 + 96) = &type metadata for String;
  *(void *)(v16 + 104) = v11;
  *(void *)(v16 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD000000000000023LL;
  *(void *)(v16 + 80) = 0x800000010086C510LL;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "%{public}@: %{public}@", 22LL, 2LL, v16);
  swift_bridgeObjectRelease();
  uint64_t v20 = sub_100004AEC(&qword_1009B9A10);
  uint64_t inited = swift_initStackObject(v20, v33);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(inited + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(void *)(inited + 40) = v22;
  *(void *)(inited + 48) = 0xD00000000000003ELL;
  *(void *)(inited + 56) = 0x800000010086C540LL;
  unint64_t v23 = sub_100412D14(inited);
  type metadata accessor for SPPairingSessionError(0LL);
  uint64_t v25 = v24;
  uint64_t v32 = 14LL;
  sub_10028BD3C(v23);
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  uint64_t v28 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
  _BridgedStoredNSError.init(_:userInfo:)(&ObjectType, &v32, v27, v25, v28);
  id v29 = ObjectType;
  uint64_t v30 = (void *)_convertErrorToNSError(_:)(v29);
  (*(void (**)(uint64_t, void, void *))(a2 + 16))(a2, 0LL, v30);
}

void sub_100661044(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v40 = a3;
  id v37 = a1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v38 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = static os_log_type_t.default.getter(v5);
  if (qword_10099B748 != -1) {
    swift_once(&qword_10099B748, sub_100651480);
  }
  uint64_t v9 = qword_100A2B058;
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v11 = swift_allocObject(v10, 112LL, 7LL);
  *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  id ObjectType = (id)swift_getObjectType(a2);
  uint64_t v12 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v13 = String.init<A>(describing:)(&ObjectType, v12);
  uint64_t v15 = v14;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v16 = sub_1000226F4();
  *(void *)(v11 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v13;
  *(void *)(v11 + 40) = v15;
  *(void *)(v11 + 96) = &type metadata for String;
  *(void *)(v11 + 104) = v16;
  *(void *)(v11 + 64) = v16;
  *(void *)(v11 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD000000000000026LL;
  *(void *)(v11 + 80) = 0x800000010086C4E0LL;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "%{public}@: %{public}s", 22LL, 2LL, v11);
  swift_bridgeObjectRelease();
  uint64_t v17 = (id **)sub_100012ED8( (void *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  uint64_t v18 = *v17;
  uint64_t v19 = static os_log_type_t.default.getter(v17);
  uint64_t v20 = qword_100A2B058;
  uint64_t v21 = swift_allocObject(v10, 152LL, 7LL);
  *(_OWORD *)(v21 + swift_weakDestroy(v0 + 16) = xmmword_1007E4050;
  id ObjectType = *v18;
  uint64_t v22 = sub_100004AEC(&qword_1009A7D50);
  uint64_t v23 = String.init<A>(describing:)(&ObjectType, v22);
  *(void *)(v21 + 56) = &type metadata for String;
  *(void *)(v21 + 64) = v16;
  *(void *)(v21 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v23;
  *(void *)(v21 + 40) = v24;
  *(void *)(v21 + 96) = &type metadata for String;
  *(void *)(v21 + 104) = v16;
  *(void *)(v21 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD000000000000026LL;
  *(void *)(v21 + 80) = 0x800000010086C4E0LL;
  id v25 = [v37 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v25);

  uint64_t v26 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v27 = v39;
  uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter(v39, v26);
  uint64_t v30 = v29;
  (*(void (**)(char *, uint64_t))(v38 + 8))(v7, v27);
  *(void *)(v21 + 136) = &type metadata for String;
  *(void *)(v21 + 144) = v16;
  *(void *)(v21 + 11_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v28;
  *(void *)(v21 + 120) = v30;
  os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "%{public}@: %{public}@ for session - %@", 39LL, 2LL, v21);
  swift_bridgeObjectRelease();
  type metadata accessor for SPPairingSessionError(0LL);
  uint64_t v32 = v31;
  uint64_t v41 = 14LL;
  unint64_t v33 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v34 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
  _BridgedStoredNSError.init(_:userInfo:)(&ObjectType, &v41, v33, v32, v34);
  id v35 = ObjectType;
  uint64_t v36 = (void *)_convertErrorToNSError(_:)(v35);
  (*(void (**)(uint64_t, void *))(v40 + 16))(v40, v36);
}

void sub_100661370(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v40 = a3;
  id v37 = a1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v38 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = static os_log_type_t.default.getter(v5);
  if (qword_10099B748 != -1) {
    swift_once(&qword_10099B748, sub_100651480);
  }
  uint64_t v9 = qword_100A2B058;
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v11 = swift_allocObject(v10, 112LL, 7LL);
  *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  id ObjectType = (id)swift_getObjectType(a2);
  uint64_t v12 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v13 = String.init<A>(describing:)(&ObjectType, v12);
  uint64_t v15 = v14;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v16 = sub_1000226F4();
  *(void *)(v11 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v13;
  *(void *)(v11 + 40) = v15;
  *(void *)(v11 + 96) = &type metadata for String;
  *(void *)(v11 + 104) = v16;
  *(void *)(v11 + 64) = v16;
  *(void *)(v11 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD000000000000022LL;
  *(void *)(v11 + 80) = 0x800000010086C480LL;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "%{public}@: %{public}s", 22LL, 2LL, v11);
  swift_bridgeObjectRelease();
  uint64_t v17 = (id **)sub_100012ED8( (void *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  uint64_t v18 = *v17;
  uint64_t v19 = static os_log_type_t.default.getter(v17);
  uint64_t v20 = qword_100A2B058;
  uint64_t v21 = swift_allocObject(v10, 152LL, 7LL);
  *(_OWORD *)(v21 + swift_weakDestroy(v0 + 16) = xmmword_1007E4050;
  id ObjectType = *v18;
  uint64_t v22 = sub_100004AEC(&qword_1009A7D50);
  uint64_t v23 = String.init<A>(describing:)(&ObjectType, v22);
  *(void *)(v21 + 56) = &type metadata for String;
  *(void *)(v21 + 64) = v16;
  *(void *)(v21 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v23;
  *(void *)(v21 + 40) = v24;
  *(void *)(v21 + 96) = &type metadata for String;
  *(void *)(v21 + 104) = v16;
  *(void *)(v21 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD000000000000022LL;
  *(void *)(v21 + 80) = 0x800000010086C480LL;
  id v25 = [v37 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v25);

  uint64_t v26 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v27 = v39;
  uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter(v39, v26);
  uint64_t v30 = v29;
  (*(void (**)(char *, uint64_t))(v38 + 8))(v7, v27);
  *(void *)(v21 + 136) = &type metadata for String;
  *(void *)(v21 + 144) = v16;
  *(void *)(v21 + 11_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v28;
  *(void *)(v21 + 120) = v30;
  os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "%{public}@: %{public}@ for session - %@", 39LL, 2LL, v21);
  swift_bridgeObjectRelease();
  type metadata accessor for SPPairingSessionError(0LL);
  uint64_t v32 = v31;
  uint64_t v41 = 14LL;
  unint64_t v33 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v34 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
  _BridgedStoredNSError.init(_:userInfo:)(&ObjectType, &v41, v33, v32, v34);
  id v35 = ObjectType;
  uint64_t v36 = (void *)_convertErrorToNSError(_:)(v35);
  (*(void (**)(uint64_t, void, void *))(v40 + 16))(v40, 0LL, v36);
}

uint64_t sub_1006616A0(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = a2;
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v33 = *(void *)(v3 - 8);
  uint64_t v34 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = static os_log_type_t.default.getter(v4);
  if (qword_10099B748 != -1) {
    swift_once(&qword_10099B748, sub_100651480);
  }
  uint64_t v8 = qword_100A2B058;
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v10 = swift_allocObject(v9, 112LL, 7LL);
  __int128 v31 = xmmword_1007E4750;
  *(_OWORD *)(v10 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  id ObjectType = (id)swift_getObjectType(a1);
  uint64_t v11 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v12 = String.init<A>(describing:)(&ObjectType, v11);
  uint64_t v14 = v13;
  *(void *)(v10 + 56) = &type metadata for String;
  unint64_t v15 = sub_1000226F4();
  *(void *)(v10 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v12;
  *(void *)(v10 + 40) = v14;
  *(void *)(v10 + 96) = &type metadata for String;
  *(void *)(v10 + 104) = v15;
  *(void *)(v10 + 64) = v15;
  *(void *)(v10 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD000000000000024LL;
  *(void *)(v10 + 80) = 0x800000010086C450LL;
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "%{public}@: %{public}s", 22LL, 2LL, v10);
  swift_bridgeObjectRelease();
  unint64_t v16 = (id *)*sub_100012ED8( (void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  uint64_t v17 = static Date.trustedNow.getter((uint64_t)v6);
  uint64_t v18 = static os_log_type_t.default.getter(v17);
  uint64_t v19 = qword_100A2B058;
  uint64_t v20 = swift_allocObject(v9, 112LL, 7LL);
  *(_OWORD *)(v20 + swift_weakDestroy(v0 + 16) = v31;
  id ObjectType = *v16;
  uint64_t v21 = sub_100004AEC(&qword_1009A7D50);
  uint64_t v22 = String.init<A>(describing:)(&ObjectType, v21);
  *(void *)(v20 + 56) = &type metadata for String;
  *(void *)(v20 + 64) = v15;
  *(void *)(v20 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v22;
  *(void *)(v20 + 40) = v23;
  *(void *)(v20 + 96) = &type metadata for String;
  *(void *)(v20 + 104) = v15;
  *(void *)(v20 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD000000000000024LL;
  *(void *)(v20 + 80) = 0x800000010086C450LL;
  os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "%{public}@: %{public}@", 22LL, 2LL, v20);
  swift_bridgeObjectRelease();
  type metadata accessor for SPPairingSessionError(0LL);
  uint64_t v25 = v24;
  uint64_t v35 = 14LL;
  unint64_t v26 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v27 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
  _BridgedStoredNSError.init(_:userInfo:)(&ObjectType, &v35, v26, v25, v27);
  id v28 = ObjectType;
  uint64_t v29 = (void *)_convertErrorToNSError(_:)(v28);
  (*(void (**)(uint64_t, void, void *))(v32 + 16))(v32, 0LL, v29);

  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v6, v34);
}

void sub_100661974(uint64_t a1, char a2, uint64_t a3, const void *a4)
{
  uint64_t v8 = static os_log_type_t.default.getter(a1);
  if (qword_10099B748 != -1) {
    swift_once(&qword_10099B748, sub_100651480);
  }
  uint64_t v9 = qword_100A2B058;
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v11 = swift_allocObject(v10, 112LL, 7LL);
  *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(a3);
  uint64_t v12 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v13 = String.init<A>(describing:)(&ObjectType, v12);
  uint64_t v15 = v14;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v16 = sub_1000226F4();
  *(void *)(v11 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v13;
  *(void *)(v11 + 40) = v15;
  *(void *)(v11 + 96) = &type metadata for String;
  *(void *)(v11 + 104) = v16;
  *(void *)(v11 + 64) = v16;
  *(void *)(v11 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD00000000000001ELL;
  *(void *)(v11 + 80) = 0x800000010086C430LL;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "%{public}@: %{public}s", 22LL, 2LL, v11);
  swift_bridgeObjectRelease();
  uint64_t v17 = sub_100012ED8( (void *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  sub_10014F428(a1, a2 & 1, *v17, a4);
}

uint64_t sub_100661AE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = static os_log_type_t.default.getter(a1);
  if (qword_10099B748 != -1) {
    swift_once(&qword_10099B748, sub_100651480);
  }
  uint64_t v5 = qword_100A2B058;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(a1);
  uint64_t v8 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v9 = String.init<A>(describing:)(&ObjectType, v8);
  uint64_t v11 = v10;
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v12 = sub_1000226F4();
  *(void *)(v7 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v9;
  *(void *)(v7 + 40) = v11;
  *(void *)(v7 + 96) = &type metadata for String;
  *(void *)(v7 + 104) = v12;
  *(void *)(v7 + 64) = v12;
  *(void *)(v7 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD000000000000020LL;
  *(void *)(v7 + 80) = 0x800000010086C400LL;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "%@: %s", 6LL, 2LL, v7);
  swift_bridgeObjectRelease();
  uint64_t v13 = sub_100012ED8( (void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return sub_10014D920(*v13, a2);
}

uint64_t sub_100661C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = a1;
  uint64_t v6 = static os_log_type_t.default.getter(a1);
  if (qword_10099B748 != -1) {
    swift_once(&qword_10099B748, sub_100651480);
  }
  uint64_t v7 = qword_100A2B058;
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v9 = swift_allocObject(v8, 112LL, 7LL);
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(a2);
  uint64_t v10 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v11 = String.init<A>(describing:)(&ObjectType, v10);
  uint64_t v13 = v12;
  *(void *)(v9 + 56) = &type metadata for String;
  unint64_t v14 = sub_1000226F4();
  *(void *)(v9 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v11;
  *(void *)(v9 + 40) = v13;
  *(void *)(v9 + 96) = &type metadata for String;
  *(void *)(v9 + 104) = v14;
  *(void *)(v9 + 64) = v14;
  *(void *)(v9 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD000000000000027LL;
  *(void *)(v9 + 80) = 0x800000010086C3D0LL;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "%{public}@: %{public}s", 22LL, 2LL, v9);
  swift_bridgeObjectRelease();
  return sub_10014FC00(v5 & 1, a3);
}

uint64_t sub_100661D78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = static os_log_type_t.default.getter(a1);
  if (qword_10099B748 != -1) {
    swift_once(&qword_10099B748, sub_100651480);
  }
  uint64_t v5 = qword_100A2B058;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(a1);
  uint64_t v8 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v9 = String.init<A>(describing:)(&ObjectType, v8);
  uint64_t v11 = v10;
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v12 = sub_1000226F4();
  *(void *)(v7 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v9;
  *(void *)(v7 + 40) = v11;
  *(void *)(v7 + 96) = &type metadata for String;
  *(void *)(v7 + 104) = v12;
  *(void *)(v7 + 64) = v12;
  *(void *)(v7 + 7_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 0xD000000000000022LL;
  *(void *)(v7 + 80) = 0x800000010086C3A0LL;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "%{public}@: %{public}s", 22LL, 2LL, v7);
  swift_bridgeObjectRelease();
  id v13 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = [v13 BOOLForKey:v14];

  return (*(uint64_t (**)(uint64_t, id))(a2 + 16))(a2, v15);
}

uint64_t sub_100661F24(uint64_t a1)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataServiceDataKey);
  if (!*(void *)(a1 + 16) || (v49 = a1, uint64_t v4 = sub_10030CF14(v2, v3), (v5 & 1) == 0))
  {
    __int128 v55 = 0u;
    __int128 v56 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_42;
  }

  sub_10006A650(*(void *)(a1 + 56) + 32 * v4, (uint64_t)&v55);
  swift_bridgeObjectRelease();
  if (!*((void *)&v56 + 1))
  {
LABEL_42:
    sub_100015794((uint64_t)&v55, &qword_10099E200);
LABEL_43:
    swift_bridgeObjectRetain(a1);
    return a1;
  }

  uint64_t v6 = sub_100004AEC(&qword_1009B99A0);
  uint64_t v7 = *(void *)&v54[0];
  uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataServiceDataKey);
  uint64_t v48 = v8;
  *((void *)&v56 + 1) = sub_100004AEC(&qword_1009A0528);
  uint64_t v50 = v7 + 64;
  uint64_t v9 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v10 = -1LL;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  unint64_t v11 = v10 & *(void *)(v7 + 64);
  int64_t v51 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  uint64_t v52 = v7;
  swift_bridgeObjectRetain(v7);
  int64_t v12 = 0LL;
  id v13 = _swiftEmptyDictionarySingleton;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      int64_t v53 = v12;
      unint64_t v16 = v15 | (v12 << 6);
    }

    else
    {
      int64_t v17 = v12 + 1;
      if (__OFADD__(v12, 1LL)) {
        goto LABEL_48;
      }
      if (v17 >= v51)
      {
LABEL_45:
        swift_release();
        swift_bridgeObjectRelease();
        *(void *)&__int128 v55 = v13;
        sub_10006A358(&v55, v54);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v49);
        sub_10005CAD4(v54, v47, v48, isUniquelyReferenced_nonNull_native);
        a1 = v49;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return a1;
      }

      unint64_t v18 = *(void *)(v50 + 8 * v17);
      int64_t v19 = v12 + 1;
      if (!v18)
      {
        int64_t v19 = v12 + 2;
        if (v12 + 2 >= v51) {
          goto LABEL_45;
        }
        unint64_t v18 = *(void *)(v50 + 8 * v19);
        if (!v18)
        {
          int64_t v19 = v12 + 3;
          if (v12 + 3 >= v51) {
            goto LABEL_45;
          }
          unint64_t v18 = *(void *)(v50 + 8 * v19);
          if (!v18)
          {
            int64_t v19 = v12 + 4;
            if (v12 + 4 >= v51) {
              goto LABEL_45;
            }
            unint64_t v18 = *(void *)(v50 + 8 * v19);
            if (!v18)
            {
              int64_t v19 = v12 + 5;
              if (v12 + 5 >= v51) {
                goto LABEL_45;
              }
              unint64_t v18 = *(void *)(v50 + 8 * v19);
              if (!v18)
              {
                uint64_t v20 = v12 + 6;
                if (v12 + 6 >= v51) {
                  goto LABEL_45;
                }
                unint64_t v18 = *(void *)(v50 + 8 * v20);
                if (!v18)
                {
                  while (1)
                  {
                    int64_t v19 = v20 + 1;
                    if (__OFADD__(v20, 1LL)) {
                      goto LABEL_49;
                    }
                    if (v19 >= v51) {
                      goto LABEL_45;
                    }
                    unint64_t v18 = *(void *)(v50 + 8 * v19);
                    ++v20;
                    if (v18) {
                      goto LABEL_29;
                    }
                  }
                }

                int64_t v19 = v12 + 6;
              }
            }
          }
        }
      }

uint64_t sub_100662408()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  unint64_t v8 = (((v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v9 = (((v8 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;

  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v0 + v4, v1);
  v10(v0 + v7, v1);
  sub_100016F9C(*(void *)(v0 + v8), *(void *)(v0 + v8 + 8));
  sub_100016F9C(*(void *)(v0 + v9), *(void *)(v0 + v9 + 8));
  swift_release();
  return swift_deallocObject(v0, ((v9 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 16, v6);
}

uint64_t sub_1006624F4()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (v5 + v3 + v4) & ~v3;
  unint64_t v7 = (((((v5 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v8 = (((v7 + 15) & 0xFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFF8LL;
  uint64_t v9 = v0 + v4;
  uint64_t v10 = v0 + v6;
  uint64_t v11 = *(void *)(v0 + v7);
  uint64_t v12 = swift_task_alloc(dword_1009B99AC);
  __int128 v13 = *(_OWORD *)(v0 + v8);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v12;
  *(void *)uint64_t v12 = v1;
  *(void *)(v12 + 8) = sub_100015D58;
  *(_OWORD *)(v12 + 24) = v13;
  unint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1009B04E8 + dword_1009B04E8);
  uint64_t v14 = (uint64_t *)swift_task_alloc(unk_1009B04EC);
  *(void *)(v12 + 40) = v14;
  *uint64_t v14 = v12;
  v14[1] = (uint64_t)sub_10065E24C;
  return v16(v9, v10, v11);
}

uint64_t sub_1006625F4()
{
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100662628()
{
  uint64_t v2 = swift_task_alloc(dword_1009B99C4);
  __int128 v3 = *(_OWORD *)(v0 + 16);
  __int128 v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100015D58;
  *(_OWORD *)(v2 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v3;
  *(_OWORD *)(v2 + 48) = v4;
  return swift_task_switch(sub_10065DD84, 0LL, 0LL);
}

uint64_t sub_100662688()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1006626AC(uint64_t a1)
{
}

uint64_t sub_1006626B4(__int128 *a1)
{
  return sub_1002AA894(a1, *(uint64_t (**)(__int128 *))(v1 + 16));
}

uint64_t sub_1006626BC(uint64_t a1)
{
  return sub_1002AA8F8(a1, *(uint64_t (**)(_OWORD *))(v1 + 16));
}

uint64_t sub_1006626C4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10066270C(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 11) {
    return sub_1000182F0(result, a2);
  }
  return result;
}

uint64_t sub_100662720()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease(*((void *)v0 + 2));
  swift_release(*((void *)v0 + 4));
  swift_release(*((void *)v0 + 6));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1006627A4(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v10 = (uint64_t)v1 + ((v4 + 56) & ~v4);
  uint64_t v11 = (void *)swift_task_alloc(dword_1009A7DC4);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  void *v11 = v2;
  v11[1] = sub_100015D58;
  return sub_100291920(a1, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10066284C(char a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(a1 & 1);
}

uint64_t sub_100662870()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1006628A4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc(dword_1009A25FC);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_1000159BC;
  return sub_100132258(a1, v4, v5, v6, v7, v8);
}

void sub_100662924(uint64_t a1, unint64_t a2, uint64_t a3)
{
}

void sub_10066292C(uint64_t a1)
{
}

uint64_t sub_100662934()
{
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100662968()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc(dword_1009B9A1C);
  __int128 v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_100015D58;
  *(void *)(v3 + 40) = v2;
  *(_OWORD *)(v3 + 24) = v4;
  return swift_task_switch(sub_10065D470, 0LL, 0LL);
}

unint64_t sub_1006629D0()
{
  unint64_t result = qword_1009B9A30;
  if (!qword_1009B9A30)
  {
    uint64_t v1 = sub_100004B78(&qword_1009B9A28);
    sub_100007864(&qword_1009B9A38, type metadata accessor for KeySyncMetadataDisplay, (uint64_t)&unk_100809CD8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009B9A30);
  }

  return result;
}

void sub_100662A4C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100662A54(uint64_t a1, char a2)
{
  return sub_10065D1FC(a1, a2 & 1, *(void (**)(__n128))(v2 + 16));
}

uint64_t sub_100662A60(uint64_t a1)
{
  return sub_1002AD02C( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(unsigned __int8 *)(v1 + 56));
}

void sub_100662A84(uint64_t a1)
{
}

void sub_100662AAC(uint64_t a1, unint64_t a2)
{
}

uint64_t sub_100662AB4(char a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(v1 + 16) + 16LL))(*(void *)(v1 + 16), a1 & 1);
}

void sub_100662AC8(uint64_t a1)
{
}

void sub_100662AD0(uint64_t a1)
{
}

void sub_100662AF8(uint64_t a1)
{
}

void sub_100662B04(uint64_t a1)
{
}

uint64_t storeEnumTagSinglePayload for BeaconManagerTrampoline.BeaconManagerTrampolineError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100662B58 + 4 * byte_100812305[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100662B8C + 4 * byte_100812300[v4]))();
}

uint64_t sub_100662B8C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100662B94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100662B9CLL);
  }
  return result;
}

uint64_t sub_100662BA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100662BB0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100662BB4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100662BBC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconManagerTrampoline.BeaconManagerTrampolineError()
{
  return &type metadata for BeaconManagerTrampoline.BeaconManagerTrampolineError;
}

unint64_t sub_100662BDC()
{
  unint64_t result = qword_1009B9A98;
  if (!qword_1009B9A98)
  {
    unint64_t result = swift_getWitnessTable( &unk_1008123B0,  &type metadata for BeaconManagerTrampoline.BeaconManagerTrampolineError);
    atomic_store(result, (unint64_t *)&qword_1009B9A98);
  }

  return result;
}

unint64_t TimeBasedKey.debugDescription.getter()
{
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x800000010085AA00LL;
  v1._countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v1);
  type metadata accessor for TimeBasedKey(0LL);
  uint64_t v2 = type metadata accessor for DateInterval(0LL);
  unint64_t v3 = sub_1001707D4();
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return 0xD000000000000015LL;
}

uint64_t type metadata accessor for TimeBasedKey(uint64_t a1)
{
  uint64_t result = qword_1009B9AF8;
  if (!qword_1009B9AF8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TimeBasedKey);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TimeBasedKey(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  Swift::String v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    uint64_t *v4 = *a2;
    Swift::String v4 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for DateInterval(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
    uint64_t v11 = *(int *)(a3 + 24);
    uint64_t v12 = (char *)v4 + v11;
    __int128 v13 = (uint64_t *)((char *)a2 + v11);
    unint64_t v14 = *(uint64_t *)((char *)a2 + v11 + 8);
    if (v14 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    }

    else
    {
      uint64_t v16 = *v13;
      sub_10001736C(*v13, v14);
      *(void *)uint64_t v12 = v16;
      *((void *)v12 + 1) = v14;
    }

    uint64_t v17 = v13[2];
    unint64_t v18 = v13[3];
    sub_10001736C(v17, v18);
    *((void *)v12 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v17;
    *((void *)v12 + 3) = v18;
    int64_t v19 = v13 + 4;
    unint64_t v20 = v13[5];
    if (v20 >> 60 == 15)
    {
      *((_OWORD *)v12 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(_OWORD *)v19;
    }

    else
    {
      uint64_t v21 = *v19;
      sub_10001736C(*v19, v13[5]);
      *((void *)v12 + 4) = v21;
      *((void *)v12 + 5) = v20;
    }
  }

  return v4;
}

uint64_t destroy for TimeBasedKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for DateInterval(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    sub_100016F9C(*v6, v7);
  }
  uint64_t result = sub_100016F9C(v6[2], v6[3]);
  unint64_t v9 = v6[5];
  if (v9 >> 60 != 15) {
    return sub_100016F9C(v6[4], v9);
  }
  return result;
}

void *initializeWithCopy for TimeBasedKey(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for DateInterval(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (void *)((char *)a2 + v10);
  unint64_t v13 = *(void *)((char *)a2 + v10 + 8);
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  }

  else
  {
    uint64_t v14 = *v12;
    sub_10001736C(*v12, v13);
    *(void *)uint64_t v11 = v14;
    *((void *)v11 + 1) = v13;
  }

  uint64_t v15 = v12[2];
  unint64_t v16 = v12[3];
  sub_10001736C(v15, v16);
  *((void *)v11 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v15;
  *((void *)v11 + 3) = v16;
  uint64_t v17 = v12 + 4;
  unint64_t v18 = v12[5];
  if (v18 >> 60 == 15)
  {
    *((_OWORD *)v11 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(_OWORD *)v17;
  }

  else
  {
    uint64_t v19 = *v17;
    sub_10001736C(*v17, v12[5]);
    *((void *)v11 + 4) = v19;
    *((void *)v11 + 5) = v18;
  }

  return a1;
}

void *assignWithCopy for TimeBasedKey(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for DateInterval(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24LL))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  unint64_t v13 = *(void *)((char *)a2 + v10 + 8);
  if (*(void *)((char *)a1 + v10 + 8) >> 60 == 15LL)
  {
    if (v13 >> 60 != 15)
    {
      uint64_t v14 = *v12;
      sub_10001736C(*v12, v13);
      uint64_t *v11 = v14;
      v11[1] = v13;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v13 >> 60 == 15)
  {
    sub_1004E3298((uint64_t)v11);
LABEL_6:
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    goto LABEL_8;
  }

  uint64_t v15 = *v12;
  sub_10001736C(*v12, v13);
  uint64_t v16 = *v11;
  unint64_t v17 = v11[1];
  uint64_t *v11 = v15;
  v11[1] = v13;
  sub_100016F9C(v16, v17);
LABEL_8:
  uint64_t v18 = v12[2];
  unint64_t v19 = v12[3];
  sub_10001736C(v18, v19);
  uint64_t v20 = v11[2];
  unint64_t v21 = v11[3];
  v11[2] = v18;
  v11[3] = v19;
  sub_100016F9C(v20, v21);
  uint64_t v22 = v12 + 4;
  unint64_t v23 = v12[5];
  if ((unint64_t)v11[5] >> 60 != 15)
  {
    if (v23 >> 60 != 15)
    {
      uint64_t v25 = *v22;
      sub_10001736C(*v22, v12[5]);
      uint64_t v26 = v11[4];
      unint64_t v27 = v11[5];
      double v11[4] = v25;
      v11[5] = v23;
      sub_100016F9C(v26, v27);
      return a1;
    }

    sub_100170B90((uint64_t)(v11 + 4));
    goto LABEL_13;
  }

  if (v23 >> 60 == 15)
  {
LABEL_13:
    *((_OWORD *)v11 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(_OWORD *)v22;
    return a1;
  }

  uint64_t v24 = *v22;
  sub_10001736C(*v22, v12[5]);
  double v11[4] = v24;
  v11[5] = v23;
  return a1;
}

void *initializeWithTake for TimeBasedKey(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for DateInterval(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (_OWORD *)((char *)a1 + v10);
  uint64_t v12 = (_OWORD *)((char *)a2 + v10);
  __int128 v13 = v12[1];
  _OWORD *v11 = *v12;
  v11[1] = v13;
  v11[2] = v12[2];
  return a1;
}

void *assignWithTake for TimeBasedKey(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for DateInterval(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40LL))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (uint64_t)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  unint64_t v13 = *(void *)((char *)a1 + v10 + 8);
  if (v13 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v14 = *((void *)v12 + 1);
  if (v14 >> 60 == 15)
  {
    sub_1004E3298(v11);
LABEL_4:
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    goto LABEL_6;
  }

  uint64_t v15 = *(void *)v11;
  *(void *)uint64_t v11 = *(void *)v12;
  *(void *)(v11 + 8) = v14;
  sub_100016F9C(v15, v13);
LABEL_6:
  uint64_t v16 = *(void *)(v11 + 16);
  unint64_t v17 = *(void *)(v11 + 24);
  *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = *((_OWORD *)v12 + 1);
  sub_100016F9C(v16, v17);
  uint64_t v18 = v12 + 32;
  unint64_t v19 = *(void *)(v11 + 40);
  if (v19 >> 60 != 15)
  {
    unint64_t v20 = *((void *)v12 + 5);
    if (v20 >> 60 != 15)
    {
      uint64_t v21 = *(void *)(v11 + 32);
      *(void *)(v11 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *v18;
      *(void *)(v11 + 40) = v20;
      sub_100016F9C(v21, v19);
      return a1;
    }

    sub_100170B90(v11 + 32);
  }

  *(_OWORD *)(v11 + 3_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *(_OWORD *)v18;
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeBasedKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006633C8);
}

uint64_t sub_1006633C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DateInterval(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  }
  uint64_t v9 = *(void *)(a1 + *(int *)(a3 + 24) + 24) >> 60;
  if (((4 * (_DWORD)v9) & 0xC) != 0) {
    return 16 - ((4 * (_DWORD)v9) & 0xC | (v9 >> 2));
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for TimeBasedKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100663468);
}

uint64_t sub_100663468(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for DateInterval(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))( a1 + *(int *)(a4 + 20),  a2,  a2,  result);
  }
  uint64_t v10 = a1 + *(int *)(a4 + 24);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)(v10 + 24) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  return result;
}

uint64_t sub_1006634F4(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = type metadata accessor for DateInterval(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = "0";
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_100663574()
{
  return 0LL;
}

uint64_t sub_100663580@<X0>(uint64_t a1@<X8>)
{
  return sub_100663598((uint64_t (*)(void))&type metadata accessor for UUID, a1);
}

uint64_t sub_10066358C@<X0>(uint64_t a1@<X8>)
{
  return sub_100663598((uint64_t (*)(void))&type metadata accessor for Date, a1);
}

uint64_t sub_100663598@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(a2, 1LL, 1LL, v3);
}

double sub_1006635D4@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_1006635EC()
{
  return 0x100000000LL;
}

uint64_t sub_100663608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007864( &qword_10099BC28,  (uint64_t (*)(uint64_t))type metadata accessor for SPServiceState,  (uint64_t)&unk_1007E06A0);
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10066367C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007864( &qword_10099BC28,  (uint64_t (*)(uint64_t))type metadata accessor for SPServiceState,  (uint64_t)&unk_1007E06A0);
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1006636E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007864( &qword_10099BC40,  (uint64_t (*)(uint64_t))type metadata accessor for SPDisabledReason,  (uint64_t)&unk_1007E07F8);
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100663754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007864( &qword_10099BC40,  (uint64_t (*)(uint64_t))type metadata accessor for SPDisabledReason,  (uint64_t)&unk_1007E07F8);
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1006637B8(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009B93A8);
  v3[15] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[16] = v7;
  v3[17] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    uint64_t ObjectType = swift_getObjectType(a1);
    uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, a2);
    uint64_t v11 = v10;
  }

  else
  {
    uint64_t v9 = 0LL;
    uint64_t v11 = 0LL;
  }

  v3[18] = v9;
  v3[19] = v11;
  return swift_task_switch(sub_10066385C, v9, v11);
}

uint64_t sub_10066385C()
{
  v0[20] = AsyncCompactMapSequence.Iterator.baseIterator.modify(v0 + 2, v0[15]);
  uint64_t v1 = sub_100004AEC(&qword_1009B93A0);
  uint64_t v2 = sub_1000372EC( &qword_1009BA088,  &qword_1009B93A0,  (uint64_t)&protocol conformance descriptor for AsyncThrowingStream<A, B>.Iterator);
  uint64_t v3 = (void *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v0[21] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100663918;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0 + 8, v0[12], v0[13], v0 + 10, v1, v2);
}

uint64_t sub_100663918()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 168));
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 144);
    uint64_t v4 = *(void *)(v2 + 152);
    uint64_t v5 = sub_100663A90;
  }

  else
  {
    (*(void (**)(uint64_t, void))(v2 + 160))(v2 + 16, 0LL);
    uint64_t v3 = *(void *)(v2 + 144);
    uint64_t v4 = *(void *)(v2 + 152);
    uint64_t v5 = sub_100663988;
  }

  return swift_task_switch(v5, v3, v4);
}

uint64_t sub_100663988()
{
  int v1 = *(unsigned __int8 *)(v0 + 72);
  if (v1 == 255)
  {
    swift_task_dealloc(*(void *)(v0 + 136));
    return (*(uint64_t (**)(void))(v0 + 8))(0LL);
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 128);
    uint64_t v3 = *(void *)(v0 + 136);
    uint64_t v5 = *(void *)(v0 + 112);
    uint64_t v6 = *(void *)(v0 + 120);
    *(void *)(v0 + 48) = *(void *)(v0 + 64);
    *(_BYTE *)(v0 + 56) = v1 & 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v5, v6);
    uint64_t v7 = (int *)AsyncCompactMapSequence.Iterator.transform.getter(v6);
    *(void *)(v0 + 176) = v8;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v6);
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)v7 + *v7);
    uint64_t v9 = (void *)swift_task_alloc(v7[1]);
    *(void *)(v0 + 184) = v9;
    void *v9 = v0;
    v9[1] = sub_100663AD8;
    return v10(v0 + 88, v0 + 48);
  }

uint64_t sub_100663A90()
{
  uint64_t v1 = *(void *)(v0 + 136);
  (*(void (**)(uint64_t, uint64_t))(v0 + 160))(v0 + 16, 1LL);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100663AD8()
{
  uint64_t v1 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 184));
  swift_release();
  swift_release();
  return swift_task_switch(sub_100663B34, *(void *)(v1 + 144), *(void *)(v1 + 152));
}

uint64_t sub_100663B34()
{
  uint64_t v1 = *(void *)(v0 + 88);
  if (v1)
  {
    swift_task_dealloc(*(void *)(v0 + 136));
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
  }

  else
  {
    *(void *)(v0 + 160) = AsyncCompactMapSequence.Iterator.baseIterator.modify(v0 + 16, *(void *)(v0 + 120));
    uint64_t v3 = sub_100004AEC(&qword_1009B93A0);
    uint64_t v4 = sub_1000372EC( &qword_1009BA088,  &qword_1009B93A0,  (uint64_t)&protocol conformance descriptor for AsyncThrowingStream<A, B>.Iterator);
    uint64_t v5 = (void *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
    *(void *)(v0 + 168) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_100663918;
    return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj( v0 + 64,  *(void *)(v0 + 96),  *(void *)(v0 + 104),  v0 + 80,  v3,  v4);
  }

uint64_t sub_100663C28(void *a1)
{
  return sub_100663C70(a1, &qword_1009BA100, (uint64_t)sub_100673064, (uint64_t *)&unk_1009BA0F0, &qword_1009B5B00);
}

uint64_t sub_100663C4C(void *a1)
{
  return sub_100663C70( a1,  &qword_1009BA0D8,  (uint64_t)sub_100672FF8,  &qword_1009AE530,  (unint64_t *)&unk_1009B5AF0);
}

uint64_t sub_100663C70(void *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  id v11 = [a1 invalidationHandler];
  if (v11)
  {
    _Block_release(v11);
    __chkstk_darwin(v12);
    __int128 v30[2] = a1;
    void v30[3] = v5;
    uint64_t v13 = sub_100004AEC(a2);
    OS_dispatch_queue.sync<A>(execute:)(a3, v30, v13);
    return v33;
  }

  else
  {
    if (qword_10099B898 != -1) {
      swift_once(&qword_10099B898, sub_1006DA610);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    sub_10000A720(v15, (uint64_t)qword_100A2B2C0);
    swift_retain_n(v5, 2LL);
    id v16 = a1;
    unint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc(22LL, -1LL);
      unint64_t v20 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      uint64_t v31 = v21;
      *(_DWORD *)uint64_t v19 = 136446466;
      uint64_t v32 = v5;
      unint64_t v34 = 0xE100000000000000LL;
      uint64_t v35 = v21;
      uint64_t v22 = sub_100004AEC(a4);
      uint64_t v23 = sub_1000372EC(a5, a4, (uint64_t)&unk_100817578);
      v24._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v22, v23);
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = 8250LL;
      v25._object = (void *)0xE200000000000000LL;
      String.append(_:)(v25);
      v26._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v22, v23);
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._countAndFlagsBits = 62LL;
      v27._object = (void *)0xE100000000000000LL;
      String.append(_:)(v27);
      swift_release();
      uint64_t v33 = sub_1003F11D4(60LL, 0xE100000000000000LL, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v19 + 4, v19 + 12);
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2112;
      uint64_t v33 = (uint64_t)v16;
      id v28 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v19 + 14, v19 + 22);
      *unint64_t v20 = v16;

      _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "%{public}s: Not adding invalidated connection: %@",  (uint8_t *)v19,  0x16u);
      uint64_t v29 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v20, 1LL, v29);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_arrayDestroy(v31, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v5, 2LL);
    }

    return 0LL;
  }

uint64_t sub_100663FBC(void *a1)
{
  return sub_100663C70( a1,  &qword_1009BA108,  (uint64_t)sub_1006730D0,  &qword_1009B5B08,  (unint64_t *)&unk_1009B5B10);
}

uint64_t sub_100663FE0(void *a1)
{
  return sub_100663C70( a1,  &qword_1009BA120,  (uint64_t)sub_100673110,  (uint64_t *)&unk_1009BA110,  (unint64_t *)&unk_1009B5AC0);
}

uint64_t sub_100664004(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t sub_10066400C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2B0F8);
  sub_10000A720(v0, (uint64_t)qword_100A2B0F8);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x646E694654427073LL,  0xEB00000000676E69LL);
}

uint64_t type metadata accessor for BTFindingTrampoline()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd19BTFindingTrampoline);
}

Swift::Int sub_100664480()
{
  return Hasher._finalize()();
}

uint64_t sub_1006644D4(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD00000000000002ELL, 0x800000010084E730LL);
}

Swift::Int sub_1006644F0(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100664540@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  v3._countAndFlagsBits = *a1;
  uint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1009355E8, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_100664590(void *a1@<X8>)
{
  *a1 = 0xD00000000000002ELL;
  a1[1] = 0x800000010084E730LL;
}

void sub_1006645B0()
{
  uint64_t v1 = v0;
  if (qword_10099B7C8 != -1) {
    swift_once(&qword_10099B7C8, sub_10066400C);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_10000A720(v2, (uint64_t)qword_100A2B0F8);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "All sessions went away.", v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  uint64_t v7 = *(void (**)(uint64_t))(v1 + 40);
  if (v7)
  {
    uint64_t v8 = *(void *)(v1 + 48);
    uint64_t v9 = swift_retain();
    v7(v9);
    sub_10002214C((uint64_t)v7, v8);
  }

uint64_t sub_1006646B0()
{
  return sub_10002214C(*(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_1006646B8()
{
  swift_bridgeObjectRelease();
  sub_10002214C(*(void *)(v0 + 40), *(void *)(v0 + 48));
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t type metadata accessor for BTFindingServiceConnections(uint64_t a1)
{
  uint64_t result = qword_1009B9C18;
  if (!qword_1009B9C18) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BTFindingServiceConnections);
  }
  return result;
}

uint64_t sub_100664730(uint64_t a1)
{
  uint64_t v2 = &unk_100812608;
  return swift_initClassMetadata2(a1, 256LL, 1LL, &v2, a1 + 216);
}

uint64_t sub_100664770()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_1009B9B40);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_1009B9B40);
  if (qword_10099B7C8 != -1) {
    swift_once(&qword_10099B7C8, sub_10066400C);
  }
  uint64_t v2 = sub_10000A720(v0, (uint64_t)qword_100A2B0F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

unint64_t sub_100664800(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = (void *)0xE000000000000000LL;
  unint64_t v17 = 0LL;
  unint64_t v18 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(35LL);
  swift_bridgeObjectRelease(v18);
  unint64_t v17 = 0xD000000000000013LL;
  unint64_t v18 = 0x800000010086C950LL;
  v16[1] = a2;
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  v11._countAndFlagsBits = 0x7469206B726F5720LL;
  v11._object = (void *)0xEC000000203A6D65LL;
  String.append(_:)(v11);
  if (a1)
  {
    uint64_t v12 = WorkItemQueue.WorkItem.id.getter();
    a1 = UUID.uuidString.getter(v12);
    uint64_t v8 = v13;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  v14._countAndFlagsBits = a1;
  v14._object = v8;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v8);
  return v17;
}

unint64_t sub_10066494C()
{
  return sub_100664800(*v0, v0[1]);
}

uint64_t sub_100664954(unint64_t a1)
{
  if (a1 >> 62)
  {
    if (a1 >> 62 == 1)
    {
      strcpy((char *)v7, ".response(");
      BYTE3(v7[1]) = 0;
      HIDWORD(v7[1]) = -369098752;
      __asm { BR              X10 }
    }

    __asm { BR              X10 }
  }

  strcpy((char *)v7, ".underlying(");
  BYTE5(v7[1]) = 0;
  HIWORD(v7[1]) = -5120;
  unint64_t v6 = a1;
  sub_100673290(a1);
  swift_errorRetain(a1);
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  v3._countAndFlagsBits = String.init<A>(describing:)(&v6, v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 41LL;
  v4._object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  sub_1006732A8(a1);
  return v7[0];
}

void sub_100664B54()
{
}

void sub_100664B78()
{
}

void sub_100664C38()
{
}

void sub_100664C50()
{
}

void sub_100664C70()
{
}

uint64_t sub_100664C94()
{
  return sub_100664954(*v0);
}

uint64_t sub_100664C9C()
{
  uint64_t v1 = type metadata accessor for XPCServiceDescription(0LL);
  uint64_t v38 = *(void *)(v1 - 8);
  uint64_t v39 = v1;
  __chkstk_darwin(v1);
  char v36 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for MachServiceName(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  Swift::String v9 = (char *)&v36 - v8;
  MachServiceName.init(_:)(0xD000000000000026LL, 0x800000010086CA00LL);
  uint64_t v10 = type metadata accessor for BTFindingService();
  uint64_t v43 = v10;
  __int128 v44 = &off_10096FB88;
  v42[0] = v0;
  Swift::String v11 = (objc_class *)type metadata accessor for BTFindingTrampoline();
  id v12 = objc_allocWithZone(v11);
  uint64_t v13 = sub_100037298((uint64_t)v42, v43);
  __chkstk_darwin(v13);
  uint64_t v15 = (uint64_t *)((char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v17 = v3;
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  uint64_t v18 = *v15;
  v41[3] = v10;
  v41[4] = &off_10096FB88;
  v41[0] = v18;
  sub_100013044((uint64_t)v41, (uint64_t)v12 + OBJC_IVAR____TtC12searchpartyd19BTFindingTrampoline_implementation);
  v40.receiver = v12;
  v40.super_class = v11;
  swift_retain();
  id v19 = objc_msgSendSuper2(&v40, "init");
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v41);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
  unint64_t v20 = *(void **)(v0 + 152);
  *(void *)(v0 + 15_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v19;
  id v21 = v19;

  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  unint64_t v37 = v9;
  v22(v7, v9, v17);
  uint64_t v23 = qword_10099B7D8;
  id v24 = v21;
  if (v23 != -1) {
    swift_once(&qword_10099B7D8, sub_100665028);
  }
  Swift::String v25 = (void *)qword_1009B9B58;
  Swift::String v26 = (void *)objc_opt_self(&OBJC_CLASS___NSXPCInterface);
  id v27 = v25;
  id v28 = [v26 interfaceWithProtocol:&OBJC_PROTOCOL___SPBTFindingXPCClientProtocol];
  swift_retain();
  uint64_t v29 = v36;
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:remoteObjectInterface:shouldAccept:interruptionHandler:invalidationHandler:)( v7,  0LL,  v24,  v27,  v28,  sub_100672558,  v0,  0LL,  0LL,  0LL,  0LL);
  XPCSessionManager.register(service:)(v29);
  if (qword_10099B7C8 != -1) {
    swift_once(&qword_10099B7C8, sub_10066400C);
  }
  uint64_t v30 = type metadata accessor for Logger(0LL);
  uint64_t v31 = sub_10000A720(v30, (uint64_t)qword_100A2B0F8);
  uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
  os_log_type_t v33 = static os_log_type_t.default.getter(v32);
  if (os_log_type_enabled(v32, v33))
  {
    unint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v34 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "BTFindingService: Successfully registered XPC services.",  v34,  2u);
    swift_slowDealloc(v34, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v38 + 8))(v29, v39);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v37, v17);
}

id sub_100665028()
{
  id result =  [(id)objc_opt_self(NSXPCInterface) interfaceWithProtocol:&OBJC_PROTOCOL___SPBTFindingXPCProtocol];
  qword_1009B9B58 = (uint64_t)result;
  return result;
}

uint64_t sub_100665074(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  v3[8] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  void v3[9] = v5;
  v3[10] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1006650D8, v2, 0LL);
}

uint64_t sub_1006650D8(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 72);
  uint64_t v2 = *(void *)(v1 + 80);
  uint64_t v5 = *(void *)(v1 + 56);
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v6 = *(void **)(v1 + 40);
  XPCSession.identifier.getter(a1);
  swift_beginAccess(v5 + 208, v1 + 16, 33LL, 0LL);
  id v7 = v6;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v5 + 208));
  uint64_t v10 = *(void *)(v5 + 208);
  *(void *)(v5 + 208) = 0x8000000000000000LL;
  sub_10005F45C((uint64_t)v7, v2, isUniquelyReferenced_nonNull_native);
  *(void *)(v5 + 208) = v10;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_endAccess(v1 + 16);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_1006651A8(void *a1)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(v1 + 160);
    swift_beginAccess(v3 + 32, v35, 0LL, 0LL);
    uint64_t v4 = *(void *)(v3 + 32);
    if ((v4 & 0xC000000000000001LL) != 0)
    {
      if (v4 < 0) {
        uint64_t v5 = *(void *)(v3 + 32);
      }
      else {
        uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8LL;
      }
      id v6 = a1;
      swift_bridgeObjectRetain(v4);
      uint64_t v7 = __CocoaSet.makeIterator()(v5);
      uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009AC2E0);
      uint64_t v9 = sub_1000372EC( (unint64_t *)&unk_1009A0B00,  (uint64_t *)&unk_1009AC2E0,  (uint64_t)&protocol conformance descriptor for XPCSession<A>);
      uint64_t v10 = Set.Iterator.init(_cocoa:)(v36, v7, v8, v9);
      uint64_t v4 = v36[0];
      uint64_t v32 = v36[1];
      uint64_t v11 = v36[2];
      uint64_t v12 = v36[3];
      unint64_t v13 = v36[4];
    }

    else
    {
      uint64_t v14 = -1LL << *(_BYTE *)(v4 + 32);
      uint64_t v32 = v4 + 56;
      uint64_t v11 = ~v14;
      uint64_t v15 = -v14;
      if (v15 < 64) {
        uint64_t v16 = ~(-1LL << v15);
      }
      else {
        uint64_t v16 = -1LL;
      }
      unint64_t v13 = v16 & *(void *)(v4 + 56);
      id v17 = a1;
      swift_bridgeObjectRetain(v4);
      uint64_t v12 = 0LL;
    }

    int64_t v18 = (unint64_t)(v11 + 64) >> 6;
    while (1)
    {
      if (v4 < 0)
      {
        uint64_t v22 = __CocoaSet.Iterator.next()(v10);
        if (!v22) {
          goto LABEL_37;
        }
        uint64_t v23 = v22;
        uint64_t v33 = v22;
        swift_unknownObjectRetain(v22);
        uint64_t v24 = sub_100004AEC((uint64_t *)&unk_1009AC2E0);
        swift_dynamicCast(&v34, &v33, (char *)&type metadata for Swift.AnyObject + 8, v24, 7LL);
        id v25 = v34;
        uint64_t v26 = swift_unknownObjectRelease(v23);
        uint64_t v21 = v12;
        uint64_t v19 = v13;
        if (!v25) {
          goto LABEL_37;
        }
      }

      else
      {
        if (v13)
        {
          uint64_t v19 = (v13 - 1) & v13;
          unint64_t v20 = __clz(__rbit64(v13)) | (v12 << 6);
          uint64_t v21 = v12;
        }

        else
        {
          int64_t v27 = v12 + 1;
          if (__OFADD__(v12, 1LL))
          {
            __break(1u);
            return;
          }

          if (v27 >= v18) {
            goto LABEL_37;
          }
          unint64_t v28 = *(void *)(v32 + 8 * v27);
          uint64_t v21 = v12 + 1;
          if (!v28)
          {
            uint64_t v21 = v12 + 2;
            if (v12 + 2 >= v18) {
              goto LABEL_37;
            }
            unint64_t v28 = *(void *)(v32 + 8 * v21);
            if (!v28)
            {
              uint64_t v21 = v12 + 3;
              if (v12 + 3 >= v18) {
                goto LABEL_37;
              }
              unint64_t v28 = *(void *)(v32 + 8 * v21);
              if (!v28)
              {
                uint64_t v21 = v12 + 4;
                if (v12 + 4 >= v18) {
                  goto LABEL_37;
                }
                unint64_t v28 = *(void *)(v32 + 8 * v21);
                if (!v28)
                {
                  uint64_t v29 = v12 + 5;
                  while (v18 != v29)
                  {
                    unint64_t v28 = *(void *)(v32 + 8 * v29++);
                    if (v28)
                    {
                      uint64_t v21 = v29 - 1;
                      goto LABEL_33;
                    }
                  }

void sub_100665484(uint64_t a1)
{
  uint64_t v39 = a1;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v44 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = *(void *)(v1 + 160);
  swift_beginAccess(v5 + 32, v48, 0LL, 0LL);
  uint64_t v6 = *(void *)(v5 + 32);
  if ((v6 & 0xC000000000000001LL) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *(void *)(v5 + 32);
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v6);
    uint64_t v8 = __CocoaSet.makeIterator()(v7);
    uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009AC2E0);
    uint64_t v10 = sub_1000372EC( (unint64_t *)&unk_1009A0B00,  (uint64_t *)&unk_1009AC2E0,  (uint64_t)&protocol conformance descriptor for XPCSession<A>);
    uint64_t v11 = Set.Iterator.init(_cocoa:)(v49, v8, v9, v10);
    uint64_t v6 = v49[0];
    uint64_t v43 = v49[1];
    uint64_t v13 = v49[2];
    uint64_t v12 = v49[3];
    unint64_t v14 = v49[4];
  }

  else
  {
    uint64_t v15 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v16 = *(void *)(v6 + 56);
    uint64_t v43 = v6 + 56;
    uint64_t v13 = ~v15;
    uint64_t v17 = -v15;
    if (v17 < 64) {
      uint64_t v18 = ~(-1LL << v17);
    }
    else {
      uint64_t v18 = -1LL;
    }
    unint64_t v14 = v18 & v16;
    swift_bridgeObjectRetain(v6);
    uint64_t v12 = 0LL;
  }

  v38[1] = v13;
  uint64_t v41 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v42 = (unint64_t)(v13 + 64) >> 6;
  uint64_t v19 = (void *)(v1 + 208);
  objc_super v40 = (char *)&type metadata for Swift.AnyObject + 8;
  while (v6 < 0)
  {
    uint64_t v23 = __CocoaSet.Iterator.next()(v11);
    if (!v23) {
      goto LABEL_43;
    }
    uint64_t v24 = v23;
    uint64_t v45 = v23;
    swift_unknownObjectRetain(v23);
    uint64_t v25 = sub_100004AEC((uint64_t *)&unk_1009AC2E0);
    swift_dynamicCast(&v46, &v45, v40, v25, 7LL);
    id v26 = v46;
    uint64_t v27 = swift_unknownObjectRelease(v24);
    uint64_t v22 = v12;
    uint64_t v20 = v14;
    if (!v26) {
      goto LABEL_43;
    }
LABEL_36:
    XPCSession.identifier.getter(v27);
    swift_beginAccess(v19, v47, 0LL, 0LL);
    uint64_t v32 = *v19;
    if (!*(void *)(*v19 + 16LL)) {
      goto LABEL_12;
    }
    swift_bridgeObjectRetain(*v19);
    unint64_t v33 = sub_10030D124((uint64_t)v4);
    if ((v34 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_12:
      (*(void (**)(char *, uint64_t))(v44 + 8))(v4, v2);
LABEL_13:
      uint64_t v11 = (void *)swift_release();
      goto LABEL_14;
    }

    id v35 = *(id *)(*(void *)(v32 + 56) + 8 * v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v4, v2);
    id v36 = [v35 optInRawRSSIMeasurement];
    if ((v36 & 1) == 0)
    {

      goto LABEL_13;
    }

    XPCSession.proxy.getter(v36);
    id v37 = v46;
    if (v46)
    {
      [v46 updatedBTRSSIMeasurement:v39];
      swift_release();

      uint64_t v11 = (void *)swift_unknownObjectRelease(v37);
    }

    else
    {
      swift_release();
    }

uint64_t sub_100665868(uint64_t a1)
{
  v2[27] = a1;
  v2[28] = v1;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[29] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[30] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[31] = swift_task_alloc(v5);
  v2[32] = swift_task_alloc(v5);
  v2[33] = swift_task_alloc(v5);
  return swift_task_switch(sub_1006658E4, v1, 0LL);
}

uint64_t sub_1006658E4()
{
  if (qword_10099B7C8 != -1) {
    swift_once(&qword_10099B7C8, sub_10066400C);
  }
  uint64_t v1 = (__int128 *)(v0 + 7);
  uint64_t v2 = v0[27];
  uint64_t v3 = v0[33];
  uint64_t v5 = v0[29];
  uint64_t v4 = v0[30];
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v0[34] = sub_10000A720(v6, (uint64_t)qword_100A2B0F8);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[35] = v7;
  uint64_t v8 = v7(v3, v2, v5);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.default.getter(v9);
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v12 = v0[33];
  uint64_t v13 = v0[29];
  uint64_t v14 = v0[30];
  if (v11)
  {
    uint64_t v15 = swift_slowAlloc(22LL, -1LL);
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    uint64_t v26 = v24;
    *(_DWORD *)uint64_t v15 = 141558275;
    v0[25] = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 25, v0 + 26, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2081;
    uint64_t v16 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
    v0[26] = sub_1003F11D4(v17, v18, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 26, v0 + 27, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v19(v12, v13);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Read TX Power for %{private,mask.hash}s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    uint64_t v20 = v15;
    uint64_t v1 = (__int128 *)(v0 + 7);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  else
  {
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v19(v0[33], v0[29]);
  }

  v0[36] = v19;
  uint64_t v21 = qword_10099B9E0;
  swift_retain();
  if (v21 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 12, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, (uint64_t)v1, (uint64_t *)&unk_10099FA80);
  if (v0[10])
  {
    sub_100012EC0(v1, (uint64_t)(v0 + 2));
    swift_release();
    sub_100012ED8(v0 + 2, v0[5]);
    uint64_t v25 = (uint64_t (__cdecl *)())((char *)&dword_10099C950 + dword_10099C950);
    uint64_t v23 = (void *)swift_task_alloc(unk_10099C954);
    v0[37] = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_100665BEC;
    return v25();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100665BEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 296LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 224LL);
  *(void *)(*(void *)v1 + 304LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100665C4C, v3, 0LL);
}

uint64_t sub_100665C4C()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 304))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc(dword_1009A754C);
    *(void *)(v0 + 31_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100666070;
    return sub_10026B288(*(void *)(v0 + 216));
  }

  else
  {
    uint64_t v4 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing OwnerCommandManager to read TX Power!", v7, 2u);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    type metadata accessor for SPBTFindingSessionError(0LL);
    uint64_t v9 = v8;
    *(void *)(v0 + 168) = 4LL;
    unint64_t v10 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v11 = sub_100015C48( &qword_10099C148,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError,  (uint64_t)&unk_1007E318C);
    uint64_t v12 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 176), v0 + 168, v10, v9, v11);
    uint64_t v13 = *(void *)(v0 + 176);
    swift_willThrow(v12);
    swift_errorRetain(v13);
    uint64_t v14 = swift_errorRetain(v13);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v18 = swift_slowAlloc(32LL, -1LL);
      uint64_t v37 = v18;
      *(_DWORD *)uint64_t v17 = 136446210;
      *(void *)(v0 + 184) = v13;
      swift_errorRetain(v13);
      uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v20 = String.init<A>(describing:)(v0 + 184, v19);
      *(void *)(v0 + 19_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = sub_1003F11D4(v20, v21, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v13);
      swift_errorRelease(v13);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to fetch TX Power due to %{public}s", v17, 0xCu);
      swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1LL, -1LL);
      swift_slowDealloc(v17, -1LL, -1LL);

      swift_errorRelease(v13);
    }

    else
    {
      swift_errorRelease(v13);
      swift_errorRelease(v13);
      swift_errorRelease(v13);
    }

    uint64_t v22 = (void *)(*(void *)(v0 + 224) + 200LL);
    __n128 v23 = swift_beginAccess(v22, v0 + 144, 0LL, 0LL);
    if (!*(void *)(*v22 + 16LL)
      || (uint64_t v24 = *(void *)(v0 + 216),
          swift_bridgeObjectRetain(*v22),
          sub_10030D124(v24),
          LOBYTE(v24) = v25,
          swift_bridgeObjectRelease(),
          (v24 & 1) == 0))
    {
      uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0 + 280);
      uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
      int64_t v28 = *(char **)(v0 + 248);
      uint64_t v29 = *(void *)(v0 + 256);
      uint64_t v30 = *(void *)(v0 + 232);
      uint64_t v31 = *(void *)(v0 + 216);
      v27(v29, v31, v30, v23);
      ((void (*)(char *, uint64_t, uint64_t))v27)(v28, v31, v30);
      uint64_t v32 = type metadata accessor for BTRSSIFilter(0LL);
      swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
      uint64_t v33 = sub_100210014(v28, 0LL, 0);
      swift_beginAccess(v22, v0 + 120, 33LL, 0LL);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v22);
      uint64_t v37 = *v22;
      *uint64_t v22 = 0x8000000000000000LL;
      sub_10005F468(v33, v29, isUniquelyReferenced_nonNull_native);
      *uint64_t v22 = v37;
      swift_bridgeObjectRelease();
      v26(v29, v30);
      swift_endAccess(v0 + 120);
    }

    uint64_t v35 = *(void *)(v0 + 256);
    uint64_t v36 = *(void *)(v0 + 248);
    swift_task_dealloc(*(void *)(v0 + 264));
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100666070(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 312);
  *(void *)(*v2 + 320) = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = *(void *)(v4 + 224);
  if (v1)
  {
    uint64_t v7 = sub_100666270;
  }

  else
  {
    *(void *)(v4 + 328) = a1;
    uint64_t v7 = sub_1006660E4;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_1006660E4()
{
  uint64_t v1 = *(void *)(v0 + 328);
  uint64_t v2 = (void *)(*(void *)(v0 + 224) + 200LL);
  __n128 v3 = swift_beginAccess(v2, v0 + 144, 0LL, 0LL);
  if (!*(void *)(*v2 + 16LL)
    || (uint64_t v4 = *(void *)(v0 + 216),
        swift_bridgeObjectRetain(*v2),
        sub_10030D124(v4),
        LOBYTE(v4) = v5,
        swift_bridgeObjectRelease(),
        (v4 & 1) == 0))
  {
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0 + 280);
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
    uint64_t v8 = *(char **)(v0 + 248);
    uint64_t v9 = *(void *)(v0 + 256);
    uint64_t v10 = *(void *)(v0 + 232);
    uint64_t v11 = *(void *)(v0 + 216);
    v7(v9, v11, v10, v3);
    ((void (*)(char *, uint64_t, uint64_t))v7)(v8, v11, v10);
    uint64_t v12 = type metadata accessor for BTRSSIFilter(0LL);
    swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v13 = sub_100210014(v8, v1, 0);
    swift_beginAccess(v2, v0 + 120, 33LL, 0LL);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    uint64_t v18 = *v2;
    *uint64_t v2 = 0x8000000000000000LL;
    sub_10005F468(v13, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v18;
    swift_bridgeObjectRelease();
    v6(v9, v10);
    swift_endAccess(v0 + 120);
  }

  uint64_t v15 = *(void *)(v0 + 256);
  uint64_t v16 = *(void *)(v0 + 248);
  swift_task_dealloc(*(void *)(v0 + 264));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100666270()
{
  uint64_t v1 = *(void *)(v0 + 320);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  __n128 v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    char v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)char v5 = 136446210;
    uint64_t v26 = v6;
    *(void *)(v0 + 184) = v1;
    swift_errorRetain(v1);
    uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v8 = String.init<A>(describing:)(v0 + 184, v7);
    *(void *)(v0 + 19_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = sub_1003F11D4(v8, v9, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to fetch TX Power due to %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);

    swift_errorRelease(v1);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v10 = (void *)(*(void *)(v0 + 224) + 200LL);
  __n128 v11 = swift_beginAccess(v10, v0 + 144, 0LL, 0LL);
  if (!*(void *)(*v10 + 16LL) {
    || (uint64_t v12 = *(void *)(v0 + 216),
  }
        swift_bridgeObjectRetain(*v10),
        sub_10030D124(v12),
        LOBYTE(v1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v13,
        swift_bridgeObjectRelease(),
        (v12 & 1) == 0))
  {
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0 + 280);
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
    uint64_t v16 = *(char **)(v0 + 248);
    uint64_t v17 = *(void *)(v0 + 256);
    uint64_t v18 = *(void *)(v0 + 232);
    uint64_t v19 = *(void *)(v0 + 216);
    v15(v17, v19, v18, v11);
    ((void (*)(char *, uint64_t, uint64_t))v15)(v16, v19, v18);
    uint64_t v20 = type metadata accessor for BTRSSIFilter(0LL);
    swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    uint64_t v21 = sub_100210014(v16, 0LL, 0);
    swift_beginAccess(v10, v0 + 120, 33LL, 0LL);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v10);
    uint64_t v26 = *v10;
    *uint64_t v10 = 0x8000000000000000LL;
    sub_10005F468(v21, v17, isUniquelyReferenced_nonNull_native);
    *uint64_t v10 = v26;
    swift_bridgeObjectRelease();
    v14(v17, v18);
    swift_endAccess(v0 + 120);
  }

  uint64_t v23 = *(void *)(v0 + 256);
  uint64_t v24 = *(void *)(v0 + 248);
  swift_task_dealloc(*(void *)(v0 + 264));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10066655C(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = sub_100004AEC(&qword_1009A9BF0);
  void v2[9] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  v2[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  void v2[11] = v5;
  v2[12] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1006665E0, v1, 0LL);
}

uint64_t sub_1006665E0()
{
  uint64_t v1 = v0 + 16;
  if (qword_10099B7C8 != -1) {
    swift_once(&qword_10099B7C8, sub_10066400C);
  }
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 80);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10000A720(v6, (uint64_t)qword_100A2B0F8);
  uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  uint64_t v7 = v41(v4, v2, v5);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter(v8);
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = *(void *)(v0 + 96);
  uint64_t v12 = *(void *)(v0 + 80);
  if (v10)
  {
    uint64_t v40 = *(void *)(v0 + 88);
    uint64_t v13 = swift_slowAlloc(22LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    uint64_t v42 = v14;
    *(_DWORD *)uint64_t v13 = 141558275;
    *(void *)(v0 + 40) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2081;
    uint64_t v15 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
    *(void *)(v0 + 48) = sub_1003F11D4(v16, v17, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v11, v12);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "startScanning for beacon %{private,mask.hash}s",  (uint8_t *)v13,  0x16u);
    swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    uint64_t v18 = v13;
    uint64_t v1 = v0 + 16;
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 88) + 8LL))(*(void *)(v0 + 96), *(void *)(v0 + 80));
  }

  uint64_t v19 = *(void *)(v0 + 80);
  uint64_t v20 = *(void *)(v0 + 88);
  uint64_t v21 = *(void *)(v0 + 56);
  uint64_t v22 = *(void *)(v0 + 64);
  uint64_t v23 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
  uint64_t v24 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v25 = (v24 + 32) & ~v24;
  uint64_t v26 = swift_allocObject(v23, v25 + *(void *)(v20 + 72), v24 | 7);
  *(_OWORD *)(v26 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v27 = v26 + v25;
  v41(v27, v21, v19);
  swift_beginAccess(v22 + 192, v1, 33LL, 0LL);
  sub_100687EC0(v26);
  swift_setDeallocating(v26);
  swift_arrayDestroy(v27, 1LL, v19);
  swift_deallocClassInstance(v26, 32LL, 7LL);
  uint64_t v28 = swift_endAccess(v1);
  if (*(void *)(v22 + 176))
  {
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.default.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Existing scan in progress. Not starting a new one.", v31, 2u);
      swift_slowDealloc(v31, -1LL, -1LL);
    }
  }

  else
  {
    uint64_t v32 = *(void *)(v0 + 64);
    uint64_t v33 = *(void *)(v0 + 72);
    uint64_t v34 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56LL))(v33, 1LL, 1LL, v34);
    uint64_t v36 = sub_100015C48( &qword_1009B9FE8,  v35,  (uint64_t (*)(uint64_t))type metadata accessor for BTFindingService,  (uint64_t)&unk_100812740);
    uint64_t v37 = (void *)swift_allocObject(&unk_10096FCD8, 40LL, 7LL);
    void v37[2] = v32;
    v37[3] = v36;
    v37[4] = v32;
    swift_retain_n(v32, 2LL);
    *(void *)(v22 + 176) = sub_1003B76DC(v33, (uint64_t)&unk_1009BA030, (uint64_t)v37);
    swift_release();
  }

  uint64_t v38 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 96));
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006669F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[21] = a4;
  uint64_t v6 = sub_100004AEC(&qword_10099E338);
  v4[22] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[23] = v7;
  v4[24] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  v4[25] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_10099D8A0);
  v4[26] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  v4[27] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[28] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[29] = swift_task_alloc(v12);
  v4[30] = swift_task_alloc(v12);
  v4[31] = swift_task_alloc(v12);
  unint64_t v13 = (*(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009B9390) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[32] = swift_task_alloc(v13);
  v4[33] = swift_task_alloc(v13);
  uint64_t v14 = sub_100004AEC(&qword_10099E6A8);
  v4[34] = swift_task_alloc((*(void *)(*(void *)(v14 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for DiscoveredObject(0LL);
  v4[35] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v4[36] = v16;
  unint64_t v17 = (*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[37] = swift_task_alloc(v17);
  v4[38] = swift_task_alloc(v17);
  v4[39] = swift_task_alloc(v17);
  uint64_t v18 = sub_100004AEC(&qword_1009B93A0);
  _BYTE v4[40] = swift_task_alloc((*(void *)(*(void *)(v18 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009B93A8);
  v4[41] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v4[42] = v20;
  v4[43] = swift_task_alloc((*(void *)(v20 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009BA040);
  v4[44] = v21;
  uint64_t v22 = *(void *)(v21 - 8);
  v4[45] = v22;
  v4[46] = swift_task_alloc((*(void *)(v22 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for ScanMode(0LL);
  v4[47] = v23;
  uint64_t v24 = *(void *)(v23 - 8);
  v4[48] = v24;
  v4[49] = swift_task_alloc((*(void *)(v24 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = sub_100004AEC(&qword_1009B9330);
  v4[50] = v25;
  uint64_t v26 = *(void *)(v25 - 8);
  v4[51] = v26;
  unint64_t v27 = (*(void *)(v26 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[52] = swift_task_alloc(v27);
  v4[53] = swift_task_alloc(v27);
  return swift_task_switch(sub_100666C5C, a4, 0LL);
}

uint64_t sub_100666C5C()
{
  v0[54] = *(void *)(v0[21] + 136LL);
  uint64_t v1 = sub_100004AEC((uint64_t *)&unk_1009BA050);
  uint64_t v2 = type metadata accessor for CentralManager.State(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  v0[55] = v7;
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = *(void (**)(uint64_t, void, uint64_t))(v3 + 104);
  v9(v8, enum case for CentralManager.State.poweredOn(_:), v2);
  v9(v8 + v4, enum case for CentralManager.State.restricted(_:), v2);
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to CentralManagerProtocol.await(states:)[1]);
  v0[56] = v10;
  uint64_t v11 = type metadata accessor for CentralManager(0LL);
  uint64_t v12 = sub_100015C48( &qword_1009A1BA0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager,  (uint64_t)&protocol conformance descriptor for CentralManager);
  *uint64_t v10 = v0;
  v10[1] = sub_100666D88;
  return CentralManagerProtocol.await(states:)(v7, v11, v12);
}

uint64_t sub_100666D88()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 448);
  *(void *)(*v1 + 456) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 168);
    uint64_t v5 = sub_1006685F4;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 168);
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_100666DFC;
    uint64_t v4 = v6;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_100666DFC()
{
  uint64_t v2 = v0[48];
  uint64_t v1 = v0[49];
  uint64_t v3 = v0[47];
  uint64_t v4 = enum case for ScanUseCase.btFinding(_:);
  uint64_t v5 = type metadata accessor for ScanUseCase(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104LL))(v1, v4, v5);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for ScanMode.useCase(_:), v3);
  v0[58] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100666ECC;
  return ((uint64_t (*)(void, void, unint64_t, void))v8)( v0[53],  v0[49],  0xD02AB486CEDC0000LL,  0LL);
}

uint64_t sub_100666ECC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 464);
  uint64_t v5 = *(void *)(*v1 + 384);
  uint64_t v4 = *(void *)(*v1 + 392);
  uint64_t v6 = *(void *)(*v1 + 376);
  *(void *)(*v1 + 47_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0) {
    uint64_t v7 = sub_100668724;
  }
  else {
    uint64_t v7 = sub_100666F58;
  }
  return swift_task_switch(v7, *(void *)(v2 + 168), 0LL);
}

uint64_t sub_100666F58()
{
  uint64_t v1 = v0[52];
  uint64_t v2 = v0[50];
  uint64_t v3 = v0[44];
  uint64_t v4 = v0[40];
  uint64_t v5 = v0[21];
  (*(void (**)(uint64_t, void, uint64_t))(v0[51] + 16LL))(v1, v0[53], v2);
  uint64_t v6 = type metadata accessor for Peripheral(0LL);
  v0[60] = v6;
  uint64_t v7 = sub_1000372EC( &qword_1009B9358,  &qword_1009B9330,  (uint64_t)&protocol conformance descriptor for AsyncThrowingStream<A, B>);
  AsyncCompactMapSequence.init(_:transform:)(v1, &unk_1009BA060, 0LL, v2, v6, v7);
  AsyncCompactMapSequence.base.getter(v3);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v2, v7);
  uint64_t v8 = AsyncCompactMapSequence.transform.getter(v3);
  AsyncCompactMapSequence.Iterator.init(_:transform:)(v4, v8, v9, v2, v6, v7);
  uint64_t v11 = sub_100015C48( &qword_1009B9FE8,  v10,  (uint64_t (*)(uint64_t))type metadata accessor for BTFindingService,  (uint64_t)&unk_100812740);
  v0[61] = v11;
  swift_beginAccess(v5 + 192, v0 + 2, 0LL, 0LL);
  swift_beginAccess(v5 + 200, v0 + 5, 0LL, 0LL);
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1009BA070 + dword_1009BA070);
  uint64_t v12 = (void *)swift_task_alloc(unk_1009BA074);
  v0[62] = v12;
  void *v12 = v0;
  v12[1] = sub_100667110;
  return v14(v5, v11);
}

uint64_t sub_100667110(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  swift_task_dealloc(*(void *)(*(void *)v2 + 496LL));
  if (v1)
  {
    v4[81] = v1;
    uint64_t v5 = v4[21];
    uint64_t v6 = sub_10066884C;
  }

  else
  {
    uint64_t v5 = v4[21];
    v4[63] = a1;
    uint64_t v6 = sub_100667188;
  }

  return swift_task_switch(v6, v5, 0LL);
}

uint64_t sub_100667188()
{
  if (*(void *)(v0 + 504))
  {
    uint64_t v1 = *(void *)(v0 + 480);
    uint64_t v2 = sub_100015C48( &qword_1009BA080,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, v2);
    *(void *)(v0 + 51_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v3;
    *(void *)(v0 + 520) = v4;
    return swift_task_switch(sub_10066740C, v3, v4);
  }

  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 336) + 8LL))(*(void *)(v0 + 344), *(void *)(v0 + 328));
    if (qword_10099B7C8 != -1) {
      swift_once(&qword_10099B7C8, sub_10066400C);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    uint64_t v7 = sub_10000A720(v6, (uint64_t)qword_100A2B0F8);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Done scanning", v10, 2u);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    uint64_t v11 = *(void *)(v0 + 416);
    uint64_t v12 = *(void *)(v0 + 424);
    uint64_t v13 = *(void *)(v0 + 400);
    uint64_t v14 = *(void *)(v0 + 408);
    uint64_t v15 = *(void *)(v0 + 392);
    uint64_t v16 = *(void *)(v0 + 368);
    uint64_t v17 = *(void *)(v0 + 344);
    uint64_t v19 = *(void *)(v0 + 312);
    uint64_t v18 = *(void *)(v0 + 320);
    uint64_t v20 = *(void *)(v0 + 304);
    uint64_t v21 = *(void *)(v0 + 296);
    uint64_t v22 = *(void *)(v0 + 272);
    uint64_t v23 = *(void *)(v0 + 264);
    uint64_t v24 = *(void *)(v0 + 256);
    uint64_t v25 = *(void *)(v0 + 248);
    uint64_t v26 = *(void *)(v0 + 240);
    uint64_t v27 = *(void *)(v0 + 232);
    uint64_t v28 = *(void *)(v0 + 208);
    uint64_t v29 = *(void *)(v0 + 200);
    uint64_t v30 = *(void *)(v0 + 192);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 360) + 8LL))(v16, *(void *)(v0 + 352));
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    swift_task_dealloc(v12);
    swift_task_dealloc(v11);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10066740C()
{
  uint64_t v1 = *(void *)(v0 + 168);
  *(void *)(v0 + 528) = dispatch thunk of Peripheral.advertisementData.getter();
  return swift_task_switch(sub_100667450, v1, 0LL);
}

uint64_t sub_100667450()
{
  uint64_t v1 = v0[66];
  if (v1)
  {
    sub_10028C804(v1);
    v0[67] = v2;
    return swift_task_switch(sub_1006676F4, v0[64], v0[65]);
  }

  else
  {
    if (qword_10099B7C8 != -1) {
      swift_once(&qword_10099B7C8, sub_10066400C);
    }
    uint64_t v4 = v0[63];
    uint64_t v5 = type metadata accessor for Logger(0LL);
    sub_10000A720(v5, (uint64_t)qword_100A2B0F8);
    uint64_t v6 = swift_retain_n(v4, 2LL);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.error.getter(v7);
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = v0[63];
    if (v9)
    {
      uint64_t v11 = v0[24];
      uint64_t v21 = v0[23];
      uint64_t v12 = v0[22];
      uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v22 = swift_slowAlloc(32LL, -1LL);
      uint64_t v24 = v22;
      *(_DWORD *)uint64_t v13 = 136446210;
      Peripheral.id.getter(v22);
      uint64_t v14 = sub_1000372EC( (unint64_t *)&unk_1009B93D0,  &qword_10099E338,  (uint64_t)&protocol conformance descriptor for Identifier<A>);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
      unint64_t v17 = v16;
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v11, v12);
      v0[15] = sub_1003F11D4(v15, v17, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v0 + 16, v13 + 4, v13 + 12);
      swift_release_n(v10, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Missing advertisementData for %{public}s!", v13, 0xCu);
      swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_release();
    }

    else
    {

      swift_release_n(v10, 3LL);
    }

    uint64_t v18 = v0[61];
    uint64_t v19 = v0[21];
    uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1009BA070 + dword_1009BA070);
    uint64_t v20 = (void *)swift_task_alloc(unk_1009BA074);
    v0[80] = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_10066857C;
    return v23(v19, v18);
  }

uint64_t sub_1006676F4()
{
  uint64_t v1 = *(void *)(v0 + 168);
  *(void *)(v0 + 544) = dispatch thunk of Peripheral.rssi.getter();
  *(_BYTE *)(v0 + 660) = v2;
  return swift_task_switch(sub_10066773C, v1, 0LL);
}

uint64_t sub_10066773C()
{
  if ((*(_BYTE *)(v0 + 660) & 1) != 0) {
    uint64_t v1 = 0LL;
  }
  else {
    uint64_t v1 = *(void *)(v0 + 544);
  }
  if (v1 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_14;
  }

  if (v1 > 0x7FFFFFFF)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    swift_once(&qword_10099B7C8, sub_10066400C);
    goto LABEL_8;
  }

  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 288);
  uint64_t v4 = *(void *)(v0 + 272);
  sub_1000ADC10(*(void *)(v0 + 536), v1, v4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1LL, v2) != 1)
  {
    uint64_t v25 = *(void *)(v0 + 312);
    uint64_t v26 = *(void *)(v0 + 272);
    uint64_t v27 = *(void *)(v0 + 280);
    swift_bridgeObjectRelease();
    sub_10002218C(v26, v25, type metadata accessor for DiscoveredObject);
    uint64_t v28 = (uint64_t *)(v25 + *(int *)(v27 + 36));
    uint64_t v29 = *v28;
    *(void *)(v0 + 55_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = *v28;
    uint64_t v30 = v28[1];
    *(void *)(v0 + 560) = v30;
    sub_10008699C(v29, v30);
    uint64_t v31 = (void *)swift_task_alloc(dword_1009B9D7C);
    *(void *)(v0 + 568) = v31;
    *uint64_t v31 = v0;
    v31[1] = sub_100667B54;
    return sub_100669FB8(*(void *)(v0 + 264), v29, v30);
  }

  sub_100015794(*(void *)(v0 + 272), &qword_10099E6A8);
  if (qword_10099B7C8 != -1) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v5 = *(void *)(v0 + 528);
  uint64_t v6 = *(void *)(v0 + 504);
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_10000A720(v7, (uint64_t)qword_100A2B0F8);
  swift_retain_n(v6, 2LL);
  swift_bridgeObjectRetain(v5);
  BOOL v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.error.getter(v9);
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v12 = *(void *)(v0 + 528);
  uint64_t v13 = *(void *)(v0 + 504);
  if (v11)
  {
    uint64_t v14 = *(void *)(v0 + 192);
    uint64_t v36 = *(void *)(v0 + 184);
    uint64_t v15 = *(void *)(v0 + 176);
    uint64_t v16 = swift_slowAlloc(22LL, -1LL);
    uint64_t v38 = swift_slowAlloc(64LL, -1LL);
    uint64_t v40 = v38;
    *(_DWORD *)uint64_t v16 = 136446466;
    os_log_type_t type = v10;
    Peripheral.id.getter(v38);
    uint64_t v17 = sub_1000372EC( (unint64_t *)&unk_1009B93D0,  &qword_10099E338,  (uint64_t)&protocol conformance descriptor for Identifier<A>);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter(v15, v17);
    unint64_t v20 = v19;
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v14, v15);
    *(void *)(v0 + 128) = sub_1003F11D4(v18, v20, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v16 + 4, v16 + 12);
    swift_release_n(v13, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2080;
    swift_bridgeObjectRetain(v12);
    uint64_t v21 = sub_100004AEC(&qword_1009A3500);
    uint64_t v22 = Dictionary.description.getter(v12, &type metadata for String, v21, &protocol witness table for String);
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 136) = sub_1003F11D4(v22, v24, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease_n(v12, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v9,  type,  "Could not parse advertisementData for %{public}s: %s",  (uint8_t *)v16,  0x16u);
    swift_arrayDestroy(v38, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_release();
  }

  else
  {

    swift_bridgeObjectRelease_n(v12, 2LL);
    swift_release_n(v13, 3LL);
  }

  uint64_t v33 = *(void *)(v0 + 488);
  uint64_t v34 = *(void *)(v0 + 168);
  uint64_t v39 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1009BA070 + dword_1009BA070);
  uint64_t v35 = (void *)swift_task_alloc(unk_1009BA074);
  *(void *)(v0 + 640) = v35;
  *uint64_t v35 = v0;
  v35[1] = sub_10066857C;
  return v39(v34, v33);
}

uint64_t sub_100667B54()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 568LL);
  *(void *)(*(void *)v1 + 576LL) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = v2[70];
  uint64_t v5 = v2[69];
  uint64_t v6 = v2[21];
  sub_1000869A4(v5, v4);
  if (v0) {
    uint64_t v7 = sub_100668B1C;
  }
  else {
    uint64_t v7 = sub_100667BC8;
  }
  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_100667BC8()
{
  uint64_t v1 = *(void *)(v0 + 256);
  sub_10001581C(*(void *)(v0 + 264), v1, (uint64_t *)&unk_1009B9390);
  uint64_t v2 = type metadata accessor for BeaconDetails(0LL);
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(v1, 1LL, v2);
  uint64_t v4 = *(void *)(v0 + 256);
  uint64_t v5 = *(void *)(v0 + 216);
  uint64_t v6 = *(void *)(v0 + 224);
  uint64_t v7 = *(void *)(v0 + 208);
  if (v3 == 1)
  {
    sub_100015794(*(void *)(v0 + 256), (uint64_t *)&unk_1009B9390);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v7, 1LL, 1LL, v5);
LABEL_4:
    uint64_t v10 = *(void *)(v0 + 312);
    uint64_t v11 = *(void *)(v0 + 264);
    uint64_t v12 = *(void *)(v0 + 208);
    swift_release();
    sub_100015794(v11, (uint64_t *)&unk_1009B9390);
    sub_100018C68(v10, type metadata accessor for DiscoveredObject);
    sub_100015794(v12, &qword_10099D8A0);
LABEL_5:
    uint64_t v13 = *(void *)(v0 + 488);
    uint64_t v14 = *(void *)(v0 + 168);
    os_log_type_t type = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1009BA070 + dword_1009BA070);
    uint64_t v15 = (void *)swift_task_alloc(unk_1009BA074);
    *(void *)(v0 + 640) = v15;
    void *v15 = v0;
    v15[1] = sub_10066857C;
    return type(v14, v13);
  }

  uint64_t v8 = *(void *)(v0 + 200);
  sub_10001DC4C(*(void *)(v0 + 256), v8, type metadata accessor for BeaconKeyManager.IndexInformation);
  sub_100018C68(v4, type metadata accessor for BeaconDetails);
  BOOL v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  *(void *)(v0 + 584) = v9;
  v9(v7, v8, v5);
  sub_100018C68(v8, type metadata accessor for BeaconKeyManager.IndexInformation);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v7, 0LL, 1LL, v5);
  uint64_t v17 = *(void *)(v0 + 168);
  uint64_t v18 = *(void *)(v0 + 248);
  (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 224) + 32LL))( v18,  *(void *)(v0 + 208),  *(void *)(v0 + 216));
  uint64_t v19 = *(void *)(v17 + 192);
  swift_bridgeObjectRetain(v19);
  LOBYTE(v18) = sub_1004E4BF0(v18, v19);
  swift_bridgeObjectRelease();
  if ((v18 & 1) == 0)
  {
    uint64_t v40 = *(void *)(v0 + 224);
    swift_release();
    uint64_t v41 = *(void (**)(void, void))(v40 + 8);
    uint64_t v42 = *(void *)(v0 + 312);
    uint64_t v43 = *(void *)(v0 + 264);
    v41(*(void *)(v0 + 248), *(void *)(v0 + 216));
    sub_100015794(v43, (uint64_t *)&unk_1009B9390);
    sub_100018C68(v42, type metadata accessor for DiscoveredObject);
    goto LABEL_5;
  }

  if (qword_10099B7C8 != -1) {
    swift_once(&qword_10099B7C8, sub_10066400C);
  }
  uint64_t v21 = *(void *)(v0 + 304);
  uint64_t v20 = *(void *)(v0 + 312);
  uint64_t v22 = *(void *)(v0 + 296);
  uint64_t v24 = *(void *)(v0 + 240);
  uint64_t v23 = *(void *)(v0 + 248);
  uint64_t v25 = *(void *)(v0 + 216);
  uint64_t v26 = type metadata accessor for Logger(0LL);
  sub_10000A720(v26, (uint64_t)qword_100A2B0F8);
  v9(v24, v23, v25);
  sub_10001DC4C(v20, v21, type metadata accessor for DiscoveredObject);
  uint64_t v27 = sub_10001DC4C(v20, v22, type metadata accessor for DiscoveredObject);
  uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v29 = static os_log_type_t.info.getter(v28);
  BOOL v30 = os_log_type_enabled(v28, v29);
  uint64_t v31 = *(void *)(v0 + 304);
  if (v30)
  {
    uint64_t v66 = *(void *)(v0 + 296);
    uint64_t v65 = *(void *)(v0 + 280);
    os_log_type_t typea = v29;
    uint64_t v32 = *(void *)(v0 + 240);
    uint64_t v64 = *(void *)(v0 + 224);
    log = v28;
    uint64_t v33 = *(void *)(v0 + 216);
    uint64_t v34 = swift_slowAlloc(28LL, -1LL);
    uint64_t v67 = swift_slowAlloc(32LL, -1LL);
    uint64_t v71 = v67;
    *(_DWORD *)uint64_t v34 = 136315650;
    uint64_t v35 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter(v33, v35);
    *(void *)(v0 + 15_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = sub_1003F11D4(v36, v37, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v34 + 4, v34 + 12);
    swift_bridgeObjectRelease();
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
    v38(v32, v33);
    *(_WORD *)(v34 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 1024;
    LODWORD(v33) = *(_DWORD *)(v31 + *(int *)(v65 + 60));
    sub_100018C68(v31, type metadata accessor for DiscoveredObject);
    *(_DWORD *)(v0 + 656) = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 656, v0 + 660, v34 + 14, v34 + 18);
    *(_WORD *)(v34 + 18) = 2048;
    uint64_t v39 = *(void *)(v66 + *(int *)(v65 + 40));
    sub_100018C68(v66, type metadata accessor for DiscoveredObject);
    *(void *)(v0 + 160) = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v34 + 20, v34 + 28);
    _os_log_impl( (void *)&_mh_execute_header,  log,  typea,  "Found matching beacon %s. RSSI: %d. Channel: %ld",  (uint8_t *)v34,  0x1Cu);
    swift_arrayDestroy(v67, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1LL, -1LL);
    swift_slowDealloc(v34, -1LL, -1LL);
  }

  else
  {
    uint64_t v44 = *(void *)(v0 + 240);
    uint64_t v45 = *(void *)(v0 + 216);
    uint64_t v46 = *(void *)(v0 + 224);
    sub_100018C68(*(void *)(v0 + 296), type metadata accessor for DiscoveredObject);
    sub_100018C68(v31, type metadata accessor for DiscoveredObject);
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
    v38(v44, v45);
  }

  *(void *)(v0 + 59_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v38;
  uint64_t v47 = *(void *)(v0 + 312);
  uint64_t v48 = *(void *)(v0 + 280);
  uint64_t v49 = *(void *)(v0 + 168);
  uint64_t v50 = *(void *)(v47 + *(int *)(v48 + 40));
  uint64_t v51 = *(int *)(v47 + *(int *)(v48 + 60));
  id v52 = objc_allocWithZone(&OBJC_CLASS___SPBTRSSIMeasurement);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  Class v54 = Date._bridgeToObjectiveC()().super.isa;
  id v55 = [v52 initWithBeaconIdentifier:isa timestamp:v54 channel:v50 rssi:v51];
  *(void *)(v0 + 600) = v55;

  uint64_t v56 = *(void *)(v49 + 200);
  if (*(void *)(v56 + 16))
  {
    uint64_t v57 = *(void *)(v0 + 248);
    swift_bridgeObjectRetain(*(void *)(v49 + 200));
    unint64_t v58 = sub_10030D124(v57);
    if ((v59 & 1) != 0)
    {
      *(void *)(v0 + 608) = *(void *)(*(void *)(v56 + 56) + 8 * v58);
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v60 = (void *)swift_task_alloc(dword_1009A62BC);
      *(void *)(v0 + 6swift_weakDestroy(v0 + 16) = v60;
      void *v60 = v0;
      v60[1] = sub_10066824C;
      return sub_100210358((uint64_t)v55);
    }

    swift_bridgeObjectRelease();
  }

  uint64_t v61 = *(char **)(v0 + 232);
  v9((uint64_t)v61, *(void *)(v0 + 248), *(void *)(v0 + 216));
  uint64_t v62 = type metadata accessor for BTRSSIFilter(0LL);
  swift_allocObject(v62, *(unsigned int *)(v62 + 48), *(unsigned __int16 *)(v62 + 52));
  *(void *)(v0 + 624) = sub_100210014(v61, 0LL, 0);
  uint64_t v63 = (void *)swift_task_alloc(dword_1009A62BC);
  *(void *)(v0 + 63_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v63;
  *uint64_t v63 = v0;
  v63[1] = sub_100668390;
  return sub_100210358((uint64_t)v55);
}

uint64_t sub_10066824C(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  void v2[11] = v1;
  v2[12] = a1;
  uint64_t v3 = v2[21];
  swift_task_dealloc(v2[77]);
  return swift_task_switch(sub_1006682A8, v3, 0LL);
}

uint64_t sub_1006682A8()
{
  uint64_t v1 = *(void **)(v0 + 96);
  uint64_t v2 = *(void **)(v0 + 600);
  swift_release();
  sub_100665484((uint64_t)v2);
  sub_1006651A8(v1);
  swift_release();

  uint64_t v3 = *(void *)(v0 + 312);
  uint64_t v4 = *(void *)(v0 + 264);
  (*(void (**)(void, void))(v0 + 592))(*(void *)(v0 + 248), *(void *)(v0 + 216));
  sub_100015794(v4, (uint64_t *)&unk_1009B9390);
  sub_100018C68(v3, type metadata accessor for DiscoveredObject);
  uint64_t v5 = *(void *)(v0 + 488);
  uint64_t v6 = *(void *)(v0 + 168);
  BOOL v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1009BA070 + dword_1009BA070);
  uint64_t v7 = (void *)swift_task_alloc(unk_1009BA074);
  *(void *)(v0 + 640) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10066857C;
  return v9(v6, v5);
}

uint64_t sub_100668390(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  v2[13] = v1;
  v2[14] = a1;
  uint64_t v3 = v2[21];
  swift_task_dealloc(v2[79]);
  return swift_task_switch(sub_1006683EC, v3, 0LL);
}

uint64_t sub_1006683EC()
{
  uint64_t v1 = *(void *)(v0 + 624);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v0 + 592);
  uint64_t v3 = *(void *)(v0 + 232);
  uint64_t v4 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 168);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 584))(v3, *(void *)(v0 + 248), v4);
  swift_beginAccess(v5 + 200, v0 + 64, 33LL, 0LL);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v5 + 200));
  uint64_t v16 = *(void *)(v5 + 200);
  *(void *)(v5 + 200) = 0x8000000000000000LL;
  sub_10005F468(v1, v3, isUniquelyReferenced_nonNull_native);
  *(void *)(v5 + 200) = v16;
  swift_bridgeObjectRelease();
  v2(v3, v4);
  swift_endAccess(v0 + 64);
  uint64_t v7 = *(void **)(v0 + 112);
  uint64_t v8 = *(void **)(v0 + 600);
  swift_release();
  sub_100665484((uint64_t)v8);
  sub_1006651A8(v7);
  swift_release();

  uint64_t v9 = *(void *)(v0 + 312);
  uint64_t v10 = *(void *)(v0 + 264);
  (*(void (**)(void, void))(v0 + 592))(*(void *)(v0 + 248), *(void *)(v0 + 216));
  sub_100015794(v10, (uint64_t *)&unk_1009B9390);
  sub_100018C68(v9, type metadata accessor for DiscoveredObject);
  uint64_t v11 = *(void *)(v0 + 488);
  uint64_t v12 = *(void *)(v0 + 168);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1009BA070 + dword_1009BA070);
  uint64_t v13 = (void *)swift_task_alloc(unk_1009BA074);
  *(void *)(v0 + 640) = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_10066857C;
  return v15(v12, v11);
}

uint64_t sub_10066857C(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  swift_task_dealloc(*(void *)(*(void *)v2 + 640LL));
  if (v1)
  {
    v4[81] = v1;
    uint64_t v5 = v4[21];
    uint64_t v6 = sub_10066884C;
  }

  else
  {
    uint64_t v5 = v4[21];
    v4[63] = a1;
    uint64_t v6 = sub_100667188;
  }

  return swift_task_switch(v6, v5, 0LL);
}

uint64_t sub_1006685F4()
{
  uint64_t v1 = *(void *)(v0 + 416);
  uint64_t v2 = *(void *)(v0 + 392);
  uint64_t v3 = *(void *)(v0 + 368);
  uint64_t v4 = *(void *)(v0 + 344);
  uint64_t v6 = *(void *)(v0 + 312);
  uint64_t v5 = *(void *)(v0 + 320);
  uint64_t v8 = *(void *)(v0 + 296);
  uint64_t v7 = *(void *)(v0 + 304);
  uint64_t v9 = *(void *)(v0 + 272);
  uint64_t v11 = *(void *)(v0 + 264);
  uint64_t v12 = *(void *)(v0 + 256);
  uint64_t v13 = *(void *)(v0 + 248);
  uint64_t v14 = *(void *)(v0 + 240);
  uint64_t v15 = *(void *)(v0 + 232);
  uint64_t v16 = *(void *)(v0 + 208);
  uint64_t v17 = *(void *)(v0 + 200);
  uint64_t v18 = *(void *)(v0 + 192);
  swift_task_dealloc(*(void *)(v0 + 424));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100668724()
{
  uint64_t v1 = *(void *)(v0 + 416);
  uint64_t v2 = *(void *)(v0 + 392);
  uint64_t v3 = *(void *)(v0 + 368);
  uint64_t v4 = *(void *)(v0 + 344);
  uint64_t v6 = *(void *)(v0 + 312);
  uint64_t v5 = *(void *)(v0 + 320);
  uint64_t v8 = *(void *)(v0 + 296);
  uint64_t v7 = *(void *)(v0 + 304);
  uint64_t v9 = *(void *)(v0 + 272);
  uint64_t v11 = *(void *)(v0 + 264);
  uint64_t v12 = *(void *)(v0 + 256);
  uint64_t v13 = *(void *)(v0 + 248);
  uint64_t v14 = *(void *)(v0 + 240);
  uint64_t v15 = *(void *)(v0 + 232);
  uint64_t v16 = *(void *)(v0 + 208);
  uint64_t v17 = *(void *)(v0 + 200);
  uint64_t v18 = *(void *)(v0 + 192);
  swift_task_dealloc(*(void *)(v0 + 424));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10066884C()
{
  uint64_t v1 = *(void *)(v0 + 648);
  (*(void (**)(void, void))(*(void *)(v0 + 336) + 8LL))(*(void *)(v0 + 344), *(void *)(v0 + 328));
  if (qword_10099B7C8 != -1) {
    swift_once(&qword_10099B7C8, sub_10066400C);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2B0F8);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v6 = 138543362;
    uint64_t v8 = _convertErrorToNSError(_:)(v1);
    *(void *)(v0 + 144) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v6 + 4, v6 + 12);
    *uint64_t v7 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error during scan: %{public}@", v6, 0xCu);
    uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  swift_errorRelease(v1);
  uint64_t v10 = *(void *)(v0 + 416);
  uint64_t v11 = *(void *)(v0 + 424);
  uint64_t v12 = *(void *)(v0 + 400);
  uint64_t v13 = *(void *)(v0 + 408);
  uint64_t v14 = *(void *)(v0 + 392);
  uint64_t v15 = *(void *)(v0 + 368);
  uint64_t v16 = *(void *)(v0 + 344);
  uint64_t v18 = *(void *)(v0 + 312);
  uint64_t v17 = *(void *)(v0 + 320);
  uint64_t v20 = *(void *)(v0 + 304);
  uint64_t v21 = *(void *)(v0 + 296);
  uint64_t v22 = *(void *)(v0 + 272);
  uint64_t v23 = *(void *)(v0 + 264);
  uint64_t v24 = *(void *)(v0 + 256);
  uint64_t v25 = *(void *)(v0 + 248);
  uint64_t v26 = *(void *)(v0 + 240);
  uint64_t v27 = *(void *)(v0 + 232);
  uint64_t v28 = *(void *)(v0 + 208);
  uint64_t v29 = *(void *)(v0 + 200);
  uint64_t v30 = *(void *)(v0 + 192);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 360) + 8LL))(v15, *(void *)(v0 + 352));
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100668B1C()
{
  uint64_t v1 = *(void *)(v0 + 312);
  swift_release();
  sub_100018C68(v1, type metadata accessor for DiscoveredObject);
  uint64_t v2 = *(void *)(v0 + 576);
  (*(void (**)(void, void))(*(void *)(v0 + 336) + 8LL))(*(void *)(v0 + 344), *(void *)(v0 + 328));
  if (qword_10099B7C8 != -1) {
    swift_once(&qword_10099B7C8, sub_10066400C);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_10000A720(v3, (uint64_t)qword_100A2B0F8);
  swift_errorRetain(v2);
  uint64_t v4 = swift_errorRetain(v2);
  os_log_type_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v7 = 138543362;
    uint64_t v9 = _convertErrorToNSError(_:)(v2);
    *(void *)(v0 + 144) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v7 + 4, v7 + 12);
    *uint64_t v8 = v9;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Error during scan: %{public}@", v7, 0xCu);
    uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v8, 1LL, v10);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }

  swift_errorRelease(v2);
  uint64_t v11 = *(void *)(v0 + 416);
  uint64_t v12 = *(void *)(v0 + 424);
  uint64_t v13 = *(void *)(v0 + 400);
  uint64_t v14 = *(void *)(v0 + 408);
  uint64_t v15 = *(void *)(v0 + 392);
  uint64_t v16 = *(void *)(v0 + 368);
  uint64_t v17 = *(void *)(v0 + 344);
  uint64_t v19 = *(void *)(v0 + 312);
  uint64_t v18 = *(void *)(v0 + 320);
  uint64_t v21 = *(void *)(v0 + 304);
  uint64_t v22 = *(void *)(v0 + 296);
  uint64_t v23 = *(void *)(v0 + 272);
  uint64_t v24 = *(void *)(v0 + 264);
  uint64_t v25 = *(void *)(v0 + 256);
  uint64_t v26 = *(void *)(v0 + 248);
  uint64_t v27 = *(void *)(v0 + 240);
  uint64_t v28 = *(void *)(v0 + 232);
  uint64_t v29 = *(void *)(v0 + 208);
  uint64_t v30 = *(void *)(v0 + 200);
  uint64_t v31 = *(void *)(v0 + 192);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 360) + 8LL))(v16, *(void *)(v0 + 352));
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  swift_task_dealloc(v12);
  swift_task_dealloc(v11);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100668E08(uint64_t a1)
{
  v2[8] = a1;
  void v2[9] = v1;
  uint64_t v3 = sub_100004AEC(&qword_10099D8A0);
  v2[10] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100668E64, v1, 0LL);
}

uint64_t sub_100668E64()
{
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 64);
  swift_beginAccess(v2 + 192, v0 + 16, 33LL, 0LL);
  sub_1003CF124(v3, v1);
  sub_100015794(v1, &qword_10099D8A0);
  swift_endAccess(v0 + 16);
  swift_beginAccess(v2 + 200, v0 + 40, 33LL, 0LL);
  sub_100048E44(v3);
  swift_endAccess(v0 + 40);
  swift_release();
  if (*(void *)(*(void *)(v2 + 192) + 16LL))
  {
    swift_task_dealloc(*(void *)(v0 + 80));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    os_log_type_t v5 = (void *)swift_task_alloc(dword_1009B9D6C);
    *(void *)(v0 + 88) = v5;
    *os_log_type_t v5 = v0;
    v5[1] = sub_100668F84;
    uint64_t v6 = *(void *)(v0 + 72);
    v5[12] = v6;
    return swift_task_switch(sub_100668FEC, v6, 0LL);
  }

uint64_t sub_100668F84()
{
  uint64_t v1 = *v0;
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 88));
  swift_task_dealloc(*(void *)(v1 + 80));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100668FD4()
{
  *(void *)(v1 + 96) = v0;
  return swift_task_switch(sub_100668FEC, v0, 0LL);
}

uint64_t sub_100668FEC()
{
  uint64_t v1 = v0 + 5;
  uint64_t v2 = v0 + 8;
  if (qword_10099B7D0 != -1) {
    swift_once(&qword_10099B7D0, sub_100664770);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = sub_10000A720(v3, (uint64_t)qword_1009B9B40);
  os_log_type_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v13 = v8;
    *(_DWORD *)uint64_t v7 = 136446210;
    v0[11] = sub_1003F11D4(0x6164696C61766E69LL, 0xEC00000029286574LL, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 11, v0 + 12, v7 + 4, v7 + 12);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s", v7, 0xCu);
    swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    uint64_t v9 = v7;
    uint64_t v2 = v0 + 8;
    uint64_t v1 = v0 + 5;
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  uint64_t v10 = (void *)v0[12];
  swift_beginAccess(v10 + 24, v0 + 2, 1LL, 0LL);
  _BYTE v10[24] = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease();
  swift_beginAccess(v10 + 25, v1, 1LL, 0LL);
  v10[25] = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  swift_beginAccess(v10 + 26, v2, 1LL, 0LL);
  v10[26] = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  if (v10[22])
  {
    swift_retain();
    sub_100004AEC((uint64_t *)&unk_1009A5470);
    Task.cancel()();
    swift_release();
  }

  v10[22] = 0LL;
  swift_release();
  uint64_t v11 = (void *)swift_task_alloc(dword_1009B9D74);
  v0[13] = v11;
  void *v11 = v0;
  v11[1] = sub_100669278;
  return sub_1006692C0();
}

uint64_t sub_100669278()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 104));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1006692C0()
{
  v1[3] = v0;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  v1[4] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[5] = v3;
  unint64_t v4 = (*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[6] = swift_task_alloc(v4);
  v1[7] = swift_task_alloc(v4);
  v1[8] = swift_task_alloc(v4);
  unint64_t v5 = (*(void *)(*(void *)(sub_100004AEC(&qword_1009BA010) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  void v1[9] = swift_task_alloc(v5);
  v1[10] = swift_task_alloc(v5);
  return swift_task_switch(sub_100669370, v0, 0LL);
}

uint64_t sub_100669370()
{
  if (qword_10099B7D0 == -1) {
    goto LABEL_2;
  }
LABEL_39:
  swift_once(&qword_10099B7D0, sub_100664770);
LABEL_2:
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_1009B9B40);
  *(void *)(v0 + 88) = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    unint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = swift_slowAlloc(32LL, -1LL);
    uint64_t v58 = v6;
    *(_DWORD *)unint64_t v5 = 136446210;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = sub_1003F11D4(0xD000000000000020LL, 0x800000010086C9D0LL, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v7 = *(void *)(v0 + 24);
  *(_WORD *)(v7 + 184) = 0;
  uint64_t v8 = *(void *)(v7 + 216);
  *(void *)(v0 + 96) = v8;
  LOBYTE(v_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = *(_BYTE *)(v8 + 32);
  *(_BYTE *)(v0 + 15_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v7;
  uint64_t v9 = 1LL << v7;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v8 + 64);
  __n128 v12 = swift_bridgeObjectRetain(v8);
  int64_t v13 = 0LL;
  if (v11)
  {
LABEL_8:
    unint64_t v14 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    unint64_t v15 = v14 | (v13 << 6);
    uint64_t v16 = *(void *)(v0 + 96);
LABEL_9:
    uint64_t v17 = *(void *)(v0 + 72);
    (*(void (**)(uint64_t, unint64_t, void, __n128))(*(void *)(v0 + 40) + 16LL))( v17,  *(void *)(v16 + 48) + *(void *)(*(void *)(v0 + 40) + 72LL) * v15,  *(void *)(v0 + 32),  v12);
    uint64_t v18 = *(void *)(v16 + 56);
    uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009BA018);
    *(_OWORD *)(v17 + *(int *)(v19 + 48)) = *(_OWORD *)(v18 + 16 * v15);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v17, 0LL, 1LL, v19);
    swift_retain();
    goto LABEL_16;
  }

  while (1)
  {
    int64_t v20 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
      __break(1u);
      goto LABEL_39;
    }

    int64_t v21 = (unint64_t)((1LL << *(_BYTE *)(v0 + 152)) + 63) >> 6;
    if (v20 >= v21)
    {
      int64_t v24 = v13;
    }

    else
    {
      uint64_t v16 = *(void *)(v0 + 96);
      uint64_t v22 = v16 + 64;
      unint64_t v23 = *(void *)(v16 + 64 + 8 * v20);
      if (v23) {
        goto LABEL_13;
      }
      int64_t v24 = v13 + 1;
      if (v13 + 2 < v21)
      {
        unint64_t v23 = *(void *)(v22 + 8 * (v13 + 2));
        if (v23)
        {
          int64_t v20 = v13 + 2;
LABEL_13:
          unint64_t v11 = (v23 - 1) & v23;
          unint64_t v15 = __clz(__rbit64(v23)) + (v20 << 6);
          int64_t v13 = v20;
          goto LABEL_9;
        }

        int64_t v24 = v13 + 2;
        if (v13 + 3 < v21)
        {
          unint64_t v23 = *(void *)(v22 + 8 * (v13 + 3));
          if (v23)
          {
            int64_t v20 = v13 + 3;
            goto LABEL_13;
          }

          int64_t v20 = v13 + 4;
          int64_t v24 = v13 + 3;
          if (v13 + 4 < v21)
          {
            unint64_t v23 = *(void *)(v22 + 8 * v20);
            if (v23) {
              goto LABEL_13;
            }
            int64_t v24 = v21 - 1;
            int64_t v32 = v21 - 5;
            while (v32 != v13)
            {
              unint64_t v23 = *(void *)(v16 + 104 + 8 * v13++);
              if (v23)
              {
                int64_t v20 = v13 + 4;
                goto LABEL_13;
              }
            }
          }
        }
      }
    }

    uint64_t v25 = *(void *)(v0 + 72);
    uint64_t v26 = sub_100004AEC((uint64_t *)&unk_1009BA018);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))(v25, 1LL, 1LL, v26);
    unint64_t v11 = 0LL;
    int64_t v13 = v24;
LABEL_16:
    *(void *)(v0 + 104) = v13;
    *(void *)(v0 + 11_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v11;
    uint64_t v27 = *(void *)(v0 + 80);
    sub_100015750(*(void *)(v0 + 72), v27, &qword_1009BA010);
    uint64_t v28 = sub_100004AEC((uint64_t *)&unk_1009BA018);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48LL))(v27, 1LL, v28) == 1)
    {
      swift_release();
      *(void *)(v0 + 144) = v33;
      *uint64_t v33 = v0;
      v33[1] = sub_100669EDC;
      return v56();
    }

    uint64_t v29 = *(void *)(v0 + 64);
    uint64_t v30 = *(void *)(v0 + 40);
    uint64_t v31 = *(void *)(*(void *)(v0 + 80) + *(int *)(v28 + 48));
    *(void *)(v0 + 120) = v31;
    (*(void (**)(uint64_t))(v30 + 32))(v29);
    if (v31) {
      break;
    }
    (*(void (**)(void, void))(*(void *)(v0 + 40) + 8LL))(*(void *)(v0 + 64), *(void *)(v0 + 32));
    if (v11) {
      goto LABEL_8;
    }
  }

  (*(void (**)(void, void, void))(*(void *)(v0 + 40) + 16LL))( *(void *)(v0 + 56),  *(void *)(v0 + 64),  *(void *)(v0 + 32));
  uint64_t v34 = swift_retain_n(v31, 3LL);
  uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
  os_log_type_t v36 = static os_log_type_t.default.getter(v35);
  BOOL v37 = os_log_type_enabled(v35, v36);
  uint64_t v38 = *(void *)(v0 + 56);
  if (v37)
  {
    uint64_t v39 = *(void *)(v0 + 40);
    uint64_t v40 = *(void *)(v0 + 48);
    uint64_t v41 = *(void *)(v0 + 32);
    uint64_t v54 = *(void *)(v0 + 56);
    uint64_t v42 = swift_slowAlloc(32LL, -1LL);
    uint64_t v57 = swift_slowAlloc(64LL, -1LL);
    uint64_t v58 = v57;
    *(_DWORD *)uint64_t v42 = 136315651;
    os_log_type_t type = v36;
    WorkItemQueue.WorkItem.id.getter();
    uint64_t v43 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter(v41, v43);
    unint64_t v46 = v45;
    uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v47(v40, v41);
    *(void *)(v42 + 4) = sub_1003F11D4(v44, v46, &v58);
    swift_release_n(v31, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v42 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2160;
    *(void *)(v42 + 14) = 1752392040LL;
    *(_WORD *)(v42 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2081;
    uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter(v41, v43);
    *(void *)(v42 + 24) = sub_1003F11D4(v48, v49, &v58);
    swift_bridgeObjectRelease();
    v47(v54, v41);
    _os_log_impl( (void *)&_mh_execute_header,  v35,  type,  "Canceling %s for %{private,mask.hash}s.",  (uint8_t *)v42,  0x20u);
    swift_arrayDestroy(v57, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1LL, -1LL);
    swift_slowDealloc(v42, -1LL, -1LL);
  }

  else
  {
    uint64_t v50 = *(void *)(v0 + 32);
    uint64_t v51 = *(void *)(v0 + 40);
    swift_release_n(v31, 2LL);
    uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
    v47(v38, v50);
  }

  *(void *)(v0 + 128) = v47;
  *(void *)(v0 + 136) = v52;
  *id v52 = v0;
  v52[1] = sub_1006699A4;
  return v56();
}

uint64_t sub_1006699A4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 136LL));
  return swift_task_switch(sub_1006699FC, v1, 0LL);
}

uint64_t sub_1006699FC()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 32);
  swift_release_n(*(void *)(v0 + 120), 2LL);
  uint64_t result = v1(v2, v3);
  int64_t v5 = *(void *)(v0 + 104);
  unint64_t v6 = *(void *)(v0 + 112);
  if (!v6) {
    goto LABEL_4;
  }
LABEL_2:
  unint64_t v7 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v8 = v7 | (v5 << 6);
  uint64_t v9 = *(void *)(v0 + 96);
LABEL_3:
  uint64_t v10 = *(void *)(v0 + 72);
  (*(void (**)(uint64_t, unint64_t, void))(*(void *)(v0 + 40) + 16LL))( v10,  *(void *)(v9 + 48) + *(void *)(*(void *)(v0 + 40) + 72LL) * v8,  *(void *)(v0 + 32));
  uint64_t v11 = *(void *)(v9 + 56);
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009BA018);
  *(_OWORD *)(v10 + *(int *)(v12 + 48)) = *(_OWORD *)(v11 + 16 * v8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v10, 0LL, 1LL, v12);
  swift_retain();
  while (1)
  {
    *(void *)(v0 + 104) = v5;
    *(void *)(v0 + 11_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v6;
    uint64_t v20 = *(void *)(v0 + 80);
    sub_100015750(*(void *)(v0 + 72), v20, &qword_1009BA010);
    uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009BA018);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48LL))(v20, 1LL, v21) == 1)
    {
      swift_release();
      *(void *)(v0 + 144) = v26;
      *uint64_t v26 = v0;
      v26[1] = sub_100669EDC;
      return v48();
    }

    uint64_t v22 = *(void *)(v0 + 64);
    uint64_t v23 = *(void *)(v0 + 40);
    uint64_t v24 = *(void *)(*(void *)(v0 + 80) + *(int *)(v21 + 48));
    *(void *)(v0 + 120) = v24;
    (*(void (**)(uint64_t))(v23 + 32))(v22);
    if (v24)
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 40) + 16LL))( *(void *)(v0 + 56),  *(void *)(v0 + 64),  *(void *)(v0 + 32));
      uint64_t v27 = swift_retain_n(v24, 3LL);
      uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
      os_log_type_t v29 = static os_log_type_t.default.getter(v28);
      BOOL v30 = os_log_type_enabled(v28, v29);
      uint64_t v31 = *(void *)(v0 + 56);
      if (v30)
      {
        uint64_t v32 = *(void *)(v0 + 40);
        uint64_t v33 = *(void *)(v0 + 48);
        uint64_t v34 = *(void *)(v0 + 32);
        uint64_t v46 = *(void *)(v0 + 56);
        uint64_t v35 = swift_slowAlloc(32LL, -1LL);
        uint64_t v49 = swift_slowAlloc(64LL, -1LL);
        uint64_t v50 = v49;
        *(_DWORD *)uint64_t v35 = 136315651;
        os_log_type_t type = v29;
        WorkItemQueue.WorkItem.id.getter();
        uint64_t v36 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter(v34, v36);
        unint64_t v39 = v38;
        uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
        v40(v33, v34);
        *(void *)(v35 + 4) = sub_1003F11D4(v37, v39, &v50);
        swift_release_n(v24, 2LL);
        swift_bridgeObjectRelease();
        *(_WORD *)(v35 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2160;
        *(void *)(v35 + 14) = 1752392040LL;
        *(_WORD *)(v35 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2081;
        uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(v34, v36);
        *(void *)(v35 + 24) = sub_1003F11D4(v41, v42, &v50);
        swift_bridgeObjectRelease();
        v40(v46, v34);
        _os_log_impl( (void *)&_mh_execute_header,  v28,  type,  "Canceling %s for %{private,mask.hash}s.",  (uint8_t *)v35,  0x20u);
        swift_arrayDestroy(v49, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v49, -1LL, -1LL);
        swift_slowDealloc(v35, -1LL, -1LL);
      }

      else
      {
        uint64_t v43 = *(void *)(v0 + 32);
        uint64_t v44 = *(void *)(v0 + 40);
        swift_release_n(v24, 2LL);
        uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
        v40(v31, v43);
      }

      *(void *)(v0 + 128) = v40;
      *(void *)(v0 + 136) = v45;
      *unint64_t v45 = v0;
      v45[1] = sub_1006699A4;
      return v48();
    }

    uint64_t result = (*(uint64_t (**)(void, void))(*(void *)(v0 + 40) + 8LL))( *(void *)(v0 + 64),  *(void *)(v0 + 32));
    if (v6) {
      goto LABEL_2;
    }
LABEL_4:
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      break;
    }
    int64_t v14 = (unint64_t)((1LL << *(_BYTE *)(v0 + 152)) + 63) >> 6;
    if (v13 >= v14)
    {
      int64_t v17 = v5;
    }

    else
    {
      uint64_t v9 = *(void *)(v0 + 96);
      uint64_t v15 = v9 + 64;
      unint64_t v16 = *(void *)(v9 + 64 + 8 * v13);
      if (v16) {
        goto LABEL_7;
      }
      int64_t v17 = v5 + 1;
      if (v5 + 2 < v14)
      {
        unint64_t v16 = *(void *)(v15 + 8 * (v5 + 2));
        if (v16)
        {
          int64_t v13 = v5 + 2;
LABEL_7:
          unint64_t v6 = (v16 - 1) & v16;
          unint64_t v8 = __clz(__rbit64(v16)) + (v13 << 6);
          int64_t v5 = v13;
          goto LABEL_3;
        }

        int64_t v17 = v5 + 2;
        if (v5 + 3 < v14)
        {
          unint64_t v16 = *(void *)(v15 + 8 * (v5 + 3));
          if (v16)
          {
            int64_t v13 = v5 + 3;
            goto LABEL_7;
          }

          int64_t v13 = v5 + 4;
          int64_t v17 = v5 + 3;
          if (v5 + 4 < v14)
          {
            unint64_t v16 = *(void *)(v15 + 8 * v13);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v17 = v14 - 1;
            int64_t v25 = v14 - 5;
            while (v25 != v5)
            {
              unint64_t v16 = *(void *)(v9 + 104 + 8 * v5++);
              if (v16)
              {
                int64_t v13 = v5 + 4;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }

    uint64_t v18 = *(void *)(v0 + 72);
    uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009BA018);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v18, 1LL, 1LL, v19);
    unint64_t v6 = 0LL;
    int64_t v5 = v17;
  }

  __break(1u);
  return result;
}

uint64_t sub_100669EDC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 144LL));
  return swift_task_switch(sub_100669F34, v1, 0LL);
}

uint64_t sub_100669F34()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v7 = *(void *)(v6 + 216);
  *(void *)(v6 + 2swift_weakDestroy(v0 + 16) = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(v7);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100669FB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[19] = a3;
  v4[20] = v3;
  v4[17] = a1;
  v4[18] = a2;
  uint64_t v5 = sub_100004AEC(&qword_1009AC230);
  v4[21] = v5;
  unint64_t v6 = (*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[22] = swift_task_alloc(v6);
  v4[23] = swift_task_alloc(v6);
  v4[24] = swift_task_alloc(v6);
  v4[25] = swift_task_alloc(v6);
  v4[26] = swift_task_alloc(v6);
  uint64_t v7 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  v4[27] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[28] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[29] = swift_task_alloc(v9);
  v4[30] = swift_task_alloc(v9);
  v4[31] = swift_task_alloc(v9);
  return swift_task_switch(sub_10066A094, v3, 0LL);
}

uint64_t sub_10066A094()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C8A8 + dword_10099C8A8);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C8AC);
    *(void *)(v0 + 256) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10066A180;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10066A180(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 256LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 160LL);
  *(void *)(*(void *)v1 + 264LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10066A1E0, v3, 0LL);
}

uint64_t sub_10066A1E0()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 264))
  {
    uint64_t v2 = *(void *)(v0 + 160);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = *(void *)(v2 + 128);
    *(void *)(v0 + 27_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v3;
    return swift_task_switch(sub_10066A3A8, v3, 0LL);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B7C8 != -1) {
      swift_once(&qword_10099B7C8, sub_10066400C);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    uint64_t v6 = sub_10000A720(v5, (uint64_t)qword_100A2B0F8);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      unint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Missing BeaconKeyService to reconcile!", v9, 2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    uint64_t v11 = *(void *)(v0 + 240);
    uint64_t v10 = *(void *)(v0 + 248);
    uint64_t v12 = *(void *)(v0 + 232);
    uint64_t v14 = *(void *)(v0 + 200);
    uint64_t v13 = *(void *)(v0 + 208);
    uint64_t v16 = *(void *)(v0 + 184);
    uint64_t v15 = *(void *)(v0 + 192);
    uint64_t v20 = *(void *)(v0 + 176);

    unint64_t v17 = sub_100672440();
    uint64_t v18 = swift_allocError(&type metadata for BTFindingService.Error, v17, 0LL, 0LL);
    void *v19 = 0x8000000000000000LL;
    swift_willThrow(v18);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10066A3A8()
{
  *(void *)(v0 + 280) = *(void *)(*(void *)(v0 + 272) + 136LL);
  swift_retain();
  return swift_task_switch(sub_10066A3EC, 0LL, 0LL);
}

uint64_t sub_10066A3EC()
{
  uint64_t v2 = v0[34];
  uint64_t v1 = v0[35];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[36] = v3;
  void v3[2] = v1;
  v3[3] = sub_100117B18;
  void v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[37] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0LL);
  void *v4 = v0;
  v4[1] = sub_10066A4A4;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 15,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100117B20,  v3,  v5);
}

uint64_t sub_10066A4A4()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(*(void *)v0 + 288LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 296LL));
  swift_release();
  swift_task_dealloc(v2);
  v1[38] = v1[15];
  return swift_task_switch(sub_10066A518, v1[33], 0LL);
}

uint64_t sub_10066A518()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 264) + 136LL);
  *(void *)(v0 + 31_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v1;
  if (v1) {
    return swift_task_switch(sub_10066A53C, v1, 0LL);
  }
  __break(1u);
  return result;
}

uint64_t sub_10066A53C()
{
  uint64_t v1 = v0[39];
  uint64_t v3 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009B9310);
  uint64_t v5 = sub_100015C48( (unint64_t *)&unk_1009BA000,  255LL,  type metadata accessor for BeaconKeyServiceBuilder,  (uint64_t)&unk_1007FE9E8);
  uint64_t v6 = (void *)swift_task_alloc(48LL);
  v0[40] = v6;
  _OWORD v6[2] = v1;
  void v6[3] = v3;
  v6[4] = v2;
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v0[41] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10066A620;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 16, v0[21], v4, v0[39], v5, &unk_1009B9320, v6, v0[21]);
}

uint64_t sub_10066A620()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 320);
  swift_task_dealloc(*(void *)(*v0 + 328));
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10066A678, *(void *)(v1 + 312), 0LL);
}

uint64_t sub_10066A678()
{
  uint64_t v1 = v0[20];
  v0[42] = v0[16];
  return swift_task_switch(sub_10066A694, v1, 0LL);
}

uint64_t sub_10066A694()
{
  uint64_t v1 = *(void *)(v0 + 336);
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = *(unsigned __int8 *)(*(void *)(v0 + 224) + 80LL);
    sub_10001DC4C( v1 + ((v2 + 32) & ~v2),  *(void *)(v0 + 208),  type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v3 = 0LL;
  }

  else
  {
    uint64_t v3 = 1LL;
  }

  uint64_t v4 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 224);
  uint64_t v6 = *(void *)(v0 + 208);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v6, v3, 1LL, v4);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  *(void *)(v0 + 344) = v7;
  if (v7(v6, 1LL, v4) == 1)
  {
    uint64_t v8 = *(void *)(v0 + 152);
    sub_100015794(*(void *)(v0 + 208), &qword_1009AC230);
    uint64_t v9 = *(void *)(v0 + 304);
    uint64_t v11 = *(void *)(v0 + 144);
    uint64_t v10 = *(void *)(v0 + 152);
    if ((v8 & 0x2000000000000000LL) != 0)
    {
      uint64_t v12 = (void *)swift_allocObject(&unk_10096FC88, 40LL, 7LL);
      *(void *)(v0 + 35_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v12;
      v12[2] = v9;
      v12[3] = v11;
      v12[4] = v10 & 0xDFFFFFFFFFFFFFFFLL;
      sub_10008699C(v11, v10);
      sub_10008699C(v11, v10);
      uint64_t v32 = async function pointer to unsafeBlocking<A>(_:)[1];
      swift_retain();
      uint64_t v33 = (void *)swift_task_alloc(v32);
      *(void *)(v0 + 360) = v33;
      *uint64_t v33 = v0;
      v33[1] = sub_10066A970;
      uint64_t v15 = *(void *)(v0 + 184);
      uint64_t v16 = *(void *)(v0 + 168);
      unint64_t v17 = sub_100672488;
    }

    else
    {
      uint64_t v12 = (void *)swift_allocObject(&unk_10096FCB0, 40LL, 7LL);
      *(void *)(v0 + 368) = v12;
      v12[2] = v9;
      v12[3] = v11;
      v12[4] = v10;
      sub_10008699C(v11, v10);
      sub_10008699C(v11, v10);
      uint64_t v13 = async function pointer to unsafeBlocking<A>(_:)[1];
      swift_retain();
      uint64_t v14 = (void *)swift_task_alloc(v13);
      *(void *)(v0 + 376) = v14;
      *uint64_t v14 = v0;
      v14[1] = sub_10066AB44;
      uint64_t v15 = *(void *)(v0 + 200);
      uint64_t v16 = *(void *)(v0 + 168);
      unint64_t v17 = sub_100672498;
    }

    return unsafeBlocking<A>(_:)(v15, v17, v12, v16);
  }

  else
  {
    uint64_t v18 = *(void *)(v0 + 248);
    uint64_t v19 = *(void *)(v0 + 208);
    uint64_t v20 = *(void *)(v0 + 136);
    swift_release();
    swift_release();
    sub_10002218C(v19, v18, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_10002218C(v18, v20, type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v21 = *(void *)(v0 + 240);
    uint64_t v22 = *(void *)(v0 + 248);
    uint64_t v23 = *(void *)(v0 + 232);
    uint64_t v25 = *(void *)(v0 + 200);
    uint64_t v24 = *(void *)(v0 + 208);
    uint64_t v27 = *(void *)(v0 + 184);
    uint64_t v26 = *(void *)(v0 + 192);
    uint64_t v28 = *(void *)(v0 + 176);
    uint64_t v29 = *(void *)(v0 + 136);
    uint64_t v30 = type metadata accessor for BeaconDetails(0LL);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v29, 0LL, 1LL, v30);
    swift_task_dealloc(v22);
    swift_task_dealloc(v21);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10066A970()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 160LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 360LL));
  swift_release();
  return swift_task_switch(sub_10066A9D0, v1, 0LL);
}

uint64_t sub_10066A9D0()
{
  uint64_t v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v6 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 152);
  swift_release();
  swift_release();
  sub_1000869A4(v6, v5);
  sub_100015750(v3, v4, &qword_1009AC230);
  if (v1(v4, 1LL, v2) == 1)
  {
    sub_100015794(*(void *)(v0 + 176), &qword_1009AC230);
    uint64_t v7 = 1LL;
  }

  else
  {
    uint64_t v8 = *(void *)(v0 + 232);
    uint64_t v9 = *(void *)(v0 + 136);
    sub_10002218C(*(void *)(v0 + 176), v8, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_10002218C(v8, v9, type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v7 = 0LL;
  }

  uint64_t v11 = *(void *)(v0 + 240);
  uint64_t v10 = *(void *)(v0 + 248);
  uint64_t v12 = *(void *)(v0 + 232);
  uint64_t v14 = *(void *)(v0 + 200);
  uint64_t v13 = *(void *)(v0 + 208);
  uint64_t v16 = *(void *)(v0 + 184);
  uint64_t v15 = *(void *)(v0 + 192);
  uint64_t v20 = *(void *)(v0 + 176);
  uint64_t v17 = *(void *)(v0 + 136);
  uint64_t v18 = type metadata accessor for BeaconDetails(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v17, v7, 1LL, v18);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10066AB44()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 160LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 376LL));
  swift_release();
  return swift_task_switch(sub_10066ABA4, v1, 0LL);
}

uint64_t sub_10066ABA4()
{
  uint64_t v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v6 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 152);
  swift_release();
  swift_release();
  sub_1000869A4(v6, v5);
  sub_100015750(v3, v4, &qword_1009AC230);
  if (v1(v4, 1LL, v2) == 1)
  {
    sub_100015794(*(void *)(v0 + 192), &qword_1009AC230);
    uint64_t v7 = 1LL;
  }

  else
  {
    uint64_t v8 = *(void *)(v0 + 240);
    uint64_t v9 = *(void *)(v0 + 136);
    sub_10002218C(*(void *)(v0 + 192), v8, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_10002218C(v8, v9, type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v7 = 0LL;
  }

  uint64_t v11 = *(void *)(v0 + 240);
  uint64_t v10 = *(void *)(v0 + 248);
  uint64_t v12 = *(void *)(v0 + 232);
  uint64_t v14 = *(void *)(v0 + 200);
  uint64_t v13 = *(void *)(v0 + 208);
  uint64_t v16 = *(void *)(v0 + 184);
  uint64_t v15 = *(void *)(v0 + 192);
  uint64_t v20 = *(void *)(v0 + 176);
  uint64_t v17 = *(void *)(v0 + 136);
  uint64_t v18 = type metadata accessor for BeaconDetails(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v17, v7, 1LL, v18);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10066AD18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v12[2] = a1;
  v12[3] = a2;
  v12[4] = a3;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009B9310);
  OS_dispatch_queue.sync<A>(execute:)(sub_100407D10, v12, v5);
  uint64_t v6 = v13;
  uint64_t v7 = *(void *)(v13 + 16);
  uint64_t v8 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (v7)
  {
    sub_10001DC4C( v6 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)),  a4,  type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v10 = 0LL;
  }

  else
  {
    uint64_t v10 = 1LL;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a4, v10, 1LL, v8);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10066ADE4(uint64_t a1)
{
  v2[20] = a1;
  v2[21] = v1;
  unint64_t v3 = (*(void *)(*(void *)(sub_100004AEC(&qword_10099D8A0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[22] = swift_task_alloc(v3);
  v2[23] = swift_task_alloc(v3);
  uint64_t v4 = type metadata accessor for AccessoryCommand(0LL);
  v2[24] = v4;
  v2[25] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  v2[26] = v5;
  v2[27] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  v2[28] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[29] = v7;
  uint64_t v8 = *(void *)(v7 + 64);
  v2[30] = v8;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v2[31] = swift_task_alloc(v9);
  v2[32] = swift_task_alloc(v9);
  v2[33] = swift_task_alloc(v9);
  v2[34] = swift_task_alloc(v9);
  return swift_task_switch(sub_10066AEF0, v1, 0LL);
}

uint64_t sub_10066AEF0()
{
  if (qword_10099B7D0 != -1) {
    swift_once(&qword_10099B7D0, sub_100664770);
  }
  uint64_t v1 = (__int128 *)(v0 + 7);
  uint64_t v2 = v0 + 12;
  uint64_t v3 = v0[20];
  uint64_t v4 = v0[34];
  uint64_t v6 = v0[28];
  uint64_t v5 = v0[29];
  uint64_t v7 = type metadata accessor for Logger(0LL);
  v0[35] = v7;
  sub_10000A720(v7, (uint64_t)qword_1009B9B40);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[36] = v8;
  uint64_t v9 = v8(v4, v3, v6);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter(v10);
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = v0[34];
  uint64_t v14 = v0[28];
  if (v12)
  {
    uint64_t v23 = v0[29];
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v24 = swift_slowAlloc(64LL, -1LL);
    uint64_t v26 = v24;
    *(_DWORD *)uint64_t v15 = 136446723;
    v0[17] = sub_1003F11D4(0xD000000000000027LL, 0x800000010086C9A0LL, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 17, v0 + 18, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2160;
    v0[18] = 1752392040LL;
    uint64_t v2 = v0 + 12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 18, v0 + 19, v15 + 14, v15 + 22);
    *(_WORD *)(v15 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2081;
    uint64_t v16 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    v0[19] = sub_1003F11D4(v17, v18, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 19, v0 + 20, v15 + 24, v15 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v13, v14);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s for %{private,mask.hash}s", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy(v24, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    uint64_t v19 = v15;
    uint64_t v1 = (__int128 *)(v0 + 7);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(void, void))(v0[29] + 8LL))(v0[34], v0[28]);
  }

  uint64_t v20 = qword_10099B9E0;
  swift_retain();
  if (v20 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v2, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, (uint64_t)v1, (uint64_t *)&unk_10099FA80);
  if (v0[10])
  {
    sub_100012EC0(v1, (uint64_t)(v0 + 2));
    swift_release();
    sub_100012ED8(v0 + 2, v0[5]);
    uint64_t v25 = (uint64_t (__cdecl *)())((char *)&dword_10099C920 + dword_10099C920);
    uint64_t v22 = (void *)swift_task_alloc(unk_10099C924);
    v0[37] = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_10066B248;
    return v25();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10066B248(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 296LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 168LL);
  *(void *)(*(void *)v1 + 304LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10066B2A8, v3, 0LL);
}

uint64_t sub_10066B2A8()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 304))
  {
    uint64_t v2 = *(void *)(v0 + 168);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = *(void *)(v2 + 128);
    *(void *)(v0 + 31_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v3;
    return swift_task_switch(sub_10066B4AC, v3, 0LL);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B7C8 != -1) {
      swift_once(&qword_10099B7C8, sub_10066400C);
    }
    uint64_t v5 = sub_10000A720(*(void *)(v0 + 280), (uint64_t)qword_100A2B0F8);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "Missing OwnerCommandService to startAggressiveAdvertisement!",  v8,  2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    type metadata accessor for SPBTFindingSessionError(0LL);
    uint64_t v10 = v9;
    *(void *)(v0 + 128) = 4LL;
    unint64_t v11 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v12 = sub_100015C48( &qword_10099C148,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError,  (uint64_t)&unk_1007E318C);
    uint64_t v13 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 120), v0 + 128, v11, v10, v12);
    swift_willThrow(v13);
    uint64_t v14 = *(void *)(v0 + 264);
    uint64_t v16 = *(void *)(v0 + 248);
    uint64_t v15 = *(void *)(v0 + 256);
    uint64_t v17 = *(void *)(v0 + 216);
    uint64_t v18 = *(void *)(v0 + 200);
    uint64_t v20 = *(void *)(v0 + 176);
    uint64_t v19 = *(void *)(v0 + 184);
    swift_task_dealloc(*(void *)(v0 + 272));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10066B4AC()
{
  uint64_t v1 = v0[39];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[36];
  uint64_t v3 = v0[33];
  uint64_t v5 = v0[29];
  uint64_t v4 = v0[30];
  uint64_t v6 = v0[28];
  uint64_t v7 = v0[20];
  v0[40] = *(void *)(v1 + 136);
  v2(v3, v7, v6);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v8 + 24) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_10096FC60, v9 + v4, v8 | 7);
  v0[41] = v10;
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = v1;
  unint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v0[42] = v11;
  v11(v10 + v9, v3, v6);
  swift_retain();
  return swift_task_switch(sub_10066B564, 0LL, 0LL);
}

uint64_t sub_10066B564()
{
  uint64_t v2 = v0[40];
  uint64_t v1 = v0[41];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[43] = v3;
  void v3[2] = v2;
  v3[3] = sub_1001B2874;
  void v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[44] = v4;
  void *v4 = v0;
  v4[1] = sub_10066B60C;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[27],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100118954,  v3,  v0[26]);
}

uint64_t sub_10066B60C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 344LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 168LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 352LL));
  swift_release();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10066B680, v2, 0LL);
}

uint64_t sub_10066B680()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord(0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(v1, 1LL, v2) == 1)
  {
    sub_100015794(v1, (uint64_t *)&unk_1009A9C30);
    char v3 = 0;
  }

  else
  {
    sub_1005D3A0C();
    uint64_t v5 = v4;
    uint64_t v6 = SPBeaconTypeHele;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    if (v7 == v10 && v9 == v11) {
      char v3 = 1;
    }
    else {
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0LL);
    }
    uint64_t v13 = v0[27];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_100018C68(v13, type metadata accessor for OwnedBeaconRecord);
  }

  uint64_t v14 = (void (*)(uint64_t, uint64_t, uint64_t))v0[36];
  uint64_t v15 = v0[32];
  uint64_t v16 = v0[28];
  uint64_t v17 = v0[29];
  uint64_t v19 = v0[22];
  uint64_t v18 = v0[23];
  uint64_t v20 = v0[20];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v18, 1LL, 1LL, v16);
  v14(v15, v20, v16);
  sub_10001581C(v18, v19, &qword_10099D8A0);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v19, 1LL, v16);
  if ((_DWORD)v21 == 1)
  {
    uint64_t v23 = v0[22];
    uint64_t v22 = v0[23];
    UUID.init()(v21);
    sub_100015794(v22, &qword_10099D8A0);
    sub_100015794(v23, &qword_10099D8A0);
  }

  else
  {
    uint64_t v24 = (void (*)(uint64_t, uint64_t, uint64_t))v0[42];
    uint64_t v25 = v0[31];
    uint64_t v26 = v0[28];
    uint64_t v27 = v0[22];
    sub_100015794(v0[23], &qword_10099D8A0);
    v24(v25, v27, v26);
  }

  uint64_t v28 = (void (*)(uint64_t, uint64_t, uint64_t))v0[42];
  uint64_t v29 = v0[32];
  uint64_t v30 = v0[28];
  uint64_t v32 = (int *)v0[24];
  uint64_t v31 = v0[25];
  v28(v31, v0[31], v30);
  v28(v31 + v32[5], v29, v30);
  uint64_t v33 = v31 + v32[6];
  *(void *)uint64_t v33 = 120LL;
  *(_BYTE *)(v33 + 8) = 2;
  *(_BYTE *)(v31 + v32[7]) = v3 & 1;
  *(_BYTE *)(v31 + v32[8]) = 1;
  uint64_t v34 = (void *)swift_task_alloc(dword_1009BF5F4);
  v0[45] = v34;
  *uint64_t v34 = v0;
  v34[1] = sub_10066B8D8;
  return sub_1007702C8(v0[25]);
}

uint64_t sub_10066B8D8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 360);
  *(void *)(*v1 + 368) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_10066B9EC;
  }
  else {
    uint64_t v4 = sub_10066B93C;
  }
  return swift_task_switch(v4, *(void *)(v2 + 168), 0LL);
}

uint64_t sub_10066B93C()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v4 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v5 = *(void *)(v0 + 216);
  uint64_t v6 = *(void *)(v0 + 200);
  uint64_t v8 = *(void *)(v0 + 176);
  uint64_t v7 = *(void *)(v0 + 184);
  swift_release();
  sub_100018C68(v6, type metadata accessor for AccessoryCommand);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10066B9EC()
{
  uint64_t v1 = *(void *)(v0 + 200);
  swift_release();
  sub_100018C68(v1, type metadata accessor for AccessoryCommand);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v4 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v5 = *(void *)(v0 + 216);
  uint64_t v6 = *(void *)(v0 + 200);
  uint64_t v8 = *(void *)(v0 + 176);
  uint64_t v7 = *(void *)(v0 + 184);
  swift_task_dealloc(*(void *)(v0 + 272));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10066BA9C(uint64_t a1)
{
  v2[22] = a1;
  v2[23] = v1;
  unint64_t v3 = (*(void *)(*(void *)(sub_100004AEC(&qword_10099D8A0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[24] = swift_task_alloc(v3);
  v2[25] = swift_task_alloc(v3);
  uint64_t v4 = type metadata accessor for AccessoryCommand(0LL);
  v2[26] = v4;
  v2[27] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  v2[28] = v5;
  v2[29] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  v2[30] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[31] = v7;
  uint64_t v8 = *(void *)(v7 + 64);
  v2[32] = v8;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v2[33] = swift_task_alloc(v9);
  v2[34] = swift_task_alloc(v9);
  v2[35] = swift_task_alloc(v9);
  v2[36] = swift_task_alloc(v9);
  v2[37] = swift_task_alloc(v9);
  return swift_task_switch(sub_10066BBB4, v1, 0LL);
}

uint64_t sub_10066BBB4()
{
  if (qword_10099B7D0 != -1) {
    swift_once(&qword_10099B7D0, sub_100664770);
  }
  uint64_t v1 = (__int128 *)(v0 + 7);
  uint64_t v2 = v0 + 12;
  uint64_t v3 = v0[22];
  uint64_t v4 = v0[37];
  uint64_t v6 = v0[30];
  uint64_t v5 = v0[31];
  uint64_t v7 = type metadata accessor for Logger(0LL);
  v0[38] = v7;
  v0[39] = sub_10000A720(v7, (uint64_t)qword_1009B9B40);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[40] = v8;
  uint64_t v9 = v8(v4, v3, v6);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter(v10);
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = v0[37];
  uint64_t v14 = v0[30];
  if (v12)
  {
    os_log_type_t type = v11;
    uint64_t v24 = v0[31];
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v25 = swift_slowAlloc(64LL, -1LL);
    uint64_t v28 = v25;
    *(_DWORD *)uint64_t v15 = 136446723;
    v0[19] = sub_1003F11D4(0xD000000000000026LL, 0x800000010086C970LL, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 19, v0 + 20, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2160;
    v0[20] = 1752392040LL;
    uint64_t v2 = v0 + 12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 20, v0 + 21, v15 + 14, v15 + 22);
    *(_WORD *)(v15 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2081;
    uint64_t v16 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    v0[21] = sub_1003F11D4(v17, v18, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 21, v0 + 22, v15 + 24, v15 + 32);
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v19(v13, v14);
    _os_log_impl((void *)&_mh_execute_header, v10, type, "%{public}s for %{private,mask.hash}s", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy(v25, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    uint64_t v20 = v15;
    uint64_t v1 = (__int128 *)(v0 + 7);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  else
  {
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v0[31] + 8LL);
    v19(v0[37], v0[30]);
  }

  v0[41] = v19;
  uint64_t v21 = qword_10099B9E0;
  swift_retain();
  if (v21 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v2, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, (uint64_t)v1, (uint64_t *)&unk_10099FA80);
  if (v0[10])
  {
    sub_100012EC0(v1, (uint64_t)(v0 + 2));
    swift_release();
    sub_100012ED8(v0 + 2, v0[5]);
    uint64_t v27 = (uint64_t (__cdecl *)())((char *)&dword_10099C920 + dword_10099C920);
    uint64_t v23 = (void *)swift_task_alloc(unk_10099C924);
    v0[42] = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_10066BF14;
    return v27();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10066BF14(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 336LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 184LL);
  *(void *)(*(void *)v1 + 344LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10066BF74, v3, 0LL);
}

uint64_t sub_10066BF74()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 344))
  {
    uint64_t v2 = *(void *)(v0 + 184);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = *(void *)(v2 + 128);
    *(void *)(v0 + 35_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = v3;
    return swift_task_switch(sub_10066C184, v3, 0LL);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B7C8 != -1) {
      swift_once(&qword_10099B7C8, sub_10066400C);
    }
    uint64_t v5 = sub_10000A720(*(void *)(v0 + 304), (uint64_t)qword_100A2B0F8);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "Missing OwnerCommandService to startAggressiveAdvertisement!",  v8,  2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    type metadata accessor for SPBTFindingSessionError(0LL);
    uint64_t v10 = v9;
    *(void *)(v0 + 128) = 4LL;
    unint64_t v11 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v12 = sub_100015C48( &qword_10099C148,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError,  (uint64_t)&unk_1007E318C);
    uint64_t v13 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 120), v0 + 128, v11, v10, v12);
    swift_willThrow(v13);
    uint64_t v14 = *(void *)(v0 + 288);
    uint64_t v16 = *(void *)(v0 + 272);
    uint64_t v15 = *(void *)(v0 + 280);
    uint64_t v17 = *(void *)(v0 + 264);
    uint64_t v18 = *(void *)(v0 + 232);
    uint64_t v19 = *(void *)(v0 + 216);
    uint64_t v21 = *(void *)(v0 + 192);
    uint64_t v20 = *(void *)(v0 + 200);
    swift_task_dealloc(*(void *)(v0 + 296));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10066C184()
{
  uint64_t v1 = v0[44];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[40];
  uint64_t v3 = v0[36];
  uint64_t v5 = v0[31];
  uint64_t v4 = v0[32];
  uint64_t v6 = v0[30];
  uint64_t v7 = v0[22];
  v0[45] = *(void *)(v1 + 136);
  v2(v3, v7, v6);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v8 + 24) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_10096FC38, v9 + v4, v8 | 7);
  v0[46] = v10;
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = v1;
  unint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v0[47] = v11;
  v11(v10 + v9, v3, v6);
  swift_retain();
  return swift_task_switch(sub_10066C23C, 0LL, 0LL);
}

uint64_t sub_10066C23C()
{
  uint64_t v2 = v0[45];
  uint64_t v1 = v0[46];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[48] = v3;
  void v3[2] = v2;
  v3[3] = sub_1001B2874;
  void v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[49] = v4;
  void *v4 = v0;
  v4[1] = sub_10066C2E4;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[29],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100117968,  v3,  v0[28]);
}

uint64_t sub_10066C2E4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 384LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 184LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 392LL));
  swift_release();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10066C358, v2, 0LL);
}

uint64_t sub_10066C358()
{
  uint64_t v1 = v0[29];
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord(0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(v1, 1LL, v2) == 1)
  {
    sub_100015794(v1, (uint64_t *)&unk_1009A9C30);
    char v3 = 0;
  }

  else
  {
    sub_1005D3A0C();
    uint64_t v5 = v4;
    uint64_t v6 = SPBeaconTypeHele;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    if (v7 == v10 && v9 == v11) {
      char v3 = 1;
    }
    else {
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0LL);
    }
    uint64_t v13 = v0[29];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_100018C68(v13, type metadata accessor for OwnedBeaconRecord);
  }

  uint64_t v14 = (void (*)(uint64_t, uint64_t, uint64_t))v0[40];
  uint64_t v15 = v0[35];
  uint64_t v16 = v0[30];
  uint64_t v17 = v0[31];
  uint64_t v19 = v0[24];
  uint64_t v18 = v0[25];
  uint64_t v20 = v0[22];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v18, 1LL, 1LL, v16);
  v14(v15, v20, v16);
  sub_10001581C(v18, v19, &qword_10099D8A0);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v19, 1LL, v16);
  if ((_DWORD)v21 == 1)
  {
    uint64_t v23 = v0[24];
    uint64_t v22 = v0[25];
    UUID.init()(v21);
    sub_100015794(v22, &qword_10099D8A0);
    sub_100015794(v23, &qword_10099D8A0);
  }

  else
  {
    uint64_t v24 = (void (*)(uint64_t, uint64_t, uint64_t))v0[47];
    uint64_t v25 = v0[34];
    uint64_t v26 = v0[30];
    uint64_t v27 = v0[24];
    sub_100015794(v0[25], &qword_10099D8A0);
    v24(v25, v27, v26);
  }

  uint64_t v28 = (void (*)(uint64_t, uint64_t, uint64_t))v0[47];
  uint64_t v29 = v0[35];
  uint64_t v30 = v0[30];
  uint64_t v32 = (int *)v0[26];
  uint64_t v31 = v0[27];
  v28(v31, v0[34], v30);
  v28(v31 + v32[5], v29, v30);
  uint64_t v33 = v31 + v32[6];
  *(void *)uint64_t v33 = 2LL;
  *(_BYTE *)(v33 + 8) = 3;
  *(_BYTE *)(v31 + v32[7]) = v3 & 1;
  *(_BYTE *)(v31 + v32[8]) = 1;
  uint64_t v34 = (void *)swift_task_alloc(dword_1009BF5F4);
  v0[50] = v34;
  *uint64_t v34 = v0;
  v34[1] = sub_10066C5B0;
  return sub_1007702C8(v0[27]);
}

uint64_t sub_10066C5B0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 400);
  *(void *)(*v1 + 408) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_10066C894;
  }
  else {
    uint64_t v4 = sub_10066C614;
  }
  return swift_task_switch(v4, *(void *)(v2 + 184), 0LL);
}

uint64_t sub_10066C614()
{
  uint64_t v1 = (*(uint64_t (**)(void, void, void))(v0 + 320))( *(void *)(v0 + 264),  *(void *)(v0 + 176),  *(void *)(v0 + 240));
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
    uint64_t v4 = *(void *)(v0 + 264);
    uint64_t v5 = *(void *)(v0 + 240);
    uint64_t v26 = *(void *)(v0 + 216);
    uint64_t v6 = swift_slowAlloc(22LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    *(void *)(v0 + 136) = 1752392040LL;
    uint64_t v27 = v7;
    *(_DWORD *)uint64_t v6 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2081;
    uint64_t v8 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter(v5, v8);
    *(void *)(v0 + 144) = sub_1003F11D4(v9, v10, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease();
    v25(v4, v5);
    _os_log_impl( (void *)&_mh_execute_header,  v2,  v3,  "Successfully stopped fast advertising for %{private,mask.hash}s.",  (uint8_t *)v6,  0x16u);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_release();

    uint64_t v11 = v26;
  }

  else
  {
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
    uint64_t v13 = *(void *)(v0 + 264);
    uint64_t v14 = *(void *)(v0 + 240);
    uint64_t v15 = *(void *)(v0 + 216);

    swift_release();
    v12(v13, v14);
    uint64_t v11 = v15;
  }

  sub_100018C68(v11, type metadata accessor for AccessoryCommand);
  uint64_t v16 = *(void *)(v0 + 288);
  uint64_t v18 = *(void *)(v0 + 272);
  uint64_t v17 = *(void *)(v0 + 280);
  uint64_t v19 = *(void *)(v0 + 264);
  uint64_t v20 = *(void *)(v0 + 232);
  uint64_t v21 = *(void *)(v0 + 216);
  uint64_t v23 = *(void *)(v0 + 192);
  uint64_t v22 = *(void *)(v0 + 200);
  swift_task_dealloc(*(void *)(v0 + 296));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10066C894()
{
  uint64_t v1 = *(void *)(v0 + 216);
  swift_release();
  sub_100018C68(v1, type metadata accessor for AccessoryCommand);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v4 = *(void *)(v0 + 272);
  uint64_t v3 = *(void *)(v0 + 280);
  uint64_t v5 = *(void *)(v0 + 264);
  uint64_t v6 = *(void *)(v0 + 232);
  uint64_t v7 = *(void *)(v0 + 216);
  uint64_t v9 = *(void *)(v0 + 192);
  uint64_t v8 = *(void *)(v0 + 200);
  swift_task_dealloc(*(void *)(v0 + 296));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10066C958()
{
  swift_release(*(void *)(v0 + 160));
  swift_release(*(void *)(v0 + 168));
  swift_release(*(void *)(v0 + 176));
  swift_bridgeObjectRelease(*(void *)(v0 + 192));
  swift_bridgeObjectRelease(*(void *)(v0 + 200));
  swift_bridgeObjectRelease(*(void *)(v0 + 208));
  swift_bridgeObjectRelease(*(void *)(v0 + 216));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_10066C9D4()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for BTFindingService()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd16BTFindingService);
}

uint64_t *initializeBufferWithCopyOfBuffer for BTFindingService.FastAdvertisementTracker( uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v3);
  return a1;
}

uint64_t *assignWithCopy for BTFindingService.FastAdvertisementTracker(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  return a1;
}

uint64_t *assignWithTake for BTFindingService.FastAdvertisementTracker(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for BTFindingService.FastAdvertisementTracker(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BTFindingService.FastAdvertisementTracker( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for BTFindingService.FastAdvertisementTracker()
{
  return &type metadata for BTFindingService.FastAdvertisementTracker;
}

uint64_t sub_10066CB7C()
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v0;
  return swift_task_switch(sub_10066CB94, v0, 0LL);
}

uint64_t sub_10066CB94()
{
  if (qword_10099B7C8 != -1) {
    swift_once(&qword_10099B7C8, sub_10066400C);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A2B0F8);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "BTFindingService: Starting up.", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  sub_100664C9C();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10066CC78(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100015C48( &qword_1009B9FE8,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for BTFindingService,  (uint64_t)&unk_100812740);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10066CCB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v5[2] = a4;
  void v5[3] = a5;
  uint64_t v8 = (void *)swift_task_alloc(dword_1009B9D4C);
  v5[4] = v8;
  *uint64_t v8 = v5;
  v8[1] = sub_10066CD1C;
  return sub_100665074(a2, a3);
}

uint64_t sub_10066CD1C()
{
  return swift_task_switch(sub_10066CD70, 0LL, 0LL);
}

uint64_t sub_10066CD70()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10066CDA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = a3;
  uint64_t v36 = *v3;
  uint64_t v37 = a2;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v35 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v32 - v9;
  if (qword_10099B7D0 != -1) {
    swift_once(&qword_10099B7D0, sub_100664770);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_10000A720(v11, (uint64_t)qword_1009B9B40);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v13 = v12(v10, a1, v5);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc(22LL, -1LL);
    uint64_t v33 = v12;
    uint64_t v17 = v16;
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v17 = 141558275;
    uint64_t v40 = 1752392040LL;
    uint64_t v41 = v18;
    uint64_t v34 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v17 + 4, v17 + 12);
    *(_WORD *)(v17 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2081;
    uint64_t v32 = v17 + 14;
    uint64_t v19 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v5, v19);
    uint64_t v40 = sub_1003F11D4(v20, v21, &v41);
    a1 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v32, v17 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
    _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "Start BT Finding for beacon %{private,mask.hash}s",  (uint8_t *)v17,  0x16u);
    swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    uint64_t v22 = v17;
    uint64_t v12 = v33;
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  }

  type metadata accessor for Transaction(0LL);
  uint64_t v23 = v35;
  v12(v35, a1, v5);
  uint64_t v24 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v25 = (v24 + 24) & ~v24;
  unint64_t v26 = (v7 + v25 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v27 = (v26 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v28 = swift_allocObject(&unk_10096FEE0, v27 + 8, v24 | 7);
  *(void *)(v28 + swift_weakDestroy(v0 + 16) = v38;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v28 + v25, v23, v5);
  uint64_t v29 = (void *)(v28 + v26);
  uint64_t v30 = v39;
  *uint64_t v29 = v37;
  v29[1] = v30;
  *(void *)(v28 + v2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = v36;
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)("BTFindingService.startBTFinding", 31LL, 2LL, &unk_1009BA0D0, v28);
  return swift_release();
}

uint64_t sub_10066D0D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[4] = a3;
  void v4[5] = a4;
  void v4[2] = a1;
  void v4[3] = a2;
  uint64_t v6 = (void *)swift_task_alloc(dword_1009B9D54);
  void v4[6] = v6;
  *uint64_t v6 = v4;
  v6[1] = sub_10066D134;
  return sub_100665868(a2);
}

uint64_t sub_10066D134()
{
  uint64_t v2 = (*v1)[6];
  uint64_t v3 = *v1;
  v3[7] = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_10066D38C, 0LL, 0LL);
  }
  uint64_t v5 = (uint64_t **)swift_task_alloc(dword_1009B9D84);
  v3[8] = (uint64_t)v5;
  *uint64_t v5 = v3;
  v5[1] = (uint64_t *)sub_10066D1C4;
  return sub_10066ADE4(v3[3]);
}

uint64_t sub_10066D1C4()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 64LL);
  *(void *)(*(void *)v1 + 72LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_10066D3E4;
  }
  else {
    uint64_t v3 = sub_10066D228;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10066D228()
{
  if (qword_10099B7D0 != -1) {
    swift_once(&qword_10099B7D0, sub_100664770);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_1009B9B40);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Successfully started aggressive advertising.", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = (void *)swift_task_alloc(dword_1009B9D5C);
  *(void *)(v0 + 80) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10066D328;
  return sub_10066655C(*(void *)(v0 + 24));
}

uint64_t sub_10066D328()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 80LL);
  *(void *)(*(void *)v1 + 88LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_10066D43C;
  }
  else {
    uint64_t v3 = sub_10065E8D4;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10066D38C()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void (**)(uint64_t))(v0 + 32);
  swift_errorRetain(v1);
  v2(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10066D3E4()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void (**)(uint64_t))(v0 + 32);
  swift_errorRetain(v1);
  v2(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10066D43C()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void (**)(uint64_t))(v0 + 32);
  swift_errorRetain(v1);
  v2(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10066D494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = a3;
  uint64_t v36 = *v3;
  uint64_t v37 = a2;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v35 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v32 - v9;
  if (qword_10099B7D0 != -1) {
    swift_once(&qword_10099B7D0, sub_100664770);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_10000A720(v11, (uint64_t)qword_1009B9B40);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v13 = v12(v10, a1, v5);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc(22LL, -1LL);
    uint64_t v33 = v12;
    uint64_t v17 = v16;
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v17 = 141558275;
    uint64_t v40 = 1752392040LL;
    uint64_t v41 = v18;
    uint64_t v34 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v17 + 4, v17 + 12);
    *(_WORD *)(v17 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2081;
    uint64_t v32 = v17 + 14;
    uint64_t v19 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v5, v19);
    uint64_t v40 = sub_1003F11D4(v20, v21, &v41);
    a1 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v32, v17 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
    _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "Stop BT Finding for beacon %{private,mask.hash}s",  (uint8_t *)v17,  0x16u);
    swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    uint64_t v22 = v17;
    uint64_t v12 = v33;
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  }

  type metadata accessor for Transaction(0LL);
  uint64_t v23 = v35;
  v12(v35, a1, v5);
  uint64_t v24 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v25 = (v24 + 24) & ~v24;
  unint64_t v26 = (v7 + v25 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v27 = (v26 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v28 = swift_allocObject(&unk_10096FE90, v27 + 8, v24 | 7);
  *(void *)(v28 + swift_weakDestroy(v0 + 16) = v38;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v28 + v25, v23, v5);
  uint64_t v29 = (void *)(v28 + v26);
  uint64_t v30 = v39;
  *uint64_t v29 = v37;
  v29[1] = v30;
  *(void *)(v28 + v2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7) = v36;
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)("BeaconManagerService.stopBTFinding", 34LL, 2LL, &unk_1009BA0C0, v28);
  return swift_release();
}

uint64_t sub_10066D7C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[4] = a3;
  void v4[5] = a4;
  void v4[2] = a1;
  void v4[3] = a2;
  uint64_t v6 = (void *)swift_task_alloc(dword_1009B9D8C);
  void v4[6] = v6;
  *uint64_t v6 = v4;
  v6[1] = sub_10066D824;
  return sub_10066BA9C(a2);
}

uint64_t sub_10066D824()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48LL);
  *(void *)(*(void *)v1 + 56LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_10066D38C;
  }
  else {
    uint64_t v3 = sub_10066D888;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10066D888()
{
  if (qword_10099B7D0 != -1) {
    swift_once(&qword_10099B7D0, sub_100664770);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_1009B9B40);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Successfully stopped aggressive advertising.", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = (void *)swift_task_alloc(dword_1009B9D64);
  *(void *)(v0 + 64) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10066D988;
  return sub_100668E08(*(void *)(v0 + 24));
}

uint64_t sub_10066D988()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 64LL);
  *(void *)(*(void *)v1 + 72LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_10066D3E4;
  }
  else {
    uint64_t v3 = sub_10065E8D4;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10066D9EC(void *a1, uint64_t a2)
{
  id v4 = [a1 invalidationHandler];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = swift_allocObject(&unk_100970098, 24LL, 7LL);
    *(void *)(v6 + swift_weakDestroy(v0 + 16) = v5;
    uint64_t v7 = sub_1006734A0;
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v6 = 0LL;
  }

  uint64_t v8 = (uint64_t *)(a2 + 32);
  swift_beginAccess(a2 + 32, v85, 0LL, 0LL);
  uint64_t v9 = *(void *)(a2 + 32);
  id v10 = a1;
  swift_bridgeObjectRetain(v9);
  sub_10067255C(v11, (uint64_t)v10, &qword_1009A0C08, &qword_1009A0C10);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();

  if (v13)
  {
    if (qword_10099B898 != -1) {
      swift_once(&qword_10099B898, sub_1006DA610);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    sub_10000A720(v14, (uint64_t)qword_100A2B2C0);
    id v15 = v10;
    swift_retain_n(a2, 2LL);
    id v16 = v15;
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.info.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      os_log_type_t type = v18;
      uint64_t v19 = swift_slowAlloc(22LL, -1LL);
      uint64_t v72 = (void *)swift_slowAlloc(8LL, -1LL);
      os_log_t log = (os_log_t)swift_slowAlloc(32LL, -1LL);
      uint64_t v86 = (uint64_t)log;
      *(_DWORD *)uint64_t v19 = 136446466;
      v83[0] = 0xE100000000000000LL;
      uint64_t v84 = a2;
      uint64_t v78 = (uint64_t)v7;
      uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009BA0F0);
      uint64_t v21 = sub_1000372EC(&qword_1009B5B00, (uint64_t *)&unk_1009BA0F0, (uint64_t)&unk_100817578);
      v22._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v20, v21);
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v23._countAndFlagsBits = 8250LL;
      v23._object = (void *)0xE200000000000000LL;
      String.append(_:)(v23);
      v24._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v20, v21);
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = 62LL;
      v25._object = (void *)0xE100000000000000LL;
      String.append(_:)(v25);
      swift_release();
      aBlocunint64_t k = sub_1003F11D4(60LL, 0xE100000000000000LL, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v19 + 4, v19 + 12);
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2112;
      aBlocunint64_t k = (uint64_t)v16;
      id v26 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v19 + 14, v19 + 22);
      void *v72 = v16;

      _os_log_impl( (void *)&_mh_execute_header,  v17,  type,  "%{public}s: Already have a session for %@",  (uint8_t *)v19,  0x16u);
      uint64_t v27 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v72, 1LL, v27);
      swift_slowDealloc(v72, -1LL, -1LL);
      swift_arrayDestroy(log, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(log, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);

      sub_10002214C(v78, v6);
    }

    else
    {

      swift_release_n(a2, 2LL);
      sub_10002214C((uint64_t)v7, v6);
    }
  }

  else
  {
    uint64_t v28 = sub_100004AEC(&qword_1009A0C08);
    swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
    id v29 = v10;
    uint64_t v30 = XPCSession.init(connection:)();
    if (v30)
    {
      uint64_t v31 = v30;
      uint64_t v32 = swift_allocObject(&unk_100970020, 24LL, 7LL);
      swift_weakInit(v32 + 16, a2);
      uint64_t v33 = (void *)swift_allocObject(&unk_100970048, 48LL, 7LL);
      v33[2] = v32;
      v33[3] = v29;
      v33[4] = v7;
      v33[5] = v6;
      v83[3] = (unint64_t)sub_1006730A8;
      v83[4] = (unint64_t)v33;
      aBlocunint64_t k = (uint64_t)_NSConcreteStackBlock;
      v83[0] = 1107296256LL;
      v83[1] = (unint64_t)sub_1001C31E8;
      v83[2] = (unint64_t)&unk_100970060;
      uint64_t v34 = _Block_copy(&aBlock);
      id v35 = v29;
      sub_1000372DC((uint64_t)v7, v6);
      swift_release();
      [v35 setInvalidationHandler:v34];
      _Block_release(v34);
      uint64_t v36 = *(void *)(a2 + 32);
      if ((v36 & 0xC000000000000001LL) != 0)
      {
        if (v36 < 0) {
          uint64_t v37 = *(void *)(a2 + 32);
        }
        else {
          uint64_t v37 = v36 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(*(void *)(a2 + 32));
        uint64_t v38 = __CocoaSet.count.getter(v37);
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v38 = *(void *)(v36 + 16);
      }

      swift_beginAccess(a2 + 32, &aBlock, 33LL, 0LL);
      swift_retain();
      uint64_t v81 = v31;
      sub_1000BF764(&v86, v31);
      swift_endAccess(&aBlock);
      swift_release();
      if (qword_10099B898 != -1) {
        swift_once(&qword_10099B898, sub_1006DA610);
      }
      uint64_t v53 = type metadata accessor for Logger(0LL);
      sub_10000A720(v53, (uint64_t)qword_100A2B2C0);
      uint64_t v54 = swift_retain_n(a2, 3LL);
      id v55 = (os_log_s *)Logger.logObject.getter(v54);
      os_log_type_t v56 = static os_log_type_t.info.getter(v55);
      if (os_log_type_enabled(v55, v56))
      {
        os_log_type_t v71 = v56;
        uint64_t v79 = v7;
        uint64_t v57 = swift_slowAlloc(32LL, -1LL);
        uint64_t v75 = swift_slowAlloc(32LL, -1LL);
        uint64_t v86 = v75;
        *(_DWORD *)uint64_t v57 = 136446722;
        aBlocunint64_t k = 60LL;
        v83[0] = 0xE100000000000000LL;
        uint64_t v84 = a2;
        uint64_t v58 = a2;
        uint64_t v59 = sub_100004AEC((uint64_t *)&unk_1009BA0F0);
        uint64_t v60 = sub_1000372EC(&qword_1009B5B00, (uint64_t *)&unk_1009BA0F0, (uint64_t)&unk_100817578);
        v61._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v59, v60);
        String.append(_:)(v61);
        swift_bridgeObjectRelease();
        v62._countAndFlagsBits = 8250LL;
        v62._object = (void *)0xE200000000000000LL;
        String.append(_:)(v62);
        v63._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v59, v60);
        String.append(_:)(v63);
        swift_bridgeObjectRelease();
        v64._countAndFlagsBits = 62LL;
        v64._object = (void *)0xE100000000000000LL;
        String.append(_:)(v64);
        aBlocunint64_t k = sub_1003F11D4(aBlock, v83[0], &v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v57 + 4, v57 + 12);
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v57 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2048;
        aBlocunint64_t k = v38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v57 + 14, v57 + 22);
        *(_WORD *)(v57 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2048;
        uint64_t v65 = *(void *)(v58 + 32);
        if ((v65 & 0xC000000000000001LL) != 0)
        {
          if (v65 < 0) {
            uint64_t v66 = *(void *)(v58 + 32);
          }
          else {
            uint64_t v66 = v65 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain(*(void *)(v58 + 32));
          uint64_t v67 = __CocoaSet.count.getter(v66);
          swift_release();
          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v67 = *(void *)(v65 + 16);
          swift_release();
        }

        uint64_t v7 = v79;
        aBlocunint64_t k = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v57 + 24, v57 + 32);
        swift_release();
        _os_log_impl( (void *)&_mh_execute_header,  v55,  v71,  "%{public}s: Session count: %ld -> %ld",  (uint8_t *)v57,  0x20u);
        swift_arrayDestroy(v75, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v75, -1LL, -1LL);
        swift_slowDealloc(v57, -1LL, -1LL);
      }

      else
      {

        swift_release_n(a2, 3LL);
      }

      uint64_t v68 = *v8;
      uint64_t v13 = v81;
      if ((*v8 & 0xC000000000000001LL) != 0)
      {
        if (v68 < 0) {
          uint64_t v69 = *v8;
        }
        else {
          uint64_t v69 = v68 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(*v8);
        __CocoaSet.count.getter(v69);
      }

      else
      {
        swift_bridgeObjectRetain(*v8);
      }

      sub_10002214C((uint64_t)v7, v6);
      swift_bridgeObjectRelease();
    }

    else
    {
      if (qword_10099B898 != -1) {
        swift_once(&qword_10099B898, sub_1006DA610);
      }
      uint64_t v39 = type metadata accessor for Logger(0LL);
      sub_10000A720(v39, (uint64_t)qword_100A2B2C0);
      id v40 = v29;
      swift_retain_n(a2, 2LL);
      id v41 = v40;
      unint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
      os_log_type_t v43 = static os_log_type_t.error.getter(v42);
      if (os_log_type_enabled(v42, v43))
      {
        os_log_t loga = v42;
        uint64_t v44 = swift_slowAlloc(22LL, -1LL);
        uint64_t v74 = (void *)swift_slowAlloc(8LL, -1LL);
        uint64_t v80 = swift_slowAlloc(32LL, -1LL);
        uint64_t v86 = v80;
        *(_DWORD *)uint64_t v44 = 136446466;
        v83[0] = 0xE100000000000000LL;
        uint64_t v84 = a2;
        uint64_t v45 = sub_100004AEC((uint64_t *)&unk_1009BA0F0);
        uint64_t v46 = sub_1000372EC(&qword_1009B5B00, (uint64_t *)&unk_1009BA0F0, (uint64_t)&unk_100817578);
        v47._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v45, v46);
        String.append(_:)(v47);
        swift_bridgeObjectRelease();
        v48._countAndFlagsBits = 8250LL;
        v48._object = (void *)0xE200000000000000LL;
        String.append(_:)(v48);
        v49._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v45, v46);
        String.append(_:)(v49);
        swift_bridgeObjectRelease();
        v50._countAndFlagsBits = 62LL;
        v50._object = (void *)0xE100000000000000LL;
        String.append(_:)(v50);
        swift_release();
        aBlocunint64_t k = sub_1003F11D4(60LL, 0xE100000000000000LL, &v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v44 + 4, v44 + 12);
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v44 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2112;
        aBlocunint64_t k = (uint64_t)v41;
        id v51 = v41;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v44 + 14, v44 + 22);
        void *v74 = v41;

        _os_log_impl( (void *)&_mh_execute_header,  loga,  v43,  "%{public}s: Failed to make XPCSession from %@",  (uint8_t *)v44,  0x16u);
        uint64_t v52 = sub_100004AEC((uint64_t *)&unk_10099FB20);
        swift_arrayDestroy(v74, 1LL, v52);
        swift_slowDealloc(v74, -1LL, -1LL);
        swift_arrayDestroy(v80, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v80, -1LL, -1LL);
        swift_slowDealloc(v44, -1LL, -1LL);

        sub_10002214C((uint64_t)v7, v6);
      }

      else
      {
        swift_release();
        sub_10002214C((uint64_t)v7, v6);

        swift_release();
      }

      return 0LL;
    }
  }

  return v13;
}

uint64_t sub_10066E51C(void *a1, uint64_t a2)
{
  id v4 = [a1 invalidationHandler];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = swift_allocObject(&unk_10096FF80, 24LL, 7LL);
    *(void *)(v6 + swift_weakDestroy(v0 + 16) = v5;
    uint64_t v7 = sub_1006734A0;
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v6 = 0LL;
  }

  uint64_t v8 = (uint64_t *)(a2 + 32);
  swift_beginAccess(a2 + 32, v85, 0LL, 0LL);
  uint64_t v9 = *(void *)(a2 + 32);
  id v10 = a1;
  swift_bridgeObjectRetain(v9);
  sub_10067255C(v11, (uint64_t)v10, (uint64_t *)&unk_1009BA0E0, &qword_1009A0B90);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();

  if (v13)
  {
    if (qword_10099B898 != -1) {
      swift_once(&qword_10099B898, sub_1006DA610);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    sub_10000A720(v14, (uint64_t)qword_100A2B2C0);
    id v15 = v10;
    swift_retain_n(a2, 2LL);
    id v16 = v15;
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.info.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      os_log_type_t type = v18;
      uint64_t v19 = swift_slowAlloc(22LL, -1LL);
      uint64_t v72 = (void *)swift_slowAlloc(8LL, -1LL);
      os_log_t log = (os_log_t)swift_slowAlloc(32LL, -1LL);
      uint64_t v86 = (uint64_t)log;
      *(_DWORD *)uint64_t v19 = 136446466;
      v83[0] = 0xE100000000000000LL;
      uint64_t v84 = a2;
      uint64_t v78 = (uint64_t)v7;
      uint64_t v20 = sub_100004AEC(&qword_1009AE530);
      uint64_t v21 = sub_1000372EC((unint64_t *)&unk_1009B5AF0, &qword_1009AE530, (uint64_t)&unk_100817578);
      v22._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v20, v21);
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v23._countAndFlagsBits = 8250LL;
      v23._object = (void *)0xE200000000000000LL;
      String.append(_:)(v23);
      v24._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v20, v21);
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = 62LL;
      v25._object = (void *)0xE100000000000000LL;
      String.append(_:)(v25);
      swift_release();
      aBlocunint64_t k = sub_1003F11D4(60LL, 0xE100000000000000LL, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v19 + 4, v19 + 12);
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2112;
      aBlocunint64_t k = (uint64_t)v16;
      id v26 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v19 + 14, v19 + 22);
      void *v72 = v16;

      _os_log_impl( (void *)&_mh_execute_header,  v17,  type,  "%{public}s: Already have a session for %@",  (uint8_t *)v19,  0x16u);
      uint64_t v27 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v72, 1LL, v27);
      swift_slowDealloc(v72, -1LL, -1LL);
      swift_arrayDestroy(log, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(log, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);

      sub_10002214C(v78, v6);
    }

    else
    {

      swift_release_n(a2, 2LL);
      sub_10002214C((uint64_t)v7, v6);
    }
  }

  else
  {
    uint64_t v28 = sub_100004AEC((uint64_t *)&unk_1009BA0E0);
    swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
    id v29 = v10;
    uint64_t v30 = XPCSession.init(connection:)();
    if (v30)
    {
      uint64_t v31 = v30;
      uint64_t v32 = swift_allocObject(&unk_10096FF08, 24LL, 7LL);
      swift_weakInit(v32 + 16, a2);
      uint64_t v33 = (void *)swift_allocObject(&unk_10096FF30, 48LL, 7LL);
      v33[2] = v32;
      v33[3] = v29;
      v33[4] = v7;
      v33[5] = v6;
      v83[3] = (unint64_t)sub_100673018;
      v83[4] = (unint64_t)v33;
      aBlocunint64_t k = (uint64_t)_NSConcreteStackBlock;
      v83[0] = 1107296256LL;
      v83[1] = (unint64_t)sub_1001C31E8;
      v83[2] = (unint64_t)&unk_10096FF48;
      uint64_t v34 = _Block_copy(&aBlock);
      id v35 = v29;
      sub_1000372DC((uint64_t)v7, v6);
      swift_release();
      [v35 setInvalidationHandler:v34];
      _Block_release(v34);
      uint64_t v36 = *(void *)(a2 + 32);
      if ((v36 & 0xC000000000000001LL) != 0)
      {
        if (v36 < 0) {
          uint64_t v37 = *(void *)(a2 + 32);
        }
        else {
          uint64_t v37 = v36 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(*(void *)(a2 + 32));
        uint64_t v38 = __CocoaSet.count.getter(v37);
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v38 = *(void *)(v36 + 16);
      }

      swift_beginAccess(a2 + 32, &aBlock, 33LL, 0LL);
      swift_retain();
      uint64_t v81 = v31;
      sub_1000C0DF0(&v86, v31);
      swift_endAccess(&aBlock);
      swift_release();
      if (qword_10099B898 != -1) {
        swift_once(&qword_10099B898, sub_1006DA610);
      }
      uint64_t v53 = type metadata accessor for Logger(0LL);
      sub_10000A720(v53, (uint64_t)qword_100A2B2C0);
      uint64_t v54 = swift_retain_n(a2, 3LL);
      id v55 = (os_log_s *)Logger.logObject.getter(v54);
      os_log_type_t v56 = static os_log_type_t.info.getter(v55);
      if (os_log_type_enabled(v55, v56))
      {
        os_log_type_t v71 = v56;
        uint64_t v79 = v7;
        uint64_t v57 = swift_slowAlloc(32LL, -1LL);
        uint64_t v75 = swift_slowAlloc(32LL, -1LL);
        uint64_t v86 = v75;
        *(_DWORD *)uint64_t v57 = 136446722;
        aBlocunint64_t k = 60LL;
        v83[0] = 0xE100000000000000LL;
        uint64_t v84 = a2;
        uint64_t v58 = a2;
        uint64_t v59 = sub_100004AEC(&qword_1009AE530);
        uint64_t v60 = sub_1000372EC((unint64_t *)&unk_1009B5AF0, &qword_1009AE530, (uint64_t)&unk_100817578);
        v61._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v59, v60);
        String.append(_:)(v61);
        swift_bridgeObjectRelease();
        v62._countAndFlagsBits = 8250LL;
        v62._object = (void *)0xE200000000000000LL;
        String.append(_:)(v62);
        v63._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v59, v60);
        String.append(_:)(v63);
        swift_bridgeObjectRelease();
        v64._countAndFlagsBits = 62LL;
        v64._object = (void *)0xE100000000000000LL;
        String.append(_:)(v64);
        aBlocunint64_t k = sub_1003F11D4(aBlock, v83[0], &v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v57 + 4, v57 + 12);
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v57 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2048;
        aBlocunint64_t k = v38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v57 + 14, v57 + 22);
        *(_WORD *)(v57 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2048;
        uint64_t v65 = *(void *)(v58 + 32);
        if ((v65 & 0xC000000000000001LL) != 0)
        {
          if (v65 < 0) {
            uint64_t v66 = *(void *)(v58 + 32);
          }
          else {
            uint64_t v66 = v65 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain(*(void *)(v58 + 32));
          uint64_t v67 = __CocoaSet.count.getter(v66);
          swift_release();
          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v67 = *(void *)(v65 + 16);
          swift_release();
        }

        uint64_t v7 = v79;
        aBlocunint64_t k = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v57 + 24, v57 + 32);
        swift_release();
        _os_log_impl( (void *)&_mh_execute_header,  v55,  v71,  "%{public}s: Session count: %ld -> %ld",  (uint8_t *)v57,  0x20u);
        swift_arrayDestroy(v75, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v75, -1LL, -1LL);
        swift_slowDealloc(v57, -1LL, -1LL);
      }

      else
      {

        swift_release_n(a2, 3LL);
      }

      uint64_t v68 = *v8;
      uint64_t v13 = v81;
      if ((*v8 & 0xC000000000000001LL) != 0)
      {
        if (v68 < 0) {
          uint64_t v69 = *v8;
        }
        else {
          uint64_t v69 = v68 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(*v8);
        __CocoaSet.count.getter(v69);
      }

      else
      {
        swift_bridgeObjectRetain(*v8);
      }

      sub_10002214C((uint64_t)v7, v6);
      swift_bridgeObjectRelease();
    }

    else
    {
      if (qword_10099B898 != -1) {
        swift_once(&qword_10099B898, sub_1006DA610);
      }
      uint64_t v39 = type metadata accessor for Logger(0LL);
      sub_10000A720(v39, (uint64_t)qword_100A2B2C0);
      id v40 = v29;
      swift_retain_n(a2, 2LL);
      id v41 = v40;
      unint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
      os_log_type_t v43 = static os_log_type_t.error.getter(v42);
      if (os_log_type_enabled(v42, v43))
      {
        os_log_t loga = v42;
        uint64_t v44 = swift_slowAlloc(22LL, -1LL);
        uint64_t v74 = (void *)swift_slowAlloc(8LL, -1LL);
        uint64_t v80 = swift_slowAlloc(32LL, -1LL);
        uint64_t v86 = v80;
        *(_DWORD *)uint64_t v44 = 136446466;
        v83[0] = 0xE100000000000000LL;
        uint64_t v84 = a2;
        uint64_t v45 = sub_100004AEC(&qword_1009AE530);
        uint64_t v46 = sub_1000372EC((unint64_t *)&unk_1009B5AF0, &qword_1009AE530, (uint64_t)&unk_100817578);
        v47._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v45, v46);
        String.append(_:)(v47);
        swift_bridgeObjectRelease();
        v48._countAndFlagsBits = 8250LL;
        v48._object = (void *)0xE200000000000000LL;
        String.append(_:)(v48);
        v49._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v45, v46);
        String.append(_:)(v49);
        swift_bridgeObjectRelease();
        v50._countAndFlagsBits = 62LL;
        v50._object = (void *)0xE100000000000000LL;
        String.append(_:)(v50);
        swift_release();
        aBlocunint64_t k = sub_1003F11D4(60LL, 0xE100000000000000LL, &v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v44 + 4, v44 + 12);
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v44 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2112;
        aBlocunint64_t k = (uint64_t)v41;
        id v51 = v41;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v44 + 14, v44 + 22);
        void *v74 = v41;

        _os_log_impl( (void *)&_mh_execute_header,  loga,  v43,  "%{public}s: Failed to make XPCSession from %@",  (uint8_t *)v44,  0x16u);
        uint64_t v52 = sub_100004AEC((uint64_t *)&unk_10099FB20);
        swift_arrayDestroy(v74, 1LL, v52);
        swift_slowDealloc(v74, -1LL, -1LL);
        swift_arrayDestroy(v80, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v80, -1LL, -1LL);
        swift_slowDealloc(v44, -1LL, -1LL);

        sub_10002214C((uint64_t)v7, v6);
      }

      else
      {
        swift_release();
        sub_10002214C((uint64_t)v7, v6);

        swift_release();
      }

      return 0LL;
    }
  }

  return v13;
}

uint64_t sub_10066F04C(void *a1, uint64_t a2)
{
  id v4 = [a1 invalidationHandler];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = swift_allocObject(&unk_1009701B0, 24LL, 7LL);
    *(void *)(v6 + swift_weakDestroy(v0 + 16) = v5;
    uint64_t v7 = sub_1006734A0;
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v6 = 0LL;
  }

  uint64_t v8 = (uint64_t *)(a2 + 32);
  swift_beginAccess(a2 + 32, v85, 0LL, 0LL);
  uint64_t v9 = *(void *)(a2 + 32);
  id v10 = a1;
  swift_bridgeObjectRetain(v9);
  sub_10067255C(v11, (uint64_t)v10, (uint64_t *)&unk_1009A0080, (unint64_t *)&unk_1009AC330);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();

  if (v13)
  {
    if (qword_10099B898 != -1) {
      swift_once(&qword_10099B898, sub_1006DA610);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    sub_10000A720(v14, (uint64_t)qword_100A2B2C0);
    id v15 = v10;
    swift_retain_n(a2, 2LL);
    id v16 = v15;
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.info.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      os_log_type_t type = v18;
      uint64_t v19 = swift_slowAlloc(22LL, -1LL);
      uint64_t v72 = (void *)swift_slowAlloc(8LL, -1LL);
      os_log_t log = (os_log_t)swift_slowAlloc(32LL, -1LL);
      uint64_t v86 = (uint64_t)log;
      *(_DWORD *)uint64_t v19 = 136446466;
      v83[0] = 0xE100000000000000LL;
      uint64_t v84 = a2;
      uint64_t v78 = (uint64_t)v7;
      uint64_t v20 = sub_100004AEC(&qword_1009B5B08);
      uint64_t v21 = sub_1000372EC((unint64_t *)&unk_1009B5B10, &qword_1009B5B08, (uint64_t)&unk_100817578);
      v22._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v20, v21);
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v23._countAndFlagsBits = 8250LL;
      v23._object = (void *)0xE200000000000000LL;
      String.append(_:)(v23);
      v24._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v20, v21);
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = 62LL;
      v25._object = (void *)0xE100000000000000LL;
      String.append(_:)(v25);
      swift_release();
      aBlocunint64_t k = sub_1003F11D4(60LL, 0xE100000000000000LL, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v19 + 4, v19 + 12);
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2112;
      aBlocunint64_t k = (uint64_t)v16;
      id v26 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v19 + 14, v19 + 22);
      void *v72 = v16;

      _os_log_impl( (void *)&_mh_execute_header,  v17,  type,  "%{public}s: Already have a session for %@",  (uint8_t *)v19,  0x16u);
      uint64_t v27 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v72, 1LL, v27);
      swift_slowDealloc(v72, -1LL, -1LL);
      swift_arrayDestroy(log, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(log, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);

      sub_10002214C(v78, v6);
    }

    else
    {

      swift_release_n(a2, 2LL);
      sub_10002214C((uint64_t)v7, v6);
    }
  }

  else
  {
    uint64_t v28 = sub_100004AEC((uint64_t *)&unk_1009A0080);
    swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
    id v29 = v10;
    uint64_t v30 = XPCSession.init(connection:)();
    if (v30)
    {
      uint64_t v31 = v30;
      uint64_t v32 = swift_allocObject(&unk_100970138, 24LL, 7LL);
      swift_weakInit(v32 + 16, a2);
      uint64_t v33 = (void *)swift_allocObject(&unk_100970160, 48LL, 7LL);
      v33[2] = v32;
      v33[3] = v29;
      v33[4] = v7;
      v33[5] = v6;
      v83[3] = (unint64_t)sub_1006730F0;
      v83[4] = (unint64_t)v33;
      aBlocunint64_t k = (uint64_t)_NSConcreteStackBlock;
      v83[0] = 1107296256LL;
      v83[1] = (unint64_t)sub_1001C31E8;
      v83[2] = (unint64_t)&unk_100970178;
      uint64_t v34 = _Block_copy(&aBlock);
      id v35 = v29;
      sub_1000372DC((uint64_t)v7, v6);
      swift_release();
      [v35 setInvalidationHandler:v34];
      _Block_release(v34);
      uint64_t v36 = *(void *)(a2 + 32);
      if ((v36 & 0xC000000000000001LL) != 0)
      {
        if (v36 < 0) {
          uint64_t v37 = *(void *)(a2 + 32);
        }
        else {
          uint64_t v37 = v36 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(*(void *)(a2 + 32));
        uint64_t v38 = __CocoaSet.count.getter(v37);
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v38 = *(void *)(v36 + 16);
      }

      swift_beginAccess(a2 + 32, &aBlock, 33LL, 0LL);
      swift_retain();
      uint64_t v81 = v31;
      sub_1000C122C(&v86, v31);
      swift_endAccess(&aBlock);
      swift_release();
      if (qword_10099B898 != -1) {
        swift_once(&qword_10099B898, sub_1006DA610);
      }
      uint64_t v53 = type metadata accessor for Logger(0LL);
      sub_10000A720(v53, (uint64_t)qword_100A2B2C0);
      uint64_t v54 = swift_retain_n(a2, 3LL);
      id v55 = (os_log_s *)Logger.logObject.getter(v54);
      os_log_type_t v56 = static os_log_type_t.info.getter(v55);
      if (os_log_type_enabled(v55, v56))
      {
        os_log_type_t v71 = v56;
        uint64_t v79 = v7;
        uint64_t v57 = swift_slowAlloc(32LL, -1LL);
        uint64_t v75 = swift_slowAlloc(32LL, -1LL);
        uint64_t v86 = v75;
        *(_DWORD *)uint64_t v57 = 136446722;
        aBlocunint64_t k = 60LL;
        v83[0] = 0xE100000000000000LL;
        uint64_t v84 = a2;
        uint64_t v58 = a2;
        uint64_t v59 = sub_100004AEC(&qword_1009B5B08);
        uint64_t v60 = sub_1000372EC((unint64_t *)&unk_1009B5B10, &qword_1009B5B08, (uint64_t)&unk_100817578);
        v61._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v59, v60);
        String.append(_:)(v61);
        swift_bridgeObjectRelease();
        v62._countAndFlagsBits = 8250LL;
        v62._object = (void *)0xE200000000000000LL;
        String.append(_:)(v62);
        v63._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v59, v60);
        String.append(_:)(v63);
        swift_bridgeObjectRelease();
        v64._countAndFlagsBits = 62LL;
        v64._object = (void *)0xE100000000000000LL;
        String.append(_:)(v64);
        aBlocunint64_t k = sub_1003F11D4(aBlock, v83[0], &v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v57 + 4, v57 + 12);
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v57 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2048;
        aBlocunint64_t k = v38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v57 + 14, v57 + 22);
        *(_WORD *)(v57 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2048;
        uint64_t v65 = *(void *)(v58 + 32);
        if ((v65 & 0xC000000000000001LL) != 0)
        {
          if (v65 < 0) {
            uint64_t v66 = *(void *)(v58 + 32);
          }
          else {
            uint64_t v66 = v65 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain(*(void *)(v58 + 32));
          uint64_t v67 = __CocoaSet.count.getter(v66);
          swift_release();
          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v67 = *(void *)(v65 + 16);
          swift_release();
        }

        uint64_t v7 = v79;
        aBlocunint64_t k = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v57 + 24, v57 + 32);
        swift_release();
        _os_log_impl( (void *)&_mh_execute_header,  v55,  v71,  "%{public}s: Session count: %ld -> %ld",  (uint8_t *)v57,  0x20u);
        swift_arrayDestroy(v75, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v75, -1LL, -1LL);
        swift_slowDealloc(v57, -1LL, -1LL);
      }

      else
      {

        swift_release_n(a2, 3LL);
      }

      uint64_t v68 = *v8;
      uint64_t v13 = v81;
      if ((*v8 & 0xC000000000000001LL) != 0)
      {
        if (v68 < 0) {
          uint64_t v69 = *v8;
        }
        else {
          uint64_t v69 = v68 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(*v8);
        __CocoaSet.count.getter(v69);
      }

      else
      {
        swift_bridgeObjectRetain(*v8);
      }

      sub_10002214C((uint64_t)v7, v6);
      swift_bridgeObjectRelease();
    }

    else
    {
      if (qword_10099B898 != -1) {
        swift_once(&qword_10099B898, sub_1006DA610);
      }
      uint64_t v39 = type metadata accessor for Logger(0LL);
      sub_10000A720(v39, (uint64_t)qword_100A2B2C0);
      id v40 = v29;
      swift_retain_n(a2, 2LL);
      id v41 = v40;
      unint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
      os_log_type_t v43 = static os_log_type_t.error.getter(v42);
      if (os_log_type_enabled(v42, v43))
      {
        os_log_t loga = v42;
        uint64_t v44 = swift_slowAlloc(22LL, -1LL);
        uint64_t v74 = (void *)swift_slowAlloc(8LL, -1LL);
        uint64_t v80 = swift_slowAlloc(32LL, -1LL);
        uint64_t v86 = v80;
        *(_DWORD *)uint64_t v44 = 136446466;
        v83[0] = 0xE100000000000000LL;
        uint64_t v84 = a2;
        uint64_t v45 = sub_100004AEC(&qword_1009B5B08);
        uint64_t v46 = sub_1000372EC((unint64_t *)&unk_1009B5B10, &qword_1009B5B08, (uint64_t)&unk_100817578);
        v47._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v45, v46);
        String.append(_:)(v47);
        swift_bridgeObjectRelease();
        v48._countAndFlagsBits = 8250LL;
        v48._object = (void *)0xE200000000000000LL;
        String.append(_:)(v48);
        v49._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v45, v46);
        String.append(_:)(v49);
        swift_bridgeObjectRelease();
        v50._countAndFlagsBits = 62LL;
        v50._object = (void *)0xE100000000000000LL;
        String.append(_:)(v50);
        swift_release();
        aBlocunint64_t k = sub_1003F11D4(60LL, 0xE100000000000000LL, &v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v44 + 4, v44 + 12);
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v44 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2112;
        aBlocunint64_t k = (uint64_t)v41;
        id v51 = v41;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v44 + 14, v44 + 22);
        void *v74 = v41;

        _os_log_impl( (void *)&_mh_execute_header,  loga,  v43,  "%{public}s: Failed to make XPCSession from %@",  (uint8_t *)v44,  0x16u);
        uint64_t v52 = sub_100004AEC((uint64_t *)&unk_10099FB20);
        swift_arrayDestroy(v74, 1LL, v52);
        swift_slowDealloc(v74, -1LL, -1LL);
        swift_arrayDestroy(v80, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v80, -1LL, -1LL);
        swift_slowDealloc(v44, -1LL, -1LL);

        sub_10002214C((uint64_t)v7, v6);
      }

      else
      {
        swift_release();
        sub_10002214C((uint64_t)v7, v6);

        swift_release();
      }

      return 0LL;
    }
  }

  return v13;
}

uint64_t sub_10066FB7C(void *a1, uint64_t a2)
{
  id v4 = [a1 invalidationHandler];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = swift_allocObject(&unk_1009702C8, 24LL, 7LL);
    *(void *)(v6 + swift_weakDestroy(v0 + 16) = v5;
    uint64_t v7 = sub_1006734A0;
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v6 = 0LL;
  }

  uint64_t v8 = (uint64_t *)(a2 + 32);
  swift_beginAccess(a2 + 32, v85, 0LL, 0LL);
  uint64_t v9 = *(void *)(a2 + 32);
  id v10 = a1;
  swift_bridgeObjectRetain(v9);
  sub_10067255C(v11, (uint64_t)v10, (uint64_t *)&unk_1009A0AB0, (unint64_t *)&unk_1009A6B00);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();

  if (v13)
  {
    if (qword_10099B898 != -1) {
      swift_once(&qword_10099B898, sub_1006DA610);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    sub_10000A720(v14, (uint64_t)qword_100A2B2C0);
    id v15 = v10;
    swift_retain_n(a2, 2LL);
    id v16 = v15;
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.info.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      os_log_type_t type = v18;
      uint64_t v19 = swift_slowAlloc(22LL, -1LL);
      uint64_t v72 = (void *)swift_slowAlloc(8LL, -1LL);
      os_log_t log = (os_log_t)swift_slowAlloc(32LL, -1LL);
      uint64_t v86 = (uint64_t)log;
      *(_DWORD *)uint64_t v19 = 136446466;
      v83[0] = 0xE100000000000000LL;
      uint64_t v84 = a2;
      uint64_t v78 = (uint64_t)v7;
      uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009BA110);
      uint64_t v21 = sub_1000372EC((unint64_t *)&unk_1009B5AC0, (uint64_t *)&unk_1009BA110, (uint64_t)&unk_100817578);
      v22._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v20, v21);
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v23._countAndFlagsBits = 8250LL;
      v23._object = (void *)0xE200000000000000LL;
      String.append(_:)(v23);
      v24._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v20, v21);
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = 62LL;
      v25._object = (void *)0xE100000000000000LL;
      String.append(_:)(v25);
      swift_release();
      aBlocunint64_t k = sub_1003F11D4(60LL, 0xE100000000000000LL, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v19 + 4, v19 + 12);
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2112;
      aBlocunint64_t k = (uint64_t)v16;
      id v26 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v19 + 14, v19 + 22);
      void *v72 = v16;

      _os_log_impl( (void *)&_mh_execute_header,  v17,  type,  "%{public}s: Already have a session for %@",  (uint8_t *)v19,  0x16u);
      uint64_t v27 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v72, 1LL, v27);
      swift_slowDealloc(v72, -1LL, -1LL);
      swift_arrayDestroy(log, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(log, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);

      sub_10002214C(v78, v6);
    }

    else
    {

      swift_release_n(a2, 2LL);
      sub_10002214C((uint64_t)v7, v6);
    }
  }

  else
  {
    uint64_t v28 = sub_100004AEC((uint64_t *)&unk_1009A0AB0);
    swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
    id v29 = v10;
    uint64_t v30 = XPCSession.init(connection:)();
    if (v30)
    {
      uint64_t v31 = v30;
      uint64_t v32 = swift_allocObject(&unk_100970250, 24LL, 7LL);
      swift_weakInit(v32 + 16, a2);
      uint64_t v33 = (void *)swift_allocObject(&unk_100970278, 48LL, 7LL);
      v33[2] = v32;
      v33[3] = v29;
      v33[4] = v7;
      v33[5] = v6;
      v83[3] = (unint64_t)sub_10067319C;
      v83[4] = (unint64_t)v33;
      aBlocunint64_t k = (uint64_t)_NSConcreteStackBlock;
      v83[0] = 1107296256LL;
      v83[1] = (unint64_t)sub_1001C31E8;
      v83[2] = (unint64_t)&unk_100970290;
      uint64_t v34 = _Block_copy(&aBlock);
      id v35 = v29;
      sub_1000372DC((uint64_t)v7, v6);
      swift_release();
      [v35 setInvalidationHandler:v34];
      _Block_release(v34);
      uint64_t v36 = *(void *)(a2 + 32);
      if ((v36 & 0xC000000000000001LL) != 0)
      {
        if (v36 < 0) {
          uint64_t v37 = *(void *)(a2 + 32);
        }
        else {
          uint64_t v37 = v36 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(*(void *)(a2 + 32));
        uint64_t v38 = __CocoaSet.count.getter(v37);
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v38 = *(void *)(v36 + 16);
      }

      swift_beginAccess(a2 + 32, &aBlock, 33LL, 0LL);
      swift_retain();
      uint64_t v81 = v31;
      sub_1000C1A54(&v86, v31);
      swift_endAccess(&aBlock);
      swift_release();
      if (qword_10099B898 != -1) {
        swift_once(&qword_10099B898, sub_1006DA610);
      }
      uint64_t v53 = type metadata accessor for Logger(0LL);
      sub_10000A720(v53, (uint64_t)qword_100A2B2C0);
      uint64_t v54 = swift_retain_n(a2, 3LL);
      id v55 = (os_log_s *)Logger.logObject.getter(v54);
      os_log_type_t v56 = static os_log_type_t.info.getter(v55);
      if (os_log_type_enabled(v55, v56))
      {
        os_log_type_t v71 = v56;
        uint64_t v79 = v7;
        uint64_t v57 = swift_slowAlloc(32LL, -1LL);
        uint64_t v75 = swift_slowAlloc(32LL, -1LL);
        uint64_t v86 = v75;
        *(_DWORD *)uint64_t v57 = 136446722;
        aBlocunint64_t k = 60LL;
        v83[0] = 0xE100000000000000LL;
        uint64_t v84 = a2;
        uint64_t v58 = a2;
        uint64_t v59 = sub_100004AEC((uint64_t *)&unk_1009BA110);
        uint64_t v60 = sub_1000372EC((unint64_t *)&unk_1009B5AC0, (uint64_t *)&unk_1009BA110, (uint64_t)&unk_100817578);
        v61._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v59, v60);
        String.append(_:)(v61);
        swift_bridgeObjectRelease();
        v62._countAndFlagsBits = 8250LL;
        v62._object = (void *)0xE200000000000000LL;
        String.append(_:)(v62);
        v63._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v59, v60);
        String.append(_:)(v63);
        swift_bridgeObjectRelease();
        v64._countAndFlagsBits = 62LL;
        v64._object = (void *)0xE100000000000000LL;
        String.append(_:)(v64);
        aBlocunint64_t k = sub_1003F11D4(aBlock, v83[0], &v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v57 + 4, v57 + 12);
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v57 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2048;
        aBlocunint64_t k = v38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v57 + 14, v57 + 22);
        *(_WORD *)(v57 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2048;
        uint64_t v65 = *(void *)(v58 + 32);
        if ((v65 & 0xC000000000000001LL) != 0)
        {
          if (v65 < 0) {
            uint64_t v66 = *(void *)(v58 + 32);
          }
          else {
            uint64_t v66 = v65 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain(*(void *)(v58 + 32));
          uint64_t v67 = __CocoaSet.count.getter(v66);
          swift_release();
          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v67 = *(void *)(v65 + 16);
          swift_release();
        }

        uint64_t v7 = v79;
        aBlocunint64_t k = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v57 + 24, v57 + 32);
        swift_release();
        _os_log_impl( (void *)&_mh_execute_header,  v55,  v71,  "%{public}s: Session count: %ld -> %ld",  (uint8_t *)v57,  0x20u);
        swift_arrayDestroy(v75, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v75, -1LL, -1LL);
        swift_slowDealloc(v57, -1LL, -1LL);
      }

      else
      {

        swift_release_n(a2, 3LL);
      }

      uint64_t v68 = *v8;
      uint64_t v13 = v81;
      if ((*v8 & 0xC000000000000001LL) != 0)
      {
        if (v68 < 0) {
          uint64_t v69 = *v8;
        }
        else {
          uint64_t v69 = v68 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(*v8);
        __CocoaSet.count.getter(v69);
      }

      else
      {
        swift_bridgeObjectRetain(*v8);
      }

      sub_10002214C((uint64_t)v7, v6);
      swift_bridgeObjectRelease();
    }

    else
    {
      if (qword_10099B898 != -1) {
        swift_once(&qword_10099B898, sub_1006DA610);
      }
      uint64_t v39 = type metadata accessor for Logger(0LL);
      sub_10000A720(v39, (uint64_t)qword_100A2B2C0);
      id v40 = v29;
      swift_retain_n(a2, 2LL);
      id v41 = v40;
      unint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
      os_log_type_t v43 = static os_log_type_t.error.getter(v42);
      if (os_log_type_enabled(v42, v43))
      {
        os_log_t loga = v42;
        uint64_t v44 = swift_slowAlloc(22LL, -1LL);
        uint64_t v74 = (void *)swift_slowAlloc(8LL, -1LL);
        uint64_t v80 = swift_slowAlloc(32LL, -1LL);
        uint64_t v86 = v80;
        *(_DWORD *)uint64_t v44 = 136446466;
        v83[0] = 0xE100000000000000LL;
        uint64_t v84 = a2;
        uint64_t v45 = sub_100004AEC((uint64_t *)&unk_1009BA110);
        uint64_t v46 = sub_1000372EC((unint64_t *)&unk_1009B5AC0, (uint64_t *)&unk_1009BA110, (uint64_t)&unk_100817578);
        v47._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v45, v46);
        String.append(_:)(v47);
        swift_bridgeObjectRelease();
        v48._countAndFlagsBits = 8250LL;
        v48._object = (void *)0xE200000000000000LL;
        String.append(_:)(v48);
        v49._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v45, v46);
        String.append(_:)(v49);
        swift_bridgeObjectRelease();
        v50._countAndFlagsBits = 62LL;
        v50._object = (void *)0xE100000000000000LL;
        String.append(_:)(v50);
        swift_release();
        aBlocunint64_t k = sub_1003F11D4(60LL, 0xE100000000000000LL, &v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v44 + 4, v44 + 12);
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v44 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2112;
        aBlocunint64_t k = (uint64_t)v41;
        id v51 = v41;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v44 + 14, v44 + 22);
        void *v74 = v41;

        _os_log_impl( (void *)&_mh_execute_header,  loga,  v43,  "%{public}s: Failed to make XPCSession from %@",  (uint8_t *)v44,  0x16u);
        uint64_t v52 = sub_100004AEC((uint64_t *)&unk_10099FB20);
        swift_arrayDestroy(v74, 1LL, v52);
        swift_slowDealloc(v74, -1LL, -1LL);
        swift_arrayDestroy(v80, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v80, -1LL, -1LL);
        swift_slowDealloc(v44, -1LL, -1LL);

        sub_10002214C((uint64_t)v7, v6);
      }

      else
      {
        swift_release();
        sub_10002214C((uint64_t)v7, v6);

        swift_release();
      }

      return 0LL;
    }
  }

  return v13;
}

uint64_t sub_1006706AC(void *a1, uint64_t a2)
{
  id v4 = [a1 invalidationHandler];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = swift_allocObject(&unk_10096FDC8, 24LL, 7LL);
    *(void *)(v6 + swift_weakDestroy(v0 + 16) = v5;
    uint64_t v7 = sub_100672D80;
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v6 = 0LL;
  }

  uint64_t v8 = (uint64_t *)(a2 + 32);
  swift_beginAccess(a2 + 32, v85, 0LL, 0LL);
  uint64_t v9 = *(void *)(a2 + 32);
  id v10 = a1;
  swift_bridgeObjectRetain(v9);
  sub_10067255C(v11, (uint64_t)v10, (uint64_t *)&unk_1009AC2E0, (unint64_t *)&unk_1009A0B00);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();

  if (v13)
  {
    if (qword_10099B898 != -1) {
      swift_once(&qword_10099B898, sub_1006DA610);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    sub_10000A720(v14, (uint64_t)qword_100A2B2C0);
    id v15 = v10;
    swift_retain_n(a2, 2LL);
    id v16 = v15;
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.info.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      os_log_type_t type = v18;
      uint64_t v19 = swift_slowAlloc(22LL, -1LL);
      uint64_t v72 = (void *)swift_slowAlloc(8LL, -1LL);
      os_log_t log = (os_log_t)swift_slowAlloc(32LL, -1LL);
      uint64_t v86 = (uint64_t)log;
      *(_DWORD *)uint64_t v19 = 136446466;
      v83[0] = 0xE100000000000000LL;
      uint64_t v84 = a2;
      uint64_t v78 = (uint64_t)v7;
      uint64_t v20 = sub_100004AEC(&qword_1009B5AD8);
      uint64_t v21 = sub_1000372EC((unint64_t *)&unk_1009B5AE0, &qword_1009B5AD8, (uint64_t)&unk_100817578);
      v22._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v20, v21);
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v23._countAndFlagsBits = 8250LL;
      v23._object = (void *)0xE200000000000000LL;
      String.append(_:)(v23);
      v24._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v20, v21);
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = 62LL;
      v25._object = (void *)0xE100000000000000LL;
      String.append(_:)(v25);
      swift_release();
      aBlocunint64_t k = sub_1003F11D4(60LL, 0xE100000000000000LL, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v19 + 4, v19 + 12);
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2112;
      aBlocunint64_t k = (uint64_t)v16;
      id v26 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v19 + 14, v19 + 22);
      void *v72 = v16;

      _os_log_impl( (void *)&_mh_execute_header,  v17,  type,  "%{public}s: Already have a session for %@",  (uint8_t *)v19,  0x16u);
      uint64_t v27 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v72, 1LL, v27);
      swift_slowDealloc(v72, -1LL, -1LL);
      swift_arrayDestroy(log, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(log, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);

      sub_10002214C(v78, v6);
    }

    else
    {

      swift_release_n(a2, 2LL);
      sub_10002214C((uint64_t)v7, v6);
    }
  }

  else
  {
    uint64_t v28 = sub_100004AEC((uint64_t *)&unk_1009AC2E0);
    swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
    id v29 = v10;
    uint64_t v30 = XPCSession.init(connection:)();
    if (v30)
    {
      uint64_t v31 = v30;
      uint64_t v32 = swift_allocObject(&unk_10096FD50, 24LL, 7LL);
      swift_weakInit(v32 + 16, a2);
      uint64_t v33 = (void *)swift_allocObject(&unk_10096FD78, 48LL, 7LL);
      v33[2] = v32;
      v33[3] = v29;
      v33[4] = v7;
      v33[5] = v6;
      v83[3] = (unint64_t)sub_100672D5C;
      v83[4] = (unint64_t)v33;
      aBlocunint64_t k = (uint64_t)_NSConcreteStackBlock;
      v83[0] = 1107296256LL;
      v83[1] = (unint64_t)sub_1001C31E8;
      v83[2] = (unint64_t)&unk_10096FD90;
      uint64_t v34 = _Block_copy(&aBlock);
      id v35 = v29;
      sub_1000372DC((uint64_t)v7, v6);
      swift_release();
      [v35 setInvalidationHandler:v34];
      _Block_release(v34);
      uint64_t v36 = *(void *)(a2 + 32);
      if ((v36 & 0xC000000000000001LL) != 0)
      {
        if (v36 < 0) {
          uint64_t v37 = *(void *)(a2 + 32);
        }
        else {
          uint64_t v37 = v36 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(*(void *)(a2 + 32));
        uint64_t v38 = __CocoaSet.count.getter(v37);
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v38 = *(void *)(v36 + 16);
      }

      swift_beginAccess(a2 + 32, &aBlock, 33LL, 0LL);
      swift_retain();
      uint64_t v81 = v31;
      sub_1000C1A78(&v86, v31);
      swift_endAccess(&aBlock);
      swift_release();
      if (qword_10099B898 != -1) {
        swift_once(&qword_10099B898, sub_1006DA610);
      }
      uint64_t v53 = type metadata accessor for Logger(0LL);
      sub_10000A720(v53, (uint64_t)qword_100A2B2C0);
      uint64_t v54 = swift_retain_n(a2, 3LL);
      id v55 = (os_log_s *)Logger.logObject.getter(v54);
      os_log_type_t v56 = static os_log_type_t.info.getter(v55);
      if (os_log_type_enabled(v55, v56))
      {
        os_log_type_t v71 = v56;
        uint64_t v79 = v7;
        uint64_t v57 = swift_slowAlloc(32LL, -1LL);
        uint64_t v75 = swift_slowAlloc(32LL, -1LL);
        uint64_t v86 = v75;
        *(_DWORD *)uint64_t v57 = 136446722;
        aBlocunint64_t k = 60LL;
        v83[0] = 0xE100000000000000LL;
        uint64_t v84 = a2;
        uint64_t v58 = a2;
        uint64_t v59 = sub_100004AEC(&qword_1009B5AD8);
        uint64_t v60 = sub_1000372EC((unint64_t *)&unk_1009B5AE0, &qword_1009B5AD8, (uint64_t)&unk_100817578);
        v61._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v59, v60);
        String.append(_:)(v61);
        swift_bridgeObjectRelease();
        v62._countAndFlagsBits = 8250LL;
        v62._object = (void *)0xE200000000000000LL;
        String.append(_:)(v62);
        v63._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v59, v60);
        String.append(_:)(v63);
        swift_bridgeObjectRelease();
        v64._countAndFlagsBits = 62LL;
        v64._object = (void *)0xE100000000000000LL;
        String.append(_:)(v64);
        aBlocunint64_t k = sub_1003F11D4(aBlock, v83[0], &v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v57 + 4, v57 + 12);
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v57 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2048;
        aBlocunint64_t k = v38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v57 + 14, v57 + 22);
        *(_WORD *)(v57 + 2_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2048;
        uint64_t v65 = *(void *)(v58 + 32);
        if ((v65 & 0xC000000000000001LL) != 0)
        {
          if (v65 < 0) {
            uint64_t v66 = *(void *)(v58 + 32);
          }
          else {
            uint64_t v66 = v65 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain(*(void *)(v58 + 32));
          uint64_t v67 = __CocoaSet.count.getter(v66);
          swift_release();
          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v67 = *(void *)(v65 + 16);
          swift_release();
        }

        uint64_t v7 = v79;
        aBlocunint64_t k = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v57 + 24, v57 + 32);
        swift_release();
        _os_log_impl( (void *)&_mh_execute_header,  v55,  v71,  "%{public}s: Session count: %ld -> %ld",  (uint8_t *)v57,  0x20u);
        swift_arrayDestroy(v75, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v75, -1LL, -1LL);
        swift_slowDealloc(v57, -1LL, -1LL);
      }

      else
      {

        swift_release_n(a2, 3LL);
      }

      uint64_t v68 = *v8;
      uint64_t v13 = v81;
      if ((*v8 & 0xC000000000000001LL) != 0)
      {
        if (v68 < 0) {
          uint64_t v69 = *v8;
        }
        else {
          uint64_t v69 = v68 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(*v8);
        __CocoaSet.count.getter(v69);
      }

      else
      {
        swift_bridgeObjectRetain(*v8);
      }

      sub_10002214C((uint64_t)v7, v6);
      swift_bridgeObjectRelease();
    }

    else
    {
      if (qword_10099B898 != -1) {
        swift_once(&qword_10099B898, sub_1006DA610);
      }
      uint64_t v39 = type metadata accessor for Logger(0LL);
      sub_10000A720(v39, (uint64_t)qword_100A2B2C0);
      id v40 = v29;
      swift_retain_n(a2, 2LL);
      id v41 = v40;
      unint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
      os_log_type_t v43 = static os_log_type_t.error.getter(v42);
      if (os_log_type_enabled(v42, v43))
      {
        os_log_t loga = v42;
        uint64_t v44 = swift_slowAlloc(22LL, -1LL);
        uint64_t v74 = (void *)swift_slowAlloc(8LL, -1LL);
        uint64_t v80 = swift_slowAlloc(32LL, -1LL);
        uint64_t v86 = v80;
        *(_DWORD *)uint64_t v44 = 136446466;
        v83[0] = 0xE100000000000000LL;
        uint64_t v84 = a2;
        uint64_t v45 = sub_100004AEC(&qword_1009B5AD8);
        uint64_t v46 = sub_1000372EC((unint64_t *)&unk_1009B5AE0, &qword_1009B5AD8, (uint64_t)&unk_100817578);
        v47._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v45, v46);
        String.append(_:)(v47);
        swift_bridgeObjectRelease();
        v48._countAndFlagsBits = 8250LL;
        v48._object = (void *)0xE200000000000000LL;
        String.append(_:)(v48);
        v49._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v45, v46);
        String.append(_:)(v49);
        swift_bridgeObjectRelease();
        v50._countAndFlagsBits = 62LL;
        v50._object = (void *)0xE100000000000000LL;
        String.append(_:)(v50);
        swift_release();
        aBlocunint64_t k = sub_1003F11D4(60LL, 0xE100000000000000LL, &v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v44 + 4, v44 + 12);
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v44 + 1_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2) = 2112;
        aBlocunint64_t k = (uint64_t)v41;
        id v51 = v41;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v83, v44 + 14, v44 + 22);
        void *v74 = v41;

        _os_log_impl( (void *)&_mh_execute_header,  loga,  v43,  "%{public}s: Failed to make XPCSession from %@",  (uint8_t *)v44,  0x16u);
        uint64_t v52 = sub_100004AEC((uint64_t *)&unk_10099FB20);
        swift_arrayDestroy(v74, 1LL, v52);
        swift_slowDealloc(v74, -1LL, -1LL);
        swift_arrayDestroy(v80, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v80, -1LL, -1LL);
        swift_slowDealloc(v44, -1LL, -1LL);

        sub_10002214C((uint64_t)v7, v6);
      }

      else
      {
        swift_release();
        sub_10002214C((uint64_t)v7, v6);

        swift_release();
      }

      return 0LL;
    }
  }

  return v13;
}

uint64_t sub_1006711DC(uint64_t a1, void *a2, void (*a3)(void))
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v30, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v5);
  if (result)
  {
    uint64_t v7 = result;
    if (qword_10099B898 != -1) {
      swift_once(&qword_10099B898, sub_1006DA610);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    sub_10000A720(v8, (uint64_t)qword_100A2B2C0);
    uint64_t v9 = swift_retain_n(v7, 2LL);
    id v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      id v26 = a3;
      uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v13 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v12 = 136446210;
      uint64_t v27 = v13;
      aBlocunint64_t k = 60LL;
      v29[0] = 0xE100000000000000LL;
      swift_retain();
      uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009BA0F0);
      uint64_t v15 = sub_1000372EC(&qword_1009B5B00, (uint64_t *)&unk_1009BA0F0, (uint64_t)&unk_100817578);
      v16._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v14, v15);
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      v17._countAndFlagsBits = 8250LL;
      v17._object = (void *)0xE200000000000000LL;
      String.append(_:)(v17);
      v18._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v14, v15);
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      v19._countAndFlagsBits = 62LL;
      v19._object = (void *)0xE100000000000000LL;
      String.append(_:)(v19);
      swift_release();
      aBlocunint64_t k = sub_1003F11D4(60LL, 0xE100000000000000LL, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v29, v12 + 4, v12 + 12);
      swift_release_n(v7, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s: Invalidation handler fired.", v12, 0xCu);
      swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1LL, -1LL);
      uint64_t v20 = v12;
      a3 = v26;
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v7, 2LL);
    }

    uint64_t v21 = *(dispatch_queue_s **)(v7 + 16);
    uint64_t v22 = swift_allocObject(&unk_1009700C0, 32LL, 7LL);
    *(void *)(v22 + swift_weakDestroy(v0 + 16) = v7;
    *(void *)(v22 + 24) = a2;
    uint64_t v23 = swift_allocObject(&unk_1009700E8, 32LL, 7LL);
    *(void *)(v23 + swift_weakDestroy(v0 + 16) = sub_1006730B8;
    *(void *)(v23 + 24) = v22;
    v29[3] = sub_100154688;
    v29[4] = v23;
    aBlocunint64_t k = (uint64_t)_NSConcreteStackBlock;
    v29[0] = 1107296256LL;
    v29[1] = sub_100025BD4;
    id v29[2] = &unk_100970100;
    Swift::String v24 = _Block_copy(&aBlock);
    swift_retain();
    id v25 = a2;
    swift_retain();
    swift_release();
    dispatch_sync(v21, v24);
    _Block_release(v24);
    LOBYTE(v24) = swift_isEscapingClosureAtFileLocation(v23, "", 110LL, 89LL, 27LL, 1LL);
    swift_release();
    uint64_t result = swift_release();
    if ((v24 & 1) != 0)
    {
      __break(1u);
    }

    else
    {
      if (a3) {
        a3(result);
      }
      return swift_release();
    }
  }

  return result;
}

uint64_t sub_100671588(uint64_t a1, void *a2, void (*a3)(void))
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v30, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v5);
  if (result)
  {
    uint64_t v7 = result;
    if (qword_10099B898 != -1) {
      swift_once(&qword_10099B898, sub_1006DA610);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    sub_10000A720(v8, (uint64_t)qword_100A2B2C0);
    uint64_t v9 = swift_retain_n(v7, 2LL);
    id v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      id v26 = a3;
      uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v13 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v12 = 136446210;
      uint64_t v27 = v13;
      aBlocunint64_t k = 60LL;
      v29[0] = 0xE100000000000000LL;
      swift_retain();
      uint64_t v14 = sub_100004AEC(&qword_1009AE530);
      uint64_t v15 = sub_1000372EC((unint64_t *)&unk_1009B5AF0, &qword_1009AE530, (uint64_t)&unk_100817578);
      v16._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v14, v15);
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      v17._countAndFlagsBits = 8250LL;
      v17._object = (void *)0xE200000000000000LL;
      String.append(_:)(v17);
      v18._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v14, v15);
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      v19._countAndFlagsBits = 62LL;
      v19._object = (void *)0xE100000000000000LL;
      String.append(_:)(v19);
      swift_release();
      aBlocunint64_t k = sub_1003F11D4(60LL, 0xE100000000000000LL, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v29, v12 + 4, v12 + 12);
      swift_release_n(v7, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s: Invalidation handler fired.", v12, 0xCu);
      swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1LL, -1LL);
      uint64_t v20 = v12;
      a3 = v26;
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v7, 2LL);
    }

    uint64_t v21 = *(dispatch_queue_s **)(v7 + 16);
    uint64_t v22 = swift_allocObject(&unk_10096FFA8, 32LL, 7LL);
    *(void *)(v22 + swift_weakDestroy(v0 + 16) = v7;
    *(void *)(v22 + 24) = a2;
    uint64_t v23 = swift_allocObject(&unk_10096FFD0, 32LL, 7LL);
    *(void *)(v23 + swift_weakDestroy(v0 + 16) = sub_10067304C;
    *(void *)(v23 + 24) = v22;
    v29[3] = sub_100154688;
    v29[4] = v23;
    aBlocunint64_t k = (uint64_t)_NSConcreteStackBlock;
    v29[0] = 1107296256LL;
    v29[1] = sub_100025BD4;
    id v29[2] = &unk_10096FFE8;
    Swift::String v24 = _Block_copy(&aBlock);
    swift_retain();
    id v25 = a2;
    swift_retain();
    swift_release();
    dispatch_sync(v21, v24);
    _Block_release(v24);
    LOBYTE(v24) = swift_isEscapingClosureAtFileLocation(v23, "", 110LL, 89LL, 27LL, 1LL);
    swift_release();
    uint64_t result = swift_release();
    if ((v24 & 1) != 0)
    {
      __break(1u);
    }

    else
    {
      if (a3) {
        a3(result);
      }
      return swift_release();
    }
  }

  return result;
}

uint64_t sub_100671934(uint64_t a1, void *a2, void (*a3)(void))
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v30, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v5);
  if (result)
  {
    uint64_t v7 = result;
    if (qword_10099B898 != -1) {
      swift_once(&qword_10099B898, sub_1006DA610);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    sub_10000A720(v8, (uint64_t)qword_100A2B2C0);
    uint64_t v9 = swift_retain_n(v7, 2LL);
    id v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      id v26 = a3;
      uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v13 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v12 = 136446210;
      uint64_t v27 = v13;
      aBlocunint64_t k = 60LL;
      v29[0] = 0xE100000000000000LL;
      swift_retain();
      uint64_t v14 = sub_100004AEC(&qword_1009B5B08);
      uint64_t v15 = sub_1000372EC((unint64_t *)&unk_1009B5B10, &qword_1009B5B08, (uint64_t)&unk_100817578);
      v16._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v14, v15);
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      v17._countAndFlagsBits = 8250LL;
      v17._object = (void *)0xE200000000000000LL;
      String.append(_:)(v17);
      v18._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v14, v15);
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      v19._countAndFlagsBits = 62LL;
      v19._object = (void *)0xE100000000000000LL;
      String.append(_:)(v19);
      swift_release();
      aBlocunint64_t k = sub_1003F11D4(60LL, 0xE100000000000000LL, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v29, v12 + 4, v12 + 12);
      swift_release_n(v7, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s: Invalidation handler fired.", v12, 0xCu);
      swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1LL, -1LL);
      uint64_t v20 = v12;
      a3 = v26;
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v7, 2LL);
    }

    uint64_t v21 = *(dispatch_queue_s **)(v7 + 16);
    uint64_t v22 = swift_allocObject(&unk_1009701D8, 32LL, 7LL);
    *(void *)(v22 + swift_weakDestroy(v0 + 16) = v7;
    *(void *)(v22 + 24) = a2;
    uint64_t v23 = swift_allocObject(&unk_100970200, 32LL, 7LL);
    *(void *)(v23 + swift_weakDestroy(v0 + 16) = sub_100472634;
    *(void *)(v23 + 24) = v22;
    v29[3] = sub_100154688;
    v29[4] = v23;
    aBlocunint64_t k = (uint64_t)_NSConcreteStackBlock;
    v29[0] = 1107296256LL;
    v29[1] = sub_100025BD4;
    id v29[2] = &unk_100970218;
    Swift::String v24 = _Block_copy(&aBlock);
    swift_retain();
    id v25 = a2;
    swift_retain();
    swift_release();
    dispatch_sync(v21, v24);
    _Block_release(v24);
    LOBYTE(v24) = swift_isEscapingClosureAtFileLocation(v23, "", 110LL, 89LL, 27LL, 1LL);
    swift_release();
    uint64_t result = swift_release();
    if ((v24 & 1) != 0)
    {
      __break(1u);
    }

    else
    {
      if (a3) {
        a3(result);
      }
      return swift_release();
    }
  }

  return result;
}

uint64_t sub_100671CE0(uint64_t a1, void *a2, void (*a3)(void))
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v30, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v5);
  if (result)
  {
    uint64_t v7 = result;
    if (qword_10099B898 != -1) {
      swift_once(&qword_10099B898, sub_1006DA610);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    sub_10000A720(v8, (uint64_t)qword_100A2B2C0);
    uint64_t v9 = swift_retain_n(v7, 2LL);
    id v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      id v26 = a3;
      uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v13 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v12 = 136446210;
      uint64_t v27 = v13;
      aBlocunint64_t k = 60LL;
      v29[0] = 0xE100000000000000LL;
      swift_retain();
      uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009BA110);
      uint64_t v15 = sub_1000372EC((unint64_t *)&unk_1009B5AC0, (uint64_t *)&unk_1009BA110, (uint64_t)&unk_100817578);
      v16._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v14, v15);
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      v17._countAndFlagsBits = 8250LL;
      v17._object = (void *)0xE200000000000000LL;
      String.append(_:)(v17);
      v18._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v14, v15);
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      v19._countAndFlagsBits = 62LL;
      v19._object = (void *)0xE100000000000000LL;
      String.append(_:)(v19);
      swift_release();
      aBlocunint64_t k = sub_1003F11D4(60LL, 0xE100000000000000LL, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v29, v12 + 4, v12 + 12);
      swift_release_n(v7, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s: Invalidation handler fired.", v12, 0xCu);
      swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1LL, -1LL);
      uint64_t v20 = v12;
      a3 = v26;
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v7, 2LL);
    }

    uint64_t v21 = *(dispatch_queue_s **)(v7 + 16);
    uint64_t v22 = swift_allocObject(&unk_1009702F0, 32LL, 7LL);
    *(void *)(v22 + swift_weakDestroy(v0 + 16) = v7;
    *(void *)(v22 + 24) = a2;
    uint64_t v23 = swift_allocObject(&unk_100970318, 32LL, 7LL);
    *(void *)(v23 + swift_weakDestroy(v0 + 16) = sub_1006731AC;
    *(void *)(v23 + 24) = v22;
    v29[3] = sub_100154688;
    v29[4] = v23;
    aBlocunint64_t k = (uint64_t)_NSConcreteStackBlock;
    v29[0] = 1107296256LL;
    v29[1] = sub_100025BD4;
    id v29[2] = &unk_100970330;
    Swift::String v24 = _Block_copy(&aBlock);
    swift_retain();
    id v25 = a2;
    swift_retain();
    swift_release();
    dispatch_sync(v21, v24);
    _Block_release(v24);
    LOBYTE(v24) = swift_isEscapingClosureAtFileLocation(v23, "", 110LL, 89LL, 27LL, 1LL);
    swift_release();
    uint64_t result = swift_release();
    if ((v24 & 1) != 0)
    {
      __break(1u);
    }

    else
    {
      if (a3) {
        a3(result);
      }
      return swift_release();
    }
  }

  return result;
}

uint64_t sub_10067208C(uint64_t a1, void *a2, void (*a3)(void))
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v30, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v5);
  if (result)
  {
    uint64_t v7 = result;
    if (qword_10099B898 != -1) {
      swift_once(&qword_10099B898, sub_1006DA610);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    sub_10000A720(v8, (uint64_t)qword_100A2B2C0);
    uint64_t v9 = swift_retain_n(v7, 2LL);
    id v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      id v26 = a3;
      uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v13 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v12 = 136446210;
      uint64_t v27 = v13;
      aBlocunint64_t k = 60LL;
      v29[0] = 0xE100000000000000LL;
      swift_retain();
      uint64_t v14 = sub_100004AEC(&qword_1009B5AD8);
      uint64_t v15 = sub_1000372EC((unint64_t *)&unk_1009B5AE0, &qword_1009B5AD8, (uint64_t)&unk_100817578);
      v16._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v14, v15);
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      v17._countAndFlagsBits = 8250LL;
      v17._object = (void *)0xE200000000000000LL;
      String.append(_:)(v17);
      v18._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v14, v15);
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      v19._countAndFlagsBits = 62LL;
      v19._object = (void *)0xE100000000000000LL;
      String.append(_:)(v19);
      swift_release();
      aBlocunint64_t k = sub_1003F11D4(60LL, 0xE100000000000000LL, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v29, v12 + 4, v12 + 12);
      swift_release_n(v7, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s: Invalidation handler fired.", v12, 0xCu);
      swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1LL, -1LL);
      uint64_t v20 = v12;
      a3 = v26;
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v7, 2LL);
    }

    uint64_t v21 = *(dispatch_queue_s **)(v7 + 16);
    uint64_t v22 = swift_allocObject(&unk_10096FDF0, 32LL, 7LL);
    *(void *)(v22 + swift_weakDestroy(v0 + 16) = v7;
    *(void *)(v22 + 24) = a2;
    uint64_t v23 = swift_allocObject(&unk_10096FE18, 32LL, 7LL);
    *(void *)(v23 + swift_weakDestroy(v0 + 16) = sub_100672D90;
    *(void *)(v23 + 24) = v22;
    v29[3] = sub_100095030;
    v29[4] = v23;
    aBlocunint64_t k = (uint64_t)_NSConcreteStackBlock;
    v29[0] = 1107296256LL;
    v29[1] = sub_100025BD4;
    id v29[2] = &unk_10096FE30;
    Swift::String v24 = _Block_copy(&aBlock);
    swift_retain();
    id v25 = a2;
    swift_retain();
    swift_release();
    dispatch_sync(v21, v24);
    _Block_release(v24);
    LOBYTE(v24) = swift_isEscapingClosureAtFileLocation(v23, "", 110LL, 89LL, 27LL, 1LL);
    swift_release();
    uint64_t result = swift_release();
    if ((v24 & 1) != 0)
    {
      __break(1u);
    }

    else
    {
      if (a3) {
        a3(result);
      }
      return swift_release();
    }
  }

  return result;
}